{"total_count": 225, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/schematics/schematics/issues/587", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/587/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/587/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/587/events", "html_url": "https://github.com/schematics/schematics/issues/587", "id": 415307899, "node_id": "MDU6SXNzdWU0MTUzMDc4OTk=", "number": 587, "title": "invalid utf-8 leads to error `re.py`", "user": {"login": "bwo", "id": 68839, "node_id": "MDQ6VXNlcjY4ODM5", "avatar_url": "https://avatars1.githubusercontent.com/u/68839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwo", "html_url": "https://github.com/bwo", "followers_url": "https://api.github.com/users/bwo/followers", "following_url": "https://api.github.com/users/bwo/following{/other_user}", "gists_url": "https://api.github.com/users/bwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwo/subscriptions", "organizations_url": "https://api.github.com/users/bwo/orgs", "repos_url": "https://api.github.com/users/bwo/repos", "events_url": "https://api.github.com/users/bwo/events{/privacy}", "received_events_url": "https://api.github.com/users/bwo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-27T20:17:11Z", "updated_at": "2019-02-27T20:37:57Z", "closed_at": "2019-02-27T20:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "this is with v2.1.0. I would expect this to raise some kind of schematics-related error, not leak an error from re.\r\n\r\n```\r\nIn [1]: import schematics.types as t\r\n\r\nIn [2]: t.StringType('\\xf0\\x28\\x8c\\xbc')\r\n---------------------------------------------------------------------------\r\nerror                                     Traceback (most recent call last)\r\n<ipython-input-3-317e0df232af> in <module>()\r\n----> 1 t.StringType('\\xf0\\x28\\x8c\\xbc')\r\n\r\n/home/benwolfson/.virtualenvs/test/lib/python2.7/site-packages/schematics/types/base.pyc in __init__(self, regex, max_length, min_length, **kwargs)\r\n    393         # type: (...) -> typing.Text\r\n    394\r\n--> 395         self.regex = re.compile(regex) if regex else None\r\n    396         self.max_length = max_length\r\n    397         self.min_length = min_length\r\n\r\n/usr/lib/python2.7/re.pyc in compile(pattern, flags)\r\n    188 def compile(pattern, flags=0):\r\n    189     \"Compile a regular expression pattern, returning a pattern object.\"\r\n--> 190     return _compile(pattern, flags)\r\n    191\r\n    192 def purge():\r\n\r\n/usr/lib/python2.7/re.pyc in _compile(*key)\r\n    242         p = sre_compile.compile(pattern, flags)\r\n    243     except error, v:\r\n--> 244         raise error, v # invalid expression\r\n    245     if not bypass_cache:\r\n    246         if len(_cache) >= _MAXCACHE:\r\n\r\nerror: unbalanced parenthesis\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/579", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/579/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/579/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/579/events", "html_url": "https://github.com/schematics/schematics/issues/579", "id": 397088990, "node_id": "MDU6SXNzdWUzOTcwODg5OTA=", "number": 579, "title": "Should we drop Python 2 support?", "user": {"login": "kstrauser", "id": 295674, "node_id": "MDQ6VXNlcjI5NTY3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/295674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kstrauser", "html_url": "https://github.com/kstrauser", "followers_url": "https://api.github.com/users/kstrauser/followers", "following_url": "https://api.github.com/users/kstrauser/following{/other_user}", "gists_url": "https://api.github.com/users/kstrauser/gists{/gist_id}", "starred_url": "https://api.github.com/users/kstrauser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kstrauser/subscriptions", "organizations_url": "https://api.github.com/users/kstrauser/orgs", "repos_url": "https://api.github.com/users/kstrauser/repos", "events_url": "https://api.github.com/users/kstrauser/events{/privacy}", "received_events_url": "https://api.github.com/users/kstrauser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-08T21:16:05Z", "updated_at": "2019-01-21T15:24:20Z", "closed_at": "2019-01-21T15:24:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/570", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/570/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/570/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/570/events", "html_url": "https://github.com/schematics/schematics/issues/570", "id": 367241505, "node_id": "MDU6SXNzdWUzNjcyNDE1MDU=", "number": 570, "title": "Python 3.7 support", "user": {"login": "danqing", "id": 5134133, "node_id": "MDQ6VXNlcjUxMzQxMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5134133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danqing", "html_url": "https://github.com/danqing", "followers_url": "https://api.github.com/users/danqing/followers", "following_url": "https://api.github.com/users/danqing/following{/other_user}", "gists_url": "https://api.github.com/users/danqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/danqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danqing/subscriptions", "organizations_url": "https://api.github.com/users/danqing/orgs", "repos_url": "https://api.github.com/users/danqing/repos", "events_url": "https://api.github.com/users/danqing/events{/privacy}", "received_events_url": "https://api.github.com/users/danqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-05T14:42:05Z", "updated_at": "2018-11-17T14:24:49Z", "closed_at": "2018-11-17T14:24:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seems to be some deprecated function calls, including:\r\n\r\n```\r\nschematics-2.1.0-py3.7.egg/schematics/exceptions.py:7: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  from collections import Sequence, Mapping\r\nschematics-2.1.0-py3.7.egg/schematics/validate.py:123: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() or inspect.getfullargspec()\r\n  if len(inspect.getargspec(func).args) < argcount:\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/559", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/559/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/559/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/559/events", "html_url": "https://github.com/schematics/schematics/issues/559", "id": 324600889, "node_id": "MDU6SXNzdWUzMjQ2MDA4ODk=", "number": 559, "title": "Release plan?", "user": {"login": "rougeth", "id": 431892, "node_id": "MDQ6VXNlcjQzMTg5Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/431892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rougeth", "html_url": "https://github.com/rougeth", "followers_url": "https://api.github.com/users/rougeth/followers", "following_url": "https://api.github.com/users/rougeth/following{/other_user}", "gists_url": "https://api.github.com/users/rougeth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rougeth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rougeth/subscriptions", "organizations_url": "https://api.github.com/users/rougeth/orgs", "repos_url": "https://api.github.com/users/rougeth/repos", "events_url": "https://api.github.com/users/rougeth/events{/privacy}", "received_events_url": "https://api.github.com/users/rougeth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-19T04:47:26Z", "updated_at": "2018-05-23T12:41:47Z", "closed_at": "2018-05-23T12:41:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello people, I would like to why we don't have the 2.1.0 release yet. Is there a plan for releasing? I couldn't find anything about it here.\r\n\r\nThanks! schematics is awesome! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/558", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/558/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/558/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/558/events", "html_url": "https://github.com/schematics/schematics/issues/558", "id": 323043802, "node_id": "MDU6SXNzdWUzMjMwNDM4MDI=", "number": 558, "title": "default value", "user": {"login": "runtel", "id": 11735949, "node_id": "MDQ6VXNlcjExNzM1OTQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/11735949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/runtel", "html_url": "https://github.com/runtel", "followers_url": "https://api.github.com/users/runtel/followers", "following_url": "https://api.github.com/users/runtel/following{/other_user}", "gists_url": "https://api.github.com/users/runtel/gists{/gist_id}", "starred_url": "https://api.github.com/users/runtel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/runtel/subscriptions", "organizations_url": "https://api.github.com/users/runtel/orgs", "repos_url": "https://api.github.com/users/runtel/repos", "events_url": "https://api.github.com/users/runtel/events{/privacy}", "received_events_url": "https://api.github.com/users/runtel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-15T02:22:46Z", "updated_at": "2018-06-26T00:13:25Z", "closed_at": "2018-06-26T00:13:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all.\r\nMay be need to add class for get default value?\r\nSmall change in BaseType.\r\n\r\n```python3\r\n\r\n@metaclass(TypeMeta)\r\nclass BaseType(object):\r\n...\r\n    @property\r\n    def default(self):\r\n        default = self._default\r\n        if callable(default):\r\n            default = default(self)\r\n        return default\r\n\r\ndef get_default(field):\r\n    cls_name = field.owner_model.__module__ + field.owner_model.__name__\r\n    DEFAULTS = {\"path.to.test.Test\": {\"some\": \"true\"}}\r\n    return DEFAULTS[cls_name].get(field)\r\n\r\n\r\n# Using:\r\nclass Test(Model):\r\n    some = types.StringType(default=get_default)\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/553", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/553/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/553/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/553/events", "html_url": "https://github.com/schematics/schematics/issues/553", "id": 307385201, "node_id": "MDU6SXNzdWUzMDczODUyMDE=", "number": 553, "title": "default=uuid.uuid4() does not renew", "user": {"login": "xarbit", "id": 590307, "node_id": "MDQ6VXNlcjU5MDMwNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/590307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xarbit", "html_url": "https://github.com/xarbit", "followers_url": "https://api.github.com/users/xarbit/followers", "following_url": "https://api.github.com/users/xarbit/following{/other_user}", "gists_url": "https://api.github.com/users/xarbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/xarbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xarbit/subscriptions", "organizations_url": "https://api.github.com/users/xarbit/orgs", "repos_url": "https://api.github.com/users/xarbit/repos", "events_url": "https://api.github.com/users/xarbit/events{/privacy}", "received_events_url": "https://api.github.com/users/xarbit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-21T19:22:36Z", "updated_at": "2018-03-21T20:06:18Z", "closed_at": "2018-03-21T20:06:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "if m_uuid as shown in the code below is empty, I want to generate a new one, so i set the default to uuid.uuid4(). \r\nFor some reason it always creates the same one, its not unique .\r\nIt works for datetime.datetime.now()\r\n\r\nAny idea what I can do?\r\n\r\n\r\n```\r\nclass Validator(Model):\r\n\r\n    html = BooleanType(required=True)\r\n    m_uuid = UUIDType(required=True, default=uuid.uuid4())\r\n    serial = IntType(required=True, default=1)\r\n    time_stamp = StringType(required=True default='{:%Y%m%d%H%M%S}'.format(datetime.datetime.now()))\r\n```\r\n\r\nUPDATE: \r\nfigured ou if I change default=uuid.uuid4() to default=uuid.uuid4 then it works.\r\nBut then the datetime.datetime.now() does not update.\r\n\r\nSo I am reopening the issue.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/548", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/548/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/548/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/548/events", "html_url": "https://github.com/schematics/schematics/issues/548", "id": 305753209, "node_id": "MDU6SXNzdWUzMDU3NTMyMDk=", "number": 548, "title": "Use default value when value is None", "user": {"login": "leahein", "id": 15165051, "node_id": "MDQ6VXNlcjE1MTY1MDUx", "avatar_url": "https://avatars2.githubusercontent.com/u/15165051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leahein", "html_url": "https://github.com/leahein", "followers_url": "https://api.github.com/users/leahein/followers", "following_url": "https://api.github.com/users/leahein/following{/other_user}", "gists_url": "https://api.github.com/users/leahein/gists{/gist_id}", "starred_url": "https://api.github.com/users/leahein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leahein/subscriptions", "organizations_url": "https://api.github.com/users/leahein/orgs", "repos_url": "https://api.github.com/users/leahein/repos", "events_url": "https://api.github.com/users/leahein/events{/privacy}", "received_events_url": "https://api.github.com/users/leahein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-15T23:25:26Z", "updated_at": "2018-03-19T16:10:08Z", "closed_at": "2018-03-19T16:10:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using the default keyword is convenient.\r\n```python\r\nclass Person(Model):\r\n    name = StringType(default='Guido')\r\n\r\np = Person() \r\nprint(p.name) \r\n>>> 'Guido'\r\n```\r\nHowever, if the value gets set to None, the default isn't triggered.\r\n\r\n```python\r\np = Person({'name': None}) \r\nprint(p.name)\r\n>>>'None'\r\n```\r\nThis makes it hard to abstract away the instantiation of a model.\r\nIdeally the default value should always be set when the value is None.\r\n\r\nUse case:\r\nWhen getting a request from the web that you'd like to parse, the request will look something like this:\r\n`{\"name\": None}`.  If you dump this into your Schematics Model, the default will never get set.  \r\n\r\nIn this case, subclassing the type and overriding the `convert`, `to_native`, or `to_primitive` methods doesn't work, because they never get called when a `None` value is passed in.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/545", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/545/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/545/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/545/events", "html_url": "https://github.com/schematics/schematics/issues/545", "id": 304180316, "node_id": "MDU6SXNzdWUzMDQxODAzMTY=", "number": 545, "title": "Transforming data with custom function", "user": {"login": "harveyslash", "id": 7107410, "node_id": "MDQ6VXNlcjcxMDc0MTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7107410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harveyslash", "html_url": "https://github.com/harveyslash", "followers_url": "https://api.github.com/users/harveyslash/followers", "following_url": "https://api.github.com/users/harveyslash/following{/other_user}", "gists_url": "https://api.github.com/users/harveyslash/gists{/gist_id}", "starred_url": "https://api.github.com/users/harveyslash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harveyslash/subscriptions", "organizations_url": "https://api.github.com/users/harveyslash/orgs", "repos_url": "https://api.github.com/users/harveyslash/repos", "events_url": "https://api.github.com/users/harveyslash/events{/privacy}", "received_events_url": "https://api.github.com/users/harveyslash/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 175803, "node_id": "MDU6TGFiZWwxNzU4MDM=", "url": "https://api.github.com/repos/schematics/schematics/labels/documentation", "name": "documentation", "color": "bfe5bf", "default": true, "description": null}, {"id": 865045241, "node_id": "MDU6TGFiZWw4NjUwNDUyNDE=", "url": "https://api.github.com/repos/schematics/schematics/labels/question", "name": "question", "color": "c5db6d", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-11T18:16:46Z", "updated_at": "2018-06-26T00:25:38Z", "closed_at": "2018-06-26T00:25:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The docs go in great depth about how to blacklist/whitelist or add custom fields using serialise decorator, but I was unable to figure out how to convert an existing datatype using my custom functions. \r\n\r\nI have a test setup like this :\r\n\r\n```\r\nclass Person(Model):\r\n    name = StringType(required=True)\r\n    website = URLType()\r\n```\r\n\r\n \r\nI want to call a set of functions on the value of name , and mutate its value. \r\n\r\nSpecifically , i would like to convert name to lowercase (but many other times i need multiple functions). \r\n\r\nWhats the way of doing this ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/541", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/541/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/541/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/541/events", "html_url": "https://github.com/schematics/schematics/issues/541", "id": 298682064, "node_id": "MDU6SXNzdWUyOTg2ODIwNjQ=", "number": 541, "title": "Support International Email Addresses in EmailType", "user": {"login": "jeffsawatzky", "id": 421404, "node_id": "MDQ6VXNlcjQyMTQwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/421404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffsawatzky", "html_url": "https://github.com/jeffsawatzky", "followers_url": "https://api.github.com/users/jeffsawatzky/followers", "following_url": "https://api.github.com/users/jeffsawatzky/following{/other_user}", "gists_url": "https://api.github.com/users/jeffsawatzky/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffsawatzky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffsawatzky/subscriptions", "organizations_url": "https://api.github.com/users/jeffsawatzky/orgs", "repos_url": "https://api.github.com/users/jeffsawatzky/repos", "events_url": "https://api.github.com/users/jeffsawatzky/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffsawatzky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 223958757, "node_id": "MDU6TGFiZWwyMjM5NTg3NTc=", "url": "https://api.github.com/repos/schematics/schematics/labels/enhancement", "name": "enhancement", "color": "207de5", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-20T17:30:49Z", "updated_at": "2019-06-25T14:50:08Z", "closed_at": "2018-11-19T19:39:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears that the EmailType doesn't validate [international email addresses](https://en.wikipedia.org/wiki/Email_address#Internationalization_examples) that will be permitted with [RFC 6530](https://tools.ietf.org/html/rfc6530)\r\n```\r\ndef test_international_emails(self):\r\n        validator = EmailType()\r\n        validator.validate(u'Pel\u00e9@example.com')\r\n        validator.validate(u'\u03b4\u03bf\u03ba\u03b9\u03bc\u03ae@\u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1.\u03b4\u03bf\u03ba\u03b9\u03bc\u03ae')\r\n        validator.validate(u'\u6211\u8cb7@\u5c4b\u4f01.\u9999\u6e2f')\r\n        validator.validate(u'\u7532\u6590@\u9ed2\u5ddd.\u65e5\u672c')\r\n        validator.validate(u'\u0447\u0435\u0431\u0443\u0440\u0430\u0448\u043a\u0430@\u044f\u0449\u0438\u043a-\u0441-\u0430\u043f\u0435\u043b\u044c\u0441\u0438\u043d\u0430\u043c\u0438.\u0440\u0444')\r\n        validator.validate(u'\u0938\u0902\u092a\u0930\u094d\u0915@\u0921\u093e\u091f\u093e\u092e\u0947\u0932.\u092d\u093e\u0930\u0924')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/539", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/539/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/539/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/539/events", "html_url": "https://github.com/schematics/schematics/issues/539", "id": 294431600, "node_id": "MDU6SXNzdWUyOTQ0MzE2MDA=", "number": 539, "title": "Create a Timedelta/Duration type", "user": {"login": "gabisurita", "id": 4023375, "node_id": "MDQ6VXNlcjQwMjMzNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4023375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabisurita", "html_url": "https://github.com/gabisurita", "followers_url": "https://api.github.com/users/gabisurita/followers", "following_url": "https://api.github.com/users/gabisurita/following{/other_user}", "gists_url": "https://api.github.com/users/gabisurita/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabisurita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabisurita/subscriptions", "organizations_url": "https://api.github.com/users/gabisurita/orgs", "repos_url": "https://api.github.com/users/gabisurita/repos", "events_url": "https://api.github.com/users/gabisurita/events{/privacy}", "received_events_url": "https://api.github.com/users/gabisurita/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 836427847, "node_id": "MDU6TGFiZWw4MzY0Mjc4NDc=", "url": "https://api.github.com/repos/schematics/schematics/labels/good%20first%20issue", "name": "good first issue", "color": "e079c4", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-05T15:25:05Z", "updated_at": "2018-06-26T00:00:42Z", "closed_at": "2018-06-26T00:00:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Following what is implemented for ` DateTimeType` and `DateType`, I think it would be nice to have a `TimeDeltaType` for `datetime.timedelta` objects. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/531", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/531/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/531/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/531/events", "html_url": "https://github.com/schematics/schematics/issues/531", "id": 274506798, "node_id": "MDU6SXNzdWUyNzQ1MDY3OTg=", "number": 531, "title": "Model.validate still complains missing of required fields even with Model.required=True", "user": {"login": "wonderbeyond", "id": 228361, "node_id": "MDQ6VXNlcjIyODM2MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/228361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wonderbeyond", "html_url": "https://github.com/wonderbeyond", "followers_url": "https://api.github.com/users/wonderbeyond/followers", "following_url": "https://api.github.com/users/wonderbeyond/following{/other_user}", "gists_url": "https://api.github.com/users/wonderbeyond/gists{/gist_id}", "starred_url": "https://api.github.com/users/wonderbeyond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wonderbeyond/subscriptions", "organizations_url": "https://api.github.com/users/wonderbeyond/orgs", "repos_url": "https://api.github.com/users/wonderbeyond/repos", "events_url": "https://api.github.com/users/wonderbeyond/events{/privacy}", "received_events_url": "https://api.github.com/users/wonderbeyond/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/schematics/schematics/milestones/4", "html_url": "https://github.com/schematics/schematics/milestone/4", "labels_url": "https://api.github.com/repos/schematics/schematics/milestones/4/labels", "id": 3055571, "node_id": "MDk6TWlsZXN0b25lMzA1NTU3MQ==", "number": 4, "title": "2.1", "description": null, "creator": {"login": "lkraider", "id": 52256, "node_id": "MDQ6VXNlcjUyMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/52256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkraider", "html_url": "https://github.com/lkraider", "followers_url": "https://api.github.com/users/lkraider/followers", "following_url": "https://api.github.com/users/lkraider/following{/other_user}", "gists_url": "https://api.github.com/users/lkraider/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkraider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkraider/subscriptions", "organizations_url": "https://api.github.com/users/lkraider/orgs", "repos_url": "https://api.github.com/users/lkraider/repos", "events_url": "https://api.github.com/users/lkraider/events{/privacy}", "received_events_url": "https://api.github.com/users/lkraider/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2018-01-22T21:48:14Z", "updated_at": "2018-06-26T00:01:45Z", "due_on": null, "closed_at": "2018-06-26T00:01:45Z"}, "comments": 5, "created_at": "2017-11-16T12:57:47Z", "updated_at": "2018-06-26T15:33:57Z", "closed_at": "2018-02-18T04:31:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation says `partial=True` means [Essentially drops the required=True settings from field definitions](http://schematics.readthedocs.io/en/latest/api/models.html#schematics.models.Model).\r\n\r\nHowever in fact like below:\r\n\r\n```ipython-shell\r\nIn [3]: import schematics\r\n\r\nIn [4]: schematics.__version__\r\nOut[4]: '2.0.1'\r\n```\r\n\r\n```ipython-shell\r\nIn [2]: from schematics.models import Model\r\n   ...: from schematics.types import StringType, URLType\r\n   ...: \r\n   ...: \r\n   ...: class Person(Model):\r\n   ...:     name = StringType(required=True)\r\n   ...:     website = URLType()\r\n   ...: \r\n   ...: \r\n   ...: p = Person(partial=True)\r\n   ...: p.validate()\r\n   ...: \r\n---------------------------------------------------------------------------\r\nDataError                                 Traceback (most recent call last)\r\n<ipython-input-2-e1c1033ba10a> in <module>()\r\n      9 \r\n     10 p = Person(partial=True)\r\n---> 11 p.validate()\r\n\r\n~/PyEnvs/myproj/lib/python3.6/site-packages/schematics/models.py in validate(self, partial, convert, app_data, **kwargs)\r\n    252         try:\r\n    253             data = self._convert(validate=True,\r\n--> 254                 partial=partial, convert=convert, app_data=app_data, **kwargs)\r\n    255             self._data.valid = data\r\n    256         except DataError as e:\r\n\r\n~/PyEnvs/myproj/lib/python3.6/site-packages/schematics/models.py in _convert(self, raw_data, context, **kwargs)\r\n    293         should_validate = getattr(context, 'validate', kwargs.get('validate', False))\r\n    294         func = validate if should_validate else convert\r\n--> 295         return func(self._schema, self, raw_data=raw_data, oo=True, context=context, **kwargs)\r\n    296 \r\n    297     def export(self, field_converter=None, role=None, app_data=None, **kwargs):\r\n\r\n~/PyEnvs/myproj/lib/python3.6/site-packages/schematics/validate.py in validate(schema, mutable, raw_data, trusted_data, partial, strict, convert, context, **kwargs)\r\n     63 \r\n     64     if errors:\r\n---> 65         raise DataError(errors, data)\r\n     66 \r\n     67     return data\r\n\r\nDataError: {\"name\": [\"This field is required.\"]}\r\n\r\nIn [3]:      \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/526", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/526/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/526/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/526/events", "html_url": "https://github.com/schematics/schematics/issues/526", "id": 269850808, "node_id": "MDU6SXNzdWUyNjk4NTA4MDg=", "number": 526, "title": "Can Model object be direct stored in memcache?", "user": {"login": "Garlandal", "id": 5059197, "node_id": "MDQ6VXNlcjUwNTkxOTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5059197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Garlandal", "html_url": "https://github.com/Garlandal", "followers_url": "https://api.github.com/users/Garlandal/followers", "following_url": "https://api.github.com/users/Garlandal/following{/other_user}", "gists_url": "https://api.github.com/users/Garlandal/gists{/gist_id}", "starred_url": "https://api.github.com/users/Garlandal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Garlandal/subscriptions", "organizations_url": "https://api.github.com/users/Garlandal/orgs", "repos_url": "https://api.github.com/users/Garlandal/repos", "events_url": "https://api.github.com/users/Garlandal/events{/privacy}", "received_events_url": "https://api.github.com/users/Garlandal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-31T06:38:57Z", "updated_at": "2017-11-02T03:32:54Z", "closed_at": "2017-11-02T03:32:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a application and with some reasons i need to add cache on the service layer\uff0cschematics has [serializable](https://schematics.readthedocs.io/en/latest/usage/exporting.html#serializable) feature and it works well.\r\n\r\ni also wonder whether the Model Object can be direct stored in memcache, such as the `User` bellow, i test it before and find it also works well but not get some official explanation on doc.\r\n\r\n```python\r\nfrom schematics.types import IntType, DateTimeType, StringType\r\nfrom schematics.types.compound import ModelType\r\nfrom schematics.models import Model\r\n\r\nclass _Detail(Model):\r\n    city = StringType()\r\n    desc = StringType()\r\n\r\n\r\nclass User(Model):\r\n    id = IntType()\r\n    name = StringType()\r\n    age = IntType()\r\n    detail = ModelType(_Detail, default={})\r\n    create_time = DateTimeType(default=datetime.datetime.now)\r\n    update_time = DateTimeType(default=datetime.datetime.now)\r\n```\r\n\r\nThank you very much.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/525", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/525/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/525/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/525/events", "html_url": "https://github.com/schematics/schematics/issues/525", "id": 265601933, "node_id": "MDU6SXNzdWUyNjU2MDE5MzM=", "number": 525, "title": "Accessing ModelType instance", "user": {"login": "FrEaKmAn", "id": 232901, "node_id": "MDQ6VXNlcjIzMjkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/232901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FrEaKmAn", "html_url": "https://github.com/FrEaKmAn", "followers_url": "https://api.github.com/users/FrEaKmAn/followers", "following_url": "https://api.github.com/users/FrEaKmAn/following{/other_user}", "gists_url": "https://api.github.com/users/FrEaKmAn/gists{/gist_id}", "starred_url": "https://api.github.com/users/FrEaKmAn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FrEaKmAn/subscriptions", "organizations_url": "https://api.github.com/users/FrEaKmAn/orgs", "repos_url": "https://api.github.com/users/FrEaKmAn/repos", "events_url": "https://api.github.com/users/FrEaKmAn/events{/privacy}", "received_events_url": "https://api.github.com/users/FrEaKmAn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-15T20:38:03Z", "updated_at": "2017-10-16T21:54:48Z", "closed_at": "2017-10-16T21:54:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\n\r\nBased on the #256, I'm able to access all fields using `self._fields` and read the value with `getattr(self, 'fieldname')`.\r\n\r\nIf I define ModelType directly as `field = ModelType(MyCustomClass)`, then I can easily access the value. But if I define it as @serializable\r\n\r\n```\r\n@serializable\r\ndef field(self):\r\n    return ModelType(MyCustomClass)\r\n```\r\nthen I cannot get value. How can I get the instance of the MyCustomClass? `getattr(field, 'field2name')` does not work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/521", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/521/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/521/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/521/events", "html_url": "https://github.com/schematics/schematics/issues/521", "id": 260259939, "node_id": "MDU6SXNzdWUyNjAyNTk5Mzk=", "number": 521, "title": "Deprecated code is used internally", "user": {"login": "cmonfort", "id": 8348881, "node_id": "MDQ6VXNlcjgzNDg4ODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/8348881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmonfort", "html_url": "https://github.com/cmonfort", "followers_url": "https://api.github.com/users/cmonfort/followers", "following_url": "https://api.github.com/users/cmonfort/following{/other_user}", "gists_url": "https://api.github.com/users/cmonfort/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmonfort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmonfort/subscriptions", "organizations_url": "https://api.github.com/users/cmonfort/orgs", "repos_url": "https://api.github.com/users/cmonfort/repos", "events_url": "https://api.github.com/users/cmonfort/events{/privacy}", "received_events_url": "https://api.github.com/users/cmonfort/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-25T12:36:08Z", "updated_at": "2018-09-19T09:56:37Z", "closed_at": "2017-09-25T14:12:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems that schematics V2.0.1 is using deprecated calls internally...\r\n\r\n```bash\r\n$ PYTHONWARNINGS=default python\r\nPython 3.5.2 (default, Nov 17 2016, 17:05:23) \r\n[GCC 5.4.0 20160609] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from schematics.models import Model\r\n/home/christian/.virtualenvs/inventory3/lib/python3.5/site-packages/schematics/validate.py:118: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\r\n  if len(inspect.getargspec(func).args) < argcount:\r\n/home/christian/.virtualenvs/inventory3/lib/python3.5/site-packages/schematics/types/union.py:13: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\r\n  args.update(inspect.getargspec(cls.__init__).args[1:])\r\n>>> from schematics.types import StringType, URLType\r\n>>> class Person(Model):\r\n...     name = StringType(required=True)\r\n...     website = URLType()\r\n... \r\n>>> person = Person({'name': u'Joe Strummer', 'website': 'http://soundcloud.com/joestrummer'})\r\n/home/christian/.virtualenvs/inventory3/lib/python3.5/site-packages/schematics/transforms.py:105: SchematicsDeprecationWarning: Call to deprecated function _valid_input_keys.\r\n  all_fields = schema._valid_input_keys\r\n>>> \r\n```\r\n\r\nNote: I did not check them all, just had this one fired when testing on python 2.6 (deprecated warnings are not shown on python 2.7/3.x by default unless you set PYTHONWARNINGS environment variable or use -Wd options, but they're still there nonetheless..)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/515", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/515/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/515/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/515/events", "html_url": "https://github.com/schematics/schematics/issues/515", "id": 258600927, "node_id": "MDU6SXNzdWUyNTg2MDA5Mjc=", "number": 515, "title": "Unexpected behaviour in DateType's to_native conversion", "user": {"login": "tommyzli", "id": 8738538, "node_id": "MDQ6VXNlcjg3Mzg1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8738538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyzli", "html_url": "https://github.com/tommyzli", "followers_url": "https://api.github.com/users/tommyzli/followers", "following_url": "https://api.github.com/users/tommyzli/following{/other_user}", "gists_url": "https://api.github.com/users/tommyzli/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyzli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyzli/subscriptions", "organizations_url": "https://api.github.com/users/tommyzli/orgs", "repos_url": "https://api.github.com/users/tommyzli/repos", "events_url": "https://api.github.com/users/tommyzli/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyzli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-18T19:53:04Z", "updated_at": "2017-09-19T14:58:54Z", "closed_at": "2017-09-19T14:58:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you pass a `datetime` object into a `DateType` field, the native conversion will not turn the datetime into a date.\r\n\r\nTo reproduce:\r\n```python\r\nfrom datetime import datetime\r\nfrom schematics.types.base import DateType\r\n\r\ndate_type = DateType()\r\ntoday = datetime.today()\r\n\r\nprint(date_type.to_native(today))\r\n>>> datetime.datetime(2017, 9, 18, 15, 40, 55, 10313)\r\n```\r\n\r\nThis is caused by [this](https://github.com/schematics/schematics/blob/master/schematics/types/base.py#L680) line, as  `datetime` is a subclass of `date`, and will pass that check. \r\n\r\nIn my opinion, `DateType`'s to_native function should only return `date` objects, not `datetime`. If you folks find this agreeable, I can open a pr with a fix.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/513", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/513/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/513/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/513/events", "html_url": "https://github.com/schematics/schematics/issues/513", "id": 254174284, "node_id": "MDU6SXNzdWUyNTQxNzQyODQ=", "number": 513, "title": "Incorrect documentation RE: BaseType's serialize_when_none arg", "user": {"login": "tommyzli", "id": 8738538, "node_id": "MDQ6VXNlcjg3Mzg1Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8738538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyzli", "html_url": "https://github.com/tommyzli", "followers_url": "https://api.github.com/users/tommyzli/followers", "following_url": "https://api.github.com/users/tommyzli/following{/other_user}", "gists_url": "https://api.github.com/users/tommyzli/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyzli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyzli/subscriptions", "organizations_url": "https://api.github.com/users/tommyzli/orgs", "repos_url": "https://api.github.com/users/tommyzli/repos", "events_url": "https://api.github.com/users/tommyzli/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyzli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 175803, "node_id": "MDU6TGFiZWwxNzU4MDM=", "url": "https://api.github.com/repos/schematics/schematics/labels/documentation", "name": "documentation", "color": "bfe5bf", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-31T00:34:47Z", "updated_at": "2017-09-23T18:44:04Z", "closed_at": "2017-09-23T18:44:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [docstring](https://github.com/schematics/schematics/blob/v2.0.0.dev2/schematics/types/base.py#L144-L146) for the `BaseType`  indicates that the default value for the `serialize_when_none` argument should be `True`, but in the code it is actually [`None`](https://github.com/schematics/schematics/blob/v2.0.0.dev2/schematics/types/base.py#L168). The [documentation](https://schematics.readthedocs.io/en/latest/api/types.html?highlight=serialize_when_none#schematics.types.base.BaseType) is also inconsistent; the class definition accurately indicates that the default is `None`, but the expanded parameter definitions below still say it's default is `True`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/512", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/512/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/512/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/512/events", "html_url": "https://github.com/schematics/schematics/issues/512", "id": 253194236, "node_id": "MDU6SXNzdWUyNTMxOTQyMzY=", "number": 512, "title": "How to create fields dinamically?", "user": {"login": "gabisurita", "id": 4023375, "node_id": "MDQ6VXNlcjQwMjMzNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4023375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabisurita", "html_url": "https://github.com/gabisurita", "followers_url": "https://api.github.com/users/gabisurita/followers", "following_url": "https://api.github.com/users/gabisurita/following{/other_user}", "gists_url": "https://api.github.com/users/gabisurita/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabisurita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabisurita/subscriptions", "organizations_url": "https://api.github.com/users/gabisurita/orgs", "repos_url": "https://api.github.com/users/gabisurita/repos", "events_url": "https://api.github.com/users/gabisurita/events{/privacy}", "received_events_url": "https://api.github.com/users/gabisurita/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/schematics/schematics/milestones/4", "html_url": "https://github.com/schematics/schematics/milestone/4", "labels_url": "https://api.github.com/repos/schematics/schematics/milestones/4/labels", "id": 3055571, "node_id": "MDk6TWlsZXN0b25lMzA1NTU3MQ==", "number": 4, "title": "2.1", "description": null, "creator": {"login": "lkraider", "id": 52256, "node_id": "MDQ6VXNlcjUyMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/52256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkraider", "html_url": "https://github.com/lkraider", "followers_url": "https://api.github.com/users/lkraider/followers", "following_url": "https://api.github.com/users/lkraider/following{/other_user}", "gists_url": "https://api.github.com/users/lkraider/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkraider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkraider/subscriptions", "organizations_url": "https://api.github.com/users/lkraider/orgs", "repos_url": "https://api.github.com/users/lkraider/repos", "events_url": "https://api.github.com/users/lkraider/events{/privacy}", "received_events_url": "https://api.github.com/users/lkraider/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2018-01-22T21:48:14Z", "updated_at": "2018-06-26T00:01:45Z", "due_on": null, "closed_at": "2018-06-26T00:01:45Z"}, "comments": 5, "created_at": "2017-08-27T22:24:01Z", "updated_at": "2018-02-18T02:26:47Z", "closed_at": "2018-02-18T02:26:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given a model subclass, how can one add fields dynamically? I wish I could do something like:\r\n\r\n```python\r\nfrom schematics import models, types\r\n\r\nclass MyModel(models.Model):\r\n    static_field = types.StringType()\r\n\r\n\r\nMyModel.dynamic_field = types.IntType()\r\nmy_instance = MyModel(dict(static_field='Foo', dynamic_field=42))\r\n```\r\n\r\nIs there any know API methods to do so?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/507", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/507/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/507/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/507/events", "html_url": "https://github.com/schematics/schematics/issues/507", "id": 247768788, "node_id": "MDU6SXNzdWUyNDc3Njg3ODg=", "number": 507, "title": "ListType throws error on Model validation", "user": {"login": "Gehbrial", "id": 9321998, "node_id": "MDQ6VXNlcjkzMjE5OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/9321998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gehbrial", "html_url": "https://github.com/Gehbrial", "followers_url": "https://api.github.com/users/Gehbrial/followers", "following_url": "https://api.github.com/users/Gehbrial/following{/other_user}", "gists_url": "https://api.github.com/users/Gehbrial/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gehbrial/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gehbrial/subscriptions", "organizations_url": "https://api.github.com/users/Gehbrial/orgs", "repos_url": "https://api.github.com/users/Gehbrial/repos", "events_url": "https://api.github.com/users/Gehbrial/events{/privacy}", "received_events_url": "https://api.github.com/users/Gehbrial/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-03T16:46:25Z", "updated_at": "2017-08-07T17:45:48Z", "closed_at": "2017-08-07T17:45:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom schematics.models import Model\r\nfrom schematics.types import NumberType\r\n\r\nclass Validator(Model):\r\n    test = ListType(NumberType, required=True, min_size=1)\r\n\r\nValidator({\"test\": [1, 2, 3]}, strict=False).validate()\r\n```\r\n\r\nThe code above throws the following error:\r\n`TypeError: isinstance() arg 2 must be a class, type, or tuple of classes and types`\r\n\r\nDid I miss anything? I wasn't able to find answer in the documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/501", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/501/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/501/events", "html_url": "https://github.com/schematics/schematics/issues/501", "id": 238160088, "node_id": "MDU6SXNzdWUyMzgxNjAwODg=", "number": 501, "title": "Dynamic models: Possible memory issues because of _subclasses", "user": {"login": "mjrk", "id": 2457107, "node_id": "MDQ6VXNlcjI0NTcxMDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2457107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjrk", "html_url": "https://github.com/mjrk", "followers_url": "https://api.github.com/users/mjrk/followers", "following_url": "https://api.github.com/users/mjrk/following{/other_user}", "gists_url": "https://api.github.com/users/mjrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjrk/subscriptions", "organizations_url": "https://api.github.com/users/mjrk/orgs", "repos_url": "https://api.github.com/users/mjrk/repos", "events_url": "https://api.github.com/users/mjrk/events{/privacy}", "received_events_url": "https://api.github.com/users/mjrk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-06-23T14:32:11Z", "updated_at": "2017-06-28T07:48:51Z", "closed_at": "2017-06-27T23:25:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "In https://github.com/schematics/schematics/blob/v2.0.1/schematics/models.py#L118, we find this code\r\n\r\n```python\r\n        # Register class on ancestor models\r\n        klass._subclasses = []\r\n        for base in klass.__mro__[1:]:\r\n            if isinstance(base, ModelMeta):\r\n            base._subclasses.append(klass)\r\n```\r\n\r\nNow, I have the case where I need to dynamically create models out of some JSON for validation and transformation (i.e. using https://github.com/retresco/acspec). It worked like charm but the lines above cause a memory issue: every new definition of a Model will add a reference to itself to the parent class. This has the effect, that the _subclasses list get unlimitedly long and that the class definition is not garbage collected later on. Memory usage increases heavily. \r\n\r\nIf I remove/comment out the lines above, the list won't get big and classes are garbage collected when not in use anymore. (There is still a small, constant increase in memory though that I would have to debug.)\r\n\r\nThe `_subclasses` list is only used for polymorhic models, correct?\r\n\r\nIt would be great if this referencing could be turned of in some way or maybe even an alternative implementation without this requirement could help out with dynamic models.\r\n\r\nCould a PR with a new option `parent_subclass_reference=False/True` be accepted?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/497", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/497/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/497/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/497/events", "html_url": "https://github.com/schematics/schematics/issues/497", "id": 236248742, "node_id": "MDU6SXNzdWUyMzYyNDg3NDI=", "number": 497, "title": "Field validator regression", "user": {"login": "GulBroz", "id": 12943866, "node_id": "MDQ6VXNlcjEyOTQzODY2", "avatar_url": "https://avatars1.githubusercontent.com/u/12943866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GulBroz", "html_url": "https://github.com/GulBroz", "followers_url": "https://api.github.com/users/GulBroz/followers", "following_url": "https://api.github.com/users/GulBroz/following{/other_user}", "gists_url": "https://api.github.com/users/GulBroz/gists{/gist_id}", "starred_url": "https://api.github.com/users/GulBroz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GulBroz/subscriptions", "organizations_url": "https://api.github.com/users/GulBroz/orgs", "repos_url": "https://api.github.com/users/GulBroz/repos", "events_url": "https://api.github.com/users/GulBroz/events{/privacy}", "received_events_url": "https://api.github.com/users/GulBroz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-15T16:35:51Z", "updated_at": "2017-06-16T07:32:11Z", "closed_at": "2017-06-16T07:31:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems there is a regression between 2.0.0a1 and 2.0.1 regarding fileld validators.\r\n\r\n* In 2.0.0a1, field validator functions were called on model validation only when the corresponding field was given a value.\r\n* In 2.0.1 it seems that field validators are called no matter what, and the `data` array passed to the validator function is missing entry for the field it is supposed to validate...\r\n\r\n```python\r\n#!/usr/bin/env python\r\n\r\nfrom schematics.models import Model\r\nfrom schematics.types import StringType\r\nfrom schematics.exceptions import DataError, ValidationError\r\n\r\n\r\nclass FooBar(Model):\r\n    foo = StringType(required=True)\r\n    bar = StringType()\r\n\r\n    def validate_foo(self, data, value):\r\n        print '>>>>>> testing foo, data=', data\r\n        if data['foo'] and 'foo' not in data['foo']:\r\n            raise ValidationError('Illegal value')\r\n\r\nif __name__ == '__main__':\r\n    print \"===== fb1\"\r\n    try:\r\n        fb1 = FooBar({})\r\n        fb1.validate()\r\n    except DataError as e:\r\n        print \"===== fb1 FAILED\", e\r\n    else:\r\n        print \"===== fb1 OK\"\r\n\r\n    print \"===== fb2\"\r\n    try:\r\n        fb2 = FooBar({'foo': 'foobar'})\r\n        fb2.validate()\r\n    except DataError as e:\r\n        print \"===== fb2 FAILED\", e\r\n    else:\r\n        print \"===== fb2 OK\"\r\n\r\n    print \"===== fb3\"\r\n    try:\r\n        fb3 = FooBar({'foo': 'bar'})\r\n        fb3.validate()\r\n    except DataError as e:\r\n        print \"===== fb3 FAILED\", e\r\n    else:\r\n        print \"===== fb3 OK\"\r\n```\r\nOutput in 2.0.0a1:\r\n```\r\n===== fb1\r\n===== fb1 FAILED {'foo': ConversionError(\"This field is required.\")}\r\n===== fb2\r\n>>>>>> testing foo, data= {'foo': u'foobar', 'bar': None}\r\n===== fb2 OK\r\n===== fb3\r\n>>>>>> testing foo, data= {'foo': u'bar', 'bar': None}\r\n===== fb3 FAILED {'foo': [ErrorMessage(\"Illegal value\")]}\r\n```\r\n\r\nOutput in 2.0.1:\r\n```\r\n===== fb1\r\n>>>>>> testing foo, data= {'bar': None}\r\nTraceback (most recent call last):\r\n  File \"./foobar.py\", line 21, in <module>\r\n    fb1.validate()\r\n  File \"/home/christian/.virtualenvs/schematics201/local/lib/python2.7/site-packages/schematics/models.py\", line 254, in validate\r\n    partial=partial, convert=convert, app_data=app_data, **kwargs)\r\n  File \"/home/christian/.virtualenvs/schematics201/local/lib/python2.7/site-packages/schematics/models.py\", line 295, in _convert\r\n    return func(self._schema, self, raw_data=raw_data, oo=True, context=context, **kwargs)\r\n  File \"/home/christian/.virtualenvs/schematics201/local/lib/python2.7/site-packages/schematics/validate.py\", line 62, in validate\r\n    errors.update(_validate_model(schema, mutable, data, context))\r\n  File \"/home/christian/.virtualenvs/schematics201/local/lib/python2.7/site-packages/schematics/validate.py\", line 90, in _validate_model\r\n    schema._validator_functions[field_name](mutable, data, value, context)\r\n  File \"/home/christian/.virtualenvs/schematics201/local/lib/python2.7/site-packages/schematics/validate.py\", line 123, in newfunc\r\n    return func(*args, **kwargs)\r\n  File \"./foobar.py\", line 14, in validate_foo\r\n    if data['foo'] and 'foo' not in data['foo']:\r\nKeyError: 'foo'\r\n```\r\n\r\n----\r\n\r\nLooking at the code, it looks like it was introduced by the rewriting needed to merge PR#441:\r\n- Support for raising DataError inside custom validate_fieldname methods.\r\n   `#441 <https://github.com/schematics/schematics/pull/441>`__\r\n   (`alexhayes <https://github.com/alexhayes>`__)\r\n\r\nbefore that, validator function was called when defined and when `field_name` is in `data`, after that the second condition is dropped.\r\n\r\nI made a quick patch that solved my problem, but I'm not sure there are no side effects:\r\n```diff\r\n--- schematics/validate.py.BAK\t2017-06-15 17:04:00.399459714 +0200\r\n+++ schematics/validate.py\t2017-06-15 17:59:11.322125589 +0200\r\n@@ -87,7 +87,8 @@\r\n     has_validator = lambda atom: atom.name in schema._validator_functions\r\n     for field_name, field, value in atoms(schema, data, filter=has_validator):\r\n         try:\r\n-            schema._validator_functions[field_name](mutable, data, value, context)\r\n+            if field_name in data:\r\n+                schema._validator_functions[field_name](mutable, data, value, context)\r\n         except (FieldError, DataError) as exc:\r\n             serialized_field_name = field.serialized_name or field_name\r\n             errors[serialized_field_name] = exc.errors\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/494", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/494/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/494/events", "html_url": "https://github.com/schematics/schematics/issues/494", "id": 233943315, "node_id": "MDU6SXNzdWUyMzM5NDMzMTU=", "number": 494, "title": "Docs are missing for net types", "user": {"login": "wcbarksdale", "id": 246946, "node_id": "MDQ6VXNlcjI0Njk0Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/246946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wcbarksdale", "html_url": "https://github.com/wcbarksdale", "followers_url": "https://api.github.com/users/wcbarksdale/followers", "following_url": "https://api.github.com/users/wcbarksdale/following{/other_user}", "gists_url": "https://api.github.com/users/wcbarksdale/gists{/gist_id}", "starred_url": "https://api.github.com/users/wcbarksdale/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wcbarksdale/subscriptions", "organizations_url": "https://api.github.com/users/wcbarksdale/orgs", "repos_url": "https://api.github.com/users/wcbarksdale/repos", "events_url": "https://api.github.com/users/wcbarksdale/events{/privacy}", "received_events_url": "https://api.github.com/users/wcbarksdale/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 175803, "node_id": "MDU6TGFiZWwxNzU4MDM=", "url": "https://api.github.com/repos/schematics/schematics/labels/documentation", "name": "documentation", "color": "bfe5bf", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-06T16:04:22Z", "updated_at": "2017-09-22T14:41:07Z", "closed_at": "2017-09-22T14:41:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "There's no mention of URLType, EmailType, etc. on https://schematics.readthedocs.io/en/latest/api/types.html.  It looks like the module is missing in https://github.com/schematics/schematics/blob/master/docs/api/types.rst.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/493", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/493/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/493/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/493/events", "html_url": "https://github.com/schematics/schematics/issues/493", "id": 233104494, "node_id": "MDU6SXNzdWUyMzMxMDQ0OTQ=", "number": 493, "title": "bug in base.py:394: str only takes one arg", "user": {"login": "e271828-", "id": 7109823, "node_id": "MDQ6VXNlcjcxMDk4MjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7109823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/e271828-", "html_url": "https://github.com/e271828-", "followers_url": "https://api.github.com/users/e271828-/followers", "following_url": "https://api.github.com/users/e271828-/following{/other_user}", "gists_url": "https://api.github.com/users/e271828-/gists{/gist_id}", "starred_url": "https://api.github.com/users/e271828-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/e271828-/subscriptions", "organizations_url": "https://api.github.com/users/e271828-/orgs", "repos_url": "https://api.github.com/users/e271828-/repos", "events_url": "https://api.github.com/users/e271828-/events{/privacy}", "received_events_url": "https://api.github.com/users/e271828-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-02T07:54:46Z", "updated_at": "2017-06-02T08:18:49Z", "closed_at": "2017-06-02T08:17:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "@bintoro git blame says this is yours :)\r\n\r\n`return str(value, 'utf-8')\r\n`\r\n\r\nshould presumably be:\r\n\r\n`return str(value).decode('utf-8')\r\n `\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/490", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/490/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/490/events", "html_url": "https://github.com/schematics/schematics/issues/490", "id": 231561732, "node_id": "MDU6SXNzdWUyMzE1NjE3MzI=", "number": 490, "title": "Deprecated fields?", "user": {"login": "danqing", "id": 5134133, "node_id": "MDQ6VXNlcjUxMzQxMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5134133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danqing", "html_url": "https://github.com/danqing", "followers_url": "https://api.github.com/users/danqing/followers", "following_url": "https://api.github.com/users/danqing/following{/other_user}", "gists_url": "https://api.github.com/users/danqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/danqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danqing/subscriptions", "organizations_url": "https://api.github.com/users/danqing/orgs", "repos_url": "https://api.github.com/users/danqing/repos", "events_url": "https://api.github.com/users/danqing/events{/privacy}", "received_events_url": "https://api.github.com/users/danqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-26T08:38:56Z", "updated_at": "2018-01-09T09:56:48Z", "closed_at": "2017-05-31T02:41:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is new to 2.0.0, but I'm getting some deprecated warnings and I can't really find how to get rid of them:\r\n\r\n```\r\nenv/lib/python3.6/site-packages/schematics/transforms.py:105: DeprecationWarning: Call to deprecated function _valid_input_keys.\r\n  all_fields = schema._valid_input_keys\r\nenv/lib/python3.6/site-packages/schematics/transforms.py:251: DeprecationWarning: Call to deprecated function _options.\r\n  if schema._options.export_order:\r\nenv/lib/python3.6/site-packages/schematics/deprecated.py:59: DeprecationWarning: Call to deprecated function _options.\r\n  return super(class_property, self).__get__(type, type)\r\nenv/lib/python3.6/site-packages/schematics/deprecated.py:59: DeprecationWarning: Call to deprecated function fields.\r\n  return super(class_property, self).__get__(type, type)\r\nenv/lib/python3.6/site-packages/schematics/deprecated.py:60: DeprecationWarning: Call to deprecated function _fields.\r\n  return super(class_property, self).__get__(instance, type)\r\n```\r\n\r\nI wasn't really doing anything, just:\r\n \r\n```py\r\nclass Status(Entity):\r\n    # some schematics entity\r\n    ...\r\n\r\nStatus({'key': 'value'})\r\n```\r\n\r\nIs there a way to not use the deprecated methods? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/483", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/483/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/483/events", "html_url": "https://github.com/schematics/schematics/issues/483", "id": 224293690, "node_id": "MDU6SXNzdWUyMjQyOTM2OTA=", "number": 483, "title": "question about list of DictType", "user": {"login": "pouledodue", "id": 745437, "node_id": "MDQ6VXNlcjc0NTQzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/745437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pouledodue", "html_url": "https://github.com/pouledodue", "followers_url": "https://api.github.com/users/pouledodue/followers", "following_url": "https://api.github.com/users/pouledodue/following{/other_user}", "gists_url": "https://api.github.com/users/pouledodue/gists{/gist_id}", "starred_url": "https://api.github.com/users/pouledodue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pouledodue/subscriptions", "organizations_url": "https://api.github.com/users/pouledodue/orgs", "repos_url": "https://api.github.com/users/pouledodue/repos", "events_url": "https://api.github.com/users/pouledodue/events{/privacy}", "received_events_url": "https://api.github.com/users/pouledodue/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-25T22:45:08Z", "updated_at": "2017-08-21T07:43:41Z", "closed_at": "2017-05-13T23:43:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi\r\nthe indexes in my dict varies (aXo, SyW, eOw, qZp...)\r\nbut the indexes \"id\" and \"values\" are fixed\r\nwhat would be the correct modelization for such a case?\r\n\r\n```\r\n{\r\n    \"response\": [\r\n        {\r\n            \"aXo\": {\r\n                 \"id\": \"876640\",\r\n                 \"value\": \"allo\"\r\n            },\r\n            \r\n            \"SyW\": {\r\n                 \"id\": \"876640\",\r\n                 \"value\": \"piutou\"\r\n            }\r\n        },\r\n        {\r\n            \"eOw\": {\r\n                \"id\": \"876641\",\r\n                 \"value\": \"run\" \r\n            },\r\n            \"qZp\": {\r\n                \"id\": \"876640\",\r\n                 \"value\": \"sun\"\r\n            }\r\n        }\r\n   ]\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/481", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/481/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/481/events", "html_url": "https://github.com/schematics/schematics/issues/481", "id": 220581271, "node_id": "MDU6SXNzdWUyMjA1ODEyNzE=", "number": 481, "title": "[bug] listtype element validate", "user": {"login": "AHLinJie", "id": 10792685, "node_id": "MDQ6VXNlcjEwNzkyNjg1", "avatar_url": "https://avatars3.githubusercontent.com/u/10792685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AHLinJie", "html_url": "https://github.com/AHLinJie", "followers_url": "https://api.github.com/users/AHLinJie/followers", "following_url": "https://api.github.com/users/AHLinJie/following{/other_user}", "gists_url": "https://api.github.com/users/AHLinJie/gists{/gist_id}", "starred_url": "https://api.github.com/users/AHLinJie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AHLinJie/subscriptions", "organizations_url": "https://api.github.com/users/AHLinJie/orgs", "repos_url": "https://api.github.com/users/AHLinJie/repos", "events_url": "https://api.github.com/users/AHLinJie/events{/privacy}", "received_events_url": "https://api.github.com/users/AHLinJie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-10T09:08:06Z", "updated_at": "2017-04-10T10:14:37Z", "closed_at": "2017-04-10T10:14:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom schematics.models import Model\r\nfrom schematics.types import StringType, BaseType, DateTimeType, IntType, MultilingualStringType\r\nfrom schematics.types.compound import DictType, ModelType, ListType\r\nimport schematics.exceptions\r\nclass WeatherReport(Model):\r\n    name = StringType(required=True, max_length=16, min_length=1, messages={'max_length': '\u4e0d\u80fd\u8d85\u8fc716'})\r\n    age = IntType(required=True, max_value=99, min_value=18)\r\n    sex = StringType(default='female', choices=['female', 'male'])\r\n    hobby = ListType(StringType(max_length=10, min_length=1, required=True), max_size=2)\r\nwr = WeatherReport({'name': 'jij', 'sex': 'female', 'age': 18, 'hobby': ['112', 1]})\r\ntry:\r\n    wr.validate()\r\nexcept schematics.exceptions.ModelValidationError as e:\r\n    print e.message\r\n\r\n```\r\n'hobby': ['112', 1]   the second element is int type but the validate is passed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/480", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/480/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/480/events", "html_url": "https://github.com/schematics/schematics/issues/480", "id": 220174114, "node_id": "MDU6SXNzdWUyMjAxNzQxMTQ=", "number": 480, "title": "Error when import TimestampType", "user": {"login": "Garlandal", "id": 5059197, "node_id": "MDQ6VXNlcjUwNTkxOTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5059197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Garlandal", "html_url": "https://github.com/Garlandal", "followers_url": "https://api.github.com/users/Garlandal/followers", "following_url": "https://api.github.com/users/Garlandal/following{/other_user}", "gists_url": "https://api.github.com/users/Garlandal/gists{/gist_id}", "starred_url": "https://api.github.com/users/Garlandal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Garlandal/subscriptions", "organizations_url": "https://api.github.com/users/Garlandal/orgs", "repos_url": "https://api.github.com/users/Garlandal/repos", "events_url": "https://api.github.com/users/Garlandal/events{/privacy}", "received_events_url": "https://api.github.com/users/Garlandal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-07T10:25:39Z", "updated_at": "2017-04-07T14:41:22Z", "closed_at": "2017-04-07T14:41:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "when i import TimestampType from schematics, i got an error below\r\n\r\n<img width=\"645\" alt=\"screen shot 2017-04-07 at 6 18 01 pm\" src=\"https://cloud.githubusercontent.com/assets/5059197/24796211/aaaa4aac-1bbe-11e7-92d7-f6b5541ca3d8.png\">\r\n\r\nI did not get much information about TimestampType on [doc](https://schematics.readthedocs.io/en/latest/api/types.html),\r\n how can i import TimestampType in right way?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/479", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/479/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/479/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/479/events", "html_url": "https://github.com/schematics/schematics/issues/479", "id": 217350386, "node_id": "MDU6SXNzdWUyMTczNTAzODY=", "number": 479, "title": "Release 1.1.2", "user": {"login": "lkraider", "id": 52256, "node_id": "MDQ6VXNlcjUyMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/52256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkraider", "html_url": "https://github.com/lkraider", "followers_url": "https://api.github.com/users/lkraider/followers", "following_url": "https://api.github.com/users/lkraider/following{/other_user}", "gists_url": "https://api.github.com/users/lkraider/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkraider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkraider/subscriptions", "organizations_url": "https://api.github.com/users/lkraider/orgs", "repos_url": "https://api.github.com/users/lkraider/repos", "events_url": "https://api.github.com/users/lkraider/events{/privacy}", "received_events_url": "https://api.github.com/users/lkraider/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-03-27T19:30:18Z", "updated_at": "2017-05-23T00:50:17Z", "closed_at": "2017-05-23T00:50:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* [Bug] #478 Fix dangerous performance issue with ModelConversionError in nested models\r\n\r\nTo be uploaded to PyPI.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/474", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/474/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/474/events", "html_url": "https://github.com/schematics/schematics/issues/474", "id": 213378697, "node_id": "MDU6SXNzdWUyMTMzNzg2OTc=", "number": 474, "title": "OrderedDict does NOT pickle", "user": {"login": "pombredanne", "id": 675997, "node_id": "MDQ6VXNlcjY3NTk5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/675997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pombredanne", "html_url": "https://github.com/pombredanne", "followers_url": "https://api.github.com/users/pombredanne/followers", "following_url": "https://api.github.com/users/pombredanne/following{/other_user}", "gists_url": "https://api.github.com/users/pombredanne/gists{/gist_id}", "starred_url": "https://api.github.com/users/pombredanne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pombredanne/subscriptions", "organizations_url": "https://api.github.com/users/pombredanne/orgs", "repos_url": "https://api.github.com/users/pombredanne/repos", "events_url": "https://api.github.com/users/pombredanne/events{/privacy}", "received_events_url": "https://api.github.com/users/pombredanne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-10T15:57:17Z", "updated_at": "2017-09-21T19:06:13Z", "closed_at": "2017-09-21T19:06:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Why not use the stdlib OrderedDict ? I do not use pickle but multiprocessing does...\r\n```\r\n>>> from schematics.datastructures import OrderedDict\r\n>>> import pickle\r\n>>> p=pickle.dumps(OrderedDict(), pickle.HIGHEST_PROTOCOL)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/pickle.py\", line 1374, in dumps\r\n    Pickler(file, protocol).dump(obj)\r\n  File \"/usr/lib/python2.7/pickle.py\", line 224, in dump\r\n    self.save(obj)\r\n  File \"/usr/lib/python2.7/pickle.py\", line 331, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python2.7/pickle.py\", line 416, in save_reduce\r\n    self._batch_setitems(dictitems)\r\n  File \"/usr/lib/python2.7/pickle.py\", line 672, in _batch_setitems\r\n    tmp.append(items.next())\r\nAttributeError: 'list' object has no attribute 'next'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/470", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/470/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/470/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/470/events", "html_url": "https://github.com/schematics/schematics/issues/470", "id": 202764162, "node_id": "MDU6SXNzdWUyMDI3NjQxNjI=", "number": 470, "title": "Dangerous performance issue with ModelConversionError in nested models", "user": {"login": "petee-d", "id": 7727916, "node_id": "MDQ6VXNlcjc3Mjc5MTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7727916?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petee-d", "html_url": "https://github.com/petee-d", "followers_url": "https://api.github.com/users/petee-d/followers", "following_url": "https://api.github.com/users/petee-d/following{/other_user}", "gists_url": "https://api.github.com/users/petee-d/gists{/gist_id}", "starred_url": "https://api.github.com/users/petee-d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petee-d/subscriptions", "organizations_url": "https://api.github.com/users/petee-d/orgs", "repos_url": "https://api.github.com/users/petee-d/repos", "events_url": "https://api.github.com/users/petee-d/events{/privacy}", "received_events_url": "https://api.github.com/users/petee-d/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-01-24T09:24:16Z", "updated_at": "2017-03-27T19:32:30Z", "closed_at": "2017-03-27T19:32:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a very old change by @ryanolson in current master (1.1.1) which may cause critical performance issues when a ModelConversionError occurs in a deeply nested model. **This issue may cause the process to get stuck for a very long time and may be misused to starve workers on an application.**\r\n\r\nhttps://github.com/schematics/schematics/blob/master/schematics/transforms.py#L108\r\nhttps://github.com/schematics/schematics/blob/master/schematics/transforms.py#L415\r\n\r\nThe pattern used on both places seems to be designed to catch TypeError occurring when the called function/method doesn't expect the `mapping` kwarg, in order to call it without it. I suppose this was made to avoid adding the `mapping` kwarg to all related defs. But it has a huge issue - it is too broad and also catches ModelConversionError and possibly other errors. When a conversion error is caught, the call is retried without the mapping argument, converting the entire model again. Since two such `except`s are encountered for each level of nested models, the resulting complexity is **2^(2*N), where N is the depth of a model at which the conversion error occurred**. The application I'm working on can easily reach 10 levels of model nesting or more, so a conversion error there may be raised over a million times!\r\n\r\nI added a pull request with a test that fails while this bug is still present:\r\nhttps://github.com/schematics/schematics/pull/471/files\r\nNote that if the `assert` is removed, the test might run for months if not killed...\r\n\r\nAn obvious fix is changing the `Exception` on these two places to a `TypeError`, but a `TypeError` could be caused due to some other reason. A better solution is adding the `mapping` kwarg everywhere it needs to be, but there may be compatibility issues with custom schematics extension (like an application I'm working on has, I went with this solution anyway). If it is deemed to be the best solution, I'll make a PR for that too.\r\n(https://github.com/petee-d/schematics/pull/1/files)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/469", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/469/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/469/events", "html_url": "https://github.com/schematics/schematics/issues/469", "id": 198554925, "node_id": "MDU6SXNzdWUxOTg1NTQ5MjU=", "number": 469, "title": "Validators with db connection", "user": {"login": "lvalladares", "id": 2118162, "node_id": "MDQ6VXNlcjIxMTgxNjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2118162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lvalladares", "html_url": "https://github.com/lvalladares", "followers_url": "https://api.github.com/users/lvalladares/followers", "following_url": "https://api.github.com/users/lvalladares/following{/other_user}", "gists_url": "https://api.github.com/users/lvalladares/gists{/gist_id}", "starred_url": "https://api.github.com/users/lvalladares/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lvalladares/subscriptions", "organizations_url": "https://api.github.com/users/lvalladares/orgs", "repos_url": "https://api.github.com/users/lvalladares/repos", "events_url": "https://api.github.com/users/lvalladares/events{/privacy}", "received_events_url": "https://api.github.com/users/lvalladares/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-01-03T19:55:18Z", "updated_at": "2017-05-23T01:37:20Z", "closed_at": "2017-05-23T01:37:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Im creating a DB schema for mongo validation using pymongo and i want to do some complex validation against my database, i want to check some constraints like uniqueness of some fields so i create my own methods inside my class, something like this:\r\n\r\n```\r\nclass Producto(Model):\r\n    codigo = StringType(min_length=2, max_length=20, required=True)\r\n    ........\r\n\r\n    def validate_codigo(self, data, value):\r\n        elemento = db.facturas.find({'productos.codigo': {\"$eq\": data[\"codigo\"]}}).count()\r\n        if elemento > 0:\r\n            raise ValidationError(T(\"Already exists\"))\r\n```\r\n\r\nThat dont work because the validate_codigo function dont know the db variable, how i can pass the variable to this method? there is anyway to pass aditional parameter to the .validate()?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/468", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/468/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/468/events", "html_url": "https://github.com/schematics/schematics/issues/468", "id": 198420331, "node_id": "MDU6SXNzdWUxOTg0MjAzMzE=", "number": 468, "title": "DictType , ListType Error", "user": {"login": "rfyiamcool", "id": 3785409, "node_id": "MDQ6VXNlcjM3ODU0MDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3785409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfyiamcool", "html_url": "https://github.com/rfyiamcool", "followers_url": "https://api.github.com/users/rfyiamcool/followers", "following_url": "https://api.github.com/users/rfyiamcool/following{/other_user}", "gists_url": "https://api.github.com/users/rfyiamcool/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfyiamcool/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfyiamcool/subscriptions", "organizations_url": "https://api.github.com/users/rfyiamcool/orgs", "repos_url": "https://api.github.com/users/rfyiamcool/repos", "events_url": "https://api.github.com/users/rfyiamcool/events{/privacy}", "received_events_url": "https://api.github.com/users/rfyiamcool/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-03T07:07:01Z", "updated_at": "2017-05-30T21:17:59Z", "closed_at": "2017-01-03T08:39:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want know schematics(dictType, LIstType) usage ,Then why is it wrong ?\r\n\r\n#### code: \r\n```\r\nfrom schematics.models import Model\r\nfrom schematics.types import IntType, StringType\r\nfrom schematics.types.compound import DictType, ModelType, ListType\r\n\r\n\r\nclass DetailDTO(Model):\r\n    notes = StringType()\r\n\r\n\r\nclass StandardDTO(Model):\r\n    standard = ListType(ModelType(DetailDTO))\r\n\r\n\r\nclass FreightTemplatedDTO(Model):\r\n\r\n    id = IntType(required=True)\r\n    blob = DictType(ModelType(StandardDTO))\r\n\r\n\r\nd = {\r\n    'id': 3,\r\n    'blob': {\r\n    \u00a6   'standard': [\r\n    \u00a6   \u00a6   'nima'\r\n    \u00a6   ]\r\n    }\r\n}\r\n\r\n\r\nf = FreightTemplatedDTO(d)\r\nprint f\r\n```\r\n\r\nbug , raise error ?  \r\n\r\n```\r\nPress ENTER or type command to continue\r\nTraceback (most recent call last):\r\n  File \"f.py\", line 31, in <module>\r\n    f = FreightTemplatedDTO(d)\r\n  File \"/home/ruifengyun/miniconda2/envs/xcf/lib/python2.7/site-packages/schematics/models.py\", line 242, in __init__\r\n    self._data = self.convert(raw_data, strict=strict, mapping=deserialize_mapping)\r\n  File \"/home/ruifengyun/miniconda2/envs/xcf/lib/python2.7/site-packages/schematics/models.py\", line 289, in convert\r\n    return convert(self.__class__, raw_data, **kw)\r\n  File \"/home/ruifengyun/miniconda2/envs/xcf/lib/python2.7/site-packages/schematics/transforms.py\", line 419, in convert\r\n    partial=partial, strict=strict, mapping=mapping)\r\n  File \"/home/ruifengyun/miniconda2/envs/xcf/lib/python2.7/site-packages/schematics/transforms.py\", line 119, in import_loop\r\n    raise ModelConversionError(errors, data)\r\nschematics.exceptions.ModelConversionError: {'blob': [u'Please use a mapping for this field or StandardDTO instance instead of list.']}\r\n\r\nshell returned 1\r\n```\r\n\r\n### Thanks You ....", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/467", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/467/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/467/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/467/events", "html_url": "https://github.com/schematics/schematics/issues/467", "id": 197280397, "node_id": "MDU6SXNzdWUxOTcyODAzOTc=", "number": 467, "title": "Opaque Type", "user": {"login": "jdandrea", "id": 108430, "node_id": "MDQ6VXNlcjEwODQzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/108430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdandrea", "html_url": "https://github.com/jdandrea", "followers_url": "https://api.github.com/users/jdandrea/followers", "following_url": "https://api.github.com/users/jdandrea/following{/other_user}", "gists_url": "https://api.github.com/users/jdandrea/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdandrea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdandrea/subscriptions", "organizations_url": "https://api.github.com/users/jdandrea/orgs", "repos_url": "https://api.github.com/users/jdandrea/repos", "events_url": "https://api.github.com/users/jdandrea/events{/privacy}", "received_events_url": "https://api.github.com/users/jdandrea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-12-22T22:32:48Z", "updated_at": "2017-03-16T18:57:06Z", "closed_at": "2017-03-16T18:57:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suppose I have a model, and one of the fields is an opaque dictionary we'll call \"parameters\".\r\n\r\nEach value can be a string/number or a list, or a dictionary. Lists and dictionaries can also be of arbitrary depth and contain strings/numbers ... or more lists/dictionaries. There is no particular validation of the strings/numbers here, other than the requirement for arbitrary nesting support.\r\n\r\nHow do I declare this using schematics, in particular accounting for nested lists/dictionaries? I was thinking along the lines of a self-referential type, where one of the possibilities could be itself.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/465", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/465/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/465/events", "html_url": "https://github.com/schematics/schematics/issues/465", "id": 194401139, "node_id": "MDU6SXNzdWUxOTQ0MDExMzk=", "number": 465, "title": "Unmaintained", "user": {"login": "rmb938", "id": 544545, "node_id": "MDQ6VXNlcjU0NDU0NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/544545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmb938", "html_url": "https://github.com/rmb938", "followers_url": "https://api.github.com/users/rmb938/followers", "following_url": "https://api.github.com/users/rmb938/following{/other_user}", "gists_url": "https://api.github.com/users/rmb938/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmb938/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmb938/subscriptions", "organizations_url": "https://api.github.com/users/rmb938/orgs", "repos_url": "https://api.github.com/users/rmb938/repos", "events_url": "https://api.github.com/users/rmb938/events{/privacy}", "received_events_url": "https://api.github.com/users/rmb938/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2016-12-08T17:50:43Z", "updated_at": "2017-06-24T06:54:58Z", "closed_at": "2017-05-23T01:35:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is it safe to assume this project is no longer maintained? Considering there has been very little activity since May of early this year. \r\n\r\n@bintoro @jmsdnns @kracekumar If you guys need more people to help out I am more than happy to lend a hand.\r\n\r\nI use schematics in a lot of my projects since there are not any other libraries that have similar features. I would like to continue using it but I am currently forced to make bug fixes and add features on my own forks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/464", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/464/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/464/events", "html_url": "https://github.com/schematics/schematics/issues/464", "id": 193531687, "node_id": "MDU6SXNzdWUxOTM1MzE2ODc=", "number": 464, "title": "ListType mock objects: min values for 'min_size' and 'max_size'", "user": {"login": "oblalex", "id": 904705, "node_id": "MDQ6VXNlcjkwNDcwNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/904705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oblalex", "html_url": "https://github.com/oblalex", "followers_url": "https://api.github.com/users/oblalex/followers", "following_url": "https://api.github.com/users/oblalex/following{/other_user}", "gists_url": "https://api.github.com/users/oblalex/gists{/gist_id}", "starred_url": "https://api.github.com/users/oblalex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oblalex/subscriptions", "organizations_url": "https://api.github.com/users/oblalex/orgs", "repos_url": "https://api.github.com/users/oblalex/repos", "events_url": "https://api.github.com/users/oblalex/events{/privacy}", "received_events_url": "https://api.github.com/users/oblalex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-12-05T15:41:48Z", "updated_at": "2018-02-13T18:48:44Z", "closed_at": "2018-02-13T18:48:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's not possible to generate empty mock list using `ListType`, because it uses bool-like checks:\r\n\r\n```python\r\n\r\nmin_size = self.min_size or 1\r\nmax_size = self.max_size or 1\r\n```\r\n\r\nDefault value for these attributes is `None`, so it's better to compare values with `None`:\r\n\r\n```python\r\n\r\nmin_size = self.min_size if self.min_size is not None else 1\r\nmax_size = self.max_size if self.max_size is not None else 1\r\n```\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/463", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/463/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/463/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/463/events", "html_url": "https://github.com/schematics/schematics/issues/463", "id": 193520587, "node_id": "MDU6SXNzdWUxOTM1MjA1ODc=", "number": 463, "title": "get_value_in: support of float values", "user": {"login": "oblalex", "id": 904705, "node_id": "MDQ6VXNlcjkwNDcwNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/904705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oblalex", "html_url": "https://github.com/oblalex", "followers_url": "https://api.github.com/users/oblalex/followers", "following_url": "https://api.github.com/users/oblalex/following{/other_user}", "gists_url": "https://api.github.com/users/oblalex/gists{/gist_id}", "starred_url": "https://api.github.com/users/oblalex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oblalex/subscriptions", "organizations_url": "https://api.github.com/users/oblalex/orgs", "repos_url": "https://api.github.com/users/oblalex/repos", "events_url": "https://api.github.com/users/oblalex/events{/privacy}", "received_events_url": "https://api.github.com/users/oblalex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-05T15:00:30Z", "updated_at": "2018-02-13T18:51:54Z", "closed_at": "2018-02-13T18:48:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "`get_range_endpoints()` uses `random.randint()` to produce random numbers while creating mock objects.\r\n\r\nThe issue is that `FloatType` fails to create mock objects, if it has float values for `min_value` and `max_value` properties.\r\n\r\nE.g., having field\r\n\r\n``` python\r\n\r\ndelay = FloatType(\r\n    min_value=1.0,\r\n    max_value=30.0,\r\n    default=10.0,\r\n    required=True,\r\n)\r\n```\r\n\r\nwill raise an error\r\n\r\n```ServerConfig.get_mock_object().to_primitive()\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    ServerConfig.get_mock_object().to_primitive()\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/models.py\", line 378, in get_mock_object\r\n    values[name] = field.mock(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/types/base.py\", line 323, in mock\r\n    return self._mock(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/types/compound.py\", line 115, in _mock\r\n    return self.model_class.get_mock_object(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/models.py\", line 378, in get_mock_object\r\n    values[name] = field.mock(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/types/base.py\", line 323, in mock\r\n    return self._mock(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/types/compound.py\", line 115, in _mock\r\n    return self.model_class.get_mock_object(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/models.py\", line 378, in get_mock_object\r\n    values[name] = field.mock(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/types/base.py\", line 323, in mock\r\n    return self._mock(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/types/compound.py\", line 115, in _mock\r\n    return self.model_class.get_mock_object(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/models.py\", line 378, in get_mock_object\r\n    values[name] = field.mock(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/types/base.py\", line 323, in mock\r\n    return self._mock(context)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/types/base.py\", line 450, in _mock\r\n    return get_value_in(self.min_value, self.max_value)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/site-packages/schematics/types/base.py\", line 71, in get_value_in\r\n    *get_range_endpoints(min_length, max_length, padding, required_length))\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/random.py\", line 218, in randint\r\n    return self.randrange(a, b+1)\r\n  File \"/Users/alex/.virtualenvs/sandbox/lib/python3.4/random.py\", line 182, in randrange\r\n    raise ValueError(\"non-integer arg 1 for randrange()\")\r\nValueError: non-integer arg 1 for randrange()\r\n```\r\n\r\nObviously, `random.randint` cannot be used for creating random floats. `random.uniform` must do this job.\r\n\r\n`get_value_in` is also used by `StringType` and so on. The most simple approach is to select random generator basing on type of `min_length` and `max_length` parameters, e.g.:\r\n\r\n``` python\r\n\r\ndef get_value_in(min_length, max_length, padding=0, required_length=0):\r\n    generator = (\r\n        random.uniform\r\n        if isinstance(min_length, float) or isinstance(max_length, float) else\r\n        random.randint\r\n    )\r\n    return generator(\r\n        *get_range_endpoints(min_length, max_length, padding, required_length))\r\n```\r\n\r\nBut, IMHO, this is a bit dirty way. It's better to specify proper generator in type/field definition. This will also allow user to set own generator, e.g. from `faker` library.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/461", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/461/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/461/events", "html_url": "https://github.com/schematics/schematics/issues/461", "id": 189556275, "node_id": "MDU6SXNzdWUxODk1NTYyNzU=", "number": 461, "title": "Include `help_text`-like field to TypeBase, so that documentation can be generated automatically from the metadata.", "user": {"login": "ses4j", "id": 435529, "node_id": "MDQ6VXNlcjQzNTUyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/435529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ses4j", "html_url": "https://github.com/ses4j", "followers_url": "https://api.github.com/users/ses4j/followers", "following_url": "https://api.github.com/users/ses4j/following{/other_user}", "gists_url": "https://api.github.com/users/ses4j/gists{/gist_id}", "starred_url": "https://api.github.com/users/ses4j/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ses4j/subscriptions", "organizations_url": "https://api.github.com/users/ses4j/orgs", "repos_url": "https://api.github.com/users/ses4j/repos", "events_url": "https://api.github.com/users/ses4j/events{/privacy}", "received_events_url": "https://api.github.com/users/ses4j/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-16T01:23:20Z", "updated_at": "2016-11-19T22:52:05Z", "closed_at": "2016-11-19T22:52:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a feature request to add something like Django's Field `help_text`: https://docs.djangoproject.com/en/1.10/ref/models/fields/#help-text\r\n\r\nI find it very useful to put documentation strings in.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/456", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/456/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/456/events", "html_url": "https://github.com/schematics/schematics/issues/456", "id": 182904326, "node_id": "MDU6SXNzdWUxODI5MDQzMjY=", "number": 456, "title": "StringType w/ choices does not convert field", "user": {"login": "riccardomurri", "id": 447228, "node_id": "MDQ6VXNlcjQ0NzIyOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/447228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/riccardomurri", "html_url": "https://github.com/riccardomurri", "followers_url": "https://api.github.com/users/riccardomurri/followers", "following_url": "https://api.github.com/users/riccardomurri/following{/other_user}", "gists_url": "https://api.github.com/users/riccardomurri/gists{/gist_id}", "starred_url": "https://api.github.com/users/riccardomurri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/riccardomurri/subscriptions", "organizations_url": "https://api.github.com/users/riccardomurri/orgs", "repos_url": "https://api.github.com/users/riccardomurri/repos", "events_url": "https://api.github.com/users/riccardomurri/events{/privacy}", "received_events_url": "https://api.github.com/users/riccardomurri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-13T21:22:21Z", "updated_at": "2017-01-22T21:58:43Z", "closed_at": "2017-01-22T21:58:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use `schematics` to validate a simple dict structure and convert\nit back to Python `dict`; one of the fields is of type \"string\" and the value\nmust be drawn from a set of choices.\n\nPlease have a look at the following session::\n\n```\nIn [61]: from schematics.models import Model\n\nIn [62]: from schematics.types import StringType\n\nIn [63]: class MyModel(Model):\n   ....:     provider = StringType(required=True, choices=['a','b','c'])\n   ....:\n\nIn [64]: m = MyModel()\n\nIn [65]: m.convert({'provider':'a'})\nOut[65]: {'provider': u'a'}\n\nIn [66]: m.to_dict()\nOut[66]: {'provider': None}\n```\n\nWhy is the `'provider'` field in the final converted dictionary set to `None`?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/455", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/455/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/455/events", "html_url": "https://github.com/schematics/schematics/issues/455", "id": 182777037, "node_id": "MDU6SXNzdWUxODI3NzcwMzc=", "number": 455, "title": "Release 2.0", "user": {"login": "sirex", "id": 297583, "node_id": "MDQ6VXNlcjI5NzU4Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/297583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirex", "html_url": "https://github.com/sirex", "followers_url": "https://api.github.com/users/sirex/followers", "following_url": "https://api.github.com/users/sirex/following{/other_user}", "gists_url": "https://api.github.com/users/sirex/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirex/subscriptions", "organizations_url": "https://api.github.com/users/sirex/orgs", "repos_url": "https://api.github.com/users/sirex/repos", "events_url": "https://api.github.com/users/sirex/events{/privacy}", "received_events_url": "https://api.github.com/users/sirex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-10-13T12:33:58Z", "updated_at": "2017-05-23T01:38:45Z", "closed_at": "2017-05-23T01:38:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see, that 2.0 is still in alpha stage, latest version is `2.0.0a1`.\n\nWhat is missing for this to be released as final stable 2.0?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/453", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/453/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/453/events", "html_url": "https://github.com/schematics/schematics/issues/453", "id": 180236572, "node_id": "MDU6SXNzdWUxODAyMzY1NzI=", "number": 453, "title": "Recursive import_loop with ListType", "user": {"login": "Guibod", "id": 840033, "node_id": "MDQ6VXNlcjg0MDAzMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/840033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Guibod", "html_url": "https://github.com/Guibod", "followers_url": "https://api.github.com/users/Guibod/followers", "following_url": "https://api.github.com/users/Guibod/following{/other_user}", "gists_url": "https://api.github.com/users/Guibod/gists{/gist_id}", "starred_url": "https://api.github.com/users/Guibod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Guibod/subscriptions", "organizations_url": "https://api.github.com/users/Guibod/orgs", "repos_url": "https://api.github.com/users/Guibod/repos", "events_url": "https://api.github.com/users/Guibod/events{/privacy}", "received_events_url": "https://api.github.com/users/Guibod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-30T07:17:03Z", "updated_at": "2017-03-15T17:33:32Z", "closed_at": "2017-03-15T17:33:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am unable to recursively apply update on an object:\n\n```\nmodel_instance.import_data(request.get_json(force=True), recursive=True)\n```\n\nAs one of my subobject is a ListType and that it crashes on this very line:\n\n```\ndata = dict(context.trusted_data) if context.trusted_data else {}\n```\n\nMy straight array can't be cast to dict, I guess it would work with a 0 or 2 element list.\n\nAttached my test case proving my point:\n\n```\nclass Stuff(Model):\n    label = StringType()\n\n\nclass MyOtherModel(Model):\n    name = StringType(default='fu')\n    list = ListType(ModelType(Stuff))\n\n\nclass TestListImport(unittest.TestCase):\n    def test_model_import(self):\n        instance = MyOtherModel()\n        instance.list = [\n            Stuff({'label': 'foo'}),\n            Stuff({'label': 'bar'}),\n            Stuff({'label': 'baz'})\n        ]\n        instance.import_data({'name': 'changed name', 'list': [Stuff({'label': 'xyz'})]}, recursive=True)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/452", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/452/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/452/events", "html_url": "https://github.com/schematics/schematics/issues/452", "id": 179976000, "node_id": "MDU6SXNzdWUxNzk5NzYwMDA=", "number": 452, "title": "ValidationError is not Hashable (2.0.0)", "user": {"login": "Guibod", "id": 840033, "node_id": "MDQ6VXNlcjg0MDAzMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/840033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Guibod", "html_url": "https://github.com/Guibod", "followers_url": "https://api.github.com/users/Guibod/followers", "following_url": "https://api.github.com/users/Guibod/following{/other_user}", "gists_url": "https://api.github.com/users/Guibod/gists{/gist_id}", "starred_url": "https://api.github.com/users/Guibod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Guibod/subscriptions", "organizations_url": "https://api.github.com/users/Guibod/orgs", "repos_url": "https://api.github.com/users/Guibod/repos", "events_url": "https://api.github.com/users/Guibod/events{/privacy}", "received_events_url": "https://api.github.com/users/Guibod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-29T07:49:39Z", "updated_at": "2017-03-29T21:48:24Z", "closed_at": "2017-03-29T21:48:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't `logging.exception(ValidationError)` it seems that the object is not hashable.\n\nThat's sad, it used to work pretty well on 1.1. I'm using Python 3.4.\n\n```\nclass TestUnhashable(unittest.TestCase):\n    def test_type_error_is_hashable(self):\n        try:\n            raise TypeError('Foo bar')\n        except TypeError as e:\n            logging.exception(e)\n\n    def test_validation_error_is_unhashable(self):\n        try:\n            raise ValidationError('Foo bar')\n        except ValidationError as e:\n            with self.assertRaises(TypeError) as c:\n                logging.exception(e)\n\n            self.assertIsInstance(c.exception, TypeError)\n            self.assertEqual(c.exception.args[0], 'unhashable type: \\'ValidationError\\'')\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/451", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/451/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/451/events", "html_url": "https://github.com/schematics/schematics/issues/451", "id": 179757267, "node_id": "MDU6SXNzdWUxNzk3NTcyNjc=", "number": 451, "title": "2.0.0 Defaults, not copied but using reference", "user": {"login": "Guibod", "id": 840033, "node_id": "MDQ6VXNlcjg0MDAzMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/840033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Guibod", "html_url": "https://github.com/Guibod", "followers_url": "https://api.github.com/users/Guibod/followers", "following_url": "https://api.github.com/users/Guibod/following{/other_user}", "gists_url": "https://api.github.com/users/Guibod/gists{/gist_id}", "starred_url": "https://api.github.com/users/Guibod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Guibod/subscriptions", "organizations_url": "https://api.github.com/users/Guibod/orgs", "repos_url": "https://api.github.com/users/Guibod/repos", "events_url": "https://api.github.com/users/Guibod/events{/privacy}", "received_events_url": "https://api.github.com/users/Guibod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-09-28T12:21:10Z", "updated_at": "2016-11-14T09:03:18Z", "closed_at": "2016-11-14T09:03:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I having issue porting my v1 project to v2 project. If I instanciate an object using \n\n```\nmodel = MyModel()\n```\n\nrather than \n\n```\nmodel = MyModel({})\n```\n\nI end up using defaults as reference and not copy. Ending with all subsequent objects to inherit their sibling value as default.\n\n```\nimport unittest\n\nfrom schematics import Model\nfrom schematics.types import ListType, StringType\n\nclass MyModel(Model):\n    items = ListType(StringType, default=[])\n\n\nclass TestIterable(unittest.TestCase):\n    def test_without_value(self):\n        model = MyModel()\n        model.items.append('foo')\n        model.items.append('bar')\n\n        self.assertEqual(len(model.items), 2)\n\n        model2 = MyModel()\n        self.assertEqual(len(model2.items), 0)  # This won't work. DUH. \n\n    def test_with_value(self):\n        model = MyModel({})\n        model.items.append('foo')\n        model.items.append('bar')\n\n        self.assertEqual(len(model.items), 2)\n\n        model2 = MyModel({})\n        self.assertEqual(len(model2.items), 0)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/446", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/446/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/446/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/446/events", "html_url": "https://github.com/schematics/schematics/issues/446", "id": 176739242, "node_id": "MDU6SXNzdWUxNzY3MzkyNDI=", "number": 446, "title": "Model + Schema", "user": {"login": "lkraider", "id": 52256, "node_id": "MDQ6VXNlcjUyMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/52256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkraider", "html_url": "https://github.com/lkraider", "followers_url": "https://api.github.com/users/lkraider/followers", "following_url": "https://api.github.com/users/lkraider/following{/other_user}", "gists_url": "https://api.github.com/users/lkraider/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkraider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkraider/subscriptions", "organizations_url": "https://api.github.com/users/lkraider/orgs", "repos_url": "https://api.github.com/users/lkraider/repos", "events_url": "https://api.github.com/users/lkraider/events{/privacy}", "received_events_url": "https://api.github.com/users/lkraider/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 276416520, "node_id": "MDU6TGFiZWwyNzY0MTY1MjA=", "url": "https://api.github.com/repos/schematics/schematics/labels/discussion", "name": "discussion", "color": "bfdadc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lkraider", "id": 52256, "node_id": "MDQ6VXNlcjUyMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/52256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkraider", "html_url": "https://github.com/lkraider", "followers_url": "https://api.github.com/users/lkraider/followers", "following_url": "https://api.github.com/users/lkraider/following{/other_user}", "gists_url": "https://api.github.com/users/lkraider/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkraider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkraider/subscriptions", "organizations_url": "https://api.github.com/users/lkraider/orgs", "repos_url": "https://api.github.com/users/lkraider/repos", "events_url": "https://api.github.com/users/lkraider/events{/privacy}", "received_events_url": "https://api.github.com/users/lkraider/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lkraider", "id": 52256, "node_id": "MDQ6VXNlcjUyMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/52256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkraider", "html_url": "https://github.com/lkraider", "followers_url": "https://api.github.com/users/lkraider/followers", "following_url": "https://api.github.com/users/lkraider/following{/other_user}", "gists_url": "https://api.github.com/users/lkraider/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkraider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkraider/subscriptions", "organizations_url": "https://api.github.com/users/lkraider/orgs", "repos_url": "https://api.github.com/users/lkraider/repos", "events_url": "https://api.github.com/users/lkraider/events{/privacy}", "received_events_url": "https://api.github.com/users/lkraider/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/schematics/schematics/milestones/3", "html_url": "https://github.com/schematics/schematics/milestone/3", "labels_url": "https://api.github.com/repos/schematics/schematics/milestones/3/labels", "id": 1396545, "node_id": "MDk6TWlsZXN0b25lMTM5NjU0NQ==", "number": 3, "title": "2.0", "description": null, "creator": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2015-11-05T22:26:45Z", "updated_at": "2017-06-27T23:30:08Z", "due_on": null, "closed_at": "2017-06-27T23:30:08Z"}, "comments": 2, "created_at": "2016-09-13T20:19:25Z", "updated_at": "2017-03-15T17:06:31Z", "closed_at": "2017-03-15T17:06:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all,\n\nI am working on making latest Schematics work with SQLAlchemy (see https://github.com/schematics/schemalchemy/issues/1) by bringing calculated types (getter/setter functions) up-to-date.\n\nThe core issue is to have the model instance go through the import loop, so that custom user setters can run against the instance.\n\nTowards this goal, I ended up splitting the Model into a simpler structure called Schema, similar to what SQLAlchemy does with its Table vs Base types.\n\nThe current work is ongoing in my repo at:\nhttps://github.com/nKey/schematics/tree/calculated-type\n\nWhat does this mean in practice? The Model now wraps the data and encodes the usual lib workflow, while the Schema encodes the actual type structure. This means any field name can fit into the Schema (no Model method conflict), and people that need more complex usage can rely on the backend without needing a Model.\n\nExample:\n\n``` python\n    schema = Schema('Player',\n        Field('id', IntType()),\n        Field('first_name', StringType(required=True)),\n        Field('last_name', StringType(required=True)),\n        Field('full_name', calculated(\n            type=StringType(),\n            fget=get_full_name,\n            fset=set_full_name))\n    )\n    input_data = {'id': '1', 'full_name': 'John Doe', 'hi': 1}\n    converted_data = convert(schema, input_data, partial=True)\n    validated_data = validate(schema, converted_data, convert=False, partial=True)\n```\n\nThis issue is just a notice I am working on this, it is not ready for a PR and it breaks the API (although I am making compatibility mixins).\n\nPS: any and all feedback is welcome\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/445", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/445/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/445/events", "html_url": "https://github.com/schematics/schematics/issues/445", "id": 175370231, "node_id": "MDU6SXNzdWUxNzUzNzAyMzE=", "number": 445, "title": "Parsing exception messages in 2.0.0a1", "user": {"login": "synic", "id": 30906, "node_id": "MDQ6VXNlcjMwOTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/30906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/synic", "html_url": "https://github.com/synic", "followers_url": "https://api.github.com/users/synic/followers", "following_url": "https://api.github.com/users/synic/following{/other_user}", "gists_url": "https://api.github.com/users/synic/gists{/gist_id}", "starred_url": "https://api.github.com/users/synic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/synic/subscriptions", "organizations_url": "https://api.github.com/users/synic/orgs", "repos_url": "https://api.github.com/users/synic/repos", "events_url": "https://api.github.com/users/synic/events{/privacy}", "received_events_url": "https://api.github.com/users/synic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/schematics/schematics/milestones/3", "html_url": "https://github.com/schematics/schematics/milestone/3", "labels_url": "https://api.github.com/repos/schematics/schematics/milestones/3/labels", "id": 1396545, "node_id": "MDk6TWlsZXN0b25lMTM5NjU0NQ==", "number": 3, "title": "2.0", "description": null, "creator": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2015-11-05T22:26:45Z", "updated_at": "2017-06-27T23:30:08Z", "due_on": null, "closed_at": "2017-06-27T23:30:08Z"}, "comments": 8, "created_at": "2016-09-06T22:47:33Z", "updated_at": "2017-03-29T21:59:29Z", "closed_at": "2017-03-29T21:59:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "In 1.x, validation error exceptions could be returned directly to the client.  Now they are in the format:\n\n```\nDataError({'email': [ErrorMessage(\"A calendar with the email address \"jasonmartinez@nichols.org\" already exists in the system.\")]},)\n```\n\nIf there's a `ModelType` field on the model, the error messages can even come with embedded `ValidationError` classes in it, like so:\n\n```\n{'credentials': {'oauth2_credentials': ValidationError(\"Invalid credentials supplied.\")}}\n```\n\nAre there any current methods for making these easier to deal with?  How is it expected we'll convert these error messages?  \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/444", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/444/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/444/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/444/events", "html_url": "https://github.com/schematics/schematics/issues/444", "id": 174874139, "node_id": "MDU6SXNzdWUxNzQ4NzQxMzk=", "number": 444, "title": "Model level validators don't work as expected", "user": {"login": "synic", "id": 30906, "node_id": "MDQ6VXNlcjMwOTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/30906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/synic", "html_url": "https://github.com/synic", "followers_url": "https://api.github.com/users/synic/followers", "following_url": "https://api.github.com/users/synic/following{/other_user}", "gists_url": "https://api.github.com/users/synic/gists{/gist_id}", "starred_url": "https://api.github.com/users/synic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/synic/subscriptions", "organizations_url": "https://api.github.com/users/synic/orgs", "repos_url": "https://api.github.com/users/synic/repos", "events_url": "https://api.github.com/users/synic/events{/privacy}", "received_events_url": "https://api.github.com/users/synic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-03T02:15:56Z", "updated_at": "2017-03-16T18:42:03Z", "closed_at": "2017-03-16T18:42:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you have a Model, with a validate function like this:\n\n``` python\nclass User(Model):\n    email = types.StringType()\n    def validate_email(self, data, value):\n        return value.lower()\n```\n\nReturning the value does NOT affect the field on the object, or in `_data`.\n\nSo, for example, this would be False:\n\n``` python\nu = User({'email': 'TEST@TEST.com'})\nu.email = 'test@test.com'\n```\n\nThis, however, does work:\n\n``` python\ndef validate_email(self, data, value):\n    data['email'] = value.lower()\n```\n\nI've tried both 1.1.1 and the current pre-release.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/438", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/438/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/438/events", "html_url": "https://github.com/schematics/schematics/issues/438", "id": 169017376, "node_id": "MDU6SXNzdWUxNjkwMTczNzY=", "number": 438, "title": "DataError raised when validate=False", "user": {"login": "alexhayes", "id": 142916, "node_id": "MDQ6VXNlcjE0MjkxNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/142916?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexhayes", "html_url": "https://github.com/alexhayes", "followers_url": "https://api.github.com/users/alexhayes/followers", "following_url": "https://api.github.com/users/alexhayes/following{/other_user}", "gists_url": "https://api.github.com/users/alexhayes/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexhayes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexhayes/subscriptions", "organizations_url": "https://api.github.com/users/alexhayes/orgs", "repos_url": "https://api.github.com/users/alexhayes/repos", "events_url": "https://api.github.com/users/alexhayes/events{/privacy}", "received_events_url": "https://api.github.com/users/alexhayes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lkraider", "id": 52256, "node_id": "MDQ6VXNlcjUyMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/52256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkraider", "html_url": "https://github.com/lkraider", "followers_url": "https://api.github.com/users/lkraider/followers", "following_url": "https://api.github.com/users/lkraider/following{/other_user}", "gists_url": "https://api.github.com/users/lkraider/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkraider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkraider/subscriptions", "organizations_url": "https://api.github.com/users/lkraider/orgs", "repos_url": "https://api.github.com/users/lkraider/repos", "events_url": "https://api.github.com/users/lkraider/events{/privacy}", "received_events_url": "https://api.github.com/users/lkraider/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lkraider", "id": 52256, "node_id": "MDQ6VXNlcjUyMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/52256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkraider", "html_url": "https://github.com/lkraider", "followers_url": "https://api.github.com/users/lkraider/followers", "following_url": "https://api.github.com/users/lkraider/following{/other_user}", "gists_url": "https://api.github.com/users/lkraider/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkraider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkraider/subscriptions", "organizations_url": "https://api.github.com/users/lkraider/orgs", "repos_url": "https://api.github.com/users/lkraider/repos", "events_url": "https://api.github.com/users/lkraider/events{/privacy}", "received_events_url": "https://api.github.com/users/lkraider/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/schematics/schematics/milestones/3", "html_url": "https://github.com/schematics/schematics/milestone/3", "labels_url": "https://api.github.com/repos/schematics/schematics/milestones/3/labels", "id": 1396545, "node_id": "MDk6TWlsZXN0b25lMTM5NjU0NQ==", "number": 3, "title": "2.0", "description": null, "creator": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2015-11-05T22:26:45Z", "updated_at": "2017-06-27T23:30:08Z", "due_on": null, "closed_at": "2017-06-27T23:30:08Z"}, "comments": 6, "created_at": "2016-08-03T00:04:17Z", "updated_at": "2017-06-15T10:40:57Z", "closed_at": "2017-05-08T21:55:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's say we have the following model;\n\n``` python\nclass Foo(Model):\n    bar = BooleanType()\n```\n\nAnd then we create an instance of it;\n\n``` python\na = Foo(dict(bar='a'), validate=False)\n```\n\nThis raises `DataError` (obviously because `bar` is not a bool) however I'd rather that DataError is not raised until I specifically call `a.validate()`.\n\nAre there any workarounds for this or is this something that is planned to be rectified (perhaps as part of #369)?\n\nThe reason why this is important to me is because I want all errors to be reported to the user, not just some of them, only for them to resubmit their request to find out there are more errors. For example;\n\n``` python\nclass Foo(Model):\n    bar = BooleanType()\n    eggs = StringType(choices=['yes', 'no', 'maybe'])\n```\n1. User submits a form with `bar='a'` and `eggs='adsf'`\n2. User is notified of an error about `bar` not being valid.\n3. User fixes `bar` and resubmits form\n4. User is notified for more errors for `eggs`\n\nFrom the users point of view that is extremely frustrating and from a programmers point of view even more frustrating that you can't do this!\n\nObviously this is a pretty trivial example and it's unlikely given the datatypes you would give the user a free form text field, however you get my point.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/437", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/437/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/437/events", "html_url": "https://github.com/schematics/schematics/issues/437", "id": 168680326, "node_id": "MDU6SXNzdWUxNjg2ODAzMjY=", "number": 437, "title": "Failure to parse a valid ISO8601 / RFC3339 Date Time string", "user": {"login": "nochristrequired", "id": 7018842, "node_id": "MDQ6VXNlcjcwMTg4NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7018842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nochristrequired", "html_url": "https://github.com/nochristrequired", "followers_url": "https://api.github.com/users/nochristrequired/followers", "following_url": "https://api.github.com/users/nochristrequired/following{/other_user}", "gists_url": "https://api.github.com/users/nochristrequired/gists{/gist_id}", "starred_url": "https://api.github.com/users/nochristrequired/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nochristrequired/subscriptions", "organizations_url": "https://api.github.com/users/nochristrequired/orgs", "repos_url": "https://api.github.com/users/nochristrequired/repos", "events_url": "https://api.github.com/users/nochristrequired/events{/privacy}", "received_events_url": "https://api.github.com/users/nochristrequired/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-01T15:56:20Z", "updated_at": "2017-05-23T01:45:36Z", "closed_at": "2017-05-23T01:45:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm getting the following error\n\n> schematics.exceptions.ModelConversionError: {'items': {'created_at': [u'Could not parse 2016-07-29T14:18:16.706000+00:00. Should be ISO8601.'], 'updated_at': [u'Could not parse 2016-07-29T14:18:39.692000+00:00. Should be ISO8601.']}}\n\nAs far as I can tell, the date time strings above are valid ISO8601 and conform to the internet datetime standard. The following can process these date time strings perfectly fine.\n\n``` python\nimport dateutil.parser\ndateutil.parser.parse('2016-07-29T14:18:16.706000+00:00')\n```\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/433", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/433/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/433/events", "html_url": "https://github.com/schematics/schematics/issues/433", "id": 167384723, "node_id": "MDU6SXNzdWUxNjczODQ3MjM=", "number": 433, "title": "Set is not a valid type for `choices` parameter", "user": {"login": "di", "id": 294415, "node_id": "MDQ6VXNlcjI5NDQxNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/294415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/di", "html_url": "https://github.com/di", "followers_url": "https://api.github.com/users/di/followers", "following_url": "https://api.github.com/users/di/following{/other_user}", "gists_url": "https://api.github.com/users/di/gists{/gist_id}", "starred_url": "https://api.github.com/users/di/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/di/subscriptions", "organizations_url": "https://api.github.com/users/di/orgs", "repos_url": "https://api.github.com/users/di/repos", "events_url": "https://api.github.com/users/di/events{/privacy}", "received_events_url": "https://api.github.com/users/di/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-25T14:48:26Z", "updated_at": "2017-03-16T13:41:29Z", "closed_at": "2017-03-16T13:40:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using:\n\n``` console\n$ pip freeze | grep schematics\nschematics==1.1.1\n$ python --version\nPython 2.7.10\n```\n\nAnd the following class:\n\n``` python\nfrom schematics.models import Model\nfrom schematics.types import StringType\n\nclass Foobar(Model):\n    foo = StringType(choices={'foo', 'bar'})\n```\n\nThis raises a `TypeError`:\n\n```\nTraceback (most recent call last):\n  File \"test.py\", line 4, in <module>\n    class Foobar(Model):\n  File \"test.py\", line 5, in Foobar\n    foo = StringType(choices={'foo', 'bar'})\n  File \"/private/tmp/env/lib/python2.7/site-packages/schematics/types/base.py\", line 339, in __init__\n    super(StringType, self).__init__(**kwargs)\n  File \"/private/tmp/env/lib/python2.7/site-packages/schematics/types/base.py\", line 184, in __init__\n    raise TypeError('\"choices\" must be a list or tuple')\nTypeError: \"choices\" must be a list or tuple\n```\n\nIs there a reason why `choices` must be an ordered collection?\n\nFurthermore, this seems to be a regression, as this behavior was supported in `schematics<=1.0.2` and removed with https://github.com/schematics/schematics/pull/267\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/432", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/432/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/432/events", "html_url": "https://github.com/schematics/schematics/issues/432", "id": 163250745, "node_id": "MDU6SXNzdWUxNjMyNTA3NDU=", "number": 432, "title": "New project named itself similarly", "user": {"login": "kstrauser", "id": 295674, "node_id": "MDQ6VXNlcjI5NTY3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/295674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kstrauser", "html_url": "https://github.com/kstrauser", "followers_url": "https://api.github.com/users/kstrauser/followers", "following_url": "https://api.github.com/users/kstrauser/following{/other_user}", "gists_url": "https://api.github.com/users/kstrauser/gists{/gist_id}", "starred_url": "https://api.github.com/users/kstrauser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kstrauser/subscriptions", "organizations_url": "https://api.github.com/users/kstrauser/orgs", "repos_url": "https://api.github.com/users/kstrauser/repos", "events_url": "https://api.github.com/users/kstrauser/events{/privacy}", "received_events_url": "https://api.github.com/users/kstrauser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-30T19:42:17Z", "updated_at": "2016-07-05T22:36:57Z", "closed_at": "2016-07-05T22:31:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A new project, [schemagic](https://github.com/Mechrophile/schemagic), is a data validation library for Python. I wish they'd picked almost literally any other name. :-/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/430", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/430/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/430/events", "html_url": "https://github.com/schematics/schematics/issues/430", "id": 160255083, "node_id": "MDU6SXNzdWUxNjAyNTUwODM=", "number": 430, "title": "Incorrectly giving a dict as a ListType of ModelTypes does not raise a ModelValidationError", "user": {"login": "di", "id": 294415, "node_id": "MDQ6VXNlcjI5NDQxNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/294415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/di", "html_url": "https://github.com/di", "followers_url": "https://api.github.com/users/di/followers", "following_url": "https://api.github.com/users/di/following{/other_user}", "gists_url": "https://api.github.com/users/di/gists{/gist_id}", "starred_url": "https://api.github.com/users/di/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/di/subscriptions", "organizations_url": "https://api.github.com/users/di/orgs", "repos_url": "https://api.github.com/users/di/repos", "events_url": "https://api.github.com/users/di/events{/privacy}", "received_events_url": "https://api.github.com/users/di/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-14T18:45:12Z", "updated_at": "2016-06-14T19:04:58Z", "closed_at": "2016-06-14T19:04:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologies if this was already known or fixed in the dev branch, I took a quick search through the issues and didn't find anything that seemed to match.\n\nUsing:\n\n``` console\n$ pip freeze | grep schematics\nschematics==1.1.1\n$ python --version\nPython 2.7.10\n```\n\nAnd the following classes:\n\n``` python\nfrom schematics.models import Model\nfrom schematics.types.compound import ListType, ModelType\nfrom schematics.types import StringType\n\nclass Child(Model):\n    foo = StringType()\n\nclass Parent(Model):\n    children = ListType(ModelType(Child))\n```\n\nThis works as expected:\n\n```\n>>> Parent({'children': [{'foo': 'bar'}]})\n```\n\nThis raises a `ModelValidationError` as expected\n\n```\n>>> Parent({'children': 'invalid'})\nTraceback (most recent call last):\n  File \"test.py\", line 12, in <module>\n    Parent({'children': 'invalid'})\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/models.py\", line 242, in __init__\n    self._data = self.convert(raw_data, strict=strict, mapping=deserialize_mapping)\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/models.py\", line 289, in convert\n    return convert(self.__class__, raw_data, **kw)\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/transforms.py\", line 419, in convert\n    partial=partial, strict=strict, mapping=mapping)\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/transforms.py\", line 119, in import_loop\n    raise ModelConversionError(errors, data)\nschematics.exceptions.ModelConversionError: {'children': [u'Please use a mapping for this field or Child instance instead of str.']}\n```\n\nThis does not raise a `ModelValidationError` as I would expect:\n\n```\n>>> Parent({'children': {'foo': 'bar'}})\nTraceback (most recent call last):\n  File \"test.py\", line 13, in <module>\n    Parent({'children': {'foo': 'bar'}})\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/models.py\", line 242, in __init__\n    self._data = self.convert(raw_data, strict=strict, mapping=deserialize_mapping)\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/models.py\", line 289, in convert\n    return convert(self.__class__, raw_data, **kw)\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/transforms.py\", line 419, in convert\n    partial=partial, strict=strict, mapping=mapping)\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/transforms.py\", line 109, in import_loop\n    raw_value = field_converter(field, raw_value)\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/transforms.py\", line 416, in field_converter\n    return field.to_native(value)\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/types/compound.py\", line 156, in to_native\n    items = self._force_list(value)\n  File \"/tmp/env/lib/python2.7/site-packages/schematics/types/compound.py\", line 149, in _force_list\n    return [value[unicode(k)] for k in sorted(map(int, value.keys()))]\nValueError: invalid literal for int() with base 10: 'foo'\n```\n\nI'd be happy to try to submit a PR if this is a confirmed bug. Thanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/429", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/429/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/429/events", "html_url": "https://github.com/schematics/schematics/issues/429", "id": 160057964, "node_id": "MDU6SXNzdWUxNjAwNTc5NjQ=", "number": 429, "title": "Ability to inspect the primitive type used to store data", "user": {"login": "chadrik", "id": 63251, "node_id": "MDQ6VXNlcjYzMjUx", "avatar_url": "https://avatars1.githubusercontent.com/u/63251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chadrik", "html_url": "https://github.com/chadrik", "followers_url": "https://api.github.com/users/chadrik/followers", "following_url": "https://api.github.com/users/chadrik/following{/other_user}", "gists_url": "https://api.github.com/users/chadrik/gists{/gist_id}", "starred_url": "https://api.github.com/users/chadrik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chadrik/subscriptions", "organizations_url": "https://api.github.com/users/chadrik/orgs", "repos_url": "https://api.github.com/users/chadrik/repos", "events_url": "https://api.github.com/users/chadrik/events{/privacy}", "received_events_url": "https://api.github.com/users/chadrik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/schematics/schematics/milestones/3", "html_url": "https://github.com/schematics/schematics/milestone/3", "labels_url": "https://api.github.com/repos/schematics/schematics/milestones/3/labels", "id": 1396545, "node_id": "MDk6TWlsZXN0b25lMTM5NjU0NQ==", "number": 3, "title": "2.0", "description": null, "creator": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2015-11-05T22:26:45Z", "updated_at": "2017-06-27T23:30:08Z", "due_on": null, "closed_at": "2017-06-27T23:30:08Z"}, "comments": 11, "created_at": "2016-06-13T22:20:46Z", "updated_at": "2017-04-06T13:40:25Z", "closed_at": "2017-04-06T13:40:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "As a developer using schematics to automatically convert a model to an open schema format (e.g. json-schema), it would be very useful to be able to inspect the python data type used to store the primitive data (i.e. one of `str`, `int`, `float`, `bool`, `dict`, or `list`).  I propose a class attribute named `PRIMITIVE_TYPE`.  This is not something that would be required for a custom model to implement in order operate correctly, but it would be great for the built-in models to set the standard for users to follow.  \n\nIt can also be used to create variation through inheritance, as in:\n\n``` python\nclass NumberType(BaseType):\n    PRIMITIVE_TYPE = None\n    ...\n\nclass IntType(NumberType):\n    PRIMITIVE_TYPE = int\n    ...\n\nclass FloatType(NumberType):\n    PRIMITIVE_TYPE = float\n    ...\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/424", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/424/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/424/events", "html_url": "https://github.com/schematics/schematics/issues/424", "id": 156764087, "node_id": "MDU6SXNzdWUxNTY3NjQwODc=", "number": 424, "title": "PyCon", "user": {"login": "jmsdnns", "id": 7950614, "node_id": "MDQ6VXNlcjc5NTA2MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7950614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmsdnns", "html_url": "https://github.com/jmsdnns", "followers_url": "https://api.github.com/users/jmsdnns/followers", "following_url": "https://api.github.com/users/jmsdnns/following{/other_user}", "gists_url": "https://api.github.com/users/jmsdnns/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmsdnns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmsdnns/subscriptions", "organizations_url": "https://api.github.com/users/jmsdnns/orgs", "repos_url": "https://api.github.com/users/jmsdnns/repos", "events_url": "https://api.github.com/users/jmsdnns/events{/privacy}", "received_events_url": "https://api.github.com/users/jmsdnns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-25T14:24:07Z", "updated_at": "2018-04-26T23:22:16Z", "closed_at": "2018-04-26T23:22:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Is anyone from the Schematics team going to PyCon?\n\nI will be there. I also play drums in a punk band that sings songs about startups and hacker culture. We're called [Adventure Capitalists](http://adcap.biz) and we are playing at PyCon May 30th. Specifically, the Crystal Ballroom as part of the night's events.\n\nFor those that don't know me, I started Schematics way back when. I haven't been too active since a few years ago, but the project has been fortunate and had a few incredible leaders, like @kracekumar and @bintoro.\n\nSo anyway, I'll be there in Portland, OR, and would love to meet new friends. :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/423", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/423/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/423/events", "html_url": "https://github.com/schematics/schematics/issues/423", "id": 156660811, "node_id": "MDU6SXNzdWUxNTY2NjA4MTE=", "number": 423, "title": "Update Model instance with raw_data", "user": {"login": "alexhayes", "id": 142916, "node_id": "MDQ6VXNlcjE0MjkxNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/142916?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexhayes", "html_url": "https://github.com/alexhayes", "followers_url": "https://api.github.com/users/alexhayes/followers", "following_url": "https://api.github.com/users/alexhayes/following{/other_user}", "gists_url": "https://api.github.com/users/alexhayes/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexhayes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexhayes/subscriptions", "organizations_url": "https://api.github.com/users/alexhayes/orgs", "repos_url": "https://api.github.com/users/alexhayes/repos", "events_url": "https://api.github.com/users/alexhayes/events{/privacy}", "received_events_url": "https://api.github.com/users/alexhayes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-05-25T04:27:47Z", "updated_at": "2016-05-26T00:45:45Z", "closed_at": "2016-05-26T00:45:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a model that looks similar to as follows;\n\n``` python\nclass MyModel(Model):\n    ....\n    ....\n\n    def save(self):\n        raw_data = call_restful_api_thing(self.to_primitive())\n        # Update model instance to that of raw_data\n```\n\nTo update the model instance is it safe to simply do the following;\n\n``` python\n    def save(self):\n        raw_data = call_restful_api_thing(self.to_primitive())\n        self.__init__(raw_data)\n```\n\nI mean, at the moment it works, but it's potentially not future proof and perhaps not very intuitive.\n\nI'm not really interested in setting the values manually because it's a deeply nested structure and it would be a bit of a pain, not easily maintainable and certainly not DRY.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/420", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/420/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/420/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/420/events", "html_url": "https://github.com/schematics/schematics/issues/420", "id": 155477754, "node_id": "MDU6SXNzdWUxNTU0Nzc3NTQ=", "number": 420, "title": "Minor wheel issues: license and author files missing from wheel", "user": {"login": "pombredanne", "id": 675997, "node_id": "MDQ6VXNlcjY3NTk5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/675997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pombredanne", "html_url": "https://github.com/pombredanne", "followers_url": "https://api.github.com/users/pombredanne/followers", "following_url": "https://api.github.com/users/pombredanne/following{/other_user}", "gists_url": "https://api.github.com/users/pombredanne/gists{/gist_id}", "starred_url": "https://api.github.com/users/pombredanne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pombredanne/subscriptions", "organizations_url": "https://api.github.com/users/pombredanne/orgs", "repos_url": "https://api.github.com/users/pombredanne/repos", "events_url": "https://api.github.com/users/pombredanne/events{/privacy}", "received_events_url": "https://api.github.com/users/pombredanne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-05-18T11:25:41Z", "updated_at": "2017-05-31T03:43:52Z", "closed_at": "2017-05-23T02:26:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In #116 a license file was added, but it is not included in the built wheels.\nIn that license the AUTHORS files is referenced. And it is not included either in the wheel.\nFinally the DESCRIPTION.rst of the wheel is empty because the `long_description` in not setup.py's  `setup() \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/418", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/418/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/418/events", "html_url": "https://github.com/schematics/schematics/issues/418", "id": 154782430, "node_id": "MDU6SXNzdWUxNTQ3ODI0MzA=", "number": 418, "title": "test fail to run when using tox locally", "user": {"login": "chadrik", "id": 63251, "node_id": "MDQ6VXNlcjYzMjUx", "avatar_url": "https://avatars1.githubusercontent.com/u/63251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chadrik", "html_url": "https://github.com/chadrik", "followers_url": "https://api.github.com/users/chadrik/followers", "following_url": "https://api.github.com/users/chadrik/following{/other_user}", "gists_url": "https://api.github.com/users/chadrik/gists{/gist_id}", "starred_url": "https://api.github.com/users/chadrik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chadrik/subscriptions", "organizations_url": "https://api.github.com/users/chadrik/orgs", "repos_url": "https://api.github.com/users/chadrik/repos", "events_url": "https://api.github.com/users/chadrik/events{/privacy}", "received_events_url": "https://api.github.com/users/chadrik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-05-13T19:19:56Z", "updated_at": "2018-02-15T22:12:35Z", "closed_at": "2017-05-23T01:53:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if I'm doing something wrong but I get a series of `ImportError` lines if I run `tox` locally.   If I add `tests/__init__.py` then it works again.  I remember reading in either the tox or pytest docs that they recommend not adding this file, but I ran into the same problem on my own project and I could neither find a better solution nor see a down side to adding it.\n\nAlso, I found [this tool](https://pypi.python.org/pypi/tox-travis) which makes it easy to setup separate travis jobs for each python environment, so it's more clear when one version fails and the others succeed.  For example, notice the separate Python:2.7 and Python:3.5 jobs here: https://travis-ci.org/chadrik/rill\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/416", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/416/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/416/events", "html_url": "https://github.com/schematics/schematics/issues/416", "id": 154154181, "node_id": "MDU6SXNzdWUxNTQxNTQxODE=", "number": 416, "title": "PolyModelType doesn't provide _mock method", "user": {"login": "omgq", "id": 16743321, "node_id": "MDQ6VXNlcjE2NzQzMzIx", "avatar_url": "https://avatars0.githubusercontent.com/u/16743321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omgq", "html_url": "https://github.com/omgq", "followers_url": "https://api.github.com/users/omgq/followers", "following_url": "https://api.github.com/users/omgq/following{/other_user}", "gists_url": "https://api.github.com/users/omgq/gists{/gist_id}", "starred_url": "https://api.github.com/users/omgq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omgq/subscriptions", "organizations_url": "https://api.github.com/users/omgq/orgs", "repos_url": "https://api.github.com/users/omgq/repos", "events_url": "https://api.github.com/users/omgq/events{/privacy}", "received_events_url": "https://api.github.com/users/omgq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-05-11T03:46:20Z", "updated_at": "2016-05-17T14:18:04Z", "closed_at": "2016-05-17T13:20:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found PolyModelType fields would cause get_mock_object() raising exception since it doesn't implement _mock method.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/415", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/415/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/415/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/415/events", "html_url": "https://github.com/schematics/schematics/issues/415", "id": 153432099, "node_id": "MDU6SXNzdWUxNTM0MzIwOTk=", "number": 415, "title": "default validation context should add a oo item", "user": {"login": "omgq", "id": 16743321, "node_id": "MDQ6VXNlcjE2NzQzMzIx", "avatar_url": "https://avatars0.githubusercontent.com/u/16743321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omgq", "html_url": "https://github.com/omgq", "followers_url": "https://api.github.com/users/omgq/followers", "following_url": "https://api.github.com/users/omgq/following{/other_user}", "gists_url": "https://api.github.com/users/omgq/gists{/gist_id}", "starred_url": "https://api.github.com/users/omgq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omgq/subscriptions", "organizations_url": "https://api.github.com/users/omgq/orgs", "repos_url": "https://api.github.com/users/omgq/repos", "events_url": "https://api.github.com/users/omgq/events{/privacy}", "received_events_url": "https://api.github.com/users/omgq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-05-06T11:26:02Z", "updated_at": "2016-05-07T11:12:33Z", "closed_at": "2016-05-06T15:37:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\nfrom schematics.models import Model\nfrom schematics.types import IntType, StringType\nfrom schematics.types.compound import ModelType\n\n\nclass SomeModel(Model):\n    intt = IntType(required=True)\n    strt = StringType(required=True)\n\nModelType(SomeModel, required=True).validate({\"intt\":1, \"strt\": \"abcd\"})\n\n```\n\nSee python code above. It would raise exception as following:\n\n``` python\n.../schematics/types/compound.pyc in _convert(self, value, context)\n    124             raise ConversionError(\n    125                 \"Input must be a mapping or '%s' instance\" % self.model_class.__name__)\n--> 126         if context.convert and context.oo:\n    127             return model_class(value, context=context)\n    128         else:\n\nAttributeError: 'Context' object has no attribute 'oo'\n```\n\nAfter tracing back, it seems the default validation context misses an item \"oo\".\n\n``` python\n.../schematics/validate.py\n\ndef get_validation_context(**options):\n    validation_options = {\n        'field_converter': validation_converter,\n        'partial': False,\n        'strict': False,\n        'convert': True,\n        'validate': True,\n        'new': False,\n--->    'oo': False\n    }\n    validation_options.update(options)\n    return Context(**validation_options)\n```\n\nInserting the line above solves the problem.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/414", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/414/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/414/events", "html_url": "https://github.com/schematics/schematics/issues/414", "id": 152198981, "node_id": "MDU6SXNzdWUxNTIxOTg5ODE=", "number": 414, "title": "Prefer datetime.date() in DateType._mock()", "user": {"login": "shangxiao", "id": 1845938, "node_id": "MDQ6VXNlcjE4NDU5Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1845938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shangxiao", "html_url": "https://github.com/shangxiao", "followers_url": "https://api.github.com/users/shangxiao/followers", "following_url": "https://api.github.com/users/shangxiao/following{/other_user}", "gists_url": "https://api.github.com/users/shangxiao/gists{/gist_id}", "starred_url": "https://api.github.com/users/shangxiao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shangxiao/subscriptions", "organizations_url": "https://api.github.com/users/shangxiao/orgs", "repos_url": "https://api.github.com/users/shangxiao/repos", "events_url": "https://api.github.com/users/shangxiao/events{/privacy}", "received_events_url": "https://api.github.com/users/shangxiao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-01T13:16:16Z", "updated_at": "2016-05-02T17:23:31Z", "closed_at": "2016-05-02T17:23:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Prefer `datetime.date()` over `datetime.datetime()` in `DateType._mock()` for consistent values used by this field.\n\nhttps://github.com/schematics/schematics/blob/development/schematics/types/base.py#L615\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/411", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/411/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/411/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/411/events", "html_url": "https://github.com/schematics/schematics/issues/411", "id": 151839438, "node_id": "MDU6SXNzdWUxNTE4Mzk0Mzg=", "number": 411, "title": "ImportError: No module named serialize", "user": {"login": "duanshui1184", "id": 4328965, "node_id": "MDQ6VXNlcjQzMjg5NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/4328965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duanshui1184", "html_url": "https://github.com/duanshui1184", "followers_url": "https://api.github.com/users/duanshui1184/followers", "following_url": "https://api.github.com/users/duanshui1184/following{/other_user}", "gists_url": "https://api.github.com/users/duanshui1184/gists{/gist_id}", "starred_url": "https://api.github.com/users/duanshui1184/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duanshui1184/subscriptions", "organizations_url": "https://api.github.com/users/duanshui1184/orgs", "repos_url": "https://api.github.com/users/duanshui1184/repos", "events_url": "https://api.github.com/users/duanshui1184/events{/privacy}", "received_events_url": "https://api.github.com/users/duanshui1184/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-29T10:45:32Z", "updated_at": "2016-04-30T04:43:17Z", "closed_at": "2016-04-30T04:43:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "from schematics.serialize import (to_python, to_json)\nImportError: No module named serialize\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/408", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/408/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/408/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/408/events", "html_url": "https://github.com/schematics/schematics/issues/408", "id": 151498704, "node_id": "MDU6SXNzdWUxNTE0OTg3MDQ=", "number": 408, "title": "flatten / expand", "user": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-04-27T21:46:13Z", "updated_at": "2016-04-28T18:35:20Z", "closed_at": "2016-04-28T18:35:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "What's the use case for `flatten()` and `expand()`? Do we want to keep them?\n\n`ListType` has a weird feature specifically to support `expand`: it accepts dictionaries and uses their keys to sort the values. This is so that the list\n\n```\nfield = ['foo', 'bar']\n```\n\ncan be flattened into\n\n```\n{'field.0': 'foo', 'field.1': 'bar'}\n```\n\nand successfully expanded without confusing it with a dictionary with keys 0 and 1.\n\nI'm not okay with `ListType` accepting dictionaries. To work around this, I taught `expand` to interpret a flattened structure with a zero-based key sequence as a list. This works, but it means that a legitimate dictionary with (only) zero-based integer keys will also become a list on expansion. Is this good enough? Does anyone use `flatten`?\n\nThe alternative is to rewrite `expand()` so that it actually looks at the model it's expanding to, but I don't want to go there if this is just a vestigial feature that no one uses.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/406", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/406/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/406/events", "html_url": "https://github.com/schematics/schematics/issues/406", "id": 149703804, "node_id": "MDU6SXNzdWUxNDk3MDM4MDQ=", "number": 406, "title": "UnknownFieldError without any information about the field", "user": {"login": "sirex", "id": 297583, "node_id": "MDQ6VXNlcjI5NzU4Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/297583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirex", "html_url": "https://github.com/sirex", "followers_url": "https://api.github.com/users/sirex/followers", "following_url": "https://api.github.com/users/sirex/following{/other_user}", "gists_url": "https://api.github.com/users/sirex/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirex/subscriptions", "organizations_url": "https://api.github.com/users/sirex/orgs", "repos_url": "https://api.github.com/users/sirex/repos", "events_url": "https://api.github.com/users/sirex/events{/privacy}", "received_events_url": "https://api.github.com/users/sirex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-20T08:53:15Z", "updated_at": "2016-04-25T14:27:04Z", "closed_at": "2016-04-25T14:27:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Schematics models have this code:\n\n``` python\n    def __getitem__(self, name):\n        if name in self._fields or name in self._serializables:\n            return getattr(self, name)\n        else:\n            raise UnknownFieldError\n\n    def __setitem__(self, name, value):\n        if name in self._fields:\n            return setattr(self, name, value)\n        else:\n            raise UnknownFieldError\n\n    def __delitem__(self, name):\n        if name in self._fields:\n            return delattr(self, name)\n        else:\n            raise UnknownFieldError\n```\n\nWhen I try to access a field of model like this:\n\n``` python\nmodel[field]\n```\n\nI get something like this:\n\n``` pytb\nUnknownFieldError\n```\n\nWithout any information about the field. This makes it really hard to debug what went wrong.\n\nProper message should be passed to `UnknownFieldError` with description what happened.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/405", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/405/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/405/events", "html_url": "https://github.com/schematics/schematics/issues/405", "id": 149194510, "node_id": "MDU6SXNzdWUxNDkxOTQ1MTA=", "number": 405, "title": "to_native returns Model instance in v2.0.0-dev2", "user": {"login": "rskumar", "id": 928743, "node_id": "MDQ6VXNlcjkyODc0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/928743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rskumar", "html_url": "https://github.com/rskumar", "followers_url": "https://api.github.com/users/rskumar/followers", "following_url": "https://api.github.com/users/rskumar/following{/other_user}", "gists_url": "https://api.github.com/users/rskumar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rskumar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rskumar/subscriptions", "organizations_url": "https://api.github.com/users/rskumar/orgs", "repos_url": "https://api.github.com/users/rskumar/repos", "events_url": "https://api.github.com/users/rskumar/events{/privacy}", "received_events_url": "https://api.github.com/users/rskumar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-04-18T16:00:53Z", "updated_at": "2016-05-02T11:23:11Z", "closed_at": "2016-05-02T11:23:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "`to_native` in 1.x version seems to return dict with native python values, while in 2.x-dev[1,2] its returning model object. Is that intentional change? What is recommended way now to get dict with native values?\n\nExample:\n\n```\nclass Product(Model):\n    name = StringType(required=True, min_length=3, max_length=100)\n    ...\n    updated = DateTimeType(required=True)\n\n# Usage\nproduct = Product(kwargs)\nprint(type(product.to_native()))\n\n>> <class 'proto.models.Product'>\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/403", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/403/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/403/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/403/events", "html_url": "https://github.com/schematics/schematics/issues/403", "id": 143480687, "node_id": "MDU6SXNzdWUxNDM0ODA2ODc=", "number": 403, "title": "Any chance of a new pip build?", "user": {"login": "hunt3ri", "id": 1523510, "node_id": "MDQ6VXNlcjE1MjM1MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1523510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hunt3ri", "html_url": "https://github.com/hunt3ri", "followers_url": "https://api.github.com/users/hunt3ri/followers", "following_url": "https://api.github.com/users/hunt3ri/following{/other_user}", "gists_url": "https://api.github.com/users/hunt3ri/gists{/gist_id}", "starred_url": "https://api.github.com/users/hunt3ri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hunt3ri/subscriptions", "organizations_url": "https://api.github.com/users/hunt3ri/orgs", "repos_url": "https://api.github.com/users/hunt3ri/repos", "events_url": "https://api.github.com/users/hunt3ri/events{/privacy}", "received_events_url": "https://api.github.com/users/hunt3ri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-03-25T11:22:27Z", "updated_at": "2016-05-11T09:02:33Z", "closed_at": "2016-05-03T10:12:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi this existing dev2 pip build contains a number of bugs that have been fixed recently.  Any chance of a new build??\n\nThanks\nIain\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/402", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/402/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/402/events", "html_url": "https://github.com/schematics/schematics/issues/402", "id": 143236909, "node_id": "MDU6SXNzdWUxNDMyMzY5MDk=", "number": 402, "title": "Remove **kwargs if not used", "user": {"login": "sirex", "id": 297583, "node_id": "MDQ6VXNlcjI5NzU4Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/297583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirex", "html_url": "https://github.com/sirex", "followers_url": "https://api.github.com/users/sirex/followers", "following_url": "https://api.github.com/users/sirex/following{/other_user}", "gists_url": "https://api.github.com/users/sirex/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirex/subscriptions", "organizations_url": "https://api.github.com/users/sirex/orgs", "repos_url": "https://api.github.com/users/sirex/repos", "events_url": "https://api.github.com/users/sirex/events{/privacy}", "received_events_url": "https://api.github.com/users/sirex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-24T12:53:40Z", "updated_at": "2016-04-24T18:17:46Z", "closed_at": "2016-04-24T18:17:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had fllowing situation:\n\n``` python\nfrom schematics.models import Model\nfrom schematics.types import IntType\n\nclass Mapping(Model):\n    value = IntType(deserialized_from='@value')\n\nassert Mapping({'@value': '1'}, strict=False).to_primitive() == {'value': 1}\n# => {'value': None} != {'value': 1}\n```\n\nHere I misspelled `deserialized_from` argument name and it took quite some time to figure it out, because I did not suspected, that `IntType` can swallow arguments with any name.\n\nThis happened, because `BaseType` accepts `**kwargs` without using it, which allows all type classes to accept any arguments.\n\nIf not used, `**kwargs` should be removed from `BaseType` constructor letting Python do automatic passed argument check.\n\nAfter removing `**kwargs` I will get nice Python error instead of silence:\n\n``` pytb\nTypeError: __init__() got an unexpected keyword argument 'deserialized_from'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/401", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/401/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/401/events", "html_url": "https://github.com/schematics/schematics/issues/401", "id": 141120925, "node_id": "MDU6SXNzdWUxNDExMjA5MjU=", "number": 401, "title": "Move to a single-branch setup?", "user": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-03-15T22:49:32Z", "updated_at": "2017-05-23T03:03:52Z", "closed_at": "2017-05-23T02:36:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "What's the point of having two permanent branches? We could just work on `master` and tag releases along the way.\n\nThoughts?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/398", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/398/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/398/events", "html_url": "https://github.com/schematics/schematics/issues/398", "id": 138579933, "node_id": "MDU6SXNzdWUxMzg1Nzk5MzM=", "number": 398, "title": "What remains to be done till the next stable release?", "user": {"login": "JBKahn", "id": 2654653, "node_id": "MDQ6VXNlcjI2NTQ2NTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2654653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JBKahn", "html_url": "https://github.com/JBKahn", "followers_url": "https://api.github.com/users/JBKahn/followers", "following_url": "https://api.github.com/users/JBKahn/following{/other_user}", "gists_url": "https://api.github.com/users/JBKahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/JBKahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JBKahn/subscriptions", "organizations_url": "https://api.github.com/users/JBKahn/orgs", "repos_url": "https://api.github.com/users/JBKahn/repos", "events_url": "https://api.github.com/users/JBKahn/events{/privacy}", "received_events_url": "https://api.github.com/users/JBKahn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-03-04T20:34:22Z", "updated_at": "2017-05-23T02:37:33Z", "closed_at": "2017-05-23T02:37:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wasn't sure of a better place to ask but what remains to be done till the next stable release?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/397", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/397/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/397/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/397/events", "html_url": "https://github.com/schematics/schematics/issues/397", "id": 138142440, "node_id": "MDU6SXNzdWUxMzgxNDI0NDA=", "number": 397, "title": "ModelOptions should allow anykind of extra parameters", "user": {"login": "Guibod", "id": 840033, "node_id": "MDQ6VXNlcjg0MDAzMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/840033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Guibod", "html_url": "https://github.com/Guibod", "followers_url": "https://api.github.com/users/Guibod/followers", "following_url": "https://api.github.com/users/Guibod/following{/other_user}", "gists_url": "https://api.github.com/users/Guibod/gists{/gist_id}", "starred_url": "https://api.github.com/users/Guibod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Guibod/subscriptions", "organizations_url": "https://api.github.com/users/Guibod/orgs", "repos_url": "https://api.github.com/users/Guibod/repos", "events_url": "https://api.github.com/users/Guibod/events{/privacy}", "received_events_url": "https://api.github.com/users/Guibod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-03T10:44:25Z", "updated_at": "2018-02-13T22:10:02Z", "closed_at": "2018-02-13T22:10:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Got a `TypeError: __init__() got an unexpected keyword argument 'route'` error while trying to extend the Options class from my schematics model.\n\n``` python\nclass Search(Model):\n    uuid = UUIDType(required=True)\n    revision = NumberType(required=True)\n    created_at = DateTimeType(default=datetime.datetime.now)\n    updated_at = DateTimeType(default=datetime.datetime.now)\n\n    class Options:\n        route = 'my_flask_route_name'\n        namespace = 'searches'\n        roles = {}\n```\n\nI guess that I can start my own implementation of `ModelOptions` and alter my `__optionsclass__` but that sucks.\nCould you please allow an `extra` field that allow us to put all kind of stuff in the model Options ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/395", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/395/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/395/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/395/events", "html_url": "https://github.com/schematics/schematics/issues/395", "id": 137575499, "node_id": "MDU6SXNzdWUxMzc1NzU0OTk=", "number": 395, "title": "Invalid handling of py2 str in StringType", "user": {"login": "charlax", "id": 120501, "node_id": "MDQ6VXNlcjEyMDUwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/120501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlax", "html_url": "https://github.com/charlax", "followers_url": "https://api.github.com/users/charlax/followers", "following_url": "https://api.github.com/users/charlax/following{/other_user}", "gists_url": "https://api.github.com/users/charlax/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlax/subscriptions", "organizations_url": "https://api.github.com/users/charlax/orgs", "repos_url": "https://api.github.com/users/charlax/repos", "events_url": "https://api.github.com/users/charlax/events{/privacy}", "received_events_url": "https://api.github.com/users/charlax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-03-01T13:33:12Z", "updated_at": "2016-03-01T14:21:26Z", "closed_at": "2016-03-01T13:40:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For some reason, I'm getting:\n\n```\nConversionError(\"Couldn't interpret 'hello' as string.\")\n```\n\nI did a bit of investigation, and saw that in `compat.py`, `str` maps to `unicode`, and `bytes` maps to `str` (I'm using py2). This made my debugging a lot more confusing than necessary, because I was wondering why I was getting `isinstance('hello', str) == False`.\n\nThen, looking at how `StringType` works:\n\n``` python\n    def to_native(self, value, context=None):\n        if isinstance(value, str):\n            return value\n        if isinstance(value, self.allow_casts):\n            if isinstance(value, bytes):\n                try:\n                    return str(value, 'utf-8')\n                except UnicodeError:\n                    raise ConversionError(self.messages['decode'].format(value))\n            else:\n                return str(value)\n        raise ConversionError(self.messages['convert'].format(value))\n```\n\nThis was going straight to the last line, because `self.allow_casts == (<type 'int'>, <type 'unicode'>)`, and `bytes == <type 'unicode'>`. I'm pretty confused as to why that's the case and still debugging why. In any case, I think the way the `six` packages does it is much easier to understand and debug.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/394", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/394/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/394/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/394/events", "html_url": "https://github.com/schematics/schematics/issues/394", "id": 135955874, "node_id": "MDU6SXNzdWUxMzU5NTU4NzQ=", "number": 394, "title": "Preserve order of keys in nested models when doing **to_primitive** ?", "user": {"login": "goanpeca", "id": 3627835, "node_id": "MDQ6VXNlcjM2Mjc4MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3627835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goanpeca", "html_url": "https://github.com/goanpeca", "followers_url": "https://api.github.com/users/goanpeca/followers", "following_url": "https://api.github.com/users/goanpeca/following{/other_user}", "gists_url": "https://api.github.com/users/goanpeca/gists{/gist_id}", "starred_url": "https://api.github.com/users/goanpeca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goanpeca/subscriptions", "organizations_url": "https://api.github.com/users/goanpeca/orgs", "repos_url": "https://api.github.com/users/goanpeca/repos", "events_url": "https://api.github.com/users/goanpeca/events{/privacy}", "received_events_url": "https://api.github.com/users/goanpeca/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-24T04:58:16Z", "updated_at": "2016-04-25T16:08:43Z", "closed_at": "2016-04-25T16:08:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to set the order of keys within nested models when doing `to_primitive`?\n\nThe top level model keeps the order of keys, but nested models seem to be sorted alphabetically.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/388", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/388/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/388/events", "html_url": "https://github.com/schematics/schematics/issues/388", "id": 132987826, "node_id": "MDU6SXNzdWUxMzI5ODc4MjY=", "number": 388, "title": "When used with get_mock_object, DateTimeType returns naive datetime", "user": {"login": "charlax", "id": 120501, "node_id": "MDQ6VXNlcjEyMDUwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/120501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlax", "html_url": "https://github.com/charlax", "followers_url": "https://api.github.com/users/charlax/followers", "following_url": "https://api.github.com/users/charlax/following{/other_user}", "gists_url": "https://api.github.com/users/charlax/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlax/subscriptions", "organizations_url": "https://api.github.com/users/charlax/orgs", "repos_url": "https://api.github.com/users/charlax/repos", "events_url": "https://api.github.com/users/charlax/events{/privacy}", "received_events_url": "https://api.github.com/users/charlax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-02-11T14:28:10Z", "updated_at": "2016-04-25T16:09:50Z", "closed_at": "2016-04-25T16:09:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Fairly straightforward to reproduce:\n\n```\nIn [1]: from schematics.types import DateTimeType\n\nIn [2]: from schematics.models import Model\n\nIn [11]: class Toaster(Model):\n    created_at = DateTimeType(required=True)\n\nIn [15]: Toaster.get_mock_object().created_at.tzinfo\n\nIn [16]:\n```\n\nSince people might have assumed this would always be the case, perhaps an extra constructor arguments `default_timezone` would be useful? This would make sure that only timezone-aware datetime are returned. It would use the timezone on the parsed datetime if it's there, or the default one.\n\nThoughts?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/386", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/386/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/386/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/386/events", "html_url": "https://github.com/schematics/schematics/issues/386", "id": 131416707, "node_id": "MDU6SXNzdWUxMzE0MTY3MDc=", "number": 386, "title": "six missing from tests_require", "user": {"login": "foxx", "id": 651797, "node_id": "MDQ6VXNlcjY1MTc5Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/651797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/foxx", "html_url": "https://github.com/foxx", "followers_url": "https://api.github.com/users/foxx/followers", "following_url": "https://api.github.com/users/foxx/following{/other_user}", "gists_url": "https://api.github.com/users/foxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/foxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/foxx/subscriptions", "organizations_url": "https://api.github.com/users/foxx/orgs", "repos_url": "https://api.github.com/users/foxx/repos", "events_url": "https://api.github.com/users/foxx/events{/privacy}", "received_events_url": "https://api.github.com/users/foxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2016-02-04T17:22:35Z", "updated_at": "2016-02-08T20:22:51Z", "closed_at": "2016-02-06T20:34:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Latest version of schematics (2.0.0-dev) is broken when using `setup.py test` from another project which requires `schematics` for its own tests.\n\n```\n  File \"/home/vagrant/.pyenv/versions/2.7.11/lib/python2.7/site-packages/setuptools/sandbox.py\", line 236, in runner\n    _execfile(setup_script, ns)\n  File \"/home/vagrant/.pyenv/versions/2.7.11/lib/python2.7/site-packages/setuptools/sandbox.py\", line 46, in _execfile\n    exec(code, globals, locals)\n  File \"/tmp/easy_install-gk_nyu/schematics-2.0.0.dev1/setup.py\", line 8, in <module>\n    'six>=1.10',\n  File \"/tmp/easy_install-gk_nyu/schematics-2.0.0.dev1/schematics/__init__.py\", line 7, in <module>\n  File \"/tmp/easy_install-gk_nyu/schematics-2.0.0.dev1/schematics/models.py\", line 8, in <module>\nImportError: No module named six\n```\n\nIt would appear that `six` is missing from `test-requirements.txt`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/385", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/385/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/385/events", "html_url": "https://github.com/schematics/schematics/issues/385", "id": 130743327, "node_id": "MDU6SXNzdWUxMzA3NDMzMjc=", "number": 385, "title": "StringType documentation has incorrect min_length", "user": {"login": "di", "id": 294415, "node_id": "MDQ6VXNlcjI5NDQxNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/294415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/di", "html_url": "https://github.com/di", "followers_url": "https://api.github.com/users/di/followers", "following_url": "https://api.github.com/users/di/following{/other_user}", "gists_url": "https://api.github.com/users/di/gists{/gist_id}", "starred_url": "https://api.github.com/users/di/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/di/subscriptions", "organizations_url": "https://api.github.com/users/di/orgs", "repos_url": "https://api.github.com/users/di/repos", "events_url": "https://api.github.com/users/di/events{/privacy}", "received_events_url": "https://api.github.com/users/di/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-02T16:51:10Z", "updated_at": "2016-02-02T17:08:11Z", "closed_at": "2016-02-02T17:08:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "From http://schematics.readthedocs.org/en/latest/api/types.html#schematics.types.base.StringType:\n\n> A unicode string field. Default minimum length is one. If you want to accept empty strings, init with min_length 0.\n\nHowever, the following does not raise an exception:\n\n``` python\nfrom schematics.types import StringType\nst = StringType()\nst.validate('')\n```\n\nSeems like the documentation never got updated as mentioned in #151.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/384", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/384/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/384/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/384/events", "html_url": "https://github.com/schematics/schematics/issues/384", "id": 130722793, "node_id": "MDU6SXNzdWUxMzA3MjI3OTM=", "number": 384, "title": "UTCDateTimeType __init__() doesn't support kwargs, breaking usage", "user": {"login": "oryband", "id": 115387, "node_id": "MDQ6VXNlcjExNTM4Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/115387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oryband", "html_url": "https://github.com/oryband", "followers_url": "https://api.github.com/users/oryband/followers", "following_url": "https://api.github.com/users/oryband/following{/other_user}", "gists_url": "https://api.github.com/users/oryband/gists{/gist_id}", "starred_url": "https://api.github.com/users/oryband/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oryband/subscriptions", "organizations_url": "https://api.github.com/users/oryband/orgs", "repos_url": "https://api.github.com/users/oryband/repos", "events_url": "https://api.github.com/users/oryband/events{/privacy}", "received_events_url": "https://api.github.com/users/oryband/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-02T15:47:23Z", "updated_at": "2016-02-09T11:34:53Z", "closed_at": "2016-02-06T20:31:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "tried for example\n\n``` python\nimport arrow\nclass MyModel(Model):\n    timestamp = UTCDateTimeType(default=arrow.utcnow)\n# this returns: TypeError: __init__() got an unexpected keyword argument 'default'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/382", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/382/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/382/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/382/events", "html_url": "https://github.com/schematics/schematics/issues/382", "id": 130358772, "node_id": "MDU6SXNzdWUxMzAzNTg3NzI=", "number": 382, "title": "UTCDateTimeType missing from release v1.1.1", "user": {"login": "oryband", "id": 115387, "node_id": "MDQ6VXNlcjExNTM4Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/115387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oryband", "html_url": "https://github.com/oryband", "followers_url": "https://api.github.com/users/oryband/followers", "following_url": "https://api.github.com/users/oryband/following{/other_user}", "gists_url": "https://api.github.com/users/oryband/gists{/gist_id}", "starred_url": "https://api.github.com/users/oryband/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oryband/subscriptions", "organizations_url": "https://api.github.com/users/oryband/orgs", "repos_url": "https://api.github.com/users/oryband/repos", "events_url": "https://api.github.com/users/oryband/events{/privacy}", "received_events_url": "https://api.github.com/users/oryband/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-02-01T13:10:03Z", "updated_at": "2016-02-02T08:58:55Z", "closed_at": "2016-02-01T14:09:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "it's just not there for some odd reason\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/381", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/381/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/381/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/381/events", "html_url": "https://github.com/schematics/schematics/issues/381", "id": 130337247, "node_id": "MDU6SXNzdWUxMzAzMzcyNDc=", "number": 381, "title": "default Options class for all Models", "user": {"login": "oryband", "id": 115387, "node_id": "MDQ6VXNlcjExNTM4Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/115387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oryband", "html_url": "https://github.com/oryband", "followers_url": "https://api.github.com/users/oryband/followers", "following_url": "https://api.github.com/users/oryband/following{/other_user}", "gists_url": "https://api.github.com/users/oryband/gists{/gist_id}", "starred_url": "https://api.github.com/users/oryband/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oryband/subscriptions", "organizations_url": "https://api.github.com/users/oryband/orgs", "repos_url": "https://api.github.com/users/oryband/repos", "events_url": "https://api.github.com/users/oryband/events{/privacy}", "received_events_url": "https://api.github.com/users/oryband/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-01T11:31:54Z", "updated_at": "2016-02-01T14:46:54Z", "closed_at": "2016-02-01T14:46:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "i'd like to be able to set default options for all of my Models, instead of redundantly re-defining them per model. Something like this:\n\n``` python\nclass DeafultModel(Model):\n    class Options:\n        serialize_when_none = False\n\nclass ModelOne(DefaultModel):\n    # the above saves me from redefining `class Options` with the same options in here.\n    # code\n\nclass ModelTwo(DefaultModel):\n    # same\n    # code\n```\n\nIs this already possible, or does this require adding support?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/376", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/376/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/376/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/376/events", "html_url": "https://github.com/schematics/schematics/issues/376", "id": 125268632, "node_id": "MDU6SXNzdWUxMjUyNjg2MzI=", "number": 376, "title": "ListType(StringType) will validate 'foo'", "user": {"login": "jmsdnns", "id": 7950614, "node_id": "MDQ6VXNlcjc5NTA2MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7950614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmsdnns", "html_url": "https://github.com/jmsdnns", "followers_url": "https://api.github.com/users/jmsdnns/followers", "following_url": "https://api.github.com/users/jmsdnns/following{/other_user}", "gists_url": "https://api.github.com/users/jmsdnns/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmsdnns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmsdnns/subscriptions", "organizations_url": "https://api.github.com/users/jmsdnns/orgs", "repos_url": "https://api.github.com/users/jmsdnns/repos", "events_url": "https://api.github.com/users/jmsdnns/events{/privacy}", "received_events_url": "https://api.github.com/users/jmsdnns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-01-06T21:35:13Z", "updated_at": "2016-01-26T14:38:58Z", "closed_at": "2016-01-26T14:30:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "``` python\n>>> from schematics.types import StringType\n>>> from schematics.types.compound import ListType\n>>> l = ListType(StringType)\n>>> l.validate('foo')\n'foo'\n```\n\nd'oh!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/370", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/370/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/370/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/370/events", "html_url": "https://github.com/schematics/schematics/issues/370", "id": 119870335, "node_id": "MDU6SXNzdWUxMTk4NzAzMzU=", "number": 370, "title": "Option for ignoring 'rogue' fields.", "user": {"login": "afahim", "id": 1330465, "node_id": "MDQ6VXNlcjEzMzA0NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1330465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afahim", "html_url": "https://github.com/afahim", "followers_url": "https://api.github.com/users/afahim/followers", "following_url": "https://api.github.com/users/afahim/following{/other_user}", "gists_url": "https://api.github.com/users/afahim/gists{/gist_id}", "starred_url": "https://api.github.com/users/afahim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afahim/subscriptions", "organizations_url": "https://api.github.com/users/afahim/orgs", "repos_url": "https://api.github.com/users/afahim/repos", "events_url": "https://api.github.com/users/afahim/events{/privacy}", "received_events_url": "https://api.github.com/users/afahim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-12-02T05:26:11Z", "updated_at": "2017-11-09T14:55:51Z", "closed_at": "2015-12-02T05:33:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Often times, JSON responses send a large blob of information, while applications only care about a few of the fields. For instance, a Person API might send 'full_name', 'first_name', 'last_name', 'age' 'height', etc. However if my application only cares about the person's first name, and age, then I'd like to define a model in my app such as\n\n``` python\nclass Person(Model):\n    first_name = StringType()\n    age = IntType()\n```\n\nThis only has the fields that I care about. In this case, if the Person API sends me extra fields, or changes its responses to add more fields, I'd like to ignore them since my application doesn't care about them. However with the current implementation of schematics, all extraneous ('Rogue') fields throw a schematics.exceptions.ModelConversionError. So I have to define all the extra fields in the model, even tho I never use them.\n\nIs there a way of telling a model to ignore 'Rogue' fields? If not, I was thinking I could define a ModelOption that basically suppresses any Rogue Field exceptions for extraneous fields encountered in the response.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/369", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/369/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/369/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/369/events", "html_url": "https://github.com/schematics/schematics/issues/369", "id": 119324128, "node_id": "MDU6SXNzdWUxMTkzMjQxMjg=", "number": 369, "title": "Redesign the conversion/validation exceptions", "user": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-11-28T23:22:53Z", "updated_at": "2017-03-29T22:03:22Z", "closed_at": "2017-03-29T22:03:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### Unify aggregate exception classes\n\nThe current separation between `ModelConversionError` and `ModelValidationError` provides no informational value at all, since the error class is picked solely based on which model-level routine was invoked and has nothing to do with what actually went wrong.\n\nTo illustrate, the _exact same_ conversion error may appear as a `ModelConversionError` or `ModelValidationError`, depending on if you called `Model.convert()` or `Model.validate()`, respectively. This is unnecessary complexity and a potential source of confusion (#137).\n\nAlso, since these classes may represent data on _several_ errors, each of which may independently be either a conversion error or a validation error, it's clear that communicating anything about the error types through the name of the class is just not viable.\n\nBased on this, I think the aggregate exception classes should be unified.\n### Improve exception message format\n\nRight now the aggregate error message structure only contains the names of the offending fields coupled with textual messages.\n\nThe format should be redesigned to accommodate at least the following items for each individual error:\n- name of the field or index of the item (#307), whichever is applicable\n- type of the error (conversion/validation)\n- human-readable textual message\n- structured response data from the validator/converter function (e.g., error code).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/367", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/367/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/367/events", "html_url": "https://github.com/schematics/schematics/issues/367", "id": 119258864, "node_id": "MDU6SXNzdWUxMTkyNTg4NjQ=", "number": 367, "title": "Is there a way I can warn when a schema is not valid?", "user": {"login": "srossross", "id": 741611, "node_id": "MDQ6VXNlcjc0MTYxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/741611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srossross", "html_url": "https://github.com/srossross", "followers_url": "https://api.github.com/users/srossross/followers", "following_url": "https://api.github.com/users/srossross/following{/other_user}", "gists_url": "https://api.github.com/users/srossross/gists{/gist_id}", "starred_url": "https://api.github.com/users/srossross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srossross/subscriptions", "organizations_url": "https://api.github.com/users/srossross/orgs", "repos_url": "https://api.github.com/users/srossross/repos", "events_url": "https://api.github.com/users/srossross/events{/privacy}", "received_events_url": "https://api.github.com/users/srossross/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-11-28T00:06:06Z", "updated_at": "2015-12-01T02:46:32Z", "closed_at": "2015-12-01T02:46:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to provide warning rather then exceptions when validating a schema or initializing my models? \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/366", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/366/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/366/events", "html_url": "https://github.com/schematics/schematics/issues/366", "id": 119086737, "node_id": "MDU6SXNzdWUxMTkwODY3Mzc=", "number": 366, "title": "Allow serializing only imported fields with to_primitive and to_native", "user": {"login": "tuukkamustonen", "id": 94327, "node_id": "MDQ6VXNlcjk0MzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/94327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuukkamustonen", "html_url": "https://github.com/tuukkamustonen", "followers_url": "https://api.github.com/users/tuukkamustonen/followers", "following_url": "https://api.github.com/users/tuukkamustonen/following{/other_user}", "gists_url": "https://api.github.com/users/tuukkamustonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuukkamustonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuukkamustonen/subscriptions", "organizations_url": "https://api.github.com/users/tuukkamustonen/orgs", "repos_url": "https://api.github.com/users/tuukkamustonen/repos", "events_url": "https://api.github.com/users/tuukkamustonen/events{/privacy}", "received_events_url": "https://api.github.com/users/tuukkamustonen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-11-26T17:52:41Z", "updated_at": "2016-01-26T14:51:52Z", "closed_at": "2016-01-26T14:51:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "As in the subject: allow something like:\n\n```\nclass Song(Model):\n    ...\n    class Options:\n        serialize_only_dirty=True\n```\n\nUse case: I'm validating PATCH requests so wrapping the request payload into schematics model instance and would like to pass the instance deeper into code and serialize it later on when needed.\n\nThe problem is, my API allows clearing fields by setting them to `null`. So, by default all the (even non-required) fields are converted and thus cleared and I cannot use `serialize_when_none`, because then nulls wouldn't get through at all.\n\nI could pass my request payload as is, yeah, but I'd rather pass schematics model and suffer the performance hit when needlessly serializing model into dict again...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/360", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/360/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/360/events", "html_url": "https://github.com/schematics/schematics/issues/360", "id": 117654585, "node_id": "MDU6SXNzdWUxMTc2NTQ1ODU=", "number": 360, "title": "How to apply fields' default values", "user": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-18T18:52:14Z", "updated_at": "2016-01-20T21:38:32Z", "closed_at": "2016-01-20T21:38:32Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The current Schematics is very eager to insert default values at every turn:\n\n``` python\nclass Foo(Model):\n    s = StringType(default='blah')\n```\n\n``` python\n>>> f = Foo()\n>>> f._data\n{'s': u'blah'}\n```\n\n``` python\n>>> f = Foo({'s': None})\n>>> f._data\n{'s': u'blah'}\n```\n\n``` python\n>>> f = Foo()\n>>> f.s = None\n>>> f.import_data({'s': None})._data\n{'s': u'blah'}\n```\n\n``` python\n>>> f = Foo()\n>>> f.s = None\n>>> f.import_data({})._data\n{'s': u'blah'}\n```\n\nThere's no way to stop the default from being applied.\n\n**Here's how I believe this should work in 2.0:**\n- Defaults are only applied to missing entries. Explicit `None` values would remain `None`.\n- When `partial` is `True`, defaults are _not_ applied at all. It makes zero sense for defaults to pop up when you specifially indicate you're working with partial data.\n- A switch named `apply_defaults` would be available to force defaults for partial data or, conversely, leave them out from whole objects.\n\nAny objections?\n\nThere's nothing here that couldn't be implemented on top of the current Schematics, but at the latest this must be sorted out when the undefined feature appears, and the only thing it depends on now is #359.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/357", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/357/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/357/events", "html_url": "https://github.com/schematics/schematics/issues/357", "id": 115378844, "node_id": "MDU6SXNzdWUxMTUzNzg4NDQ=", "number": 357, "title": "TimeStampType critically broken", "user": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 175789, "node_id": "MDU6TGFiZWwxNzU3ODk=", "url": "https://api.github.com/repos/schematics/schematics/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}, {"id": 223957010, "node_id": "MDU6TGFiZWwyMjM5NTcwMTA=", "url": "https://api.github.com/repos/schematics/schematics/labels/code%20review%20pending", "name": "code review pending", "color": "006b75", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-05T21:30:04Z", "updated_at": "2015-11-24T21:28:07Z", "closed_at": "2015-11-24T21:28:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I've just reviewed `TimeStampType`, and it seems to be performing quite interesting date arithmetic:\n\n``` python\ndef date_to_timestamp(cls, value):\n    ...\n    return (delta.days * 24 * 3600) + delta.seconds + delta.microseconds\n```\n\nSo yeah, it's adding microseconds on top of seconds. :koala: This means that, if the datetime includes microseconds, the results are essentially random timestamps 0 to 999999 seconds (~12 days) into the future from the intended time.\n\nAlso, while `DateTimeType` creates timezone-naive datetimes, if such an object is passed to `TimeStampType.to_primitive()`, it assumes local time. This is not a very good assumption because the results then depend on where the application happens to be deployed. I say either require the `tzinfo` component or assume UTC when it's missing. Any sane application should store datetimes in UTC anyway.\n\nMy first instinct to fix this is by removing the `types.temporal` module altogether and putting a working `TimeStampType` directly in `types.base`. This way, developers using the class will hopefully be alerted to discover documentation about these issues.\n\nI presume the separate `temporal` module exists because of the dependency on `dateutil`, but that's not needed for anything besides getting the local timezone, which we shouldn't even be doing.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/356", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/356/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/356/events", "html_url": "https://github.com/schematics/schematics/issues/356", "id": 114953104, "node_id": "MDU6SXNzdWUxMTQ5NTMxMDQ=", "number": 356, "title": "Coveralls not working", "user": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-04T02:08:28Z", "updated_at": "2015-11-07T01:25:22Z", "closed_at": "2015-11-07T01:25:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Coveralls hasn't run since last January. From the Travis build log:\n\n```\n$ coveralls\n\n/home/travis/build.sh: line 41: coveralls: command not found\n\nDone. Your build exited with 0.\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/354", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/354/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/354/events", "html_url": "https://github.com/schematics/schematics/issues/354", "id": 114847709, "node_id": "MDU6SXNzdWUxMTQ4NDc3MDk=", "number": 354, "title": "DecimalType UnicodeEncodeError ", "user": {"login": "tdenisova", "id": 11911351, "node_id": "MDQ6VXNlcjExOTExMzUx", "avatar_url": "https://avatars2.githubusercontent.com/u/11911351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tdenisova", "html_url": "https://github.com/tdenisova", "followers_url": "https://api.github.com/users/tdenisova/followers", "following_url": "https://api.github.com/users/tdenisova/following{/other_user}", "gists_url": "https://api.github.com/users/tdenisova/gists{/gist_id}", "starred_url": "https://api.github.com/users/tdenisova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tdenisova/subscriptions", "organizations_url": "https://api.github.com/users/tdenisova/orgs", "repos_url": "https://api.github.com/users/tdenisova/repos", "events_url": "https://api.github.com/users/tdenisova/events{/privacy}", "received_events_url": "https://api.github.com/users/tdenisova/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-03T15:58:05Z", "updated_at": "2015-11-03T17:12:33Z", "closed_at": "2015-11-03T17:12:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Got an `UnicodeEncodeError` on `DecimalType`  validation when using  unicode string that contains non-ascii characters.\n\nIt fails on string formatting for ConversionError:\n\n```\nFile \"/schematics/types/base.py\", line 559, in to_native\n    raise ConversionError(self.messages['number_coerce'].format(value))\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 0-4: ordinal not in range(128)\n```\n\nVariable values:\nself.messages['number_coerce'] ==  \"Number '{0}' failed to convert to a decimal\"\nvalue == u'\u0435\u0434\u0438\u043d\u0438\u0446\u0430'\n\nschematics==1.0.4\npython 2.7\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/352", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/352/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/352/events", "html_url": "https://github.com/schematics/schematics/issues/352", "id": 114441472, "node_id": "MDU6SXNzdWUxMTQ0NDE0NzI=", "number": 352, "title": "Validation", "user": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 276416520, "node_id": "MDU6TGFiZWwyNzY0MTY1MjA=", "url": "https://api.github.com/repos/schematics/schematics/labels/discussion", "name": "discussion", "color": "bfdadc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-01T00:04:10Z", "updated_at": "2016-01-26T14:41:07Z", "closed_at": "2016-01-26T14:41:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There are a number of open issues regarding model validation. Unfortunately, it's an aspect of Schematics that's perhaps the most difficult to work on because the current system is somewhat confusing.\n\nIn addition to the issues already reported, there are a few details I'd like to ask about:\n- Validating a model will reset any empty fields to their default values:\n  \n  ``` python\n  class M(Model):\n      n = IntType(default=123)\n  ```\n  \n  ``` python\n  >>> m = M()\n  >>> m.n = None\n  >>> m.to_primitive()\n  {'n': None}\n  >>> m.validate()\n  >>> m.to_primitive()\n  {'n': 123}\n  ```\n  \n  Bug or not?\n  \n  (The first version of the Undefined feature introduced a new parameter called `apply_defaults`, which can be used to control this when importing and validating. However, the appropriate default setting for validation depends on whether the current behavior is by design or accident.)\n- By the time `_check_for_unknown_fields()` is called from the main `validate()` function, `import_loop` will have already checked for rogue fields.\n  \n  What is then the purpose of `_check_for_unknown_fields()`?\n- If any type-level validator fails, no model-level validators will be called.\n  \n  Bug or not?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/343", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/343/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/343/events", "html_url": "https://github.com/schematics/schematics/issues/343", "id": 112443999, "node_id": "MDU6SXNzdWUxMTI0NDM5OTk=", "number": 343, "title": "Remove `ModelType`", "user": {"login": "jmsdnns", "id": 7950614, "node_id": "MDQ6VXNlcjc5NTA2MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7950614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmsdnns", "html_url": "https://github.com/jmsdnns", "followers_url": "https://api.github.com/users/jmsdnns/followers", "following_url": "https://api.github.com/users/jmsdnns/following{/other_user}", "gists_url": "https://api.github.com/users/jmsdnns/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmsdnns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmsdnns/subscriptions", "organizations_url": "https://api.github.com/users/jmsdnns/orgs", "repos_url": "https://api.github.com/users/jmsdnns/repos", "events_url": "https://api.github.com/users/jmsdnns/events{/privacy}", "received_events_url": "https://api.github.com/users/jmsdnns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-20T19:35:48Z", "updated_at": "2015-10-20T20:15:26Z", "closed_at": "2015-10-20T20:15:26Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This thing seems useless to me. I wanna remove it.\n\nI think it'd be more interesting to have `Model` instances behave like `BaseTypes` and thus not require special behavior or wrapping.\n\nI am thinking out loud on this one and asking for feedback.\n\nSpecifically, is there any value to having `ModelType`?\n\nWith:\n\n``` python\nclass Bar(Model):\n    b = StringType()\n\nclass Foo(Model):\n    f = ModelType(Bar)\n```\n\nOr, and this is the one I prefer:\n\n``` python\nclass Bar(Model):\n    b = StringType()\n\nclass Foo(Model):\n    f = Bar()\n```\n\nIf implemented correctly, a call to `f.to_native()` would produce the same output in both cases.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/341", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/341/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/341/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/341/events", "html_url": "https://github.com/schematics/schematics/issues/341", "id": 112257512, "node_id": "MDU6SXNzdWUxMTIyNTc1MTI=", "number": 341, "title": "Classes instead of instances in ModelType", "user": {"login": "jmsdnns", "id": 7950614, "node_id": "MDQ6VXNlcjc5NTA2MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7950614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmsdnns", "html_url": "https://github.com/jmsdnns", "followers_url": "https://api.github.com/users/jmsdnns/followers", "following_url": "https://api.github.com/users/jmsdnns/following{/other_user}", "gists_url": "https://api.github.com/users/jmsdnns/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmsdnns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmsdnns/subscriptions", "organizations_url": "https://api.github.com/users/jmsdnns/orgs", "repos_url": "https://api.github.com/users/jmsdnns/repos", "events_url": "https://api.github.com/users/jmsdnns/events{/privacy}", "received_events_url": "https://api.github.com/users/jmsdnns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-20T00:07:46Z", "updated_at": "2016-04-26T23:08:12Z", "closed_at": "2016-04-26T23:08:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I don't like the way the current ModelType paradigm works.\n\nThe syntax for defining a `ModelType` is to list the _classes_ and not _instances_ of the class. This is less flexible.\n\nIn PR [#340](https://github.com/schematics/schematics/pull/340) I introduced a `PolyType` which will use a list of validators from type instances each with their own restraints, like `min_length` in the snippet below. Using classes, instead of instances, prevents this level of flexibility. I prefer to change the syntax for using `ModelTypes` than reduce functionality in the new `PolyType`.\n\nFrom the snippet in PR 340:\n\n``` python\nclass Foo(Model):\n    bla = ListType(PolyType([IntType(), StringType(min_length=3)]))\n```\n\nAnd the behavior of the `ModelType`:\n\n``` python\nclass Band(Model):\n    name = StringType()\n\nclass Person(Model):\n    band =  ModelType(Band) # this is the offending line\n```\n\nI would prefer `band = ModelType(Band())`\n\nAnother consideration is that default data would be possible for ModelTypes now too. I don't have a specific use case for this piece, but it is an interesting consequence of making the system internally consistent.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/338", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/338/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/338/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/338/events", "html_url": "https://github.com/schematics/schematics/issues/338", "id": 112216553, "node_id": "MDU6SXNzdWUxMTIyMTY1NTM=", "number": 338, "title": "IntType will validate a string", "user": {"login": "jmsdnns", "id": 7950614, "node_id": "MDQ6VXNlcjc5NTA2MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7950614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmsdnns", "html_url": "https://github.com/jmsdnns", "followers_url": "https://api.github.com/users/jmsdnns/followers", "following_url": "https://api.github.com/users/jmsdnns/following{/other_user}", "gists_url": "https://api.github.com/users/jmsdnns/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmsdnns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmsdnns/subscriptions", "organizations_url": "https://api.github.com/users/jmsdnns/orgs", "repos_url": "https://api.github.com/users/jmsdnns/repos", "events_url": "https://api.github.com/users/jmsdnns/events{/privacy}", "received_events_url": "https://api.github.com/users/jmsdnns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-19T19:37:22Z", "updated_at": "2015-11-28T12:12:28Z", "closed_at": "2015-11-28T12:12:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "``` python\n>>> from schematics.types import IntType\n>>> IntType().validate('foo')\n>>> \n```\n\nThis doesn't make sense.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/337", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/337/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/337/events", "html_url": "https://github.com/schematics/schematics/issues/337", "id": 111603855, "node_id": "MDU6SXNzdWUxMTE2MDM4NTU=", "number": 337, "title": "export_loop() vs. to_primitive()", "user": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/schematics/schematics/milestones/3", "html_url": "https://github.com/schematics/schematics/milestone/3", "labels_url": "https://api.github.com/repos/schematics/schematics/milestones/3/labels", "id": 1396545, "node_id": "MDk6TWlsZXN0b25lMTM5NjU0NQ==", "number": 3, "title": "2.0", "description": null, "creator": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2015-11-05T22:26:45Z", "updated_at": "2017-06-27T23:30:08Z", "due_on": null, "closed_at": "2017-06-27T23:30:08Z"}, "comments": 11, "created_at": "2015-10-15T12:10:23Z", "updated_at": "2016-01-20T21:39:02Z", "closed_at": "2016-01-20T21:39:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "All the compound types define both `export_loop` and `to_primitive` methods, but `to_primitive` never seems to be called.\n\nAm I right in assuming that, for compound types, `to_primitive` is just a historical remnant that's been superseded by `export_loop`? And that there are two differently named methods simply because the argument lists are different?\n\nIf yes, then obviously it would be ideal to unify the methods so that `field.to_primitive(...)` would accomplish the same thing for both simple and complex types. There's going to be an opportunity to do just that when #266/#316/#318 is implemented, since it involves a one-time method signature change across the board in order to future-proof against further such changes.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/334", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/334/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/334/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/334/events", "html_url": "https://github.com/schematics/schematics/issues/334", "id": 111063190, "node_id": "MDU6SXNzdWUxMTEwNjMxOTA=", "number": 334, "title": "[Docs] page error", "user": {"login": "chhantyal", "id": 862941, "node_id": "MDQ6VXNlcjg2Mjk0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/862941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chhantyal", "html_url": "https://github.com/chhantyal", "followers_url": "https://api.github.com/users/chhantyal/followers", "following_url": "https://api.github.com/users/chhantyal/following{/other_user}", "gists_url": "https://api.github.com/users/chhantyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chhantyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chhantyal/subscriptions", "organizations_url": "https://api.github.com/users/chhantyal/orgs", "repos_url": "https://api.github.com/users/chhantyal/repos", "events_url": "https://api.github.com/users/chhantyal/events{/privacy}", "received_events_url": "https://api.github.com/users/chhantyal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-12T21:55:05Z", "updated_at": "2015-10-13T00:13:14Z", "closed_at": "2015-10-13T00:13:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Page is broken and gives me following error:\n\n`\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://api.grokthedocs.com/api/v1/queuedvisits/. (Reason: CORS header 'Access-Control-Allow-Origin' missing).\n`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/332", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/332/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/332/events", "html_url": "https://github.com/schematics/schematics/issues/332", "id": 110348128, "node_id": "MDU6SXNzdWUxMTAzNDgxMjg=", "number": 332, "title": "still maintained?", "user": {"login": "smcclstocks", "id": 1500378, "node_id": "MDQ6VXNlcjE1MDAzNzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1500378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smcclstocks", "html_url": "https://github.com/smcclstocks", "followers_url": "https://api.github.com/users/smcclstocks/followers", "following_url": "https://api.github.com/users/smcclstocks/following{/other_user}", "gists_url": "https://api.github.com/users/smcclstocks/gists{/gist_id}", "starred_url": "https://api.github.com/users/smcclstocks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smcclstocks/subscriptions", "organizations_url": "https://api.github.com/users/smcclstocks/orgs", "repos_url": "https://api.github.com/users/smcclstocks/repos", "events_url": "https://api.github.com/users/smcclstocks/events{/privacy}", "received_events_url": "https://api.github.com/users/smcclstocks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-08T00:26:39Z", "updated_at": "2015-10-08T16:02:00Z", "closed_at": "2015-10-08T13:33:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed the initial author is no longer working on this & quite a few pull requests are sitting. Any other maintainers still working on this? Thanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/330", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/330/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/330/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/330/events", "html_url": "https://github.com/schematics/schematics/issues/330", "id": 109064365, "node_id": "MDU6SXNzdWUxMDkwNjQzNjU=", "number": 330, "title": "Model that contains field of of its type (same ModelType as itself)", "user": {"login": "mjrk", "id": 2457107, "node_id": "MDQ6VXNlcjI0NTcxMDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2457107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjrk", "html_url": "https://github.com/mjrk", "followers_url": "https://api.github.com/users/mjrk/followers", "following_url": "https://api.github.com/users/mjrk/following{/other_user}", "gists_url": "https://api.github.com/users/mjrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjrk/subscriptions", "organizations_url": "https://api.github.com/users/mjrk/orgs", "repos_url": "https://api.github.com/users/mjrk/repos", "events_url": "https://api.github.com/users/mjrk/events{/privacy}", "received_events_url": "https://api.github.com/users/mjrk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-09-30T11:07:59Z", "updated_at": "2016-02-15T17:13:09Z", "closed_at": "2015-11-05T22:52:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "See the following schema\n\n```\nclass Expression(Model):\n\n    expressions = ListType(ModelType(Expression))\n```\n\nUnfortunately, this is not possible as during class definition `Expression` is unknown. I could not find how to do this in the docs, searching `schematics/models.py` doesn't seem this is implemented. However, maybe I missed something as it seems a common use case to me.\n\nIMHO this could be implemented in the `ModelMeta` class after the `klass` creation (see models.py). Could it work to set the field value to `klass` in those cases? Either with a special type `SelfType` or some DSL.\n\nOr we could add a more explicit way to add custom fields - e.g. a method which's return value is used to extend the `klass`' -fields after initialization.\n\nSuggestions?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/326", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/326/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/326/events", "html_url": "https://github.com/schematics/schematics/issues/326", "id": 97761019, "node_id": "MDU6SXNzdWU5Nzc2MTAxOQ==", "number": 326, "title": "URLType regex doesn't match urls that have subdomains with underscores", "user": {"login": "jordonwii", "id": 667676, "node_id": "MDQ6VXNlcjY2NzY3Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/667676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jordonwii", "html_url": "https://github.com/jordonwii", "followers_url": "https://api.github.com/users/jordonwii/followers", "following_url": "https://api.github.com/users/jordonwii/following{/other_user}", "gists_url": "https://api.github.com/users/jordonwii/gists{/gist_id}", "starred_url": "https://api.github.com/users/jordonwii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jordonwii/subscriptions", "organizations_url": "https://api.github.com/users/jordonwii/orgs", "repos_url": "https://api.github.com/users/jordonwii/repos", "events_url": "https://api.github.com/users/jordonwii/events{/privacy}", "received_events_url": "https://api.github.com/users/jordonwii/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 223958842, "node_id": "MDU6TGFiZWwyMjM5NTg4NDI=", "url": "https://api.github.com/repos/schematics/schematics/labels/easy%20fix", "name": "easy fix", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-28T17:44:17Z", "updated_at": "2016-02-01T11:37:05Z", "closed_at": "2016-02-01T11:37:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you use the URL_REGEX value from the URLType, it doesn't match the following valid url: `http://my_subdomain.mydomain.com/` If you remove the underscore, it works. \n\nIt seems like the best thing here might be to use another project's url regex. Django, for example, has one that's well-tested and does work on the above url: https://github.com/django/django/blob/f8cc464452f495fce2a3d6f7494396c8f798a1e6/django/core/validators.py#L67\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/325", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/325/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/325/events", "html_url": "https://github.com/schematics/schematics/issues/325", "id": 97596628, "node_id": "MDU6SXNzdWU5NzU5NjYyOA==", "number": 325, "title": "ListType(choices=) prevents empty lists from being valid", "user": {"login": "xealot", "id": 189873, "node_id": "MDQ6VXNlcjE4OTg3Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/189873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xealot", "html_url": "https://github.com/xealot", "followers_url": "https://api.github.com/users/xealot/followers", "following_url": "https://api.github.com/users/xealot/following{/other_user}", "gists_url": "https://api.github.com/users/xealot/gists{/gist_id}", "starred_url": "https://api.github.com/users/xealot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xealot/subscriptions", "organizations_url": "https://api.github.com/users/xealot/orgs", "repos_url": "https://api.github.com/users/xealot/repos", "events_url": "https://api.github.com/users/xealot/events{/privacy}", "received_events_url": "https://api.github.com/users/xealot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-28T02:06:49Z", "updated_at": "2016-02-06T20:37:46Z", "closed_at": "2016-02-06T20:37:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When adding `choices=` to `ListType` validation becomes muddied because an empty list is no longer valid. Even when `required=False` there seems to be no way to have choices and also be fine with an empty list.\n\nCould this key off of required? Or perhaps even a new config option such as `allow_empty=bool`?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/323", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/323/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/323/events", "html_url": "https://github.com/schematics/schematics/issues/323", "id": 95893993, "node_id": "MDU6SXNzdWU5NTg5Mzk5Mw==", "number": 323, "title": "Add 'description' to fields and models", "user": {"login": "chadrik", "id": 63251, "node_id": "MDQ6VXNlcjYzMjUx", "avatar_url": "https://avatars1.githubusercontent.com/u/63251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chadrik", "html_url": "https://github.com/chadrik", "followers_url": "https://api.github.com/users/chadrik/followers", "following_url": "https://api.github.com/users/chadrik/following{/other_user}", "gists_url": "https://api.github.com/users/chadrik/gists{/gist_id}", "starred_url": "https://api.github.com/users/chadrik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chadrik/subscriptions", "organizations_url": "https://api.github.com/users/chadrik/orgs", "repos_url": "https://api.github.com/users/chadrik/repos", "events_url": "https://api.github.com/users/chadrik/events{/privacy}", "received_events_url": "https://api.github.com/users/chadrik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 175788, "node_id": "MDU6TGFiZWwxNzU3ODg=", "url": "https://api.github.com/repos/schematics/schematics/labels/feature", "name": "feature", "color": "0b02e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2015-07-19T07:19:40Z", "updated_at": "2016-04-27T14:08:48Z", "closed_at": "2016-04-27T14:08:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Descriptions are a fundamental aspect of a well-designed schema.  They are not only great documentation for other developers, they can be programmatically inspected to populate UIs, etc. They're a key part of the JSON Schema specification and so their addition to `schematics` would enable tools like [jsonschematics](https://github.com/voidfiles/jsonschematics) to create more compliant output, which would in turn make it more compatible with other tools that take JSON Schema documents as an input.\n\nFor types, the description makes sense as a new argument to `BaseType.__init__`.  For `Model`s, the value could be taken from the object's `__doc__` attribute (or perhaps just the first sentence).\n\nThanks for listening.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/322", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/322/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/322/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/322/events", "html_url": "https://github.com/schematics/schematics/issues/322", "id": 95333923, "node_id": "MDU6SXNzdWU5NTMzMzkyMw==", "number": 322, "title": "Subclassing models with REGEX validation crashes Python", "user": {"login": "xealot", "id": 189873, "node_id": "MDQ6VXNlcjE4OTg3Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/189873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xealot", "html_url": "https://github.com/xealot", "followers_url": "https://api.github.com/users/xealot/followers", "following_url": "https://api.github.com/users/xealot/following{/other_user}", "gists_url": "https://api.github.com/users/xealot/gists{/gist_id}", "starred_url": "https://api.github.com/users/xealot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xealot/subscriptions", "organizations_url": "https://api.github.com/users/xealot/orgs", "repos_url": "https://api.github.com/users/xealot/repos", "events_url": "https://api.github.com/users/xealot/events{/privacy}", "received_events_url": "https://api.github.com/users/xealot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-07-16T02:36:25Z", "updated_at": "2015-07-19T11:27:38Z", "closed_at": "2015-07-19T11:27:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you add a pattern to the `regex=` argument for `StringType()` when you subclass the module Python will error with:\n\n```\nTypeError: Error when calling the metaclass bases\n    cannot deepcopy this pattern object\n```\n\nSince `validate_regex()` isn't called in a tight loop and Python internally caches patterns I think just storing the string instead of the compiled pattern is a smart way to go.\n\nThis change will enable deepcopy to work and enable subclassing of models with `StringType(regex=...)` to work. Also the feels a little like premature optimization anyway.\n\nPR #321 \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/316", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/316/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/316/events", "html_url": "https://github.com/schematics/schematics/issues/316", "id": 94392581, "node_id": "MDU6SXNzdWU5NDM5MjU4MQ==", "number": 316, "title": "strict=False doesn't propagate as expected", "user": {"login": "kstrauser", "id": 295674, "node_id": "MDQ6VXNlcjI5NTY3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/295674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kstrauser", "html_url": "https://github.com/kstrauser", "followers_url": "https://api.github.com/users/kstrauser/followers", "following_url": "https://api.github.com/users/kstrauser/following{/other_user}", "gists_url": "https://api.github.com/users/kstrauser/gists{/gist_id}", "starred_url": "https://api.github.com/users/kstrauser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kstrauser/subscriptions", "organizations_url": "https://api.github.com/users/kstrauser/orgs", "repos_url": "https://api.github.com/users/kstrauser/repos", "events_url": "https://api.github.com/users/kstrauser/events{/privacy}", "received_events_url": "https://api.github.com/users/kstrauser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 175789, "node_id": "MDU6TGFiZWwxNzU3ODk=", "url": "https://api.github.com/repos/schematics/schematics/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "kstrauser", "id": 295674, "node_id": "MDQ6VXNlcjI5NTY3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/295674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kstrauser", "html_url": "https://github.com/kstrauser", "followers_url": "https://api.github.com/users/kstrauser/followers", "following_url": "https://api.github.com/users/kstrauser/following{/other_user}", "gists_url": "https://api.github.com/users/kstrauser/gists{/gist_id}", "starred_url": "https://api.github.com/users/kstrauser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kstrauser/subscriptions", "organizations_url": "https://api.github.com/users/kstrauser/orgs", "repos_url": "https://api.github.com/users/kstrauser/repos", "events_url": "https://api.github.com/users/kstrauser/events{/privacy}", "received_events_url": "https://api.github.com/users/kstrauser/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "kstrauser", "id": 295674, "node_id": "MDQ6VXNlcjI5NTY3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/295674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kstrauser", "html_url": "https://github.com/kstrauser", "followers_url": "https://api.github.com/users/kstrauser/followers", "following_url": "https://api.github.com/users/kstrauser/following{/other_user}", "gists_url": "https://api.github.com/users/kstrauser/gists{/gist_id}", "starred_url": "https://api.github.com/users/kstrauser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kstrauser/subscriptions", "organizations_url": "https://api.github.com/users/kstrauser/orgs", "repos_url": "https://api.github.com/users/kstrauser/repos", "events_url": "https://api.github.com/users/kstrauser/events{/privacy}", "received_events_url": "https://api.github.com/users/kstrauser/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/schematics/schematics/milestones/3", "html_url": "https://github.com/schematics/schematics/milestone/3", "labels_url": "https://api.github.com/repos/schematics/schematics/milestones/3/labels", "id": 1396545, "node_id": "MDk6TWlsZXN0b25lMTM5NjU0NQ==", "number": 3, "title": "2.0", "description": null, "creator": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2015-11-05T22:26:45Z", "updated_at": "2017-06-27T23:30:08Z", "due_on": null, "closed_at": "2017-06-27T23:30:08Z"}, "comments": 11, "created_at": "2015-07-10T21:05:20Z", "updated_at": "2015-11-24T21:28:37Z", "closed_at": "2015-11-24T21:28:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When one model is nested inside another, importing that model doesn't pass `strict` through as expected. For example:\n\n``` python\n    from schematics.models import Model\n    from schematics.types import StringType\n    from schematics.types.compound import ModelType\n\n    class Inner(Model):\n        foo = StringType()\n\n    class Outer(Model):\n        inner = ModelType(Inner)\n\n    def main():\n        d = {\n            'inner': {\n                'foo': 'foo value',\n                'bar': 'bar value',\n            },\n        }\n\n        outer = Outer(d, strict=False)\n        print outer\n        print outer.inner\n```\n\nThis fails with:\n\n``` python\n    Traceback (most recent call last):\n      File \"/private/tmp/schem/bin/main\", line 9, in <module>\n        load_entry_point('main==0.1.0', 'console_scripts', 'main')()\n      File \"/private/tmp/schem/schematics_rogue_field_issue/src/main/main.py\", line 19, in main\n        outer = Outer(d, strict=False)\n      File \"/private/tmp/schematics/schematics/models.py\", line 240, in __init__\n        self._data = self.convert(raw_data, strict=strict, mapping=deserialize_mapping)\n      File \"/private/tmp/schematics/schematics/models.py\", line 287, in convert\n        return convert(self.__class__, raw_data, **kw)\n      File \"/private/tmp/schematics/schematics/transforms.py\", line 419, in convert\n        partial=partial, strict=strict, mapping=mapping)\n      File \"/private/tmp/schematics/schematics/transforms.py\", line 119, in import_loop\n        raise ModelConversionError(errors, data)\n    schematics.exceptions.ModelConversionError: {'inner': {'bar': 'Rogue field'}}\n```\n\nInstead, I would have expected it to successfully instantiate the `outer` object.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/315", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/315/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/315/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/315/events", "html_url": "https://github.com/schematics/schematics/issues/315", "id": 93966839, "node_id": "MDU6SXNzdWU5Mzk2NjgzOQ==", "number": 315, "title": "StringType() allows casting from int to str", "user": {"login": "xihan", "id": 1108382, "node_id": "MDQ6VXNlcjExMDgzODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1108382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xihan", "html_url": "https://github.com/xihan", "followers_url": "https://api.github.com/users/xihan/followers", "following_url": "https://api.github.com/users/xihan/following{/other_user}", "gists_url": "https://api.github.com/users/xihan/gists{/gist_id}", "starred_url": "https://api.github.com/users/xihan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xihan/subscriptions", "organizations_url": "https://api.github.com/users/xihan/orgs", "repos_url": "https://api.github.com/users/xihan/repos", "events_url": "https://api.github.com/users/xihan/events{/privacy}", "received_events_url": "https://api.github.com/users/xihan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2015-07-09T06:22:27Z", "updated_at": "2016-04-29T15:37:14Z", "closed_at": "2016-04-29T15:37:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \n\nI noticed that StringType defines allow_casts = (str, int).\nI wonder what the motivation is for this. I was quite surprised that\na StringType() field silently casts int input to str.\n\nI can always make a subclass that overrides the allow_casts class variable though.\n\nThanks for your help!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/312", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/312/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/312/events", "html_url": "https://github.com/schematics/schematics/issues/312", "id": 92688869, "node_id": "MDU6SXNzdWU5MjY4ODg2OQ==", "number": 312, "title": "Model __init__ doesn't accept kwargs", "user": {"login": "jordonwii", "id": 667676, "node_id": "MDQ6VXNlcjY2NzY3Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/667676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jordonwii", "html_url": "https://github.com/jordonwii", "followers_url": "https://api.github.com/users/jordonwii/followers", "following_url": "https://api.github.com/users/jordonwii/following{/other_user}", "gists_url": "https://api.github.com/users/jordonwii/gists{/gist_id}", "starred_url": "https://api.github.com/users/jordonwii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jordonwii/subscriptions", "organizations_url": "https://api.github.com/users/jordonwii/orgs", "repos_url": "https://api.github.com/users/jordonwii/repos", "events_url": "https://api.github.com/users/jordonwii/events{/privacy}", "received_events_url": "https://api.github.com/users/jordonwii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-07-02T17:21:26Z", "updated_at": "2015-10-20T00:11:05Z", "closed_at": "2015-10-20T00:11:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Line 229 of models.py says the following:\n`Initial field values can be passed in as keyword arguments to``__init__``to initialize the object with.`\n\nBut Model.**init** doesn't take **kwargs, and attempting to initialize the following model with kwargs raises a TypeError. \n\n``` python\nclass MyModel(Model):\n  my_field = StringType()\n\nm = MyModel(my_field=\"test\")\n# => TypeError: __init__() got an unexpected keyword argument 'my_field'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/307", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/307/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/307/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/307/events", "html_url": "https://github.com/schematics/schematics/issues/307", "id": 84472387, "node_id": "MDU6SXNzdWU4NDQ3MjM4Nw==", "number": 307, "title": "Return index of invalid objects", "user": {"login": "netcriptus", "id": 66514, "node_id": "MDQ6VXNlcjY2NTE0", "avatar_url": "https://avatars1.githubusercontent.com/u/66514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netcriptus", "html_url": "https://github.com/netcriptus", "followers_url": "https://api.github.com/users/netcriptus/followers", "following_url": "https://api.github.com/users/netcriptus/following{/other_user}", "gists_url": "https://api.github.com/users/netcriptus/gists{/gist_id}", "starred_url": "https://api.github.com/users/netcriptus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netcriptus/subscriptions", "organizations_url": "https://api.github.com/users/netcriptus/orgs", "repos_url": "https://api.github.com/users/netcriptus/repos", "events_url": "https://api.github.com/users/netcriptus/events{/privacy}", "received_events_url": "https://api.github.com/users/netcriptus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 223957010, "node_id": "MDU6TGFiZWwyMjM5NTcwMTA=", "url": "https://api.github.com/repos/schematics/schematics/labels/code%20review%20pending", "name": "code review pending", "color": "006b75", "default": false, "description": null}, {"id": 175788, "node_id": "MDU6TGFiZWwxNzU3ODg=", "url": "https://api.github.com/repos/schematics/schematics/labels/feature", "name": "feature", "color": "0b02e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/schematics/schematics/milestones/3", "html_url": "https://github.com/schematics/schematics/milestone/3", "labels_url": "https://api.github.com/repos/schematics/schematics/milestones/3/labels", "id": 1396545, "node_id": "MDk6TWlsZXN0b25lMTM5NjU0NQ==", "number": 3, "title": "2.0", "description": null, "creator": {"login": "bintoro", "id": 7081785, "node_id": "MDQ6VXNlcjcwODE3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7081785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bintoro", "html_url": "https://github.com/bintoro", "followers_url": "https://api.github.com/users/bintoro/followers", "following_url": "https://api.github.com/users/bintoro/following{/other_user}", "gists_url": "https://api.github.com/users/bintoro/gists{/gist_id}", "starred_url": "https://api.github.com/users/bintoro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bintoro/subscriptions", "organizations_url": "https://api.github.com/users/bintoro/orgs", "repos_url": "https://api.github.com/users/bintoro/repos", "events_url": "https://api.github.com/users/bintoro/events{/privacy}", "received_events_url": "https://api.github.com/users/bintoro/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2015-11-05T22:26:45Z", "updated_at": "2017-06-27T23:30:08Z", "due_on": null, "closed_at": "2017-06-27T23:30:08Z"}, "comments": 4, "created_at": "2015-06-03T09:56:13Z", "updated_at": "2016-02-06T20:38:54Z", "closed_at": "2016-02-06T20:38:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "So, in my models I define a `user`, and a `user` has many `addresses`, which are defined in their own class. So when mapping the model to a schematics class, it becomes something like this\n\n```\nclass UserResource(BaseSchema):\n\n    \"\"\"User resource.\"\"\"\n\n    __entity__ = User\n    user_addresses = ListType(ModelType(UserAddressResource))\n```\n\nHere's the problem: imagine I have a user with 5 addresses, but 2 of them are invalid. Currently, schematics returns something like `UserAddresses: [{'street': ['Not a well formed street name.']}, {'street': ['Not a well formed street name.']}]`.\n\nIt would be great to have the index of those invalid objects in the list. My only current option is to run the validation again on each object until I find the invalid ones. But this is not practical, considering it will be doing the same work twice, and models usually have more than one relationship, so it's linked to many other models.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/schematics/schematics/issues/302", "repository_url": "https://api.github.com/repos/schematics/schematics", "labels_url": "https://api.github.com/repos/schematics/schematics/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/schematics/schematics/issues/302/comments", "events_url": "https://api.github.com/repos/schematics/schematics/issues/302/events", "html_url": "https://github.com/schematics/schematics/issues/302", "id": 69660267, "node_id": "MDU6SXNzdWU2OTY2MDI2Nw==", "number": 302, "title": "Update the documentation for schematics", "user": {"login": "kracekumar", "id": 311929, "node_id": "MDQ6VXNlcjMxMTkyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/311929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kracekumar", "html_url": "https://github.com/kracekumar", "followers_url": "https://api.github.com/users/kracekumar/followers", "following_url": "https://api.github.com/users/kracekumar/following{/other_user}", "gists_url": "https://api.github.com/users/kracekumar/gists{/gist_id}", "starred_url": "https://api.github.com/users/kracekumar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kracekumar/subscriptions", "organizations_url": "https://api.github.com/users/kracekumar/orgs", "repos_url": "https://api.github.com/users/kracekumar/repos", "events_url": "https://api.github.com/users/kracekumar/events{/privacy}", "received_events_url": "https://api.github.com/users/kracekumar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 175803, "node_id": "MDU6TGFiZWwxNzU4MDM=", "url": "https://api.github.com/repos/schematics/schematics/labels/documentation", "name": "documentation", "color": "bfe5bf", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2015-04-20T19:17:58Z", "updated_at": "2017-09-22T18:31:46Z", "closed_at": "2017-09-22T18:31:46Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This issue is to track the changes required to documentation infrastructure, missing documentation for features etc ... If you find any thing specific to documentation is missing, please comment.\n", "performed_via_github_app": null, "score": 1.0}]}