{"total_count": 68, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/116", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/116/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/116/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/116", "id": 681584865, "node_id": "MDU6SXNzdWU2ODE1ODQ4NjU=", "number": 116, "title": "Two different images have hash result same", "user": {"login": "tonyquang", "id": 41078857, "node_id": "MDQ6VXNlcjQxMDc4ODU3", "avatar_url": "https://avatars3.githubusercontent.com/u/41078857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonyquang", "html_url": "https://github.com/tonyquang", "followers_url": "https://api.github.com/users/tonyquang/followers", "following_url": "https://api.github.com/users/tonyquang/following{/other_user}", "gists_url": "https://api.github.com/users/tonyquang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonyquang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonyquang/subscriptions", "organizations_url": "https://api.github.com/users/tonyquang/orgs", "repos_url": "https://api.github.com/users/tonyquang/repos", "events_url": "https://api.github.com/users/tonyquang/events{/privacy}", "received_events_url": "https://api.github.com/users/tonyquang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-19T06:31:46Z", "updated_at": "2020-08-19T07:59:40Z", "closed_at": "2020-08-19T07:59:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have 2 images link download here: https://imgur.com/a/eEkh9sK\r\nI try combined dhash_vertical, colorhash, phash, average_hash, dhash, wash but all of them be same hash result together\r\n```\r\nfrom PIL import Image\r\nimport imagehash\r\nimport hashlib\r\n\r\nhash0 = imagehash.dhash_vertical(Image.open('4.jpg')) \r\nhash1 = imagehash.dhash_vertical(Image.open('5.jpg')) \r\n\r\nhash00 = imagehash.colorhash(Image.open('4.jpg')) \r\nhash11 = imagehash.colorhash(Image.open('5.jpg')) \r\n\r\nhash000 = imagehash.phash(Image.open('4.jpg')) \r\nhash111 = imagehash.phash(Image.open('5.jpg')) \r\n\r\nhash0000 = imagehash.average_hash(Image.open('4.jpg')) \r\nhash1111 = imagehash.average_hash(Image.open('5.jpg')) \r\n\r\nhash00000 = imagehash.dhash(Image.open('4.jpg'))\r\nhash11111 = imagehash.dhash(Image.open('5.jpg')) \r\n\r\nhash000000 = imagehash.whash(Image.open('4.jpg'))\r\nhash111111 = imagehash.whash(Image.open('5.jpg')) \r\n\r\ncutoff = 1\r\n\r\nrs1 = str(hash000000)+str(hash00000)+str(hash0000)+str(hash000)+str(hash00)+str(hash0)\r\nrs2 = str(hash111111)+str(hash11111)+str(hash1111)+str(hash111)+str(hash11)+str(hash1)\r\nprint(rs1)\r\nprint(rs2)\r\nprint(rs1==rs2)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/106", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/106/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/106/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/106", "id": 597860712, "node_id": "MDU6SXNzdWU1OTc4NjA3MTI=", "number": 106, "title": "Bug in average_hash algorithm flips all bits, making similar pictures very dissimilar", "user": {"login": "adamryczkowski", "id": 4469707, "node_id": "MDQ6VXNlcjQ0Njk3MDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4469707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamryczkowski", "html_url": "https://github.com/adamryczkowski", "followers_url": "https://api.github.com/users/adamryczkowski/followers", "following_url": "https://api.github.com/users/adamryczkowski/following{/other_user}", "gists_url": "https://api.github.com/users/adamryczkowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamryczkowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamryczkowski/subscriptions", "organizations_url": "https://api.github.com/users/adamryczkowski/orgs", "repos_url": "https://api.github.com/users/adamryczkowski/repos", "events_url": "https://api.github.com/users/adamryczkowski/events{/privacy}", "received_events_url": "https://api.github.com/users/adamryczkowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-10T12:20:25Z", "updated_at": "2020-04-14T14:00:19Z", "closed_at": "2020-04-14T13:09:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport imagehash\r\nimport io\r\nfrom PIL import Image\r\n\r\n\r\nfile1='h_l.png'\r\nfile2='h_m.png'\r\n\r\nwith open(file1, \"rb\") as fh:\r\n    png1=fh.read()\r\n\r\nwith open(file2, \"rb\") as fh:\r\n    png2=fh.read()\r\n\r\nimg1 = Image.open(io.BytesIO(png1))\r\nimg2 = Image.open(io.BytesIO(png2))\r\n\r\nhash1=imagehash.average_hash(img1, 16)\r\nhash2=imagehash.average_hash(img2, 16)\r\n\r\nprint(\"Hash1: \" + str(hash1))\r\nprint(\"Hash2: \" + str(hash2))\r\n```\r\nOutputs\r\n```\r\nHash1: fdfffffffffffc3ff81ff81ffc1ffb3ffb3ffcbfffffffffffffffffffffffff\r\nHash2: 01000000018000000000000000000b000b0004e007e000000000000000000000\r\n\r\n```\r\n\r\n![h_l](https://user-images.githubusercontent.com/4469707/78990215-2f493a00-7b36-11ea-9359-ab0d91f5489f.png)\r\n\r\n![h_m](https://user-images.githubusercontent.com/4469707/78990220-2fe1d080-7b36-11ea-8197-6111d0e12fad.png)\r\n\r\nThis issue might be related to #103 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/104", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/104/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/104/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/104", "id": 573979069, "node_id": "MDU6SXNzdWU1NzM5NzkwNjk=", "number": 104, "title": "[Question] Why use ITU-R 601-2 for grayscaling?", "user": {"login": "m0rtalis", "id": 20595780, "node_id": "MDQ6VXNlcjIwNTk1Nzgw", "avatar_url": "https://avatars3.githubusercontent.com/u/20595780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m0rtalis", "html_url": "https://github.com/m0rtalis", "followers_url": "https://api.github.com/users/m0rtalis/followers", "following_url": "https://api.github.com/users/m0rtalis/following{/other_user}", "gists_url": "https://api.github.com/users/m0rtalis/gists{/gist_id}", "starred_url": "https://api.github.com/users/m0rtalis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m0rtalis/subscriptions", "organizations_url": "https://api.github.com/users/m0rtalis/orgs", "repos_url": "https://api.github.com/users/m0rtalis/repos", "events_url": "https://api.github.com/users/m0rtalis/events{/privacy}", "received_events_url": "https://api.github.com/users/m0rtalis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-02T13:35:50Z", "updated_at": "2020-03-02T15:20:30Z", "closed_at": "2020-03-02T15:20:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\nis there any particular reason to use the ITU-R 601-2 transform to convert an image to grayscale?\r\nI'm currently writing on my master thesis and noticed that most perceptual hashing algorithm use either that or the ITU-R 709 to convert images instead of other methods. I couldn't find any reason behind this and Kanan et. al. suggests in \"https://doi.org/10.1371/journal.pone.0029740\" that other methods might be better suited.\r\n\r\nSo is there any particular reason for it or was it just convenience?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/103", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/103/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/103/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/103", "id": 563181299, "node_id": "MDU6SXNzdWU1NjMxODEyOTk=", "number": 103, "title": "Not working", "user": {"login": "ezequias", "id": 539561, "node_id": "MDQ6VXNlcjUzOTU2MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/539561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezequias", "html_url": "https://github.com/ezequias", "followers_url": "https://api.github.com/users/ezequias/followers", "following_url": "https://api.github.com/users/ezequias/following{/other_user}", "gists_url": "https://api.github.com/users/ezequias/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezequias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezequias/subscriptions", "organizations_url": "https://api.github.com/users/ezequias/orgs", "repos_url": "https://api.github.com/users/ezequias/repos", "events_url": "https://api.github.com/users/ezequias/events{/privacy}", "received_events_url": "https://api.github.com/users/ezequias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-11T12:42:13Z", "updated_at": "2020-04-29T03:48:29Z", "closed_at": "2020-04-29T03:37:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried this code below with this two images and it does not work for me. Does anyone can tell me what could be done to solve this issue?\r\n\r\n\r\n```from PIL import Image\r\nimport imagehash\r\n\r\nhash0 = imagehash.average_hash(Image.open('bk1.jpg')) \r\nhash1 = imagehash.average_hash(Image.open('bk3.jpg')) \r\n\r\nprint(hash0)\r\nprint(hash1)\r\n\r\nprint(hash0 - hash1)\r\n\r\ncutoff = hash0 - hash1\r\n\r\nprint(hash0 == hash1)\r\n\r\nif hash0 - hash1 < cutoff:\r\n  print('images are similar')\r\nelse:\r\n  print('images are not similar')\r\n```\r\n\r\n![bk1](https://user-images.githubusercontent.com/539561/74237630-c0c13a80-4cb2-11ea-8359-602c5817f143.jpg)\r\n![bk3](https://user-images.githubusercontent.com/539561/74237633-c159d100-4cb2-11ea-9010-e7746285cb2d.jpg)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/102", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/102/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/102/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/102", "id": 555022389, "node_id": "MDU6SXNzdWU1NTUwMjIzODk=", "number": 102, "title": "goimagehash.PerceptionHash vs this python imagehash.phash", "user": {"login": "dancrew32", "id": 86152, "node_id": "MDQ6VXNlcjg2MTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/86152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dancrew32", "html_url": "https://github.com/dancrew32", "followers_url": "https://api.github.com/users/dancrew32/followers", "following_url": "https://api.github.com/users/dancrew32/following{/other_user}", "gists_url": "https://api.github.com/users/dancrew32/gists{/gist_id}", "starred_url": "https://api.github.com/users/dancrew32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dancrew32/subscriptions", "organizations_url": "https://api.github.com/users/dancrew32/orgs", "repos_url": "https://api.github.com/users/dancrew32/repos", "events_url": "https://api.github.com/users/dancrew32/events{/privacy}", "received_events_url": "https://api.github.com/users/dancrew32/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-25T01:13:06Z", "updated_at": "2020-04-29T04:44:06Z", "closed_at": "2020-04-29T04:44:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Comparing this python phash function:\r\nhttps://github.com/JohannesBuchner/imagehash/blob/master/imagehash/__init__.py#L152-L171\r\n\r\nTo this golang phash function:\r\nhttps://github.com/corona10/goimagehash/blob/master/hashcompute.go#L64-L85\r\n\r\nThere are unfortunately small deltas between the two hashing algorithms (hamming distance 0, 2, 4), so there must be a few minor deltas:\r\n\r\n* I see the golang implementation is using bilinear and can be updated to Lanczos2 or Lanczos3 to be more similar to PIL ANTIALIAS (Lanczos).\r\n* I also see that imagehash has the image resized to 32x32 by default where the golang is 64x64 by default.\r\n\r\nKind of nerdy problem, but I'd love help discovering the deltas between these two implementations. Thanks in advance.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/101", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/101/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/101/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/101", "id": 548403590, "node_id": "MDU6SXNzdWU1NDg0MDM1OTA=", "number": 101, "title": "For animated gifs", "user": {"login": "nokemono", "id": 50549246, "node_id": "MDQ6VXNlcjUwNTQ5MjQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/50549246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nokemono", "html_url": "https://github.com/nokemono", "followers_url": "https://api.github.com/users/nokemono/followers", "following_url": "https://api.github.com/users/nokemono/following{/other_user}", "gists_url": "https://api.github.com/users/nokemono/gists{/gist_id}", "starred_url": "https://api.github.com/users/nokemono/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nokemono/subscriptions", "organizations_url": "https://api.github.com/users/nokemono/orgs", "repos_url": "https://api.github.com/users/nokemono/repos", "events_url": "https://api.github.com/users/nokemono/events{/privacy}", "received_events_url": "https://api.github.com/users/nokemono/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-11T08:58:46Z", "updated_at": "2020-04-29T03:38:43Z", "closed_at": "2020-04-29T03:38:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the calculation result for an animated gif?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/100", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/100/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/100/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/100", "id": 540850622, "node_id": "MDU6SXNzdWU1NDA4NTA2MjI=", "number": 100, "title": "I want to change the hash length.", "user": {"login": "nokemono", "id": 50549246, "node_id": "MDQ6VXNlcjUwNTQ5MjQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/50549246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nokemono", "html_url": "https://github.com/nokemono", "followers_url": "https://api.github.com/users/nokemono/followers", "following_url": "https://api.github.com/users/nokemono/following{/other_user}", "gists_url": "https://api.github.com/users/nokemono/gists{/gist_id}", "starred_url": "https://api.github.com/users/nokemono/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nokemono/subscriptions", "organizations_url": "https://api.github.com/users/nokemono/orgs", "repos_url": "https://api.github.com/users/nokemono/repos", "events_url": "https://api.github.com/users/nokemono/events{/privacy}", "received_events_url": "https://api.github.com/users/nokemono/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-20T08:22:01Z", "updated_at": "2019-12-20T16:53:04Z", "closed_at": "2019-12-20T08:32:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to change the hash length.\r\nPlease tell me how.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/99", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/99/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/99/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/99", "id": 519249174, "node_id": "MDU6SXNzdWU1MTkyNDkxNzQ=", "number": 99, "title": "Add support of images that are already as numpy array", "user": {"login": "VasylVaskivskyi", "id": 35797200, "node_id": "MDQ6VXNlcjM1Nzk3MjAw", "avatar_url": "https://avatars0.githubusercontent.com/u/35797200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VasylVaskivskyi", "html_url": "https://github.com/VasylVaskivskyi", "followers_url": "https://api.github.com/users/VasylVaskivskyi/followers", "following_url": "https://api.github.com/users/VasylVaskivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/VasylVaskivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/VasylVaskivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VasylVaskivskyi/subscriptions", "organizations_url": "https://api.github.com/users/VasylVaskivskyi/orgs", "repos_url": "https://api.github.com/users/VasylVaskivskyi/repos", "events_url": "https://api.github.com/users/VasylVaskivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/VasylVaskivskyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-07T12:54:40Z", "updated_at": "2020-04-29T03:41:19Z", "closed_at": "2020-04-29T03:41:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be good a feature to be able to use images that are already loaded in python and represented as numpy matrix. \r\nFrom what I've seen, currently it is only possible to use images loaded using PIL.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/97", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/97/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/97/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/97", "id": 493619869, "node_id": "MDU6SXNzdWU0OTM2MTk4Njk=", "number": 97, "title": "Really Following Hacker Factor?", "user": {"login": "danshev", "id": 3915359, "node_id": "MDQ6VXNlcjM5MTUzNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3915359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danshev", "html_url": "https://github.com/danshev", "followers_url": "https://api.github.com/users/danshev/followers", "following_url": "https://api.github.com/users/danshev/following{/other_user}", "gists_url": "https://api.github.com/users/danshev/gists{/gist_id}", "starred_url": "https://api.github.com/users/danshev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danshev/subscriptions", "organizations_url": "https://api.github.com/users/danshev/orgs", "repos_url": "https://api.github.com/users/danshev/repos", "events_url": "https://api.github.com/users/danshev/events{/privacy}", "received_events_url": "https://api.github.com/users/danshev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-14T12:48:36Z", "updated_at": "2019-10-04T13:50:05Z", "closed_at": "2019-10-04T13:50:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to reconcile the Hacker Factor approach to pHash and the code in this library.  I'm copy / pasting the HF steps and intermixing the code from the `phash` function from here: https://github.com/JohannesBuchner/imagehash/blob/master/imagehash/__init__.py#L151\r\n\r\n**_Is this library a different implementation of pHash?_**\r\n\r\n**1a. Reduce size**. Like Average Hash, pHash starts with a small image. However, the image is larger than 8x8; 32x32 is a good size. This is really done to simplify the DCT computation and not because it is needed to reduce the high frequencies.\r\n\r\n**1b. Reduce color.** The image is reduced to a grayscale just to further simplify the number of computations.\r\n\r\n```python\r\nimage = image.convert(\"L\").resize((img_size, img_size), Image.ANTIALIAS)\r\n```\r\n\r\n**2. Compute the DCT.** The DCT separates the image into a collection of frequencies and scalars. While JPEG uses an 8x8 DCT, this algorithm uses a 32x32 DCT.\r\n\r\n```\r\npixels = numpy.asarray(image)\r\ndct = scipy.fftpack.dct(scipy.fftpack.dct(pixels, axis=0), axis=1)\r\n```\r\n_My note: Here, it seems like there's an initial DCT and then another one, performed on the result of the first?_\r\n\r\n**3. Reduce the DCT.** While the DCT is 32x32, just keep the top-left 8x8. Those represent the lowest frequencies in the picture.\r\n\r\n```python\r\ndctlowfreq = dct[:hash_size, :hash_size] # where hash_size was previously set to 8\r\n```\r\n\r\n**4. Compute the average value.** Like the Average Hash, compute the mean DCT value (using only the 8x8 DCT low-frequency values and excluding the first term since the DC coefficient can be significantly different from the other values and will throw off the average). Thanks to David Starkweather for the added information about pHash. He wrote: \"the dct hash is based on the low 2D DCT coefficients starting at the second from lowest, leaving out the first DC term. This excludes completely flat image information (i.e. solid colors) from being included in the hash description.\"\r\n\r\n```python\r\nmed = numpy.median(dctlowfreq)\r\n```\r\n_My note: Here, the median (not the average) is taken? And the first item is **not** excluded?_\r\n\r\n**5. Further reduce the DCT.** This is the magic step. Set the 64 hash bits to 0 or 1 depending on whether each of the 64 DCT values is above or below the **average value**. The result doesn't tell us the actual low frequencies; it just tells us the very-rough relative scale of the frequencies to the mean. The result will not vary as long as the overall structure of the image remains the same; this can survive gamma and color histogram adjustments without a problem.\r\n\r\n```python\r\ndiff = dctlowfreq > med\r\n```\r\n\r\n**6. Construct the hash.** Set the 64 bits into a 64-bit integer. The order does not matter, just as long as you are consistent. To see what this fingerprint looks like, simply set the values (this uses +255 and -255 based on whether the bits are 1 or 0) and convert from the 32x32 DCT (with zeros for the high frequencies) back into the 32x32 image:\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/96", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/96/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/96/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/96", "id": 492835731, "node_id": "MDU6SXNzdWU0OTI4MzU3MzE=", "number": 96, "title": "[Question] Should pHash values be usable cross-library?", "user": {"login": "danshev", "id": 3915359, "node_id": "MDQ6VXNlcjM5MTUzNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3915359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danshev", "html_url": "https://github.com/danshev", "followers_url": "https://api.github.com/users/danshev/followers", "following_url": "https://api.github.com/users/danshev/following{/other_user}", "gists_url": "https://api.github.com/users/danshev/gists{/gist_id}", "starred_url": "https://api.github.com/users/danshev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danshev/subscriptions", "organizations_url": "https://api.github.com/users/danshev/orgs", "repos_url": "https://api.github.com/users/danshev/repos", "events_url": "https://api.github.com/users/danshev/events{/privacy}", "received_events_url": "https://api.github.com/users/danshev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-12T14:17:45Z", "updated_at": "2019-09-14T12:41:10Z", "closed_at": "2019-09-14T12:41:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Title says it all, but I have a use-case where I need to:\r\n\r\n- Calculate a pHash value using this library\r\n- Calculate a pHash value on an iOS device (using a different library)\r\n- Calculate the pHash value distance on the iOS device\r\n\r\nSee [this issue / library](https://github.com/ameingast/cocoaimagehashing/issues/21) for more detail, but the pHash values  for the same image (calculated by this library and the [CocoaImageHashingLibrary](https://github.com/ameingast/cocoaimagehashing)) seem to vary such that the same two images result in a non-match.\r\n\r\nIs the pHash algorithm standard such that pHash values _should_ be usable cross-library?\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/95", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/95/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/95/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/95", "id": 483729924, "node_id": "MDU6SXNzdWU0ODM3Mjk5MjQ=", "number": 95, "title": "Triangular wHash?", "user": {"login": "DonaldTsang", "id": 10583082, "node_id": "MDQ6VXNlcjEwNTgzMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/10583082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DonaldTsang", "html_url": "https://github.com/DonaldTsang", "followers_url": "https://api.github.com/users/DonaldTsang/followers", "following_url": "https://api.github.com/users/DonaldTsang/following{/other_user}", "gists_url": "https://api.github.com/users/DonaldTsang/gists{/gist_id}", "starred_url": "https://api.github.com/users/DonaldTsang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DonaldTsang/subscriptions", "organizations_url": "https://api.github.com/users/DonaldTsang/orgs", "repos_url": "https://api.github.com/users/DonaldTsang/repos", "events_url": "https://api.github.com/users/DonaldTsang/events{/privacy}", "received_events_url": "https://api.github.com/users/DonaldTsang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-22T02:01:45Z", "updated_at": "2020-04-29T07:51:42Z", "closed_at": "2020-04-29T04:47:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is this repo https://pippy360.github.io/transformationInvariantImageSearch/\r\nwhere they dissect an image into triangles for comparisons, and it hashes each triangle.\r\nThe problem is the trangles are hashed three times using pHash (roatated with different vertex)\r\nAfter reading these articles maybe a Triangular wHash can reduce the size of the hashes.\r\n- https://www.eurasip.org/Proceedings/Eusipco/Eusipco2006/papers/1568982198.pdf\r\n- https://www.maths.univ-evry.fr/prepubli/300.pdf\r\n- http://www.skoltech.ru/app/data/uploads/sites/19/2017/02/EuSiPCo_2007.pdf", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/94", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/94/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/94/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/94", "id": 483128034, "node_id": "MDU6SXNzdWU0ODMxMjgwMzQ=", "number": 94, "title": "Python version >= 3.5 required ?", "user": {"login": "k0fi", "id": 3398979, "node_id": "MDQ6VXNlcjMzOTg5Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3398979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k0fi", "html_url": "https://github.com/k0fi", "followers_url": "https://api.github.com/users/k0fi/followers", "following_url": "https://api.github.com/users/k0fi/following{/other_user}", "gists_url": "https://api.github.com/users/k0fi/gists{/gist_id}", "starred_url": "https://api.github.com/users/k0fi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k0fi/subscriptions", "organizations_url": "https://api.github.com/users/k0fi/orgs", "repos_url": "https://api.github.com/users/k0fi/repos", "events_url": "https://api.github.com/users/k0fi/events{/privacy}", "received_events_url": "https://api.github.com/users/k0fi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-20T23:27:37Z", "updated_at": "2019-10-04T13:51:14Z", "closed_at": "2019-10-04T13:51:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can not install  ImageHash on my legacy environment which uses `Python 2.7.9`\r\n\r\n```\r\n`$pip install ImageHash\r\nDownloading/unpacking ImageHash\r\n  Downloading ImageHash-4.0-py2.py3-none-any.whl (295kB): 295kB downloaded\r\nDownloading/unpacking numpy (from ImageHash)\r\n  Downloading numpy-1.17.0.zip (6.5MB): 6.5MB downloaded\r\n  Running setup.py (path:/tmp/pip-build-wySIh5/numpy/setup.py) egg_info for package numpy\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 17, in <module>\r\n      File \"/tmp/pip-build-wySIh5/numpy/setup.py\", line 31, in <module>\r\n        raise RuntimeError(\"Python version >= 3.5 required.\")\r\n    RuntimeError: Python version >= 3.5 required.\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n\r\n  File \"<string>\", line 17, in <module>\r\n\r\n  File \"/tmp/pip-build-wySIh5/numpy/setup.py\", line 31, in <module>\r\n\r\n    raise RuntimeError(\"Python version >= 3.5 required.\")\r\n\r\nRuntimeError: Python version >= 3.5 required.`\r\n```\r\n\r\nHowever, I could install it on my other machine running `Python 2.7.15+`\r\n\r\nIn both environments I have `Pillow==6.1.0`\r\n\r\n\r\nIs there any way around it?\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/93", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/93/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/93/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/93", "id": 482999118, "node_id": "MDU6SXNzdWU0ODI5OTkxMTg=", "number": 93, "title": "imagehash.average_hash results in array instead of string", "user": {"login": "k0fi", "id": 3398979, "node_id": "MDQ6VXNlcjMzOTg5Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3398979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k0fi", "html_url": "https://github.com/k0fi", "followers_url": "https://api.github.com/users/k0fi/followers", "following_url": "https://api.github.com/users/k0fi/following{/other_user}", "gists_url": "https://api.github.com/users/k0fi/gists{/gist_id}", "starred_url": "https://api.github.com/users/k0fi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k0fi/subscriptions", "organizations_url": "https://api.github.com/users/k0fi/orgs", "repos_url": "https://api.github.com/users/k0fi/repos", "events_url": "https://api.github.com/users/k0fi/events{/privacy}", "received_events_url": "https://api.github.com/users/k0fi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-08-20T17:53:44Z", "updated_at": "2019-08-22T10:10:32Z", "closed_at": "2019-08-20T23:24:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using python 2.7, when I try:\r\n\r\n       `from PIL import Image \r\n       import imagehash\r\n       img = Image.open(path)\r\n       hash = imagehash.average_hash(img)\r\n        print (\"hash is:\", hash)`\r\n\r\n\r\nThe result is an array like this:\r\n\r\n`('hash is:', array([[False, False, False,  True, False, False,  True,  True],\r\n       [False, False, False,  True,  True,  True,  True,  True],\r\n       [False,  True, False,  True,  True,  True,  True,  True],\r\n       [False,  True,  True,  True,  True,  True,  True,  True],\r\n       [False,  True,  True,  True,  False,  True, False, False],\r\n       [False,  True,  True,  True,  True,  True,  True, False],\r\n       [False, False,  True, False, False, False,  True, False],\r\n       [False, False, False, False, False, False,  True,  True]])`\r\n\r\nInstead of a string. What I'm missing here? How can I fix it?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/92", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/92/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/92/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/92", "id": 482185511, "node_id": "MDU6SXNzdWU0ODIxODU1MTE=", "number": 92, "title": "Need ImageHash.__lt__ for sorting the hashes :)", "user": {"login": "archtaurus", "id": 1265068, "node_id": "MDQ6VXNlcjEyNjUwNjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1265068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/archtaurus", "html_url": "https://github.com/archtaurus", "followers_url": "https://api.github.com/users/archtaurus/followers", "following_url": "https://api.github.com/users/archtaurus/following{/other_user}", "gists_url": "https://api.github.com/users/archtaurus/gists{/gist_id}", "starred_url": "https://api.github.com/users/archtaurus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/archtaurus/subscriptions", "organizations_url": "https://api.github.com/users/archtaurus/orgs", "repos_url": "https://api.github.com/users/archtaurus/repos", "events_url": "https://api.github.com/users/archtaurus/events{/privacy}", "received_events_url": "https://api.github.com/users/archtaurus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-08-19T08:53:13Z", "updated_at": "2019-10-29T17:07:04Z", "closed_at": "2019-10-29T17:07:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please add ImageHash.__lt__ method", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/91", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/91/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/91/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/91", "id": 468293487, "node_id": "MDU6SXNzdWU0NjgyOTM0ODc=", "number": 91, "title": "Hash different for identical photo", "user": {"login": "Dabrill", "id": 9122041, "node_id": "MDQ6VXNlcjkxMjIwNDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/9122041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dabrill", "html_url": "https://github.com/Dabrill", "followers_url": "https://api.github.com/users/Dabrill/followers", "following_url": "https://api.github.com/users/Dabrill/following{/other_user}", "gists_url": "https://api.github.com/users/Dabrill/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dabrill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dabrill/subscriptions", "organizations_url": "https://api.github.com/users/Dabrill/orgs", "repos_url": "https://api.github.com/users/Dabrill/repos", "events_url": "https://api.github.com/users/Dabrill/events{/privacy}", "received_events_url": "https://api.github.com/users/Dabrill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-15T19:21:22Z", "updated_at": "2019-07-15T19:25:48Z", "closed_at": "2019-07-15T19:25:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I loaded this picture \"D.jpg\" into MSPaint and resaved it as a jpg, \"D2.jpg\", then compared the hash the values I got were radically different for all four hash types.\r\nAverage hash reported distance 28\r\nphash 26\r\ndhash 23 \r\nwhash 26\r\n\r\nI'm expect distance 0, of course. \r\n\r\naverage hash had this table for the original:\r\n[[ True  True  True  True  True False False False]\r\n [ True  True  True  True  True  True  True  True]\r\n [ True  True  True  True False  True  True  True]\r\n [ True  True False False False False False False]\r\n [ True  True False False False False False False]\r\n [ True  True  True False False False False False]\r\n [ True  True  True False False False False False]\r\n [ True  True  True  True False False False False]]\r\n\r\nAnd this table for the resaved version:\r\n[[ True  True  True  True  True  True  True  True]\r\n [ True  True  True  True  True  True  True  True]\r\n [ True  True  True False False  True  True  True]\r\n [ True False False False False  True  True  True]\r\n [False False False False False False  True  True]\r\n [False False False False False  True  True False]\r\n [False False False False False  True  True False]\r\n [False False False False False  True  True False]]\r\nHere are the files:\r\n![D](https://user-images.githubusercontent.com/9122041/61242381-67803100-a6fa-11e9-80d9-891ea757eb40.jpg)\r\n![D2](https://user-images.githubusercontent.com/9122041/61242382-67803100-a6fa-11e9-9bab-efa2d2d48950.jpg)\r\n\r\nThe test for transparency does not seem to return True\r\n\r\nHere's the code I am using to test:\r\n`from PIL import Image\r\nimport imagehash as ih\r\ndef load(fn):\r\n    img = Image.open(fn)\r\n    if img.mode in ('RGBA', 'LA') or (img.mode == 'P' and 'transparency' in img.info):\r\n        print(\"Transparency in \",fn)\r\n    return (fn,ih.average_hash(img),ih.phash(img),ih.dhash(img),ih.whash(img))\r\nD = load (\"D.jpg\")\r\nD2 = load (\"D2.jpg\")\r\nA = D[1]\r\nB = D2[1]\r\nprint(A-B)\r\nprint(A)\r\nprint(B)\r\n`\r\n\r\nWhich outputs:\r\n28\r\nf8fff7c0c0e0e0f0\r\nffffe78703060606\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/90", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/90/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/90/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/90", "id": 459203624, "node_id": "MDU6SXNzdWU0NTkyMDM2MjQ=", "number": 90, "title": "How save phash value to database?", "user": {"login": "ahvahsky2008", "id": 8035828, "node_id": "MDQ6VXNlcjgwMzU4Mjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8035828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahvahsky2008", "html_url": "https://github.com/ahvahsky2008", "followers_url": "https://api.github.com/users/ahvahsky2008/followers", "following_url": "https://api.github.com/users/ahvahsky2008/following{/other_user}", "gists_url": "https://api.github.com/users/ahvahsky2008/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahvahsky2008/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahvahsky2008/subscriptions", "organizations_url": "https://api.github.com/users/ahvahsky2008/orgs", "repos_url": "https://api.github.com/users/ahvahsky2008/repos", "events_url": "https://api.github.com/users/ahvahsky2008/events{/privacy}", "received_events_url": "https://api.github.com/users/ahvahsky2008/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-21T13:40:17Z", "updated_at": "2019-10-29T17:07:32Z", "closed_at": "2019-10-29T17:07:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try save image hash to db. \r\n\r\n\r\n\r\n```\r\n    sql  = (\"INSERT HIGH_PRIORITY INTO imagecompare.hashes(filename, hash) VALUES (%s, %s)\");\r\n    val = (image,hash)\r\n    result = cursor.execute(sql,val)\r\n```\r\n\r\n```\r\nCREATE TABLE imagecompare.hashes (\r\n  Id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,\r\n  filename varchar(500) NOT NULL,\r\n  hash bigint unsigned NOT NULL,\r\n  PRIMARY KEY (Id)\r\n)\r\nENGINE = INNODB,\r\nCHARACTER SET utf8,\r\nCOLLATE utf8_general_ci;\r\n```\r\nIts rise error\r\n`AttributeError: 'ImageHash' object has no attribute 'translate'`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/89", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/89/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/89/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/89", "id": 456690248, "node_id": "MDU6SXNzdWU0NTY2OTAyNDg=", "number": 89, "title": "Different Hashes for Same Image", "user": {"login": "JohnTravolski", "id": 36255053, "node_id": "MDQ6VXNlcjM2MjU1MDUz", "avatar_url": "https://avatars2.githubusercontent.com/u/36255053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTravolski", "html_url": "https://github.com/JohnTravolski", "followers_url": "https://api.github.com/users/JohnTravolski/followers", "following_url": "https://api.github.com/users/JohnTravolski/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTravolski/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTravolski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTravolski/subscriptions", "organizations_url": "https://api.github.com/users/JohnTravolski/orgs", "repos_url": "https://api.github.com/users/JohnTravolski/repos", "events_url": "https://api.github.com/users/JohnTravolski/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTravolski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-16T22:47:29Z", "updated_at": "2019-06-17T17:51:48Z", "closed_at": "2019-06-17T17:51:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I find it concerning that the results of the hashes used for images can depend on the library used to read in the file.  I have only had this issue with .jpg images, so I suspect these two libraries don't decode them the same way.\r\n\r\n```\r\nfrom PIL import Image\r\nimport numpy as np\r\nimport cv2\r\nimport imagehash\r\n\r\n# In this code, the same image is read in with two different libraries.  \r\n# The perceptual hash is then calculated for both, and they differ.\r\n\r\n# convert the image read in from PIL to a cv2-style numpy array\r\npic = Image.open(\"original.jpg\")\r\npil_to_cv2 = np.array(pic)\r\npil_to_cv2 = cv2.cvtColor(pil_to_cv2, cv2.COLOR_RGB2BGR)\r\ncv2.imwrite(\"pil_to_cv2.png\", pil_to_cv2)\r\n\r\n# convert the image read in from cv2 to a PIL-style image\r\ncv2img = cv2.imread(\"original.jpg\", cv2.IMREAD_UNCHANGED)\r\ncv2_to_pil_arr = cv2.cvtColor(cv2img, cv2.COLOR_BGR2RGB)\r\ncv2_to_pil = Image.fromarray(cv2_to_pil_arr)\r\ncv2_to_pil.save(\"cv2_to_pil.png\")\r\n\r\nphash1 = str(imagehash.phash(cv2_to_pil))\r\nphash2 = str(imagehash.phash(pic))\r\n\r\nprint(phash1)\r\nprint(phash2)\r\n```\r\nOutput:\r\n```\r\ndbae2805665574f1\r\ncbfa2c04375b74b0\r\n```\r\n\r\nApparently there are different ways that certain libraries decode JPEG images; some take \"shortcuts\" which actually decode to a different result, resulting in different perceptual hashes of the data.  This code shows that, whenever I load in an image with CV2 and perceptual hash it, I get a different hash than when I load in the image with PIL and hash it.\r\n\r\nOne interesting point is that the perceptual hashes seem to differ between the two on images that have HIGH amounts of symmetry, such as images with lots of vertical stripes or images that have been mirrored across both axes.  This usually results in two very different hashes.  For images with no symmetry, the phashes usually don't differ at all, and on the rare occasion that they do, it's only by a few bits.\r\n\r\nThis is the offending image:\r\n\r\n![original](https://user-images.githubusercontent.com/36255053/59570495-6954c700-905e-11e9-9c50-8d26bb0ba904.jpg)\r\n\r\nIn case that upload has been recompressed, potentially altering the results, I have uploaded the file here:\r\n\r\nhttps://drive.google.com/file/d/1Gy4-uPXIWDKsWkgogi2fuhX0B11N3OUj/view?usp=sharing\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/88", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/88/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/88/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/88", "id": 453620722, "node_id": "MDU6SXNzdWU0NTM2MjA3MjI=", "number": 88, "title": "How to compare ImageHash to to hash string?", "user": {"login": "andalorellc", "id": 46114767, "node_id": "MDQ6VXNlcjQ2MTE0NzY3", "avatar_url": "https://avatars0.githubusercontent.com/u/46114767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andalorellc", "html_url": "https://github.com/andalorellc", "followers_url": "https://api.github.com/users/andalorellc/followers", "following_url": "https://api.github.com/users/andalorellc/following{/other_user}", "gists_url": "https://api.github.com/users/andalorellc/gists{/gist_id}", "starred_url": "https://api.github.com/users/andalorellc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andalorellc/subscriptions", "organizations_url": "https://api.github.com/users/andalorellc/orgs", "repos_url": "https://api.github.com/users/andalorellc/repos", "events_url": "https://api.github.com/users/andalorellc/events{/privacy}", "received_events_url": "https://api.github.com/users/andalorellc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-07T17:34:41Z", "updated_at": "2019-06-08T19:52:59Z", "closed_at": "2019-06-07T17:40:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "When saving the image hashes, they are saved as strings.  How can I compare an ImageHash to a saved hash string?  I want to get a diff.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/87", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/87/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/87/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/87", "id": 421240704, "node_id": "MDU6SXNzdWU0MjEyNDA3MDQ=", "number": 87, "title": "AttributeError: 'str' object has no attribute 'convert", "user": {"login": "minou30", "id": 5448593, "node_id": "MDQ6VXNlcjU0NDg1OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5448593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/minou30", "html_url": "https://github.com/minou30", "followers_url": "https://api.github.com/users/minou30/followers", "following_url": "https://api.github.com/users/minou30/following{/other_user}", "gists_url": "https://api.github.com/users/minou30/gists{/gist_id}", "starred_url": "https://api.github.com/users/minou30/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/minou30/subscriptions", "organizations_url": "https://api.github.com/users/minou30/orgs", "repos_url": "https://api.github.com/users/minou30/repos", "events_url": "https://api.github.com/users/minou30/events{/privacy}", "received_events_url": "https://api.github.com/users/minou30/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-14T20:56:48Z", "updated_at": "2019-10-29T17:08:24Z", "closed_at": "2019-10-29T17:08:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python error message on  imagehash.average_hash(i) call:\r\n\r\nimage = image.convert(\"L\").resize((hash_size, hash_size), Image.ANTIALIAS)\r\nAttributeError: 'str' object has no attribute 'convert'\r\n\r\n(OpenCV 4.0, Python 3.7 with \"\r\nfrom PIL import Image\r\nimport imagehash\r\n\" in script)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/86", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/86/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/86/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/86", "id": 410042575, "node_id": "MDU6SXNzdWU0MTAwNDI1NzU=", "number": 86, "title": "can not import imagehash", "user": {"login": "qifengzhou", "id": 26200327, "node_id": "MDQ6VXNlcjI2MjAwMzI3", "avatar_url": "https://avatars3.githubusercontent.com/u/26200327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qifengzhou", "html_url": "https://github.com/qifengzhou", "followers_url": "https://api.github.com/users/qifengzhou/followers", "following_url": "https://api.github.com/users/qifengzhou/following{/other_user}", "gists_url": "https://api.github.com/users/qifengzhou/gists{/gist_id}", "starred_url": "https://api.github.com/users/qifengzhou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qifengzhou/subscriptions", "organizations_url": "https://api.github.com/users/qifengzhou/orgs", "repos_url": "https://api.github.com/users/qifengzhou/repos", "events_url": "https://api.github.com/users/qifengzhou/events{/privacy}", "received_events_url": "https://api.github.com/users/qifengzhou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-13T22:56:10Z", "updated_at": "2019-02-14T16:28:24Z", "closed_at": "2019-02-14T13:23:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI installed imagehash via Anaconda in a conda environment, but it can not be imported in Spyder. \r\nThe error shows:\r\n```\r\nPython 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56)\r\nType \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\nIPython 6.4.0 -- An enhanced Interactive Python.\r\nrunfile('/home/qifeng/.config/spyder-py3/temp.py', wdir='/home/qifeng/.config/spyder-py3')\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-1-3e5372b045d4>\", line 1, in <module>\r\n    runfile('/home/qifeng/.config/spyder-py3/temp.py', wdir='/home/qifeng/.config/spyder-py3')\r\n\r\n  File \"/home/qifeng/anaconda3/lib/python3.6/site-packages/spyder/utils/site/sitecustomize.py\", line 705, in runfile\r\n    execfile(filename, namespace)\r\n\r\n  File \"/home/qifeng/anaconda3/lib/python3.6/site-packages/spyder/utils/site/sitecustomize.py\", line 102, in execfile\r\n    exec(compile(f.read(), filename, 'exec'), namespace)\r\n\r\n  File \"/home/qifeng/.config/spyder-py3/temp.py\", line 7, in <module>\r\n    from imagehash import phash\r\n\r\nModuleNotFoundError: No module named 'imagehash'\"\r\n```\r\nMy system specs are:\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 18.04.2 LTS\r\nRelease:\t18.04\r\nCodename:\tbionic\r\n\r\nThe conda environment which imagehash installed is:\r\npackages in environment at /home/qifeng/anaconda3/envs/whale:\r\n\r\nName                    Version                   Build  Channel\r\nblas                      1.0                         mkl  \r\nca-certificates           2018.11.29           ha4d7672_0    conda-forge\r\ncertifi                   2018.11.29            py27_1000    conda-forge\r\nfreetype                  2.9.1                h8a8886c_1  \r\nimagehash                 4.0                        py_0    conda-forge\r\nintel-openmp              2019.1                      144  \r\njpeg                      9b                   h024ee3a_2  \r\nlibedit                   3.1.20181209         hc058e9b_0  \r\nlibffi                    3.2.1                hd88cf55_4  \r\nlibgcc-ng                 8.2.0                hdf63c60_1  \r\nlibgfortran-ng            7.3.0                hdf63c60_0  \r\nlibpng                    1.6.36               hbc83047_0  \r\nlibstdcxx-ng              8.2.0                hdf63c60_1  \r\nlibtiff                   4.0.10               h2733197_2  \r\nmkl                       2019.1                      144  \r\nncurses                   6.1                  he6710b0_1  \r\nnumpy                     1.11.3           py27h3dfced4_4  \r\nolefile                   0.42.1                   py27_1    scitools/label/archive\r\nopenssl                   1.1.1a            h14c3975_1000    conda-forge\r\npillow                    5.4.1            py27h34e0f95_0  \r\npip                       19.0.1                   py27_0  \r\npython                    2.7.15               h9bab390_6  \r\npywavelets                0.4.0               np111py27_0    scitools/label/archive\r\nreadline                  7.0                  h7b6447c_5  \r\nscipy                     1.2.0            py27h7c811a0_0  \r\nsetuptools                40.7.3                   py27_0  \r\nsix                       1.12.0                   pypi_0    pypi\r\nsqlite                    3.26.0               h7b6447c_0  \r\ntk                        8.6.8                hbc83047_0  \r\nwheel                     0.32.3                   py27_0  \r\nxz                        5.2.4                h14c3975_4  \r\nzlib                      1.2.11               h7b6447c_3  \r\nzstd                      1.3.7                h0b5b093_0 \r\n\r\nspyder version is spyder/bionic,bionic 3.2.6+dfsg1-2 all\r\n\r\nCould you please help?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/85", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/85/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/85/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/85", "id": 394012362, "node_id": "MDU6SXNzdWUzOTQwMTIzNjI=", "number": 85, "title": "How to choose the best hash size when using phash ?", "user": {"login": "lith0613", "id": 31385806, "node_id": "MDQ6VXNlcjMxMzg1ODA2", "avatar_url": "https://avatars0.githubusercontent.com/u/31385806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lith0613", "html_url": "https://github.com/lith0613", "followers_url": "https://api.github.com/users/lith0613/followers", "following_url": "https://api.github.com/users/lith0613/following{/other_user}", "gists_url": "https://api.github.com/users/lith0613/gists{/gist_id}", "starred_url": "https://api.github.com/users/lith0613/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lith0613/subscriptions", "organizations_url": "https://api.github.com/users/lith0613/orgs", "repos_url": "https://api.github.com/users/lith0613/repos", "events_url": "https://api.github.com/users/lith0613/events{/privacy}", "received_events_url": "https://api.github.com/users/lith0613/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-25T11:58:14Z", "updated_at": "2019-01-10T13:50:45Z", "closed_at": "2019-01-10T13:50:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to find the most accurate hash method  with the most proper size, can you share me some idea?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/84", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/84/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/84/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/84", "id": 393661985, "node_id": "MDU6SXNzdWUzOTM2NjE5ODU=", "number": 84, "title": "Flipping an image doesn't flip the hash (phash, dhash)", "user": {"login": "HatScripts", "id": 5691865, "node_id": "MDQ6VXNlcjU2OTE4NjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5691865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HatScripts", "html_url": "https://github.com/HatScripts", "followers_url": "https://api.github.com/users/HatScripts/followers", "following_url": "https://api.github.com/users/HatScripts/following{/other_user}", "gists_url": "https://api.github.com/users/HatScripts/gists{/gist_id}", "starred_url": "https://api.github.com/users/HatScripts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HatScripts/subscriptions", "organizations_url": "https://api.github.com/users/HatScripts/orgs", "repos_url": "https://api.github.com/users/HatScripts/repos", "events_url": "https://api.github.com/users/HatScripts/events{/privacy}", "received_events_url": "https://api.github.com/users/HatScripts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-22T10:22:31Z", "updated_at": "2019-06-17T11:02:16Z", "closed_at": "2019-06-17T11:02:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example, with this image originally and flipped horizontally as input:\r\n![input](https://user-images.githubusercontent.com/5691865/50373112-ed893d00-062d-11e9-8090-97d4b6bad6ef.png)\r\n`average_hash` outputs hashes that satisfyingly look like this (`#` = 1, `.` = 0):\r\n![output_average_hash](https://user-images.githubusercontent.com/5691865/50373118-085bb180-062e-11e9-80e9-58e4ed2b7961.png)\r\nWhile `phash` outputs hashes that look this. When shown side-by-side like this I would expect them to be symmetrical.\r\n![output_phash](https://user-images.githubusercontent.com/5691865/50373125-29bc9d80-062e-11e9-92fd-11bb853bf704.png)\r\n\r\nI'm assuming this a bug? If not, could you please explain this behaviour? I find it quite strange.\r\n\r\n* **average_hash** - valid\r\n* **dhash_vertical** - valid\r\n* **whash** - valid\r\n* **phash** - invalid\r\n* **phash_simple** - invalid\r\n* **dhash** - invalid\r\n\r\nHere's a minimal example:\r\n```py\r\nimport numpy as np\r\nfrom imagehash import *\r\n\r\ndef hash_to_text(a):\r\n    return \"\\n\".join(\" \".join((\"#\" if x else \".\") for x in y) for y in a)\r\n\r\nim_orig = Image.open(\"samples/lion.jpg\")\r\nim_horz = im_orig.transpose(Image.FLIP_LEFT_RIGHT) \r\n\r\nfor func in (average_hash, phash, phash_simple, dhash, dhash_vertical, whash):\r\n    hash_orig = func(im_orig).hash\r\n    hash_horz = func(im_horz).hash\r\n    name = func.__name__\r\n    print(\"==\", name, \"==\")\r\n    if np.all(hash_orig == np.fliplr(hash_horz)):\r\n        print(\"CORRECT RESULT\")\r\n    else:\r\n        print(name + \"(im_orig).hash:\\n\" +\r\n              hash_to_text(hash_orig))\r\n        print(\"np.fliplr(\" + name + \"(im_horz).hash):\\n\" +\r\n              hash_to_text(np.fliplr(hash_horz)))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/83", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/83/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/83/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/83", "id": 386080132, "node_id": "MDU6SXNzdWUzODYwODAxMzI=", "number": 83, "title": "speedup image operation", "user": {"login": "tonal", "id": 316216, "node_id": "MDQ6VXNlcjMxNjIxNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/316216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonal", "html_url": "https://github.com/tonal", "followers_url": "https://api.github.com/users/tonal/followers", "following_url": "https://api.github.com/users/tonal/following{/other_user}", "gists_url": "https://api.github.com/users/tonal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonal/subscriptions", "organizations_url": "https://api.github.com/users/tonal/orgs", "repos_url": "https://api.github.com/users/tonal/repos", "events_url": "https://api.github.com/users/tonal/events{/privacy}", "received_events_url": "https://api.github.com/users/tonal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-30T08:10:34Z", "updated_at": "2018-12-03T05:07:57Z", "closed_at": "2018-11-30T12:16:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "[pillow-simd](https://github.com/uploadcare/pillow-simd) fastest alternative for Pillow", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/82", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/82/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/82/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/82", "id": 384847932, "node_id": "MDU6SXNzdWUzODQ4NDc5MzI=", "number": 82, "title": "`whash` sometimes gives invalid results", "user": {"login": "john-parton", "id": 2071543, "node_id": "MDQ6VXNlcjIwNzE1NDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2071543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/john-parton", "html_url": "https://github.com/john-parton", "followers_url": "https://api.github.com/users/john-parton/followers", "following_url": "https://api.github.com/users/john-parton/following{/other_user}", "gists_url": "https://api.github.com/users/john-parton/gists{/gist_id}", "starred_url": "https://api.github.com/users/john-parton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/john-parton/subscriptions", "organizations_url": "https://api.github.com/users/john-parton/orgs", "repos_url": "https://api.github.com/users/john-parton/repos", "events_url": "https://api.github.com/users/john-parton/events{/privacy}", "received_events_url": "https://api.github.com/users/john-parton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-27T15:24:10Z", "updated_at": "2020-04-29T03:44:40Z", "closed_at": "2020-04-29T03:44:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I frequently see this hash when doing a `whash`: `ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff`\r\n\r\nVisually inspecting the images, they are not at all similar. Here are two images:\r\n\r\n![test1](https://user-images.githubusercontent.com/2071543/49091457-87bfb600-f225-11e8-8c64-554a137baa94.png)\r\n![test2](https://user-images.githubusercontent.com/2071543/49091458-87bfb600-f225-11e8-9984-4e1852d9da58.png)\r\n\r\nHere's my test code:\r\n\r\n```python\r\nimport os\r\n\r\nimport imagehash\r\nfrom PIL import Image\r\n\r\n\r\nclass ImageHasher(object):\r\n\r\n    HASH_SIZE = 32\r\n    IMAGE_SCALE = 2048\r\n\r\n    def __call__(self, f):\r\n\r\n        image = Image.open(f)\r\n\r\n        hash_ = imagehash.whash(\r\n            image,\r\n            hash_size=self.HASH_SIZE,\r\n            image_scale=self.IMAGE_SCALE\r\n        )\r\n\r\n        return str(hash_)\r\n\r\n\r\nimage_hasher = ImageHasher()\r\n\r\ndef main():\r\n    for filename in os.listdir('images'):\r\n        path = os.path.join('images', filename)\r\n        with open(path, 'rb') as f:\r\n             print(image_hasher(f))\r\n\r\n\r\nmain()\r\n```\r\n\r\nAny clues as to what's going on?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/81", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/81/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/81/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/81", "id": 378416535, "node_id": "MDU6SXNzdWUzNzg0MTY1MzU=", "number": 81, "title": "whash-db4 shape problem: \"TypeError: 'ImageHashes must be of the same shape.', (13L, 13L), (14L, 14L)\"", "user": {"login": "vvaezian", "id": 15974735, "node_id": "MDQ6VXNlcjE1OTc0NzM1", "avatar_url": "https://avatars0.githubusercontent.com/u/15974735?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvaezian", "html_url": "https://github.com/vvaezian", "followers_url": "https://api.github.com/users/vvaezian/followers", "following_url": "https://api.github.com/users/vvaezian/following{/other_user}", "gists_url": "https://api.github.com/users/vvaezian/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvaezian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvaezian/subscriptions", "organizations_url": "https://api.github.com/users/vvaezian/orgs", "repos_url": "https://api.github.com/users/vvaezian/repos", "events_url": "https://api.github.com/users/vvaezian/events{/privacy}", "received_events_url": "https://api.github.com/users/vvaezian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-07T18:36:21Z", "updated_at": "2018-11-08T16:06:36Z", "closed_at": "2018-11-08T16:06:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to find the difference between the hash value of the following two images. When I use any hash method other than `whash-db4` it works fine:\r\n````Python\r\nimport imagehash\r\nfrom PIL import Image\r\n\r\nhashNum1_w = imagehash.whash(Image.open('test1.jpg'))\r\nhashNum2_w = imagehash.whash(Image.open('test2.jpg'))\r\nprint(hashNum1_w - hashNum2_w)  # prints 10\r\n````\r\nBut for `whash-db4` it produces the error in the title:\r\n````Python\r\nhashnum1_wdb4 = imagehash.whash(Image.open('test1.jpg'), mode='db4')\r\nhashnum2_wdb4 = imagehash.whash(Image.open('test2.jpg'), mode='db4')\r\nprint(hashNum1_wdb4 - hashNum2_wdb4)\r\n````\r\nNote that\r\n````Python\r\nprint(hashNum1_w)\r\nprint(hashNum2_w)\r\nprint(hashNum1_wdb4)\r\nprint(hashNum2_wdb4)\r\n````\r\nGives\r\n````\r\n80cfe3c1e7cfa501\r\n00cfe9c9efcf6c00\r\n0a0b500fcfd602801fc7fe0ff07fcffcf8025406b03\r\nf807e01f807e01f80c000fe3ff83fe0ff8ffe7c000f80ff03\r\n````\r\n\r\n\r\n![test](https://user-images.githubusercontent.com/15974735/48151161-6b0f0e80-e275-11e8-94c4-aa2d485f6caf.jpg)\r\n![test2](https://user-images.githubusercontent.com/15974735/48151163-6b0f0e80-e275-11e8-9ac6-8023980cce49.jpg)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/80", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/80/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/80/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/80", "id": 370315609, "node_id": "MDU6SXNzdWUzNzAzMTU2MDk=", "number": 80, "title": "How to compare hashes?", "user": {"login": "RenaKunisaki", "id": 1185585, "node_id": "MDQ6VXNlcjExODU1ODU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1185585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RenaKunisaki", "html_url": "https://github.com/RenaKunisaki", "followers_url": "https://api.github.com/users/RenaKunisaki/followers", "following_url": "https://api.github.com/users/RenaKunisaki/following{/other_user}", "gists_url": "https://api.github.com/users/RenaKunisaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/RenaKunisaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RenaKunisaki/subscriptions", "organizations_url": "https://api.github.com/users/RenaKunisaki/orgs", "repos_url": "https://api.github.com/users/RenaKunisaki/repos", "events_url": "https://api.github.com/users/RenaKunisaki/events{/privacy}", "received_events_url": "https://api.github.com/users/RenaKunisaki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-15T19:45:36Z", "updated_at": "2019-10-29T17:09:03Z", "closed_at": "2019-10-29T17:09:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not clear on how two hashes should be compared to determine how similar the images are.\r\n\r\n* Integer difference?\r\n* Hamming difference?\r\n* Difference of each byte/nybble?\r\n* XOR?\r\n* Number of 1 bits?\r\n* Is hash 0xFFFF.... very close to 0x0000... or very far?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/77", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/77/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/77/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/77", "id": 351284699, "node_id": "MDU6SXNzdWUzNTEyODQ2OTk=", "number": 77, "title": "unable to install pyaudio in jetbrains, giving an error i am using python 3.7 ", "user": {"login": "amitsoftdeveloper", "id": 37016230, "node_id": "MDQ6VXNlcjM3MDE2MjMw", "avatar_url": "https://avatars0.githubusercontent.com/u/37016230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amitsoftdeveloper", "html_url": "https://github.com/amitsoftdeveloper", "followers_url": "https://api.github.com/users/amitsoftdeveloper/followers", "following_url": "https://api.github.com/users/amitsoftdeveloper/following{/other_user}", "gists_url": "https://api.github.com/users/amitsoftdeveloper/gists{/gist_id}", "starred_url": "https://api.github.com/users/amitsoftdeveloper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amitsoftdeveloper/subscriptions", "organizations_url": "https://api.github.com/users/amitsoftdeveloper/orgs", "repos_url": "https://api.github.com/users/amitsoftdeveloper/repos", "events_url": "https://api.github.com/users/amitsoftdeveloper/events{/privacy}", "received_events_url": "https://api.github.com/users/amitsoftdeveloper/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-16T16:45:17Z", "updated_at": "2018-08-19T20:52:38Z", "closed_at": "2018-08-19T20:52:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "error: command 'C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 14.0\\\\VC\\\\BIN\\\\x86_amd64\\\\cl.exe' failed with exit status 2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/76", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/76/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/76/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/76", "id": 346671655, "node_id": "MDU6SXNzdWUzNDY2NzE2NTU=", "number": 76, "title": "Rule of thumb Threshold for phash", "user": {"login": "jebrage", "id": 24229867, "node_id": "MDQ6VXNlcjI0MjI5ODY3", "avatar_url": "https://avatars3.githubusercontent.com/u/24229867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jebrage", "html_url": "https://github.com/jebrage", "followers_url": "https://api.github.com/users/jebrage/followers", "following_url": "https://api.github.com/users/jebrage/following{/other_user}", "gists_url": "https://api.github.com/users/jebrage/gists{/gist_id}", "starred_url": "https://api.github.com/users/jebrage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jebrage/subscriptions", "organizations_url": "https://api.github.com/users/jebrage/orgs", "repos_url": "https://api.github.com/users/jebrage/repos", "events_url": "https://api.github.com/users/jebrage/events{/privacy}", "received_events_url": "https://api.github.com/users/jebrage/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-01T16:20:52Z", "updated_at": "2020-04-29T04:46:22Z", "closed_at": "2020-04-29T04:46:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "What would be an ideal value to use as a threshold for phash? This [blog](https://tech.okcupid.com/evaluating-perceptual-image-hashes-okcupid/) here did some research on it. However, I couldn't make out much from it.  Especially as it didn't provide any conclusive threshold value. I'm fairly new to this and a rule of thumb threshold might benefit newcomers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/75", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/75/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/75/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/75", "id": 340154985, "node_id": "MDU6SXNzdWUzNDAxNTQ5ODU=", "number": 75, "title": "Is there a plan to develop a java version", "user": {"login": "yongliangliu", "id": 19800207, "node_id": "MDQ6VXNlcjE5ODAwMjA3", "avatar_url": "https://avatars3.githubusercontent.com/u/19800207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongliangliu", "html_url": "https://github.com/yongliangliu", "followers_url": "https://api.github.com/users/yongliangliu/followers", "following_url": "https://api.github.com/users/yongliangliu/following{/other_user}", "gists_url": "https://api.github.com/users/yongliangliu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongliangliu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongliangliu/subscriptions", "organizations_url": "https://api.github.com/users/yongliangliu/orgs", "repos_url": "https://api.github.com/users/yongliangliu/repos", "events_url": "https://api.github.com/users/yongliangliu/events{/privacy}", "received_events_url": "https://api.github.com/users/yongliangliu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-11T09:08:21Z", "updated_at": "2018-07-11T11:47:43Z", "closed_at": "2018-07-11T11:47:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/74", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/74/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/74/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/74", "id": 339702658, "node_id": "MDU6SXNzdWUzMzk3MDI2NTg=", "number": 74, "title": "No need to pad HEX", "user": {"login": "renedlog", "id": 14824710, "node_id": "MDQ6VXNlcjE0ODI0NzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/14824710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/renedlog", "html_url": "https://github.com/renedlog", "followers_url": "https://api.github.com/users/renedlog/followers", "following_url": "https://api.github.com/users/renedlog/following{/other_user}", "gists_url": "https://api.github.com/users/renedlog/gists{/gist_id}", "starred_url": "https://api.github.com/users/renedlog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/renedlog/subscriptions", "organizations_url": "https://api.github.com/users/renedlog/orgs", "repos_url": "https://api.github.com/users/renedlog/repos", "events_url": "https://api.github.com/users/renedlog/events{/privacy}", "received_events_url": "https://api.github.com/users/renedlog/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-10T05:54:37Z", "updated_at": "2020-04-29T04:06:23Z", "closed_at": "2020-04-29T04:06:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why do you pad the conversion with zeros?\r\nThere is no need to do this. \r\n`binary_array = '{:0>{width}b}'.format(int(hexstr, 16), width = hash_size * hash_size)`\r\nto get rid of 0b like:\r\n`bin(int('3838b59d0c1c7fd8', 16))`\r\n\r\njust do\r\n`'{:b}'.format(int('3838b59d0c1c7fd8', 16), width = hash_size * hash_size)`\r\n\r\nor\r\n`format((int('3838b59d0c1c7fd8', 16)),'08b')`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/73", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/73/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/73/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/73", "id": 329406405, "node_id": "MDU6SXNzdWUzMjk0MDY0MDU=", "number": 73, "title": "Why I use the function about compute hash when two pictures have different sizes but similar.", "user": {"login": "F1And", "id": 37165965, "node_id": "MDQ6VXNlcjM3MTY1OTY1", "avatar_url": "https://avatars1.githubusercontent.com/u/37165965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F1And", "html_url": "https://github.com/F1And", "followers_url": "https://api.github.com/users/F1And/followers", "following_url": "https://api.github.com/users/F1And/following{/other_user}", "gists_url": "https://api.github.com/users/F1And/gists{/gist_id}", "starred_url": "https://api.github.com/users/F1And/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F1And/subscriptions", "organizations_url": "https://api.github.com/users/F1And/orgs", "repos_url": "https://api.github.com/users/F1And/repos", "events_url": "https://api.github.com/users/F1And/events{/privacy}", "received_events_url": "https://api.github.com/users/F1And/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-06-05T11:03:37Z", "updated_at": "2018-10-19T01:19:12Z", "closed_at": "2018-10-19T01:19:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know your function will resize a picture default **8*8** or **8*4** or **8*9** when it compute the HASH. But when I have two pictures that so similar but have different size. The two pictures' **Hamming_distance** is too big. My function is this:\r\n```python\r\ndef Hamming_distance(hash1, hash2):\r\n        \"\"\"\r\n        :param hash1: hash1\r\n        :param hash2: hash2\r\n        :return: distance\r\n        \"\"\"\r\n        distance = 0\r\n        try:\r\n            for index in range(len(hash1)):\r\n                if hash1[index] != hash2[index]:\r\n                    distance += 1\r\n            return distance\r\n        except Exception, e:\r\n            logging.error('hamming distance fail %s', e)\r\n```\r\nPlease tell me how can I do?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/72", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/72/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/72/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/72", "id": 306493888, "node_id": "MDU6SXNzdWUzMDY0OTM4ODg=", "number": 72, "title": "Tag a 4.0 release", "user": {"login": "bjlittle", "id": 2051656, "node_id": "MDQ6VXNlcjIwNTE2NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2051656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjlittle", "html_url": "https://github.com/bjlittle", "followers_url": "https://api.github.com/users/bjlittle/followers", "following_url": "https://api.github.com/users/bjlittle/following{/other_user}", "gists_url": "https://api.github.com/users/bjlittle/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjlittle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjlittle/subscriptions", "organizations_url": "https://api.github.com/users/bjlittle/orgs", "repos_url": "https://api.github.com/users/bjlittle/repos", "events_url": "https://api.github.com/users/bjlittle/events{/privacy}", "received_events_url": "https://api.github.com/users/bjlittle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-19T14:47:21Z", "updated_at": "2018-03-19T15:08:57Z", "closed_at": "2018-03-19T15:07:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "@JohannesBuchner Just for completeness, would it be possible to tag a `4.0` release?\r\n\r\nThe `imagehash` [recipe](https://github.com/conda-forge/imagehash-feedstock/blob/master/recipe/meta.yaml) on `conda-forge` avoids this as it pulls it's source from PyPI.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/70", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/70/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/70/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/70", "id": 303743987, "node_id": "MDU6SXNzdWUzMDM3NDM5ODc=", "number": 70, "title": "Why using median instead of average in phash?", "user": {"login": "chenzd91", "id": 13879667, "node_id": "MDQ6VXNlcjEzODc5NjY3", "avatar_url": "https://avatars3.githubusercontent.com/u/13879667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenzd91", "html_url": "https://github.com/chenzd91", "followers_url": "https://api.github.com/users/chenzd91/followers", "following_url": "https://api.github.com/users/chenzd91/following{/other_user}", "gists_url": "https://api.github.com/users/chenzd91/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenzd91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenzd91/subscriptions", "organizations_url": "https://api.github.com/users/chenzd91/orgs", "repos_url": "https://api.github.com/users/chenzd91/repos", "events_url": "https://api.github.com/users/chenzd91/events{/privacy}", "received_events_url": "https://api.github.com/users/chenzd91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-09T07:02:03Z", "updated_at": "2020-04-29T04:25:22Z", "closed_at": "2020-04-29T04:25:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Average value is used after dct in phash_simple, whereas in phash, median is used. Why?\r\nI found that using average will produce more similar hash values for similar images.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/69", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/69/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/69/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/69", "id": 295363411, "node_id": "MDU6SXNzdWUyOTUzNjM0MTE=", "number": 69, "title": "Performance tests / thoughts (~10e6 hashes)", "user": {"login": "gregsadetsky", "id": 1017304, "node_id": "MDQ6VXNlcjEwMTczMDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1017304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregsadetsky", "html_url": "https://github.com/gregsadetsky", "followers_url": "https://api.github.com/users/gregsadetsky/followers", "following_url": "https://api.github.com/users/gregsadetsky/following{/other_user}", "gists_url": "https://api.github.com/users/gregsadetsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregsadetsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregsadetsky/subscriptions", "organizations_url": "https://api.github.com/users/gregsadetsky/orgs", "repos_url": "https://api.github.com/users/gregsadetsky/repos", "events_url": "https://api.github.com/users/gregsadetsky/events{/privacy}", "received_events_url": "https://api.github.com/users/gregsadetsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-02-08T02:25:47Z", "updated_at": "2018-02-08T19:13:48Z", "closed_at": "2018-02-08T18:31:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Firstly, congratulations on imagehash!\r\n\r\nI'm using it for an application in which I have a few million ImageHash objects in a pandas DataFrame. I have a web server (a \"microservice\") which loads all of these hashes in memory once (from a pickled file), and then outputs closest matches for a given hash.\r\n\r\ni.e., this server allows other services to call it hence: http://example.com/?phash=... passing it the phash of an image (... the needle ...) that's then compared to the millions of stored/pre-computed hashes.\r\n\r\nAs these millions of hash comparisons were taking > 15 seconds on a pretty good machine, this made me look under the hood. Here's what I uncovered using [line_profiler](https://github.com/rkern/line_profiler):\r\n\r\n```\r\nTotal time: 40.0547 s\r\n\r\nLine #      Hits         Time  Per Hit   % Time  Line Contents\r\n==============================================================\r\n    66                                            @profile\r\n    67                                            def __sub__(self, other):\r\n    68   6585208    2452786.0      0.4      6.1     if other is None:\r\n    69                                                raise TypeError('Other hash must not be None.')\r\n    70   6585208    4903316.0      0.7     12.2     if self.hash.size != other.hash.size:\r\n    71                                                raise TypeError('ImageHashes must be of the same shape.', self.hash.shape, other.hash.shape)\r\n    72                                              # original code below, split up to profile each separate instruction\r\n    73   6585208    8010861.0      1.2     20.0     flattened_h = self.hash.flatten()\r\n    74   6585208    6635342.0      1.0     16.6     flattened_other_h = other.hash.flatten()\r\n    75   6585208    6499394.0      1.0     16.2     sub_calc = flattened_h != flattened_other_h\r\n    76   6585208    9317760.0      1.4     23.3     non_zero = numpy.count_nonzero(sub_calc)\r\n    77   6585208    2235231.0      0.3      5.6     return non_zero\r\n```\r\n\r\n(the reported total time is slower than when running this code without the profiler, but the percentage values still hold)\r\n\r\nInterestingly enough, the first two sanity `if` checks take up 18% of the time. First question: is it worth disabling those (but leaving users with more obscure error messages when `__sub__` is called with incompatible arguments)? Would it be worth considering having a separate, \"optimized\" version of `__sub__` that assumes that the user is passing correct values to it..?\r\n\r\nThe second, and most important finding, is that both `.flatten()` operations take up close to 40% of the running time.\r\n\r\nI've modified my version of imagehash to pre-compute `self.hash_flat` once in `__init__`, and removed both sanity checks. Here's the optimized result:\r\n\r\n```\r\nTotal time: 16.0691 s\r\n\r\nLine #      Hits         Time  Per Hit   % Time  Line Contents\r\n==============================================================\r\n    67                                            @profile\r\n    68                                            def __sub__(self, other):\r\n    69                                              # if other is None:\r\n    70                                              #   raise TypeError('Other hash must not be None.')\r\n    71                                              # if self.hash.size != other.hash.size:\r\n    72                                              #   raise TypeError('ImageHashes must be of the same shape.', self.hash.shape, other.hash.shape)\r\n    73                                           \r\n    74                                              # optimized code\r\n    75   6585208    7297545.0      1.1     45.4     sub_calc = self.hash_flat != other.hash_flat\r\n    76   6585208    8771542.0      1.3     54.6     return numpy.count_nonzero(sub_calc)\r\n```\r\n\r\nMuch better... but is this only better for my specific, \"weird\" application? \ud83d\ude04 \r\n\r\nI have some other thoughts/questions around `numpy.count_nonzero`, but perhaps we can save it for later/another issue.\r\n\r\nThanks again! Looking forward to reading your thoughts.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/68", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/68/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/68/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/68", "id": 295167500, "node_id": "MDU6SXNzdWUyOTUxNjc1MDA=", "number": 68, "title": "Image similarity for  million images", "user": {"login": "vijaysagi", "id": 6347404, "node_id": "MDQ6VXNlcjYzNDc0MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6347404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vijaysagi", "html_url": "https://github.com/vijaysagi", "followers_url": "https://api.github.com/users/vijaysagi/followers", "following_url": "https://api.github.com/users/vijaysagi/following{/other_user}", "gists_url": "https://api.github.com/users/vijaysagi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vijaysagi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vijaysagi/subscriptions", "organizations_url": "https://api.github.com/users/vijaysagi/orgs", "repos_url": "https://api.github.com/users/vijaysagi/repos", "events_url": "https://api.github.com/users/vijaysagi/events{/privacy}", "received_events_url": "https://api.github.com/users/vijaysagi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-07T14:55:47Z", "updated_at": "2020-04-29T04:26:50Z", "closed_at": "2020-04-29T04:26:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\nusing the below code, i tried with several images to find the similarity  but the difference between the hashvalues  are not matching\r\n\r\nhash = imagehash.phash(Image.open(1.jpg'))\r\notherhash = imagehash.phash(Image.open('2.jpg'))\r\nprint(hash == otherhash)\r\nprint(hash-otherhash)\r\n\r\nplease suggest how can i get the similarity.\r\n\r\nplease suggest how can we search million images  in the database based on the hashvalue\r\n\r\nThanks\r\nvijay", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/67", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/67/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/67/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/67", "id": 282275509, "node_id": "MDU6SXNzdWUyODIyNzU1MDk=", "number": 67, "title": "Which alternative is best?", "user": {"login": "sibe7691", "id": 1678302, "node_id": "MDQ6VXNlcjE2NzgzMDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1678302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sibe7691", "html_url": "https://github.com/sibe7691", "followers_url": "https://api.github.com/users/sibe7691/followers", "following_url": "https://api.github.com/users/sibe7691/following{/other_user}", "gists_url": "https://api.github.com/users/sibe7691/gists{/gist_id}", "starred_url": "https://api.github.com/users/sibe7691/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sibe7691/subscriptions", "organizations_url": "https://api.github.com/users/sibe7691/orgs", "repos_url": "https://api.github.com/users/sibe7691/repos", "events_url": "https://api.github.com/users/sibe7691/events{/privacy}", "received_events_url": "https://api.github.com/users/sibe7691/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-14T23:43:39Z", "updated_at": "2020-04-29T04:40:00Z", "closed_at": "2020-04-29T04:40:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Which hash function would be best to use if I compare a photo from my phone to a set of photos stored in a catalog on my computer?\r\n\r\nIm trying to achieve basic image-searching.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/65", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/65/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/65/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/65", "id": 276210541, "node_id": "MDU6SXNzdWUyNzYyMTA1NDE=", "number": 65, "title": "scipy error: dtype uint8 not supported", "user": {"login": "kineticac", "id": 19008, "node_id": "MDQ6VXNlcjE5MDA4", "avatar_url": "https://avatars3.githubusercontent.com/u/19008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kineticac", "html_url": "https://github.com/kineticac", "followers_url": "https://api.github.com/users/kineticac/followers", "following_url": "https://api.github.com/users/kineticac/following{/other_user}", "gists_url": "https://api.github.com/users/kineticac/gists{/gist_id}", "starred_url": "https://api.github.com/users/kineticac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kineticac/subscriptions", "organizations_url": "https://api.github.com/users/kineticac/orgs", "repos_url": "https://api.github.com/users/kineticac/repos", "events_url": "https://api.github.com/users/kineticac/events{/privacy}", "received_events_url": "https://api.github.com/users/kineticac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-11-22T21:35:13Z", "updated_at": "2020-04-29T04:28:16Z", "closed_at": "2020-04-29T04:28:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the latest code, using phash results in this error:\r\n\r\n```\r\n$ ./find_similar_images.py phash .\r\nTraceback (most recent call last):\r\n  File \"./find_similar_images.py\", line 61, in <module>\r\n    find_similar_images(userpath=userpath, hashfunc=hashfunc)\r\n  File \"./find_similar_images.py\", line 21, in find_similar_images\r\n    hash = hashfunc(Image.open(img))\r\n  File \"/code/imagehash/imagehash/__init__.py\", line 157, in phash\r\n    dct = scipy.fftpack.dct(scipy.fftpack.dct(pixels, axis=0), axis=1)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/scipy/fftpack/realtransforms.py\", line 124, in dct\r\n    return _dct(x, type, n, axis, normalize=norm, overwrite_x=overwrite_x)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/scipy/fftpack/realtransforms.py\", line 223, in _dct\r\n    raise ValueError(\"dtype %s not supported\" % tmp.dtype)\r\nValueError: dtype uint8 not supported\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/63", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/63/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/63/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/63", "id": 259834036, "node_id": "MDU6SXNzdWUyNTk4MzQwMzY=", "number": 63, "title": "Cannot install on Centos w/ python 3.6", "user": {"login": "alexeyda", "id": 7303443, "node_id": "MDQ6VXNlcjczMDM0NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7303443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyda", "html_url": "https://github.com/alexeyda", "followers_url": "https://api.github.com/users/alexeyda/followers", "following_url": "https://api.github.com/users/alexeyda/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyda/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyda/subscriptions", "organizations_url": "https://api.github.com/users/alexeyda/orgs", "repos_url": "https://api.github.com/users/alexeyda/repos", "events_url": "https://api.github.com/users/alexeyda/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-22T14:31:34Z", "updated_at": "2017-09-22T15:56:50Z", "closed_at": "2017-09-22T15:56:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nbash-4.2# /usr/bin/pip3.6 install imagehash --no-cache-dir\r\nCollecting imagehash\r\n  Downloading ImageHash-3.5.tar.gz (294kB)\r\n    100% |################################| 296kB 298kB/s\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-build-7g_5kb6z/imagehash/setup.py\", line 10, in <module>\r\n        long_description = f.read()\r\n      File \"/usr/lib64/python3.6/encodings/ascii.py\", line 26, in decode\r\n        return codecs.ascii_decode(input, self.errors)[0]\r\n    UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 261: ordinal not in range(128)\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-build-7g_5kb6z/imagehash/\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/62", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/62/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/62/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/62", "id": 255105946, "node_id": "MDU6SXNzdWUyNTUxMDU5NDY=", "number": 62, "title": "imagehash from memory object saves corrupted file", "user": {"login": "elocio", "id": 26840885, "node_id": "MDQ6VXNlcjI2ODQwODg1", "avatar_url": "https://avatars2.githubusercontent.com/u/26840885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elocio", "html_url": "https://github.com/elocio", "followers_url": "https://api.github.com/users/elocio/followers", "following_url": "https://api.github.com/users/elocio/following{/other_user}", "gists_url": "https://api.github.com/users/elocio/gists{/gist_id}", "starred_url": "https://api.github.com/users/elocio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elocio/subscriptions", "organizations_url": "https://api.github.com/users/elocio/orgs", "repos_url": "https://api.github.com/users/elocio/repos", "events_url": "https://api.github.com/users/elocio/events{/privacy}", "received_events_url": "https://api.github.com/users/elocio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2017-09-04T19:26:08Z", "updated_at": "2017-09-05T23:32:16Z", "closed_at": "2017-09-05T23:13:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run imagehash against an upload that exists in memory but has not yet been written to disk, the resulting file is corrupted after disk write. For example:\r\n\r\n`f = form.image.data`\r\n`filename = secure_filename(f.filename)`\r\n`imghash = imagehash.dhash(Image.open(f))`\r\n`f.save(os.path.join(imgdir, filename))`\r\n\r\nThe saved file is missing bytes and isn't a valid image.\r\n\r\nIf I run imagehash against an existing file on disk, it works as expected. I would like to check the hash against a db record before writing anything to disk however.\r\n\r\nI have also tested simply opening the image using PIL's `Image.open()` to make sure that wasn't trashing the file, but it successfully writes the image to disk afterwards. It is only after running imagehash against the PIL-opened file that I lose bytes and write an incomplete file to disk.\r\n\r\nIs this a bug or am I missing something here?\r\n\r\nI'm using Pillow (4.2.1) and ImageHash (3.4). This is a Flask (0.12.2) site where the uploaded file is wrapped in the Werkzeug FileStorage class.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/60", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/60/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/60/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/60", "id": 243972183, "node_id": "MDU6SXNzdWUyNDM5NzIxODM=", "number": 60, "title": "How to get the mean or average of a set of hashes?", "user": {"login": "remibolcom", "id": 17020619, "node_id": "MDQ6VXNlcjE3MDIwNjE5", "avatar_url": "https://avatars0.githubusercontent.com/u/17020619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/remibolcom", "html_url": "https://github.com/remibolcom", "followers_url": "https://api.github.com/users/remibolcom/followers", "following_url": "https://api.github.com/users/remibolcom/following{/other_user}", "gists_url": "https://api.github.com/users/remibolcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/remibolcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/remibolcom/subscriptions", "organizations_url": "https://api.github.com/users/remibolcom/orgs", "repos_url": "https://api.github.com/users/remibolcom/repos", "events_url": "https://api.github.com/users/remibolcom/events{/privacy}", "received_events_url": "https://api.github.com/users/remibolcom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-19T09:08:19Z", "updated_at": "2017-07-19T19:39:41Z", "closed_at": "2017-07-19T10:59:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suppose I have a list of 100 imagehashes. How do I find the hash that is in the center of this high-dimensional cloud? I am looking for a way to find the mean or average of a set of hashes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/59", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/59/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/59/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/59", "id": 241016186, "node_id": "MDU6SXNzdWUyNDEwMTYxODY=", "number": 59, "title": "Identifies similar images in the directory.", "user": {"login": "itsviral", "id": 25455472, "node_id": "MDQ6VXNlcjI1NDU1NDcy", "avatar_url": "https://avatars3.githubusercontent.com/u/25455472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsviral", "html_url": "https://github.com/itsviral", "followers_url": "https://api.github.com/users/itsviral/followers", "following_url": "https://api.github.com/users/itsviral/following{/other_user}", "gists_url": "https://api.github.com/users/itsviral/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsviral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsviral/subscriptions", "organizations_url": "https://api.github.com/users/itsviral/orgs", "repos_url": "https://api.github.com/users/itsviral/repos", "events_url": "https://api.github.com/users/itsviral/events{/privacy}", "received_events_url": "https://api.github.com/users/itsviral/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-06T16:35:36Z", "updated_at": "2017-07-06T16:41:49Z", "closed_at": "2017-07-06T16:41:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I am new to ML coding. Can you please suggest me ,which parameter i need to fill to get output. I have two images 1.jpg and 2.jpg. I want to find similarity between them. How shall i do it? I  would be greatful . Thanks\r\n\r\n`  def usage():\r\n        sys.stderr.write(\"\"\"SYNOPSIS: %s [ahash|phash|dhash|...] [<directory>]\r\nIdentifies similar images in the directory.\r\nMethod: \r\n  ahash:      Average hash\r\n  phash:      Perceptual hash\r\n  dhash:      Difference hash\r\n  whash-haar: Haar wavelet hash\r\n  whash-db4:  Daubechies wavelet hash\r\n(C) Johannes Buchner, 2013-2017\r\n\"\"\" % sys.argv[0])\r\n        sys.exit(1)'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/57", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/57/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/57/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/57", "id": 238292624, "node_id": "MDU6SXNzdWUyMzgyOTI2MjQ=", "number": 57, "title": "Speed optimizations for wavelet hash", "user": {"login": "samzhang111", "id": 2800289, "node_id": "MDQ6VXNlcjI4MDAyODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2800289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samzhang111", "html_url": "https://github.com/samzhang111", "followers_url": "https://api.github.com/users/samzhang111/followers", "following_url": "https://api.github.com/users/samzhang111/following{/other_user}", "gists_url": "https://api.github.com/users/samzhang111/gists{/gist_id}", "starred_url": "https://api.github.com/users/samzhang111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samzhang111/subscriptions", "organizations_url": "https://api.github.com/users/samzhang111/orgs", "repos_url": "https://api.github.com/users/samzhang111/repos", "events_url": "https://api.github.com/users/samzhang111/events{/privacy}", "received_events_url": "https://api.github.com/users/samzhang111/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-24T04:03:50Z", "updated_at": "2020-04-29T04:30:44Z", "closed_at": "2020-04-29T04:30:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "This particular line: https://github.com/JohannesBuchner/imagehash/blob/master/imagehash/__init__.py#L249\r\n\r\ncan be replaced with ```np.asarray(image)```.\r\n\r\nTiming info for the original line:\r\n```118 ms \u00b1 148 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)```\r\n\r\nTiming for np.asarray:\r\n```89.6 \u00b5s \u00b1 97.9 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)```.\r\n\r\nThis is a significant speedup for the most expensive operation in the method. Even the wavelet decompositions and reconstructions for removing the lowest frequency take `18.4 ms \u00b1 285 \u00b5s` and `18.4 ms \u00b1 24.6 \u00b5s` respectively.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/53", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/53/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/53/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/53", "id": 226692693, "node_id": "MDU6SXNzdWUyMjY2OTI2OTM=", "number": 53, "title": "Getting completely different hashes of almost identical images", "user": {"login": "SthPhoenix", "id": 17834919, "node_id": "MDQ6VXNlcjE3ODM0OTE5", "avatar_url": "https://avatars0.githubusercontent.com/u/17834919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SthPhoenix", "html_url": "https://github.com/SthPhoenix", "followers_url": "https://api.github.com/users/SthPhoenix/followers", "following_url": "https://api.github.com/users/SthPhoenix/following{/other_user}", "gists_url": "https://api.github.com/users/SthPhoenix/gists{/gist_id}", "starred_url": "https://api.github.com/users/SthPhoenix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SthPhoenix/subscriptions", "organizations_url": "https://api.github.com/users/SthPhoenix/orgs", "repos_url": "https://api.github.com/users/SthPhoenix/repos", "events_url": "https://api.github.com/users/SthPhoenix/events{/privacy}", "received_events_url": "https://api.github.com/users/SthPhoenix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2017-05-05T21:09:48Z", "updated_at": "2020-04-29T04:34:11Z", "closed_at": "2020-04-29T04:34:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I'm trying to compare image unmodified, as taken by camera, and photoshopped image (tweaked histogram and a bit changed white balance) and get distances above `25` if using code as in examples:\r\n`hash = imagehash.phash(Image.open(path)) `\r\n\r\nBut if i modify code like this:\r\n```\r\nimg = cv2.imread(path)\r\nimg = Image.fromarray(img)\r\nhash = imagehash.phash(img)\r\n```\r\n\r\nI get distance of `0`\r\nLooks like it might be caused by different color spaces, or something like that. \r\nHope this info could help somebody.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/51", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/51/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/51/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/51", "id": 209298578, "node_id": "MDU6SXNzdWUyMDkyOTg1Nzg=", "number": 51, "title": "_binary_array_to_hex gives wrong value", "user": {"login": "djunzu", "id": 8784122, "node_id": "MDQ6VXNlcjg3ODQxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8784122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djunzu", "html_url": "https://github.com/djunzu", "followers_url": "https://api.github.com/users/djunzu/followers", "following_url": "https://api.github.com/users/djunzu/following{/other_user}", "gists_url": "https://api.github.com/users/djunzu/gists{/gist_id}", "starred_url": "https://api.github.com/users/djunzu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djunzu/subscriptions", "organizations_url": "https://api.github.com/users/djunzu/orgs", "repos_url": "https://api.github.com/users/djunzu/repos", "events_url": "https://api.github.com/users/djunzu/events{/privacy}", "received_events_url": "https://api.github.com/users/djunzu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-02-21T22:53:59Z", "updated_at": "2017-12-07T00:20:40Z", "closed_at": "2017-12-06T23:12:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Correct me if I am wrong, but `_binary_array_to_hex` gives wrong values.\r\n\r\n```python\r\nPython 2.7.13 (default, Feb 16 2017, 19:11:00) \r\n[GCC 5.3.0] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from PIL import Image\r\n>>> import imagehash\r\n>>> img = Image.open('sample_image.png')\r\n>>> ph = imagehash.phash(img)\r\n>>> bool_array = ph.hash.flatten()\r\n>>> bool_array\r\narray([ True, False, False,  True,  True,  True,  True, False, False,\r\n       False,  True,  True,  True,  True, False, False,  True,  True,\r\n       False, False, False, False, False,  True,  True,  True,  True,\r\n        True, False, False, False, False,  True,  True,  True,  True,\r\n       False, False, False, False,  True,  True, False, False, False,\r\n       False,  True,  True,  True,  True,  True, False, False,  True,\r\n        True,  True,  True,  True, False, False, False, False, False, False], dtype=bool)\r\n>>> bit_array = 1*bool_array\r\n>>> bit_array\r\narray([1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n       1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,\r\n       1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0])\r\n>>> bit_string = ''.join(str(b) for b in bit_array)\r\n>>> bit_string\r\n'1001111000111100110000011111000011110000110000111110011111000000'\r\n>>> int(bit_string, 2)\r\n11402201597170935744L\r\n>>> hex(int(bit_string, 2))\r\n'0x9e3cc1f0f0c3e7c0L' # This is the expected hex value for the given bit array (phash)\r\n>>> str(ph)\r\n'793c830f0fc3e703' # and here is the actual value.\r\n```\r\n\r\nIf I made no mistake, let me know and I will submit a PR.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/45", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/45/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/45/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/45", "id": 204124231, "node_id": "MDU6SXNzdWUyMDQxMjQyMzE=", "number": 45, "title": "Small images on whash", "user": {"login": "ChristopherGondek", "id": 22873925, "node_id": "MDQ6VXNlcjIyODczOTI1", "avatar_url": "https://avatars0.githubusercontent.com/u/22873925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChristopherGondek", "html_url": "https://github.com/ChristopherGondek", "followers_url": "https://api.github.com/users/ChristopherGondek/followers", "following_url": "https://api.github.com/users/ChristopherGondek/following{/other_user}", "gists_url": "https://api.github.com/users/ChristopherGondek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChristopherGondek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChristopherGondek/subscriptions", "organizations_url": "https://api.github.com/users/ChristopherGondek/orgs", "repos_url": "https://api.github.com/users/ChristopherGondek/repos", "events_url": "https://api.github.com/users/ChristopherGondek/events{/privacy}", "received_events_url": "https://api.github.com/users/ChristopherGondek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-01-30T20:44:09Z", "updated_at": "2017-02-02T16:12:12Z", "closed_at": "2017-02-02T16:11:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "If whash(image, hash_size = 8, image_scale = None, mode = 'haar', remove_max_haar_ll = True) is called on a very small image it gives an \"AssertionError: hash_size in a wrong range\".\r\nThis is hard to track down, since called with default parameter values and the docstring states:\r\n\r\n@hash_size must be a power of 2 and less than @image_scale.\r\n@image_scale must be power of 2 and less than image size. By default is equal to max power of 2 for an input image.\r\n\r\nI suggest a different AssertionError message for small images and \"image_scale is None\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/44", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/44/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/44/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/44", "id": 199500146, "node_id": "MDU6SXNzdWUxOTk1MDAxNDY=", "number": 44, "title": "Why intentionally shorten hash value of __hash__() of ImageHash class?", "user": {"login": "palmchou", "id": 6814906, "node_id": "MDQ6VXNlcjY4MTQ5MDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/6814906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palmchou", "html_url": "https://github.com/palmchou", "followers_url": "https://api.github.com/users/palmchou/followers", "following_url": "https://api.github.com/users/palmchou/following{/other_user}", "gists_url": "https://api.github.com/users/palmchou/gists{/gist_id}", "starred_url": "https://api.github.com/users/palmchou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palmchou/subscriptions", "organizations_url": "https://api.github.com/users/palmchou/orgs", "repos_url": "https://api.github.com/users/palmchou/repos", "events_url": "https://api.github.com/users/palmchou/events{/privacy}", "received_events_url": "https://api.github.com/users/palmchou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-09T08:38:28Z", "updated_at": "2020-04-29T04:34:29Z", "closed_at": "2020-04-29T04:34:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like the current implementation of \\_\\_hash__(): of ImageHash class divides the internal 64-bit hash value into several 8-bit values, then adds up the computed values from those 8-bit hash values.\r\n\r\nThe question is why doing so? It will make '0000ffff0000eeee' and 'ffff0000eeee0000' return the same hash value and lead to collision.\r\n```\r\nIn [61]: hash(imagehash.hex_to_hash('0000ffff0000eeee'))\r\nOut[61]: 986\r\n\r\nIn [62]: hash(imagehash.hex_to_hash('ffff0000eeee0000'))\r\nOut[62]: 986\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/43", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/43/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/43/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/43", "id": 197755807, "node_id": "MDU6SXNzdWUxOTc3NTU4MDc=", "number": 43, "title": "What is 'six' in find_similar_images.py", "user": {"login": "kyle-pena-nlp", "id": 10033523, "node_id": "MDQ6VXNlcjEwMDMzNTIz", "avatar_url": "https://avatars1.githubusercontent.com/u/10033523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyle-pena-nlp", "html_url": "https://github.com/kyle-pena-nlp", "followers_url": "https://api.github.com/users/kyle-pena-nlp/followers", "following_url": "https://api.github.com/users/kyle-pena-nlp/following{/other_user}", "gists_url": "https://api.github.com/users/kyle-pena-nlp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyle-pena-nlp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyle-pena-nlp/subscriptions", "organizations_url": "https://api.github.com/users/kyle-pena-nlp/orgs", "repos_url": "https://api.github.com/users/kyle-pena-nlp/repos", "events_url": "https://api.github.com/users/kyle-pena-nlp/events{/privacy}", "received_events_url": "https://api.github.com/users/kyle-pena-nlp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-27T20:47:55Z", "updated_at": "2017-01-06T17:00:06Z", "closed_at": "2016-12-28T12:03:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Shouldn't the line containing 'six' instead read 'images.iteritems()'?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/42", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/42/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/42/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/42", "id": 197607085, "node_id": "MDU6SXNzdWUxOTc2MDcwODU=", "number": 42, "title": "Note about Greyscale?", "user": {"login": "RONNCC", "id": 1313566, "node_id": "MDQ6VXNlcjEzMTM1NjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1313566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RONNCC", "html_url": "https://github.com/RONNCC", "followers_url": "https://api.github.com/users/RONNCC/followers", "following_url": "https://api.github.com/users/RONNCC/following{/other_user}", "gists_url": "https://api.github.com/users/RONNCC/gists{/gist_id}", "starred_url": "https://api.github.com/users/RONNCC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RONNCC/subscriptions", "organizations_url": "https://api.github.com/users/RONNCC/orgs", "repos_url": "https://api.github.com/users/RONNCC/repos", "events_url": "https://api.github.com/users/RONNCC/events{/privacy}", "received_events_url": "https://api.github.com/users/RONNCC/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-26T17:31:05Z", "updated_at": "2020-04-29T05:39:20Z", "closed_at": "2020-04-29T04:38:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to add a note that it computes the hash on the greyscale rather than all 3/4 channels of an RGB/RGBA? -- I didn't realize that till later ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/40", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/40/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/40/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/40", "id": 196874135, "node_id": "MDU6SXNzdWUxOTY4NzQxMzU=", "number": 40, "title": "Can not install on Ubuntu ", "user": {"login": "k0fi", "id": 3398979, "node_id": "MDQ6VXNlcjMzOTg5Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3398979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k0fi", "html_url": "https://github.com/k0fi", "followers_url": "https://api.github.com/users/k0fi/followers", "following_url": "https://api.github.com/users/k0fi/following{/other_user}", "gists_url": "https://api.github.com/users/k0fi/gists{/gist_id}", "starred_url": "https://api.github.com/users/k0fi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k0fi/subscriptions", "organizations_url": "https://api.github.com/users/k0fi/orgs", "repos_url": "https://api.github.com/users/k0fi/repos", "events_url": "https://api.github.com/users/k0fi/events{/privacy}", "received_events_url": "https://api.github.com/users/k0fi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-21T08:32:21Z", "updated_at": "2020-04-29T04:38:29Z", "closed_at": "2020-04-29T04:38:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to install imagehash on Ubuntu 14.04 using a blank virtualenv running python 2.7 and pip.\r\nFirst it complained that numpy not installed. After that I tried again and got this:\r\n\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"<string>\", line 1, in <module>\r\n\r\n  File \"/home/pc/.testenv/build/scipy/setup.py\", line 415, in <module>\r\n\r\n    setup_package()\r\n\r\n  File \"/home/pc/.testenv/build/scipy/setup.py\", line 411, in setup_package\r\n\r\n    setup(**metadata)\r\n\r\n  File \"/home/pc/.testenv/local/lib/python2.7/site-packages/numpy/distutils/core.py\", line 135, in setup\r\n\r\n    config = configuration()\r\n\r\n  File \"/home/pc/.testenv/build/scipy/setup.py\", line 335, in configuration\r\n\r\n    config.add_subpackage('scipy')\r\n\r\n  File \"/home/pc/.testenv/local/lib/python2.7/site-packages/numpy/distutils/misc_util.py\", line 1000, in add_subpackage\r\n\r\n    caller_level = 2)\r\n\r\n  File \"/home/pc/.testenv/local/lib/python2.7/site-packages/numpy/distutils/misc_util.py\", line 969, in get_subpackage\r\n\r\n    caller_level = caller_level + 1)\r\n\r\n  File \"/home/pc/.testenv/local/lib/python2.7/site-packages/numpy/distutils/misc_util.py\", line 906, in _get_configuration_from_setup_py\r\n\r\n    config = setup_module.configuration(*args)\r\n\r\n  File \"scipy/setup.py\", line 15, in configuration\r\n\r\n    config.add_subpackage('linalg')\r\n\r\n  File \"/home/pc/.testenv/local/lib/python2.7/site-packages/numpy/distutils/misc_util.py\", line 1000, in add_subpackage\r\n\r\n    caller_level = 2)\r\n\r\n  File \"/home/pc/.testenv/local/lib/python2.7/site-packages/numpy/distutils/misc_util.py\", line 969, in get_subpackage\r\n\r\n    caller_level = caller_level + 1)\r\n\r\n  File \"/home/pc/.testenv/local/lib/python2.7/site-packages/numpy/distutils/misc_util.py\", line 906, in _get_configuration_from_setup_py\r\n\r\n    config = setup_module.configuration(*args)\r\n\r\n  File \"scipy/linalg/setup.py\", line 20, in configuration\r\n\r\n    raise NotFoundError('no lapack/blas resources found')\r\n\r\nnumpy.distutils.system_info.NotFoundError: no lapack/blas resources found\r\n\r\n----------------------------------------\r\nCleaning up...\r\nCommand /home/pc/.testenv/bin/python -c \"import setuptools, tokenize;__file__='/home/pc/.testenv/build/scipy/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /tmp/pip-AQ6kBT-record/install-record.txt --single-version-externally-managed --compile --install-headers /home/pc/.testenv/include/site/python2.7 failed with error code 1 in /home/pc/.testenv/build/scipy\r\nStoring debug log for failure in /home/pc/.pip/pip.log\r\n\r\n```\r\n\r\nHow can I fix this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/39", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/39/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/39/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/39", "id": 194785108, "node_id": "MDU6SXNzdWUxOTQ3ODUxMDg=", "number": 39, "title": "Unable to install the library \"--single-version-externally-managed --compile\" failed with error code 1\"", "user": {"login": "dance2die", "id": 8465237, "node_id": "MDQ6VXNlcjg0NjUyMzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8465237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dance2die", "html_url": "https://github.com/dance2die", "followers_url": "https://api.github.com/users/dance2die/followers", "following_url": "https://api.github.com/users/dance2die/following{/other_user}", "gists_url": "https://api.github.com/users/dance2die/gists{/gist_id}", "starred_url": "https://api.github.com/users/dance2die/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dance2die/subscriptions", "organizations_url": "https://api.github.com/users/dance2die/orgs", "repos_url": "https://api.github.com/users/dance2die/repos", "events_url": "https://api.github.com/users/dance2die/events{/privacy}", "received_events_url": "https://api.github.com/users/dance2die/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-12-10T18:29:42Z", "updated_at": "2019-03-31T09:25:21Z", "closed_at": "2016-12-10T19:52:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "**OS**: Windows 10\r\n**Python Version:** 3.5.0\r\n**Pip Version**: 9.0.1\r\n\r\nI am getting following error message while trying to install (`pip install ImageHash`) the library.\r\n\r\n\tCommand \"c:\\misc\\python\\python35-32\\python.exe -u -c \"import setuptools, tokenize;__file__='C:\\\\Users\\\\DANCE2~1\\\\AppData\\\\Local\\\\Temp\\\\pip-build-otq1zs_f\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record C:\\Users\\DANCE2~1\\AppData\\Local\\Temp\\pip-ei4og5fl-record\\install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in C:\\Users\\DANCE2~1\\AppData\\Local\\Temp\\pip-build-otq1zs_f\\scipy\\\r\n\r\n\r\nHere is the full message. Let me know should you require other information.\r\n\r\n\tc:\\Users\\dance2die>pip install ImageHash\r\n\tCollecting ImageHash\r\n\t  Using cached ImageHash-3.1.tar.gz\r\n\tRequirement already satisfied: numpy in c:\\misc\\python\\python35-32\\lib\\site-packages (from ImageHash)\r\n\tCollecting scipy (from ImageHash)\r\n\t  Using cached scipy-0.18.1.tar.gz\r\n\tCollecting pillow (from ImageHash)\r\n\t  Using cached Pillow-3.4.2-cp35-cp35m-win32.whl\r\n\tCollecting PyWavelets (from ImageHash)\r\n\t  Using cached PyWavelets-0.5.1-cp35-none-win32.whl\r\n\tInstalling collected packages: scipy, pillow, PyWavelets, ImageHash\r\n\t  Running setup.py install for scipy ... error\r\n\t\tComplete output from command c:\\misc\\python\\python35-32\\python.exe -u -c \"import setuptools, tokenize;__file__='C:\\\\Users\\\\DANCE2~1\\\\AppData\\\\Local\\\\Temp\\\\pip-build-otq1zs_f\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record C:\\Users\\DANCE2~1\\AppData\\Local\\Temp\\pip-ei4og5fl-record\\install-record.txt --single-version-externally-managed --compile:\r\n\r\n\t\tNote: if you need reliable uninstall behavior, then install\r\n\t\twith pip instead of using `setup.py install`:\r\n\r\n\t\t  - `pip install .`       (from a git repo or downloaded source\r\n\t\t\t\t\t\t\t\t   release)\r\n\t\t  - `pip install scipy`   (last SciPy release on PyPI)\r\n\r\n\r\n\t\tlapack_opt_info:\r\n\t\topenblas_lapack_info:\r\n\t\t  libraries openblas not found in ['c:\\\\misc\\\\python\\\\python35-32\\\\lib', 'C:\\\\', 'c:\\\\misc\\\\python\\\\python35-32\\\\libs']\r\n\t\t  NOT AVAILABLE\r\n\r\n\t\tlapack_mkl_info:\r\n\t\t  libraries mkl_rt not found in ['c:\\\\misc\\\\python\\\\python35-32\\\\lib', 'C:\\\\', 'c:\\\\misc\\\\python\\\\python35-32\\\\libs']\r\n\t\t  NOT AVAILABLE\r\n\r\n\t\tatlas_3_10_threads_info:\r\n\t\tSetting PTATLAS=ATLAS\r\n\t\tc:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\system_info.py:639: UserWarning: Specified path C:\\projects\\numpy-wheels\\windows-wheel-builder\\atlas-builds\\atlas-3.10.1-sse2-32\\lib is invalid.\r\n\t\t  warnings.warn('Specified path %s is invalid.' % d)\r\n\t\t<class 'numpy.distutils.system_info.atlas_3_10_threads_info'>\r\n\t\t  NOT AVAILABLE\r\n\r\n\t\tatlas_3_10_info:\r\n\t\t<class 'numpy.distutils.system_info.atlas_3_10_info'>\r\n\t\t  NOT AVAILABLE\r\n\r\n\t\tatlas_threads_info:\r\n\t\tSetting PTATLAS=ATLAS\r\n\t\t<class 'numpy.distutils.system_info.atlas_threads_info'>\r\n\t\t  NOT AVAILABLE\r\n\r\n\t\tatlas_info:\r\n\t\t<class 'numpy.distutils.system_info.atlas_info'>\r\n\t\t  NOT AVAILABLE\r\n\r\n\t\tc:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\system_info.py:1532: UserWarning:\r\n\t\t\tAtlas (http://math-atlas.sourceforge.net/) libraries not found.\r\n\t\t\tDirectories to search for the libraries can be specified in the\r\n\t\t\tnumpy/distutils/site.cfg file (section [atlas]) or by setting\r\n\t\t\tthe ATLAS environment variable.\r\n\t\t  warnings.warn(AtlasNotFoundError.__doc__)\r\n\t\tlapack_info:\r\n\t\t  libraries lapack not found in ['c:\\\\misc\\\\python\\\\python35-32\\\\lib', 'C:\\\\', 'c:\\\\misc\\\\python\\\\python35-32\\\\libs']\r\n\t\t  NOT AVAILABLE\r\n\r\n\t\tc:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\system_info.py:1543: UserWarning:\r\n\t\t\tLapack (http://www.netlib.org/lapack/) libraries not found.\r\n\t\t\tDirectories to search for the libraries can be specified in the\r\n\t\t\tnumpy/distutils/site.cfg file (section [lapack]) or by setting\r\n\t\t\tthe LAPACK environment variable.\r\n\t\t  warnings.warn(LapackNotFoundError.__doc__)\r\n\t\tlapack_src_info:\r\n\t\t  NOT AVAILABLE\r\n\r\n\t\tc:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\system_info.py:1546: UserWarning:\r\n\t\t\tLapack (http://www.netlib.org/lapack/) sources not found.\r\n\t\t\tDirectories to search for the sources can be specified in the\r\n\t\t\tnumpy/distutils/site.cfg file (section [lapack_src]) or by setting\r\n\t\t\tthe LAPACK_SRC environment variable.\r\n\t\t  warnings.warn(LapackSrcNotFoundError.__doc__)\r\n\t\t  NOT AVAILABLE\r\n\r\n\t\tRunning from scipy source directory.\r\n\t\tTraceback (most recent call last):\r\n\t\t  File \"<string>\", line 1, in <module>\r\n\t\t  File \"C:\\Users\\DANCE2~1\\AppData\\Local\\Temp\\pip-build-otq1zs_f\\scipy\\setup.py\", line 415, in <module>\r\n\t\t\tsetup_package()\r\n\t\t  File \"C:\\Users\\DANCE2~1\\AppData\\Local\\Temp\\pip-build-otq1zs_f\\scipy\\setup.py\", line 411, in setup_package\r\n\t\t\tsetup(**metadata)\r\n\t\t  File \"c:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\core.py\", line 135, in setup\r\n\t\t\tconfig = configuration()\r\n\t\t  File \"C:\\Users\\DANCE2~1\\AppData\\Local\\Temp\\pip-build-otq1zs_f\\scipy\\setup.py\", line 335, in configuration\r\n\t\t\tconfig.add_subpackage('scipy')\r\n\t\t  File \"c:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\misc_util.py\", line 1000, in add_subpackage\r\n\t\t\tcaller_level = 2)\r\n\t\t  File \"c:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\misc_util.py\", line 969, in get_subpackage\r\n\t\t\tcaller_level = caller_level + 1)\r\n\t\t  File \"c:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\misc_util.py\", line 906, in _get_configuration_from_setup_py\r\n\t\t\tconfig = setup_module.configuration(*args)\r\n\t\t  File \"scipy\\setup.py\", line 15, in configuration\r\n\t\t\tconfig.add_subpackage('linalg')\r\n\t\t  File \"c:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\misc_util.py\", line 1000, in add_subpackage\r\n\t\t\tcaller_level = 2)\r\n\t\t  File \"c:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\misc_util.py\", line 969, in get_subpackage\r\n\t\t\tcaller_level = caller_level + 1)\r\n\t\t  File \"c:\\misc\\python\\python35-32\\lib\\site-packages\\numpy\\distutils\\misc_util.py\", line 906, in _get_configuration_from_setup_py\r\n\t\t\tconfig = setup_module.configuration(*args)\r\n\t\t  File \"scipy\\linalg\\setup.py\", line 20, in configuration\r\n\t\t\traise NotFoundError('no lapack/blas resources found')\r\n\t\tnumpy.distutils.system_info.NotFoundError: no lapack/blas resources found\r\n\r\n\t\t----------------------------------------\r\n\tCommand \"c:\\misc\\python\\python35-32\\python.exe -u -c \"import setuptools, tokenize;__file__='C:\\\\Users\\\\DANCE2~1\\\\AppData\\\\Local\\\\Temp\\\\pip-build-otq1zs_f\\\\scipy\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record C:\\Users\\DANCE2~1\\AppData\\Local\\Temp\\pip-ei4og5fl-record\\install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in C:\\Users\\DANCE2~1\\AppData\\Local\\Temp\\pip-build-otq1zs_f\\scipy\\\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/34", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/34/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/34/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/34", "id": 185742722, "node_id": "MDU6SXNzdWUxODU3NDI3MjI=", "number": 34, "title": "Create a gitter.im community", "user": {"login": "bjlittle", "id": 2051656, "node_id": "MDQ6VXNlcjIwNTE2NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2051656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjlittle", "html_url": "https://github.com/bjlittle", "followers_url": "https://api.github.com/users/bjlittle/followers", "following_url": "https://api.github.com/users/bjlittle/following{/other_user}", "gists_url": "https://api.github.com/users/bjlittle/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjlittle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjlittle/subscriptions", "organizations_url": "https://api.github.com/users/bjlittle/orgs", "repos_url": "https://api.github.com/users/bjlittle/repos", "events_url": "https://api.github.com/users/bjlittle/events{/privacy}", "received_events_url": "https://api.github.com/users/bjlittle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-10-27T18:17:03Z", "updated_at": "2018-07-11T02:36:42Z", "closed_at": "2018-07-11T02:36:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "@JohannesBuchner Would you consider fostering a community around https://gitter.im/ ?\n\nIt's easy to create and manage a community and also associate it with this repo. It might prove very useful for collaboration, rather than chatter on PRs or issues ...\n\nI've already checked and there isn't an existing community called `imagehash` ... I'd recommend grabbing it whilst you can, and more importantly if you do, please invite me to join!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/32", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/32/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/32/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/32", "id": 184731720, "node_id": "MDU6SXNzdWUxODQ3MzE3MjA=", "number": 32, "title": "pillow Image.resize", "user": {"login": "bjlittle", "id": 2051656, "node_id": "MDQ6VXNlcjIwNTE2NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2051656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjlittle", "html_url": "https://github.com/bjlittle", "followers_url": "https://api.github.com/users/bjlittle/followers", "following_url": "https://api.github.com/users/bjlittle/following{/other_user}", "gists_url": "https://api.github.com/users/bjlittle/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjlittle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjlittle/subscriptions", "organizations_url": "https://api.github.com/users/bjlittle/orgs", "repos_url": "https://api.github.com/users/bjlittle/repos", "events_url": "https://api.github.com/users/bjlittle/events{/privacy}", "received_events_url": "https://api.github.com/users/bjlittle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-24T01:36:23Z", "updated_at": "2020-04-29T04:39:04Z", "closed_at": "2020-04-29T04:39:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Note that, there appears to be a change in the `pillow` implementation of the `Image.resize` method, between versions `3.3.1` and `3.4.0+` such that (some) images will result in subtly different image-hash values.\n\nI've seen this using `imagehash.phash` and I suspect that it will extent to all algorithms that use `Image.resize`.\n\nThis difference is independent of using `Image.ANTIALIAS`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/30", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/30/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/30/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/30", "id": 177676442, "node_id": "MDU6SXNzdWUxNzc2NzY0NDI=", "number": 30, "title": "Version 3 not in pypi repo", "user": {"login": "PAK90", "id": 1844422, "node_id": "MDQ6VXNlcjE4NDQ0MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1844422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PAK90", "html_url": "https://github.com/PAK90", "followers_url": "https://api.github.com/users/PAK90/followers", "following_url": "https://api.github.com/users/PAK90/following{/other_user}", "gists_url": "https://api.github.com/users/PAK90/gists{/gist_id}", "starred_url": "https://api.github.com/users/PAK90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PAK90/subscriptions", "organizations_url": "https://api.github.com/users/PAK90/orgs", "repos_url": "https://api.github.com/users/PAK90/repos", "events_url": "https://api.github.com/users/PAK90/events{/privacy}", "received_events_url": "https://api.github.com/users/PAK90/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2016-09-18T20:54:00Z", "updated_at": "2016-12-26T02:04:00Z", "closed_at": "2016-12-26T02:04:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if this was the right place, but I want to upgrade my imagehash version and doing `pip install imagehash --upgrade` still gives me the 2.2 version, presumably because [the pypi page hasn't been updated with v3](https://pypi.python.org/pypi/ImageHash). \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/28", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/28/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/28/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/28", "id": 174516515, "node_id": "MDU6SXNzdWUxNzQ1MTY1MTU=", "number": 28, "title": "dhash computes difference vertically, not horizontally", "user": {"login": "JohannesBuchner", "id": 51015, "node_id": "MDQ6VXNlcjUxMDE1", "avatar_url": "https://avatars2.githubusercontent.com/u/51015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohannesBuchner", "html_url": "https://github.com/JohannesBuchner", "followers_url": "https://api.github.com/users/JohannesBuchner/followers", "following_url": "https://api.github.com/users/JohannesBuchner/following{/other_user}", "gists_url": "https://api.github.com/users/JohannesBuchner/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohannesBuchner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohannesBuchner/subscriptions", "organizations_url": "https://api.github.com/users/JohannesBuchner/orgs", "repos_url": "https://api.github.com/users/JohannesBuchner/repos", "events_url": "https://api.github.com/users/JohannesBuchner/events{/privacy}", "received_events_url": "https://api.github.com/users/JohannesBuchner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-01T12:58:45Z", "updated_at": "2016-09-19T01:11:58Z", "closed_at": "2016-09-19T01:11:58Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The dhash function computes the pixel difference between vertically adjacent pixels.\nBut if we follow http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html the difference should be horizontal.\nThis might make a difference for e.g. images of landscapes.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/25", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/25/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/25/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/25", "id": 163520714, "node_id": "MDU6SXNzdWUxNjM1MjA3MTQ=", "number": 25, "title": "Memory leak in wavelet hash", "user": {"login": "gtoonstra", "id": 441978, "node_id": "MDQ6VXNlcjQ0MTk3OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/441978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gtoonstra", "html_url": "https://github.com/gtoonstra", "followers_url": "https://api.github.com/users/gtoonstra/followers", "following_url": "https://api.github.com/users/gtoonstra/following{/other_user}", "gists_url": "https://api.github.com/users/gtoonstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/gtoonstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gtoonstra/subscriptions", "organizations_url": "https://api.github.com/users/gtoonstra/orgs", "repos_url": "https://api.github.com/users/gtoonstra/repos", "events_url": "https://api.github.com/users/gtoonstra/events{/privacy}", "received_events_url": "https://api.github.com/users/gtoonstra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-07-02T14:26:59Z", "updated_at": "2016-07-08T15:13:40Z", "closed_at": "2016-07-08T15:13:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looks like wavelet hash implementation has a memory leak. I'm processing 600k images and memory keeps going up. When using the other hash implementation, memory usage does not accumulate.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/22", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/22/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/22/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/22", "id": 155214948, "node_id": "MDU6SXNzdWUxNTUyMTQ5NDg=", "number": 22, "title": "Hash comparison performance", "user": {"login": "mdevans", "id": 5337760, "node_id": "MDQ6VXNlcjUzMzc3NjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5337760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdevans", "html_url": "https://github.com/mdevans", "followers_url": "https://api.github.com/users/mdevans/followers", "following_url": "https://api.github.com/users/mdevans/following{/other_user}", "gists_url": "https://api.github.com/users/mdevans/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdevans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdevans/subscriptions", "organizations_url": "https://api.github.com/users/mdevans/orgs", "repos_url": "https://api.github.com/users/mdevans/repos", "events_url": "https://api.github.com/users/mdevans/events{/privacy}", "received_events_url": "https://api.github.com/users/mdevans/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-05-17T09:30:43Z", "updated_at": "2016-12-11T22:43:54Z", "closed_at": "2016-06-28T08:15:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Johannes - thanks for an elegant implementation of these perceptual hash algorithms.\n\nA performance enhancement suggestion for hash comparison (_sub_):  \n\nMy understanding is that:\n\nself.hash.flatten() != other.hash.flatten()\n\nwill do a boolean compare for each element in the hash array\n\nOptimising this via the clever bitCount() below could be useful when comparing large hash sets \nfrom: https://wiki.python.org/moin/BitManipulation\n\ndef bitCount(int_type):\n       count = 0\n       while(int_type):\n       int_type &= int_type - 1\n       count += 1\n       return(count)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/21", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/21/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/21/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/21", "id": 148873088, "node_id": "MDU6SXNzdWUxNDg4NzMwODg=", "number": 21, "title": "Using sizes other than 8", "user": {"login": "destrugter", "id": 2092138, "node_id": "MDQ6VXNlcjIwOTIxMzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2092138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/destrugter", "html_url": "https://github.com/destrugter", "followers_url": "https://api.github.com/users/destrugter/followers", "following_url": "https://api.github.com/users/destrugter/following{/other_user}", "gists_url": "https://api.github.com/users/destrugter/gists{/gist_id}", "starred_url": "https://api.github.com/users/destrugter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/destrugter/subscriptions", "organizations_url": "https://api.github.com/users/destrugter/orgs", "repos_url": "https://api.github.com/users/destrugter/repos", "events_url": "https://api.github.com/users/destrugter/events{/privacy}", "received_events_url": "https://api.github.com/users/destrugter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-16T17:36:21Z", "updated_at": "2016-04-16T18:24:38Z", "closed_at": "2016-04-16T18:24:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I love this project and am currently using it in one of mine. The thing is, you allow me to set a hash_size to something other than 8, but you won't let the person use the function hex_to_hash on the hex generated by using a size greater than 8. Am I doing something wrong, or was this an oversight?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/20", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/20/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/20/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/20", "id": 143064982, "node_id": "MDU6SXNzdWUxNDMwNjQ5ODI=", "number": 20, "title": "hex_to_hash doesn't work on >16 length hashes", "user": {"login": "ritu1337", "id": 12263752, "node_id": "MDQ6VXNlcjEyMjYzNzUy", "avatar_url": "https://avatars3.githubusercontent.com/u/12263752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ritu1337", "html_url": "https://github.com/ritu1337", "followers_url": "https://api.github.com/users/ritu1337/followers", "following_url": "https://api.github.com/users/ritu1337/following{/other_user}", "gists_url": "https://api.github.com/users/ritu1337/gists{/gist_id}", "starred_url": "https://api.github.com/users/ritu1337/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ritu1337/subscriptions", "organizations_url": "https://api.github.com/users/ritu1337/orgs", "repos_url": "https://api.github.com/users/ritu1337/repos", "events_url": "https://api.github.com/users/ritu1337/events{/privacy}", "received_events_url": "https://api.github.com/users/ritu1337/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-23T20:01:39Z", "updated_at": "2016-04-13T03:55:44Z", "closed_at": "2016-04-13T03:55:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to use hex_to_hash on 64 length hashes, however it only works on the 16 length hashes.\n\nI've tried to edit the code, but the hash wouldn't be accurate.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/19", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/19/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/19/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/19", "id": 138261368, "node_id": "MDU6SXNzdWUxMzgyNjEzNjg=", "number": 19, "title": "Maximum possible difference", "user": {"login": "shanemcquillan", "id": 1151334, "node_id": "MDQ6VXNlcjExNTEzMzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1151334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shanemcquillan", "html_url": "https://github.com/shanemcquillan", "followers_url": "https://api.github.com/users/shanemcquillan/followers", "following_url": "https://api.github.com/users/shanemcquillan/following{/other_user}", "gists_url": "https://api.github.com/users/shanemcquillan/gists{/gist_id}", "starred_url": "https://api.github.com/users/shanemcquillan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shanemcquillan/subscriptions", "organizations_url": "https://api.github.com/users/shanemcquillan/orgs", "repos_url": "https://api.github.com/users/shanemcquillan/repos", "events_url": "https://api.github.com/users/shanemcquillan/events{/privacy}", "received_events_url": "https://api.github.com/users/shanemcquillan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-03T18:35:50Z", "updated_at": "2016-03-03T18:47:30Z", "closed_at": "2016-03-03T18:47:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Johannes,\n\nThis is a quick question more than an issue, though it would be helpful for you to add it to your docs. What is the maximum possible difference between two images using the hashing approach?\n\nmax(hash1 - hash2) = ?\n\nI'm interested in the normalizing the value to give a value between 0 and 1, though this may not make sense. I'd be interested to know your thoughts.\n\nThanks,\n\nShane\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/18", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/18/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/18/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/18", "id": 119213572, "node_id": "MDU6SXNzdWUxMTkyMTM1NzI=", "number": 18, "title": "how to encode an <class 'imagehash.ImageHash'> object into mongodb?", "user": {"login": "chuckytah", "id": 15786721, "node_id": "MDQ6VXNlcjE1Nzg2NzIx", "avatar_url": "https://avatars2.githubusercontent.com/u/15786721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chuckytah", "html_url": "https://github.com/chuckytah", "followers_url": "https://api.github.com/users/chuckytah/followers", "following_url": "https://api.github.com/users/chuckytah/following{/other_user}", "gists_url": "https://api.github.com/users/chuckytah/gists{/gist_id}", "starred_url": "https://api.github.com/users/chuckytah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chuckytah/subscriptions", "organizations_url": "https://api.github.com/users/chuckytah/orgs", "repos_url": "https://api.github.com/users/chuckytah/repos", "events_url": "https://api.github.com/users/chuckytah/events{/privacy}", "received_events_url": "https://api.github.com/users/chuckytah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-27T15:35:31Z", "updated_at": "2016-06-28T08:11:34Z", "closed_at": "2016-06-28T08:11:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \n\nI am new to python/pymongo and I am in trouble when I try to save imagehash infos to a mongodb database...  \n\nFile \"/usr/local/lib/python2.7/site-packages/pymongo/collection.py\", line 409, in insert\n    gen(), check_keys, self.uuid_subtype, client)\nbson.errors.InvalidDocument: Cannot encode object: array([[False,  True,  True,  True,  True, False,  True,  True],\n       [ True, False, False, False,  True,  True, False, False],\n       [False, False,  True, False, False,  True,  True, False],\n       [False,  True,  True,  True,  True,  True,  True,  True],\n       [ True,  True,  True,  True,  True,  True,  True,  True],\n       [ True,  True, False, False, False, False, False, False],\n       [False, False, False, False, False, False, False,  True],\n       [ True,  True,  True,  True,  True,  True, False, False]], dtype=bool)\n\nSorry if it is a dumb question, but could you help me solve this? :/\n\nthanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/17", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/17/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/17/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/17", "id": 88620930, "node_id": "MDU6SXNzdWU4ODYyMDkzMA==", "number": 17, "title": "PHash() is not throwing out high-frequency image data.", "user": {"login": "wyverntiger", "id": 8682791, "node_id": "MDQ6VXNlcjg2ODI3OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/8682791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wyverntiger", "html_url": "https://github.com/wyverntiger", "followers_url": "https://api.github.com/users/wyverntiger/followers", "following_url": "https://api.github.com/users/wyverntiger/following{/other_user}", "gists_url": "https://api.github.com/users/wyverntiger/gists{/gist_id}", "starred_url": "https://api.github.com/users/wyverntiger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wyverntiger/subscriptions", "organizations_url": "https://api.github.com/users/wyverntiger/orgs", "repos_url": "https://api.github.com/users/wyverntiger/repos", "events_url": "https://api.github.com/users/wyverntiger/events{/privacy}", "received_events_url": "https://api.github.com/users/wyverntiger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-06-16T05:15:43Z", "updated_at": "2015-06-16T17:03:15Z", "closed_at": "2015-06-16T13:29:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "As of commit:  https://github.com/JohannesBuchner/imagehash/commit/481148afa79eca6c80b853ecccabc128d7cef514\n\nThe phash() and phash_simple() algorithms are no longer tossing out high-frequency image data.\n\nThe rest of this issue description is the same as the comment I wrote on that commit:\n\n---\n\nOn average_hash and dhash the hash_size parameter is used to indicate how small to make the sub-sampled image, which directly becomes the number of bits in the resulting hash value.\n\nBut phash (and phash_simple) there's two steps of subsampling, not one. The first subsample is when we reduce the image, and the second subsample is when we select which DCT coefficients to use. The second subsample determines the number of bits in the resulting hash value.\n\nThese two steps really need to be done at different sizes. The whole reason phash works is because it tosses out high-frequency image data, that which is most likely to be different in similar-looking images, and it keeps only the low-frequency data. This happened in the past because we downsized the image to 32x32 pixels (subsample 1) which generated 32x32 DCT coefficients, and then we kept only 8x8 of the DCT coefficients (subsample 2).\n\nBut after this commit, the algorithm is keeping ALL the DCT coefficients. It downsizes to 8x8 pixels and keeps all 8x8 coefficients. It no longer throws out high-frequency data.\n\nThis means that similar images that would have hashed to similar phash values are now much more likely to differ by more bits in their phash values, because that high-frequency data is being included.\n\n(You can also easily show that phash_simple is returning fewer bits than expected because it's basically running off the edge of the dct matrix)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/16", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/16/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/16/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/16", "id": 87333508, "node_id": "MDU6SXNzdWU4NzMzMzUwOA==", "number": 16, "title": "hex_to_hash only works on 16 char hashes", "user": {"login": "mhradilek", "id": 49687, "node_id": "MDQ6VXNlcjQ5Njg3", "avatar_url": "https://avatars2.githubusercontent.com/u/49687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhradilek", "html_url": "https://github.com/mhradilek", "followers_url": "https://api.github.com/users/mhradilek/followers", "following_url": "https://api.github.com/users/mhradilek/following{/other_user}", "gists_url": "https://api.github.com/users/mhradilek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhradilek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhradilek/subscriptions", "organizations_url": "https://api.github.com/users/mhradilek/orgs", "repos_url": "https://api.github.com/users/mhradilek/repos", "events_url": "https://api.github.com/users/mhradilek/events{/privacy}", "received_events_url": "https://api.github.com/users/mhradilek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-11T12:42:53Z", "updated_at": "2015-06-13T14:29:37Z", "closed_at": "2015-06-13T14:29:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "This works as expected:\n\n``` python\nh8 = imagehash.average_hash(img, hash_size=8)\nprint(h8)\n>> 6d39bc91d0d0f131\nimagehash.hex_to_hash(\"6d39bc91d0d0f131\")\n>> array([[...\n```\n\nThis fails\n\n``` python\nh16 = imagehash.average_hash(img, hash_size=16)\nprint(h16)\n>> f33df33dc21bc297e29f7ace12c782e782e282f782f312f30273027f822f830f\nimagehash.hex_to_hash(\"f33df33dc21bc297e29f7ace12c782e782e282f782f312f30273027f822f830f'\")\n```\n\nwith traceback:\n\n```\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-24-9c753def512a> in <module>()\n----> 1 imagehash.hex_to_hash(\"f33df33dc21bc297e29f7ace12c782e782e282f782f312f30273027f822f830f'\")\n\n/home/mhradile/tests/distribution/Library/imaging/imagehash.pyc in hex_to_hash(hexstr)\n     84         l = []\n     85         if len(hexstr) != 16:\n---> 86                 raise ValueError('The hex string has the wrong length')\n     87         for i in range(8):\n     88                 h = hexstr[i*2:i*2+2]\n\nValueError: The hex string has the wrong length\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/15", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/15/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/15/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/15", "id": 85720807, "node_id": "MDU6SXNzdWU4NTcyMDgwNw==", "number": 15, "title": "AssertionError: ('ImageHashes must be of the same shape!', (64,), (8, 8))", "user": {"login": "whypro", "id": 2081494, "node_id": "MDQ6VXNlcjIwODE0OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2081494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whypro", "html_url": "https://github.com/whypro", "followers_url": "https://api.github.com/users/whypro/followers", "following_url": "https://api.github.com/users/whypro/following{/other_user}", "gists_url": "https://api.github.com/users/whypro/gists{/gist_id}", "starred_url": "https://api.github.com/users/whypro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whypro/subscriptions", "organizations_url": "https://api.github.com/users/whypro/orgs", "repos_url": "https://api.github.com/users/whypro/repos", "events_url": "https://api.github.com/users/whypro/events{/privacy}", "received_events_url": "https://api.github.com/users/whypro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-06-06T08:00:18Z", "updated_at": "2015-06-13T14:28:13Z", "closed_at": "2015-06-13T14:06:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to save the hex hash string to my database, and read it later. But after I create a ImageHash instance using the hex string by hex_to_hash() method, 'h2 - h1' raise an exception. I wonder if it is a bug of hex_to_hash() method? I have no idea about that. I'm not good at NumPy.  \n\n```\nfrom PIL import Image\nimport imagehash\n\ni1 = Image.open('1.jpg')\ni2 = Image.open('1.png')\n\nh1 = imagehash.dhash(i1)\nprint h1\n# d3b7cf4ebd183140\nh2 = imagehash.dhash(i2)\nprint h2\n# d3b7cf4ebd183140\n\nprint h2 - h1\n#0\n\nh3 = imagehash.hex_to_hash('d3b7cf4ebd183140')\nprint h3 - h2\n# Traceback (most recent call last):\n#   File \"<stdin>\", line 1, in <module>\n#   File \"/usr/lib/python2.7/site-packages/imagehash/__init__.py\", line 64, in __sub__\n#     assert self.hash.shape == other.hash.shape, ('ImageHashes must be of the same shape!', self.hash.shape, other.hash.shape)\n# AssertionError: ('ImageHashes must be of the same shape!', (64,), (8, 8))\n\nprint h3 - h1\n# Traceback (most recent call last):\n#   File \"<stdin>\", line 1, in <module>\n#   File \"/usr/lib/python2.7/site-packages/imagehash/__init__.py\", line 64, in __sub__\n#     assert self.hash.shape == other.hash.shape, ('ImageHashes must be of the same shape!', self.hash.shape, other.hash.shape)\n# AssertionError: ('ImageHashes must be of the same shape!', (64,), (8, 8))\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/13", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/13/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/13/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/13", "id": 82977169, "node_id": "MDU6SXNzdWU4Mjk3NzE2OQ==", "number": 13, "title": "phash() exhibits a strong bias for repetitive bit patterns", "user": {"login": "wyverntiger", "id": 8682791, "node_id": "MDQ6VXNlcjg2ODI3OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/8682791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wyverntiger", "html_url": "https://github.com/wyverntiger", "followers_url": "https://api.github.com/users/wyverntiger/followers", "following_url": "https://api.github.com/users/wyverntiger/following{/other_user}", "gists_url": "https://api.github.com/users/wyverntiger/gists{/gist_id}", "starred_url": "https://api.github.com/users/wyverntiger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wyverntiger/subscriptions", "organizations_url": "https://api.github.com/users/wyverntiger/orgs", "repos_url": "https://api.github.com/users/wyverntiger/repos", "events_url": "https://api.github.com/users/wyverntiger/events{/privacy}", "received_events_url": "https://api.github.com/users/wyverntiger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-31T02:54:41Z", "updated_at": "2015-06-13T14:27:57Z", "closed_at": "2015-06-13T14:06:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "The hashes generated by imagehash.phash() tend to exhibit strong bias for repetitive bit patterns, thus shrinking the space of plausable hash values to something much smaller than the full 64-bit space.\n- Pull request coming momentarily with my changes\n\nHere's an example:  I have a pile of 1442 test images.  I generated phashes for each and bucketed the results.  There were a number of hash values that identified more than one image.  Upon visual inspection most of the collided images didn't have much visual similarity.\n\n```\nf4f4f4f4f4f4f4f4    - 3 images\nf5f5f5f5f5f5f5f5    - 9 images\nfcfcfcfcfcfcfcf4    - 2 images\nfefefefefefefefe    - 2 images\n6c6c6c6c6c6c6c6c    - 2 images\n0101090505050501    - 2 images\nfcf8f8f8f8fcfcfc    - 2 images\n5555555555555555    - 3 images\n0303030303030303    - 9 images\n0101010101010101    - 6 images\n9c918404e6dec7c2    - 2 images\nf4d4f4fefefefafe    - 2 images\nfafafafafafafafa    - 2 images\nfcfcfcf4f4f4f4f4    - 3 images\n9dcdcdddcddcd9dc    - 2 images\nf4f4f4f4f4fcfcfc    - 4 images\nfcfcfcfcfcfcfcfc    - 9 images\n```\n\nNote the repetitive bit-pattern nature of all these hashes.\n\nI propose four changes to the imagehash code:\n## Change 0    -- fix binary_array_to_int()\n\nThe implementation takes a modulus where it shouldn't and returns mathematically wrong values. This change doesn't affect the output of the library in any way, it's only used in ImageHash.**hash**(), but it's a useful function for diagnostic reasons and there's no reason not to fix it.\n## Change 1-3  -- changes to the phash algorithm\n\n1: Use a bi-directional DCT, as per [1]\n\n2: Use the median of coefficients instead of the mean\n- as described at [2]\n- this is what phash.org's ph_dct_imagehash() does\n\n3: Use the upper-left 8x8 coefficients, instead of skipping the left-most column\n- This change begs more debate\n- David Starkweather wrote on [3] that you want to skip the first coefficient\n- phash.org's ph_dct_imagehash() skips both the left-most column AND the top-most row.  If I understand their code, they're only using 49 coefficients instead of 64 (or 63) coefficients.  Cite: [4]\n- I would argue only the top-left-most coefficient is the DC term, and skipping the entire column or row doesn't make any sense.  If you skip the DC term then you either have a wasted bit in your hash or you get to pick some 64th coefficient to fill it -- which makes you decide if you like the horizontal or vertical axis more.  But if you include the DC term it's only going to affect a single bit of the hash, and intuitively images with good visual similarity would correlate on their DC term as well as the frequency terms.\n\n[1] = http://stackoverflow.com/questions/15978468/using-the-scipy-dct-function-to-create-a-2d-dct-ii\n[2] = http://hackerlabs.org/blog/2012/07/30/organizing-photos-with-duplicate-and-similarity-checking/\n[3] = http://www.hackerfactor.com/blog/?/archives/432-Looks-Like-It.html\n[4] = (pHash.cpp:386)     CImg<float> subsec = dctImage.crop(1,1,8,8).unroll('x');;\n\nAfter implementing these changes, I re-ran my 1442 image files and had only one bucket with more than one image:\n\n```\n19b2664d98da7396    - 2 images\n```\n\nUpon inspection these images were nearly identical -- about a 1-degree camera rotation difference.\n\nPulling sample images from my library and looking for their closest phash neighbors did, of course, still yield some false positives, but in general the results empirically felt much more accurate.\n\nI also used a small set of images to do more detailed experiments to help justify each change.\n\nDetails below:\n## Experiment Driver Code\n\n```\nfrom PIL import Image\nimport imagehash\n\ndef PHash(filepath):\n  im    = Image.open(filepath)\n  ph    = imagehash.phash(im)\n  return ph\n\ndef HashToString(phash):\n  i     = imagehash.binary_array_to_int(phash.hash)\n  return '{:016x}({:02d})'.format(i, '{:b}'.format(i).count('1'))\n\ndef RunExperiment(hashes):\n  ''' Prints an N-by-N matrix comparing each hash value to each other hash value. '''\n  s       = ''\n  for y in range(len(hashes)):\n    s     += '\\n{}: '.format(y)\n    for x in range(len(hashes)):\n      s   += '  {:2d}'.format(hashes[y] - hashes[x])\n    s     +=  '    hash(on-bits)=' + HashToString(hashes[y])\n  print('Comparison matrix:\\n      ' + '   '.join([str(x) for x in range(len(hashes))]) + s)\n\nhashes  = (PHash('../phash1.jpeg'), PHash('../phash2.jpeg'), PHash('../phash3a.jpeg'), PHash('../phash3b.jpeg'))\nRunExperiment(hashes)\n```\n## Step 0:  Fix the binary_array_to_int() function\n\n```\ntestarray = np.array([1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1])\nlist(testarray).count(1)\n6\n```\n\nBefore:\n\n```\n'{:016b}'.format(binary_array_to_int(testarray))\n'0000000101100010'\n'{:016b}'.format(binary_array_to_int(testarray)).count('1')\n4\n```\n\nAfter:\n\n```\n'{:016b}'.format(binary_array_to_int(testarray))\n'1010000111000001'\n'{:016b}'.format(binary_array_to_int(testarray)).count('1')\n6\n```\n## Next:  Try to eliminate high levels of repetitive bit-patterns\n### Baseline: original implementation\n\n```\nComparison matrix:\n      0   1   2   3\n0:    0   0   7  10    hash(on-bits)=fefefefefefefefe(56)\n1:    0   0   7  10    hash(on-bits)=fefefefefefefefe(56)\n2:    7   7   0   3    hash(on-bits)=fefefefefed4f4f4(49)\n3:   10  10   3   0    hash(on-bits)=fefafafefed4f4d4(46)\n```\n\nVery compressed hash space, the majority of bits are set\n### Experiment 1:  use a bi-directional DCT\n\n```\nComparison matrix:\n      0   1   2   3\n0:    0  36  29  36    hash(on-bits)=61bdf66a81857efa(36)\n1:   36   0  31  34    hash(on-bits)=af42f41ce32e30c7(32)\n2:   29  31   0  21    hash(on-bits)=b0d82f76e3996866(33)\n3:   36  34  21   0    hash(on-bits)=f8d11f864f3149c6(32)\n```\n\nMuch higher-entropy hashes (yay!), about half the bits are set\n### Experiment 2:  use median instead of mean\n\n```\nComparison matrix:\n      0   1   2   3\n0:    0  28  30  30    hash(on-bits)=a4a4b4f4f4f8e8e0(32)\n1:   28   0  30  32    hash(on-bits)=aaaaaaaaaaaaaaaa(32)\n2:   30  30   0   2    hash(on-bits)=fabafafa58505050(32)\n3:   30  32   2   0    hash(on-bits)=fafafafa50505050(32)\n```\n\nExactly half the bits set (yay!) but low-entropy hashes again\n### Experiment 3:  use both a bi-directional DCT and the median instead of mean\n\n```\nComparison matrix:\n      0   1   2   3\n0:    0  34  28  34    hash(on-bits)=21bdf66a81056afa(32)\n1:   34   0  30  34    hash(on-bits)=af42f41ce32e30c7(32)\n2:   28  30   0  22    hash(on-bits)=b0d82f76e3992866(32)\n3:   34  34  22   0    hash(on-bits)=f8d11f864f3149c6(32)\n```\n\nExactly half the bits set on (yay!), high entropy (yay!)\n\nSo using bi-directional DCT yields more random-like hashes with fewer repeating bit patterns. And using the median makes the number of set bits tend to be exactly half of the available bit space. Both seem like very good changes.\n## Finally, as to which coefficients to take...\n### Experiment C0: skip first column, use 64 coefficients (original implementation)\n\n```\nComparison matrix:\n      0   1   2   3\n0:    0  34  28  34    hash(on-bits)=21bdf66a81056afa(32)\n1:   34   0  30  34    hash(on-bits)=af42f41ce32e30c7(32)\n2:   28  30   0  22    hash(on-bits)=b0d82f76e3992866(32)\n3:   34  34  22   0    hash(on-bits)=f8d11f864f3149c6(32)\n```\n### Experiment C1: skip first row, use 64 coefficients\n\n```\nComparison matrix:\n      0   1   2   3\n0:    0  32  30  36    hash(on-bits)=06437bedd4020bfd(32)\n1:   32   0  30  36    hash(on-bits)=e05ec5ed38c65c61(32)\n2:   30  30   0  20    hash(on-bits)=e661b05eedc63251(32)\n3:   36  36  20   0    hash(on-bits)=adf1a23e0d8e6293(32)\n```\n### Experiment C2: skip first row and column, use 64 coefficients\n\n```\nComparison matrix:\n      0   1   2   3\n0:    0  34  32  36    hash(on-bits)=0b61bdf66a81057e(32)\n1:   34   0  32  36    hash(on-bits)=70af62f61ce32e30(32)\n2:   32  32   0  22    hash(on-bits)=f3b0d80f66e39928(32)\n3:   36  36  22   0    hash(on-bits)=56f8d11f864f3149(32)\n```\n### Experiment C3: skip first row and column, use 49 coefficients (as per phash.org)\n\n```\nComparison matrix:\n      0   1   2   3\n0:    0  26  22  26    hash(on-bits)=000085ef6d4042fa(24)\n1:   26   0  24  28    hash(on-bits)=0000be174398d730(24)\n2:   22  24   0  16    hash(on-bits)=0000c2c2fed8cca8(24)\n3:   26  28  16   0    hash(on-bits)=0001e289f0d1d8c9(24)\n```\n### Experiment C4: use all 64 lowest-frequency coefficients (no skipping)\n\n```\nComparison matrix:\n      0   1   2   3\n0:    0  32  30  34    hash(on-bits)=437bed94020bc5f5(32)\n1:   32   0  30  34    hash(on-bits)=5e85e938c65c618f(32)\n2:   30  30   0  18    hash(on-bits)=61b05eedc63251cd(32)\n3:   34  34  18   0    hash(on-bits)=f1a23e0d9e62938d(32)\n```\n\nImage 3 is similar to image 2 (same person, similar camera angle, different pose). Image 0 and 1 are similar to 2 or 3 only in that they all have a sky, a ground, and a horizon.\n\nThe best spread we got between similar and not-similar results was 16: cases C1 and C4\n\nCase C3 had a spread of 10, but used 77% of the bits to do it.\n\nNormalizing C3 as if it used 64 bits yields a spread of 13  (= 10*64/49)\n\nMy preference is to go with C4.  C3 may be the phash.org implementation but I see no benefit to throwing out 15 bits worth of data.  C2 is arguably what phash.org might have wanted instead, using 15 higher-frequency coefficients instead of the 15 lowest-frequency coefficients, but it doesn't perform as well as C4.  C1 and C0 seem arbitrary to me, choosing to favor horizontal data over vertical data or vise-versa.\n\nOf course it would make sense to run large-scale experiments on thousands of human-classified test samples.  But that's resources I don't have access to at this time.\n## Pull Request\n\nA pull request with my changes should be coming along momentarily.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/12", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/12/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/12/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/12", "id": 56858870, "node_id": "MDU6SXNzdWU1Njg1ODg3MA==", "number": 12, "title": "Array returned by `hex_to_hash` has different shape then default hash", "user": {"login": "cmyr", "id": 3330916, "node_id": "MDQ6VXNlcjMzMzA5MTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3330916?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmyr", "html_url": "https://github.com/cmyr", "followers_url": "https://api.github.com/users/cmyr/followers", "following_url": "https://api.github.com/users/cmyr/following{/other_user}", "gists_url": "https://api.github.com/users/cmyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmyr/subscriptions", "organizations_url": "https://api.github.com/users/cmyr/orgs", "repos_url": "https://api.github.com/users/cmyr/repos", "events_url": "https://api.github.com/users/cmyr/events{/privacy}", "received_events_url": "https://api.github.com/users/cmyr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-02-06T19:49:05Z", "updated_at": "2015-02-07T01:00:28Z", "closed_at": "2015-02-06T19:49:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "it's not shaped to (8, 8), but (64,). I'll put up a PR for this shortly.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/9", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/9/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/9/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/9", "id": 45299319, "node_id": "MDU6SXNzdWU0NTI5OTMxOQ==", "number": 9, "title": "pHash hash_size not used in resulting hash", "user": {"login": "Queatz", "id": 540620, "node_id": "MDQ6VXNlcjU0MDYyMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/540620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Queatz", "html_url": "https://github.com/Queatz", "followers_url": "https://api.github.com/users/Queatz/followers", "following_url": "https://api.github.com/users/Queatz/following{/other_user}", "gists_url": "https://api.github.com/users/Queatz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Queatz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Queatz/subscriptions", "organizations_url": "https://api.github.com/users/Queatz/orgs", "repos_url": "https://api.github.com/users/Queatz/repos", "events_url": "https://api.github.com/users/Queatz/events{/privacy}", "received_events_url": "https://api.github.com/users/Queatz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-08T21:27:02Z", "updated_at": "2015-06-13T14:26:31Z", "closed_at": "2015-06-13T14:26:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "seems like the hash size remains the same regardless of the desired size supplied.  Perhaps it should be:\n\n``` python\ndctlowfreq = dct[:hash_size/4, 1:hash_size/4+1]\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/5", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/5/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/5/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/5", "id": 34697032, "node_id": "MDU6SXNzdWUzNDY5NzAzMg==", "number": 5, "title": "Having ImageHash instances be iterable would be awesome!", "user": {"login": "fake-name", "id": 1401239, "node_id": "MDQ6VXNlcjE0MDEyMzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1401239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fake-name", "html_url": "https://github.com/fake-name", "followers_url": "https://api.github.com/users/fake-name/followers", "following_url": "https://api.github.com/users/fake-name/following{/other_user}", "gists_url": "https://api.github.com/users/fake-name/gists{/gist_id}", "starred_url": "https://api.github.com/users/fake-name/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fake-name/subscriptions", "organizations_url": "https://api.github.com/users/fake-name/orgs", "repos_url": "https://api.github.com/users/fake-name/repos", "events_url": "https://api.github.com/users/fake-name/events{/privacy}", "received_events_url": "https://api.github.com/users/fake-name/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2014-05-31T07:14:28Z", "updated_at": "2015-06-13T18:25:08Z", "closed_at": "2015-06-13T14:25:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "A nice tweak would be to make it possible to iterate over the values in ImageHash instances.\n\nThis makes things like converting to non-hex string representations much easier. \n\nFor example, I currently want to convert the hash value into a string of \"1\" or \"0\" values, for use in a database (I can use the DB's fuzzy text matching with such a string).\n\nCurrently, I have to:\n\n```\ndHash = \"\".join([\"1\" if val else \"0\" for val in np.nditer(dHash.hash, order='C') ])\n```\n\nwhich means I need numpy imported in my own code, and it's just ugly.\n\nI think this could be as simple as just adding:\n\n```\n    def __iter__(self):\n        return np.nditer(self.hash, order='C')\n```\n\nto the ImageHash class (I'm not totally sure you can _return_ an iterator object for the iterator class method), but even if not, it should only be a few lines.\n\nAt that point, my own code is the much more clean:\n\n```\ndHash = \"\".join([\"1\" if val else \"0\" for val in dHash ])\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/4", "repository_url": "https://api.github.com/repos/JohannesBuchner/imagehash", "labels_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/4/comments", "events_url": "https://api.github.com/repos/JohannesBuchner/imagehash/issues/4/events", "html_url": "https://github.com/JohannesBuchner/imagehash/issues/4", "id": 30865975, "node_id": "MDU6SXNzdWUzMDg2NTk3NQ==", "number": 4, "title": "Make scipy an optional dependency", "user": {"login": "svisser", "id": 723226, "node_id": "MDQ6VXNlcjcyMzIyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/723226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svisser", "html_url": "https://github.com/svisser", "followers_url": "https://api.github.com/users/svisser/followers", "following_url": "https://api.github.com/users/svisser/following{/other_user}", "gists_url": "https://api.github.com/users/svisser/gists{/gist_id}", "starred_url": "https://api.github.com/users/svisser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svisser/subscriptions", "organizations_url": "https://api.github.com/users/svisser/orgs", "repos_url": "https://api.github.com/users/svisser/repos", "events_url": "https://api.github.com/users/svisser/events{/privacy}", "received_events_url": "https://api.github.com/users/svisser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-04-04T14:41:35Z", "updated_at": "2015-06-13T14:20:06Z", "closed_at": "2015-06-13T14:20:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently both numpy and scipy are needed to install imagehash but this only makes sense when you're using the phash function. If you're using average_hash or dhash then you only need numpy.\n\nHence scipy should be marked as an optional dependency, both in the code and in setup.py.\n\nPeople can then install this library as needed by using, e.g., `pip install ImageHash` or `pip install ImageHash[pHash]` using the optional dependency functionality.\n", "performed_via_github_app": null, "score": 1.0}]}