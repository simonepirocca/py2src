{"total_count": 419, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/encode/httpx/issues/1203", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1203/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1203/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1203/events", "html_url": "https://github.com/encode/httpx/issues/1203", "id": 682584272, "node_id": "MDU6SXNzdWU2ODI1ODQyNzI=", "number": 1203, "title": "Auto headers inserted into `headers._list` while not into `headers._dict`", "user": {"login": "j178", "id": 10510431, "node_id": "MDQ6VXNlcjEwNTEwNDMx", "avatar_url": "https://avatars1.githubusercontent.com/u/10510431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j178", "html_url": "https://github.com/j178", "followers_url": "https://api.github.com/users/j178/followers", "following_url": "https://api.github.com/users/j178/following{/other_user}", "gists_url": "https://api.github.com/users/j178/gists{/gist_id}", "starred_url": "https://api.github.com/users/j178/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j178/subscriptions", "organizations_url": "https://api.github.com/users/j178/orgs", "repos_url": "https://api.github.com/users/j178/repos", "events_url": "https://api.github.com/users/j178/events{/privacy}", "received_events_url": "https://api.github.com/users/j178/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-20T09:58:15Z", "updated_at": "2020-08-21T11:03:16Z", "closed_at": "2020-08-21T11:03:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### Checklist\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n`Request.prepare()` insert auto headers into `headers.raw` (ie `headers._list`), but not into the `headers._dict`.\r\nhttps://github.com/encode/httpx/blob/924fa8c9dc19f3a601db54a384158fef56f07c96/httpx/_models.py#L650-L651\r\n\r\n### To reproduce\r\n```python\r\n>>> import httpx\r\n>>> client = httpx.Client()\r\n>>> request = client.build_request(\"GET\", \"https://google.com\")\r\n>>> requests.headers\r\nHeaders({'host': 'google.com', 'user-agent': 'python-httpx/0.14.1', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, br', 'connection': 'keep-alive'})\r\n>>> \"host\" in request.headers\r\nFalse\r\n>>> request.headers.pop(\"host\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"D:\\programs\\anaconda3\\lib\\_collections_abc.py\", line 801, in pop\r\n    del self[key]\r\n  File \"E:\\projects\\pycharm\\httpx\\httpx\\_models.py\", line 536, in __delitem__\r\n    del self._dict[del_key]\r\nKeyError: b'host'\r\n```\r\n\r\n### Environment\r\n\r\n- OS: Windows/macOS\r\n- Python version: 3.7.6\r\n- HTTPX version: 0.14.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1195", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1195/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1195/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1195/events", "html_url": "https://github.com/encode/httpx/issues/1195", "id": 681613627, "node_id": "MDU6SXNzdWU2ODE2MTM2Mjc=", "number": 1195, "title": "Allow `proxies` in `httpx.request()` high-level API", "user": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068460, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYw", "url": "https://api.github.com/repos/encode/httpx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}, {"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}, {"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}, {"id": 1554830102, "node_id": "MDU6TGFiZWwxNTU0ODMwMTAy", "url": "https://api.github.com/repos/encode/httpx/labels/requests-compat", "name": "requests-compat", "color": "006b75", "default": false, "description": "Issues related to Requests backwards compatibility"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-19T07:28:24Z", "updated_at": "2020-08-20T07:55:36Z", "closed_at": "2020-08-20T07:55:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Spun up from #1194 \r\n\r\nThe high-level API functions such as `httpx.get()` and `httpx.post()` don't allow passing `proxies=...` yet (only possible on `Client`), but Requests does support this: https://requests.readthedocs.io/en/master/user/advanced/#proxies\r\n\r\nWe should add support for this argument:\r\n\r\n```pycon\r\n>>> import httpx\r\n>>> proxies = \"http://localhost:8899\"\r\n>>> r = httpx.get(\"https://example.com\", proxies=proxies)\r\n```\r\n\r\nWe may need to update some documentation (for example, the [HTTP Proxying](https://www.python-httpx.org/advanced/#http-proxying) docs *may* need to clarify that `proxies` does not _require_ using clients), but we can treat that as a follow-up if it's unclear what should be updated exactly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1194", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1194/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1194/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1194/events", "html_url": "https://github.com/encode/httpx/issues/1194", "id": 680961096, "node_id": "MDU6SXNzdWU2ODA5NjEwOTY=", "number": 1194, "title": "Do we have any plan to add proxy IP for a single request ?", "user": {"login": "Iflier", "id": 19361364, "node_id": "MDQ6VXNlcjE5MzYxMzY0", "avatar_url": "https://avatars1.githubusercontent.com/u/19361364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Iflier", "html_url": "https://github.com/Iflier", "followers_url": "https://api.github.com/users/Iflier/followers", "following_url": "https://api.github.com/users/Iflier/following{/other_user}", "gists_url": "https://api.github.com/users/Iflier/gists{/gist_id}", "starred_url": "https://api.github.com/users/Iflier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Iflier/subscriptions", "organizations_url": "https://api.github.com/users/Iflier/orgs", "repos_url": "https://api.github.com/users/Iflier/repos", "events_url": "https://api.github.com/users/Iflier/events{/privacy}", "received_events_url": "https://api.github.com/users/Iflier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068460, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYw", "url": "https://api.github.com/repos/encode/httpx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}, {"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}, {"id": 1554830102, "node_id": "MDU6TGFiZWwxNTU0ODMwMTAy", "url": "https://api.github.com/repos/encode/httpx/labels/requests-compat", "name": "requests-compat", "color": "006b75", "default": false, "description": "Issues related to Requests backwards compatibility"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-18T11:22:21Z", "updated_at": "2020-08-18T16:07:08Z", "closed_at": "2020-08-18T16:07:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi developers,\r\n\r\nThis is a great work!\r\n\r\n### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your feature request. -->\r\n\r\n- [ ] There are no similar issues or pull requests for this yet.\r\n- [ ] I discussed this idea on the [community chat](https://gitter.im/encode/community) and feedback is positive.\r\n\r\n### Is your feature related to a problem? Please describe.\r\n\r\n<!-- A clear and concise description of what you are trying to achieve.\r\n\r\nEg \"I want to be able to [...] but I can't because [...]\". -->\r\nFor the network data collection related jobs, sometimes, a single proxy IP may be invalid after making several requests. In this case, use a single proxy IP for each request, rather than use a Client instance maybe more appropriate. I know, we can set a proxy IP when create a Client(or AsyncClient) instance, while if the proxy ip used in Client instance become unavailable after several requests, we may need to create another Client instance, I'm not sure if say it like this is correct :-( .\r\n\r\n## Describe the solution you would like.\r\n\r\n<!-- A clear and concise description of what you would want to happen.\r\n\r\nFor API changes, try to provide a code snippet of what you would like the API to look like.\r\n-->\r\nDo we have any plan to enable `httpx.request(...)` has a `proxies` arg, just like `requests` do ?\r\n\r\n## Describe alternatives you considered\r\n\r\n<!-- Please describe any alternative solutions or features you've considered to solve\r\nyour problem and why they wouldn't solve it. -->\r\n\r\n## Additional context\r\n\r\n<!-- Provide any additional context, screenshots, tracebacks, etc. about the feature here. -->\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1189", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1189/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1189/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1189/events", "html_url": "https://github.com/encode/httpx/issues/1189", "id": 680239781, "node_id": "MDU6SXNzdWU2ODAyMzk3ODE=", "number": 1189, "title": "Connecting to HTTPS websites with auth proxy", "user": {"login": "adamzlo", "id": 49476747, "node_id": "MDQ6VXNlcjQ5NDc2NzQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/49476747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamzlo", "html_url": "https://github.com/adamzlo", "followers_url": "https://api.github.com/users/adamzlo/followers", "following_url": "https://api.github.com/users/adamzlo/following{/other_user}", "gists_url": "https://api.github.com/users/adamzlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamzlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamzlo/subscriptions", "organizations_url": "https://api.github.com/users/adamzlo/orgs", "repos_url": "https://api.github.com/users/adamzlo/repos", "events_url": "https://api.github.com/users/adamzlo/events{/privacy}", "received_events_url": "https://api.github.com/users/adamzlo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}, {"id": 1522869826, "node_id": "MDU6TGFiZWwxNTIyODY5ODI2", "url": "https://api.github.com/repos/encode/httpx/labels/tls+pki", "name": "tls+pki", "color": "033166", "default": false, "description": "Issues and PRs related to TLS and PKI"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2020-08-17T13:33:31Z", "updated_at": "2020-08-20T11:25:07Z", "closed_at": "2020-08-20T09:36:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been trying to make this simple code work:\r\n```\r\n        proxies = httpx.Proxy(\r\n            url=\"https://username:password@hostname:post\",\r\n            mode=\"TUNNEL_ONLY\"\r\n        )\r\n\r\n        async with httpx.AsyncClient(proxies=proxies, verify=\"client.pem\") as client:\r\n            response = await client.get(\"https://httpbin.org/ip\")\r\n            print(response.text)\r\n```\r\nFirstly, i tried to connect via auth proxy without the verify paramter, but it failed and i was getting this error:\r\n```\r\nProcess Process-1:\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\multiprocessing\\process.py\", line 315, in _bootstrap\r\n    self.run()\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\multiprocessing\\process.py\", line 108, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"C:\\Users\\Adam\\Desktop\\sizeer\\test2.py\", line 67, in what\r\n    asyncio.get_event_loop().run_until_complete(new.main(proxy))\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\asyncio\\base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"C:\\Users\\Adam\\Desktop\\sizeer\\test2.py\", line 59, in main\r\n    response = await client.get(\"https://httpbin.org/ip\")\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1408, in get\r\n    return await self.request(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1241, in request\r\n    response = await self.send(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1272, in send\r\n    response = await self._send_handling_redirects(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1301, in _send_handling_redirects\r\n    response = await self._send_handling_auth(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1338, in _send_handling_auth\r\n    response = await self._send_single_request(request, timeout)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1369, in _send_single_request\r\n    ) = await transport.request(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpcore\\_async\\http_proxy.py\", line 113, in request\r\n    return await self._tunnel_request(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpcore\\_async\\http_proxy.py\", line 230, in _tunnel_request\r\n    await proxy_connection.start_tls(host, timeout)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpcore\\_async\\connection.py\", line 146, in start_tls\r\n    self.socket = await self.connection.start_tls(hostname, timeout)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpcore\\_async\\http11.py\", line 84, in start_tls\r\n    self.socket = await self.socket.start_tls(hostname, self.ssl_context, timeout)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpcore\\_backends\\asyncio.py\", line 108, in start_tls\r\n    transport = await asyncio.wait_for(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\asyncio\\tasks.py\", line 483, in wait_for\r\n    return fut.result()\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\asyncio\\base_events.py\", line 1200, in start_tls\r\n    await waiter\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\asyncio\\sslproto.py\", line 529, in data_received\r\n    ssldata, appdata = self._sslpipe.feed_ssldata(data)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\asyncio\\sslproto.py\", line 189, in feed_ssldata\r\n    self._sslobj.do_handshake()\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\ssl.py\", line 944, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1108)\r\n\r\nProcess finished with exit code 0\r\n```\r\nAfterwards, i tried generating Ca certs with trustme-cli, but it also failed and i get this error every time i try to connect to website via proxy:\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\multiprocessing\\process.py\", line 315, in _bootstrap\r\n    self.run()\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\multiprocessing\\process.py\", line 108, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"C:\\Users\\Adam\\Desktop\\sizeer\\test2.py\", line 67, in what\r\n    asyncio.get_event_loop().run_until_complete(new.main(proxy))\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\asyncio\\base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"C:\\Users\\Adam\\Desktop\\sizeer\\test2.py\", line 59, in main\r\n    response = await client.get(\"http://httpbin.org/ip\")\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1408, in get\r\n    return await self.request(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1241, in request\r\n    response = await self.send(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1272, in send\r\n    response = await self._send_handling_redirects(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1301, in _send_handling_redirects\r\n    response = await self._send_handling_auth(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1338, in _send_handling_auth\r\n    response = await self._send_single_request(request, timeout)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1363, in _send_single_request\r\n    (\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\contextlib.py\", line 131, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_exceptions.py\", line 359, in map_exceptions\r\n    raise mapped_exc(message, **kwargs) from None  # type: ignore\r\nhttpx._exceptions.ConnectTimeout\r\n\r\nProcess finished with exit code 0\r\n\r\n```\r\nI do not own the proxy server and i am paying to use the ip, so the only thing i have is this scheme hostname:port:username:password. As you mentioned in your docs, i can change ca_certs, but only on local server (Server of my proxy is not local, so i believe that i cannot change the certs manually. Correct me, if i am wrong). The project i am writing needs to make numerous requests at one time and each with different proxy ip. So can you tell me is there any option that will enable me to use your library in order to send requests with auth proxy to HTTPS and HTTP websites without timeout error or wrong version number error from ssl? By far i checked the proxy and connected via curl and Requests library. Both ways of changing ip while sending request worked, so i wonder if there's something wrong with httpx or my code. Thanks for help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1188", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1188/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1188/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1188/events", "html_url": "https://github.com/encode/httpx/issues/1188", "id": 680136330, "node_id": "MDU6SXNzdWU2ODAxMzYzMzA=", "number": 1188, "title": "httpcore.ReadTimeout not mapped to httpx.ReadTimeout", "user": {"login": "yamrzou", "id": 40591511, "node_id": "MDQ6VXNlcjQwNTkxNTEx", "avatar_url": "https://avatars0.githubusercontent.com/u/40591511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yamrzou", "html_url": "https://github.com/yamrzou", "followers_url": "https://api.github.com/users/yamrzou/followers", "following_url": "https://api.github.com/users/yamrzou/following{/other_user}", "gists_url": "https://api.github.com/users/yamrzou/gists{/gist_id}", "starred_url": "https://api.github.com/users/yamrzou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yamrzou/subscriptions", "organizations_url": "https://api.github.com/users/yamrzou/orgs", "repos_url": "https://api.github.com/users/yamrzou/repos", "events_url": "https://api.github.com/users/yamrzou/events{/privacy}", "received_events_url": "https://api.github.com/users/yamrzou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-17T10:45:24Z", "updated_at": "2020-08-19T11:10:05Z", "closed_at": "2020-08-19T11:10:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running the following to perform requests and catch `httpx.RequestError` exceptions:\r\n```\r\nasync def async_get_url(client, url, retry=True):\r\n    async with semaphore.get():\r\n        try:\r\n            response = await client.get(url)\r\n            response.raise_for_status()\r\n            result = handle_reponse(reponse)\r\n        except httpx.RequestError as exc:\r\n            if retry:\r\n                print(f\"Retrying {url} ...\")\r\n                result = await async_get_url(\r\n                    client, url, retry=False\r\n                )\r\n            else:\r\n                result = ...\r\n        except httpx.HTTPStatusError as exc:\r\n            result = ...\r\n        return result\r\n```\r\n\r\nAt some point it failed with a `httpcore._exceptions.ReadTimeout` exception:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/user/main.py\", line 351, in <module>\r\n    asyncio.run(run())\r\n  File \"/usr/lib64/python3.8/asyncio/runners.py\", line 43, in run\r\n    return loop.run_until_complete(main)\r\n  File \"/usr/lib64/python3.8/asyncio/base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"/home/user/main.py\", line 317, in run\r\n    await f\r\n  File \"/usr/lib64/python3.8/asyncio/tasks.py\", line 608, in _wait_for_one\r\n    return f.result()  # May raise f.exception().\r\n  File \"/home/user/main.py\", line 173, in get_updates\r\n    item_api_response = await f\r\n  File \"/usr/lib64/python3.8/asyncio/tasks.py\", line 608, in _wait_for_one\r\n    return f.result()  # May raise f.exception().\r\n  File \"/home/user/main.py\", line 53, in async_get_url\r\n    response = await client.get(url)\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpx/_client.py\", line 1292, in get\r\n    return await self.request(\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpx/_client.py\", line 1143, in request\r\n    response = await self.send(\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpx/_client.py\", line 1167, in send\r\n    await response.aread()\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpx/_models.py\", line 958, in aread\r\n    self._content = b\"\".join([part async for part in self.aiter_bytes()])\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpx/_models.py\", line 958, in <listcomp>\r\n    self._content = b\"\".join([part async for part in self.aiter_bytes()])\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpx/_models.py\", line 969, in aiter_bytes\r\n    async for chunk in self.aiter_raw():\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpx/_models.py\", line 1002, in aiter_raw\r\n    async for part in self._raw_stream:\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpcore/_async/connection_pool.py\", line 50, in __aiter__\r\n    async for chunk in self.stream:\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpcore/_bytestreams.py\", line 72, in __aiter__\r\n    async for chunk in self._aiterator:\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpcore/_async/http11.py\", line 143, in _receive_response_data\r\n    event = await self._receive_event(timeout)\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpcore/_async/http11.py\", line 160, in _receive_event\r\n    data = await self.socket.read(self.READ_NUM_BYTES, timeout)\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpcore/_backends/asyncio.py\", line 139, in read\r\n    return data\r\n  File \"/usr/lib64/python3.8/contextlib.py\", line 131, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/home/user/.pyenv/versions/venv/lib64/python3.8/site-packages/httpcore/_exceptions.py\", line 12, in map_exceptions\r\n    raise to_exc(exc) from None\r\nhttpcore._exceptions.ReadTimeout\r\n```\r\nAccording to: https://github.com/encode/httpx/blob/8c7729e42c9ebf860e75820d5325741b85d64970/httpx/_exceptions.py#L360-L363 \r\nThe `httpcore.ReadTimeout` exception should have been mapped to `httpx.ReadTimeout` and therefore catched appropriately with `except httpx.RequestError as exc`, but that doesn't happen.\r\n\r\n### Environment\r\n\r\n- OS: Linux\r\n- Python version: 3.8.5\r\n- HTTPX version: 0.14.0\r\n- HTTPCore version: 0.10.0\r\n- Async environment: asyncio\r\n- HTTP proxy: no\r\n- Custom certificates: no", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1178", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1178/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1178/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1178/events", "html_url": "https://github.com/encode/httpx/issues/1178", "id": 679416707, "node_id": "MDU6SXNzdWU2Nzk0MTY3MDc=", "number": 1178, "title": "comparing the behavior between requests and HTTPX in HTTPS auth proxy usage", "user": {"login": "adamzlo", "id": 49476747, "node_id": "MDQ6VXNlcjQ5NDc2NzQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/49476747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamzlo", "html_url": "https://github.com/adamzlo", "followers_url": "https://api.github.com/users/adamzlo/followers", "following_url": "https://api.github.com/users/adamzlo/following{/other_user}", "gists_url": "https://api.github.com/users/adamzlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamzlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamzlo/subscriptions", "organizations_url": "https://api.github.com/users/adamzlo/orgs", "repos_url": "https://api.github.com/users/adamzlo/repos", "events_url": "https://api.github.com/users/adamzlo/events{/privacy}", "received_events_url": "https://api.github.com/users/adamzlo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2268580415, "node_id": "MDU6TGFiZWwyMjY4NTgwNDE1", "url": "https://api.github.com/repos/encode/httpx/labels/needs%20confirmation", "name": "needs confirmation", "color": "fbca04", "default": false, "description": "The issue described has not yet been confirmed, or replicated locally."}, {"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}, {"id": 1554830102, "node_id": "MDU6TGFiZWwxNTU0ODMwMTAy", "url": "https://api.github.com/repos/encode/httpx/labels/requests-compat", "name": "requests-compat", "color": "006b75", "default": false, "description": "Issues related to Requests backwards compatibility"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-08-14T21:42:59Z", "updated_at": "2020-08-16T08:52:08Z", "closed_at": "2020-08-15T08:41:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "As i mentioned on the chat, i have tried to use HTTPS auth proxy to send requests to HTTPS websites, but it does not work. \r\n```        \r\nproxies = httpx.Proxy(\r\n            url=\"https://username:password@host:port\",\r\n            mode=\"FORWARD_ONLY\",\r\n        )\r\nasync with httpx.AsyncClient(proxies=proxies) as client:\r\n      response = await client.get(\"https://httpbin.org/ip\")\r\n      print(response.text)\r\n```\r\nWhen i try to send this request, i get timeout error all the time, but when i change url in httpx.Proxy() to http one, i can access http websites with changed ip. It seems like my proxy is not supporting connecting via HTTPS, but in requests library it works fine. I have encountered this problem in other libraries that supports async requests and i wonder where the problem is.\r\n```\r\nproxies = httpx.Proxy(\r\n            url=\"http://username:password@host:port\",\r\n            mode=\"FORWARD_ONLY\",\r\n        )\r\nasync with httpx.AsyncClient(proxies=proxies) as client:\r\n      response = await client.get(\"http://httpbin.org/ip\")\r\n      print(response.text)\r\n```\r\nAfter changing request to HTTP, the ip is from the proxy and everything seems to work well, but as you may know not on all sites it works like that.\r\n```\r\nProcess Process-1:\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\multiprocessing\\process.py\", line 315, in _bootstrap\r\n    self.run()\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\multiprocessing\\process.py\", line 108, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"C:\\Users\\Adam\\Desktop\\sizeer\\test2.py\", line 59, in what\r\n    asyncio.get_event_loop().run_until_complete(new.main())\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\asyncio\\base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"C:\\Users\\Adam\\Desktop\\sizeer\\test2.py\", line 50, in main\r\n    response = await client.get(\"https://httpbin.org/ip\")\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1408, in get\r\n    return await self.request(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1241, in request\r\n    response = await self.send(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1272, in send\r\n    response = await self._send_handling_redirects(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1301, in _send_handling_redirects\r\n    response = await self._send_handling_auth(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1338, in _send_handling_auth\r\n    response = await self._send_single_request(request, timeout)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1363, in _send_single_request\r\n    (\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\contextlib.py\", line 131, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_exceptions.py\", line 359, in map_exceptions\r\n    raise mapped_exc(message, **kwargs) from None  # type: ignore\r\nhttpx._exceptions.ConnectTimeout\r\n\r\nProcess finished with exit code 0\r\n\r\n```\r\nThat's the error i am getting after using HTTPS request. And below is the usage of https proxy in requests library:\r\n```\r\ns = requests.Session()\r\nproxies = {\r\n      \"http\": \"http://username:password@host:port\",\r\n      \"https\": \"https://username:password@host:port\"\r\n}\r\nresponse = s.get(\"https://httpbin.org/ip\", proxies=proxies)\r\n```\r\nI have used the same proxies with requests library and i haven't witnessed any issues when connecting to HTTPS websites.\r\n```\r\nProcess Process-1:\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\multiprocessing\\process.py\", line 315, in _bootstrap\r\n    self.run()\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\multiprocessing\\process.py\", line 108, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"C:\\Users\\Adam\\Desktop\\sizeer\\test2.py\", line 59, in what\r\n    asyncio.get_event_loop().run_until_complete(new.main())\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\asyncio\\base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"C:\\Users\\Adam\\Desktop\\sizeer\\test2.py\", line 50, in main\r\n    response = await client.get(\"https://httpbin.org/ip\")\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1408, in get\r\n    return await self.request(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1241, in request\r\n    response = await self.send(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1272, in send\r\n    response = await self._send_handling_redirects(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1301, in _send_handling_redirects\r\n    response = await self._send_handling_auth(\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1338, in _send_handling_auth\r\n    response = await self._send_single_request(request, timeout)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_client.py\", line 1363, in _send_single_request\r\n    (\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\contextlib.py\", line 131, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"C:\\Users\\Adam\\Anaconda3\\envs\\sizeer\\lib\\site-packages\\httpx\\_exceptions.py\", line 359, in map_exceptions\r\n    raise mapped_exc(message, **kwargs) from None  # type: ignore\r\nhttpx._exceptions.ConnectError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1108)\r\n\r\nProcess finished with exit code 0\r\n\r\n```\r\nAnd that's the error i get when using different proxy provider. However both works well in requests library.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1176", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1176/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1176/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1176/events", "html_url": "https://github.com/encode/httpx/issues/1176", "id": 679158446, "node_id": "MDU6SXNzdWU2NzkxNTg0NDY=", "number": 1176, "title": "How to authenticate asynchronously?", "user": {"login": "flvndh", "id": 17010377, "node_id": "MDQ6VXNlcjE3MDEwMzc3", "avatar_url": "https://avatars2.githubusercontent.com/u/17010377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flvndh", "html_url": "https://github.com/flvndh", "followers_url": "https://api.github.com/users/flvndh/followers", "following_url": "https://api.github.com/users/flvndh/following{/other_user}", "gists_url": "https://api.github.com/users/flvndh/gists{/gist_id}", "starred_url": "https://api.github.com/users/flvndh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flvndh/subscriptions", "organizations_url": "https://api.github.com/users/flvndh/orgs", "repos_url": "https://api.github.com/users/flvndh/repos", "events_url": "https://api.github.com/users/flvndh/events{/privacy}", "received_events_url": "https://api.github.com/users/flvndh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-08-14T13:30:29Z", "updated_at": "2020-08-20T18:16:56Z", "closed_at": "2020-08-15T10:45:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI try to make asynchronous calls to the Microsoft Graph API using `httpx.AsyncClient`. For authentication I use the `azure-identity` package that provides several client classes to easily get an access token:\r\n\r\n```python\r\nfrom azure.identity.aio import EnvironmentCredential\r\n\r\nasync with EnvironmentCredential() as credential:\r\n    token = await credential.get_token(*scopes)\r\n```\r\n\r\nI'd like then to subclass `httpx.Auth` and implement the `auth_flow` method\r\n\r\n```python\r\nclass AzureAuth(Auth):\r\n\r\n    async def auth_flow(self, request):\r\n        token = await self._credential.get_token(*self._scopes) # Get the access token or retrieve it from cache\r\n        request.headers[\"Authorization\"] = \"Bearer \" + token.token\r\n        yield request\r\n```\r\n\r\nso that I can do things like\r\n\r\n```python\r\nasync with AsyncClient(base_url=\"https://graph.microsoft.com\", auth=AzureAuth(...)) as client:\r\n    response = await client.get(\"/groups\")\r\n```\r\n\r\nThe problem is that `httpx.Auth.auth_flow` is **synchronous**. How can I make it asynchronous ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1175", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1175/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1175/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1175/events", "html_url": "https://github.com/encode/httpx/issues/1175", "id": 678296218, "node_id": "MDU6SXNzdWU2NzgyOTYyMTg=", "number": 1175, "title": "Add UDS to advanced transport docs", "user": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1625971726, "node_id": "MDU6TGFiZWwxNjI1OTcxNzI2", "url": "https://api.github.com/repos/encode/httpx/labels/docs", "name": "docs", "color": "4553a8", "default": false, "description": "Changes to the documentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/1", "html_url": "https://github.com/encode/httpx/milestone/1", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/1/labels", "id": 4660186, "node_id": "MDk6TWlsZXN0b25lNDY2MDE4Ng==", "number": 1, "title": "v1.0", "description": "", "creator": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "open_issues": 9, "closed_issues": 28, "state": "open", "created_at": "2019-09-15T12:23:30Z", "updated_at": "2020-08-21T11:30:58Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2020-08-13T09:33:01Z", "updated_at": "2020-08-17T12:49:09Z", "closed_at": "2020-08-17T12:49:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Refs https://github.com/encode/httpcore/pull/139#pullrequestreview-465149202\n\nHTTPCore now supports UDS again (still pending release?), so let's document that in our advanced transport docs alongside `local_address`. The idea being: instantiate and pass an explicit transport (rather than adding a `uds` option to the client).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1174", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1174/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1174/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1174/events", "html_url": "https://github.com/encode/httpx/issues/1174", "id": 677691341, "node_id": "MDU6SXNzdWU2Nzc2OTEzNDE=", "number": 1174, "title": "0.14.x's sync client errors with ReadError w/ nginx 'chunked_transfer_encoding off'", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2020-08-12T13:24:15Z", "updated_at": "2020-08-20T11:21:56Z", "closed_at": "2020-08-20T09:37:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nSince the update to 0.14, I'm getting the following error when trying to communicate with an nginx server that has set `chunked_transfer_encoding off`:\r\n\r\n<details>\r\n\r\n```\r\nReadError                                 Traceback (most recent call last)\r\n<ipython-input-3-0399eff110e8> in <module>\r\n----> 1 resp = httpx.get(\r\n      2     f\"https://pypi.XXX/root/vrmd/{ name }\",\r\n      3     headers={\"Accept\": \"application/json\"},\r\n      4 )\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpx/_api.py in get(url, params, headers, cookies, auth, allow_redirects, cert, verify, timeout, trust_env)\r\n    157     this function, as `GET` requests should not include a request body.\r\n    158     \"\"\"\r\n--> 159     return request(\r\n    160         \"GET\",\r\n    161         url,\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpx/_api.py in request(method, url, params, data, files, json, headers, cookies, auth, timeout, allow_redirects, verify, cert, trust_env)\r\n     84         cert=cert, verify=verify, timeout=timeout, trust_env=trust_env,\r\n     85     ) as client:\r\n---> 86         return client.request(\r\n     87             method=method,\r\n     88             url=url,\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpx/_client.py in request(self, method, url, data, files, json, params, headers, cookies, auth, allow_redirects, timeout)\r\n    638             cookies=cookies,\r\n    639         )\r\n--> 640         return self.send(\r\n    641             request, auth=auth, allow_redirects=allow_redirects, timeout=timeout,\r\n    642         )\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpx/_client.py in send(self, request, stream, auth, allow_redirects, timeout)\r\n    674         if not stream:\r\n    675             try:\r\n--> 676                 response.read()\r\n    677             finally:\r\n    678                 response.close()\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpx/_models.py in read(self)\r\n    885         \"\"\"\r\n    886         if not hasattr(self, \"_content\"):\r\n--> 887             self._content = b\"\".join(self.iter_bytes())\r\n    888         return self._content\r\n    889\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpx/_models.py in iter_bytes(self)\r\n    896             yield self._content\r\n    897         else:\r\n--> 898             for chunk in self.iter_raw():\r\n    899                 yield self.decoder.decode(chunk)\r\n    900             yield self.decoder.flush()\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpx/_models.py in iter_raw(self)\r\n    929\r\n    930         self.is_stream_consumed = True\r\n--> 931         for part in self._raw_stream:\r\n    932             yield part\r\n    933         self.close()\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpcore/_sync/connection_pool.py in __iter__(self)\r\n     48\r\n     49     def __iter__(self) -> Iterator[bytes]:\r\n---> 50         for chunk in self.stream:\r\n     51             yield chunk\r\n     52\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpcore/_bytestreams.py in __iter__(self)\r\n     42\r\n     43     def __iter__(self) -> Iterator[bytes]:\r\n---> 44         for chunk in self._iterator:\r\n     45             yield chunk\r\n     46\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpcore/_sync/http11.py in _receive_response_data(self, timeout)\r\n    141         \"\"\"\r\n    142         while True:\r\n--> 143             event = self._receive_event(timeout)\r\n    144             if isinstance(event, h11.Data):\r\n    145                 logger.trace(\"receive_event=Data(<%d bytes>)\", len(event.data))\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpcore/_sync/http11.py in _receive_event(self, timeout)\r\n    158\r\n    159             if event is h11.NEED_DATA:\r\n--> 160                 data = self.socket.read(self.READ_NUM_BYTES, timeout)\r\n    161                 self.h11_state.receive_data(data)\r\n    162             else:\r\n\r\n~/.local/venvs/tempenv-78259958181c/lib/python3.8/site-packages/httpcore/_backends/sync.py in read(self, n, timeout)\r\n     62                 data = self.sock.recv(n)\r\n     63                 if data == b\"\":\r\n---> 64                     raise ReadError(\"Server disconnected while attempting read\")\r\n     65                 return data\r\n     66\r\n\r\nReadError: Server disconnected while attempting read\r\n```\r\n\r\n</details>\r\n\r\nDowngrading to 0.13.3 fixes it. All on Python 3.8.5 on macOS and Linux.\r\n\r\n\r\n### To reproduce\r\n\r\nI can only reproduce it with nginx:\r\n\r\n```\r\nnginx version: nginx/1.10.3 (Ubuntu)\r\nbuilt with OpenSSL 1.0.2g  1 Mar 2016\r\nTLS SNI support enabled\r\nconfigure arguments: --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now' --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_v2_module --with-http_sub_module --with-http_xslt_module --with-stream --with-stream_ssl_module --with-mail --with-mail_ssl_module --with-threads --add-module=/build/nginx-41auzt/nginx-1.10.3/debian/modules/nginx-auth-pam --add-module=/build/nginx-41auzt/nginx-1.10.3/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-41auzt/nginx-1.10.3/debian/modules/nginx-echo --add-module=/build/nginx-41auzt/nginx-1.10.3/debian/modules/nginx-upstream-fair --add-module=/build/nginx-41auzt/nginx-1.10.3/debian/modules/ngx_http_substitutions_filter_module\r\nc-0100:~#\r\n```\r\n\r\nConfig for the server:\r\n\r\n<details>\r\n\r\n`/etc/nginx/nginx.conf`:\r\n\r\n```\r\nworker_processes 4;\r\n\r\nuser nobody nogroup;\r\npid /var/run/nginx.pid;\r\n\r\nevents {\r\n    worker_connections 1024;\r\n    accept_mutex off;\r\n}\r\n\r\nhttp {\r\n    include /etc/nginx/mime.types;\r\n    default_type application/octet-stream;\r\n    log_format proxy '$http_host - $remote_addr - $remote_user [$time_local]  '\r\n        '\"$request\" $status $body_bytes_sent '\r\n        '\"$http_referer\" \"$http_user_agent\"';\r\n    access_log /var/log/nginx/proxy/access.log proxy;\r\n    error_log /var/log/nginx/proxy/error.log;\r\n    sendfile on;\r\n    types_hash_max_size 2048;\r\n\r\n    gzip off;\r\n\r\n    server_tokens off;\r\n\r\n    ssl_prefer_server_ciphers On;\r\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\r\n    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS;\r\n    ssl_session_cache shared:SSL:10m;\r\n    ssl_dhparam /etc/nginx/dhparams.pem;\r\n\r\n    add_header Strict-Transport-Security max-age=63072000;\r\n    add_header X-Content-Type-Options nosniff;\r\n    add_header X-XSS-Protection '1; mode=block';\r\n    add_header X-Frame-Options SAMEORIGIN;\r\n\r\n    include /etc/nginx/conf.d/*.conf;\r\n}\r\n```\r\n\r\nand in conf.d:\r\n\r\n```\r\nserver {\r\n    server_name pypi.XXX deferred;\r\n    listen      REDACTED-IPv4-ADDRESS:443 ssl http2;\r\n\r\n    gzip             on;\r\n    gzip_min_length  2000;\r\n    gzip_proxied     any;\r\n    gzip_types       text/html application/json;\r\n\r\n    ssl on;\r\n    ssl_certificate      /etc/ssl/certs/*.XXX_all.crt;\r\n    ssl_certificate_key  /etc/ssl/private/*.XXX.key;\r\n\r\n    access_log /var/log/nginx/proxy/pypi/access.log;\r\n    error_log /var/log/nginx/proxy/pypi/error.log;\r\n\r\n    root /vrmd/pypi/.devpi/server;\r\n    client_max_body_size 20M;\r\n\r\n    # Chunked transfers break pip 8/9 interop. Commenting this out, fixes it.\r\n    chunked_transfer_encoding off;\r\n\r\n    # try serving static files directly\r\n    location ~ /\\+f/ {\r\n        # workaround to pass non-GET/HEAD requests through to the named location below\r\n        error_page 418 = @proxy_to_app;\r\n        if ($request_method !~ (GET)|(HEAD)) {\r\n            return 418;\r\n        }\r\n\r\n        expires max;\r\n        try_files /+files$uri @proxy_to_app;\r\n    }\r\n    # try serving docs directly\r\n    location ~ /\\+doc/ {\r\n        try_files $uri @proxy_to_app;\r\n    }\r\n    location / {\r\n        # workaround to pass all requests to / through to the named location below\r\n        error_page 418 = @proxy_to_app;\r\n        return 418;\r\n    }\r\n    location @proxy_to_app {\r\n        proxy_pass http://127.0.0.1:3141;\r\n        proxy_set_header X-outside-url $scheme://$host:$server_port;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        expires -1;  # no-cache\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n### Expected behavior\r\n\r\nKeep working.\r\n\r\n### Actual behavior\r\n\r\nDoesn't work.\r\n\r\n### Debugging material\r\n\r\nTraceback see above.\r\n\r\nLog:\r\n\r\n<details>\r\n\r\n```\r\nTRACE [2020-08-12 15:18:05] httpx._config - load_ssl_context verify=True cert=None trust_env=True http2=False\r\nTRACE [2020-08-12 15:18:05] httpx._config - load_verify_locations cafile=/usr/local/etc/openssl/cert.pem\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.connection_pool - get_connection_from_pool=(b'https', b'pypi.XXX', 443)\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.connection_pool - created connection=<SyncHTTPConnection http_version=UNKNOWN state=0>\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.connection_pool - adding connection to pool=<SyncHTTPConnection http_version=UNKNOWN state=0>\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.connection - open_socket origin=(b'https', b'pypi.XXX', 443) timeout={'connect': 5.0, 'read': 5.0, 'write': 5.0, 'pool': 5.0}\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.connection - create_connection socket=<httpcore._backends.sync.SyncSocketStream object at 0x10e682a30> http_version='HTTP/1.1'\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.connection - connection.request method=b'GET' url=(b'https', b'pypi.XXX', None, b'/') headers=[(b'host', b'pypi.XXX'), (b'user-agent', b'python-httpx/0.14.1'), (b'accept', b'*/*'), (b'accept-encoding', b'gzip, deflate'), (b'connection', b'keep-alive')]\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.http11 - send_request method=b'GET' url=(b'https', b'pypi.XXX', None, b'/') headers=[(b'host', b'pypi.XXX'), (b'user-agent', b'python-httpx/0.14.1'), (b'accept', b'*/*'), (b'accept-encoding', b'gzip, deflate'), (b'connection', b'keep-alive')]\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.http11 - send_data=Data(<0 bytes>)\r\nDEBUG [2020-08-12 15:18:05] httpx._client - HTTP Request: GET https://pypi.XXX \"HTTP/1.1 200 OK\"\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.http11 - receive_event=Data(<2063 bytes>)\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.http11 - response_closed our_state=MUST_CLOSE their_state=SEND_BODY\r\nTRACE [2020-08-12 15:18:05] httpcore._sync.connection_pool - removing connection from pool=<SyncHTTPConnection http_version=HTTP/1.1 state=5>\r\n```\r\n\r\n</details>\r\n\r\n### Environment\r\n\r\n- OS: Linux & macOS\r\n- Python version: 3.8.5\r\n- HTTPX version: 0.14.0 & 0.14.1\r\n- Async environment: none\r\n- HTTP proxy: no\r\n- Custom certificates:  yes but likely unrelated\r\n\r\n### Additional context\r\n\r\nn/a", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1172", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1172/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1172/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1172/events", "html_url": "https://github.com/encode/httpx/issues/1172", "id": 677459124, "node_id": "MDU6SXNzdWU2Nzc0NTkxMjQ=", "number": 1172, "title": "How about attaching original traceback to exceptions raised in `map_exceptions()` ?", "user": {"login": "j178", "id": 10510431, "node_id": "MDQ6VXNlcjEwNTEwNDMx", "avatar_url": "https://avatars1.githubusercontent.com/u/10510431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j178", "html_url": "https://github.com/j178", "followers_url": "https://api.github.com/users/j178/followers", "following_url": "https://api.github.com/users/j178/following{/other_user}", "gists_url": "https://api.github.com/users/j178/gists{/gist_id}", "starred_url": "https://api.github.com/users/j178/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j178/subscriptions", "organizations_url": "https://api.github.com/users/j178/orgs", "repos_url": "https://api.github.com/users/j178/repos", "events_url": "https://api.github.com/users/j178/events{/privacy}", "received_events_url": "https://api.github.com/users/j178/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-12T07:20:54Z", "updated_at": "2020-08-19T16:38:53Z", "closed_at": "2020-08-19T16:38:53Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently we use `map_exceptions()` to covert underlying library exceptions to `httpx` exceptions, when captured an expected exception, we raise a new exception from `None`:  \r\nhttps://github.com/encode/httpx/blob/655773e1c1b75895eda927d5a9d22a3b5b8f572d/httpx/_exceptions.py#L336-L359\r\n\r\nThis causes a traceback like this:\r\n```\r\nIn [30]: httpx.get('http://notexisthost')\r\nTraceback (most recent call last):\r\n  File \"<ipython-input-30-7c88a36ce394>\", line 1, in <module>\r\n    httpx.get('http://notexisthost')\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpx\\_api.py\", line 170, in get\r\n    trust_env=trust_env,\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpx\\_api.py\", line 96, in request\r\n    allow_redirects=allow_redirects,\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpx\\_client.py\", line 601, in request\r\n    request, auth=auth, allow_redirects=allow_redirects, timeout=timeout,\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpx\\_client.py\", line 621, in send\r\n    request, auth=auth, timeout=timeout, allow_redirects=allow_redirects,\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpx\\_client.py\", line 648, in send_handling_redirects\r\n    request, auth=auth, timeout=timeout, history=history\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpx\\_client.py\", line 684, in send_handling_auth\r\n    response = self.send_single_request(request, timeout)\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpx\\_client.py\", line 719, in send_single_request\r\n    timeout=timeout.as_dict(),\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpcore\\_sync\\http_proxy.py\", line 99, in request\r\n    method, url, headers=headers, stream=stream, timeout=timeout\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpcore\\_sync\\http_proxy.py\", line 150, in _forward_request\r\n    method, url, headers=headers, stream=stream, timeout=timeout\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpcore\\_sync\\connection.py\", line 78, in request\r\n    return self.connection.request(method, url, headers, stream, timeout)\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpcore\\_sync\\http11.py\", line 62, in request\r\n    ) = self._receive_response(timeout)\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpcore\\_sync\\http11.py\", line 115, in _receive_response\r\n    event = self._receive_event(timeout)\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpcore\\_sync\\http11.py\", line 142, in _receive_event\r\n    event = self.h11_state.next_event()\r\n  File \"D:\\programs\\anaconda3\\lib\\contextlib.py\", line 130, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpcore\\_exceptions.py\", line 12, in map_exceptions\r\n    raise to_exc(exc) from None\r\nProtocolError: can't handle event type ConnectionClosed when role=SERVER and state=SEND_RESPONSE\r\n```\r\n\r\nNotice the last two frames from the traceback:\r\n```\r\nFile \"D:\\programs\\anaconda3\\lib\\contextlib.py\", line 130, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"D:\\programs\\anaconda3\\lib\\site-packages\\httpcore\\_exceptions.py\", line 12, in map_exceptions\r\n    raise to_exc(exc) from None\r\n```\r\nI find that It's not obvious to figure out where's the root cause. If we attach the original traceback to the newly raised exception like this:\r\n```py\r\n@contextlib.contextmanager\r\ndef map_exceptions(\r\n    mapping: typing.Mapping[typing.Type[Exception], typing.Type[Exception]],\r\n    **kwargs: typing.Any,\r\n) -> typing.Iterator[None]:\r\n    try:\r\n        yield\r\n    except Exception as exc:\r\n        mapped_exc = None\r\n\r\n        for from_exc, to_exc in mapping.items():\r\n            if not isinstance(exc, from_exc):\r\n                continue\r\n            # We want to map to the most specific exception we can find.\r\n            # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\r\n            # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\r\n            if mapped_exc is None or issubclass(to_exc, mapped_exc):\r\n                mapped_exc = to_exc\r\n\r\n        if mapped_exc is None:\r\n            raise\r\n\r\n        message = str(exc)\r\n        raise mapped_exc(message, **kwargs).with_traceback(exc.__traceback__) from None  # type: ignore\r\n```\r\nthe traceback becomes:\r\n```\r\nIn [4]: httpx.get('http://doestnotexist')\r\nTraceback (most recent call last):\r\n  File \"<ipython-input-4-74881dccb3f2>\", line 1, in <module>\r\n    httpx.get('http://doestnotexist')\r\n  File \"e:\\projects\\pycharm\\httpx\\httpx\\_api.py\", line 170, in get\r\n    trust_env=trust_env,\r\n  File \"e:\\projects\\pycharm\\httpx\\httpx\\_api.py\", line 96, in request\r\n    allow_redirects=allow_redirects,\r\n  File \"e:\\projects\\pycharm\\httpx\\httpx\\_client.py\", line 643, in request\r\n    request, auth=auth, allow_redirects=allow_redirects, timeout=timeout,\r\n  File \"e:\\projects\\pycharm\\httpx\\httpx\\_client.py\", line 673, in send\r\n    request, auth=auth, timeout=timeout, allow_redirects=allow_redirects,\r\n  File \"e:\\projects\\pycharm\\httpx\\httpx\\_client.py\", line 702, in _send_handling_redirects\r\n    request, auth=auth, timeout=timeout, history=history\r\n  File \"e:\\projects\\pycharm\\httpx\\httpx\\_client.py\", line 738, in _send_handling_auth\r\n    response = self._send_single_request(request, timeout)\r\n  File \"e:\\projects\\pycharm\\httpx\\httpx\\_client.py\", line 772, in _send_single_request\r\n    timeout=timeout.as_dict(),\r\n  File \"D:\\programs\\anaconda3\\lib\\contextlib.py\", line 130, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"e:\\projects\\pycharm\\httpx\\httpx\\_exceptions.py\", line 359, in map_exceptions\r\n    raise mapped_exc(message, **kwargs).with_traceback(exc.__traceback__) from None  # type: ignore\r\n  File \"e:\\projects\\pycharm\\httpx\\httpx\\_exceptions.py\", line 342, in map_exceptions\r\n    yield\r\n  File \"e:\\projects\\pycharm\\httpx\\httpx\\_client.py\", line 772, in _send_single_request\r\n    timeout=timeout.as_dict(),\r\n  File \"E:\\projects\\pycharm\\httpcore\\httpcore\\_sync\\http_proxy.py\", line 102, in request\r\n    method, url, headers=headers, stream=stream, timeout=timeout\r\n  File \"E:\\projects\\pycharm\\httpcore\\httpcore\\_sync\\http_proxy.py\", line 159, in _forward_request\r\n    method, url, headers=headers, stream=stream, timeout=timeout\r\n  File \"E:\\projects\\pycharm\\httpcore\\httpcore\\_sync\\connection.py\", line 96, in request\r\n    return self.connection.request(method, url, headers, stream, timeout)\r\n  File \"E:\\projects\\pycharm\\httpcore\\httpcore\\_sync\\http11.py\", line 73, in request\r\n    ) = self._receive_response(timeout)\r\n  File \"E:\\projects\\pycharm\\httpcore\\httpcore\\_sync\\http11.py\", line 130, in _receive_response\r\n    event = self._receive_event(timeout)\r\n  File \"E:\\projects\\pycharm\\httpcore\\httpcore\\_sync\\http11.py\", line 160, in _receive_event\r\n    data = self.socket.read(self.READ_NUM_BYTES, timeout)\r\n  File \"E:\\projects\\pycharm\\httpcore\\httpcore\\_backends\\sync.py\", line 64, in read\r\n    raise ReadError(\"Server disconnected while attempting read\")\r\nReadError: Server disconnected while attempting read\r\n```\r\nMay be it will be easier to realize the really problems?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1169", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1169/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1169/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1169/events", "html_url": "https://github.com/encode/httpx/issues/1169", "id": 676853004, "node_id": "MDU6SXNzdWU2NzY4NTMwMDQ=", "number": 1169, "title": "CONNECT request didn't include a port", "user": {"login": "charkal233", "id": 51376789, "node_id": "MDQ6VXNlcjUxMzc2Nzg5", "avatar_url": "https://avatars3.githubusercontent.com/u/51376789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charkal233", "html_url": "https://github.com/charkal233", "followers_url": "https://api.github.com/users/charkal233/followers", "following_url": "https://api.github.com/users/charkal233/following{/other_user}", "gists_url": "https://api.github.com/users/charkal233/gists{/gist_id}", "starred_url": "https://api.github.com/users/charkal233/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charkal233/subscriptions", "organizations_url": "https://api.github.com/users/charkal233/orgs", "repos_url": "https://api.github.com/users/charkal233/repos", "events_url": "https://api.github.com/users/charkal233/events{/privacy}", "received_events_url": "https://api.github.com/users/charkal233/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-08-11T12:53:29Z", "updated_at": "2020-08-13T01:01:04Z", "closed_at": "2020-08-13T01:01:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "CONNECT request didn't include a port\r\n\r\nproxies = {'all://': httpx.Proxy('http://127.0.0.1:24000', mode='TUNNEL_ONLY')}\r\nclient = httpx.Client(proxies=proxies, http2=True)\r\nr = client.get(\"https://www.google.com\") #this will cause an error\r\nr = client.get(\"https://www.google.com:443\") # this one work\r\n\r\n- OS: Windows\r\n- Python version: Python 3.7.6\r\n- HTTPX version: 0.14.1\r\n- HTTP proxy: yes\r\n- Custom certificates: no\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1168", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1168/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1168/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1168/events", "html_url": "https://github.com/encode/httpx/issues/1168", "id": 676813915, "node_id": "MDU6SXNzdWU2NzY4MTM5MTU=", "number": 1168, "title": "User-provided Content-Length header is missing from streaming requests", "user": {"login": "vaultah", "id": 4944562, "node_id": "MDQ6VXNlcjQ5NDQ1NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4944562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaultah", "html_url": "https://github.com/vaultah", "followers_url": "https://api.github.com/users/vaultah/followers", "following_url": "https://api.github.com/users/vaultah/following{/other_user}", "gists_url": "https://api.github.com/users/vaultah/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaultah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaultah/subscriptions", "organizations_url": "https://api.github.com/users/vaultah/orgs", "repos_url": "https://api.github.com/users/vaultah/repos", "events_url": "https://api.github.com/users/vaultah/events{/privacy}", "received_events_url": "https://api.github.com/users/vaultah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-08-11T11:51:22Z", "updated_at": "2020-08-11T15:43:58Z", "closed_at": "2020-08-11T15:43:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\nUser-provided Content-Length header is missing from streaming requests\r\n\r\n### To reproduce\r\n\r\n<!-- Provide a *minimal* example with steps to reproduce the bug locally.\r\n\r\nNOTE: try to keep any external dependencies *at an absolute minimum* (servers, proxies, certificates...).\r\nIn other words, remove anything that doesn't make the bug go away.\r\n\r\nIf you need a local server to replicate against, you can build one using eg. Starlette [0] and Uvicorn [1], or any tool you feel comfortable with. Check out other issues for examples and remember to share setup instructions here. :-)\r\n\r\n[0]: https://www.starlette.io\r\n[1]: https://www.uvicorn.org\r\n-->\r\n\r\n```python\r\n>>> import httpx\r\n>>> client = httpx.AsyncClient()\r\n>>> async def f():\r\n...     yield b'abcd'\r\n... \r\n>>> r = await client.post('https://httpbin.org/post', data=f(), headers={'content-length': '4'})\r\n>>> r.json()\r\n{'args': {}, 'data': 'abcd', 'files': {}, 'form': {}, 'headers': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Host': 'httpbin.org', 'Transfer-Encoding': 'chunked', 'User-Agent': 'python-httpx/0.14.1', 'X-Amzn-Trace-Id': 'Root=1-5f3283ee-d5e67484ee0db0346804ce72'}, 'json': None, 'origin': 'x.x.x.x', 'url': 'https://httpbin.org/post'}\r\n>>> 'Content-Length' in r.json()['headers']\r\nFalse\r\n```\r\n\r\n### Expected behavior\r\n\r\n<!-- A clear and concise description of what you expected to happen. -->\r\n\r\nUser-provided Content-Length header is not missing from streaming requests\r\n\r\n### Actual behavior\r\n\r\n<!-- A clear and concise description of what actually happens. -->\r\n\r\nUser-provided Content-Length header is missing from streaming requests\r\n\r\n### Debugging material\r\n\r\n<!-- Any tracebacks, screenshots, etc. that can help understanding the problem.\r\n\r\nNOTE:\r\n- Please list tracebacks in full (don't truncate them).\r\n- If relevant, consider turning on DEBUG or TRACE logs for additional details (see https://www.python-httpx.org/environment_variables/#httpx_log_level).\r\n- Consider using `<details>` to make tracebacks/logs collapsible if they're very large (see https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d).\r\n-->\r\n\r\n### Environment\r\n\r\n- OS: Linux/Windows/macOS.\r\n- Python version: 3.8.5\r\n- HTTPX version: 0.14.1\r\n- Async environment: asyncio\r\n- HTTP proxy: no\r\n- Custom certificates: no\r\n\r\n### Additional context\r\n\r\n<!-- Any additional information that can help understanding the problem.\r\n\r\nEg. linked issues, or a description of what you were trying to achieve. -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1167", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1167/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1167/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1167/events", "html_url": "https://github.com/encode/httpx/issues/1167", "id": 676794085, "node_id": "MDU6SXNzdWU2NzY3OTQwODU=", "number": 1167, "title": "Wrong response with pipelining", "user": {"login": "qo4on", "id": 35609308, "node_id": "MDQ6VXNlcjM1NjA5MzA4", "avatar_url": "https://avatars2.githubusercontent.com/u/35609308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qo4on", "html_url": "https://github.com/qo4on", "followers_url": "https://api.github.com/users/qo4on/followers", "following_url": "https://api.github.com/users/qo4on/following{/other_user}", "gists_url": "https://api.github.com/users/qo4on/gists{/gist_id}", "starred_url": "https://api.github.com/users/qo4on/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qo4on/subscriptions", "organizations_url": "https://api.github.com/users/qo4on/orgs", "repos_url": "https://api.github.com/users/qo4on/repos", "events_url": "https://api.github.com/users/qo4on/events{/privacy}", "received_events_url": "https://api.github.com/users/qo4on/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2268580415, "node_id": "MDU6TGFiZWwyMjY4NTgwNDE1", "url": "https://api.github.com/repos/encode/httpx/labels/needs%20confirmation", "name": "needs confirmation", "color": "fbca04", "default": false, "description": "The issue described has not yet been confirmed, or replicated locally."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-11T11:18:15Z", "updated_at": "2020-08-11T15:36:53Z", "closed_at": "2020-08-11T11:58:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting unique [file descriptors `fd`](https://docs.pcloud.com/methods/fileops/file_open.html) for each file with [this code](http://www.rath.org/dugong-docs/tutorial.html#pipelining-with-coroutines):\r\n```\r\n{'result': 0, 'fd': 1, 'fileid': 91794101}\r\n{'result': 0, 'fd': 2, 'fileid': 91794132}\r\n{'result': 0, 'fd': 3, 'fileid': 91794134}\r\n```\r\nWhen I do the same using `httpx` I'm getting incorrect response `'fd': 1` for all the files:\r\n```\r\nasync_client = httpx.AsyncClient()\r\nresp = await asyncio.gather(\r\n    *[async_client.get(file['url'], params=file['params'], allow_redirects=True) for file in files],\r\n    return_exceptions=True\r\n)\r\n{'result': 0, 'fd': 1, 'fileid': 91794101}\r\n{'result': 0, 'fd': 1, 'fileid': 91794132}\r\n{'result': 0, 'fd': 1, 'fileid': 91794134}\r\n```\r\nThe same incorrect response usually happens when I send requests in threads. Can I tune `httpx` to get correct unique fd's?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1162", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1162/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1162/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1162/events", "html_url": "https://github.com/encode/httpx/issues/1162", "id": 676518842, "node_id": "MDU6SXNzdWU2NzY1MTg4NDI=", "number": 1162, "title": "Cookies parsing problem in httpx 0.14.0", "user": {"login": "andredias", "id": 902540, "node_id": "MDQ6VXNlcjkwMjU0MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/902540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andredias", "html_url": "https://github.com/andredias", "followers_url": "https://api.github.com/users/andredias/followers", "following_url": "https://api.github.com/users/andredias/following{/other_user}", "gists_url": "https://api.github.com/users/andredias/gists{/gist_id}", "starred_url": "https://api.github.com/users/andredias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andredias/subscriptions", "organizations_url": "https://api.github.com/users/andredias/orgs", "repos_url": "https://api.github.com/users/andredias/repos", "events_url": "https://api.github.com/users/andredias/events{/privacy}", "received_events_url": "https://api.github.com/users/andredias/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068459, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU5", "url": "https://api.github.com/repos/encode/httpx/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-11T01:47:54Z", "updated_at": "2020-08-11T11:15:13Z", "closed_at": "2020-08-11T06:38:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "After I updated httpx from version 0.13.3 to 0.14.0, I've got problems with cookie parsing.\r\n\r\nOn httpx 0.13.3, if I get this header (Response.headers):\r\n```\r\n(Pdb) resp.headers\r\nHeaders([('content-length', '80'), ('content-type', 'application/json'),\r\n('set-cookie', 'session_id=7QXeu-R7ERoyL4H0XSkHRg; HttpOnly; Path=/; SameSite=lax; Secure'),\r\n('set-cookie', 'csrf=\"ezkpjJeJTfgNjmOt2Mgh/nk4/3IsxGZN4zglr0IQbfI=\"; Path=/; SameSite=lax; Secure')])\r\n(Pdb) resp.cookies.jar\r\n<CookieJar[Cookie(version=0, name='csrf', value='\"ezkpjJeJTfgNjmOt2Mgh/nk4/3IsxGZN4zglr0IQbfI=\"', port=None,\r\nport_specified=False, domain='testserver.local', domain_specified=False, domain_initial_dot=False, path='/',\r\npath_specified=True, secure=True, expires=None, discard=True, comment=None, comment_url=None,\r\nrest={'SameSite': 'lax'}, rfc2109=False), Cookie(version=0, name='session_id', value='7QXeu-R7ERoyL4H0XSkHRg',\r\nport=None, port_specified=False, domain='testserver.local', domain_specified=False, domain_initial_dot=False,\r\npath='/', path_specified=True, secure=True, expires=None, discard=True, comment=None, comment_url=None,\r\nrest={'HttpOnly': None, 'SameSite': 'lax'}, rfc2109=False)]>\r\n(Pdb) resp.cookies['csrf']\r\n'\"ezkpjJeJTfgNjmOt2Mgh/nk4/3IsxGZN4zglr0IQbfI=\"'\r\n``` \r\n\r\nThese are the dependencies:\r\n\r\n```\r\nhttpx 0.13.3 The next generation HTTP client.\r\n\u251c\u2500\u2500 certifi *\r\n\u251c\u2500\u2500 chardet >=3.0.0,<4.0.0\r\n\u251c\u2500\u2500 hstspreload *\r\n\u251c\u2500\u2500 httpcore >=0.9.0,<0.10.0\r\n\u2502   \u251c\u2500\u2500 h11 >=0.8,<0.10 \r\n\u2502   \u251c\u2500\u2500 h2 >=3.0.0,<4.0.0 \r\n\u2502   \u2502   \u251c\u2500\u2500 hpack >=3.0,<4 \r\n\u2502   \u2502   \u2514\u2500\u2500 hyperframe >=5.2.0,<6 \r\n\u2502   \u2514\u2500\u2500 sniffio >=1.0.0,<2.0.0 \r\n\u251c\u2500\u2500 idna >=2.0.0,<3.0.0\r\n\u251c\u2500\u2500 rfc3986 >=1.3,<2\r\n\u2514\u2500\u2500 sniffio *\r\n```\r\n\r\n----\r\n\r\nHowever, after I updated to \r\n```\r\nhttpx 0.14.0 The next generation HTTP client.\r\n\u251c\u2500\u2500 certifi *\r\n\u251c\u2500\u2500 chardet >=3.0.0,<4.0.0\r\n\u251c\u2500\u2500 httpcore >=0.10.0,<0.11.0\r\n\u2502   \u251c\u2500\u2500 h11 >=0.8,<0.10 \r\n\u2502   \u2514\u2500\u2500 sniffio >=1.0.0,<2.0.0 \r\n\u251c\u2500\u2500 idna >=2.0.0,<3.0.0\r\n\u251c\u2500\u2500 rfc3986 >=1.3,<2\r\n\u2514\u2500\u2500 sniffio *\r\n```\r\n\r\nThis is what I get now from a Response.headers and a Response.cookies.jar:\r\n```\r\n(Pdb) resp.headers\r\nHeaders([('content-length', '80'), ('content-type', 'application/json'),\r\n('set-cookie', 'session_id=gSZ-G9WyYFLx6EYaqEtChw; HttpOnly; Path=/; SameSite=lax; Secure'),\r\n('set-cookie', 'csrf=\"9NflHETs8dPrkxX1sopAHklYIkQTgrVqUHP9gu4pRuo=\"; Path=/; SameSite=lax; Secure')])\r\n(Pdb) resp.cookies.jar\r\n<CookieJar[Cookie(version=0, name='session_id', value='gSZ-G9WyYFLx6EYaqEtChw', port=None,\r\nport_specified=False, domain='testserver.local', domain_specified=False, domain_initial_dot=False, path='/',\r\npath_specified=True, secure=True, expires=None, discard=True, comment=None, comment_url=None,\r\nrest={'HttpOnly': None, 'SameSite': 'lax', 'Secure, csrf': '\"9NflHETs8dPrkxX1sopAHklYIkQTgrVqUHP9gu4pRuo=\"'},\r\nrfc2109=False)]>\r\n(Pdb) resp.cookies['csrf']\r\n*** KeyError: 'csrf'\r\n```\r\n\r\nThere is a key error even though `csrf` is present in the header.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1158", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1158/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1158/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1158/events", "html_url": "https://github.com/encode/httpx/issues/1158", "id": 676071007, "node_id": "MDU6SXNzdWU2NzYwNzEwMDc=", "number": 1158, "title": "Map `rfc3986.exceptions.InvalidAuthority` to `httpx.InvalidURL`", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}, {"id": 1627431921, "node_id": "MDU6TGFiZWwxNjI3NDMxOTIx", "url": "https://api.github.com/repos/encode/httpx/labels/refactor", "name": "refactor", "color": "fcc1bd", "default": false, "description": "Issues and PRs related to code refactoring"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-10T11:39:59Z", "updated_at": "2020-08-11T08:44:57Z", "closed_at": "2020-08-11T08:44:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We're wrapping our underlying `h11`/`h2` library exception classes, but we're currently missing an `rfc3986` case...\r\n\r\nWe should reintroduce the `InvalidURL` exception for URLs that really are improperly formed and *cannot* be parsed (not our previous case of \"Invalid because it's not http/https\").\r\n\r\nThe only case I can see that we need to map is `rfc3986.exceptions.InvalidAuthority`, although perhaps I'm missing some other cases that `rfc3986` can raise? We ought to wrap our single `rfc3986.iri_reference(...)` usage, and map the `rfc3986` exception to our own exception class.\r\n\r\n```python\r\n>>> httpx.URL('https://\ud83d\ude07/')\r\nTraceback (most recent call last):\r\n  File \"/Users/tomchristie/Temp/venv/lib/python3.7/site-packages/rfc3986/iri.py\", line 125, in idna_encoder\r\n    std3_rules=True)\r\n  File \"/Users/tomchristie/Temp/venv/lib/python3.7/site-packages/idna/core.py\", line 360, in encode\r\n    s = alabel(label)\r\n  File \"/Users/tomchristie/Temp/venv/lib/python3.7/site-packages/idna/core.py\", line 281, in alabel\r\n    check_label(label)\r\n  File \"/Users/tomchristie/Temp/venv/lib/python3.7/site-packages/idna/core.py\", line 261, in check_label\r\n    raise InvalidCodepoint('Codepoint {0} at position {1} of {2} not allowed'.format(_unot(cp_value), pos+1, repr(label)))\r\nidna.core.InvalidCodepoint: Codepoint U+1F607 at position 3 of '\u00f0\u00f0\ud83d\ude07' not allowed\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/tomchristie/Temp/venv/lib/python3.7/site-packages/httpx/_models.py\", line 69, in __init__\r\n    self._uri_reference = rfc3986.api.iri_reference(url).encode()\r\n  File \"/Users/tomchristie/Temp/venv/lib/python3.7/site-packages/rfc3986/iri.py\", line 133, in encode\r\n    for part in self.host.split(\".\")])\r\n  File \"/Users/tomchristie/Temp/venv/lib/python3.7/site-packages/rfc3986/iri.py\", line 133, in <listcomp>\r\n    for part in self.host.split(\".\")])\r\n  File \"/Users/tomchristie/Temp/venv/lib/python3.7/site-packages/rfc3986/iri.py\", line 127, in idna_encoder\r\n    raise exceptions.InvalidAuthority(self.authority)\r\nrfc3986.exceptions.InvalidAuthority: The authority (\u00f0\u00f0\ud83d\ude07) is not valid.\r\n```\r\n\r\nSo, let's change from...\r\n\r\n```python\r\nself._uri_reference = rfc3986.iri_reference(url).encode()\r\n```\r\n\r\nTo...\r\n\r\n```python\r\ntry:\r\n    self._uri_reference = rfc3986.iri_reference(url).encode()\r\nexcept rfc3986.exceptions.InvalidAuthority as exc:\r\n    raise httpx.InvalidURL(message=str(exc)) from None\r\n```\r\n\r\nWe *don't* want this to subclass `RequestException`, because it *isn't* necessarily. The user might be using a base `httpx.URL()`.\r\n\r\nWe then possibly also want to wrap the `url = URL(location)` usage in `_redirect_url` to wrap `httpx.InvalidURL` and instead raise `httpx.RemoteProtocolError(\"Invalid URL in location header: {message}\")`, since if a parse error occurs at that point, then it *is* a request error. (We *do* have an associated request at this point, and it is due to a remote server error, rather than invalid user input.)\r\n\r\nI'll label this as \"refactor\" since it's such a minor edge bit of API.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1154", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1154/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1154/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1154/events", "html_url": "https://github.com/encode/httpx/issues/1154", "id": 675893321, "node_id": "MDU6SXNzdWU2NzU4OTMzMjE=", "number": 1154, "title": "Add API docs for streaming", "user": {"login": "felix-hilden", "id": 25202257, "node_id": "MDQ6VXNlcjI1MjAyMjU3", "avatar_url": "https://avatars3.githubusercontent.com/u/25202257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix-hilden", "html_url": "https://github.com/felix-hilden", "followers_url": "https://api.github.com/users/felix-hilden/followers", "following_url": "https://api.github.com/users/felix-hilden/following{/other_user}", "gists_url": "https://api.github.com/users/felix-hilden/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix-hilden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix-hilden/subscriptions", "organizations_url": "https://api.github.com/users/felix-hilden/orgs", "repos_url": "https://api.github.com/users/felix-hilden/repos", "events_url": "https://api.github.com/users/felix-hilden/events{/privacy}", "received_events_url": "https://api.github.com/users/felix-hilden/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1625971726, "node_id": "MDU6TGFiZWwxNjI1OTcxNzI2", "url": "https://api.github.com/repos/encode/httpx/labels/docs", "name": "docs", "color": "4553a8", "default": false, "description": "Changes to the documentation"}, {"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-10T06:13:58Z", "updated_at": "2020-08-20T09:28:29Z", "closed_at": "2020-08-20T09:28:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "- [x] There are no similar issues or pull requests for this yet.\r\n- [x] I discussed this idea in #1152 and feedback is positive.\r\n\r\nThere is no documentation in either the top level `stream` or `Client.stream`, and they are not mentioned in generated documentation. At least a short description of functionality and parameters (pointing to `httpx.request` if applicable) should be added.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1151", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1151/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1151/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1151/events", "html_url": "https://github.com/encode/httpx/issues/1151", "id": 675591490, "node_id": "MDU6SXNzdWU2NzU1OTE0OTA=", "number": 1151, "title": "Response cookies are not ingested properly in 0.14.0", "user": {"login": "djigit0s", "id": 3939174, "node_id": "MDQ6VXNlcjM5MzkxNzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3939174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djigit0s", "html_url": "https://github.com/djigit0s", "followers_url": "https://api.github.com/users/djigit0s/followers", "following_url": "https://api.github.com/users/djigit0s/following{/other_user}", "gists_url": "https://api.github.com/users/djigit0s/gists{/gist_id}", "starred_url": "https://api.github.com/users/djigit0s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djigit0s/subscriptions", "organizations_url": "https://api.github.com/users/djigit0s/orgs", "repos_url": "https://api.github.com/users/djigit0s/repos", "events_url": "https://api.github.com/users/djigit0s/events{/privacy}", "received_events_url": "https://api.github.com/users/djigit0s/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-08-08T21:33:04Z", "updated_at": "2020-08-11T11:15:38Z", "closed_at": "2020-08-10T13:53:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. After last updatet when loading cookies from a file, it gives an error\r\n\r\n**http/cookiejar.py\", line 1947, in _really_load\r\ndomain_specified = domain.startswith(\".\")\r\nAttributeError: 'NoneType' object has no attribute 'startswith'**\r\n\r\n```python\r\nimport os\r\nfrom http.cookiejar import LWPCookieJar\r\nimport httpx\r\n\r\nh = httpx.Client(cookies=LWPCookieJar('test'))\r\nif os.path.isfile('test'):\r\n    h.cookies.jar.load()\r\nh.get('https://www.google.ru')\r\nh.cookies.jar.save()\r\n```\r\n\r\n**Cookies file - httpx 0.13.3**\r\n#LWP-Cookies-2.0\r\nSet-Cookie3: 1P_JAR=\"2020-08-08-21\"; path=\"/\"; domain=\".google.ru\"; path_spec; domain_dot; secure; expires=\"2020-09-07 21:47:19Z\"; version=0\r\nSet-Cookie3: NID=\"204=CQ898UjmES*****************************ctxJAE99ngLlZcojaaWLrqex-td7X00PooPgmVnW61VrtwCHIPSb_CPR8Ic6dpD_gRY_pBteV_4YSGU7Vu58V7uHPwNcPxZ6PMCAHt-RZSPgnxcoM\"; path=\"/\"; domain=\".google.ru\"; path_spec; domain_dot; expires=\"2021-02-07 21:47:19Z\"; HttpOnly=None; version=0\r\n\r\n**Cookies file - httpx 0.14.0**\r\n#LWP-Cookies-2.0\r\nSet-Cookie3: 1P_JAR=\"2020-08-08-21\"; path=\"/\"; domain=\".google.ru\"; path_spec; domain_dot; expires=\"2020-09-07 21:50:09Z\"; HttpOnly=None; Secure, NID=\"204=NCk0**********************xnr8aaHwCrC-zMdQQ9bAS5QAp6rfv-yOiuwkYDhiN7kTyDASjlZVIJ0Zase-JQMH_YwCvaiS9I232kIRu36O684kwHD_nRXHeUVpTJTlS7mbniFmebf5nhE\"; version=0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1147", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1147/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1147/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1147/events", "html_url": "https://github.com/encode/httpx/issues/1147", "id": 675239542, "node_id": "MDU6SXNzdWU2NzUyMzk1NDI=", "number": 1147, "title": "Headers order", "user": {"login": "qo4on", "id": 35609308, "node_id": "MDQ6VXNlcjM1NjA5MzA4", "avatar_url": "https://avatars2.githubusercontent.com/u/35609308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qo4on", "html_url": "https://github.com/qo4on", "followers_url": "https://api.github.com/users/qo4on/followers", "following_url": "https://api.github.com/users/qo4on/following{/other_user}", "gists_url": "https://api.github.com/users/qo4on/gists{/gist_id}", "starred_url": "https://api.github.com/users/qo4on/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qo4on/subscriptions", "organizations_url": "https://api.github.com/users/qo4on/orgs", "repos_url": "https://api.github.com/users/qo4on/repos", "events_url": "https://api.github.com/users/qo4on/events{/privacy}", "received_events_url": "https://api.github.com/users/qo4on/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-07T19:50:10Z", "updated_at": "2020-08-08T08:40:13Z", "closed_at": "2020-08-08T08:40:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to see/modify the raw headers order of the request?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1146", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1146/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1146/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1146/events", "html_url": "https://github.com/encode/httpx/issues/1146", "id": 675099885, "node_id": "MDU6SXNzdWU2NzUwOTk4ODU=", "number": 1146, "title": "`allow_redirects` with `httpx.head(...)`", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}, {"id": 1627431921, "node_id": "MDU6TGFiZWwxNjI3NDMxOTIx", "url": "https://api.github.com/repos/encode/httpx/labels/refactor", "name": "refactor", "color": "fcc1bd", "default": false, "description": "Issues and PRs related to code refactoring"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/1", "html_url": "https://github.com/encode/httpx/milestone/1", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/1/labels", "id": 4660186, "node_id": "MDk6TWlsZXN0b25lNDY2MDE4Ng==", "number": 1, "title": "v1.0", "description": "", "creator": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "open_issues": 9, "closed_issues": 28, "state": "open", "created_at": "2019-09-15T12:23:30Z", "updated_at": "2020-08-21T11:30:58Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2020-08-07T15:44:22Z", "updated_at": "2020-08-16T05:33:47Z", "closed_at": "2020-08-16T05:33:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We've currently got a different `allow_redirects` default on HEAD requests to all other request methods.\r\n\r\nhttps://github.com/encode/httpx/blob/a25d924bb910e85ca597c7b4ed819c6e9e17aecd/httpx/_api.py#L217\r\n\r\nThis is in line with behaviour in `requests`, but I'm not convinced it's something we ought to do. It'd seem to me that we'd do better just to stay consistent rather than have this odd exclusion. I get why it *could* be a reasonable choice, but I think it'd *probably* be better to just stay consistent, and allow the user to switch `allow_redirects=False` if that's their intent.\r\n\r\nFlagging this to be addressed pre-1.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1144", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1144/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1144/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1144/events", "html_url": "https://github.com/encode/httpx/issues/1144", "id": 675075863, "node_id": "MDU6SXNzdWU2NzUwNzU4NjM=", "number": 1144, "title": "Packaging dependancy tweaks", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}, {"id": 1627431921, "node_id": "MDU6TGFiZWwxNjI3NDMxOTIx", "url": "https://api.github.com/repos/encode/httpx/labels/refactor", "name": "refactor", "color": "fcc1bd", "default": false, "description": "Issues and PRs related to code refactoring"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/1", "html_url": "https://github.com/encode/httpx/milestone/1", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/1/labels", "id": 4660186, "node_id": "MDk6TWlsZXN0b25lNDY2MDE4Ng==", "number": 1, "title": "v1.0", "description": "", "creator": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "open_issues": 9, "closed_issues": 28, "state": "open", "created_at": "2019-09-15T12:23:30Z", "updated_at": "2020-08-21T11:30:58Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2020-08-07T15:03:46Z", "updated_at": "2020-08-21T11:30:58Z", "closed_at": "2020-08-21T11:30:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "* Include `rfc3986` as `rfc3986[idna2008]`, and *don't* include the `idna` dependancy ourselves.\r\n* Add an `extra_requires = {\"brotli\": \"brotlipy==0.7.*\"'}`\r\n* Update our dependancy info in the docs/index.md and README.md\r\n\r\n---\r\n\r\nOur 1.0 release deps ought to look like this...\r\n\r\n* `httpcore` - The underlying transport implementation for `httpx`.\r\n  * `h11` - HTTP/1.1 support.\r\n  * `h2` - HTTP/2 support. *(Optional, `pip install httpx[http2]`)*\r\n* `rfc3986` - URL parsing & normalization.\r\n    * `idna` - Internationalized domain name support.\r\n* `certifi` - SSL certificates.\r\n* `sniffio` - Async library autodetection.\r\n* `brotlipy` - Decoding for \"brotli\" compressed responses. *(Optional, `pip install httpx[brotli]`)*\r\n\r\n**Note that I've dropped the following...**\r\n\r\n* `chardet` - Fallback auto-detection for response encoding.  **- See #1018**\r\n* `urllib3` - Support for the `httpx.URLLib3Transport` class. *(Optional)* **- See https://github.com/encode/httpx/issues/1143**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1136", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1136/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1136/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1136/events", "html_url": "https://github.com/encode/httpx/issues/1136", "id": 674230346, "node_id": "MDU6SXNzdWU2NzQyMzAzNDY=", "number": 1136, "title": "Consider reverting headers set-like views", "user": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1627431921, "node_id": "MDU6TGFiZWwxNjI3NDMxOTIx", "url": "https://api.github.com/repos/encode/httpx/labels/refactor", "name": "refactor", "color": "fcc1bd", "default": false, "description": "Issues and PRs related to code refactoring"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-06T11:09:30Z", "updated_at": "2020-08-06T11:23:16Z", "closed_at": "2020-08-06T11:23:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Just a quick issue to track that we might want to revert #1114.\n\nIt adds set like views for headers but fails to implement the \"views should reflect mutations of the mapping\" part, leading to more ambiguous / buggy behavior than when we were obviously returning plain lists.\n\nThen maybe we should just treat this \"header views\" idea as a \"no\"...?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1131", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1131/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1131/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1131/events", "html_url": "https://github.com/encode/httpx/issues/1131", "id": 673623451, "node_id": "MDU6SXNzdWU2NzM2MjM0NTE=", "number": 1131, "title": "bash: /root/go/bin/httpx: cannot execute binary file: Exec format error", "user": {"login": "hackerparakh", "id": 61142061, "node_id": "MDQ6VXNlcjYxMTQyMDYx", "avatar_url": "https://avatars2.githubusercontent.com/u/61142061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackerparakh", "html_url": "https://github.com/hackerparakh", "followers_url": "https://api.github.com/users/hackerparakh/followers", "following_url": "https://api.github.com/users/hackerparakh/following{/other_user}", "gists_url": "https://api.github.com/users/hackerparakh/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackerparakh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackerparakh/subscriptions", "organizations_url": "https://api.github.com/users/hackerparakh/orgs", "repos_url": "https://api.github.com/users/hackerparakh/repos", "events_url": "https://api.github.com/users/hackerparakh/events{/privacy}", "received_events_url": "https://api.github.com/users/hackerparakh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-05T15:20:35Z", "updated_at": "2020-08-05T16:09:30Z", "closed_at": "2020-08-05T15:46:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- To help keep this issue tracker clean and focused, please make sure you tried *all* the following resources before submitting your question. -->\r\n\r\n- [ ] I searched the [HTTPX documentation](https://www.python-httpx.org) but couldn't find what I'm looking for.\r\n- [ ] I looked through similar issues on GitHub, but didn't find anything.\r\n- [ ] I looked up \"How to do ... in HTTPX\" on a search engine and didn't find any information.\r\n- [ ] I asked the [community chat](https://gitter.im/encode/community) for help.\r\n\r\n### Question\r\n\r\n<!-- Please ask your question here. -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1108", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1108/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1108/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1108/events", "html_url": "https://github.com/encode/httpx/issues/1108", "id": 670159135, "node_id": "MDU6SXNzdWU2NzAxNTkxMzU=", "number": 1108, "title": "Should HTTPError be a base class for RequestError and HTTPStatusError?", "user": {"login": "iwoloschin", "id": 6474586, "node_id": "MDQ6VXNlcjY0NzQ1ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6474586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iwoloschin", "html_url": "https://github.com/iwoloschin", "followers_url": "https://api.github.com/users/iwoloschin/followers", "following_url": "https://api.github.com/users/iwoloschin/following{/other_user}", "gists_url": "https://api.github.com/users/iwoloschin/gists{/gist_id}", "starred_url": "https://api.github.com/users/iwoloschin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iwoloschin/subscriptions", "organizations_url": "https://api.github.com/users/iwoloschin/orgs", "repos_url": "https://api.github.com/users/iwoloschin/repos", "events_url": "https://api.github.com/users/iwoloschin/events{/privacy}", "received_events_url": "https://api.github.com/users/iwoloschin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-07-31T19:50:52Z", "updated_at": "2020-08-03T19:06:19Z", "closed_at": "2020-08-03T19:06:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm going through some of my projects preparing them for the 0.14 release and it occurred to me that the following line may be confusing and trip folks up.\r\n\r\nhttps://github.com/encode/httpx/blob/9409900898f40ed855e9c7a7664b7e068599a07d/httpx/_exceptions.py#L282\r\n\r\nThis will break something like the following since the HTTPStatusError is now no longer caught, it'd just raise straight up and crash the program.\r\n```python\r\ntry:\r\n    r = httpx.get('https://httpbin.org/status/400')\r\n    r.raise_for_status()\r\nexcept httpx.HTTPError as error:\r\n    print(error)\r\n```\r\n\r\nInstead, can we change the line to:\r\n```python\r\nHTTPError = (HTTPStatusError, RequestError)\r\n```\r\n\r\nThat way at least something close to (or maybe exactly like?) the original functionality is maintained, at least until it is formally deprecated?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1106", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1106/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1106/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1106/events", "html_url": "https://github.com/encode/httpx/issues/1106", "id": 669752627, "node_id": "MDU6SXNzdWU2Njk3NTI2Mjc=", "number": 1106, "title": "Document the exception hierarchy ", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1625971726, "node_id": "MDU6TGFiZWwxNjI1OTcxNzI2", "url": "https://api.github.com/repos/encode/httpx/labels/docs", "name": "docs", "color": "4553a8", "default": false, "description": "Changes to the documentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/6", "html_url": "https://github.com/encode/httpx/milestone/6", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/6/labels", "id": 5701831, "node_id": "MDk6TWlsZXN0b25lNTcwMTgzMQ==", "number": 6, "title": "v0.14", "description": "", "creator": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 32, "state": "closed", "created_at": "2020-07-27T09:09:04Z", "updated_at": "2020-08-07T15:10:11Z", "due_on": "2020-07-31T07:00:00Z", "closed_at": "2020-08-07T15:10:11Z"}, "comments": 1, "created_at": "2020-07-31T12:12:21Z", "updated_at": "2020-08-07T13:17:50Z", "closed_at": "2020-08-07T13:17:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We've put a stack of great work into this for 0.14 - let's also show it off.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1105", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1105/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1105/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1105/events", "html_url": "https://github.com/encode/httpx/issues/1105", "id": 669702879, "node_id": "MDU6SXNzdWU2Njk3MDI4Nzk=", "number": 1105, "title": "On `proxies={\"http\": ...}` vs. `proxies={\"http://\": ...}`", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/6", "html_url": "https://github.com/encode/httpx/milestone/6", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/6/labels", "id": 5701831, "node_id": "MDk6TWlsZXN0b25lNTcwMTgzMQ==", "number": 6, "title": "v0.14", "description": "", "creator": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 32, "state": "closed", "created_at": "2020-07-27T09:09:04Z", "updated_at": "2020-08-07T15:10:11Z", "due_on": "2020-07-31T07:00:00Z", "closed_at": "2020-08-07T15:10:11Z"}, "comments": 1, "created_at": "2020-07-31T11:10:24Z", "updated_at": "2020-08-05T17:41:51Z", "closed_at": "2020-08-05T17:41:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently we're in line with `requests` in supporting \"all\", \"http\", and \"https\" as valid proxy keys.\r\n\r\nInternally we handle those as URL patterns that we can match against, and eg. `\"http\"` is *actually* mapped to `\"http://\"`.\r\n\r\nI'm wondering if we might have better internal consistency by...\r\n\r\n* Raising a warning on base usage of \"all\", \"http\", \"https\", later escalating this to an error.\r\n* Instead requiring an explicit \"all://\", \"http://\", \"https://\", all of which properly parse directly as URLs.\r\n\r\nMy feeling is that doing so would create a nicer consistency, and also has a subtle indication to developers about what is actually going on here.\r\n\r\nFor example...\r\n\r\n`proxies={\"http://\": httpx.Proxies(...)}` neatly implies that `proxies={\"http://www.example.com\": httpx.Proxies(...)}` might also be a valid thing to do, which indeed it is.\r\n\r\nAllowing `proxies={\"http\": httpx.Proxies(...)}` makes it less obvious that the key is a general purpose URL pattern.\r\n\r\n~~Additionally this change means that other usages will end up with more expected behaviors, eg. `proxies={\"www.example.com\": ...}` will do what you'd expect, rather than mapping to `proxies={\"www.example.com://\": ...}` which is what we currently do.~~ - Not true, that'd parse as scheme='', host='', path='www.example.com'. Instead we'd probably want to be strict and ensure that only absolute URLs are allowed as pattern keys. (While still including a graceful deprecation for plain \"http\", \"https\", \"all\")\r\n\r\nThis becomes doubly relevant once we introduce a mount API, which will use the same URL pattern style for it's API, as current `proxies=...` argument.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1102", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1102/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1102/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1102/events", "html_url": "https://github.com/encode/httpx/issues/1102", "id": 668455674, "node_id": "MDU6SXNzdWU2Njg0NTU2NzQ=", "number": 1102, "title": "Consider dropping HSTS preloading", "user": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1522869826, "node_id": "MDU6TGFiZWwxNTIyODY5ODI2", "url": "https://api.github.com/repos/encode/httpx/labels/tls+pki", "name": "tls+pki", "color": "033166", "default": false, "description": "Issues and PRs related to TLS and PKI"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/1", "html_url": "https://github.com/encode/httpx/milestone/1", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/1/labels", "id": 4660186, "node_id": "MDk6TWlsZXN0b25lNDY2MDE4Ng==", "number": 1, "title": "v1.0", "description": "", "creator": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "open_issues": 9, "closed_issues": 28, "state": "open", "created_at": "2019-09-15T12:23:30Z", "updated_at": "2020-08-21T11:30:58Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-07-30T07:47:09Z", "updated_at": "2020-08-05T12:05:46Z", "closed_at": "2020-08-05T12:05:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Prompted by https://github.com/encode/httpx/issues/1025#issuecomment-661269344\r\n\r\nIssues like #1025 should prompt us to reconsider whether using HSTS preloading from a server-side client (introduced via #151) is a sensible thing to do at all.\r\n\r\nKey points of reasoning here:\r\n\r\n- While it mimics the way browsers behave, and [hstspreload](https://github.com/sethmlarson/hstspreload) is a super valuable library, from a UX perspective it can lead to ambiguous behaviors (#896) and cases when you _really_ don't want HSTS preload to kick in (like in #1025).\r\n- Crucially, from #124 it seems that HSTS preloading was introduced as a way to tackle \"schema-less URLs\". As of today HTTPX _requires_ a schema on URLs, so if it was the initial motivation then it is now irrelevant. Besides, we can assume that developers are generally very aware of their choices to use `http://` vs `https://` on the server-side (as opposed to browser users just entering the domain name without a schema).\r\n\r\nSome options are:\r\n\r\n- Add a toggle so that HSTS preload becomes opt-in or opt-out.\r\n- Drop HSTS functionality entirely.\r\n\r\nGiven all the context points above, we might want to just go with option 2).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1101", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1101/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1101/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1101/events", "html_url": "https://github.com/encode/httpx/issues/1101", "id": 668401996, "node_id": "MDU6SXNzdWU2Njg0MDE5OTY=", "number": 1101, "title": "An open stream object is being garbage collected; call \"stream.close()\" explicitly.", "user": {"login": "klen", "id": 90699, "node_id": "MDQ6VXNlcjkwNjk5", "avatar_url": "https://avatars2.githubusercontent.com/u/90699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klen", "html_url": "https://github.com/klen", "followers_url": "https://api.github.com/users/klen/followers", "following_url": "https://api.github.com/users/klen/following{/other_user}", "gists_url": "https://api.github.com/users/klen/gists{/gist_id}", "starred_url": "https://api.github.com/users/klen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klen/subscriptions", "organizations_url": "https://api.github.com/users/klen/orgs", "repos_url": "https://api.github.com/users/klen/repos", "events_url": "https://api.github.com/users/klen/events{/privacy}", "received_events_url": "https://api.github.com/users/klen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068459, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU5", "url": "https://api.github.com/repos/encode/httpx/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-30T06:11:08Z", "updated_at": "2020-07-30T07:29:31Z", "closed_at": "2020-07-30T07:28:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n- [x ] The bug is reproducible against the latest release and/or `master`.\r\n- [x ] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nIn my case, I don't need to read responses body, so I use `AsyncClient.stream` functionality.\r\nSince version 0.13 `httpx` has started to show the warning message: `An open stream object is being garbage collected; call \"stream.close()\" explicitly.`. \r\n\r\n### To reproduce\r\n\r\n```python\r\nimport asyncio as aio\r\nimport httpx\r\n\r\nclient = httpx.AsyncClient()\r\nloop = aio.get_event_loop()\r\n\r\nasync def reproduce():\r\n    async with client.stream('GET', 'https://github.com') as res:\r\n        print('Response:', res.status_code)\r\n\r\nloop.run_until_complete(reproduce())\r\n\r\n```\r\n**Output:**\r\n```\r\nResponse: 200\r\nAn open stream object is being garbage collected; call \"stream.close()\" explicitly.\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo warning messages\r\n\r\n\r\n### Environment\r\n\r\n- OS: MacOS\r\n- Python version: 3.8.0\r\n- HTTPX version: 0.13.3\r\n- Async environment: asyncio\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1100", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1100/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1100/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1100/events", "html_url": "https://github.com/encode/httpx/issues/1100", "id": 668247871, "node_id": "MDU6SXNzdWU2NjgyNDc4NzE=", "number": 1100, "title": "HTTP/2 fails to negotiate SETTINGS with remote before initial HEADERS", "user": {"login": "valiant1x", "id": 29789261, "node_id": "MDQ6VXNlcjI5Nzg5MjYx", "avatar_url": "https://avatars0.githubusercontent.com/u/29789261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valiant1x", "html_url": "https://github.com/valiant1x", "followers_url": "https://api.github.com/users/valiant1x/followers", "following_url": "https://api.github.com/users/valiant1x/following{/other_user}", "gists_url": "https://api.github.com/users/valiant1x/gists{/gist_id}", "starred_url": "https://api.github.com/users/valiant1x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valiant1x/subscriptions", "organizations_url": "https://api.github.com/users/valiant1x/orgs", "repos_url": "https://api.github.com/users/valiant1x/repos", "events_url": "https://api.github.com/users/valiant1x/events{/privacy}", "received_events_url": "https://api.github.com/users/valiant1x/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1504075511, "node_id": "MDU6TGFiZWwxNTA0MDc1NTEx", "url": "https://api.github.com/repos/encode/httpx/labels/http/2", "name": "http/2", "color": "0c2cfc", "default": false, "description": "Issues and PRs related to HTTP/2"}, {"id": 1475176878, "node_id": "MDU6TGFiZWwxNDc1MTc2ODc4", "url": "https://api.github.com/repos/encode/httpx/labels/interop", "name": "interop", "color": "930b39", "default": false, "description": "Issues interoperating with existing websites and services"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-30T00:07:04Z", "updated_at": "2020-07-30T15:40:46Z", "closed_at": "2020-07-30T15:32:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nSome Akamai servers are rejecting connections made through sync httpx client with `http2=True`. It seems that the chunking of frames 0 and 1 together in the initial outbound TCP packet, and lack of httpx/h2 client to negotiate SETTINGS before sending the initial `HEADERS` in frame 1, is causing some rejection by Akamai anti-bot measures.\r\n\r\n### To reproduce\r\n\r\n<!-- Provide a *minimal* example with steps to reproduce the bug locally.\r\n\r\nNOTE: try to keep any external dependencies *at an absolute minimum* (servers, proxies, certificates...).\r\nIn other words, remove anything that doesn't make the bug go away.\r\n\r\nIf you need a local server to replicate against, you can build one using eg. Starlette [0] and Uvicorn [1], or any tool you feel comfortable with. Check out other issues for examples and remember to share setup instructions here. :-)\r\n\r\n[0]: https://www.starlette.io\r\n[1]: https://www.uvicorn.org\r\n-->\r\n\r\n```python\r\n        import httpx\r\n        #use custom ssl context - consider ssl_context.keylog_filename to decrypt HTTP/2 traffic\r\n        ctx = HttpxSslContext.getContext()\r\n        #WORKING with proper HTTP/2 SETTINGS sent and received (and ACK'd) before sending HEADERS: use mitmproxy\r\n        proxies = { 'http': 'http://localhost:8080', 'https': 'http://localhost:8080' }\r\n        client = httpx.Client(http2=True, verify=ctx, proxies=proxies, timeout=10)\r\n        response = client.get('https://http2.pro/')\r\n\r\n         #NOT working: do not use mitmproxy and instead rely upon httpx HTTP/2 handling\r\n        client = httpx.Client(http2=True, verify=ctx, timeout=10)\r\n        response = client.get('https://http2.pro/')\r\n```\r\n\r\n### Expected behavior\r\n\r\n<!-- A clear and concise description of what you expected to happen. -->\r\nOur HTTP/2 client should initially only send Magic (PRI) and SETTINGS to the server, allow server to acknowledge the SETTINGS, perform negotiation, and a final ACK of server accepted settings before sending initial HEADERS. This is to follow the iPhone user-agent behavior. Example using mitmproxy:\r\n\r\n![image](https://user-images.githubusercontent.com/29789261/88865220-ec869d00-d1cc-11ea-9f03-211dbb3aa4a2.png)\r\n\r\n### Actual behavior\r\n\r\n<!-- A clear and concise description of what actually happens. -->\r\nhttpx combines the initial Magic (PRI), SETTINGS and WINDOW_UPDATE into the same initial outgoing packet as the HEADER.\r\n\r\n![image](https://user-images.githubusercontent.com/29789261/88865646-0aa0cd00-d1ce-11ea-8b7e-b57d8694ccbf.png)\r\n![image](https://user-images.githubusercontent.com/29789261/88865708-2b692280-d1ce-11ea-889d-00a2dd9ed903.png)\r\n\r\n### Debugging material\r\n\r\n<!-- Any tracebacks, screenshots, etc. that can help understanding the problem.\r\n\r\nNOTE:\r\n- Please list tracebacks in full (don't truncate them).\r\n- If relevant, consider turning on DEBUG or TRACE logs for additional details (see https://www.python-httpx.org/environment_variables/#httpx_log_level).\r\n- Consider using `<details>` to make tracebacks/logs collapsible if they're very large (see https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d).\r\n-->\r\n\r\n### Environment\r\n\r\n- OS: Windows\r\n- Python version: 3.8.2\r\n- HTTPX version: 0.13.3\r\n- Async environment: n/a, using sync\r\n- HTTP proxy: Yes, issue occurs without proxy as well.\r\n- Custom certificates: N/A\r\n\r\n### Additional context\r\n\r\n<!-- Any additional information that can help understanding the problem.\r\n\r\nEg. linked issues, or a description of what you were trying to achieve. -->\r\nThe goal is to follow an iOS user-agent correctly, otherwise, Akamai detects some abnormality and returns `400 Bad Request`\r\n\r\nThe sample site provided above (http2.pro) is not the actual Akamai site triggering the issue.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1094", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1094/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1094/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1094/events", "html_url": "https://github.com/encode/httpx/issues/1094", "id": 666208821, "node_id": "MDU6SXNzdWU2NjYyMDg4MjE=", "number": 1094, "title": "Renaming PoolLimits -> Limits.", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/6", "html_url": "https://github.com/encode/httpx/milestone/6", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/6/labels", "id": 5701831, "node_id": "MDk6TWlsZXN0b25lNTcwMTgzMQ==", "number": 6, "title": "v0.14", "description": "", "creator": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 32, "state": "closed", "created_at": "2020-07-27T09:09:04Z", "updated_at": "2020-08-07T15:10:11Z", "due_on": "2020-07-31T07:00:00Z", "closed_at": "2020-08-07T15:10:11Z"}, "comments": 1, "created_at": "2020-07-27T11:10:24Z", "updated_at": "2020-08-01T19:44:59Z", "closed_at": "2020-08-01T19:44:59Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Another 1.0 final run-in bit of polishing here...\r\n\r\nI think we should probably renaming `pool_limits=...` to `limits=...` and `httpx.PoolLimits(...)` to `httpx.Limits(...)`.\r\nIf we *are* going to do this, then we should do so with a gentle deprecation, and we should target 0.14.\r\n\r\nThere's two motivations here...\r\n\r\n* Prefer a more concise style.\r\n* At some point we may have limits that are *not* strictly to do with the connection pool. (For example, it'd be helpful particularly with the AsyncClient to be able to enforce a client-wide max concurrent outgoing requests. Which we might just want to unilaterally apply across *all* mounted transports/proxies)\r\n\r\nI'm open to push back on this if anyone thinks this is a bit over-zealous, and I *am* mindful that it introduces a bit of thrash. On the flip side, if there's a time to do this, then pre-1.0 is the time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1093", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1093/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1093/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1093/events", "html_url": "https://github.com/encode/httpx/issues/1093", "id": 666204935, "node_id": "MDU6SXNzdWU2NjYyMDQ5MzU=", "number": 1093, "title": "More concise Timeout parameters.", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/6", "html_url": "https://github.com/encode/httpx/milestone/6", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/6/labels", "id": 5701831, "node_id": "MDk6TWlsZXN0b25lNTcwMTgzMQ==", "number": 6, "title": "v0.14", "description": "", "creator": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 32, "state": "closed", "created_at": "2020-07-27T09:09:04Z", "updated_at": "2020-08-07T15:10:11Z", "due_on": "2020-07-31T07:00:00Z", "closed_at": "2020-08-07T15:10:11Z"}, "comments": 0, "created_at": "2020-07-27T11:04:35Z", "updated_at": "2020-08-01T18:59:02Z", "closed_at": "2020-08-01T18:59:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Follow up to #1085\r\n\r\nSince we're on out final 1.0 polishing run-in I think we should place the `httpx.Timeout(5.0, connect_timeout=60.0)` style on a gentle deprecation with 0.14, in favour of the more concise style of `httpx.Timeout(5.0, connect=60.0)`.\r\n\r\nI'm milestoning this for 0.14 so that we can track the remaining items for it, and aim for a release sometime this week.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1092", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1092/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1092/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1092/events", "html_url": "https://github.com/encode/httpx/issues/1092", "id": 666172553, "node_id": "MDU6SXNzdWU2NjYxNzI1NTM=", "number": 1092, "title": "Version 1.0, working notes.", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/1", "html_url": "https://github.com/encode/httpx/milestone/1", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/1/labels", "id": 4660186, "node_id": "MDk6TWlsZXN0b25lNDY2MDE4Ng==", "number": 1, "title": "v1.0", "description": "", "creator": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "open_issues": 9, "closed_issues": 28, "state": "open", "created_at": "2019-09-15T12:23:30Z", "updated_at": "2020-08-21T11:30:58Z", "due_on": null, "closed_at": null}, "comments": 7, "created_at": "2020-07-27T10:19:19Z", "updated_at": "2020-08-07T15:45:15Z", "closed_at": "2020-08-07T15:45:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Here are my current working notes on our remaining 1.0 items...\r\n\r\nHTTPX 1.0\r\n\r\n* [x] Exception hierarchy. *- See https://github.com/encode/httpx/issues/949#issuecomment-661804949, #1095*\r\n* [ ] Drop chardet. *- See https://github.com/encode/httpx/pull/1078#issuecomment-662971297*\r\n* [x] Optional HTTP/2 installs. *- See https://github.com/encode/httpcore/pull/121*\r\n* [x] Drop HSTS. *- See https://github.com/encode/httpx/issues/1102*\r\n* [ ] Drop URLLib3Transport into external package.\r\n* [ ] Context managed transports. *- See https://github.com/encode/httpx/pull/998#issuecomment-653519294 tho I need to explain this one more thoroughly.*\r\n\r\nMinor:\r\n\r\n* [x] Drop `httpx.StatusCodes` in favour of `httpx.codes`. *See #1088*\r\n* [x] `PoolLimits` -> `Limits`, `pool_limits` -> `limits`.\r\n* [x] Strict Timeout(...) defaults. Simplify keyword arguments. *See #1085*\r\n* [ ] Review all methods/attributes on the models classes. *Eg. See #1089. Also `.call_next` might need to be private. `.timer` might need looking at.*\r\n* [x] `httpx.create_ssl_context(...)` *- See https://github.com/encode/httpx/issues/983*\r\n\r\nNot strictly required, but worth looking at:\r\n\r\n* Review `rfc3986` vs. `irl` vs. `urlcore`. *- See https://github.com/encode/httpx/issues/328#issuecomment-664253854*\r\n* Mount API. *- See #977. Not strictly required for 1.0, but we want to make sure we've handling managed transports properly, and not missing any low-level `httpcore` API required to support them.*\r\n* Expose ContentStream API. *Perhaps?*\r\n* Upgrade API. *- See https://github.com/encode/httpx/issues/304#issuecomment-664207367*\r\n* Server side requests and responses. *- See #1091*\r\n\r\n---\r\n\r\n## API Reference\r\n\r\nHere's a high-level API reference...\r\n\r\n### Helper functions\r\n\r\n`request`, `stream`, `get`, `options`, `head`, `post`, `put`, `patch`, `delete`\r\n\r\n### Clients\r\n\r\n`Client`, `AsyncClient`\r\n\r\n### Models\r\n\r\n`Response`, `Request`, `URL`, `QueryParams`, `Headers`, `Cookies`\r\n\r\n### Configuration\r\n\r\n`Limits`, `Proxy`, `Timeout`\r\n\r\n### Authentication\r\n\r\n`Auth`, `BasicAuth`, `DigestAuth`\r\n\r\n\r\n### Transports\r\n\r\n`ASGITransport`, `WSGITransport`\r\n\r\n### Status Codes\r\n\r\n`codes`\r\n\r\n### Exceptions\r\n\r\n* `RequestError` *All exceptions that can occur during a `.request()`*\r\n    * `TransportError` *These all have counterparts in `httpcore`*\r\n        * `TimeoutException`\r\n            * `ConnectTimeout`\r\n            * `ReadTimeout`\r\n            * `WriteTimeout`\r\n            * `PoolTimeout`\r\n        * `NetworkError`\r\n            * `ConnectError`\r\n            * `ReadError`\r\n            * `WriteError`\r\n            * `CloseError`\r\n        * `ProxyError`\r\n        * `ProtocolError`\r\n    * `DecodingError`\r\n        * `ContentDecodingError`\r\n        * `TextDecodingError`\r\n    * `TooManyRedirects`\r\n    * `RequestBodyUnavailable`\r\n    * `InvalidURL`\r\n* `HTTPStatusError` *- Occurs during `.raise_for_status`*\r\n* `NotRedirectResponse` *- Occurs if calling `.next()` without properly checking `.is_redirect_response`*\r\n* `CookieConflict` *- Can occur with `response.cookies.get(...)`*\r\n* `StreamError`\r\n    * `StreamConsumed` *- Occurs if attempting to iterate over the stream twice*\r\n    * `ResponseNotRead` *- Occurs if accessing `.content` without having `.read()` the stream*\r\n    * `RequestNotRead` *- Occurs if accessing `.content` without having `.read()` the stream*\r\n    * `ResponseClosed` *- Occurs if attempting to read the stream after response is already closed*\r\n\r\n---\r\n\r\n## Dependencies\r\n\r\nHere's how our lovely & minimal core non-optional dependancies would look...\r\nDepending on our assessment of https://github.com/encode/httpx/issues/328#issuecomment-664253854\r\n\r\n* `httpcore`\r\n    * `h11`\r\n    * `sniffio`\r\n* `rfc3986 `\r\n    * `idna`\r\n* `certifi`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1082", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1082/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1082/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1082/events", "html_url": "https://github.com/encode/httpx/issues/1082", "id": 665036686, "node_id": "MDU6SXNzdWU2NjUwMzY2ODY=", "number": 1082, "title": "Should we support bare hostnames in `ALL_PROXY`,`HTTP_PROXY`, `HTTPS_PROXY`?", "user": {"login": "hjlarry", "id": 25834719, "node_id": "MDQ6VXNlcjI1ODM0NzE5", "avatar_url": "https://avatars0.githubusercontent.com/u/25834719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjlarry", "html_url": "https://github.com/hjlarry", "followers_url": "https://api.github.com/users/hjlarry/followers", "following_url": "https://api.github.com/users/hjlarry/following{/other_user}", "gists_url": "https://api.github.com/users/hjlarry/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjlarry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjlarry/subscriptions", "organizations_url": "https://api.github.com/users/hjlarry/orgs", "repos_url": "https://api.github.com/users/hjlarry/repos", "events_url": "https://api.github.com/users/hjlarry/events{/privacy}", "received_events_url": "https://api.github.com/users/hjlarry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1787082381, "node_id": "MDU6TGFiZWwxNzg3MDgyMzgx", "url": "https://api.github.com/repos/encode/httpx/labels/discussion", "name": "discussion", "color": "d0c7fc", "default": false, "description": ""}, {"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}, {"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-24T09:14:35Z", "updated_at": "2020-08-02T09:48:10Z", "closed_at": "2020-08-02T09:48:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n<!-- A clear and concise description of what the bug is. -->\r\nI am a new user for httpx, and I just install it, then try to run it in python REPL.\r\nI type `httpx.get('https://www.github.com')`  and then got the \"No scheme included in URL\".\r\nSo I try to debug it, and finally I found that because I set the `export ALL_PROXY=127.0.0.1:7890` in the shell, the proxy does not have a scheme. \r\nThis proxy set is correct for when I use curl\u3001brew and many other programe, So it should also work fun in httpx?\r\nfor any other reason httpx must have the scheme, I think it should prompt \"a proxy set error\" at least.\r\n\r\n\r\n### Debugging material\r\n\r\n```\r\n~/projects \u00bb python3                                                                                                       hejl@hejldeIMAC\r\nPython 3.8.4 (default, Jul 14 2020, 02:58:48) \r\n[Clang 11.0.3 (clang-1103.0.32.62)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import httpx\r\n>>> httpx.get(\"https://www.github.com\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.8/site-packages/httpx/_api.py\", line 159, in get\r\n    return request(\r\n  File \"/usr/local/lib/python3.8/site-packages/httpx/_api.py\", line 83, in request\r\n    with Client(\r\n  File \"/usr/local/lib/python3.8/site-packages/httpx/_client.py\", line 467, in __init__\r\n    proxy_map = self.get_proxy_map(proxies, trust_env)\r\n  File \"/usr/local/lib/python3.8/site-packages/httpx/_client.py\", line 87, in get_proxy_map\r\n    return {\r\n  File \"/usr/local/lib/python3.8/site-packages/httpx/_client.py\", line 88, in <dictcomp>\r\n    key: Proxy(url=url)\r\n  File \"/usr/local/lib/python3.8/site-packages/httpx/_config.py\", line 335, in __init__\r\n    url = URL(url)\r\n  File \"/usr/local/lib/python3.8/site-packages/httpx/_models.py\", line 90, in __init__\r\n    raise InvalidURL(\"No scheme included in URL.\")\r\nhttpx._exceptions.InvalidURL: No scheme included in URL.\r\n```\r\n\r\n### Environment\r\n\r\n- OS:  MacOS\r\n- Python version: 3.8.4\r\n- HTTPX version: 0.13.3\r\n- Async environment: no\r\n- HTTP proxy: yes  `127.0.0.1:7890`\r\n- Custom certificates: no\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1081", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1081/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1081/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1081/events", "html_url": "https://github.com/encode/httpx/issues/1081", "id": 664750385, "node_id": "MDU6SXNzdWU2NjQ3NTAzODU=", "number": 1081, "title": "tornado+httpx", "user": {"login": "toborobot", "id": 28528708, "node_id": "MDQ6VXNlcjI4NTI4NzA4", "avatar_url": "https://avatars2.githubusercontent.com/u/28528708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toborobot", "html_url": "https://github.com/toborobot", "followers_url": "https://api.github.com/users/toborobot/followers", "following_url": "https://api.github.com/users/toborobot/following{/other_user}", "gists_url": "https://api.github.com/users/toborobot/gists{/gist_id}", "starred_url": "https://api.github.com/users/toborobot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toborobot/subscriptions", "organizations_url": "https://api.github.com/users/toborobot/orgs", "repos_url": "https://api.github.com/users/toborobot/repos", "events_url": "https://api.github.com/users/toborobot/events{/privacy}", "received_events_url": "https://api.github.com/users/toborobot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1680756520, "node_id": "MDU6TGFiZWwxNjgwNzU2NTIw", "url": "https://api.github.com/repos/encode/httpx/labels/concurrency", "name": "concurrency", "color": "4635a0", "default": false, "description": "Issues related to concurrency and usage of async libraries"}, {"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-23T20:38:14Z", "updated_at": "2020-07-24T09:54:51Z", "closed_at": "2020-07-24T09:54:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Have not found any tips how to organize connection inside Tornado... Will You point me to it?\r\nWBR!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1068", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1068/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1068/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1068/events", "html_url": "https://github.com/encode/httpx/issues/1068", "id": 661141520, "node_id": "MDU6SXNzdWU2NjExNDE1MjA=", "number": 1068, "title": "SSL wrong version running with proxies", "user": {"login": "shineoos", "id": 59980769, "node_id": "MDQ6VXNlcjU5OTgwNzY5", "avatar_url": "https://avatars1.githubusercontent.com/u/59980769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shineoos", "html_url": "https://github.com/shineoos", "followers_url": "https://api.github.com/users/shineoos/followers", "following_url": "https://api.github.com/users/shineoos/following{/other_user}", "gists_url": "https://api.github.com/users/shineoos/gists{/gist_id}", "starred_url": "https://api.github.com/users/shineoos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shineoos/subscriptions", "organizations_url": "https://api.github.com/users/shineoos/orgs", "repos_url": "https://api.github.com/users/shineoos/repos", "events_url": "https://api.github.com/users/shineoos/events{/privacy}", "received_events_url": "https://api.github.com/users/shineoos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-19T23:05:50Z", "updated_at": "2020-07-20T09:28:08Z", "closed_at": "2020-07-20T08:18:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "System: Windows 10\r\nPython Version: 3.8.3\r\nError: httpcore._exceptions.ConnectError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1108)\r\n\r\nI get this error when I run with proxies, my proxies works with requests and aiohttp", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1067", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1067/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1067/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1067/events", "html_url": "https://github.com/encode/httpx/issues/1067", "id": 660014757, "node_id": "MDU6SXNzdWU2NjAwMTQ3NTc=", "number": 1067, "title": "Raise dedicated exception in `.raise_from_status()`", "user": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}, {"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-18T08:48:29Z", "updated_at": "2020-07-20T12:10:58Z", "closed_at": "2020-07-20T12:10:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Refs #949, spun up from #1064.\r\n\r\nCurrently `Response.raise_from_status()` raises a generic `HTTPError` exception.\r\n\r\nThe problematic side is that it is not possible to catch it separately without also catching all exceptions originating from HTTPX (since `HTTPError` is the base exception class).\r\n\r\nSo we should probably introduce a dedicated exception class, namely something like `HTTPStatusError`.\r\n\r\n_Note: there's an implementation of this in #869 but the PR also introduced some other changes (including renaming `HTTPError` to `RequestError` which is not really desirable as discussed in #1064)._", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1066", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1066/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1066/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1066/events", "html_url": "https://github.com/encode/httpx/issues/1066", "id": 659113884, "node_id": "MDU6SXNzdWU2NTkxMTM4ODQ=", "number": 1066, "title": "Public API tightening", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1627431921, "node_id": "MDU6TGFiZWwxNjI3NDMxOTIx", "url": "https://api.github.com/repos/encode/httpx/labels/refactor", "name": "refactor", "color": "fcc1bd", "default": false, "description": "Issues and PRs related to code refactoring"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/1", "html_url": "https://github.com/encode/httpx/milestone/1", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/1/labels", "id": 4660186, "node_id": "MDk6TWlsZXN0b25lNDY2MDE4Ng==", "number": 1, "title": "v1.0", "description": "", "creator": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "open_issues": 9, "closed_issues": 28, "state": "open", "created_at": "2019-09-15T12:23:30Z", "updated_at": "2020-08-21T11:30:58Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-07-17T10:19:31Z", "updated_at": "2020-08-17T12:51:53Z", "closed_at": "2020-08-17T12:51:53Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Following on from #1065\r\n\r\nThere's a few attributes that are set in `BaseClient.__init__` that look like contenders here for moving into the private API space. Here's what's remaining there...\r\n\r\n- [x] `self.base_url` - Potentially modify this to a property setter / getter style, but not 100% obvious?\r\n- [ ] `self.auth` - Potentially modify this to a property setter / getter style, but not 100% obvious? - _See #1185_\r\n- [x] `self.timeout` - Looks like it should *definitely* move to a property getter / setter style, as per params/headers/cookies.\r\n- [x] `self.max_redirects` - I think this one is okay as a public attribute, since it's just a plain int.\r\n- [x] `self.trust_env` - Setting this after `__init__` isn't really valid (eg. the transport is already initialized) so we could move it to a read-only property? _See #1112_\r\n- [x] `self.netrc` - Ought to be private. _See #1071_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1064", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1064/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1064/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1064/events", "html_url": "https://github.com/encode/httpx/issues/1064", "id": 658567461, "node_id": "MDU6SXNzdWU2NTg1Njc0NjE=", "number": 1064, "title": "Consider renaming `HTTPError` to `RequestError`", "user": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-16T21:02:05Z", "updated_at": "2020-07-18T08:49:24Z", "closed_at": "2020-07-18T08:49:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Spun up from https://github.com/encode/httpx/issues/867\r\n\r\nCurrently `httpx.HTTPError` serves as a base exception class, no problem. (In 0.13.x it wasn't the case because HTTPCore could raise independant exception due to a lack of mapping, but this was fixed via #1044 and #1045.)\r\n\r\n_However_ with #949 and 1.0 in mind, I think there's a case to be made for this exception to be renamed to something else, most likely `httpx.RequestError`.\r\n\r\nThe motivation discussed in #867 was to make `.raise_from_status()` raise a dedicated `HTTPStatusError` exception, _different from the base class_. (There's an implementation of this in in #869.) I _think_ it's a valid use case.\r\n\r\nBut either way another reason why I think `HTTPError` might not be ideal is that it's very close but different from `HTTPXError`, which feels a bit misleading (has an \"isn't it a typo?\" kind of vibe to it).\r\n\r\nSo, should we switch to `httpx.RequestError`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1062", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1062/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1062/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1062/events", "html_url": "https://github.com/encode/httpx/issues/1062", "id": 658235501, "node_id": "MDU6SXNzdWU2NTgyMzU1MDE=", "number": 1062, "title": "Don't call `should_not_be_proxied` on each request", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1569968265, "node_id": "MDU6TGFiZWwxNTY5OTY4MjY1", "url": "https://api.github.com/repos/encode/httpx/labels/perf", "name": "perf", "color": "c6017b", "default": false, "description": "Issues relating to performance"}, {"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/6", "html_url": "https://github.com/encode/httpx/milestone/6", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/6/labels", "id": 5701831, "node_id": "MDk6TWlsZXN0b25lNTcwMTgzMQ==", "number": 6, "title": "v0.14", "description": "", "creator": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 32, "state": "closed", "created_at": "2020-07-27T09:09:04Z", "updated_at": "2020-08-07T15:10:11Z", "due_on": "2020-07-31T07:00:00Z", "closed_at": "2020-08-07T15:10:11Z"}, "comments": 3, "created_at": "2020-07-16T14:09:47Z", "updated_at": "2020-07-31T09:11:50Z", "closed_at": "2020-07-31T09:11:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently we're calling `should_not_be_proxied` on each request, which is problematic for two reasons...\r\n\r\n* It's ignoring the `trust_env`, and relying on an environment variable unilaterally.\r\n* It's preforming an extra chunk of work on each request that we'd rather not do.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1061", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1061/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1061/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1061/events", "html_url": "https://github.com/encode/httpx/issues/1061", "id": 658192568, "node_id": "MDU6SXNzdWU2NTgxOTI1Njg=", "number": 1061, "title": "AttributeError exception if header value is None", "user": {"login": "tector", "id": 205455, "node_id": "MDQ6VXNlcjIwNTQ1NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/205455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tector", "html_url": "https://github.com/tector", "followers_url": "https://api.github.com/users/tector/followers", "following_url": "https://api.github.com/users/tector/following{/other_user}", "gists_url": "https://api.github.com/users/tector/gists{/gist_id}", "starred_url": "https://api.github.com/users/tector/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tector/subscriptions", "organizations_url": "https://api.github.com/users/tector/orgs", "repos_url": "https://api.github.com/users/tector/repos", "events_url": "https://api.github.com/users/tector/events{/privacy}", "received_events_url": "https://api.github.com/users/tector/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}, {"id": 1554830102, "node_id": "MDU6TGFiZWwxNTU0ODMwMTAy", "url": "https://api.github.com/repos/encode/httpx/labels/requests-compat", "name": "requests-compat", "color": "006b75", "default": false, "description": "Issues related to Requests backwards compatibility"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-07-16T13:20:45Z", "updated_at": "2020-07-17T12:23:44Z", "closed_at": "2020-07-17T12:23:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nHeader normalization fails if header value is None. \r\n\r\n### To reproduce\r\n\r\nSend a request with a header key but give it no value:\r\n\r\n```python\r\nasync with https.AsyncClient as client:\r\n    r = client.get(URL, headers={'foo': None})\r\n```\r\n\r\n### Expected behavior\r\n\r\nIgnore the header with None value (like 'requests' lib handle it)\r\n\r\n### Actual behavior\r\n\r\nGives AttributeError: 'NoneType' object has no attribute 'encode'\r\n\r\n### Debugging material\r\n\r\n```bash\r\n  File \"/home/ubuntu/.pyenv/versions/<REDACTED>/lib/python3.8/site-packages/httpx/_client.py\", line 1305, in get\r\n    return await self.request(\r\n  File \"/home/ubuntu/.pyenv/versions/<REDACTED>/lib/python3.8/site-packages/httpx/_client.py\", line 1137, in request\r\n    request = self.build_request(\r\n  File \"/home/ubuntu/.pyenv/versions/<REDACTED>/lib/python3.8/site-packages/httpx/_client.py\", line 195, in build_request\r\n    headers = self.merge_headers(headers)\r\n  File \"/home/ubuntu/.pyenv/versions/<REDACTED>/lib/python3.8/site-packages/httpx/_client.py\", line 242, in merge_headers\r\n    merged_headers.update(headers)\r\n  File \"/home/ubuntu/.pyenv/versions/<REDACTED>/lib/python3.8/site-packages/httpx/_models.py\", line 480, in update\r\n    headers = Headers(headers)\r\n  File \"/home/ubuntu/.pyenv/versions/<REDACTED>/lib/python3.8/site-packages/httpx/_models.py\", line 393, in __init__\r\n    self._list = [\r\n  File \"/home/ubuntu/.pyenv/versions/<REDACTED>/lib/python3.8/site-packages/httpx/_models.py\", line 394, in <listcomp>\r\n    (normalize_header_key(k, encoding), normalize_header_value(v, encoding))\r\n  File \"/home/ubuntu/.pyenv/versions/<REDACTED>/lib/python3.8/site-packages/httpx/_utils.py\", line 53, in normalize_header_value\r\n    return value.encode(encoding or \"ascii\")\r\nAttributeError: 'NoneType' object has no attribute 'encode'\r\n```\r\n\r\n### Environment\r\n\r\n- OS: Ubuntu 18.04.4 LTS\r\n- Python version: 3.8.2\r\n- HTTPX version: 0.13.3\r\n- Async environment: asyncio\r\n- HTTP proxy: yes\r\n- Custom certificates: no\r\n\r\n### Additional context\r\n\r\nI solved the problem when I deleted the Header key which had the None value. But for being compatible with the requests library I would expect to not do so.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1056", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1056/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1056/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1056/events", "html_url": "https://github.com/encode/httpx/issues/1056", "id": 654640619, "node_id": "MDU6SXNzdWU2NTQ2NDA2MTk=", "number": 1056, "title": "Save cookies to a file", "user": {"login": "Mavic111", "id": 39233057, "node_id": "MDQ6VXNlcjM5MjMzMDU3", "avatar_url": "https://avatars1.githubusercontent.com/u/39233057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mavic111", "html_url": "https://github.com/Mavic111", "followers_url": "https://api.github.com/users/Mavic111/followers", "following_url": "https://api.github.com/users/Mavic111/following{/other_user}", "gists_url": "https://api.github.com/users/Mavic111/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mavic111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mavic111/subscriptions", "organizations_url": "https://api.github.com/users/Mavic111/orgs", "repos_url": "https://api.github.com/users/Mavic111/repos", "events_url": "https://api.github.com/users/Mavic111/events{/privacy}", "received_events_url": "https://api.github.com/users/Mavic111/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-10T09:15:31Z", "updated_at": "2020-07-10T10:02:04Z", "closed_at": "2020-07-10T10:01:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- To help keep this issue tracker clean and focused, please make sure you tried *all* the following resources before submitting your question. -->\r\n\r\n- [x] I searched the [HTTPX documentation](https://www.python-httpx.org) but couldn't find what I'm looking for.\r\n- [x] I looked through similar issues on GitHub, but didn't find anything.\r\n- [x] I looked up \"How to do ... in HTTPX\" on a search engine and didn't find any information.\r\n- [x] I asked the [community chat](https://gitter.im/encode/community) for help.\r\n\r\n### Question\r\n\r\nI've been using this code in requests to save cookies to a file.\r\nsession = requests.Session()\r\njson.dump(session.cookies.get_dict(), open(cookies.txt, 'w'))\r\n\r\nand this code to open cookies file and set it to session cookies\r\ncookies = requests.utils.cookiejar_from_dict(json.load(open('Cookies/cookies.txt', 'r')))\r\nsession.cookies.update(cookies)\r\n\r\nHow i do that in httpx? because httpx.Client.cookies doesn't have get_dict attribute. \r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1051", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1051/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1051/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1051/events", "html_url": "https://github.com/encode/httpx/issues/1051", "id": 651024450, "node_id": "MDU6SXNzdWU2NTEwMjQ0NTA=", "number": 1051, "title": "Missing urllib3 import", "user": {"login": "andredias", "id": 902540, "node_id": "MDQ6VXNlcjkwMjU0MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/902540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andredias", "html_url": "https://github.com/andredias", "followers_url": "https://api.github.com/users/andredias/followers", "following_url": "https://api.github.com/users/andredias/following{/other_user}", "gists_url": "https://api.github.com/users/andredias/gists{/gist_id}", "starred_url": "https://api.github.com/users/andredias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andredias/subscriptions", "organizations_url": "https://api.github.com/users/andredias/orgs", "repos_url": "https://api.github.com/users/andredias/repos", "events_url": "https://api.github.com/users/andredias/events{/privacy}", "received_events_url": "https://api.github.com/users/andredias/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2057576465, "node_id": "MDU6TGFiZWwyMDU3NTc2NDY1", "url": "https://api.github.com/repos/encode/httpx/labels/external", "name": "external", "color": "f7de3d", "default": false, "description": "Root cause pending resolution in an external dependency"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-05T08:15:20Z", "updated_at": "2020-07-05T14:37:56Z", "closed_at": "2020-07-05T14:37:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since I updated from `httpx` 0.12.1 to 0.13.3 I get the error `invalid module name: 'urllib3.exceptions'`. I suspect it is specifically related to `httpx` because of this difference in `poetry.lock`, which shows that `urllib3` is not a dependency anymore:\r\n\r\n```diff\r\n@@ -113,18 +101,16 @@\r\n name = \"httpx\"\r\n optional = false\r\n python-versions = \">=3.6\"\r\n-version = \"0.12.1\"\r\n+version = \"0.13.3\"\r\n \r\n [package.dependencies]\r\n certifi = \"*\"\r\n chardet = \">=3.0.0,<4.0.0\"\r\n-h11 = \">=0.8,<0.10\"\r\n-h2 = \">=3.0.0,<4.0.0\"\r\n hstspreload = \"*\"\r\n+httpcore = \">=0.9.0,<0.10.0\"\r\n idna = \">=2.0.0,<3.0.0\"\r\n rfc3986 = \">=1.3,<2\"\r\n-sniffio = \">=1.0.0,<2.0.0\"\r\n-urllib3 = \">=1.0.0,<2.0.0\"\r\n+sniffio = \"*\"\r\n```\r\n\r\nThis is the error I got:\r\n\r\n``` \r\nTraceback (most recent call last):\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/bin/pytest\", line 10, in <module>\r\n    sys.exit(main())\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 124, in main\r\n    ret = config.hook.pytest_cmdline_main(\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\n    return outcome.get_result()\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/_pytest/main.py\", line 240, in pytest_cmdline_main\r\n    return wrap_session(config, _main)\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/_pytest/main.py\", line 228, in wrap_session\r\n    config.hook.pytest_sessionfinish(\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 203, in _multicall\r\n    gen.send(outcome)\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/_pytest/terminal.py\", line 717, in pytest_sessionfinish\r\n    outcome.get_result()\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/pluggy/callers.py\", line 182, in _multicall\r\n    next(gen)  # first yield\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/_pytest/warnings.py\", line 142, in pytest_sessionfinish\r\n    with catch_warnings_for_item(\r\n  File \"/usr/lib/python3.8/contextlib.py\", line 113, in __enter__\r\n    return next(self.gen)\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/_pytest/warnings.py\", line 82, in catch_warnings_for_item\r\n    _setoption(warnings, arg)\r\n  File \"/home/andre/projetos/pronus/invoice/server/.venv/lib/python3.8/site-packages/_pytest/warnings.py\", line 21, in _setoption\r\n    category = wmod._getcategory(category)\r\n  File \"/usr/lib/python3.8/warnings.py\", line 262, in _getcategory\r\n    raise _OptionError(\"invalid module name: %r\" % (module,)) from None\r\nwarnings._OptionError: invalid module name: 'urllib3.exceptions'\r\nMakefile:11: recipe for target 'test' failed\r\n```\r\n\r\nThe problem seems to be related to the fixture discovering phase of pytest. Unfortunately, I don't have additional information besides that. The `conftest.py` I'm using is:\r\n\r\n```python\r\nfrom typing import AsyncIterable\r\n\r\nfrom httpx import AsyncClient\r\nfrom pytest import fixture\r\n\r\n\r\n@fixture\r\nasync def client() -> AsyncIterable[AsyncClient]:\r\n    async with AsyncClient(base_url='https://localhost', verify=False, http2=True) as client:\r\n        yield client\r\n\r\n```\r\nto reproduce the error, just run `pytest --fixtures`\r\n\r\n\r\n### Environment\r\n\r\n- OS: Ubuntu 18.04\r\n- Python version: 3.8.3\r\n- HTTPX version: 0.13.3\r\n- Async environment: asyncio\r\n- pytest: 5.4.3\r\n\r\nRegards,\r\n\r\nAndr\u00e9", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1043", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1043/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1043/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1043/events", "html_url": "https://github.com/encode/httpx/issues/1043", "id": 650006092, "node_id": "MDU6SXNzdWU2NTAwMDYwOTI=", "number": 1043, "title": "Considering non env-var 'no_proxy' support?", "user": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068460, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYw", "url": "https://api.github.com/repos/encode/httpx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}, {"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}, {"id": 1554830102, "node_id": "MDU6TGFiZWwxNTU0ODMwMTAy", "url": "https://api.github.com/repos/encode/httpx/labels/requests-compat", "name": "requests-compat", "color": "006b75", "default": false, "description": "Issues related to Requests backwards compatibility"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/6", "html_url": "https://github.com/encode/httpx/milestone/6", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/6/labels", "id": 5701831, "node_id": "MDk6TWlsZXN0b25lNTcwMTgzMQ==", "number": 6, "title": "v0.14", "description": "", "creator": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 32, "state": "closed", "created_at": "2020-07-27T09:09:04Z", "updated_at": "2020-08-07T15:10:11Z", "due_on": "2020-07-31T07:00:00Z", "closed_at": "2020-08-07T15:10:11Z"}, "comments": 3, "created_at": "2020-07-02T15:06:23Z", "updated_at": "2020-07-31T09:21:12Z", "closed_at": "2020-07-31T09:21:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your feature request. -->\r\n\r\n- [x] There are no similar issues or pull requests for this yet.\r\n- [ ] I discussed this idea on the [community chat](https://gitter.im/encode/community) and feedback is positive.\r\n\r\n### Is your feature related to a problem? Please describe.\r\n\r\nHey all,\r\n\r\nSo while looking into an issues with `no_proxy` in Requests (https://github.com/psf/requests/issues/5000) I tried one of the failing cases with HTTPX, and ended up realizing that we don't take into account `no_proxy` in the `proxies={...}` usage. We only account for the `no_proxy`/`NO_PROXY` environment variable.\r\n\r\nEg this will fail as the request will be routed through the proxy:\r\n\r\n```python\r\nimport httpx\r\n\r\nproxies = {'https': 'http://no.where.com', 'no_proxy': 'google.com'}\r\nclient = httpx.Client(proxies=proxies)\r\nclient.get('https://google.com')  # ConnectError\r\n```\r\n\r\nHowever, this use case is covered by Requests (although with rough edges - see https://github.com/psf/requests/issues/5000).\r\n\r\n```python\r\nimport os\r\nimport requests\r\n\r\nos.environ['HTTPS_PROXY']='https://b.r.o.k.e.n.com'\r\nproxies = {'no_proxy': 'google.com'}\r\nr = requests.get('https://google.com', proxies=proxies)\r\n```\r\n\r\n\r\n## Describe the solution you would like.\r\n\r\nThe Requests way of passing a `no_proxy` key in the dict is somewhat clunky tbh, and also not compatible with us allowing users to pass an `httpx.Proxy` config object, or an URL, instead of a dict.\r\n\r\nSo I'd be thinking about a dedicated `no_proxy` option on clients, which accepts a list of domains or IPs (similar to how the env variable accepts a comma-separated string):\r\n\r\n```python\r\nhttpx.Client(proxies=..., no_proxy=['<domain>', '<ip>', ...])\r\n```\r\n\r\nIn terms of implementation, we could easily store this as an extra attribute, and then pass it when checking for \"should we use proxies for this URL\", without interfering with the proxy map building logic:\r\n\r\nhttps://github.com/encode/httpx/blob/620b0670db07ae844aa6fae40d9209a856440c9d/httpx/_client.py#L555-L556\r\n\r\nThe priority order compared to env vars would be:\r\n\r\n1. `no_proxy=[...]`\r\n2. Environment variables (`no_proxy`/`NO_PROXY`)\r\n\r\nHappy to discuss use cases and API details further!\r\n\r\n## Describe alternatives you considered\r\n\r\n<!-- Please describe any alternative solutions or features you've considered to solve\r\nyour problem and why they wouldn't solve it. -->\r\n\r\n## Additional context\r\n\r\n<!-- Provide any additional context, screenshots, tracebacks, etc. about the feature here. -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1042", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1042/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1042/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1042/events", "html_url": "https://github.com/encode/httpx/issues/1042", "id": 649798984, "node_id": "MDU6SXNzdWU2NDk3OTg5ODQ=", "number": 1042, "title": "reutilisation of AsyncClient across multiple requests", "user": {"login": "gerazenobi", "id": 7520283, "node_id": "MDQ6VXNlcjc1MjAyODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7520283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gerazenobi", "html_url": "https://github.com/gerazenobi", "followers_url": "https://api.github.com/users/gerazenobi/followers", "following_url": "https://api.github.com/users/gerazenobi/following{/other_user}", "gists_url": "https://api.github.com/users/gerazenobi/gists{/gist_id}", "starred_url": "https://api.github.com/users/gerazenobi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gerazenobi/subscriptions", "organizations_url": "https://api.github.com/users/gerazenobi/orgs", "repos_url": "https://api.github.com/users/gerazenobi/repos", "events_url": "https://api.github.com/users/gerazenobi/events{/privacy}", "received_events_url": "https://api.github.com/users/gerazenobi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-02T09:54:40Z", "updated_at": "2020-08-17T03:45:17Z", "closed_at": "2020-07-02T11:13:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI wanted to ask about what is the recommended way to use the client when we are going to schedule multiple requests, specifically if its ok (safe), even recommended, to reuse the client instance (like shown in the example below)\r\n\r\nFurthermore (after reading the usage of the client as a context manager) when and why would we want to close a client anyway and not leave it opened indefinitely for when someone calls for the next batch of concurrent requests ( to always get all those _significant performance improvements_  mentioned in the docs)\r\n\r\nHere is a small example, where I never close the client nor I am using the context manager way, that might help in order to clarify what is good and/or wrong:\r\n\r\n``` python\r\n# client.py\r\nclass ExampleConcurrentClient:\r\n    client = httpx.AsyncClient(headers=HEADERS, timeout=TIMEOUT)\r\n    loop = asyncio.get_event_loop()\r\n\r\n    async def _post(self, url, data, client):\r\n        return await client.post(url, json=data)\r\n\r\n    def _prepare_async_requests(self, requests):\r\n        return asyncio.gather(*[self._post(request[\"url\"], request[\"data\"]) for request in requests])\r\n\r\n    def post_all(self, targets, data):\r\n        # ... build requests\r\n        responses = self.loop.run_until_complete(self._prepare_async_requests(requests))\r\n        return responses\r\n\r\nconcurrent_client = ExampleConcurrentClient()\r\n```\r\n\r\n```python\r\n# user_actions.py\r\nfrom client.py import concurrent_client\r\n\r\n#after some time t0 someone calls again:\r\nconcurrent_client.post_all(targets=..., data=...)\r\n\r\n# after some time t0+1 someone calls again:\r\nconcurrent_client.post_all(targets=..., data=...)\r\n\r\n# after some time t0+2 someone calls again:\r\nconcurrent_client.post_all(targets=..., data=...)\r\n```\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1041", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1041/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1041/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1041/events", "html_url": "https://github.com/encode/httpx/issues/1041", "id": 649657347, "node_id": "MDU6SXNzdWU2NDk2NTczNDc=", "number": 1041, "title": "HTTP NTLM Authentication", "user": {"login": "mihaimyh", "id": 549272, "node_id": "MDQ6VXNlcjU0OTI3Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/549272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mihaimyh", "html_url": "https://github.com/mihaimyh", "followers_url": "https://api.github.com/users/mihaimyh/followers", "following_url": "https://api.github.com/users/mihaimyh/following{/other_user}", "gists_url": "https://api.github.com/users/mihaimyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mihaimyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mihaimyh/subscriptions", "organizations_url": "https://api.github.com/users/mihaimyh/orgs", "repos_url": "https://api.github.com/users/mihaimyh/repos", "events_url": "https://api.github.com/users/mihaimyh/events{/privacy}", "received_events_url": "https://api.github.com/users/mihaimyh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}, {"id": 1554830102, "node_id": "MDU6TGFiZWwxNTU0ODMwMTAy", "url": "https://api.github.com/repos/encode/httpx/labels/requests-compat", "name": "requests-compat", "color": "006b75", "default": false, "description": "Issues related to Requests backwards compatibility"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-02T05:53:55Z", "updated_at": "2020-07-02T10:16:02Z", "closed_at": "2020-07-02T10:16:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nDoes httpx supports HTTP NTLM authentication? I didn't find anything on docs.\r\nWith requests this can be done like so:\r\n\r\n```\r\nfrom requests_ntlm import HttpNtlmAuth\r\n\r\nsession = requests.Session()\r\nsession.auth = HttpNtlmAuth('AD\\\\' + username, password)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1040", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1040/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1040/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1040/events", "html_url": "https://github.com/encode/httpx/issues/1040", "id": 648721949, "node_id": "MDU6SXNzdWU2NDg3MjE5NDk=", "number": 1040, "title": "I want to initiate a request from a specific IP address, but I don't know how to do it using httpx.", "user": {"login": "seo666", "id": 53137698, "node_id": "MDQ6VXNlcjUzMTM3Njk4", "avatar_url": "https://avatars0.githubusercontent.com/u/53137698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seo666", "html_url": "https://github.com/seo666", "followers_url": "https://api.github.com/users/seo666/followers", "following_url": "https://api.github.com/users/seo666/following{/other_user}", "gists_url": "https://api.github.com/users/seo666/gists{/gist_id}", "starred_url": "https://api.github.com/users/seo666/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seo666/subscriptions", "organizations_url": "https://api.github.com/users/seo666/orgs", "repos_url": "https://api.github.com/users/seo666/repos", "events_url": "https://api.github.com/users/seo666/events{/privacy}", "received_events_url": "https://api.github.com/users/seo666/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068459, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU5", "url": "https://api.github.com/repos/encode/httpx/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-01T06:49:47Z", "updated_at": "2020-07-01T08:03:22Z", "closed_at": "2020-07-01T08:03:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "python3 httpx and aiohttp\r\n\r\nI want to initiate a request from a specific IP address, but I don't know how to do it using httpx.\r\n\r\naiohttp like this.\r\n\r\nconn = aiohttp.TCPConnector(local_addr=(\"127.0.0.1\", 0))\r\nasync with aiohttp.ClientSession(connector=conn) as session:\r\nasync with session.get(url) as response:\r\nr = await response.read()\r\n\r\nPlease tell me how to do using httpx.Thank you~!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1039", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1039/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1039/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1039/events", "html_url": "https://github.com/encode/httpx/issues/1039", "id": 648182655, "node_id": "MDU6SXNzdWU2NDgxODI2NTU=", "number": 1039, "title": "ASGI requests are routed through proxy", "user": {"login": "marco-neumann-by", "id": 57095103, "node_id": "MDQ6VXNlcjU3MDk1MTAz", "avatar_url": "https://avatars0.githubusercontent.com/u/57095103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marco-neumann-by", "html_url": "https://github.com/marco-neumann-by", "followers_url": "https://api.github.com/users/marco-neumann-by/followers", "following_url": "https://api.github.com/users/marco-neumann-by/following{/other_user}", "gists_url": "https://api.github.com/users/marco-neumann-by/gists{/gist_id}", "starred_url": "https://api.github.com/users/marco-neumann-by/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marco-neumann-by/subscriptions", "organizations_url": "https://api.github.com/users/marco-neumann-by/orgs", "repos_url": "https://api.github.com/users/marco-neumann-by/repos", "events_url": "https://api.github.com/users/marco-neumann-by/events{/privacy}", "received_events_url": "https://api.github.com/users/marco-neumann-by/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}, {"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/6", "html_url": "https://github.com/encode/httpx/milestone/6", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/6/labels", "id": 5701831, "node_id": "MDk6TWlsZXN0b25lNTcwMTgzMQ==", "number": 6, "title": "v0.14", "description": "", "creator": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 32, "state": "closed", "created_at": "2020-07-27T09:09:04Z", "updated_at": "2020-08-07T15:10:11Z", "due_on": "2020-07-31T07:00:00Z", "closed_at": "2020-08-07T15:10:11Z"}, "comments": 3, "created_at": "2020-06-30T13:37:57Z", "updated_at": "2020-08-02T11:42:37Z", "closed_at": "2020-08-02T11:42:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n- [X] The bug is reproducible against the latest release and/or `master`.\r\n- [X] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nUsing the `AsyncClient` with an ASGI app seems to go through the proxy. Either this is is bug or I don't understand under which conditions this would make sense.\r\n\r\n### To reproduce\r\n\r\n```python\r\nimport asyncio\r\nimport os\r\nimport httpx\r\n\r\n\r\nasync def hello_world(scope, receive, send):\r\n    status = 200\r\n    output = b\"Hello, World!\"\r\n    headers = [(b\"content-type\", \"text/plain\"), (b\"content-length\", str(len(output)))]\r\n\r\n    await send({\"type\": \"http.response.start\", \"status\": status, \"headers\": headers})\r\n    await send({\"type\": \"http.response.body\", \"body\": output})\r\n\r\n\r\nasync def test_asgi_with_env():\r\n    os.environ[\"http_proxy\"] = \"http://localhost:1111\"\r\n\r\n    client = httpx.AsyncClient(app=hello_world)\r\n    response = await client.get(\"http://www.example.org/\")\r\n    assert response.status_code == 200\r\n    assert response.text == \"Hello, World!\"\r\n\r\n\r\nasyncio.run(test_asgi_with_env())\r\n```\r\n\r\n### Expected behavior\r\n\r\nTest should pass, no proxy interaction should be made.\r\n\r\nNote that passing `trust_env=False` to `AsyncClient` disables the proxy and the test passes. However, this interaction seems weird.\r\n\r\n### Actual behavior\r\n\r\n```text\r\nhttpcore._exceptions.ConnectError: Multiple exceptions: [Errno 61] Connect call failed ('::1', 1111, 0, 0), [Errno 61] Connect call failed ('127.0.0.1', 1111\r\n```\r\n\r\n### Environment\r\n\r\n- OS: macOS\r\n- Python version: 3.8.3\r\n- HTTPX version: 0.13.2 and on master (`cfd07cc290cc610fceb8d9f025c6bebc1d4b3275`)\r\n- Async environment: asyncio, but also tested with trio where the issue also occurs.\r\n- HTTP proxy: see description\r\n- Custom certificates: no\r\n\r\n### Additional context\r\nhttps://github.com/tiangolo/fastapi/pull/1619", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1033", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1033/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1033/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1033/events", "html_url": "https://github.com/encode/httpx/issues/1033", "id": 644924649, "node_id": "MDU6SXNzdWU2NDQ5MjQ2NDk=", "number": 1033, "title": "aiter_lines() doesn't return full lines that span multiple chunks", "user": {"login": "scr-oath", "id": 41922797, "node_id": "MDQ6VXNlcjQxOTIyNzk3", "avatar_url": "https://avatars0.githubusercontent.com/u/41922797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scr-oath", "html_url": "https://github.com/scr-oath", "followers_url": "https://api.github.com/users/scr-oath/followers", "following_url": "https://api.github.com/users/scr-oath/following{/other_user}", "gists_url": "https://api.github.com/users/scr-oath/gists{/gist_id}", "starred_url": "https://api.github.com/users/scr-oath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scr-oath/subscriptions", "organizations_url": "https://api.github.com/users/scr-oath/orgs", "repos_url": "https://api.github.com/users/scr-oath/repos", "events_url": "https://api.github.com/users/scr-oath/events{/privacy}", "received_events_url": "https://api.github.com/users/scr-oath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-24T20:23:31Z", "updated_at": "2020-07-21T09:33:46Z", "closed_at": "2020-07-21T09:33:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<https://gist.github.com/scr-oath/aa76d200222a0409d09a0d6feb1a13e2> shows an example setup using cherry.py as server that just outputs two lines - the json is big enough to be sent in two chunks; httpx aiter_lines() gets confused and sends data from the middle of the json line - seems to skip the starting part - which was most likely sent in a chunk without a newline\r\n\r\n### test-httpx.py\r\n```python\r\nimport asyncio\r\nimport json\r\n\r\nimport httpx\r\n\r\n\r\nclass TestHttpx:\r\n    def __init__(self):\r\n        pass\r\n\r\n    async def __call__(self):\r\n        http_client = httpx.AsyncClient()\r\n        async with http_client.stream(method=\"GET\", url='http://localhost:8080/lines') as response:\r\n            is_message = True\r\n            async for line in response.aiter_lines():\r\n                is_message = not is_message\r\n                if is_message:\r\n                    message = json.loads(line)\r\n                    print(message)\r\n\r\n\r\ndef main():\r\n    test_httpx = TestHttpx()\r\n    asyncio.run(test_httpx())\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1031", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1031/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1031/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1031/events", "html_url": "https://github.com/encode/httpx/issues/1031", "id": 644470522, "node_id": "MDU6SXNzdWU2NDQ0NzA1MjI=", "number": 1031, "title": "'NoneType' object has no attribute 'resume_reading'", "user": {"login": "thehesiod", "id": 4001789, "node_id": "MDQ6VXNlcjQwMDE3ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4001789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thehesiod", "html_url": "https://github.com/thehesiod", "followers_url": "https://api.github.com/users/thehesiod/followers", "following_url": "https://api.github.com/users/thehesiod/following{/other_user}", "gists_url": "https://api.github.com/users/thehesiod/gists{/gist_id}", "starred_url": "https://api.github.com/users/thehesiod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thehesiod/subscriptions", "organizations_url": "https://api.github.com/users/thehesiod/orgs", "repos_url": "https://api.github.com/users/thehesiod/repos", "events_url": "https://api.github.com/users/thehesiod/events{/privacy}", "received_events_url": "https://api.github.com/users/thehesiod/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1933582594, "node_id": "MDU6TGFiZWwxOTMzNTgyNTk0", "url": "https://api.github.com/repos/encode/httpx/labels/concurrency/asyncio", "name": "concurrency/asyncio", "color": "4635a0", "default": false, "description": "Issues related to concurrency (asyncio-only)"}, {"id": 2057576465, "node_id": "MDU6TGFiZWwyMDU3NTc2NDY1", "url": "https://api.github.com/repos/encode/httpx/labels/external", "name": "external", "color": "f7de3d", "default": false, "description": "Root cause pending resolution in an external dependency"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-06-24T09:38:39Z", "updated_at": "2020-06-25T00:17:15Z", "closed_at": "2020-06-24T17:36:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nI recently tried switching to httpx because of instability with aiohttp, however after a few tens of thousands of requests against URLs like `https://hydro1.gesdisc.eosdis.nasa.gov/data/NLDAS/NLDAS_FORA0125_H.002/2020/172/NLDAS_FORA0125_H.A20200620.1000.002.grb` with query string: `{'If-Modified-Since': 'Mon, 17 Aug 2009 16:20:16 GMT'}` with 10 workers I got an error stack like this:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/usr/local/fbn/fbn.com/api/weather/python/fbn/asyncio/data_transfer.py\", line 170, in cacheable_get\r\n    r = await self._client.get(url, headers=headers, params=params)\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpx/_client.py\", line 1305, in get\r\n    return await self.request(\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpx/_client.py\", line 1147, in request\r\n    response = await self.send(\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpx/_client.py\", line 1174, in send\r\n    await response.aread()\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpx/_models.py\", line 965, in aread\r\n    self._content = b\"\".join([part async for part in self.aiter_bytes()])\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpx/_models.py\", line 965, in <listcomp>\r\n    self._content = b\"\".join([part async for part in self.aiter_bytes()])\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpx/_models.py\", line 976, in aiter_bytes\r\n    async for chunk in self.aiter_raw():\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpx/_models.py\", line 1009, in aiter_raw\r\n    async for part in self._raw_stream:\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpcore/_async/connection_pool.py\", line 49, in __aiter__\r\n    async for chunk in self.stream:\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpcore/_async/base.py\", line 57, in __aiter__\r\n    async for chunk in self.aiterator:\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpcore/_async/http11.py\", line 128, in _receive_response_data\r\n    event = await self._receive_event(timeout)\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpcore/_async/http11.py\", line 145, in _receive_event\r\n    data = await self.socket.read(self.READ_NUM_BYTES, timeout)\r\n  File \"/root/.local/share/virtualenvs/weather-h8QMrSBh/lib/python3.8/site-packages/httpcore/_backends/asyncio.py\", line 134, in read\r\n    return await asyncio.wait_for(\r\n  File \"/usr/local/lib/python3.8/asyncio/tasks.py\", line 483, in wait_for\r\n    return fut.result()\r\n  File \"/usr/local/lib/python3.8/asyncio/streams.py\", line 690, in read\r\n    self._maybe_resume_transport()\r\n  File \"/usr/local/lib/python3.8/asyncio/streams.py\", line 461, in _maybe_resume_transport\r\n    self._transport.resume_reading()\r\n  File \"/usr/local/lib/python3.8/asyncio/sslproto.py\", line 344, in resume_reading\r\n    self._ssl_protocol._transport.resume_reading()\r\nAttributeError: 'NoneType' object has no attribute 'resume_reading'\r\n```\r\n\r\nIt seems similar to what's reported here: https://bugs.python.org/issue36098. so may be an underlying asyncio bug.\r\n\r\n### To reproduce\r\n\r\nReproduction steps are like above, it takes many, many many requests until it happens.  Please let me know how I can help, however I think there's enough information here that a testcase shouldn't be needed.\r\n\r\n### Expected behavior\r\n\r\nShould never trigger an attribute error\r\n\r\n### Actual behavior\r\n\r\nAttribute error happens after 10s of thousands of requests\r\n\r\n### Debugging material\r\n\r\nsee above\r\n\r\n### Environment\r\n\r\n- OS: Debian Buster\r\n- Python version: 3.8.2\r\n- HTTPX version: 0.13.3\r\n- Async environment: asyncio\r\n- HTTP proxy: no\r\n- Custom certificates: no\r\n\r\n### Additional context\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1030", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1030/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1030/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1030/events", "html_url": "https://github.com/encode/httpx/issues/1030", "id": 642287675, "node_id": "MDU6SXNzdWU2NDIyODc2NzU=", "number": 1030, "title": "\"The read operation timed out\" Exception that doesn't happen when using requests", "user": {"login": "josh-marshall-jax", "id": 52457971, "node_id": "MDQ6VXNlcjUyNDU3OTcx", "avatar_url": "https://avatars2.githubusercontent.com/u/52457971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh-marshall-jax", "html_url": "https://github.com/josh-marshall-jax", "followers_url": "https://api.github.com/users/josh-marshall-jax/followers", "following_url": "https://api.github.com/users/josh-marshall-jax/following{/other_user}", "gists_url": "https://api.github.com/users/josh-marshall-jax/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh-marshall-jax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh-marshall-jax/subscriptions", "organizations_url": "https://api.github.com/users/josh-marshall-jax/orgs", "repos_url": "https://api.github.com/users/josh-marshall-jax/repos", "events_url": "https://api.github.com/users/josh-marshall-jax/events{/privacy}", "received_events_url": "https://api.github.com/users/josh-marshall-jax/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}, {"id": 1554830102, "node_id": "MDU6TGFiZWwxNTU0ODMwMTAy", "url": "https://api.github.com/repos/encode/httpx/labels/requests-compat", "name": "requests-compat", "color": "006b75", "default": false, "description": "Issues related to Requests backwards compatibility"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-20T02:06:20Z", "updated_at": "2020-06-20T07:02:10Z", "closed_at": "2020-06-20T07:02:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [?] The bug is reproducible against the latest release and/or `master`.\r\n- [X] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nUsing an admittedly poorly implemented REST endpoint, I am getting a read timeout after less than 5 seconds into a POST when the identical requests usage works.\r\n\r\n### To reproduce\r\n\r\n```\r\nhttpx.post(\r\n    clarity_lims_batch_url,\r\n    auth=(username, password),\r\n    data=element_parent.toxml(),\r\n    headers={\"Content-Type\": \"application/xml\"},\r\n)\r\n```\r\n\r\n### Expected behavior\r\n\r\nRuns without exception\r\n\r\n### Actual behavior\r\n\r\nRead Timeout Exception\r\n\r\n### Debugging material\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"./CS test data.py\", line 647, in <module>\r\n    main(\r\n  File \"./CS test data.py\", line 575, in main\r\n    get_batches_for_covid_samples(\r\n  File \"./CS test data.py\", line 116, in get_batches_for_covid_samples\r\n    tmp = httpx.post(\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpx/_api.py\", line 269, in post\r\n    return request(\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpx/_api.py\", line 86, in request\r\n    return client.request(\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpx/_client.py\", line 600, in request\r\n    return self.send(\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpx/_client.py\", line 620, in send\r\n    response = self.send_handling_redirects(\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpx/_client.py\", line 647, in send_handling_redirects\r\n    response = self.send_handling_auth(\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpx/_client.py\", line 684, in send_handling_auth\r\n    response = self.send_single_request(request, timeout)\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpx/_client.py\", line 714, in send_single_request\r\n    ) = transport.request(\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpcore/_sync/connection_pool.py\", line 152, in request\r\n    response = connection.request(\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpcore/_sync/connection.py\", line 78, in request\r\n    return self.connection.request(method, url, headers, stream, timeout)\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpcore/_sync/http11.py\", line 62, in request\r\n    ) = self._receive_response(timeout)\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpcore/_sync/http11.py\", line 115, in _receive_response\r\n    event = self._receive_event(timeout)\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpcore/_sync/http11.py\", line 145, in _receive_event\r\n    data = self.socket.read(self.READ_NUM_BYTES, timeout)\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpcore/_backends/sync.py\", line 62, in read\r\n    return self.sock.recv(n)\r\n  File \"/usr/lib/python3.8/contextlib.py\", line 131, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/home/marshjo/.local/lib/python3.8/site-packages/httpcore/_exceptions.py\", line 12, in map_exceptions\r\n    raise to_exc(exc) from None\r\nhttpcore._exceptions.ReadTimeout: The read operation timed out\r\n```\r\n\r\n### Environment\r\n\r\n- OS: WSL2 Ubuntu 20.02\r\n- Python version: 3.8\r\n- HTTPX version: 0.13.3\r\n- Async environment: N/A\r\n- HTTP proxy: no\r\n- Custom certificates: no\r\n\r\n### Additional context\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1029", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1029/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1029/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1029/events", "html_url": "https://github.com/encode/httpx/issues/1029", "id": 641289959, "node_id": "MDU6SXNzdWU2NDEyODk5NTk=", "number": 1029, "title": "TimeoutException missing from package", "user": {"login": "HenrikOssipoff", "id": 4737224, "node_id": "MDQ6VXNlcjQ3MzcyMjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4737224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HenrikOssipoff", "html_url": "https://github.com/HenrikOssipoff", "followers_url": "https://api.github.com/users/HenrikOssipoff/followers", "following_url": "https://api.github.com/users/HenrikOssipoff/following{/other_user}", "gists_url": "https://api.github.com/users/HenrikOssipoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/HenrikOssipoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HenrikOssipoff/subscriptions", "organizations_url": "https://api.github.com/users/HenrikOssipoff/orgs", "repos_url": "https://api.github.com/users/HenrikOssipoff/repos", "events_url": "https://api.github.com/users/HenrikOssipoff/events{/privacy}", "received_events_url": "https://api.github.com/users/HenrikOssipoff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068459, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU5", "url": "https://api.github.com/repos/encode/httpx/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-18T15:10:40Z", "updated_at": "2020-06-20T07:03:57Z", "closed_at": "2020-06-20T07:03:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\n[According to the documentation](https://www.python-httpx.org/advanced/#timeout-configuration), there should be an `httpx.TimeoutException` class that you can catch if you want to catch any timeout related exception. However, such exception doesn't exist.\r\n\r\n### To reproduce\r\n\r\n```python\r\nimport httpx\r\nhttpx.TimeoutException\r\n```\r\n\r\n### Additional context\r\n\r\nI'm assuming it's intended behaviour, and it's a case of the docs not being updated when introducing httpcore over urllib3. However, I'm unsure about what the correct approach now is; should one catch HTTPError instead, or are we forced to catch each individual timeout related exception?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1028", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1028/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1028/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1028/events", "html_url": "https://github.com/encode/httpx/issues/1028", "id": 641110427, "node_id": "MDU6SXNzdWU2NDExMTA0Mjc=", "number": 1028, "title": "verify argument seem unsupported by async client", "user": {"login": "mchugh19", "id": 1360357, "node_id": "MDQ6VXNlcjEzNjAzNTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1360357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mchugh19", "html_url": "https://github.com/mchugh19", "followers_url": "https://api.github.com/users/mchugh19/followers", "following_url": "https://api.github.com/users/mchugh19/following{/other_user}", "gists_url": "https://api.github.com/users/mchugh19/gists{/gist_id}", "starred_url": "https://api.github.com/users/mchugh19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mchugh19/subscriptions", "organizations_url": "https://api.github.com/users/mchugh19/orgs", "repos_url": "https://api.github.com/users/mchugh19/repos", "events_url": "https://api.github.com/users/mchugh19/events{/privacy}", "received_events_url": "https://api.github.com/users/mchugh19/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-18T10:54:25Z", "updated_at": "2020-06-18T11:48:59Z", "closed_at": "2020-06-18T11:46:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\nGet error `TypeError: get() got an unexpected keyword argument 'verify'` when I try to disable ssl validation for a client.get call.\r\n\r\n### To reproduce\r\nOur environment uses proxy servers and local ssl certs, so I'd just like to disable ssl validation entirely.\r\n```\r\nasync with httpx.AsyncClient() as client:\r\n            r = await client.get(\r\n                \"https://someserver\", verify=False\r\n            )\r\n```\r\nReturns back\r\n```\r\n...\r\n File \"C:\\code\\gits\\project.py\", line 158, in get_support_matrix\r\n    \"https://someserver\", verify=False\r\nTypeError: get() got an unexpected keyword argument 'verify'\r\n```\r\n\r\n### Expected behavior\r\n`verify=False` to function as documented at https://www.python-httpx.org/advanced/\r\n\r\n> Or you can also disable the SSL verification entirely, which is not recommended.\r\nimport httpx\r\nr = httpx.get(\"https://example.org\", verify=False)\r\n\r\n### Actual behavior\r\nTypeError: get() got an unexpected keyword argument 'verify'\r\n\r\n### Debugging material\r\nComplete test case for python 3.6:\r\n```\r\nimport httpx\r\nimport asyncio\r\n\r\nasync def testfun():\r\n    async with httpx.AsyncClient() as client:\r\n        r = await client.get('https://www.example.org/', verify=False)\r\n    print(r)\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(testfun())\r\nloop.close()\r\n```\r\n\r\n### Environment\r\n\r\n- OS: Windows\r\n- Python version: Python 3.6.2\r\n- HTTPX version: Version: 0.13.3\r\n- Async environment: asyncio\r\n- HTTP proxy: yes\r\n- Custom certificates: yes\r\n\r\n### Additional context", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1027", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1027/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1027/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1027/events", "html_url": "https://github.com/encode/httpx/issues/1027", "id": 641029625, "node_id": "MDU6SXNzdWU2NDEwMjk2MjU=", "number": 1027, "title": "OSError: [Errno 24] Too many open files", "user": {"login": "lsabi", "id": 13497689, "node_id": "MDQ6VXNlcjEzNDk3Njg5", "avatar_url": "https://avatars0.githubusercontent.com/u/13497689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsabi", "html_url": "https://github.com/lsabi", "followers_url": "https://api.github.com/users/lsabi/followers", "following_url": "https://api.github.com/users/lsabi/following{/other_user}", "gists_url": "https://api.github.com/users/lsabi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsabi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsabi/subscriptions", "organizations_url": "https://api.github.com/users/lsabi/orgs", "repos_url": "https://api.github.com/users/lsabi/repos", "events_url": "https://api.github.com/users/lsabi/events{/privacy}", "received_events_url": "https://api.github.com/users/lsabi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-18T08:51:28Z", "updated_at": "2020-06-18T10:50:20Z", "closed_at": "2020-06-18T10:50:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- To help keep this issue tracker clean and focused, please make sure you tried *all* the following resources before submitting your question. -->\r\n\r\n- [x] I searched the [HTTPX documentation](https://www.python-httpx.org) but couldn't find what I'm looking for.\r\n- [x] I looked through similar issues on GitHub, but didn't find anything.\r\n- [x] I looked up \"How to do ... in HTTPX\" on a search engine and didn't find any information.\r\n- [ ] I asked the [community chat](https://gitter.im/encode/community) for help.\r\n\r\n### Question\r\n\r\n<!-- Please ask your question here. -->\r\nI'm using fastAPI which pushes data to Apache Solr via httpx. When I want to import some data, it posts a lot of sequential requests (i.e. one after the other) and I get the following error\r\n\r\n```\r\n  File \"./app/utils/search.py\", line 79, in update\r\n\r\n  File \"/home/user/.local/lib/python3.8/site-packages/httpx/_client.py\", line 1009, in __init__\r\n  File \"/home/user/.local/lib/python3.8/site-packages/httpx/_client.py\", line 1046, in init_transport\r\n  File \"/home/user/.local/lib/python3.8/site-packages/httpx/_config.py\", line 62, in __init__\r\n  File \"/home/user/.local/lib/python3.8/site-packages/httpx/_config.py\", line 85, in load_ssl_context\r\n  File \"/home/user/.local/lib/python3.8/site-packages/httpx/_config.py\", line 142, in load_ssl_context_verify\r\n\r\nOSError: [Errno 24] Too many open files\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n...\r\n```\r\nWhich is strange because I'm not using HTTPS connection, since I'm within a private network and just testing for now. The provided URLs are without the S, so no ssl should be loaded. Could it be that httpx tries to open the certificate and not closing it?\r\n\r\nMy code looks as below (indentation is correct in the file, Markdown is just messing it up)\r\n\r\n```\r\ntry:\r\n        async with httpx.AsyncClient() as client:\r\n            res = await client.post(url, json=data, params=options)\r\n\r\n        if res.status_code == 200:\r\n            return True\r\n        else:\r\n            raise ValueError(\"Wrong status code\", res.status_code, res.json())\r\n    except Exception as e:\r\n        print(e)\r\n        logger.exception(\"Cannot update document in SOLR\")\r\n```\r\n\r\n*QUESTION*\r\nIs it me or is it a bug (see between the error and the code)? I haven't found anything that could relate to the problem except for [https://github.com/encode/httpx/issues/556](https://github.com/encode/httpx/issues/556), but the problem was due to the library it was used.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1025", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1025/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1025/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1025/events", "html_url": "https://github.com/encode/httpx/issues/1025", "id": 639531143, "node_id": "MDU6SXNzdWU2Mzk1MzExNDM=", "number": 1025, "title": "Skip HSTS preloading for single-label domains", "user": {"login": "alex-oleshkevich", "id": 635848, "node_id": "MDQ6VXNlcjYzNTg0OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/635848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-oleshkevich", "html_url": "https://github.com/alex-oleshkevich", "followers_url": "https://api.github.com/users/alex-oleshkevich/followers", "following_url": "https://api.github.com/users/alex-oleshkevich/following{/other_user}", "gists_url": "https://api.github.com/users/alex-oleshkevich/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-oleshkevich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-oleshkevich/subscriptions", "organizations_url": "https://api.github.com/users/alex-oleshkevich/orgs", "repos_url": "https://api.github.com/users/alex-oleshkevich/repos", "events_url": "https://api.github.com/users/alex-oleshkevich/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-oleshkevich/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}, {"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-06-16T09:53:18Z", "updated_at": "2020-07-28T18:52:47Z", "closed_at": "2020-07-28T18:52:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\nI run two services in docker-compose. One of them named \"app\" which is Django application.\r\nDuring startup, another service makes HTTP call to \"app\" service:\r\n`GET http://app:8000`\r\n\r\nThe request then fails with `ConnectionReset` error because it was rewritten to HTTPS.\r\n\r\nI dug into the issue and found that `httpx._client.BaseClient.merge_url` checks against `hstspreload.in_hsts_preload` and, if succeeds, replaces http with https.\r\n\r\nInside of `hstspreload.in_hsts_preload` I found `_GTLD_INCLUDE_SUBDOMAINS` constant that includes `app` value and the check I have mentioned before is always True.\r\n\r\nThis means, that any request to any host that is listed in `_GTLD_INCLUDE_SUBDOMAINS` will be rewritten to HTTPS.\r\n\r\n### To reproduce\r\n\r\n<!-- Provide a *minimal* example with steps to reproduce the bug locally.\r\n\r\nNOTE: try to keep any external dependencies *at an absolute minimum* (servers, proxies, certificates...).\r\nIn other words, remove anything that doesn't make the bug go away.\r\n\r\nIf you need a local server to replicate against, you can build one using eg. Starlette [0] and Uvicorn [1], or any tool you feel comfortable with. Check out other issues for examples and remember to share setup instructions here. :-)\r\n\r\n[0]: https://www.starlette.io\r\n[1]: https://www.uvicorn.org\r\n-->\r\n\r\nDockerfile, docker-compose.yml: \r\nhttps://gist.github.com/alex-oleshkevich/6695124d41208c5dc692a30ea817ea82\r\n\r\n### Expected behavior\r\n\r\n<!-- A clear and concise description of what you expected to happen. -->\r\n\r\nThe scheme should not be rewritten.\r\n\r\n### Actual behavior\r\n\r\n<!-- A clear and concise description of what actually happens. -->\r\nURL `http://app:8000` was changed to `https://app:8000` by httpx.\r\n\r\n### Debugging material\r\n\r\n<!-- Any tracebacks, screenshots, etc. that can help understanding the problem.\r\n\r\nNOTE:\r\n- Please list tracebacks in full (don't truncate them).\r\n- If relevant, consider turning on DEBUG or TRACE logs for additional details (see https://www.python-httpx.org/environment_variables/#httpx_log_level).\r\n- Consider using `<details>` to make tracebacks/logs collapsible if they're very large (see https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d).\r\n-->\r\n\r\n### Environment\r\n\r\n- OS: Arch Linux <!-- eg Linux/Windows/macOS. -->\r\n- Python version: 3.8 <!-- eg 3.8.2 (get it with `$ python -V`). -->\r\n- HTTPX version: 0.13 <!-- eg 0.12.0 (get it with `$ pip show httpx`). -->\r\n- Async environment: asyncio <!-- eg asyncio/trio. If using asyncio, include whether the bug reproduces on trio (and vice versa). -->\r\n- HTTP proxy: no <!-- yes/no, if yes please try reproducing without it. -->\r\n- Custom certificates: no <!-- yes/no, if yes please try reproducing without them. If the bug is related to SSL/TLS, you can setup HTTPS on a local server using these instructions: https://www.python-httpx.org/advanced/#making-https-requests-to-a-local-server. -->\r\n\r\n### Additional context\r\n\r\n<!-- Any additional information that can help understanding the problem.\r\n\r\nEg. linked issues, or a description of what you were trying to achieve. -->\r\n\r\n```python\r\n_GTLD_INCLUDE_SUBDOMAINS = {\r\n    b\"android\",\r\n    b\"app\",\r\n    b\"bank\",\r\n    b\"chrome\",\r\n    b\"dev\",\r\n    b\"foo\",\r\n    b\"gle\",\r\n    b\"gmail\",\r\n    b\"google\",\r\n    b\"hangout\",\r\n    b\"insurance\",\r\n    b\"meet\",\r\n    b\"new\",\r\n    b\"page\",\r\n    b\"play\",\r\n    b\"search\",\r\n    b\"youtube\",\r\n}\r\n```\r\n\r\n```python\r\n# hstspreload.in_hsts_preload\r\n\r\n@functools.lru_cache(maxsize=1024)\r\ndef in_hsts_preload(host: typing.AnyStr) -> bool:\r\n    \"\"\"Determines if an IDNA-encoded host is on the HSTS preload list\"\"\"\r\n\r\n    if isinstance(host, str):\r\n        host = host.encode(\"ascii\")\r\n    labels = host.lower().split(b\".\")\r\n\r\n    # Fast-branch for gTLDs that are registered to preload all sub-domains.\r\n    if labels[-1] in _GTLD_INCLUDE_SUBDOMAINS:\r\n        return True\r\n\r\n# rest omitted\r\n```\r\n\r\n```python\r\n# httpx._client.BaseClient.merge_url\r\n    def merge_url(self, url: URLTypes) -> URL:\r\n        \"\"\"\r\n        Merge a URL argument together with any 'base_url' on the client,\r\n        to create the URL used for the outgoing request.\r\n        \"\"\"\r\n        url = self.base_url.join(relative_url=url)\r\n        if url.scheme == \"http\" and hstspreload.in_hsts_preload(url.host):\r\n            port = None if url.port == 80 else url.port\r\n            url = url.copy_with(scheme=\"https\", port=port)\r\n        return url\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1024", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1024/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1024/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1024/events", "html_url": "https://github.com/encode/httpx/issues/1024", "id": 639523932, "node_id": "MDU6SXNzdWU2Mzk1MjM5MzI=", "number": 1024, "title": "ASGI Lifespan events are not sent when using `app` parameter to `AsyncClient`", "user": {"login": "retnikt", "id": 24581770, "node_id": "MDQ6VXNlcjI0NTgxNzcw", "avatar_url": "https://avatars1.githubusercontent.com/u/24581770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retnikt", "html_url": "https://github.com/retnikt", "followers_url": "https://api.github.com/users/retnikt/followers", "following_url": "https://api.github.com/users/retnikt/following{/other_user}", "gists_url": "https://api.github.com/users/retnikt/gists{/gist_id}", "starred_url": "https://api.github.com/users/retnikt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retnikt/subscriptions", "organizations_url": "https://api.github.com/users/retnikt/orgs", "repos_url": "https://api.github.com/users/retnikt/repos", "events_url": "https://api.github.com/users/retnikt/events{/privacy}", "received_events_url": "https://api.github.com/users/retnikt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-16T09:41:53Z", "updated_at": "2020-06-16T11:04:53Z", "closed_at": "2020-06-16T11:04:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nWhen using the `app` parameter to an `AsyncClient`, \r\n\r\n### To reproduce\r\n\r\n```python\r\n# here shown using a Starlette server for simplicity\r\n\r\nasync def startup():\r\n    print(\"Starting up!\")\r\n\r\napp = Starlette(on_startup=[startup])\r\n\r\nasync def main():\r\n    async with AsyncClient(app=app) as c:\r\n        pass\r\n\r\nasyncio.run(main())\r\n```\r\n\r\n<!-- Provide a *minimal* example with steps to reproduce the bug locally.\r\n\r\nNOTE: try to keep any external dependencies *at an absolute minimum* (servers, proxies, certificates...).\r\nIn other words, remove anything that doesn't make the bug go away.\r\n\r\nIf you need a local server to replicate against, you can build one using eg. Starlette [0] and Uvicorn [1], or any tool you feel comfortable with. Check out other issues for examples and remember to share setup instructions here. :-)\r\n\r\n[0]: https://www.starlette.io\r\n[1]: https://www.uvicorn.org\r\n-->\r\n\r\n### Expected behavior\r\n\r\nThe AsyncClient issues ASGI lifespan events for startup and shutdown (in the example above, resulting in the `Starting Up!` message being printed) when entered and exited as a context manager. This might mean a mechanism for Transports to have startup and shutdown events is needed.\r\n\r\n### Actual behavior\r\n\r\nNo ASGI lifespan events are sent.\r\n\r\n### Debugging material\r\n\r\n<!-- Any tracebacks, screenshots, etc. that can help understanding the problem.\r\n\r\nNOTE:\r\n- Please list tracebacks in full (don't truncate them).\r\n- If relevant, consider turning on DEBUG or TRACE logs for additional details (see https://www.python-httpx.org/environment_variables/#httpx_log_level).\r\n- Consider using `<details>` to make tracebacks/logs collapsible if they're very large (see https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d).\r\n-->\r\n\r\n### Environment\r\n\r\n- OS: <!-- eg Linux/Windows/macOS. --> Linux\r\n- Python version: <!-- eg 3.8.2 (get it with `$ python -V`). --> 3.8.3\r\n- HTTPX version: <!-- eg 0.12.0 (get it with `$ pip show httpx`). --> 0.13.3\r\n- Async environment: asyncio, with [pytest-asyncio](https://github.com/pytest-dev/pytest-asyncio)\r\n- HTTP proxy: no\r\n- Custom certificates: no\r\n\r\n### Additional context\r\n\r\nI am trying to replace `starlette.TestClient` with `httpx.AsyncClient` because it means my code is end-to-end asynchronous, including tests. See [encode/starlette#975](https://github.com/encode/starlette/issues/975#issuecomment-644647580). However, this means that databases etc. are not connected with the AsyncClient and I have to do it manually in my tests.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1023", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1023/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1023/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1023/events", "html_url": "https://github.com/encode/httpx/issues/1023", "id": 639034346, "node_id": "MDU6SXNzdWU2MzkwMzQzNDY=", "number": 1023, "title": "0.13: some `httpcore` exceptions are missing from top level package", "user": {"login": "iwoloschin", "id": 6474586, "node_id": "MDQ6VXNlcjY0NzQ1ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6474586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iwoloschin", "html_url": "https://github.com/iwoloschin", "followers_url": "https://api.github.com/users/iwoloschin/followers", "following_url": "https://api.github.com/users/iwoloschin/following{/other_user}", "gists_url": "https://api.github.com/users/iwoloschin/gists{/gist_id}", "starred_url": "https://api.github.com/users/iwoloschin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iwoloschin/subscriptions", "organizations_url": "https://api.github.com/users/iwoloschin/orgs", "repos_url": "https://api.github.com/users/iwoloschin/repos", "events_url": "https://api.github.com/users/iwoloschin/events{/privacy}", "received_events_url": "https://api.github.com/users/iwoloschin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-15T17:57:33Z", "updated_at": "2020-07-03T13:56:12Z", "closed_at": "2020-07-03T13:56:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\nI believe that `HTTPError` is expected to be the base exception for all exceptions that httpx may raise? Since 0.13 this is no longer true and comments in [`_exceptions.py`](https://github.com/encode/httpx/blob/master/httpx/_exceptions.py#L11) indicate this is a bug. In real world use I have at least one bit of code that has failed due to this. I could see an argument for trying to catch a more specific error, but I think this case `HTTPError` was really nice to use.\r\n\r\nEven if users should be using more specific exceptions having a single base exception is an incredibly useful feature for any library and it'd be great if we could ensure this behavior is set for the upcoming 1.0 release.\r\n\r\n### To reproduce\r\nThe following code assumes localhost does not have any webserver running on port 80. Running on httpx 0.12 it correctly catches the `HTTPError`, running on 0.13 it does not catch the exception (httpcore.ConnectError, which doesn't appear to be properly exported in [`\\_\\_init\\_\\_.py](https://github.com/encode/httpx/blob/master/httpx/__init__.py), though it is aliased in `_exceptions.py`).\r\n```python\r\nimport httpx\r\ntry:\r\n    httpx.get('http://localhost')\r\nexcept httpx.HTTPError:\r\n    print('There was an httpx error')\r\n```\r\n\r\n### Expected behavior\r\nIf `HTTPError` is the base exception for httpx I'd expect catching `HTTPError` to actually catch all errors httpx may raise.\r\n\r\n### Actual behavior\r\nInstead of catching `HTTPError` it appears that httpcore errors bubble up. This breaks exception handling that expects `HTTPError` to be the base exception.\r\n\r\n### Environment\r\n- OS: macOS 10.15.5\r\n- Python version: 3.8.3\r\n- HTTPX version: 0.13\r\n- Async environment: asyncio\r\n- HTTP proxy: No\r\n- Custom certificates: No\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1019", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1019/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1019/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1019/events", "html_url": "https://github.com/encode/httpx/issues/1019", "id": 637407776, "node_id": "MDU6SXNzdWU2Mzc0MDc3NzY=", "number": 1019, "title": "Socks5 Support?", "user": {"login": "GnubiBORED", "id": 45830421, "node_id": "MDQ6VXNlcjQ1ODMwNDIx", "avatar_url": "https://avatars0.githubusercontent.com/u/45830421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GnubiBORED", "html_url": "https://github.com/GnubiBORED", "followers_url": "https://api.github.com/users/GnubiBORED/followers", "following_url": "https://api.github.com/users/GnubiBORED/following{/other_user}", "gists_url": "https://api.github.com/users/GnubiBORED/gists{/gist_id}", "starred_url": "https://api.github.com/users/GnubiBORED/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GnubiBORED/subscriptions", "organizations_url": "https://api.github.com/users/GnubiBORED/orgs", "repos_url": "https://api.github.com/users/GnubiBORED/repos", "events_url": "https://api.github.com/users/GnubiBORED/events{/privacy}", "received_events_url": "https://api.github.com/users/GnubiBORED/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T00:41:09Z", "updated_at": "2020-06-12T07:22:48Z", "closed_at": "2020-06-12T07:22:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does httpx support socks5 proxys?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1017", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1017/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1017/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1017/events", "html_url": "https://github.com/encode/httpx/issues/1017", "id": 634738753, "node_id": "MDU6SXNzdWU2MzQ3Mzg3NTM=", "number": 1017, "title": "Recursive fetching with HTTP/2 gets stuck", "user": {"login": "rgov", "id": 108767, "node_id": "MDQ6VXNlcjEwODc2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/108767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rgov", "html_url": "https://github.com/rgov", "followers_url": "https://api.github.com/users/rgov/followers", "following_url": "https://api.github.com/users/rgov/following{/other_user}", "gists_url": "https://api.github.com/users/rgov/gists{/gist_id}", "starred_url": "https://api.github.com/users/rgov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rgov/subscriptions", "organizations_url": "https://api.github.com/users/rgov/orgs", "repos_url": "https://api.github.com/users/rgov/repos", "events_url": "https://api.github.com/users/rgov/events{/privacy}", "received_events_url": "https://api.github.com/users/rgov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1504075511, "node_id": "MDU6TGFiZWwxNTA0MDc1NTEx", "url": "https://api.github.com/repos/encode/httpx/labels/http/2", "name": "http/2", "color": "0c2cfc", "default": false, "description": "Issues and PRs related to HTTP/2"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-08T15:55:06Z", "updated_at": "2020-07-30T15:13:22Z", "closed_at": "2020-07-30T15:13:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- To help keep this issue tracker clean and focused, please make sure you tried *all* the following resources before submitting your question. -->\r\n\r\n- [x] I searched the [HTTPX documentation](https://www.python-httpx.org) but couldn't find what I'm looking for.\r\n- [x] I looked through similar issues on GitHub, but didn't find anything.\r\n- [x] I looked up \"How to do ... in HTTPX\" on a search engine and didn't find any information.\r\n- [ ] I asked the [community chat](https://gitter.im/encode/community) for help.\r\n\r\n### Question\r\n\r\nI admit I'm new to both this library and Python coroutines, so I'm not sure that this isn't just my problem. I'm running 0.13.3.\r\n\r\nThis issue *only* reproduces with HTTP/2.\r\n\r\nSuppose I want to write a web-scraper that extracts links from a page and then recursively fetches and processes those pages:\r\n\r\n```python\r\n# client is a shared httpx.AsyncClient(http2=True) instance\r\nasync def process(client, url):\r\n    response = await client.get(url)\r\n    new_urls = extract_links(response.text)\r\n    await asyncio.gather(*[process(client, u) for u in new_urls])\r\n```\r\n\r\nWhat I see happening is that the first URL gets fetched and processed. However, at the second level, `client.get(url)` hangs until the server hangs up or a timeout occurs. I confirm this by putting `print` statements before and after.\r\n\r\nHowever when I run with `HTTPX_LOG_LEVEL=trace`, I can clearly see the server responding with headers and content. Is there a reason I am stuck `await`ing forever?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1015", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1015/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1015/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1015/events", "html_url": "https://github.com/encode/httpx/issues/1015", "id": 634061109, "node_id": "MDU6SXNzdWU2MzQwNjExMDk=", "number": 1015, "title": "Streaming Get and Post of a File", "user": {"login": "michaelschmit", "id": 15383202, "node_id": "MDQ6VXNlcjE1MzgzMjAy", "avatar_url": "https://avatars0.githubusercontent.com/u/15383202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelschmit", "html_url": "https://github.com/michaelschmit", "followers_url": "https://api.github.com/users/michaelschmit/followers", "following_url": "https://api.github.com/users/michaelschmit/following{/other_user}", "gists_url": "https://api.github.com/users/michaelschmit/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelschmit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelschmit/subscriptions", "organizations_url": "https://api.github.com/users/michaelschmit/orgs", "repos_url": "https://api.github.com/users/michaelschmit/repos", "events_url": "https://api.github.com/users/michaelschmit/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelschmit/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-06-08T03:26:57Z", "updated_at": "2020-06-11T16:46:22Z", "closed_at": "2020-06-08T10:31:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- To help keep this issue tracker clean and focused, please make sure you tried *all* the following resources before submitting your question. -->\r\n\r\n- [x] I searched the [HTTPX documentation](https://www.python-httpx.org) but couldn't find what I'm looking for.\r\n- [x] I looked through similar issues on GitHub, but didn't find anything.\r\n- [x] I looked up \"How to do ... in HTTPX\" on a search engine and didn't find any information.\r\n- [x] I asked the [community chat](https://gitter.im/encode/community) for help.\r\n\r\n### Question\r\n\r\nI would like to use httpx to perform a streaming get of a file and then stream that file to another service.  Is that possible with httpx?  Would it require receiving the entire file before making a streaming post to the other service?  It might be a useful example to have within the documentation. Thanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1014", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1014/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1014/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1014/events", "html_url": "https://github.com/encode/httpx/issues/1014", "id": 629482135, "node_id": "MDU6SXNzdWU2Mjk0ODIxMzU=", "number": 1014, "title": "httpx.URLLib3Transport does not support HTTP/2", "user": {"login": "paulchubatyy", "id": 98631, "node_id": "MDQ6VXNlcjk4NjMx", "avatar_url": "https://avatars0.githubusercontent.com/u/98631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulchubatyy", "html_url": "https://github.com/paulchubatyy", "followers_url": "https://api.github.com/users/paulchubatyy/followers", "following_url": "https://api.github.com/users/paulchubatyy/following{/other_user}", "gists_url": "https://api.github.com/users/paulchubatyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulchubatyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulchubatyy/subscriptions", "organizations_url": "https://api.github.com/users/paulchubatyy/orgs", "repos_url": "https://api.github.com/users/paulchubatyy/repos", "events_url": "https://api.github.com/users/paulchubatyy/events{/privacy}", "received_events_url": "https://api.github.com/users/paulchubatyy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1504075511, "node_id": "MDU6TGFiZWwxNTA0MDc1NTEx", "url": "https://api.github.com/repos/encode/httpx/labels/http/2", "name": "http/2", "color": "0c2cfc", "default": false, "description": "Issues and PRs related to HTTP/2"}, {"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T20:11:36Z", "updated_at": "2020-06-02T20:45:14Z", "closed_at": "2020-06-02T20:45:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\n`httpx.URLLib3Transport`  does not support HTTP/2. Probably because of [this hardcoding](https://github.com/encode/httpx/blob/master/httpx/_transports/urllib3.py#L35).\r\n\r\n### To reproduce\r\n\r\n```\r\n\u279c python\r\nPython 3.7.7 (default, Mar 10 2020, 16:11:21)\r\n[Clang 11.0.0 (clang-1100.0.33.12)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import httpx\r\n>>> httpx.__version__\r\n'0.13.3'\r\n>>> client = httpx.Client(http2=True, transport=httpx.URLLib3Transport())\r\n>>> response = client.get(\"https://google.com\")\r\n>>> response.http_version\r\n'HTTP/1.1'\r\n>>> print(\"It should be:\")\r\nIt should be:\r\n>>> \"HTTP/2\"\r\n'HTTP/2'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1013", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1013/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1013/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1013/events", "html_url": "https://github.com/encode/httpx/issues/1013", "id": 628066603, "node_id": "MDU6SXNzdWU2MjgwNjY2MDM=", "number": 1013, "title": "Consider non-LGPL character encoding library", "user": {"login": "johnthagen", "id": 10340167, "node_id": "MDQ6VXNlcjEwMzQwMTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/10340167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnthagen", "html_url": "https://github.com/johnthagen", "followers_url": "https://api.github.com/users/johnthagen/followers", "following_url": "https://api.github.com/users/johnthagen/following{/other_user}", "gists_url": "https://api.github.com/users/johnthagen/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnthagen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnthagen/subscriptions", "organizations_url": "https://api.github.com/users/johnthagen/orgs", "repos_url": "https://api.github.com/users/johnthagen/repos", "events_url": "https://api.github.com/users/johnthagen/events{/privacy}", "received_events_url": "https://api.github.com/users/johnthagen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-31T23:24:52Z", "updated_at": "2020-06-01T08:13:41Z", "closed_at": "2020-06-01T08:13:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python binary applications cannot legally depend on `httpx` because of it's dependency on `chardet`.\r\n\r\nhttps://github.com/encode/httpx/blob/8c84210555294ce10c681edae2df71627095a4e9/setup.py#L61\r\n\r\n## Describe the solution you would like.\r\n\r\nHere is a current license summary of `httpx` and its dependencies:\r\n\r\n```\r\n % pip-licenses --from=mixed\r\n Name         Version     License                                             \r\n certifi      2020.4.5.1  Mozilla Public License 2.0 (MPL 2.0)                \r\n chardet      3.0.4       GNU Library or Lesser General Public License (LGPL) \r\n h11          0.9.0       MIT License                                         \r\n h2           3.2.0       MIT License                                         \r\n hpack        3.0.0       MIT License                                         \r\n hstspreload  2020.5.30   BSD License                                         \r\n httpcore     0.9.1       BSD License                                         \r\n httpx        0.13.3      BSD License                                         \r\n hyperframe   5.2.0       MIT License                                         \r\n idna         2.9         BSD License                                         \r\n rfc3986      1.4.0       Apache Software License                             \r\n sniffio      1.1.0       MIT License, Apache Software License\r\n```\r\n\r\n`chardet` is [LGPL licensed](https://opensource.org/licenses/LGPL-3.0). I'm not a lawyer, but my understanding is that this makes it unsuitable for including inside of a binary due to the restriction that users need to be able to have the ability to swap out the LGPL library for another of their choosing, something infeasible for a binary distribution.\r\n\r\nUsers who use `httpx` and want to deploy via [Pyinstaller](https://www.pyinstaller.org/), [Nuitka](https://nuitka.net/), [PyOxdizer](https://pyoxidizer.readthedocs.io/en/stable/), etc. therefore are unable to use `httpx`, as I understand it.\r\n\r\n[`charset_normalizer`](https://github.com/ousret/charset_normalizer) is one such alternative that is MIT licensed, thus making it appropriate for binary deployments.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1008", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1008/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1008/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1008/events", "html_url": "https://github.com/encode/httpx/issues/1008", "id": 627682945, "node_id": "MDU6SXNzdWU2Mjc2ODI5NDU=", "number": 1008, "title": "ReadTimeout - SSL shutdown timed out", "user": {"login": "ScottSturdivant", "id": 709273, "node_id": "MDQ6VXNlcjcwOTI3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/709273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ScottSturdivant", "html_url": "https://github.com/ScottSturdivant", "followers_url": "https://api.github.com/users/ScottSturdivant/followers", "following_url": "https://api.github.com/users/ScottSturdivant/following{/other_user}", "gists_url": "https://api.github.com/users/ScottSturdivant/gists{/gist_id}", "starred_url": "https://api.github.com/users/ScottSturdivant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ScottSturdivant/subscriptions", "organizations_url": "https://api.github.com/users/ScottSturdivant/orgs", "repos_url": "https://api.github.com/users/ScottSturdivant/repos", "events_url": "https://api.github.com/users/ScottSturdivant/events{/privacy}", "received_events_url": "https://api.github.com/users/ScottSturdivant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-29T21:57:48Z", "updated_at": "2020-06-02T22:07:45Z", "closed_at": "2020-06-02T22:07:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nJust curious if someone might have some insight as to what might be happening here. I have some code that is subscribing to messages via an SSE server. The code is very similar to this:\r\n\r\n```python\r\nimport asyncio\r\nimport httpx\r\n\r\nclient = httpx.AsyncClient()\r\n\r\nasync def sse():\r\n    async with client:\r\n        async with client.stream('GET', 'https://server.blargh.home:5000/stream', timeout=None) as response:\r\n            async for chunk in response.aiter_raw():\r\n                yield chunk\r\n\r\n\r\nasync def subscribe():\r\n    async for event in sse():\r\n        print(repr(event))\r\n\r\n\r\nasyncio.run(subscribe())\r\n```\r\n\r\nOn one device in particular, about 40% of the time, I'm seeing that `httpcore._exceptions.ReadTimeout` is raised from the `aiter_raw()`.  Here is the traceback:\r\n\r\n```\r\n     async for chunk in response.aiter_raw():\r\n     async for chunk in self.aiterator:\r\n     async for chunk in self.stream:\r\n     async for part in self._raw_stream:\r\n   File \"/usr/local/packages/python3_7_acap/python3.7/lib/python3.7/site-packages/httpcore/_async/base.py\", line 57, in __aiter__\r\n   File \"/usr/local/packages/python3_7_acap/python3.7/lib/python3.7/site-packages/httpcore/_async/connection_pool.py\", line 49, in __aiter__\r\n   File \"/usr/local/packages/python3_7_acap/python3.7/lib/python3.7/site-packages/httpx/_models.py\", line 1009, in aiter_raw\r\n   File \"/usr/local/packages/python3_7_acap/python3.7/lib/python3.7/site-packages/pygw/core/client.py\", line 175, in sse\r\n ERROR:    Other SSE failure.\r\n Traceback (most recent call last):\r\n     data = await self.socket.read(self.READ_NUM_BYTES, timeout)\r\n     event = await self._receive_event(timeout)\r\n     raise to_exc(exc) from None\r\n     self.stream_reader.read(n), timeout.get(\"read\")\r\n   File \"/usr/local/packages/python3_7_acap/python3.7/lib/python3.7/site-packages/httpcore/_async/http11.py\", line 128, in _receive_response_data\r\n   File \"/usr/local/packages/python3_7_acap/python3.7/lib/python3.7/site-packages/httpcore/_async/http11.py\", line 145, in _receive_event\r\n   File \"/usr/local/packages/python3_7_acap/python3.7/lib/python3.7/site-packages/httpcore/_backends/asyncio.py\", line 135, in read\r\n   File \"/usr/local/packages/python3_7_acap/python3.7/lib/python3.7/site-packages/httpcore/_exceptions.py\", line 12, in map_exceptions\r\n   File \"<pyrun>/contextlib.py\", line 130, in __exit__\r\n httpcore._exceptions.ReadTimeout: SSL shutdown timed out\r\n```\r\n\r\n\r\nThe stream is pretty dead. Every ~ 5 minutes a heartbeat is sent but otherwise it is generally quiet. This problem is only happening on one device and it happens to be running PyRun as its interpreter. Perhaps that's making some difference.\r\n\r\nAs it is, I have a `try/except` around the `async with client` so the stream is able to be re-established and works. Just trying to figure out what might be generating this and if there's some system configuration that needs to be done, or...\r\n\r\nThank you for any help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1007", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1007/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1007/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1007/events", "html_url": "https://github.com/encode/httpx/issues/1007", "id": 627341722, "node_id": "MDU6SXNzdWU2MjczNDE3MjI=", "number": 1007, "title": "EnvironmentError ", "user": {"login": "attacker007", "id": 24765942, "node_id": "MDQ6VXNlcjI0NzY1OTQy", "avatar_url": "https://avatars3.githubusercontent.com/u/24765942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/attacker007", "html_url": "https://github.com/attacker007", "followers_url": "https://api.github.com/users/attacker007/followers", "following_url": "https://api.github.com/users/attacker007/following{/other_user}", "gists_url": "https://api.github.com/users/attacker007/gists{/gist_id}", "starred_url": "https://api.github.com/users/attacker007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/attacker007/subscriptions", "organizations_url": "https://api.github.com/users/attacker007/orgs", "repos_url": "https://api.github.com/users/attacker007/repos", "events_url": "https://api.github.com/users/attacker007/events{/privacy}", "received_events_url": "https://api.github.com/users/attacker007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-29T15:12:57Z", "updated_at": "2020-05-29T15:20:09Z", "closed_at": "2020-05-29T15:20:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've tried this command on mac OS Catalina:\r\n\r\n```\r\n\r\n pip install httpx\r\n\r\n```\r\n\r\nAnd Got this Error:\r\n\r\n```\r\n\r\nERROR: Could not install packages due to an EnvironmentError: Could not find a suitable TLS CA certificate bundle, invalid path: /usr/local/lib/python2.7/site-packages/pip/_vendor/certifi/cacert.pem\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/1004", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/1004/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/1004/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/1004/events", "html_url": "https://github.com/encode/httpx/issues/1004", "id": 626737655, "node_id": "MDU6SXNzdWU2MjY3Mzc2NTU=", "number": 1004, "title": "Clearing authorization at the request level.", "user": {"login": "ScottSturdivant", "id": 709273, "node_id": "MDQ6VXNlcjcwOTI3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/709273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ScottSturdivant", "html_url": "https://github.com/ScottSturdivant", "followers_url": "https://api.github.com/users/ScottSturdivant/followers", "following_url": "https://api.github.com/users/ScottSturdivant/following{/other_user}", "gists_url": "https://api.github.com/users/ScottSturdivant/gists{/gist_id}", "starred_url": "https://api.github.com/users/ScottSturdivant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ScottSturdivant/subscriptions", "organizations_url": "https://api.github.com/users/ScottSturdivant/orgs", "repos_url": "https://api.github.com/users/ScottSturdivant/repos", "events_url": "https://api.github.com/users/ScottSturdivant/events{/privacy}", "received_events_url": "https://api.github.com/users/ScottSturdivant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/1", "html_url": "https://github.com/encode/httpx/milestone/1", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/1/labels", "id": 4660186, "node_id": "MDk6TWlsZXN0b25lNDY2MDE4Ng==", "number": 1, "title": "v1.0", "description": "", "creator": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "open_issues": 9, "closed_issues": 28, "state": "open", "created_at": "2019-09-15T12:23:30Z", "updated_at": "2020-08-21T11:30:58Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2020-05-28T18:57:17Z", "updated_at": "2020-08-11T13:18:28Z", "closed_at": "2020-08-11T13:18:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nMerging of request-level auth *unset* does not take priority over Client level value.\r\n\r\n### To reproduce\r\n\r\nTry to 'unset' the client set authorization values.\r\n\r\n```python\r\nwith httpx.Client(auth=('tom', 'mot123')) as client:\r\n    r = client.get('http://httpbin.org', auth=None)\r\n    \r\nassert 'Authorization' not in r.request.headers['Authorization']\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe documentation for [Merging of configuration](https://www.python-httpx.org/advanced/#merging-of-configuration) states `For all other parameters, the request-level value takes priority.` and shows this example:\r\n\r\n```python\r\nwith httpx.Client(auth=('tom', 'mot123')) as client:\r\n    r = client.get('https://example.com', auth=('alice', 'ecila123'))\r\n_, _, auth = r.request.headers['Authorization'].partition(' ')\r\n```\r\n\r\nI would expect that by setting `auth=None` in the request level that the individual request would be sent without authorization.\r\n\r\n### Actual behavior\r\n\r\nIn reality, the authorization is not overridden. This is due to this line: https://github.com/encode/httpx/blob/master/httpx/_client.py#L258\r\n\r\nOverriding the auth value via this method works:\r\n\r\n```python\r\nwith httpx.Client(auth=('tom', 'mot123')) as client:\r\n    r = client.get('http://httpbin.org', auth=Auth())\r\n    \r\nassert 'Authorization' not in r.request.headers['Authorization']\r\n```\r\n\r\nPersonally, I found passing in `auth=None` to be more intuitive than `auth=Auth()` to indicate that no authorization should be used.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/987", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/987/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/987/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/987/events", "html_url": "https://github.com/encode/httpx/issues/987", "id": 623821062, "node_id": "MDU6SXNzdWU2MjM4MjEwNjI=", "number": 987, "title": "Content-Length header is missing in POST/DELETE/PUT/PATCH requests without body", "user": {"login": "Senpos", "id": 9695470, "node_id": "MDQ6VXNlcjk2OTU0NzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/9695470?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Senpos", "html_url": "https://github.com/Senpos", "followers_url": "https://api.github.com/users/Senpos/followers", "following_url": "https://api.github.com/users/Senpos/following{/other_user}", "gists_url": "https://api.github.com/users/Senpos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Senpos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Senpos/subscriptions", "organizations_url": "https://api.github.com/users/Senpos/orgs", "repos_url": "https://api.github.com/users/Senpos/repos", "events_url": "https://api.github.com/users/Senpos/events{/privacy}", "received_events_url": "https://api.github.com/users/Senpos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-24T08:37:41Z", "updated_at": "2020-05-26T14:03:56Z", "closed_at": "2020-05-26T14:03:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- To help keep this issue tracker clean and focused, please make sure you tried *all* the following resources before submitting your question. -->\r\n\r\n- [x] I searched the [HTTPX documentation](https://www.python-httpx.org) but couldn't find what I'm looking for.\r\n- [x] I looked through similar issues on GitHub, but didn't find anything.\r\n- [x] I looked up \"How to do ... in HTTPX\" on a search engine and didn't find any information.\r\n- [x] I asked the [community chat](https://gitter.im/encode/community) for help ~~but didn't get an answer.~~ [and decided to create an issue. :)](https://gitter.im/encode/community?at=5ec95c46778fad0b13201d03)\r\n\r\n### Environment\r\n**httpx version**: `0.13.1`\r\n**Python version**: `3.7.3`\r\n**OS**: Windows 7\r\n\r\n### Question\r\nI am not sure how to classify this issue: it could be a bug, since it is an incompatible with `requests`, on the other hand, it could be feature request, if you consider it is not that important. So, I decided to go with question. :D\r\n\r\nWas replacing `requests` with `httpx` in my small script and received an error from the server `httpx._exceptions.HTTPError: 411 Client Error: Length Required for url: ...` while doing a `POST`  request **without a body** (same behavior is applicable for `PUT` and `PATCH` requests too).\r\n\r\n*Steps to reproduce:*\r\n```python\r\nimport requests\r\nimport httpx\r\n\r\nfor client in (requests, httpx):\r\n    for method in (\"get\", \"head\", \"delete\", \"post\", \"put\", \"patch\"):\r\n        r = client.request(method, f\"https://httpbin.org/headers\")\r\n        print(\r\n            f\"[{client.__name__}] method={method.upper()} \"\r\n            f'Content-Length={r.request.headers.get(\"Content-Length\")}'\r\n        )\r\n```\r\n\r\n`requests` adds `Content-Length` header in every possible http method, except `GET` and `HEAD`.\r\n`httpx` does not add `Content-Length` header at all, **unless requests has a body**.\r\n\r\n#866 added `Content-Length` to all methods, but since it is not needed in `GET` and `HEAD` methods, it was reverted.\r\n\r\nI assume, it should be handled during the `Request` building.\r\n`httpx` decides whether to add `Content-Length` depending on the steam type, which is handled in [_content_streams.py#L314](https://github.com/encode/httpx/blob/aa630d36c22642d7004a57abd222a14461ee4d77/httpx/_content_streams.py#L372).\r\n\r\n### Thoughts on how to solve it\r\nTo be honest, I am not sure what is the proper way to deal with this. :-(\r\n\r\nMy first idea was to use `method` inside the [stream](https://github.com/encode/httpx/blob/aa630d36c22642d7004a57abd222a14461ee4d77/httpx/_content_streams.py#L49):\r\n```python3\r\nclass ByteStream(ContentStream):\r\n    def __init__(self, body: typing.Union[str, bytes], method: str) -> None:\r\n        self.body = body.encode(\"utf-8\") if isinstance(body, str) else body\r\n        self.method = method\r\n\r\n    def get_headers(self) -> typing.Dict[str, str]:        \r\n        if self.method in (\"GET\", \"HEAD\"):\r\n            return {}\r\n        content_length = str(len(self.body)) if self.body else \"0\"\r\n        return {\"Content-Length\": content_length}\r\n```\r\n\r\nBut this approach is not great, since it requires to pass `method` from `Request` to `encode` and then to `ByteStream` inside it. Also, it is not clear what `method` should I use when building stream in [`read`](https://github.com/encode/httpx/blob/aa630d36c22642d7004a57abd222a14461ee4d77/httpx/_models.py#L656) methods.\r\n\r\nPlease, let me know what you think. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/983", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/983/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/983/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/983/events", "html_url": "https://github.com/encode/httpx/issues/983", "id": 623187921, "node_id": "MDU6SXNzdWU2MjMxODc5MjE=", "number": 983, "title": "Standalone `create_ssl_context()` function?", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068460, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYw", "url": "https://api.github.com/repos/encode/httpx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/6", "html_url": "https://github.com/encode/httpx/milestone/6", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/6/labels", "id": 5701831, "node_id": "MDk6TWlsZXN0b25lNTcwMTgzMQ==", "number": 6, "title": "v0.14", "description": "", "creator": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 32, "state": "closed", "created_at": "2020-07-27T09:09:04Z", "updated_at": "2020-08-07T15:10:11Z", "due_on": "2020-07-31T07:00:00Z", "closed_at": "2020-08-07T15:10:11Z"}, "comments": 1, "created_at": "2020-05-22T12:57:19Z", "updated_at": "2020-07-30T07:38:10Z", "closed_at": "2020-07-30T07:38:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Now that we've got a nicely spec'ed Transport API we can give our users some pretty neat flexibility, but I think there's also one place where we've maybe got a gap we'd like to plug?...\r\n\r\nSomething that's important for us is to be able to easily demonstrate to our users how to drop down to lower levels of abstraction in the API when needed, for example it'd be really helpful how to instantiate a client directly with an `httpcore` connection pool...\r\n\r\n```python\r\ntransport = httpcore.AsyncConnectionPool(...)\r\nclient = httpx.AsyncClient(transport=transport)\r\n```\r\n\r\nThat's really valuable because it *helps* an understanding of how the pieces fit together, and also allows us to do stuff like add some low-level connection options on `httpcore`, without *necessarily* having to expose those all the way through to `httpx`. (Eg https://github.com/encode/httpcore/issues/88)\r\n\r\nHowever, the one bit that's missing is that there currently isn't any *convenient* way for our users to generate an appropriately configured SSLContext without digging into the gnarly details.\r\n\r\nI think we might well want to expose a stand alone function to provide users with our \"generate an SSL context\" functionality, like so...\r\n\r\n```python\r\nssl_context = httpx.create_ssl_context()  # Accepts the standard 'verify', 'cert', trust_env' arguments.\r\n```\r\n\r\nWhich then gives our users everything they need to directly plug in a properly configured `httpcore` connection pool...\r\n\r\n```python\r\nssl_context = httpx.create_ssl_context()\r\ntransport = httpcore.AsyncConnectionPool(ssl_context=ssl_context)\r\nclient = httpx.AsyncClient(transport=transport)\r\n```\r\n\r\nImplementation-wise this'd just be...\r\n\r\n```python\r\ndef create_ssl_context(...):\r\n    return SSLConfig(...).ssl_context\r\n```\r\n\r\nAnd then expose the function at the top-level init.\r\n\r\n*Incidentally I think our `SSLConfig` instances our now a bit of a vestige of past designs, and we could probably internally use the same `create_ssl_context` inside the client implementation, rather than hanging on to the intermediary config instance.*", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/978", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/978/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/978/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/978/events", "html_url": "https://github.com/encode/httpx/issues/978", "id": 622749824, "node_id": "MDU6SXNzdWU2MjI3NDk4MjQ=", "number": 978, "title": "Memory leak when creating lots of AsyncClient contexts", "user": {"login": "Recursing", "id": 6978200, "node_id": "MDQ6VXNlcjY5NzgyMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/6978200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Recursing", "html_url": "https://github.com/Recursing", "followers_url": "https://api.github.com/users/Recursing/followers", "following_url": "https://api.github.com/users/Recursing/following{/other_user}", "gists_url": "https://api.github.com/users/Recursing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Recursing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Recursing/subscriptions", "organizations_url": "https://api.github.com/users/Recursing/orgs", "repos_url": "https://api.github.com/users/Recursing/repos", "events_url": "https://api.github.com/users/Recursing/events{/privacy}", "received_events_url": "https://api.github.com/users/Recursing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2020-05-21T20:06:40Z", "updated_at": "2020-05-22T11:05:19Z", "closed_at": "2020-05-22T11:05:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\nAfter creating an AsyncClient context (with async with), it does not seem to be garbage collected, that can be a problem for very long running services that might create a bunch of them and eventually run out of memory\r\n\r\n### To reproduce\r\n```\r\nimport httpx\r\nimport gc\r\nimport asyncio\r\n\r\nprint(f\"httpx version: {httpx.__version__}\")\r\n\r\n\r\nasync def make_async_client():\r\n    async with httpx.AsyncClient() as client:\r\n        await asyncio.sleep(10)\r\n\r\n\r\nasync def main(n):\r\n    tasks = []\r\n    for _ in range(n):\r\n        tasks.append(make_async_client())\r\n    print(f\"Creating {n} contexts, sleeping 10 secs\")\r\n    await asyncio.wait(tasks)\r\n\r\n\r\nasyncio.run(main(2000))\r\nprint(\"Finished run, still using lots of memory\")\r\ngc.collect()\r\ninput(\"gc.collect() does not help :(\")\r\n```\r\n\r\nComparison with `aiohttp`\r\n```\r\nimport aiohttp\r\nimport asyncio\r\n\r\nprint(f\"aiohttp version {aiohttp.__version__}\")\r\n\r\n\r\nasync def make_async_client():\r\n    async with aiohttp.ClientSession() as client:\r\n        await asyncio.sleep(10)\r\n\r\n\r\nasync def main(n):\r\n    tasks = []\r\n    for _ in range(n):\r\n        tasks.append(make_async_client())\r\n    print(f\"Creating {n} contexts and sleeping\")\r\n    await asyncio.wait(tasks)\r\n\r\n\r\nasyncio.run(main(200000))\r\ninput(\"Finished run, all memory is freed\")\r\n```\r\n\r\n<!-- Provide a *minimal* example with steps to reproduce the bug locally.\r\n\r\nNOTE: try to keep any external dependencies *at an absolute minimum* (servers, proxies, certificates...).\r\nIn other words, remove anything that doesn't make the bug go away.\r\n\r\nIf you need a local server to replicate against, you can build one using eg. Starlette [0] and Uvicorn [1], or any tool you feel comfortable with. Check out other issues for examples and remember to share setup instructions here. :-)\r\n\r\n[0]: https://www.starlette.io\r\n[1]: https://www.uvicorn.org\r\n-->\r\n\r\n### Expected behavior\r\n\r\n<!-- A clear and concise description of what you expected to happen. -->\r\nMemory gets freed, after exiting the async context, like for `aiohttp`\r\n\r\n### Actual behavior\r\nMemory does not get freed, even after explicitly calling `gc.collect()`\r\n\r\n<!-- A clear and concise description of what actually happens. -->\r\n\r\n### Debugging material\r\n\r\n<!-- Any tracebacks, screenshots, etc. that can help understanding the problem.\r\n\r\nNOTE:\r\n- Please list tracebacks in full (don't truncate them).\r\n- If relevant, consider turning on DEBUG or TRACE logs for additional details (see https://www.python-httpx.org/environment_variables/#httpx_log_level).\r\n- Consider using `<details>` to make tracebacks/logs collapsible if they're very large (see https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d).\r\n-->\r\n\r\n### Environment\r\n\r\n- OS: Linux (many versions)\r\n- Python version: 3.8.3\r\n- HTTPX version: both 0.12.1 and `master`\r\n- Async environment: both `asyncio` and `trio`\r\n- HTTP proxy: no\r\n- Custom certificates: no\r\n\r\n### Additional context\r\n\r\n<!-- Any additional information that can help understanding the problem.\r\n\r\nEg. linked issues, or a description of what you were trying to achieve. -->\r\n\r\nI understand typically you need to have only one async ClientSession, but it shouldn't leak memory anyway, for very long running processes it can be a problem\r\n\r\n\r\nThanks for this great library! If you're interested I can try to debug this issue and send a PR", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/966", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/966/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/966/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/966/events", "html_url": "https://github.com/encode/httpx/issues/966", "id": 622402990, "node_id": "MDU6SXNzdWU2MjI0MDI5OTA=", "number": 966, "title": "Consider `URLLib3Transport` interface, since it's becoming public API.", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/1", "html_url": "https://github.com/encode/httpx/milestone/1", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/1/labels", "id": 4660186, "node_id": "MDk6TWlsZXN0b25lNDY2MDE4Ng==", "number": 1, "title": "v1.0", "description": "", "creator": {"login": "florimondmanca", "id": 15911462, "node_id": "MDQ6VXNlcjE1OTExNDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/15911462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florimondmanca", "html_url": "https://github.com/florimondmanca", "followers_url": "https://api.github.com/users/florimondmanca/followers", "following_url": "https://api.github.com/users/florimondmanca/following{/other_user}", "gists_url": "https://api.github.com/users/florimondmanca/gists{/gist_id}", "starred_url": "https://api.github.com/users/florimondmanca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florimondmanca/subscriptions", "organizations_url": "https://api.github.com/users/florimondmanca/orgs", "repos_url": "https://api.github.com/users/florimondmanca/repos", "events_url": "https://api.github.com/users/florimondmanca/events{/privacy}", "received_events_url": "https://api.github.com/users/florimondmanca/received_events", "type": "User", "site_admin": false}, "open_issues": 9, "closed_issues": 28, "state": "open", "created_at": "2019-09-15T12:23:30Z", "updated_at": "2020-08-21T11:30:58Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2020-05-21T10:24:02Z", "updated_at": "2020-07-25T12:27:30Z", "closed_at": "2020-07-25T12:27:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Follow on from #963\r\n\r\nThere's a couple of things we could consider in the `URLLib3Transport` interface, now that it's becoming public API.\r\n\r\n* We don't really want to pass `pool_limits`, since it doesn't quite fit the parameters that `urllib3` uses to configure it's PoolManager. We *needed* to pass it before, since we were using the class for our sync implementation, and needed the consistency between our async and sync cases, but now that we're providing it separately we should just mirror their native `num_pools` and `maxsize`.\r\n* With `httpcore` we provide different classes for the proxy and the plain-connection-pool transports. We *could?* choose to do the same with the `urllib3` transport, rather than providing a single class with an optional `proxy=...` argument.\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/965", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/965/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/965/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/965/events", "html_url": "https://github.com/encode/httpx/issues/965", "id": 622398408, "node_id": "MDU6SXNzdWU2MjIzOTg0MDg=", "number": 965, "title": "Make `urllib3` optional.", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/5", "html_url": "https://github.com/encode/httpx/milestone/5", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/5/labels", "id": 5446982, "node_id": "MDk6TWlsZXN0b25lNTQ0Njk4Mg==", "number": 5, "title": "v0.13", "description": "Changes to be included on our 0.13 release, preparing for 1.0.", "creator": {"login": "yeraydiazdiaz", "id": 6739793, "node_id": "MDQ6VXNlcjY3Mzk3OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6739793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeraydiazdiaz", "html_url": "https://github.com/yeraydiazdiaz", "followers_url": "https://api.github.com/users/yeraydiazdiaz/followers", "following_url": "https://api.github.com/users/yeraydiazdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/yeraydiazdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeraydiazdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeraydiazdiaz/subscriptions", "organizations_url": "https://api.github.com/users/yeraydiazdiaz/orgs", "repos_url": "https://api.github.com/users/yeraydiazdiaz/repos", "events_url": "https://api.github.com/users/yeraydiazdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/yeraydiazdiaz/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 11, "state": "closed", "created_at": "2020-05-21T09:47:03Z", "updated_at": "2020-07-14T12:45:31Z", "due_on": null, "closed_at": "2020-07-14T12:45:31Z"}, "comments": 3, "created_at": "2020-05-21T10:15:42Z", "updated_at": "2020-05-21T12:43:35Z", "closed_at": "2020-05-21T12:43:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Follow up to #963.\r\n\r\nLet's ensure that the `urllib3` dependency is optional.\r\n\r\n* Make sure we don't have it anymore in `setup.py`.\r\n* Make sure it's listed as optional in the `REAEDME`/`homepage`.\r\n* Make sure that the `urllib3.py` module passes gracefully on `ImportError`, and checks the package exists in `URLLib3Transport.__init__()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/962", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/962/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/962/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/962/events", "html_url": "https://github.com/encode/httpx/issues/962", "id": 621525717, "node_id": "MDU6SXNzdWU2MjE1MjU3MTc=", "number": 962, "title": "Version 0.13", "user": {"login": "yeraydiazdiaz", "id": 6739793, "node_id": "MDQ6VXNlcjY3Mzk3OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6739793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeraydiazdiaz", "html_url": "https://github.com/yeraydiazdiaz", "followers_url": "https://api.github.com/users/yeraydiazdiaz/followers", "following_url": "https://api.github.com/users/yeraydiazdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/yeraydiazdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeraydiazdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeraydiazdiaz/subscriptions", "organizations_url": "https://api.github.com/users/yeraydiazdiaz/orgs", "repos_url": "https://api.github.com/users/yeraydiazdiaz/repos", "events_url": "https://api.github.com/users/yeraydiazdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/yeraydiazdiaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/5", "html_url": "https://github.com/encode/httpx/milestone/5", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/5/labels", "id": 5446982, "node_id": "MDk6TWlsZXN0b25lNTQ0Njk4Mg==", "number": 5, "title": "v0.13", "description": "Changes to be included on our 0.13 release, preparing for 1.0.", "creator": {"login": "yeraydiazdiaz", "id": 6739793, "node_id": "MDQ6VXNlcjY3Mzk3OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6739793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeraydiazdiaz", "html_url": "https://github.com/yeraydiazdiaz", "followers_url": "https://api.github.com/users/yeraydiazdiaz/followers", "following_url": "https://api.github.com/users/yeraydiazdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/yeraydiazdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeraydiazdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeraydiazdiaz/subscriptions", "organizations_url": "https://api.github.com/users/yeraydiazdiaz/orgs", "repos_url": "https://api.github.com/users/yeraydiazdiaz/repos", "events_url": "https://api.github.com/users/yeraydiazdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/yeraydiazdiaz/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 11, "state": "closed", "created_at": "2020-05-21T09:47:03Z", "updated_at": "2020-07-14T12:45:31Z", "due_on": null, "closed_at": "2020-07-14T12:45:31Z"}, "comments": 3, "created_at": "2020-05-20T07:26:41Z", "updated_at": "2020-05-21T10:56:26Z", "closed_at": "2020-05-21T09:48:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all,\r\n\r\nWe've been focused lately on what should make it to 1.0 and kind of forgot about 0.13.\r\n\r\nIs there anything outstanding for it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/961", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/961/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/961/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/961/events", "html_url": "https://github.com/encode/httpx/issues/961", "id": 620044869, "node_id": "MDU6SXNzdWU2MjAwNDQ4Njk=", "number": 961, "title": "AsyncClient set timeout but doesn't work?", "user": {"login": "ch-boogeyman", "id": 46711557, "node_id": "MDQ6VXNlcjQ2NzExNTU3", "avatar_url": "https://avatars0.githubusercontent.com/u/46711557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ch-boogeyman", "html_url": "https://github.com/ch-boogeyman", "followers_url": "https://api.github.com/users/ch-boogeyman/followers", "following_url": "https://api.github.com/users/ch-boogeyman/following{/other_user}", "gists_url": "https://api.github.com/users/ch-boogeyman/gists{/gist_id}", "starred_url": "https://api.github.com/users/ch-boogeyman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ch-boogeyman/subscriptions", "organizations_url": "https://api.github.com/users/ch-boogeyman/orgs", "repos_url": "https://api.github.com/users/ch-boogeyman/repos", "events_url": "https://api.github.com/users/ch-boogeyman/events{/privacy}", "received_events_url": "https://api.github.com/users/ch-boogeyman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-18T09:15:09Z", "updated_at": "2020-05-18T12:52:13Z", "closed_at": "2020-05-18T12:33:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "![stop](https://user-images.githubusercontent.com/46711557/82195451-e6518600-992a-11ea-8e97-29ea3bed9edd.png)\r\n![running](https://user-images.githubusercontent.com/46711557/82195463-e94c7680-992a-11ea-8439-03f53d842007.png)\r\nHelp!Any problems about my codes or httpx's problem?\r\nHow to fix it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/960", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/960/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/960/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/960/events", "html_url": "https://github.com/encode/httpx/issues/960", "id": 619836702, "node_id": "MDU6SXNzdWU2MTk4MzY3MDI=", "number": 960, "title": "has_content attribute for response object?", "user": {"login": "Znunu", "id": 61394004, "node_id": "MDQ6VXNlcjYxMzk0MDA0", "avatar_url": "https://avatars2.githubusercontent.com/u/61394004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Znunu", "html_url": "https://github.com/Znunu", "followers_url": "https://api.github.com/users/Znunu/followers", "following_url": "https://api.github.com/users/Znunu/following{/other_user}", "gists_url": "https://api.github.com/users/Znunu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Znunu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Znunu/subscriptions", "organizations_url": "https://api.github.com/users/Znunu/orgs", "repos_url": "https://api.github.com/users/Znunu/repos", "events_url": "https://api.github.com/users/Znunu/events{/privacy}", "received_events_url": "https://api.github.com/users/Znunu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-18T00:43:13Z", "updated_at": "2020-05-18T06:32:56Z", "closed_at": "2020-05-18T06:32:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I couldn't find anything like this in the docs\r\nWould it maybe make sense to add something like this? That's true, when the size of the content is zero\r\nPlease forgive my ignorance, I'm not very experienced", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/959", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/959/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/959/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/959/events", "html_url": "https://github.com/encode/httpx/issues/959", "id": 619637033, "node_id": "MDU6SXNzdWU2MTk2MzcwMzM=", "number": 959, "title": "Direct support questions to StackOverflow?", "user": {"login": "yeraydiazdiaz", "id": 6739793, "node_id": "MDQ6VXNlcjY3Mzk3OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6739793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeraydiazdiaz", "html_url": "https://github.com/yeraydiazdiaz", "followers_url": "https://api.github.com/users/yeraydiazdiaz/followers", "following_url": "https://api.github.com/users/yeraydiazdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/yeraydiazdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeraydiazdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeraydiazdiaz/subscriptions", "organizations_url": "https://api.github.com/users/yeraydiazdiaz/orgs", "repos_url": "https://api.github.com/users/yeraydiazdiaz/repos", "events_url": "https://api.github.com/users/yeraydiazdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/yeraydiazdiaz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1787082381, "node_id": "MDU6TGFiZWwxNzg3MDgyMzgx", "url": "https://api.github.com/repos/encode/httpx/labels/discussion", "name": "discussion", "color": "d0c7fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-17T07:54:38Z", "updated_at": "2020-06-15T19:09:58Z", "closed_at": "2020-06-15T19:09:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've noticed a surge in basic usage questions both in the issues and in the chat which is awesome.\r\n\r\nHowever, I don't think the chat is the appropriate place for these since they won't show up in search engines, the answers (if any) may be later in the timeline, and most of the time users will just write the new question there. I think  issues are not the right place for these either since it increases the burden on maintainers.\r\n\r\nI suggest we take a page from [Hynek's talk](https://hynek.me/talks/python-foss/) and create a tag in StackOverflow and direct usage questions there.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/958", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/958/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/958/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/958/events", "html_url": "https://github.com/encode/httpx/issues/958", "id": 619627918, "node_id": "MDU6SXNzdWU2MTk2Mjc5MTg=", "number": 958, "title": "How to set proxy connect timeout ? Got this  httpx._exceptions.NetworkError: [Errno 60] Connect call failed", "user": {"login": "umruuu", "id": 52505707, "node_id": "MDQ6VXNlcjUyNTA1NzA3", "avatar_url": "https://avatars3.githubusercontent.com/u/52505707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/umruuu", "html_url": "https://github.com/umruuu", "followers_url": "https://api.github.com/users/umruuu/followers", "following_url": "https://api.github.com/users/umruuu/following{/other_user}", "gists_url": "https://api.github.com/users/umruuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/umruuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/umruuu/subscriptions", "organizations_url": "https://api.github.com/users/umruuu/orgs", "repos_url": "https://api.github.com/users/umruuu/repos", "events_url": "https://api.github.com/users/umruuu/events{/privacy}", "received_events_url": "https://api.github.com/users/umruuu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}, {"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-17T07:00:08Z", "updated_at": "2020-05-17T07:57:29Z", "closed_at": "2020-05-17T07:57:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found out timeout is not working for the proxy connect , if there is not an option to set up, how can i change the defult source code in order to change the proxy connect timeout?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/957", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/957/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/957/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/957/events", "html_url": "https://github.com/encode/httpx/issues/957", "id": 619360441, "node_id": "MDU6SXNzdWU2MTkzNjA0NDE=", "number": 957, "title": "http proxy get ProxyError: 403 Forbidden port", "user": {"login": "mengyyy", "id": 10589755, "node_id": "MDQ6VXNlcjEwNTg5NzU1", "avatar_url": "https://avatars1.githubusercontent.com/u/10589755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mengyyy", "html_url": "https://github.com/mengyyy", "followers_url": "https://api.github.com/users/mengyyy/followers", "following_url": "https://api.github.com/users/mengyyy/following{/other_user}", "gists_url": "https://api.github.com/users/mengyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/mengyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mengyyy/subscriptions", "organizations_url": "https://api.github.com/users/mengyyy/orgs", "repos_url": "https://api.github.com/users/mengyyy/repos", "events_url": "https://api.github.com/users/mengyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/mengyyy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}, {"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-16T02:42:25Z", "updated_at": "2020-05-16T07:01:07Z", "closed_at": "2020-05-16T07:00:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nI found sometime when i used http proxy (convert from socks5 by polipo) i got `ProxyError: 403 Forbidden port` .\r\n\r\nBut when i directly use socks5 proxy by https://github.com/encode/httpx/issues/203#issuecomment-611914974 all is OK.\r\n\r\n\r\n```python\r\nproxy_location = \"127.0.0.1:8123\"\r\n\r\nproxies = {\r\n    \"http\": f\"http://{proxy_location}\",\r\n    \"https\": f\"http://{proxy_location}\"\r\n}\r\n\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 733, in get\r\n    722  def get(\r\n    723      self,\r\n    724      url: URLTypes,\r\n    725      *,\r\n    726      params: QueryParamTypes = None,\r\n    727      headers: HeaderTypes = None,\r\n    728      cookies: CookieTypes = None,\r\n    729      auth: AuthTypes = None,\r\n    730      allow_redirects: bool = True,\r\n    731      timeout: typing.Union[TimeoutTypes, UnsetType] = UNSET,\r\n    732  ) -> Response:\r\n--> 733      return self.request(\r\n    734          \"GET\",\r\n    ..................................................\r\n     self = <httpx._client.Client object at 0x7fef70ffbd60>\r\n     url = 'https://xxxxnetworkk:55001/h/xxxxxxxxxxx\r\n            xxxxxxxxxxxxxxxxxxxxxx-xxxxxx-1050-1500-jpg/xxxxxxxx\r\n            p=xxxxxxxxxxxxxxxxxxxxxxxxxxx;xxxxxxxxxxxxxxxx_\r\n            02.jpg'\r\n     URLTypes = typing.Union[ForwardRef('URL'), str]\r\n     params = None\r\n     QueryParamTypes = typing.Union[ForwardRef('QueryParams'), typing.Mapping[str,\r\n                        typing.Union[str, int, float, bool, NoneType, typing.Sequenc\r\n                        e[typing.Union[str, int, float, bool, NoneType]]]], typing.L\r\n                        ist[typing.Tuple[str, typing.Union[str, int, float, bool, No\r\n                        neType]]], str]\r\n     headers = None\r\n     HeaderTypes = typing.Union[ForwardRef('Headers'), typing.Dict[typing.Union\r\n                    [str, bytes], typing.Union[str, bytes]], typing.Sequence[typ\r\n                    ing.Tuple[typing.Union[str, bytes], typing.Union[str, bytes]\r\n                    ]]]\r\n     cookies = None\r\n     CookieTypes = typing.Union[ForwardRef('Cookies'), http.cookiejar.CookieJar\r\n                    , typing.Dict[str, str]]\r\n     auth = None\r\n     AuthTypes = typing.Union[typing.Tuple[typing.Union[str, bytes], typing.U\r\n                  nion[str, bytes]], typing.Callable[[ForwardRef('Request')],\r\n                  ForwardRef('Request')], ForwardRef('Auth')]\r\n     allow_redirects = True\r\n     timeout = 60\r\n     typing.Union = typing.Union\r\n     TimeoutTypes = typing.Union[NoneType, float, typing.Tuple[float, float, flo\r\n                     at, float], ForwardRef('Timeout')]\r\n     UnsetType = <class 'httpx._config.UnsetType'>\r\n     UNSET = <httpx._config.UnsetType object at 0x7fefb2868370>\r\n     Response = <class 'httpx._models.Response'>\r\n     self.request = <method 'Client.request' of <httpx._client.Client object at\r\n                     0x7fef70ffbd60> _client.py:553>\r\n    ..................................................\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 578, in request\r\n    553  def request(\r\n    554      self,\r\n    555      method: str,\r\n    556      url: URLTypes,\r\n    557      *,\r\n    558      data: RequestData = None,\r\n    559      files: RequestFiles = None,\r\n    560      json: typing.Any = None,\r\n    561      params: QueryParamTypes = None,\r\n    562      headers: HeaderTypes = None,\r\n    563      cookies: CookieTypes = None,\r\n    564      auth: AuthTypes = None,\r\n    565      allow_redirects: bool = True,\r\n    566      timeout: typing.Union[TimeoutTypes, UnsetType] = UNSET,\r\n    567  ) -> Response:\r\n (...)\r\n    574          params=params,\r\n    575          headers=headers,\r\n    576          cookies=cookies,\r\n    577      )\r\n--> 578      return self.send(\r\n    579          request, auth=auth, allow_redirects=allow_redirects, timeout=timeout,\r\n    ..................................................\r\n     request = <Request('GET', 'https://xxxxnetworkk:5\r\n                5001/h/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxx-1050-\r\n                1500-jpg/xxxxxxxxp=xxxxxxxxxxxxxxxxxxxxxxxxxxx;x\r\n                xxxxxxxx/xxxxxx_02.jpg')>\r\n     self = <httpx._client.Client object at 0x7fef70ffbd60>\r\n     method = 'GET'\r\n     url = 'https://xxxxnetworkk:55001/h/xxxxxxxxxxx\r\n            xxxxxxxxxxxxxxxxxxxxxx-xxxxxx-1050-1500-jpg/xxxxxxxx\r\n            p=xxxxxxxxxxxxxxxxxxxxxxxxxxx;xxxxxxxxxxxxxxxx_\r\n            02.jpg'\r\n     URLTypes = typing.Union[ForwardRef('URL'), str]\r\n     data = None\r\n     RequestData = typing.Union[dict, str, bytes, typing.Iterator[bytes], typin\r\n                    g.AsyncIterator[bytes]]\r\n     files = None\r\n     RequestFiles = typing.Dict[str, typing.Union[typing.IO[str], typing.IO[byte\r\n                     s], str, bytes, typing.Tuple[typing.Union[str, NoneType], ty\r\n                     ping.Union[typing.IO[str], typing.IO[bytes], str, bytes]], t\r\n                     yping.Tuple[typing.Union[str, NoneType], typing.Union[typing\r\n                     .IO[str], typing.IO[bytes], str, bytes], typing.Union[str, N\r\n                     oneType]]]]\r\n     json = None\r\n     typing.Any = typing.Any\r\n     params = None\r\n     QueryParamTypes = typing.Union[ForwardRef('QueryParams'), typing.Mapping[str,\r\n                        typing.Union[str, int, float, bool, NoneType, typing.Sequenc\r\n                        e[typing.Union[str, int, float, bool, NoneType]]]], typing.L\r\n                        ist[typing.Tuple[str, typing.Union[str, int, float, bool, No\r\n                        neType]]], str]\r\n     headers = None\r\n     HeaderTypes = typing.Union[ForwardRef('Headers'), typing.Dict[typing.Union\r\n                    [str, bytes], typing.Union[str, bytes]], typing.Sequence[typ\r\n                    ing.Tuple[typing.Union[str, bytes], typing.Union[str, bytes]\r\n                    ]]]\r\n     cookies = None\r\n     CookieTypes = typing.Union[ForwardRef('Cookies'), http.cookiejar.CookieJar\r\n                    , typing.Dict[str, str]]\r\n     auth = None\r\n     AuthTypes = typing.Union[typing.Tuple[typing.Union[str, bytes], typing.U\r\n                  nion[str, bytes]], typing.Callable[[ForwardRef('Request')],\r\n                  ForwardRef('Request')], ForwardRef('Auth')]\r\n     allow_redirects = True\r\n     timeout = 60\r\n     typing.Union = typing.Union\r\n     TimeoutTypes = typing.Union[NoneType, float, typing.Tuple[float, float, flo\r\n                     at, float], ForwardRef('Timeout')]\r\n     UnsetType = <class 'httpx._config.UnsetType'>\r\n     UNSET = <httpx._config.UnsetType object at 0x7fefb2868370>\r\n     Response = <class 'httpx._models.Response'>\r\n     self.send = <method 'Client.send' of <httpx._client.Client object at 0x7\r\n                  fef70ffbd60> _client.py:582>\r\n    ..................................................\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 598, in send\r\n    582  def send(\r\n    583      self,\r\n    584      request: Request,\r\n    585      *,\r\n    586      stream: bool = False,\r\n    587      auth: AuthTypes = None,\r\n    588      allow_redirects: bool = True,\r\n    589      timeout: typing.Union[TimeoutTypes, UnsetType] = UNSET,\r\n    590  ) -> Response:\r\n (...)\r\n    594      timeout = self.timeout if isinstance(timeout, UnsetType) else Timeout(timeout)\r\n    595\r\n    596      auth = self.build_auth(request, auth)\r\n    597\r\n--> 598      response = self.send_handling_redirects(\r\n    599          request, auth=auth, timeout=timeout, allow_redirects=allow_redirects,\r\n    ..................................................\r\n     self = <httpx._client.Client object at 0x7fef70ffbd60>\r\n     request = <Request('GET', 'https://xxxxnetworkk:5\r\n                5001/h/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxx-1050-\r\n                1500-jpg/xxxxxxxxp=xxxxxxxxxxxxxxxxxxxxxxxxxxx;x\r\n                xxxxxxxx/xxxxxx_02.jpg')>\r\n     Request = <class 'httpx._models.Request'>\r\n     stream = False\r\n     auth = <httpx._auth.Auth object at 0x7fef70d94040>\r\n     AuthTypes = typing.Union[typing.Tuple[typing.Union[str, bytes], typing.U\r\n                  nion[str, bytes]], typing.Callable[[ForwardRef('Request')],\r\n                  ForwardRef('Request')], ForwardRef('Auth')]\r\n     allow_redirects = True\r\n     timeout = Timeout(timeout=60)\r\n     typing.Union = typing.Union\r\n     TimeoutTypes = typing.Union[NoneType, float, typing.Tuple[float, float, flo\r\n                     at, float], ForwardRef('Timeout')]\r\n     UnsetType = <class 'httpx._config.UnsetType'>\r\n     UNSET = <httpx._config.UnsetType object at 0x7fefb2868370>\r\n     Response = <class 'httpx._models.Response'>\r\n     self.timeout = Timeout(timeout=60)\r\n     Timeout = <class 'httpx._config.Timeout'>\r\n     self.build_auth = <method 'BaseClient.build_auth' of <httpx._client.Client obj\r\n                        ect at 0x7fef70ffbd60> _client.py:256>\r\n     self.send_handling_redirects = <method 'Client.send_handling_redirects' of <httpx._client.C\r\n                                     lient object at 0x7fef70ffbd60> _client.py:610>\r\n    ..................................................\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 625, in send_handling_redirects\r\n    610  def send_handling_redirects(\r\n    611      self,\r\n    612      request: Request,\r\n    613      auth: Auth,\r\n    614      timeout: Timeout,\r\n    615      allow_redirects: bool = True,\r\n    616      history: typing.List[Response] = None,\r\n    617  ) -> Response:\r\n (...)\r\n    621      while True:\r\n    622          if len(history) > self.max_redirects:\r\n    623              raise TooManyRedirects()\r\n    624\r\n--> 625          response = self.send_handling_auth(\r\n    626              request, auth=auth, timeout=timeout, history=history\r\n    ..................................................\r\n     self = <httpx._client.Client object at 0x7fef70ffbd60>\r\n     request = <Request('GET', 'https://xxxxnetworkk:5\r\n                5001/h/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxx-1050-\r\n                1500-jpg/xxxxxxxxp=xxxxxxxxxxxxxxxxxxxxxxxxxxx;x\r\n                xxxxxxxx/xxxxxx_02.jpg')>\r\n     Request = <class 'httpx._models.Request'>\r\n     auth = <httpx._auth.Auth object at 0x7fef70d94040>\r\n     Auth = <class 'httpx._auth.Auth'>\r\n     timeout = Timeout(timeout=60)\r\n     Timeout = <class 'httpx._config.Timeout'>\r\n     allow_redirects = True\r\n     history = []\r\n     typing.List = typing.List\r\n     Response = <class 'httpx._models.Response'>\r\n     self.max_redirects = 20\r\n     TooManyRedirects = <class 'httpx._exceptions.TooManyRedirects'>\r\n     self.send_handling_auth = <method 'Client.send_handling_auth' of <httpx._client.Client\r\n                                 object at 0x7fef70ffbd60> _client.py:649>\r\n    ..................................................\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 662, in send_handling_auth\r\n    649  def send_handling_auth(\r\n    650      self,\r\n    651      request: Request,\r\n    652      history: typing.List[Response],\r\n    653      auth: Auth,\r\n    654      timeout: Timeout,\r\n    655  ) -> Response:\r\n (...)\r\n    658\r\n    659      auth_flow = auth.auth_flow(request)\r\n    660      request = next(auth_flow)\r\n    661      while True:\r\n--> 662          response = self.send_single_request(request, timeout)\r\n    663          if auth.requires_response_body:\r\n    ..................................................\r\n     self = <httpx._client.Client object at 0x7fef70ffbd60>\r\n     request = <Request('GET', 'https://xxxxnetworkk:5\r\n                5001/h/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxx-1050-\r\n                1500-jpg/xxxxxxxxp=xxxxxxxxxxxxxxxxxxxxxxxxxxx;x\r\n                xxxxxxxx/xxxxxx_02.jpg')>\r\n     Request = <class 'httpx._models.Request'>\r\n     history = []\r\n     typing.List = typing.List\r\n     Response = <class 'httpx._models.Response'>\r\n     auth = <httpx._auth.Auth object at 0x7fef70d94040>\r\n     Auth = <class 'httpx._auth.Auth'>\r\n     timeout = Timeout(timeout=60)\r\n     Timeout = <class 'httpx._config.Timeout'>\r\n     auth_flow = <generator object Auth.auth_flow at 0x7fef70d9c0b0>\r\n     auth.auth_flow = <method 'Auth.auth_flow' of <httpx._auth.Auth object at 0x7f\r\n                       ef70d94040> _auth.py:22>\r\n     self.send_single_request = <method 'Client.send_single_request' of <httpx._client.Clien\r\n                                 t object at 0x7fef70ffbd60> _client.py:678>\r\n     auth.requires_response_body = False\r\n    ..................................................\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 692, in send_single_request\r\n    678  def send_single_request(self, request: Request, timeout: Timeout) -> Response:\r\n (...)\r\n    688              status_code,\r\n    689              reason_phrase,\r\n    690              headers,\r\n    691              stream,\r\n--> 692          ) = dispatcher.request(\r\n    693              request.method.encode(),\r\n    ..................................................\r\n     self = <httpx._client.Client object at 0x7fef70ffbd60>\r\n     request = <Request('GET', 'https://xxxxnetworkk:5\r\n                5001/h/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxx-1050-\r\n                1500-jpg/xxxxxxxxp=xxxxxxxxxxxxxxxxxxxxxxxxxxx;x\r\n                xxxxxxxx/xxxxxx_02.jpg')>\r\n     Request = <class 'httpx._models.Request'>\r\n     timeout = Timeout(timeout=60)\r\n     Timeout = <class 'httpx._config.Timeout'>\r\n     Response = <class 'httpx._models.Response'>\r\n     dispatcher.request = <method 'SyncHTTPProxy.request' of <httpcore._sync.http_prox\r\n                           y.SyncHTTPProxy object at 0x7fef706e0250> http_proxy.py:76>\r\n    ..................................................\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/httpcore/_sync/http_proxy.py, line 110, in request\r\n    76   def request(\r\n    77       self,\r\n    78       method: bytes,\r\n    79       url: URL,\r\n    80       headers: Headers = None,\r\n    81       stream: SyncByteStream = None,\r\n    82       timeout: TimeoutDict = None,\r\n    83   ) -> Tuple[bytes, int, bytes, Headers, SyncByteStream]:\r\n (...)\r\n    106              self.proxy_headers,\r\n    107              method,\r\n    108              url,\r\n    109          )\r\n--> 110          return self._tunnel_request(\r\n    111              method, url, headers=headers, stream=stream, timeout=timeout\r\n    ..................................................\r\n     self = <httpcore._sync.http_proxy.SyncHTTPProxy object at 0x7fef706\r\n             e0250>\r\n     method = b'GET'\r\n     url = (b'https', b'xxxxnetworkk', 55001, b'/h\r\n            /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxx-1050-1500-j\r\n            pg/xxxxxxxxp=xxxxxxxxxxxxxxxxxxxxxxxxxxx;xres=or\r\n            g/xxxxxx_02.jpg', )\r\n     URL = typing.Tuple[bytes, bytes, int, bytes]\r\n     headers = [(b'host', b'xxxxnetworkk:55001', ), (b\r\n                'accept', b'*/*', ), (b'accept-encoding', b'gzip, deflate',\r\n                ), (b'connection', b'keep-alive', ), (b'dnt', b'1', ), (b'se\r\n                c-fetch-dest', b'document', ), (b'sec-fetch-mode', b'navigat\r\n                e', ), (b'sec-fetch-site', b'same-origin', ), (b'sec-fetch-u\r\n                ser', b'?1', ), (b'upgrade-insecure-requests', b'1', ), (b'u\r\n                ser-agent', b'Mozilla/5.0 (Windows NT 10.0; Win64; x64)', ),\r\n                ]\r\n     Headers = typing.List[typing.Tuple[bytes, bytes]]\r\n     stream = <httpx._content_streams.ByteStream object at 0x7fef70d949d0>\r\n     SyncByteStream = <class 'httpcore._sync.base.SyncByteStream'>\r\n     timeout = {'connect': 60,\r\n                'read': 60,\r\n                'write': 60,\r\n                'pool': 60}\r\n     TimeoutDict = typing.Dict[str, typing.Union[float, NoneType]]\r\n     Tuple = typing.Tuple\r\n     self.proxy_headers = []\r\n     self._tunnel_request = <method 'SyncHTTPProxy._tunnel_request' of <httpcore._sync.h\r\n                             ttp_proxy.SyncHTTPProxy object at 0x7fef706e0250> http_proxy\r\n                             .py:152>\r\n    ..................................................\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/httpcore/_sync/http_proxy.py, line 201, in _tunnel_request\r\n    152  def _tunnel_request(\r\n    153      self,\r\n    154      method: bytes,\r\n    155      url: URL,\r\n    156      headers: Headers = None,\r\n    157      stream: SyncByteStream = None,\r\n    158      timeout: TimeoutDict = None,\r\n    159  ) -> Tuple[bytes, int, bytes, Headers, SyncByteStream]:\r\n (...)\r\n    197\r\n    198          # See if the tunnel was successfully established.\r\n    199          if proxy_status_code < 200 or proxy_status_code > 299:\r\n    200              msg = \"%d %s\" % (proxy_status_code, proxy_reason_phrase.decode(\"ascii\"))\r\n--> 201              raise ProxyError(msg)\r\n    202\r\n    ..................................................\r\n     self = <httpcore._sync.http_proxy.SyncHTTPProxy object at 0x7fef706\r\n             e0250>\r\n     method = b'GET'\r\n     url = (b'https', b'xxxxnetworkk', 55001, b'/h\r\n            /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxx-1050-1500-j\r\n            pg/xxxxxxxxp=xxxxxxxxxxxxxxxxxxxxxxxxxxx;xres=or\r\n            g/xxxxxx_02.jpg', )\r\n     URL = typing.Tuple[bytes, bytes, int, bytes]\r\n     headers = [(b'host', b'xxxxnetworkk:55001', ), (b\r\n                'accept', b'*/*', ), (b'accept-encoding', b'gzip, deflate',\r\n                ), (b'connection', b'keep-alive', ), (b'dnt', b'1', ), (b'se\r\n                c-fetch-dest', b'document', ), (b'sec-fetch-mode', b'navigat\r\n                e', ), (b'sec-fetch-site', b'same-origin', ), (b'sec-fetch-u\r\n                ser', b'?1', ), (b'upgrade-insecure-requests', b'1', ), (b'u\r\n                ser-agent', b'Mozilla/5.0 (Windows NT 10.0; Win64; x64)', ),\r\n                ]\r\n     Headers = typing.List[typing.Tuple[bytes, bytes]]\r\n     stream = <httpx._content_streams.ByteStream object at 0x7fef70d949d0>\r\n     SyncByteStream = <class 'httpcore._sync.base.SyncByteStream'>\r\n     timeout = {'connect': 60,\r\n                'read': 60,\r\n                'write': 60,\r\n                'pool': 60}\r\n     TimeoutDict = typing.Dict[str, typing.Union[float, NoneType]]\r\n     Tuple = typing.Tuple\r\n     proxy_status_code = 403\r\n     msg = '403 Forbidden port'\r\n     ProxyError = <class 'httpcore._exceptions.ProxyError'>\r\n    ..................................................\r\n\r\n---- (full traceback above) ----\r\nFile <ipython-input-2-b574ee64a121>, line 254, in download_img_from_api_result\r\n    img_resp = self.client.get(api_result[\"i\"], timeout=60)\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 733, in get\r\n    return self.request(\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 578, in request\r\n    return self.send(\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 598, in send\r\n    response = self.send_handling_redirects(\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 625, in send_handling_redirects\r\n    response = self.send_handling_auth(\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 662, in send_handling_auth\r\n    response = self.send_single_request(request, timeout)\r\nFile /usr/local/lib/python3.8/dist-packages/httpx/_client.py, line 692, in send_single_request\r\n    ) = dispatcher.request(\r\nFile /usr/local/lib/python3.8/dist-packages/httpcore/_sync/http_proxy.py, line 110, in request\r\n    return self._tunnel_request(\r\nFile /usr/local/lib/python3.8/dist-packages/httpcore/_sync/http_proxy.py, line 201, in _tunnel_request\r\n    raise ProxyError(msg)\r\n\r\nProxyError: 403 Forbidden port\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/956", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/956/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/956/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/956/events", "html_url": "https://github.com/encode/httpx/issues/956", "id": 619327175, "node_id": "MDU6SXNzdWU2MTkzMjcxNzU=", "number": 956, "title": "Empty default headers?", "user": {"login": "GnubiBORED", "id": 45830421, "node_id": "MDQ6VXNlcjQ1ODMwNDIx", "avatar_url": "https://avatars0.githubusercontent.com/u/45830421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GnubiBORED", "html_url": "https://github.com/GnubiBORED", "followers_url": "https://api.github.com/users/GnubiBORED/followers", "following_url": "https://api.github.com/users/GnubiBORED/following{/other_user}", "gists_url": "https://api.github.com/users/GnubiBORED/gists{/gist_id}", "starred_url": "https://api.github.com/users/GnubiBORED/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GnubiBORED/subscriptions", "organizations_url": "https://api.github.com/users/GnubiBORED/orgs", "repos_url": "https://api.github.com/users/GnubiBORED/repos", "events_url": "https://api.github.com/users/GnubiBORED/events{/privacy}", "received_events_url": "https://api.github.com/users/GnubiBORED/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-05-15T23:41:20Z", "updated_at": "2020-05-16T16:26:22Z", "closed_at": "2020-05-16T11:42:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "HTTPX is adding headers to my request such as accept: */* i can somehow tell httpx that i dont want to add those headers? to not pass them?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/954", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/954/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/954/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/954/events", "html_url": "https://github.com/encode/httpx/issues/954", "id": 618903581, "node_id": "MDU6SXNzdWU2MTg5MDM1ODE=", "number": 954, "title": "Supporting alternate schemes.", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-15T11:36:20Z", "updated_at": "2020-07-27T09:17:22Z", "closed_at": "2020-07-27T09:17:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Custom transport classes might want to support alternate schemes in addition to \"http\" and \"https\".\r\nIssue #931 includes a couple of examples here...\r\n\r\n* Use of a `test:` scheme in unit tests for session handling.\r\n* Use of `http+thing:` custom schemes that enable additional behaviours at the transport level.\r\n\r\nThe question is how would we best want to support this. One thing that might be sensible here is to change the Transport API slightly, so that the `url` signature is `Tuple[bytes, bytes, Optional[int], bytes]` instead of the current `Tuple[bytes, bytes, int, bytes]`.\r\n\r\nWe would then pass *only* any explicitly included port in the URL, and leave any protocol->port mapping to the responsibility of the transport class. The `AsyncConnectionPool` and `SyncConnectionPool` classes would enforce `scheme=[b'http'|b'https']`, but alternate transport classes could provide other behaviour.\r\n\r\nA first step here would to to review *where* in the `httpx` codebase we're currently accessing the `URL` port.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/951", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/951/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/951/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/951/events", "html_url": "https://github.com/encode/httpx/issues/951", "id": 618829930, "node_id": "MDU6SXNzdWU2MTg4Mjk5MzA=", "number": 951, "title": "[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1108),when i using proxies,it show this error.", "user": {"login": "ch-boogeyman", "id": 46711557, "node_id": "MDQ6VXNlcjQ2NzExNTU3", "avatar_url": "https://avatars0.githubusercontent.com/u/46711557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ch-boogeyman", "html_url": "https://github.com/ch-boogeyman", "followers_url": "https://api.github.com/users/ch-boogeyman/followers", "following_url": "https://api.github.com/users/ch-boogeyman/following{/other_user}", "gists_url": "https://api.github.com/users/ch-boogeyman/gists{/gist_id}", "starred_url": "https://api.github.com/users/ch-boogeyman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ch-boogeyman/subscriptions", "organizations_url": "https://api.github.com/users/ch-boogeyman/orgs", "repos_url": "https://api.github.com/users/ch-boogeyman/repos", "events_url": "https://api.github.com/users/ch-boogeyman/events{/privacy}", "received_events_url": "https://api.github.com/users/ch-boogeyman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-15T09:28:05Z", "updated_at": "2020-05-16T14:31:47Z", "closed_at": "2020-05-15T11:48:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "![error](https://user-images.githubusercontent.com/46711557/82034665-1271ca80-96d1-11ea-8d39-29983e9c77e1.png)\r\nMy proxy has no problem,i test it in requests module,but when i using httpx with proxies,it show this,\r\nplease how to resolve it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/950", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/950/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/950/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/950/events", "html_url": "https://github.com/encode/httpx/issues/950", "id": 618809638, "node_id": "MDU6SXNzdWU2MTg4MDk2Mzg=", "number": 950, "title": "Script cleanup", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1625974358, "node_id": "MDU6TGFiZWwxNjI1OTc0MzU4", "url": "https://api.github.com/repos/encode/httpx/labels/tooling", "name": "tooling", "color": "f7e799", "default": false, "description": "Changes to our CI/CD, tests setup, etc."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-15T08:55:34Z", "updated_at": "2020-08-01T08:39:29Z", "closed_at": "2020-08-01T08:39:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Here's the scripts we use from our workflows...\r\n\r\n#### Test Suite\r\n\r\n* `scripts/install`\r\n* `scripts/check`\r\n* `scripts/build`\r\n* `scripts/test`\r\n* `scripts/coverage`  *Okay, this doesn't actually exist yet, but it's proposed in https://github.com/encode/httpx/issues/316#issuecomment-629099105*\r\n\r\n#### Publish\r\n\r\n* `scripts/install`\r\n* `scripts/build`\r\n* `scripts/publish`\r\n\r\nThere's a handful of scripts left that we don't actually use in the workflows...\r\n\r\n* `scripts/docs-build`\r\n* `scripts/docs-serve`\r\n* `scripts/clean`\r\n* `scripts/lint`\r\n\r\nI'd like to clean those up a bit, but figured I'd start this as a discussion rather than a PR.\r\n\r\n1. Given we've now got a nice `build` step, we could clean the two docs scripts into just `scripts/docs`, to use for serving the docs during development. That'll error on build failures anyway, and it feels like nicer naming. Potentially we could drop it altogether and just use `mkdocs serve`, but it's nice to be consistent here.\r\n2. We could consider dropping `scripts/clean`? I've personally now got a global `gitclean` command that I use in repos to tidy up everything out of source control or \"venv\". Is the existing script useful for other contributors/maintainers? If we do keep it then I think we should change it to `git clean -d -x --force --exclude=venv` which is a much cleaner simpler approach to cleaning out the gumpf, and will work across all our encode projects.\r\n3. The `scripts/lint` one is a bit odd, since it just replicates `scripts/check` but using in-place fix flags on the various commands. Is there a neater way for us to do this? Eg. Should we be running `scripts/check --fix` instead? Is that less convenient? Are there *other* good options here? If `scripts/test` fails the linting locally, perhaps we should just prompt the user with `Running 'test/check' failed. I can fix this for you automatically. Do you want me to run 'scripts/check --fix' and retry? [y|n]`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/949", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/949/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/949/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/949/events", "html_url": "https://github.com/encode/httpx/issues/949", "id": 617391557, "node_id": "MDU6SXNzdWU2MTczOTE1NTc=", "number": 949, "title": "Exceptions - Documentation, Hierarchy & Naming.", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1787082381, "node_id": "MDU6TGFiZWwxNzg3MDgyMzgx", "url": "https://api.github.com/repos/encode/httpx/labels/discussion", "name": "discussion", "color": "d0c7fc", "default": false, "description": ""}, {"id": 1625971726, "node_id": "MDU6TGFiZWwxNjI1OTcxNzI2", "url": "https://api.github.com/repos/encode/httpx/labels/docs", "name": "docs", "color": "4553a8", "default": false, "description": "Changes to the documentation"}, {"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/6", "html_url": "https://github.com/encode/httpx/milestone/6", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/6/labels", "id": 5701831, "node_id": "MDk6TWlsZXN0b25lNTcwMTgzMQ==", "number": 6, "title": "v0.14", "description": "", "creator": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 32, "state": "closed", "created_at": "2020-07-27T09:09:04Z", "updated_at": "2020-08-07T15:10:11Z", "due_on": "2020-07-31T07:00:00Z", "closed_at": "2020-08-07T15:10:11Z"}, "comments": 12, "created_at": "2020-05-13T12:05:01Z", "updated_at": "2020-08-06T13:15:25Z", "closed_at": "2020-08-06T13:14:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We ought to comprehensively revisit our exceptions for 1.0, and make sure we're super happy we've got a public API we're happy to stick by for 1.0.\r\n\r\n* Naming.\r\n* The hierarchy.\r\n* Decent documentation.\r\n* `.request`/`.response` attributes (can we make either of these mandatory in some cases?)\r\n\r\nSee also: #940, #884, #869.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/948", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/948/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/948/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/948/events", "html_url": "https://github.com/encode/httpx/issues/948", "id": 617351450, "node_id": "MDU6SXNzdWU2MTczNTE0NTA=", "number": 948, "title": "Deprecate ProxyLimits naming in favour of max_connections and max_keepalive", "user": {"login": "yeraydiazdiaz", "id": 6739793, "node_id": "MDQ6VXNlcjY3Mzk3OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6739793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeraydiazdiaz", "html_url": "https://github.com/yeraydiazdiaz", "followers_url": "https://api.github.com/users/yeraydiazdiaz/followers", "following_url": "https://api.github.com/users/yeraydiazdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/yeraydiazdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeraydiazdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeraydiazdiaz/subscriptions", "organizations_url": "https://api.github.com/users/yeraydiazdiaz/orgs", "repos_url": "https://api.github.com/users/yeraydiazdiaz/repos", "events_url": "https://api.github.com/users/yeraydiazdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/yeraydiazdiaz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/httpx/milestones/5", "html_url": "https://github.com/encode/httpx/milestone/5", "labels_url": "https://api.github.com/repos/encode/httpx/milestones/5/labels", "id": 5446982, "node_id": "MDk6TWlsZXN0b25lNTQ0Njk4Mg==", "number": 5, "title": "v0.13", "description": "Changes to be included on our 0.13 release, preparing for 1.0.", "creator": {"login": "yeraydiazdiaz", "id": 6739793, "node_id": "MDQ6VXNlcjY3Mzk3OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6739793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeraydiazdiaz", "html_url": "https://github.com/yeraydiazdiaz", "followers_url": "https://api.github.com/users/yeraydiazdiaz/followers", "following_url": "https://api.github.com/users/yeraydiazdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/yeraydiazdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeraydiazdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeraydiazdiaz/subscriptions", "organizations_url": "https://api.github.com/users/yeraydiazdiaz/orgs", "repos_url": "https://api.github.com/users/yeraydiazdiaz/repos", "events_url": "https://api.github.com/users/yeraydiazdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/yeraydiazdiaz/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 11, "state": "closed", "created_at": "2020-05-21T09:47:03Z", "updated_at": "2020-07-14T12:45:31Z", "due_on": null, "closed_at": "2020-07-14T12:45:31Z"}, "comments": 0, "created_at": "2020-05-13T10:58:23Z", "updated_at": "2020-05-21T12:26:21Z", "closed_at": "2020-05-21T12:26:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Prompted by https://github.com/encode/httpx/pull/942#discussion_r424341967\r\n\r\nThe `PoolLimits` class uses `soft_limit` and `hard_limit` whereas in httpcore we use `max_connections` and `max_keepalive` which are clearer.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/943", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/943/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/943/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/943/events", "html_url": "https://github.com/encode/httpx/issues/943", "id": 616564327, "node_id": "MDU6SXNzdWU2MTY1NjQzMjc=", "number": 943, "title": "Fix flaky `test_write_timeout` test in CI", "user": {"login": "yeraydiazdiaz", "id": 6739793, "node_id": "MDQ6VXNlcjY3Mzk3OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6739793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeraydiazdiaz", "html_url": "https://github.com/yeraydiazdiaz", "followers_url": "https://api.github.com/users/yeraydiazdiaz/followers", "following_url": "https://api.github.com/users/yeraydiazdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/yeraydiazdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeraydiazdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeraydiazdiaz/subscriptions", "organizations_url": "https://api.github.com/users/yeraydiazdiaz/orgs", "repos_url": "https://api.github.com/users/yeraydiazdiaz/repos", "events_url": "https://api.github.com/users/yeraydiazdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/yeraydiazdiaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-12T11:00:55Z", "updated_at": "2020-05-12T15:33:14Z", "closed_at": "2020-05-12T15:33:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[One of our tests](https://github.com/encode/httpx/blob/master/tests/test_timeouts.py#L15-L22) has decided to start failing across different Python versions:\r\n\r\nhttps://github.com/encode/httpx/pull/941/checks?check_run_id=666427391\r\nhttps://github.com/encode/httpx/runs/666405754\r\nhttps://github.com/encode/httpx/runs/666709254\r\n\r\nI could not reproduce the error locally on 3.8 or 3.6 on my Mac.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/940", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/940/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/940/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/940/events", "html_url": "https://github.com/encode/httpx/issues/940", "id": 616357782, "node_id": "MDU6SXNzdWU2MTYzNTc3ODI=", "number": 940, "title": "Missing documentation for Exceptions", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1625971726, "node_id": "MDU6TGFiZWwxNjI1OTcxNzI2", "url": "https://api.github.com/repos/encode/httpx/labels/docs", "name": "docs", "color": "4553a8", "default": false, "description": "Changes to the documentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-12T04:53:58Z", "updated_at": "2020-05-13T12:25:55Z", "closed_at": "2020-05-12T11:13:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "So looked everywhere but I could't find _any_ information on httpx's errors at all (except of the existence of `raise_for_status()`. Is this on purpose because the design is not final? I had to read source code to get an idea which is not ideal.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/939", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/939/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/939/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/939/events", "html_url": "https://github.com/encode/httpx/issues/939", "id": 615265334, "node_id": "MDU6SXNzdWU2MTUyNjUzMzQ=", "number": 939, "title": "Please include tests dir in PyPI tarball", "user": {"login": "sandrotosi", "id": 346648, "node_id": "MDQ6VXNlcjM0NjY0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/346648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandrotosi", "html_url": "https://github.com/sandrotosi", "followers_url": "https://api.github.com/users/sandrotosi/followers", "following_url": "https://api.github.com/users/sandrotosi/following{/other_user}", "gists_url": "https://api.github.com/users/sandrotosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandrotosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandrotosi/subscriptions", "organizations_url": "https://api.github.com/users/sandrotosi/orgs", "repos_url": "https://api.github.com/users/sandrotosi/repos", "events_url": "https://api.github.com/users/sandrotosi/events{/privacy}", "received_events_url": "https://api.github.com/users/sandrotosi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-09T21:40:54Z", "updated_at": "2020-05-11T09:39:56Z", "closed_at": "2020-05-11T09:39:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Along the same lines of #938, it'd be great to have the the `tests` directory included in the PyPI tarball, so that we can run them\r\n\r\nthanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/938", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/938/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/938/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/938/events", "html_url": "https://github.com/encode/httpx/issues/938", "id": 615257032, "node_id": "MDU6SXNzdWU2MTUyNTcwMzI=", "number": 938, "title": "Please include docs dir in PyPI tarball", "user": {"login": "sandrotosi", "id": 346648, "node_id": "MDQ6VXNlcjM0NjY0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/346648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandrotosi", "html_url": "https://github.com/sandrotosi", "followers_url": "https://api.github.com/users/sandrotosi/followers", "following_url": "https://api.github.com/users/sandrotosi/following{/other_user}", "gists_url": "https://api.github.com/users/sandrotosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandrotosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandrotosi/subscriptions", "organizations_url": "https://api.github.com/users/sandrotosi/orgs", "repos_url": "https://api.github.com/users/sandrotosi/repos", "events_url": "https://api.github.com/users/sandrotosi/events{/privacy}", "received_events_url": "https://api.github.com/users/sandrotosi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1625971726, "node_id": "MDU6TGFiZWwxNjI1OTcxNzI2", "url": "https://api.github.com/repos/encode/httpx/labels/docs", "name": "docs", "color": "4553a8", "default": false, "description": "Changes to the documentation"}, {"id": 1304068462, "node_id": "MDU6TGFiZWwxMzA0MDY4NDYy", "url": "https://api.github.com/repos/encode/httpx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-09T20:47:30Z", "updated_at": "2020-05-11T13:56:02Z", "closed_at": "2020-05-11T13:56:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\ni'm packaging httpx for Debian; we like to provide our uses with offline documentation, so it would be extremely helpful if you could include the `docs` dir in the pypi tarball, so that we can build it and ship it with our binary packages.\r\n\r\nthanks for considering,\r\nSandro", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/937", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/937/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/937/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/937/events", "html_url": "https://github.com/encode/httpx/issues/937", "id": 613834576, "node_id": "MDU6SXNzdWU2MTM4MzQ1NzY=", "number": 937, "title": "Can I still use the async API out of the box somehow?", "user": {"login": "phdowling", "id": 876919, "node_id": "MDQ6VXNlcjg3NjkxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/876919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phdowling", "html_url": "https://github.com/phdowling", "followers_url": "https://api.github.com/users/phdowling/followers", "following_url": "https://api.github.com/users/phdowling/following{/other_user}", "gists_url": "https://api.github.com/users/phdowling/gists{/gist_id}", "starred_url": "https://api.github.com/users/phdowling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phdowling/subscriptions", "organizations_url": "https://api.github.com/users/phdowling/orgs", "repos_url": "https://api.github.com/users/phdowling/repos", "events_url": "https://api.github.com/users/phdowling/events{/privacy}", "received_events_url": "https://api.github.com/users/phdowling/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-07T07:24:25Z", "updated_at": "2020-05-07T08:57:10Z", "closed_at": "2020-05-07T08:57:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI started using httpx a few months back because I like the simplicity of making async requests with one line of code in the same style as I was used to making calls with `requests`. I recently updated, breaking essentially all of the projects that I used it in, since the\r\n```\r\nres = await httpx.get(url)\r\n```\r\npattern is now gone.\r\n\r\nI can of course easily fix the broken code by replacing those lines with \r\n```\r\nasync with  httpx.AsyncClient() as client:\r\n    res = await client.get(url)\r\n```\r\nhowever, this kind of defeats the purpose of why I started using httpx to begin with (in fact this is not that much simpler than just using aiohttp). Since I'm mostly implementing servers that are completely async anyway, I have no actual use for the out-of-the-box sync default style. Also: what do the httpx sync methods improve over plain old `requests`? If the main use case is synchronous requests, isn't that still the best library to go with?\r\n\r\nWhat was the rationale behind making this change? Am I missing something, is my experience actually supposed to be better now and I just don't realize it? Is there still an \"async-first\" API I can use?\r\n\r\nPlease don't take these questions the wrong way, I definitely appreciate the effort this community is putting in. Just see it as feedback about a fundamental API change that came as a total surprise to a relatively new user. I'm also not suggesting I know better what this library should look like, maybe I'm just using the wrong library for my use-case (i.e. have the simplest possible API for making async requests in a web server).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/936", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/936/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/936/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/936/events", "html_url": "https://github.com/encode/httpx/issues/936", "id": 613459661, "node_id": "MDU6SXNzdWU2MTM0NTk2NjE=", "number": 936, "title": "Update CI troubleshooting section in docs", "user": {"login": "yeraydiazdiaz", "id": 6739793, "node_id": "MDQ6VXNlcjY3Mzk3OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6739793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeraydiazdiaz", "html_url": "https://github.com/yeraydiazdiaz", "followers_url": "https://api.github.com/users/yeraydiazdiaz/followers", "following_url": "https://api.github.com/users/yeraydiazdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/yeraydiazdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeraydiazdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeraydiazdiaz/subscriptions", "organizations_url": "https://api.github.com/users/yeraydiazdiaz/orgs", "repos_url": "https://api.github.com/users/yeraydiazdiaz/repos", "events_url": "https://api.github.com/users/yeraydiazdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/yeraydiazdiaz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1625971726, "node_id": "MDU6TGFiZWwxNjI1OTcxNzI2", "url": "https://api.github.com/repos/encode/httpx/labels/docs", "name": "docs", "color": "4553a8", "default": false, "description": "Changes to the documentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-06T16:42:18Z", "updated_at": "2020-06-02T09:31:57Z", "closed_at": "2020-06-02T09:31:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Now that we've moved to GitHub actions the copy and screenshots in https://www.python-httpx.org/contributing/#resolving-build-travis-failures is not applicable.\r\n\r\nThe release process has also changed since we don't run `scripts/publish` ourselves anymore.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/929", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/929/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/929/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/929/events", "html_url": "https://github.com/encode/httpx/issues/929", "id": 612080849, "node_id": "MDU6SXNzdWU2MTIwODA4NDk=", "number": 929, "title": "Regression with 0.13.dev0: Missing mandatory Host: header", "user": {"login": "andrewshadura", "id": 309253, "node_id": "MDQ6VXNlcjMwOTI1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/309253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewshadura", "html_url": "https://github.com/andrewshadura", "followers_url": "https://api.github.com/users/andrewshadura/followers", "following_url": "https://api.github.com/users/andrewshadura/following{/other_user}", "gists_url": "https://api.github.com/users/andrewshadura/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewshadura/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewshadura/subscriptions", "organizations_url": "https://api.github.com/users/andrewshadura/orgs", "repos_url": "https://api.github.com/users/andrewshadura/repos", "events_url": "https://api.github.com/users/andrewshadura/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewshadura/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-05-04T18:34:12Z", "updated_at": "2020-05-07T12:19:56Z", "closed_at": "2020-05-07T12:19:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your bug report. -->\r\n\r\n- [x] The bug is reproducible against the latest release and/or `master`.\r\n- [x] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\nWith an HTTP proxy enabled, the HTTP/1.1 implementation raises a `LocalProtocolError` exception:\r\n```python\r\n  File \"/usr/local/lib/python3.8/dist-packages/obs_proxy-0-py3.8.egg/obs_proxy/repserver.py\", line 100, in proxy_request\r\n    resp = await client.send(req, stream=True, auth=build_auth(), timeout=HTTP_TIMEOUT)\r\n  File \"/usr/local/lib/python3.8/dist-packages/httpx-0.13.dev0-py3.8.egg/httpx/_client.py\", line 1137, in send\r\n    response = await self.send_handling_redirects(\r\n  File \"/usr/local/lib/python3.8/dist-packages/httpx-0.13.dev0-py3.8.egg/httpx/_client.py\", line 1164, in send_handling_redirects\r\n    response = await self.send_handling_auth(\r\n  File \"/usr/local/lib/python3.8/dist-packages/httpx-0.13.dev0-py3.8.egg/httpx/_client.py\", line 1201, in send_handling_auth\r\n    response = await self.send_single_request(request, timeout)\r\n  File \"/usr/local/lib/python3.8/dist-packages/httpx-0.13.dev0-py3.8.egg/httpx/_client.py\", line 1233, in send_single_request\r\n    ) = await dispatcher.request(\r\n  File \"/usr/local/lib/python3.8/dist-packages/httpcore-0.8.2-py3.8.egg/httpcore/_async/http_proxy.py\", line 76, in request\r\n    return await self._tunnel_request(\r\n  File \"/usr/local/lib/python3.8/dist-packages/httpcore-0.8.2-py3.8.egg/httpcore/_async/http_proxy.py\", line 145, in _tunnel_request\r\n    proxy_response = await proxy_connection.request(\r\n  File \"/usr/local/lib/python3.8/dist-packages/httpcore-0.8.2-py3.8.egg/httpcore/_async/connection.py\", line 69, in request\r\n    return await self.connection.request(method, url, headers, stream, timeout)\r\n  File \"/usr/local/lib/python3.8/dist-packages/httpcore-0.8.2-py3.8.egg/httpcore/_async/http11.py\", line 52, in request\r\n    await self._send_request(method, url, headers, timeout)\r\n  File \"/usr/local/lib/python3.8/dist-packages/httpcore-0.8.2-py3.8.egg/httpcore/_async/http11.py\", line 77, in _send_request\r\n    event = h11.Request(method=method, target=target, headers=headers)\r\n  File \"/usr/local/lib/python3.8/dist-packages/h11-0.9.0-py3.8.egg/h11/_events.py\", line 71, in __init__\r\n    self._validate()\r\n  File \"/usr/local/lib/python3.8/dist-packages/h11-0.9.0-py3.8.egg/h11/_events.py\", line 143, in _validate\r\n    raise LocalProtocolError(\"Missing mandatory Host: header\")\r\nh11._util.LocalProtocolError: Missing mandatory Host: header\r\n```\r\n\r\nThe relevant part of the [app in question](https://gitlab.apertis.org/infrastructure/obs-proxy/-/blob/master/obs_proxy/repserver.py), adjusted to the config used:\r\n```python\r\nclient = httpx.AsyncClient(\r\n    http2=False,\r\n    verify=False,\r\n    proxies={\r\n        'all': 'http://...'\r\n    }\r\n)\r\n\r\n# <...>\r\n\r\nresp = await client.send(req, stream=True, auth=build_auth(), timeout=HTTP_TIMEOUT)\r\n```\r\n\r\n### Environment\r\n\r\n- OS: Debian testing.\r\n- Python version: 3.8.3~rc1 as [shipped by Debian](https://packages.qa.debian.org/p/python3.8/news/20200430T084928Z.html)\r\n- HTTPX version: 0.13.dev0\r\n- Async environment: asyncio\r\n- HTTP proxy: yes\r\n- Custom certificates: yes", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/928", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/928/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/928/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/928/events", "html_url": "https://github.com/encode/httpx/issues/928", "id": 612026056, "node_id": "MDU6SXNzdWU2MTIwMjYwNTY=", "number": 928, "title": "Linting and check scripts conflict", "user": {"login": "yeraydiazdiaz", "id": 6739793, "node_id": "MDQ6VXNlcjY3Mzk3OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6739793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeraydiazdiaz", "html_url": "https://github.com/yeraydiazdiaz", "followers_url": "https://api.github.com/users/yeraydiazdiaz/followers", "following_url": "https://api.github.com/users/yeraydiazdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/yeraydiazdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeraydiazdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeraydiazdiaz/subscriptions", "organizations_url": "https://api.github.com/users/yeraydiazdiaz/orgs", "repos_url": "https://api.github.com/users/yeraydiazdiaz/repos", "events_url": "https://api.github.com/users/yeraydiazdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/yeraydiazdiaz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1625974358, "node_id": "MDU6TGFiZWwxNjI1OTc0MzU4", "url": "https://api.github.com/repos/encode/httpx/labels/tooling", "name": "tooling", "color": "f7e799", "default": false, "description": "Changes to our CI/CD, tests setup, etc."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-04T17:01:52Z", "updated_at": "2020-05-05T17:41:13Z", "closed_at": "2020-05-05T12:24:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Running `scripts/lint` leaves the codebase in a state where `scripts/check` fails.\r\n\r\nThis is due to black and isort not agreeing on how things should look, i.e. `lint` runs `black` last and `isort --check` fails due to it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/926", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/926/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/926/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/926/events", "html_url": "https://github.com/encode/httpx/issues/926", "id": 611883447, "node_id": "MDU6SXNzdWU2MTE4ODM0NDc=", "number": 926, "title": "Document using a custom SSL Context", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1625971726, "node_id": "MDU6TGFiZWwxNjI1OTcxNzI2", "url": "https://api.github.com/repos/encode/httpx/labels/docs", "name": "docs", "color": "4553a8", "default": false, "description": "Changes to the documentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-04T13:40:04Z", "updated_at": "2020-05-13T10:53:36Z", "closed_at": "2020-05-13T10:53:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Prompted by #924\r\n\r\nOur SSL docs don't include any examples of using a custom SSL context.\r\n\r\nSee: https://www.python-httpx.org/advanced/#ssl-certificates\r\n\r\nI think we ought to include a minimal example, such as...\r\n\r\n```\r\n>>> import httpx\r\n>>> import ssl\r\n>>> import certifi\r\n>>> context = ssl.create_default_context()\r\n>>> context.load_verify_locations(cafile=certifi.where())\r\n>>> httpx.get('https://www.example.com', verify=context)\r\n<Response [200 OK]>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/924", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/924/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/924/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/924/events", "html_url": "https://github.com/encode/httpx/issues/924", "id": 611284915, "node_id": "MDU6SXNzdWU2MTEyODQ5MTU=", "number": 924, "title": "How can I use a custom SSLContext / PyOpenSSLContext when creating a Client?", "user": {"login": "kafonek", "id": 3867768, "node_id": "MDQ6VXNlcjM4Njc3Njg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3867768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kafonek", "html_url": "https://github.com/kafonek", "followers_url": "https://api.github.com/users/kafonek/followers", "following_url": "https://api.github.com/users/kafonek/following{/other_user}", "gists_url": "https://api.github.com/users/kafonek/gists{/gist_id}", "starred_url": "https://api.github.com/users/kafonek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kafonek/subscriptions", "organizations_url": "https://api.github.com/users/kafonek/orgs", "repos_url": "https://api.github.com/users/kafonek/repos", "events_url": "https://api.github.com/users/kafonek/events{/privacy}", "received_events_url": "https://api.github.com/users/kafonek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-02T22:11:45Z", "updated_at": "2020-05-04T13:37:39Z", "closed_at": "2020-05-04T13:37:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- To help keep this issue tracker clean and focused, please make sure you tried *all* the following resources before submitting your question. -->\r\n\r\n- [x ] I searched the [HTTPX documentation](https://www.python-httpx.org) but couldn't find what I'm looking for.  I looked at:\r\n  * https://www.python-httpx.org/api/#client\r\n  * https://www.python-httpx.org/advanced/#ssl-certificates\r\n- [x ] I looked through similar issues on GitHub, but didn't find anything.  I looked at:\r\n  * https://github.com/encode/httpx/issues/469\r\n  * https://github.com/encode/httpx/issues/904\r\n  * https://github.com/encode/httpx/issues/768\r\n- [x ] I looked up \"How to do ... in HTTPX\" on a search engine and didn't find any information.\r\n- [ ] I asked the [community chat](https://gitter.im/encode/community) for help but didn't get an answer.\r\n\r\n### Question\r\n\r\nCan I create a `httpx.Client` with my own `ssl.SSLContext` or `urllib3.contrib.pyopenssl.PyOpenSSLContext` instead of passing in cert/key/verify?\r\n\r\n### Background\r\n\r\nI found `httpx` while looking for requests syntax + asyncio support.  It looks like a great project, thanks for all the work you've put into it.\r\n\r\nOne very oft-asked feature for `requests.py` was making requests with user-provided SSLContexts [2118](https://github.com/psf/requests/issues/2118).  Eventually that was resolved by allowing us to pass SSLContexts to Adapters, then mounting the adapter onto a session.  As a real world example, I have used [pypki2](https://github.com/nbgallery/pypki2) and [requests_pkcs12](https://github.com/m-click/requests_pkcs12) at different times to create `Session`'s from PKCS12/X509 certificates instead of PEM format that I believe vanilla `requests` and `httpx` require.  There is a [requests_pkcs12 author blog post](https://blog.cyberreboot.org/using-pkcs-12-formatted-certificates-in-python-fd98362f90ba) with more background.\r\n\r\nMy understanding from reading `httpx` documentation is that a `httpx.Client` is roughly similar to a `requests.Session` and the Dispatcher API will be roughly similar to Adapters.  @tomchristie mentions configuring an `ssl_context` in [768 - Dispatcher API](https://github.com/encode/httpx/issues/768#issuecomment-580193407) but I didn't understand how to use that in practice.  \r\n\r\n@sethmlarson suggests `httpx.Client(verify=ssl_context)` in [469](https://github.com/encode/httpx/issues/469#issuecomment-540650240), which looked similar to my use-case but not identical.  When I tried that with `httpx` 0.12.1 and 0.13.0.dev, I got `TypeError: expected str, bytes or os.PathLike object, not PyOpenSSLContext` on Client init.\r\n\r\nThanks.\r\n\r\n(courtesy tagging @rashley-iqt (requests_pkcs12) and @gershwinlabs (pypki2) )", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/922", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/922/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/922/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/922/events", "html_url": "https://github.com/encode/httpx/issues/922", "id": 611155985, "node_id": "MDU6SXNzdWU2MTExNTU5ODU=", "number": 922, "title": "BoundedSemaphore error when using proxies with async client", "user": {"login": "yeraydiazdiaz", "id": 6739793, "node_id": "MDQ6VXNlcjY3Mzk3OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6739793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeraydiazdiaz", "html_url": "https://github.com/yeraydiazdiaz", "followers_url": "https://api.github.com/users/yeraydiazdiaz/followers", "following_url": "https://api.github.com/users/yeraydiazdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/yeraydiazdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeraydiazdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeraydiazdiaz/subscriptions", "organizations_url": "https://api.github.com/users/yeraydiazdiaz/orgs", "repos_url": "https://api.github.com/users/yeraydiazdiaz/repos", "events_url": "https://api.github.com/users/yeraydiazdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/yeraydiazdiaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-02T10:32:43Z", "updated_at": "2020-05-03T08:22:14Z", "closed_at": "2020-05-03T08:22:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Checklist\r\n\r\n- [*] The bug is reproducible against the latest release and/or `master`.\r\n- [*] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nWhen using a proxy with the `AsyncClient` the request completes correctly but on `__aexit__` a `BoundedSemaphore` error is raised.\r\n\r\n### To reproduce\r\n\r\nWith a proxy server running on port 8080:\r\n\r\n```python\r\nimport asyncio\r\nimport httpx\r\n\r\nproxies = {\"http\": \"http://127.0.0.1:8080/\"}\r\n\r\n\r\nasync def request():\r\n    async with httpx.AsyncClient(proxies=proxies) as client:\r\n        response = await client.get(\"http://example.org\")\r\n        assert response.status_code == 200\r\n\r\n\r\nasyncio.run(request())\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo exception is raised.\r\n\r\n### Actual behavior\r\n\r\nAn exception is raised with the following traceback\r\n\r\n```\r\n\u2717 HTTPX_LOG_LEVEL=debug python .dev/bounded_semaphore_error.py\r\nDEBUG [2020-05-02 11:30:17] httpx._client - HTTP Request: GET http://example.org \"HTTP/1.1 200 OK\"\r\nTraceback (most recent call last):\r\n  File \".dev/bounded_semaphore_error.py\", line 13, in <module>\r\n    asyncio.run(request())\r\n  File \"/Users/yeray/.pyenv/versions/3.8.1/lib/python3.8/asyncio/runners.py\", line 43, in run\r\n    return loop.run_until_complete(main)\r\n  File \"/Users/yeray/.pyenv/versions/3.8.1/lib/python3.8/asyncio/base_events.py\", line 612, in run_until_complete\r\n    return future.result()\r\n  File \".dev/bounded_semaphore_error.py\", line 10, in request\r\n    assert response.status_code == 200\r\n  File \"/Users/yeray/code/personal/_forks/httpx/httpx/_client.py\", line 1449, in __aexit__\r\n    await self.aclose()\r\n  File \"/Users/yeray/code/personal/_forks/httpx/httpx/_client.py\", line 1438, in aclose\r\n    await proxy.aclose()\r\n  File \"/Users/yeray/.pyenv/versions/httpcore/lib/python3.8/site-packages/httpcore/_async/connection_pool.py\", line 274, in aclose\r\n    await self._remove_from_pool(connection)\r\n  File \"/Users/yeray/.pyenv/versions/httpcore/lib/python3.8/site-packages/httpcore/_async/connection_pool.py\", line 257, in _remove_from_pool\r\n    self._connection_semaphore.release()\r\n  File \"/Users/yeray/.pyenv/versions/httpcore/lib/python3.8/site-packages/httpcore/_backends/asyncio.py\", line 208, in release\r\n    self.semaphore.release()\r\n  File \"/Users/yeray/.pyenv/versions/3.8.1/lib/python3.8/asyncio/locks.py\", line 533, in release\r\n    raise ValueError('BoundedSemaphore released too many times')\r\nValueError: BoundedSemaphore released too many times\r\n```\r\n\r\n### Environment\r\n\r\n- OS: MacOS\r\n- Python version: 3.8.1\r\n- HTTPX version: 3b9ebe0 (effectively 0.13.0dev)\r\n- Async environment: asyncio\r\n- HTTP proxy: Yes\r\n- Custom certificates: No\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/921", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/921/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/921/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/921/events", "html_url": "https://github.com/encode/httpx/issues/921", "id": 611027346, "node_id": "MDU6SXNzdWU2MTEwMjczNDY=", "number": 921, "title": "Multiple host headers", "user": {"login": "decatur", "id": 1004866, "node_id": "MDQ6VXNlcjEwMDQ4NjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1004866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decatur", "html_url": "https://github.com/decatur", "followers_url": "https://api.github.com/users/decatur/followers", "following_url": "https://api.github.com/users/decatur/following{/other_user}", "gists_url": "https://api.github.com/users/decatur/gists{/gist_id}", "starred_url": "https://api.github.com/users/decatur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decatur/subscriptions", "organizations_url": "https://api.github.com/users/decatur/orgs", "repos_url": "https://api.github.com/users/decatur/repos", "events_url": "https://api.github.com/users/decatur/events{/privacy}", "received_events_url": "https://api.github.com/users/decatur/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-01T23:07:49Z", "updated_at": "2020-05-05T12:46:24Z", "closed_at": "2020-05-05T12:46:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n- [* ] The bug is reproducible against the latest release and/or `master`.\r\n- [* ] There are no similar issues or pull requests to fix it yet.\r\n\r\n### Describe the bug\r\n\r\nAs of version httpx 0.12.1, sync client send multiple host headers when proxied.\r\n\r\n### To reproduce\r\n\r\n````\r\nimport httpx\r\n\r\nproxies = {\r\n    \"http\": \"http://127.0.0.1:8080/\"\r\n}\r\n\r\nwith httpx.Client(proxies=proxies) as client:\r\n    client.get('http://ec2-18-sdl-1.compute.amazonaws.com:8080/items')\r\n````\r\n\r\n### Expected behavior\r\n\r\nThere must be only one host header, as some servers (for example uvicorn) will reject requests otherwise.\r\n\r\n### Actual behavior\r\n\r\nHeaders host and Host are set.\r\n\r\n### Debugging material\r\n\r\nThe second Host header is set in poolmanager._set_proxy_headers()\r\n\r\n### Environment\r\n\r\n- OS: Windows\r\n- Python version: 3.6.8\r\n- HTTPX version: 0.12.1\r\n- Async environment: No\r\n- HTTP proxy: yes\r\n- Custom certificates: No\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/918", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/918/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/918/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/918/events", "html_url": "https://github.com/encode/httpx/issues/918", "id": 610791900, "node_id": "MDU6SXNzdWU2MTA3OTE5MDA=", "number": 918, "title": "Can I use a sync httpx.Client to talk to an ASGI app?", "user": {"login": "vjpr", "id": 281413, "node_id": "MDQ6VXNlcjI4MTQxMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/281413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vjpr", "html_url": "https://github.com/vjpr", "followers_url": "https://api.github.com/users/vjpr/followers", "following_url": "https://api.github.com/users/vjpr/following{/other_user}", "gists_url": "https://api.github.com/users/vjpr/gists{/gist_id}", "starred_url": "https://api.github.com/users/vjpr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vjpr/subscriptions", "organizations_url": "https://api.github.com/users/vjpr/orgs", "repos_url": "https://api.github.com/users/vjpr/repos", "events_url": "https://api.github.com/users/vjpr/events{/privacy}", "received_events_url": "https://api.github.com/users/vjpr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}, {"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-01T14:54:22Z", "updated_at": "2020-05-03T10:38:47Z", "closed_at": "2020-05-02T12:34:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a Behave test suite that is using the `requests` library for e2e testing.\r\n\r\nI want to swap out the requests library with httpx that will talk directly to my ASGI app.\r\n\r\nI currently have a wrapper lib that uses the same api as `requests` and uses `httpx.Client` instead. I would prefer to avoid changing every test (of which there are 100s) to use async/await.\r\n\r\nSo can I use a sync httpx.Client to talk to an ASGI app?\r\n\r\nWhen I try to use httpx.Client with my WSGI app I get the following error:\r\n\r\n```\r\n    dispatch = httpx.WSGIDispatch(app=app)\r\n    context.core_client = httpx.Client(dispatch=dispatch, base_url=\"http://testserver\")\r\n```\r\n\r\n```\r\nresult = self.app(environ, start_response)\r\n    #   TypeError: __call__() missing 1 required positional argument: 'send'\r\n```\r\n\r\n---\r\n\r\nI'm guessing its more a question of \"how to call async function from sync function\" which would block the event loop.\r\n\r\nAlso, would async requests for tests be faster?\r\n\r\nHere are the two dispatchers...\r\n\r\n_asgi.py_\r\n\r\n```\r\n    async def send(self, request: Request, timeout: TimeoutTypes = None) -> Response:\r\n        scope = {\r\n            \"type\": \"http\",\r\n            \"asgi\": {\"version\": \"3.0\"},\r\n            \"http_version\": \"1.1\",\r\n            \"method\": request.method,\r\n            \"headers\": request.headers.raw,\r\n            \"scheme\": request.url.scheme,\r\n            \"path\": request.url.path,\r\n            \"query_string\": request.url.query.encode(\"ascii\"),\r\n            \"server\": request.url.host,\r\n            \"client\": self.client,\r\n            \"root_path\": self.root_path,\r\n        }\r\n        status_code = None\r\n        headers = None\r\n        body_parts = []\r\n        response_started = False\r\n        response_complete = False\r\n\r\n        request_body_chunks = request.stream.__aiter__()\r\n\r\n        async def receive() -> dict:\r\n            try:\r\n                body = await request_body_chunks.__anext__()\r\n            except StopAsyncIteration:\r\n                return {\"type\": \"http.request\", \"body\": b\"\", \"more_body\": False}\r\n            return {\"type\": \"http.request\", \"body\": body, \"more_body\": True}\r\n\r\n        async def send(message: dict) -> None:\r\n            nonlocal status_code, headers, body_parts\r\n            nonlocal response_started, response_complete\r\n\r\n            if message[\"type\"] == \"http.response.start\":\r\n                assert not response_started\r\n\r\n                status_code = message[\"status\"]\r\n                headers = message.get(\"headers\", [])\r\n                response_started = True\r\n\r\n            elif message[\"type\"] == \"http.response.body\":\r\n                assert not response_complete\r\n                body = message.get(\"body\", b\"\")\r\n                more_body = message.get(\"more_body\", False)\r\n\r\n                if body and request.method != \"HEAD\":\r\n                    body_parts.append(body)\r\n\r\n                if not more_body:\r\n                    response_complete = True\r\n\r\n        try:\r\n            await self.app(scope, receive, send)\r\n        except Exception:\r\n            if self.raise_app_exceptions or not response_complete:\r\n                raise\r\n\r\n        assert response_complete\r\n        assert status_code is not None\r\n        assert headers is not None\r\n\r\n        stream = ByteStream(b\"\".join(body_parts))\r\n\r\n        return Response(\r\n            status_code=status_code,\r\n            http_version=\"HTTP/1.1\",\r\n            headers=headers,\r\n            stream=stream,\r\n            request=request,\r\n        )\r\n\r\n```\r\n\r\n_wsgi.py_\r\n\r\n```\r\n    def send(self, request: Request, timeout: TimeoutTypes = None) -> Response:\r\n        environ = {\r\n            \"wsgi.version\": (1, 0),\r\n            \"wsgi.url_scheme\": request.url.scheme,\r\n            \"wsgi.input\": io.BytesIO(request.read()),\r\n            \"wsgi.errors\": io.BytesIO(),\r\n            \"wsgi.multithread\": True,\r\n            \"wsgi.multiprocess\": False,\r\n            \"wsgi.run_once\": False,\r\n            \"REQUEST_METHOD\": request.method,\r\n            \"SCRIPT_NAME\": self.script_name,\r\n            \"PATH_INFO\": request.url.path,\r\n            \"QUERY_STRING\": request.url.query,\r\n            \"SERVER_NAME\": request.url.host,\r\n            \"SERVER_PORT\": str(request.url.port),\r\n            \"REMOTE_ADDR\": self.remote_addr,\r\n        }\r\n        for key, value in request.headers.items():\r\n            key = key.upper().replace(\"-\", \"_\")\r\n            if key not in (\"CONTENT_TYPE\", \"CONTENT_LENGTH\"):\r\n                key = \"HTTP_\" + key\r\n            environ[key] = value\r\n\r\n        seen_status = None\r\n        seen_response_headers = None\r\n        seen_exc_info = None\r\n\r\n        def start_response(\r\n            status: str, response_headers: list, exc_info: typing.Any = None\r\n        ) -> None:\r\n            nonlocal seen_status, seen_response_headers, seen_exc_info\r\n            seen_status = status\r\n            seen_response_headers = response_headers\r\n            seen_exc_info = exc_info\r\n\r\n        result = self.app(environ, start_response)\r\n\r\n        assert seen_status is not None\r\n        assert seen_response_headers is not None\r\n        if seen_exc_info and self.raise_app_exceptions:\r\n            raise seen_exc_info[1]\r\n\r\n        return Response(\r\n            status_code=int(seen_status.split()[0]),\r\n            http_version=\"HTTP/1.1\",\r\n            headers=seen_response_headers,\r\n            stream=IteratorStream(chunk for chunk in result),\r\n            request=request,\r\n        )\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/917", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/917/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/917/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/917/events", "html_url": "https://github.com/encode/httpx/issues/917", "id": 610592346, "node_id": "MDU6SXNzdWU2MTA1OTIzNDY=", "number": 917, "title": "Passing AsyncClient from an 'async with' context behaves unexpectedly", "user": {"login": "StevenBorg", "id": 1395294, "node_id": "MDQ6VXNlcjEzOTUyOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1395294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StevenBorg", "html_url": "https://github.com/StevenBorg", "followers_url": "https://api.github.com/users/StevenBorg/followers", "following_url": "https://api.github.com/users/StevenBorg/following{/other_user}", "gists_url": "https://api.github.com/users/StevenBorg/gists{/gist_id}", "starred_url": "https://api.github.com/users/StevenBorg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StevenBorg/subscriptions", "organizations_url": "https://api.github.com/users/StevenBorg/orgs", "repos_url": "https://api.github.com/users/StevenBorg/repos", "events_url": "https://api.github.com/users/StevenBorg/events{/privacy}", "received_events_url": "https://api.github.com/users/StevenBorg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-01T06:28:37Z", "updated_at": "2020-05-01T20:51:31Z", "closed_at": "2020-05-01T09:13:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "See [https://stackoverflow.com/questions/61537570/how-do-i-make-parallel-async-http-requests-using-httpx-versus-aiohttp-in-pytho/61537571](https://stackoverflow.com/questions/61537570/how-do-i-make-parallel-async-http-requests-using-httpx-versus-aiohttp-in-pytho/61537571) for full explanation and context.  It also includes a workaround.  \r\n\r\nThanks so much for the effort creating this library!  I really appreciate it.\r\n\r\n### Describe the bug\r\n\r\nPassing an AsyncClient object as a parameter from inside a 'with' context causes a failure that results in the message \"AttributeError: __aexit__\"\r\n\r\n### To reproduce\r\n```python\r\nimport aiohttp\r\nimport asyncio\r\nimport time\r\nimport httpx\r\n\r\nasync def call_url(session):\r\n    url = \"http://example.com\"        \r\n    response = await session.request(method='GET', url=url)\r\n    #response.raise_for_status() \r\n    return response\r\n\r\n#async with aiohttp.ClientSession() as session: #use aiohttp\r\nasync with httpx.AsyncClient as session:  #use httpx\r\n    await asyncio.gather(*[call_url(session) for x in range(i)])\r\n```\r\n### Expected behavior\r\n\r\nContext should follow the AsyncClient, as it does with aiohttp (and most other context managers I'm familiar with). For instance, the following doesn't error out, yet still closes the file appropriately.\r\n```python\r\ndef write_stuff(f):\r\n    f.write('And stuff with context passed to another method. ')\r\n    \r\nwith open('foo.txt',\"w\") as f:\r\n    f.write('Start with context manager inside with statement. ')\r\n    write_stuff(f)\r\n    f.write('And back to close the with.')\r\n```\r\n\r\n### Actual behavior\r\n\r\nException is thrown, and code fails.\r\n\r\n### Workaround\r\n\r\nCreate and close the client manually.  Replace the context manager above with explicit code:\r\n```python\r\n    session = httpx.AsyncClient() #use httpx\r\n    await asyncio.gather(*[call_url(session) for x in range(i)])\r\n    await session.aclose()\r\n```\r\n\r\n### Environment\r\n\r\n- OS: Windows 10\r\n- Python version: 3.7.7\r\n- HTTPX version: 0.12.1\r\n- Async environment: did not verify on trio. asyncio only.\r\n- HTTP proxy: no\r\n- Custom certificates: no, and http fails just like https.\r\n\r\n### Additional context\r\n\r\nSee [https://stackoverflow.com/questions/61537570/how-do-i-make-parallel-async-http-requests-using-httpx-versus-aiohttp-in-pytho/61537571](https://stackoverflow.com/questions/61537570/how-do-i-make-parallel-async-http-requests-using-httpx-versus-aiohttp-in-pytho/61537571) for a full description.\r\n\r\n**Once again, absolutely HUGE thanks for this library!  I'm so glad I found it.**  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/912", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/912/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/912/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/912/events", "html_url": "https://github.com/encode/httpx/issues/912", "id": 607538263, "node_id": "MDU6SXNzdWU2MDc1MzgyNjM=", "number": 912, "title": "Release timeline", "user": {"login": "achapkowski", "id": 5131271, "node_id": "MDQ6VXNlcjUxMzEyNzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5131271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achapkowski", "html_url": "https://github.com/achapkowski", "followers_url": "https://api.github.com/users/achapkowski/followers", "following_url": "https://api.github.com/users/achapkowski/following{/other_user}", "gists_url": "https://api.github.com/users/achapkowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/achapkowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achapkowski/subscriptions", "organizations_url": "https://api.github.com/users/achapkowski/orgs", "repos_url": "https://api.github.com/users/achapkowski/repos", "events_url": "https://api.github.com/users/achapkowski/events{/privacy}", "received_events_url": "https://api.github.com/users/achapkowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-27T13:13:05Z", "updated_at": "2020-04-27T15:35:32Z", "closed_at": "2020-04-27T15:19:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWhat is the new timeline for the v1.0.0 release?  It's past April 2020 and the API is still at v0.12.1.  \r\n\r\nThank you\r\n\r\n```A 1.0 release is expected to be issued sometime on or before April 2020.```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/911", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/911/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/911/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/911/events", "html_url": "https://github.com/encode/httpx/issues/911", "id": 607135112, "node_id": "MDU6SXNzdWU2MDcxMzUxMTI=", "number": 911, "title": "Wrong url history for http requests with http proxy in AsyncClient", "user": {"login": "oczkers", "id": 642195, "node_id": "MDQ6VXNlcjY0MjE5NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/642195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oczkers", "html_url": "https://github.com/oczkers", "followers_url": "https://api.github.com/users/oczkers/followers", "following_url": "https://api.github.com/users/oczkers/following{/other_user}", "gists_url": "https://api.github.com/users/oczkers/gists{/gist_id}", "starred_url": "https://api.github.com/users/oczkers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oczkers/subscriptions", "organizations_url": "https://api.github.com/users/oczkers/orgs", "repos_url": "https://api.github.com/users/oczkers/repos", "events_url": "https://api.github.com/users/oczkers/events{/privacy}", "received_events_url": "https://api.github.com/users/oczkers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068458, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU4", "url": "https://api.github.com/repos/encode/httpx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1622650862, "node_id": "MDU6TGFiZWwxNjIyNjUwODYy", "url": "https://api.github.com/repos/encode/httpx/labels/proxies", "name": "proxies", "color": "0e8a16", "default": false, "description": "Issues related to HTTP and SOCKS proxies"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-26T22:58:45Z", "updated_at": "2020-05-07T07:42:01Z", "closed_at": "2020-05-07T07:42:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Checklist\r\n- [X] The bug is reproducible against the latest release and/or `master`.\r\n- [X] There are no similar issues or pull requests to fix it yet.\r\n\r\n\r\n### Describe the bug\r\nIn AsyncClient url in response object is wrong after http request using http proxy - there should be destination url but proxy address is returned instead.\r\nThis behavior completely breaks redirects because location header also have proxy url.\r\n\r\nEDIT: problem exists only with FORWARD mode\r\n\r\n\r\n### To reproduce\r\nThis is not open proxy, just an example ip so please use some other proxy ip\r\n```python\r\n>>> import httpx\r\n>>> import asyncio\r\n>>> r = httpx.AsyncClient(proxies={'http': 'http://78.47.135.103:8888', 'https': 'http://78.47.135.103:8888'})\r\n>>> asyncio.run(r.get('http://httpbin.org/ip')).url\r\nURL('http://78.47.135.103:8888')\r\n>>> asyncio.run(r.get('https://httpbin.org/ip')).url\r\nURL('https://httpbin.org/ip')\r\n```\r\n\r\n### Environment\r\n\r\n- OS: Linux\r\n- Python version: 3.7.7\r\n- HTTPX version: 0.12.1 - this is not related to httpcore implementation, exact same behavior was noticed before\r\n - Async environment: asyncio\r\n- HTTP proxy: yes\r\n- Custom certificates: no", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/910", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/910/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/910/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/910/events", "html_url": "https://github.com/encode/httpx/issues/910", "id": 606962649, "node_id": "MDU6SXNzdWU2MDY5NjI2NDk=", "number": 910, "title": "Hiding the request query params in DEBUG logs", "user": {"login": "foxmask", "id": 208212, "node_id": "MDQ6VXNlcjIwODIxMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/208212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/foxmask", "html_url": "https://github.com/foxmask", "followers_url": "https://api.github.com/users/foxmask/followers", "following_url": "https://api.github.com/users/foxmask/following{/other_user}", "gists_url": "https://api.github.com/users/foxmask/gists{/gist_id}", "starred_url": "https://api.github.com/users/foxmask/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/foxmask/subscriptions", "organizations_url": "https://api.github.com/users/foxmask/orgs", "repos_url": "https://api.github.com/users/foxmask/repos", "events_url": "https://api.github.com/users/foxmask/events{/privacy}", "received_events_url": "https://api.github.com/users/foxmask/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-26T09:11:59Z", "updated_at": "2020-05-06T13:51:17Z", "closed_at": "2020-05-06T13:51:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- Please make sure you check all these items before submitting your feature request. -->\r\n\r\n- [x] There are no similar issues or pull requests for this yet.\r\n- [ ] I discussed this idea on the [community chat](https://gitter.im/encode/community) and feedback is positive.\r\n\r\n### Is your feature related to a problem? Please describe.\r\n\r\ni'd like to be able to hide sensible data from the log \r\n\r\n## Describe the solution you would like.\r\n\r\nwhen requesting an endpoint, all the params are displayed in the log\r\neg\r\nI've hidden the param from my lib\r\n```\r\n2020-04-26 10:53:29,286 - DEBUG - method get path http://127.0.0.1:41184/folders/ params {'token': '***', 'fields': 'id, title, created_time, updated_time, user_created_time, user_updated_time, encryption_cipher_text, encryption_applied, parent_id'} payload {} headers {'Content-Type': 'application/json'}\r\nmethod get path http://127.0.0.1:41184/folders/ params {'token': '***', 'fields': 'id, title, created_time, updated_time, user_created_time, user_updated_time, encryption_cipher_text, encryption_applied, parent_id'} payload {} headers {'Content-Type': 'application/json'}\r\n```\r\nbut httpx show it after all\r\n```\r\n2020-04-26 10:53:29,299 - DEBUG - HTTP Request: GET http://127.0.0.1:41184/folders/?token=fff6170db0bbb65ff563fc5977d533a0b4a60ce3203b8c6252f500fbf9e37211a056dcc8f7cf6239e8745a90bd62da0ff328fcc6e8162552139e382301520ca8 \"HTTP/1.1 200 OK\"\r\nHTTP Request: GET http://127.0.0.1:41184/folders/?token=fff6170db0bbb65ff563fc5977d533a0b4a60ce3203b8c6252f500fbf9e37211a056dcc8f7cf6239e8745a90bd62da0ff328fcc6e8162552139e382301520ca8 \"HTTP/1.1 200 OK\"\r\n```\r\nhow could we hide that ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/905", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/905/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/905/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/905/events", "html_url": "https://github.com/encode/httpx/issues/905", "id": 598593059, "node_id": "MDU6SXNzdWU1OTg1OTMwNTk=", "number": 905, "title": "Server HTTP/2 Support, but HTTPX Using 1.1", "user": {"login": "GnubiBORED", "id": 45830421, "node_id": "MDQ6VXNlcjQ1ODMwNDIx", "avatar_url": "https://avatars0.githubusercontent.com/u/45830421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GnubiBORED", "html_url": "https://github.com/GnubiBORED", "followers_url": "https://api.github.com/users/GnubiBORED/followers", "following_url": "https://api.github.com/users/GnubiBORED/following{/other_user}", "gists_url": "https://api.github.com/users/GnubiBORED/gists{/gist_id}", "starred_url": "https://api.github.com/users/GnubiBORED/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GnubiBORED/subscriptions", "organizations_url": "https://api.github.com/users/GnubiBORED/orgs", "repos_url": "https://api.github.com/users/GnubiBORED/repos", "events_url": "https://api.github.com/users/GnubiBORED/events{/privacy}", "received_events_url": "https://api.github.com/users/GnubiBORED/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068459, "node_id": "MDU6TGFiZWwxMzA0MDY4NDU5", "url": "https://api.github.com/repos/encode/httpx/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-12T23:20:55Z", "updated_at": "2020-04-13T05:49:05Z", "closed_at": "2020-04-13T05:49:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Original request:\r\n```\r\n:method: POST\r\n:path: /m/m/signon?hash=eaec910d03cdb6dca059a8e4214f67204ff4c06f\r\n:authority: www.guerrastribales.es\r\n:scheme: https\r\nigmobiledevice: Android\r\nx-ig-os-name: android\r\nx-ig-manufacturer: motorola\r\nx-ig-model: Nexus 6\r\nx-ig-os-version: 5.1.1\r\nx-ig-client-version: 3.0.0\r\ncontent-type: application/json; charset=UTF-8\r\ncontent-length: 77\r\naccept-encoding: gzip\r\nuser-agent: okhttp/3.12.6\r\n\r\n[\"password\",{\"intent\":\"login\",\"username\":\"Killtroot\",\"password\":\"123456789\"}]\r\n```\r\n\r\nHTTPX Request:\r\n```\r\nPOST /m/m/signon?hash=eaec910d03cdb6dca059a8e4214f67204ff4c06f HTTP/1.1\r\nhost: www.guerrastribales.es\r\naccept: */*\r\nconnection: keep-alive\r\naccept-encoding: gzip\r\nuser-agent: Mozilla/5.0 (Linux; Android 7.1.2; AFTMM Build/NS6264; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/59.0.3071.125 Mobile Safari/537.36\r\ncontent-type: application/json; charset=UTF-8\r\nx-ig-os-name: android\r\nx-ig-os-version: 5.1.1\r\nx-ig-model: Nexus 6\r\nx-ig-manufacturer: motorola\r\nigmobiledevice: Android\r\ncontent-length: 77\r\n\r\n[\"password\",{\"intent\":\"login\",\"username\":\"Killtroot\",\"password\":\"123456789\"}]\r\n```\r\n\r\nclient.py\r\n```\r\nimport json\r\nimport ssl\r\nimport collections\r\nimport traceback\r\nimport httpx._config\r\nimport httpx\r\n\r\n\r\nclass http_Client():\r\n    def __init__(self):\r\n        self.proxy = None\r\n        self.headers = None\r\n        self.body = None\r\n        self.params = None\r\n        self.url = None\r\n        self.method = None\r\n        self.cookies = None\r\n        self.response = None\r\n\r\n    def reset(self):\r\n        self.headers = None\r\n        self.body = None\r\n        self.params = None\r\n        self.url = None\r\n        self.method = None\r\n        self.cookies = None\r\n        self.response = None\r\n\r\n\r\n    async def run(self):\r\n        if self.headers == None:\r\n            raise Exception('Headers cant be empty')\r\n        if self.method == 'POST' and self.body == None:\r\n            raise Exception('HTTP body cant be empty')\r\n        if self.url == None:\r\n            raise Exception('URL Cant be empty')\r\n\r\n        # todo aun falta configurar las cookies en las llamadas que faltan ya que no tengo claro que llamadas meten cookies y cuales no, la mayoria de gets llevan cookies\r\n\r\n        ssl_config = httpx._config.SSLConfig()\r\n\r\n        ssl_context = ssl_config.load_ssl_context()\r\n\r\n        ssl_context.options |= getattr(ssl, \"OP_NO_TLSv1_3\", 0)\r\n\r\n        ssl_context.load_verify_locations(path)\r\n\r\n        # ssl_config = client_httpx.SSLConfig(verify=r'C:\\Users\\localhost\\Documents\\Enrique\\charlesproxy.pem')\r\n\r\n        try:\r\n            self.headers = collections.OrderedDict(self.headers)\r\n            if self.proxy != None:\r\n\r\n\r\n                client = httpx.AsyncClient(proxies={\r\n                    \"http\": 'http://' + self.proxy,\r\n                    \"https\": 'http://' + self.proxy\r\n\r\n                    # configuramos ssl en el cliente\r\n\r\n                }, verify=ssl_context,http2=True)\r\n            else:\r\n                client = httpx.AsyncClient(http2=True)\r\n\r\n            if self.method == 'get':\r\n\r\n                self.response = await client.get(self.url, headers=collections.OrderedDict(self.headers), params=self.params)\r\n\r\n                if self.response.history and 'login.php?mobile&sid' in self.url:\r\n\r\n                    for resp in self.response.history:\r\n                        zero_test = resp.headers['set-cookie']\r\n                        sid_split = zero_test.split('=')\r\n                        sid = sid_split[1].split(';')[0]\r\n                        cid = sid_split[3].split(';')[0]\r\n\r\n                        return {'sid': sid, 'cid': cid, 'html_response': self.response.text}\r\n                else:\r\n\r\n                    json_data = json.loads(self.response)\r\n\r\n                    return json_data\r\n\r\n\r\n            elif self.method == 'post':\r\n\r\n                # pasamos a texto  cualquier cosa dentro de el body\r\n                body = str(self.body)\r\n                # mandamos a el cliente ha hacer el post\r\n                self.response = await client.post(self.url, headers=collections.OrderedDict(self.headers), params=self.params, data=body)\r\n                json_data = self.response.json()\r\n                return json_data\r\n\r\n        except Exception as e:\r\n            print(e.args)\r\n            print(traceback.print_exc())\r\n        finally:\r\n            self.reset()\r\n```\r\n\r\nas you can see im using  \r\nhttpx.AsyncClient(http2=True)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/904", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/904/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/904/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/904/events", "html_url": "https://github.com/encode/httpx/issues/904", "id": 598502201, "node_id": "MDU6SXNzdWU1OTg1MDIyMDE=", "number": 904, "title": "Where is SSLConfig?", "user": {"login": "GnubiBORED", "id": 45830421, "node_id": "MDQ6VXNlcjQ1ODMwNDIx", "avatar_url": "https://avatars0.githubusercontent.com/u/45830421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GnubiBORED", "html_url": "https://github.com/GnubiBORED", "followers_url": "https://api.github.com/users/GnubiBORED/followers", "following_url": "https://api.github.com/users/GnubiBORED/following{/other_user}", "gists_url": "https://api.github.com/users/GnubiBORED/gists{/gist_id}", "starred_url": "https://api.github.com/users/GnubiBORED/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GnubiBORED/subscriptions", "organizations_url": "https://api.github.com/users/GnubiBORED/orgs", "repos_url": "https://api.github.com/users/GnubiBORED/repos", "events_url": "https://api.github.com/users/GnubiBORED/events{/privacy}", "received_events_url": "https://api.github.com/users/GnubiBORED/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1304068464, "node_id": "MDU6TGFiZWwxMzA0MDY4NDY0", "url": "https://api.github.com/repos/encode/httpx/labels/question", "name": "question", "color": "944fcc", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-12T14:50:56Z", "updated_at": "2020-04-12T19:31:20Z", "closed_at": "2020-04-12T19:30:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ve been around 4 months witouth using HTTPX i installed again recently but my old code isnt working\r\n```\r\n\r\n        ssl_config = httpx.SSLConfig()\r\n\r\n        ssl_context = ssl_config.load_ssl_context()\r\n\r\n        ssl_context.options |= getattr(ssl, \"OP_NO_TLSv1_3\", 0)\r\n\r\n        ssl_context.load_verify_locations(path)\r\n```\r\n\r\nim getting\r\n```\r\nssl_config = httpx.SSLConfig()\r\nAttributeError: module 'httpx' has no attribute 'SSLConfig'\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/httpx/issues/899", "repository_url": "https://api.github.com/repos/encode/httpx", "labels_url": "https://api.github.com/repos/encode/httpx/issues/899/labels{/name}", "comments_url": "https://api.github.com/repos/encode/httpx/issues/899/comments", "events_url": "https://api.github.com/repos/encode/httpx/issues/899/events", "html_url": "https://github.com/encode/httpx/issues/899", "id": 597479708, "node_id": "MDU6SXNzdWU1OTc0Nzk3MDg=", "number": 899, "title": "Should `Headers.keys` be a set-like keys view?", "user": {"login": "obataku", "id": 19821199, "node_id": "MDQ6VXNlcjE5ODIxMTk5", "avatar_url": "https://avatars3.githubusercontent.com/u/19821199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obataku", "html_url": "https://github.com/obataku", "followers_url": "https://api.github.com/users/obataku/followers", "following_url": "https://api.github.com/users/obataku/following{/other_user}", "gists_url": "https://api.github.com/users/obataku/gists{/gist_id}", "starred_url": "https://api.github.com/users/obataku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obataku/subscriptions", "organizations_url": "https://api.github.com/users/obataku/orgs", "repos_url": "https://api.github.com/users/obataku/repos", "events_url": "https://api.github.com/users/obataku/events{/privacy}", "received_events_url": "https://api.github.com/users/obataku/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1508947811, "node_id": "MDU6TGFiZWwxNTA4OTQ3ODEx", "url": "https://api.github.com/repos/encode/httpx/labels/user-experience", "name": "user-experience", "color": "ff85a1", "default": false, "description": "Ensuring that users have a good experience using the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-09T18:43:39Z", "updated_at": "2020-08-01T18:15:16Z", "closed_at": "2020-08-01T18:15:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Checklist\r\n\r\n<!-- To help keep this issue tracker clean and focused, please make sure you tried *all* the following resources before submitting your question. -->\r\n\r\n- [X] I searched the [HTTPX documentation](https://www.python-httpx.org) but couldn't find what I'm looking for.\r\n- [X] I looked through similar issues on GitHub, but didn't find anything.\r\n- [ ] I looked up \"How to do ... in HTTPX\" on a search engine and didn't find any information.\r\n- [ ] I asked the [community chat](https://gitter.im/encode/community) for help but didn't get an answer.\r\n\r\n### Question\r\n\r\npresently [`Headers.keys`](https://github.com/encode/httpx/blob/master/httpx/_models.py#L458) returns a `typing.List[str]` rather than a (set-like) `typing.KeysView[str]`, which appears to violate the `Mapping` protocol: https://docs.python.org/3/library/collections.abc.html#collections.abc.KeysView\r\n\r\nthis breaks code that expects set-like operations with `Headers.keys`, e.g.\r\n```\r\n    dst: Dict[str, str] = ...\r\n    headers: httpx.Headers = ...\r\n    keys: Set[str] = {\"set-cookie\", \"set-cookie2\"}\r\n    dst.update({k: headers[k] for k in keys & headers.keys()})\r\n```\r\n\r\nis this an intentional design choice or simply an oversight?", "performed_via_github_app": null, "score": 1.0}]}