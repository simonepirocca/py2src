{"total_count": 162, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/312", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/312/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/312/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/312", "id": 640753511, "node_id": "MDU6SXNzdWU2NDA3NTM1MTE=", "number": 312, "title": "Any Recommendation for serialization between IronPython and cPython3", "user": {"login": "yck011522", "id": 1297653, "node_id": "MDQ6VXNlcjEyOTc2NTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1297653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yck011522", "html_url": "https://github.com/yck011522", "followers_url": "https://api.github.com/users/yck011522/followers", "following_url": "https://api.github.com/users/yck011522/following{/other_user}", "gists_url": "https://api.github.com/users/yck011522/gists{/gist_id}", "starred_url": "https://api.github.com/users/yck011522/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yck011522/subscriptions", "organizations_url": "https://api.github.com/users/yck011522/orgs", "repos_url": "https://api.github.com/users/yck011522/repos", "events_url": "https://api.github.com/users/yck011522/events{/privacy}", "received_events_url": "https://api.github.com/users/yck011522/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1472261700, "node_id": "MDU6TGFiZWwxNDcyMjYxNzAw", "url": "https://api.github.com/repos/jsonpickle/jsonpickle/labels/enhancement", "name": "enhancement", "color": "2d26f2", "default": true, "description": ""}, {"id": 18048, "node_id": "MDU6TGFiZWwxODA0OA==", "url": "https://api.github.com/repos/jsonpickle/jsonpickle/labels/wishlist", "name": "wishlist", "color": "009924", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-17T21:28:09Z", "updated_at": "2020-06-25T20:34:07Z", "closed_at": "2020-06-25T20:34:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nAs a developer who use jsonpickle as a way to bridge between Python 2 (IronPython) and  Python 3 (cPython) code. I find that sometimes my objects are jumbled upon serialization.\r\n\r\nMy particular use case is when I serialize a custom object that I wrote in ronPython with `make_refs=True, keys=True` . \r\n\r\nIf I deserialize this object in Python 3.7.6, the items that clearly had an `\"py/id\"` were all mixed up.\r\n\r\nI wonder if the developers have tested a scenario where serialization between IronPython 2 and cPython 3, And if there are somethings that need to be aware of.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/310", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/310/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/310/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/310", "id": 617771260, "node_id": "MDU6SXNzdWU2MTc3NzEyNjA=", "number": 310, "title": "please indicate which GPG key is expected to sign pypi releases", "user": {"login": "FelixSchwarz", "id": 212753, "node_id": "MDQ6VXNlcjIxMjc1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/212753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixSchwarz", "html_url": "https://github.com/FelixSchwarz", "followers_url": "https://api.github.com/users/FelixSchwarz/followers", "following_url": "https://api.github.com/users/FelixSchwarz/following{/other_user}", "gists_url": "https://api.github.com/users/FelixSchwarz/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixSchwarz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixSchwarz/subscriptions", "organizations_url": "https://api.github.com/users/FelixSchwarz/orgs", "repos_url": "https://api.github.com/users/FelixSchwarz/repos", "events_url": "https://api.github.com/users/FelixSchwarz/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixSchwarz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-13T21:37:24Z", "updated_at": "2020-06-25T17:48:30Z", "closed_at": "2020-06-25T05:48:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you very much for signing your pypi releases. I'll try to make sure that the Fedora (+ CentOS/EPEL) RPM build process will verify the source code whenever a new version is built.\r\n\r\nHowever it would be really helpful if there was an indication which GPG key(s) are expected to sign releases (ideally I'd like to retrieve these keys via a HTTPs URL directly).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/306", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/306/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/306/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/306", "id": 606471993, "node_id": "MDU6SXNzdWU2MDY0NzE5OTM=", "number": 306, "title": "Cannot encode objects with both __dict__ and __slots__", "user": {"login": "yck011522", "id": 1297653, "node_id": "MDQ6VXNlcjEyOTc2NTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1297653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yck011522", "html_url": "https://github.com/yck011522", "followers_url": "https://api.github.com/users/yck011522/followers", "following_url": "https://api.github.com/users/yck011522/following{/other_user}", "gists_url": "https://api.github.com/users/yck011522/gists{/gist_id}", "starred_url": "https://api.github.com/users/yck011522/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yck011522/subscriptions", "organizations_url": "https://api.github.com/users/yck011522/orgs", "repos_url": "https://api.github.com/users/yck011522/repos", "events_url": "https://api.github.com/users/yck011522/events{/privacy}", "received_events_url": "https://api.github.com/users/yck011522/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-24T17:30:13Z", "updated_at": "2020-04-28T09:11:06Z", "closed_at": "2020-04-28T09:11:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all. (excuse me if I'm rather new to jsonpickle)\r\n\r\nI have my classes that have both _dict__ and __slots__. Trying to get the best of both worlds. A simple example below:\r\n\r\n```\r\nimport jsonpickle\r\n\r\nclass MyBrokenPoint(object):\r\n    __slots__ = ['_x', '_y', '_z', '__dict__']\r\n    \r\n    def __init__(self, x, y, z):\r\n        self._x = 0.0\r\n        self._y = 0.0\r\n        self._z = 0.0\r\n\r\nmy_point = MyBrokenPoint(1,2,3)\r\n\r\nprint ((jsonpickle.encode(my_point, warn = True, indent = 4, keys = True)))\r\nprint(my_point.__slots__)\r\nprint(my_point.__dict__) \r\n```\r\nOutput\r\n```\r\n{\r\n    \"py/object\": \"__main__.MyBrokenPoint\"\r\n}\r\n\r\n['_x', '_y', '_z', '__dict__']\r\n\r\n{}\r\n```\r\n\r\nNotice that the '_x', '_y', '_z' attributes are not encoded :(\r\n\r\n**Expected Behaviour**\r\n\r\nThe '_x', '_y', '_z' attributes exist in the encoded string", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/303", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/303/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/303/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/303", "id": 604005377, "node_id": "MDU6SXNzdWU2MDQwMDUzNzc=", "number": 303, "title": "Use importlib.metadata from the standard library on Python 3.8+", "user": {"login": "hroncok", "id": 2401856, "node_id": "MDQ6VXNlcjI0MDE4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2401856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hroncok", "html_url": "https://github.com/hroncok", "followers_url": "https://api.github.com/users/hroncok/followers", "following_url": "https://api.github.com/users/hroncok/following{/other_user}", "gists_url": "https://api.github.com/users/hroncok/gists{/gist_id}", "starred_url": "https://api.github.com/users/hroncok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hroncok/subscriptions", "organizations_url": "https://api.github.com/users/hroncok/orgs", "repos_url": "https://api.github.com/users/hroncok/repos", "events_url": "https://api.github.com/users/hroncok/events{/privacy}", "received_events_url": "https://api.github.com/users/hroncok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-21T13:37:29Z", "updated_at": "2020-04-24T04:53:53Z", "closed_at": "2020-04-24T04:53:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello. Would you accept a pull request that uses `importlib.metadata` from the standard library on Python 3.8+ instead of the `importlib_metadata` package?\r\n\r\nIf so, do you prefer `try: import importlib.metadata, except: import importlib_metadata` or `if version < 3.8` approach?\r\n\r\nExamples:\r\n\r\n - https://github.com/pytest-dev/pytest/pull/5539\r\n - https://github.com/pytest-dev/pluggy/pull/223\r\n - https://github.com/tox-dev/tox/pull/1368", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/300", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/300/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/300/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/300", "id": 599478137, "node_id": "MDU6SXNzdWU1OTk0NzgxMzc=", "number": 300, "title": "Fails to Load 1.4 due to meta data issues.", "user": {"login": "DavidWylie", "id": 21624816, "node_id": "MDQ6VXNlcjIxNjI0ODE2", "avatar_url": "https://avatars2.githubusercontent.com/u/21624816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidWylie", "html_url": "https://github.com/DavidWylie", "followers_url": "https://api.github.com/users/DavidWylie/followers", "following_url": "https://api.github.com/users/DavidWylie/following{/other_user}", "gists_url": "https://api.github.com/users/DavidWylie/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidWylie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidWylie/subscriptions", "organizations_url": "https://api.github.com/users/DavidWylie/orgs", "repos_url": "https://api.github.com/users/DavidWylie/repos", "events_url": "https://api.github.com/users/DavidWylie/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidWylie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-14T10:53:42Z", "updated_at": "2020-04-20T21:13:24Z", "closed_at": "2020-04-20T19:22:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Im using the library as part of aws xray sdk in an aws lambda environment on pythion 3.8.\r\nWhen importing the latest version gives the following error.\r\n\r\nIve included a cut down stack trace below.\r\nAffected version jsonpickle 1.4  when forcing a 1.3 release it works correctly.\r\n\r\n`\r\n[ERROR] PackageNotFoundError: importlib_metadata\r\n\r\n...\r\n\r\n File \"/var/task/jsonpickle/__init__.py\", line 64, in <module>\r\n    from .version import __version__  # noqa: F401\r\n  File \"/var/task/jsonpickle/version.py\", line 2, in <module>\r\n    import importlib_metadata as metadata\r\n  File \"/var/task/importlib_metadata/__init__.py\", line 602, in <module>\r\n    __version__ = version(__name__)\r\n  File \"/var/task/importlib_metadata/__init__.py\", line 564, in version\r\n    return distribution(distribution_name).version\r\n  File \"/var/task/importlib_metadata/__init__.py\", line 537, in distribution\r\n    return Distribution.from_name(distribution_name)\r\n  File \"/var/task/importlib_metadata/__init__.py\", line 205, in from_name\r\n    raise PackageNotFoundError(name)\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/299", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/299/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/299/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/299/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/299", "id": 592456377, "node_id": "MDU6SXNzdWU1OTI0NTYzNzc=", "number": 299, "title": "New PyPI release to include indent kwarg in encode", "user": {"login": "Liam-Deacon", "id": 3184694, "node_id": "MDQ6VXNlcjMxODQ2OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3184694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Liam-Deacon", "html_url": "https://github.com/Liam-Deacon", "followers_url": "https://api.github.com/users/Liam-Deacon/followers", "following_url": "https://api.github.com/users/Liam-Deacon/following{/other_user}", "gists_url": "https://api.github.com/users/Liam-Deacon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Liam-Deacon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Liam-Deacon/subscriptions", "organizations_url": "https://api.github.com/users/Liam-Deacon/orgs", "repos_url": "https://api.github.com/users/Liam-Deacon/repos", "events_url": "https://api.github.com/users/Liam-Deacon/events{/privacy}", "received_events_url": "https://api.github.com/users/Liam-Deacon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-02T08:37:33Z", "updated_at": "2020-04-13T07:59:14Z", "closed_at": "2020-04-13T07:59:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, it appears that the current PyPI release (version 1.3 from Feb 2020) does not include the latest changes to `encode` enabling the use of the `indent` keyword argument from #183.\r\n\r\nAs such, would it be possible to get a new release pushed so that this can be included and so that developers do not need to rely on using the latest master (which is subject to change) via `pip install git+https://github.com/jsonpickle/jsonpickle`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/298", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/298/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/298/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/298", "id": 588346368, "node_id": "MDU6SXNzdWU1ODgzNDYzNjg=", "number": 298, "title": "Tags should be configurable", "user": {"login": "MicheleMannino", "id": 2682498, "node_id": "MDQ6VXNlcjI2ODI0OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2682498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicheleMannino", "html_url": "https://github.com/MicheleMannino", "followers_url": "https://api.github.com/users/MicheleMannino/followers", "following_url": "https://api.github.com/users/MicheleMannino/following{/other_user}", "gists_url": "https://api.github.com/users/MicheleMannino/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicheleMannino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicheleMannino/subscriptions", "organizations_url": "https://api.github.com/users/MicheleMannino/orgs", "repos_url": "https://api.github.com/users/MicheleMannino/repos", "events_url": "https://api.github.com/users/MicheleMannino/events{/privacy}", "received_events_url": "https://api.github.com/users/MicheleMannino/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-26T11:23:05Z", "updated_at": "2020-04-10T23:20:03Z", "closed_at": "2020-04-10T23:19:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to configure internal tags (contained into jsonpickle/tags.py):\r\n\r\ne.g.\r\n\r\n`OBJECT = 'py/object'    # OBJECT = 'py_object'`\r\n`TYPE = 'py/type'    # TYPE = 'py_type'`\r\n\r\nbecause the **/** char could be a problem on deserializing again to other languages, such as Java.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/296", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/296/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/296/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/296/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/296", "id": 577269960, "node_id": "MDU6SXNzdWU1NzcyNjk5NjA=", "number": 296, "title": "Expecting value: Line 1 Column 62", "user": {"login": "Theelgirl", "id": 43764914, "node_id": "MDQ6VXNlcjQzNzY0OTE0", "avatar_url": "https://avatars1.githubusercontent.com/u/43764914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Theelgirl", "html_url": "https://github.com/Theelgirl", "followers_url": "https://api.github.com/users/Theelgirl/followers", "following_url": "https://api.github.com/users/Theelgirl/following{/other_user}", "gists_url": "https://api.github.com/users/Theelgirl/gists{/gist_id}", "starred_url": "https://api.github.com/users/Theelgirl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Theelgirl/subscriptions", "organizations_url": "https://api.github.com/users/Theelgirl/orgs", "repos_url": "https://api.github.com/users/Theelgirl/repos", "events_url": "https://api.github.com/users/Theelgirl/events{/privacy}", "received_events_url": "https://api.github.com/users/Theelgirl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-07T03:29:01Z", "updated_at": "2020-03-10T05:51:37Z", "closed_at": "2020-03-10T05:42:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "No matter what document I try to decode with jsonpickle.decode, I get this error:\r\n`json.decoder.JSONDecoderError: Expecting value: line 1 column 62 (char 61)`\r\nIt happens in a different place with each document, sometimes occurring in the middle of a key, sometimes in a value, sometimes after a comma, but always at column 62, char 61. I'd include a screenshot, but I don't know how, I've never used GitHub much before.\r\n\r\nPython 3.8.1\r\nTried on jsonpickle 0.9.5, 1.3, and the version cloned off GitHub.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/294", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/294/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/294/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/294/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/294", "id": 573939555, "node_id": "MDU6SXNzdWU1NzM5Mzk1NTU=", "number": 294, "title": "Security compared to pickle too hard to find", "user": {"login": "hartwork", "id": 1577132, "node_id": "MDQ6VXNlcjE1NzcxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1577132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartwork", "html_url": "https://github.com/hartwork", "followers_url": "https://api.github.com/users/hartwork/followers", "following_url": "https://api.github.com/users/hartwork/following{/other_user}", "gists_url": "https://api.github.com/users/hartwork/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartwork/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartwork/subscriptions", "organizations_url": "https://api.github.com/users/hartwork/orgs", "repos_url": "https://api.github.com/users/hartwork/repos", "events_url": "https://api.github.com/users/hartwork/events{/privacy}", "received_events_url": "https://api.github.com/users/hartwork/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-02T12:24:19Z", "updated_at": "2020-03-11T14:58:49Z", "closed_at": "2020-03-11T06:55:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nI tried to find an answer if jsonpickle has the same design security issues that pickle has. I found #179 eventually but it took a while and there is nothing like in the master readme, the place where I'd expect security implications as severe as that. Would you be up for adding a warning to some place clearly visible in the readme?\r\n\r\nThanks for your consideration, Sebastian", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/290", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/290/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/290/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/290", "id": 569514922, "node_id": "MDU6SXNzdWU1Njk1MTQ5MjI=", "number": 290, "title": "Implicit build dependency on setuptools", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-23T15:50:15Z", "updated_at": "2020-02-26T10:20:56Z", "closed_at": "2020-02-26T10:20:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This package has an implicit build dependency on setuptools, meaning it will fail to build in an environment where setuptools isn't pre-installed. This issue can be addressed by providing PEP 518 build requirements.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/288", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/288/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/288/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/288", "id": 565259833, "node_id": "MDU6SXNzdWU1NjUyNTk4MzM=", "number": 288, "title": "How to keep order when encode OrderedDict with unpicklable=False", "user": {"login": "y-mironov", "id": 18030141, "node_id": "MDQ6VXNlcjE4MDMwMTQx", "avatar_url": "https://avatars1.githubusercontent.com/u/18030141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y-mironov", "html_url": "https://github.com/y-mironov", "followers_url": "https://api.github.com/users/y-mironov/followers", "following_url": "https://api.github.com/users/y-mironov/following{/other_user}", "gists_url": "https://api.github.com/users/y-mironov/gists{/gist_id}", "starred_url": "https://api.github.com/users/y-mironov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y-mironov/subscriptions", "organizations_url": "https://api.github.com/users/y-mironov/orgs", "repos_url": "https://api.github.com/users/y-mironov/repos", "events_url": "https://api.github.com/users/y-mironov/events{/privacy}", "received_events_url": "https://api.github.com/users/y-mironov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-14T11:11:47Z", "updated_at": "2020-02-22T21:09:03Z", "closed_at": "2020-02-22T21:09:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try this:\r\n\r\n```python\r\nbottom = OrderedDict([('z', 1), ('a', 2)])\r\nmiddle = OrderedDict([('c', bottom)])\r\ntop = OrderedDict([('b', middle)])\r\nencoded = jsonpickle.encode(top, unpicklable=False)\r\nprint(encoded)\r\n```\r\n\r\nresult is\r\n`{\"b\": {\"c\": {\"a\": 2, \"z\": 1}}}`\r\n\r\nhow do i get this\r\n`{\"b\": {\"c\": {\"z\": 1, \"a\": 2}}}`\r\ninstead\r\n`{\"b\": {\"c\": {\"a\": 2, \"z\": 1}}}`\r\n?\r\nIs it possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/287", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/287/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/287/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/287", "id": 563334352, "node_id": "MDU6SXNzdWU1NjMzMzQzNTI=", "number": 287, "title": "TypeError: keys must be a string", "user": {"login": "Almenon", "id": 13080965, "node_id": "MDQ6VXNlcjEzMDgwOTY1", "avatar_url": "https://avatars0.githubusercontent.com/u/13080965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Almenon", "html_url": "https://github.com/Almenon", "followers_url": "https://api.github.com/users/Almenon/followers", "following_url": "https://api.github.com/users/Almenon/following{/other_user}", "gists_url": "https://api.github.com/users/Almenon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Almenon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Almenon/subscriptions", "organizations_url": "https://api.github.com/users/Almenon/orgs", "repos_url": "https://api.github.com/users/Almenon/repos", "events_url": "https://api.github.com/users/Almenon/events{/privacy}", "received_events_url": "https://api.github.com/users/Almenon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-11T16:43:27Z", "updated_at": "2020-02-15T03:12:52Z", "closed_at": "2020-02-14T06:50:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Jsonpickle fails when trying to encode a series with a Hierarchical index\r\n\r\ncallstack: https://i.imgur.com/SswLYZW.png\r\nvariables: https://i.imgur.com/ApMsT24.png\r\n\r\nReproduction code:\r\n```python\r\nimport jsonpickle\r\n\r\nimport pandas as pd\r\nlets = ['A', 'B', 'C']\r\nnums = ['1', '2', '3']\r\nmidx = pd.MultiIndex.from_product([lets, nums])\r\nunits = pd.Series(0, index=midx)\r\n\r\nimport jsonpickle.ext.pandas as jsonpickle_pandas\r\njsonpickle_pandas.register_handlers()\r\n\r\njsonpickle.encode(units)\r\n```\r\n\r\nresult:\r\n\r\n```\r\n>>> jsonpickle.encode(units)\r\nC:\\dev\\AREPL-backend\\python\\jsonpickle\\ext\\pandas.py:100: FutureWarning: The pandas.np module is deprecated and will be removed from pandas in a future version. Import numpy directly instead\r\n  dtypes = {k: str(pd.np.dtype(type(obj[k]))) for k in obj.keys()}\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\dev\\AREPL-backend\\python\\jsonpickle\\pickler.py\", line 101, in encode\r\n    return backend.encode(context.flatten(value, reset=reset))\r\n  File \"C:\\dev\\AREPL-backend\\python\\jsonpickle\\backend.py\", line 169, in encode\r\n    raise e\r\n  File \"C:\\dev\\AREPL-backend\\python\\jsonpickle\\backend.py\", line 166, in encode\r\n    return self.backend_encode(name, obj)\r\n  File \"C:\\dev\\AREPL-backend\\python\\jsonpickle\\backend.py\", line 177, in backend_encode\r\n    return self._encoders[name](*encoder_args, **encoder_kwargs)\r\n  File \"C:\\Users\\almenon\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\json\\__init__.py\", line 234, in dumps\r\n    return cls(\r\n  File \"C:\\Users\\almenon\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\json\\encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"C:\\Users\\almenon\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\json\\encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\nTypeError: keys must be str, int, float, bool or None, not tuple\r\n```\r\n\r\nNote that if you don't register the pandas handler jsonpickle will work correctly. Therefore I'm assuming this is a bug with the pandas handler.\r\n\r\nAlso note non-hierarchial indexes work fine. For example, if your replaced the `units` line with `units = pd.Series(0, index=[1,2,3])` you would not get an error.\r\n\r\nThanks to @mccannjb for reporting", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/286", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/286/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/286/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/286", "id": 555662442, "node_id": "MDU6SXNzdWU1NTU2NjI0NDI=", "number": 286, "title": "Same Enum value as key _and_ value in dict may corrupt data when round-tripping", "user": {"login": "torbjorv", "id": 6941838, "node_id": "MDQ6VXNlcjY5NDE4Mzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6941838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/torbjorv", "html_url": "https://github.com/torbjorv", "followers_url": "https://api.github.com/users/torbjorv/followers", "following_url": "https://api.github.com/users/torbjorv/following{/other_user}", "gists_url": "https://api.github.com/users/torbjorv/gists{/gist_id}", "starred_url": "https://api.github.com/users/torbjorv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/torbjorv/subscriptions", "organizations_url": "https://api.github.com/users/torbjorv/orgs", "repos_url": "https://api.github.com/users/torbjorv/repos", "events_url": "https://api.github.com/users/torbjorv/events{/privacy}", "received_events_url": "https://api.github.com/users/torbjorv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-27T15:47:10Z", "updated_at": "2020-02-19T14:40:14Z", "closed_at": "2020-02-14T08:49:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version: Python 3.7.1, jsonpickle 1.2\r\n\r\nThe below code decodes the second MyEnum.BLUE (the value, not the key) as an instance of MyClass. I've played with mixin str on the enum, keys=False and the issue may go away, but by reorganizing the structure (or making it more complex) I can consistently reproduce again. Below is the simplest reproduce I could come up with.\r\n\r\n```python\r\nclass MyClass:\r\n    pass\r\n\r\n\r\nclass MyEnum(Enum):\r\n    BLUE = 'blue'\r\n\r\n\r\nclass TestJsonPickle(unittest.TestCase):\r\n\r\n    def test_bug(self):\r\n\r\n        expected = {\r\n            'first': MyClass(),\r\n            MyEnum.BLUE: MyEnum.BLUE\r\n        }\r\n\r\n        actual = jsonpickle.decode(jsonpickle.encode(expected, keys=True), keys=True)\r\n\r\n        print(expected)\r\n        print(actual)\r\n```\r\n\r\nexpected:\r\n```\r\n{ \r\n    'first': <test_jsonpickle.MyClass object at 0x101e63400>,\r\n    <MyEnum.BLUE: 'blue'>: <MyEnum.BLUE: 'blue'>\r\n}\r\n```\r\n\r\nactual:\r\n```\r\n{ \r\n    'first': <test_jsonpickle.MyClass object at 0x101eb57f0>,\r\n    <MyEnum.BLUE: 'blue'>: <test_jsonpickle.MyClass object at 0x101eb57f0>\r\n}\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/284", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/284/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/284/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/284/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/284", "id": 546448677, "node_id": "MDU6SXNzdWU1NDY0NDg2Nzc=", "number": 284, "title": "jsonpickle goes out-of-memory while trying to de-serialize an object that wraps a huge JSON stream", "user": {"login": "holmessherlock", "id": 8354664, "node_id": "MDQ6VXNlcjgzNTQ2NjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/8354664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/holmessherlock", "html_url": "https://github.com/holmessherlock", "followers_url": "https://api.github.com/users/holmessherlock/followers", "following_url": "https://api.github.com/users/holmessherlock/following{/other_user}", "gists_url": "https://api.github.com/users/holmessherlock/gists{/gist_id}", "starred_url": "https://api.github.com/users/holmessherlock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/holmessherlock/subscriptions", "organizations_url": "https://api.github.com/users/holmessherlock/orgs", "repos_url": "https://api.github.com/users/holmessherlock/repos", "events_url": "https://api.github.com/users/holmessherlock/events{/privacy}", "received_events_url": "https://api.github.com/users/holmessherlock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-07T18:52:14Z", "updated_at": "2020-02-22T21:30:51Z", "closed_at": "2020-02-22T21:30:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a large JSON string is wrapped in an object instance, for some reason `jsonpickle` east up a lot of memory while de-serializing the object and eventually goes out-of-memory. Just to give an idea, if the JSON stream is ~3GB in size, `jsonpickle` goes out of memory (`MemoryError`) on a 32GB Ubuntu 18.04 system. Looks like it tries to parse the JSON stream while it doesn't need to, and that causes the memory explosion. Here is a minimal example that triggers this issue.\r\n\r\n```\r\nimport jsonpickle\r\n\r\n# A large input file in JSON format\r\nINPUT = 'a_huge_json_file.json'\r\n\r\n# Wrapper class\r\nclass MyObject:\r\n    def __init__(self, data):\r\n        self.data = data\r\n\r\nif __name__ == '__main__':\r\n    # Read the JSON input\r\n    with open(INPUT, 'rb') as fp:\r\n        data = fp.read()\r\n\r\n    # Create an instance of the object that wraps the JSON stream\r\n    obj = MyObject(data)\r\n\r\n    # Serialize the instance\r\n    obj_dump = jsonpickle.encode(obj)\r\n\r\n    # De-serialize the instance\r\n    obj_load = jsonpickle.decode(obj_dump)\r\n    \r\n    with open(output.json', 'wb') as fp:\r\n        fp.write(obj_load.data)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/282", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/282/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/282/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/282", "id": 534860598, "node_id": "MDU6SXNzdWU1MzQ4NjA1OTg=", "number": 282, "title": "roundtrip error of defaultdict with object and with nested", "user": {"login": "sangjin-park", "id": 8907595, "node_id": "MDQ6VXNlcjg5MDc1OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/8907595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sangjin-park", "html_url": "https://github.com/sangjin-park", "followers_url": "https://api.github.com/users/sangjin-park/followers", "following_url": "https://api.github.com/users/sangjin-park/following{/other_user}", "gists_url": "https://api.github.com/users/sangjin-park/gists{/gist_id}", "starred_url": "https://api.github.com/users/sangjin-park/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sangjin-park/subscriptions", "organizations_url": "https://api.github.com/users/sangjin-park/orgs", "repos_url": "https://api.github.com/users/sangjin-park/repos", "events_url": "https://api.github.com/users/sangjin-park/events{/privacy}", "received_events_url": "https://api.github.com/users/sangjin-park/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-09T11:16:16Z", "updated_at": "2019-12-12T11:52:39Z", "closed_at": "2019-12-12T11:52:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nfrom collections import defaultdict\r\n\r\nimport traceback\r\n\r\nimport jsonpickle\r\n\r\nclass Thing:\r\n  pass\r\n\r\nthing = Thing()\r\ndefdict = defaultdict(lambda: 0)\r\nobj = [defdict, thing, thing]\r\ntry:\r\n  encoded = jsonpickle.encode(obj, keys=True)\r\n  decoded = jsonpickle.decode(encoded, keys=True)\r\nexcept:\r\n  traceback.print_exc()\r\n\r\nprint()\r\n\r\ndefault_factory = lambda: 0\r\ndefdict = defaultdict(default_factory, {'a': defaultdict(default_factory)})\r\ntry:\r\n  encoded = jsonpickle.encode(defdict, keys=True)\r\n  decoded = jsonpickle.decode(encoded, keys=True)\r\nexcept:\r\n  traceback.print_exc()\r\n\r\n```\r\n\r\nproduces\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/kaien/git/jsonpickle/tests/defaultdict_check.py\", line 15, in <module>\r\n    decoded = jsonpickle.decode(encoded, keys=True)\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 41, in decode\r\n    return context.restore(data, reset=reset, classes=classes)\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 152, in restore\r\n    self._swap_proxies()\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 170, in _swap_proxies\r\n    method(obj, attr, proxy)\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 105, in _obj_setvalue\r\n    obj[idx] = proxy.get()\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 97, in get\r\n    return self._objs[self._index]\r\nIndexError: list index out of range\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/kaien/git/jsonpickle/tests/defaultdict_check.py\", line 25, in <module>\r\n    decoded = jsonpickle.decode(encoded, keys=True)\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 41, in decode\r\n    return context.restore(data, reset=reset, classes=classes)\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 150, in restore\r\n    value = self._restore(obj)\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 207, in _restore\r\n    return restore(obj)\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 323, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 388, in _restore_object_instance\r\n    instance.default_factory = instance.default_factory.get()\r\n  File \"/Users/kaien/git/jsonpickle/jsonpickle/unpickler.py\", line 97, in get\r\n    return self._objs[self._index]\r\nIndexError: list index out of range\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/281", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/281/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/281/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/281/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/281", "id": 533482627, "node_id": "MDU6SXNzdWU1MzM0ODI2Mjc=", "number": 281, "title": "Failed test with python 3.8: test_thing_with_fd, test_list_with_fd, test_dict_with_fd", "user": {"login": "mcepl", "id": 198999, "node_id": "MDQ6VXNlcjE5ODk5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/198999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcepl", "html_url": "https://github.com/mcepl", "followers_url": "https://api.github.com/users/mcepl/followers", "following_url": "https://api.github.com/users/mcepl/following{/other_user}", "gists_url": "https://api.github.com/users/mcepl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcepl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcepl/subscriptions", "organizations_url": "https://api.github.com/users/mcepl/orgs", "repos_url": "https://api.github.com/users/mcepl/repos", "events_url": "https://api.github.com/users/mcepl/events{/privacy}", "received_events_url": "https://api.github.com/users/mcepl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-05T17:11:10Z", "updated_at": "2020-03-06T07:35:23Z", "closed_at": "2020-03-06T07:35:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "When packaging update for this project with Python 3.8 on openSUSE/Factory, I got this failed tests:\r\n\r\n```\r\n[   11s] =================================== FAILURES ===================================\r\n[   11s] __________________ AdvancedObjectsTestCase.test_dict_with_fd ___________________\r\n[   11s]\r\n[   11s] self = <object_test.AdvancedObjectsTestCase testMethod=test_dict_with_fd>\r\n[   11s]\r\n[   11s]     def test_dict_with_fd(self):\r\n[   11s]         fd = open(__file__, 'r')\r\n[   11s]         fd.close()\r\n[   11s]         obj = {'fd': fd}\r\n[   11s]         jsonstr = jsonpickle.encode(obj)\r\n[   11s]         newobj = jsonpickle.decode(jsonstr)\r\n[   11s] >       self.assertEqual(None, newobj['fd'])\r\n[   11s] E       AssertionError: None != <_io.TextIOWrapper object at 0x7f13d5ffa860>\r\n[   11s]\r\n[   11s] tests/object_test.py:405: AssertionError\r\n[   11s] __________________ AdvancedObjectsTestCase.test_list_with_fd ___________________\r\n[   11s]\r\n[   11s] self = <object_test.AdvancedObjectsTestCase testMethod=test_list_with_fd>\r\n[   11s]\r\n[   11s]     def test_list_with_fd(self):\r\n[   11s]         fd = open(__file__, 'r')\r\n[   11s]         fd.close()\r\n[   11s]         obj = [fd]\r\n[   11s]         jsonstr = jsonpickle.encode(obj)\r\n[   11s]         newobj = jsonpickle.decode(jsonstr)\r\n[   11s] >       self.assertEqual([None], newobj)\r\n[   11s]\r\n[   11s] tests/object_test.py:389:\r\n[   11s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n[   11s] /usr/lib64/python3.8/pprint.py:58: in pformat\r\n[   11s]     return PrettyPrinter(indent=indent, width=width, depth=depth,\r\n[   11s] /usr/lib64/python3.8/pprint.py:153: in pformat\r\n[   11s]     self._format(object, sio, 0, 0, {}, 0)\r\n[   11s] /usr/lib64/python3.8/pprint.py:170: in _format\r\n[   11s]     rep = self._repr(object, context, level)\r\n[   11s] /usr/lib64/python3.8/pprint.py:404: in _repr\r\n[   11s]     repr, readable, recursive = self.format(object, context.copy(),\r\n[   11s] /usr/lib64/python3.8/pprint.py:417: in format\r\n[   11s]     return _safe_repr(object, context, maxlevels, level, self._sort_dicts)\r\n[   11s] /usr/lib64/python3.8/pprint.py:560: in _safe_repr\r\n[   11s]     orepr, oreadable, orecur = _safe_repr(o, context, maxlevels, level, sort_dicts)\r\n[   11s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n[   11s]\r\n[   11s] object = <[ValueError(\"I/O operation on uninitialized object\") raised in repr()] TextIOWrapper object at 0x7f13d5ffa930>\r\n[   11s] context = {139723169830656: 1}, maxlevels = None, level = 1, sort_dicts = True\r\n[   11s]\r\n[   11s]     def _safe_repr(object, context, maxlevels, level, sort_dicts):\r\n[   11s]         typ = type(object)\r\n[   11s]         if typ in _builtin_scalars:\r\n[   11s]             return repr(object), True, False\r\n[   11s]\r\n[   11s]         r = getattr(typ, \"__repr__\", None)\r\n[   11s]         if issubclass(typ, dict) and r is dict.__repr__:\r\n[   11s]             if not object:\r\n[   11s]                 return \"{}\", True, False\r\n[   11s]             objid = id(object)\r\n[   11s]             if maxlevels and level >= maxlevels:\r\n[   11s]                 return \"{...}\", False, objid in context\r\n[   11s]             if objid in context:\r\n[   11s]                 return _recursion(object), False, True\r\n[   11s]             context[objid] = 1\r\n[   11s]             readable = True\r\n[   11s]             recursive = False\r\n[   11s]             components = []\r\n[   11s]             append = components.append\r\n[   11s]             level += 1\r\n[   11s]             if sort_dicts:\r\n[   11s]                 items = sorted(object.items(), key=_safe_tuple)\r\n[   11s]             else:\r\n[   11s]                 items = object.items()\r\n[   11s]             for k, v in items:\r\n[   11s]                 krepr, kreadable, krecur = _safe_repr(k, context, maxlevels, level, sort_dicts)\r\n[   11s]                 vrepr, vreadable, vrecur = _safe_repr(v, context, maxlevels, level, sort_dicts)\r\n[   11s]                 append(\"%s: %s\" % (krepr, vrepr))\r\n[   11s]                 readable = readable and kreadable and vreadable\r\n[   11s]                 if krecur or vrecur:\r\n[   11s]                     recursive = True\r\n[   11s]             del context[objid]\r\n[   11s]             return \"{%s}\" % \", \".join(components), readable, recursive\r\n[   11s]\r\n[   11s]         if (issubclass(typ, list) and r is list.__repr__) or \\\r\n[   11s]            (issubclass(typ, tuple) and r is tuple.__repr__):\r\n[   11s]             if issubclass(typ, list):\r\n[   11s]                 if not object:\r\n[   11s]                     return \"[]\", True, False\r\n[   11s]                 format = \"[%s]\"\r\n[   11s]             elif len(object) == 1:\r\n[   11s]                 format = \"(%s,)\"\r\n[   11s]             else:\r\n[   11s]                 if not object:\r\n[   11s]                     return \"()\", True, False\r\n[   11s]                 format = \"(%s)\"\r\n[   11s]             objid = id(object)\r\n[   11s]             if maxlevels and level >= maxlevels:\r\n[   11s]                 return format % \"...\", False, objid in context\r\n[   11s]             if objid in context:\r\n[   11s]                 return _recursion(object), False, True\r\n[   11s]             context[objid] = 1\r\n[   11s]             readable = True\r\n[   11s]             recursive = False\r\n[   11s]             components = []\r\n[   11s]             append = components.append\r\n[   11s]             level += 1\r\n[   11s]             for o in object:\r\n[   11s]                 orepr, oreadable, orecur = _safe_repr(o, context, maxlevels, level, sort_dicts)\r\n[   11s]                 append(orepr)\r\n[   11s]                 if not oreadable:\r\n[   11s]                     readable = False\r\n[   11s]                 if orecur:\r\n[   11s]                     recursive = True\r\n[   11s]             del context[objid]\r\n[   11s]             return format % \", \".join(components), readable, recursive\r\n[   11s]\r\n[   11s] >       rep = repr(object)\r\n[   11s] E       ValueError: I/O operation on uninitialized object\r\n[   11s]\r\n[   11s] /usr/lib64/python3.8/pprint.py:569: ValueError\r\n[   11s] __________________ AdvancedObjectsTestCase.test_thing_with_fd __________________\r\n[   11s]\r\n[   11s] self = <object_test.AdvancedObjectsTestCase testMethod=test_thing_with_fd>\r\n[   11s]\r\n[   11s]     def test_thing_with_fd(self):\r\n[   11s]         fd = open(__file__, 'r')\r\n[   11s]         fd.close()\r\n[   11s]         obj = Thing(fd)\r\n[   11s]         jsonstr = jsonpickle.encode(obj)\r\n[   11s]         newobj = jsonpickle.decode(jsonstr)\r\n[   11s] >       self.assertEqual(None, newobj.name)\r\n[   11s] E       AssertionError: None != <_io.TextIOWrapper object at 0x7f13d5ffad40>\r\n[   11s]\r\n[   11s] tests/object_test.py:397: AssertionError\r\n[   11s] =============================== warnings summary ===============================\r\n[   11s] tests/numpy_test.py::NumpyTestCase::test_dtype_roundtrip\r\n[   11s]   /home/abuild/rpmbuild/BUILD/jsonpickle-1.2/tests/numpy_test.py:55: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will\r\nbe understood as (type, (1,)) / '(1,)type'.\r\n[   11s]     np.dtype('1i4', align=True),\r\n[   11s]\r\n[   11s] tests/numpy_test.py::NumpyTestCase::test_ndarray_roundtrip\r\n[   11s]   /home/abuild/rpmbuild/BUILD/jsonpickle-1.2/jsonpickle/ext/numpy.py:298: UserWarning: ndarray is defined by reference to an object we do not know how to serialize. A deep copy is seriali\r\nzed instead, breaking memory aliasing.\r\n[   11s]     warnings.warn(msg)\r\n[   11s]\r\n[   11s] -- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n[   11s] ============ 3 failed, 240 passed, 39 skipped, 2 warnings in 1.29s =============\r\n```\r\n\r\n[Complete build logs with all details](https://github.com/jsonpickle/jsonpickle/files/3928169/_log.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/280", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/280/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/280/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/280/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/280", "id": 518561763, "node_id": "MDU6SXNzdWU1MTg1NjE3NjM=", "number": 280, "title": "shuffled values when deserialising :(", "user": {"login": "e3rd", "id": 6942231, "node_id": "MDQ6VXNlcjY5NDIyMzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6942231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/e3rd", "html_url": "https://github.com/e3rd", "followers_url": "https://api.github.com/users/e3rd/followers", "following_url": "https://api.github.com/users/e3rd/following{/other_user}", "gists_url": "https://api.github.com/users/e3rd/gists{/gist_id}", "starred_url": "https://api.github.com/users/e3rd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/e3rd/subscriptions", "organizations_url": "https://api.github.com/users/e3rd/orgs", "repos_url": "https://api.github.com/users/e3rd/repos", "events_url": "https://api.github.com/users/e3rd/events{/privacy}", "received_events_url": "https://api.github.com/users/e3rd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-06T15:52:36Z", "updated_at": "2020-02-23T18:33:30Z", "closed_at": "2020-02-22T21:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys,\r\nthanks for this awesome tool.  \r\n\r\nVersion: Python 3.7.3, jsonpickle 1.2\r\n\r\nI have found a serious bug that shuffles keys and values. It took me about 12 hours to spot the error and make a simple and reproducible demonstration. Run the code below and see the output.\r\n\r\nObject pickled with `jsonpickle` genererated this output:\r\n```python3\r\nimport jsonpickle\r\n\r\nclass Foo:  # formerly pickled object\r\n    def __setstate__(self, state):\r\n        self.__dict__ = state\r\n\r\n\r\nclass Bar:  # internal object used in Foo\r\n    def __setstate__(self, state):\r\n        self.state = state\r\n\r\n    def __str__(self):\r\n        return str(self.state)\r\n\r\n# s is a json dump generated by jsonpickle\r\ns = r\"\"\"{\r\n  \"py/object\": \"__main__.Foo\",\r\n  \"py/state\": {\r\n    \"ref_dict\": {\r\n      \"json://{\\\"py/object\\\": \\\"__main__.Bar\\\", \\\"py/state\\\": 10}\": {\r\n        \"py/tuple\": []\r\n      },\r\n      \"json://{\\\"py/object\\\": \\\"__main__.Bar\\\", \\\"py/state\\\": \\\"wrong ID 2\\\"}\": {\r\n        \"py/tuple\": []\r\n      }\r\n    },\r\n    \"my_dict\": {\r\n      \"pointer-to-1\": {\"py/id\": 1},\r\n      \"pointer-to-2\": {\"py/id\": 2}\r\n    }\r\n  }\r\n}\"\"\"\r\n\r\n\r\nprint(jsonpickle.decode(s, keys=True).my_dict[\"pointer-to-1\"]) \r\n# should have printed \"10\"\r\n# prints out \"wrong ID 2\" instead\r\n```\r\n\r\nIt seems to me there is an internal sorting feature broken somewhere under the hood when referencing a `py/id` defined in a dict key.\r\nWe have seen that from `int(10)`, `\"wrong ID 2\"`, the latter was identified as `py/id 1`. Let's see a table of values, we mark as bold the one identified as `py/id 1` (whether it should be `py/id 1 or 2`) instead.\r\n\r\npy/id 1 | py/id 2\r\n------------ | -------------\r\nint(10) | **wrong ID 2**\r\nint(10) | **a**\r\n**10** | a\r\nz | **a**\r\n**a** | z\r\n**110** | 111\r\n110 | **109**\r\n**110** | 99\r\n**int(110)** | int(111)\r\nint(110) | **int(109)**\r\n**int(110)** | int(99)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/279", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/279/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/279/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/279/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/279", "id": 512967261, "node_id": "MDU6SXNzdWU1MTI5NjcyNjE=", "number": 279, "title": "sphinx config: cast filter to a list", "user": {"login": "sandrotosi", "id": 346648, "node_id": "MDQ6VXNlcjM0NjY0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/346648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandrotosi", "html_url": "https://github.com/sandrotosi", "followers_url": "https://api.github.com/users/sandrotosi/followers", "following_url": "https://api.github.com/users/sandrotosi/following{/other_user}", "gists_url": "https://api.github.com/users/sandrotosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandrotosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandrotosi/subscriptions", "organizations_url": "https://api.github.com/users/sandrotosi/orgs", "repos_url": "https://api.github.com/users/sandrotosi/repos", "events_url": "https://api.github.com/users/sandrotosi/events{/privacy}", "received_events_url": "https://api.github.com/users/sandrotosi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-27T13:35:12Z", "updated_at": "2020-02-22T21:43:38Z", "closed_at": "2020-02-22T21:43:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "py3k doesnt allow anymore to concatenate lists and filter objects:\r\n\r\n```\r\nException occurred:\r\n  File \"/usr/lib/python3/dist-packages/sphinx/builders/html.py\", line 502, in get_asset_paths\r\n    return self.config.html_extra_path + self.config.html_static_path\r\nTypeError: can only concatenate list (not \"filter\") to list\r\n```\r\n\r\nthis patch is applied to the debian packaging so that we can build the documentation with py3k sphinx:\r\n\r\n```\r\n--- a/docs/source/conf.py\r\n+++ b/docs/source/conf.py\r\n@@ -134,7 +134,7 @@ html_theme = 'default'\r\n # Add any paths that contain custom static files (such as style sheets) here,\r\n # relative to this directory. They are copied after the builtin static files,\r\n # so a file named \"default.css\" will overwrite the builtin \"default.css\".\r\n-html_static_path = filter(os.path.exists, ['_static'])\r\n+html_static_path = list(filter(os.path.exists, ['_static']))\r\n \r\n # If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\r\n # using the given strftime format.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/278", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/278/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/278/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/278", "id": 503279790, "node_id": "MDU6SXNzdWU1MDMyNzk3OTA=", "number": 278, "title": "order of dicts coming from jsonpickle.dumps in Python 3.7.4 not preserved", "user": {"login": "mtopinka", "id": 5340017, "node_id": "MDQ6VXNlcjUzNDAwMTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5340017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtopinka", "html_url": "https://github.com/mtopinka", "followers_url": "https://api.github.com/users/mtopinka/followers", "following_url": "https://api.github.com/users/mtopinka/following{/other_user}", "gists_url": "https://api.github.com/users/mtopinka/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtopinka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtopinka/subscriptions", "organizations_url": "https://api.github.com/users/mtopinka/orgs", "repos_url": "https://api.github.com/users/mtopinka/repos", "events_url": "https://api.github.com/users/mtopinka/events{/privacy}", "received_events_url": "https://api.github.com/users/mtopinka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-07T07:33:56Z", "updated_at": "2019-10-08T01:30:20Z", "closed_at": "2019-10-07T07:59:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi- thank you for putting out an extremely useful utility.  The problem I'm having is pretty much contained in the title.  I am using jsonpickle 1.2, Python 3.7.4.   Here is the code that will reproduce the bug:\r\n\r\n```\r\nimport jsonpickle\r\n\r\ndict_ab = {\"a\": 1, \"b\": 2}\r\ndict_ba = {\"b\": 1, \"a\": 2}\r\nprint(\"print: (preserves dict order)\")\r\nprint(dict_ab)\r\nprint(dict_ba)\r\nprint(\"\\njson.dumps: (preserves dict order)\")\r\nprint(json.dumps(dict_ab))\r\nprint(json.dumps(dict_ba))\r\nprint(\"\\njsonpickle.dumps: (doesn't preserve dict order)\")\r\nprint(jsonpickle.dumps(dict_ab))\r\nprint(jsonpickle.dumps(dict_ba))\r\n```\r\n\r\nand here is the output I get:\r\n\r\n```\r\nprint: (preserves dict order)\r\n{'a': 1, 'b': 2}\r\n{'b': 1, 'a': 2}\r\n\r\njson.dumps: (preserves dict order)\r\n{\"a\": 1, \"b\": 2}\r\n{\"b\": 1, \"a\": 2}\r\n\r\njsonpickle.dumps: (doesn't preserve dict order)\r\n{\"a\": 1, \"b\": 2}\r\n{\"a\": 2, \"b\": 1}\r\n\r\n```\r\n\r\n\r\nAm I doing anything stupid or not understanding anything here?  I've tried setting sort_keys to True or False with no effect.   Thanks in advance.  -Mark", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/277", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/277/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/277/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/277", "id": 490849046, "node_id": "MDU6SXNzdWU0OTA4NDkwNDY=", "number": 277, "title": "ModuleNotFoundError: No module named 'jsonpickle' when running tests", "user": {"login": "Almenon", "id": 13080965, "node_id": "MDQ6VXNlcjEzMDgwOTY1", "avatar_url": "https://avatars0.githubusercontent.com/u/13080965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Almenon", "html_url": "https://github.com/Almenon", "followers_url": "https://api.github.com/users/Almenon/followers", "following_url": "https://api.github.com/users/Almenon/following{/other_user}", "gists_url": "https://api.github.com/users/Almenon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Almenon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Almenon/subscriptions", "organizations_url": "https://api.github.com/users/Almenon/orgs", "repos_url": "https://api.github.com/users/Almenon/repos", "events_url": "https://api.github.com/users/Almenon/events{/privacy}", "received_events_url": "https://api.github.com/users/Almenon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-09T02:40:35Z", "updated_at": "2019-09-15T23:12:44Z", "closed_at": "2019-09-10T02:56:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The folder structure is like this:\r\njsonpickle\r\n \\- \\_\\_init\\_\\_.py\r\n \\- source code\r\ntests\r\n \\- object_test.py\r\n \\- other tests...\r\n\r\nobject_test tries to import jsonpickle but it is in the parent directory, not the current directory, so it doesn't find it. How are you able to run the tests?\r\n\r\nI was able to run the tests myself before but I forgot how I did it >_<", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/271", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/271/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/271/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/271", "id": 472345681, "node_id": "MDU6SXNzdWU0NzIzNDU2ODE=", "number": 271, "title": "limit precision of floats", "user": {"login": "schwittlick", "id": 1453951, "node_id": "MDQ6VXNlcjE0NTM5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1453951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schwittlick", "html_url": "https://github.com/schwittlick", "followers_url": "https://api.github.com/users/schwittlick/followers", "following_url": "https://api.github.com/users/schwittlick/following{/other_user}", "gists_url": "https://api.github.com/users/schwittlick/gists{/gist_id}", "starred_url": "https://api.github.com/users/schwittlick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schwittlick/subscriptions", "organizations_url": "https://api.github.com/users/schwittlick/orgs", "repos_url": "https://api.github.com/users/schwittlick/repos", "events_url": "https://api.github.com/users/schwittlick/events{/privacy}", "received_events_url": "https://api.github.com/users/schwittlick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-24T15:22:01Z", "updated_at": "2020-02-22T21:45:22Z", "closed_at": "2020-02-22T21:45:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am wondering whether there is a way to limit the precision of jsonpickle'd floats and doubles. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/266", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/266/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/266/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/266", "id": 458231973, "node_id": "MDU6SXNzdWU0NTgyMzE5NzM=", "number": 266, "title": "Issue decoding Pandas dataframe", "user": {"login": "misantroop", "id": 23288150, "node_id": "MDQ6VXNlcjIzMjg4MTUw", "avatar_url": "https://avatars1.githubusercontent.com/u/23288150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/misantroop", "html_url": "https://github.com/misantroop", "followers_url": "https://api.github.com/users/misantroop/followers", "following_url": "https://api.github.com/users/misantroop/following{/other_user}", "gists_url": "https://api.github.com/users/misantroop/gists{/gist_id}", "starred_url": "https://api.github.com/users/misantroop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/misantroop/subscriptions", "organizations_url": "https://api.github.com/users/misantroop/orgs", "repos_url": "https://api.github.com/users/misantroop/repos", "events_url": "https://api.github.com/users/misantroop/events{/privacy}", "received_events_url": "https://api.github.com/users/misantroop/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-19T21:20:03Z", "updated_at": "2020-02-24T01:33:01Z", "closed_at": "2020-02-22T14:56:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm unable to reproduce a short code sample at the moment. \r\nFirst part is the output from Pandas.\r\n\r\n```\r\n[Index(['contractAmbig', 'contractComboLegs', 'contractComboLegsDescrip',\r\n       'contractConId', 'contractCurrency', 'contractDeltaNeutralContract',\r\n       'contractExchange', 'contractIncludeExpired',\r\n       'contractLastTradeDateOrContractMonth', 'contractLocalSymbol',\r\n       ...\r\n       'orderTrailingPercent', 'orderTransmit', 'orderTriggerMethod',\r\n       'orderTriggerPrice', 'orderVolatility', 'orderVolatilityType',\r\n       'orderWhatIf', 'sig', 'status', 'validate'],\r\n      dtype='object', length=147), 'contractAmbig']\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\WRK\\trd.py\", line 32, in <module>\r\n    trd = pickleNQ.take('sbqNq')\r\n  File \"C:\\WRK\\ipo.py\", line 359, in take\r\n    return jsonpickle.decode(self.fern.decrypt(jar.read()))\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 41, in decode\r\n    return context.restore(data, reset=reset, classes=classes)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 150, in restore\r\n    value = self._restore(obj)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 207, in _restore\r\n    return restore(obj)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 323, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 390, in _restore_object_instance\r\n    return self._restore_object_instance_variables(obj, instance)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 440, in _restore_object_instance_variables\r\n    instance = self._restore_from_dict(obj, instance)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 408, in _restore_from_dict\r\n    value = self._restore(v)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 207, in _restore\r\n    return restore(obj)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 323, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 390, in _restore_object_instance\r\n    return self._restore_object_instance_variables(obj, instance)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 452, in _restore_object_instance_variables\r\n    instance = self._restore_state(obj, instance)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 457, in _restore_state\r\n    state = self._restore(obj[tags.STATE])\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 207, in _restore\r\n    return restore(obj)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 514, in _restore_dict\r\n    data[k] = self._restore(v)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 207, in _restore\r\n    return restore(obj)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 323, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 390, in _restore_object_instance\r\n    return self._restore_object_instance_variables(obj, instance)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 452, in _restore_object_instance_variables\r\n    instance = self._restore_state(obj, instance)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 457, in _restore_state\r\n    state = self._restore(obj[tags.STATE])\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 207, in _restore\r\n    return restore(obj)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 499, in _restore_tuple\r\n    return tuple([self._restore(v) for v in obj[tags.TUPLE]])\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 499, in <listcomp>\r\n    return tuple([self._restore(v) for v in obj[tags.TUPLE]])\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 207, in _restore\r\n    return restore(obj)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 487, in _restore_list\r\n    children = [self._restore(v) for v in obj]\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 487, in <listcomp>\r\n    children = [self._restore(v) for v in obj]\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 207, in _restore\r\n    return restore(obj)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 323, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 390, in _restore_object_instance\r\n    return self._restore_object_instance_variables(obj, instance)\r\n  File \"C:\\Python\\lib\\site-packages\\jsonpickle\\unpickler.py\", line 446, in _restore_object_instance_variables\r\n    instance.append(self._restore(v))\r\n  File \"C:\\Python\\lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 4012, in append\r\n    raise TypeError('all inputs must be Index')\r\nTypeError: all inputs must be Index\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/264", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/264/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/264/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/264", "id": 447650058, "node_id": "MDU6SXNzdWU0NDc2NTAwNTg=", "number": 264, "title": "Crash on circular reference between objects", "user": {"login": "rht", "id": 395821, "node_id": "MDQ6VXNlcjM5NTgyMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/395821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rht", "html_url": "https://github.com/rht", "followers_url": "https://api.github.com/users/rht/followers", "following_url": "https://api.github.com/users/rht/following{/other_user}", "gists_url": "https://api.github.com/users/rht/gists{/gist_id}", "starred_url": "https://api.github.com/users/rht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rht/subscriptions", "organizations_url": "https://api.github.com/users/rht/orgs", "repos_url": "https://api.github.com/users/rht/repos", "events_url": "https://api.github.com/users/rht/events{/privacy}", "received_events_url": "https://api.github.com/users/rht/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1250952969, "node_id": "MDU6TGFiZWwxMjUwOTUyOTY5", "url": "https://api.github.com/repos/jsonpickle/jsonpickle/labels/testcase-needed", "name": "testcase-needed", "color": "dd3333", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-23T13:02:39Z", "updated_at": "2019-05-24T20:48:07Z", "closed_at": "2019-05-24T06:30:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Observed at https://github.com/projectmesa/mesa/pull/662#issuecomment-495095834.\r\nI tried to reproduce with a minimal version with\r\n```\r\nclass Thing(object): \r\n     def __init__(self, name, x): \r\n         self.name = name \r\n         self.x = x\r\na = Thing(None, 1)\r\nb = Thing(a, 2)\r\na.name = b\r\nfrozen = jsonpickle.encode(a) \r\nfrozen2 = jsonpickle.encode(b)\r\n```\r\nbut this didn't crash. Perhaps @Corvince could explain the bug better.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/259", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/259/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/259/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/259", "id": 435420526, "node_id": "MDU6SXNzdWU0MzU0MjA1MjY=", "number": 259, "title": "foxdot breaks jsonpickle", "user": {"login": "Almenon", "id": 13080965, "node_id": "MDQ6VXNlcjEzMDgwOTY1", "avatar_url": "https://avatars0.githubusercontent.com/u/13080965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Almenon", "html_url": "https://github.com/Almenon", "followers_url": "https://api.github.com/users/Almenon/followers", "following_url": "https://api.github.com/users/Almenon/following{/other_user}", "gists_url": "https://api.github.com/users/Almenon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Almenon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Almenon/subscriptions", "organizations_url": "https://api.github.com/users/Almenon/orgs", "repos_url": "https://api.github.com/users/Almenon/repos", "events_url": "https://api.github.com/users/Almenon/events{/privacy}", "received_events_url": "https://api.github.com/users/Almenon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-20T17:17:27Z", "updated_at": "2019-05-16T04:58:00Z", "closed_at": "2019-05-16T04:58:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "see https://github.com/Almenon/AREPL-vscode/issues/205\r\n\r\ncan be replicated with simply:\r\n\r\n```python\r\nfrom FoxDot import pluck\r\n\r\nimport jsonpickle\r\n\r\nfoo = jsonpickle.encode(pluck)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/258", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/258/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/258/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/258", "id": 434765902, "node_id": "MDU6SXNzdWU0MzQ3NjU5MDI=", "number": 258, "title": "numeric_keys kwarg is undocumented", "user": {"login": "mspacek", "id": 799467, "node_id": "MDQ6VXNlcjc5OTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/799467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mspacek", "html_url": "https://github.com/mspacek", "followers_url": "https://api.github.com/users/mspacek/followers", "following_url": "https://api.github.com/users/mspacek/following{/other_user}", "gists_url": "https://api.github.com/users/mspacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mspacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mspacek/subscriptions", "organizations_url": "https://api.github.com/users/mspacek/orgs", "repos_url": "https://api.github.com/users/mspacek/repos", "events_url": "https://api.github.com/users/mspacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mspacek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-18T13:17:50Z", "updated_at": "2020-02-23T02:26:44Z", "closed_at": "2020-02-23T02:26:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "`numeric_keys` is a kwarg for `jsonpickle.encode()` but is undocumented. Briefly looking at the code in `pickler.py` and `compat.py`, I'm not quite sure what it actually does.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/254", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/254/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/254/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/254", "id": 421509783, "node_id": "MDU6SXNzdWU0MjE1MDk3ODM=", "number": 254, "title": "test_sqlalchemy_with_dynamic_table fails qith sqlalchemy 1.3.x", "user": {"login": "scarabeusiv", "id": 1055830, "node_id": "MDQ6VXNlcjEwNTU4MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1055830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scarabeusiv", "html_url": "https://github.com/scarabeusiv", "followers_url": "https://api.github.com/users/scarabeusiv/followers", "following_url": "https://api.github.com/users/scarabeusiv/following{/other_user}", "gists_url": "https://api.github.com/users/scarabeusiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/scarabeusiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scarabeusiv/subscriptions", "organizations_url": "https://api.github.com/users/scarabeusiv/orgs", "repos_url": "https://api.github.com/users/scarabeusiv/repos", "events_url": "https://api.github.com/users/scarabeusiv/events{/privacy}", "received_events_url": "https://api.github.com/users/scarabeusiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-15T13:06:23Z", "updated_at": "2019-03-19T05:34:11Z", "closed_at": "2019-03-19T05:34:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n[    7s] ____________ SQLAlchemyTestCase.test_sqlalchemy_with_dynamic_table _____________\r\n[    7s] \r\n[    7s] self = <sqlalchemy_test.SQLAlchemyTestCase testMethod=test_sqlalchemy_with_dynamic_table>\r\n[    7s] \r\n[    7s]     def test_sqlalchemy_with_dynamic_table(self):\r\n[    7s]         \"\"\"Test creating a table dynamically, per #180\"\"\"\r\n[    7s]     \r\n[    7s]         if self.should_skip:\r\n[    7s]             return self.skip('sqlalchemy is not installed')\r\n[    7s]     \r\n[    7s]         meta = sqa.MetaData()\r\n[    7s]         expect = sqa.Table(\r\n[    7s]             'test', meta,\r\n[    7s]             sqa.Column('id', sqa.Integer()),\r\n[    7s]             sqa.Column('text', sqa.Text()))\r\n[    7s]     \r\n[    7s]         jsonstr = jsonpickle.dumps(expect)\r\n[    7s] >       actual = jsonpickle.loads(jsonstr)\r\n[    7s] \r\n[    7s] tests/sqlalchemy_test.py:103: \r\n[    7s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[    7s] jsonpickle/unpickler.py:40: in decode\r\n[    7s]     return context.restore(data, reset=reset, classes=classes)\r\n[    7s] jsonpickle/unpickler.py:145: in restore\r\n[    7s]     value = self._restore(obj)\r\n[    7s] jsonpickle/unpickler.py:200: in _restore\r\n[    7s]     return restore(obj)\r\n[    7s] jsonpickle/unpickler.py:311: in _restore_object\r\n[    7s]     return self._restore_object_instance(obj, cls)\r\n[    7s] jsonpickle/unpickler.py:378: in _restore_object_instance\r\n[    7s]     return self._restore_object_instance_variables(obj, instance)\r\n[    7s] jsonpickle/unpickler.py:440: in _restore_object_instance_variables\r\n[    7s]     instance = self._restore_state(obj, instance)\r\n[    7s] jsonpickle/unpickler.py:445: in _restore_state\r\n[    7s]     state = self._restore(obj[tags.STATE])\r\n[    7s] jsonpickle/unpickler.py:200: in _restore\r\n[    7s]     return restore(obj)\r\n[    7s] jsonpickle/unpickler.py:502: in _restore_dict\r\n[    7s]     data[k] = self._restore(v)\r\n[    7s] jsonpickle/unpickler.py:200: in _restore\r\n[    7s]     return restore(obj)\r\n[    7s] jsonpickle/unpickler.py:311: in _restore_object\r\n[    7s]     return self._restore_object_instance(obj, cls)\r\n[    7s] jsonpickle/unpickler.py:374: in _restore_object_instance\r\n[    7s]     if (_safe_hasattr(instance, 'default_factory') and\r\n[    7s] jsonpickle/unpickler.py:45: in _safe_hasattr\r\n[    7s]     return attr in dir(obj)\r\n[    7s] /usr/lib64/python2.7/site-packages/sqlalchemy/util/_collections.py:184: in __dir__\r\n[    7s]     str(k) for k in self._data.keys()\r\n[    7s] /usr/lib64/python2.7/site-packages/sqlalchemy/util/_collections.py:210: in __getattr__\r\n[    7s]     return self._data[key]\r\n[    7s] /usr/lib64/python2.7/site-packages/sqlalchemy/util/_collections.py:210: in __getattr__\r\n[    7s]     return self._data[key]\r\n[    7s] E   RuntimeError: maximum recursion depth exceeded\r\n[    7s] !!! Recursion detected (same locals & position)\r\n```\r\n\r\nThe testcase of course works with sqlalchemy 1.2 series.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/253", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/253/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/253/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/253", "id": 417739283, "node_id": "MDU6SXNzdWU0MTc3MzkyODM=", "number": 253, "title": "[bug] clonefactory causes id reference issues", "user": {"login": "woutdenolf", "id": 7264703, "node_id": "MDQ6VXNlcjcyNjQ3MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/7264703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woutdenolf", "html_url": "https://github.com/woutdenolf", "followers_url": "https://api.github.com/users/woutdenolf/followers", "following_url": "https://api.github.com/users/woutdenolf/following{/other_user}", "gists_url": "https://api.github.com/users/woutdenolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/woutdenolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woutdenolf/subscriptions", "organizations_url": "https://api.github.com/users/woutdenolf/orgs", "repos_url": "https://api.github.com/users/woutdenolf/repos", "events_url": "https://api.github.com/users/woutdenolf/events{/privacy}", "received_events_url": "https://api.github.com/users/woutdenolf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-06T10:48:34Z", "updated_at": "2019-04-04T06:38:28Z", "closed_at": "2019-04-04T06:38:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "python: 3.6\r\njsonpickle: 1.1\r\nbug: whenever I see `CloneFactory` and `py/id` in the flattened result, unpickling often fails (in different ways depending on the situation)\r\n\r\nHere is one way to make it fail:\r\n```python\r\nimport jsonpickle\r\nimport collections\r\n\r\njsonpickle.set_preferred_backend('json')\r\njsonpickle.set_encoder_options('json', indent=2)\r\n\r\nclass Class(object):\r\n    def __init__(self,**kwargs):\r\n        self.dic = kwargs\r\n    def __getstate__(self):\r\n        return {'dic': self.dic}\r\n    def __setstate__(self, state):\r\n        self.dic = state['dic']\r\n    def __eq__(self,other):\r\n        return self.dic == other.dic\r\n\r\ndef defaultfunc():\r\n    return Class(default=True)\r\n\r\na = Class(a=1, b=2)\r\nb = collections.defaultdict(defaultfunc)\r\ndata1 = Class(b=b, x=a, y=a)\r\ns = jsonpickle.dumps(data1)\r\nprint(s)\r\ndata2 = jsonpickle.loads(s)\r\nassert(data1==data2)\r\n```\r\nResult:\r\n```\r\n{\r\n  \"py/object\": \"__main__.Class\",\r\n  \"py/state\": {\r\n    \"dic\": {\r\n      \"b\": {\r\n        \"py/object\": \"collections.defaultdict\",\r\n        \"default_factory\": {\r\n          \"py/object\": \"jsonpickle.handlers.CloneFactory\",\r\n          \"exemplar\": {\r\n            \"py/object\": \"__main__.Class\",\r\n            \"py/state\": {\r\n              \"dic\": {\r\n                \"default\": true\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"x\": {\r\n        \"py/object\": \"__main__.Class\",\r\n        \"py/state\": {\r\n          \"dic\": {\r\n            \"a\": 1,\r\n            \"b\": 2\r\n          }\r\n        }\r\n      },\r\n      \"y\": {\r\n        \"py/id\": 5\r\n      }\r\n    }\r\n  }\r\n}\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 25, in <module>\r\n    data2 = jsonpickle.loads(s)\r\n  File \".../jsonpickle/unpickler.py\", line 40, in decode\r\n    return context.restore(data, reset=reset, classes=classes)\r\n  File \".../jsonpickle/unpickler.py\", line 147, in restore\r\n    self._swap_proxies()\r\n  File \".../jsonpickle/unpickler.py\", line 165, in _swap_proxies\r\n    method(obj, attr, proxy)\r\n  File \".../jsonpickle/unpickler.py\", line 100, in _obj_setvalue\r\n    obj[idx] = proxy.get()\r\n  File \".../jsonpickle/unpickler.py\", line 92, in get\r\n    return self._objs[self._index]\r\nIndexError: list index out of range\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/250", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/250/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/250/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/250", "id": 414845818, "node_id": "MDU6SXNzdWU0MTQ4NDU4MTg=", "number": 250, "title": "Base-85 encode bytes on Python 3.4+?", "user": {"login": "dargueta", "id": 620513, "node_id": "MDQ6VXNlcjYyMDUxMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/620513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dargueta", "html_url": "https://github.com/dargueta", "followers_url": "https://api.github.com/users/dargueta/followers", "following_url": "https://api.github.com/users/dargueta/following{/other_user}", "gists_url": "https://api.github.com/users/dargueta/gists{/gist_id}", "starred_url": "https://api.github.com/users/dargueta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dargueta/subscriptions", "organizations_url": "https://api.github.com/users/dargueta/orgs", "repos_url": "https://api.github.com/users/dargueta/repos", "events_url": "https://api.github.com/users/dargueta/events{/privacy}", "received_events_url": "https://api.github.com/users/dargueta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-26T22:14:03Z", "updated_at": "2019-03-02T04:21:25Z", "closed_at": "2019-03-02T04:21:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `base64` library supports [base-85 encoding](https://docs.python.org/3/library/base64.html#base64.b85encode) as of Python 3.4. This is a more efficient form of text encoding, that bloats binary data by only 1/4 as opposed to base-64 which expands binary data by 1/3. From some manual testing I've done with randomized bytes given by `os.urandom()`, this change makes payloads about 10% smaller.\r\n\r\nGiven that Python 3.3 has reached end of life and is no longer supported by pip, and Python 2 can't read data pickled by Python 3 anyway, I think it'd be cool if we could add an option to `encode()` to encode binary data using base-85.\r\n\r\nAs long as we provide this as an additional argument to `encode()`, this would be backwards-compatible and shouldn't break anything (I believe). What do people think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/249", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/249/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/249/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/249", "id": 413888581, "node_id": "MDU6SXNzdWU0MTM4ODg1ODE=", "number": 249, "title": "Bug: 'Pickler' object has no attribute 'restore' in numpy extension", "user": {"login": "vnmabus", "id": 2364173, "node_id": "MDQ6VXNlcjIzNjQxNzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2364173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmabus", "html_url": "https://github.com/vnmabus", "followers_url": "https://api.github.com/users/vnmabus/followers", "following_url": "https://api.github.com/users/vnmabus/following{/other_user}", "gists_url": "https://api.github.com/users/vnmabus/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmabus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmabus/subscriptions", "organizations_url": "https://api.github.com/users/vnmabus/orgs", "repos_url": "https://api.github.com/users/vnmabus/repos", "events_url": "https://api.github.com/users/vnmabus/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmabus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1250952969, "node_id": "MDU6TGFiZWwxMjUwOTUyOTY5", "url": "https://api.github.com/repos/jsonpickle/jsonpickle/labels/testcase-needed", "name": "testcase-needed", "color": "dd3333", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-25T00:19:16Z", "updated_at": "2019-03-26T11:51:05Z", "closed_at": "2019-02-27T10:40:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following error:\r\n```\r\njsonpickle.loads(<something>)\r\nFile \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/unpickler.py\", line 40, in decode\r\n    return context.restore(data, reset=reset, classes=classes)\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/unpickler.py\", line 145, in restore\r\n    value = self._restore(obj)\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/unpickler.py\", line 200, in _restore\r\n    return restore(obj)\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/unpickler.py\", line 475, in _restore_list\r\n    children = [self._restore(v) for v in obj]\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/unpickler.py\", line 475, in <listcomp>\r\n    children = [self._restore(v) for v in obj]\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/unpickler.py\", line 200, in _restore\r\n    return restore(obj)\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/unpickler.py\", line 475, in _restore_list\r\n    children = [self._restore(v) for v in obj]\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/unpickler.py\", line 475, in <listcomp>\r\n    children = [self._restore(v) for v in obj]\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/unpickler.py\", line 200, in _restore\r\n    return restore(obj)\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/unpickler.py\", line 303, in _restore_object\r\n    instance = handler(self).restore(obj)\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/ext/numpy.py\", line 310, in restore\r\n    arr = super(NumpyNDArrayHandlerView, self).restore(data)\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/ext/numpy.py\", line 181, in restore\r\n    arr = super(NumpyNDArrayHandlerBinary, self).restore(data)\r\n  File \"/home/carlosr/miniconda3/envs/RMH/lib/python3.6/site-packages/jsonpickle/ext/numpy.py\", line 90, in restore\r\n    values = self.context.restore(data['values'], reset=False)\r\nAttributeError: 'Pickler' object has no attribute 'restore'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/247", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/247/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/247/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/247", "id": 405618314, "node_id": "MDU6SXNzdWU0MDU2MTgzMTQ=", "number": 247, "title": "AttributeError: 'int' object has no attribute 'startswith'", "user": {"login": "smidm", "id": 820292, "node_id": "MDQ6VXNlcjgyMDI5Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/820292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smidm", "html_url": "https://github.com/smidm", "followers_url": "https://api.github.com/users/smidm/followers", "following_url": "https://api.github.com/users/smidm/following{/other_user}", "gists_url": "https://api.github.com/users/smidm/gists{/gist_id}", "starred_url": "https://api.github.com/users/smidm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smidm/subscriptions", "organizations_url": "https://api.github.com/users/smidm/orgs", "repos_url": "https://api.github.com/users/smidm/repos", "events_url": "https://api.github.com/users/smidm/events{/privacy}", "received_events_url": "https://api.github.com/users/smidm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-01T09:27:05Z", "updated_at": "2019-02-27T11:35:41Z", "closed_at": "2019-02-27T11:35:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "`jsonpickle.decode` fails when `keys=True` and decoding a class that includes a dict with integral keys and with defined `__getstate__` and missing `__setstate__` method. \r\n\r\nIt seems that the `jsonpickle.decode` tries to reconstruct the pickled dictionary keys twice.\r\n\r\nA minimal code to reproduce the error (jsonpickle 1.1, Python 2.7.15):\r\n```\r\nimport jsonpickle\r\nclass Test:\r\n    def __init__(self):\r\n        self.a = {0: 0}\r\n    def __getstate__(self):\r\n        return self.__dict__\r\n\r\ns = jsonpickle.encode(Test(), keys=True, warn=True)\r\nprint(s)\r\njsonpickle.decode(s, keys=True)\r\n```\r\nresult:\r\n```\r\n{\"py/object\": \"__main__.Test\", \"py/state\": {\"a\": {\"json://0\": 0}}}\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/IPython/core/interactiveshell.py\", line 2878, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-2-06a0b269cf74>\", line 10, in <module>\r\n    jsonpickle.decode(s, keys=True)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 40, in decode\r\n    return context.restore(data, reset=reset, classes=classes)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 145, in restore\r\n    value = self._restore(obj)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 200, in _restore\r\n    return restore(obj)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 311, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 378, in _restore_object_instance\r\n    return self._restore_object_instance_variables(obj, instance)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 440, in _restore_object_instance_variables\r\n    instance = self._restore_state(obj, instance)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 456, in _restore_state\r\n    state, instance, ignorereserved=False)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 396, in _restore_from_dict\r\n    value = self._restore(v)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 200, in _restore\r\n    return restore(obj)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 501, in _restore_dict\r\n    k = restore_key(k)\r\n  File \"/home/matej/.conda/envs/ferda/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 530, in _restore_pickled_key\r\n    if key.startswith(tags.JSON_KEY):\r\nAttributeError: 'int' object has no attribute 'startswith'\r\n```\r\n\r\nexpected result:\r\n- reconstructed Test() object with integral keys in Test.a\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/246", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/246/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/246/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/246", "id": 404457868, "node_id": "MDU6SXNzdWU0MDQ0NTc4Njg=", "number": 246, "title": "IndexError explicitly restoring object with FixedOffset", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1303629911, "node_id": "MDU6TGFiZWwxMzAzNjI5OTEx", "url": "https://api.github.com/repos/jsonpickle/jsonpickle/labels/core", "name": "core", "color": "233ea0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/milestones/1", "html_url": "https://github.com/jsonpickle/jsonpickle/milestone/1", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/milestones/1/labels", "id": 4199868, "node_id": "MDk6TWlsZXN0b25lNDE5OTg2OA==", "number": 1, "title": "v2", "description": null, "creator": {"login": "davvid", "id": 13196, "node_id": "MDQ6VXNlcjEzMTk2", "avatar_url": "https://avatars2.githubusercontent.com/u/13196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davvid", "html_url": "https://github.com/davvid", "followers_url": "https://api.github.com/users/davvid/followers", "following_url": "https://api.github.com/users/davvid/following{/other_user}", "gists_url": "https://api.github.com/users/davvid/gists{/gist_id}", "starred_url": "https://api.github.com/users/davvid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davvid/subscriptions", "organizations_url": "https://api.github.com/users/davvid/orgs", "repos_url": "https://api.github.com/users/davvid/repos", "events_url": "https://api.github.com/users/davvid/events{/privacy}", "received_events_url": "https://api.github.com/users/davvid/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 1, "state": "open", "created_at": "2019-04-04T06:46:44Z", "updated_at": "2020-02-23T00:59:05Z", "due_on": null, "closed_at": null}, "comments": 4, "created_at": "2019-01-29T19:48:16Z", "updated_at": "2020-02-23T01:10:10Z", "closed_at": "2020-02-23T00:59:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have [this script](https://gist.github.com/8167498b51eff44d93d7c5af28a4dd8a), which if run with `pip-run` generates this output:\r\n\r\n```\r\nCollecting jsonpickle\r\n  Using cached https://files.pythonhosted.org/packages/dc/12/8c44eabb501e2bc0aec0dd152b328074d98a50968d3a02be28f6037f0c6a/jsonpickle-1.1-py2.py3-none-any.whl\r\nCollecting pymongo\r\n  Using cached https://files.pythonhosted.org/packages/d7/ac/d2e324c1f9bcf653fa106785371a16b4709506a35b04948655de8b961a85/pymongo-3.7.2-cp37-cp37m-macosx_10_9_x86_64.whl\r\nInstalling collected packages: jsonpickle, pymongo\r\nSuccessfully installed jsonpickle-1.1 pymongo-3.7.2\r\n{\"py/object\": \"datetime.datetime\", \"__reduce__\": [{\"py/type\": \"datetime.datetime\"}, [\"B+MBHRIJCAyakA==\", {\"py/reduce\": [{\"py/type\": \"bson.tz_util.FixedOffset\"}, {\"py/tuple\": [{\"py/reduce\": [{\"py/type\": \"datetime.timedelta\"}, {\"py/tuple\": [0, 0, 0]}, null, null, null]}, \"UTC\"]}, {\"_FixedOffset__name\": \"UTC\", \"_FixedOffset__offset\": {\"py/id\": 2}}, null, null]}]]}\r\nTraceback (most recent call last):\r\n  File \"bson-utc.py\", line 20, in <module>\r\n    restored = json.loads(doc, object_hook=unpickler.restore)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py\", line 361, in loads\r\n    return cls(**kw).decode(s)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py\", line 337, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py\", line 353, in raw_decode\r\n    obj, end = self.scan_once(s, idx)\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-3soo3ndy/jsonpickle/unpickler.py\", line 147, in restore\r\n    self._swap_proxies()\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-3soo3ndy/jsonpickle/unpickler.py\", line 165, in _swap_proxies\r\n    method(obj, attr, proxy)\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-3soo3ndy/jsonpickle/unpickler.py\", line 100, in _obj_setvalue\r\n    obj[idx] = proxy.get()\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-3soo3ndy/jsonpickle/unpickler.py\", line 92, in get\r\n    return self._objs[self._index]\r\nIndexError: list index out of range\r\n```\r\n\r\nThis error is almost identical to #120, except that I'm not relying on the `jsonpickle.loads`, but am instead explicitly calling `Unpickler.restore` during a normal deserialization operation. I'm doing this because I also need to secondarily wrap the restored objects in another function during deserialization.\r\n\r\nI've tried a couple of things:\r\n\r\n- invoking `Unpickler._restore` instead of `.restore`, but that leaves an _IDProxy object as the tzinfo on the datetime object, which causes issues.\r\n- invoking `Unpickler._restore` but also invoking `Unpickler._swap_proxies` after, but that results in the same error.\r\n\r\nI suspect the issue is mainly a mismatch between the expected use of `restore` and `json`'s expectation for an `object_hook`, the former of which expects to restore all objects, including lists, but the `object_hook` is only called for objects... so references are missing for lists.\r\n\r\nCan you think of a better way to hook into a JSON deserialization to invoke the Unpickler.restore behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/244", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/244/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/244/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/244", "id": 401100047, "node_id": "MDU6SXNzdWU0MDExMDAwNDc=", "number": 244, "title": "cannot pickle Decimal", "user": {"login": "JssDWt", "id": 15966593, "node_id": "MDQ6VXNlcjE1OTY2NTkz", "avatar_url": "https://avatars1.githubusercontent.com/u/15966593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JssDWt", "html_url": "https://github.com/JssDWt", "followers_url": "https://api.github.com/users/JssDWt/followers", "following_url": "https://api.github.com/users/JssDWt/following{/other_user}", "gists_url": "https://api.github.com/users/JssDWt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JssDWt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JssDWt/subscriptions", "organizations_url": "https://api.github.com/users/JssDWt/orgs", "repos_url": "https://api.github.com/users/JssDWt/repos", "events_url": "https://api.github.com/users/JssDWt/events{/privacy}", "received_events_url": "https://api.github.com/users/JssDWt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-20T13:52:17Z", "updated_at": "2019-02-27T12:22:53Z", "closed_at": "2019-02-27T09:07:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "jsonpickle serializes Decimal as `null`. \r\n\r\nSteps to reproduce:\r\n- install jsonpickle 1.0 and simplejson 3.16.0 in a python 3.7 environment\r\n- execute the following code:\r\n```python\r\nimport jsonpickle\r\nfrom decimal import Decimal\r\njsonpickle.set_preferred_backend('simplejson')\r\njsonpickle.set_encoder_options('simplejson', use_decimal=True)\r\nprint(jsonpickle.encode(Decimal('2.0'), unpicklable=False, warn=True))\r\n```\r\nThis prints:\r\n> UserWarning: jsonpickle cannot pickle Decimal('2.0'): replaced with None\r\n>   warnings.warn(msg)\r\n> null\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/242", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/242/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/242/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/242", "id": 386578919, "node_id": "MDU6SXNzdWUzODY1Nzg5MTk=", "number": 242, "title": "encoding does not work when inheriting from a class", "user": {"login": "chanansh", "id": 5981644, "node_id": "MDQ6VXNlcjU5ODE2NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5981644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chanansh", "html_url": "https://github.com/chanansh", "followers_url": "https://api.github.com/users/chanansh/followers", "following_url": "https://api.github.com/users/chanansh/following{/other_user}", "gists_url": "https://api.github.com/users/chanansh/gists{/gist_id}", "starred_url": "https://api.github.com/users/chanansh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chanansh/subscriptions", "organizations_url": "https://api.github.com/users/chanansh/orgs", "repos_url": "https://api.github.com/users/chanansh/repos", "events_url": "https://api.github.com/users/chanansh/events{/privacy}", "received_events_url": "https://api.github.com/users/chanansh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-02T17:09:08Z", "updated_at": "2019-02-11T22:20:12Z", "closed_at": "2019-02-09T05:50:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I inherit I don't see child property in encoded string:\r\n```\r\nfrom catboost import CatBoostClassifier\r\n\r\nclass MyCatBoostClassifier(CatBoostClassifier, object):\r\n\r\n    def __init__(self, cat_features=None, **kwargs):\r\n        super().__init__(**kwargs)\r\n        self._cat_features = cat_features\r\n\r\n    def fit(self, *args, **kwargs):\r\n        return super().fit(cat_features=self._cat_features, *args, **kwargs)\r\n```\r\nI get: \r\n```\r\n{\"py/object\": \"__main__.MyCatBoostClassifier\", \"py/state\": {\"loss_function\": \"Logloss\"}}\r\n```\r\nHowever when I do not inherit from CatBoostClassifier, I get the child property (_cat_features):\r\n```\r\n{\"py/object\": \"__main__.MyCatBoostClassifier\", \"_cat_features\": [\"cat1\", \"cat2\"]} \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/235", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/235/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/235/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/235", "id": 368887009, "node_id": "MDU6SXNzdWUzNjg4ODcwMDk=", "number": 235, "title": "Enum not serializing properly, serializing as string", "user": {"login": "pmmcmullen94", "id": 14918364, "node_id": "MDQ6VXNlcjE0OTE4MzY0", "avatar_url": "https://avatars1.githubusercontent.com/u/14918364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmmcmullen94", "html_url": "https://github.com/pmmcmullen94", "followers_url": "https://api.github.com/users/pmmcmullen94/followers", "following_url": "https://api.github.com/users/pmmcmullen94/following{/other_user}", "gists_url": "https://api.github.com/users/pmmcmullen94/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmmcmullen94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmmcmullen94/subscriptions", "organizations_url": "https://api.github.com/users/pmmcmullen94/orgs", "repos_url": "https://api.github.com/users/pmmcmullen94/repos", "events_url": "https://api.github.com/users/pmmcmullen94/events{/privacy}", "received_events_url": "https://api.github.com/users/pmmcmullen94/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-10T22:54:46Z", "updated_at": "2020-02-23T01:13:16Z", "closed_at": "2020-02-23T01:13:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using JSONPickle 0.9.6 and when I serialize a custom enum that looks as follows: \r\n```\r\nclass TSDataType(Enum):\r\n    NONE = 0\r\n    STRING = 1\r\n    INTEGER = 2\r\n    DOUBLE = 3\r\n    BOOLEAN = 4\r\n```\r\nit serializes fine sometimes like this: \r\n```\r\n\"DataType\": {\r\n     \"py/reduce\": [\r\n         {\r\n             \"py/type\": \"Enums.TSDataType\"\r\n         },\r\n         {\r\n             \"py/tuple\": [\r\n                 2\r\n             ]\r\n         },\r\n         null,\r\n         null,\r\n         null\r\n     ]\r\n },\r\n```\r\nbut then other times it serializes like this:\r\n`\"DataType\": \"<TSDataType.INTEGER: 2>\",`\r\n\r\nThe bottom way is serializing as a string whereas the top can successfully be deserialized back to the object. Is there anything that might be causing this that is known? \r\n\r\nMy serialization code looks like this:\r\n```\r\njsonpickle.encode(value, make_refs=False)\r\n```\r\n\r\nThanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/233", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/233/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/233/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/233", "id": 363086281, "node_id": "MDU6SXNzdWUzNjMwODYyODE=", "number": 233, "title": "Release 1.0 has no .whl files for Python 2, and no source files.", "user": {"login": "orf", "id": 1027207, "node_id": "MDQ6VXNlcjEwMjcyMDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1027207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orf", "html_url": "https://github.com/orf", "followers_url": "https://api.github.com/users/orf/followers", "following_url": "https://api.github.com/users/orf/following{/other_user}", "gists_url": "https://api.github.com/users/orf/gists{/gist_id}", "starred_url": "https://api.github.com/users/orf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orf/subscriptions", "organizations_url": "https://api.github.com/users/orf/orgs", "repos_url": "https://api.github.com/users/orf/repos", "events_url": "https://api.github.com/users/orf/events{/privacy}", "received_events_url": "https://api.github.com/users/orf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-24T10:19:07Z", "updated_at": "2018-09-25T04:33:06Z", "closed_at": "2018-09-25T04:33:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "You currently cannot install `jsonpickle==1.0` with Python 2. See here:\r\n\r\nhttps://pypi.org/simple/jsonpickle/\r\n\r\nThere is a `.whl` file for Python 3, but no source release or `.whl` file that would be compatible with Python 2 :(\r\n\r\nThis might be related to the issues @davvid was experiencing in #230 \r\n\r\nIs this intentional?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/232", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/232/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/232/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/232", "id": 362232000, "node_id": "MDU6SXNzdWUzNjIyMzIwMDA=", "number": 232, "title": "Docs not updated for 1.0.0?", "user": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-20T15:05:29Z", "updated_at": "2018-09-21T08:26:18Z", "closed_at": "2018-09-21T08:26:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can see docs for the version at https://github.com/jsonpickle/jsonpickle/blob/master/docs/source/changelog.rst but they're missing at https://jsonpickle.github.io/changelog.html , so users upgrading may not find the changelog.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/230", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/230/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/230/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/230", "id": 360765693, "node_id": "MDU6SXNzdWUzNjA3NjU2OTM=", "number": 230, "title": "Release 1.0 to PyPI?", "user": {"login": "hugovk", "id": 1324225, "node_id": "MDQ6VXNlcjEzMjQyMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1324225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugovk", "html_url": "https://github.com/hugovk", "followers_url": "https://api.github.com/users/hugovk/followers", "following_url": "https://api.github.com/users/hugovk/following{/other_user}", "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions", "organizations_url": "https://api.github.com/users/hugovk/orgs", "repos_url": "https://api.github.com/users/hugovk/repos", "events_url": "https://api.github.com/users/hugovk/events{/privacy}", "received_events_url": "https://api.github.com/users/hugovk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-17T08:25:12Z", "updated_at": "2018-09-20T12:49:08Z", "closed_at": "2018-09-20T03:28:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "jsonpickle 1.0 was released two weeks ago (2018-09-02):\r\n\r\n<img width=70% src=https://user-images.githubusercontent.com/1324225/45612607-38624a00-ba6c-11e8-9a34-c1b808b51391.png>\r\n\r\nhttps://github.com/jsonpickle/jsonpickle/releases\r\n\r\nHowever, the latest version on PyPI is 0.96 (2018-02-09):\r\n\r\n![image](https://user-images.githubusercontent.com/1324225/45612586-1e286c00-ba6c-11e8-916d-f82ee0a000be.png)\r\n\r\nhttps://pypi.org/project/jsonpickle/#history\r\n\r\nAre there plans to release 1.0 on PyPI?\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/229", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/229/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/229/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/229", "id": 360178675, "node_id": "MDU6SXNzdWUzNjAxNzg2NzU=", "number": 229, "title": "Deprecation warning for use of collections.Iterator", "user": {"login": "akeeman", "id": 12628547, "node_id": "MDQ6VXNlcjEyNjI4NTQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/12628547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akeeman", "html_url": "https://github.com/akeeman", "followers_url": "https://api.github.com/users/akeeman/followers", "following_url": "https://api.github.com/users/akeeman/following{/other_user}", "gists_url": "https://api.github.com/users/akeeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/akeeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akeeman/subscriptions", "organizations_url": "https://api.github.com/users/akeeman/orgs", "repos_url": "https://api.github.com/users/akeeman/repos", "events_url": "https://api.github.com/users/akeeman/events{/privacy}", "received_events_url": "https://api.github.com/users/akeeman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-14T06:53:20Z", "updated_at": "2018-09-18T00:21:30Z", "closed_at": "2018-09-18T00:21:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "On python 3.7: `DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  return (isinstance(obj, collections.Iterator)` in `util.py` function `is_iterator`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/228", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/228/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/228/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/228", "id": 358344424, "node_id": "MDU6SXNzdWUzNTgzNDQ0MjQ=", "number": 228, "title": "JsonPickle RecursionError: maximum recursion depth exceeded in comparison", "user": {"login": "laundmo", "id": 24855949, "node_id": "MDQ6VXNlcjI0ODU1OTQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/24855949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laundmo", "html_url": "https://github.com/laundmo", "followers_url": "https://api.github.com/users/laundmo/followers", "following_url": "https://api.github.com/users/laundmo/following{/other_user}", "gists_url": "https://api.github.com/users/laundmo/gists{/gist_id}", "starred_url": "https://api.github.com/users/laundmo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laundmo/subscriptions", "organizations_url": "https://api.github.com/users/laundmo/orgs", "repos_url": "https://api.github.com/users/laundmo/repos", "events_url": "https://api.github.com/users/laundmo/events{/privacy}", "received_events_url": "https://api.github.com/users/laundmo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-09T02:46:56Z", "updated_at": "2018-09-10T19:12:18Z", "closed_at": "2018-09-10T19:12:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "hey there\r\n\r\nim trying to pickle one object, that has a few attributes and im getting a \"RecursionError: maximum recursion depth exceeded in comparison\" exception\r\n\r\nive done print(object.\\_\\_dict\\_\\_) to get this(most parts replaced with placeholder values):\r\n \r\n`{'link': 'https://www.placeholder.net/placeholder', 'info_string': 'placeholder', 'name': 'placeholder', 'placeholder': 111111, 'placeholder': 1111111, 'placeholder': 11111, 'placeholder': 111, 'placeholder': 111, 'placeholder': 'placeholder', 'placeholder': 'placeholder', 'placeholder': \"placeholder\", 'placeholder': 'placeholder', 'placeholder_link': 'https://www.placeholder.net/placeholder2'}`\r\n\r\ni dont see where theres a recursion, and why that error should occur\r\n\r\nlast part of the stacktrace (should contain 3 recursions):\r\n```\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 433, in _flatten_dict_obj\r\n    flatten(k, v, data)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 508, in _flatten_key_value_pair\r\n    data[k] = self._flatten(v)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 160, in _flatten\r\n    return self._pop(self._flatten_obj(obj))\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 234, in _ref_obj_instance\r\n    return self._flatten_obj_instance(obj)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 390, in _flatten_obj_instance\r\n    return self._flatten_sequence_obj(obj, data)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 514, in _flatten_sequence_obj\r\n    self._flatten_dict_obj(obj.__dict__, data)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 433, in _flatten_dict_obj\r\n    flatten(k, v, data)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 508, in _flatten_key_value_pair\r\n    data[k] = self._flatten(v)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 160, in _flatten\r\n    return self._pop(self._flatten_obj(obj))\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 234, in _ref_obj_instance\r\n    return self._flatten_obj_instance(obj)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 390, in _flatten_obj_instance\r\n    return self._flatten_sequence_obj(obj, data)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 514, in _flatten_sequence_obj\r\n    self._flatten_dict_obj(obj.__dict__, data)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 433, in _flatten_dict_obj\r\n    flatten(k, v, data)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 508, in _flatten_key_value_pair\r\n    data[k] = self._flatten(v)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 160, in _flatten\r\n    return self._pop(self._flatten_obj(obj))\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 433, in _flatten_dict_obj\r\n    flatten(k, v, data)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\pickler.py\", line 491, in _flatten_key_value_pair\r\n    if not util.is_picklable(k, v):\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\util.py\", line 310, in is_picklable\r\n    return is_module_function(value) or not is_function(value)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\util.py\", line 254, in is_function\r\n    module = translate_module_name(obj.__class__.__module__)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\jsonpickle\\util.py\", line 460, in translate_module_name\r\n    if (PY3 and module == 'builtins') or module == 'exceptions':\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/224", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/224/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/224/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/224", "id": 356039818, "node_id": "MDU6SXNzdWUzNTYwMzk4MTg=", "number": 224, "title": "translate/untranslate_module_name should prefer Python 3 naming", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-31T16:05:33Z", "updated_at": "2018-09-02T06:03:48Z", "closed_at": "2018-09-02T06:03:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Looking at the [util module](https://github.com/jsonpickle/jsonpickle/blob/e42147fb39da16557f2e73d89bce582e041dd54c/jsonpickle/util.py#L450-L482), I notice that the functions prefer the Python 2 names to the Python 3 names.\r\n\r\nI made similar poor choices early in my early years of Python 3 porting, but if I've learned anything from my experience, it's that compatibility code should always aim to use the future constructs first and provide backward compatibility to the older constructs. Otherwise, you end up in a state where you have legacy constructs in newer platforms indefinitely. In this case, Python 3-only applications will still be storing pickles using Python 2 names.\r\n\r\nAt some point, this package is going to want to shed that legacy. I suggest sooner than later.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/217", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/217/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/217/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/217", "id": 354019424, "node_id": "MDU6SXNzdWUzNTQwMTk0MjQ=", "number": 217, "title": "Basic operations fail if supplementary JSON libs aren't installed", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-08-25T15:06:43Z", "updated_at": "2018-08-29T13:01:55Z", "closed_at": "2018-08-29T10:04:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While troubleshooting #216, when testing against the master branch, apparently a regression since 0.9.6, I see:\r\n\r\n```\r\ncelery-schedulers master $ cat test-schedule-entry.py\r\nimport celery.schedules, celery.beat, jsonpickle\r\nschedule = celery.schedules.crontab(0, 12)\r\nentry = celery.beat.ScheduleEntry(schedule=schedule)\r\ndata = jsonpickle.dumps(entry)\r\nprint(data)\r\nrenew = jsonpickle.loads(data)\r\ncelery-schedulers master $ rwt -q 'git+https://github.com/jsonpickle/jsonpickle' 'celery<4' -- -i test-schedule-entry.py\r\nTraceback (most recent call last):\r\n  File \"test-schedule-entry.py\", line 4, in <module>\r\n    data = jsonpickle.dumps(entry)\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-q7zv79uy/jsonpickle/pickler.py\", line 76, in encode\r\n    return backend.encode(context.flatten(value, reset=reset))\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-q7zv79uy/jsonpickle/backend.py\", line 165, in encode\r\n    raise e\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-q7zv79uy/jsonpickle/backend.py\", line 162, in encode\r\n    return self.backend_encode(name, obj)\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-q7zv79uy/jsonpickle/backend.py\", line 173, in backend_encode\r\n    return self._encoders[name](*encoder_args, **encoder_kwargs)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py\", line 231, in dumps\r\n    return _default_encoder.encode(obj)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py\", line 179, in default\r\n    raise TypeError(f'Object of type {o.__class__.__name__} '\r\nTypeError: Object of type bytes is not JSON serializable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/216", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/216/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/216/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/216", "id": 354017692, "node_id": "MDU6SXNzdWUzNTQwMTc2OTI=", "number": 216, "title": "failure to roundtrip reducible iterators", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-08-25T14:42:49Z", "updated_at": "2018-09-01T16:22:55Z", "closed_at": "2018-08-29T09:25:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using celery.schedule.ScheduleEntry from celery 3.x, and while jsonpickle will produce a pickle for it, when decoding, it produces a `listiterator` instead of a ScheduleEntry:\r\n\r\n```\r\n$ rwt -q 'celery<4' jsonpickle\r\n>>> import celery.schedules, celery.beat, jsonpickle\r\n>>> schedule = celery.schedules.crontab(0, 12)\r\n>>> entry = celery.beat.ScheduleEntry(schedule=schedule)\r\n>>> entry\r\n<Entry: None None() <crontab: 0 12 * * * (m/h/d/dM/MY)>\r\n>>> data = jsonpickle.dumps(entry)\r\n>>> data\r\n'{\"py/object\": \"celery.beat.ScheduleEntry\", \"py/iterator\": [{\"py/tuple\": [\"app\", null]}, {\"py/tuple\": [\"options\", {}]}, {\"py/tuple\": [\"args\", {\"py/tuple\": []}]}, {\"py/tuple\": [\"kwargs\", {}]}, {\"py/tuple\": [\"schedule\", {\"py/reduce\": [{\"py/type\": \"celery.schedules.crontab\"}, {\"py/tuple\": [0, 12, \"*\", \"*\", \"*\"]}, null, null, null]}]}, {\"py/tuple\": [\"total_run_count\", 0]}, {\"py/tuple\": [\"task\", null]}, {\"py/tuple\": [\"name\", null]}, {\"py/tuple\": [\"last_run_at\", {\"__reduce__\": [{\"py/type\": \"datetime.datetime\"}, [\"B+IIGQ4kLwRAFw==\"]], \"py/object\": \"datetime.datetime\"}]}]}'\r\n>>> jsonpickle.loads(data)\r\n<listiterator object at 0x10e9e66d0>\r\n>>> list(_)\r\n[(u'app', None), (u'options', {}), (u'args', ()), (u'kwargs', {}), (u'schedule', <crontab: 0 12 * * * (m/h/d/dM/MY)>), (u'total_run_count', 0), (u'task',None), (u'name', None), (u'last_run_at', datetime.datetime(2018, 8, 25, 14, 36, 47, 278551))]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/214", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/214/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/214/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/214", "id": 343296523, "node_id": "MDU6SXNzdWUzNDMyOTY1MjM=", "number": 214, "title": "numpy ndarray encoding is broken", "user": {"login": "rfdougherty", "id": 882626, "node_id": "MDQ6VXNlcjg4MjYyNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/882626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfdougherty", "html_url": "https://github.com/rfdougherty", "followers_url": "https://api.github.com/users/rfdougherty/followers", "following_url": "https://api.github.com/users/rfdougherty/following{/other_user}", "gists_url": "https://api.github.com/users/rfdougherty/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfdougherty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfdougherty/subscriptions", "organizations_url": "https://api.github.com/users/rfdougherty/orgs", "repos_url": "https://api.github.com/users/rfdougherty/repos", "events_url": "https://api.github.com/users/rfdougherty/events{/privacy}", "received_events_url": "https://api.github.com/users/rfdougherty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-21T04:34:59Z", "updated_at": "2020-02-26T18:31:17Z", "closed_at": "2020-02-26T18:31:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nimport numpy as np\r\nimport jsonpickle\r\nimport jsonpickle.ext.numpy as jsonpickle_numpy\r\njsonpickle_numpy.register_handlers()\r\njsonpickle.encode(np.random.random(100))\r\n```\r\n\r\nThe problem seems to be a regression introduced in util.py b64encode by commit 3f87b87a87fc4c5bfe2ce5d7d59a40ab9ddc35cd (remove the not in line 515)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/213", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/213/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/213/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/213", "id": 343191714, "node_id": "MDU6SXNzdWUzNDMxOTE3MTQ=", "number": 213, "title": "Can't decode pandas dataframes", "user": {"login": "rfdougherty", "id": 882626, "node_id": "MDQ6VXNlcjg4MjYyNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/882626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfdougherty", "html_url": "https://github.com/rfdougherty", "followers_url": "https://api.github.com/users/rfdougherty/followers", "following_url": "https://api.github.com/users/rfdougherty/following{/other_user}", "gists_url": "https://api.github.com/users/rfdougherty/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfdougherty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfdougherty/subscriptions", "organizations_url": "https://api.github.com/users/rfdougherty/orgs", "repos_url": "https://api.github.com/users/rfdougherty/repos", "events_url": "https://api.github.com/users/rfdougherty/events{/privacy}", "received_events_url": "https://api.github.com/users/rfdougherty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-07-20T17:42:03Z", "updated_at": "2020-02-23T02:01:44Z", "closed_at": "2020-02-23T02:01:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Pandas DataFrame objects encode without error, but decoding causes a RecursionError.\r\n```python\r\nimport pandas as pd\r\nimport jsonpickle\r\nimport jsonpickle.ext.numpy as jsonpickle_numpy\r\njsonpickle_numpy.register_handlers()\r\n\r\ndf = pd.DataFrame({'foo':[1.3,2.4,3.5,4.6],'bar':[10,20,30,40]})\r\ns = jsonpickle.encode(df)\r\njsonpickle.decode(s)\r\n```\r\nProduces \"... RecursionError: maximum recursion depth exceeded\"\r\n\r\nA work-around-- convert dataframe to csv string before encoding\r\n```python\r\nfrom io import StringIO\r\ns = jsonpickle.encode(df.to_csv(index=False))\r\npd.read_csv(StringIO(jsonpickle.decode(s)))\r\n```\r\nReproduces the encoded DataFrame", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/212", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/212/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/212/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/212", "id": 341285064, "node_id": "MDU6SXNzdWUzNDEyODUwNjQ=", "number": 212, "title": "Exception in Numpy handler when size_treshold=None", "user": {"login": "Gra55h0pper", "id": 23423972, "node_id": "MDQ6VXNlcjIzNDIzOTcy", "avatar_url": "https://avatars2.githubusercontent.com/u/23423972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gra55h0pper", "html_url": "https://github.com/Gra55h0pper", "followers_url": "https://api.github.com/users/Gra55h0pper/followers", "following_url": "https://api.github.com/users/Gra55h0pper/following{/other_user}", "gists_url": "https://api.github.com/users/Gra55h0pper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gra55h0pper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gra55h0pper/subscriptions", "organizations_url": "https://api.github.com/users/Gra55h0pper/orgs", "repos_url": "https://api.github.com/users/Gra55h0pper/repos", "events_url": "https://api.github.com/users/Gra55h0pper/events{/privacy}", "received_events_url": "https://api.github.com/users/Gra55h0pper/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-15T01:56:08Z", "updated_at": "2018-07-17T08:01:56Z", "closed_at": "2018-07-17T08:01:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "`>>> jsonpickle.__version__`\r\n'0.9.6'\r\n\r\nRegistering the Numpy handler with _size_treshold=None_ throws an exception.\r\n\r\n```\r\nimport numpy as np\r\nimport jsonpickle\r\nimport jsonpickle.ext.numpy as jsonpickle_numpy\r\njsonpickle_numpy.register_handlers()\r\njsonpickle.handlers.registry.unregister(np.ndarray)\r\njsonpickle.handlers.registry.register(np.ndarray, \r\n    jsonpickle.ext.numpy.NumpyNDArrayHandlerView(size_treshold=None), base=True)\r\njsonpickle.decode(jsonpickle.encode(np.array([0,1])))\r\n```\r\n\r\nYields:\r\n\r\n> File \"c:\\users\\hans\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\jsonpickle\\ext\\numpy.py\", line 134, in flatten\r\n>     if self.size_treshold >= obj.size or self.size_treshold is None:\r\n> \r\n> TypeError: '>=' not supported between instances of 'NoneType' and 'int'\r\n> \r\n\r\n\r\nThis needs fixing in two places (lines 134 and 237).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/210", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/210/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/210/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/210", "id": 337444128, "node_id": "MDU6SXNzdWUzMzc0NDQxMjg=", "number": 210, "title": "Inner Classes fail to properly encode", "user": {"login": "Mnuzz", "id": 1613498, "node_id": "MDQ6VXNlcjE2MTM0OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1613498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mnuzz", "html_url": "https://github.com/Mnuzz", "followers_url": "https://api.github.com/users/Mnuzz/followers", "following_url": "https://api.github.com/users/Mnuzz/following{/other_user}", "gists_url": "https://api.github.com/users/Mnuzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mnuzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mnuzz/subscriptions", "organizations_url": "https://api.github.com/users/Mnuzz/orgs", "repos_url": "https://api.github.com/users/Mnuzz/repos", "events_url": "https://api.github.com/users/Mnuzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Mnuzz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-02T09:44:14Z", "updated_at": "2020-07-07T03:18:25Z", "closed_at": "2018-07-13T09:58:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a class Foo with an inner class (within Foo) named Bar, within module 'm'. When encoding the object, this is what would show up:\r\n```{\"py/object\": \"m.Bar\" ...```\r\n\r\nThis causes decoding to fail, as a dictionary will be created instead of the object.\r\n\r\nPerhaps this is what should appear in the json?\r\n```{\"py/object\": \"m.Foo.Bar\" ...```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/209", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/209/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/209/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/209", "id": 337071810, "node_id": "MDU6SXNzdWUzMzcwNzE4MTA=", "number": 209, "title": "jsonpickle fails to decode ", "user": {"login": "rsoeldner", "id": 26225067, "node_id": "MDQ6VXNlcjI2MjI1MDY3", "avatar_url": "https://avatars2.githubusercontent.com/u/26225067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsoeldner", "html_url": "https://github.com/rsoeldner", "followers_url": "https://api.github.com/users/rsoeldner/followers", "following_url": "https://api.github.com/users/rsoeldner/following{/other_user}", "gists_url": "https://api.github.com/users/rsoeldner/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsoeldner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsoeldner/subscriptions", "organizations_url": "https://api.github.com/users/rsoeldner/orgs", "repos_url": "https://api.github.com/users/rsoeldner/repos", "events_url": "https://api.github.com/users/rsoeldner/events{/privacy}", "received_events_url": "https://api.github.com/users/rsoeldner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-29T17:05:02Z", "updated_at": "2018-08-29T10:29:47Z", "closed_at": "2018-08-29T10:29:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n  import jsonpickle\r\n  from ecdsa.keys import SigningKey\r\n  from ecdsa import NIST384p\r\n\r\n   kpair = SigningKey.generate(curve=NIST384p)\r\n   sig = kpair.sign(msg.encode())\r\n\r\n   e = jsonpickle.encode(kpair.get_verifying_key())\r\n   r = jsonpickle.decode(e)\r\n\r\n   r.verify(sig, msg.encode())\r\n```\r\nSee https://github.com/warner/python-ecdsa/issues/89 , pickle alone is working....", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/208", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/208/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/208/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/208", "id": 333862096, "node_id": "MDU6SXNzdWUzMzM4NjIwOTY=", "number": 208, "title": "unpicklable=False with nested custom enums", "user": {"login": "opahopa", "id": 12842834, "node_id": "MDQ6VXNlcjEyODQyODM0", "avatar_url": "https://avatars2.githubusercontent.com/u/12842834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/opahopa", "html_url": "https://github.com/opahopa", "followers_url": "https://api.github.com/users/opahopa/followers", "following_url": "https://api.github.com/users/opahopa/following{/other_user}", "gists_url": "https://api.github.com/users/opahopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/opahopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/opahopa/subscriptions", "organizations_url": "https://api.github.com/users/opahopa/orgs", "repos_url": "https://api.github.com/users/opahopa/repos", "events_url": "https://api.github.com/users/opahopa/events{/privacy}", "received_events_url": "https://api.github.com/users/opahopa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-19T22:30:35Z", "updated_at": "2018-06-23T19:38:48Z", "closed_at": "2018-06-23T19:30:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "flag `unpicklable=False` is not working on my class with nested enums.\r\n\r\nfrom enum import Enum\r\n\r\n\r\n```\r\nclass MessageTypes(Enum):\r\n    STATUS = 'STATUS',\r\n    CONTROL = 'CONTROL'\r\n\r\n\r\nclass MessageStatus(Enum):\r\n    OK = 'OK',\r\n    ERROR = 'ERROR'\r\n\r\n\r\nclass MessageCommands(Enum):\r\n    STATUS_ALL = 'STATUS_ALL'\r\n\r\n\r\nclass Message(object):\r\n\r\n    def __init__(self, type, command, status=None, body=None):\r\n        self.type = MessageTypes(type)\r\n        if command:\r\n            self.command = MessageCommands(command)\r\n        if status:\r\n            self.status = MessageStatus(status)\r\n        if body:\r\n            self.body = body\r\n\r\n```\r\n\r\nlogger.info(jsonpickle.encode(msg, unpicklable=False)):\r\n\r\n```\r\n{\r\n  \"command\": {\r\n    \"__objclass__\": {\r\n      \"py\\/type\": \"app.models.message.MessageCommands\"\r\n    },\r\n    \"_name_\": \"STATUS_ALL\",\r\n    \"_value_\": \"STATUS_ALL\"\r\n  },\r\n  \"type\": {\r\n    \"__objclass__\": {\r\n      \"py\\/type\": \"app.models.message.MessageTypes\"\r\n    },\r\n    \"_name_\": \"CONTROL\",\r\n    \"_value_\": \"CONTROL\"\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/204", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/204/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/204/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/204", "id": 322888405, "node_id": "MDU6SXNzdWUzMjI4ODg0MDU=", "number": 204, "title": "JsonPikle to send Ryu object type", "user": {"login": "Abdullahalshra3a", "id": 39274124, "node_id": "MDQ6VXNlcjM5Mjc0MTI0", "avatar_url": "https://avatars0.githubusercontent.com/u/39274124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Abdullahalshra3a", "html_url": "https://github.com/Abdullahalshra3a", "followers_url": "https://api.github.com/users/Abdullahalshra3a/followers", "following_url": "https://api.github.com/users/Abdullahalshra3a/following{/other_user}", "gists_url": "https://api.github.com/users/Abdullahalshra3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/Abdullahalshra3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Abdullahalshra3a/subscriptions", "organizations_url": "https://api.github.com/users/Abdullahalshra3a/orgs", "repos_url": "https://api.github.com/users/Abdullahalshra3a/repos", "events_url": "https://api.github.com/users/Abdullahalshra3a/events{/privacy}", "received_events_url": "https://api.github.com/users/Abdullahalshra3a/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-14T16:23:10Z", "updated_at": "2018-05-15T06:11:06Z", "closed_at": "2018-05-15T06:09:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear,\r\nI am not sure if this list is the right place to ask my question.\r\nActually, I am using Python to investigate my work in SDN using Ryu Controller.\r\n\r\nObviously, I have two python applications.\r\nthe first one sends object using socket to the second. \r\nThe object type is <class 'ryu.ofproto.ofproto_v1_3_parser.OFPPacketIn'>.\r\n\r\nI have used pickle and json, but they could not send it.\r\n\r\nI am trying Jsonpickle right now which send it well\r\n\r\n```\r\ndef sendToC2(self, y):\r\n        data = jsonpickle.encode(y)\r\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        host = socket.gethostname() # Get local machine name\r\n       port = 12345                # Reserve a port for your service.\r\n        s.connect((host, port))\r\n        s.sendall(data)\r\n        #print s.recv(1024)\r\n        s.close\r\n``` \r\n     \r\nBut the second application cannot decode it.\r\n\r\n```\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n#host = socket.gethostname() # Get local machine name\r\nport = 12345                # Reserve a port for your service.\r\ns.bind(('', port))        # Bind to the port\r\ns.listen(5)                 # Now wait for client connection.\r\nc, addr = s.accept()     # Establish connection with client.\r\nwhile True:\r\n                  x = c.recv(2048)\r\n                  print 'Got connection from', addr\r\n                  rdata =jsonpickle.decode(x)\r\n                  if not rdata:\r\n                      break\r\n                  print 'the pakt is:', rdata\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\r\n    self.run()\r\n  File \"/usr/lib/python2.7/threading.py\", line 763, in run\r\n    self.__target(*self.__args, **self.__kwargs)\r\n  File \"/home/mininet/ryu/ryu/app/C1.py\", line 197, in foo\r\n    rdata =jsonpickle.decode(x)\r\n  File \"/usr/local/lib/python2.7/dist-packages/jsonpickle/__init__.py\", line 155                                                                                                 , in decode\r\n    return unpickler.decode(string, backend=backend, keys=keys, classes=classes)\r\n  File \"/usr/local/lib/python2.7/dist-packages/jsonpickle/unpickler.py\", line 26                                                                                                 , in decode\r\n    return context.restore(backend.decode(string), reset=reset, classes=classes)\r\n  File \"/usr/local/lib/python2.7/dist-packages/jsonpickle/backend.py\", line 197,                                                                                                  in decode\r\n    raise e\r\nValueError: Unterminated string starting at: line 1 column 2028 (char 2027)\r\n\r\n\r\nCould you help me\r\nBest\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/201", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/201/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/201/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/201", "id": 322294250, "node_id": "MDU6SXNzdWUzMjIyOTQyNTA=", "number": 201, "title": "Lots of lint errors/warnings", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-11T13:20:37Z", "updated_at": "2018-05-11T15:06:19Z", "closed_at": "2018-05-11T15:06:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\njsonpickle bugfix/lint-awareness $ flake8\r\n./setup.py:25:81: E501 line too long (86 > 80 characters)\r\n./setup.py:26:81: E501 line too long (84 > 80 characters)\r\n./tests/benchmark.py:35:16: E999 SyntaxError: invalid syntax\r\n./tests/document_test.py:102:1: E305 expected 2 blank lines after class or function definition, found 1\r\n./tests/numpy_test.py:116:81: E501 line too long (81 > 80 characters)\r\n./tests/jsonpickle_test.py:1378:1: E305 expected 2 blank lines after class or function definition, found 1\r\n./tests/sqlalchemy_test.py:98:17: E128 continuation line under-indented for visual indent\r\n./tests/sqlalchemy_test.py:99:17: E128 continuation line under-indented for visual indent\r\n./tests/sqlalchemy_test.py:119:1: E302 expected 2 blank lines, found 1\r\n./tests/util_test.py:241:1: E305 expected 2 blank lines after class or function definition, found 1\r\n./tests/backend_test.py:139:13: W605 invalid escape sequence '\\/'\r\n./tests/backend_test.py:166:13: W605 invalid escape sequence '\\/'\r\n./tests/object_test.py:747:9: E731 do not assign a lambda expression, use a def\r\n./tests/object_test.py:795:20: E225 missing whitespace around operator\r\n./tests/object_test.py:808:16: E225 missing whitespace around operator\r\n./tests/object_test.py:858:1: E305 expected 2 blank lines after class or function definition, found 1\r\n./tests/datetime_test.py:37:1: E305 expected 2 blank lines after class or function definition, found 1\r\n./tests/datetime_test.py:262:1: E305 expected 2 blank lines after class or function definition, found 1\r\n./tests/runtests.py:16:1: E402 module level import not at top of file\r\n./tests/runtests.py:18:1: E402 module level import not at top of file\r\n./tests/runtests.py:19:1: E402 module level import not at top of file\r\n./tests/runtests.py:20:1: E402 module level import not at top of file\r\n./tests/runtests.py:21:1: E402 module level import not at top of file\r\n./tests/runtests.py:22:1: E402 module level import not at top of file\r\n./tests/runtests.py:23:1: E402 module level import not at top of file\r\n./tests/runtests.py:24:1: E402 module level import not at top of file\r\n./tests/runtests.py:25:1: E402 module level import not at top of file\r\n./tests/runtests.py:26:1: E402 module level import not at top of file\r\n./tests/runtests.py:27:1: E402 module level import not at top of file\r\n./tests/runtests.py:28:1: E402 module level import not at top of file\r\n./tests/handler_test.py:58:1: E303 too many blank lines (3)\r\n./contrib/pyqt-reduce-handler.py:20:20: F821 undefined name 'unicode'\r\n./contrib/pyqt-reduce-handler.py:22:81: E501 line too long (83 > 80 characters)\r\n./contrib/pyqt-reduce-handler.py:38:1: E305 expected 2 blank lines after class or function definition, found 1\r\n./jsonpickle/unpickler.py:4:81: E501 line too long (87 > 80 characters)\r\n./jsonpickle/unpickler.py:18:1: F401 '.backend.JSONBackend' imported but unused\r\n./jsonpickle/unpickler.py:201:13: E731 do not assign a lambda expression, use a def\r\n./jsonpickle/unpickler.py:223:9: F841 local variable 'reduce_tuple' is assigned to but never used\r\n./jsonpickle/unpickler.py:223:81: E501 line too long (92 > 80 characters)\r\n./jsonpickle/unpickler.py:252:21: E722 do not use bare 'except'\r\n./jsonpickle/unpickler.py:347:81: E501 line too long (83 > 80 characters)\r\n./jsonpickle/unpickler.py:349:81: E501 line too long (82 > 80 characters)\r\n./jsonpickle/unpickler.py:366:17: E722 do not use bare 'except'\r\n./jsonpickle/unpickler.py:480:21: E127 continuation line over-indented for visual indent\r\n./jsonpickle/unpickler.py:481:25: E127 continuation line over-indented for visual indent\r\n./jsonpickle/unpickler.py:524:13: E731 do not assign a lambda expression, use a def\r\n./jsonpickle/util.py:66:81: E501 line too long (84 > 80 characters)\r\n./jsonpickle/util.py:67:81: E501 line too long (89 > 80 characters)\r\n./jsonpickle/util.py:69:81: E501 line too long (89 > 80 characters)\r\n./jsonpickle/util.py:345:5: E722 do not use bare 'except'\r\n./jsonpickle/util.py:351:1: E302 expected 2 blank lines, found 1\r\n./jsonpickle/util.py:353:81: E501 line too long (83 > 80 characters)\r\n./jsonpickle/util.py:360:17: E127 continuation line over-indented for visual indent\r\n./jsonpickle/util.py:361:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:362:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:363:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:364:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:365:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:366:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:367:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:368:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:369:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:370:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:371:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:372:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:373:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:374:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:375:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:376:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:377:17: E128 continuation line under-indented for visual indent\r\n./jsonpickle/util.py:378:17: E124 closing bracket does not match visual indentation\r\n./jsonpickle/util.py:394:81: E501 line too long (81 > 80 characters)\r\n./jsonpickle/util.py:412:10: E111 indentation is not a multiple of four\r\n./jsonpickle/util.py:422:72: W291 trailing whitespace\r\n./jsonpickle/util.py:432:81: E501 line too long (92 > 80 characters)\r\n./jsonpickle/util.py:438:10: E111 indentation is not a multiple of four\r\n./jsonpickle/util.py:439:10: E111 indentation is not a multiple of four\r\n./jsonpickle/util.py:439:13: E714 test for object identity should be 'is not'\r\n./jsonpickle/util.py:440:14: E111 indentation is not a multiple of four\r\n./jsonpickle/util.py:444:12: E714 test for object identity should be 'is not'\r\n./jsonpickle/util.py:445:14: E111 indentation is not a multiple of four\r\n./jsonpickle/handlers.py:7:81: E501 line too long (86 > 80 characters)\r\n./jsonpickle/handlers.py:24:1: F401 'collections' imported but unused\r\n./jsonpickle/handlers.py:27:1: F401 'decimal' imported but unused\r\n./jsonpickle/handlers.py:29:1: F401 'sys' imported but unused\r\n./jsonpickle/handlers.py:30:1: F401 'time' imported but unused\r\n./jsonpickle/handlers.py:49:81: E501 line too long (91 > 80 characters)\r\n./jsonpickle/handlers.py:50:81: E501 line too long (90 > 80 characters)\r\n./jsonpickle/handlers.py:53:81: E501 line too long (89 > 80 characters)\r\n./jsonpickle/handlers.py:63:81: E501 line too long (91 > 80 characters)\r\n./jsonpickle/handlers.py:64:81: E501 line too long (90 > 80 characters)\r\n./jsonpickle/handlers.py:66:81: E501 line too long (90 > 80 characters)\r\n./jsonpickle/handlers.py:82:81: E501 line too long (81 > 80 characters)\r\n./jsonpickle/handlers.py:217:1: E305 expected 2 blank lines after class or function definition, found 1\r\n./jsonpickle/handlers.py:231:81: E501 line too long (81 > 80 characters)\r\n./jsonpickle/handlers.py:244:1: E305 expected 2 blank lines after class or function definition, found 1\r\n./jsonpickle/__init__.py:58:1: F401 '.pickler' imported but unused\r\n./jsonpickle/__init__.py:59:1: F401 '.unpickler' imported but unused\r\n./jsonpickle/__init__.py:60:1: F401 '.backend.JSONBackend' imported but unused\r\n./jsonpickle/__init__.py:61:1: F401 '.version.__version__' imported but unused\r\n./jsonpickle/__init__.py:63:1: F401 '.handlers.register' imported but unused\r\n./jsonpickle/__init__.py:64:1: F401 '.handlers.unregister' imported but unused\r\n./jsonpickle/__init__.py:65:1: F401 '.pickler.Pickler' imported but unused\r\n./jsonpickle/__init__.py:66:1: F401 '.unpickler.Unpickler' imported but unused\r\n./jsonpickle/pickler.py:4:81: E501 line too long (87 > 80 characters)\r\n./jsonpickle/pickler.py:18:1: F401 '.backend.JSONBackend' imported but unused\r\n./jsonpickle/pickler.py:209:36: F821 undefined name 'file'\r\n./jsonpickle/pickler.py:270:44: F821 undefined name 'file'\r\n./jsonpickle/pickler.py:277:13: E722 do not use bare 'except'\r\n./jsonpickle/pickler.py:364:29: E127 continuation line over-indented for visual indent\r\n./jsonpickle/pickler.py:365:29: E127 continuation line over-indented for visual indent\r\n./jsonpickle/pickler.py:420:81: E501 line too long (87 > 80 characters)\r\n./jsonpickle/pickler.py:531:17: E722 do not use bare 'except'\r\n./jsonpickle/ext/numpy.py:20:1: E302 expected 2 blank lines, found 1\r\n./jsonpickle/ext/numpy.py:83:81: E501 line too long (90 > 80 characters)\r\n./jsonpickle/ext/numpy.py:103:81: E501 line too long (89 > 80 characters)\r\n./jsonpickle/ext/numpy.py:107:81: E501 line too long (101 > 80 characters)\r\n./jsonpickle/ext/numpy.py:113:81: E501 line too long (82 > 80 characters)\r\n./jsonpickle/ext/numpy.py:140:48: E261 at least two spaces before inline comment\r\n./jsonpickle/ext/numpy.py:140:81: E501 line too long (121 > 80 characters)\r\n./jsonpickle/ext/numpy.py:142:49: E261 at least two spaces before inline comment\r\n./jsonpickle/ext/numpy.py:175:21: E261 at least two spaces before inline comment\r\n./jsonpickle/ext/numpy.py:189:81: E501 line too long (89 > 80 characters)\r\n./jsonpickle/ext/numpy.py:190:81: E501 line too long (114 > 80 characters)\r\n./jsonpickle/ext/numpy.py:191:81: E501 line too long (118 > 80 characters)\r\n./jsonpickle/ext/numpy.py:193:81: E501 line too long (97 > 80 characters)\r\n./jsonpickle/ext/numpy.py:194:81: E501 line too long (87 > 80 characters)\r\n./jsonpickle/ext/numpy.py:195:81: E501 line too long (96 > 80 characters)\r\n./jsonpickle/ext/numpy.py:200:81: E501 line too long (104 > 80 characters)\r\n./jsonpickle/ext/numpy.py:202:81: E501 line too long (82 > 80 characters)\r\n./jsonpickle/ext/numpy.py:208:81: E501 line too long (81 > 80 characters)\r\n./jsonpickle/ext/numpy.py:217:81: E501 line too long (82 > 80 characters)\r\n./jsonpickle/ext/numpy.py:236:81: E501 line too long (86 > 80 characters)\r\n./jsonpickle/ext/numpy.py:241:81: E501 line too long (101 > 80 characters)\r\n./jsonpickle/ext/numpy.py:246:81: E501 line too long (104 > 80 characters)\r\n./jsonpickle/ext/numpy.py:247:81: E501 line too long (84 > 80 characters)\r\n./jsonpickle/ext/numpy.py:250:81: E501 line too long (101 > 80 characters)\r\n./jsonpickle/ext/numpy.py:252:81: E501 line too long (81 > 80 characters)\r\n./jsonpickle/ext/numpy.py:270:81: E501 line too long (88 > 80 characters)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/200", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/200/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/200/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/200", "id": 322267655, "node_id": "MDU6SXNzdWUzMjIyNjc2NTU=", "number": 200, "title": "Where'd SimpleReduceHandler go?", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-11T11:45:12Z", "updated_at": "2018-05-11T15:27:21Z", "closed_at": "2018-05-11T15:27:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In jaraco.modb, tests that passed a year ago are [now failing](https://travis-ci.org/jaraco/jaraco.modb/jobs/377693806) with `AttributeError: module 'jsonpickle.handlers' has no attribute 'SimpleReduceHandler'`. Looking at the changelog, I see no reference to a change regarding this class.\r\n\r\nAnd looking at the module in question, the docstrings still mention the handler, but the handler is just not there :(.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/199", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/199/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/199/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/199", "id": 318136098, "node_id": "MDU6SXNzdWUzMTgxMzYwOTg=", "number": 199, "title": "jsonpickle fails decoding instances of array.array", "user": {"login": "EvgenKo423", "id": 6688885, "node_id": "MDQ6VXNlcjY2ODg4ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6688885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EvgenKo423", "html_url": "https://github.com/EvgenKo423", "followers_url": "https://api.github.com/users/EvgenKo423/followers", "following_url": "https://api.github.com/users/EvgenKo423/following{/other_user}", "gists_url": "https://api.github.com/users/EvgenKo423/gists{/gist_id}", "starred_url": "https://api.github.com/users/EvgenKo423/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EvgenKo423/subscriptions", "organizations_url": "https://api.github.com/users/EvgenKo423/orgs", "repos_url": "https://api.github.com/users/EvgenKo423/repos", "events_url": "https://api.github.com/users/EvgenKo423/events{/privacy}", "received_events_url": "https://api.github.com/users/EvgenKo423/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-26T17:58:14Z", "updated_at": "2020-02-22T22:57:22Z", "closed_at": "2020-02-22T22:57:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "`jsonpickle` successfully encodes instances of `array.array`, but then fails to decode his own output back:\r\n```\r\n>>> import jsonpickle\r\n>>> from array import array\r\n>>> arr = array('H', (1, 2, 3, 4, 5))\r\n>>> arr\r\narray('H', [1, 2, 3, 4, 5])\r\n>>> jsonpickle.encode(arr)\r\n'{\"py/seq\": [1, 2, 3, 4, 5], \"py/object\": \"array.array\"}'\r\n>>> jsonpickle.decode('{\"py/seq\": [1, 2, 3, 4, 5], \"py/object\": \"array.array\"}')\r\n{'py/seq': [1, 2, 3, 4, 5], 'py/object': 'array.array'}\r\n>>>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/198", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/198/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/198/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/198", "id": 313556582, "node_id": "MDU6SXNzdWUzMTM1NTY1ODI=", "number": 198, "title": "Should primitives be encoded with repr after reaching max_depth", "user": {"login": "Mark-Hetherington", "id": 836620, "node_id": "MDQ6VXNlcjgzNjYyMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/836620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Hetherington", "html_url": "https://github.com/Mark-Hetherington", "followers_url": "https://api.github.com/users/Mark-Hetherington/followers", "following_url": "https://api.github.com/users/Mark-Hetherington/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Hetherington/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Hetherington/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Hetherington/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Hetherington/orgs", "repos_url": "https://api.github.com/users/Mark-Hetherington/repos", "events_url": "https://api.github.com/users/Mark-Hetherington/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Hetherington/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-12T02:45:00Z", "updated_at": "2018-06-22T09:17:27Z", "closed_at": "2018-06-22T09:17:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When max_depth is reached, or when make_refs is unset and the object has already been seen, the data is returned with repr(), in order to stop recursing or break a cycle. For unicode objects this results in a \"u'text data'\" in the JSON output. Given that primitives have no possibility of continuing a recursion or cyclical reference, would it not be better to return the object?\r\n\r\ne.g. instead of \r\n`if max_reached or (not self.make_refs and id(obj) in self._objs):`\r\nPerhaps:\r\n`if (max_reached or (not self.make_refs and id(obj) in self._objs)) and not util.is_primitive(obj):`\r\nor \r\n`if (max_reached and not util.is_primitive(obj)) or (not self.make_refs and id(obj) in self._objs):`\r\nIs there any reason within _flatten_obj() to not check utils.is_primitive and simply return the object without calling _get_flattener()?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/194", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/194/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/194/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/194", "id": 298713646, "node_id": "MDU6SXNzdWUyOTg3MTM2NDY=", "number": 194, "title": "Consider folding in features from jsonstruct project", "user": {"login": "rlubke", "id": 459724, "node_id": "MDQ6VXNlcjQ1OTcyNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/459724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rlubke", "html_url": "https://github.com/rlubke", "followers_url": "https://api.github.com/users/rlubke/followers", "following_url": "https://api.github.com/users/rlubke/following{/other_user}", "gists_url": "https://api.github.com/users/rlubke/gists{/gist_id}", "starred_url": "https://api.github.com/users/rlubke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rlubke/subscriptions", "organizations_url": "https://api.github.com/users/rlubke/orgs", "repos_url": "https://api.github.com/users/rlubke/repos", "events_url": "https://api.github.com/users/rlubke/events{/privacy}", "received_events_url": "https://api.github.com/users/rlubke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-20T19:12:14Z", "updated_at": "2018-03-08T18:30:15Z", "closed_at": "2018-03-08T18:30:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/initialxy/jsonstruct\r\n\r\nThis project is a fork of an older version of JSON pickle.  Why is this of interest?\r\n\r\nI'm currently working a polyglot key/value store that uses JSON to push/pull data between different clients.\r\n\r\nFor example, we're currently able to share data between Java, Go, Swift, and JS clients.  Python is currently working using jsonpickle.  However, the Python client is not able to handle JSON that was generated by other clients as the type info isn't nested in the JSON stream.\r\n\r\nEnter jsonstruct.  Instead of embedding the type info, you pass the class or an instance to the decode operation and it populates the instance based on the parsed JSON.  This is very similar to how Go and Swift work.\r\n\r\nUnfortunately, jsonstruct appears to be abandoned.  The last update was five years ago and there appears, based on the issue tracker, to be a compatibility issue with Python 3. \r\n\r\nIt seems the ideas from jsonstruct could be a useful addition to jsonpickle to allow it to interoperate better with non-python clients.\r\n\r\nThoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/193", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/193/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/193/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/193", "id": 298156290, "node_id": "MDU6SXNzdWUyOTgxNTYyOTA=", "number": 193, "title": "Preserve order when pickling", "user": {"login": "lmannering", "id": 14155046, "node_id": "MDQ6VXNlcjE0MTU1MDQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/14155046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lmannering", "html_url": "https://github.com/lmannering", "followers_url": "https://api.github.com/users/lmannering/followers", "following_url": "https://api.github.com/users/lmannering/following{/other_user}", "gists_url": "https://api.github.com/users/lmannering/gists{/gist_id}", "starred_url": "https://api.github.com/users/lmannering/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lmannering/subscriptions", "organizations_url": "https://api.github.com/users/lmannering/orgs", "repos_url": "https://api.github.com/users/lmannering/repos", "events_url": "https://api.github.com/users/lmannering/events{/privacy}", "received_events_url": "https://api.github.com/users/lmannering/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-02-19T04:06:35Z", "updated_at": "2020-02-19T08:43:11Z", "closed_at": "2020-02-19T08:43:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to preserve the order of dict when pickling objects. Is this possible? It seems that L432 in pickler.py currently forces alphabetical ordering:\r\n    \r\n`for k, v in sorted(obj.items(), key=util.itemgetter):`\r\n\r\nThanks for a really great package!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/192", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/192/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/192/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/192/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/192", "id": 295828046, "node_id": "MDU6SXNzdWUyOTU4MjgwNDY=", "number": 192, "title": "Decoding KNeighboursClassifier model from Sklearn fails", "user": {"login": "mohitbadwal", "id": 18120803, "node_id": "MDQ6VXNlcjE4MTIwODAz", "avatar_url": "https://avatars1.githubusercontent.com/u/18120803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mohitbadwal", "html_url": "https://github.com/mohitbadwal", "followers_url": "https://api.github.com/users/mohitbadwal/followers", "following_url": "https://api.github.com/users/mohitbadwal/following{/other_user}", "gists_url": "https://api.github.com/users/mohitbadwal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mohitbadwal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mohitbadwal/subscriptions", "organizations_url": "https://api.github.com/users/mohitbadwal/orgs", "repos_url": "https://api.github.com/users/mohitbadwal/repos", "events_url": "https://api.github.com/users/mohitbadwal/events{/privacy}", "received_events_url": "https://api.github.com/users/mohitbadwal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-02-09T10:45:37Z", "updated_at": "2020-02-23T01:15:34Z", "closed_at": "2020-02-23T01:15:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I upgraded to version 0.96 after following this issue #147 and KNeibhoursClassifier model still doesn't decode. Here's what I tried-\r\n\r\n```\r\n    import json\r\n    import jsonpickle\r\n    import jsonpickle.ext.numpy as jsonpickle_numpy\r\n    rfc = KNeighborsClassifier()\r\n    rfc.fit(X,Y)\r\n\r\n\r\n    jsonpickle_numpy.register_handlers()\r\n    p = jsonpickle.pickler.Pickler()\r\n    u = jsonpickle.unpickler.Unpickler()\r\n    j = jsonpickle.json.dumps(p.flatten(rfc))\r\n    json.dump(j, open(pickle_path, 'w'))\r\n    j = json.load(open(pickle_path, 'r'))\r\n    rfc = u.restore(jsonpickle.json.loads(j))\r\n```\r\n\r\n\r\nand the error-\r\n`TypeError: 'dict' object is not callable\r\n`\r\n\r\nWhat should be done ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/191", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/191/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/191/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/191", "id": 288427156, "node_id": "MDU6SXNzdWUyODg0MjcxNTY=", "number": 191, "title": "Can coroutines be serialized?", "user": {"login": "radek-sprta", "id": 8342657, "node_id": "MDQ6VXNlcjgzNDI2NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8342657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radek-sprta", "html_url": "https://github.com/radek-sprta", "followers_url": "https://api.github.com/users/radek-sprta/followers", "following_url": "https://api.github.com/users/radek-sprta/following{/other_user}", "gists_url": "https://api.github.com/users/radek-sprta/gists{/gist_id}", "starred_url": "https://api.github.com/users/radek-sprta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radek-sprta/subscriptions", "organizations_url": "https://api.github.com/users/radek-sprta/orgs", "repos_url": "https://api.github.com/users/radek-sprta/repos", "events_url": "https://api.github.com/users/radek-sprta/events{/privacy}", "received_events_url": "https://api.github.com/users/radek-sprta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-14T18:05:39Z", "updated_at": "2019-02-26T20:56:11Z", "closed_at": "2019-02-26T20:56:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ran upon a problem, when trying to serialize coroutines:\r\n\r\n(Pdb) result\r\n<coroutine object results at 0x7fa0c81b4830>\r\n(Pdb) jsonpickle.decode(jsonpickle.encode(result))\r\n{'py/object': '__builtin__.coroutine'}\r\n(Pdb) jsonpickle.decode(jsonpickle.encode(result)) == result\r\nFalse\r\n\r\nIs that the expected behavior? And if so, any hints on how to extend jsonpickle to properly serialize coroutines?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/188", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/188/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/188/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/188", "id": 278805077, "node_id": "MDU6SXNzdWUyNzg4MDUwNzc=", "number": 188, "title": "help asap please, module wont work", "user": {"login": "Vortetty", "id": 33466216, "node_id": "MDQ6VXNlcjMzNDY2MjE2", "avatar_url": "https://avatars2.githubusercontent.com/u/33466216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vortetty", "html_url": "https://github.com/Vortetty", "followers_url": "https://api.github.com/users/Vortetty/followers", "following_url": "https://api.github.com/users/Vortetty/following{/other_user}", "gists_url": "https://api.github.com/users/Vortetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vortetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vortetty/subscriptions", "organizations_url": "https://api.github.com/users/Vortetty/orgs", "repos_url": "https://api.github.com/users/Vortetty/repos", "events_url": "https://api.github.com/users/Vortetty/events{/privacy}", "received_events_url": "https://api.github.com/users/Vortetty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-03T18:09:31Z", "updated_at": "2017-12-03T23:34:20Z", "closed_at": "2017-12-03T23:34:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "i downloaded it via pip install. it is not being accessed by thonny (python 3.6.3 with a 3rd party gui), i also tried all of my other versions of python.\r\n\r\n i am working on a raspberry pi 3b, the os is raspbian stretch\r\n\r\nplease tell me how to use it on there\r\n\r\nbtw, the whole thonny thing dose not matter it is just a gui that uses combines the console and the interpreter", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/186", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/186/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/186/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/186", "id": 265839559, "node_id": "MDU6SXNzdWUyNjU4Mzk1NTk=", "number": 186, "title": "Not possible to invoke serialization/deserialization handlers for nested objects?", "user": {"login": "rlubke", "id": 459724, "node_id": "MDQ6VXNlcjQ1OTcyNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/459724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rlubke", "html_url": "https://github.com/rlubke", "followers_url": "https://api.github.com/users/rlubke/followers", "following_url": "https://api.github.com/users/rlubke/following{/other_user}", "gists_url": "https://api.github.com/users/rlubke/gists{/gist_id}", "starred_url": "https://api.github.com/users/rlubke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rlubke/subscriptions", "organizations_url": "https://api.github.com/users/rlubke/orgs", "repos_url": "https://api.github.com/users/rlubke/repos", "events_url": "https://api.github.com/users/rlubke/events{/privacy}", "received_events_url": "https://api.github.com/users/rlubke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-16T16:50:39Z", "updated_at": "2017-10-17T15:26:45Z", "closed_at": "2017-10-16T17:30:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a simple object graph which I want to serialize across the wire to a java backend.\r\n\r\nConsider the following:\r\n\r\n```python\r\nclass Put(NamedCacheRequest):\r\n    def __init__(self, cache_name: str=None, key: K=None, value: V=None) -> None:\r\n        super().__init__(cache_name)\r\n        self.key = key\r\n        self.value = value\r\n\r\n    def flatten(self, obj, data):\r\n        super().flatten(obj, data)\r\n        data[\"key\"] = obj.key\r\n        data[\"value\"] = obj.value\r\n        return data\r\n\r\n    def restore(self, obj):\r\n        pass\r\n```\r\n\r\nIn the above example, value can be a simple or complex type.  With simple types, it works fine.\r\nHowever, here's the wrench (perhaps perceived):\r\n\r\n```python\r\nclass Person(object):\r\n    def __init__(self, name: str, age: int, gender: str, friends: set):\r\n        super().__init__()\r\n        self.name = name\r\n        self.age = age\r\n        self.gender = gender\r\n        self.friends = friends\r\n\r\n    def __eq__(self, o: object) -> bool:\r\n        if not isinstance(o, Person):\r\n            return False\r\n\r\n        return self.name == o.name and self.age == o.age and self.gender == o.gender and self.friends == o.friends\r\n\r\n    def __ne__(self, o: object) -> bool:\r\n        return not self.__eq__(o)\r\n```\r\n\r\nI have a handler registered for Person to deal with serialization of the set, however, the handler is never invoked.   Of course, if I pass a Person object directly to jsonpickle, then the handler is invoked as expected.\r\n\r\nI can go into details on why I'm not letting jsonpickle encode the set, i.e., py/set in the stream, if desired.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/185", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/185/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/185/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/185", "id": 264659765, "node_id": "MDU6SXNzdWUyNjQ2NTk3NjU=", "number": 185, "title": "Jsonpickle apparently not working with local classes", "user": {"login": "mcondarelli", "id": 870849, "node_id": "MDQ6VXNlcjg3MDg0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/870849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcondarelli", "html_url": "https://github.com/mcondarelli", "followers_url": "https://api.github.com/users/mcondarelli/followers", "following_url": "https://api.github.com/users/mcondarelli/following{/other_user}", "gists_url": "https://api.github.com/users/mcondarelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcondarelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcondarelli/subscriptions", "organizations_url": "https://api.github.com/users/mcondarelli/orgs", "repos_url": "https://api.github.com/users/mcondarelli/repos", "events_url": "https://api.github.com/users/mcondarelli/events{/privacy}", "received_events_url": "https://api.github.com/users/mcondarelli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-11T16:49:35Z", "updated_at": "2017-10-17T17:05:45Z", "closed_at": "2017-10-17T17:05:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm trying to use jsonpickle to serialize some mixed objects.\r\nIt is not working for me (or I didn't understand how to use it, of course).\r\n\r\nI am using an up-to-date debian9 machine with python-3.5.3 and jsonpickle-0.9.3 .\r\n\r\nMy simple test program is (after cutting down all useless crap):\r\n```python\r\nimport jsonpickle\r\n\r\ndef test():\r\n    class MyClass(object):\r\n        def __init__(self):\r\n            self.value = 1\r\n            self.name = 'foo'\r\n\r\n    m = MyClass()\r\n    print(m)\r\n    f = jsonpickle.encode(m)\r\n    print(f)\r\n    o = jsonpickle.decode(f)\r\n    print(o)\r\n\r\ntest()\r\n```\r\n\r\nI get the following output:\r\n```\r\n<__main__.test.<locals>.MyClass object at 0x7f5e792e39e8>\r\n{\"name\": \"foo\", \"value\": 1, \"py/object\": \"__main__.MyClass\"}\r\n{'name': 'foo', 'value': 1, 'py/object': '__main__.MyClass'}\r\n```\r\nWhile I expected something like:\r\n```\r\n<__main__.test.<locals>.MyClass object at 0x7f5e792e39e8>\r\n{\"name\": \"foo\", \"value\": 1, \"py/object\": \"__main__.MyClass\"}\r\n<__main__.test.<locals>.MyClass object at 0x###########>\r\n```\r\nWhat am I missing?\r\n\r\nThanks in Advance\r\n/Mauro", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/184", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/184/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/184/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/184", "id": 264443393, "node_id": "MDU6SXNzdWUyNjQ0NDMzOTM=", "number": 184, "title": "jsonpickle doesn't work with sgdclassifier", "user": {"login": "fedorzh", "id": 5185993, "node_id": "MDQ6VXNlcjUxODU5OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5185993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fedorzh", "html_url": "https://github.com/fedorzh", "followers_url": "https://api.github.com/users/fedorzh/followers", "following_url": "https://api.github.com/users/fedorzh/following{/other_user}", "gists_url": "https://api.github.com/users/fedorzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fedorzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fedorzh/subscriptions", "organizations_url": "https://api.github.com/users/fedorzh/orgs", "repos_url": "https://api.github.com/users/fedorzh/repos", "events_url": "https://api.github.com/users/fedorzh/events{/privacy}", "received_events_url": "https://api.github.com/users/fedorzh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-10-11T03:11:36Z", "updated_at": "2017-10-11T18:11:16Z", "closed_at": "2017-10-11T08:22:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nError given\r\n\r\n#### Steps/Code to Reproduce\r\n```python\r\nimport numpy as np\r\nimport jsonpickle\r\nfrom sklearn.linear_model import SGDClassifier\r\nclf = SGDClassifier(loss='log', penalty='l2', alpha=1e-4, n_iter=100, random_state=42, n_jobs=-1)\r\nnp.random.seed(13)\r\nx = np.random.rand(10,5)\r\ny = np.random.randint(low=0, high=2, size=10)\r\nclf.fit(x, y)\r\nclf2 = jsonpickle.decode(jsonpickle.encode(clf))\r\n```\r\n\r\n#### Expected Results\r\nget the same clf2 as clf\r\n\r\n#### Actual Results\r\n<!-- Please paste or specifically describe the actual output or traceback. -->\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"python2.7/site-packages/jsonpickle/__init__.py\", line 149, in decode\r\n    return unpickler.decode(string, backend=backend, keys=keys)\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 26, in decode\r\n    return context.restore(backend.decode(string), reset=reset)\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 127, in restore\r\n    value = self._restore(obj)\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 169, in _restore\r\n    return restore(obj)\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 283, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 348, in _restore_object_instance\r\n    return self._restore_object_instance_variables(obj, instance)\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 393, in _restore_object_instance_variables\r\n    instance = self._restore_state(obj, instance)\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 398, in _restore_state\r\n    state = self._restore(obj[tags.STATE])\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 169, in _restore\r\n    return restore(obj)\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 451, in _restore_dict\r\n    data[k] = self._restore(v)\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 169, in _restore\r\n    return restore(obj)\r\n  File \"python2.7/site-packages/jsonpickle/unpickler.py\", line 192, in _restore_reduce\r\n    if f == tags.NEWOBJ or f.__name__ == '__newobj__':\r\nAttributeError: 'dict' object has no attribute '__name__'\r\n```\r\n\r\n#### Versions\r\n```\r\n>>> import sys; print(\"Python\", sys.version)\r\n('Python', '2.7.8 (default, Aug  3 2017, 16:13:26) \\n[GCC 5.4.0 20160609]')\r\n>>> import numpy; print(\"NumPy\", numpy.__version__)\r\n('NumPy', '1.13.1')\r\n>>> import scipy; print(\"SciPy\", scipy.__version__)\r\n('SciPy', '0.19.1')\r\n>>> import sklearn; print(\"Scikit-Learn\", sklearn.__version__)\r\n('Scikit-Learn', '0.19.0')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/183", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/183/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/183/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/183", "id": 262960577, "node_id": "MDU6SXNzdWUyNjI5NjA1Nzc=", "number": 183, "title": "[Wishlist] Add indent & sort_keys support for dumps() method", "user": {"login": "n3h3m", "id": 1170505, "node_id": "MDQ6VXNlcjExNzA1MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1170505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n3h3m", "html_url": "https://github.com/n3h3m", "followers_url": "https://api.github.com/users/n3h3m/followers", "following_url": "https://api.github.com/users/n3h3m/following{/other_user}", "gists_url": "https://api.github.com/users/n3h3m/gists{/gist_id}", "starred_url": "https://api.github.com/users/n3h3m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n3h3m/subscriptions", "organizations_url": "https://api.github.com/users/n3h3m/orgs", "repos_url": "https://api.github.com/users/n3h3m/repos", "events_url": "https://api.github.com/users/n3h3m/events{/privacy}", "received_events_url": "https://api.github.com/users/n3h3m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-04T23:20:18Z", "updated_at": "2020-02-23T02:56:24Z", "closed_at": "2020-02-23T02:56:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "The original `json` module's dumps() contain these two parameters which can be used occasionally to prettify objects. However, the built-in `json` module has its own limitation. \r\n\r\nI would prefer to use `jsonpicke.dumps()` to achieve this if we support the parameters `sort_keys` and `indent` \r\n\r\nMedod signature of `json.dumps()`\r\n```\r\ndef dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True,\r\n        allow_nan=True, cls=None, indent=None, separators=None,\r\n        default=None, sort_keys=False, **kw):\r\n    \"\"\"Serialize ``obj`` to a JSON formatted ``str``.\r\n\r\n    \r\n    If ``indent`` is a non-negative integer, then JSON array elements and\r\n    object members will be pretty-printed with that indent level. An indent\r\n    level of 0 will only insert newlines. ``None`` is the most compact\r\n    representation.\r\n\r\n    If *sort_keys* is true (default: ``False``), then the output of\r\n    dictionaries will be sorted by key.\r\n\r\n    \"\"\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/180", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/180/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/180/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/180", "id": 254889347, "node_id": "MDU6SXNzdWUyNTQ4ODkzNDc=", "number": 180, "title": "AttributeError: '_UnpickleDispatch' object has no attribute '__name__'", "user": {"login": "russlamb", "id": 19935045, "node_id": "MDQ6VXNlcjE5OTM1MDQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/19935045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/russlamb", "html_url": "https://github.com/russlamb", "followers_url": "https://api.github.com/users/russlamb/followers", "following_url": "https://api.github.com/users/russlamb/following{/other_user}", "gists_url": "https://api.github.com/users/russlamb/gists{/gist_id}", "starred_url": "https://api.github.com/users/russlamb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/russlamb/subscriptions", "organizations_url": "https://api.github.com/users/russlamb/orgs", "repos_url": "https://api.github.com/users/russlamb/repos", "events_url": "https://api.github.com/users/russlamb/events{/privacy}", "received_events_url": "https://api.github.com/users/russlamb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-03T17:41:49Z", "updated_at": "2017-09-04T02:50:34Z", "closed_at": "2017-09-04T02:48:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "trying to use this module with sqlalchemy, similar to #99 but it doesn't seem to work.  I saw the commit related to this issue and the related test.  my code seems similar.  Is there something I'm missing?\r\n\r\nmodule versions:\r\njsonpickle==0.9.5\r\nSQLAlchemy==1.1.6\r\n\r\nPython 3.5.2 :: Anaconda custom (x86_64)\r\n\r\n```\r\n\r\nimport sqlalchemy as sa, json\r\nimport jsonpickle as jp\r\n\r\ndef main():\r\n\r\n    meta = sa.MetaData()\r\n    t = sa.Table(\"test\",meta,\r\n        sa.Column(\"id\",sa.Integer())\r\n    )\r\n    engine=sa.create_engine(\"sqlite:///:memory:\")\r\n    meta.create_all(engine)\r\n\r\n    t_json = (jp.encode(t))\r\n\r\nif __name__==\"__main__\":\r\n    main()\r\n\r\n```\r\n```\r\n\r\nerrors:\r\n  File \"/Users/yomamma/Dropbox/Coding/Python/SqlTesting/db_test.py\", line 17, in main\r\n    t_json = (jp.encode(t))\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/__init__.py\", line 132, in encode\r\n    numeric_keys=numeric_keys)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 43, in encode\r\n    return backend.encode(context.flatten(value, reset=reset))\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 156, in flatten\r\n    return self._flatten(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 160, in _flatten\r\n    return self._pop(self._flatten_obj(obj))\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 234, in _ref_obj_instance\r\n    return self._flatten_obj_instance(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 375, in _flatten_obj_instance\r\n    return self._getstate(state, data)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 523, in _getstate\r\n    state = self._flatten_obj(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 433, in _flatten_dict_obj\r\n    flatten(k, v, data)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 502, in _flatten_key_value_pair\r\n    data[k] = self._flatten(v)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 160, in _flatten\r\n    return self._pop(self._flatten_obj(obj))\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 234, in _ref_obj_instance\r\n    return self._flatten_obj_instance(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 375, in _flatten_obj_instance\r\n    return self._getstate(state, data)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 523, in _getstate\r\n    state = self._flatten_obj(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 433, in _flatten_dict_obj\r\n    flatten(k, v, data)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 502, in _flatten_key_value_pair\r\n    data[k] = self._flatten(v)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 160, in _flatten\r\n    return self._pop(self._flatten_obj(obj))\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 179, in _list_recurse\r\n    return [self._flatten(v) for v in obj]\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 179, in <listcomp>\r\n    return [self._flatten(v) for v in obj]\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 160, in _flatten\r\n    return self._pop(self._flatten_obj(obj))\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 234, in _ref_obj_instance\r\n    return self._flatten_obj_instance(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 375, in _flatten_obj_instance\r\n    return self._getstate(state, data)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 523, in _getstate\r\n    state = self._flatten_obj(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 433, in _flatten_dict_obj\r\n    flatten(k, v, data)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 502, in _flatten_key_value_pair\r\n    data[k] = self._flatten(v)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 160, in _flatten\r\n    return self._pop(self._flatten_obj(obj))\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 176, in _flatten_obj\r\n    return flatten_func(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 234, in _ref_obj_instance\r\n    return self._flatten_obj_instance(obj)\r\n  File \"/Users/yomamma/anaconda/envs/p3.5/lib/python3.5/site-packages/jsonpickle/pickler.py\", line 331, in _flatten_obj_instance\r\n    if rv_as_list[0].__name__ == '__newobj__':\r\nAttributeError: '_UnpickleDispatch' object has no attribute '__name__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/178", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/178/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/178/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/178", "id": 253036474, "node_id": "MDU6SXNzdWUyNTMwMzY0NzQ=", "number": 178, "title": "jsonpickle should more clearly warn about security hazard", "user": {"login": "ssbr", "id": 356788, "node_id": "MDQ6VXNlcjM1Njc4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/356788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssbr", "html_url": "https://github.com/ssbr", "followers_url": "https://api.github.com/users/ssbr/followers", "following_url": "https://api.github.com/users/ssbr/following{/other_user}", "gists_url": "https://api.github.com/users/ssbr/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssbr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssbr/subscriptions", "organizations_url": "https://api.github.com/users/ssbr/orgs", "repos_url": "https://api.github.com/users/ssbr/repos", "events_url": "https://api.github.com/users/ssbr/events{/privacy}", "received_events_url": "https://api.github.com/users/ssbr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-25T22:58:45Z", "updated_at": "2017-08-30T05:28:07Z", "closed_at": "2017-08-30T05:28:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For example, there exists a \"safe\" flag that tries to be safe. But does it protect against attacks? Not quite:\r\n\r\n    >>> jsonpickle.unpickler.decode(\"\"\"\r\n    ...     {\"py/object\": \"__builtin__.eval\",\r\n    ...     \"py/initargs\": {\"py/tuple\": [\"__import__('os').system('sh')\"]}}\r\n    ... \"\"\", safe=True)\r\n    sh-4.3$\r\n\r\nor:\r\n\r\n    >>> jsonpickle.unpickler.decode('{\"py/reduce\": [{\"py/function\": \"os.system\"},[\"sh\"],0,0,0]}', safe=True)\r\n    sh-4.3$ \r\n\r\nProbably this should be deprecated.\r\n\r\n\r\nAlso, currently the docs at https://jsonpickle.github.io/ only say (and only halfway down the page):\r\n\r\n> Warning: Loading a JSON string from an untrusted source represents a potential security vulnerability. jsonpickle makes no attempt to sanitize the input.\r\n\r\nThis is too weak. Loading a jsonpickle from an untrusted source is _always_ a security vulnerability.\r\n\r\nCompare with the pickle docs, which are much clearer, and put this right at the very top of the page rather than below the fold:\r\n\r\n> Warning: The pickle module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/176", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/176/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/176/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/176", "id": 249993629, "node_id": "MDU6SXNzdWUyNDk5OTM2Mjk=", "number": 176, "title": "Function jsonpickle.unpickler.loadclass won't work for nested classes", "user": {"login": "mvatkin", "id": 6429759, "node_id": "MDQ6VXNlcjY0Mjk3NTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvatkin", "html_url": "https://github.com/mvatkin", "followers_url": "https://api.github.com/users/mvatkin/followers", "following_url": "https://api.github.com/users/mvatkin/following{/other_user}", "gists_url": "https://api.github.com/users/mvatkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvatkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvatkin/subscriptions", "organizations_url": "https://api.github.com/users/mvatkin/orgs", "repos_url": "https://api.github.com/users/mvatkin/repos", "events_url": "https://api.github.com/users/mvatkin/events{/privacy}", "received_events_url": "https://api.github.com/users/mvatkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-08-14T10:36:56Z", "updated_at": "2018-06-16T07:25:25Z", "closed_at": "2018-06-16T07:25:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example it won't properly work for \r\n```\r\nclass A():\r\n    class C():\r\n        pass\r\n```            \r\n\r\n\"py/object\": \"<some module name>.A.C\"\r\n\r\nCode should be modified \r\n```\r\ndef class_as_attr(cls, cls_names=[]):\r\n    while len(cls_names) > 0:\r\n        name = cls_names.pop()\r\n        cls = getattr(cls, name)\r\n    return cls\r\n\r\ndef load_class(module_and_name):\r\n    module = module_and_name\r\n    cls_names = []\r\n    while True:\r\n        try:\r\n            module, name = module.rsplit('.', 1)\r\n            cls_names.append(name)\r\n        except:\r\n            return None\r\n        try:\r\n            module = util.untranslate_module_name(module)\r\n            __import__(module)\r\n            return class_as_attr(sys.modules[module], cls_names)\r\n        except:\r\n            continue\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/172", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/172/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/172/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/172", "id": 233324885, "node_id": "MDU6SXNzdWUyMzMzMjQ4ODU=", "number": 172, "title": "BSD vs. GPL", "user": {"login": "pkaeding", "id": 13951, "node_id": "MDQ6VXNlcjEzOTUx", "avatar_url": "https://avatars2.githubusercontent.com/u/13951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pkaeding", "html_url": "https://github.com/pkaeding", "followers_url": "https://api.github.com/users/pkaeding/followers", "following_url": "https://api.github.com/users/pkaeding/following{/other_user}", "gists_url": "https://api.github.com/users/pkaeding/gists{/gist_id}", "starred_url": "https://api.github.com/users/pkaeding/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pkaeding/subscriptions", "organizations_url": "https://api.github.com/users/pkaeding/orgs", "repos_url": "https://api.github.com/users/pkaeding/repos", "events_url": "https://api.github.com/users/pkaeding/events{/privacy}", "received_events_url": "https://api.github.com/users/pkaeding/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-02T23:24:39Z", "updated_at": "2017-06-03T00:27:16Z", "closed_at": "2017-06-02T23:54:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI see that you are declaring a BSD license in this project, but then depending on [jsonlib](https://launchpad.net/jsonlib), which is GPL licensed.\r\n\r\nMy understanding of GPL libraries is that if you depend on them, you need to release your code as GPL as well (even if you don't distribute the GPL library yourself). (IANAL, etc)\r\n\r\nAny thoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/171", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/171/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/171/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/171", "id": 226222067, "node_id": "MDU6SXNzdWUyMjYyMjIwNjc=", "number": 171, "title": "Why is it importing 'lib'", "user": {"login": "OGKevin", "id": 17928966, "node_id": "MDQ6VXNlcjE3OTI4OTY2", "avatar_url": "https://avatars3.githubusercontent.com/u/17928966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OGKevin", "html_url": "https://github.com/OGKevin", "followers_url": "https://api.github.com/users/OGKevin/followers", "following_url": "https://api.github.com/users/OGKevin/following{/other_user}", "gists_url": "https://api.github.com/users/OGKevin/gists{/gist_id}", "starred_url": "https://api.github.com/users/OGKevin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OGKevin/subscriptions", "organizations_url": "https://api.github.com/users/OGKevin/orgs", "repos_url": "https://api.github.com/users/OGKevin/repos", "events_url": "https://api.github.com/users/OGKevin/events{/privacy}", "received_events_url": "https://api.github.com/users/OGKevin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-05-04T09:22:57Z", "updated_at": "2017-05-04T21:41:49Z", "closed_at": "2017-05-04T21:41:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhen i try to unpack with ```jsonpickale.decode(object)``` im getting an import error saying \r\n```\r\nmylocals[localname] = __import__(module)\r\nImportError: No module named 'lib'\r\n ```\r\n[From:](https://github.com/jsonpickle/jsonpickle/blob/d38a2595b4849778fe826b813798924a2e2271de/jsonpickle/unpickler.py#L597)\r\n```\r\ndef loadrepr(reprstr):\r\n    \"\"\"Returns an instance of the object from the object's repr() string.\r\n    It involves the dynamic specification of code.\r\n\r\n    >>> obj = loadrepr('datetime/datetime.datetime.now()')\r\n    >>> obj.__class__.__name__\r\n    'datetime'\r\n\r\n    \"\"\"\r\n    module, evalstr = reprstr.split('/')\r\n    mylocals = locals()\r\n    localname = module\r\n    if '.' in localname:\r\n        localname = module.split('.', 1)[0]\r\n    mylocals[localname] = __import__(module)\r\n    return eval(evalstr)\r\n```\r\n\r\nDoes this have to do with a misconfigured \r\n```\r\ndef __repr__(self):\r\n    pass\r\n```\r\nIn the class im trying to pickle ? \r\n\r\nTraceback:\r\n\r\n```\r\nFile \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/django/core/handlers/exception.py\", line 41, in inner\r\n    response = get_response(request)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/django/contrib/auth/decorators.py\", line 23, in _wrapped_view\r\n    return view_func(request, *args, **kwargs)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/BunqAPI/views.py\", line 126, in API\r\n    print(jsonpickle.decode(request.session['API']))\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/__init__.py\", line 152, in decode\r\n    return unpickler.decode(string, backend=backend, keys=keys)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 27, in decode\r\n    return context.restore(backend.decode(string), reset=reset)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 120, in restore\r\n    value = self._restore(obj)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 162, in _restore\r\n    return restore(obj)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 251, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 316, in _restore_object_instance\r\n    return self._restore_object_instance_variables(obj, instance)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 349, in _restore_object_instance_variables\r\n    self._restore_from_dict(obj, instance)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 333, in _restore_from_dict\r\n    value = self._restore(v)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 162, in _restore\r\n    return restore(obj)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 251, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 316, in _restore_object_instance\r\n    return self._restore_object_instance_variables(obj, instance)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 349, in _restore_object_instance_variables\r\n    self._restore_from_dict(obj, instance)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 333, in _restore_from_dict\r\n    value = self._restore(v)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 162, in _restore\r\n    return restore(obj)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 251, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 316, in _restore_object_instance\r\n    return self._restore_object_instance_variables(obj, instance)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 349, in _restore_object_instance_variables\r\n    self._restore_from_dict(obj, instance)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 333, in _restore_from_dict\r\n    value = self._restore(v)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 162, in _restore\r\n    return restore(obj)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 251, in _restore_object\r\n    return self._restore_object_instance(obj, cls)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 316, in _restore_object_instance\r\n    return self._restore_object_instance_variables(obj, instance)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 349, in _restore_object_instance_variables\r\n    self._restore_from_dict(obj, instance)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 333, in _restore_from_dict\r\n    value = self._restore(v)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 162, in _restore\r\n    return restore(obj)\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 233, in _restore_repr\r\n    obj = loadrepr(obj[tags.REPR])\r\n  File \"/Users/KevinH/Desktop/Money-Web-app/BunqWebApp/venv/lib/python3.5/site-packages/jsonpickle/unpickler.py\", line 578, in loadrepr\r\n    mylocals[localname] = __import__(module)\r\nImportError: No module named 'lib'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/166", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/166/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/166/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/166", "id": 217303827, "node_id": "MDU6SXNzdWUyMTczMDM4Mjc=", "number": 166, "title": "TravisCI inactive?", "user": {"login": "marscher", "id": 170287, "node_id": "MDQ6VXNlcjE3MDI4Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/170287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marscher", "html_url": "https://github.com/marscher", "followers_url": "https://api.github.com/users/marscher/followers", "following_url": "https://api.github.com/users/marscher/following{/other_user}", "gists_url": "https://api.github.com/users/marscher/gists{/gist_id}", "starred_url": "https://api.github.com/users/marscher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marscher/subscriptions", "organizations_url": "https://api.github.com/users/marscher/orgs", "repos_url": "https://api.github.com/users/marscher/repos", "events_url": "https://api.github.com/users/marscher/events{/privacy}", "received_events_url": "https://api.github.com/users/marscher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-27T16:34:26Z", "updated_at": "2017-03-30T15:47:50Z", "closed_at": "2017-03-30T15:47:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be preferable to run the tests automatically on changes/PRs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/165", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/165/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/165/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/165", "id": 208462354, "node_id": "MDU6SXNzdWUyMDg0NjIzNTQ=", "number": 165, "title": "List of Enum values fails", "user": {"login": "hippysurfer", "id": 1172398, "node_id": "MDQ6VXNlcjExNzIzOTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1172398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hippysurfer", "html_url": "https://github.com/hippysurfer", "followers_url": "https://api.github.com/users/hippysurfer/followers", "following_url": "https://api.github.com/users/hippysurfer/following{/other_user}", "gists_url": "https://api.github.com/users/hippysurfer/gists{/gist_id}", "starred_url": "https://api.github.com/users/hippysurfer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hippysurfer/subscriptions", "organizations_url": "https://api.github.com/users/hippysurfer/orgs", "repos_url": "https://api.github.com/users/hippysurfer/repos", "events_url": "https://api.github.com/users/hippysurfer/events{/privacy}", "received_events_url": "https://api.github.com/users/hippysurfer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-17T14:45:12Z", "updated_at": "2020-04-19T08:08:18Z", "closed_at": "2020-04-19T08:08:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nThis might be a duplicate of issue #140 , if so I apologies, but this is a simpler test case.\r\n\r\nIt looks like something is going wrong but I can't pin down whether it is the encoder or decoder. I have spent a few hours trying to trace this through but I have not come up with a fix.\r\n\r\nWhen the JSON is decoded, the second element of the list should be a reference to the C.VALUE object, but instead it is a raw list [1,2,3].\r\n\r\nHere is a minimal test case.\r\n\r\nThis is a simple workaround, which is to use a tuple for the VALUE list rather than a list but I thought it worth reporting the issue.\r\n\r\n```\r\nfrom enum import Enum\r\nfrom jsonpickle import encode, decode\r\n\r\n\r\nclass C(Enum):\r\n    VALUE = [1, 2, 3]\r\n\r\n\r\nmy_list = [C.VALUE, C.VALUE]\r\n\r\nassert decode(encode(my_list))[1] == my_list[1]\r\n```\r\n\r\nBest regards and thank you for jsonpickle - it is fantastically useful.\r\n\r\nRichard\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/164", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/164/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/164/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/164", "id": 207357507, "node_id": "MDU6SXNzdWUyMDczNTc1MDc=", "number": 164, "title": "encode() fails with \"TypeError: string indices must be integers, not str\"", "user": {"login": "edpark", "id": 6496, "node_id": "MDQ6VXNlcjY0OTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/6496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edpark", "html_url": "https://github.com/edpark", "followers_url": "https://api.github.com/users/edpark/followers", "following_url": "https://api.github.com/users/edpark/following{/other_user}", "gists_url": "https://api.github.com/users/edpark/gists{/gist_id}", "starred_url": "https://api.github.com/users/edpark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edpark/subscriptions", "organizations_url": "https://api.github.com/users/edpark/orgs", "repos_url": "https://api.github.com/users/edpark/repos", "events_url": "https://api.github.com/users/edpark/events{/privacy}", "received_events_url": "https://api.github.com/users/edpark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-02-13T22:22:55Z", "updated_at": "2017-07-17T03:16:10Z", "closed_at": "2017-07-17T03:16:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to call encode on an object of mine fails with a TypeError on line 386 in pickler.py:\r\n\r\n```\r\nFile \"jsonpickle/pickler.py\", line 386, in _flatten_obj_instance\r\n    data[tags.REDUCE][3] = data[tags.REDUCE][3][tags.ITERATOR]\r\n```\r\n\r\nThe value of data in this case is:\r\n```\r\n{'py/reduce': [\"<type 'frozenset'>\", '([],)', 'None', 'None', 'None']}\r\n```\r\n\r\nSo it makes sense that I'm getting a TypeError but how is the value 'None' in the first place?\r\n\r\nIf I change my code from:\r\n```\r\njsonpickle.encode(dto, unpicklable=False, max_depth=8)\r\n```\r\nto\r\n```\r\njsonpickle.encode(dto, unpicklable=True, max_depth=8)\r\n```\r\nthen it works.\r\n\r\nAnyone know why this  would be happening?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/163", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/163/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/163/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/163", "id": 204723783, "node_id": "MDU6SXNzdWUyMDQ3MjM3ODM=", "number": 163, "title": "Unpickling collection.deque fails with ValueError on Python 3.6 ", "user": {"login": "ambv", "id": 55281, "node_id": "MDQ6VXNlcjU1Mjgx", "avatar_url": "https://avatars1.githubusercontent.com/u/55281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ambv", "html_url": "https://github.com/ambv", "followers_url": "https://api.github.com/users/ambv/followers", "following_url": "https://api.github.com/users/ambv/following{/other_user}", "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}", "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ambv/subscriptions", "organizations_url": "https://api.github.com/users/ambv/orgs", "repos_url": "https://api.github.com/users/ambv/repos", "events_url": "https://api.github.com/users/ambv/events{/privacy}", "received_events_url": "https://api.github.com/users/ambv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-02-01T22:23:35Z", "updated_at": "2017-04-13T21:32:56Z", "closed_at": "2017-03-29T06:36:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n======================================================================\r\nERROR: Make sure we can handle collections.deque\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/private/tmp/jsonpickle/jsonpickle/tests/object_test.py\", line 315, in test_deque_roundtrip\r\n    new_deque = jsonpickle.decode(encoded)\r\n  File \"/private/tmp/jsonpickle/jsonpickle/jsonpickle/__init__.py\", line 152, in decode\r\n    return unpickler.decode(string, backend=backend, keys=keys)\r\n  File \"/private/tmp/jsonpickle/jsonpickle/jsonpickle/unpickler.py\", line 27, in decode\r\n    return context.restore(backend.decode(string), reset=reset)\r\n  File \"/private/tmp/jsonpickle/jsonpickle/jsonpickle/unpickler.py\", line 120, in restore\r\n    value = self._restore(obj)\r\n  File \"/private/tmp/jsonpickle/jsonpickle/jsonpickle/unpickler.py\", line 162, in _restore\r\n    return restore(obj)\r\n  File \"/private/tmp/jsonpickle/jsonpickle/jsonpickle/unpickler.py\", line 243, in _restore_object\r\n    instance = handler(self).restore(obj)\r\n  File \"/private/tmp/jsonpickle/jsonpickle/jsonpickle/handlers.py\", line 218, in restore\r\n    factory, args = [restore(i, reset=False) for i in data['__reduce__']]\r\nValueError: too many values to unpack (expected 2)\r\n\r\n----------------------------------------------------------------------\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/162", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/162/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/162/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/162", "id": 204181732, "node_id": "MDU6SXNzdWUyMDQxODE3MzI=", "number": 162, "title": "jsonpickle vulnerable to shell injection", "user": {"login": "kevinlondon", "id": 1216869, "node_id": "MDQ6VXNlcjEyMTY4Njk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1216869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinlondon", "html_url": "https://github.com/kevinlondon", "followers_url": "https://api.github.com/users/kevinlondon/followers", "following_url": "https://api.github.com/users/kevinlondon/following{/other_user}", "gists_url": "https://api.github.com/users/kevinlondon/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinlondon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinlondon/subscriptions", "organizations_url": "https://api.github.com/users/kevinlondon/orgs", "repos_url": "https://api.github.com/users/kevinlondon/repos", "events_url": "https://api.github.com/users/kevinlondon/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinlondon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-31T01:37:17Z", "updated_at": "2017-01-31T01:37:50Z", "closed_at": "2017-01-31T01:37:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I wrote a [brief post](https://www.kevinlondon.com/2017/01/30/dangerous-python-functions-pt3.html) on how jsonpickle has the same vulnerability as Python's pickle module. Perhaps include a note about the security implications of using this package?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/161", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/161/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/161/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/161", "id": 200193273, "node_id": "MDU6SXNzdWUyMDAxOTMyNzM=", "number": 161, "title": "jsonpickle on python 3.5 decode to dict instead of object", "user": {"login": "ifanchu", "id": 2321634, "node_id": "MDQ6VXNlcjIzMjE2MzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2321634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ifanchu", "html_url": "https://github.com/ifanchu", "followers_url": "https://api.github.com/users/ifanchu/followers", "following_url": "https://api.github.com/users/ifanchu/following{/other_user}", "gists_url": "https://api.github.com/users/ifanchu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ifanchu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ifanchu/subscriptions", "organizations_url": "https://api.github.com/users/ifanchu/orgs", "repos_url": "https://api.github.com/users/ifanchu/repos", "events_url": "https://api.github.com/users/ifanchu/events{/privacy}", "received_events_url": "https://api.github.com/users/ifanchu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-11T20:03:01Z", "updated_at": "2017-12-17T22:29:48Z", "closed_at": "2017-01-11T21:05:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using jsonpickle to encode/decode complex classes in my projects. \r\njsonpickle works perfectly in python 2.7, but now I need to make my code compatible for both python 2.7 and python 3.5.2.\r\n\r\nI have a simple unit test for this and it works fine in 2.7 but it decodes to a dict instead of object in 3.5.2, I must be missing something, please help. \r\n\r\n    class TestClass(object):\r\n        def __init__(self):\r\n            self.attr2 = [1, 2, 3, 4]\r\n\r\n\r\n    class TestJsonpickle(unittest.TestCase):\r\n        def test_jsonpickle(self):\r\n            import jsonpickle\r\n\r\n            obj = TestClass()\r\n            encoded = jsonpickle.encode(obj)\r\n            robj = jsonpickle.decode(encoded)\r\n            self.assertEqual(obj.__class__.__name__, robj.__class__.__name__)\r\n\r\nThe encoded string is \r\n\r\n    '{\"attr2\": [1, 2, 3, 4], \"py/object\": \"tests.unittests.test_tasking.TestClass\"}'\r\n\r\njsonpickle version is 0.9.4", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/160", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/160/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/160/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/160", "id": 199871268, "node_id": "MDU6SXNzdWUxOTk4NzEyNjg=", "number": 160, "title": "Local module queue being picked up by jsonpickle rather than jsonpickle's queue module", "user": {"login": "davidhariri", "id": 5245670, "node_id": "MDQ6VXNlcjUyNDU2NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5245670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhariri", "html_url": "https://github.com/davidhariri", "followers_url": "https://api.github.com/users/davidhariri/followers", "following_url": "https://api.github.com/users/davidhariri/following{/other_user}", "gists_url": "https://api.github.com/users/davidhariri/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhariri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhariri/subscriptions", "organizations_url": "https://api.github.com/users/davidhariri/orgs", "repos_url": "https://api.github.com/users/davidhariri/repos", "events_url": "https://api.github.com/users/davidhariri/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhariri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-10T16:39:50Z", "updated_at": "2017-01-11T06:09:23Z", "closed_at": "2017-01-11T06:09:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't use jsonpickle because we have a module in the root of our project called queue:\r\n```\r\n  File \"/Users/davidhariri/Development/Ada/api/env/lib/python2.7/site-packages/jsonpickle/handlers.py\", line 267, in <module>\r\n    QueueHandler.handles(queue.Queue)\r\nAttributeError: 'module' object has no attribute 'Queue'\r\n```\r\nCan we consider renaming jsonpickle's queue module to \"jsp_queue\" or some other more localized name?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/156", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/156/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/156/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/156", "id": 196489111, "node_id": "MDU6SXNzdWUxOTY0ODkxMTE=", "number": 156, "title": "subclasses of dict lose attributes", "user": {"login": "evilotto", "id": 10535854, "node_id": "MDQ6VXNlcjEwNTM1ODU0", "avatar_url": "https://avatars2.githubusercontent.com/u/10535854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evilotto", "html_url": "https://github.com/evilotto", "followers_url": "https://api.github.com/users/evilotto/followers", "following_url": "https://api.github.com/users/evilotto/following{/other_user}", "gists_url": "https://api.github.com/users/evilotto/gists{/gist_id}", "starred_url": "https://api.github.com/users/evilotto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evilotto/subscriptions", "organizations_url": "https://api.github.com/users/evilotto/orgs", "repos_url": "https://api.github.com/users/evilotto/repos", "events_url": "https://api.github.com/users/evilotto/events{/privacy}", "received_events_url": "https://api.github.com/users/evilotto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-19T18:37:41Z", "updated_at": "2017-12-22T09:40:43Z", "closed_at": "2017-12-22T09:38:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a class has `dict` as a superclass, instance attributes do not get encoded.  In the below code, this ends up with a decoded object missing an attribute.   Other built-in types as superclasses work fine.\r\n\r\n```\r\nimport jsonpickle\r\n\r\nclass A(dict):\r\n    def __init__(self):\r\n        self.a = 1\r\n    \r\n    def sa(self, v):\r\n        self.a = v\r\n\r\n    def ga(self):\r\n        return self.a\r\n\r\n\r\nx = A()\r\nprint(x)\r\nprint(x.ga())\r\n\r\nprint(jsonpickle.encode(x))\r\n\r\ny = jsonpickle.decode(jsonpickle.encode(x))\r\nprint(y)\r\nprint(y.ga())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/153", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/153/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/153/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/153", "id": 190565558, "node_id": "MDU6SXNzdWUxOTA1NjU1NTg=", "number": 153, "title": "TypeError reconstructing datetime on Python 3.6", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-20T15:50:10Z", "updated_at": "2016-11-22T21:52:28Z", "closed_at": "2016-11-22T21:52:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Starting with Python 3.6, jsonpickle fails to reconstruct a datetime:\r\n\r\n```\r\n$ python -m rwt jsonpickle\r\nCollecting jsonpickle\r\nInstalling collected packages: jsonpickle\r\nSuccessfully installed jsonpickle-0.9.3\r\nPython 3.6.0b3 (v3.6.0b3:8345e066c0ed, Oct 31 2016, 18:05:23) \r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import jsonpickle\r\n>>> import datetime\r\n>>> jsonpickle.loads(jsonpickle.dumps(datetime.datetime.now()))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-rw7fw0wi/jsonpickle/__init__.py\", line 152, in decode\r\n    return unpickler.decode(string, backend=backend, keys=keys)\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-rw7fw0wi/jsonpickle/unpickler.py\", line 26, in decode\r\n    return context.restore(backend.decode(string), reset=reset)\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-rw7fw0wi/jsonpickle/unpickler.py\", line 119, in restore\r\n    value = self._restore(obj)\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-rw7fw0wi/jsonpickle/unpickler.py\", line 159, in _restore\r\n    return restore(obj)\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-rw7fw0wi/jsonpickle/unpickler.py\", line 236, in _restore_object\r\n    instance = handler(self).restore(obj)\r\n  File \"/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-rw7fw0wi/jsonpickle/handlers.py\", line 173, in restore\r\n    return cls.__new__(cls, *params)\r\nTypeError: an integer is required (got type bytes)\r\n```\r\n\r\nI suspect this might be a regression in Python itself.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/152", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/152/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/152/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/152", "id": 184423756, "node_id": "MDU6SXNzdWUxODQ0MjM3NTY=", "number": 152, "title": "jsonpickle.encode seems to pick random handler for datetime.datetime", "user": {"login": "WRRB", "id": 9335264, "node_id": "MDQ6VXNlcjkzMzUyNjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9335264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WRRB", "html_url": "https://github.com/WRRB", "followers_url": "https://api.github.com/users/WRRB/followers", "following_url": "https://api.github.com/users/WRRB/following{/other_user}", "gists_url": "https://api.github.com/users/WRRB/gists{/gist_id}", "starred_url": "https://api.github.com/users/WRRB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WRRB/subscriptions", "organizations_url": "https://api.github.com/users/WRRB/orgs", "repos_url": "https://api.github.com/users/WRRB/repos", "events_url": "https://api.github.com/users/WRRB/events{/privacy}", "received_events_url": "https://api.github.com/users/WRRB/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-10-21T08:07:29Z", "updated_at": "2016-10-21T13:16:18Z", "closed_at": "2016-10-21T13:16:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently refactoring some code on a separate branch in my project. Eventually I open a file with a json inside, which contains following object:\n\n`\"start_date\": {\n            \"py/object\": \"datetime.datetime\",\n            \"iso\": \"2016-05-19T00:00:00.000+00:00\"\n          }`\n\nIn my master branch, the entire json gets encoded just fine. But in my refactor branch I get a KeyError on '**reduce**'. I noticed that in my master branch jsonpickle is using IsoDateTimeHandler and in my refactor branch jsonpickle is using DateTimeHandler.  \n\nThe only thing that is different in the refactor branch is the filepath. \n\nAny ideas on how to handle this so I don't get the keyerror?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/151", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/151/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/151/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/151", "id": 174009871, "node_id": "MDU6SXNzdWUxNzQwMDk4NzE=", "number": 151, "title": "Serializing {0: \"blahblah\"} results in deserialized {\"0\": \"blahblah\"}.", "user": {"login": "franekp", "id": 9804230, "node_id": "MDQ6VXNlcjk4MDQyMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9804230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/franekp", "html_url": "https://github.com/franekp", "followers_url": "https://api.github.com/users/franekp/followers", "following_url": "https://api.github.com/users/franekp/following{/other_user}", "gists_url": "https://api.github.com/users/franekp/gists{/gist_id}", "starred_url": "https://api.github.com/users/franekp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/franekp/subscriptions", "organizations_url": "https://api.github.com/users/franekp/orgs", "repos_url": "https://api.github.com/users/franekp/repos", "events_url": "https://api.github.com/users/franekp/events{/privacy}", "received_events_url": "https://api.github.com/users/franekp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-30T12:47:58Z", "updated_at": "2016-09-02T11:33:10Z", "closed_at": "2016-09-02T11:33:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Bug: jsonpickle.decode(jsonpickle.encode({0: \"blahblah\"})) != {0: \"blahblah\"}\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/148", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/148/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/148/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/148", "id": 164042237, "node_id": "MDU6SXNzdWUxNjQwNDIyMzc=", "number": 148, "title": "Add ability to decode an object from a dict/json string based on provided class", "user": {"login": "nyxcalamity", "id": 196680, "node_id": "MDQ6VXNlcjE5NjY4MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/196680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyxcalamity", "html_url": "https://github.com/nyxcalamity", "followers_url": "https://api.github.com/users/nyxcalamity/followers", "following_url": "https://api.github.com/users/nyxcalamity/following{/other_user}", "gists_url": "https://api.github.com/users/nyxcalamity/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyxcalamity/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyxcalamity/subscriptions", "organizations_url": "https://api.github.com/users/nyxcalamity/orgs", "repos_url": "https://api.github.com/users/nyxcalamity/repos", "events_url": "https://api.github.com/users/nyxcalamity/events{/privacy}", "received_events_url": "https://api.github.com/users/nyxcalamity/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-07-06T10:08:46Z", "updated_at": "2018-09-09T11:48:04Z", "closed_at": "2018-02-02T07:34:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would be nice to have some functionality that allows object recreation based on provided class. For example:\n\n```\nclass Thing(object):\n    def __init__(self, name):\n        self.name = name\n\nobj = Thing('Awesome')\nimport jsonpickle\noneway = jsonpickle.encode(obj, unpicklable=False)\nresult = jsonpickle.decode(oneway, Thing) # or Thing.__class__\nassert obj.name == result.name\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/147", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/147/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/147/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/147", "id": 163903353, "node_id": "MDU6SXNzdWUxNjM5MDMzNTM=", "number": 147, "title": "decoding sklearn models using jsonpickle fails", "user": {"login": "bharatl", "id": 9513328, "node_id": "MDQ6VXNlcjk1MTMzMjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/9513328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bharatl", "html_url": "https://github.com/bharatl", "followers_url": "https://api.github.com/users/bharatl/followers", "following_url": "https://api.github.com/users/bharatl/following{/other_user}", "gists_url": "https://api.github.com/users/bharatl/gists{/gist_id}", "starred_url": "https://api.github.com/users/bharatl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bharatl/subscriptions", "organizations_url": "https://api.github.com/users/bharatl/orgs", "repos_url": "https://api.github.com/users/bharatl/repos", "events_url": "https://api.github.com/users/bharatl/events{/privacy}", "received_events_url": "https://api.github.com/users/bharatl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-07-05T17:26:25Z", "updated_at": "2018-02-09T10:22:18Z", "closed_at": "2016-09-21T09:16:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to _encode_ and _decode_ **scikit-learn** ML model using **jsonpickle**. Encoding works fine, but when I try to decode it throws me an error saying  \n\n```\nAttributeError(\"'dict' object has no attribute '__name__'\",) \n{'py/object': '__builtin__.builtin_function_or_method'}\n```\n\nhere is the sample code \n\n```\nfrom sklearn import svm\nimport jsonpickle\nfrom sklearn.datasets import load_iris\nfrom sklearn.neighbors import KNeighborsClassifier\n\nif __name__ == '__main__':\n    iris = load_iris()\n    X = iris.data\n    y = iris.target\n    knn = KNeighborsClassifier(n_neighbors=5)\n    knn.fit(X, y)\n    data = jsonpickle.encode(knn)\n    pklload = jsonpickle.decode(data)\n```\n\nERROR\n\n```\n    if f == tags.NEWOBJ or f.__name__ == '__newobj__':\nAttributeError: 'dict' object has no attribute '__name__'\n```\n\nCan Jsonpickle be used for serializing sklearn model's  to Json?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/143", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/143/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/143/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/143", "id": 142004395, "node_id": "MDU6SXNzdWUxNDIwMDQzOTU=", "number": 143, "title": "jsonpickle fails for hd5 data", "user": {"login": "jasonzliang", "id": 1191217, "node_id": "MDQ6VXNlcjExOTEyMTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1191217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonzliang", "html_url": "https://github.com/jasonzliang", "followers_url": "https://api.github.com/users/jasonzliang/followers", "following_url": "https://api.github.com/users/jasonzliang/following{/other_user}", "gists_url": "https://api.github.com/users/jasonzliang/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonzliang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonzliang/subscriptions", "organizations_url": "https://api.github.com/users/jasonzliang/orgs", "repos_url": "https://api.github.com/users/jasonzliang/repos", "events_url": "https://api.github.com/users/jasonzliang/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonzliang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-18T23:57:09Z", "updated_at": "2016-03-19T22:44:34Z", "closed_at": "2016-03-19T22:44:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to to serialize some raw bytes from a hd5 file with jsonpickle and I noticed what I get after decoding is not the same as what the original data was before encoding. I am using jsonpickle 0.93 from the pypi repository. Please see the example below:\n\nimport jsonpickle\norig = \"\\x89HDF\\r\\n\\x1a\\n\\x00\\x00\\x00\\x00\\x00\\x08\\x08\\x00\\x04\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xffh\\x848\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00`\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xa8\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x00\"\nencoded = jsonpickle.encode(orig)\ndecoded = jsonpickle.decode(encoded)\nprint orig == decoded #prints False\n\nThis does not happen when using regular pickle:\n\nimport cPickle as pickle\nencoded = pickle.dumps(orig)\ndecoded = pickle.loads(encoded)\nprint orig == decoded #prints True\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/142", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/142/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/142/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/142", "id": 138934263, "node_id": "MDU6SXNzdWUxMzg5MzQyNjM=", "number": 142, "title": "test_ndarray_roundtrip failing with recent Python and Numpy on np.rec.array objects", "user": {"login": "rhertzog", "id": 1013915, "node_id": "MDQ6VXNlcjEwMTM5MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1013915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhertzog", "html_url": "https://github.com/rhertzog", "followers_url": "https://api.github.com/users/rhertzog/followers", "following_url": "https://api.github.com/users/rhertzog/following{/other_user}", "gists_url": "https://api.github.com/users/rhertzog/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhertzog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhertzog/subscriptions", "organizations_url": "https://api.github.com/users/rhertzog/orgs", "repos_url": "https://api.github.com/users/rhertzog/repos", "events_url": "https://api.github.com/users/rhertzog/events{/privacy}", "received_events_url": "https://api.github.com/users/rhertzog/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-03-07T09:45:28Z", "updated_at": "2016-03-09T08:57:55Z", "closed_at": "2016-03-09T08:57:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "We got this report in Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=812114\nAnd I confirm that the failure is real, I pinned it down to the np.rec.array() objects in the test_ndarray_roundtrip test. But I have no idea what changed to explain this.\n\n```\n$ tests/runtests.py\n[...]\ntest_ndarray_roundtrip (numpy_test.NumpyTestCase) ... /usr/lib/python2.7/dist-packages/numpy/testing/utils.py:661: FutureWarning: In the future, 'NAT == x' and 'x == NAT' will always be False.\n  return comparison(*args, **kwargs)\nERROR\n[...]\n======================================================================\nERROR: test_ndarray_roundtrip (numpy_test.NumpyTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/rhertzog/deb/pkg/jsonpickle/tests/numpy_test.py\", line 103, in test_ndarray_roundtrip\n    decoded = self.roundtrip(array)\n  File \"/home/rhertzog/deb/pkg/jsonpickle/tests/numpy_test.py\", line 32, in roundtrip\n    return jsonpickle.decode(jsonpickle.encode(obj))\n  File \"/home/rhertzog/deb/pkg/jsonpickle/jsonpickle/__init__.py\", line 148, in decode\n    return unpickler.decode(string, backend=backend, keys=keys)\n  File \"/home/rhertzog/deb/pkg/jsonpickle/jsonpickle/unpickler.py\", line 26, in decode\n    return context.restore(backend.decode(string), reset=reset)\n  File \"/home/rhertzog/deb/pkg/jsonpickle/jsonpickle/unpickler.py\", line 119, in restore\n    value = self._restore(obj)\n  File \"/home/rhertzog/deb/pkg/jsonpickle/jsonpickle/unpickler.py\", line 159, in _restore\n    return restore(obj)\n  File \"/home/rhertzog/deb/pkg/jsonpickle/jsonpickle/unpickler.py\", line 235, in _restore_object\n    instance = handler(self).restore(obj)\n  File \"/home/rhertzog/deb/pkg/jsonpickle/jsonpickle/ext/numpy.py\", line 49, in restore\n    dtype = self.restore_dtype(data)\n  File \"/home/rhertzog/deb/pkg/jsonpickle/jsonpickle/ext/numpy.py\", line 19, in restore_dtype\n    return np.dtype(dtype)\n  File \"/usr/lib/python2.7/dist-packages/numpy/core/_internal.py\", line 195, in _commastring\n    newitem = (dtype, eval(repeats))\n  File \"<string>\", line 1\n    (\n    ^\nSyntaxError: unexpected EOF while parsing\n```\n\nIn the first failing case, dtype is equal to \"(numpy.record, [('f0', '>i2'), ('f1', 'S3'), ('f2', '>i4')])\".\n\nWe have NumPy 1.11.0~b3-1 in Debian.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/141", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/141/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/141/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/141", "id": 125801796, "node_id": "MDU6SXNzdWUxMjU4MDE3OTY=", "number": 141, "title": "problem convert list object to JSON string", "user": {"login": "raminfp", "id": 10054759, "node_id": "MDQ6VXNlcjEwMDU0NzU5", "avatar_url": "https://avatars2.githubusercontent.com/u/10054759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raminfp", "html_url": "https://github.com/raminfp", "followers_url": "https://api.github.com/users/raminfp/followers", "following_url": "https://api.github.com/users/raminfp/following{/other_user}", "gists_url": "https://api.github.com/users/raminfp/gists{/gist_id}", "starred_url": "https://api.github.com/users/raminfp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raminfp/subscriptions", "organizations_url": "https://api.github.com/users/raminfp/orgs", "repos_url": "https://api.github.com/users/raminfp/repos", "events_url": "https://api.github.com/users/raminfp/events{/privacy}", "received_events_url": "https://api.github.com/users/raminfp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-01-10T05:54:49Z", "updated_at": "2016-03-01T06:12:37Z", "closed_at": "2016-03-01T06:12:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "output a record list sqlalchemy : \n\n{\"py/object\": \"Models.UserModel.\", \"_sa_instance_state\": {\"py/object\": \"sqlalchemy.orm.state.InstanceState\", \"py/state\": {\"instance\": {\"py/id\": 0}, \"committed_state\": {}, \"class_\": {\"py/type\": \"Models.UserModel.\"}, \"manager\": {\"py/object\": \"sqlalchemy.orm.instrumentation._SerializeManager\", \"class_\": {\"py/type\": \"Models.UserModel.Student\"}}, \"key\": {\"py/tuple\": [{\"py/type\": \"Models.UserModel.Student\"}, {\"py/tuple\": [1]}]}, \"expired_attributes\": {\"py/set\": []}}}, \"name\": \"ramin\", \"fullname\": \"eee\", \"password\": \"1234345\", \"id\": 1}\n\njust i need : \n{\"name\": \"ramin\", \"fullname\": \"eee\", \"password\": \"1234345\", \"id\": 1} how to use?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/140", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/140/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/140/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/140", "id": 123501679, "node_id": "MDU6SXNzdWUxMjM1MDE2Nzk=", "number": 140, "title": "Enum serializing error - python3.5, v0.9.2", "user": {"login": "dethoter", "id": 1511447, "node_id": "MDQ6VXNlcjE1MTE0NDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1511447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dethoter", "html_url": "https://github.com/dethoter", "followers_url": "https://api.github.com/users/dethoter/followers", "following_url": "https://api.github.com/users/dethoter/following{/other_user}", "gists_url": "https://api.github.com/users/dethoter/gists{/gist_id}", "starred_url": "https://api.github.com/users/dethoter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dethoter/subscriptions", "organizations_url": "https://api.github.com/users/dethoter/orgs", "repos_url": "https://api.github.com/users/dethoter/repos", "events_url": "https://api.github.com/users/dethoter/events{/privacy}", "received_events_url": "https://api.github.com/users/dethoter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-22T15:30:26Z", "updated_at": "2020-04-24T04:44:18Z", "closed_at": "2020-04-24T04:44:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "jsonpickle encodes list of an objects incorrectly if two neighboring objects contain the same Enum value.\n\nTest code:\n\n``` python\nimport jsonpickle\nfrom enum import Enum\n\n\nclass Type(Enum):\n    ONE = 1\n    TWO = 2\n\n\nclass SomeObject:\n    def __init__(self, num, type):\n        self.n = num\n        self.t = type\n\n    def __repr__(self):\n        return 'SomeObject(n={}, t={})'.format(self.n, self.t)\n\n\nif __name__ == '__main__':\n    a = SomeObject(1, Type.ONE)\n    b = SomeObject(2, Type.ONE)\n    c = SomeObject(3, Type.TWO)\n\n    # Different enum value\n    l1 = [a, c]\n    encoded = jsonpickle.encode(l1)\n    decoded = jsonpickle.decode(encoded)\n    print(decoded)\n\n    # Same enum value\n    l2 = [a, b]\n    encoded = jsonpickle.encode(l2)  # error\n    decoded = jsonpickle.decode(encoded)\n    print(decoded)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/136", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/136/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/136/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/136", "id": 114063160, "node_id": "MDU6SXNzdWUxMTQwNjMxNjA=", "number": 136, "title": "supress __repr__ of dict keys to send directly to demjson", "user": {"login": "gabyx", "id": 647437, "node_id": "MDQ6VXNlcjY0NzQzNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/647437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabyx", "html_url": "https://github.com/gabyx", "followers_url": "https://api.github.com/users/gabyx/followers", "following_url": "https://api.github.com/users/gabyx/following{/other_user}", "gists_url": "https://api.github.com/users/gabyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabyx/subscriptions", "organizations_url": "https://api.github.com/users/gabyx/orgs", "repos_url": "https://api.github.com/users/gabyx/repos", "events_url": "https://api.github.com/users/gabyx/events{/privacy}", "received_events_url": "https://api.github.com/users/gabyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-29T14:36:13Z", "updated_at": "2015-11-03T11:41:12Z", "closed_at": "2015-11-03T03:10:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can we supress the **repr** of a non-string key?\n\nCurrently thats not possible to send \n\n{2:3}  directly to the encoder which can handle non-string keys such as demjson\n\nthe keys=True is not want I want. I want no change in the dict key, and push that directly to the encoder..\n\nIs that possible?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/135", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/135/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/135/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/135", "id": 112667507, "node_id": "MDU6SXNzdWUxMTI2Njc1MDc=", "number": 135, "title": "Problem with list of Enums", "user": {"login": "Umqra", "id": 1395040, "node_id": "MDQ6VXNlcjEzOTUwNDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1395040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Umqra", "html_url": "https://github.com/Umqra", "followers_url": "https://api.github.com/users/Umqra/followers", "following_url": "https://api.github.com/users/Umqra/following{/other_user}", "gists_url": "https://api.github.com/users/Umqra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Umqra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Umqra/subscriptions", "organizations_url": "https://api.github.com/users/Umqra/orgs", "repos_url": "https://api.github.com/users/Umqra/repos", "events_url": "https://api.github.com/users/Umqra/events{/privacy}", "received_events_url": "https://api.github.com/users/Umqra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-21T19:59:19Z", "updated_at": "2015-11-14T22:12:35Z", "closed_at": "2015-11-14T22:12:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "This simple code cause `IndexError: list index out of range` ([full stack-trace](http://pastebin.com/D450xBUt))\n\n``` python\nimport jsonpickle\nimport enum\n\nclass TestEnum(enum.Enum):\n    Test = 1\n\ns = [TestEnum.Test, TestEnum.Test]\ndumps = jsonpickle.dumps(s)\nloads = jsonpickle.loads(dumps)\n```\n\nJsonpickle dumps first `TestEnum.Test` to `{\"py/reduce\": ...}` and second `TestEnum.Test` to `{\"py/id\": 1}`. But when jsonpickle decode first enum, it doesn't create reference to this object and it causes `IndexError` while parsing second enum.\n\nIt seems, at the moment jsonpickle can't serialize this list... Or am i wrong?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/130", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/130/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/130/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/130", "id": 96361852, "node_id": "MDU6SXNzdWU5NjM2MTg1Mg==", "number": 130, "title": "Can't pickle UUID", "user": {"login": "sontek", "id": 151924, "node_id": "MDQ6VXNlcjE1MTkyNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/151924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sontek", "html_url": "https://github.com/sontek", "followers_url": "https://api.github.com/users/sontek/followers", "following_url": "https://api.github.com/users/sontek/following{/other_user}", "gists_url": "https://api.github.com/users/sontek/gists{/gist_id}", "starred_url": "https://api.github.com/users/sontek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sontek/subscriptions", "organizations_url": "https://api.github.com/users/sontek/orgs", "repos_url": "https://api.github.com/users/sontek/repos", "events_url": "https://api.github.com/users/sontek/events{/privacy}", "received_events_url": "https://api.github.com/users/sontek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-21T16:36:13Z", "updated_at": "2015-08-12T09:42:25Z", "closed_at": "2015-08-12T09:42:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n>>> import jsonpickle\n>>> import uuid\n>>> data = uuid.uuid4()\n>>> encoded = jsonpickle.encode(data)\n>>> decoded = jsonpickle.decode(encoded)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/sontek/venvs/smlib.cache/local/lib/python2.7/site-packages/jsonpickle/__init__.py\", line 148, in decode\n    return unpickler.decode(string, backend=backend, keys=keys)\n  File \"/home/sontek/venvs/smlib.cache/local/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 26, in decode\n    return context.restore(backend.decode(string), reset=reset)\n  File \"/home/sontek/venvs/smlib.cache/local/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 119, in restore\n    value = self._restore(obj)\n  File \"/home/sontek/venvs/smlib.cache/local/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 159, in _restore\n    return restore(obj)\n  File \"/home/sontek/venvs/smlib.cache/local/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 243, in _restore_object\n    return self._restore_object_instance(obj, cls)\n  File \"/home/sontek/venvs/smlib.cache/local/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 308, in _restore_object_instance\n    return self._restore_object_instance_variables(obj, instance)\n  File \"/home/sontek/venvs/smlib.cache/local/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 337, in _restore_object_instance_variables\n    self._restore_from_dict(obj, instance)\n  File \"/home/sontek/venvs/smlib.cache/local/lib/python2.7/site-packages/jsonpickle/unpickler.py\", line 326, in _restore_from_dict\n    setattr(instance, k, value)\n  File \"/usr/lib/python2.7/uuid.py\", line 195, in __setattr__\n    raise TypeError('UUID objects are immutable')\nTypeError: UUID objects are immutable\n\n```\n\nI can do it manually though:\n\n```\n>>> import json\n>>> from uuid import UUID\n>>> UUID(int=json.loads(encoded)['int'])\nUUID('c88e579d-c9dc-43a9-9991-9b4dc4aeb6f4')\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/127", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/127/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/127/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/127", "id": 72065120, "node_id": "MDU6SXNzdWU3MjA2NTEyMA==", "number": 127, "title": "pickling a dictionary converts keys to strings", "user": {"login": "jonredgrave", "id": 12180747, "node_id": "MDQ6VXNlcjEyMTgwNzQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/12180747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonredgrave", "html_url": "https://github.com/jonredgrave", "followers_url": "https://api.github.com/users/jonredgrave/followers", "following_url": "https://api.github.com/users/jonredgrave/following{/other_user}", "gists_url": "https://api.github.com/users/jonredgrave/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonredgrave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonredgrave/subscriptions", "organizations_url": "https://api.github.com/users/jonredgrave/orgs", "repos_url": "https://api.github.com/users/jonredgrave/repos", "events_url": "https://api.github.com/users/jonredgrave/events{/privacy}", "received_events_url": "https://api.github.com/users/jonredgrave/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-30T05:14:27Z", "updated_at": "2015-04-30T21:57:27Z", "closed_at": "2015-04-30T21:57:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "> > > import jsonpickle; jsonpickle.loads(jsonpickle.dumps({1:1}))\n> > > {u'1': 1}\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/124", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/124/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/124/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/124", "id": 63162739, "node_id": "MDU6SXNzdWU2MzE2MjczOQ==", "number": 124, "title": "regression of test_handles_cyclical_objects in -0.9.1", "user": {"login": "idella", "id": 1655078, "node_id": "MDQ6VXNlcjE2NTUwNzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1655078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/idella", "html_url": "https://github.com/idella", "followers_url": "https://api.github.com/users/idella/followers", "following_url": "https://api.github.com/users/idella/following{/other_user}", "gists_url": "https://api.github.com/users/idella/gists{/gist_id}", "starred_url": "https://api.github.com/users/idella/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/idella/subscriptions", "organizations_url": "https://api.github.com/users/idella/orgs", "repos_url": "https://api.github.com/users/idella/repos", "events_url": "https://api.github.com/users/idella/events{/privacy}", "received_events_url": "https://api.github.com/users/idella/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-20T04:57:33Z", "updated_at": "2015-03-20T08:18:58Z", "closed_at": "2015-03-20T08:00:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Under pythons 2.7  3.3  3.4 get;\n\n``` python\nFAIL: test_handles_cyclical_objects (jsonpickle_test.PicklingProtocol2TestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/mnt/gen2/TmpDir/portage/dev-python/jsonpickle-0.9.1/work/jsonpickle-0.9.1/tests/jsonpickle_test.py\", line 1263, in test_handles_cyclical_objects\n    self.assertEqual(PickleProtocol2Thing, decoded.args[0].args[0].__class__)\nAssertionError: <class 'jsonpickle_test.PickleProtocol2Thing'> != <class 'jsonpickle.unpickler._Proxy'>\n\n----------------------------------------------------------------------\nRan 222 tests in 0.379s\n\nFAILED (failures=1, skipped=2)\n```\n\nFor version -0.9.0.\n\nRan between 221 - 223 tests in 0.264s   OK\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/123", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/123/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/123/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/123", "id": 62837782, "node_id": "MDU6SXNzdWU2MjgzNzc4Mg==", "number": 123, "title": "Adopt pytest month", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-03-19T00:57:58Z", "updated_at": "2017-05-04T07:02:48Z", "closed_at": "2017-05-04T07:02:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\n\nIn April the pytest team is holding \"adopt pytest month\" to encourage projects to consider using pytest, by pairing open source projects with experienced pytest helpers. I see your test suite is fairly complete and uses xUnit. Perhaps you would like to try to convert some/all of your tests with the help of on of our pytest volunteers (myself included)? Since pytest can run standard xUnit tests, you can convert tests to use the full power of pytest in any pace you like.\n\nAnyway, there are no strings attached. :smile:\n\nTake a look at http://pytest.org/latest/adopt.html if you're interested!\n\nCheers,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/121", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/121/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/121/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/121", "id": 61882748, "node_id": "MDU6SXNzdWU2MTg4Mjc0OA==", "number": 121, "title": "Handling a deque with maxlen", "user": {"login": "sirpercival", "id": 6307657, "node_id": "MDQ6VXNlcjYzMDc2NTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6307657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirpercival", "html_url": "https://github.com/sirpercival", "followers_url": "https://api.github.com/users/sirpercival/followers", "following_url": "https://api.github.com/users/sirpercival/following{/other_user}", "gists_url": "https://api.github.com/users/sirpercival/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirpercival/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirpercival/subscriptions", "organizations_url": "https://api.github.com/users/sirpercival/orgs", "repos_url": "https://api.github.com/users/sirpercival/repos", "events_url": "https://api.github.com/users/sirpercival/events{/privacy}", "received_events_url": "https://api.github.com/users/sirpercival/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-15T18:57:20Z", "updated_at": "2015-03-18T08:53:36Z", "closed_at": "2015-03-18T08:53:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all,\n\njsonpickle doesn't play very nicely with deque if you include a maxlen parameter. I tried to use the fix shown [here on stackoverflow](http://stackoverflow.com/questions/19494734/jsonpickle-ignores-maxlen-of-collection-deque):\n\n``` python\nclass DequeHandler(jsonpickle.handlers.BaseHandler):\n    def flatten(self, obj, data):\n        return list(obj),obj.maxlen\n    def restore(self,obj):\n        return deque(obj[0], maxlen=obj[1])\njsonpickle.handlers.register(deque, DequeHandler)\n```\n\n but now the deque is being decoded into a list: [[data], maxlen]. Any suggestions for how to improve the handler? And maybe it might be nice to include something like this in handlers.py?\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/120", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/120/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/120/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/120", "id": 60835594, "node_id": "MDU6SXNzdWU2MDgzNTU5NA==", "number": 120, "title": "IndexError restoring datetime with FixedOffset", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-03-12T15:19:47Z", "updated_at": "2015-03-18T08:48:19Z", "closed_at": "2015-03-18T08:48:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Following on the fix for #117, I find there's an additional issue. Running [this script](https://gist.github.com/jaraco/d979a558bc0bf2194c23/7c654a21681da9c8363864eda4bc3cd28ff05bb2) against jsonpickle 0.9.1 on Python 3.4.2, I get the following output:\n\n```\nrunning pytest\nSearching for jsonpickle\nBest match: jsonpickle 0.9.1\nProcessing jsonpickle-0.9.1-py3.4.egg\n\nUsing c:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\nrunning egg_info\nwriting dependency_links to UNKNOWN.egg-info\\dependency_links.txt\nwriting requirements to UNKNOWN.egg-info\\requires.txt\nwriting top-level names to UNKNOWN.egg-info\\top_level.txt\nwriting UNKNOWN.egg-info\\PKG-INFO\nreading manifest file 'UNKNOWN.egg-info\\SOURCES.txt'\nwriting manifest file 'UNKNOWN.egg-info\\SOURCES.txt'\nrunning build_ext\n============================= test session starts =============================\nplatform win32 -- Python 3.4.2 -- py-1.4.26 -- pytest-2.6.4\ncollected 5 items\n\ntest_fo.py ....F\n\n================================== FAILURES ===================================\n_______________________ test_datetime_with_fixed_offset _______________________\n\n    def test_datetime_with_fixed_offset():\n        fo = bson.tz_util.FixedOffset(-60*5, 'EST')\n        dt = datetime.datetime.now().replace(tzinfo=fo)\n        serialized = jsonpickle.dumps(dt)\n        pprint.pprint(json.loads(serialized))\n>       restored = jsonpickle.loads(serialized)\n\ntest_fo.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\__init__.py:148: in decode\n    return unpickler.decode(string, backend=backend, keys=keys)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:26: in decode\n    return context.restore(backend.decode(string), reset=reset)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:113: in restore\n    value = self._restore(obj)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:152: in _restore\n    return restore(obj)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:225: in _restore_object\n    instance = handler(self).restore(obj)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\handlers.py:171: in restore\n    params = (value,) + tuple([restore(i, reset=False) for i in args[1:]])\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\handlers.py:171: in <listcomp>\n    params = (value,) + tuple([restore(i, reset=False) for i in args[1:]])\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:113: in restore\n    value = self._restore(obj)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:152: in _restore\n    return restore(obj)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:231: in _restore_object\n    return self._restore_object_instance(obj, cls)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:296: in _restore_object_instance\n    return self._restore_object_instance_variables(obj, instance)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:325: in _restore_object_instance_variables\n    self._restore_from_dict(obj, instance)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:309: in _restore_from_dict\n    value = self._restore(v)\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:152: in _restore\n    return restore(obj)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <jsonpickle.unpickler.Unpickler object at 0x0000000005FAAF28>\nobj = {'py/id': 2}\n\n    def _restore_id(self, obj):\n>       return self._objs[obj[tags.ID]]\nE       IndexError: list index out of range\n\nc:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py:202: IndexError\n---------------------------- Captured stdout call -----------------------------\n{'__reduce__': [{'py/type': 'datetime.datetime'},\n                ['B98DDAsOIA3Drw==',\n                 {'_FixedOffset__name': 'EST',\n                  '_FixedOffset__offset': {'py/id': 2},\n                  'py/initargs': {'py/tuple': [{'__reduce__': [{'py/type': 'datetime.timedelta'},\n                                                               {'py/tuple': [-1,\n                                                                             68400,\n                                                                             0]}],\n                                                'py/object': 'datetime.timedelta'},\n                                               'EST']},\n                  'py/object': 'bson.tz_util.FixedOffset'}]],\n 'py/object': 'datetime.datetime'}\n===================== 1 failed, 4 passed in 0.46 seconds ======================\n```\n\nDoing some debugging, I find this additional information:\n\n```\n> c:\\users\\jaraco\\p\\jsonpickle\\test_fo\\.eggs\\jsonpickle-0.9.1-py3.4.egg\\jsonpickle\\unpickler.py(202)_restore_id()\n-> return self._objs[obj[tags.ID]]\n\ufeff(Pdb) self._objs\n[<bson.tz_util.FixedOffset object at 0x00000000071C4128>, datetime.timedelta(-1, 68400)]\n\ufeff(Pdb) obj[tags.ID]\n2\n```\n\nSo it appears that the {'py/id': 2} is meant to reference the datetime.timedelta, but at the point that it's trying to resolve the reference, datetime.timedelta is at index 1 and not 2.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/117", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/117/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/117/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/117", "id": 59399000, "node_id": "MDU6SXNzdWU1OTM5OTAwMA==", "number": 117, "title": "Object mismatch with pymongo FixedOffset", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-03-01T15:06:29Z", "updated_at": "2015-03-02T02:55:30Z", "closed_at": "2015-03-02T02:55:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've discovered that the round-trip serialization/deserialization of a simple FixedOffset object produces a corrupted object. The output of [this test script](https://gist.github.com/jaraco/d979a558bc0bf2194c23/079efd37a641159c0c14a1ab93f7efce30bf3eda) produces:\n\n```\n============================= test session starts =============================\nplatform win32 -- Python 3.4.2 -- py-1.4.26 -- pytest-2.6.4\ncollected 1 items\n\ntest_fo.py F\n\n================================== FAILURES ===================================\n________________________ test_FixedOffsetSerializable _________________________\n\n    def test_FixedOffsetSerializable():\n        import jsonpickle\n        import bson.tz_util\n        fo = bson.tz_util.FixedOffset(-60*5, 'EST')\n        serialized = jsonpickle.dumps(fo)\n        pprint.pprint(json.loads(serialized))\n        restored = jsonpickle.loads(serialized)\n        print(restored._FixedOffset__offset)\n>       assert restored == fo\nE    assert <bson.tz_util.FixedOffset object at 0x0000000005F494A8> == <bson.tz_util.FixedOffset object at 0x0000000005EEFA90>\n\ntest_fo.py:16: AssertionError\n---------------------------- Captured stdout call -----------------------------\n{'_FixedOffset__name': 'EST',\n '_FixedOffset__offset': {'py/id': 1},\n 'py/initargs': {'py/tuple': [{'__reduce__': [{'py/type': 'datetime.timedelta'},\n                                              {'py/tuple': [-1, 68400, 0]}],\n                               'py/object': 'datetime.timedelta'},\n                              'EST']},\n 'py/object': 'bson.tz_util.FixedOffset'}\n<bson.tz_util.FixedOffset object at 0x0000000005F494A8>\n========================== 1 failed in 0.52 seconds ===========================\n```\n\nAs you can see, the object produced isn't equal to the one serialized. Furthermore, it appears as if the `.__offset` property of the object has been set to itself instead of the timedelta object.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/116", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/116/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/116/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/116", "id": 59112167, "node_id": "MDU6SXNzdWU1OTExMjE2Nw==", "number": 116, "title": "Still having problems with Enum in 2.7.8", "user": {"login": "squidbot", "id": 852853, "node_id": "MDQ6VXNlcjg1Mjg1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/852853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/squidbot", "html_url": "https://github.com/squidbot", "followers_url": "https://api.github.com/users/squidbot/followers", "following_url": "https://api.github.com/users/squidbot/following{/other_user}", "gists_url": "https://api.github.com/users/squidbot/gists{/gist_id}", "starred_url": "https://api.github.com/users/squidbot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/squidbot/subscriptions", "organizations_url": "https://api.github.com/users/squidbot/orgs", "repos_url": "https://api.github.com/users/squidbot/repos", "events_url": "https://api.github.com/users/squidbot/events{/privacy}", "received_events_url": "https://api.github.com/users/squidbot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-02-26T18:01:24Z", "updated_at": "2015-06-27T19:17:06Z", "closed_at": "2015-03-18T09:12:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run this code in Python 2.7.8 using jsonpickle 0.9.0 I get an error when trying to decode. According to the changelog Enum was fixed, was that only in Python 3?\n\n``` python\nfrom enum import Enum\nimport jsonpickle\n\n\nclass TestEnumClass(object):\n\n    class TestEnum(Enum):\n        a = 1\n        b = 2\n\n    def __init__(self):\n        self.some_enum = TestEnumClass.TestEnum.a\n\n\ndef main():\n    ctest = TestEnumClass()\n    test_json = jsonpickle.encode(ctest)\n    print test_json\n    test_decode = jsonpickle.decode(test_json)\n    print test_decode.some_enum\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n```\nTraceback (most recent call last):\n  File \"jsonpickle_test_enum.py\", line 24, in <module>\n    main()\n  File \"jsonpickle_test_enum.py\", line 19, in main\n    test_decode = jsonpickle.decode(test_json)\n  File \"C:\\dev\\personal_development\\JsonpickleEnumTest\\jsonpickle\\__init__.py\", line 148, in decode\n    return unpickler.decode(string, backend=backend, keys=keys)\n  File \"C:\\dev\\personal_development\\JsonpickleEnumTest\\jsonpickle\\unpickler.py\", line 26, in decode\n    return context.restore(backend.decode(string), reset=reset)\n  File \"C:\\dev\\personal_development\\JsonpickleEnumTest\\jsonpickle\\unpickler.py\", line 117, in restore\n    value = self._restore(obj)\n  File \"C:\\dev\\personal_development\\JsonpickleEnumTest\\jsonpickle\\unpickler.py\", line 156, in _restore\n    return restore(obj)\n  File \"C:\\dev\\personal_development\\JsonpickleEnumTest\\jsonpickle\\unpickler.py\", line 235, in _restore_object\n    return self._restore_object_instance(obj, cls)\n  File \"C:\\dev\\personal_development\\JsonpickleEnumTest\\jsonpickle\\unpickler.py\", line 300, in _restore_object_instance\n    return self._restore_object_instance_variables(obj, instance)\n  File \"C:\\dev\\personal_development\\JsonpickleEnumTest\\jsonpickle\\unpickler.py\", line 329, in _restore_object_instance_variables\n    self._restore_from_dict(obj, instance)\n  File \"C:\\dev\\personal_development\\JsonpickleEnumTest\\jsonpickle\\unpickler.py\", line 313, in _restore_from_dict\n    value = self._restore(v)\n  File \"C:\\dev\\personal_development\\JsonpickleEnumTest\\jsonpickle\\unpickler.py\", line 156, in _restore\n    return restore(obj)\n  File \"C:\\dev\\personal_development\\JsonpickleEnumTest\\jsonpickle\\unpickler.py\", line 172, in _restore_reduce\n    if f == tags.NEWOBJ or f.__name__ == '__newobj__':\nAttributeError: 'dict' object has no attribute '__name__'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/115", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/115/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/115/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/115", "id": 58490340, "node_id": "MDU6SXNzdWU1ODQ5MDM0MA==", "number": 115, "title": "unpicklable=False not applicable recursively", "user": {"login": "amgohan", "id": 3297683, "node_id": "MDQ6VXNlcjMyOTc2ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3297683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amgohan", "html_url": "https://github.com/amgohan", "followers_url": "https://api.github.com/users/amgohan/followers", "following_url": "https://api.github.com/users/amgohan/following{/other_user}", "gists_url": "https://api.github.com/users/amgohan/gists{/gist_id}", "starred_url": "https://api.github.com/users/amgohan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amgohan/subscriptions", "organizations_url": "https://api.github.com/users/amgohan/orgs", "repos_url": "https://api.github.com/users/amgohan/repos", "events_url": "https://api.github.com/users/amgohan/events{/privacy}", "received_events_url": "https://api.github.com/users/amgohan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-22T04:53:00Z", "updated_at": "2017-05-04T07:03:23Z", "closed_at": "2017-05-04T07:03:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI think is applicable only in first level, not recursively.\n\nI have this structure of objects : \n\n```\nclass Response(object):\n\n    def __init__(self, action, status, detail):\n        self.action = action\n        self.status = status\n        self.detail = detail\n```\n\ndetail here can be a MyException object : \n\n```\nclass MyException(Exception):\n\n    def __init__(self, code, message):\n        self.code = code\n        self.message = message\n```\n\nI want to get the json representation of my Response object including only the attributes, without any other information, this is what I did : \n\n```\nresponse = Response(\"Hello World\", \"1\", MyException(\"1\", \"some errors message here\"))\nprint(jsonpickle.encode(response, unpicklable=False))\n```\n\nI get this result : \n\n```\n{\n    \"action\": \"Hello World\",\n    \"detail\": {\n        \"py/reduce\": [\n            {\n                \"py/type\": \"com.test.MyException\"\n            },\n            [\n                \"1\",\n                \"some errors message here\"\n            ],\n            {\n                \"code\": \"1\",\n                \"some errors message here\"\n            },\n            null,\n            null\n        ]\n    },\n    \"status\": 1\n}\n```\n\nI am expecting this format : \n\n```\n{\n    \"action\": \"Hello World\",\n    \"detail\": {\n                \"code\": \"1\",\n                \"some errors message here\"\n    },\n    \"status\": 1\n}\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/114", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/114/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/114/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/114", "id": 55068469, "node_id": "MDU6SXNzdWU1NTA2ODQ2OQ==", "number": 114, "title": "make it pip installable", "user": {"login": "ashwin31", "id": 365610, "node_id": "MDQ6VXNlcjM2NTYxMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/365610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashwin31", "html_url": "https://github.com/ashwin31", "followers_url": "https://api.github.com/users/ashwin31/followers", "following_url": "https://api.github.com/users/ashwin31/following{/other_user}", "gists_url": "https://api.github.com/users/ashwin31/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashwin31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashwin31/subscriptions", "organizations_url": "https://api.github.com/users/ashwin31/orgs", "repos_url": "https://api.github.com/users/ashwin31/repos", "events_url": "https://api.github.com/users/ashwin31/events{/privacy}", "received_events_url": "https://api.github.com/users/ashwin31/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-21T19:54:15Z", "updated_at": "2015-02-01T00:13:10Z", "closed_at": "2015-02-01T00:13:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Its better to install with pip. Consider that way of distributing.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/108", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/108/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/108/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/108", "id": 53827072, "node_id": "MDU6SXNzdWU1MzgyNzA3Mg==", "number": 108, "title": "Encoding byte strings in Python 3 causes infinite recursion", "user": {"login": "aldanor", "id": 2418513, "node_id": "MDQ6VXNlcjI0MTg1MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2418513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldanor", "html_url": "https://github.com/aldanor", "followers_url": "https://api.github.com/users/aldanor/followers", "following_url": "https://api.github.com/users/aldanor/following{/other_user}", "gists_url": "https://api.github.com/users/aldanor/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldanor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldanor/subscriptions", "organizations_url": "https://api.github.com/users/aldanor/orgs", "repos_url": "https://api.github.com/users/aldanor/repos", "events_url": "https://api.github.com/users/aldanor/events{/privacy}", "received_events_url": "https://api.github.com/users/aldanor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 30, "created_at": "2015-01-09T02:26:54Z", "updated_at": "2015-01-10T10:32:50Z", "closed_at": "2015-01-10T10:32:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "``` python\n>>> jsonpickle.encode(b'foo')\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-7-5e089e18bf41> in <module>()\n----> 1 jsonpickle.encode(b'foo')\n\n/Users/ivansmirnov/dev/jsonpickle/jsonpickle/__init__.py in encode(value, unpicklable, make_refs, keys, max_depth, backend, warn, max_iter)\n    129                           keys=keys,\n    130                           max_depth=max_depth,\n--> 131                           warn=warn)\n    132 \n    133 \n\n/Users/ivansmirnov/dev/jsonpickle/jsonpickle/pickler.py in encode(value, unpicklable, make_refs, keys, max_depth, reset, backend, warn, context, max_iter)\n     39                           warn=warn,\n     40                           max_iter=max_iter)\n---> 41     return backend.encode(context.flatten(value, reset=reset))\n     42 \n     43 \n\n/Users/ivansmirnov/dev/jsonpickle/jsonpickle/pickler.py in flatten(self, obj, reset)\n    139         if reset:\n    140             self.reset()\n--> 141         return self._flatten(obj)\n    142 \n    143     def _flatten(self, obj):\n\n/Users/ivansmirnov/dev/jsonpickle/jsonpickle/pickler.py in _flatten(self, obj)\n    143     def _flatten(self, obj):\n    144         self._push()\n--> 145         return self._pop(self._flatten_obj(obj))\n    146 \n    147     def _flatten_obj(self, obj):\n\n/Users/ivansmirnov/dev/jsonpickle/jsonpickle/pickler.py in _flatten_obj(self, obj)\n    159             return None\n    160 \n--> 161         return flatten_func(obj)\n    162 \n    163     def _list_recurse(self, obj):\n\n/Users/ivansmirnov/dev/jsonpickle/jsonpickle/pickler.py in _ref_obj_instance(self, obj)\n    214             # We've never seen this object so return its\n    215             # json representation.\n--> 216             return self._flatten_obj_instance(obj)\n    217         # We've seen this object before so place an object\n    218         # reference tag in the data. This avoids infinite recursion\n\n...\n\n/Users/ivansmirnov/dev/jsonpickle/jsonpickle/pickler.py in _flatten(self, obj)\n    143     def _flatten(self, obj):\n    144         self._push()\n--> 145         return self._pop(self._flatten_obj(obj))\n    146 \n    147     def _flatten_obj(self, obj):\n\n/Users/ivansmirnov/dev/jsonpickle/jsonpickle/pickler.py in _flatten_obj(self, obj)\n    147     def _flatten_obj(self, obj):\n    148         self._seen.append(obj)\n--> 149         max_reached = self._depth == self._max_depth\n    150 \n    151         if max_reached or (not self.make_refs and id(obj) in self._objs):\n\nRuntimeError: maximum recursion depth exceeded in comparison\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/106", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/106/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/106/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/106", "id": 53346735, "node_id": "MDU6SXNzdWU1MzM0NjczNQ==", "number": 106, "title": "A tree class build with defaultdict can't be encoded. ", "user": {"login": "rako233", "id": 10392436, "node_id": "MDQ6VXNlcjEwMzkyNDM2", "avatar_url": "https://avatars3.githubusercontent.com/u/10392436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rako233", "html_url": "https://github.com/rako233", "followers_url": "https://api.github.com/users/rako233/followers", "following_url": "https://api.github.com/users/rako233/following{/other_user}", "gists_url": "https://api.github.com/users/rako233/gists{/gist_id}", "starred_url": "https://api.github.com/users/rako233/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rako233/subscriptions", "organizations_url": "https://api.github.com/users/rako233/orgs", "repos_url": "https://api.github.com/users/rako233/repos", "events_url": "https://api.github.com/users/rako233/events{/privacy}", "received_events_url": "https://api.github.com/users/rako233/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-01-04T20:03:53Z", "updated_at": "2015-01-05T06:21:48Z", "closed_at": "2015-01-05T06:18:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using the following class \n\n``` python\nclass Tree(collections.defaultdict):\n    \"\"\"This class builds a tree by using defaultdict. defaultdict isn't raising\n    exception when a key is missing, but is inserting the result of a callable\n    stored in self.default_factory, which makes it possible to use a key without\n    initializing. \n\n    Example:\n    >>> tree = Tree()\n    >>> tree['root']['left'] = 1\n    \"\"\"\n    def __init__(self):\n        self.default_factory = self\n\n    def __call__(self):\n        return Tree()\n\n```\n\nand when I try to do a \n\n``` python\ntree = Tree()\ntree['A']['B'] = 1    \ntree['A']['C'] = 2    \njsonpickle.encode(tree)\n```\n\nI get a \nRuntimeError: maximum recursion depth exceeded\n\nIt would be great if jsonpickle is able to serialize this class too, especially for multiprocessing purposes by sending object over a network. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/103", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/103/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/103/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/103", "id": 53038421, "node_id": "MDU6SXNzdWU1MzAzODQyMQ==", "number": 103, "title": "Registering handlers for all subclasses of a certain base class?", "user": {"login": "aldanor", "id": 2418513, "node_id": "MDQ6VXNlcjI0MTg1MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2418513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldanor", "html_url": "https://github.com/aldanor", "followers_url": "https://api.github.com/users/aldanor/followers", "following_url": "https://api.github.com/users/aldanor/following{/other_user}", "gists_url": "https://api.github.com/users/aldanor/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldanor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldanor/subscriptions", "organizations_url": "https://api.github.com/users/aldanor/orgs", "repos_url": "https://api.github.com/users/aldanor/repos", "events_url": "https://api.github.com/users/aldanor/events{/privacy}", "received_events_url": "https://api.github.com/users/aldanor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-12-29T12:35:05Z", "updated_at": "2014-12-29T21:31:28Z", "closed_at": "2014-12-29T21:31:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Unless I've missed something, it's not possible to register a handler with all subclasses of a certain base type at once?\n\nThis would be incredibly useful, e.g. when an external library implements a base class that you are going to subclass multiple times in the application, and encoding/decoding would always be handled the same way.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/102", "repository_url": "https://api.github.com/repos/jsonpickle/jsonpickle", "labels_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/102/comments", "events_url": "https://api.github.com/repos/jsonpickle/jsonpickle/issues/102/events", "html_url": "https://github.com/jsonpickle/jsonpickle/issues/102", "id": 53037288, "node_id": "MDU6SXNzdWU1MzAzNzI4OA==", "number": 102, "title": "Serializing enums", "user": {"login": "aldanor", "id": 2418513, "node_id": "MDQ6VXNlcjI0MTg1MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2418513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldanor", "html_url": "https://github.com/aldanor", "followers_url": "https://api.github.com/users/aldanor/followers", "following_url": "https://api.github.com/users/aldanor/following{/other_user}", "gists_url": "https://api.github.com/users/aldanor/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldanor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldanor/subscriptions", "organizations_url": "https://api.github.com/users/aldanor/orgs", "repos_url": "https://api.github.com/users/aldanor/repos", "events_url": "https://api.github.com/users/aldanor/events{/privacy}", "received_events_url": "https://api.github.com/users/aldanor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-12-29T12:12:56Z", "updated_at": "2015-01-08T04:08:57Z", "closed_at": "2015-01-08T04:08:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`enum` is a part of standard library in Python 3.4, and there's an official backport for earlier Python versions (enum34 on pypi). It would probably make sense to ensure it can be serialized out of the box...\n\nI guess the problem is that jsonpickle tries to serialize type `Foo` which has a metaclass (`enum.EnumMeta`), so it tries to pickle `enum.IntEnum` which fails since `IntEnum` has `__getnewargs__` method, but it's bound and has to be called on an instance and not a type.\n\nSo, these kind of checks can easily go wrong:\n\n``` python\nhas_getnewargs = hasattr(obj, '__getnewargs__')  # in pickler.py\n```\n\ne.g.:\n\n``` python\n>>> hasattr(int, '__getnewargs__')\nTrue\n>>> int.__getnewargs__()\nTypeError: descriptor '__getnewargs__' of 'int' object needs an argument\n```\n\nHere's the full traceback:\n\n``` python\n>>> import enum\n>>> import jsonpickle\n>>> class Foo(enum.IntEnum):\n   ...     A = 1\n   ...     B = 2\n   ...\n>>> jsonpickle.encode(Foo.A)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-6-43681554c544> in <module>()\n----> 1 jsonpickle.encode(Foo.A)\n\n.../site-packages/jsonpickle/__init__.pyc in encode(value, unpicklable, make_refs, keys, max_depth, backend, warn, max_iter)\n    130                           keys=keys,\n    131                           max_depth=max_depth,\n--> 132                           warn=warn)\n    133\n    134\n\n.../site-packages/jsonpickle/pickler.pyc in encode(value, unpicklable, make_refs, keys, max_depth, reset, backend, warn, context, max_iter)\n     39                           warn=warn,\n     40                           max_iter=max_iter)\n---> 41     return backend.encode(context.flatten(value, reset=reset))\n     42\n     43\n\n.../site-packages/jsonpickle/pickler.pyc in flatten(self, obj, reset)\n    139         if reset:\n    140             self.reset()\n--> 141         return self._flatten(obj)\n    142\n    143     def _flatten(self, obj):\n\n.../site-packages/jsonpickle/pickler.pyc in _flatten(self, obj)\n    143     def _flatten(self, obj):\n    144         self._push()\n--> 145         return self._pop(self._flatten_obj(obj))\n    146\n    147     def _flatten_obj(self, obj):\n\n.../jsonpickle/pickler.pyc in _flatten_obj(self, obj)\n    159             return None\n    160\n--> 161         return flatten_func(obj)\n    162\n    163     def _list_recurse(self, obj):\n\n/.../site-packages/jsonpickle/pickler.pyc in _ref_obj_instance(self, obj)\n    211             # We've never seen this object so return its\n    212             # json representation.\n--> 213             return self._flatten_obj_instance(obj)\n    214         # We've seen this object before so place an object\n    215         # reference tag in the data. This avoids infinite recursion\n\n.../site-packages/jsonpickle/pickler.pyc in _flatten_obj_instance(self, obj)\n    337                 rv_as_list[0] = tags.NEWOBJ\n    338\n--> 339             data[tags.REDUCE] = list(map(self._flatten, rv_as_list))\n    340\n    341             # lift out iterators, so we don't have to iterator and uniterator their content\n\n.../site-packages/jsonpickle/pickler.pyc in _flatten(self, obj)\n    143     def _flatten(self, obj):\n    144         self._push()\n--> 145         return self._pop(self._flatten_obj(obj))\n    146\n    147     def _flatten_obj(self, obj):\n\n.../site-packages/jsonpickle/pickler.pyc in _flatten_obj(self, obj)\n    159             return None\n    160\n--> 161         return flatten_func(obj)\n    162\n    163     def _list_recurse(self, obj):\n\n.../site-packages/jsonpickle/pickler.pyc in _ref_obj_instance(self, obj)\n    211             # We've never seen this object so return its\n    212             # json representation.\n--> 213             return self._flatten_obj_instance(obj)\n    214         # We've seen this object before so place an object\n    215         # reference tag in the data. This avoids infinite recursion\n\n.../site-packages/jsonpickle/pickler.pyc in _flatten_obj_instance(self, obj)\n    287\n    288             if has_getnewargs:\n--> 289                 data[tags.NEWARGS] = self._flatten(obj.__getnewargs__())\n    290\n    291             if has_getinitargs:\n\nTypeError: descriptor '__getnewargs__' of 'int' object needs an argument\n\npdb> p data\n{'py/object': 'enum.EnumMeta'}\npdb> p obj\n<enum 'Foo'>\n```\n", "performed_via_github_app": null, "score": 1.0}]}