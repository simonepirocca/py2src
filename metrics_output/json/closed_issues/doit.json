{"total_count": 182, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pydoit/doit/issues/371", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/371/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/371/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/371/events", "html_url": "https://github.com/pydoit/doit/issues/371", "id": 691244445, "node_id": "MDU6SXNzdWU2OTEyNDQ0NDU=", "number": 371, "title": "tests missing in pypi sdist", "user": {"login": "dvzrv", "id": 432519, "node_id": "MDQ6VXNlcjQzMjUxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/432519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvzrv", "html_url": "https://github.com/dvzrv", "followers_url": "https://api.github.com/users/dvzrv/followers", "following_url": "https://api.github.com/users/dvzrv/following{/other_user}", "gists_url": "https://api.github.com/users/dvzrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvzrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvzrv/subscriptions", "organizations_url": "https://api.github.com/users/dvzrv/orgs", "repos_url": "https://api.github.com/users/dvzrv/repos", "events_url": "https://api.github.com/users/dvzrv/events{/privacy}", "received_events_url": "https://api.github.com/users/dvzrv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-09-02T17:26:28Z", "updated_at": "2020-09-04T06:39:46Z", "closed_at": "2020-09-04T06:39:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nHi! When trying to package 0.33.0 for Arch Linux I realized that all tests are now missing from the pypi sdist tarball.\r\nCan you please add them back? Running tests against the environment is very important in a system packaging context.\r\n \r\n**Environment**\r\n1. OS: Arch Linux\r\n2. python version: 3.8.5\r\n3. doit version: 0.33.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/370", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/370/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/370/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/370/events", "html_url": "https://github.com/pydoit/doit/issues/370", "id": 690100649, "node_id": "MDU6SXNzdWU2OTAxMDA2NDk=", "number": 370, "title": "doit no longer installs with setuptools 50.0.0", "user": {"login": "moltob", "id": 6240478, "node_id": "MDQ6VXNlcjYyNDA0Nzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6240478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moltob", "html_url": "https://github.com/moltob", "followers_url": "https://api.github.com/users/moltob/followers", "following_url": "https://api.github.com/users/moltob/following{/other_user}", "gists_url": "https://api.github.com/users/moltob/gists{/gist_id}", "starred_url": "https://api.github.com/users/moltob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moltob/subscriptions", "organizations_url": "https://api.github.com/users/moltob/orgs", "repos_url": "https://api.github.com/users/moltob/repos", "events_url": "https://api.github.com/users/moltob/events{/privacy}", "received_events_url": "https://api.github.com/users/moltob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-09-01T12:27:27Z", "updated_at": "2020-09-01T16:22:09Z", "closed_at": "2020-09-01T16:22:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Probably related to https://github.com/pypa/setuptools/issues/2355. When now installing doit from TGZ (not from cached wheel), the installation fails, if setuptools are up-to-date (v50.0.0, released yesterday).\r\n\r\n```\r\n(venv) \u03bb pip list\r\nPackage     Version\r\n----------- -------\r\ncloudpickle 1.6.0\r\npip         20.2.2\r\nsetuptools  50.0.0\r\nwheel       0.35.1\r\n\r\n(venv) \u03bb pip --no-cache-dir install doit\r\nLooking in indexes: https://artifactory.cc.bmwgroup.net/artifactory/api/pypi/ic-gen5-pypi/simple\r\nCollecting doit\r\n  Downloading https://artifactory.cc.bmwgroup.net/artifactory/api/pypi/ic-gen5-pypi/packages/packages/1f/89/b5e1dd4854b47c4f9e5250899c04e0cd0c9082c30ef619c0413ace20cf7a/doit-0.32.0.tar.gz (1.4 MB)\r\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.4 MB 467 kB/s\r\n    ERROR: Command errored out with exit status 1:\r\n     command: 'd:\\temp\\doit-install-issue\\venv\\scripts\\python.exe' -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'C:\\\\Users\\\\q199925\\\\AppData\\\\Local\\\\Temp\\\\pip-install-3ovj31zb\\\\doit\\\\setup.py'\"'\"'; __file__='\"'\"'C:\\\\Users\\\\q199925\\\\AppData\\\\Local\\\\Temp\\\\pip-install-3ovj31zb\\\\doit\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' egg_info --egg-base 'C:\\Users\\q199925\\AppData\\Local\\Temp\\pip-pip-egg-info-pztah4sa'\r\n         cwd: C:\\Users\\q199925\\AppData\\Local\\Temp\\pip-install-3ovj31zb\\doit\\\r\n    Complete output (17 lines):\r\n    d:\\temp\\doit-install-issue\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py:30: UserWarning: Setuptools is replacing distutils.\r\n      warnings.warn(\"Setuptools is replacing distutils.\")\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"C:\\Users\\q199925\\AppData\\Local\\Temp\\pip-install-3ovj31zb\\doit\\setup.py\", line 44, in <module>\r\n        setup(name = 'doit',\r\n      File \"d:\\temp\\doit-install-issue\\venv\\lib\\site-packages\\setuptools\\__init__.py\", line 152, in setup\r\n        _install_setup_requires(attrs)\r\n      File \"d:\\temp\\doit-install-issue\\venv\\lib\\site-packages\\setuptools\\__init__.py\", line 145, in _install_setup_requires\r\n        dist.parse_config_files(ignore_option_errors=True)\r\n      File \"d:\\temp\\doit-install-issue\\venv\\lib\\site-packages\\setuptools\\dist.py\", line 665, in parse_config_files\r\n        self._parse_config_files(filenames=filenames)\r\n      File \"d:\\temp\\doit-install-issue\\venv\\lib\\site-packages\\setuptools\\dist.py\", line 572, in _parse_config_files\r\n        filenames = self.find_config_files()\r\n      File \"d:\\temp\\doit-install-issue\\venv\\lib\\site-packages\\setuptools\\_distutils\\dist.py\", line 353, in find_config_files\r\n        sys_dir = os.path.dirname(sys.modules['distutils'].__file__)\r\n    KeyError: 'distutils'\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\r\n```\r\n\r\nThe root cause might be related to the `import pip` in this module's `setup.py`:\r\n\r\nhttps://github.com/pydoit/doit/blob/6bb833d41c82b6fe1b36a1f9bcfeafa6b3c3133c/setup.py#L12\r\n\r\n**Environment**\r\n1. OS: Windows 10, Linux\r\n2. python version: 3.6 - 3.8\r\n3. doit version: 0.32.0\r\n\r\n@ferraith FYI", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/365", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/365/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/365/events", "html_url": "https://github.com/pydoit/doit/issues/365", "id": 651406006, "node_id": "MDU6SXNzdWU2NTE0MDYwMDY=", "number": 365, "title": "Tasks as global arguments", "user": {"login": "Armoken", "id": 11635947, "node_id": "MDQ6VXNlcjExNjM1OTQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/11635947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Armoken", "html_url": "https://github.com/Armoken", "followers_url": "https://api.github.com/users/Armoken/followers", "following_url": "https://api.github.com/users/Armoken/following{/other_user}", "gists_url": "https://api.github.com/users/Armoken/gists{/gist_id}", "starred_url": "https://api.github.com/users/Armoken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Armoken/subscriptions", "organizations_url": "https://api.github.com/users/Armoken/orgs", "repos_url": "https://api.github.com/users/Armoken/repos", "events_url": "https://api.github.com/users/Armoken/events{/privacy}", "received_events_url": "https://api.github.com/users/Armoken/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-06T09:52:55Z", "updated_at": "2020-07-11T19:27:05Z", "closed_at": "2020-07-08T03:55:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use tasks using the syntax of global arguments. And I am not understand why this is not possible.\r\n\r\n```\r\ndef task_argument_name():\r\n    def action():\r\n        globals()[\"GLOBAL_VAR\"] = True\r\n\r\n    return {\r\n        \"basename\": \"--argument-name\",\r\n        \"verbosity\": 2,\r\n        \"actions\": [action],\r\n    }\r\n```\r\n\r\n```\r\n[armoken:~/D/curriculum-vitale-template] in env:[.venv] at git:(master\u26a1) \u279c doit list\r\n--argument-name   \r\n```\r\n\r\nBut I am getting an error:\r\n```\r\n[armoken:~/D/curriculum-vitale-template] in env:[.venv] at git:(master\u26a1) \u279c doit --argument-name\r\nERROR: Error parsing Command: option --argument-name not recognized (parsing options: ['--argument-name'])\r\n```\r\n\r\n**Environment**\r\n1. OS: Linux\r\n2. python version: 3.8.2\r\n3. doit version: 0.32.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/357", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/357/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/357/events", "html_url": "https://github.com/pydoit/doit/issues/357", "id": 609380101, "node_id": "MDU6SXNzdWU2MDkzODAxMDE=", "number": 357, "title": "Document doit integration into another program.", "user": {"login": "paternal", "id": 6587757, "node_id": "MDQ6VXNlcjY1ODc3NTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6587757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paternal", "html_url": "https://github.com/paternal", "followers_url": "https://api.github.com/users/paternal/followers", "following_url": "https://api.github.com/users/paternal/following{/other_user}", "gists_url": "https://api.github.com/users/paternal/gists{/gist_id}", "starred_url": "https://api.github.com/users/paternal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paternal/subscriptions", "organizations_url": "https://api.github.com/users/paternal/orgs", "repos_url": "https://api.github.com/users/paternal/repos", "events_url": "https://api.github.com/users/paternal/events{/privacy}", "received_events_url": "https://api.github.com/users/paternal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662474, "node_id": "MDU6TGFiZWw4MDY2MjQ3NA==", "url": "https://api.github.com/repos/pydoit/doit/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-29T21:44:42Z", "updated_at": "2020-05-03T09:10:13Z", "closed_at": "2020-05-03T09:07:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Problem\r\nThe [Use cases](https://pydoit.org/usecases.html) page has an example [Extend your project by doit features](https://pydoit.org/usecases.html#extend-your-project-by-doit-features):\r\n> Your own python project would need features of doit, but you cannot ask your users to call doit on command line?\r\n> \r\n> Simply integrate doit functionality into your own command line tool and nobody will notice where it comes from.\r\n\r\nThe [Success stories](https://pydoit.org/stories.html) page describes [how Nikola internally uses doit](https://pydoit.org/stories.html#nikola).\r\n\r\nBut none of those stories explains *how* to do this: every piece of documentation seems to be about using doit from the command line.\r\n\r\n# Solution\r\n\r\nWrite documentation about how to integrate doit into you own project (without any assumption about command line), i.e.:\r\n- how to define tasks;\r\n- how to find/gather tasks;\r\n- how to run tasks.\r\n\r\nI would have tried to submit a pull request, but I tried to understand this by reading the documentation and source code, and I couldn't\u2026", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/352", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/352/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/352/events", "html_url": "https://github.com/pydoit/doit/issues/352", "id": 574442913, "node_id": "MDU6SXNzdWU1NzQ0NDI5MTM=", "number": 352, "title": "os.environ are not loading in the Moduletask", "user": {"login": "jvcodes", "id": 30394239, "node_id": "MDQ6VXNlcjMwMzk0MjM5", "avatar_url": "https://avatars0.githubusercontent.com/u/30394239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvcodes", "html_url": "https://github.com/jvcodes", "followers_url": "https://api.github.com/users/jvcodes/followers", "following_url": "https://api.github.com/users/jvcodes/following{/other_user}", "gists_url": "https://api.github.com/users/jvcodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvcodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvcodes/subscriptions", "organizations_url": "https://api.github.com/users/jvcodes/orgs", "repos_url": "https://api.github.com/users/jvcodes/repos", "events_url": "https://api.github.com/users/jvcodes/events{/privacy}", "received_events_url": "https://api.github.com/users/jvcodes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-03T06:20:36Z", "updated_at": "2020-03-04T06:08:37Z", "closed_at": "2020-03-04T06:08:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "****\r\nHelp me to pass the Env variable using Doitmain like we will pass in subprocess \r\n\r\nsubprocess.run(shell_cmd,**env = os.environ.copy()**)\r\nis there any configuration in the Doitmain to pass env variable. \r\nsys.exit(DoitMain(ModuleTaskLoader(my_module_with_tasks)).run(sys.argv[1:])) ??", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/348", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/348/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/348/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/348/events", "html_url": "https://github.com/pydoit/doit/issues/348", "id": 555217464, "node_id": "MDU6SXNzdWU1NTUyMTc0NjQ=", "number": 348, "title": "Enhance choice to use three-string tuples", "user": {"login": "tinjaw", "id": 110943, "node_id": "MDQ6VXNlcjExMDk0Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/110943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinjaw", "html_url": "https://github.com/tinjaw", "followers_url": "https://api.github.com/users/tinjaw/followers", "following_url": "https://api.github.com/users/tinjaw/following{/other_user}", "gists_url": "https://api.github.com/users/tinjaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinjaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinjaw/subscriptions", "organizations_url": "https://api.github.com/users/tinjaw/orgs", "repos_url": "https://api.github.com/users/tinjaw/repos", "events_url": "https://api.github.com/users/tinjaw/events{/privacy}", "received_events_url": "https://api.github.com/users/tinjaw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662478, "node_id": "MDU6TGFiZWw4MDY2MjQ3OA==", "url": "https://api.github.com/repos/pydoit/doit/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-26T11:51:33Z", "updated_at": "2020-01-28T06:50:50Z", "closed_at": "2020-01-28T06:50:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to add a third string to the tuple. The first string would change from value to key, and the third string would become the value. This would allow alias-like parameters to simplify normally complex ones. A fine example are path strings.\r\n\r\n```python\r\n\"params\": [\r\n            {\r\n                \"name\": \"savepath\",\r\n                \"short\": \"s\",\r\n                \"long\": \"savepath\",\r\n                \"type\": str,\r\n                \"choices\": ((\"one\", \"The first location\", \"C:/one/two/three\"),\r\n                     (\"two\", \"The second location\", \"D:/four/five/six\")),\r\n                \"default\": \"one\",\r\n                \"help\": \"Choose between one and two\",\r\n            }\r\n        ],\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/345", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/345/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/345/events", "html_url": "https://github.com/pydoit/doit/issues/345", "id": 552532442, "node_id": "MDU6SXNzdWU1NTI1MzI0NDI=", "number": 345, "title": "setup.py misses test dependencies?", "user": {"login": "hartwork", "id": 1577132, "node_id": "MDQ6VXNlcjE1NzcxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1577132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartwork", "html_url": "https://github.com/hartwork", "followers_url": "https://api.github.com/users/hartwork/followers", "following_url": "https://api.github.com/users/hartwork/following{/other_user}", "gists_url": "https://api.github.com/users/hartwork/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartwork/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartwork/subscriptions", "organizations_url": "https://api.github.com/users/hartwork/orgs", "repos_url": "https://api.github.com/users/hartwork/repos", "events_url": "https://api.github.com/users/hartwork/events{/privacy}", "received_events_url": "https://api.github.com/users/hartwork/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662478, "node_id": "MDU6TGFiZWw4MDY2MjQ3OA==", "url": "https://api.github.com/repos/pydoit/doit/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-20T22:20:15Z", "updated_at": "2020-05-24T12:54:01Z", "closed_at": "2020-05-24T12:54:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nis there a particular reason why `setup.py` does not declare test dependencies?\r\nI found at least:\r\n- `cloudpickle`\r\n- `doit-py`\r\n- `pyflakes`\r\n- ~`pyinotify`~\r\n- `pytest`\r\n\r\nWould you welcome a pull request to add them?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/342", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/342/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/342/events", "html_url": "https://github.com/pydoit/doit/issues/342", "id": 535988269, "node_id": "MDU6SXNzdWU1MzU5ODgyNjk=", "number": 342, "title": "0.32.0: failing tests due to broken imports and failing raises", "user": {"login": "dvzrv", "id": 432519, "node_id": "MDQ6VXNlcjQzMjUxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/432519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvzrv", "html_url": "https://github.com/dvzrv", "followers_url": "https://api.github.com/users/dvzrv/followers", "following_url": "https://api.github.com/users/dvzrv/following{/other_user}", "gists_url": "https://api.github.com/users/dvzrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvzrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvzrv/subscriptions", "organizations_url": "https://api.github.com/users/dvzrv/orgs", "repos_url": "https://api.github.com/users/dvzrv/repos", "events_url": "https://api.github.com/users/dvzrv/events{/privacy}", "received_events_url": "https://api.github.com/users/dvzrv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-10T20:54:30Z", "updated_at": "2019-12-21T09:48:45Z", "closed_at": "2019-12-21T09:48:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nDuring packaging of 0.32.0 I'm running into the following two issues during test:\r\n\r\n```\r\n============================= test session starts ==============================           \r\nplatform linux -- Python 3.8.0, pytest-5.3.1, py-1.8.0, pluggy-0.13.1  \r\nrootdir: /build/python-doit/src/python-doit-0.32.0                                         \r\ncollected 774 items                                           \r\n                                                                                           \r\ntests/test___init__.py .                                                 [  0%]\r\ntests/test___main__.py F                                                 [  0%]\r\ntests/test_action.py ................................................... [  6%]                                                                                                       \r\n.............................................                            [ 12%]\r\ntests/test_api.py .                                                      [ 12%]            \r\ntests/test_cmd_auto.py ......                                            [ 13%]                                                                                                       \r\ntests/test_cmd_base.py ............................                      [ 17%]                                                                                                                                                                                                                                                                                             \r\ntests/test_cmd_clean.py ...........                                      [ 18%]                                                                                                                                                                                                                                                                                             \r\ntests/test_cmd_completion.py ..........                                  [ 19%]      \r\ntests/test_cmd_dumpdb.py .                                               [ 20%]                                                                                                       \r\ntests/test_cmd_forget.py ......                                          [ 20%]                                                                                                       \r\ntests/test_cmd_help.py ........                                          [ 21%]            \r\ntests/test_cmd_ignore.py .....                                           [ 22%]          \r\ntests/test_cmd_info.py ......                                            [ 23%]                                                                                                       \r\ntests/test_cmd_list.py .................                                 [ 25%]        \r\ntests/test_cmd_resetdep.py .........                                     [ 26%]                                                                                                       \r\ntests/test_cmd_run.py .............                                      [ 28%]          \r\ntests/test_cmd_strace.py ssssss                                          [ 29%] \r\ntests/test_cmdparse.py .......................................           [ 34%]\r\ntests/test_control.py .................................................. [ 40%]\r\n..........                                                               [ 41%]\r\ntests/test_dependency.py ...............s.s............................. [ 47%]          \r\n........................................................................ [ 57%]                                                                                                                                                                                                                                                                                             \r\n......................................                                   [ 62%]\r\ntests/test_doit_cmd.py ..................                                [ 64%]\r\ntests/test_exceptions.py .........                                       [ 65%]\r\ntests/test_filewatch.py ....                                             [ 66%]\r\ntests/test_loader.py ..........................................          [ 71%]\r\ntests/test_plugin.py .........                                           [ 72%]\r\ntests/test_reporter.py ............................                      [ 76%] \r\ntests/test_runner.py ................................................... [ 82%]            \r\n.........F..............                                                 [ 86%]\r\ntests/test_task.py ..................................................... [ 92%]            \r\n...........................                                              [ 96%]\r\ntests/test_tools.py ............................                         [100%]\r\n                                                                                           \r\n=================================== FAILURES ===================================\r\n_________________________________ test_execute _________________________________\r\n                                                                                           \r\ndepfile_name = '/tmp/pytest-of-builduser/pytest-0/test_execute0/testdb'\r\n                                                                                           \r\n    def test_execute(depfile_name):                           \r\n>       assert 0 == subprocess.call([executable, '-m', 'doit', 'list',                     \r\n                                     '--db-file', depfile_name])               \r\nE       AssertionError: assert 0 == 3                                          \r\nE        +  where 3 = <function call at 0x65964a66c8b0>(['/usr/bin/python', '-m', 'doit', 'list', '--db-file', '/tmp/pytest-of-builduser/pytest-0/test_execute0/testdb'])             \r\nE        +    where <function call at 0x65964a66c8b0> = subprocess.call        \r\n                                                                                           \r\ntests/test___main__.py:6: AssertionError                                                                                                                                              \r\n----------------------------- Captured stderr call -----------------------------                                                                                                                                                                                                                                                                                            \r\nTraceback (most recent call last):                                                                                                                                                                                                                                                                                                                                          \r\n  File \"/build/python-doit/src/python-doit-0.32.0/doit/doit_cmd.py\", line 190, in run\r\n    return command.parse_execute(args)                                                                                                                                                \r\n  File \"/build/python-doit/src/python-doit-0.32.0/doit/cmd_base.py\", line 150, in parse_execute                                                                                       \r\n    return self.execute(params, args)                                                      \r\n  File \"/build/python-doit/src/python-doit-0.32.0/doit/cmd_base.py\", line 554, in execute\r\n    self.loader.setup(params)                                                                                                                                                         \r\n  File \"/build/python-doit/src/python-doit-0.32.0/doit/cmd_base.py\", line 417, in setup\r\n    self.namespace = dict(inspect.getmembers(loader.get_module(                                                                                                                       \r\n  File \"/build/python-doit/src/python-doit-0.32.0/doit/loader.py\", line 95, in get_module\r\n    return importlib.import_module(os.path.splitext(file_name)[0])              \r\n  File \"/usr/lib/python3.8/importlib/__init__.py\", line 127, in import_module  \r\n    return _bootstrap._gcd_import(name[level:], package, level)                \r\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import              \r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load                      \r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked                                                                                                                                                                                                                                                                                                \r\n  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked            \r\n  File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module      \r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed \r\n  File \"/build/python-doit/src/python-doit-0.32.0/dodo.py\", line 7, in <module>\r\n    from doitpy.pyflakes import Pyflakes                                       \r\nModuleNotFoundError: No module named 'doitpy'                                  \r\n______________ TestJobTask.test_not_picklable_raises_InvalidTask _______________\r\n                                                                                           \r\nself = <tests.test_runner.TestJobTask object at 0x659648fb7820>                \r\n                                                                                           \r\n    @pytest.mark.xfail('PLAT_IMPL == \"PyPy\"')  # pypy can handle it :)         \r\n    def test_not_picklable_raises_InvalidTask(self):                           \r\n        # create a large enough recursive obj so pickle fails                              \r\n        d1 = {}                                                                 \r\n        last = d1                                                               \r\n        for x in range(400):                                                               \r\n            dn = {'p': last}                                           \r\n            last = dn                                                                      \r\n        d1['p'] = last                                        \r\n                                                                                           \r\n        def non_top_function(): pass                                           \r\n        t1 = Task('t1', [non_top_function, (d1,)])                             \r\n>       pytest.raises(InvalidTask, runner.JobTask, t1)                                                                                                                                \r\nE       Failed: DID NOT RAISE <class 'doit.exceptions.InvalidTask'>            \r\n                                                                                           \r\ntests/test_runner.py:592: Failed                                                                                                                                                      \r\n=============================== warnings summary ===============================                                                                                                                                                                                                                                                                                            \r\ntests/test_filewatch.py::TestFileWatcher::testLoop                                                                                                                                                                                                                                                                                                                          \r\ntests/test_filewatch.py::TestFileWatcher::testLoop                                   \r\n  /build/python-doit/src/python-doit-0.32.0/tests/test_filewatch.py:74: DeprecationWarning: isAlive() is deprecated, use is_alive() instead                                           \r\n    assert loop_thread.isAlive()                                                                                                                                                      \r\n                                                                                           \r\ntests/test_filewatch.py::TestFileWatcher::testLoop                                       \r\n  /build/python-doit/src/python-doit-0.32.0/tests/test_filewatch.py:96: DeprecationWarning: isAlive() is deprecated, use is_alive() instead                                           \r\n    if loop_thread.isAlive(): # pragma: no cover                                       \r\n                                                                                                                                                                                      \r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html                                 \r\n============= 2 failed, 764 passed, 8 skipped, 3 warnings in 8.53s =============\r\n```\r\n\r\nThis happens after running:\r\n\r\n```\r\npython setup.py build\r\nexport PYTHONPATH=\"${PWD}/build/lib:${PYTHONPATH}\"\r\npy.test\r\n```\r\n\r\nThe latter of the two failing tests is also covered in #341.\r\nIs it safe to ignore these two?\r\n\r\n**Environment**\r\n1. OS: Arch Linux\r\n2. python version: python3.8\r\n3. doit version: 0.32.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/341", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/341/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/341/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/341/events", "html_url": "https://github.com/pydoit/doit/issues/341", "id": 534637017, "node_id": "MDU6SXNzdWU1MzQ2MzcwMTc=", "number": 341, "title": "Test failure on Python 3.8", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-09T01:08:16Z", "updated_at": "2020-04-21T21:31:43Z", "closed_at": "2020-04-21T21:31:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nTestJobTask.test_not_picklable_raises_InvalidTask _______________\r\n\r\nself = <tests.test_runner.TestJobTask object at 0x7f3ec7fb9040>\r\n\r\n    @pytest.mark.xfail('PLAT_IMPL == \"PyPy\"')  # pypy can handle it :)\r\n\r\n    def test_not_picklable_raises_InvalidTask(self):\r\n\r\n        # create a large enough recursive obj so pickle fails\r\n\r\n        d1 = {}\r\n\r\n        last = d1\r\n\r\n        for x in range(400):\r\n\r\n            dn = {'p': last}\r\n\r\n            last = dn\r\n\r\n        d1['p'] = last\r\n\r\n    \r\n\r\n        def non_top_function(): pass\r\n\r\n        t1 = Task('t1', [non_top_function, (d1,)])\r\n\r\n>       pytest.raises(InvalidTask, runner.JobTask, t1)\r\n\r\nE       Failed: DID NOT RAISE <class 'doit.exceptions.InvalidTask'>\r\n```\r\nc.f. https://github.com/pydoit/doit/pull/340 and https://travis-ci.org/pydoit/doit/builds/622302741", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/336", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/336/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/336/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/336/events", "html_url": "https://github.com/pydoit/doit/issues/336", "id": 528544581, "node_id": "MDU6SXNzdWU1Mjg1NDQ1ODE=", "number": 336, "title": "-bash: doit: command not found", "user": {"login": "cx4", "id": 41991295, "node_id": "MDQ6VXNlcjQxOTkxMjk1", "avatar_url": "https://avatars1.githubusercontent.com/u/41991295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cx4", "html_url": "https://github.com/cx4", "followers_url": "https://api.github.com/users/cx4/followers", "following_url": "https://api.github.com/users/cx4/following{/other_user}", "gists_url": "https://api.github.com/users/cx4/gists{/gist_id}", "starred_url": "https://api.github.com/users/cx4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cx4/subscriptions", "organizations_url": "https://api.github.com/users/cx4/orgs", "repos_url": "https://api.github.com/users/cx4/repos", "events_url": "https://api.github.com/users/cx4/events{/privacy}", "received_events_url": "https://api.github.com/users/cx4/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-26T07:38:50Z", "updated_at": "2019-11-26T16:22:12Z", "closed_at": "2019-11-26T16:22:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "my OS is centos7\r\nI installed python3 and pip3\r\ni use pip3 install doit\r\nbut in shell command use doit list \r\n![Mzfk0s.png](https://s2.ax1x.com/2019/11/26/Mzfk0s.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/333", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/333/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/333/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/333/events", "html_url": "https://github.com/pydoit/doit/issues/333", "id": 515787247, "node_id": "MDU6SXNzdWU1MTU3ODcyNDc=", "number": 333, "title": "Task can have only one config_changed()", "user": {"login": "NathanTP", "id": 11949843, "node_id": "MDQ6VXNlcjExOTQ5ODQz", "avatar_url": "https://avatars3.githubusercontent.com/u/11949843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NathanTP", "html_url": "https://github.com/NathanTP", "followers_url": "https://api.github.com/users/NathanTP/followers", "following_url": "https://api.github.com/users/NathanTP/following{/other_user}", "gists_url": "https://api.github.com/users/NathanTP/gists{/gist_id}", "starred_url": "https://api.github.com/users/NathanTP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NathanTP/subscriptions", "organizations_url": "https://api.github.com/users/NathanTP/orgs", "repos_url": "https://api.github.com/users/NathanTP/repos", "events_url": "https://api.github.com/users/NathanTP/events{/privacy}", "received_events_url": "https://api.github.com/users/NathanTP/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-31T22:26:39Z", "updated_at": "2019-11-26T07:05:53Z", "closed_at": "2019-11-26T07:04:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Bug Description\r\nThe config_changed() helper object stores the config under a static name. This means that tasks can only have one instance of config_changed() in their uptodate list. This is easy to reproduce:\r\n\r\n```\r\ndef task_works():\r\n    return {\r\n            \"actions\" : [ (lambda : print(\"Hello World\"), []) ],\r\n            'verbosity': 2,\r\n            \"uptodate\" : [config_changed(\"a\")]\r\n            }\r\n\r\ndef task_breaks():\r\n    return {\r\n            \"actions\" : [ (lambda : print(\"Hello World\"), []) ],\r\n            'verbosity': 2,\r\n            \"uptodate\" : [config_changed(\"a\"), config_changed(\"b\")]\r\n            }\r\n```\r\n\r\ntask_works() will be built the first time, and will be up to date after that. task_breaks() will never be up to date (the db will have 'b' in '_config_changed', so 'a' won't match).\r\n\r\nThis issue is caused by [line 70 in tools.py](https://github.com/pydoit/doit/blob/660d3a2e75dc9d861e5a8916a5723d01a14a0945/doit/tools.py#L70).\r\n\r\n### Proposed Fix\r\nI have fixed this in my project by locally redefining config_changed to assign a unique ID to each config_changed object. In my solution, the unique ID is simply the order in which it was added to the uptodate list:\r\n\r\n```\r\n    def configure_task(self, task):\r\n        # Give this object a unique ID that persists between calls (ID is the\r\n        # order in which it was evaluated when adding)\r\n        if not hasattr(task, '_config_changed_lastID'):\r\n            task._config_changed_lastID = 0\r\n        self.saverID = str(task._config_changed_lastID)\r\n        task._config_changed_lastID += 1\r\n\r\n        configKey = '_config_changed'+self.saverID\r\n        task.value_savers.append(lambda: {configKey:self.config_digest})\r\n\r\n    def __call__(self, task, values):\r\n        \"\"\"return True if config values are UNCHANGED\"\"\"\r\n\r\n        configKey = '_config_changed'+self.saverID\r\n\r\n        self.config_digest = self._calc_digest()\r\n        last_success = values.get(configKey)\r\n        if last_success is None:\r\n            return False\r\n        return (last_success == self.config_digest)\r\n```\r\n\r\nI'm not sure if this is robust to all the use cases (it's working for me so far).\r\n\r\n### Environment\r\n1. OS: Centos 7\r\n2. python version: 3.6\r\n3. doit version: 0.31.1 (although the bug remains in master at [line 70 in tools.py](https://github.com/pydoit/doit/blob/660d3a2e75dc9d861e5a8916a5723d01a14a0945/doit/tools.py#L70))\r\n\r\n### Background\r\nFor the interested, I'm using doit as the underlying dependency management framework in the [FireMarshal](https://github.com/firesim/FireMarshal) workload management tool. Tasks are generated from user-provided configurations along with some base distributions. This config_changed() thing is an issue for me because I always include one config_changed() dependency (for GCC version) and I want the task generators to be able to define their own (e.g. to check if some submodule git revision has changed).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/332", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/332/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/332/events", "html_url": "https://github.com/pydoit/doit/issues/332", "id": 512809953, "node_id": "MDU6SXNzdWU1MTI4MDk5NTM=", "number": 332, "title": "New release", "user": {"login": "inakimalerba", "id": 1879603, "node_id": "MDQ6VXNlcjE4Nzk2MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1879603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inakimalerba", "html_url": "https://github.com/inakimalerba", "followers_url": "https://api.github.com/users/inakimalerba/followers", "following_url": "https://api.github.com/users/inakimalerba/following{/other_user}", "gists_url": "https://api.github.com/users/inakimalerba/gists{/gist_id}", "starred_url": "https://api.github.com/users/inakimalerba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inakimalerba/subscriptions", "organizations_url": "https://api.github.com/users/inakimalerba/orgs", "repos_url": "https://api.github.com/users/inakimalerba/repos", "events_url": "https://api.github.com/users/inakimalerba/events{/privacy}", "received_events_url": "https://api.github.com/users/inakimalerba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-26T08:47:52Z", "updated_at": "2019-12-09T23:04:02Z", "closed_at": "2019-12-09T23:04:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear Developers,\r\n\r\nI'm one of the uploaders of doit in Debian. The latest release was 0.31.1 a long time ago.\r\n\r\nIs there any blocker to make a new one? \r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/327", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/327/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/327/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/327/events", "html_url": "https://github.com/pydoit/doit/issues/327", "id": 475013218, "node_id": "MDU6SXNzdWU0NzUwMTMyMTg=", "number": 327, "title": "Helper tool to create make-like \"Pattern rules\" for file-related tasks", "user": {"login": "smarie", "id": 3236794, "node_id": "MDQ6VXNlcjMyMzY3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarie", "html_url": "https://github.com/smarie", "followers_url": "https://api.github.com/users/smarie/followers", "following_url": "https://api.github.com/users/smarie/following{/other_user}", "gists_url": "https://api.github.com/users/smarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarie/subscriptions", "organizations_url": "https://api.github.com/users/smarie/orgs", "repos_url": "https://api.github.com/users/smarie/repos", "events_url": "https://api.github.com/users/smarie/events{/privacy}", "received_events_url": "https://api.github.com/users/smarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-31T08:43:48Z", "updated_at": "2019-08-01T17:17:14Z", "closed_at": "2019-08-01T17:17:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "From conversation at https://github.com/pydoit/doit/issues/277#issuecomment-471224058\r\n\r\nConsider the following `dodo.py` file. In this file I want to download one `.csv` data file `'./data/raw/*.csv'` for each `.ddl` definition file in `'./data/defs/**/*.ddl'`.\r\n\r\n```python\r\nDataInfo = namedtuple('DataInfo', ('name', 'ddl_file', 'csv_file'))\r\n\"\"\"Info about a dataset. Contains a name, a download def file path and a target csv file path\"\"\"\r\n\r\n\r\ndef list_all_data_to_download(data_defs_folder, data_csv_folder):\r\n    \"\"\"\r\n    Lists all datasets from the def files in the folder and creates a `DataInfo` for each\r\n    \"\"\"\r\n    data_defs_folder = Path(data_defs_folder)\r\n    data_csv_folder = Path(data_csv_folder)\r\n    return [DataInfo(f.stem, f, data_csv_folder / f.stem + '.csv')\r\n            for f in data_defs_folder.glob('**/*.ddl')]\r\n\r\n\r\n# let's create the list of datasets to process\r\nALL_DATA = list_all_data_to_download('./data/defs', './data/raw')\r\n\r\n\r\ndef task_download_data():\r\n    \"\"\"\r\n    Downloads file `./data/raw/<dataset>.csv` for each def file `./data/defs/**/<dataset>.ddl`.\r\n    \"\"\"\r\n    for data in ALL_DATA:\r\n        yield {\r\n            'name': data.name,\r\n            'file_dep': [data.ddl_file, DATA_DDL_PYSCRIPT],\r\n            'actions': [\"python %s --ddl_csv %s\" % (DATA_DDL_PYSCRIPT, data.ddl_file)],\r\n            'verbosity': 2,\r\n            'targets': [data.csv_file]\r\n        }\r\n```\r\n\r\nAs you can see, in order to do this, I pre-construct a list of file path pairs (`DataInfo` instances) based on a `glob` file search. Then this list is used to generate one `doit` subtask for each file. Although this implementation does the job, this is quite cumbersome to do, as I actually do this multiple times for several type of files in the project. Eventually all of these take quite a number of lines of code in my `dodo.py` file, and reduce the overall readability and maintainability.\r\n\r\nAs mentioned by @patrikturi it would be great to express this in a more compact manner.\r\nIn `Make` there is a widely used feature called \"pattern rules\" https://www.gnu.org/software/make/manual/html_node/Pattern-Examples.html#Pattern-Examples . I propose that we provide a tool function to do something similar, for example named `file_pattern`. With this, the above code would become:\r\n\r\n```python\r\nfrom doit.tools import file_pattern\r\n\r\nALL_DATA = file_pattern('./data/defs/**/*.ddl', './data/raw/%.csv')\r\n\r\ndef task_download_data():\r\n    \"\"\"\r\n    Downloads file `./data/raw/<dataset>.csv` for each def file `./data/defs/**/<dataset>.ddl`.\r\n    \"\"\"\r\n    for data in ALL_DATA:\r\n        yield {\r\n            'name': data.name,\r\n            'file_dep': [data.src_path, DATA_DDL_PYSCRIPT],\r\n            'actions': [\"python %s --ddl_csv %s\" % (DATA_DDL_PYSCRIPT, data.src_path)],\r\n            'verbosity': 2,\r\n            'targets': [data.dst_path]\r\n        }\r\n```\r\n\r\nI suggest the following features\r\n\r\n - Patterns should be string or any object (in this case `str()` will be applied on them before use). This makes `pathlib.Path` instances supported out of the box, but does not impose limitations concerning other path representation objects.\r\n\r\n - Source pattern (the first argument) should follow the `glob` syntax, see https://docs.python.org/3/library/glob.html. \r\n\r\n - Destination pattern (the second argument) should represent paths to create. In this pattern, users will be able to use the following:\r\n\r\n     - *stem* character `%`: represents the stem of the matched files or folder names of matched folders.\r\n     - *variable path* character `%%`: represents the part of the path matched by the `**` in the source pattern. In that case the source pattern must have a single double-wildcard.\r\n\r\n - multi-targets would be supported (see last example in https://www.gnu.org/software/make/manual/html_node/Pattern-Examples.html#Pattern-Examples) by passing a dictionary for the target pattern instead of a single item.\r\n\r\nI will submit a corresponding PR shortly.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/324", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/324/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/324/events", "html_url": "https://github.com/pydoit/doit/issues/324", "id": 474038838, "node_id": "MDU6SXNzdWU0NzQwMzg4Mzg=", "number": 324, "title": "Being able to pass a task parameter from the CLI without running specifically that task", "user": {"login": "smarie", "id": 3236794, "node_id": "MDQ6VXNlcjMyMzY3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarie", "html_url": "https://github.com/smarie", "followers_url": "https://api.github.com/users/smarie/followers", "following_url": "https://api.github.com/users/smarie/following{/other_user}", "gists_url": "https://api.github.com/users/smarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarie/subscriptions", "organizations_url": "https://api.github.com/users/smarie/orgs", "repos_url": "https://api.github.com/users/smarie/repos", "events_url": "https://api.github.com/users/smarie/events{/privacy}", "received_events_url": "https://api.github.com/users/smarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662478, "node_id": "MDU6TGFiZWw4MDY2MjQ3OA==", "url": "https://api.github.com/repos/pydoit/doit/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-29T13:02:03Z", "updated_at": "2020-01-17T17:28:47Z", "closed_at": "2019-11-26T07:17:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following `dodo.py` file:\r\n\r\n```python\r\nDOIT_CONFIG = {'default_tasks': ['mytask']}\r\n\r\ndef task_mytask():\r\n    return {\r\n            'params': [{\r\n                'name': 'myparam',\r\n                'short': 'p',\r\n                'long': 'myparam',\r\n                'default': 'param_default',\r\n            }],\r\n            'actions': [\"echo myparam is %(myparam)s\"],\r\n            'verbosity': 2,\r\n        }\r\n```\r\n\r\nCurrently the following works:\r\n\r\n```\r\n>>> doit mytask --myparam hello\r\n.  mytask\r\nmyparam is hello\r\n\r\n>>> doit\r\n.  mytask\r\nmyparam is param_default\r\n```\r\n\r\nBut the following does not:\r\n\r\n```\r\n>>> doit --myparam hello\r\nERROR: Error parsing Command: option --myparam not recognized (parsing options: ['--myparam', 'hello'])\r\n```\r\n\r\nIt would be quite intuitive that the above works too. Indeed it is a bit strange to have to introduce a global `getargs` parameter, just to support this use case. In particular it would be annoying because one would need to reconciliate both.\r\n\r\nRelated tickets:\r\n\r\n * #283 is about ability to define task parameters in the `doit.cfg` file.\r\n * #311 is about the ability to define task parameters in a decorator rather than the dictionary AND the ability for parameters passed to a task group to be passed to subtasks automatically.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/320", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/320/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/320/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/320/events", "html_url": "https://github.com/pydoit/doit/issues/320", "id": 473318090, "node_id": "MDU6SXNzdWU0NzMzMTgwOTA=", "number": 320, "title": "Automatic versioning with `setuptools_scm`", "user": {"login": "smarie", "id": 3236794, "node_id": "MDQ6VXNlcjMyMzY3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarie", "html_url": "https://github.com/smarie", "followers_url": "https://api.github.com/users/smarie/followers", "following_url": "https://api.github.com/users/smarie/following{/other_user}", "gists_url": "https://api.github.com/users/smarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarie/subscriptions", "organizations_url": "https://api.github.com/users/smarie/orgs", "repos_url": "https://api.github.com/users/smarie/repos", "events_url": "https://api.github.com/users/smarie/events{/privacy}", "received_events_url": "https://api.github.com/users/smarie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-26T11:43:05Z", "updated_at": "2019-07-26T14:44:58Z", "closed_at": "2019-07-26T14:44:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Current situation is that a `version.py` is part of the sources and has to be bumped on every release.\r\n\r\nFor what's worth, there is another way: https://smarie.github.io/python-getversion/#package-versioning-best-practices\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/319", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/319/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/319/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/319/events", "html_url": "https://github.com/pydoit/doit/issues/319", "id": 473316721, "node_id": "MDU6SXNzdWU0NzMzMTY3MjE=", "number": 319, "title": "More intuitive internal structure with sub packages", "user": {"login": "smarie", "id": 3236794, "node_id": "MDQ6VXNlcjMyMzY3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarie", "html_url": "https://github.com/smarie", "followers_url": "https://api.github.com/users/smarie/followers", "following_url": "https://api.github.com/users/smarie/following{/other_user}", "gists_url": "https://api.github.com/users/smarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarie/subscriptions", "organizations_url": "https://api.github.com/users/smarie/orgs", "repos_url": "https://api.github.com/users/smarie/repos", "events_url": "https://api.github.com/users/smarie/events{/privacy}", "received_events_url": "https://api.github.com/users/smarie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-26T11:39:27Z", "updated_at": "2019-07-27T19:05:39Z", "closed_at": "2019-07-27T15:51:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently files are organized in a \"flat\" mode:\r\n\r\n![image](https://user-images.githubusercontent.com/3236794/61949276-93c56880-afaa-11e9-8ed6-aca8e0ae4d9f.png)\r\n\r\nIt makes it quite difficult for newcomers to reverse-guess the architecture from package organization. I'm sure that a few separate folders could be identified to better structure this\r\n\r\nAny ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/318", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/318/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/318/events", "html_url": "https://github.com/pydoit/doit/issues/318", "id": 473242006, "node_id": "MDU6SXNzdWU0NzMyNDIwMDY=", "number": 318, "title": "More pythonic first-class citizens such as `CmdOption` and others ", "user": {"login": "smarie", "id": 3236794, "node_id": "MDQ6VXNlcjMyMzY3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarie", "html_url": "https://github.com/smarie", "followers_url": "https://api.github.com/users/smarie/followers", "following_url": "https://api.github.com/users/smarie/following{/other_user}", "gists_url": "https://api.github.com/users/smarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarie/subscriptions", "organizations_url": "https://api.github.com/users/smarie/orgs", "repos_url": "https://api.github.com/users/smarie/repos", "events_url": "https://api.github.com/users/smarie/events{/privacy}", "received_events_url": "https://api.github.com/users/smarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-26T08:33:01Z", "updated_at": "2019-07-27T16:08:45Z", "closed_at": "2019-07-27T16:08:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "(edited for clarity following conversation below, thanks @moltob )\r\n\r\nIt would be great to support usage of `CmdOption` instances in `'params'`, justlike `Task` can be used instead of a dict.\r\n\r\nIn addition, currently `CmdOption` currently has a 'generic' constructor that does not contain argument names in the signature:\r\n\r\n```python\r\nclass CmdOption(object):\r\n    def __init__(self, opt_dict):\r\n        # options must contain 'name' and 'default' value\r\n        opt_dict = opt_dict.copy()\r\n        for field in ('name', 'default',):\r\n            if field not in opt_dict:\r\n                msg = \"CmdOption dict %r missing required property '%s'\"\r\n                raise CmdParseError(msg % (opt_dict, field))\r\n\r\n        self.name = opt_dict.pop('name')\r\n        self.section = opt_dict.pop('section', '')\r\n        self.type = opt_dict.pop('type', str)\r\n        self.set_default(opt_dict.pop('default'))\r\n        self.short = opt_dict.pop('short', '')\r\n        self.long = opt_dict.pop('long', '')\r\n        self.inverse = opt_dict.pop('inverse', '')\r\n        self.choices = dict(opt_dict.pop('choices', []))\r\n        self.help = opt_dict.pop('help', '')\r\n        self.env_var = opt_dict.pop('env_var', None)\r\n```\r\n\r\nIt is not very elegant and straightforward, and it is not introspectable using python default mechanisms. So, users can not get autocompletion and documentation easily from their IDE.\r\n\r\nThe following reformulation would make it much easier for users to call, because the IDE would provide autocompletion:\r\n\r\n```python\r\nclass CmdOption(object):\r\n    def __init__(self, \r\n                 name,         # type: str\r\n                 default,      # type: Any\r\n                 section='',   # type: str\r\n                 type=str,     # type: Type[Any]\r\n                 short='',     # type: str\r\n                 long='',      # type: str\r\n                 inverse='',   # type: str\r\n                 choices=(),   # type: Iterable[Any]\r\n                 help='',      # type: str\r\n                 env_var=None  # type: Any\r\n                 ):\r\n        \"\"\"\r\n        blabla\r\n        \"\"\"\r\n\r\n        self.name = name\r\n        self.set_default(default)\r\n        self.section = section\r\n        self.type = type\r\n        self.short = short\r\n        self.long = long\r\n        self.inverse = inverse\r\n        self.choices = choices\r\n        self.help = help\r\n        self.env_var = env_var\r\n```\r\n\r\nAnd calling code would just need to do:\r\n\r\n```\r\ntry:\r\n    cmd_opts = CmdOption(**opt_dict)\r\nexcept TypeError as e:\r\n    raise CmdParseError(\"Error creating CmdOption from dict %r: '%s'\" % (opt_dict, e))`\r\n```\r\n\r\nNote that there may be additional classes in the data model where the same comment applies.\r\n\r\nAs always I can work on a PR if you wish - that should not be too difficult.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/317", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/317/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/317/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/317/events", "html_url": "https://github.com/pydoit/doit/issues/317", "id": 473228844, "node_id": "MDU6SXNzdWU0NzMyMjg4NDQ=", "number": 317, "title": "Merge all `.doit.xxx` files in a single `.doit/` folder", "user": {"login": "smarie", "id": 3236794, "node_id": "MDQ6VXNlcjMyMzY3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarie", "html_url": "https://github.com/smarie", "followers_url": "https://api.github.com/users/smarie/followers", "following_url": "https://api.github.com/users/smarie/following{/other_user}", "gists_url": "https://api.github.com/users/smarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarie/subscriptions", "organizations_url": "https://api.github.com/users/smarie/orgs", "repos_url": "https://api.github.com/users/smarie/repos", "events_url": "https://api.github.com/users/smarie/events{/privacy}", "received_events_url": "https://api.github.com/users/smarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662474, "node_id": "MDU6TGFiZWw4MDY2MjQ3NA==", "url": "https://api.github.com/repos/pydoit/doit/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-26T07:58:44Z", "updated_at": "2019-07-27T18:55:20Z", "closed_at": "2019-07-27T15:57:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed that `doit` creates several files located at the project root.\r\n\r\nThe usual practice for projects doing this (e.g. pytest, pycharm, I think tox too, etc.) is to store their files in a dedicated folder.\r\n\r\nCould we consider creating a `.doit` folder and putting all doit-created files in it ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/315", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/315/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/315/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/315/events", "html_url": "https://github.com/pydoit/doit/issues/315", "id": 472857094, "node_id": "MDU6SXNzdWU0NzI4NTcwOTQ=", "number": 315, "title": "dodo.py requirements file", "user": {"login": "smarie", "id": 3236794, "node_id": "MDQ6VXNlcjMyMzY3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarie", "html_url": "https://github.com/smarie", "followers_url": "https://api.github.com/users/smarie/followers", "following_url": "https://api.github.com/users/smarie/following{/other_user}", "gists_url": "https://api.github.com/users/smarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarie/subscriptions", "organizations_url": "https://api.github.com/users/smarie/orgs", "repos_url": "https://api.github.com/users/smarie/repos", "events_url": "https://api.github.com/users/smarie/events{/privacy}", "received_events_url": "https://api.github.com/users/smarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-25T13:10:58Z", "updated_at": "2019-07-26T14:33:24Z", "closed_at": "2019-07-25T17:50:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I could not find in the documentation any reference on how to specify a requirements file for the `dodo.py` script itself. For example if in some module-level script in my dodo.py script need a specific package: how should I do ? Currently the workaround is to put all the code requiring dedicated packages in a task, so that this task can require another `install_requirements` task. It is a bit tideous...\r\n\r\nIt would probably make sense to support a simpler way to automatically check/install \"global\" (=module-wide) dependencies of a `dodo.py`script. \r\n\r\nI see two things that could be done:\r\n\r\n * a `dodo_requires.txt` file \r\n * a `dodo_requires.py` script, that could contain any number of doit tasks and would be executed prior to main `dodo.py` execution\r\n\r\nDoes it make sense ? \r\n\r\nI would personally think that **only the first option (txt) is enough**, because the second (script) could naturally be done by rearchitecturing the `dodo.py` file (basically, putting everything that requires specific packages in another file and only creating the corresponding tasks if it can be imported).\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/314", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/314/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/314/events", "html_url": "https://github.com/pydoit/doit/issues/314", "id": 472776180, "node_id": "MDU6SXNzdWU0NzI3NzYxODA=", "number": 314, "title": "Action with multiple commands in the same Process, in a portable way", "user": {"login": "smarie", "id": 3236794, "node_id": "MDQ6VXNlcjMyMzY3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarie", "html_url": "https://github.com/smarie", "followers_url": "https://api.github.com/users/smarie/followers", "following_url": "https://api.github.com/users/smarie/following{/other_user}", "gists_url": "https://api.github.com/users/smarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarie/subscriptions", "organizations_url": "https://api.github.com/users/smarie/orgs", "repos_url": "https://api.github.com/users/smarie/repos", "events_url": "https://api.github.com/users/smarie/events{/privacy}", "received_events_url": "https://api.github.com/users/smarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-25T10:01:36Z", "updated_at": "2019-07-26T07:52:51Z", "closed_at": "2019-07-25T17:53:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirst of all many thanks for this project - it was a relief for me to find that someone had the same needs than us to escape from the legacy make-like build tools while preserving the good features. From what I've seen up to now, you did it quite well!\r\n\r\nI have been struggling to find information about the possibility to run several commands **in the same process** in a task. \r\n\r\nAs of today it is possible to do it using a shell-dependent separator:\r\n\r\n```python\r\nimport platform\r\nOS_CMD_SEP = '&' if platform.system() == 'Windows' else ';'\r\n\r\ndef task_stupid():\r\n    return {\r\n        'actions': [\"echo 'hello' %s echo 'world'\" % OS_CMD_SEP],\r\n        'verbosity': 2,\r\n    }\r\n```\r\n\r\nIt feels like it could be so much more elegant :) for example I would suggest:\r\n\r\n```python\r\ndef task_elegant():\r\n    return {\r\n        'actions': [\"\"\"\r\n                    echo 'hello'\r\n                    echo 'world'\r\n                    \"\"\"],\r\n        'verbosity': 2,\r\n    }\r\n```\r\n\r\nWould that make sense ? If so I can try to work on a PR.\r\n\r\nNote for the record, that my initial need was not to call 'echo' but to activate a conda environment before running other commands :)\r\n\r\nSee also https://stackoverflow.com/questions/39721924/how-to-run-multiple-commands-synchronously-from-one-subprocess-popen-command", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/310", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/310/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/310/events", "html_url": "https://github.com/pydoit/doit/issues/310", "id": 457017985, "node_id": "MDU6SXNzdWU0NTcwMTc5ODU=", "number": 310, "title": "ModuleTaskLoader(): OSError when changing the path", "user": {"login": "assarbad", "id": 3238620, "node_id": "MDQ6VXNlcjMyMzg2MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3238620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/assarbad", "html_url": "https://github.com/assarbad", "followers_url": "https://api.github.com/users/assarbad/followers", "following_url": "https://api.github.com/users/assarbad/following{/other_user}", "gists_url": "https://api.github.com/users/assarbad/gists{/gist_id}", "starred_url": "https://api.github.com/users/assarbad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/assarbad/subscriptions", "organizations_url": "https://api.github.com/users/assarbad/orgs", "repos_url": "https://api.github.com/users/assarbad/repos", "events_url": "https://api.github.com/users/assarbad/events{/privacy}", "received_events_url": "https://api.github.com/users/assarbad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-17T16:03:55Z", "updated_at": "2019-06-18T08:01:52Z", "closed_at": "2019-06-18T08:01:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following Python scripts. It is important to have them into some subdirectory, here it is named `doit-test`, but the name does not matter.\r\n\r\n### `doit-test/test1.py`\r\n```python3\r\n#!/usr/bin/python3\r\nimport doit\r\nimport os\r\nimport sys\r\n\r\ndef task_hello():\r\n    \"\"\"hello\"\"\"\r\n\r\n    def python_hello(targets):\r\n        with open(targets[0], \"a\") as output:\r\n            output.write(\"Python says Hello World!!!\\n\")\r\n\r\n    return {\r\n        \"actions\": [python_hello],\r\n        \"targets\": [\"hello.txt\"],\r\n        \"clean\": True,\r\n        }\r\n\r\nif __name__ == \"__main__\":\r\n    from doit.cmd_base import ModuleTaskLoader\r\n    from doit.doit_cmd import DoitMain\r\n\r\n    os.chdir(os.path.realpath(os.path.dirname(__file__)))\r\n    sys.exit(DoitMain(ModuleTaskLoader(sys.modules[__name__])).run(sys.argv[1:]))\r\n```\r\n\r\n### `doit-test/test2.py`\r\n\r\n```python3\r\n#!/usr/bin/python3\r\nimport doit\r\nimport os\r\n\r\ndef task_hello():\r\n    \"\"\"hello\"\"\"\r\n\r\n    def python_hello(targets):\r\n        with open(targets[0], \"a\") as output:\r\n            output.write(\"Python says Hello World!!!\\n\")\r\n\r\n    return {\r\n        \"actions\": [python_hello],\r\n        \"targets\": [\"hello.txt\"],\r\n        \"clean\": True,\r\n        }\r\n\r\nif __name__ == \"__main__\":\r\n    os.chdir(os.path.realpath(os.path.dirname(__file__)))\r\n    doit.run(globals())\r\n```\r\nThese scripts should be pretty much equivalent anyway, and with respect to this issue they behave identically.\r\n\r\nIf you run these scripts in the folder in which they are located, all works as expected. However, when running them using a relative path we get this:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/oliver/.local/lib/python3.5/site-packages/doit/doit_cmd.py\", line 177, in run\r\n    return command.parse_execute(args)\r\n  File \"/home/oliver/.local/lib/python3.5/site-packages/doit/cmd_base.py\", line 127, in parse_execute\r\n    return self.execute(params, args)\r\n  File \"/home/oliver/.local/lib/python3.5/site-packages/doit/cmd_base.py\", line 389, in execute\r\n    self, params, args)\r\n  File \"/home/oliver/.local/lib/python3.5/site-packages/doit/cmd_base.py\", line 270, in load_tasks\r\n    return self._load_from(cmd, self.mod_dict, self.cmd_names)\r\n  File \"/home/oliver/.local/lib/python3.5/site-packages/doit/cmd_base.py\", line 254, in _load_from\r\n    task_list = loader.load_tasks(members, cmd_list, cmd.execute_tasks)\r\n  File \"/home/oliver/.local/lib/python3.5/site-packages/doit/loader.py\", line 129, in load_tasks\r\n    funcs = _get_task_creators(namespace, command_names)\r\n  File \"/home/oliver/.local/lib/python3.5/site-packages/doit/loader.py\", line 200, in _get_task_creators\r\n    line = inspect.getsourcelines(ref)[1]\r\n  File \"/usr/lib/python3.5/inspect.py\", line 931, in getsourcelines\r\n    lines, lnum = findsource(object)\r\n  File \"/usr/lib/python3.5/inspect.py\", line 762, in findsource\r\n    raise OSError('could not get source code')\r\nOSError: could not get source code\r\n```\r\n\r\nThis is somewhat unexpected and it does not help to import `linecache` and call `linecache.clearcache()` between instantiating the loader and calling `DoitMain().run()` either.\r\n\r\nI discovered this when I changed the path before invoking `run()` ... but it's simpler to reproduce by giving a relative path to the script in question.\r\n\r\n**Environment**\r\n1. OS: Windows 10 and Ubuntu 16.04 respectively (error is the same except paths and line numbers in traceback)\r\n2. Python version: 3.7.3 / 3.5.2\r\n3. doit version: 0.31.1\r\n\r\n----\r\n\r\nThe one workaround I have found was to use the following variation on the `DodoTaskLoader`:\r\n\r\n```python3\r\n#!/usr/bin/python3\r\nimport doit\r\nimport os\r\nimport sys\r\n\r\ndef task_hello():\r\n    \"\"\"hello\"\"\"\r\n\r\n    def python_hello(targets):\r\n        with open(targets[0], \"a\") as output:\r\n            output.write(\"Python says Hello World!!!\\n\")\r\n\r\n    return {\r\n        \"actions\": [python_hello],\r\n        \"targets\": [\"hello.txt\"],\r\n        \"clean\": True,\r\n        }\r\n\r\nif __name__ == \"__main__\":\r\n    from doit.cmd_base import TaskLoader\r\n    from doit.doit_cmd import DoitMain\r\n\r\n    class MyTaskLoader(TaskLoader):\r\n        cmd_options = ()\r\n\r\n        def load_tasks(self, cmd, params, args):\r\n            from doit import loader\r\n            module = loader.get_module(__file__, None, False)\r\n            return self._load_from(cmd, module, self.cmd_names)\r\n\r\n    sys.exit(DoitMain(MyTaskLoader()).run(sys.argv[1:]))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/309", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/309/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/309/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/309/events", "html_url": "https://github.com/pydoit/doit/issues/309", "id": 455296951, "node_id": "MDU6SXNzdWU0NTUyOTY5NTE=", "number": 309, "title": "retrieving name of task at runtime", "user": {"login": "mitchbregs", "id": 1377151, "node_id": "MDQ6VXNlcjEzNzcxNTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1377151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitchbregs", "html_url": "https://github.com/mitchbregs", "followers_url": "https://api.github.com/users/mitchbregs/followers", "following_url": "https://api.github.com/users/mitchbregs/following{/other_user}", "gists_url": "https://api.github.com/users/mitchbregs/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitchbregs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitchbregs/subscriptions", "organizations_url": "https://api.github.com/users/mitchbregs/orgs", "repos_url": "https://api.github.com/users/mitchbregs/repos", "events_url": "https://api.github.com/users/mitchbregs/events{/privacy}", "received_events_url": "https://api.github.com/users/mitchbregs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 186649082, "node_id": "MDU6TGFiZWwxODY2NDkwODI=", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid-send-questions-to-discussion-group", "name": "invalid-send-questions-to-discussion-group", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-12T15:58:40Z", "updated_at": "2019-06-16T09:03:09Z", "closed_at": "2019-06-16T09:03:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running the command:\r\n\r\n`doit -f xyz/dodo.py external_report`.\r\n\r\nMy goal is to, at runtime, be able to retrieve that I have specified task being `external_report`.  At the moment, there are no upstream dependencies on this task, and since I plan to run it stand-a-lone, I need to configure some other things to only be performed when `external_report` is called.  To do so, I need to be able to retrieve the task name once I run `doit` from the command line.\r\n\r\nI have searched through all the `doit` built-ins, however I am having trouble retrieving `external_report` during run.  Is there any way to retrieve this information? \r\n\r\nThanks in advance @schettino72 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/308", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/308/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/308/events", "html_url": "https://github.com/pydoit/doit/issues/308", "id": 454749444, "node_id": "MDU6SXNzdWU0NTQ3NDk0NDQ=", "number": 308, "title": "\"clean\" cannot be given as a task_dep", "user": {"login": "assarbad", "id": 3238620, "node_id": "MDQ6VXNlcjMyMzg2MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3238620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/assarbad", "html_url": "https://github.com/assarbad", "followers_url": "https://api.github.com/users/assarbad/followers", "following_url": "https://api.github.com/users/assarbad/following{/other_user}", "gists_url": "https://api.github.com/users/assarbad/gists{/gist_id}", "starred_url": "https://api.github.com/users/assarbad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/assarbad/subscriptions", "organizations_url": "https://api.github.com/users/assarbad/orgs", "repos_url": "https://api.github.com/users/assarbad/repos", "events_url": "https://api.github.com/users/assarbad/events{/privacy}", "received_events_url": "https://api.github.com/users/assarbad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-11T15:11:40Z", "updated_at": "2019-06-12T07:50:37Z", "closed_at": "2019-06-12T03:27:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems odd that the list for `task_dep` cannot accept `\"clean\"` ... also, even if it could (which I think would be the natural thing to do), it would be unclear how to switch the modes of that task (`cleanall` etc).\r\n\r\nThe idea was to have a `task_rebuild` like so:\r\n\r\n```\r\ndef task_rebuild():\r\n    return {\r\n        \"actions\": [],\r\n        \"task_dep\": [\"clean\", \"all\"],\r\n        }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/303", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/303/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/303/events", "html_url": "https://github.com/pydoit/doit/issues/303", "id": 446265522, "node_id": "MDU6SXNzdWU0NDYyNjU1MjI=", "number": 303, "title": "[low priority] BaseAction utility methods - __eq__, multi-create", "user": {"login": "hangtwenty", "id": 2420688, "node_id": "MDQ6VXNlcjI0MjA2ODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2420688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hangtwenty", "html_url": "https://github.com/hangtwenty", "followers_url": "https://api.github.com/users/hangtwenty/followers", "following_url": "https://api.github.com/users/hangtwenty/following{/other_user}", "gists_url": "https://api.github.com/users/hangtwenty/gists{/gist_id}", "starred_url": "https://api.github.com/users/hangtwenty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hangtwenty/subscriptions", "organizations_url": "https://api.github.com/users/hangtwenty/orgs", "repos_url": "https://api.github.com/users/hangtwenty/repos", "events_url": "https://api.github.com/users/hangtwenty/events{/privacy}", "received_events_url": "https://api.github.com/users/hangtwenty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-20T19:07:19Z", "updated_at": "2019-05-24T14:36:58Z", "closed_at": "2019-05-24T14:36:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found these useful. What do you think about if I cleaned them up and made a PR? Would be Py2 compatible of course, though examples are from Py3 (f-strings etc would be changed).\r\n\r\n## `@classmethod actions`\r\n\r\n```\r\n    @classmethod\r\n    def actions(cls, sequence: List[Union[List[str], str]], *args, **kwargs):\r\n        \"\"\" convenience method for creating a sequence of actions.\r\n\r\n        Examples:\r\n            >>> cls = MyCustomAction  # <-- just from local. would be generic...\r\n            >>> action_instances = cls.actions(['echo hi world', 'echo hi cosmos'])\r\n            >>> assert all([isinstance(a, cls) for a in action_instances])\r\n            >>> # noinspection PyProtectedMember\r\n            ... [o.action for o in action_instances]\r\n            ['echo hi world', 'echo hi cosmos']\r\n            >>> action_instances == [cls('echo hi world'), cls('echo hi cosmos')]\r\n            True\r\n        \"\"\"\r\n        return [cls(action=x, *args, **kwargs) for x in sequence]\r\n```\r\n\r\n## `__eq__`\r\n\r\nSeems like a nice-to-have to be able to compare actions, for debugging or learning purposes. I have this locally (unsure if adequate)\r\n\r\n```python\r\n    def __eq__(self, other):\r\n        if any(x is not None for x in [self.out, self.err, self.result,]):\r\n            logging.warning('actions that have already run are never considered equal')\r\n            return False\r\n        if isinstance(other, self.__class__):\r\n            comparison = dict(\r\n                _action=self._action == other._action,\r\n                task=self.task == other.task,\r\n                values=self.values==other.values,\r\n                save_out=self.save_out ==other.save_out,\r\n                shell=self.shell==other.shell,\r\n                encoding=self.encoding == other.encoding,\r\n                decode_error=self.decode_error == other.decode_error,\r\n                pkwargs=self.pkwargs == other.pkwargs,\r\n                buffering=self.buffering == other.buffering,\r\n            )\r\n            eq = all(comparison.values())\r\n            pformat(comparison, indent=2)\r\n            logging.debug(\r\n                f'{self!r}=={other!r} => {eq} -- comparison detail: {comparison}')\r\n            return eq\r\n        return False\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/302", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/302/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/302/events", "html_url": "https://github.com/pydoit/doit/issues/302", "id": 444922486, "node_id": "MDU6SXNzdWU0NDQ5MjI0ODY=", "number": 302, "title": "Add a lock on tasks", "user": {"login": "gwenzek", "id": 5920036, "node_id": "MDQ6VXNlcjU5MjAwMzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5920036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gwenzek", "html_url": "https://github.com/gwenzek", "followers_url": "https://api.github.com/users/gwenzek/followers", "following_url": "https://api.github.com/users/gwenzek/following{/other_user}", "gists_url": "https://api.github.com/users/gwenzek/gists{/gist_id}", "starred_url": "https://api.github.com/users/gwenzek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gwenzek/subscriptions", "organizations_url": "https://api.github.com/users/gwenzek/orgs", "repos_url": "https://api.github.com/users/gwenzek/repos", "events_url": "https://api.github.com/users/gwenzek/events{/privacy}", "received_events_url": "https://api.github.com/users/gwenzek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662478, "node_id": "MDU6TGFiZWw4MDY2MjQ3OA==", "url": "https://api.github.com/repos/pydoit/doit/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-05-16T12:17:54Z", "updated_at": "2019-05-28T02:34:03Z", "closed_at": "2019-05-24T14:30:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a lot of long-running tasks that I'm running using doit.\r\n\r\nI often accidentally launch a task while it was already running.\r\nHaving two processes running the same task often lead to issues:\r\n* use of the same resources\r\n* second task will overwrite the results of the first task\r\n* even if all goes well, I've wasted my CPU resources\r\n\r\nI'd like to have a \"locking\" mechanism for a task. Is something like this already implemented ?\r\n\r\nFor now, I'm using a heuristic to check that a task isn't already running right at the beginning of my code. But it would be nicer if the runner could do this for me, by e.g. storing a lock in the DB when a task is launched. The lock would need some kind of deadline in case `doit` crash and is unable to remove it, and the lock should probably be ignored with the `doit run -a` flag.\r\n\r\nIs there a hook to write something *before* a task is run ? AFAIU `value_savers` are only called *after* the task is run.\r\n\r\nAnd of course, thanks for the nice tool!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/300", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/300/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/300/events", "html_url": "https://github.com/pydoit/doit/issues/300", "id": 444502260, "node_id": "MDU6SXNzdWU0NDQ1MDIyNjA=", "number": 300, "title": "Enhancement to enable python-actions to return non-serializable objects", "user": {"login": "rbdixon", "id": 35279, "node_id": "MDQ6VXNlcjM1Mjc5", "avatar_url": "https://avatars3.githubusercontent.com/u/35279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbdixon", "html_url": "https://github.com/rbdixon", "followers_url": "https://api.github.com/users/rbdixon/followers", "following_url": "https://api.github.com/users/rbdixon/following{/other_user}", "gists_url": "https://api.github.com/users/rbdixon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbdixon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbdixon/subscriptions", "organizations_url": "https://api.github.com/users/rbdixon/orgs", "repos_url": "https://api.github.com/users/rbdixon/repos", "events_url": "https://api.github.com/users/rbdixon/events{/privacy}", "received_events_url": "https://api.github.com/users/rbdixon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-15T15:24:43Z", "updated_at": "2019-05-15T18:18:44Z", "closed_at": "2019-05-15T18:18:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently python-actions can return one of a few [JSON serializable data types][0]. As discussed in a [prior forum post][1] there are sometimes tasks which read files to assemble an in-memory Python object or data structure which can't be JSON serialized. Serialization occurs when the task results as persisted to the database and when a multi-process or multi-threaded runner needs to pass results from one task to another.\r\n\r\nI was curious what might be required to allow tasks to return non-serializable values. I put together a [simple proof-of-concept][2] to demonstrate the test case and the simples solution I could think of. The POC:\r\n\r\nA) Stores non-serializable values as \"null\" in the JSON output.\r\nB) Requires that all tasks which return non-serializable values set `uptodate` to False.\r\nC) Does not support parallel execution.\r\nD) Only implemented with the JSON backend.\r\n\r\nI was pleasantly surprised that this simple modification worked well for my purposes.\r\n\r\nPossible improvements:\r\n\r\n1) Non-serializable values could be pickled and then unpickled from the database. Unpickling untrusted data is a security concern. \"The pickle module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.\"\r\n2) The \"null\" value used instead of the un-serialized object could be replaced with a sentinel value. Upon reading this sentinel value the task's `uptodate` value could be automatically set to False. This would remove a likely user error where an unserializable value would be replaced by None.\r\n3) Parallel execution could be supported using improvement #1\r\n4) All backends could be implemented with the custom JSON encode/decode classes\r\n5) Documentation\r\n\r\nI think that improvements 2, 4, and 5 would sufficient for a minimally functional pull-request.\r\n\r\nQuestions:\r\n\r\n1) What am I not thinking of?\r\n2) @schettino72 : Would you be interested in merging this feature were I to create a pull-request?\r\n\r\n[0]: http://pydoit.org/tasks.html#python-action\r\n[1]: https://groups.google.com/d/msg/python-doit/c1ZK4GNJkSw/ezZ-_gBxAwAJ\r\n[2]: https://gist.github.com/rbdixon/3d749a6f99dd7f3a47a7f320d0867aa8", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/291", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/291/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/291/events", "html_url": "https://github.com/pydoit/doit/issues/291", "id": 435408752, "node_id": "MDU6SXNzdWU0MzU0MDg3NTI=", "number": 291, "title": "doit.run()", "user": {"login": "NickMortimer", "id": 4338975, "node_id": "MDQ6VXNlcjQzMzg5NzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4338975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NickMortimer", "html_url": "https://github.com/NickMortimer", "followers_url": "https://api.github.com/users/NickMortimer/followers", "following_url": "https://api.github.com/users/NickMortimer/following{/other_user}", "gists_url": "https://api.github.com/users/NickMortimer/gists{/gist_id}", "starred_url": "https://api.github.com/users/NickMortimer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NickMortimer/subscriptions", "organizations_url": "https://api.github.com/users/NickMortimer/orgs", "repos_url": "https://api.github.com/users/NickMortimer/repos", "events_url": "https://api.github.com/users/NickMortimer/events{/privacy}", "received_events_url": "https://api.github.com/users/NickMortimer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 186649082, "node_id": "MDU6TGFiZWwxODY2NDkwODI=", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid-send-questions-to-discussion-group", "name": "invalid-send-questions-to-discussion-group", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-20T15:04:37Z", "updated_at": "2019-04-21T14:03:50Z", "closed_at": "2019-04-21T14:03:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I've just started using pydoit and stating to get my work flow going. I like to debug using pycharm using at the end of my file\r\n\r\n\r\n```\r\nif __name__ == '__main__':\r\n    import doit\r\n    doit.run(globals())\r\n```\r\n\r\n\r\nmy question is how do I pass an arg into the run? --continue would be great so that my build skips over broken tasks?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/288", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/288/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/288/events", "html_url": "https://github.com/pydoit/doit/issues/288", "id": 430331225, "node_id": "MDU6SXNzdWU0MzAzMzEyMjU=", "number": 288, "title": "clean not able to access doit data?", "user": {"login": "moltob", "id": 6240478, "node_id": "MDQ6VXNlcjYyNDA0Nzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6240478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moltob", "html_url": "https://github.com/moltob", "followers_url": "https://api.github.com/users/moltob/followers", "following_url": "https://api.github.com/users/moltob/following{/other_user}", "gists_url": "https://api.github.com/users/moltob/gists{/gist_id}", "starred_url": "https://api.github.com/users/moltob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moltob/subscriptions", "organizations_url": "https://api.github.com/users/moltob/orgs", "repos_url": "https://api.github.com/users/moltob/repos", "events_url": "https://api.github.com/users/moltob/events{/privacy}", "received_events_url": "https://api.github.com/users/moltob/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 190184556, "node_id": "MDU6TGFiZWwxOTAxODQ1NTY=", "url": "https://api.github.com/repos/pydoit/doit/labels/docs", "name": "docs", "color": "009800", "default": false, "description": null}, {"id": 80662475, "node_id": "MDU6TGFiZWw4MDY2MjQ3NQ==", "url": "https://api.github.com/repos/pydoit/doit/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 23, "created_at": "2019-04-08T08:54:32Z", "updated_at": "2019-06-02T02:11:54Z", "closed_at": "2019-06-02T02:11:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Actions are able to access doit's database, e.g. the return values of other tasks via `getargs`. As such configuration affects the action and what is done and produced, I see frequent need to also provide this to clean. But it does not seem to be possible. Is it?\r\n\r\nThx!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/286", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/286/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/286/events", "html_url": "https://github.com/pydoit/doit/issues/286", "id": 424610626, "node_id": "MDU6SXNzdWU0MjQ2MTA2MjY=", "number": 286, "title": "Cannot use functools.partial as title", "user": {"login": "slaperche-scality", "id": 34654278, "node_id": "MDQ6VXNlcjM0NjU0Mjc4", "avatar_url": "https://avatars0.githubusercontent.com/u/34654278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slaperche-scality", "html_url": "https://github.com/slaperche-scality", "followers_url": "https://api.github.com/users/slaperche-scality/followers", "following_url": "https://api.github.com/users/slaperche-scality/following{/other_user}", "gists_url": "https://api.github.com/users/slaperche-scality/gists{/gist_id}", "starred_url": "https://api.github.com/users/slaperche-scality/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slaperche-scality/subscriptions", "organizations_url": "https://api.github.com/users/slaperche-scality/orgs", "repos_url": "https://api.github.com/users/slaperche-scality/repos", "events_url": "https://api.github.com/users/slaperche-scality/events{/privacy}", "received_events_url": "https://api.github.com/users/slaperche-scality/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 1, "created_at": "2019-03-24T13:03:06Z", "updated_at": "2019-05-03T10:18:42Z", "closed_at": "2019-05-03T10:18:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was surprised to see that you can pass normal functions and lambas to the `title` attribute,but partial functions (`functools.partial`) aren't accepted:\r\n\r\n```python\r\n#!/usr/bin/env python\r\n# coding: utf-8\r\n\r\nimport functools\r\n\r\ndef show_cmd(extra, task):\r\n    return '{}: executing... {}'.format(extra, task.name)\r\n\r\ndef task_lambda_ok():\r\n    return {\r\n        'actions':['echo lambda'],\r\n        'title': lambda task: show_cmd('LAMBDA', task)\r\n    }\r\n\r\ndef task_partial_ko():\r\n    title = functools.partial(show_cmd, extra='PARTIAL')\r\n    return {\r\n        'actions':['echo partial'],\r\n        'title': title,\r\n    }\r\n```\r\n\r\ngives\r\n\r\n```\r\n% doit list\r\nERROR: Task 'partial_ko' attribute 'title' must be {function, None}\r\ngot:functools.partial(<function show_cmd at 0x7f26847466a8>, extra='PARTIAL')\r\n<class 'functools.partial'>\r\n```\r\n\r\n\r\nIs that on purpose or is it an oversight?\r\n\r\nSeems prevented by https://github.com/pydoit/doit/blob/master/doit/task.py#L156, so it probably could be easily fixed by using `collections.abc.Callable` instead of `types.FunctionType` (but maybe I'm missing something).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/285", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/285/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/285/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/285/events", "html_url": "https://github.com/pydoit/doit/issues/285", "id": 424610178, "node_id": "MDU6SXNzdWU0MjQ2MTAxNzg=", "number": 285, "title": "Unexpected targets' cleanup order", "user": {"login": "slaperche-scality", "id": 34654278, "node_id": "MDQ6VXNlcjM0NjU0Mjc4", "avatar_url": "https://avatars0.githubusercontent.com/u/34654278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slaperche-scality", "html_url": "https://github.com/slaperche-scality", "followers_url": "https://api.github.com/users/slaperche-scality/followers", "following_url": "https://api.github.com/users/slaperche-scality/following{/other_user}", "gists_url": "https://api.github.com/users/slaperche-scality/gists{/gist_id}", "starred_url": "https://api.github.com/users/slaperche-scality/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slaperche-scality/subscriptions", "organizations_url": "https://api.github.com/users/slaperche-scality/orgs", "repos_url": "https://api.github.com/users/slaperche-scality/repos", "events_url": "https://api.github.com/users/slaperche-scality/events{/privacy}", "received_events_url": "https://api.github.com/users/slaperche-scality/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662473, "node_id": "MDU6TGFiZWw4MDY2MjQ3Mw==", "url": "https://api.github.com/repos/pydoit/doit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 5, "created_at": "2019-03-24T12:58:32Z", "updated_at": "2019-05-12T09:05:01Z", "closed_at": "2019-05-12T08:51:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I wanted a task that creates a directory hierarchy, so I was careful to sort my list of targets from the root to the leaves and I was expecting that the cleanup would be done in the reverse order (thus, leaves would be `rmdir`ed before the root but it seems the cleanup iterate over the targets from the start.\r\n\r\nGiven this `dodo.py`\r\n\r\n```python\r\n#!/usr/bin/env python\r\n# coding: utf-8\r\n\r\nimport os\r\n\r\ndef task_test():\r\n    \"\"\"test\"\"\"\r\n    def mkdir(targets):\r\n        for directory in targets:\r\n            os.mkdir(directory)\r\n\r\n    return {\r\n        'actions': [mkdir],\r\n        'targets': ['foo', 'foo/bar'],\r\n        'clean': True,\r\n    }\r\n```\r\n\r\nI got\r\n\r\n```\r\n% doit clean test\r\ntest - cannot remove (it is not empty) 'foo'\r\ntest - removing dir 'foo/bar'\r\n```\r\n\r\nNow, it's easy to workaround (my action can iterate over `reversed(targets)` or I can write a custom cleanup action) but it's not ideal.\r\n\r\nIs it a bug or was I having unjustified expectations here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/283", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/283/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/283/events", "html_url": "https://github.com/pydoit/doit/issues/283", "id": 407708778, "node_id": "MDU6SXNzdWU0MDc3MDg3Nzg=", "number": 283, "title": "Set task options from doit.cfg", "user": {"login": "rbdixon", "id": 35279, "node_id": "MDQ6VXNlcjM1Mjc5", "avatar_url": "https://avatars3.githubusercontent.com/u/35279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbdixon", "html_url": "https://github.com/rbdixon", "followers_url": "https://api.github.com/users/rbdixon/followers", "following_url": "https://api.github.com/users/rbdixon/following{/other_user}", "gists_url": "https://api.github.com/users/rbdixon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbdixon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbdixon/subscriptions", "organizations_url": "https://api.github.com/users/rbdixon/orgs", "repos_url": "https://api.github.com/users/rbdixon/repos", "events_url": "https://api.github.com/users/rbdixon/events{/privacy}", "received_events_url": "https://api.github.com/users/rbdixon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662475, "node_id": "MDU6TGFiZWw4MDY2MjQ3NQ==", "url": "https://api.github.com/repos/pydoit/doit/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-07T13:49:16Z", "updated_at": "2019-12-20T18:47:21Z", "closed_at": "2019-11-26T06:52:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Per [thread](https://groups.google.com/forum/#!topic/python-doit/4PnYOeNO5SI): I'd like to set task parameters from doit.cfg as well. It seems possible since the `doit help <task>` section lists the config name to use but config stanzas based on the task name are ignored:\r\n\r\n```\r\n[<taskname>]\r\nfoo = bar\r\n```\r\n\r\n@schettino72 said that this is not currently possible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/275", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/275/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/275/events", "html_url": "https://github.com/pydoit/doit/issues/275", "id": 394977774, "node_id": "MDU6SXNzdWUzOTQ5Nzc3NzQ=", "number": 275, "title": "Some tests are failing with Pytest 4", "user": {"login": "okin", "id": 445491, "node_id": "MDQ6VXNlcjQ0NTQ5MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/445491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/okin", "html_url": "https://github.com/okin", "followers_url": "https://api.github.com/users/okin/followers", "following_url": "https://api.github.com/users/okin/following{/other_user}", "gists_url": "https://api.github.com/users/okin/gists{/gist_id}", "starred_url": "https://api.github.com/users/okin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/okin/subscriptions", "organizations_url": "https://api.github.com/users/okin/orgs", "repos_url": "https://api.github.com/users/okin/repos", "events_url": "https://api.github.com/users/okin/events{/privacy}", "received_events_url": "https://api.github.com/users/okin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 1, "created_at": "2018-12-31T13:04:35Z", "updated_at": "2019-05-18T05:12:41Z", "closed_at": "2019-01-19T15:33:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Calling fixtures directly is not supported with pytest 4.\r\nRunning the tests with pytest 4 leads to en error like the following:\r\n```\r\nrequest = <SubRequest 'pdep_manager' for <Function 'test_get_set[JsonDB]'>>\r\n\r\n    @pytest.fixture(params=[JsonDB, DbmDB, SqliteDB])\r\n    def pdep_manager(request):\r\n>       return dep_manager(request)\r\nE       _pytest.warning_types.RemovedInPytest4Warning: Fixture \"dep_manager\" called directly. Fixtures are not meant to be called directly, are created automatically when test functions request them as parameters. See https://docs.pytest.org/en/latest/fixture.html for more information.\r\n\r\ntests/test_dependency.py:71: RemovedInPytest4Warning\r\n```\r\n\r\nIn this case the tests have been run with `pytest==4.0.2`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/271", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/271/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/271/events", "html_url": "https://github.com/pydoit/doit/issues/271", "id": 366974633, "node_id": "MDU6SXNzdWUzNjY5NzQ2MzM=", "number": 271, "title": "doit reruns each time", "user": {"login": "tcholewik", "id": 6487560, "node_id": "MDQ6VXNlcjY0ODc1NjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6487560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tcholewik", "html_url": "https://github.com/tcholewik", "followers_url": "https://api.github.com/users/tcholewik/followers", "following_url": "https://api.github.com/users/tcholewik/following{/other_user}", "gists_url": "https://api.github.com/users/tcholewik/gists{/gist_id}", "starred_url": "https://api.github.com/users/tcholewik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tcholewik/subscriptions", "organizations_url": "https://api.github.com/users/tcholewik/orgs", "repos_url": "https://api.github.com/users/tcholewik/repos", "events_url": "https://api.github.com/users/tcholewik/events{/privacy}", "received_events_url": "https://api.github.com/users/tcholewik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-04T21:18:40Z", "updated_at": "2020-02-18T14:16:44Z", "closed_at": "2018-10-04T23:39:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I'm still learning this library so its very likely that I did something wrong, but right now it seems that doit reruns all tasks every single time.\r\n\r\nInitially I saw this behavior with code that a lot more complicated but then wrote example below to debug this issue, and I still see it.\r\n\r\n```\r\ndef task_experiment():\r\n    def touch():\r\n        open('test','w')\r\n    return {\r\n        'actions': [touch],\r\n        'targets': ['test']\r\n    }\r\n```\r\n\r\nThen I run:\r\n\r\n> doit run --file=dodo_sample.py\r\n>.  experiment\r\n> doit run --file=dodo_sample.py\r\n>.  experiment\r\n> doit run --file=dodo_sample.py\r\n>.  experiment\r\n\r\nIts very likely that I'm missing something obvious but I'm just not sure what it is.\r\n\r\nContents of my doit related files:\r\n.doit.db.bak \r\n>'experiment', (0, 56)\r\n\r\n.doit.db.dir\r\n>'experiment', (0, 56)\r\n\r\n.doit.db.bat\r\n>{\"_values_:\": {}, \"checker:\": \"MD5Checker\", \"deps:\": []}\r\n\r\nMy system:\r\ndoit 0.31.1\r\nPython 3.6.6\r\nWin10", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/270", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/270/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/270/events", "html_url": "https://github.com/pydoit/doit/issues/270", "id": 358601959, "node_id": "MDU6SXNzdWUzNTg2MDE5NTk=", "number": 270, "title": "Passing parameter to subtask or result_dep", "user": {"login": "koliyo", "id": 770348, "node_id": "MDQ6VXNlcjc3MDM0OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/770348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koliyo", "html_url": "https://github.com/koliyo", "followers_url": "https://api.github.com/users/koliyo/followers", "following_url": "https://api.github.com/users/koliyo/following{/other_user}", "gists_url": "https://api.github.com/users/koliyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/koliyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koliyo/subscriptions", "organizations_url": "https://api.github.com/users/koliyo/orgs", "repos_url": "https://api.github.com/users/koliyo/repos", "events_url": "https://api.github.com/users/koliyo/events{/privacy}", "received_events_url": "https://api.github.com/users/koliyo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 186649082, "node_id": "MDU6TGFiZWwxODY2NDkwODI=", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid-send-questions-to-discussion-group", "name": "invalid-send-questions-to-discussion-group", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-10T12:32:26Z", "updated_at": "2018-09-10T14:42:33Z", "closed_at": "2018-09-10T14:42:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I pass a parameter to a dependency? In this example, I want to access the `file` parameter in the `foo` task.\r\n\r\n```py\r\ndef task_main():\r\n    def main(file):\r\n        print('main!', file)\r\n\r\n    return {\r\n        'actions': [main],\r\n        'params': [{'name': 'file',\r\n                    'long': 'file',\r\n                    'default': None,\r\n                    }],\r\n        'task_dep': ['foo'],\r\n    }\r\n\r\ndef task_foo():\r\n    def foo():\r\n        # I want to access the file parameter here!\r\n        print('foo')\r\n\r\n    return {\r\n        'actions': [foo]\r\n    }\r\n```\r\n\r\nI have looked at `@create_after`, `result_dep`, `getargs`, `setup`, but I have been unable to setup this configuration :/\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/269", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/269/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/269/events", "html_url": "https://github.com/pydoit/doit/issues/269", "id": 358334296, "node_id": "MDU6SXNzdWUzNTgzMzQyOTY=", "number": 269, "title": "Problems running tests", "user": {"login": "dvzrv", "id": 432519, "node_id": "MDQ6VXNlcjQzMjUxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/432519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvzrv", "html_url": "https://github.com/dvzrv", "followers_url": "https://api.github.com/users/dvzrv/followers", "following_url": "https://api.github.com/users/dvzrv/following{/other_user}", "gists_url": "https://api.github.com/users/dvzrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvzrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvzrv/subscriptions", "organizations_url": "https://api.github.com/users/dvzrv/orgs", "repos_url": "https://api.github.com/users/dvzrv/repos", "events_url": "https://api.github.com/users/dvzrv/events{/privacy}", "received_events_url": "https://api.github.com/users/dvzrv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-08T23:04:34Z", "updated_at": "2018-09-10T14:43:56Z", "closed_at": "2018-09-10T14:43:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently moving doit to Arch Linux' [community] repository.\r\nAfter build and before packaging I would like to run the tests, but they currently fail:\r\n```\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.7.0, pytest-3.8.0, py-1.6.0, pluggy-0.7.1\r\nrootdir: /build/python-doit/src/python-doit-0.31.1, inifile:\r\ncollected 597 items / 1 errors\r\n\r\n==================================== ERRORS ====================================\r\n__________________ ERROR collecting tests/test_dependency.py ___________________\r\ntests/test_dependency.py:72: in <module>\r\n    pytest.fixture(params=[JsonDB, DbmDB, SqliteDB])(pdep_manager)\r\n/usr/lib/python3.7/site-packages/_pytest/fixtures.py:1003: in __call__\r\n    \"fixture is being applied more than once to the same function\"\r\nE   ValueError: fixture is being applied more than once to the same function\r\n=============================== warnings summary ===============================\r\n<unknown>:90: DeprecationWarning: invalid escape sequence \\]\r\n\r\n<unknown>:97: DeprecationWarning: invalid escape sequence \\]\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\r\n===================== 2 warnings, 1 error in 1.22 seconds ======================\r\n```\r\n\r\nWith Arch we're on python 3.7.0, setuptools 40.2.0, cloudpickle 0.5.3, pytest 3.7.4, coverage 4.5.1, pyinotify 0.9.6, flake8 3.5.0.\r\nIn any case the above error seems to be an issue with how the tests are being executed. Maybe someone from the project can shine some light on it?\r\nAny help would be greatly appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/268", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/268/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/268/events", "html_url": "https://github.com/pydoit/doit/issues/268", "id": 357165044, "node_id": "MDU6SXNzdWUzNTcxNjUwNDQ=", "number": 268, "title": "Example for running tasks from code", "user": {"login": "koliyo", "id": 770348, "node_id": "MDQ6VXNlcjc3MDM0OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/770348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koliyo", "html_url": "https://github.com/koliyo", "followers_url": "https://api.github.com/users/koliyo/followers", "following_url": "https://api.github.com/users/koliyo/following{/other_user}", "gists_url": "https://api.github.com/users/koliyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/koliyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koliyo/subscriptions", "organizations_url": "https://api.github.com/users/koliyo/orgs", "repos_url": "https://api.github.com/users/koliyo/repos", "events_url": "https://api.github.com/users/koliyo/events{/privacy}", "received_events_url": "https://api.github.com/users/koliyo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-05T10:28:45Z", "updated_at": "2018-09-06T13:22:25Z", "closed_at": "2018-09-06T11:40:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to start doit tasks from inside python code. Not using the command line. Is there an example showing this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/266", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/266/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/266/events", "html_url": "https://github.com/pydoit/doit/issues/266", "id": 356235565, "node_id": "MDU6SXNzdWUzNTYyMzU1NjU=", "number": 266, "title": "unit-test failure with latest py.test", "user": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 0, "created_at": "2018-09-01T22:00:58Z", "updated_at": "2018-09-02T21:57:39Z", "closed_at": "2018-09-02T21:57:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```\r\n_______________ ERROR at setup of TestDependencyDb.test_get_set ________________\r\nfile /home/eduardo/work/doit/dev/tests/test_dependency.py, line 78\r\n      def test_get_set(self, pdep_manager):\r\nE       fixture 'pdep_manager' not found\r\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, dep_manager, dependency1, dependency2, depfile_name, doctest_namespace, monkeypatch, pytestconfig, record_property, record_xml_attribute, record_xml_property, recwarn, restore_cwd, target1, tmpdir, tmpdir_factory\r\n>       use 'pytest --fixtures [testpath]' for help on them.\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/264", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/264/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/264/events", "html_url": "https://github.com/pydoit/doit/issues/264", "id": 354468853, "node_id": "MDU6SXNzdWUzNTQ0Njg4NTM=", "number": 264, "title": "tutorial is absent from the source file (0.31.1)", "user": {"login": "jose-matos", "id": 20204442, "node_id": "MDQ6VXNlcjIwMjA0NDQy", "avatar_url": "https://avatars1.githubusercontent.com/u/20204442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jose-matos", "html_url": "https://github.com/jose-matos", "followers_url": "https://api.github.com/users/jose-matos/followers", "following_url": "https://api.github.com/users/jose-matos/following{/other_user}", "gists_url": "https://api.github.com/users/jose-matos/gists{/gist_id}", "starred_url": "https://api.github.com/users/jose-matos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jose-matos/subscriptions", "organizations_url": "https://api.github.com/users/jose-matos/orgs", "repos_url": "https://api.github.com/users/jose-matos/repos", "events_url": "https://api.github.com/users/jose-matos/events{/privacy}", "received_events_url": "https://api.github.com/users/jose-matos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 190184556, "node_id": "MDU6TGFiZWwxOTAxODQ1NTY=", "url": "https://api.github.com/repos/pydoit/doit/labels/docs", "name": "docs", "color": "009800", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 1, "created_at": "2018-08-27T20:37:17Z", "updated_at": "2019-12-09T23:03:29Z", "closed_at": "2019-12-09T23:03:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "While packaging 0.31.1 for Fedora I noticed that the tutorial is absent from the documentation in the source tar.gz.\r\n\r\nWas that done on purpose or was it a mistake? If the later could you add it to the source tar.gz for the next stable release?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/263", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/263/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/263/events", "html_url": "https://github.com/pydoit/doit/issues/263", "id": 350015425, "node_id": "MDU6SXNzdWUzNTAwMTU0MjU=", "number": 263, "title": "How to change working directory ?", "user": {"login": "Ublimjo", "id": 17401813, "node_id": "MDQ6VXNlcjE3NDAxODEz", "avatar_url": "https://avatars2.githubusercontent.com/u/17401813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ublimjo", "html_url": "https://github.com/Ublimjo", "followers_url": "https://api.github.com/users/Ublimjo/followers", "following_url": "https://api.github.com/users/Ublimjo/following{/other_user}", "gists_url": "https://api.github.com/users/Ublimjo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ublimjo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ublimjo/subscriptions", "organizations_url": "https://api.github.com/users/Ublimjo/orgs", "repos_url": "https://api.github.com/users/Ublimjo/repos", "events_url": "https://api.github.com/users/Ublimjo/events{/privacy}", "received_events_url": "https://api.github.com/users/Ublimjo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 186649082, "node_id": "MDU6TGFiZWwxODY2NDkwODI=", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid-send-questions-to-discussion-group", "name": "invalid-send-questions-to-discussion-group", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-13T12:48:49Z", "updated_at": "2018-08-17T18:56:31Z", "closed_at": "2018-08-17T18:56:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to change working directory ?\r\nI want to change working directory inside script\r\nI want to execute `git pull` on every folder in root", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/262", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/262/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/262/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/262/events", "html_url": "https://github.com/pydoit/doit/issues/262", "id": 337287749, "node_id": "MDU6SXNzdWUzMzcyODc3NDk=", "number": 262, "title": "python 3.7 CI", "user": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 0, "created_at": "2018-07-01T12:35:23Z", "updated_at": "2019-01-02T07:27:49Z", "closed_at": "2019-01-02T07:27:26Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Still not supported:\r\n\r\n- [ ] travis: https://github.com/travis-ci/travis-ci/issues/9815\r\n- [x] appveyor: https://www.appveyor.com/docs/build-environment/#python", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/261", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/261/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/261/events", "html_url": "https://github.com/pydoit/doit/issues/261", "id": 335093245, "node_id": "MDU6SXNzdWUzMzUwOTMyNDU=", "number": 261, "title": "cmd help: organize parameters into sections", "user": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662475, "node_id": "MDU6TGFiZWw4MDY2MjQ3NQ==", "url": "https://api.github.com/repos/pydoit/doit/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 0, "created_at": "2018-06-23T11:36:27Z", "updated_at": "2018-07-09T18:39:08Z", "closed_at": "2018-07-09T18:39:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Too many parameters from loader in all commands make it hard to see more useful parameters.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/259", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/259/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/259/events", "html_url": "https://github.com/pydoit/doit/issues/259", "id": 332930636, "node_id": "MDU6SXNzdWUzMzI5MzA2MzY=", "number": 259, "title": "YAML as a simple task creator?", "user": {"login": "Dracks", "id": 1499165, "node_id": "MDQ6VXNlcjE0OTkxNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1499165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dracks", "html_url": "https://github.com/Dracks", "followers_url": "https://api.github.com/users/Dracks/followers", "following_url": "https://api.github.com/users/Dracks/following{/other_user}", "gists_url": "https://api.github.com/users/Dracks/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dracks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dracks/subscriptions", "organizations_url": "https://api.github.com/users/Dracks/orgs", "repos_url": "https://api.github.com/users/Dracks/repos", "events_url": "https://api.github.com/users/Dracks/events{/privacy}", "received_events_url": "https://api.github.com/users/Dracks/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 186649082, "node_id": "MDU6TGFiZWwxODY2NDkwODI=", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid-send-questions-to-discussion-group", "name": "invalid-send-questions-to-discussion-group", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-15T22:26:49Z", "updated_at": "2018-06-20T17:36:04Z", "closed_at": "2018-06-20T17:35:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nToday I discover doit, and working with it, (a basical configuration) I was thinking that maybe it can be saved on a yaml file, because my configuration is really simple. \r\n\r\nMy file is [this](https://github.com/Dracks/finances/blob/develop/dodo.py)\r\n\r\nIn a future, I will put some logic for \"uptodate\" and other things, maybe some check step. Did you think about that?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/255", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/255/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/255/events", "html_url": "https://github.com/pydoit/doit/issues/255", "id": 316231800, "node_id": "MDU6SXNzdWUzMTYyMzE4MDA=", "number": 255, "title": "Save process return code in CmdAction", "user": {"login": "Valitseja", "id": 24646483, "node_id": "MDQ6VXNlcjI0NjQ2NDgz", "avatar_url": "https://avatars3.githubusercontent.com/u/24646483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Valitseja", "html_url": "https://github.com/Valitseja", "followers_url": "https://api.github.com/users/Valitseja/followers", "following_url": "https://api.github.com/users/Valitseja/following{/other_user}", "gists_url": "https://api.github.com/users/Valitseja/gists{/gist_id}", "starred_url": "https://api.github.com/users/Valitseja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Valitseja/subscriptions", "organizations_url": "https://api.github.com/users/Valitseja/orgs", "repos_url": "https://api.github.com/users/Valitseja/repos", "events_url": "https://api.github.com/users/Valitseja/events{/privacy}", "received_events_url": "https://api.github.com/users/Valitseja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-20T11:31:18Z", "updated_at": "2018-04-20T15:42:40Z", "closed_at": "2018-04-20T15:42:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "An improvement in CmdAction behaviour would be to save return code of the process, so it is available for the other actions in the task.\r\n\r\ne.g. a command returns error code -3 on which the other actions in the task must react. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/253", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/253/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/253/events", "html_url": "https://github.com/pydoit/doit/issues/253", "id": 315007667, "node_id": "MDU6SXNzdWUzMTUwMDc2Njc=", "number": 253, "title": "Realistic example for home page", "user": {"login": "takluyver", "id": 327925, "node_id": "MDQ6VXNlcjMyNzkyNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/takluyver", "html_url": "https://github.com/takluyver", "followers_url": "https://api.github.com/users/takluyver/followers", "following_url": "https://api.github.com/users/takluyver/following{/other_user}", "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}", "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions", "organizations_url": "https://api.github.com/users/takluyver/orgs", "repos_url": "https://api.github.com/users/takluyver/repos", "events_url": "https://api.github.com/users/takluyver/events{/privacy}", "received_events_url": "https://api.github.com/users/takluyver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 190184556, "node_id": "MDU6TGFiZWwxOTAxODQ1NTY=", "url": "https://api.github.com/repos/pydoit/doit/labels/docs", "name": "docs", "color": "009800", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 7, "created_at": "2018-04-17T10:54:50Z", "updated_at": "2018-07-17T04:36:24Z", "closed_at": "2018-07-17T04:36:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I just pointed someone on reddit to http://pydoit.org/ , and I realised that the landing page is a bit... abstract. It has an example task definition, but it's just the structure, not a task that you could actually run, and it doesn't say how to use it.\r\n\r\nThe intro at http://pydoit.org/tasks.html is better - it's a working example, and it tells you about `dodo.py` and the `doit` command. But it's too simple to show why you'd use doit.\r\n\r\nI think doit is a pretty cool tool, and it's a pity that it's not more obvious how and why to use it. With your permission, I'd like to try to come up with a meaningful example to put on the homepage, showcasing some of the main features (such as combining Python tasks with shell commands) and explaining how to use it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/252", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/252/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/252/events", "html_url": "https://github.com/pydoit/doit/issues/252", "id": 314291655, "node_id": "MDU6SXNzdWUzMTQyOTE2NTU=", "number": 252, "title": "Positional arguments example in docs fails.", "user": {"login": "ryanfreckleton", "id": 1380641, "node_id": "MDQ6VXNlcjEzODA2NDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1380641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryanfreckleton", "html_url": "https://github.com/ryanfreckleton", "followers_url": "https://api.github.com/users/ryanfreckleton/followers", "following_url": "https://api.github.com/users/ryanfreckleton/following{/other_user}", "gists_url": "https://api.github.com/users/ryanfreckleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryanfreckleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryanfreckleton/subscriptions", "organizations_url": "https://api.github.com/users/ryanfreckleton/orgs", "repos_url": "https://api.github.com/users/ryanfreckleton/repos", "events_url": "https://api.github.com/users/ryanfreckleton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryanfreckleton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-14T02:19:19Z", "updated_at": "2018-04-14T04:56:51Z", "closed_at": "2018-04-14T03:46:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I create a `dodo.py` that contains the following code from the documentation:\r\n\r\n~~~python\r\ndef task_pos_args():\r\n    def show_params(param1, pos):\r\n        print('param1 is: {0}'.format(param1))\r\n        for index, pos_arg in enumerate(pos):\r\n            print('positional-{0}: {1}'.format(index, pos_arg))\r\n    return {'actions':[(show_params,)],\r\n            'params':[{'name':'param1',\r\n                       'short':'p',\r\n                       'default':'default value'},\r\n                      ],\r\n            'pos_arg': 'pos',\r\n            'verbosity': 2,\r\n            }\r\n~~~\r\n\r\nI get the following error:\r\n\r\n~~~\r\nERROR: Task pos_args contains invalid field: 'pos_arg'\r\n~~~\r\n\r\n`pos_arg` appears to be what's articulated in the code, but I also couldn't find any specific coverage for this feature in the test suite.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/251", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/251/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/251/events", "html_url": "https://github.com/pydoit/doit/issues/251", "id": 307141849, "node_id": "MDU6SXNzdWUzMDcxNDE4NDk=", "number": 251, "title": "Can't build cross-platform pex containing doit due to file-watching dependencies", "user": {"login": "kevincon", "id": 817753, "node_id": "MDQ6VXNlcjgxNzc1Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/817753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevincon", "html_url": "https://github.com/kevincon", "followers_url": "https://api.github.com/users/kevincon/followers", "following_url": "https://api.github.com/users/kevincon/following{/other_user}", "gists_url": "https://api.github.com/users/kevincon/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevincon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevincon/subscriptions", "organizations_url": "https://api.github.com/users/kevincon/orgs", "repos_url": "https://api.github.com/users/kevincon/repos", "events_url": "https://api.github.com/users/kevincon/events{/privacy}", "received_events_url": "https://api.github.com/users/kevincon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-03-21T07:28:21Z", "updated_at": "2018-03-27T03:50:36Z", "closed_at": "2018-03-27T01:19:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use [`pex`](https://github.com/pantsbuild/pex) to create a cross-platform (Mac/Linux) executable containing doit, but unfortunately this is failing due to[ the `extras_require` dictionary in doit's `setup.py` file that guards against installing either `macfsevents` or `pyinotify` based on the value of `sys.platform`](https://github.com/pydoit/doit/blob/088d2ba528d65d4cf265035928b64a33eaaa1e63/setup.py#L77-L78). It seems that `pex` is not capable of processing the `sys.platform` environmental marker with respect to the various target platforms for the PEX being created (see the issue I opened on `pex` for more info: https://github.com/pantsbuild/pex/issues/455).\r\n\r\nI think ideally `pex` would be capable of processing those environmental markers, but according to that issue it seems to be a difficult thing to support. As an alternative, do you have any thoughts about how we could change doit to support this use case?\r\n\r\nOne idea I had - I don't actually need doit's file watching functionality for my particular use case, and from #101 I understand this isn't available on Windows despite doit otherwise supporting Windows. Could file watching be turned into an optional dependency for doit in `setup.py`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/249", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/249/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/249/events", "html_url": "https://github.com/pydoit/doit/issues/249", "id": 305382179, "node_id": "MDU6SXNzdWUzMDUzODIxNzk=", "number": 249, "title": "TypeError when failed task with dependency with --continue option", "user": {"login": "miyakogi", "id": 3213998, "node_id": "MDQ6VXNlcjMyMTM5OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3213998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyakogi", "html_url": "https://github.com/miyakogi", "followers_url": "https://api.github.com/users/miyakogi/followers", "following_url": "https://api.github.com/users/miyakogi/following{/other_user}", "gists_url": "https://api.github.com/users/miyakogi/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyakogi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyakogi/subscriptions", "organizations_url": "https://api.github.com/users/miyakogi/orgs", "repos_url": "https://api.github.com/users/miyakogi/repos", "events_url": "https://api.github.com/users/miyakogi/events{/privacy}", "received_events_url": "https://api.github.com/users/miyakogi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662473, "node_id": "MDU6TGFiZWw4MDY2MjQ3Mw==", "url": "https://api.github.com/repos/pydoit/doit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-15T01:14:07Z", "updated_at": "2018-03-15T16:22:46Z", "closed_at": "2018-03-15T14:33:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "### How to reproduce\r\n\r\nMake new directory with dodo.py as below:\r\n\r\n```python\r\ndef task_flake8():\r\n    return {'actions': ['flake8 dodo.py']}\r\n\r\ndef task_all():\r\n    return {'actions': None, 'task_dep': ['flake8']}\r\n```\r\n\r\nRun `doit -c all`, then task `flake8` failes, and doit raises `TypeError`:\r\n\r\n```\r\n.  flake8\r\nTaskFailed - taskid:flake8\r\nCommand failed: 'flake8 dodo.py' returned 1\r\n\r\nUnmetDependency - taskid:all\r\nflake8\r\n\r\n<stdout>:\r\ndodo.py:4:1: E302 expected 2 blank lines, found 1\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/takagi/.virtualenvs/arch/doittest/lib/python3.6/site-packages/doit/doit_cmd.py\", line 172, in run\r\n    return command.parse_execute(args)\r\n  File \"/home/takagi/.virtualenvs/arch/doittest/lib/python3.6/site-packages/doit/cmd_base.py\", line 127, in parse_execute\r\n    return self.execute(params, args)\r\n  File \"/home/takagi/.virtualenvs/arch/doittest/lib/python3.6/site-packages/doit/cmd_base.py\", line 416, in execute\r\n    return self._execute(**exec_params)\r\n  File \"/home/takagi/.virtualenvs/arch/doittest/lib/python3.6/site-packages/doit/cmd_run.py\", line 260, in _execute\r\n    return runner.run_all(self.control.task_dispatcher())\r\n  File \"/home/takagi/.virtualenvs/arch/doittest/lib/python3.6/site-packages/doit/runner.py\", line 257, in run_all\r\n    self.finish()\r\n  File \"/home/takagi/.virtualenvs/arch/doittest/lib/python3.6/site-packages/doit/runner.py\", line 240, in finish\r\n    self.reporter.complete_run()\r\n  File \"/home/takagi/.virtualenvs/arch/doittest/lib/python3.6/site-packages/doit/reporter.py\", line 91, in complete_run\r\n    show_err = task.verbosity < 1 or self.failure_verbosity > 0\r\nTypeError: '<' not supported between instances of 'NoneType' and 'int'\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/248", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/248/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/248/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/248/events", "html_url": "https://github.com/pydoit/doit/issues/248", "id": 304899927, "node_id": "MDU6SXNzdWUzMDQ4OTk5Mjc=", "number": 248, "title": "Test cases fail when python3-gdbm is installed", "user": {"login": "agustinhenze", "id": 1900634, "node_id": "MDQ6VXNlcjE5MDA2MzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1900634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agustinhenze", "html_url": "https://github.com/agustinhenze", "followers_url": "https://api.github.com/users/agustinhenze/followers", "following_url": "https://api.github.com/users/agustinhenze/following{/other_user}", "gists_url": "https://api.github.com/users/agustinhenze/gists{/gist_id}", "starred_url": "https://api.github.com/users/agustinhenze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agustinhenze/subscriptions", "organizations_url": "https://api.github.com/users/agustinhenze/orgs", "repos_url": "https://api.github.com/users/agustinhenze/repos", "events_url": "https://api.github.com/users/agustinhenze/events{/privacy}", "received_events_url": "https://api.github.com/users/agustinhenze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-03-13T19:15:21Z", "updated_at": "2018-03-17T22:30:09Z", "closed_at": "2018-03-17T17:22:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, if you run the test suite without any support for gdbm backend it works correctly. But if you have the gdbm backend installed (python3-gdbm on debian OS), some test cases will fail as following:\r\n\r\n```\r\n===================================================================================== test session starts ======================================================================================\r\nplatform linux -- Python 3.6.4+, pytest-3.3.2, py-1.5.2, pluggy-0.6.0\r\nrootdir: /home/tin/projects/debian/doit.git/doit, inifile:\r\nplugins: ignore-flaky-0.1.1\r\ncollected 750 items                                                                                                                                                                            \r\n\r\ntests/test___init__.py .                                                                                                                                                                 [  0%]\r\ntests/test___main__.py .                                                                                                                                                                 [  0%]\r\ntests/test_action.py ..............................ss.............................................................                                                                       [ 12%]\r\ntests/test_api.py .                                                                                                                                                                      [ 12%]\r\ntests/test_cmd_auto.py ......                                                                                                                                                            [ 13%]\r\ntests/test_cmd_base.py .................F.....                                                                                                                                           [ 16%]\r\ntests/test_cmd_clean.py ...........                                                                                                                                                      [ 18%]\r\ntests/test_cmd_completion.py ........                                                                                                                                                    [ 19%]\r\ntests/test_cmd_dumpdb.py .                                                                                                                                                               [ 19%]\r\ntests/test_cmd_forget.py ......                                                                                                                                                          [ 20%]\r\ntests/test_cmd_help.py ........                                                                                                                                                          [ 21%]\r\ntests/test_cmd_ignore.py F....                                                                                                                                                           [ 21%]\r\ntests/test_cmd_info.py ..FFF.                                                                                                                                                            [ 22%]\r\ntests/test_cmd_list.py .........F.....                                                                                                                                                   [ 24%]\r\ntests/test_cmd_resetdep.py .........                                                                                                                                                     [ 25%]\r\ntests/test_cmd_run.py .............                                                                                                                                                      [ 27%]\r\ntests/test_cmd_strace.py ssssss                                                                                                                                                          [ 28%]\r\ntests/test_cmdparse.py .......................................                                                                                                                           [ 33%]\r\ntests/test_control.py ............................................................                                                                                                       [ 41%]\r\ntests/test_dependency.py ...............s.s...........................................................................................................................................   [ 62%]\r\ntests/test_doit_cmd.py ...............                                                                                                                                                   [ 64%]\r\ntests/test_exceptions.py .........                                                                                                                                                       [ 65%]\r\ntests/test_filewatch.py ....                                                                                                                                                             [ 66%]\r\ntests/test_loader.py ..........................................                                                                                                                          [ 71%]\r\ntests/test_plugin.py .........                                                                                                                                                           [ 73%]\r\ntests/test_reporter.py ...........................                                                                                                                                       [ 76%]\r\ntests/test_runner.py ...........................................................................                                                                                         [ 86%]\r\ntests/test_task.py ..........................................................................                                                                                            [ 96%]\r\ntests/test_tools.py ..........................                                                                                                                                           [100%]\r\n\r\n=========================================================================================== FAILURES ===========================================================================================\r\n_____________________________________________________________________________ TestDoitCmdBase.test_force_verbosity _____________________________________________________________________________\r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffdf5c438>, name = '/tmp/pytest-of-root/pytest-1/test_force_verbosity0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n>           self._dbm = ddbm.open(self.name, 'c')\r\n\r\ndoit/dependency.py:139: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nfile = '/tmp/pytest-of-root/pytest-1/test_force_verbosity0/testdb', flag = 'c', mode = 438\r\n\r\n    def open(file, flag='r', mode=0o666):\r\n        \"\"\"Open or create database at path given by *file*.\r\n    \r\n        Optional argument *flag* can be 'r' (default) for read-only access, 'w'\r\n        for read-write access of an existing database, 'c' for read-write access\r\n        to a new or existing database, and 'n' for read-write access to a new\r\n        database.\r\n    \r\n        Note: 'r' and 'w' fail if the database doesn't exist; 'c' creates it\r\n        only if it doesn't exist; and 'n' always creates a new database.\r\n        \"\"\"\r\n        global _defaultmod\r\n        if _defaultmod is None:\r\n            for name in _names:\r\n                try:\r\n                    mod = __import__(name, fromlist=['open'])\r\n                except ImportError:\r\n                    continue\r\n                if not _defaultmod:\r\n                    _defaultmod = mod\r\n                _modules[name] = mod\r\n            if not _defaultmod:\r\n                raise ImportError(\"no dbm clone found; tried %s\" % _names)\r\n    \r\n        # guess the type of an existing database, if not creating a new one\r\n        result = whichdb(file) if 'n' not in flag else None\r\n        if result is None:\r\n            # db doesn't exist or 'n' flag was specified to create a new db\r\n            if 'c' in flag or 'n' in flag:\r\n                # file doesn't exist and the new flag was used so use default type\r\n                mod = _defaultmod\r\n            else:\r\n                raise error[0](\"need 'c' or 'n' flag to open new db\")\r\n        elif result == \"\":\r\n            # db type cannot be determined\r\n            raise error[0](\"db type could not be determined\")\r\n        elif result not in _modules:\r\n            raise error[0](\"db type is {0}, but the module is not \"\r\n                           \"available\".format(result))\r\n        else:\r\n            mod = _modules[result]\r\n>       return mod.open(file, flag, mode)\r\nE       _gdbm.error: [Errno 11] Resource temporarily unavailable\r\n\r\n/usr/lib/python3.6/dbm/__init__.py:94: error\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nself = <tests.test_cmd_base.TestDoitCmdBase object at 0x7f3ffdf5c278>, depfile_name = '/tmp/pytest-of-root/pytest-1/test_force_verbosity0/testdb'\r\n\r\n    def test_force_verbosity(self, depfile_name):\r\n        members = {\r\n            'DOIT_CONFIG': {'verbosity': 0},\r\n            'task_xxx1': lambda : {'actions':[]},\r\n        }\r\n        loader = ModuleTaskLoader(members)\r\n    \r\n        class SampleCmd(DoitCmdBase):\r\n            opt_verbosity = {\r\n                'name':'verbosity',\r\n                'short':'v',\r\n                'long':'verbosity',\r\n                'type':int,\r\n                'default': None,\r\n                'help': \"verbosity foo\"\r\n            }\r\n            cmd_options = (opt_verbosity, )\r\n    \r\n            def _execute(self, verbosity, force_verbosity):\r\n                return verbosity, force_verbosity\r\n    \r\n        cmd = SampleCmd(task_loader=loader)\r\n        assert (2, True) == cmd.parse_execute(['--db-file', depfile_name, '-v2'])\r\n>       assert (0, False) == cmd.parse_execute(['--db-file', depfile_name])\r\n\r\ntests/test_cmd_base.py:274: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ndoit/cmd_base.py:127: in parse_execute\r\n    return self.execute(params, args)\r\ndoit/cmd_base.py:402: in execute\r\n    self.dep_manager = Dependency(db_class, params['dep_file'], checker_cls)\r\ndoit/dependency.py:475: in __init__\r\n    self.backend = db_class(backend_name)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffdf5c438>, name = '/tmp/pytest-of-root/pytest-1/test_force_verbosity0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n            self._dbm = ddbm.open(self.name, 'c')\r\n        except ddbm.error as exception:\r\n            message = str(exception)\r\n            if message == self.DBM_CONTENT_ERROR_MSG:\r\n                # When a corrupted/old format database is found\r\n                # suggest the user to just remove the file\r\n                new_message = (\r\n                    'Dependencies file in %(filename)s seems to use '\r\n                    'an old format or is corrupted.\\n'\r\n                    'To fix the issue you can just remove the database file(s) '\r\n                    'and a new one will be generated.'\r\n                    % {'filename': repr(self.name)})\r\n                raise DatabaseException(new_message)\r\n            else:\r\n                # Re-raise any other exceptions\r\n>               raise DatabaseException(message)\r\nE               doit.dependency.DatabaseException: [Errno 11] Resource temporarily unavailable\r\n\r\ndoit/dependency.py:154: DatabaseException\r\n_________________________________________________________________________________ TestCmdIgnore.testIgnoreAll __________________________________________________________________________________\r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffda7ec88>, name = '/tmp/pytest-of-root/pytest-1/testIgnoreAll0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n>           self._dbm = ddbm.open(self.name, 'c')\r\n\r\ndoit/dependency.py:139: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nfile = '/tmp/pytest-of-root/pytest-1/testIgnoreAll0/testdb', flag = 'c', mode = 438\r\n\r\n    def open(file, flag='r', mode=0o666):\r\n        \"\"\"Open or create database at path given by *file*.\r\n    \r\n        Optional argument *flag* can be 'r' (default) for read-only access, 'w'\r\n        for read-write access of an existing database, 'c' for read-write access\r\n        to a new or existing database, and 'n' for read-write access to a new\r\n        database.\r\n    \r\n        Note: 'r' and 'w' fail if the database doesn't exist; 'c' creates it\r\n        only if it doesn't exist; and 'n' always creates a new database.\r\n        \"\"\"\r\n        global _defaultmod\r\n        if _defaultmod is None:\r\n            for name in _names:\r\n                try:\r\n                    mod = __import__(name, fromlist=['open'])\r\n                except ImportError:\r\n                    continue\r\n                if not _defaultmod:\r\n                    _defaultmod = mod\r\n                _modules[name] = mod\r\n            if not _defaultmod:\r\n                raise ImportError(\"no dbm clone found; tried %s\" % _names)\r\n    \r\n        # guess the type of an existing database, if not creating a new one\r\n        result = whichdb(file) if 'n' not in flag else None\r\n        if result is None:\r\n            # db doesn't exist or 'n' flag was specified to create a new db\r\n            if 'c' in flag or 'n' in flag:\r\n                # file doesn't exist and the new flag was used so use default type\r\n                mod = _defaultmod\r\n            else:\r\n                raise error[0](\"need 'c' or 'n' flag to open new db\")\r\n        elif result == \"\":\r\n            # db type cannot be determined\r\n            raise error[0](\"db type could not be determined\")\r\n        elif result not in _modules:\r\n            raise error[0](\"db type is {0}, but the module is not \"\r\n                           \"available\".format(result))\r\n        else:\r\n            mod = _modules[result]\r\n>       return mod.open(file, flag, mode)\r\nE       _gdbm.error: [Errno 11] Resource temporarily unavailable\r\n\r\n/usr/lib/python3.6/dbm/__init__.py:94: error\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nself = <tests.test_cmd_ignore.TestCmdIgnore object at 0x7f3ffdf5c160>, tasks = [<Task: t1>, <Task: t2>, <Task: g1>, <Task: g1.a>, <Task: g1.b>, <Task: t3>]\r\ndepfile_name = '/tmp/pytest-of-root/pytest-1/testIgnoreAll0/testdb'\r\n\r\n    def testIgnoreAll(self, tasks, depfile_name):\r\n        output = StringIO()\r\n        cmd = CmdFactory(Ignore, outstream=output, dep_file=depfile_name,\r\n                         backend='dbm', task_list=tasks)\r\n        cmd._execute([])\r\n        got = output.getvalue().split(\"\\n\")[:-1]\r\n        assert [\"You cant ignore all tasks! Please select a task.\"] == got, got\r\n>       dep = Dependency(DbmDB, depfile_name)\r\n\r\ntests/test_cmd_ignore.py:24: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ndoit/dependency.py:475: in __init__\r\n    self.backend = db_class(backend_name)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffda7ec88>, name = '/tmp/pytest-of-root/pytest-1/testIgnoreAll0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n            self._dbm = ddbm.open(self.name, 'c')\r\n        except ddbm.error as exception:\r\n            message = str(exception)\r\n            if message == self.DBM_CONTENT_ERROR_MSG:\r\n                # When a corrupted/old format database is found\r\n                # suggest the user to just remove the file\r\n                new_message = (\r\n                    'Dependencies file in %(filename)s seems to use '\r\n                    'an old format or is corrupted.\\n'\r\n                    'To fix the issue you can just remove the database file(s) '\r\n                    'and a new one will be generated.'\r\n                    % {'filename': repr(self.name)})\r\n                raise DatabaseException(new_message)\r\n            else:\r\n                # Re-raise any other exceptions\r\n>               raise DatabaseException(message)\r\nE               doit.dependency.DatabaseException: [Errno 11] Resource temporarily unavailable\r\n\r\ndoit/dependency.py:154: DatabaseException\r\n_____________________________________________________________________________ TestCmdInfo.test_execute_status_run ______________________________________________________________________________\r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffdac70f0>, name = '/tmp/pytest-of-root/pytest-1/test_execute_status_run0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n>           self._dbm = ddbm.open(self.name, 'c')\r\n\r\ndoit/dependency.py:139: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nfile = '/tmp/pytest-of-root/pytest-1/test_execute_status_run0/testdb', flag = 'c', mode = 438\r\n\r\n    def open(file, flag='r', mode=0o666):\r\n        \"\"\"Open or create database at path given by *file*.\r\n    \r\n        Optional argument *flag* can be 'r' (default) for read-only access, 'w'\r\n        for read-write access of an existing database, 'c' for read-write access\r\n        to a new or existing database, and 'n' for read-write access to a new\r\n        database.\r\n    \r\n        Note: 'r' and 'w' fail if the database doesn't exist; 'c' creates it\r\n        only if it doesn't exist; and 'n' always creates a new database.\r\n        \"\"\"\r\n        global _defaultmod\r\n        if _defaultmod is None:\r\n            for name in _names:\r\n                try:\r\n                    mod = __import__(name, fromlist=['open'])\r\n                except ImportError:\r\n                    continue\r\n                if not _defaultmod:\r\n                    _defaultmod = mod\r\n                _modules[name] = mod\r\n            if not _defaultmod:\r\n                raise ImportError(\"no dbm clone found; tried %s\" % _names)\r\n    \r\n        # guess the type of an existing database, if not creating a new one\r\n        result = whichdb(file) if 'n' not in flag else None\r\n        if result is None:\r\n            # db doesn't exist or 'n' flag was specified to create a new db\r\n            if 'c' in flag or 'n' in flag:\r\n                # file doesn't exist and the new flag was used so use default type\r\n                mod = _defaultmod\r\n            else:\r\n                raise error[0](\"need 'c' or 'n' flag to open new db\")\r\n        elif result == \"\":\r\n            # db type cannot be determined\r\n            raise error[0](\"db type could not be determined\")\r\n        elif result not in _modules:\r\n            raise error[0](\"db type is {0}, but the module is not \"\r\n                           \"available\".format(result))\r\n        else:\r\n            mod = _modules[result]\r\n>       return mod.open(file, flag, mode)\r\nE       _gdbm.error: [Errno 11] Resource temporarily unavailable\r\n\r\n/usr/lib/python3.6/dbm/__init__.py:94: error\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nself = <tests.test_cmd_info.TestCmdInfo object at 0x7f3ffdab5cf8>, depfile = <doit.dependency.Dependency object at 0x7f3ffdab57f0>\r\ndependency1 = '/home/tin/projects/debian/doit.git/doit/tests/data/dependency1'\r\n\r\n    def test_execute_status_run(self, depfile, dependency1):\r\n        output = StringIO()\r\n        task = Task(\"t1\", [], file_dep=['tests/data/dependency1'])\r\n        cmd = CmdFactory(Info, outstream=output,\r\n                         dep_file=depfile.name, task_list=[task],\r\n>                        backend='dbm')\r\n\r\ntests/test_cmd_info.py:40: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/conftest.py:167: in CmdFactory\r\n    cmd.dep_manager = Dependency(DbmDB, dep_file, MD5Checker)\r\ndoit/dependency.py:475: in __init__\r\n    self.backend = db_class(backend_name)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffdac70f0>, name = '/tmp/pytest-of-root/pytest-1/test_execute_status_run0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n            self._dbm = ddbm.open(self.name, 'c')\r\n        except ddbm.error as exception:\r\n            message = str(exception)\r\n            if message == self.DBM_CONTENT_ERROR_MSG:\r\n                # When a corrupted/old format database is found\r\n                # suggest the user to just remove the file\r\n                new_message = (\r\n                    'Dependencies file in %(filename)s seems to use '\r\n                    'an old format or is corrupted.\\n'\r\n                    'To fix the issue you can just remove the database file(s) '\r\n                    'and a new one will be generated.'\r\n                    % {'filename': repr(self.name)})\r\n                raise DatabaseException(new_message)\r\n            else:\r\n                # Re-raise any other exceptions\r\n>               raise DatabaseException(message)\r\nE               doit.dependency.DatabaseException: [Errno 11] Resource temporarily unavailable\r\n\r\ndoit/dependency.py:154: DatabaseException\r\n_____________________________________________________________________________ TestCmdInfo.test_hide_execute_status _____________________________________________________________________________\r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffda9bac8>, name = '/tmp/pytest-of-root/pytest-1/test_hide_execute_status0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n>           self._dbm = ddbm.open(self.name, 'c')\r\n\r\ndoit/dependency.py:139: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nfile = '/tmp/pytest-of-root/pytest-1/test_hide_execute_status0/testdb', flag = 'c', mode = 438\r\n\r\n    def open(file, flag='r', mode=0o666):\r\n        \"\"\"Open or create database at path given by *file*.\r\n    \r\n        Optional argument *flag* can be 'r' (default) for read-only access, 'w'\r\n        for read-write access of an existing database, 'c' for read-write access\r\n        to a new or existing database, and 'n' for read-write access to a new\r\n        database.\r\n    \r\n        Note: 'r' and 'w' fail if the database doesn't exist; 'c' creates it\r\n        only if it doesn't exist; and 'n' always creates a new database.\r\n        \"\"\"\r\n        global _defaultmod\r\n        if _defaultmod is None:\r\n            for name in _names:\r\n                try:\r\n                    mod = __import__(name, fromlist=['open'])\r\n                except ImportError:\r\n                    continue\r\n                if not _defaultmod:\r\n                    _defaultmod = mod\r\n                _modules[name] = mod\r\n            if not _defaultmod:\r\n                raise ImportError(\"no dbm clone found; tried %s\" % _names)\r\n    \r\n        # guess the type of an existing database, if not creating a new one\r\n        result = whichdb(file) if 'n' not in flag else None\r\n        if result is None:\r\n            # db doesn't exist or 'n' flag was specified to create a new db\r\n            if 'c' in flag or 'n' in flag:\r\n                # file doesn't exist and the new flag was used so use default type\r\n                mod = _defaultmod\r\n            else:\r\n                raise error[0](\"need 'c' or 'n' flag to open new db\")\r\n        elif result == \"\":\r\n            # db type cannot be determined\r\n            raise error[0](\"db type could not be determined\")\r\n        elif result not in _modules:\r\n            raise error[0](\"db type is {0}, but the module is not \"\r\n                           \"available\".format(result))\r\n        else:\r\n            mod = _modules[result]\r\n>       return mod.open(file, flag, mode)\r\nE       _gdbm.error: [Errno 11] Resource temporarily unavailable\r\n\r\n/usr/lib/python3.6/dbm/__init__.py:94: error\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nself = <tests.test_cmd_info.TestCmdInfo object at 0x7f3ffda9b160>, depfile = <doit.dependency.Dependency object at 0x7f3ffda9bef0>\r\ndependency1 = '/home/tin/projects/debian/doit.git/doit/tests/data/dependency1'\r\n\r\n    def test_hide_execute_status(self, depfile, dependency1):\r\n        output = StringIO()\r\n        task = Task(\"t1\", [], file_dep=['tests/data/dependency1'])\r\n        cmd = CmdFactory(Info, outstream=output,\r\n                         dep_file=depfile.name, task_list=[task],\r\n>                        backend='dbm')\r\n\r\ntests/test_cmd_info.py:53: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/conftest.py:167: in CmdFactory\r\n    cmd.dep_manager = Dependency(DbmDB, dep_file, MD5Checker)\r\ndoit/dependency.py:475: in __init__\r\n    self.backend = db_class(backend_name)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffda9bac8>, name = '/tmp/pytest-of-root/pytest-1/test_hide_execute_status0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n            self._dbm = ddbm.open(self.name, 'c')\r\n        except ddbm.error as exception:\r\n            message = str(exception)\r\n            if message == self.DBM_CONTENT_ERROR_MSG:\r\n                # When a corrupted/old format database is found\r\n                # suggest the user to just remove the file\r\n                new_message = (\r\n                    'Dependencies file in %(filename)s seems to use '\r\n                    'an old format or is corrupted.\\n'\r\n                    'To fix the issue you can just remove the database file(s) '\r\n                    'and a new one will be generated.'\r\n                    % {'filename': repr(self.name)})\r\n                raise DatabaseException(new_message)\r\n            else:\r\n                # Re-raise any other exceptions\r\n>               raise DatabaseException(message)\r\nE               doit.dependency.DatabaseException: [Errno 11] Resource temporarily unavailable\r\n\r\ndoit/dependency.py:154: DatabaseException\r\n___________________________________________________________________________ TestCmdInfo.test_execute_status_uptodate ___________________________________________________________________________\r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffdab54e0>, name = '/tmp/pytest-of-root/pytest-1/test_execute_status_uptodate0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n>           self._dbm = ddbm.open(self.name, 'c')\r\n\r\ndoit/dependency.py:139: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nfile = '/tmp/pytest-of-root/pytest-1/test_execute_status_uptodate0/testdb', flag = 'c', mode = 438\r\n\r\n    def open(file, flag='r', mode=0o666):\r\n        \"\"\"Open or create database at path given by *file*.\r\n    \r\n        Optional argument *flag* can be 'r' (default) for read-only access, 'w'\r\n        for read-write access of an existing database, 'c' for read-write access\r\n        to a new or existing database, and 'n' for read-write access to a new\r\n        database.\r\n    \r\n        Note: 'r' and 'w' fail if the database doesn't exist; 'c' creates it\r\n        only if it doesn't exist; and 'n' always creates a new database.\r\n        \"\"\"\r\n        global _defaultmod\r\n        if _defaultmod is None:\r\n            for name in _names:\r\n                try:\r\n                    mod = __import__(name, fromlist=['open'])\r\n                except ImportError:\r\n                    continue\r\n                if not _defaultmod:\r\n                    _defaultmod = mod\r\n                _modules[name] = mod\r\n            if not _defaultmod:\r\n                raise ImportError(\"no dbm clone found; tried %s\" % _names)\r\n    \r\n        # guess the type of an existing database, if not creating a new one\r\n        result = whichdb(file) if 'n' not in flag else None\r\n        if result is None:\r\n            # db doesn't exist or 'n' flag was specified to create a new db\r\n            if 'c' in flag or 'n' in flag:\r\n                # file doesn't exist and the new flag was used so use default type\r\n                mod = _defaultmod\r\n            else:\r\n                raise error[0](\"need 'c' or 'n' flag to open new db\")\r\n        elif result == \"\":\r\n            # db type cannot be determined\r\n            raise error[0](\"db type could not be determined\")\r\n        elif result not in _modules:\r\n            raise error[0](\"db type is {0}, but the module is not \"\r\n                           \"available\".format(result))\r\n        else:\r\n            mod = _modules[result]\r\n>       return mod.open(file, flag, mode)\r\nE       _gdbm.error: [Errno 11] Resource temporarily unavailable\r\n\r\n/usr/lib/python3.6/dbm/__init__.py:94: error\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nself = <tests.test_cmd_info.TestCmdInfo object at 0x7f3ffdab5e48>, depfile = <doit.dependency.Dependency object at 0x7f3fffa57ba8>\r\ndependency1 = '/home/tin/projects/debian/doit.git/doit/tests/data/dependency1'\r\n\r\n    def test_execute_status_uptodate(self, depfile, dependency1):\r\n        output = StringIO()\r\n        task = Task(\"t1\", [], file_dep=['tests/data/dependency1'])\r\n        cmd = CmdFactory(Info, outstream=output,\r\n                         dep_file=depfile.name, task_list=[task],\r\n>                        backend='dbm')\r\n\r\ntests/test_cmd_info.py:65: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/conftest.py:167: in CmdFactory\r\n    cmd.dep_manager = Dependency(DbmDB, dep_file, MD5Checker)\r\ndoit/dependency.py:475: in __init__\r\n    self.backend = db_class(backend_name)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffdab54e0>, name = '/tmp/pytest-of-root/pytest-1/test_execute_status_uptodate0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n            self._dbm = ddbm.open(self.name, 'c')\r\n        except ddbm.error as exception:\r\n            message = str(exception)\r\n            if message == self.DBM_CONTENT_ERROR_MSG:\r\n                # When a corrupted/old format database is found\r\n                # suggest the user to just remove the file\r\n                new_message = (\r\n                    'Dependencies file in %(filename)s seems to use '\r\n                    'an old format or is corrupted.\\n'\r\n                    'To fix the issue you can just remove the database file(s) '\r\n                    'and a new one will be generated.'\r\n                    % {'filename': repr(self.name)})\r\n                raise DatabaseException(new_message)\r\n            else:\r\n                # Re-raise any other exceptions\r\n>               raise DatabaseException(message)\r\nE               doit.dependency.DatabaseException: [Errno 11] Resource temporarily unavailable\r\n\r\ndoit/dependency.py:154: DatabaseException\r\n_________________________________________________________________________________ TestCmdList.testErrorStatus __________________________________________________________________________________\r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffda431d0>, name = '/tmp/pytest-of-root/pytest-1/testErrorStatus0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n>           self._dbm = ddbm.open(self.name, 'c')\r\n\r\ndoit/dependency.py:139: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nfile = '/tmp/pytest-of-root/pytest-1/testErrorStatus0/testdb', flag = 'c', mode = 438\r\n\r\n    def open(file, flag='r', mode=0o666):\r\n        \"\"\"Open or create database at path given by *file*.\r\n    \r\n        Optional argument *flag* can be 'r' (default) for read-only access, 'w'\r\n        for read-write access of an existing database, 'c' for read-write access\r\n        to a new or existing database, and 'n' for read-write access to a new\r\n        database.\r\n    \r\n        Note: 'r' and 'w' fail if the database doesn't exist; 'c' creates it\r\n        only if it doesn't exist; and 'n' always creates a new database.\r\n        \"\"\"\r\n        global _defaultmod\r\n        if _defaultmod is None:\r\n            for name in _names:\r\n                try:\r\n                    mod = __import__(name, fromlist=['open'])\r\n                except ImportError:\r\n                    continue\r\n                if not _defaultmod:\r\n                    _defaultmod = mod\r\n                _modules[name] = mod\r\n            if not _defaultmod:\r\n                raise ImportError(\"no dbm clone found; tried %s\" % _names)\r\n    \r\n        # guess the type of an existing database, if not creating a new one\r\n        result = whichdb(file) if 'n' not in flag else None\r\n        if result is None:\r\n            # db doesn't exist or 'n' flag was specified to create a new db\r\n            if 'c' in flag or 'n' in flag:\r\n                # file doesn't exist and the new flag was used so use default type\r\n                mod = _defaultmod\r\n            else:\r\n                raise error[0](\"need 'c' or 'n' flag to open new db\")\r\n        elif result == \"\":\r\n            # db type cannot be determined\r\n            raise error[0](\"db type could not be determined\")\r\n        elif result not in _modules:\r\n            raise error[0](\"db type is {0}, but the module is not \"\r\n                           \"available\".format(result))\r\n        else:\r\n            mod = _modules[result]\r\n>       return mod.open(file, flag, mode)\r\nE       _gdbm.error: [Errno 11] Resource temporarily unavailable\r\n\r\n/usr/lib/python3.6/dbm/__init__.py:94: error\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nself = <tests.test_cmd_list.TestCmdList object at 0x7f3ffd9f50b8>, dependency1 = '/home/tin/projects/debian/doit.git/doit/tests/data/dependency1'\r\ndepfile = <doit.dependency.Dependency object at 0x7f3ffd9f5da0>\r\n\r\n    def testErrorStatus(self, dependency1, depfile):\r\n        \"\"\"Check that problematic tasks show an 'E' as status.\"\"\"\r\n        task_list = tasks_bad_sample()\r\n    \r\n        output = StringIO()\r\n        cmd_list = CmdFactory(List, outstream=output, dep_file=depfile.name,\r\n>                       backend='dbm', task_list=task_list)\r\n\r\ntests/test_cmd_list.py:109: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/conftest.py:167: in CmdFactory\r\n    cmd.dep_manager = Dependency(DbmDB, dep_file, MD5Checker)\r\ndoit/dependency.py:475: in __init__\r\n    self.backend = db_class(backend_name)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <doit.dependency.DbmDB object at 0x7f3ffda431d0>, name = '/tmp/pytest-of-root/pytest-1/testErrorStatus0/testdb'\r\n\r\n    def __init__(self, name):\r\n        \"\"\"Open/create a DB file\"\"\"\r\n        self.name = name\r\n        try:\r\n            self._dbm = ddbm.open(self.name, 'c')\r\n        except ddbm.error as exception:\r\n            message = str(exception)\r\n            if message == self.DBM_CONTENT_ERROR_MSG:\r\n                # When a corrupted/old format database is found\r\n                # suggest the user to just remove the file\r\n                new_message = (\r\n                    'Dependencies file in %(filename)s seems to use '\r\n                    'an old format or is corrupted.\\n'\r\n                    'To fix the issue you can just remove the database file(s) '\r\n                    'and a new one will be generated.'\r\n                    % {'filename': repr(self.name)})\r\n                raise DatabaseException(new_message)\r\n            else:\r\n                # Re-raise any other exceptions\r\n>               raise DatabaseException(message)\r\nE               doit.dependency.DatabaseException: [Errno 11] Resource temporarily unavailable\r\n\r\ndoit/dependency.py:154: DatabaseException\r\n======================================================================= 6 failed, 734 passed, 10 skipped in 9.36 seconds =======================================================================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/247", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/247/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/247/events", "html_url": "https://github.com/pydoit/doit/issues/247", "id": 302091117, "node_id": "MDU6SXNzdWUzMDIwOTExMTc=", "number": 247, "title": "\"pip install doit\" fails (before and after `brew upgrade python3`)", "user": {"login": "pkoppstein", "id": 172847, "node_id": "MDQ6VXNlcjE3Mjg0Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/172847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pkoppstein", "html_url": "https://github.com/pkoppstein", "followers_url": "https://api.github.com/users/pkoppstein/followers", "following_url": "https://api.github.com/users/pkoppstein/following{/other_user}", "gists_url": "https://api.github.com/users/pkoppstein/gists{/gist_id}", "starred_url": "https://api.github.com/users/pkoppstein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pkoppstein/subscriptions", "organizations_url": "https://api.github.com/users/pkoppstein/orgs", "repos_url": "https://api.github.com/users/pkoppstein/repos", "events_url": "https://api.github.com/users/pkoppstein/events{/privacy}", "received_events_url": "https://api.github.com/users/pkoppstein/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-04T14:43:46Z", "updated_at": "2018-09-05T06:57:20Z", "closed_at": "2018-03-04T15:52:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n$ uname -a\r\nDarwin MacMini2017.local 17.0.0 Darwin Kernel Version 17.0.0: Thu Aug 24 21:48:19 PDT 2017; root:xnu-4570.1.46~2/RELEASE_X86_64 x86_64\r\n# Before `brew upgrade python3`\r\n$ pip install doit\r\nCollecting doit\r\n  Using cached doit-0.30.3.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    This version of doit is only supported by Python 3.\r\n    Please use doit==0.29.0 with Python 2.\r\n    \r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/15/wd4cntyn53x87v4x86wxysyc0000gn/T/pip-build-gXLx4k/doit/\r\n# same failure using sudo\r\n$ brew upgrade python3\r\n$ pip install doit\r\nFailed to import the site module\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site.py\", line 544, in <module>\r\n    main()\r\n...\r\n# Same error with `pip3 install doit`\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/245", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/245/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/245/events", "html_url": "https://github.com/pydoit/doit/issues/245", "id": 301391770, "node_id": "MDU6SXNzdWUzMDEzOTE3NzA=", "number": 245, "title": "Python custom clean actions are not executed when the \"dryrun\" flag -n is set ", "user": {"login": "toschoch", "id": 24640403, "node_id": "MDQ6VXNlcjI0NjQwNDAz", "avatar_url": "https://avatars1.githubusercontent.com/u/24640403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toschoch", "html_url": "https://github.com/toschoch", "followers_url": "https://api.github.com/users/toschoch/followers", "following_url": "https://api.github.com/users/toschoch/following{/other_user}", "gists_url": "https://api.github.com/users/toschoch/gists{/gist_id}", "starred_url": "https://api.github.com/users/toschoch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toschoch/subscriptions", "organizations_url": "https://api.github.com/users/toschoch/orgs", "repos_url": "https://api.github.com/users/toschoch/repos", "events_url": "https://api.github.com/users/toschoch/events{/privacy}", "received_events_url": "https://api.github.com/users/toschoch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662473, "node_id": "MDU6TGFiZWw4MDY2MjQ3Mw==", "url": "https://api.github.com/repos/pydoit/doit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-01T12:47:13Z", "updated_at": "2018-03-18T12:05:56Z", "closed_at": "2018-03-18T12:05:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nFirst, thanks a lot for this great package. I'll love it!! I'm currently using doit for automization of my data analysis tasks. \r\nI just noticed a small issue, that I think it might be unintended. \r\nWhen I write a custom clean action of a target there is a parameter \"dryrun\" passed to the action (nicely illustrated in clean_targets implementation [task.py source](https://github.com/pydoit/doit/blob/62335b05473193303d6ecb5524d65bf1a5a50d7e/doit/task.py#L570))\r\nAnyway, if `doit clean -n  <taskname>` is executed the clean action is not called at all.\r\n\r\n`dodo.py`\r\n```python\r\nimport os\r\n\r\ndef create_file(filename):\r\n    with open(filename,'w+') as fp:\r\n        fp.write('Hello World\\n')\r\n\r\ndef my_cleaner(filename, dryrun):\r\n    msg = \"remove '{}'...\".format(filename)\r\n    if dryrun:\r\n        msg = \"would \" + msg\r\n    print(msg)\r\n    if not dryrun and os.path.exists(filename):\r\n        os.remove(filename)\r\n\r\ndef task_hello():\r\n    \"\"\" creates a \"Hello World\" file \"\"\"\r\n\r\n    filename = 'test.txt'\r\n\r\n    task = {\r\n        \"actions\" : [(create_file,(filename,))],\r\n        \"targets\" : [filename],\r\n        \"clean\"   : [(my_cleaner,(filename,))],\r\n        \"uptodate\": [True],\r\n    }\r\n\r\n    return task\r\n```\r\nand than in the console\r\n```\r\n>>> doit hello\r\n.  hello\r\n>>> doit clean -n hello\r\nhello - executing 'Python: function my_cleaner'\r\n```\r\nhowever I would expect the following:\r\n```\r\n>>> doit clean -n hello\r\nhello - executing 'Python: function my_cleaner'\r\nwould remove 'test.txt'...\r\n````", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/243", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/243/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/243/events", "html_url": "https://github.com/pydoit/doit/issues/243", "id": 300729711, "node_id": "MDU6SXNzdWUzMDA3Mjk3MTE=", "number": 243, "title": "Submitting tasks to a grid in parallel / asyncio", "user": {"login": "davidbrochart", "id": 4711805, "node_id": "MDQ6VXNlcjQ3MTE4MDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/4711805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbrochart", "html_url": "https://github.com/davidbrochart", "followers_url": "https://api.github.com/users/davidbrochart/followers", "following_url": "https://api.github.com/users/davidbrochart/following{/other_user}", "gists_url": "https://api.github.com/users/davidbrochart/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbrochart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbrochart/subscriptions", "organizations_url": "https://api.github.com/users/davidbrochart/orgs", "repos_url": "https://api.github.com/users/davidbrochart/repos", "events_url": "https://api.github.com/users/davidbrochart/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbrochart/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 186649082, "node_id": "MDU6TGFiZWwxODY2NDkwODI=", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid-send-questions-to-discussion-group", "name": "invalid-send-questions-to-discussion-group", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-27T17:47:54Z", "updated_at": "2018-02-27T20:19:13Z", "closed_at": "2018-02-27T20:19:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say I want to submit a huge amount of long-running tasks to a grid (e.g. using `qsub` on SGE), most of which are independent. I want them to execute in parallel but I don't want to use multiprocessing since it would take a lot of resources only to wait for tasks to finish. I think it would be good to use coroutines in that case, and maybe `asyncio`. A task would just launch a command on the grid and regularly check for the target(s) to be created, but release the control flow and let the chance to other tasks to be launched too.\r\nIs it already possible to do that? If not, would it be feasible to implement it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/242", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/242/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/242/events", "html_url": "https://github.com/pydoit/doit/issues/242", "id": 300402393, "node_id": "MDU6SXNzdWUzMDA0MDIzOTM=", "number": 242, "title": "re-organize docs on \"uptodate API\"", "user": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 190184556, "node_id": "MDU6TGFiZWwxOTAxODQ1NTY=", "url": "https://api.github.com/repos/pydoit/doit/labels/docs", "name": "docs", "color": "009800", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-26T21:27:35Z", "updated_at": "2018-03-18T11:14:21Z", "closed_at": "2018-03-18T11:14:21Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now, it is a bitten hidden and easily ignored.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/241", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/241/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/241/events", "html_url": "https://github.com/pydoit/doit/issues/241", "id": 298010440, "node_id": "MDU6SXNzdWUyOTgwMTA0NDA=", "number": 241, "title": "doit.get_var(): _CMDLINE_VARS is None unless running from doit utility", "user": {"login": "madig", "id": 380829, "node_id": "MDQ6VXNlcjM4MDgyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/380829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madig", "html_url": "https://github.com/madig", "followers_url": "https://api.github.com/users/madig/followers", "following_url": "https://api.github.com/users/madig/following{/other_user}", "gists_url": "https://api.github.com/users/madig/gists{/gist_id}", "starred_url": "https://api.github.com/users/madig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madig/subscriptions", "organizations_url": "https://api.github.com/users/madig/orgs", "repos_url": "https://api.github.com/users/madig/repos", "events_url": "https://api.github.com/users/madig/events{/privacy}", "received_events_url": "https://api.github.com/users/madig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-17T14:56:14Z", "updated_at": "2018-02-17T16:47:39Z", "closed_at": "2018-02-17T16:47:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "This happens when e.g. pulling in a doit helper library that uses `doit.get_var()` but you're running from e.g. pytest instead of doit. I wrapped the method in a try-except block and just use the default, but is this intentional? Shouldn't `_CMDLINE_VARS` just be an empty dictionary when not run from the command line?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/240", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/240/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/240/events", "html_url": "https://github.com/pydoit/doit/issues/240", "id": 297756373, "node_id": "MDU6SXNzdWUyOTc3NTYzNzM=", "number": 240, "title": "`--pdb` support to debug error on task execution ", "user": {"login": "madig", "id": 380829, "node_id": "MDQ6VXNlcjM4MDgyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/380829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madig", "html_url": "https://github.com/madig", "followers_url": "https://api.github.com/users/madig/followers", "following_url": "https://api.github.com/users/madig/following{/other_user}", "gists_url": "https://api.github.com/users/madig/gists{/gist_id}", "starred_url": "https://api.github.com/users/madig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madig/subscriptions", "organizations_url": "https://api.github.com/users/madig/orgs", "repos_url": "https://api.github.com/users/madig/repos", "events_url": "https://api.github.com/users/madig/events{/privacy}", "received_events_url": "https://api.github.com/users/madig/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662475, "node_id": "MDU6TGFiZWw4MDY2MjQ3NQ==", "url": "https://api.github.com/repos/pydoit/doit/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 5, "created_at": "2018-02-16T11:33:27Z", "updated_at": "2018-06-23T08:11:08Z", "closed_at": "2018-06-23T08:11:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Support post-mortem debugger for unhadled task execution exceptions.\r\n\r\nThis must handled separately from exceptions on load time. \r\nBecause doit catches tasks errors and keep running... \r\n\r\n----------------\r\n(original report)\r\n\r\nI'm trying to debug a doit pipeline and need to break into pdb in a library I'm using from doit. Unfortunately, doit captures all in- and output, which I have to undo everywhere I'm trying to debug. Would be nice to have the above mentioned parameter that lets me just do `import pdb; pdb.set_trace()` (or `breakpoint()` in the upcoming Python 3.7).\r\n\r\nFor reference, this is the code I currently use to break into pdb:\r\n```\r\ntry:\r\n    code_that_crashes_somewhere_in_your_pipeline\r\nexcept KeyError:\r\n    import pdb, sys; \r\n    d = pdb.Pdb(stdin=sys.__stdin__, stdout=sys.__stdout__)\r\n    d.reset(); t = sys.exc_info()[2]; d.interaction(None, t)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/231", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/231/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/231/events", "html_url": "https://github.com/pydoit/doit/issues/231", "id": 287849624, "node_id": "MDU6SXNzdWUyODc4NDk2MjQ=", "number": 231, "title": "`doit.get_var()` fails when invoked from the REPL or when using multiple processes on Windows", "user": {"login": "madig", "id": 380829, "node_id": "MDQ6VXNlcjM4MDgyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/380829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madig", "html_url": "https://github.com/madig", "followers_url": "https://api.github.com/users/madig/followers", "following_url": "https://api.github.com/users/madig/following{/other_user}", "gists_url": "https://api.github.com/users/madig/gists{/gist_id}", "starred_url": "https://api.github.com/users/madig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madig/subscriptions", "organizations_url": "https://api.github.com/users/madig/orgs", "repos_url": "https://api.github.com/users/madig/repos", "events_url": "https://api.github.com/users/madig/events{/privacy}", "received_events_url": "https://api.github.com/users/madig/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662474, "node_id": "MDU6TGFiZWw4MDY2MjQ3NA==", "url": "https://api.github.com/repos/pydoit/doit/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-11T16:49:12Z", "updated_at": "2018-01-18T12:18:17Z", "closed_at": "2018-01-18T12:18:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I first reported this here: https://github.com/pydoit/doit/issues/164\r\n\r\nI now replicated this on the REPL:\r\n```\r\n>>> import doit\r\n>>> doit.get_var('tag', '')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\...\\venv\\lib\\site-packages\\doit\\doit_cmd.py\", line 35, in get_var\r\n    if not _CMDLINE_VARS:\r\nAttributeError: 'NoneType' object has no attribute 'get'\r\n```\r\n\r\nRunning `doit -n4` in a project directory leads to the same error. It seems `_CMDLINE_VARS` isn't properly passed to/initialized in subprocesses on Windows?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/230", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/230/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/230/events", "html_url": "https://github.com/pydoit/doit/issues/230", "id": 287744174, "node_id": "MDU6SXNzdWUyODc3NDQxNzQ=", "number": 230, "title": "avoid race condition when multiple tasks update the same file? ", "user": {"login": "biocyberman", "id": 447942, "node_id": "MDQ6VXNlcjQ0Nzk0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/447942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/biocyberman", "html_url": "https://github.com/biocyberman", "followers_url": "https://api.github.com/users/biocyberman/followers", "following_url": "https://api.github.com/users/biocyberman/following{/other_user}", "gists_url": "https://api.github.com/users/biocyberman/gists{/gist_id}", "starred_url": "https://api.github.com/users/biocyberman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/biocyberman/subscriptions", "organizations_url": "https://api.github.com/users/biocyberman/orgs", "repos_url": "https://api.github.com/users/biocyberman/repos", "events_url": "https://api.github.com/users/biocyberman/events{/privacy}", "received_events_url": "https://api.github.com/users/biocyberman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-11T10:57:02Z", "updated_at": "2018-01-18T01:17:52Z", "closed_at": "2018-01-18T01:17:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nThis snippet is a function that update `current.manifest.json` file:\r\n\r\n```python\r\ncurrent_dir = path.dirname(__file__)\r\ncurrent_manifest = path.join(current_dir, 'current.manifest.json')\r\ntarget_manifest = path.join(current_dir, 'target.manifest.json')\r\n\r\ndef add_to_manifest(key):\r\n    \"\"\"Copy the JSON objects from the target JSON file to current JSON file\"\"\"\r\n    with open(target_manifest, 'r') as target, \\\r\n            open(current_manifest, 'r+') as current:\r\n        target_json = json.load(target)\r\n        current_json = json.load(current)\r\n        current_json[key] = target_json[key]\r\n        current.seek(0)\r\n        current.truncate()\r\n        json.dump(current_json, current, indent=4)\r\n```\r\n\r\nwhen I run my tasks in parallel (`doit -n 4`) which call to this function in parallel, I got this error:\r\n\r\n```python\r\nTaskError - taskid:install_vcfanno\r\nPythonAction Error\r\nTraceback (most recent call last):\r\n  File \"/conda-env/lib/python3.6/site-packages/doit/action.py\", line 403, in execute\r\n    returned_value = self.py_callable(*self.args, **kwargs)\r\n  File \"/tasks/install/install_tools.py\", line 170, in action\r\n    add_to_manifest('vcfanno')\r\n  File \"/tasks/nectar/nectar_util.py\", line 24, in add_to_manifest\r\n    current_json = json.load(current)\r\n  File \"/conda-env/lib/python3.6/json/__init__.py\", line 299, in load\r\n    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)\r\n  File \"/conda-env/lib/python3.6/json/__init__.py\", line 354, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"s/conda-env/lib/python3.6/json/decoder.py\", line 339, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/conda-env/lib/python3.6/json/decoder.py\", line 357, in raw_decode\r\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\r\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\r\n```\r\n\r\nThe problem here is that ` current.truncate()` empty the `current.manifest.json` when another task tries to load it at `current_json = json.load(current)`. \r\n\r\nI am thinking about using [file lock](https://pypi.python.org/pypi/filelock) to avoid this problem, but just want to check if there is a elegant solution already. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/229", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/229/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/229/events", "html_url": "https://github.com/pydoit/doit/issues/229", "id": 286777945, "node_id": "MDU6SXNzdWUyODY3Nzc5NDU=", "number": 229, "title": "Add a command to monitor the execution progress", "user": {"login": "saimn", "id": 311639, "node_id": "MDQ6VXNlcjMxMTYzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/311639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saimn", "html_url": "https://github.com/saimn", "followers_url": "https://api.github.com/users/saimn/followers", "following_url": "https://api.github.com/users/saimn/following{/other_user}", "gists_url": "https://api.github.com/users/saimn/gists{/gist_id}", "starred_url": "https://api.github.com/users/saimn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saimn/subscriptions", "organizations_url": "https://api.github.com/users/saimn/orgs", "repos_url": "https://api.github.com/users/saimn/repos", "events_url": "https://api.github.com/users/saimn/events{/privacy}", "received_events_url": "https://api.github.com/users/saimn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 808230788, "node_id": "MDU6TGFiZWw4MDgyMzA3ODg=", "url": "https://api.github.com/repos/pydoit/doit/labels/plugin", "name": "plugin", "color": "98d8f2", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-08T15:18:10Z", "updated_at": "2018-03-19T10:51:09Z", "closed_at": "2018-03-19T10:51:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be useful to have a way to monitor the execution progress when running a lot of (long-running) tasks/subtasks. I developed [something](https://github.com/saimn/doit/commit/dbb65db15d4009810f647768c7b2cabbb60c38ff) for my own purpose but it uses the [Astropy](https://github.com/astropy/astropy/) package to create a table and print it either to the console in ASCII format or to a webpage. Astropy would be a too heavy dependency for doit of course, so I may try to adapt this if I find a lighter package for this (maybe [PrettyTable/PTable](https://pypi.python.org/pypi/PTable/0.9.0) but it support only ASCII output).\r\n\r\nExample console output:\r\n\r\n![capture d ecran de 2018-01-08 16-15-33](https://user-images.githubusercontent.com/311639/34677091-4be1ae52-f48f-11e7-83c7-94d259193176.png)\r\n\r\nAnd HTML:\r\n\r\n![capture d ecran de 2018-01-08 16-16-57](https://user-images.githubusercontent.com/311639/34677129-69749560-f48f-11e7-96bf-d9f3e994eb04.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/224", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/224/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/224/events", "html_url": "https://github.com/pydoit/doit/issues/224", "id": 286764598, "node_id": "MDU6SXNzdWUyODY3NjQ1OTg=", "number": 224, "title": "Use unittest.mock instead of the mock package", "user": {"login": "saimn", "id": 311639, "node_id": "MDQ6VXNlcjMxMTYzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/311639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saimn", "html_url": "https://github.com/saimn", "followers_url": "https://api.github.com/users/saimn/followers", "following_url": "https://api.github.com/users/saimn/following{/other_user}", "gists_url": "https://api.github.com/users/saimn/gists{/gist_id}", "starred_url": "https://api.github.com/users/saimn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saimn/subscriptions", "organizations_url": "https://api.github.com/users/saimn/orgs", "repos_url": "https://api.github.com/users/saimn/repos", "events_url": "https://api.github.com/users/saimn/events{/privacy}", "received_events_url": "https://api.github.com/users/saimn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 192268599, "node_id": "MDU6TGFiZWwxOTIyNjg1OTk=", "url": "https://api.github.com/repos/pydoit/doit/labels/chore", "name": "chore", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-08T14:38:09Z", "updated_at": "2018-02-15T12:21:52Z", "closed_at": "2018-02-15T12:21:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "No need for the mock package dependency since doit support only Python 3.4+", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/222", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/222/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/222/events", "html_url": "https://github.com/pydoit/doit/issues/222", "id": 276565714, "node_id": "MDU6SXNzdWUyNzY1NjU3MTQ=", "number": 222, "title": "Make --seek-file default behavior", "user": {"login": "rpuntaie", "id": 2904578, "node_id": "MDQ6VXNlcjI5MDQ1Nzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2904578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpuntaie", "html_url": "https://github.com/rpuntaie", "followers_url": "https://api.github.com/users/rpuntaie/followers", "following_url": "https://api.github.com/users/rpuntaie/following{/other_user}", "gists_url": "https://api.github.com/users/rpuntaie/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpuntaie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpuntaie/subscriptions", "organizations_url": "https://api.github.com/users/rpuntaie/orgs", "repos_url": "https://api.github.com/users/rpuntaie/repos", "events_url": "https://api.github.com/users/rpuntaie/events{/privacy}", "received_events_url": "https://api.github.com/users/rpuntaie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662478, "node_id": "MDU6TGFiZWw4MDY2MjQ3OA==", "url": "https://api.github.com/repos/pydoit/doit/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-24T09:54:34Z", "updated_at": "2017-11-25T04:06:33Z", "closed_at": "2017-11-25T04:06:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "If in the current directory there is no dodo.py, seeking in parent folders should be done automatically, unless a specific file is provided with an -f option.\r\n\r\ngit, e.g., automatically looks into parent folders.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/221", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/221/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/221/events", "html_url": "https://github.com/pydoit/doit/issues/221", "id": 275725396, "node_id": "MDU6SXNzdWUyNzU3MjUzOTY=", "number": 221, "title": "Unwanted additions to kwargs for python actions", "user": {"login": "TomPace101", "id": 33869452, "node_id": "MDQ6VXNlcjMzODY5NDUy", "avatar_url": "https://avatars0.githubusercontent.com/u/33869452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomPace101", "html_url": "https://github.com/TomPace101", "followers_url": "https://api.github.com/users/TomPace101/followers", "following_url": "https://api.github.com/users/TomPace101/following{/other_user}", "gists_url": "https://api.github.com/users/TomPace101/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomPace101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomPace101/subscriptions", "organizations_url": "https://api.github.com/users/TomPace101/orgs", "repos_url": "https://api.github.com/users/TomPace101/repos", "events_url": "https://api.github.com/users/TomPace101/events{/privacy}", "received_events_url": "https://api.github.com/users/TomPace101/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662473, "node_id": "MDU6TGFiZWw4MDY2MjQ3Mw==", "url": "https://api.github.com/repos/pydoit/doit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 1, "created_at": "2017-11-21T14:10:42Z", "updated_at": "2018-02-18T08:24:19Z", "closed_at": "2018-02-18T08:24:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "The example `dodo.py` below illustrates how, in certain cases, additional keyword arguments are added when providing an arguments dictionary to a python action.\r\n\r\nThe first action writes the arguments dictionary received out to `kwargs.txt`,\r\nand the second action illustrates how this behavior can cause errors.\r\n\r\nThere are obvious workarounds for the example below. This is merely intended as a minimal example to illustrate the issue.\r\n\r\nI'm using python version 3.6.1, and doit version 0.30.3.\r\n\r\n```python\r\ndef targfunc(a,b,c):\r\n  \"The target function for execution in the python action\"\r\n  with open('out.txt','w') as fp:\r\n    fp.write(str(a+b*c))\r\n  return\r\n\r\nclass MyClass:\r\n  @classmethod\r\n  def write_kwargs(cls,**kwargs):\r\n    \"This method will show the keyword arguments received\"\r\n    with open('kwargs.txt','w') as fp:\r\n      fp.write(str(kwargs)+\"\\n\")\r\n  @classmethod\r\n  def cause_error(cls,**kwargs):\r\n    \"This method will cause the error, by passing unexpected arguments to the target function\"\r\n    targfunc(**kwargs)\r\n\r\n\r\ndef task_one():\r\n  argsdict={'a':1,'b':2,'c':3}\r\n  return {'actions':[(MyClass.write_kwargs,tuple(),argsdict),(MyClass.cause_error,tuple(),argsdict)],\r\n          'targets':['kwargs.txt','out.txt']}\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/218", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/218/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/218/events", "html_url": "https://github.com/pydoit/doit/issues/218", "id": 271041275, "node_id": "MDU6SXNzdWUyNzEwNDEyNzU=", "number": 218, "title": "clean should optionally include forget", "user": {"login": "moltob", "id": 6240478, "node_id": "MDQ6VXNlcjYyNDA0Nzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6240478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moltob", "html_url": "https://github.com/moltob", "followers_url": "https://api.github.com/users/moltob/followers", "following_url": "https://api.github.com/users/moltob/following{/other_user}", "gists_url": "https://api.github.com/users/moltob/gists{/gist_id}", "starred_url": "https://api.github.com/users/moltob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moltob/subscriptions", "organizations_url": "https://api.github.com/users/moltob/orgs", "repos_url": "https://api.github.com/users/moltob/repos", "events_url": "https://api.github.com/users/moltob/events{/privacy}", "received_events_url": "https://api.github.com/users/moltob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-03T16:36:19Z", "updated_at": "2017-11-11T09:34:35Z", "closed_at": "2017-11-11T09:34:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The current implementation of the ``clean`` command does not include ``forget``, i.e. if no other dependencies are outdated, doit assumes tasks are still up-do-date and effective, even after ``clean`` was processed.\r\n\r\nWhile this may be the useful in some situations, it is a bit counter intuitive for users not being aware of the semantic difference of the two commands. In particular in a scenario, where doit-based tasks are rolled out to a software development team, they often will expect ``clean`` to invalidate all cleaned tasks, as they are used to from other build engines like make, ninja, and so on.\r\n\r\nAs suggested by @schettino72 it would be helpful to extend the current ``clean`` command such that it optionally also forgets tasks. The new behavior can be requested per command line option to ``clean`` and should also become a configuration option to make it the default ``clean`` behavior within the context of a project.\r\n\r\nI will look at the existing ``clean`` and ``forget`` commands and try to implement it in my fork.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/217", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/217/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/217/events", "html_url": "https://github.com/pydoit/doit/issues/217", "id": 270477601, "node_id": "MDU6SXNzdWUyNzA0Nzc2MDE=", "number": 217, "title": "Unable to create a Delayed Task Creator by yielding a task dictionary", "user": {"login": "leftink", "id": 4984003, "node_id": "MDQ6VXNlcjQ5ODQwMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4984003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leftink", "html_url": "https://github.com/leftink", "followers_url": "https://api.github.com/users/leftink/followers", "following_url": "https://api.github.com/users/leftink/following{/other_user}", "gists_url": "https://api.github.com/users/leftink/gists{/gist_id}", "starred_url": "https://api.github.com/users/leftink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leftink/subscriptions", "organizations_url": "https://api.github.com/users/leftink/orgs", "repos_url": "https://api.github.com/users/leftink/repos", "events_url": "https://api.github.com/users/leftink/events{/privacy}", "received_events_url": "https://api.github.com/users/leftink/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-01T22:46:59Z", "updated_at": "2018-05-26T05:33:09Z", "closed_at": "2018-05-26T05:32:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I realize this is not currently supported in the code, but I couldn't see any reason why it couldn't be supported.\r\n\r\nCurrently, it looks like Delayed task creation can only be accomplished by decorating a function as part of a module/dodo.py file.\r\n\r\nI am however integrating doit into an application with a custom task loader.  As such, the way things are organized, the structure of the code is a top function yielding tasks or other generators to the custom task loader so in order for me to have a Delayed Task creator is to yield it back with other tasks.\r\n\r\nLooking at the code, it appears the only thing that is preventing me from accomplishing my goal, is that generators can only yield task dictionaries and the ***ONLY*** attribute not defined in the valid_attrs for a task is the loader.\r\n\r\nBased on my limited understanding of the code, if the key 'loader' was added to the valid_attr list then what I am trying to do would work.\r\n\r\nA simple example:\r\n```python\r\n# example.py\r\nimport glob\r\n\r\nfrom doit import create_after\r\n\r\n@create_after(executed='early', target_regex='.*\\.out')\r\ndef task_build():\r\n    for inf in glob.glob('*.in'):\r\n        yield {\r\n            'name': inf,\r\n            'actions': ['cp %(dependencies)s %(targets)s'],\r\n            'file_dep': [inf],\r\n            'targets': [inf[:-3] + '.out'],\r\n            'clean': True}\r\n\r\ndef task_run():\r\n    yield {\r\n        'name': 't1',\r\n        'actions': ['touch %(targets)s'],\r\n        'targets': ['a.in', 'b.in', 'c.in'],\r\n        'clean': True}\r\n\r\n    yield {\r\n        'name': 'build',\r\n        'doc': doc=task_build.creator.__doc__,\r\n        'loader': task_build}\r\n```\r\nThe dodo file would be something like:\r\n```python\r\n# dodo.py\r\nfrom example import task_run\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/216", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/216/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/216/events", "html_url": "https://github.com/pydoit/doit/issues/216", "id": 266082090, "node_id": "MDU6SXNzdWUyNjYwODIwOTA=", "number": 216, "title": "Run command implementation question", "user": {"login": "moltob", "id": 6240478, "node_id": "MDQ6VXNlcjYyNDA0Nzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6240478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moltob", "html_url": "https://github.com/moltob", "followers_url": "https://api.github.com/users/moltob/followers", "following_url": "https://api.github.com/users/moltob/following{/other_user}", "gists_url": "https://api.github.com/users/moltob/gists{/gist_id}", "starred_url": "https://api.github.com/users/moltob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moltob/subscriptions", "organizations_url": "https://api.github.com/users/moltob/orgs", "repos_url": "https://api.github.com/users/moltob/repos", "events_url": "https://api.github.com/users/moltob/events{/privacy}", "received_events_url": "https://api.github.com/users/moltob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-17T11:01:31Z", "updated_at": "2017-10-17T17:01:19Z", "closed_at": "2017-10-17T17:01:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am implementing a new Reporter and I am trying to evaluate `ConsoleReporter.show_out`. Debugging the result was a bit unexpected, essentially resulting from this line (currently 213) in `cmd_run.py`:\r\n\r\n```python\r\nshow_out = use_verbosity < 2  # show on error report\r\n```\r\n\r\n`show_err` is always `True`. I understood `show_out` would become active in case of a _higher_ verbosity level, so I would expect:\r\n\r\n```python\r\nshow_out = use_verbosity > 1\r\n```\r\n\r\nAm I thinking the wrong way or is this a small issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/213", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/213/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/213/events", "html_url": "https://github.com/pydoit/doit/issues/213", "id": 265081670, "node_id": "MDU6SXNzdWUyNjUwODE2NzA=", "number": 213, "title": "Consider using StackOverflow for publishing \"How To\" and promoting  `doit`", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 5, "created_at": "2017-10-12T20:51:48Z", "updated_at": "2018-01-19T03:05:41Z", "closed_at": "2018-01-19T03:05:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Current situation:\r\n- there are few (not many) questions on StackOverflow related to doit. None of them is tagged with `doit`.\r\n- StackOverflow is used by many developers as source of answers and is also very easy to use (add a question, edit it, answer ...)\r\n- it allows for great cooperation with any contributor\r\n- [Asking a question and answering it by one user is considered fine](https://meta.stackexchange.com/questions/17845/etiquette-for-answering-your-own-question) as it increase information on the site in form of question and answer\r\n\r\nOptions for promoting `doit` (thus serving potential users better) are:\r\n- add properly selected tag (either `doit` or `pydoit`, I am not sure at the moment)\r\n- review existing questions and add the tag to those, which are really related to doit\r\n- publish \"how to\" information using question to state the problem and answer as the instruction how to do that.\r\n\r\nWhen is this question resolved?\r\n- either decide to reject this idea or consider it irrelevant as doit issue\r\n- or fix the tags for existing questions and add at least three How to questions and answers.\r\n\r\nPersonal note: The only issue I have with this idea is that I made a [promise](https://stackoverflow.com/users/346478/jan-vlcinsky) to my colleague not to log into StackOverflow until I complete one task which awaits my capacity for longer time. But this issue shall be resolved in some time.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/212", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/212/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/212/events", "html_url": "https://github.com/pydoit/doit/issues/212", "id": 265060388, "node_id": "MDU6SXNzdWUyNjUwNjAzODg=", "number": 212, "title": "Publish doit docs on readthedocs", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-10-12T19:37:12Z", "updated_at": "2017-10-15T20:49:55Z", "closed_at": "2017-10-15T18:54:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently doit does not seem to have documentation built by, and more importantly available via readthedocs.\r\n\r\nHaving docs available on readthedocs gives user an advantage of getting it in preferred format (mostly html.zip, sometime pdf and sometime epub) and use it conveniently without accessing Internet (great in aeroplane, train etc.).\r\n\r\nConsider publishing doit docs via readthedocs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/211", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/211/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/211/events", "html_url": "https://github.com/pydoit/doit/issues/211", "id": 264577277, "node_id": "MDU6SXNzdWUyNjQ1NzcyNzc=", "number": 211, "title": "Improve doit message when file from `file_dep` is missing", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662475, "node_id": "MDU6TGFiZWw4MDY2MjQ3NQ==", "url": "https://api.github.com/repos/pydoit/doit/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 2, "created_at": "2017-10-11T13:00:24Z", "updated_at": "2018-02-16T15:19:58Z", "closed_at": "2018-02-16T15:11:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If a task requires an input file as declared in `file_dep`, one may get output as follows:\r\n\r\n\r\n\r\n\t(py36) javl@T810:~/devel/pydoit/samples/multi\u27eb doit\r\n\t-- one:onetail_onetail\r\n\t-- one:onetail_twotail\r\n\t.  one:onetail_threetail\r\n\r\n\tTraceback (most recent call last):\r\n\t  File \"/home/javl/devel/pydoit/samples/.tox/py36/lib/python3.6/site-packages/doit/doit_cmd.py\", line 167\r\n\t, in run\r\n\t    return command.parse_execute(args)\r\n\t  File \"/home/javl/devel/pydoit/samples/.tox/py36/lib/python3.6/site-packages/doit/cmd_base.py\", line 120\r\n\t, in parse_execute\r\n\t    return self.execute(params, args)\r\n\t  File \"/home/javl/devel/pydoit/samples/.tox/py36/lib/python3.6/site-packages/doit/cmd_base.py\", line 403\r\n\t, in execute\r\n\t    return self._execute(**exec_params)\r\n\t  File \"/home/javl/devel/pydoit/samples/.tox/py36/lib/python3.6/site-packages/doit/cmd_run.py\", line 252,\r\n\t in _execute\r\n\t    return runner.run_all(self.control.task_dispatcher())\r\n\t  File \"/home/javl/devel/pydoit/samples/.tox/py36/lib/python3.6/site-packages/doit/runner.py\", line 246,\r\n\tin run_all\r\n\t    self.run_tasks(task_dispatcher)\r\n\t  File \"/home/javl/devel/pydoit/samples/.tox/py36/lib/python3.6/site-packages/doit/runner.py\", line 213,\r\n\tin run_tasks\r\n\t    self.process_task_result(node, catched_excp)\r\n\t  File \"/home/javl/devel/pydoit/samples/.tox/py36/lib/python3.6/site-packages/doit/runner.py\", line 184,\r\n\tin process_task_result\r\n\t    self.dep_manager.save_success(task)\r\n\t  File \"/home/javl/devel/pydoit/samples/.tox/py36/lib/python3.6/site-packages/doit/dependency.py\", line 5\r\n\t12, in save_success\r\n\t    state = self.checker.get_state(dep, self._get(task.name, dep))\r\n\t  File \"/home/javl/devel/pydoit/samples/.tox/py36/lib/python3.6/site-packages/doit/dependency.py\", line 3\r\n\t94, in get_state\r\n\t    timestamp = os.path.getmtime(dep)\r\n\t  File \"/home/javl/devel/pydoit/samples/.tox/py36/lib/python3.6/genericpath.py\", line 55, in getmtime\r\n\t    return os.stat(filename).st_mtime\r\n\tFileNotFoundError: [Errno 2] No such file or directory: 'threehead_threetail'\r\n\r\nI think, that for command `doit` it shall simply explain, that given file is\r\nexpected as file dependency and is missing. All stacktrace is useless as it only lists doit\r\ninternals which have nothing to do with the code, which could cause or fix the\r\nproblem.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/210", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/210/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/210/events", "html_url": "https://github.com/pydoit/doit/issues/210", "id": 263294523, "node_id": "MDU6SXNzdWUyNjMyOTQ1MjM=", "number": 210, "title": "doit and exit codes.", "user": {"login": "mvuthpala-CS", "id": 29225691, "node_id": "MDQ6VXNlcjI5MjI1Njkx", "avatar_url": "https://avatars3.githubusercontent.com/u/29225691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvuthpala-CS", "html_url": "https://github.com/mvuthpala-CS", "followers_url": "https://api.github.com/users/mvuthpala-CS/followers", "following_url": "https://api.github.com/users/mvuthpala-CS/following{/other_user}", "gists_url": "https://api.github.com/users/mvuthpala-CS/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvuthpala-CS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvuthpala-CS/subscriptions", "organizations_url": "https://api.github.com/users/mvuthpala-CS/orgs", "repos_url": "https://api.github.com/users/mvuthpala-CS/repos", "events_url": "https://api.github.com/users/mvuthpala-CS/events{/privacy}", "received_events_url": "https://api.github.com/users/mvuthpala-CS/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-05T23:13:27Z", "updated_at": "2017-10-06T14:43:39Z", "closed_at": "2017-10-06T14:43:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are trying to run certain test cases using doit in a docker container. This docker container is run by a build pipeline in a CI/CD tool. Though the tests fail, the CI/CD is treating it as a success. I just tried to run these on my local machine and when I check the exit status of the previous command it is a success. \r\n\r\nHow can I mock this and make it fail so that the build pipeline fails and does not show a false success?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/209", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/209/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/209/events", "html_url": "https://github.com/pydoit/doit/issues/209", "id": 262888018, "node_id": "MDU6SXNzdWUyNjI4ODgwMTg=", "number": 209, "title": "Clean Command Dependency Problems", "user": {"login": "leftink", "id": 4984003, "node_id": "MDQ6VXNlcjQ5ODQwMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4984003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leftink", "html_url": "https://github.com/leftink", "followers_url": "https://api.github.com/users/leftink/followers", "following_url": "https://api.github.com/users/leftink/following{/other_user}", "gists_url": "https://api.github.com/users/leftink/gists{/gist_id}", "starred_url": "https://api.github.com/users/leftink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leftink/subscriptions", "organizations_url": "https://api.github.com/users/leftink/orgs", "repos_url": "https://api.github.com/users/leftink/repos", "events_url": "https://api.github.com/users/leftink/events{/privacy}", "received_events_url": "https://api.github.com/users/leftink/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662473, "node_id": "MDU6TGFiZWw4MDY2MjQ3Mw==", "url": "https://api.github.com/repos/pydoit/doit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 9, "created_at": "2017-10-04T18:36:08Z", "updated_at": "2018-02-20T10:08:53Z", "closed_at": "2018-02-20T10:02:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "There were two problems I came across with the clean command:\r\n1. '-c' option doesn't pick up task dependencies where the target of one task is a file dependency of another task.\r\n2. The clean execution order can be incorrect if more than one task has a dependency on the same task.\r\n\r\nBelow is a tarball of a simple example project that demonstrates the issues.\r\n[doit.tar.gz](https://github.com/pydoit/doit/files/1356573/doit.tar.gz)\r\n\r\nThere are 4 tasks and 1 group task.\r\n\r\n## Tasks:\r\n**my_grp**:   Group task for ['tst', 't2']\r\n**tst**:  Creates a file, task_dep for ['setup']\r\n**t2**:   Creates a file, \"inferred\" task_dep for ['t1'] due to target of 't1' used as a file_dep\r\n**t1**:   Creates a file, task_dep for ['setup']\r\n**setup**:  Creates the output directory where all targets are stored\r\n\r\nDOIT_CONFIG has {'default_tasks': ['my_grp']\r\n\r\nAfter running doit on the dodo.py file all tasks are executed, but when I dry-run or even run doit clean things just seem wrong.\r\n\r\n## Clean Options:\r\n1. doit clean -n [-c]\r\n   1. Should clean default tasks and dependencies\r\n   2. Cleaned Tasks (in order): ['setup', 't2', 'tst']  **WRONG**\r\n      1. Wrong order:  'setup' should have been last\r\n      2. Missing task 't1'\r\n2. doit clean -n tst\r\n   1. Should clean 'tst' only\r\n   2. Cleaned Tasks (in order): ['tst'] **GOOD**\r\n3. doit clean -n -c tst\r\n   1. Should clean 'tst' and dependencies\r\n   2. Cleaned Tasks (in order): ['setup', 'tst']  **WRONG**\r\n      1. Wrong order:  'setup' should have been last\r\n4. doit clean -n -c t2\r\n   1. Should clean 't2' and dependencies\r\n   2. Cleaned Tasks (in order): ['t2']  **WRONG**\r\n      1. Missing task 't1' and task 'setup'\r\n5. doit clean -n -c t1\r\n   1. Should clean 't1' and dependencies\r\n   2. Cleaned Tasks (in order): ['setup', 't1']  **WRONG**\r\n      1. Wrong order:  'setup' should have been last\r\n6. doit clean -n -a\r\n   1. Should clean all the tasks\r\n   2. Cleaned Tasks (in order): ['setup', 't1', 't2', 'tst']  **WRONG**\r\n      1. Wrong Order: 't2' and 'tst' should be first and 'setup' should be last\r\n      2. Much like the implied '-c' when using default tasks, it seems like -a should also clean based on dependency order, i.e. implied '-c'\r\n7. doit clean -n -a -c\r\n   1. Should clean all the tasks with dependency order\r\n   2. Cleaned Tasks (in order): [ 't2', 'tst', 'setup', 't1']  **WRONG**\r\n      1. Wrong Order: 'setup' should be last\r\n\r\n## Code\r\nI haven't had a chance to analyze all the code yet, but what I have found revolves around the `to_clean.reverse()` processing.  First, before this line, the to_clean list needs to be filtered to remove duplicate tasks, but maintain order of first occurance, e.g. for python 3.6+ `to_clean=list(dict.fromkeys(to_clean))`.  May be able to do the same with an OrderedDict for other versions of python.  This will address attempt (7) above.  Another problem is it seems based on the path taken to get the to_clean, the list is already reversed in some instances.  Lastly, `tasks_and_deps_iter()` doesn't seem to be working correctly to pick up the implied task dependencies like those between 't1' and 't2'.\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/207", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/207/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/207/events", "html_url": "https://github.com/pydoit/doit/issues/207", "id": 261771262, "node_id": "MDU6SXNzdWUyNjE3NzEyNjI=", "number": 207, "title": "Use natural order of task names when listed", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 7, "created_at": "2017-09-29T21:08:20Z", "updated_at": "2018-09-05T00:39:22Z", "closed_at": "2018-09-05T00:37:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```bash\r\n$ doit list\r\nbuildhtml  Build HTML documentation.\r\nbuildpdf   Build PDF documentation.\r\npublish    Publish documentation to FTP.\r\nspell\t   Spell document source files.\r\n```\r\nTasks are today listed in alphabetical order.\r\n\r\nAs seen, it can look quite confusing and user would appreciate natural order:\r\n\r\n```bash\r\n$ doit list\r\nspell\t   Spell document source files.\r\nbuildhtml  Build HTML documentation.\r\nbuildpdf   Build PDF documentation.\r\npublish    Publish documentation to FTP.\r\n```\r\n\r\nI guess, changing order of listed items is not likely to break anything and I would prefer do it this way by default. Author has good control of order of tasks definitions in dodo file.\r\n\r\nIf alphabetical order would be (sometime) required, we could add a key \"listorder\" into `DOIT_CONFIG`.\r\n\r\nI had similar issue with Click https://github.com/pallets/click/issues/513 (and I managed to resolve it).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/206", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/206/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/206/events", "html_url": "https://github.com/pydoit/doit/issues/206", "id": 261590079, "node_id": "MDU6SXNzdWUyNjE1OTAwNzk=", "number": 206, "title": "Problems to use env var `DOIT_SEEK_FILE`", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-29T09:52:46Z", "updated_at": "2017-09-29T10:45:58Z", "closed_at": "2017-09-29T10:45:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Trying to use env variable `DOIT_SEEK_FILE` does not work for me.\r\n\r\nTried values such as \"true\", \"True\", \"on\", \"1\" as in:\r\n```bash\r\n$ export DOIT_SEEK_FILE=on\r\n```\r\nbut the call:\r\n```bash\r\n$ doit list\r\n```\r\nstill complains about problems to find `dodo.py`.\r\n\r\nA call:\r\n```bash\r\n$ doit list -k\r\n```\r\nworks well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/204", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/204/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/204/events", "html_url": "https://github.com/pydoit/doit/issues/204", "id": 261571579, "node_id": "MDU6SXNzdWUyNjE1NzE1Nzk=", "number": 204, "title": "Inconsistent expected position of command wide command line options (`-k`, `-f`)", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662475, "node_id": "MDU6TGFiZWw4MDY2MjQ3NQ==", "url": "https://api.github.com/repos/pydoit/doit/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 2, "created_at": "2017-09-29T08:44:13Z", "updated_at": "2018-06-11T18:40:47Z", "closed_at": "2018-06-11T18:40:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`doit` has couple of subcommands with respective options.\r\n\r\nOn the other hand, there are options which are common to all of them, especially when related to location of `dodo.py` file.\r\n\r\nTrying to use `dodo.py` located in parent directory (with no `dodo.py` in current one):\r\n\r\n```bash\r\n$ doit -k\r\n.  sphinx\r\nRunning Sphinx v1.6.4\r\n...\r\nbuild succeeded.\r\n\r\n$ doit -f ../dodo.py \r\n.  sphinx\r\nRunning Sphinx v1.6.4\r\n...\r\nbuild succeeded.\r\n```\r\nThis works fine.\r\n\r\nHowever, trying to call other commands (such as `list`) starts complaining:\r\n```bash\r\n$ doit -f ../dodo.py list\r\nERROR: Invalid parameter: \"list\". Must be a command, task, or a target.\r\nType \"doit help\" to see available commands.\r\nType \"doit list\" to see available tasks.\r\n\r\n$ doit -k list\r\nERROR: Invalid parameter: \"list\". Must be a command, task, or a target.\r\nType \"doit help\" to see available commands.\r\nType \"doit list\" to see available tasks.\r\n```\r\n\r\nIf an option is used after subcommand, all runs well:\r\n\r\n```bash\r\n$ doit list -f ../dodo.py\r\nspell    spell checker for doc files\r\nsphinx   build sphinx docs\r\n\r\n$ doit list -k\r\nspell    spell checker for doc files\r\nsphinx   build sphinx docs\r\n```\r\n\r\nExpected behaviour:\r\n\r\nWhichever option may be considered global (namely `--seek-file/-k` and `--file/-f` related to which `dodo.py` file to use) shall be allowed before subcommand is called.\r\n\r\nThis way it is easy to repeate calls to different subcommands and edit only final part of command line.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/203", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/203/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/203/events", "html_url": "https://github.com/pydoit/doit/issues/203", "id": 261415598, "node_id": "MDU6SXNzdWUyNjE0MTU1OTg=", "number": 203, "title": "Allow configuring location of `dodo.py` file by environmental variable", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662475, "node_id": "MDU6TGFiZWw4MDY2MjQ3NQ==", "url": "https://api.github.com/repos/pydoit/doit/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 2, "created_at": "2017-09-28T18:25:47Z", "updated_at": "2018-07-01T12:15:34Z", "closed_at": "2018-07-01T12:15:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Something like:\r\n```bash\r\n$ export DOIT_GLOBAL_FILE=alter.py\r\n```\r\nshould affect `doit` as if called:\r\n```bash\r\n$ doit run --file alter.py\r\n```\r\n\r\nAt the same time, it priorities shall be clarified, as there are multiple places, where these options may be set:\r\n\r\n- command line option\r\n- env. variable\r\n- doit.cfg\r\n\r\n(dodo.py is not relevant in this case)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/202", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/202/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/202/events", "html_url": "https://github.com/pydoit/doit/issues/202", "id": 261414249, "node_id": "MDU6SXNzdWUyNjE0MTQyNDk=", "number": 202, "title": "`doit.cfg` configuration parameters name should be visible on `doit help`", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662473, "node_id": "MDU6TGFiZWw4MDY2MjQ3Mw==", "url": "https://api.github.com/repos/pydoit/doit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 2, "created_at": "2017-09-28T18:21:12Z", "updated_at": "2018-02-18T14:36:03Z", "closed_at": "2018-02-18T14:36:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Playing with multiple dodo.py files I searched for an option to configure the file name (as with `$ doit run -f things.py`).\r\n\r\n`doit.cfg` seemed to be the way, but with:\r\n\r\n```ini\r\n[GLOBAL]\r\nfile = things.py\r\n```\r\nit had no effect and `doit` complained about problems to locate `dodo.py`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/201", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/201/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/201/events", "html_url": "https://github.com/pydoit/doit/issues/201", "id": 261313392, "node_id": "MDU6SXNzdWUyNjEzMTMzOTI=", "number": 201, "title": "Better logo for opencollective campaign", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 704713308, "node_id": "MDU6TGFiZWw3MDQ3MTMzMDg=", "url": "https://api.github.com/repos/pydoit/doit/labels/ORG", "name": "ORG", "color": "006b75", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-28T13:12:48Z", "updated_at": "2017-09-29T09:27:58Z", "closed_at": "2017-09-29T09:27:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On https://opencollective.com/opensource there are many competing projects.\r\n\r\ndoit logo is a bit invisible.\r\n\r\nProposal: use a logo with different background. Whit would be great.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/200", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/200/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/200/events", "html_url": "https://github.com/pydoit/doit/issues/200", "id": 261091083, "node_id": "MDU6SXNzdWUyNjEwOTEwODM=", "number": 200, "title": "Make Open Collective public", "user": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 704713308, "node_id": "MDU6TGFiZWw3MDQ3MTMzMDg=", "url": "https://api.github.com/repos/pydoit/doit/labels/ORG", "name": "ORG", "color": "006b75", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-27T19:29:45Z", "updated_at": "2018-02-11T13:37:55Z", "closed_at": "2018-02-11T13:37:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "- [x] write Open Collective page\r\n- [x] replace doit website (right-side bar) asking for donors/sponsors\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/197", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/197/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/197/events", "html_url": "https://github.com/pydoit/doit/issues/197", "id": 260120514, "node_id": "MDU6SXNzdWUyNjAxMjA1MTQ=", "number": 197, "title": "Misleading error message when using invalid \"clean\" value", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662473, "node_id": "MDU6TGFiZWw4MDY2MjQ3Mw==", "url": "https://api.github.com/repos/pydoit/doit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 0, "created_at": "2017-09-24T22:20:48Z", "updated_at": "2018-02-16T05:43:38Z", "closed_at": "2018-02-16T05:43:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I created a task which had error in task dictionary , setting `\"clean\": [True, context.clean_stuff]`\"\r\nThe error (in my dictionary) is, that \"clean\" can be either `True`, or a list, but `True` cannot be member of a list as it is expecting a function there.\r\n\r\nThe problem is, that doit error message for such situation is confusing:\r\n```\r\nERROR: Task 'report_file_size:alfa.txt': invalid 'actions' type. got:True <class 'bool'>\r\n```\r\nas it reports invalid 'actions' type while it does not mention the action is located under keyword \"clean\".\r\n\r\nProposed modification: Modify the error message to mention also the keyword (actions, clean, uptodate...) where the value comes from.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/194", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/194/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/194/events", "html_url": "https://github.com/pydoit/doit/issues/194", "id": 258318140, "node_id": "MDU6SXNzdWUyNTgzMTgxNDA=", "number": 194, "title": "interpolate `%(changed)s` in action string even if it is empty list", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662473, "node_id": "MDU6TGFiZWw4MDY2MjQ3Mw==", "url": "https://api.github.com/repos/pydoit/doit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 4, "created_at": "2017-09-17T17:16:59Z", "updated_at": "2018-02-19T15:46:37Z", "closed_at": "2018-02-18T10:49:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Action string may include `%(dependencies)s`, `%(targets)s` and `%(changed)`.\r\n\r\nThe values of variable `dependencies`, `targets` and `changed` are provided as strings from respective lists separated by a space.\r\n\r\nIn case of `changed`, it may happen, that when the value is `None`, the value for `changed` is not set in dictionary and string interpolation using `%(changed)s` will fail with KeyError due to missing keyword.\r\n\r\nSee the line: \r\nhttps://github.com/pydoit/doit/blob/master/doit/action.py#L273\r\n\r\nProposal: in case of `None` (no changed input files), interpolate `%(changed)s` by empty string. This will make the behaviour consistent with other two keywords and more stable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/193", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/193/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/193/events", "html_url": "https://github.com/pydoit/doit/issues/193", "id": 258212451, "node_id": "MDU6SXNzdWUyNTgyMTI0NTE=", "number": 193, "title": "automatic action string interpolation is not documented in Sphinx doc", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 190184556, "node_id": "MDU6TGFiZWwxOTAxODQ1NTY=", "url": "https://api.github.com/repos/pydoit/doit/labels/docs", "name": "docs", "color": "009800", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-09-16T06:29:13Z", "updated_at": "2017-09-25T13:28:59Z", "closed_at": "2017-09-25T13:28:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was surprised to see, that the following code works:\r\n\r\n```python\r\ndef task_compile_requirements():\r\n    cmd = \"pip-compile --output-file %(targets)s %(dependencies)s\"\r\n    return {\r\n        \"file_dep\": [\"requirements.in\"],\r\n        \"actions\": [cmd],\r\n        \"targets\": [\"requirements.txt\"],\r\n    }\r\n```\r\n\r\nI did not know, that the action string `cmd` is automatically\r\ninterpolated by:\r\n- `targets`\r\n- `dependencies`\r\n- `changed`\r\n\r\nSuch an information exists for `CmdAction` in code, but I did not find such information in Sphinx documentation.\r\n\r\nI would propose adding it and explain that CmdAction and action string are automatically interpolated by values of `targets`, `dependencies` and `changed`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/190", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/190/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/190/events", "html_url": "https://github.com/pydoit/doit/issues/190", "id": 252612680, "node_id": "MDU6SXNzdWUyNTI2MTI2ODA=", "number": 190, "title": "Tests are failing: [Errno 11] Resource temporarily unavailable", "user": {"login": "frenzymadness", "id": 5688939, "node_id": "MDQ6VXNlcjU2ODg5Mzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5688939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frenzymadness", "html_url": "https://github.com/frenzymadness", "followers_url": "https://api.github.com/users/frenzymadness/followers", "following_url": "https://api.github.com/users/frenzymadness/following{/other_user}", "gists_url": "https://api.github.com/users/frenzymadness/gists{/gist_id}", "starred_url": "https://api.github.com/users/frenzymadness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frenzymadness/subscriptions", "organizations_url": "https://api.github.com/users/frenzymadness/orgs", "repos_url": "https://api.github.com/users/frenzymadness/repos", "events_url": "https://api.github.com/users/frenzymadness/events{/privacy}", "received_events_url": "https://api.github.com/users/frenzymadness/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-08-24T14:04:59Z", "updated_at": "2017-08-28T17:42:21Z", "closed_at": "2017-08-26T15:57:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello.\r\n\r\nI have freshly installed doit from source code in the new virtual environment and when I try to run tests, some of them fails with error: [Errno 11] Resource temporarily unavailable\r\n\r\nIt seems that the error is caused by not-available database file in /tmp directory. I am using Python 3.6.2 on Fedora 26. \r\n\r\nI would like to fix it but I don't know how.\r\n\r\nOutputs of tests and ;pip freeze` are attached.\r\n[pip_freeze.txt](https://github.com/pydoit/doit/files/1249051/pip_freeze.txt)\r\n[test_output.txt](https://github.com/pydoit/doit/files/1249052/test_output.txt)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/188", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/188/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/188/events", "html_url": "https://github.com/pydoit/doit/issues/188", "id": 252065329, "node_id": "MDU6SXNzdWUyNTIwNjUzMjk=", "number": 188, "title": "Support decorator on task creator", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 181682470, "node_id": "MDU6TGFiZWwxODE2ODI0NzA=", "url": "https://api.github.com/repos/pydoit/doit/labels/need-sample", "name": "need-sample", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-22T19:33:53Z", "updated_at": "2017-08-22T23:01:49Z", "closed_at": "2017-08-22T23:01:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Eg\r\n\r\n```\r\ndef my_decorator(func):\r\n   ...\r\n\r\n@my_decorator\r\ndef task_do_something():\r\n    return {\r\n        'actions': [...],\r\n    }\r\n```\r\n\r\nRight, now, task_do_something will not collect. Not sure exactly why.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/187", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/187/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/187/events", "html_url": "https://github.com/pydoit/doit/issues/187", "id": 248206724, "node_id": "MDU6SXNzdWUyNDgyMDY3MjQ=", "number": 187, "title": "Please use `python3` instead of `python` on unittests", "user": {"login": "agustinhenze", "id": 1900634, "node_id": "MDQ6VXNlcjE5MDA2MzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1900634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agustinhenze", "html_url": "https://github.com/agustinhenze", "followers_url": "https://api.github.com/users/agustinhenze/followers", "following_url": "https://api.github.com/users/agustinhenze/following{/other_user}", "gists_url": "https://api.github.com/users/agustinhenze/gists{/gist_id}", "starred_url": "https://api.github.com/users/agustinhenze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agustinhenze/subscriptions", "organizations_url": "https://api.github.com/users/agustinhenze/orgs", "repos_url": "https://api.github.com/users/agustinhenze/repos", "events_url": "https://api.github.com/users/agustinhenze/events{/privacy}", "received_events_url": "https://api.github.com/users/agustinhenze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 4, "created_at": "2017-08-05T20:13:33Z", "updated_at": "2017-08-06T12:25:36Z", "closed_at": "2017-08-06T12:25:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run them on debian I got a lot of \r\n```\r\n                            err_msg += ': ' + repr(orig_executable)\r\n>               raise child_exception_type(errno_num, err_msg)\r\nE               FileNotFoundError: [Errno 2] No such file or directory: 'python'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/185", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/185/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/185/events", "html_url": "https://github.com/pydoit/doit/issues/185", "id": 246940240, "node_id": "MDU6SXNzdWUyNDY5NDAyNDA=", "number": 185, "title": "Prevent doit 0.30 appearing in pip2 list --outdated?", "user": {"login": "tseemann", "id": 453972, "node_id": "MDQ6VXNlcjQ1Mzk3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/453972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tseemann", "html_url": "https://github.com/tseemann", "followers_url": "https://api.github.com/users/tseemann/followers", "following_url": "https://api.github.com/users/tseemann/following{/other_user}", "gists_url": "https://api.github.com/users/tseemann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tseemann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tseemann/subscriptions", "organizations_url": "https://api.github.com/users/tseemann/orgs", "repos_url": "https://api.github.com/users/tseemann/repos", "events_url": "https://api.github.com/users/tseemann/events{/privacy}", "received_events_url": "https://api.github.com/users/tseemann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662478, "node_id": "MDU6TGFiZWw4MDY2MjQ3OA==", "url": "https://api.github.com/repos/pydoit/doit/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-01T02:48:00Z", "updated_at": "2017-08-06T17:05:29Z", "closed_at": "2017-08-01T04:08:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "This may not really be an issue you can help with, but I thought I might ask anyway in case you know how to resolve it.\r\n\r\nIs there anyway for `pip2` to know that 0.29 is that last Py2 version so it doesn't keep appearing to be out of date?   This is for an automatic updating system.\r\n\r\n```\r\n% pip2 list --outdated\r\n\r\nPackage Version Latest Type\r\n------- ------- ------ -----\r\ndoit    0.29.0  0.30.3 sdist\r\n\r\n% pip2 install doit\r\n\r\nCollecting doit\r\n    Complete output from command python setup.py egg_info:\r\n    This version of doit is only supported by Python 3.\r\n    Please use doit==0.29.0 with Python 2.\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/linuxbrew/pip-build-MhatcW/doit/\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/184", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/184/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/184/events", "html_url": "https://github.com/pydoit/doit/issues/184", "id": 242366195, "node_id": "MDU6SXNzdWUyNDIzNjYxOTU=", "number": 184, "title": "parametrize script name", "user": {"login": "rbdixon", "id": 35279, "node_id": "MDQ6VXNlcjM1Mjc5", "avatar_url": "https://avatars3.githubusercontent.com/u/35279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbdixon", "html_url": "https://github.com/rbdixon", "followers_url": "https://api.github.com/users/rbdixon/followers", "following_url": "https://api.github.com/users/rbdixon/following{/other_user}", "gists_url": "https://api.github.com/users/rbdixon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbdixon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbdixon/subscriptions", "organizations_url": "https://api.github.com/users/rbdixon/orgs", "repos_url": "https://api.github.com/users/rbdixon/repos", "events_url": "https://api.github.com/users/rbdixon/events{/privacy}", "received_events_url": "https://api.github.com/users/rbdixon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 3, "created_at": "2017-07-12T12:40:32Z", "updated_at": "2017-10-23T16:02:26Z", "closed_at": "2017-10-21T17:15:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm building a tool which uses doit's command line tool as the primary user interface. doit is well abstracted so this has been very easy to do. There are a few places where the \"doit\" name continues to peek out such as the output of the \"info <task>\" command:\r\n\r\n```\r\n$ <mycommand> help info\r\nPurpose: show info about a task\r\nUsage:   doit info TASK\r\n```\r\n\r\nhttps://github.com/pydoit/doit/blob/master/doit/cmd_base.py#L127\r\n\r\nWould you be open to merging a PR that makes the binary name a configurable option using `DOIT_CONFIG`? If so I'll hack away at it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/182", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/182/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/182/events", "html_url": "https://github.com/pydoit/doit/issues/182", "id": 233637489, "node_id": "MDU6SXNzdWUyMzM2Mzc0ODk=", "number": 182, "title": "database corruption", "user": {"login": "goerz", "id": 112306, "node_id": "MDQ6VXNlcjExMjMwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/112306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goerz", "html_url": "https://github.com/goerz", "followers_url": "https://api.github.com/users/goerz/followers", "following_url": "https://api.github.com/users/goerz/following{/other_user}", "gists_url": "https://api.github.com/users/goerz/gists{/gist_id}", "starred_url": "https://api.github.com/users/goerz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goerz/subscriptions", "organizations_url": "https://api.github.com/users/goerz/orgs", "repos_url": "https://api.github.com/users/goerz/repos", "events_url": "https://api.github.com/users/goerz/events{/privacy}", "received_events_url": "https://api.github.com/users/goerz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 190184556, "node_id": "MDU6TGFiZWwxOTAxODQ1NTY=", "url": "https://api.github.com/repos/pydoit/doit/labels/docs", "name": "docs", "color": "009800", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 4, "created_at": "2017-06-05T16:12:38Z", "updated_at": "2018-02-18T11:39:47Z", "closed_at": "2018-02-18T11:39:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `doit` inside the Jupyter notebook. I frequently find that that dependency database becomes corrupted, producing a traceback like the following for any `doit` command:\r\n\r\n    Traceback (most recent call last):\r\n    File \"/home/goerz/.conda/envs/default/lib/python3.6/site-packages/doit/doit_cmd.py\", line 167, in run\r\n        return command.parse_execute(args)\r\n    File \"/home/goerz/.conda/envs/default/lib/python3.6/site-packages/doit/cmd_base.py\", line 120, in parse_execute\r\n        return self.execute(params, args)\r\n    File \"/home/goerz/.conda/envs/default/lib/python3.6/site-packages/doit/cmd_dumpdb.py\", line 48, in execute\r\n        value_dict = json.loads(value_str.decode('utf-8'))\r\n    File \"/home/goerz/.conda/envs/default/lib/python3.6/json/__init__.py\", line 354, in loads\r\n        return _default_decoder.decode(s)\r\n    File \"/home/goerz/.conda/envs/default/lib/python3.6/json/decoder.py\", line 339, in decode\r\n        obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n    File \"/home/goerz/.conda/envs/default/lib/python3.6/json/decoder.py\", line 355, in raw_decode\r\n        obj, end = self.scan_once(s, idx)\r\n    json.decoder.JSONDecodeError: Expecting ',' delimiter: line 1 column 231 (char 230)\r\n\r\nThe `dumpdb` generates [some json output](https://gist.github.com/goerz/8cb4feb7e5360f0580f973fbb6e97238) before crashing.\r\n\r\nI can fix this by deleting the database file in`~/.ipython/profile_default/db/.doit.db` (of course this means I lose the information about the job status). I haven't really been able to determine when exactly the corruption occurs. Since it seems from the location of the database file that only one database is used for *any* invocation of `doit` from the Jupyter notebook, my suspicion was that maybe it's when multiple notebooks are running at the same time. If this is indeed the case then (a) does `doit` implement proper locking of the database file if multiple invocations try to access it at the same time?, and (b) would it be possible to have a database file that is unique to a specific notebook?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/181", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/181/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/181/events", "html_url": "https://github.com/pydoit/doit/issues/181", "id": 232655667, "node_id": "MDU6SXNzdWUyMzI2NTU2Njc=", "number": 181, "title": "use `python_requires`", "user": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 0, "created_at": "2017-05-31T18:32:46Z", "updated_at": "2017-08-06T13:59:09Z", "closed_at": "2017-08-06T13:59:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "see http://www.python3statement.org/practicalities/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/180", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/180/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/180/events", "html_url": "https://github.com/pydoit/doit/issues/180", "id": 232155952, "node_id": "MDU6SXNzdWUyMzIxNTU5NTI=", "number": 180, "title": "show CmdActions as they are executed", "user": {"login": "timbod7", "id": 1996446, "node_id": "MDQ6VXNlcjE5OTY0NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1996446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timbod7", "html_url": "https://github.com/timbod7", "followers_url": "https://api.github.com/users/timbod7/followers", "following_url": "https://api.github.com/users/timbod7/following{/other_user}", "gists_url": "https://api.github.com/users/timbod7/gists{/gist_id}", "starred_url": "https://api.github.com/users/timbod7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timbod7/subscriptions", "organizations_url": "https://api.github.com/users/timbod7/orgs", "repos_url": "https://api.github.com/users/timbod7/repos", "events_url": "https://api.github.com/users/timbod7/events{/privacy}", "received_events_url": "https://api.github.com/users/timbod7/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 186649082, "node_id": "MDU6TGFiZWwxODY2NDkwODI=", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid-send-questions-to-discussion-group", "name": "invalid-send-questions-to-discussion-group", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-30T06:39:27Z", "updated_at": "2017-05-30T09:04:26Z", "closed_at": "2017-05-30T09:04:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running doit with `-v2` is useful to see execution details. \r\n\r\nIs there a way to show the actual commands executed in subprocesses?\r\n\r\nie for a trivial task like:\r\n\r\n```\r\ndef task_genmodel():\r\n    return {\r\n        'doc' : 'regenerate the data model',\r\n        'actions': ['../tools/gen-model.sh'],\r\n    }\r\n```\r\nI'd like to see the string `../tools/gen-model.sh` in the verbose output.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/176", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/176/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/176/events", "html_url": "https://github.com/pydoit/doit/issues/176", "id": 226762295, "node_id": "MDU6SXNzdWUyMjY3NjIyOTU=", "number": 176, "title": "Graphviz plugin", "user": {"login": "MaxHalford", "id": 8095957, "node_id": "MDQ6VXNlcjgwOTU5NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8095957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaxHalford", "html_url": "https://github.com/MaxHalford", "followers_url": "https://api.github.com/users/MaxHalford/followers", "following_url": "https://api.github.com/users/MaxHalford/following{/other_user}", "gists_url": "https://api.github.com/users/MaxHalford/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaxHalford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaxHalford/subscriptions", "organizations_url": "https://api.github.com/users/MaxHalford/orgs", "repos_url": "https://api.github.com/users/MaxHalford/repos", "events_url": "https://api.github.com/users/MaxHalford/events{/privacy}", "received_events_url": "https://api.github.com/users/MaxHalford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662475, "node_id": "MDU6TGFiZWw4MDY2MjQ3NQ==", "url": "https://api.github.com/repos/pydoit/doit/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/7", "html_url": "https://github.com/pydoit/doit/milestone/7", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/7/labels", "id": 3142187, "node_id": "MDk6TWlsZXN0b25lMzE0MjE4Nw==", "number": 7, "title": "0.32", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 16, "state": "open", "created_at": "2018-02-26T01:51:59Z", "updated_at": "2019-12-09T23:03:29Z", "due_on": "2018-06-30T07:00:00Z", "closed_at": null}, "comments": 5, "created_at": "2017-05-06T11:22:52Z", "updated_at": "2018-07-07T16:05:16Z", "closed_at": "2018-07-07T16:05:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nFirst of all I would like that I'm really enjoying using doit! I'm using it for a data science pipeline and I find so much more flexible than a Makefile.\r\n\r\nI looked at the networkx plugin for displaying a DAG of the different tasks/files but I didn't find it very \"pretty\". Implementing a plugin doesn't seem too difficult; I was wondering if it might be worthwhile to **implement a Graphviz plugin**.\r\n\r\nAs mentioned in the contribution guidelines it seems to discuss it here first, any thoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/174", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/174/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/174/events", "html_url": "https://github.com/pydoit/doit/issues/174", "id": 223429700, "node_id": "MDU6SXNzdWUyMjM0Mjk3MDA=", "number": 174, "title": "`--seek-file` breaks `help` and `list` commands (possibly others)", "user": {"login": "wizeman", "id": 168610, "node_id": "MDQ6VXNlcjE2ODYxMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/168610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wizeman", "html_url": "https://github.com/wizeman", "followers_url": "https://api.github.com/users/wizeman/followers", "following_url": "https://api.github.com/users/wizeman/following{/other_user}", "gists_url": "https://api.github.com/users/wizeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/wizeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wizeman/subscriptions", "organizations_url": "https://api.github.com/users/wizeman/orgs", "repos_url": "https://api.github.com/users/wizeman/repos", "events_url": "https://api.github.com/users/wizeman/events{/privacy}", "received_events_url": "https://api.github.com/users/wizeman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662475, "node_id": "MDU6TGFiZWw4MDY2MjQ3NQ==", "url": "https://api.github.com/repos/pydoit/doit/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 6, "created_at": "2017-04-21T16:11:59Z", "updated_at": "2017-08-04T09:34:11Z", "closed_at": "2017-08-04T09:34:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIt is mentioned in the following URL that the `--seek-file` argument can be used in an alias, to make `doit` search for the `dodo.py` file in parent directories:\r\nhttps://groups.google.com/d/msg/python-doit/eKI0uu02ZeY/R7XdRaXoUvgJ\r\n\r\nHowever, if I create such an alias, the `doit help` and `doit list` commands no longer work (possibly others too):\r\n```\r\n  $ alias doit='doit --seek-file'\r\n\r\n  $ doit help\r\nERROR: Invalid parameter: \"help\". Must be a command, task, or a target.\r\nType \"doit help\" to see available commands.\r\nType \"doit list\" to see available tasks.\r\n\r\n  $ doit list\r\nERROR: Invalid parameter: \"list\". Must be a command, task, or a target.\r\nType \"doit help\" to see available commands.\r\nType \"doit list\" to see available tasks.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/173", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/173/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/173/events", "html_url": "https://github.com/pydoit/doit/issues/173", "id": 223161871, "node_id": "MDU6SXNzdWUyMjMxNjE4NzE=", "number": 173, "title": "Documentation for private/hidden tasks is ambiguous", "user": {"login": "sean-abbott", "id": 1402071, "node_id": "MDQ6VXNlcjE0MDIwNzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1402071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sean-abbott", "html_url": "https://github.com/sean-abbott", "followers_url": "https://api.github.com/users/sean-abbott/followers", "following_url": "https://api.github.com/users/sean-abbott/following{/other_user}", "gists_url": "https://api.github.com/users/sean-abbott/gists{/gist_id}", "starred_url": "https://api.github.com/users/sean-abbott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sean-abbott/subscriptions", "organizations_url": "https://api.github.com/users/sean-abbott/orgs", "repos_url": "https://api.github.com/users/sean-abbott/repos", "events_url": "https://api.github.com/users/sean-abbott/events{/privacy}", "received_events_url": "https://api.github.com/users/sean-abbott/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 190184556, "node_id": "MDU6TGFiZWwxOTAxODQ1NTY=", "url": "https://api.github.com/repos/pydoit/doit/labels/docs", "name": "docs", "color": "009800", "default": false, "description": null}, {"id": 80662478, "node_id": "MDU6TGFiZWw4MDY2MjQ3OA==", "url": "https://api.github.com/repos/pydoit/doit/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-20T18:44:18Z", "updated_at": "2017-08-04T09:36:31Z", "closed_at": "2017-08-04T09:36:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Without experimentation, it's not clear if private hidden tasks with a name that starts with underscore mean that you should do `_task_private_task()` or `task__private_task()` or something else entirely.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/171", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/171/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/171/events", "html_url": "https://github.com/pydoit/doit/issues/171", "id": 221952755, "node_id": "MDU6SXNzdWUyMjE5NTI3NTU=", "number": 171, "title": "Passing environment variables to CmdAction is broken", "user": {"login": "onnodb", "id": 1549747, "node_id": "MDQ6VXNlcjE1NDk3NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1549747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/onnodb", "html_url": "https://github.com/onnodb", "followers_url": "https://api.github.com/users/onnodb/followers", "following_url": "https://api.github.com/users/onnodb/following{/other_user}", "gists_url": "https://api.github.com/users/onnodb/gists{/gist_id}", "starred_url": "https://api.github.com/users/onnodb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/onnodb/subscriptions", "organizations_url": "https://api.github.com/users/onnodb/orgs", "repos_url": "https://api.github.com/users/onnodb/repos", "events_url": "https://api.github.com/users/onnodb/events{/privacy}", "received_events_url": "https://api.github.com/users/onnodb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662473, "node_id": "MDU6TGFiZWw4MDY2MjQ3Mw==", "url": "https://api.github.com/repos/pydoit/doit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/6", "html_url": "https://github.com/pydoit/doit/milestone/6", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/6/labels", "id": 2548371, "node_id": "MDk6TWlsZXN0b25lMjU0ODM3MQ==", "number": 6, "title": "0.31", "description": "", "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2017-05-29T12:30:27Z", "updated_at": "2018-02-25T22:06:30Z", "due_on": null, "closed_at": "2018-02-25T22:06:30Z"}, "comments": 2, "created_at": "2017-04-15T14:50:21Z", "updated_at": "2017-05-29T12:31:22Z", "closed_at": "2017-05-29T12:29:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems that [d58a73](https://github.com/pydoit/doit/commit/d58a73aaf6b01d7474a4923bba02fc02f0298547#diff-093aedc4845e9217a7220d8739946096R192) broke the ability to pass environment variables into `CmdAction`: if I now pass the `env` kwarg into the `CmdAction` constructor, this leads to a traceback:\r\n\r\n`  File \"/Users/onno/anaconda/envs/p3/lib/python3.5/site-packages/doit/action.py\", line 204, in execute\r\n    **self.pkwargs)\r\nTypeError: type object got multiple values for keyword argument 'env'`\r\n\r\nA minimal `dodo.py` to reproduce:\r\n\r\n```python\r\nfrom doit.action import CmdAction\r\n\r\ndef task_env_call():\r\n    return {'actions': [CmdAction('echo Hi', env={'ENV_VAR', 'test'})]}\r\n```\r\n\r\nI guess that a workaround might be to prepend the environment variables to be set to the shell command string.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/170", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/170/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/170/events", "html_url": "https://github.com/pydoit/doit/issues/170", "id": 220663593, "node_id": "MDU6SXNzdWUyMjA2NjM1OTM=", "number": 170, "title": "Support for group tasks containing other group tasks", "user": {"login": "leftink", "id": 4984003, "node_id": "MDQ6VXNlcjQ5ODQwMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4984003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leftink", "html_url": "https://github.com/leftink", "followers_url": "https://api.github.com/users/leftink/followers", "following_url": "https://api.github.com/users/leftink/following{/other_user}", "gists_url": "https://api.github.com/users/leftink/gists{/gist_id}", "starred_url": "https://api.github.com/users/leftink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leftink/subscriptions", "organizations_url": "https://api.github.com/users/leftink/orgs", "repos_url": "https://api.github.com/users/leftink/repos", "events_url": "https://api.github.com/users/leftink/events{/privacy}", "received_events_url": "https://api.github.com/users/leftink/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "leftink", "id": 4984003, "node_id": "MDQ6VXNlcjQ5ODQwMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4984003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leftink", "html_url": "https://github.com/leftink", "followers_url": "https://api.github.com/users/leftink/followers", "following_url": "https://api.github.com/users/leftink/following{/other_user}", "gists_url": "https://api.github.com/users/leftink/gists{/gist_id}", "starred_url": "https://api.github.com/users/leftink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leftink/subscriptions", "organizations_url": "https://api.github.com/users/leftink/orgs", "repos_url": "https://api.github.com/users/leftink/repos", "events_url": "https://api.github.com/users/leftink/events{/privacy}", "received_events_url": "https://api.github.com/users/leftink/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "leftink", "id": 4984003, "node_id": "MDQ6VXNlcjQ5ODQwMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4984003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leftink", "html_url": "https://github.com/leftink", "followers_url": "https://api.github.com/users/leftink/followers", "following_url": "https://api.github.com/users/leftink/following{/other_user}", "gists_url": "https://api.github.com/users/leftink/gists{/gist_id}", "starred_url": "https://api.github.com/users/leftink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leftink/subscriptions", "organizations_url": "https://api.github.com/users/leftink/orgs", "repos_url": "https://api.github.com/users/leftink/repos", "events_url": "https://api.github.com/users/leftink/events{/privacy}", "received_events_url": "https://api.github.com/users/leftink/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-04-10T14:31:32Z", "updated_at": "2017-08-09T23:12:12Z", "closed_at": "2017-08-09T23:12:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am currently developing a build system where I could greatly benefit from multi-layer sub-tasking/group tasks.\r\n\r\nThe build system will have several top level \"phases\" that are mutually exclusive so I would like to keep the tasks grouped in that manner.  One example of this would be something like the following:\r\n\r\nsim\r\nsim:compile\r\nsim:compile:lib1\r\nsim:compile:lib1:file1...sim:compile:lib1:fileN    (contains action)\r\nsim:compile:libN\r\nsim:compile:libN:file1...sim:compile:libN:fileN    (contains action)\r\nsim:elaborate    (contains action)\r\nsim:run    (contains action)\r\n\r\nSim is the top level group task, while sim:compile is a group task and sim:compile:lib(*) are embedded group tasks.\r\n\r\nI could not figure out how to do this yielding dicts.\r\n\r\nOne reason I would like this grouping is so that \"sim:elaborate\" could use result_dep('sim:compile') that way if any library has to be recompiled, the elaborate step is re-executed.\r\n\r\nresult_dep() would also have to be updated to walk down through all groups to get a list of all tasks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/169", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/169/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/169/events", "html_url": "https://github.com/pydoit/doit/issues/169", "id": 208744870, "node_id": "MDU6SXNzdWUyMDg3NDQ4NzA=", "number": 169, "title": "v0.30.2 installation error on Ubuntu 16.04 with Python3", "user": {"login": "abrahamvarricatt", "id": 6219389, "node_id": "MDQ6VXNlcjYyMTkzODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6219389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abrahamvarricatt", "html_url": "https://github.com/abrahamvarricatt", "followers_url": "https://api.github.com/users/abrahamvarricatt/followers", "following_url": "https://api.github.com/users/abrahamvarricatt/following{/other_user}", "gists_url": "https://api.github.com/users/abrahamvarricatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/abrahamvarricatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abrahamvarricatt/subscriptions", "organizations_url": "https://api.github.com/users/abrahamvarricatt/orgs", "repos_url": "https://api.github.com/users/abrahamvarricatt/repos", "events_url": "https://api.github.com/users/abrahamvarricatt/events{/privacy}", "received_events_url": "https://api.github.com/users/abrahamvarricatt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-19T20:45:07Z", "updated_at": "2017-02-20T11:11:45Z", "closed_at": "2017-02-20T05:50:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Steps to reproduce (using Terminal),\r\n\r\n1. Create and navigate to an empty folder\r\n2. Using `virtualenv` make a new venv using python3  (this is Python 3.5.2)\r\n3. Activate it and attempt to install doit from pip\r\n4. ... installation fails. \r\n\r\nHere is a sample session from my system,\r\n```\r\nabrahamv@Beryl:~$ cd temp/\r\nabrahamv@Beryl:~/temp$ ls\r\nabrahamv@Beryl:~/temp$ ls -alh\r\ntotal 8.0K\r\ndrwxrwxr-x   2 abrahamv abrahamv 4.0K Jun 30  2016 .\r\ndrwxr-xr-x 108 abrahamv abrahamv 4.0K Feb 19 11:11 ..\r\nabrahamv@Beryl:~/temp$ uname -a\r\nLinux Beryl 4.4.0-62-generic #83-Ubuntu SMP Wed Jan 18 14:10:15 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\nabrahamv@Beryl:~/temp$ lsb_release -a\r\n.No LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 16.04.1 LTS\r\nRelease:\t16.04\r\nCodename:\txenial\r\nabrahamv@Beryl:~/temp$ virtualenv --python=python3 .venv\r\nRunning virtualenv with interpreter /usr/bin/python3\r\nUsing base prefix '/usr'\r\nNew python executable in .venv/bin/python3\r\nAlso creating executable in .venv/bin/python\r\nInstalling setuptools, pip...done.\r\nabrahamv@Beryl:~/temp$ source .venv/bin/activate\r\n(.venv)abrahamv@Beryl:~/temp$ python --version\r\nPython 3.5.2\r\n(.venv)abrahamv@Beryl:~/temp$ pip install doit\r\nYou are using pip version 6.0.8, however version 9.0.1 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\nCollecting doit\r\n  Using cached doit-0.30.2.tar.gz\r\n    error in doit setup command: Invalid environment marker: sys.platform == \"darwin\"\r\n    Complete output from command python setup.py egg_info:\r\n    error in doit setup command: Invalid environment marker: sys.platform == \"darwin\"\r\n    \r\n    ----------------------------------------\r\n    Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-build-ortc5xmn/doit\r\n(.venv)abrahamv@Beryl:~/temp$ \r\n```\r\n\r\nManually installing doit version 0.30.0 seems to work however,\r\n\r\n```\r\n(.venv)abrahamv@Beryl:~/temp$ pip install doit==0.30.0\r\nYou are using pip version 6.0.8, however version 9.0.1 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\nCollecting doit==0.30.0\r\n  Using cached doit-0.30.0.tar.gz\r\nCollecting cloudpickle (from doit==0.30.0)\r\n  Using cached cloudpickle-0.2.2-py2.py3-none-any.whl\r\nCollecting pyinotify (from doit==0.30.0)\r\n  Using cached pyinotify-0.9.6.tar.gz\r\nInstalling collected packages: pyinotify, cloudpickle, doit\r\n  Running setup.py install for pyinotify\r\n\r\n  Running setup.py install for doit\r\n    Installing doit script to /home/abrahamv/temp/.venv/bin\r\nSuccessfully installed cloudpickle-0.2.2 doit-0.30.0 pyinotify-0.9.6\r\n(.venv)abrahamv@Beryl:~/temp$ \r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/168", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/168/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/168/events", "html_url": "https://github.com/pydoit/doit/issues/168", "id": 208599527, "node_id": "MDU6SXNzdWUyMDg1OTk1Mjc=", "number": 168, "title": "Python 3.4 semi-(un)supported", "user": {"login": "Gumnos", "id": 1056674, "node_id": "MDQ6VXNlcjEwNTY2NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1056674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gumnos", "html_url": "https://github.com/Gumnos", "followers_url": "https://api.github.com/users/Gumnos/followers", "following_url": "https://api.github.com/users/Gumnos/following{/other_user}", "gists_url": "https://api.github.com/users/Gumnos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gumnos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gumnos/subscriptions", "organizations_url": "https://api.github.com/users/Gumnos/orgs", "repos_url": "https://api.github.com/users/Gumnos/repos", "events_url": "https://api.github.com/users/Gumnos/events{/privacy}", "received_events_url": "https://api.github.com/users/Gumnos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-18T01:27:46Z", "updated_at": "2017-02-20T01:28:39Z", "closed_at": "2017-02-20T01:28:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Attempting to install in a Py3.4 environment, I get\r\n\r\n```\r\nCollecting doit>=0.28.0; python_version >= \"3.4\" (from Nikola)\r\n  Using cached doit-0.30.2.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    error in doit setup command: Invalid environment marker: python_version <= \"3.3\"\r\n```\r\n\r\nLooking at `setup.py`, the `extras_require` forces the `python_version` to be <= 3.3 but further up in the file (in the **Classifiers** section) it suggests that versions <=3.5 should be supported.\r\n\r\nThis may be a simple update to that `python_version` line to set it to 3.6; or it might be that something changed that breaks things.\r\n\r\nTo replicate, it came from an attempt to install Nikola:\r\n\r\n    $ mkvirtualenv -p python3 nikola\r\n    (nikola)$ python --version\r\n    Python 3.4.2\r\n    (nikola)$ pip install --upgrade pip setuptools # local is outdated\r\n    (nikola)$ pip install Nikola\r\n    \u2026\r\n    Collecting doit>=0.28.0; python_version >= \"3.4\" (from Nikola)\r\n      Using cached doit-0.30.2.tar.gz\r\n        Complete output from command python setup.py egg_info:\r\n        error in doit setup command: Invalid environment marker: python_version <= \"3.3\"\r\n\r\nThis is under Debian Stable on amd64, in case that makes a difference.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/165", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/165/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/165/events", "html_url": "https://github.com/pydoit/doit/issues/165", "id": 204213251, "node_id": "MDU6SXNzdWUyMDQyMTMyNTE=", "number": 165, "title": "How to use request module in AWS Lambda function", "user": {"login": "Kishorpant", "id": 18439233, "node_id": "MDQ6VXNlcjE4NDM5MjMz", "avatar_url": "https://avatars1.githubusercontent.com/u/18439233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kishorpant", "html_url": "https://github.com/Kishorpant", "followers_url": "https://api.github.com/users/Kishorpant/followers", "following_url": "https://api.github.com/users/Kishorpant/following{/other_user}", "gists_url": "https://api.github.com/users/Kishorpant/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kishorpant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kishorpant/subscriptions", "organizations_url": "https://api.github.com/users/Kishorpant/orgs", "repos_url": "https://api.github.com/users/Kishorpant/repos", "events_url": "https://api.github.com/users/Kishorpant/events{/privacy}", "received_events_url": "https://api.github.com/users/Kishorpant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-01-31T06:15:03Z", "updated_at": "2017-01-31T16:28:14Z", "closed_at": "2017-01-31T16:27:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am beginner in AWS lambda. please help me to solve this issue my code is running perfactly on my local system but not in aws lambda. my code is mentioned below,\r\n\r\nerror throwing **def get_wheather_details(intent,session):**\r\n`\"\"\"\r\nThis sample demonstrates a simple skill built with the Amazon Alexa Skills Kit.\r\nThe Intent Schema, Custom Slots, and Sample Utterances for this skill, as well\r\nas testing instructions are located at http://amzn.to/1LzFrj6\r\n\r\nFor additional samples, visit the Alexa Skills Kit Getting Started guide at\r\nhttp://amzn.to/1LGWsLG\r\n\"\"\"\r\n\r\nfrom __future__ import print_function\r\n\r\n\r\n\r\n# --------------- Helpers that build all of the responses ----------------------\r\n\r\ndef build_speechlet_response(title, output, reprompt_text, should_end_session):\r\n    return {\r\n        'outputSpeech': {\r\n            'type': 'PlainText',\r\n            'text': output\r\n        },\r\n        'card': {\r\n            'type': 'Simple',\r\n            'title': \"SessionSpeechlet - \" + title,\r\n            'content': \"SessionSpeechlet - \" + output\r\n        },\r\n        'reprompt': {\r\n            'outputSpeech': {\r\n                'type': 'PlainText',\r\n                'text': reprompt_text\r\n            }\r\n        },\r\n        'shouldEndSession': should_end_session\r\n    }\r\n\r\n\r\ndef build_response(session_attributes, speechlet_response):\r\n    return {\r\n        'version': '1.0',\r\n        'sessionAttributes': session_attributes,\r\n        'response': speechlet_response\r\n    }\r\n\r\n\r\n# --------------- Functions that control the skill's behavior ------------------\r\n\r\ndef get_welcome_response():\r\n    \"\"\" If we wanted to initialize the session to have some attributes we could\r\n    add those here\r\n    \"\"\"\r\n\r\n    session_attributes = {}\r\n    card_title = \"Welcome\"\r\n    speech_output = \"Welcome to the Meera Skills . \" \\\r\n                    \"Please tell me your service whichever you want, \" \r\n    # If the user either does not reply to the welcome message or says something\r\n    # that is not understood, they will be prompted again with this text.\r\n    reprompt_text = \"Please tell me your favorite color by saying, \" \\\r\n                    \"my favorite color is red.\"\r\n    should_end_session = False\r\n    return build_response(session_attributes, build_speechlet_response(\r\n        card_title, speech_output, reprompt_text, should_end_session))\r\n\r\n\r\ndef handle_session_end_request():\r\n    card_title = \"Session Ended\"\r\n    speech_output = \"Thank you for trying the Meera Skills Kit sample. \" \\\r\n                    \"Have a nice day! \"\r\n    # Setting this to true ends the session and exits the skill.\r\n    should_end_session = True\r\n    return build_response({}, build_speechlet_response(\r\n        card_title, speech_output, None, should_end_session))\r\n\r\n\r\ndef create_favorite_color_attributes(favorite_color):\r\n    return {\"favoriteColor\": favorite_color}\r\n\r\n\r\ndef set_color_in_session(intent, session):\r\n    \"\"\" Sets the color in the session and prepares the speech to reply to the\r\n    user.\r\n    \"\"\"\r\n\r\n    card_title = intent['name']\r\n    session_attributes = {}\r\n    should_end_session = False\r\n\r\n    if 'Color' in intent['slots']:\r\n        favorite_color = intent['slots']['Color']['value']\r\n        session_attributes = create_favorite_color_attributes(favorite_color)\r\n        speech_output = \"I now know your favorite color is \" + \\\r\n                        favorite_color + \\\r\n                        \". You can ask me your favorite color by saying, \" \\\r\n                        \"what's my favorite color?\"\r\n        reprompt_text = \"You can ask me your favorite color by saying, \" \\\r\n                        \"what's my favorite color?\"\r\n    else:\r\n        speech_output = \"I'm not sure what your favorite color is. \" \\\r\n                        \"Please try again.\"\r\n        reprompt_text = \"I'm not sure what your favorite color is. \" \\\r\n                        \"You can tell me your favorite color by saying, \" \\\r\n                        \"my favorite color is red.\"\r\n    return build_response(session_attributes, build_speechlet_response(\r\n        card_title, speech_output, reprompt_text, should_end_session))\r\n\r\n\r\ndef get_color_from_session(intent, session):\r\n    session_attributes = {}\r\n    reprompt_text = None\r\n\r\n    if session.get('attributes', {}) and \"favoriteColor\" in session.get('attributes', {}):\r\n        favorite_color = session['attributes']['favoriteColor']\r\n        speech_output = \"Your favorite color is \" + favorite_color + \\\r\n                        \". Goodbye.\"\r\n        should_end_session = True\r\n    else:\r\n        speech_output = \"I'm not sure what your favorite color is. \" \\\r\n                        \"You can say, my favorite color is red.\"\r\n        should_end_session = False\r\n\r\n    # Setting reprompt_text to None signifies that we do not want to reprompt\r\n    # the user. If the user does not respond or says something that is not\r\n    # understood, the session will end.\r\n    return build_response(session_attributes, build_speechlet_response(\r\n        intent['name'], speech_output, reprompt_text, should_end_session))\r\n\r\ndef mylocation(intent,session):\r\n    session_attributes={}\r\n    speech_output=\"You are in Gurgaon Right Now if you want to check more then try again\"\r\n    reprompt_text=None\r\n    should_end_session=False\r\n\r\n    return build_response(session_attributes, build_speechlet_response(\r\n        intent['name'], speech_output, reprompt_text, should_end_session))\r\n\r\ndef myname(intent, session):\r\n    session_attributes = {}\r\n    intent_value = intent['slots']['Sign']['value']\r\n    speech_output = \"My Name Is Kishor Pant\"\r\n    reprompt_text = None  # if you want to take continue input from user\r\n    should_end_session = False\r\n\r\n    return build_response(session_attributes, build_speechlet_response(\r\n        intent['name'], speech_output, reprompt_text, should_end_session))\r\n        \r\n        \r\n#function requesting to the url for the current wheather according to the name of the city\r\ndef get_wheather_details(intent,session):\r\n\r\n\r\n    #url = \"http://api.openweathermap.org/data/2.5/weather?q=gurgaon,india&APPID=ae7ed6520615d2f28d27dc3af7dc0bb0\"\r\n    #value = get(url).json()\r\n\r\n    #max_temp = value['main']['temp_max']\r\n    #humidity = value['main']['humidity']\r\n    #pressure = value['main']['pressure']\r\n    session_attributes = {}\r\n    speech_output = \"Thanks for requesting for wheather todays maximum tempreture is\"\r\n    reprompt_text = None  # if you want to take continue input from user\r\n    should_end_session = False\r\n\r\n    return build_response(session_attributes, build_speechlet_response(\r\n        intent['name'], speech_output, reprompt_text, should_end_session))\r\n   \r\n\r\n# --------------- Events ------------------\r\n\r\ndef on_session_started(session_started_request, session):\r\n    \"\"\" Called when the session starts \"\"\"\r\n\r\n    print(\"on_session_started requestId=\" + session_started_request['requestId']\r\n          + \", sessionId=\" + session['sessionId'])\r\n\r\n\r\ndef on_launch(launch_request, session):\r\n    \"\"\" Called when the user launches the skill without specifying what they\r\n    want\r\n    \"\"\"\r\n\r\n    print(\"on_launch requestId=\" + launch_request['requestId'] +\r\n          \", sessionId=\" + session['sessionId'])\r\n    # Dispatch to your skill's launch\r\n    return get_welcome_response()\r\n\r\n\r\ndef on_intent(intent_request, session):\r\n    \"\"\" Called when the user specifies an intent for this skill \"\"\"\r\n\r\n    print(\"on_intent requestId=\" + intent_request['requestId'] +\r\n          \", sessionId=\" + session['sessionId'])\r\n\r\n    intent = intent_request['intent']\r\n    intent_name = intent_request['intent']['name']\r\n\r\n    # Dispatch to your skill's intent handlers\r\n    if intent_name == \"MyColorIsIntent\":\r\n        return set_color_in_session(intent, session)\r\n    elif intent_name == \"WhatsMyColorIntent\":\r\n        return get_color_from_session(intent, session)\r\n    elif intent_name == \"AMAZON.HelpIntent\":\r\n        return get_welcome_response()\r\n    elif intent_name==\"AMAZON.SearchAction<object@WeatherForecast>\":\r\n        return get_wheather_details(intent,session)\r\n    elif intent_name == \"AMAZON.CancelIntent\" or intent_name == \"AMAZON.StopIntent\":\r\n        return handle_session_end_request()\r\n    elif intent_name == \"GetHoroscope\":\r\n        return myname(intent, session)\r\n    elif intent_name==\"CurrentLocation\":\r\n        return mylocation(intent,session)\r\n    else:\r\n        raise ValueError(\"Invalid intent\")\r\n\r\n\r\ndef on_session_ended(session_ended_request, session):\r\n    \"\"\" Called when the user ends the session.\r\n\r\n    Is not called when the skill returns should_end_session=true\r\n    \"\"\"\r\n    print(\"on_session_ended requestId=\" + session_ended_request['requestId'] +\r\n          \", sessionId=\" + session['sessionId'])\r\n    # add cleanup logic here\r\n\r\n\r\n# --------------- Main handler ------------------\r\n\r\ndef lambda_handler(event, context):\r\n    \"\"\" Route the incoming request based on type (LaunchRequest, IntentRequest,\r\n    etc.) The JSON body of the request is provided in the event parameter.\r\n    \"\"\"\r\n    print(\"event.session.application.applicationId=\" +\r\n          event['session']['application']['applicationId'])\r\n\r\n    \"\"\"\r\n    Uncomment this if statement and populate with your skill's application ID to\r\n    prevent someone else from configuring a skill that sends requests to this\r\n    function.\r\n    \"\"\"\r\n    # if (event['session']['application']['applicationId'] !=\r\n    #         \"amzn1.echo-sdk-ams.app.[unique-value-here]\"):\r\n    #     raise ValueError(\"Invalid Application ID\")\r\n\r\n    if event['session']['new']:\r\n        on_session_started({'requestId': event['request']['requestId']},\r\n                           event['session'])\r\n\r\n    if event['request']['type'] == \"LaunchRequest\":\r\n        return on_launch(event['request'], event['session'])\r\n    elif event['request']['type'] == \"IntentRequest\":\r\n        return on_intent(event['request'], event['session'])\r\n    elif event['request']['type'] == \"SessionEndedRequest\":\r\n        return on_session_ended(event['request'], event['session'])\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/164", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/164/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/164/events", "html_url": "https://github.com/pydoit/doit/issues/164", "id": 202169283, "node_id": "MDU6SXNzdWUyMDIxNjkyODM=", "number": 164, "title": "'get_var' fails while the multiprocess execution if any task uses delayed creation.", "user": {"login": "FrankStain", "id": 536719, "node_id": "MDQ6VXNlcjUzNjcxOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/536719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FrankStain", "html_url": "https://github.com/FrankStain", "followers_url": "https://api.github.com/users/FrankStain/followers", "following_url": "https://api.github.com/users/FrankStain/following{/other_user}", "gists_url": "https://api.github.com/users/FrankStain/gists{/gist_id}", "starred_url": "https://api.github.com/users/FrankStain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FrankStain/subscriptions", "organizations_url": "https://api.github.com/users/FrankStain/orgs", "repos_url": "https://api.github.com/users/FrankStain/repos", "events_url": "https://api.github.com/users/FrankStain/events{/privacy}", "received_events_url": "https://api.github.com/users/FrankStain/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 192268221, "node_id": "MDU6TGFiZWwxOTIyNjgyMjE=", "url": "https://api.github.com/repos/pydoit/doit/labels/Windows", "name": "Windows", "color": "222222", "default": false, "description": null}, {"id": 80662473, "node_id": "MDU6TGFiZWw4MDY2MjQ3Mw==", "url": "https://api.github.com/repos/pydoit/doit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-01-20T15:34:31Z", "updated_at": "2018-03-18T10:55:25Z", "closed_at": "2018-03-18T10:55:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@schettino72 , hey! :)\r\n\r\nSo, i found strange behaviour while trying to implement some stuff.\r\n\r\n```.py\r\n#! /usr/bin/doit -f\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom doit import get_var\r\nfrom doit import create_after\r\n\r\nget_var( 'A', None )\r\n\r\n\r\ndef task_foo() :\r\n  return {\r\n    'actions': [ 'echo foo' ],\r\n    'task_dep': [ 'bar' ],\r\n  }\r\n  \r\n@create_after( executed = 'baz' )\r\ndef task_bar() :\r\n  for i in range( 10 ) :\r\n    yield {\r\n      'name': 'bar_{}'.format( i ),\r\n      'actions': [ 'echo bar_{}'.format( i ) ]\r\n    }\r\n    \r\ndef task_baz() :\r\n  for i in range( 10 ) :\r\n    yield {\r\n      'name': 'baz_{}'.format( i ),\r\n      'actions': [ 'echo baz_{}'.format( i ) ]\r\n    }\r\n```\r\n\r\nThis code works fine while being executed in single-process mode. But it fails in multi process mode.\r\n\r\n```\r\n/root>GetVar.py -n 2\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/py3.4/lib/multiprocessing/spawn.py\", line 106, in spawn_main\r\n    exitcode = _main(fd)\r\n  File \"/py3.4/lib/multiprocessing/spawn.py\", line 116, in _main\r\n    self = pickle.load(from_parent)\r\n  File \"/root/GetVar.py\", line 7, in <module>\r\n    get_var( 'A', None )\r\n  File \"/py3.4/lib/site-packages/doit/doit_cmd.py\", line 35, in get_var\r\n    return _CMDLINE_VARS.get(name, default)\r\nAttributeError: 'NoneType' object has no attribute 'get'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/py3.4/lib/multiprocessing/spawn.py\", line 106, in spawn_main\r\n    exitcode = _main(fd)\r\n  File \"/py3.4/lib/multiprocessing/spawn.py\", line 116, in _main\r\n    self = pickle.load(from_parent)\r\n  File \"/root/GetVar.py\", line 7, in <module>\r\n    get_var( 'A', None )\r\n  File \"/py3.4/lib/site-packages/doit/doit_cmd.py\", line 35, in get_var\r\n    return _CMDLINE_VARS.get(name, default)\r\nAttributeError: 'NoneType' object has no attribute 'get'\r\n```\r\n\r\nBut if i remove the `create_after` decorator, all became works fine even in multi process mode. So, i found it ambiguous. I had seen no notifications in docs about such behaviour.\r\n\r\nCan you confirm this is the doit error or not?\r\nCurrently i use the last (0.30.0) version of doit.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/163", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/163/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/163/events", "html_url": "https://github.com/pydoit/doit/issues/163", "id": 201793003, "node_id": "MDU6SXNzdWUyMDE3OTMwMDM=", "number": 163, "title": "doit -f failed to work", "user": {"login": "rudaoshi", "id": 866525, "node_id": "MDQ6VXNlcjg2NjUyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/866525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rudaoshi", "html_url": "https://github.com/rudaoshi", "followers_url": "https://api.github.com/users/rudaoshi/followers", "following_url": "https://api.github.com/users/rudaoshi/following{/other_user}", "gists_url": "https://api.github.com/users/rudaoshi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rudaoshi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rudaoshi/subscriptions", "organizations_url": "https://api.github.com/users/rudaoshi/orgs", "repos_url": "https://api.github.com/users/rudaoshi/repos", "events_url": "https://api.github.com/users/rudaoshi/events{/privacy}", "received_events_url": "https://api.github.com/users/rudaoshi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662476, "node_id": "MDU6TGFiZWw4MDY2MjQ3Ng==", "url": "https://api.github.com/repos/pydoit/doit/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-19T08:27:39Z", "updated_at": "2017-02-16T10:51:15Z", "closed_at": "2017-02-16T10:51:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I use doit -f to run tasks defined in a python script, nothing happened.\r\n\r\nHowever, if i link the script to current directory with name dodo.py and run doit, the task is running. \r\n\r\nThe problem occurs with env:  python 2.7 + doit==0.29.0 .", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/162", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/162/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/162/events", "html_url": "https://github.com/pydoit/doit/issues/162", "id": 201534099, "node_id": "MDU6SXNzdWUyMDE1MzQwOTk=", "number": 162, "title": "max parallel execution for a task (or task-group)", "user": {"login": "karelv", "id": 787006, "node_id": "MDQ6VXNlcjc4NzAwNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/787006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karelv", "html_url": "https://github.com/karelv", "followers_url": "https://api.github.com/users/karelv/followers", "following_url": "https://api.github.com/users/karelv/following{/other_user}", "gists_url": "https://api.github.com/users/karelv/gists{/gist_id}", "starred_url": "https://api.github.com/users/karelv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karelv/subscriptions", "organizations_url": "https://api.github.com/users/karelv/orgs", "repos_url": "https://api.github.com/users/karelv/repos", "events_url": "https://api.github.com/users/karelv/events{/privacy}", "received_events_url": "https://api.github.com/users/karelv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-18T10:30:47Z", "updated_at": "2017-01-18T16:09:55Z", "closed_at": "2017-01-18T16:09:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "When one has a several task with low cpu load, and several cpu intensive tasks, it makes sense to have 1 process for the cpu low load task (ex. download a file from internet), while 3 other processes are used for computing heavy stuf.\r\n\r\nIs this a feature that is planned? Is it hard to add?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/161", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/161/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/161/events", "html_url": "https://github.com/pydoit/doit/issues/161", "id": 197834038, "node_id": "MDU6SXNzdWUxOTc4MzQwMzg=", "number": 161, "title": "Crashes on Python 3.3 due to missing pathlib", "user": {"login": "Kwpolska", "id": 327323, "node_id": "MDQ6VXNlcjMyNzMyMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/327323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kwpolska", "html_url": "https://github.com/Kwpolska", "followers_url": "https://api.github.com/users/Kwpolska/followers", "following_url": "https://api.github.com/users/Kwpolska/following{/other_user}", "gists_url": "https://api.github.com/users/Kwpolska/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kwpolska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kwpolska/subscriptions", "organizations_url": "https://api.github.com/users/Kwpolska/orgs", "repos_url": "https://api.github.com/users/Kwpolska/repos", "events_url": "https://api.github.com/users/Kwpolska/events{/privacy}", "received_events_url": "https://api.github.com/users/Kwpolska/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2016-12-28T10:51:14Z", "updated_at": "2017-02-16T20:03:12Z", "closed_at": "2017-02-16T18:59:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried switching Nikola\u2019s doit requirement to `doit==0.30.0` for Python 3, but [it fails](https://travis-ci.org/getnikola/nikola/jobs/187164264) on Python 3.3 because `pathlib` is needed. This happens because pip does not notice the extra dependency. The correct way to do this is with [environment markers](https://www.python.org/dev/peps/pep-0496/). We use them in Nikola for doit (in requirements.txt):\r\n\r\n```\r\ndoit>=0.28.0,<=0.29.0 ; python_version <= '3.3'\r\ndoit>=0.28.0 ; python_version >= '3.4'\r\n```\r\n\r\nThat can also be used for platform checks (pyinotify/macfsevents).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/160", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/160/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/160/events", "html_url": "https://github.com/pydoit/doit/issues/160", "id": 196664515, "node_id": "MDU6SXNzdWUxOTY2NjQ1MTU=", "number": 160, "title": "Support new file system path protocol from Python 3.6 (PEP 519)", "user": {"login": "Hinidu", "id": 911252, "node_id": "MDQ6VXNlcjkxMTI1Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/911252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hinidu", "html_url": "https://github.com/Hinidu", "followers_url": "https://api.github.com/users/Hinidu/followers", "following_url": "https://api.github.com/users/Hinidu/following{/other_user}", "gists_url": "https://api.github.com/users/Hinidu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hinidu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hinidu/subscriptions", "organizations_url": "https://api.github.com/users/Hinidu/orgs", "repos_url": "https://api.github.com/users/Hinidu/repos", "events_url": "https://api.github.com/users/Hinidu/events{/privacy}", "received_events_url": "https://api.github.com/users/Hinidu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 80662475, "node_id": "MDU6TGFiZWw4MDY2MjQ3NQ==", "url": "https://api.github.com/repos/pydoit/doit/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-20T12:47:40Z", "updated_at": "2019-05-13T10:55:46Z", "closed_at": "2019-05-12T09:06:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello, @schettino72!\r\nUsing [PEP-519](https://www.python.org/dev/peps/pep-0519/) the support for `pathlib` can be generalized and made more idiomatic. I don't need it personally right now but it seems that the overall python ecosystem will use this protocol eventually.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydoit/doit/issues/159", "repository_url": "https://api.github.com/repos/pydoit/doit", "labels_url": "https://api.github.com/repos/pydoit/doit/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/pydoit/doit/issues/159/comments", "events_url": "https://api.github.com/repos/pydoit/doit/issues/159/events", "html_url": "https://github.com/pydoit/doit/issues/159", "id": 194408469, "node_id": "MDU6SXNzdWUxOTQ0MDg0Njk=", "number": 159, "title": "on absent status", "user": {"login": "SergeVL", "id": 4905986, "node_id": "MDQ6VXNlcjQ5MDU5ODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4905986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergeVL", "html_url": "https://github.com/SergeVL", "followers_url": "https://api.github.com/users/SergeVL/followers", "following_url": "https://api.github.com/users/SergeVL/following{/other_user}", "gists_url": "https://api.github.com/users/SergeVL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergeVL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergeVL/subscriptions", "organizations_url": "https://api.github.com/users/SergeVL/orgs", "repos_url": "https://api.github.com/users/SergeVL/repos", "events_url": "https://api.github.com/users/SergeVL/events{/privacy}", "received_events_url": "https://api.github.com/users/SergeVL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydoit/doit/milestones/5", "html_url": "https://github.com/pydoit/doit/milestone/5", "labels_url": "https://api.github.com/repos/pydoit/doit/milestones/5/labels", "id": 2328079, "node_id": "MDk6TWlsZXN0b25lMjMyODA3OQ==", "number": 5, "title": "0.30.1", "description": null, "creator": {"login": "schettino72", "id": 138474, "node_id": "MDQ6VXNlcjEzODQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/138474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schettino72", "html_url": "https://github.com/schettino72", "followers_url": "https://api.github.com/users/schettino72/followers", "following_url": "https://api.github.com/users/schettino72/following{/other_user}", "gists_url": "https://api.github.com/users/schettino72/gists{/gist_id}", "starred_url": "https://api.github.com/users/schettino72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schettino72/subscriptions", "organizations_url": "https://api.github.com/users/schettino72/orgs", "repos_url": "https://api.github.com/users/schettino72/repos", "events_url": "https://api.github.com/users/schettino72/events{/privacy}", "received_events_url": "https://api.github.com/users/schettino72/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 1, "state": "closed", "created_at": "2017-02-16T17:34:56Z", "updated_at": "2017-02-16T19:13:12Z", "due_on": null, "closed_at": "2017-02-16T19:13:12Z"}, "comments": 1, "created_at": "2016-12-08T18:24:59Z", "updated_at": "2017-02-16T17:34:56Z", "closed_at": "2017-02-16T17:34:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "calling **doit list --all --status** and there are task which never  running yet\r\n\r\nFile \"/usr/local/lib/python2.7/dist-packages/doit/cmd_list.py\", line 83, in _print_task\r\n    line_data['status'] = self.STATUS_MAP[task_status]\r\nKeyError: 'error'\r\n\r\nmust be:\r\nline_data['status'] = self.STATUS_MAP.get(task_status)", "performed_via_github_app": null, "score": 1.0}]}