{"total_count": 18, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pydanny/cached-property/issues/109", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/109/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/109/events", "html_url": "https://github.com/pydanny/cached-property/issues/109", "id": 350768300, "node_id": "MDU6SXNzdWUzNTA3NjgzMDA=", "number": 109, "title": "cached_property doesn't cache", "user": {"login": "russian-master", "id": 1274645, "node_id": "MDQ6VXNlcjEyNzQ2NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1274645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/russian-master", "html_url": "https://github.com/russian-master", "followers_url": "https://api.github.com/users/russian-master/followers", "following_url": "https://api.github.com/users/russian-master/following{/other_user}", "gists_url": "https://api.github.com/users/russian-master/gists{/gist_id}", "starred_url": "https://api.github.com/users/russian-master/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/russian-master/subscriptions", "organizations_url": "https://api.github.com/users/russian-master/orgs", "repos_url": "https://api.github.com/users/russian-master/repos", "events_url": "https://api.github.com/users/russian-master/events{/privacy}", "received_events_url": "https://api.github.com/users/russian-master/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-15T10:57:52Z", "updated_at": "2018-09-30T16:54:32Z", "closed_at": "2018-09-30T16:54:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't understand why it's not working\r\n\r\n```python\r\nfrom cached_property import cached_property_with_ttl, cached_property\r\n\r\nclass Item(models.Model):\r\n\r\n@cached_property\r\ndef test(self):\r\n     return timezone.now()\r\n\r\n{{ item.test }}\r\n```\r\n\r\nEvery time I see different time.\r\n\r\ncached_property 1.4.3\r\ndjango 1.11.15\r\npython 2.7.12\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/93", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/93/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/93/events", "html_url": "https://github.com/pydanny/cached-property/issues/93", "id": 311172650, "node_id": "MDU6SXNzdWUzMTExNzI2NTA=", "number": 93, "title": "Some test failing on python2 (Debian)", "user": {"login": "mbehrle", "id": 304732, "node_id": "MDQ6VXNlcjMwNDczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/304732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbehrle", "html_url": "https://github.com/mbehrle", "followers_url": "https://api.github.com/users/mbehrle/followers", "following_url": "https://api.github.com/users/mbehrle/following{/other_user}", "gists_url": "https://api.github.com/users/mbehrle/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbehrle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbehrle/subscriptions", "organizations_url": "https://api.github.com/users/mbehrle/orgs", "repos_url": "https://api.github.com/users/mbehrle/repos", "events_url": "https://api.github.com/users/mbehrle/events{/privacy}", "received_events_url": "https://api.github.com/users/mbehrle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-04T10:28:33Z", "updated_at": "2018-04-08T22:55:54Z", "closed_at": "2018-04-08T22:55:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I had to disable the tests on python 2.7 (building foor Debian) because of syntax errors in some tests. Could those tests be made aware of used Python version?\r\n\r\nThanks,\r\nMathias\r\n\r\nThe relevant bits:\r\n\r\n   dh_auto_test -O--buildsystem=pybuild\r\nI: pybuild base:217: cd /<<PKGBUILDDIR>>/.pybuild/cpython2_2.7_cached-property/build; python2.7 -m unittest discover -v \r\ntests.test_coroutine_cached_property (unittest.loader.ModuleImportFailure) ... ERROR\r\ntests.test_async_cached_property (unittest.loader.ModuleImportFailure) ... ERROR\r\ntest_cached_property (tests.test_cached_property.TestCachedProperty) ... ok\r\ntest_none_cached_property (tests.test_cached_property.TestCachedProperty) ... ok\r\ntest_reset_cached_property (tests.test_cached_property.TestCachedProperty) ... ok\r\ntest_set_cached_property (tests.test_cached_property.TestCachedProperty) ... ok\r\ntest_threads (tests.test_cached_property.TestCachedProperty) ... ok\r\ntest_cached_property (tests.test_cached_property.TestCachedPropertyWithTTL) ... ok\r\ntest_none_cached_property (tests.test_cached_property.TestCachedPropertyWithTTL) ... ok\r\ntest_reset_cached_property (tests.test_cached_property.TestCachedPropertyWithTTL) ... ok\r\ntest_set_cached_property (tests.test_cached_property.TestCachedPropertyWithTTL) ... ok\r\ntest_threads (tests.test_cached_property.TestCachedPropertyWithTTL) ... ok\r\ntest_threads_ttl_expiry (tests.test_cached_property.TestCachedPropertyWithTTL) ... ok\r\ntest_ttl_expiry (tests.test_cached_property.TestCachedPropertyWithTTL) ... ok\r\ntest_cached_property (tests.test_cached_property.TestThreadedCachedProperty) ... ok\r\ntest_none_cached_property (tests.test_cached_property.TestThreadedCachedProperty) ... ok\r\ntest_reset_cached_property (tests.test_cached_property.TestThreadedCachedProperty) ... ok\r\ntest_set_cached_property (tests.test_cached_property.TestThreadedCachedProperty) ... ok\r\ntest_threads (tests.test_cached_property.TestThreadedCachedProperty) ... ok\r\ntest_cached_property (tests.test_cached_property.TestThreadedCachedPropertyWithTTL) ... ok\r\ntest_none_cached_property (tests.test_cached_property.TestThreadedCachedPropertyWithTTL) ... ok\r\ntest_reset_cached_property (tests.test_cached_property.TestThreadedCachedPropertyWithTTL) ... ok\r\ntest_set_cached_property (tests.test_cached_property.TestThreadedCachedPropertyWithTTL) ... ok\r\ntest_threads (tests.test_cached_property.TestThreadedCachedPropertyWithTTL) ... ok\r\ntest_threads_ttl_expiry (tests.test_cached_property.TestThreadedCachedPropertyWithTTL) ... ok\r\ntest_ttl_expiry (tests.test_cached_property.TestThreadedCachedPropertyWithTTL) ... ok\r\n\r\n======================================================================\r\nERROR: tests.test_coroutine_cached_property (unittest.loader.ModuleImportFailure)\r\n----------------------------------------------------------------------\r\nImportError: Failed to import test module: tests.test_coroutine_cached_property\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python2.7/unittest/loader.py\", line 254, in _find_tests\r\n    module = self._get_module_from_name(name)\r\n  File \"/usr/lib/python2.7/unittest/loader.py\", line 232, in _get_module_from_name\r\n    __import__(name)\r\n  File \"tests/test_coroutine_cached_property.py\", line 60\r\n    value = yield from check.add_control()\r\n                     ^\r\nSyntaxError: invalid syntax\r\n\r\n\r\n======================================================================\r\nERROR: tests.test_async_cached_property (unittest.loader.ModuleImportFailure)\r\n----------------------------------------------------------------------\r\nImportError: Failed to import test module: tests.test_async_cached_property\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python2.7/unittest/loader.py\", line 254, in _find_tests\r\n    module = self._get_module_from_name(name)\r\n  File \"/usr/lib/python2.7/unittest/loader.py\", line 232, in _get_module_from_name\r\n    __import__(name)\r\n  File \"tests/test_async_cached_property.py\", line 34\r\n    async def add_control(self):\r\n            ^\r\nSyntaxError: invalid syntax", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/85", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/85/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/85/events", "html_url": "https://github.com/pydanny/cached-property/issues/85", "id": 300016907, "node_id": "MDU6SXNzdWUzMDAwMTY5MDc=", "number": 85, "title": "Misbehavior with async def methods", "user": {"login": "vbraun", "id": 888729, "node_id": "MDQ6VXNlcjg4ODcyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/888729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vbraun", "html_url": "https://github.com/vbraun", "followers_url": "https://api.github.com/users/vbraun/followers", "following_url": "https://api.github.com/users/vbraun/following{/other_user}", "gists_url": "https://api.github.com/users/vbraun/gists{/gist_id}", "starred_url": "https://api.github.com/users/vbraun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vbraun/subscriptions", "organizations_url": "https://api.github.com/users/vbraun/orgs", "repos_url": "https://api.github.com/users/vbraun/repos", "events_url": "https://api.github.com/users/vbraun/events{/privacy}", "received_events_url": "https://api.github.com/users/vbraun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-25T11:03:25Z", "updated_at": "2018-02-25T23:20:11Z", "closed_at": "2018-02-25T22:56:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When decorating an async method the coroutine is cached instead of the value returned by the coroutine. This is certainly not the programmer's intent, and moreover pointless since coroutines can only be awaited once:\r\n~~~~\r\n$ ipython3\r\nPython 3.6.4 (default, Feb  1 2018, 11:06:09) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: import asyncio\r\n   ...: from cached_property import cached_property\r\n   ...:     \r\n   ...: class Foo(object):\r\n   ...: \r\n   ...:     @cached_property\r\n   ...:     async def bar(self):\r\n   ...:         return 'value'\r\n   ...: \r\n   ...:     async def baz(self):\r\n   ...:         await self.bar\r\n   ...:         await self.bar\r\n   ...: \r\n   ...: \r\n   ...: import asyncio\r\n   ...: asyncio.get_event_loop().run_until_complete(Foo().baz())          \r\n   ...: \r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-1-a740a5aac079> in <module>()\r\n     14 \r\n     15 import asyncio\r\n---> 16 asyncio.get_event_loop().run_until_complete(Foo().baz())\r\n\r\n/usr/lib64/python3.6/asyncio/base_events.py in run_until_complete(self, future)\r\n    465             raise RuntimeError('Event loop stopped before Future completed.')\r\n    466 \r\n--> 467         return future.result()\r\n    468 \r\n    469     def stop(self):\r\n\r\n<ipython-input-1-a740a5aac079> in baz(self)\r\n     10     async def baz(self):\r\n     11         await self.bar\r\n---> 12         await self.bar\r\n     13 \r\n     14 \r\n\r\nRuntimeError: cannot reuse already awaited coroutine\r\n~~~~\r\nWhen caching an async method, the value should be stored and repeated access should always return a new coroutine (which returns the cached value).\r\n\r\nThis may be related to #7, though its not quite clear to me what that ticket is about", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/80", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/80/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/80/events", "html_url": "https://github.com/pydanny/cached-property/issues/80", "id": 289142068, "node_id": "MDU6SXNzdWUyODkxNDIwNjg=", "number": 80, "title": "[bug] threads lock wont work", "user": {"login": "Cologler", "id": 10906962, "node_id": "MDQ6VXNlcjEwOTA2OTYy", "avatar_url": "https://avatars0.githubusercontent.com/u/10906962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cologler", "html_url": "https://github.com/Cologler", "followers_url": "https://api.github.com/users/Cologler/followers", "following_url": "https://api.github.com/users/Cologler/following{/other_user}", "gists_url": "https://api.github.com/users/Cologler/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cologler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cologler/subscriptions", "organizations_url": "https://api.github.com/users/Cologler/orgs", "repos_url": "https://api.github.com/users/Cologler/repos", "events_url": "https://api.github.com/users/Cologler/events{/privacy}", "received_events_url": "https://api.github.com/users/Cologler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-17T04:49:57Z", "updated_at": "2018-01-17T07:02:57Z", "closed_at": "2018-01-17T07:02:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "for example: \r\n\r\n``` py\r\nclass A:\r\n    def __init__(self):\r\n        self.a = 1\r\n    @threaded_cached_property\r\n    def b(self):\r\n        return 2\r\n```\r\n\r\nif one thread writing/deleting `a`, and another thread getting `b`, this may corrupt `__dict__`. (some python don't have GIL)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/63", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/63/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/63/events", "html_url": "https://github.com/pydanny/cached-property/issues/63", "id": 233029925, "node_id": "MDU6SXNzdWUyMzMwMjk5MjU=", "number": 63, "title": "Isn't there a way to empty cached results on according save operations?", "user": {"login": "oesah", "id": 4014723, "node_id": "MDQ6VXNlcjQwMTQ3MjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4014723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oesah", "html_url": "https://github.com/oesah", "followers_url": "https://api.github.com/users/oesah/followers", "following_url": "https://api.github.com/users/oesah/following{/other_user}", "gists_url": "https://api.github.com/users/oesah/gists{/gist_id}", "starred_url": "https://api.github.com/users/oesah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oesah/subscriptions", "organizations_url": "https://api.github.com/users/oesah/orgs", "repos_url": "https://api.github.com/users/oesah/repos", "events_url": "https://api.github.com/users/oesah/events{/privacy}", "received_events_url": "https://api.github.com/users/oesah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-01T22:36:29Z", "updated_at": "2017-06-02T13:42:36Z", "closed_at": "2017-06-01T23:45:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, \r\n\r\nI am wondering, why it wouldn't be smarter to let the decorator (somehow) clear related caches whenever a related model changes. Use Case:\r\n\r\nI have a big model with many related models and I need to filter them for a ListView Page. To display those values I would use cached_properties for data from other models like images. Since the related instances have not changed, we could use the cached_property. Now if we upload a new image, a signal could clear the cached_property used in the other model. The same goes for update or delete operations. That way the system would always be up to date, but max out the potential of caching where ever it makes sense. \r\n\r\nIs that clear? I am not an expert like you, but since I am currently learning about all this, I was curious.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/40", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/40/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/40/events", "html_url": "https://github.com/pydanny/cached-property/issues/40", "id": 173534564, "node_id": "MDU6SXNzdWUxNzM1MzQ1NjQ=", "number": 40, "title": "Invalidating the entire cache.", "user": {"login": "carterbox", "id": 9604511, "node_id": "MDQ6VXNlcjk2MDQ1MTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/9604511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carterbox", "html_url": "https://github.com/carterbox", "followers_url": "https://api.github.com/users/carterbox/followers", "following_url": "https://api.github.com/users/carterbox/following{/other_user}", "gists_url": "https://api.github.com/users/carterbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/carterbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carterbox/subscriptions", "organizations_url": "https://api.github.com/users/carterbox/orgs", "repos_url": "https://api.github.com/users/carterbox/repos", "events_url": "https://api.github.com/users/carterbox/events{/privacy}", "received_events_url": "https://api.github.com/users/carterbox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100345714, "node_id": "MDU6TGFiZWwxMDAzNDU3MTQ=", "url": "https://api.github.com/repos/pydanny/cached-property/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 100345715, "node_id": "MDU6TGFiZWwxMDAzNDU3MTU=", "url": "https://api.github.com/repos/pydanny/cached-property/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-26T20:15:45Z", "updated_at": "2019-02-06T03:40:30Z", "closed_at": "2019-02-06T03:40:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to invalidate the entire cache with one command instead of needing to individually invalidating them. So instead of:\n\n```\ndel monopoly.__dict__['boardwalk']\ndel monopoly.__dict__['parkplace']\n```\n\nit would be like:\n\n```\ndel monopoly.__dict__['all']\n```\n\nI tried to clear the dictionary in this way:\n\n```\nmonopoly.__dict__ = dict.fromkeys(monopoly.__dict__)\n```\n\nHowever, this also deletes the non-property variables ( e.g. `monopoly.boardwalk_price`) because they are all stored in the same place.\n\nWhat's the best way to do this?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/31", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/31/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/31/events", "html_url": "https://github.com/pydanny/cached-property/issues/31", "id": 139512008, "node_id": "MDU6SXNzdWUxMzk1MTIwMDg=", "number": 31, "title": "add a cached property with idempotent invalidation", "user": {"login": "RonnyPfannschmidt", "id": 156838, "node_id": "MDQ6VXNlcjE1NjgzOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RonnyPfannschmidt", "html_url": "https://github.com/RonnyPfannschmidt", "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers", "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}", "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}", "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions", "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs", "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos", "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}", "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100345714, "node_id": "MDU6TGFiZWwxMDAzNDU3MTQ=", "url": "https://api.github.com/repos/pydanny/cached-property/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-03-09T08:39:26Z", "updated_at": "2020-06-09T12:14:13Z", "closed_at": "2020-06-09T12:14:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "the fast cached property has one major drawback,\ncache validation is not idempotent\n\nto enable ease of use i propose adding a idempotent variant of the cached property,\nwhich handles idempotent deletion\n\nexample code i did only write, not execute:\n\n```\nfrom cached_property import\nclass Example(object):\n  @cached_property\n  def foo(self):\n    pass\n\ndel Example().foo\n```\n\nshould not fail if one requests a idempotent cached property\n\na potential option to help with the performance hit would be using a cython spec to translate the cached property to c code for speed\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/29", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/29/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/29/events", "html_url": "https://github.com/pydanny/cached-property/issues/29", "id": 122491828, "node_id": "MDU6SXNzdWUxMjI0OTE4Mjg=", "number": 29, "title": "Feature Request: cached_classproperty", "user": {"login": "guettli", "id": 414336, "node_id": "MDQ6VXNlcjQxNDMzNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/414336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guettli", "html_url": "https://github.com/guettli", "followers_url": "https://api.github.com/users/guettli/followers", "following_url": "https://api.github.com/users/guettli/following{/other_user}", "gists_url": "https://api.github.com/users/guettli/gists{/gist_id}", "starred_url": "https://api.github.com/users/guettli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guettli/subscriptions", "organizations_url": "https://api.github.com/users/guettli/orgs", "repos_url": "https://api.github.com/users/guettli/repos", "events_url": "https://api.github.com/users/guettli/events{/privacy}", "received_events_url": "https://api.github.com/users/guettli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1074617441, "node_id": "MDU6TGFiZWwxMDc0NjE3NDQx", "url": "https://api.github.com/repos/pydanny/cached-property/labels/wontimplement", "name": "wontimplement", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2015-12-16T12:14:03Z", "updated_at": "2018-09-30T18:08:49Z", "closed_at": "2018-09-30T18:08:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to have a cached_classproperty.\n\nWhat do you think?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/27", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/27/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/27/events", "html_url": "https://github.com/pydanny/cached-property/issues/27", "id": 114823362, "node_id": "MDU6SXNzdWUxMTQ4MjMzNjI=", "number": 27, "title": "Python builtin help() does not show docstring of cached_property", "user": {"login": "Hotschke", "id": 13778660, "node_id": "MDQ6VXNlcjEzNzc4NjYw", "avatar_url": "https://avatars0.githubusercontent.com/u/13778660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hotschke", "html_url": "https://github.com/Hotschke", "followers_url": "https://api.github.com/users/Hotschke/followers", "following_url": "https://api.github.com/users/Hotschke/following{/other_user}", "gists_url": "https://api.github.com/users/Hotschke/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hotschke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hotschke/subscriptions", "organizations_url": "https://api.github.com/users/Hotschke/orgs", "repos_url": "https://api.github.com/users/Hotschke/repos", "events_url": "https://api.github.com/users/Hotschke/events{/privacy}", "received_events_url": "https://api.github.com/users/Hotschke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100345712, "node_id": "MDU6TGFiZWwxMDAzNDU3MTI=", "url": "https://api.github.com/repos/pydanny/cached-property/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 100345715, "node_id": "MDU6TGFiZWwxMDAzNDU3MTU=", "url": "https://api.github.com/repos/pydanny/cached-property/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-11-03T14:04:26Z", "updated_at": "2019-08-10T16:10:29Z", "closed_at": "2019-08-10T16:10:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\nfrom cached_property import cached_property\n\nclass Monopoly(object):\n\n    def __init__(self):\n        self.boardwalk_price = 500\n\n    @cached_property\n    def boardwalk(self):\n        \"\"\"my docstring\n        Again, this is a silly example. Don't worry about it, this is\n         just an example for clarity.\n       \"\"\"\n        self.boardwalk_price += 50\n        return self.boardwalk_price\n\nhelp(Monopoly)\n```\n\nAbove code shows:\n\n```\nHelp on class Monopoly in module __main__:\n\nclass Monopoly(__builtin__.object)\n |  Methods defined here:\n |  \n |  __init__(self)\n |  \n |  boardwalk = <cached_property.cached_property object>\n```\n\nSame code without `@cached_property decorator`, `help()` shows actual content of docstring:\n\n```\nHelp on class Monopoly in module __main__:\n\nclass Monopoly(__builtin__.object)\n |  Methods defined here:\n |  \n |  __init__(self)\n |  \n |  boardwalk(self)\n |      my docstring\n |      Again, this is a silly example. Don't worry about it, this is\n |       just an example for clarity.\n```\n\nThis is `python 2.7.10`.\n\nIs there any possibility to fix this?\n\nFollowing stackoverflow questions seem to consider this:\nhttp://stackoverflow.com/questions/17160117/python-using-decorator-py-to-preserve-a-method-docstring\nhttp://stackoverflow.com/questions/1782843/python-decorator-problem-with-docstrings\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/21", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/21/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/21/events", "html_url": "https://github.com/pydanny/cached-property/issues/21", "id": 72231984, "node_id": "MDU6SXNzdWU3MjIzMTk4NA==", "number": 21, "title": "Make the threaded_cached_property the default cached_property decorator?", "user": {"login": "pydanny", "id": 62857, "node_id": "MDQ6VXNlcjYyODU3", "avatar_url": "https://avatars1.githubusercontent.com/u/62857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydanny", "html_url": "https://github.com/pydanny", "followers_url": "https://api.github.com/users/pydanny/followers", "following_url": "https://api.github.com/users/pydanny/following{/other_user}", "gists_url": "https://api.github.com/users/pydanny/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydanny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydanny/subscriptions", "organizations_url": "https://api.github.com/users/pydanny/orgs", "repos_url": "https://api.github.com/users/pydanny/repos", "events_url": "https://api.github.com/users/pydanny/events{/privacy}", "received_events_url": "https://api.github.com/users/pydanny/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100345717, "node_id": "MDU6TGFiZWwxMDAzNDU3MTc=", "url": "https://api.github.com/repos/pydanny/cached-property/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-30T17:46:05Z", "updated_at": "2015-08-26T17:14:45Z", "closed_at": "2015-08-26T17:14:45Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Why not make everything thread safe?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/16", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/16/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/16/events", "html_url": "https://github.com/pydanny/cached-property/issues/16", "id": 61337636, "node_id": "MDU6SXNzdWU2MTMzNzYzNg==", "number": 16, "title": "versions >= 1.0.0: can't clear cached properties", "user": {"login": "nevion", "id": 2229688, "node_id": "MDQ6VXNlcjIyMjk2ODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2229688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nevion", "html_url": "https://github.com/nevion", "followers_url": "https://api.github.com/users/nevion/followers", "following_url": "https://api.github.com/users/nevion/following{/other_user}", "gists_url": "https://api.github.com/users/nevion/gists{/gist_id}", "starred_url": "https://api.github.com/users/nevion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nevion/subscriptions", "organizations_url": "https://api.github.com/users/nevion/orgs", "repos_url": "https://api.github.com/users/nevion/repos", "events_url": "https://api.github.com/users/nevion/events{/privacy}", "received_events_url": "https://api.github.com/users/nevion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-03-14T01:25:27Z", "updated_at": "2015-04-16T01:24:47Z", "closed_at": "2015-04-16T01:24:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\n\nI've using cached_property since 0.1.5 - I see it's now declared 1.0.0  - I'm using it with python 2.7.8\n\nWell I had some regressions since I started using 1.0.0 - I can't seem to invalidate the cache - either through the way listed on pypy:\n\n```\ndel Instance[attribute]\n```\n\nor the old tried and true way which worked when the data was not cached yet:\n\n```\ntry:\n     delattr(instance, pname)\nexcept AttributeError:\n     pass\n```\n\nAs of right now, the only way I could get it to invalidate the cached entries, whether or not they are populated is this:\n\n```\n     try:\n        del instance._cache[pname]\n    except KeyError as e:\n         pass\n```\n\nTo be clear I haven't been able to clear the cache at all in any other way than the above direct mangling with _cache.\n\nIs this a regression on your side?  Is the documentation up to date with how you expect to clear the cache?\n\nI think with something this big, if valid, needs to have the pypy package updated asap!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/8", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/8/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/8/events", "html_url": "https://github.com/pydanny/cached-property/issues/8", "id": 33811582, "node_id": "MDU6SXNzdWUzMzgxMTU4Mg==", "number": 8, "title": "Rename the package?", "user": {"login": "pydanny", "id": 62857, "node_id": "MDQ6VXNlcjYyODU3", "avatar_url": "https://avatars1.githubusercontent.com/u/62857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydanny", "html_url": "https://github.com/pydanny", "followers_url": "https://api.github.com/users/pydanny/followers", "following_url": "https://api.github.com/users/pydanny/following{/other_user}", "gists_url": "https://api.github.com/users/pydanny/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydanny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydanny/subscriptions", "organizations_url": "https://api.github.com/users/pydanny/orgs", "repos_url": "https://api.github.com/users/pydanny/repos", "events_url": "https://api.github.com/users/pydanny/events{/privacy}", "received_events_url": "https://api.github.com/users/pydanny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-05-19T15:46:08Z", "updated_at": "2014-05-20T21:15:56Z", "closed_at": "2014-05-20T21:15:56Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Would it make sense to rename the package to `cached_property` or `cachedproperty`?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/7", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/7/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/7/events", "html_url": "https://github.com/pydanny/cached-property/issues/7", "id": 33811329, "node_id": "MDU6SXNzdWUzMzgxMTMyOQ==", "number": 7, "title": "Add asyncio_cached_property", "user": {"login": "pydanny", "id": 62857, "node_id": "MDQ6VXNlcjYyODU3", "avatar_url": "https://avatars1.githubusercontent.com/u/62857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydanny", "html_url": "https://github.com/pydanny", "followers_url": "https://api.github.com/users/pydanny/followers", "following_url": "https://api.github.com/users/pydanny/following{/other_user}", "gists_url": "https://api.github.com/users/pydanny/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydanny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydanny/subscriptions", "organizations_url": "https://api.github.com/users/pydanny/orgs", "repos_url": "https://api.github.com/users/pydanny/repos", "events_url": "https://api.github.com/users/pydanny/events{/privacy}", "received_events_url": "https://api.github.com/users/pydanny/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100345714, "node_id": "MDU6TGFiZWwxMDAzNDU3MTQ=", "url": "https://api.github.com/repos/pydanny/cached-property/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-05-19T15:43:03Z", "updated_at": "2018-02-25T23:19:26Z", "closed_at": "2018-02-25T23:19:26Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Only for users of Python 3.4 or higher, or those with Python 3.3 and asyncio installed.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/6", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/6/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/6/events", "html_url": "https://github.com/pydanny/cached-property/issues/6", "id": 33764442, "node_id": "MDU6SXNzdWUzMzc2NDQ0Mg==", "number": 6, "title": "Better multithreading support", "user": {"login": "Tinche", "id": 1909233, "node_id": "MDQ6VXNlcjE5MDkyMzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1909233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tinche", "html_url": "https://github.com/Tinche", "followers_url": "https://api.github.com/users/Tinche/followers", "following_url": "https://api.github.com/users/Tinche/following{/other_user}", "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions", "organizations_url": "https://api.github.com/users/Tinche/orgs", "repos_url": "https://api.github.com/users/Tinche/repos", "events_url": "https://api.github.com/users/Tinche/events{/privacy}", "received_events_url": "https://api.github.com/users/Tinche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100345714, "node_id": "MDU6TGFiZWwxMDAzNDU3MTQ=", "url": "https://api.github.com/repos/pydanny/cached-property/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-05-19T00:10:53Z", "updated_at": "2014-05-20T21:17:05Z", "closed_at": "2014-05-20T21:17:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Example at https://gist.github.com/Tinche/e092adeb8171fd0843dd will print out \"Cached method called 10 times\" where ideally it would only be called once.\n\nI'd suggest documenting this fact or doing something about it :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/5", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/5/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/5/events", "html_url": "https://github.com/pydanny/cached-property/issues/5", "id": 33763684, "node_id": "MDU6SXNzdWUzMzc2MzY4NA==", "number": 5, "title": "Test 2 lines of code", "user": {"login": "pydanny", "id": 62857, "node_id": "MDQ6VXNlcjYyODU3", "avatar_url": "https://avatars1.githubusercontent.com/u/62857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydanny", "html_url": "https://github.com/pydanny", "followers_url": "https://api.github.com/users/pydanny/followers", "following_url": "https://api.github.com/users/pydanny/following{/other_user}", "gists_url": "https://api.github.com/users/pydanny/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydanny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydanny/subscriptions", "organizations_url": "https://api.github.com/users/pydanny/orgs", "repos_url": "https://api.github.com/users/pydanny/repos", "events_url": "https://api.github.com/users/pydanny/events{/privacy}", "received_events_url": "https://api.github.com/users/pydanny/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100345715, "node_id": "MDU6TGFiZWwxMDAzNDU3MTU=", "url": "https://api.github.com/repos/pydanny/cached-property/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-05-18T23:26:20Z", "updated_at": "2014-06-01T17:31:06Z", "closed_at": "2014-06-01T17:31:06Z", "author_association": "OWNER", "active_lock_reason": null, "body": "See https://github.com/pydanny/cached-property/blob/dc226845967b6439e498f2f1771e1dc919dc3ff8/cached_property.py#L24-L25\n\nTests don't cover this case yet. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/4", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/4/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/4/events", "html_url": "https://github.com/pydanny/cached-property/issues/4", "id": 33757839, "node_id": "MDU6SXNzdWUzMzc1NzgzOQ==", "number": 4, "title": "Add timed cached_property", "user": {"login": "pydanny", "id": 62857, "node_id": "MDQ6VXNlcjYyODU3", "avatar_url": "https://avatars1.githubusercontent.com/u/62857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydanny", "html_url": "https://github.com/pydanny", "followers_url": "https://api.github.com/users/pydanny/followers", "following_url": "https://api.github.com/users/pydanny/following{/other_user}", "gists_url": "https://api.github.com/users/pydanny/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydanny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydanny/subscriptions", "organizations_url": "https://api.github.com/users/pydanny/orgs", "repos_url": "https://api.github.com/users/pydanny/repos", "events_url": "https://api.github.com/users/pydanny/events{/privacy}", "received_events_url": "https://api.github.com/users/pydanny/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 100345714, "node_id": "MDU6TGFiZWwxMDAzNDU3MTQ=", "url": "https://api.github.com/repos/pydanny/cached-property/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-05-18T19:04:50Z", "updated_at": "2015-02-13T18:27:47Z", "closed_at": "2015-02-13T18:27:47Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Must work like this:\n\n``` python\nclass Monopoly(object):\n\n    def __init__(self):\n        self.boardwalk_price = 500\n        self.parkplace_price = 450\n\n    # No time specified so cache is indefinite\n    @timed_cached_property\n    def boardwalk(self):\n        self.boardwalk_price += 50\n        return self.boardwalk_price\n\n    # Time of 300 specified, making cache last for 5 minutes before invalidation\n    @timed_cached_property(ttl=300)\n    def parkplace(self):\n        self.timed_cached_property += 50\n        return self.timed_cached_property\n```\n\nNotes:\n- This _might_ supplant the current `cached_property` decorator.\n- The example at https://wiki.python.org/moin/PythonDecoratorLibrary#Cached_Properties breaks if you don't pass a TTL (time-to-leave) argument.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/3", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/3/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/3/events", "html_url": "https://github.com/pydanny/cached-property/issues/3", "id": 33751879, "node_id": "MDU6SXNzdWUzMzc1MTg3OQ==", "number": 3, "title": "Cache invalidation", "user": {"login": "oblalex", "id": 904705, "node_id": "MDQ6VXNlcjkwNDcwNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/904705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oblalex", "html_url": "https://github.com/oblalex", "followers_url": "https://api.github.com/users/oblalex/followers", "following_url": "https://api.github.com/users/oblalex/following{/other_user}", "gists_url": "https://api.github.com/users/oblalex/gists{/gist_id}", "starred_url": "https://api.github.com/users/oblalex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oblalex/subscriptions", "organizations_url": "https://api.github.com/users/oblalex/orgs", "repos_url": "https://api.github.com/users/oblalex/repos", "events_url": "https://api.github.com/users/oblalex/events{/privacy}", "received_events_url": "https://api.github.com/users/oblalex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-05-18T13:40:27Z", "updated_at": "2014-05-18T19:16:03Z", "closed_at": "2014-05-18T18:55:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\n\nIs it planned to implement cache invalidation? I mean, if property's value depends on something, which can be modified from the outside, is it possible to tell to the property, that its value is not valid any more.\n\nFor, example:\n\n```\nclass Foo(object):\n\n    name = None\n\n    def set_name(self, value):\n        self.name = value\n        self.greeting.invalidate_cache()\n\n    @cached_property\n    def greeting(self):\n        name = self.name or 'anonymous'\n        return 'Hello, {0}'.format(name)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydanny/cached-property/issues/2", "repository_url": "https://api.github.com/repos/pydanny/cached-property", "labels_url": "https://api.github.com/repos/pydanny/cached-property/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/pydanny/cached-property/issues/2/comments", "events_url": "https://api.github.com/repos/pydanny/cached-property/issues/2/events", "html_url": "https://github.com/pydanny/cached-property/issues/2", "id": 33748561, "node_id": "MDU6SXNzdWUzMzc0ODU2MQ==", "number": 2, "title": "Contribute implementation to Python", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2014-05-18T09:40:50Z", "updated_at": "2019-10-21T18:10:26Z", "closed_at": "2019-10-21T18:10:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "See http://bugs.python.org/issue21145.\nAll we need to add is the TTL feature that other implementations like pip and werkzeug and Django have.\n\nThis package already has some basic testing and it would be nice to start from there.\n", "performed_via_github_app": null, "score": 1.0}]}