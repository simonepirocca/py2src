{"total_count": 42, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/python-hyper/h11/issues/100", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/100/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/100/events", "html_url": "https://github.com/python-hyper/h11/issues/100", "id": 600217965, "node_id": "MDU6SXNzdWU2MDAyMTc5NjU=", "number": 100, "title": "How to send multiple requests as a client via a keep alive connection?", "user": {"login": "pgjones", "id": 1391482, "node_id": "MDQ6VXNlcjEzOTE0ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1391482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pgjones", "html_url": "https://github.com/pgjones", "followers_url": "https://api.github.com/users/pgjones/followers", "following_url": "https://api.github.com/users/pgjones/following{/other_user}", "gists_url": "https://api.github.com/users/pgjones/gists{/gist_id}", "starred_url": "https://api.github.com/users/pgjones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pgjones/subscriptions", "organizations_url": "https://api.github.com/users/pgjones/orgs", "repos_url": "https://api.github.com/users/pgjones/repos", "events_url": "https://api.github.com/users/pgjones/events{/privacy}", "received_events_url": "https://api.github.com/users/pgjones/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-15T11:13:12Z", "updated_at": "2020-04-19T04:05:36Z", "closed_at": "2020-04-19T04:05:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently sending a `EndOfMessage` means that `b\"\"` will be sent to the server - however this indicates to the server that the client is done sending. The [docs](https://github.com/python-hyper/h11/blame/master/docs/source/basic-usage.rst#L240) seem to avoid this by allowing multiple events to be sent as one (with the `b\"\"` appended to the end and hence not present) - however the [code does not](https://github.com/python-hyper/h11/blob/master/h11/_connection.py#L448). I think the docs are correct and the code should be changed (which I'll happily write a PR for), however I'm not sure enough...\r\n\r\n```python\r\nsend_to_server(client.send(h11.Request(...)))\r\nsend_to_server(client.send(h11.EndOfMessage()))  # Server half closes...\r\nclient.start_next_cycle()\r\nsend_to_server(client.send(h11.Request(...)))  # Issues here\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/98", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/98/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/98/events", "html_url": "https://github.com/python-hyper/h11/issues/98", "id": 580389466, "node_id": "MDU6SXNzdWU1ODAzODk0NjY=", "number": 98, "title": "RemoteProtocolError's messaging is not specific", "user": {"login": "ian-otto", "id": 1069320, "node_id": "MDQ6VXNlcjEwNjkzMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1069320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ian-otto", "html_url": "https://github.com/ian-otto", "followers_url": "https://api.github.com/users/ian-otto/followers", "following_url": "https://api.github.com/users/ian-otto/following{/other_user}", "gists_url": "https://api.github.com/users/ian-otto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ian-otto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ian-otto/subscriptions", "organizations_url": "https://api.github.com/users/ian-otto/orgs", "repos_url": "https://api.github.com/users/ian-otto/repos", "events_url": "https://api.github.com/users/ian-otto/events{/privacy}", "received_events_url": "https://api.github.com/users/ian-otto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-13T05:59:56Z", "updated_at": "2020-07-31T15:23:29Z", "closed_at": "2020-07-31T15:23:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are several conditions that lead to a \"malformed data\" RemoteProtocolError. This makes sending specific messaging to the user (such as \"Illegal header line.\", etc) difficult.\r\n\r\nIs there a way that we can gather more information about why this particular message occurs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/96", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/96/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/96/events", "html_url": "https://github.com/python-hyper/h11/issues/96", "id": 550940491, "node_id": "MDU6SXNzdWU1NTA5NDA0OTE=", "number": 96, "title": "On recoverable protocol errors from real-world usage.", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-16T17:07:24Z", "updated_at": "2020-01-16T17:09:44Z", "closed_at": "2020-01-16T17:09:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Figured I'd raise this based on some useful real world feedback in https://github.com/encode/httpx/issues/767 which includes a bunch of cases that `urllib3` deals with, but `h11` (correctly) identifies as protocol errors.\r\n\r\nThere's four seperate classes of protocol errors mentioned in that ticket...\r\n\r\n1. Multiple Content-Length headers. (Already covered by #92)\r\n2. Status code outside of valid range. (Returned a \"600\")\r\n3. \"malformed data\" - I believe triggered by a `Server:` header with no value.\r\n4. \"Receive buffer too long\" - Presumably an oversized header or similar but cause wasn't immediately clear.\r\n\r\nI'm wondering if you've any thoughts on what (if anything) we might usefully do to have `h11` be able to be lenient to some of these protocol errors?\r\n\r\nPurely based on the feedback in that particular ticket, and given that #92 already covers one of the cases...\r\n\r\n* Would it be reasonable to be lenient to invalid status code ranges?\r\n* Would it be reasonable to switch the header regex to allow empty values even tho not strictly valid?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/91", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/91/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/91/events", "html_url": "https://github.com/python-hyper/h11/issues/91", "id": 539952281, "node_id": "MDU6SXNzdWU1Mzk5NTIyODE=", "number": 91, "title": "ssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:852)", "user": {"login": "freis", "id": 1261004, "node_id": "MDQ6VXNlcjEyNjEwMDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1261004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freis", "html_url": "https://github.com/freis", "followers_url": "https://api.github.com/users/freis/followers", "following_url": "https://api.github.com/users/freis/following{/other_user}", "gists_url": "https://api.github.com/users/freis/gists{/gist_id}", "starred_url": "https://api.github.com/users/freis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freis/subscriptions", "organizations_url": "https://api.github.com/users/freis/orgs", "repos_url": "https://api.github.com/users/freis/repos", "events_url": "https://api.github.com/users/freis/events{/privacy}", "received_events_url": "https://api.github.com/users/freis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-18T22:10:10Z", "updated_at": "2019-12-18T22:33:38Z", "closed_at": "2019-12-18T22:19:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been having this issue when I use any package that uses h11 and I'm wondering if it has something to do with h11 and not the packages.\r\nThis is the example that I've raised with httpx: https://github.com/encode/httpx/issues/646\r\nMy main issue is seeing that when I use http://ip:port then if a website does a redirect the port is being pushed into the Location and if I use a curl to test everything works ok and that port is not in the Location.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/86", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/86/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/86/events", "html_url": "https://github.com/python-hyper/h11/issues/86", "id": 484022751, "node_id": "MDU6SXNzdWU0ODQwMjI3NTE=", "number": 86, "title": "Tests fail with pytest 5", "user": {"login": "scarabeusiv", "id": 1055830, "node_id": "MDQ6VXNlcjEwNTU4MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1055830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scarabeusiv", "html_url": "https://github.com/scarabeusiv", "followers_url": "https://api.github.com/users/scarabeusiv/followers", "following_url": "https://api.github.com/users/scarabeusiv/following{/other_user}", "gists_url": "https://api.github.com/users/scarabeusiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/scarabeusiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scarabeusiv/subscriptions", "organizations_url": "https://api.github.com/users/scarabeusiv/orgs", "repos_url": "https://api.github.com/users/scarabeusiv/repos", "events_url": "https://api.github.com/users/scarabeusiv/events{/privacy}", "received_events_url": "https://api.github.com/users/scarabeusiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-22T14:17:49Z", "updated_at": "2019-08-23T09:04:13Z", "closed_at": "2019-08-23T09:04:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n[    4s] >       assert \"kwarg a\" in str(exc)\r\n[    4s] E       AssertionError: assert 'kwarg a' in '<ExceptionInfo TypeError tblen=2>'\r\n[    4s] E        +  where '<ExceptionInfo TypeError tblen=2>' = str(<ExceptionInfo TypeError tblen=2>)\r\n[    4s] \r\n[    4s] h11/tests/test_events.py:47: AssertionError\r\n```\r\n\r\nThe syntax bit changed and you just can't do exception but instead have to call exception.value,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/80", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/80/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/80/events", "html_url": "https://github.com/python-hyper/h11/issues/80", "id": 433133016, "node_id": "MDU6SXNzdWU0MzMxMzMwMTY=", "number": 80, "title": "Add the current state when raising LocalProtocolError(\"not in a reusable state\")", "user": {"login": "alanbchristie", "id": 29806285, "node_id": "MDQ6VXNlcjI5ODA2Mjg1", "avatar_url": "https://avatars1.githubusercontent.com/u/29806285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanbchristie", "html_url": "https://github.com/alanbchristie", "followers_url": "https://api.github.com/users/alanbchristie/followers", "following_url": "https://api.github.com/users/alanbchristie/following{/other_user}", "gists_url": "https://api.github.com/users/alanbchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanbchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanbchristie/subscriptions", "organizations_url": "https://api.github.com/users/alanbchristie/orgs", "repos_url": "https://api.github.com/users/alanbchristie/repos", "events_url": "https://api.github.com/users/alanbchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/alanbchristie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-15T07:27:38Z", "updated_at": "2019-05-15T18:39:03Z", "closed_at": "2019-05-15T18:39:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm experiencing `LocalProtocolError(\"not in a reusable state\")`exceptions when using **hypercorn** (see https://github.com/pgjones/hypercorn/issues/18).\r\n\r\nIt would be extremely valuable if the current state were logged with the exception that occurs in **_state.py**'s `start_next_cycle(self)` method. Then the user would know what the state is as well as what it is expected to be.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/72", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/72/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/72/events", "html_url": "https://github.com/python-hyper/h11/issues/72", "id": 351991604, "node_id": "MDU6SXNzdWUzNTE5OTE2MDQ=", "number": 72, "title": "h11.Response() doesn't honor IntEnum status_code ", "user": {"login": "belm0", "id": 1708631, "node_id": "MDQ6VXNlcjE3MDg2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1708631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belm0", "html_url": "https://github.com/belm0", "followers_url": "https://api.github.com/users/belm0/followers", "following_url": "https://api.github.com/users/belm0/following{/other_user}", "gists_url": "https://api.github.com/users/belm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/belm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belm0/subscriptions", "organizations_url": "https://api.github.com/users/belm0/orgs", "repos_url": "https://api.github.com/users/belm0/repos", "events_url": "https://api.github.com/users/belm0/events{/privacy}", "received_events_url": "https://api.github.com/users/belm0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-08-20T05:39:12Z", "updated_at": "2019-05-15T18:37:28Z", "closed_at": "2019-05-15T18:37:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "e.g. `h11.Response(status_code=HTTPStatus.NOT_FOUND)` yields a 200 status\r\n\r\nit appears that `str()` is being used on the value\r\n\r\nhttps://github.com/python-hyper/h11/blob/5a976c938204be494b243d2653a70b28fae17b58/h11/_writers.py#L54", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/70", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/70/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/70/events", "html_url": "https://github.com/python-hyper/h11/issues/70", "id": 351476986, "node_id": "MDU6SXNzdWUzNTE0NzY5ODY=", "number": 70, "title": "exception in trio example: h11._util.LocalProtocolError: not in a reusable state", "user": {"login": "belm0", "id": 1708631, "node_id": "MDQ6VXNlcjE3MDg2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1708631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belm0", "html_url": "https://github.com/belm0", "followers_url": "https://api.github.com/users/belm0/followers", "following_url": "https://api.github.com/users/belm0/following{/other_user}", "gists_url": "https://api.github.com/users/belm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/belm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belm0/subscriptions", "organizations_url": "https://api.github.com/users/belm0/orgs", "repos_url": "https://api.github.com/users/belm0/repos", "events_url": "https://api.github.com/users/belm0/events{/privacy}", "received_events_url": "https://api.github.com/users/belm0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-08-17T06:47:34Z", "updated_at": "2019-04-15T07:07:08Z", "closed_at": "2018-08-18T04:02:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I haven't figured out a pattern yet but it only takes a few reloads to get this exception.  Seen on OS X with h11 0.7.0.\r\n\r\n```\r\n$ python3 trio-server.py\r\nlistening on http://localhost:8080\r\n0: Got new connection\r\n0: Server main loop waiting for request\r\n0: Server main loop got event: Request(method=b'GET', target=b'/', headers=[(b'host', b'localhost:8080'), (b'connection', b'keep-alive'), (b'upgrade-insecure-requests', b'1'), (b'user-agent', b'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'), (b'accept', b'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'), (b'accept-encoding', b'gzip, deflate, br'), (b'accept-language', b'en-US,en;q=0.9')], http_version=b'1.1')\r\n0: Preparing echo response\r\n0: Sending 200 response with 792 bytes\r\n0: trying to re-use connection\r\n0: Server main loop waiting for request\r\n1: Got new connection\r\n1: Server main loop waiting for request\r\n0: Server main loop got event: Request(method=b'GET', target=b'/favicon.ico', headers=[(b'host', b'localhost:8080'), (b'connection', b'keep-alive'), (b'user-agent', b'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'), (b'accept', b'image/webp,image/apng,image/*,*/*;q=0.8'), (b'referer', b'http://localhost:8080/'), (b'accept-encoding', b'gzip, deflate, br'), (b'accept-language', b'en-US,en;q=0.9')], http_version=b'1.1')\r\n0: Preparing echo response\r\n0: Sending 200 response with 760 bytes\r\n0: trying to re-use connection\r\n0: Server main loop waiting for request\r\n0: Server main loop got event: Request(method=b'GET', target=b'/xx', headers=[(b'host', b'localhost:8080'), (b'connection', b'keep-alive'), (b'upgrade-insecure-requests', b'1'), (b'user-agent', b'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'), (b'accept', b'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'), (b'accept-encoding', b'gzip, deflate, br'), (b'accept-language', b'en-US,en;q=0.9')], http_version=b'1.1')\r\n0: Preparing echo response\r\n0: Sending 200 response with 794 bytes\r\n0: trying to re-use connection\r\n0: Server main loop waiting for request\r\n0: Server main loop got event: Request(method=b'GET', target=b'/favicon.ico', headers=[(b'host', b'localhost:8080'), (b'connection', b'keep-alive'), (b'user-agent', b'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'), (b'accept', b'image/webp,image/apng,image/*,*/*;q=0.8'), (b'referer', b'http://localhost:8080/xx'), (b'accept-encoding', b'gzip, deflate, br'), (b'accept-language', b'en-US,en;q=0.9')], http_version=b'1.1')\r\n0: Preparing echo response\r\n0: Sending 200 response with 762 bytes\r\n0: trying to re-use connection\r\n0: Server main loop waiting for request\r\n0: Server main loop got event: Request(method=b'GET', target=b'/', headers=[(b'host', b'localhost:8080'), (b'connection', b'keep-alive'), (b'upgrade-insecure-requests', b'1'), (b'user-agent', b'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'), (b'accept', b'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'), (b'accept-encoding', b'gzip, deflate, br'), (b'accept-language', b'en-US,en;q=0.9')], http_version=b'1.1')\r\n0: Preparing echo response\r\n0: Sending 200 response with 792 bytes\r\n0: trying to re-use connection\r\n0: Server main loop waiting for request\r\n0: Server main loop got event: Request(method=b'GET', target=b'/favicon.ico', headers=[(b'host', b'localhost:8080'), (b'connection', b'keep-alive'), (b'user-agent', b'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'), (b'accept', b'image/webp,image/apng,image/*,*/*;q=0.8'), (b'referer', b'http://localhost:8080/'), (b'accept-encoding', b'gzip, deflate, br'), (b'accept-language', b'en-US,en;q=0.9')], http_version=b'1.1')\r\n0: Preparing echo response\r\n0: Sending 200 response with 760 bytes\r\n0: trying to re-use connection\r\n0: Server main loop waiting for request\r\n1: Error during response handler:\r\n1: trying to send error response...\r\n1: Sending 408 response with 0 bytes\r\n1: trying to re-use connection\r\n1: unexpected state {CLIENT: IDLE, SERVER: DONE} -- bailing out\r\n1: trying to send error response...\r\n1: ...but I can't, because our state is DONE\r\n2: Got new connection\r\n2: Server main loop waiting for request\r\nTraceback (most recent call last):\r\n  File \"trio-server.py\", line 240, in http_serve\r\n    wrapper.conn.start_next_cycle()\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/h11/_connection.py\", line 204, in start_next_cycle\r\n    self._cstate.start_next_cycle()\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/h11/_state.py\", line 298, in start_next_cycle\r\n    raise LocalProtocolError(\"not in a reusable state\")\r\nh11._util.LocalProtocolError: not in a reusable state\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_highlevel_socket.py\", line 25, in _translate_socket_errors_to_stream_errors\r\n    yield\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_highlevel_socket.py\", line 141, in receive_some\r\n    return await self.socket.recv(max_bytes)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_socket.py\", line 619, in wrapper\r\n    return await self._nonblocking_helper(fn, args, kwargs, wait_fn)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_socket.py\", line 610, in _nonblocking_helper\r\n    return fn(self._sock, *args, **kwargs)\r\nConnectionResetError: [Errno 54] Connection reset by peer\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"trio-server.py\", line 329, in <module>\r\n    trio.run(serve, 8080)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 1277, in run\r\n    return result.unwrap()\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/outcome/_sync.py\", line 107, in unwrap\r\n    raise self.error\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 1387, in run_impl\r\n    msg = task.context.run(task.coro.send, next_send)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/contextvars/__init__.py\", line 38, in run\r\n    return callable(*args, **kwargs)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 970, in init\r\n    self.entry_queue.spawn()\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/async_generator/_util.py\", line 42, in __aexit__\r\n    await self._agen.asend(None)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/async_generator/_impl.py\", line 366, in step\r\n    return await ANextIter(self._it, start_fn, *args)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/async_generator/_impl.py\", line 202, in send\r\n    return self._invoke(self._it.send, value)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/async_generator/_impl.py\", line 209, in _invoke\r\n    result = fn(*args)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 317, in open_nursery\r\n    await nursery._nested_child_finished(nested_child_exc)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/contextlib.py\", line 99, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 202, in open_cancel_scope\r\n    yield scope\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_multierror.py\", line 144, in __exit__\r\n    raise filtered_exc\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 202, in open_cancel_scope\r\n    yield scope\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 317, in open_nursery\r\n    await nursery._nested_child_finished(nested_child_exc)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 428, in _nested_child_finished\r\n    raise MultiError(self._pending_excs)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 1387, in run_impl\r\n    msg = task.context.run(task.coro.send, next_send)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/contextvars/__init__.py\", line 38, in run\r\n    return callable(*args, **kwargs)\r\n  File \"trio-server.py\", line 320, in serve\r\n    await trio.serve_tcp(http_serve, port)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_highlevel_open_tcp_listeners.py\", line 214, in serve_tcp\r\n    task_status=task_status\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_highlevel_serve_listeners.py\", line 129, in serve_listeners\r\n    task_status.started(listeners)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/async_generator/_util.py\", line 42, in __aexit__\r\n    await self._agen.asend(None)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/async_generator/_impl.py\", line 366, in step\r\n    return await ANextIter(self._it, start_fn, *args)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/async_generator/_impl.py\", line 202, in send\r\n    return self._invoke(self._it.send, value)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/async_generator/_impl.py\", line 209, in _invoke\r\n    result = fn(*args)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 317, in open_nursery\r\n    await nursery._nested_child_finished(nested_child_exc)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/contextlib.py\", line 99, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 202, in open_cancel_scope\r\n    yield scope\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_multierror.py\", line 144, in __exit__\r\n    raise filtered_exc\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 202, in open_cancel_scope\r\n    yield scope\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 317, in open_nursery\r\n    await nursery._nested_child_finished(nested_child_exc)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 428, in _nested_child_finished\r\n    raise MultiError(self._pending_excs)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_core/_run.py\", line 1387, in run_impl\r\n    msg = task.context.run(task.coro.send, next_send)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/contextvars/__init__.py\", line 38, in run\r\n    return callable(*args, **kwargs)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_highlevel_serve_listeners.py\", line 27, in _run_handler\r\n    await handler(stream)\r\n  File \"trio-server.py\", line 247, in http_serve\r\n    await wrapper.shutdown_and_clean_up()\r\n  File \"trio-server.py\", line 168, in shutdown_and_clean_up\r\n    got = await self.stream.receive_some(MAX_RECV)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_highlevel_socket.py\", line 141, in receive_some\r\n    return await self.socket.recv(max_bytes)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/contextlib.py\", line 99, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/Users/john/.pyenv/versions/3.6.5/lib/python3.6/site-packages/trio/_highlevel_socket.py\", line 34, in _translate_socket_errors_to_stream_errors\r\n    ) from exc\r\ntrio.BrokenStreamError: socket connection broken: [Errno 54] Connection reset by peer\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/63", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/63/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/63/events", "html_url": "https://github.com/python-hyper/h11/issues/63", "id": 310842921, "node_id": "MDU6SXNzdWUzMTA4NDI5MjE=", "number": 63, "title": "h11 does not distinguish between bytearray and bytestrings in equality tests", "user": {"login": "DaanDeMeyer", "id": 9395011, "node_id": "MDQ6VXNlcjkzOTUwMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9395011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaanDeMeyer", "html_url": "https://github.com/DaanDeMeyer", "followers_url": "https://api.github.com/users/DaanDeMeyer/followers", "following_url": "https://api.github.com/users/DaanDeMeyer/following{/other_user}", "gists_url": "https://api.github.com/users/DaanDeMeyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaanDeMeyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaanDeMeyer/subscriptions", "organizations_url": "https://api.github.com/users/DaanDeMeyer/orgs", "repos_url": "https://api.github.com/users/DaanDeMeyer/repos", "events_url": "https://api.github.com/users/DaanDeMeyer/events{/privacy}", "received_events_url": "https://api.github.com/users/DaanDeMeyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-03T13:44:33Z", "updated_at": "2018-04-15T05:26:10Z", "closed_at": "2018-04-15T05:26:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Python 2 and 3 `bytearray(b'host') == b'host'` is `True`. This results in issues like #60 where users of h11 end up with bytearray's instead of bytestrings. The tests in h11 don't catch these issues because they themselves rely on the python equality operator which returns True when comparing bytearrays and bytestrings that contain the same string.\r\n\r\nThis can be solved by changing the equality checks to require corresponding fields in both classes to be the same type instead of just checking for equality. I implemented this locally but it broke a lot of tests (since they all assume bytestring == bytearray) so I'm raising the issue here before going forward with fixing them all.\r\n\r\nAs an example of why bytestrings and bytearrays are not interchangeable: bytestring can be used as a dictionary key but bytearray can not (since it is mutable).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/61", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/61/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/61/events", "html_url": "https://github.com/python-hyper/h11/issues/61", "id": 310700559, "node_id": "MDU6SXNzdWUzMTA3MDA1NTk=", "number": 61, "title": "Document docs/source/_static/show-code.js copyright and license", "user": {"login": "sdelafond", "id": 201134, "node_id": "MDQ6VXNlcjIwMTEzNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/201134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdelafond", "html_url": "https://github.com/sdelafond", "followers_url": "https://api.github.com/users/sdelafond/followers", "following_url": "https://api.github.com/users/sdelafond/following{/other_user}", "gists_url": "https://api.github.com/users/sdelafond/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdelafond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdelafond/subscriptions", "organizations_url": "https://api.github.com/users/sdelafond/orgs", "repos_url": "https://api.github.com/users/sdelafond/repos", "events_url": "https://api.github.com/users/sdelafond/events{/privacy}", "received_events_url": "https://api.github.com/users/sdelafond/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-03T05:38:40Z", "updated_at": "2018-04-04T06:31:12Z", "closed_at": "2018-04-04T06:31:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nwhile packaging python-h11 in Debian, we noticed there was no clear copyright/license for this file, except for:\r\n\r\n    // Stolen from statsmodels and fixed up\r\n\r\nCould you document exactly where this is coming from, and what the copyright/license is, so I can include this information where needed ?\r\n\r\nCheers,\r\n\r\n--Seb", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/60", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/60/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/60/events", "html_url": "https://github.com/python-hyper/h11/issues/60", "id": 310312288, "node_id": "MDU6SXNzdWUzMTAzMTIyODg=", "number": 60, "title": "event.headers returns array of bytearray since 0.8.0", "user": {"login": "DaanDeMeyer", "id": 9395011, "node_id": "MDQ6VXNlcjkzOTUwMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9395011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaanDeMeyer", "html_url": "https://github.com/DaanDeMeyer", "followers_url": "https://api.github.com/users/DaanDeMeyer/followers", "following_url": "https://api.github.com/users/DaanDeMeyer/following{/other_user}", "gists_url": "https://api.github.com/users/DaanDeMeyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaanDeMeyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaanDeMeyer/subscriptions", "organizations_url": "https://api.github.com/users/DaanDeMeyer/orgs", "repos_url": "https://api.github.com/users/DaanDeMeyer/repos", "events_url": "https://api.github.com/users/DaanDeMeyer/events{/privacy}", "received_events_url": "https://api.github.com/users/DaanDeMeyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-01T09:58:16Z", "updated_at": "2018-04-15T04:45:03Z", "closed_at": "2018-04-15T04:45:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the process of upgrading wsproto to h11 0.8.0 I noticed that the _normed_header_dict method https://github.com/python-hyper/wsproto/blob/cbb93a34808cf4894914e91df81e99f957f2753d/wsproto/connection.py#L49 (which receives headers directly from h11 without any transformations as far as I'm aware) receives an array of strings when using h11 0.7.0 and an array of bytearrays when using h11 0.8.0 which breaks wsproto when using h11 0.8.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/58", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/58/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/58/events", "html_url": "https://github.com/python-hyper/h11/issues/58", "id": 307067348, "node_id": "MDU6SXNzdWUzMDcwNjczNDg=", "number": 58, "title": "Bug in vchar_or_obs_text regex: shouldn't accept DEL", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-20T22:52:46Z", "updated_at": "2018-10-30T04:52:33Z", "closed_at": "2018-10-30T04:52:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently our `vchar_or_obs_text` regex is:\r\n\r\n```python\r\nvchar_or_obs_text = r\"[\\x21-\\xff]\"\r\n```\r\n\r\nHowever, this is incorrect... VCHAR is `%x21-7E` and obs-text is `%x80-FF`, so there's actually a one character gap in the middle of the range: `\\x7f` (DEL) should *not* be included.\r\n\r\nOf course, we might need to relax these checks anyway (#57), but if we do this should be intentional, not an accident :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/57", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/57/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/57/events", "html_url": "https://github.com/python-hyper/h11/issues/57", "id": 306890850, "node_id": "MDU6SXNzdWUzMDY4OTA4NTA=", "number": 57, "title": "Fails to decode a header that requests can handle", "user": {"login": "miracle2k", "id": 13807, "node_id": "MDQ6VXNlcjEzODA3", "avatar_url": "https://avatars1.githubusercontent.com/u/13807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miracle2k", "html_url": "https://github.com/miracle2k", "followers_url": "https://api.github.com/users/miracle2k/followers", "following_url": "https://api.github.com/users/miracle2k/following{/other_user}", "gists_url": "https://api.github.com/users/miracle2k/gists{/gist_id}", "starred_url": "https://api.github.com/users/miracle2k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miracle2k/subscriptions", "organizations_url": "https://api.github.com/users/miracle2k/orgs", "repos_url": "https://api.github.com/users/miracle2k/repos", "events_url": "https://api.github.com/users/miracle2k/events{/privacy}", "received_events_url": "https://api.github.com/users/miracle2k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-03-20T14:31:03Z", "updated_at": "2018-10-30T04:51:06Z", "closed_at": "2018-05-06T20:34:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to read this url\r\n\r\n`https://www.bitstamp.net/api/v2/trading-pairs-info/`\r\n\r\nIt fails (see https://github.com/theelous3/asks/issues/60) with an exception:\r\n\r\n```\r\n....\r\n  File \"/Users/michael/.pyenv/versions/3.6.3/lib/python3.6/site-packages/h11/_readers.py\", line 85, in maybe_read_from_SEND_RESPONSE_server\r\n    return class_(headers=list(_decode_header_lines(lines[1:])),\r\n  File \"/Users/michael/.pyenv/versions/3.6.3/lib/python3.6/site-packages/h11/_readers.py\", line 55, in _decode_header_lines\r\n    matches = validate(header_field_re, line)\r\n  File \"/Users/michael/.pyenv/versions/3.6.3/lib/python3.6/site-packages/h11/_util.py\", line 96, in validate\r\n    raise LocalProtocolError(msg)\r\n```\r\n\r\nLooking closer, this is the header that seems to cause trouble:\r\n\r\n```bytearray(b'Set-Cookie: ___utmvafIumyLc=kUd\\x01UpAt; path=/; Max-Age=900')```\r\n\r\nMy guess is it's the ``\\x``.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/55", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/55/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/55/events", "html_url": "https://github.com/python-hyper/h11/issues/55", "id": 294222563, "node_id": "MDU6SXNzdWUyOTQyMjI1NjM=", "number": 55, "title": "Allow manual transition to Error state", "user": {"login": "Nikratio", "id": 701625, "node_id": "MDQ6VXNlcjcwMTYyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/701625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nikratio", "html_url": "https://github.com/Nikratio", "followers_url": "https://api.github.com/users/Nikratio/followers", "following_url": "https://api.github.com/users/Nikratio/following{/other_user}", "gists_url": "https://api.github.com/users/Nikratio/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nikratio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nikratio/subscriptions", "organizations_url": "https://api.github.com/users/Nikratio/orgs", "repos_url": "https://api.github.com/users/Nikratio/repos", "events_url": "https://api.github.com/users/Nikratio/events{/privacy}", "received_events_url": "https://api.github.com/users/Nikratio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-04T19:23:26Z", "updated_at": "2018-03-20T23:30:01Z", "closed_at": "2018-03-20T07:58:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am concerned about the situation where `Connection.send` gives me some data, but I am not able to actually send the data to the peer (e.g. because the connection was closed).\r\n\r\nThe cleanest solution that does not need any additional code higher up in the stack seemed to be to raise `h11.RemoteProtocolError` and switch the connection state to error. However, the connection state seems to be a read-only attribute.  This is unfortunate, because if I can't switch the connection state then I need to propagate this information differently - which is really weird because that means the same event (peer closed connection) will randomly exercise two different code paths (depending on the event being detected when we attempt to send or receive).\r\n\r\nWould it be possible to add an API function to force the connection into error state? Or alternatively, some way to communicate a failed send() back into h11?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/54", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/54/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/54/events", "html_url": "https://github.com/python-hyper/h11/issues/54", "id": 294116357, "node_id": "MDU6SXNzdWUyOTQxMTYzNTc=", "number": 54, "title": "Example code has sendfile where send is needed", "user": {"login": "gareth-rees", "id": 922721, "node_id": "MDQ6VXNlcjkyMjcyMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/922721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gareth-rees", "html_url": "https://github.com/gareth-rees", "followers_url": "https://api.github.com/users/gareth-rees/followers", "following_url": "https://api.github.com/users/gareth-rees/following{/other_user}", "gists_url": "https://api.github.com/users/gareth-rees/gists{/gist_id}", "starred_url": "https://api.github.com/users/gareth-rees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gareth-rees/subscriptions", "organizations_url": "https://api.github.com/users/gareth-rees/orgs", "repos_url": "https://api.github.com/users/gareth-rees/repos", "events_url": "https://api.github.com/users/gareth-rees/events{/privacy}", "received_events_url": "https://api.github.com/users/gareth-rees/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-03T14:48:58Z", "updated_at": "2018-03-20T23:30:01Z", "closed_at": "2018-02-05T01:08:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [API discussion of sendfile support](https://h11.readthedocs.io/en/latest/api.html#sendfile) contains the example code:\r\n```\r\ndef send_data(sock, data):\r\n    if isinstance(data, FilePlaceholder):\r\n        # socket.sendfile added in Python 3.5\r\n        sock.sendfile(data.file, data.offset, data.count)\r\n    else:\r\n        sock.sendfile(data)\r\n```\r\nThe second call to `socket.sendfile` looks like a mistake for `socket.send`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/53", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/53/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/53/events", "html_url": "https://github.com/python-hyper/h11/issues/53", "id": 292243650, "node_id": "MDU6SXNzdWUyOTIyNDM2NTA=", "number": 53, "title": "Not sure how else to get in touch :-)", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-28T22:07:10Z", "updated_at": "2018-03-20T23:30:01Z", "closed_at": "2018-01-30T01:48:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@nikratio Did you figure out your issue with AWS request signing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/52", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/52/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/52/events", "html_url": "https://github.com/python-hyper/h11/issues/52", "id": 292210132, "node_id": "MDU6SXNzdWUyOTIyMTAxMzI=", "number": 52, "title": "5xx response after Expect: 100-continue brings states out of sync", "user": {"login": "Nikratio", "id": 701625, "node_id": "MDQ6VXNlcjcwMTYyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/701625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nikratio", "html_url": "https://github.com/Nikratio", "followers_url": "https://api.github.com/users/Nikratio/followers", "following_url": "https://api.github.com/users/Nikratio/following{/other_user}", "gists_url": "https://api.github.com/users/Nikratio/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nikratio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nikratio/subscriptions", "organizations_url": "https://api.github.com/users/Nikratio/orgs", "repos_url": "https://api.github.com/users/Nikratio/repos", "events_url": "https://api.github.com/users/Nikratio/events{/privacy}", "received_events_url": "https://api.github.com/users/Nikratio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-28T14:50:06Z", "updated_at": "2018-03-20T23:30:01Z", "closed_at": "2018-01-28T20:59:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking at the following code:\r\n\r\n```\r\n        while True:\r\n            event = await self.server.next_event()\r\n            log.debug('received %s', type(event))\r\n            if not isinstance(event, h11.Data):\r\n                break\r\n        assert isinstance(event, h11.EndOfMessage)\r\n\r\n        log.debug('state is %s', self.server.h11.our_state)\r\n```\r\n\r\nHere, self.server.h11 is an h11 object with role=h11.CLIENT, and self.server is a thin wrapper to implement I/O with trio. When I run this code, I sometimes get the following log messages:\r\n\r\n```\r\n14:19:16.517 DEBUG    gruagach.server.handle_passthrough: (conn 11) received <class 'h11._events.Response'>\r\n14:19:16.518 DEBUG    gruagach.server.handle_passthrough: (conn 11) received <class 'h11._events.Data'> \r\n14:19:16.518 DEBUG    gruagach.server.handle_passthrough: (conn 11) received <class 'h11._events.EndOfMessage'> \r\n14:19:16.518 DEBUG    gruagach.server.handle_passthrough: (conn 11) state is SEND_BODY\r\n```\r\n\r\nI don't understand how this can possibly happen. How can the state be SEND_BODY when the most recenly received event is EndOfMessage?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/51", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/51/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/51/events", "html_url": "https://github.com/python-hyper/h11/issues/51", "id": 288708340, "node_id": "MDU6SXNzdWUyODg3MDgzNDA=", "number": 51, "title": "Confusing absence of response in client state diagram", "user": {"login": "Nikratio", "id": 701625, "node_id": "MDQ6VXNlcjcwMTYyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/701625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nikratio", "html_url": "https://github.com/Nikratio", "followers_url": "https://api.github.com/users/Nikratio/followers", "following_url": "https://api.github.com/users/Nikratio/following{/other_user}", "gists_url": "https://api.github.com/users/Nikratio/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nikratio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nikratio/subscriptions", "organizations_url": "https://api.github.com/users/Nikratio/orgs", "repos_url": "https://api.github.com/users/Nikratio/repos", "events_url": "https://api.github.com/users/Nikratio/events{/privacy}", "received_events_url": "https://api.github.com/users/Nikratio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-15T20:28:39Z", "updated_at": "2018-10-30T05:12:35Z", "closed_at": "2018-10-30T05:12:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirst, thanks for writing h11! I'd like to use HTTP with curio, and it will save me a lot of time!\r\n\r\nIt seems to me that there is something wrong with the client state diagram in the documentation. According to the diagram, I think the client out to be able to continously send requests without ever receiving a response - but later on, you explicitly say that h11 doesn't support pipelining in the client. So I think there state diagram misses a few states related to reading the response from the server.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/50", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/50/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/50/events", "html_url": "https://github.com/python-hyper/h11/issues/50", "id": 274103865, "node_id": "MDU6SXNzdWUyNzQxMDM4NjU=", "number": 50, "title": "Ponder this SSRF talk", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-15T10:21:43Z", "updated_at": "2019-04-24T05:38:10Z", "closed_at": "2019-04-24T05:38:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf\r\n\r\nh11 in client mode refuses to let you send a `Host:` header with an embedded newline, which protects against some of the attacks they're talking about. (This apparently distinguishes us from every Python HTTP library they studied.)\r\n\r\nDo we validate outgoing request targets? (The `/` part in `GET /`?)\r\n\r\nIs there anything else in there that's in scope for us? We certainly can't do anything about SNI. We don't actually deal with URLs, though I have been thinking that we should perhaps do more validation of incoming request targets in the rare case where there's something useful to validate (like checking that the authority if given matches the `Host:`).\r\n\r\nThe IDNA stuff is definitely not in scope for h11, but I'll note in passing that I'm confused: their table doesn't match the behavior of the `idna` module at all. The \"uts46\" column matches what you see with `uts46=True, transitional=True` (which is a mode that UTS-46 tries hard to dissuade you from using -- they want you to use `uts46=True, transitional=False`). If you use `uts46=True, transitional=False`, then the circled letters one gives `google.com` but the `\\u200D` one is an error and `ba\u00df.de` gives `xn--ba-hia.de`. And if you use pure IDNA2008 (which literally nobody does, it errors out on capital letters), then the `\\u200D` one still gives an error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/49", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/49/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/49/events", "html_url": "https://github.com/python-hyper/h11/issues/49", "id": 241309703, "node_id": "MDU6SXNzdWUyNDEzMDk3MDM=", "number": 49, "title": "Provide trio http server example", "user": {"login": "parity3", "id": 9721234, "node_id": "MDQ6VXNlcjk3MjEyMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9721234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parity3", "html_url": "https://github.com/parity3", "followers_url": "https://api.github.com/users/parity3/followers", "following_url": "https://api.github.com/users/parity3/following{/other_user}", "gists_url": "https://api.github.com/users/parity3/gists{/gist_id}", "starred_url": "https://api.github.com/users/parity3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parity3/subscriptions", "organizations_url": "https://api.github.com/users/parity3/orgs", "repos_url": "https://api.github.com/users/parity3/repos", "events_url": "https://api.github.com/users/parity3/events{/privacy}", "received_events_url": "https://api.github.com/users/parity3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-07-07T16:06:12Z", "updated_at": "2018-06-29T05:55:35Z", "closed_at": "2018-02-05T00:55:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't find a trio example of an http server along side the curio. I suspect it's going to be similar to curio, so not much work here. Author probably has this lying around somewhere. It would be great to see in the repo!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/48", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/48/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/48/events", "html_url": "https://github.com/python-hyper/h11/issues/48", "id": 238811567, "node_id": "MDU6SXNzdWUyMzg4MTE1Njc=", "number": 48, "title": "Cyrillic error", "user": {"login": "wku", "id": 1430712, "node_id": "MDQ6VXNlcjE0MzA3MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1430712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wku", "html_url": "https://github.com/wku", "followers_url": "https://api.github.com/users/wku/followers", "following_url": "https://api.github.com/users/wku/following{/other_user}", "gists_url": "https://api.github.com/users/wku/gists{/gist_id}", "starred_url": "https://api.github.com/users/wku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wku/subscriptions", "organizations_url": "https://api.github.com/users/wku/orgs", "repos_url": "https://api.github.com/users/wku/repos", "events_url": "https://api.github.com/users/wku/events{/privacy}", "received_events_url": "https://api.github.com/users/wku/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-27T10:53:03Z", "updated_at": "2018-03-20T23:30:00Z", "closed_at": "2017-06-27T11:32:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "send(h11.Request(method=\"GET\", target=\"/get?ttt=\u041b\u0414\u041e\u0420\",   headers=[(\"Host\", \"httpbin.org\"),   (\"Connection\", \"close\")]))\r\n...\r\n  File \"/home/wku/anaconda3/lib/python3.6/site-packages/h11/_util.py\", line 119, in bytesify\r\n    s = s.encode(\"ascii\")\r\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 9-12: ordinal not in range(128)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/47", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/47/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/47/events", "html_url": "https://github.com/python-hyper/h11/issues/47", "id": 237422356, "node_id": "MDU6SXNzdWUyMzc0MjIzNTY=", "number": 47, "title": "discussion: what does mitmproxy need?", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-06-21T05:53:59Z", "updated_at": "2018-10-30T05:19:20Z", "closed_at": "2018-10-30T05:19:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I've been talking with @mhils a bit about this on IRC, and there's some discussion in https://github.com/njsmith/h11/issues/31#issuecomment-309774081, but I kind of want to see mitmproxy's requirements all written down in one place. Let's use this issue for that.\r\n\r\n@mhils says:\r\n\r\n> The main pain points for us are usually along these lines:\r\n>\r\n> 1. Capturing/send data exactly as-is (we want to mirror the client accurately, e.g. header capitalization)\r\n> 2. Tolerance for slightly misbehaving clients (of course, we reject absurdly wrong data)\r\n>\r\n> I think headers are the only blocking issue for us right now. h11's request/response validation is considerably stricter than what we do right now, but I'm slightly optimistic that we could at least patch this effortlessly.\r\n\r\nHere are some places off the top of my head where h11 currently will not do byte-for-byte pass-through:\r\n\r\n* Header capitalization, as noted\r\n* h11 understands HTTP/1.0, but it never emits it\r\n* But h11 doesn't understand the non-standard keep-alive extensions sometimes used with HTTP/1.0. Which is fine when it's implementing one side of a connection because it can make sure that it never gets used. But if you're trying to eavesdrop on connections between an arbitrary client/server, it's possible that they'll decide to use it and h11 will get confused.\r\n* Also, h11 will unconditionally insert or rewrite headers in some cases (in particular `Transfer-Encoding` and `Connection`)\r\n* h11 will eventually tolerate non-compliant line-endings (#7), but won't emit them\r\n* Leading and trailing whitespace in header values is always discarded\r\n* We understand headers split over multiple continuation lines, but don't emit them\r\n* We tolerate missing reason phrases (#32), but don't emit them\r\n* Chunked encoding boundaries: Currently we do expose where the boundaries fall because @Lukasa needed this for urllib3 (#19), but I think urllib3 has come to their senses and decided they don't need this after all, so I was kinda hoping we could get rid of it again :-). Also, the way we expose them is sub-optimal if your goal is to regenerate them, because we don't expose the length; you just have to buffer the whole chunk and then re-emit it all at once, which is unnecessary unbounded memory overhead.\r\n* Speaking of chunked encoding, we also discard [chunk extension metadata](https://tools.ietf.org/html/rfc7230#section-4.1.1) and provide no way to emit it.\r\n\r\nThere are probably a few other issues like this that I'm not thinking of right now.\r\n\r\nAlso, as noted, we're pretty strict about forbidding a lot of things that a pentester might reasonably want to emit. (In fact, \"would a pentester find this useful\" is one of the criteria that we use to decide what to forbid, because generally you don't want your software to be accidentally turned into a pentester :-).) Some kinds of validation could be disabled without *too* much work (see e.g. #33), but other kinds are more difficult. For example, h11 absolutely won't tolerate incoming data with whitespace around header names (`Host  : example.com`) or illegal characters in header values \u2013 both of which are classic sources of security bugs \u00ad\u2013 and this is enforced implicitly by the regexes used to parse the header name and value in the first place, rather than being some extra code that could be switched on or off.\r\n\r\nI guess if you want to monkeypatch that's your business, but if you go that route then I feel like I should give you the standard warning just as a matter of practicality I don't think we can guarantee that your monkeypatches will keep working in future releases, or that the hooks you're trying to monkeypatch will even still exist. API guarantees only apply to APIs :-).\r\n\r\nSo... if you need h11 to be able to handle *all* of the pass-through cases listed above, then realistically I don't see how to implement that without the codebase turning into something monstrous and full of bugs. From discussions so far I'm guessing you don't actually care about all of these, but currently I don't understand the criteria that determine which ones you care about and which ones you don't, so I can't guess which ones are important. (In particular, it seems like HTTP/1.0 stuff might matter in practice?) Can you elaborate?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/45", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/45/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/45/events", "html_url": "https://github.com/python-hyper/h11/issues/45", "id": 221921639, "node_id": "MDU6SXNzdWUyMjE5MjE2Mzk=", "number": 45, "title": "Basic how h11 was working", "user": {"login": "blackshirt", "id": 1082669, "node_id": "MDQ6VXNlcjEwODI2Njk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1082669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blackshirt", "html_url": "https://github.com/blackshirt", "followers_url": "https://api.github.com/users/blackshirt/followers", "following_url": "https://api.github.com/users/blackshirt/following{/other_user}", "gists_url": "https://api.github.com/users/blackshirt/gists{/gist_id}", "starred_url": "https://api.github.com/users/blackshirt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blackshirt/subscriptions", "organizations_url": "https://api.github.com/users/blackshirt/orgs", "repos_url": "https://api.github.com/users/blackshirt/repos", "events_url": "https://api.github.com/users/blackshirt/events{/privacy}", "received_events_url": "https://api.github.com/users/blackshirt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-15T02:37:36Z", "updated_at": "2018-03-20T23:30:00Z", "closed_at": "2017-04-15T07:24:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to grasp h11 how it working, here when i construct and build request manually, and send it over ssl socket. I think it works normally, \r\n\r\n```python\r\nPython` 3.6.1 |Continuum Analytics, Inc.| (default, Mar 22 2017, 19:53:44) \r\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import h11, socket, ssl\r\n>>> ctx = ssl.create_default_context()\r\n>>> sock = ctx.wrap_socket(socket.create_connection((\"httpbin.org\", 443)), server_hostname=\"httpbin.org\")\r\n>>> sock.sendall(b\"GET /get HTTP/1.1\\r\\nhost: httpbin.org\\r\\n\\r\\n\")\r\n>>> data = sock.recv(1024)\r\n>>> data\r\nb'HTTP/1.1 200 OK\\r\\nConnection: keep-alive\\r\\nServer: gunicorn/19.7.1\\r\\nDate: Sat, 15 Apr 2017 02:26:31 GMT\\r\\nContent-Type: application/json\\r\\nAccess-Control-Allow-Origin: *\\r\\nAccess-Control-Allow-Credentials: true\\r\\nContent-Length: 160\\r\\nVia: 1.1 vegur\\r\\n\\r\\n{\\n  \"args\": {}, \\n  \"headers\": {\\n    \"Connection\": \"close\", \\n    \"Host\": \"httpbin.org\"\\n  }, \\n  \"origin\": \"112.215.153.61\", \\n  \"url\": \"https://httpbin.org/get\"\\n}\\n'\r\n>>> print(data.decode('ascii'))\r\nHTTP/1.1 200 OK\r\nConnection: keep-alive\r\nServer: gunicorn/19.7.1\r\nDate: Sat, 15 Apr 2017 02:26:31 GMT\r\nContent-Type: application/json\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Allow-Credentials: true\r\nContent-Length: 160\r\nVia: 1.1 vegur\r\n\r\n{\r\n  \"args\": {}, \r\n  \"headers\": {\r\n    \"Connection\": \"close\", \r\n    \"Host\": \"httpbin.org\"\r\n  }, \r\n  \"origin\": \"112.215.153.61\", \r\n  \"url\": \"https://httpbin.org/get\"\r\n}\r\n\r\n>>>\r\n```\r\n\r\nHere where i'm trying to use h11 construct .. i'm using examples from the official docs, so ..its should works normally too\r\n\r\n```python\r\n>>> import ssl, socket, h11\r\n>>> ctx = ssl.create_default_context()\r\n>>> sock = ctx.wrap_socket(socket.create_connection((\"httpbin.org\", 443)), server_hostname=\"httpbin.org\")\r\n>>> conn = h11.Connection(our_role=h11.CLIENT)\r\n>>> req = h11.Request(method=\"GET\", target=\"/get\", headers=[(\"Host\", \"httpbin,org\")])\r\n>>> btosend = conn.send(req)\r\n>>> sock.sendall(btosend)\r\n>>> sock.sendall(conn.send(h11.EndOfMessage()))\r\n>>> data = sock.recv(1024)\r\n>>> conn.receive_data(data)\r\n>>> conn.next_event()\r\nTraceback (most recent call last):\r\n  File \"/home/simbah/miniconda3/lib/python3.6/site-packages/h11/_state.py\", line 249, in _fire_event_triggered_transitions\r\n    new_state = EVENT_TRIGGERED_TRANSITIONS[role][state][event_type]\r\nKeyError: <class 'h11._events.ConnectionClosed'>\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/simbah/miniconda3/lib/python3.6/site-packages/h11/_connection.py\", line 439, in next_event\r\n    exc._reraise_as_remote_protocol_error()\r\n  File \"/home/simbah/miniconda3/lib/python3.6/site-packages/h11/_util.py\", line 71, in _reraise_as_remote_protocol_error\r\n    raise self\r\n  File \"/home/simbah/miniconda3/lib/python3.6/site-packages/h11/_connection.py\", line 422, in next_event\r\n    self._process_event(self.their_role, event)\r\n  File \"/home/simbah/miniconda3/lib/python3.6/site-packages/h11/_connection.py\", line 238, in _process_event\r\n    self._cstate.process_event(role, type(event), server_switch_event)\r\n  File \"/home/simbah/miniconda3/lib/python3.6/site-packages/h11/_state.py\", line 238, in process_event\r\n    self._fire_event_triggered_transitions(role, event_type)\r\n  File \"/home/simbah/miniconda3/lib/python3.6/site-packages/h11/_state.py\", line 253, in _fire_event_triggered_transitions\r\n    .format(event_type, role, self.states[role]))\r\nh11._util.RemoteProtocolError: can't handle event type <class 'h11._events.ConnectionClosed'> for SERVER in state SEND_RESPONSE\r\n>>> \r\n```\r\n\r\nWhats the problem was ... ? \r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/44", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/44/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/44/events", "html_url": "https://github.com/python-hyper/h11/issues/44", "id": 220486946, "node_id": "MDU6SXNzdWUyMjA0ODY5NDY=", "number": 44, "title": "vs hyper-h2", "user": {"login": "merrellb", "id": 309627, "node_id": "MDQ6VXNlcjMwOTYyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/309627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/merrellb", "html_url": "https://github.com/merrellb", "followers_url": "https://api.github.com/users/merrellb/followers", "following_url": "https://api.github.com/users/merrellb/following{/other_user}", "gists_url": "https://api.github.com/users/merrellb/gists{/gist_id}", "starred_url": "https://api.github.com/users/merrellb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/merrellb/subscriptions", "organizations_url": "https://api.github.com/users/merrellb/orgs", "repos_url": "https://api.github.com/users/merrellb/repos", "events_url": "https://api.github.com/users/merrellb/events{/privacy}", "received_events_url": "https://api.github.com/users/merrellb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-09T17:53:52Z", "updated_at": "2018-03-20T23:30:00Z", "closed_at": "2017-04-11T05:11:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I notice that hyper-h2 was an inspiration for h11 but it isn't clear to me how they differ.  My quick read of the hyper-h2 documentation seems to suggest that it also supports HTTP 1.1 and takes a similar implementation neutral approach.   What factors would lead one to use h11 vs hyper-h2?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/43", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/43/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/43/events", "html_url": "https://github.com/python-hyper/h11/issues/43", "id": 218002477, "node_id": "MDU6SXNzdWUyMTgwMDI0Nzc=", "number": 43, "title": "RemoteProtocolError when an expecting client bails out", "user": {"login": "vfaronov", "id": 300211, "node_id": "MDQ6VXNlcjMwMDIxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/300211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vfaronov", "html_url": "https://github.com/vfaronov", "followers_url": "https://api.github.com/users/vfaronov/followers", "following_url": "https://api.github.com/users/vfaronov/following{/other_user}", "gists_url": "https://api.github.com/users/vfaronov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vfaronov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vfaronov/subscriptions", "organizations_url": "https://api.github.com/users/vfaronov/orgs", "repos_url": "https://api.github.com/users/vfaronov/repos", "events_url": "https://api.github.com/users/vfaronov/events{/privacy}", "received_events_url": "https://api.github.com/users/vfaronov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-03-29T20:40:57Z", "updated_at": "2018-04-15T05:28:40Z", "closed_at": "2018-04-15T05:28:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "We get a request with `Expect: 100-continue`, like those that curl is known for sending:\r\n\r\n```\r\nimport h11\r\nconn = h11.Connection(our_role=h11.SERVER)\r\nconn.receive_data(b'POST / HTTP/1.1\\r\\n'\r\n                  b'Host: example\\r\\n'\r\n                  b'Content-Length: 9001\\r\\n'\r\n                  b'Expect: 100-continue\\r\\n'\r\n                  b'\\r\\n')\r\nassert isinstance(conn.next_event(), h11.Request)\r\n```\r\n\r\nBut we decide we don\u2019t want to handle it:\r\n\r\n```\r\nconn.send(h11.Response(status_code=403,\r\n                       headers=[]))\r\nconn.send(h11.EndOfMessage())\r\n```\r\n\r\nThe only sensible thing for the client to do in this situation is to close the connection:\r\n\r\n```\r\nconn.receive_data(b'')\r\nconn.next_event()\r\n```\r\n\r\nBut that gives us:\r\n\r\n```\r\nh11._util.RemoteProtocolError: peer closed connection without sending complete message body (received 0 bytes, expected 9001)\r\n```\r\n\r\nThis is not a protocol error, this is exactly what the 100-continue dance was designed for.\r\n\r\nI\u2019m not sure what is the right thing to do here. Maybe the current behavior is a good simplification. Or maybe h11 could accept the `ConnectionClosed` event from the client when `our_state in [h11.SEND_BODY, h11.DONE]`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/39", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/39/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/39/events", "html_url": "https://github.com/python-hyper/h11/issues/39", "id": 215891268, "node_id": "MDU6SXNzdWUyMTU4OTEyNjg=", "number": 39, "title": "h11 does not prevent response splitting", "user": {"login": "vfaronov", "id": 300211, "node_id": "MDQ6VXNlcjMwMDIxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/300211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vfaronov", "html_url": "https://github.com/vfaronov", "followers_url": "https://api.github.com/users/vfaronov/followers", "following_url": "https://api.github.com/users/vfaronov/following{/other_user}", "gists_url": "https://api.github.com/users/vfaronov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vfaronov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vfaronov/subscriptions", "organizations_url": "https://api.github.com/users/vfaronov/orgs", "repos_url": "https://api.github.com/users/vfaronov/repos", "events_url": "https://api.github.com/users/vfaronov/events{/privacy}", "received_events_url": "https://api.github.com/users/vfaronov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-21T21:57:57Z", "updated_at": "2018-03-20T23:30:00Z", "closed_at": "2017-03-21T23:36:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given how many checks h11 enforces (such as `Host` on HTTP/1.1 requests), I was surprised to see that it does not prevent [response splitting](https://tools.ietf.org/html/rfc7230#section-9.4):\r\n\r\n```\r\nimport h11\r\nconn = h11.Connection(our_role=h11.SERVER)\r\ndata = conn.send(h11.Response(\r\n    status_code=200,\r\n    headers=[(b'Content-Type', b'text/plain\\r\\nContent-Length: 0\\r\\n\\r\\n'\r\n                               b'HTTP/1.1 500 Internal Server Error')]))\r\nprint(data.decode())\r\n```\r\n\r\nThis prints:\r\n\r\n```\r\nHTTP/1.1 200 \r\ncontent-type: text/plain\r\nContent-Length: 0\r\n\r\nHTTP/1.1 500 Internal Server Error\r\nconnection: close\r\n\r\n\r\n```\r\n\r\nI guess this should be easy to prevent in h11. This is not a problem for me though, just a suggestion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/38", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/38/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/38/events", "html_url": "https://github.com/python-hyper/h11/issues/38", "id": 215868820, "node_id": "MDU6SXNzdWUyMTU4Njg4MjA=", "number": 38, "title": "\u201cExpect: 100-continue\u201d is treated case-sensitively", "user": {"login": "vfaronov", "id": 300211, "node_id": "MDQ6VXNlcjMwMDIxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/300211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vfaronov", "html_url": "https://github.com/vfaronov", "followers_url": "https://api.github.com/users/vfaronov/followers", "following_url": "https://api.github.com/users/vfaronov/following{/other_user}", "gists_url": "https://api.github.com/users/vfaronov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vfaronov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vfaronov/subscriptions", "organizations_url": "https://api.github.com/users/vfaronov/orgs", "repos_url": "https://api.github.com/users/vfaronov/repos", "events_url": "https://api.github.com/users/vfaronov/events{/privacy}", "received_events_url": "https://api.github.com/users/vfaronov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-21T20:32:36Z", "updated_at": "2018-03-20T23:30:00Z", "closed_at": "2017-04-27T00:03:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "h11 currently [checks for the `100-continue` expectation](https://github.com/njsmith/h11/blob/a894b105bc6b54cd892aeff2fab12dd6431ab458/h11/_headers.py#L161-L163) case-sensitively.\r\n\r\nHowever, according to [RFC 7231 \u00a7 5.1.1](https://tools.ietf.org/html/rfc7231#section-5.1.1):\r\n\r\n> The Expect field-value is case-insensitive.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/37", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/37/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/37/events", "html_url": "https://github.com/python-hyper/h11/issues/37", "id": 215509261, "node_id": "MDU6SXNzdWUyMTU1MDkyNjE=", "number": 37, "title": "Docs cut off in the \u201cFlow control details\u201d section", "user": {"login": "vfaronov", "id": 300211, "node_id": "MDQ6VXNlcjMwMDIxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/300211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vfaronov", "html_url": "https://github.com/vfaronov", "followers_url": "https://api.github.com/users/vfaronov/followers", "following_url": "https://api.github.com/users/vfaronov/following{/other_user}", "gists_url": "https://api.github.com/users/vfaronov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vfaronov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vfaronov/subscriptions", "organizations_url": "https://api.github.com/users/vfaronov/orgs", "repos_url": "https://api.github.com/users/vfaronov/repos", "events_url": "https://api.github.com/users/vfaronov/events{/privacy}", "received_events_url": "https://api.github.com/users/vfaronov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-20T18:12:16Z", "updated_at": "2018-03-20T23:30:00Z", "closed_at": "2017-03-21T23:40:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "The \u201c[Details of our HTTP support for HTTP nerds](http://h11.readthedocs.io/en/latest/supported-http.html)\u201d section of the docs seems to be cut off in the middle of a sentence:\r\n\r\n> First, pause handling is actually identical for both the client and server", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/36", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/36/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/36/events", "html_url": "https://github.com/python-hyper/h11/issues/36", "id": 215212748, "node_id": "MDU6SXNzdWUyMTUyMTI3NDg=", "number": 36, "title": "SSL Error broke current docs build", "user": {"login": "danielballan", "id": 2279598, "node_id": "MDQ6VXNlcjIyNzk1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2279598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielballan", "html_url": "https://github.com/danielballan", "followers_url": "https://api.github.com/users/danielballan/followers", "following_url": "https://api.github.com/users/danielballan/following{/other_user}", "gists_url": "https://api.github.com/users/danielballan/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielballan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielballan/subscriptions", "organizations_url": "https://api.github.com/users/danielballan/orgs", "repos_url": "https://api.github.com/users/danielballan/repos", "events_url": "https://api.github.com/users/danielballan/events{/privacy}", "received_events_url": "https://api.github.com/users/danielballan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-18T18:35:05Z", "updated_at": "2018-03-20T23:30:00Z", "closed_at": "2017-03-18T20:38:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Everything in [the basic client section](https://h11.readthedocs.io/en/latest/basic-usage.html#a-basic-client-object) is broken because of this error that occurred while initializing `client`.\r\n\r\n```\r\nSSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:645)\r\n```\r\n\r\nSorry that this is an issue and not a PR. I don't have much experience with SSL in Python. It's possible that this is a transient error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/35", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/35/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/35/events", "html_url": "https://github.com/python-hyper/h11/issues/35", "id": 215130195, "node_id": "MDU6SXNzdWUyMTUxMzAxOTU=", "number": 35, "title": "Avoiding copies", "user": {"login": "bluetech", "id": 1223550, "node_id": "MDQ6VXNlcjEyMjM1NTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1223550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluetech", "html_url": "https://github.com/bluetech", "followers_url": "https://api.github.com/users/bluetech/followers", "following_url": "https://api.github.com/users/bluetech/following{/other_user}", "gists_url": "https://api.github.com/users/bluetech/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluetech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluetech/subscriptions", "organizations_url": "https://api.github.com/users/bluetech/orgs", "repos_url": "https://api.github.com/users/bluetech/repos", "events_url": "https://api.github.com/users/bluetech/events{/privacy}", "received_events_url": "https://api.github.com/users/bluetech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-17T21:46:04Z", "updated_at": "2018-10-30T05:21:21Z", "closed_at": "2018-10-30T05:21:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "These are some uneducated musings (I am not really knowledgeable about network programming).\r\n\r\nLet's say we are writing a simple-minded server over a TCP socket. For simplicity I am only talking about the receive path, not the send path. The basic flow using h11 is:\r\n\r\n1. `recv` from the socket into a buffer.\r\n2. Pass the data to h11, which copies it into its own buffer.\r\n\r\nA side note about the first step (not the topic of this issue): this is usually done using `data = socket.recv(BUF_SIZE)`. From my reading of the cpython code, the way python does this magic is that it just allocates a fresh buffer of size `BUF_SIZE` and reads into that. If `BUF_SIZE - 1 < SMALL_REQUEST_THRESHOLD (= 512)`, this might come from some memory pool, otherwise it's just `malloc`. So for a C programmer, this seems very wasteful. But fortunately it seems possible to reuse a buffer by doing something like this (I haven't checked to see if it actually makes a difference):\r\n\r\n```python\r\nrecvbuf = bytearray(BUF_SIZE)\r\nrecvview = memoryview(recvview)\r\n\r\n<loop>:\r\n    nread = socket.recv_into(recvbuf)\r\n    data = recvview[:nread]\r\n```\r\n\r\nWhat I *do* want to talk about (and is actually relevant to h11...) is the fact that we make two copies of the data: kernel -> buffer, buffer -> h11. It seems natural to ask: can we reduce this to one copy?\r\n\r\nI don't think this is a pressing issue for h11, as any copying overhead is pretty minor compared to other overhead, currently. But it seems interesting to ask in relation to the sans-io methodology in general.\r\n\r\nOne way I imagine this could work, without inverting the logic again and losing the advantage of sans-io, is to have a way for h11 itself provide a buffer for the application to `recv` into. Like maybe the application tells `h11` how much it wants to `recv`, and gets back a `memoryview` of h11's buffer. Then it receives into that and tells h11 how much it read. But there are probably better ways.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/30", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/30/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/30/events", "html_url": "https://github.com/python-hyper/h11/issues/30", "id": 208015807, "node_id": "MDU6SXNzdWUyMDgwMTU4MDc=", "number": 30, "title": "Expose public API for HTTP parser", "user": {"login": "parasyte", "id": 456942, "node_id": "MDQ6VXNlcjQ1Njk0Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/456942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parasyte", "html_url": "https://github.com/parasyte", "followers_url": "https://api.github.com/users/parasyte/followers", "following_url": "https://api.github.com/users/parasyte/following{/other_user}", "gists_url": "https://api.github.com/users/parasyte/gists{/gist_id}", "starred_url": "https://api.github.com/users/parasyte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parasyte/subscriptions", "organizations_url": "https://api.github.com/users/parasyte/orgs", "repos_url": "https://api.github.com/users/parasyte/repos", "events_url": "https://api.github.com/users/parasyte/events{/privacy}", "received_events_url": "https://api.github.com/users/parasyte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-16T04:49:27Z", "updated_at": "2018-03-20T23:29:59Z", "closed_at": "2018-02-02T19:33:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I found this module by complete mistake while reading through your [admittedly excellent] [async-await](https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/) blog article. It was a serendipity find because I wasn't looking for it, but `h11` is exactly what I need.\r\n\r\nWe have a [very big] cluster of PyPy servers that has a complex connection pool written in-house to maintain its backend connections. TL;DR: [`requests`](http://docs.python-requests.org/en/master/) is great but its connection pooling does not do the kind of pooling we need.\r\n\r\nTo cut a long story short, the connection pool implementation suffers from the synchronous request behavior of every Python HTTP client on the planet. The two options to solve this are:\r\n\r\n1. HTTP/1.1 pipelining\r\n2. HTTP/2\r\n\r\nOur backend [doesn't support HTTP/2](https://github.com/unbit/uwsgi/issues/1269) so strike that option.\r\n\r\nSo we've experimented with pipelining using [`http-parser`](https://github.com/benoitc/http-parser/), and well, it kind of works.\r\n\r\nThen I found `h11`, and I was overjoyed! [Welp, that didn't last...](https://h11.readthedocs.io/en/latest/api.html#re-using-a-connection-keep-alive-and-pipelining).\r\n\r\n> HTTP/1.1 also allows for a more aggressive form of connection re-use, in which a client sends multiple requests in quick succession, and then waits for the responses to stream back in order (\u201cpipelining\u201d). This is generally considered to have been a bad idea, because it makes things like error recovery very complicated.\r\n\r\nBut I'm not deterred. It's either pipelining or maintaining *several hundred thousand* open connections on the backends. And the latter is really horrifying.\r\n\r\nFor the short term, I'll be experimenting with the `h11` parsers by using their private references, and hopefully not running into anything unexpected. For the medium and long term, I'd like to see the parsers publicly exposed and documented for insane use cases like mine. :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/28", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/28/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/28/events", "html_url": "https://github.com/python-hyper/h11/issues/28", "id": 204916540, "node_id": "MDU6SXNzdWUyMDQ5MTY1NDA=", "number": 28, "title": "pep8 examples please", "user": {"login": "dimaqq", "id": 662249, "node_id": "MDQ6VXNlcjY2MjI0OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/662249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimaqq", "html_url": "https://github.com/dimaqq", "followers_url": "https://api.github.com/users/dimaqq/followers", "following_url": "https://api.github.com/users/dimaqq/following{/other_user}", "gists_url": "https://api.github.com/users/dimaqq/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimaqq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimaqq/subscriptions", "organizations_url": "https://api.github.com/users/dimaqq/orgs", "repos_url": "https://api.github.com/users/dimaqq/repos", "events_url": "https://api.github.com/users/dimaqq/events{/privacy}", "received_events_url": "https://api.github.com/users/dimaqq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-02-02T16:03:25Z", "updated_at": "2020-08-13T09:33:53Z", "closed_at": "2020-08-13T09:33:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/26", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/26/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/26/events", "html_url": "https://github.com/python-hyper/h11/issues/26", "id": 194113984, "node_id": "MDU6SXNzdWUxOTQxMTM5ODQ=", "number": 26, "title": "Chunk extensions", "user": {"login": "Lukasa", "id": 1382556, "node_id": "MDQ6VXNlcjEzODI1NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1382556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lukasa", "html_url": "https://github.com/Lukasa", "followers_url": "https://api.github.com/users/Lukasa/followers", "following_url": "https://api.github.com/users/Lukasa/following{/other_user}", "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions", "organizations_url": "https://api.github.com/users/Lukasa/orgs", "repos_url": "https://api.github.com/users/Lukasa/repos", "events_url": "https://api.github.com/users/Lukasa/events{/privacy}", "received_events_url": "https://api.github.com/users/Lukasa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-12-07T17:29:16Z", "updated_at": "2018-03-20T23:29:59Z", "closed_at": "2016-12-07T21:15:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Well, you predicted it from #19! And here it is.\r\n\r\nRight now, amazingly, urllib3 actually tests that it can handle chunk extensions. This is the first I have seen that demonstrates that we actually do it, but here we are.\r\n\r\nI am *open* to being told that we should drop that support, but I wanted to ask whether you think it's worth doing either of the following two things:\r\n\r\n1. Fully supporting chunk extensions.\r\n2. Merely *tolerating* them (ignoring them if they are received)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/22", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/22/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/22/events", "html_url": "https://github.com/python-hyper/h11/issues/22", "id": 192686468, "node_id": "MDU6SXNzdWUxOTI2ODY0Njg=", "number": 22, "title": "Status Code strings", "user": {"login": "nhumrich", "id": 4661889, "node_id": "MDQ6VXNlcjQ2NjE4ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4661889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhumrich", "html_url": "https://github.com/nhumrich", "followers_url": "https://api.github.com/users/nhumrich/followers", "following_url": "https://api.github.com/users/nhumrich/following{/other_user}", "gists_url": "https://api.github.com/users/nhumrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhumrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhumrich/subscriptions", "organizations_url": "https://api.github.com/users/nhumrich/orgs", "repos_url": "https://api.github.com/users/nhumrich/repos", "events_url": "https://api.github.com/users/nhumrich/events{/privacy}", "received_events_url": "https://api.github.com/users/nhumrich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-30T21:36:27Z", "updated_at": "2018-03-20T23:29:59Z", "closed_at": "2016-11-30T21:37:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the status code header on the response object from the server only includes the status code number and not the string. This does not follow the HTTP spec.\r\n\r\n\r\nReturns:\r\n```\r\nHTTP/1.1 200\r\n```\r\n\r\nShould return\r\n```\r\nHTTP/1.1 200 OK\r\n```\r\n\r\nIs there currently anyway to add the `OK` string on the response?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/21", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/21/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/21/events", "html_url": "https://github.com/python-hyper/h11/issues/21", "id": 187851196, "node_id": "MDU6SXNzdWUxODc4NTExOTY=", "number": 21, "title": "Empty Data messages can collide with chunked encoding end-of-message", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-07T22:43:29Z", "updated_at": "2018-03-20T23:29:59Z", "closed_at": "2016-11-07T23:32:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Chunked encoding indicates end-of-message by sending an empty chunk: `\"0\\r\\n\\r\\n\"`.\r\n\r\nThis is also how we currently encode an empty `Data(data=b\"\")` event:\r\n\r\n```python\r\nIn [11]: c = h11.Connection(h11.CLIENT)\r\n\r\nIn [12]: c.send(h11.Request(method=b\"GET\", target=b\"/\", headers=[(b\"host\", b\"exa\r\n    ...: mple.com\"), (b\"transfer-encoding\", b\"chunked\")]))\r\nOut[12]: b'GET / HTTP/1.1\\r\\nhost: example.com\\r\\ntransfer-encoding: chunked\\r\\n\\r\\n'\r\n\r\nIn [13]: c.send(h11.Data(data=b\"\"))\r\nOut[13]: b'0\\r\\n\\r\\n'\r\n\r\nIn [14]: c.send(h11.EndOfMessage())\r\nOut[14]: b'0\\r\\n\\r\\n'\r\n```\r\n\r\nOops.\r\n\r\nWe need to special case check for `data=b\"\"` and encode that as the empty string instead of an empty chunk.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/19", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/19/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/19/events", "html_url": "https://github.com/python-hyper/h11/issues/19", "id": 186590020, "node_id": "MDU6SXNzdWUxODY1OTAwMjA=", "number": 19, "title": "Proposal: make it possible to observe chunk delimiters.", "user": {"login": "Lukasa", "id": 1382556, "node_id": "MDQ6VXNlcjEzODI1NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1382556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lukasa", "html_url": "https://github.com/Lukasa", "followers_url": "https://api.github.com/users/Lukasa/followers", "following_url": "https://api.github.com/users/Lukasa/following{/other_user}", "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions", "organizations_url": "https://api.github.com/users/Lukasa/orgs", "repos_url": "https://api.github.com/users/Lukasa/repos", "events_url": "https://api.github.com/users/Lukasa/events{/privacy}", "received_events_url": "https://api.github.com/users/Lukasa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-11-01T17:10:28Z", "updated_at": "2018-03-20T23:29:59Z", "closed_at": "2016-11-07T22:55:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Motivation: urllib3's `stream` method allows users to request that they be streamed each chunk as it arrives. This is very difficult to do with h11 as it currently stands, because while h11 will try to emit one `Data` event per chunk, if the buffer contains a partial chunk h11 will prefer to emit that `Data` event and empty the buffer than to sit on it.\r\n\r\nThis is an entirely defensible design decision: while urllib3's users seem to want to be able to receive the chunks as they come in, chunk delimiters are not supposed to be *semantic*. However, for better or worse there are some use-cases where it is very helpful to know where chunk delimiters are.\r\n\r\nThere are three ways I can see of doing this:\r\n\r\n1. Change h11's behaviour to emit `NEED_DATA` when a partial chunk is in the buffer, rather than a `Data` event for that partial chunk. This is probably inefficient in the case where people don't care about the chunk sizes, and also allows for pernicious behaviour where the user just keeps shoving data into h11's buffer without h11 ever being able to emit it. \r\n\r\n    (I should note that this is basically what h2 does with DATA frames: it emits one DataReceived event per frame. This is less problematic for h2 because of SETTINGS_MAX_FRAME_SIZE, which limits the total memory cost of buffering an entire frame.)\r\n\r\n2. Add a flag to swap between the current mode and the mode described in (1), which defaults to the current mode. I think this is a bad idea, but I did want to bring it up for completeness' sake. This has all the downsides of (1) plus an extra bit of interface complexity and testing surface to go with it. Not recommended.\r\n\r\n3. Add a flag to Data events that signal whether they mark the completed end of a chunk: otherwise keep the current behaviour the same. This would allow tools like urllib3 that want to care about where the chunk boundaries are basically just do a tight loop on `recv()` until they see a `Data` event with `end_chunk=True`. Because of h11's current semantics, any prior `Data` events that don't have that flag set are part of the same chunk as the one that does, and any subsequent `Data` events are part of a new chunk.\r\n\r\n    This has the advantage of being the smallest logical change, it's likely pretty easy and preformant to implement, and it is extremely unobtrusive to users that don't care about this concept. Altogether I think this is the best of the three possibilities in terms of giving tools that care about this (and, to be clear: as much as possible tools should try *not* to care about this) the ability to get what they need, while keeping that unusual use-case as far away from affecting other users as possible.\r\n\r\nThoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/14", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/14/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/14/events", "html_url": "https://github.com/python-hyper/h11/issues/14", "id": 173561502, "node_id": "MDU6SXNzdWUxNzM1NjE1MDI=", "number": 14, "title": "_EventBundle reports wrong kwarg name when required kwarg is missing.", "user": {"login": "jeamland", "id": 492857, "node_id": "MDQ6VXNlcjQ5Mjg1Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/492857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeamland", "html_url": "https://github.com/jeamland", "followers_url": "https://api.github.com/users/jeamland/followers", "following_url": "https://api.github.com/users/jeamland/following{/other_user}", "gists_url": "https://api.github.com/users/jeamland/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeamland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeamland/subscriptions", "organizations_url": "https://api.github.com/users/jeamland/orgs", "repos_url": "https://api.github.com/users/jeamland/repos", "events_url": "https://api.github.com/users/jeamland/events{/privacy}", "received_events_url": "https://api.github.com/users/jeamland/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-26T23:20:18Z", "updated_at": "2018-03-20T23:29:59Z", "closed_at": "2016-10-25T04:34:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\nPython 3.5.2 (default, Aug 16 2016, 05:35:40)\n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import h11\n>>> h11.Response(status_code=200)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/riceb2/.pyenv/versions/nodinator/lib/python3.5/site-packages/h11/_events.py\", line 41, in __init__\n    .format(kwarg, self.__class__.__name__))\nTypeError: missing required kwarg status_code for Response\n>>> h11.Response(headers={})\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/riceb2/.pyenv/versions/nodinator/lib/python3.5/site-packages/h11/_events.py\", line 41, in __init__\n    .format(kwarg, self.__class__.__name__))\nTypeError: missing required kwarg headers for Response\n>>> h11.Response(status_code=200, headers={})\nResponse(status_code=200, headers=[], http_version=b'1.1')\n>>>\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/12", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/12/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/12/events", "html_url": "https://github.com/python-hyper/h11/issues/12", "id": 173350340, "node_id": "MDU6SXNzdWUxNzMzNTAzNDA=", "number": 12, "title": "Currently example can not work in pip release version", "user": {"login": "mike820324", "id": 1079601, "node_id": "MDQ6VXNlcjEwNzk2MDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1079601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mike820324", "html_url": "https://github.com/mike820324", "followers_url": "https://api.github.com/users/mike820324/followers", "following_url": "https://api.github.com/users/mike820324/following{/other_user}", "gists_url": "https://api.github.com/users/mike820324/gists{/gist_id}", "starred_url": "https://api.github.com/users/mike820324/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mike820324/subscriptions", "organizations_url": "https://api.github.com/users/mike820324/orgs", "repos_url": "https://api.github.com/users/mike820324/repos", "events_url": "https://api.github.com/users/mike820324/events{/privacy}", "received_events_url": "https://api.github.com/users/mike820324/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-26T01:45:54Z", "updated_at": "2018-03-20T23:29:59Z", "closed_at": "2016-10-25T04:35:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \nRecently I'm trying to use h11 to rewrite our proxy server. When I'm using h11 with master branch. Everything works well. \nHowever, when I use `pip install h11` to install h11 from pypi, the original code will raise an exception saying that **Connection object has no attribute called 'next_event'**\n\nIt seems like there are some major api changes between v0.5.0 and v0.5.0-dev. However, the readthedoc page for h11 and the examples can only works in v0.5.0-dev.\n\nIs there any schedule to release v0.5.0-dev or v0.6.0 to pypi?\nThank you.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/9", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/9/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/9/events", "html_url": "https://github.com/python-hyper/h11/issues/9", "id": 168775763, "node_id": "MDU6SXNzdWUxNjg3NzU3NjM=", "number": 9, "title": "Comparison with httptools", "user": {"login": "kespindler", "id": 274946, "node_id": "MDQ6VXNlcjI3NDk0Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/274946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kespindler", "html_url": "https://github.com/kespindler", "followers_url": "https://api.github.com/users/kespindler/followers", "following_url": "https://api.github.com/users/kespindler/following{/other_user}", "gists_url": "https://api.github.com/users/kespindler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kespindler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kespindler/subscriptions", "organizations_url": "https://api.github.com/users/kespindler/orgs", "repos_url": "https://api.github.com/users/kespindler/repos", "events_url": "https://api.github.com/users/kespindler/events{/privacy}", "received_events_url": "https://api.github.com/users/kespindler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-02T00:50:51Z", "updated_at": "2018-03-20T23:29:59Z", "closed_at": "2016-10-12T06:44:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "In your readme you say you attempted a cython wrapper around http-parser, which appears to have been done now: https://github.com/MagicStack/httptools\n\nDo you have any points of reference on performance, ease of use, or other points between the two libraries?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/8", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/8/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/8/events", "html_url": "https://github.com/python-hyper/h11/issues/8", "id": 163510097, "node_id": "MDU6SXNzdWUxNjM1MTAwOTc=", "number": 8, "title": "Give sentinel objects (or at least NEED_DATA and PAUSED) unique types", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-02T09:17:41Z", "updated_at": "2018-03-20T23:29:59Z", "closed_at": "2016-11-07T22:41:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@dabeaz has requested this, to make it easier to take the thing that comes out of `next_event()` and dispatch it using `functools.singledispatch` or something like:\n\n```\n class Handler(object):\n     def handle_events(self):\n            while True:\n                   evt = conn.next_event()\n                   name = 'handle_' + type(evt).__name__\n                   getattr(self, name)(evt)\n\n     def handle_Data(self, evt):\n           ...\n\n     def handle_EndOfMessage(self, evt):\n          ...\n\n     def handle_Response(self, evt):\n          ...\n\n     def handle_NEED_DATA(self, evt):\n          ...\n```\n\nSeems reasonable enough to me.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/5", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/5/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/5/events", "html_url": "https://github.com/python-hyper/h11/issues/5", "id": 156866154, "node_id": "MDU6SXNzdWUxNTY4NjYxNTQ=", "number": 5, "title": "possibly should be stricter about checking outgoing headers", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-25T22:38:40Z", "updated_at": "2018-03-20T23:29:58Z", "closed_at": "2017-03-08T08:55:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now we e.g. allow newlines inside headers, which is kinda bad. (Could even conceivably be a security risk if untrusted code is allowed to set header values.)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-hyper/h11/issues/1", "repository_url": "https://api.github.com/repos/python-hyper/h11", "labels_url": "https://api.github.com/repos/python-hyper/h11/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/python-hyper/h11/issues/1/comments", "events_url": "https://api.github.com/repos/python-hyper/h11/issues/1/events", "html_url": "https://github.com/python-hyper/h11/issues/1", "id": 153115395, "node_id": "MDU6SXNzdWUxNTMxMTUzOTU=", "number": 1, "title": "consider using automat for your state machine?", "user": {"login": "glyph", "id": 716529, "node_id": "MDQ6VXNlcjcxNjUyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/716529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glyph", "html_url": "https://github.com/glyph", "followers_url": "https://api.github.com/users/glyph/followers", "following_url": "https://api.github.com/users/glyph/following{/other_user}", "gists_url": "https://api.github.com/users/glyph/gists{/gist_id}", "starred_url": "https://api.github.com/users/glyph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glyph/subscriptions", "organizations_url": "https://api.github.com/users/glyph/orgs", "repos_url": "https://api.github.com/users/glyph/repos", "events_url": "https://api.github.com/users/glyph/events{/privacy}", "received_events_url": "https://api.github.com/users/glyph/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-05-04T21:09:09Z", "updated_at": "2018-03-20T23:29:58Z", "closed_at": "2016-11-07T23:03:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Your state diagrams suggest that your state machine is a pure mealy machine.  Automatically generated state diagrams are cool, but delegating things to existing libraries is even cooler.  Would you consider giving https://github.com/glyph/automat a try?  If you decide not to use it, it would be a huge favor if you could file some bugs and give feedback as to why.\n", "performed_via_github_app": null, "score": 1.0}]}