{"total_count": 37, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/132", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/132/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/132/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/132", "id": 463994399, "node_id": "MDU6SXNzdWU0NjM5OTQzOTk=", "number": 132, "title": "Build is failing with pytest==5.0.0", "user": {"login": "askedrelic", "id": 130111, "node_id": "MDQ6VXNlcjEzMDExMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/130111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/askedrelic", "html_url": "https://github.com/askedrelic", "followers_url": "https://api.github.com/users/askedrelic/followers", "following_url": "https://api.github.com/users/askedrelic/following{/other_user}", "gists_url": "https://api.github.com/users/askedrelic/gists{/gist_id}", "starred_url": "https://api.github.com/users/askedrelic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/askedrelic/subscriptions", "organizations_url": "https://api.github.com/users/askedrelic/orgs", "repos_url": "https://api.github.com/users/askedrelic/repos", "events_url": "https://api.github.com/users/askedrelic/events{/privacy}", "received_events_url": "https://api.github.com/users/askedrelic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-03T23:31:46Z", "updated_at": "2019-07-04T00:09:03Z", "closed_at": "2019-07-04T00:09:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is probably from \r\nhttps://docs.pytest.org/en/latest/changelog.html#pytest-5-0-0-2019-06-28\r\n```\r\n#5412: ExceptionInfo objects (returned by pytest.raises) now have the same str representation as repr, which avoids some confusion when users use print(e) to inspect the object.\r\n```\r\n\r\nBuild failure:\r\n```\r\n________________________ test_create_span_with_bad_kind ________________________\r\n    def test_create_span_with_bad_kind():\r\n        with pytest.raises(ZipkinError) as e:\r\n            Span(\r\n                trace_id=generate_random_64bit_string(),\r\n                name='test span',\r\n                parent_id=generate_random_64bit_string(),\r\n                span_id=generate_random_64bit_string(),\r\n                kind='client',\r\n                timestamp=26.0,\r\n                duration=4.0,\r\n            )\r\n    \r\n>       assert 'Invalid kind value client. Must be of type Kind.' in str(e)\r\nE       AssertionError: assert 'Invalid kind value client. Must be of type Kind.' in '<ExceptionInfo ZipkinError tblen=2>'\r\nE        +  where '<ExceptionInfo ZipkinError tblen=2>' = str(<ExceptionInfo ZipkinError tblen=2>)\r\ntests/encoding/_helpers_test.py:25: AssertionError\r\n___________________ test_create_span_with_bad_local_endpoint ___________________\r\n    def test_create_span_with_bad_local_endpoint():\r\n        with pytest.raises(ZipkinError) as e:\r\n            Span(\r\n                trace_id=generate_random_64bit_string(),\r\n                name='test span',\r\n                parent_id=generate_random_64bit_string(),\r\n                span_id=generate_random_64bit_string(),\r\n                kind=Kind.CLIENT,\r\n                timestamp=26.0,\r\n                duration=4.0,\r\n                local_endpoint='my_service',\r\n            )\r\n    \r\n>       assert 'Invalid local_endpoint value. Must be of type Endpoint.' in str(e)\r\nE       AssertionError: assert 'Invalid local_endpoint value. Must be of type Endpoint.' in '<ExceptionInfo ZipkinError tblen=2>'\r\nE        +  where '<ExceptionInfo ZipkinError tblen=2>' = str(<ExceptionInfo ZipkinError tblen=2>)\r\ntests/encoding/_helpers_test.py:41: AssertionError\r\n__________________ test_create_span_with_bad_remote_endpoint ___________________\r\n    def test_create_span_with_bad_remote_endpoint():\r\n        with pytest.raises(ZipkinError) as e:\r\n            Span(\r\n                trace_id=generate_random_64bit_string(),\r\n                name='test span',\r\n                parent_id=generate_random_64bit_string(),\r\n                span_id=generate_random_64bit_string(),\r\n                kind=Kind.CLIENT,\r\n                timestamp=26.0,\r\n                duration=4.0,\r\n                remote_endpoint='my_service',\r\n            )\r\n    \r\n>       assert 'Invalid remote_endpoint value. Must be of type Endpoint.' in str(e)\r\nE       AssertionError: assert 'Invalid remote_endpoint value. Must be of type Endpoint.' in '<ExceptionInfo ZipkinError tblen=2>'\r\nE        +  where '<ExceptionInfo ZipkinError tblen=2>' = str(<ExceptionInfo ZipkinError tblen=2>)\r\ntests/encoding/_helpers_test.py:57: AssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/130", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/130/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/130/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/130", "id": 447677239, "node_id": "MDU6SXNzdWU0NDc2NzcyMzk=", "number": 130, "title": "Add an log annotation for a span", "user": {"login": "NeonToo", "id": 13467981, "node_id": "MDQ6VXNlcjEzNDY3OTgx", "avatar_url": "https://avatars1.githubusercontent.com/u/13467981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeonToo", "html_url": "https://github.com/NeonToo", "followers_url": "https://api.github.com/users/NeonToo/followers", "following_url": "https://api.github.com/users/NeonToo/following{/other_user}", "gists_url": "https://api.github.com/users/NeonToo/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeonToo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeonToo/subscriptions", "organizations_url": "https://api.github.com/users/NeonToo/orgs", "repos_url": "https://api.github.com/users/NeonToo/repos", "events_url": "https://api.github.com/users/NeonToo/events{/privacy}", "received_events_url": "https://api.github.com/users/NeonToo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-23T13:54:15Z", "updated_at": "2020-02-23T00:02:27Z", "closed_at": "2020-02-23T00:02:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I want to add a new annotation for a span in the purpose of logging, like\r\n```\r\n{\r\n    ...other fields,\r\n    \"annotations\": [{\r\n         {\r\n             \"timestamp\": timestamp,\r\n             \"value\": \"logging info\"\r\n         }\r\n     ]\r\n}\r\n```\r\n\r\nthe only possible way I found was\r\n```\r\nspan.update_binary_annotations({'timestamp': time.time(), 'value': 'logging info'})\r\n```\r\n\r\nbut it adds fields in the \"tags\", like\r\n```\r\n{\r\n    ...other fields,\r\n    \"tags\": {\r\n             \"timestamp\": timestamp,\r\n             \"value\": \"logging info\"\r\n     },\r\n    \"annotations\": []\r\n}\r\n```\r\n\r\nIs there any direct way to update the \"annotations\" field?\r\n\r\nThanks a lot.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/116", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/116/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/116/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/116", "id": 405306797, "node_id": "MDU6SXNzdWU0MDUzMDY3OTc=", "number": 116, "title": "Log a span inside an ongoing trace with decorator not work", "user": {"login": "xiazhibin", "id": 11945009, "node_id": "MDQ6VXNlcjExOTQ1MDA5", "avatar_url": "https://avatars0.githubusercontent.com/u/11945009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiazhibin", "html_url": "https://github.com/xiazhibin", "followers_url": "https://api.github.com/users/xiazhibin/followers", "following_url": "https://api.github.com/users/xiazhibin/following{/other_user}", "gists_url": "https://api.github.com/users/xiazhibin/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiazhibin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiazhibin/subscriptions", "organizations_url": "https://api.github.com/users/xiazhibin/orgs", "repos_url": "https://api.github.com/users/xiazhibin/repos", "events_url": "https://api.github.com/users/xiazhibin/events{/privacy}", "received_events_url": "https://api.github.com/users/xiazhibin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-31T15:44:28Z", "updated_at": "2019-01-31T19:25:23Z", "closed_at": "2019-01-31T17:00:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I follow the guide\r\n```\r\n@zipkin_span(service_name='app', span_name='some_function')\r\ndef some_function():\r\n    return 'ok'\r\n\r\n@app.route('/')\r\ndef index():\r\n    with zipkin_span(\r\n            service_name='app',\r\n            span_name='index',\r\n            transport_handler=http_transport,\r\n            sample_rate=100\r\n    ):\r\n            rv = some_function()\r\n    return rv\r\n```\r\n\r\nbut I cannot find the span_name `some_function`.\r\n\r\nAnd then,I change to this, it works:\r\n\r\n```\r\n\r\n@zipkin_span(service_name='app', span_name='some_function')\r\ndef some_function(a, b):\r\n    return 'ok'\r\n\r\n@app.route('/')\r\ndef index():\r\n    with zipkin_span(\r\n            service_name='webapp2222',\r\n            span_name='indexfuxk22222',\r\n            transport_handler=http_transport,\r\n            sample_rate=100,  # 0.05, # Value between 0.0 and 100.0\r\n    ):\r\n        with zipkin_span(service_name='webapp2222', span_name='do_stuff22222'):\r\n            rv = some_function()\r\n    return rv\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/109", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/109/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/109/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/109", "id": 373728349, "node_id": "MDU6SXNzdWUzNzM3MjgzNDk=", "number": 109, "title": "py_zipkin 0.15 prints lots of `invalid escape sequence` on python3.6", "user": {"login": "drolando", "id": 3317638, "node_id": "MDQ6VXNlcjMzMTc2Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3317638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolando", "html_url": "https://github.com/drolando", "followers_url": "https://api.github.com/users/drolando/followers", "following_url": "https://api.github.com/users/drolando/following{/other_user}", "gists_url": "https://api.github.com/users/drolando/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolando/subscriptions", "organizations_url": "https://api.github.com/users/drolando/orgs", "repos_url": "https://api.github.com/users/drolando/repos", "events_url": "https://api.github.com/users/drolando/events{/privacy}", "received_events_url": "https://api.github.com/users/drolando/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-25T00:35:41Z", "updated_at": "2018-11-01T02:02:44Z", "closed_at": "2018-11-01T02:02:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\]\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\]\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\.\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\.\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\.\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\.\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\?\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\?\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\?\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\?\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\]\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\]\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\.\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\.\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\.\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\.\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\?\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\?\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\?\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\?\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n<unknown>:1: DeprecationWarning: invalid escape sequence \\[\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/106", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/106/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/106/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/106", "id": 372549673, "node_id": "MDU6SXNzdWUzNzI1NDk2NzM=", "number": 106, "title": "Error while encoding Json (_BaseJSONEncoder) ", "user": {"login": "ubbikk", "id": 18426132, "node_id": "MDQ6VXNlcjE4NDI2MTMy", "avatar_url": "https://avatars3.githubusercontent.com/u/18426132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubbikk", "html_url": "https://github.com/ubbikk", "followers_url": "https://api.github.com/users/ubbikk/followers", "following_url": "https://api.github.com/users/ubbikk/following{/other_user}", "gists_url": "https://api.github.com/users/ubbikk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubbikk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubbikk/subscriptions", "organizations_url": "https://api.github.com/users/ubbikk/orgs", "repos_url": "https://api.github.com/users/ubbikk/repos", "events_url": "https://api.github.com/users/ubbikk/events{/privacy}", "received_events_url": "https://api.github.com/users/ubbikk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-22T14:40:40Z", "updated_at": "2018-10-22T22:17:41Z", "closed_at": "2018-10-22T18:50:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use Encoding.V2_JSON \\ Encoding.V1_JSON  but I'm receiving an exception:\r\n\r\n```Traceback (most recent call last):\r\n  File \"/home/dmytro/anaconda3/lib/python3.6/site-packages/py_zipkin/logging_helper.py\", line 129, in _emit_spans_with_span_sender\r\n    report_timestamp=self.report_root_timestamp,\r\n  File \"/home/dmytro/anaconda3/lib/python3.6/site-packages/py_zipkin/logging_helper.py\", line 180, in add_span\r\n    encoded_span,\r\n  File \"/home/dmytro/anaconda3/lib/python3.6/site-packages/py_zipkin/encoding/_encoders.py\", line 141, in fits\r\n    return 2 + current_count + current_size + len(new_span) <= max_size\r\nTypeError: unsupported operand type(s) for +: 'int' and 'list'\r\n```\r\n\r\nI use master branch, there is a similar exception for 0.14.1 (I switched to master hoping that the issue was fixed in master):\r\n\r\n```Traceback (most recent call last):\r\n  File \"/home/dmytro/anaconda3/lib/python3.6/site-packages/py_zipkin/logging_helper.py\", line 129, in _emit_spans_with_span_sender\r\n    report_timestamp=self.report_root_timestamp,\r\n  File \"/home/dmytro/anaconda3/lib/python3.6/site-packages/py_zipkin/logging_helper.py\", line 180, in add_span\r\n    encoded_span,\r\n  File \"/home/dmytro/anaconda3/lib/python3.6/site-packages/py_zipkin/_encoding_helpers.py\", line 343, in fits\r\n    return 2 + current_count + current_size + len(new_span) <= max_size\r\nTypeError: unsupported operand type(s) for +: 'int' and 'list'\r\n```\r\n\r\nI tried to debug a little: it seems `_BaseJSONEncoder.fits` expects an integer as the first argument but in `ZipkinBatchSender.add_span` we pass `self.queue` that is in fact a list", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/104", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/104/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/104/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/104", "id": 368374961, "node_id": "MDU6SXNzdWUzNjgzNzQ5NjE=", "number": 104, "title": "Bad Reference to ThreadedStorage", "user": {"login": "goakley", "id": 1375517, "node_id": "MDQ6VXNlcjEzNzU1MTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1375517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goakley", "html_url": "https://github.com/goakley", "followers_url": "https://api.github.com/users/goakley/followers", "following_url": "https://api.github.com/users/goakley/following{/other_user}", "gists_url": "https://api.github.com/users/goakley/gists{/gist_id}", "starred_url": "https://api.github.com/users/goakley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goakley/subscriptions", "organizations_url": "https://api.github.com/users/goakley/orgs", "repos_url": "https://api.github.com/users/goakley/repos", "events_url": "https://api.github.com/users/goakley/events{/privacy}", "received_events_url": "https://api.github.com/users/goakley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-09T20:06:18Z", "updated_at": "2018-11-21T20:51:32Z", "closed_at": "2018-10-22T22:18:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "`ThreadedStorage` tries to reference the nonexistent `_is_transport_configured`.\r\n\r\nVersion: `0.14.1`\r\n\r\nExample of error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/tmp/workspace/verify-python-lib/tests/test_tracing.py\", line 56, in test_zipkin_tracer_no_init\r\n    pass\r\n  File \"/tmp/workspace/verify-python-lib/env2/local/lib/python2.7/site-packages/py_zipkin/zipkin.py\", line 431, in __exit__\r\n    self.stop(_exc_type, _exc_value, _exc_traceback)\r\n  File \"/tmp/workspace/verify-python-lib/env2/local/lib/python2.7/site-packages/py_zipkin/zipkin.py\", line 446, in stop\r\n    if not self._span_storage.is_transport_configured():\r\n  File \"/tmp/workspace/verify-python-lib/env2/local/lib/python2.7/site-packages/py_zipkin/storage.py\", line 62, in is_transport_configured\r\n    return self._is_transport_configured\r\nAttributeError: 'ThreadedStorage' object has no attribute '_is_transport_configured'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/99", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/99/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/99/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/99", "id": 359269926, "node_id": "MDU6SXNzdWUzNTkyNjk5MjY=", "number": 99, "title": "Possible memory leaks with py_zipkin 0.13.0", "user": {"login": "drolando", "id": 3317638, "node_id": "MDQ6VXNlcjMzMTc2Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3317638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolando", "html_url": "https://github.com/drolando", "followers_url": "https://api.github.com/users/drolando/followers", "following_url": "https://api.github.com/users/drolando/following{/other_user}", "gists_url": "https://api.github.com/users/drolando/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolando/subscriptions", "organizations_url": "https://api.github.com/users/drolando/orgs", "repos_url": "https://api.github.com/users/drolando/repos", "events_url": "https://api.github.com/users/drolando/events{/privacy}", "received_events_url": "https://api.github.com/users/drolando/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-12T00:18:22Z", "updated_at": "2018-10-09T15:48:03Z", "closed_at": "2018-10-09T15:48:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We've had reports of memory leaks after upgrading to py_zipkin==0.13.0.\r\n\r\nI haven't been able to reproduce it locally yet, but I'm creating this issue to let people know of this possible issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/97", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/97/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/97/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/97", "id": 353400815, "node_id": "MDU6SXNzdWUzNTM0MDA4MTU=", "number": 97, "title": "can't emit span when finish a api", "user": {"login": "nullscc", "id": 17700282, "node_id": "MDQ6VXNlcjE3NzAwMjgy", "avatar_url": "https://avatars1.githubusercontent.com/u/17700282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nullscc", "html_url": "https://github.com/nullscc", "followers_url": "https://api.github.com/users/nullscc/followers", "following_url": "https://api.github.com/users/nullscc/following{/other_user}", "gists_url": "https://api.github.com/users/nullscc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nullscc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nullscc/subscriptions", "organizations_url": "https://api.github.com/users/nullscc/orgs", "repos_url": "https://api.github.com/users/nullscc/repos", "events_url": "https://api.github.com/users/nullscc/events{/privacy}", "received_events_url": "https://api.github.com/users/nullscc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-23T14:14:10Z", "updated_at": "2018-09-30T09:39:15Z", "closed_at": "2018-09-30T09:39:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,I have been developing with py_zipkin these days. And when it finished,  I deploy my code (debug perfect in my local environment) to test environment which run in a remote server. Then error showed below happened. I don't why, could you provide some information to let me fix it?\r\n```\r\nAssertionError: \r\n  File \"py_zipkin/logging_helper.py\", line 114, in _emit_spans_with_span_sender\r\n    sa_endpoint=span['sa_endpoint'],\r\n  File \"py_zipkin/logging_helper.py\", line 236, in add_span\r\n    duration_s,\r\n  File \"py_zipkin/thrift/__init__.py\", line 156, in create_span\r\n    assert trace_id_length == 32\r\n\r\nZipkinError: AssertionError: \r\n(3 additional frame(s) were not displayed)\r\n...\r\n  File \"py_zipkin/zipkin.py\", line 369, in stop\r\n    self.logging_context.stop()\r\n  File \"py_zipkin/logging_helper.py\", line 62, in stop\r\n    self.emit_spans()\r\n  File \"py_zipkin/logging_helper.py\", line 86, in emit_spans\r\n    self._emit_spans_with_span_sender(span_sender)\r\n  File \"py_zipkin/logging_helper.py\", line 141, in _emit_spans_with_span_sender\r\n    sa_endpoint=self.sa_endpoint,\r\n  File \"py_zipkin/logging_helper.py\", line 173, in __exit__\r\n    raise ZipkinError(error)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/96", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/96/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/96/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/96", "id": 352373491, "node_id": "MDU6SXNzdWUzNTIzNzM0OTE=", "number": 96, "title": "work unnormally when tracing nested spans", "user": {"login": "nullscc", "id": 17700282, "node_id": "MDQ6VXNlcjE3NzAwMjgy", "avatar_url": "https://avatars1.githubusercontent.com/u/17700282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nullscc", "html_url": "https://github.com/nullscc", "followers_url": "https://api.github.com/users/nullscc/followers", "following_url": "https://api.github.com/users/nullscc/following{/other_user}", "gists_url": "https://api.github.com/users/nullscc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nullscc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nullscc/subscriptions", "organizations_url": "https://api.github.com/users/nullscc/orgs", "repos_url": "https://api.github.com/users/nullscc/repos", "events_url": "https://api.github.com/users/nullscc/events{/privacy}", "received_events_url": "https://api.github.com/users/nullscc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "drolando", "id": 3317638, "node_id": "MDQ6VXNlcjMzMTc2Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3317638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolando", "html_url": "https://github.com/drolando", "followers_url": "https://api.github.com/users/drolando/followers", "following_url": "https://api.github.com/users/drolando/following{/other_user}", "gists_url": "https://api.github.com/users/drolando/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolando/subscriptions", "organizations_url": "https://api.github.com/users/drolando/orgs", "repos_url": "https://api.github.com/users/drolando/repos", "events_url": "https://api.github.com/users/drolando/events{/privacy}", "received_events_url": "https://api.github.com/users/drolando/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drolando", "id": 3317638, "node_id": "MDQ6VXNlcjMzMTc2Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3317638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolando", "html_url": "https://github.com/drolando", "followers_url": "https://api.github.com/users/drolando/followers", "following_url": "https://api.github.com/users/drolando/following{/other_user}", "gists_url": "https://api.github.com/users/drolando/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolando/subscriptions", "organizations_url": "https://api.github.com/users/drolando/orgs", "repos_url": "https://api.github.com/users/drolando/repos", "events_url": "https://api.github.com/users/drolando/events{/privacy}", "received_events_url": "https://api.github.com/users/drolando/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Yelp/py_zipkin/milestones/1", "html_url": "https://github.com/Yelp/py_zipkin/milestone/1", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/milestones/1/labels", "id": 3958305, "node_id": "MDk6TWlsZXN0b25lMzk1ODMwNQ==", "number": 1, "title": "1.0", "description": null, "creator": {"login": "drolando", "id": 3317638, "node_id": "MDQ6VXNlcjMzMTc2Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3317638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolando", "html_url": "https://github.com/drolando", "followers_url": "https://api.github.com/users/drolando/followers", "following_url": "https://api.github.com/users/drolando/following{/other_user}", "gists_url": "https://api.github.com/users/drolando/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolando/subscriptions", "organizations_url": "https://api.github.com/users/drolando/orgs", "repos_url": "https://api.github.com/users/drolando/repos", "events_url": "https://api.github.com/users/drolando/events{/privacy}", "received_events_url": "https://api.github.com/users/drolando/received_events", "type": "User", "site_admin": false}, "open_issues": 7, "closed_issues": 5, "state": "open", "created_at": "2019-01-10T04:45:50Z", "updated_at": "2019-02-27T00:45:45Z", "due_on": null, "closed_at": null}, "comments": 22, "created_at": "2018-08-21T03:36:33Z", "updated_at": "2019-02-14T01:42:11Z", "closed_at": "2019-02-14T01:42:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have encountered a problem when I use py_zipkin which version is 0.13.0. But first, let me show you the sample code I use.\r\n\r\n## sample code\r\nfirst, the helper function for `transport_handler` in a file named `handler.py`\r\n```\r\n# handler.py\r\n\r\ndef default_handler(encoded_span):\r\n    # for version 0.7\r\n    # body = str.encode('\\x0c\\x00\\x00\\x00\\x01') + encoded_span\r\n\r\n    # for version 0.13\r\n    body = encoded_span\r\n\r\n    return requests.post(\r\n        \"http://127.0.0.1:9411/api/v1/spans\",\r\n        data=body,\r\n        headers={'Content-Type': 'application/x-thrift'},\r\n    )\r\n```\r\n\r\nand then, the file `demo.py` which is a flask application offer api to client or browser, which export port 5005\r\n```\r\n# demo.py\r\n\r\nimport requests\r\nfrom flask import Flask\r\nfrom py_zipkin.zipkin import zipkin_span,create_http_headers_for_new_span\r\nimport time\r\nfrom handler import default_handler as http_transport\r\n\r\napp = Flask(__name__)\r\n\r\n@zipkin_span(service_name='webapp', span_name='do_stuff')\r\ndef do_stuff():\r\n    headers = create_http_headers_for_new_span()\r\n    requests.get('http://localhost:6000/service1/', headers=headers)\r\n    return 'OK'\r\n\r\n@app.route('/')\r\ndef index():\r\n    print('recieve request in demo', int(time.time()))\r\n    with zipkin_span(\r\n        service_name='webapp',\r\n        span_name='index',\r\n        transport_handler=http_transport,\r\n        port=5005,\r\n        sample_rate=100, #0.05, # Value between 0.0 and 100.0\r\n    ) as con:\r\n        do_stuff()\r\n    return 'OK', 200\r\n\r\nif __name__=='__main__':\r\n    app.run(host=\"0.0.0.0\",port=5005,debug=True)\r\n```\r\n\r\nand last but not least, the file named `service1.py` which is another flask application offer an api for `demo.py` to mock a microservice, which expose port 6000 \r\n```\r\n# service1.py\r\nimport requests\r\nfrom flask import Flask, request\r\nfrom py_zipkin.zipkin import zipkin_span,create_http_headers_for_new_span, ZipkinAttrs\r\nimport time\r\nfrom handler import default_handler as http_transport\r\n\r\napp = Flask(__name__)\r\n\r\n@zipkin_span(service_name='service1', span_name='service1_do_stuff')\r\ndef do_stuff():\r\n    return 'OK'\r\n\r\n@app.route('/service1/')\r\ndef index():\r\n    with zipkin_span(\r\n        service_name='service1',\r\n        zipkin_attrs=ZipkinAttrs(\r\n            trace_id=request.headers['X-B3-TraceID'],\r\n            span_id=request.headers['X-B3-SpanID'],\r\n            parent_span_id=request.headers['X-B3-ParentSpanID'],\r\n            flags=request.headers['X-B3-Flags'],\r\n            is_sampled=request.headers['X-B3-Sampled'],\r\n        ),\r\n        span_name='index_service1',\r\n        transport_handler=http_transport,\r\n        sample_rate=100, #0.05, # Value between 0.0 and 100.0\r\n    ):\r\n        do_stuff()\r\n    return 'OK', 200\r\n\r\nif __name__=='__main__':\r\n    app.run(host=\"0.0.0.0\",port=6000,debug=True)\r\n```\r\n\r\n## problem\r\nI access `http://127.0.0.1:5005`,  and  there are no error complaints in `demo.py` and `service1.py`, Here is the output when I browse `http://127.0.0.1:9411` which sort option is `Newest first`.  :\r\n<img width=\"1354\" alt=\"screen shot 2018-08-21 at 11 20 38 am\" src=\"https://user-images.githubusercontent.com/17700282/44378519-489e0c80-a534-11e8-946e-618c94156f13.png\">\r\nso the first problem is no nested span(`do_stuff` and `service1_do_stuff`) showed there, the other is that there is no child-parent relationship showed there between `webapp` and `service1`.\r\n\r\n## experiment\r\nBut when I try to change the py_zipkin's version to 0.7 and just changed this line ( function `default_handler` in `handler.py`):\r\n```\r\n    # for version 0.13\r\n    body = encoded_span\r\n```\r\nto this:\r\n```\r\n    # for version 0.7\r\n    body = str.encode('\\x0c\\x00\\x00\\x00\\x01') + encoded_span\r\n```\r\nand no other code changed any more.\r\n\"weird\" thing happened(Newest first of course)\r\n<img width=\"1348\" alt=\"screen shot 2018-08-21 at 11 29 34 am\" src=\"https://user-images.githubusercontent.com/17700282/44378789-8485a180-a535-11e8-85cd-0440cf7dfa66.png\">\r\n\r\nI don't know whether the usage is right or not?or there are some bugs in newest version for nested spans within in a microservice?\r\nAny help or reply will be greatly appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/95", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/95/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/95/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/95", "id": 351937214, "node_id": "MDU6SXNzdWUzNTE5MzcyMTQ=", "number": 95, "title": "README says use \"Stack()\" but Stack() needs one argument", "user": {"login": "siedentop", "id": 284732, "node_id": "MDQ6VXNlcjI4NDczMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/284732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siedentop", "html_url": "https://github.com/siedentop", "followers_url": "https://api.github.com/users/siedentop/followers", "following_url": "https://api.github.com/users/siedentop/following{/other_user}", "gists_url": "https://api.github.com/users/siedentop/gists{/gist_id}", "starred_url": "https://api.github.com/users/siedentop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siedentop/subscriptions", "organizations_url": "https://api.github.com/users/siedentop/orgs", "repos_url": "https://api.github.com/users/siedentop/repos", "events_url": "https://api.github.com/users/siedentop/events{/privacy}", "received_events_url": "https://api.github.com/users/siedentop/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "drolando", "id": 3317638, "node_id": "MDQ6VXNlcjMzMTc2Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3317638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolando", "html_url": "https://github.com/drolando", "followers_url": "https://api.github.com/users/drolando/followers", "following_url": "https://api.github.com/users/drolando/following{/other_user}", "gists_url": "https://api.github.com/users/drolando/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolando/subscriptions", "organizations_url": "https://api.github.com/users/drolando/orgs", "repos_url": "https://api.github.com/users/drolando/repos", "events_url": "https://api.github.com/users/drolando/events{/privacy}", "received_events_url": "https://api.github.com/users/drolando/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drolando", "id": 3317638, "node_id": "MDQ6VXNlcjMzMTc2Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3317638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolando", "html_url": "https://github.com/drolando", "followers_url": "https://api.github.com/users/drolando/followers", "following_url": "https://api.github.com/users/drolando/following{/other_user}", "gists_url": "https://api.github.com/users/drolando/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolando/subscriptions", "organizations_url": "https://api.github.com/users/drolando/orgs", "repos_url": "https://api.github.com/users/drolando/repos", "events_url": "https://api.github.com/users/drolando/events{/privacy}", "received_events_url": "https://api.github.com/users/drolando/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/Yelp/py_zipkin/milestones/1", "html_url": "https://github.com/Yelp/py_zipkin/milestone/1", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/milestones/1/labels", "id": 3958305, "node_id": "MDk6TWlsZXN0b25lMzk1ODMwNQ==", "number": 1, "title": "1.0", "description": null, "creator": {"login": "drolando", "id": 3317638, "node_id": "MDQ6VXNlcjMzMTc2Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3317638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolando", "html_url": "https://github.com/drolando", "followers_url": "https://api.github.com/users/drolando/followers", "following_url": "https://api.github.com/users/drolando/following{/other_user}", "gists_url": "https://api.github.com/users/drolando/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolando/subscriptions", "organizations_url": "https://api.github.com/users/drolando/orgs", "repos_url": "https://api.github.com/users/drolando/repos", "events_url": "https://api.github.com/users/drolando/events{/privacy}", "received_events_url": "https://api.github.com/users/drolando/received_events", "type": "User", "site_admin": false}, "open_issues": 7, "closed_issues": 5, "state": "open", "created_at": "2019-01-10T04:45:50Z", "updated_at": "2019-02-27T00:45:45Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2018-08-19T21:46:42Z", "updated_at": "2019-02-14T01:42:31Z", "closed_at": "2019-02-14T01:42:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use py-zipkin in a multi-threaded context. \r\n\r\nSo, I followed the recommendation of the README. However, when running I get an exception because 'storage.Stack()' requires has the signature `def __init__(self, storage)`.\r\n\r\n     context_stack = Stack() \r\n    TypeError: __init__() takes exactly 2 arguments (1 given)\r\n\r\nCould you please update the README to work without workarounds?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/93", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/93/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/93/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/93", "id": 342127838, "node_id": "MDU6SXNzdWUzNDIxMjc4Mzg=", "number": 93, "title": "Expose Endpoint namedtuple publicly", "user": {"login": "henryzhangsta", "id": 1916106, "node_id": "MDQ6VXNlcjE5MTYxMDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1916106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryzhangsta", "html_url": "https://github.com/henryzhangsta", "followers_url": "https://api.github.com/users/henryzhangsta/followers", "following_url": "https://api.github.com/users/henryzhangsta/following{/other_user}", "gists_url": "https://api.github.com/users/henryzhangsta/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryzhangsta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryzhangsta/subscriptions", "organizations_url": "https://api.github.com/users/henryzhangsta/orgs", "repos_url": "https://api.github.com/users/henryzhangsta/repos", "events_url": "https://api.github.com/users/henryzhangsta/events{/privacy}", "received_events_url": "https://api.github.com/users/henryzhangsta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "henryzhangsta", "id": 1916106, "node_id": "MDQ6VXNlcjE5MTYxMDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1916106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryzhangsta", "html_url": "https://github.com/henryzhangsta", "followers_url": "https://api.github.com/users/henryzhangsta/followers", "following_url": "https://api.github.com/users/henryzhangsta/following{/other_user}", "gists_url": "https://api.github.com/users/henryzhangsta/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryzhangsta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryzhangsta/subscriptions", "organizations_url": "https://api.github.com/users/henryzhangsta/orgs", "repos_url": "https://api.github.com/users/henryzhangsta/repos", "events_url": "https://api.github.com/users/henryzhangsta/events{/privacy}", "received_events_url": "https://api.github.com/users/henryzhangsta/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "henryzhangsta", "id": 1916106, "node_id": "MDQ6VXNlcjE5MTYxMDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1916106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryzhangsta", "html_url": "https://github.com/henryzhangsta", "followers_url": "https://api.github.com/users/henryzhangsta/followers", "following_url": "https://api.github.com/users/henryzhangsta/following{/other_user}", "gists_url": "https://api.github.com/users/henryzhangsta/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryzhangsta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryzhangsta/subscriptions", "organizations_url": "https://api.github.com/users/henryzhangsta/orgs", "repos_url": "https://api.github.com/users/henryzhangsta/repos", "events_url": "https://api.github.com/users/henryzhangsta/events{/privacy}", "received_events_url": "https://api.github.com/users/henryzhangsta/received_events", "type": "User", "site_admin": false}, {"login": "drolando", "id": 3317638, "node_id": "MDQ6VXNlcjMzMTc2Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3317638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolando", "html_url": "https://github.com/drolando", "followers_url": "https://api.github.com/users/drolando/followers", "following_url": "https://api.github.com/users/drolando/following{/other_user}", "gists_url": "https://api.github.com/users/drolando/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolando/subscriptions", "organizations_url": "https://api.github.com/users/drolando/orgs", "repos_url": "https://api.github.com/users/drolando/repos", "events_url": "https://api.github.com/users/drolando/events{/privacy}", "received_events_url": "https://api.github.com/users/drolando/received_events", "type": "User", "site_admin": false}, {"login": "bplotnick", "id": 5392381, "node_id": "MDQ6VXNlcjUzOTIzODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5392381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bplotnick", "html_url": "https://github.com/bplotnick", "followers_url": "https://api.github.com/users/bplotnick/followers", "following_url": "https://api.github.com/users/bplotnick/following{/other_user}", "gists_url": "https://api.github.com/users/bplotnick/gists{/gist_id}", "starred_url": "https://api.github.com/users/bplotnick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bplotnick/subscriptions", "organizations_url": "https://api.github.com/users/bplotnick/orgs", "repos_url": "https://api.github.com/users/bplotnick/repos", "events_url": "https://api.github.com/users/bplotnick/events{/privacy}", "received_events_url": "https://api.github.com/users/bplotnick/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-07-17T23:50:15Z", "updated_at": "2018-08-10T15:55:38Z", "closed_at": "2018-08-10T15:55:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now, the only publicly accessible endpoint object is thrift.Endpoint, which does an unsigned short to short conversion on creation\r\n\r\nThis means that this object cannot actually be passed to add_span since it will cause an exception if the value of the original port number is larger than 0x7fff since the value of port in the Endpoint class will be negative. This raises an exception due to the copy that is attempted here: https://github.com/Yelp/py_zipkin/blob/master/py_zipkin/logging_helper.py#L194", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/88", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/88/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/88/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/88", "id": 335488458, "node_id": "MDU6SXNzdWUzMzU0ODg0NTg=", "number": 88, "title": "Travis build is erroring", "user": {"login": "bplotnick", "id": 5392381, "node_id": "MDQ6VXNlcjUzOTIzODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5392381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bplotnick", "html_url": "https://github.com/bplotnick", "followers_url": "https://api.github.com/users/bplotnick/followers", "following_url": "https://api.github.com/users/bplotnick/following{/other_user}", "gists_url": "https://api.github.com/users/bplotnick/gists{/gist_id}", "starred_url": "https://api.github.com/users/bplotnick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bplotnick/subscriptions", "organizations_url": "https://api.github.com/users/bplotnick/orgs", "repos_url": "https://api.github.com/users/bplotnick/repos", "events_url": "https://api.github.com/users/bplotnick/events{/privacy}", "received_events_url": "https://api.github.com/users/bplotnick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "tomelm", "id": 153050, "node_id": "MDQ6VXNlcjE1MzA1MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/153050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomelm", "html_url": "https://github.com/tomelm", "followers_url": "https://api.github.com/users/tomelm/followers", "following_url": "https://api.github.com/users/tomelm/following{/other_user}", "gists_url": "https://api.github.com/users/tomelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomelm/subscriptions", "organizations_url": "https://api.github.com/users/tomelm/orgs", "repos_url": "https://api.github.com/users/tomelm/repos", "events_url": "https://api.github.com/users/tomelm/events{/privacy}", "received_events_url": "https://api.github.com/users/tomelm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tomelm", "id": 153050, "node_id": "MDQ6VXNlcjE1MzA1MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/153050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomelm", "html_url": "https://github.com/tomelm", "followers_url": "https://api.github.com/users/tomelm/followers", "following_url": "https://api.github.com/users/tomelm/following{/other_user}", "gists_url": "https://api.github.com/users/tomelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomelm/subscriptions", "organizations_url": "https://api.github.com/users/tomelm/orgs", "repos_url": "https://api.github.com/users/tomelm/repos", "events_url": "https://api.github.com/users/tomelm/events{/privacy}", "received_events_url": "https://api.github.com/users/tomelm/received_events", "type": "User", "site_admin": false}, {"login": "drolando", "id": 3317638, "node_id": "MDQ6VXNlcjMzMTc2Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3317638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolando", "html_url": "https://github.com/drolando", "followers_url": "https://api.github.com/users/drolando/followers", "following_url": "https://api.github.com/users/drolando/following{/other_user}", "gists_url": "https://api.github.com/users/drolando/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolando/subscriptions", "organizations_url": "https://api.github.com/users/drolando/orgs", "repos_url": "https://api.github.com/users/drolando/repos", "events_url": "https://api.github.com/users/drolando/events{/privacy}", "received_events_url": "https://api.github.com/users/drolando/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-06-25T16:54:46Z", "updated_at": "2018-06-26T18:34:16Z", "closed_at": "2018-06-26T18:34:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Seems like the last merge to master caused travis to get unhappy: https://travis-ci.org/Yelp/py_zipkin/builds/394248606\r\n\r\nI think the pypi upload doesn't check for a new version before trying to upload so it fails when there's no version bump.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/85", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/85/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/85/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/85", "id": 333351673, "node_id": "MDU6SXNzdWUzMzMzNTE2NzM=", "number": 85, "title": "How to check if there is an ongoing span before creating a new one?", "user": {"login": "fcribeiro", "id": 32277190, "node_id": "MDQ6VXNlcjMyMjc3MTkw", "avatar_url": "https://avatars0.githubusercontent.com/u/32277190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fcribeiro", "html_url": "https://github.com/fcribeiro", "followers_url": "https://api.github.com/users/fcribeiro/followers", "following_url": "https://api.github.com/users/fcribeiro/following{/other_user}", "gists_url": "https://api.github.com/users/fcribeiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/fcribeiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fcribeiro/subscriptions", "organizations_url": "https://api.github.com/users/fcribeiro/orgs", "repos_url": "https://api.github.com/users/fcribeiro/repos", "events_url": "https://api.github.com/users/fcribeiro/events{/privacy}", "received_events_url": "https://api.github.com/users/fcribeiro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-18T16:46:35Z", "updated_at": "2018-06-18T17:30:20Z", "closed_at": "2018-06-18T17:30:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I would like to know how I could check if there is already a parent span created before I create a new one but I cannot find an example of that in the documentation.\r\n\r\n\r\nImagine I have a microservice A and B and a user makes a request for a function in A called function1 which then send a request for function2 in microservice B. I need to start a span on function1 and then I could use a decorator to trace that function2 on microservice B. What if a user calls for function2 in microservice B in the first place? \r\nI need to be able to start a span there but if I keep the annotation, when a user calls for function1 in microservice A, I will then have 2 different traces, one with 2 spans one nested into the other, and the other one with just 1 span from function2. I am not sure if I am explaining myself but in the end I would like a way to check if there is an ongoing trace and if so, a nested span is created, if not, a new trace needs to start.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/83", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/83/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/83/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/83", "id": 333098929, "node_id": "MDU6SXNzdWUzMzMwOTg5Mjk=", "number": 83, "title": "No module named py_zipkin.transport (File missing)", "user": {"login": "fcribeiro", "id": 32277190, "node_id": "MDQ6VXNlcjMyMjc3MTkw", "avatar_url": "https://avatars0.githubusercontent.com/u/32277190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fcribeiro", "html_url": "https://github.com/fcribeiro", "followers_url": "https://api.github.com/users/fcribeiro/followers", "following_url": "https://api.github.com/users/fcribeiro/following{/other_user}", "gists_url": "https://api.github.com/users/fcribeiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/fcribeiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fcribeiro/subscriptions", "organizations_url": "https://api.github.com/users/fcribeiro/orgs", "repos_url": "https://api.github.com/users/fcribeiro/repos", "events_url": "https://api.github.com/users/fcribeiro/events{/privacy}", "received_events_url": "https://api.github.com/users/fcribeiro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-17T22:42:59Z", "updated_at": "2018-06-18T16:55:11Z", "closed_at": "2018-06-18T16:36:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I wanted to use py_zipkin for my project but when I try to install it via pip install py_zipkin, the file \"transport.py\" seems to be missing, causing the \"ModuleNotFoundError: No module named 'py_zipkin.transport'\".\r\nI was able to work arround this issue by installing the package manually but if I want to run my application using a docker container it will fail because of the same problem since the file transport.py will be missing when installing py_zipkin.\r\n\r\nI am sorry if I did not describe this issue in the best way but I hope you could fix this so I could still use py_zipkin in my project.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/62", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/62/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/62/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/62", "id": 256908894, "node_id": "MDU6SXNzdWUyNTY5MDg4OTQ=", "number": 62, "title": "how to use py_zipkin?", "user": {"login": "hugoren", "id": 15722064, "node_id": "MDQ6VXNlcjE1NzIyMDY0", "avatar_url": "https://avatars2.githubusercontent.com/u/15722064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugoren", "html_url": "https://github.com/hugoren", "followers_url": "https://api.github.com/users/hugoren/followers", "following_url": "https://api.github.com/users/hugoren/following{/other_user}", "gists_url": "https://api.github.com/users/hugoren/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugoren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugoren/subscriptions", "organizations_url": "https://api.github.com/users/hugoren/orgs", "repos_url": "https://api.github.com/users/hugoren/repos", "events_url": "https://api.github.com/users/hugoren/events{/privacy}", "received_events_url": "https://api.github.com/users/hugoren/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-12T03:44:43Z", "updated_at": "2017-09-12T06:25:02Z", "closed_at": "2017-09-12T04:02:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I read all kinds of documents, still don't understand, how to use py_zipkin?\r\nhelp me", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/61", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/61/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/61/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/61", "id": 255368045, "node_id": "MDU6SXNzdWUyNTUzNjgwNDU=", "number": 61, "title": "Should we still support python \"logging\" span api", "user": {"login": "bplotnick", "id": 5392381, "node_id": "MDQ6VXNlcjUzOTIzODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5392381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bplotnick", "html_url": "https://github.com/bplotnick", "followers_url": "https://api.github.com/users/bplotnick/followers", "following_url": "https://api.github.com/users/bplotnick/following{/other_user}", "gists_url": "https://api.github.com/users/bplotnick/gists{/gist_id}", "starred_url": "https://api.github.com/users/bplotnick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bplotnick/subscriptions", "organizations_url": "https://api.github.com/users/bplotnick/orgs", "repos_url": "https://api.github.com/users/bplotnick/repos", "events_url": "https://api.github.com/users/bplotnick/events{/privacy}", "received_events_url": "https://api.github.com/users/bplotnick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-09-05T18:31:37Z", "updated_at": "2018-08-10T15:48:06Z", "closed_at": "2018-08-10T15:48:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I don't think that there is much use to be able to say `zipkin_logger.debug(some_dict_form_of_span)`. It only seems to make the api more complicated and cause issues like #23. Can we just get rid of it and store the trace context in thread local?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/59", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/59/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/59/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/59", "id": 249475279, "node_id": "MDU6SXNzdWUyNDk0NzUyNzk=", "number": 59, "title": "Is it necessary to push spans onto thread_local if they are not sampled?", "user": {"login": "Jefftree", "id": 7691399, "node_id": "MDQ6VXNlcjc2OTEzOTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7691399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jefftree", "html_url": "https://github.com/Jefftree", "followers_url": "https://api.github.com/users/Jefftree/followers", "following_url": "https://api.github.com/users/Jefftree/following{/other_user}", "gists_url": "https://api.github.com/users/Jefftree/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jefftree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jefftree/subscriptions", "organizations_url": "https://api.github.com/users/Jefftree/orgs", "repos_url": "https://api.github.com/users/Jefftree/repos", "events_url": "https://api.github.com/users/Jefftree/events{/privacy}", "received_events_url": "https://api.github.com/users/Jefftree/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 418287364, "node_id": "MDU6TGFiZWw0MTgyODczNjQ=", "url": "https://api.github.com/repos/Yelp/py_zipkin/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-08-10T21:00:42Z", "updated_at": "2017-08-16T21:58:23Z", "closed_at": "2017-08-16T21:58:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider a case where the root span has a very low sampling rate and there are a bunch of nested zipkin spans. \r\n\r\n```\r\nwith zipkin_span(...):\r\n    with zipkin_span(...):\r\n        ...\r\n```\r\nIf the trace is not sampled, the root span's `is_sampled` flag will be false, and the span will not be logged. However we are still generating a new span after entering each `zipkin_span` context and pushing the span onto thread local. \r\n\r\nhttps://github.com/Yelp/py_zipkin/blob/master/py_zipkin/zipkin.py#L264\r\n\r\nand \r\n\r\nhttps://github.com/Yelp/py_zipkin/blob/master/py_zipkin/zipkin.py#L280\r\n\r\nThis newly generated span is not used for logging (since `is_sampled` is false) and there is really no need to push and pop it from the stack. The total time to generate/push/pop this span from thread local is not very significant, but this adds up for a service with many nested spans.\r\n\r\nCan we do an additional check for whether a span is sampled before generating its parameters and pushing it onto thread_local?\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/57", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/57/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/57/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/57", "id": 248482174, "node_id": "MDU6SXNzdWUyNDg0ODIxNzQ=", "number": 57, "title": "py_zipkin span is not accepted by the openzipkin collector.", "user": {"login": "travelsalesman", "id": 2648252, "node_id": "MDQ6VXNlcjI2NDgyNTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2648252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/travelsalesman", "html_url": "https://github.com/travelsalesman", "followers_url": "https://api.github.com/users/travelsalesman/followers", "following_url": "https://api.github.com/users/travelsalesman/following{/other_user}", "gists_url": "https://api.github.com/users/travelsalesman/gists{/gist_id}", "starred_url": "https://api.github.com/users/travelsalesman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/travelsalesman/subscriptions", "organizations_url": "https://api.github.com/users/travelsalesman/orgs", "repos_url": "https://api.github.com/users/travelsalesman/repos", "events_url": "https://api.github.com/users/travelsalesman/events{/privacy}", "received_events_url": "https://api.github.com/users/travelsalesman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-08-07T17:43:46Z", "updated_at": "2017-08-29T15:09:25Z", "closed_at": "2017-08-29T15:09:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "1. Run `docker run -d --net host openzipkin/zipkin`\r\n\r\n2. Install py-zipkin `pip install py-zipkin==0.8.3`\r\n2. Run the following python script: \r\n```\r\n#!/usr/bin/env python\r\n\r\nimport requests\r\n\r\nfrom py_zipkin.zipkin import zipkin_span\r\n\r\ndef http_transport(encoded_span):\r\n    # The collector expects a thrift-encoded list of spans.\r\n    requests.post(\r\n        'http://localhost:9411/api/v1/spans',\r\n        data=encoded_span,\r\n        headers={'Content-Type': 'application/x-thrift'},\r\n    )\r\n\r\nif __name__ == '__main__':\r\n    with zipkin_span(\r\n        service_name='test_service',\r\n        transport_handler=http_transport,\r\n        sample_rate=100.0,\r\n    ):\r\n        print \"Work\"\r\n```\r\nI see the following log line in the collector and  get a 400 responce\r\n\r\n```\r\n2017-08-07 00:43:04.851  WARN 7 --- [nio-9411-exec-7] zipkin.server.ZipkinHttpCollector        : [Malformed reading List<Span> from TBinary]([url](url))\r\n\r\njava.lang.IllegalArgumentException: Malformed reading List<Span> from TBinary\r\n\tat zipkin.internal.ThriftCodec.exceptionReading(ThriftCodec.java:600) ~[zipkin-1.29.1.jar!/:na]\r\n\tat zipkin.internal.ThriftCodec.readList(ThriftCodec.java:564) ~[zipkin-1.29.1.jar!/:na]\r\n\tat zipkin.internal.ThriftCodec.readSpans(ThriftCodec.java:88) ~[zipkin-1.29.1.jar!/:na]\r\n\tat zipkin.collector.Collector.acceptSpans(Collector.java:93) ~[zipkin-1.29.1.jar!/:na]\r\n\tat zipkin.server.ZipkinHttpCollector.validateAndStoreSpans(ZipkinHttpCollector.java:88) [classes/:na]\r\n\tat zipkin.server.ZipkinHttpCollector.uploadSpansThrift(ZipkinHttpCollector.java:73) [classes/:na]\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/44", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/44/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/44/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/44", "id": 232711950, "node_id": "MDU6SXNzdWUyMzI3MTE5NTA=", "number": 44, "title": "Error annotations and binary annotations", "user": {"login": "bplotnick", "id": 5392381, "node_id": "MDQ6VXNlcjUzOTIzODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5392381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bplotnick", "html_url": "https://github.com/bplotnick", "followers_url": "https://api.github.com/users/bplotnick/followers", "following_url": "https://api.github.com/users/bplotnick/following{/other_user}", "gists_url": "https://api.github.com/users/bplotnick/gists{/gist_id}", "starred_url": "https://api.github.com/users/bplotnick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bplotnick/subscriptions", "organizations_url": "https://api.github.com/users/bplotnick/orgs", "repos_url": "https://api.github.com/users/bplotnick/repos", "events_url": "https://api.github.com/users/bplotnick/events{/privacy}", "received_events_url": "https://api.github.com/users/bplotnick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "kaisen", "id": 429282, "node_id": "MDQ6VXNlcjQyOTI4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/429282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaisen", "html_url": "https://github.com/kaisen", "followers_url": "https://api.github.com/users/kaisen/followers", "following_url": "https://api.github.com/users/kaisen/following{/other_user}", "gists_url": "https://api.github.com/users/kaisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaisen/subscriptions", "organizations_url": "https://api.github.com/users/kaisen/orgs", "repos_url": "https://api.github.com/users/kaisen/repos", "events_url": "https://api.github.com/users/kaisen/events{/privacy}", "received_events_url": "https://api.github.com/users/kaisen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "kaisen", "id": 429282, "node_id": "MDQ6VXNlcjQyOTI4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/429282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaisen", "html_url": "https://github.com/kaisen", "followers_url": "https://api.github.com/users/kaisen/followers", "following_url": "https://api.github.com/users/kaisen/following{/other_user}", "gists_url": "https://api.github.com/users/kaisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaisen/subscriptions", "organizations_url": "https://api.github.com/users/kaisen/orgs", "repos_url": "https://api.github.com/users/kaisen/repos", "events_url": "https://api.github.com/users/kaisen/events{/privacy}", "received_events_url": "https://api.github.com/users/kaisen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-05-31T22:11:18Z", "updated_at": "2017-06-30T21:31:12Z", "closed_at": "2017-06-30T21:31:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In #13, it was mentioned that we don't have error annotations. Since the `__exit__` function in the context manager gets exception information, it should be pretty easy to add an error annotation (and an error binary annotation with exception information)\r\n\r\nThe thrift file does a better job than me at describing error annotations:\r\n```\r\n***** Annotation.value or BinaryAnnotation.key ******\r\n/**\r\n * When an annotation value, this indicates when an error occurred. When a\r\n * binary annotation key, the value is a human readable message associated\r\n * with an error.\r\n *\r\n * Due to transient errors, an ERROR annotation should not be interpreted\r\n * as a span failure, even the annotation might explain additional latency.\r\n * Instrumentation should add the ERROR binary annotation when the operation\r\n * failed and couldn't be recovered.\r\n *\r\n * Here's an example: A span has an ERROR annotation, added when a WIRE_SEND\r\n * failed. Another WIRE_SEND succeeded, so there's no ERROR binary annotation\r\n * on the span because the overall operation succeeded.\r\n *\r\n * Note that RPC spans often include both client and server hosts: It is\r\n * possible that only one side perceived the error.\r\n */\r\nconst string ERROR = \"error\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/42", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/42/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/42/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/42", "id": 232422600, "node_id": "MDU6SXNzdWUyMzI0MjI2MDA=", "number": 42, "title": "server send timings overstated", "user": {"login": "Jefftree", "id": 7691399, "node_id": "MDQ6VXNlcjc2OTEzOTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7691399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jefftree", "html_url": "https://github.com/Jefftree", "followers_url": "https://api.github.com/users/Jefftree/followers", "following_url": "https://api.github.com/users/Jefftree/following{/other_user}", "gists_url": "https://api.github.com/users/Jefftree/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jefftree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jefftree/subscriptions", "organizations_url": "https://api.github.com/users/Jefftree/orgs", "repos_url": "https://api.github.com/users/Jefftree/repos", "events_url": "https://api.github.com/users/Jefftree/events{/privacy}", "received_events_url": "https://api.github.com/users/Jefftree/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-31T00:47:16Z", "updated_at": "2017-06-28T07:23:10Z", "closed_at": "2017-06-28T07:23:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In a few zipkin traces, there were instances where server send was being emitted after client receive. It seems that \"server send\" represents the time when zipkin logging is finished (for a root span). However, a function being traced would already be completed when zipkin logging starts.\r\n\r\nI believe the \"server send\" should be timestamped at the same time as `logging_start` since `logging_start` occurs when a function ends, and waiting until logging is completed would skew the timings (and make the span appear longer than the amount of time it actually took). We could potentially add a `logging_end` field to where the current \"server send\" is being logged.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/41", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/41/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/41/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/41", "id": 232408972, "node_id": "MDU6SXNzdWUyMzI0MDg5NzI=", "number": 41, "title": "Support all available annotation types for binary annotations", "user": {"login": "kaisen", "id": 429282, "node_id": "MDQ6VXNlcjQyOTI4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/429282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaisen", "html_url": "https://github.com/kaisen", "followers_url": "https://api.github.com/users/kaisen/followers", "following_url": "https://api.github.com/users/kaisen/following{/other_user}", "gists_url": "https://api.github.com/users/kaisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaisen/subscriptions", "organizations_url": "https://api.github.com/users/kaisen/orgs", "repos_url": "https://api.github.com/users/kaisen/repos", "events_url": "https://api.github.com/users/kaisen/events{/privacy}", "received_events_url": "https://api.github.com/users/kaisen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-30T23:14:30Z", "updated_at": "2017-06-05T21:39:28Z", "closed_at": "2017-06-05T21:39:27Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "According to the zipkin thrift spec, binary annotations can be of types bool, bytes, int, double, and string. py_zipkin currently only supports string binary annotations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/37", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/37/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/37/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/37", "id": 231265076, "node_id": "MDU6SXNzdWUyMzEyNjUwNzY=", "number": 37, "title": "If your host can not be resolved by DNS, it will break tracing", "user": {"login": "dmitry-prokopchenkov", "id": 28386832, "node_id": "MDQ6VXNlcjI4Mzg2ODMy", "avatar_url": "https://avatars3.githubusercontent.com/u/28386832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmitry-prokopchenkov", "html_url": "https://github.com/dmitry-prokopchenkov", "followers_url": "https://api.github.com/users/dmitry-prokopchenkov/followers", "following_url": "https://api.github.com/users/dmitry-prokopchenkov/following{/other_user}", "gists_url": "https://api.github.com/users/dmitry-prokopchenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmitry-prokopchenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmitry-prokopchenkov/subscriptions", "organizations_url": "https://api.github.com/users/dmitry-prokopchenkov/orgs", "repos_url": "https://api.github.com/users/dmitry-prokopchenkov/repos", "events_url": "https://api.github.com/users/dmitry-prokopchenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/dmitry-prokopchenkov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 418287358, "node_id": "MDU6TGFiZWw0MTgyODczNTg=", "url": "https://api.github.com/repos/Yelp/py_zipkin/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "bplotnick", "id": 5392381, "node_id": "MDQ6VXNlcjUzOTIzODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5392381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bplotnick", "html_url": "https://github.com/bplotnick", "followers_url": "https://api.github.com/users/bplotnick/followers", "following_url": "https://api.github.com/users/bplotnick/following{/other_user}", "gists_url": "https://api.github.com/users/bplotnick/gists{/gist_id}", "starred_url": "https://api.github.com/users/bplotnick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bplotnick/subscriptions", "organizations_url": "https://api.github.com/users/bplotnick/orgs", "repos_url": "https://api.github.com/users/bplotnick/repos", "events_url": "https://api.github.com/users/bplotnick/events{/privacy}", "received_events_url": "https://api.github.com/users/bplotnick/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bplotnick", "id": 5392381, "node_id": "MDQ6VXNlcjUzOTIzODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5392381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bplotnick", "html_url": "https://github.com/bplotnick", "followers_url": "https://api.github.com/users/bplotnick/followers", "following_url": "https://api.github.com/users/bplotnick/following{/other_user}", "gists_url": "https://api.github.com/users/bplotnick/gists{/gist_id}", "starred_url": "https://api.github.com/users/bplotnick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bplotnick/subscriptions", "organizations_url": "https://api.github.com/users/bplotnick/orgs", "repos_url": "https://api.github.com/users/bplotnick/repos", "events_url": "https://api.github.com/users/bplotnick/events{/privacy}", "received_events_url": "https://api.github.com/users/bplotnick/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-05-25T07:43:57Z", "updated_at": "2017-05-30T18:05:44Z", "closed_at": "2017-05-30T18:05:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In some cases a machine host cannot be successfully resolved be DNS (for instance, dev machines weren't fully setup in my case). If your host is not resolvable, you will get an exception in  https://github.com/Yelp/py_zipkin/blob/master/py_zipkin/thrift/__init__.py#L64. This problem fully breaks tracing. I think this can be processed in more graceful way. May be it's better to log and swallow the exception and use the hostname as an endpoint. What do you think, guys?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/35", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/35/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/35/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/35", "id": 228530332, "node_id": "MDU6SXNzdWUyMjg1MzAzMzI=", "number": 35, "title": "How can I create client root span?", "user": {"login": "dmitry-prokopchenkov", "id": 28386832, "node_id": "MDQ6VXNlcjI4Mzg2ODMy", "avatar_url": "https://avatars3.githubusercontent.com/u/28386832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmitry-prokopchenkov", "html_url": "https://github.com/dmitry-prokopchenkov", "followers_url": "https://api.github.com/users/dmitry-prokopchenkov/followers", "following_url": "https://api.github.com/users/dmitry-prokopchenkov/following{/other_user}", "gists_url": "https://api.github.com/users/dmitry-prokopchenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmitry-prokopchenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmitry-prokopchenkov/subscriptions", "organizations_url": "https://api.github.com/users/dmitry-prokopchenkov/orgs", "repos_url": "https://api.github.com/users/dmitry-prokopchenkov/repos", "events_url": "https://api.github.com/users/dmitry-prokopchenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/dmitry-prokopchenkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-05-14T09:44:18Z", "updated_at": "2017-07-04T07:32:26Z", "closed_at": "2017-06-29T19:24:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "'sr' and 'ss' annotations are always added to root span in [logging_helper.py:150](https://github.com/Yelp/py_zipkin/blob/master/py_zipkin/logging_helper.py#L150). It's not correctly for client root spans.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/33", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/33/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/33/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/33", "id": 220651766, "node_id": "MDU6SXNzdWUyMjA2NTE3NjY=", "number": 33, "title": "Log 'sa' annotation for client spans", "user": {"login": "Coalla", "id": 2087862, "node_id": "MDQ6VXNlcjIwODc4NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2087862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Coalla", "html_url": "https://github.com/Coalla", "followers_url": "https://api.github.com/users/Coalla/followers", "following_url": "https://api.github.com/users/Coalla/following{/other_user}", "gists_url": "https://api.github.com/users/Coalla/gists{/gist_id}", "starred_url": "https://api.github.com/users/Coalla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Coalla/subscriptions", "organizations_url": "https://api.github.com/users/Coalla/orgs", "repos_url": "https://api.github.com/users/Coalla/repos", "events_url": "https://api.github.com/users/Coalla/events{/privacy}", "received_events_url": "https://api.github.com/users/Coalla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "kaisen", "id": 429282, "node_id": "MDQ6VXNlcjQyOTI4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/429282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaisen", "html_url": "https://github.com/kaisen", "followers_url": "https://api.github.com/users/kaisen/followers", "following_url": "https://api.github.com/users/kaisen/following{/other_user}", "gists_url": "https://api.github.com/users/kaisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaisen/subscriptions", "organizations_url": "https://api.github.com/users/kaisen/orgs", "repos_url": "https://api.github.com/users/kaisen/repos", "events_url": "https://api.github.com/users/kaisen/events{/privacy}", "received_events_url": "https://api.github.com/users/kaisen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "kaisen", "id": 429282, "node_id": "MDQ6VXNlcjQyOTI4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/429282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaisen", "html_url": "https://github.com/kaisen", "followers_url": "https://api.github.com/users/kaisen/followers", "following_url": "https://api.github.com/users/kaisen/following{/other_user}", "gists_url": "https://api.github.com/users/kaisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaisen/subscriptions", "organizations_url": "https://api.github.com/users/kaisen/orgs", "repos_url": "https://api.github.com/users/kaisen/repos", "events_url": "https://api.github.com/users/kaisen/events{/privacy}", "received_events_url": "https://api.github.com/users/kaisen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-04-10T13:53:29Z", "updated_at": "2017-06-01T17:45:39Z", "closed_at": "2017-06-01T17:45:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is from zipkin docs (http://zipkin.io/pages/data_model.html)\r\n> spans that include cs can log an sa annotation of where they are going\r\n> This helps when the destination protocol isn\u2019t Zipkin instrumented, such as MySQL.\r\n\r\nIt seems that you can't log third-party server address using in such way. Please advise.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/29", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/29/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/29/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/29", "id": 200294878, "node_id": "MDU6SXNzdWUyMDAyOTQ4Nzg=", "number": 29, "title": "potential performance bottleneck", "user": {"login": "bpatelcs", "id": 5114250, "node_id": "MDQ6VXNlcjUxMTQyNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5114250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpatelcs", "html_url": "https://github.com/bpatelcs", "followers_url": "https://api.github.com/users/bpatelcs/followers", "following_url": "https://api.github.com/users/bpatelcs/following{/other_user}", "gists_url": "https://api.github.com/users/bpatelcs/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpatelcs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpatelcs/subscriptions", "organizations_url": "https://api.github.com/users/bpatelcs/orgs", "repos_url": "https://api.github.com/users/bpatelcs/repos", "events_url": "https://api.github.com/users/bpatelcs/events{/privacy}", "received_events_url": "https://api.github.com/users/bpatelcs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-12T07:14:59Z", "updated_at": "2017-02-01T22:49:53Z", "closed_at": "2017-02-01T22:49:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "@mjbryant  I am new to advanced python, feel free to scold me if I am wrong.\r\n\r\nso when we want to trace the function call we can use decorator but by looking at the following code it looks like for each decorator declaration it will create two zipkin instances and throw the first one.\r\n\r\nwhen we do `@zipkin(service_name=\"foo\",span_name=\"bar\")` it will first create the instance of zipkin class by passing the arguments to `__init__` and then the `__call__` method will be called and again in the decorated function you are creating the new instance with the same arguments in context manager block , in my view we should optimize the code if this is true.\r\n\r\n\r\n    def __call__(self, f):\r\n        @functools.wraps(f)\r\n        def decorated(*args, **kwargs):\r\n            with zipkin_span(\r\n                service_name=self.service_name,\r\n                span_name=self.span_name,\r\n                zipkin_attrs=self.zipkin_attrs,\r\n                transport_handler=self.transport_handler,\r\n                annotations=self.annotations,\r\n                binary_annotations=self.binary_annotations,\r\n                port=self.port,\r\n                sample_rate=self.sample_rate,\r\n                include=self.include,\r\n            ):\r\n                return f(*args, **kwargs)\r\n        return decorated\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/28", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/28/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/28/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/28", "id": 200220219, "node_id": "MDU6SXNzdWUyMDAyMjAyMTk=", "number": 28, "title": "Support 128-bit trace IDs", "user": {"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "kaisen", "id": 429282, "node_id": "MDQ6VXNlcjQyOTI4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/429282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaisen", "html_url": "https://github.com/kaisen", "followers_url": "https://api.github.com/users/kaisen/followers", "following_url": "https://api.github.com/users/kaisen/following{/other_user}", "gists_url": "https://api.github.com/users/kaisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaisen/subscriptions", "organizations_url": "https://api.github.com/users/kaisen/orgs", "repos_url": "https://api.github.com/users/kaisen/repos", "events_url": "https://api.github.com/users/kaisen/events{/privacy}", "received_events_url": "https://api.github.com/users/kaisen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "kaisen", "id": 429282, "node_id": "MDQ6VXNlcjQyOTI4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/429282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaisen", "html_url": "https://github.com/kaisen", "followers_url": "https://api.github.com/users/kaisen/followers", "following_url": "https://api.github.com/users/kaisen/following{/other_user}", "gists_url": "https://api.github.com/users/kaisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaisen/subscriptions", "organizations_url": "https://api.github.com/users/kaisen/orgs", "repos_url": "https://api.github.com/users/kaisen/repos", "events_url": "https://api.github.com/users/kaisen/events{/privacy}", "received_events_url": "https://api.github.com/users/kaisen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-01-11T21:59:29Z", "updated_at": "2017-06-05T08:31:48Z", "closed_at": "2017-06-01T20:29:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/openzipkin/zipkin/releases/tag/1.14.4 added support for 128-bit trace IDs via a new `trace_id_high` field in the thrift schema. We'll have to update to support this use case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/25", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/25/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/25/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/25", "id": 192186343, "node_id": "MDU6SXNzdWUxOTIxODYzNDM=", "number": 25, "title": "Report span.timestamp and duration", "user": {"login": "adriancole", "id": 64215, "node_id": "MDQ6VXNlcjY0MjE1", "avatar_url": "https://avatars2.githubusercontent.com/u/64215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adriancole", "html_url": "https://github.com/adriancole", "followers_url": "https://api.github.com/users/adriancole/followers", "following_url": "https://api.github.com/users/adriancole/following{/other_user}", "gists_url": "https://api.github.com/users/adriancole/gists{/gist_id}", "starred_url": "https://api.github.com/users/adriancole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adriancole/subscriptions", "organizations_url": "https://api.github.com/users/adriancole/orgs", "repos_url": "https://api.github.com/users/adriancole/repos", "events_url": "https://api.github.com/users/adriancole/events{/privacy}", "received_events_url": "https://api.github.com/users/adriancole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2016-11-29T04:40:23Z", "updated_at": "2017-02-03T16:53:23Z", "closed_at": "2017-02-03T16:53:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "While possible to derive a span's timestamp and duration at query time, it is best to report them to zipkin. This reduces the guesswork on the server side, and particularly makes the cassandra storage implementation more effective. This also makes the duration query operable.\r\n\r\n### Do we need to do anything?\r\nHere's the normal doc on that zipkin.io/pages/instrumenting.html This elaborates timestamp and duration a bit, particularly that they can be supplied independently of annotations (sometimes more accurately that way, as a stopwatch isn't at risk of NTP updates)\r\n\r\nThen, we'd need to ensure that the special-case of [continuing a client-originated span on the server](https://github.com/openzipkin/openzipkin.github.io/issues/49) is addressed (where B3 headers are read). This might happen here or in pyramid, depending on if we introduce B3 extraction here or not.\r\n\r\nHere are tests that should be in place to ensure that span.timestamp and duration are set properly.\r\n\r\n* client creates a span and propagates it to a server\r\n  * client propagates b3 headers for trace id, span id, and sampled=1\r\n  * server neither reports span.timestamp nor duration\r\n  * client reports span.timestamp and duration\r\n\r\n* server creates a new trace\r\n  * no b3 headers are detected\r\n  * server reports span.timestamp and duration\r\n\r\n* server creates a new trace with externally supplied ids\r\n  * caller propagates b3 headers for trace id, span id, but *no sampled header*\r\n  * server reports span.timestamp and duration\r\n\r\nDoes this make sense? Can anyone here help implement this?\r\n\r\nSee https://github.com/openzipkin/brave/issues/277#issuecomment-262429392", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/23", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/23/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/23/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/23", "id": 189262915, "node_id": "MDU6SXNzdWUxODkyNjI5MTU=", "number": 23, "title": "py_zipkin doesn't work correctly in threaded applications", "user": {"login": "kaisen", "id": 429282, "node_id": "MDQ6VXNlcjQyOTI4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/429282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaisen", "html_url": "https://github.com/kaisen", "followers_url": "https://api.github.com/users/kaisen/followers", "following_url": "https://api.github.com/users/kaisen/following{/other_user}", "gists_url": "https://api.github.com/users/kaisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaisen/subscriptions", "organizations_url": "https://api.github.com/users/kaisen/orgs", "repos_url": "https://api.github.com/users/kaisen/repos", "events_url": "https://api.github.com/users/kaisen/events{/privacy}", "received_events_url": "https://api.github.com/users/kaisen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-11-15T00:11:01Z", "updated_at": "2018-08-10T15:53:06Z", "closed_at": "2018-08-10T15:53:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Something like this:\r\n````python\r\nfrom py_zipkin.zipkin import zipkin_span\r\n\r\ndef main():\r\n    with zipkin_span(service_name='main', span_name='kicking_off_threads'):\r\n        threads = []\r\n        for i in range(5):\r\n            t = threading.Thread(target=self.test_threading)\r\n            threads.append(t)\r\n            t.start()\r\n\r\n@zipkin_span(service_name='test_threading', span_name='test_threading')\r\ndef test_threading():\r\n    print 'in test_threading'\r\n    return\r\n````\r\n\r\nIn this example, only the kicking_off_threads span is logged. This is due to the fact that the zipkin context is stored in the local thread, so other threads have no knowledge of the ongoing trace. Can we/should we support this use case?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/20", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/20/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/20/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/20", "id": 186661555, "node_id": "MDU6SXNzdWUxODY2NjE1NTU=", "number": 20, "title": "In rare cases, a zipkin_span context that isn't the root span can try to log using transport_handler", "user": {"login": "kaisen", "id": 429282, "node_id": "MDQ6VXNlcjQyOTI4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/429282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaisen", "html_url": "https://github.com/kaisen", "followers_url": "https://api.github.com/users/kaisen/followers", "following_url": "https://api.github.com/users/kaisen/following{/other_user}", "gists_url": "https://api.github.com/users/kaisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaisen/subscriptions", "organizations_url": "https://api.github.com/users/kaisen/orgs", "repos_url": "https://api.github.com/users/kaisen/repos", "events_url": "https://api.github.com/users/kaisen/events{/privacy}", "received_events_url": "https://api.github.com/users/kaisen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-01T22:08:33Z", "updated_at": "2016-11-04T18:00:13Z", "closed_at": "2016-11-04T18:00:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```\r\n...\r\nFile \"/venv/lib/python2.7/site-packages/py_zipkin/zipkin.py\", line 173, in decorated\r\n  return f(*args, **kwargs)\r\nFile \"/venv/lib/python2.7/site-packages/py_zipkin/zipkin.py\", line 268, in __exit__\r\n  self.stop(_exc_type, _exc_value, _exc_traceback)\r\nFile \"/venv/lib/python2.7/site-packages/py_zipkin/zipkin.py\", line 286, in stop\r\n  self.logging_context.__exit__(_exc_type, _exc_value, _exc_traceback)\r\nFile \"/venv/lib/python2.7/site-packages/py_zipkin/logging_helper.py\", line 72, in __exit__\r\n  self.log_spans()\r\nFile \"/venv/lib/python2.7/site-packages/py_zipkin/logging_helper.py\", line 162, in log_spans\r\n  transport_handler=self.transport_handler,\r\nFile \"/venv/lib/python2.7/site-packages/py_zipkin/logging_helper.py\", line 281, in log_span\r\n  transport_handler(message)\r\nTypeError: 'NoneType' object is not callable\r\n```\r\n\r\nWe've encountered rare situations where a block of code is wrapped with a zipkin_span context within the context of a root span, but when the inner zipkin_span context exits, it somehow thinks it's a root span and tries to log stuff using the transport_handler. But since transport_handler is null, this raises an error.\r\n\r\nI haven't been able to duplicate this yet, but a bandaid fix is to be defensive about transport_handler being null when attempting to log spans.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/15", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/15/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/15/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/15", "id": 184059514, "node_id": "MDU6SXNzdWUxODQwNTk1MTQ=", "number": 15, "title": "override autocalc of host in thrift.create_endpoint", "user": {"login": "lorinbeer", "id": 177034, "node_id": "MDQ6VXNlcjE3NzAzNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/177034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorinbeer", "html_url": "https://github.com/lorinbeer", "followers_url": "https://api.github.com/users/lorinbeer/followers", "following_url": "https://api.github.com/users/lorinbeer/following{/other_user}", "gists_url": "https://api.github.com/users/lorinbeer/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorinbeer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorinbeer/subscriptions", "organizations_url": "https://api.github.com/users/lorinbeer/orgs", "repos_url": "https://api.github.com/users/lorinbeer/repos", "events_url": "https://api.github.com/users/lorinbeer/events{/privacy}", "received_events_url": "https://api.github.com/users/lorinbeer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-10-19T20:00:37Z", "updated_at": "2016-10-19T21:08:41Z", "closed_at": "2016-10-19T21:08:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "currently host is determined with socket.gethostbyname\n\nchange create_endpoint to accept a 'host' param to override the default behaviour\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/13", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/13/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/13/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/13", "id": 182763617, "node_id": "MDU6SXNzdWUxODI3NjM2MTc=", "number": 13, "title": "how do we idiomatically send cs, cr annotations", "user": {"login": "adriancole", "id": 64215, "node_id": "MDQ6VXNlcjY0MjE1", "avatar_url": "https://avatars2.githubusercontent.com/u/64215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adriancole", "html_url": "https://github.com/adriancole", "followers_url": "https://api.github.com/users/adriancole/followers", "following_url": "https://api.github.com/users/adriancole/following{/other_user}", "gists_url": "https://api.github.com/users/adriancole/gists{/gist_id}", "starred_url": "https://api.github.com/users/adriancole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adriancole/subscriptions", "organizations_url": "https://api.github.com/users/adriancole/orgs", "repos_url": "https://api.github.com/users/adriancole/repos", "events_url": "https://api.github.com/users/adriancole/events{/privacy}", "received_events_url": "https://api.github.com/users/adriancole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-13T11:25:25Z", "updated_at": "2017-06-16T16:59:31Z", "closed_at": "2017-06-16T16:59:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "hey there. In making this, I noticed the resulting span for an outgoing request has only server annotations (\"sr\", \"ss\"). https://github.com/openzipkin/pyramid_zipkin-example/pull/1\n\ndo you have ideas on making client instrumentation as an alternative to this pattern?\n\n``` python\n    headers = {}\n    headers.update(create_http_headers_for_new_span())\n    backend_response = requests.get(\n        url='http://localhost:9000/api',\n        headers=headers,\n    )\n```\n\nEx some interceptor for requests that starts a span, logs \"cs\" in that span, makes the outgoing request, logs \"cr\" in the same span once received, potentially adding an error annotation on transit error.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/11", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/11/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/11/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/11", "id": 182168897, "node_id": "MDU6SXNzdWUxODIxNjg4OTc=", "number": 11, "title": "change README to suggest http vs kafka", "user": {"login": "adriancole", "id": 64215, "node_id": "MDQ6VXNlcjY0MjE1", "avatar_url": "https://avatars2.githubusercontent.com/u/64215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adriancole", "html_url": "https://github.com/adriancole", "followers_url": "https://api.github.com/users/adriancole/followers", "following_url": "https://api.github.com/users/adriancole/following{/other_user}", "gists_url": "https://api.github.com/users/adriancole/gists{/gist_id}", "starred_url": "https://api.github.com/users/adriancole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adriancole/subscriptions", "organizations_url": "https://api.github.com/users/adriancole/orgs", "repos_url": "https://api.github.com/users/adriancole/repos", "events_url": "https://api.github.com/users/adriancole/events{/privacy}", "received_events_url": "https://api.github.com/users/adriancole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2016-10-11T04:07:56Z", "updated_at": "2016-10-12T19:24:19Z", "closed_at": "2016-10-12T19:24:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "While Kafka is a great transport, it isn't the best one to start with. How about if we change the example in the README to use http?\n\nWe can of course say in prod you'd likely use Kafka, but suggesting http in the README will reduce time spent helping users get started in gitter.\n\ncc @luukhoai who is trying to get started\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/8", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/8/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/8/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/8", "id": 179942527, "node_id": "MDU6SXNzdWUxNzk5NDI1Mjc=", "number": 8, "title": "bug", "user": {"login": "longinhit", "id": 8877164, "node_id": "MDQ6VXNlcjg4NzcxNjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/8877164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/longinhit", "html_url": "https://github.com/longinhit", "followers_url": "https://api.github.com/users/longinhit/followers", "following_url": "https://api.github.com/users/longinhit/following{/other_user}", "gists_url": "https://api.github.com/users/longinhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/longinhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/longinhit/subscriptions", "organizations_url": "https://api.github.com/users/longinhit/orgs", "repos_url": "https://api.github.com/users/longinhit/repos", "events_url": "https://api.github.com/users/longinhit/events{/privacy}", "received_events_url": "https://api.github.com/users/longinhit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2016-09-29T03:10:23Z", "updated_at": "2016-09-29T20:00:17Z", "closed_at": "2016-09-29T20:00:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "When the samp_rate is greater than 50, create_attrs_for_span () calculated is_sampled all true\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/7", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/7/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/7/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/7", "id": 179043757, "node_id": "MDU6SXNzdWUxNzkwNDM3NTc=", "number": 7, "title": "Sample Data or example application showing multiple spans", "user": {"login": "viperfx", "id": 328257, "node_id": "MDQ6VXNlcjMyODI1Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/328257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viperfx", "html_url": "https://github.com/viperfx", "followers_url": "https://api.github.com/users/viperfx/followers", "following_url": "https://api.github.com/users/viperfx/following{/other_user}", "gists_url": "https://api.github.com/users/viperfx/gists{/gist_id}", "starred_url": "https://api.github.com/users/viperfx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viperfx/subscriptions", "organizations_url": "https://api.github.com/users/viperfx/orgs", "repos_url": "https://api.github.com/users/viperfx/repos", "events_url": "https://api.github.com/users/viperfx/events{/privacy}", "received_events_url": "https://api.github.com/users/viperfx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-09-24T18:11:20Z", "updated_at": "2016-10-12T19:25:15Z", "closed_at": "2016-10-12T19:25:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nIs there example traces or sample data I can download to get an idea of how to use the attributes in zipkin? I wanted to trace how a particular event is processed through our components. Those events have unique identifiers and I am wondering how I should be passing them in to zipkin. I am going to be using python and Go instrumentation for our components. Just wondering about best practices etc.\n\nI have been tracing for some time now and I can't seem to see multiple spans with this lib. I just see one span for my services. I even set cutom span and parent_span ID's to be passed in.\n\nSome sample code:\nA task being queued \n\n```\n        zattr = ZipkinAttrs(trace_id=self.message.id.replace('-',''), span_id=self.message.id.replace('-',''), parent_span_id=None, flags=None, is_sampled=False)\n        with zipkin_span(\n            service_name='trace',\n            span_name=\"stage2:consumer\",\n            zipkin_attrs=zattr,\n            transport_handler=transport_handler,\n            sample_rate=0.1,\n            port=42,\n        ):\n            self._task.delay(self.message)\n```\n\nA worker executing the task\n\n```\n        if method is not None:\n            zattr = ZipkinAttrs(trace_id=self.message.id.replace('-',''), span_id=generate_random_64bit_string(), parent_span_id=self.message.id.replace('-',''), flags=None, is_sampled=False)\n            with zipkin_span(\n                service_name='trace',\n                span_name=\"stage3:worker\",\n                zipkin_attrs=zattr,\n                transport_handler=transport_handler,\n                sample_rate=0.1,\n                port=42,\n            ):\n                method()\n```\n\nI should be seeing a root trace and 2 spans right? or have I misunderstood something fundamental?\n\nThanks,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/6", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/6/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/6/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/6", "id": 178421946, "node_id": "MDU6SXNzdWUxNzg0MjE5NDY=", "number": 6, "title": "Support sending spans in batches", "user": {"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-09-21T18:10:31Z", "updated_at": "2017-08-04T21:37:36Z", "closed_at": "2017-08-04T21:37:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The Zipkin Kafka collector supports receiving batches of spans instead of single spans after https://github.com/openzipkin/zipkin/pull/995. However, having a py_zipkin user implement batching solely in the transport_handler seems like it'd be too difficult on their part. \n\nMaybe we could support having `ZipkinLoggingContext` take a batch_size param that defaults to something large but sane (20?), then in [log_spans](https://github.com/Yelp/py_zipkin/blob/8c03eac8b0d49fa64d644bef62edbfc044078bb1/py_zipkin/logging_helper.py#L75) we could call transport_handler with a list of thrift-encoded spans as opposed to a single span at a time.\n\n@kaisen, thoughts?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/3", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/3/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/3/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/3", "id": 177592522, "node_id": "MDU6SXNzdWUxNzc1OTI1MjI=", "number": 3, "title": "Include an example transport_handler", "user": {"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2016-09-17T17:19:35Z", "updated_at": "2016-09-20T18:06:01Z", "closed_at": "2016-09-20T18:06:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "This can be really simple, but I didn't realize that we have no examples of transport handlers in the docs or docstrings.\n\nSomething like\n\n``` python\nimport base64\nimport clog\n\ndef scribe_handler(stream_name, message):\n    clog.log_line(stream_name, base64.b64encode(message).strip())\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Yelp/py_zipkin/issues/2", "repository_url": "https://api.github.com/repos/Yelp/py_zipkin", "labels_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/2/comments", "events_url": "https://api.github.com/repos/Yelp/py_zipkin/issues/2/events", "html_url": "https://github.com/Yelp/py_zipkin/issues/2", "id": 177553778, "node_id": "MDU6SXNzdWUxNzc1NTM3Nzg=", "number": 2, "title": "Please add to the existing instrumentations list", "user": {"login": "adriancole", "id": 64215, "node_id": "MDQ6VXNlcjY0MjE1", "avatar_url": "https://avatars2.githubusercontent.com/u/64215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adriancole", "html_url": "https://github.com/adriancole", "followers_url": "https://api.github.com/users/adriancole/followers", "following_url": "https://api.github.com/users/adriancole/following{/other_user}", "gists_url": "https://api.github.com/users/adriancole/gists{/gist_id}", "starred_url": "https://api.github.com/users/adriancole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adriancole/subscriptions", "organizations_url": "https://api.github.com/users/adriancole/orgs", "repos_url": "https://api.github.com/users/adriancole/repos", "events_url": "https://api.github.com/users/adriancole/events{/privacy}", "received_events_url": "https://api.github.com/users/adriancole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mjbryant", "id": 6538298, "node_id": "MDQ6VXNlcjY1MzgyOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6538298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbryant", "html_url": "https://github.com/mjbryant", "followers_url": "https://api.github.com/users/mjbryant/followers", "following_url": "https://api.github.com/users/mjbryant/following{/other_user}", "gists_url": "https://api.github.com/users/mjbryant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbryant/subscriptions", "organizations_url": "https://api.github.com/users/mjbryant/orgs", "repos_url": "https://api.github.com/users/mjbryant/repos", "events_url": "https://api.github.com/users/mjbryant/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbryant/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2016-09-17T03:50:04Z", "updated_at": "2016-09-19T01:24:49Z", "closed_at": "2016-09-19T01:24:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "There have been a _ton_ of people asking for this. Very happy you've taken steps to extract a tracer. Can you add this to the instrumentation list? http://zipkin.io/pages/existing_instrumentations.html\n\nhttps://github.com/openzipkin/openzipkin.github.io/blob/master/_data/existing_instrumentations.yml#L14\n\nps I think swagger is missing, too\n", "performed_via_github_app": null, "score": 1.0}]}