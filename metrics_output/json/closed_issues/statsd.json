{"total_count": 45, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jsocol/pystatsd/issues/129", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/129/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/129/events", "html_url": "https://github.com/jsocol/pystatsd/issues/129", "id": 464945111, "node_id": "MDU6SXNzdWU0NjQ5NDUxMTE=", "number": 129, "title": "AttributeError: module 'statsd' has no attribute 'StatsClient'", "user": {"login": "atomlab", "id": 1222449, "node_id": "MDQ6VXNlcjEyMjI0NDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1222449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atomlab", "html_url": "https://github.com/atomlab", "followers_url": "https://api.github.com/users/atomlab/followers", "following_url": "https://api.github.com/users/atomlab/following{/other_user}", "gists_url": "https://api.github.com/users/atomlab/gists{/gist_id}", "starred_url": "https://api.github.com/users/atomlab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atomlab/subscriptions", "organizations_url": "https://api.github.com/users/atomlab/orgs", "repos_url": "https://api.github.com/users/atomlab/repos", "events_url": "https://api.github.com/users/atomlab/events{/privacy}", "received_events_url": "https://api.github.com/users/atomlab/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1452389124, "node_id": "MDU6TGFiZWwxNDUyMzg5MTI0", "url": "https://api.github.com/repos/jsocol/pystatsd/labels/needs-info", "name": "needs-info", "color": "d8a958", "default": false, "description": "waiting on information from the reporter"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-07T12:00:02Z", "updated_at": "2019-11-14T20:16:22Z", "closed_at": "2019-11-14T20:16:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have error `module 'statsd' has no attribute 'StatsClient'`\r\n```\r\n# pip3 --version\r\npip 9.0.1 from /usr/lib/python3/dist-packages (python 3.6)\r\n```\r\n```\r\n# pip3 list| grep stats\r\nstatsd (3.3.0)\r\n```\r\n```\r\n~# python3\r\nPython 3.6.7 (default, Oct 22 2018, 11:32:17)\r\n[GCC 8.2.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import statsd\r\n>>> c = statsd.StatsClient('localhost', 8125)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: module 'statsd' has no attribute 'StatsClient'\r\n```\r\nhelp is empty \r\n```\r\n>>> help(statsd)\r\n```\r\noutput\r\n```\r\nHelp on package statsd:\r\n\r\nNAME\r\n    statsd\r\n\r\nPACKAGE CONTENTS\r\n    client (package)\r\n\r\nFILE\r\n    (built-in)\r\n\r\n(END)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/127", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/127/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/127/events", "html_url": "https://github.com/jsocol/pystatsd/issues/127", "id": 442946196, "node_id": "MDU6SXNzdWU0NDI5NDYxOTY=", "number": 127, "title": "Support for AF_UNIX sockets?", "user": {"login": "lorencarvalho", "id": 1018108, "node_id": "MDQ6VXNlcjEwMTgxMDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1018108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorencarvalho", "html_url": "https://github.com/lorencarvalho", "followers_url": "https://api.github.com/users/lorencarvalho/followers", "following_url": "https://api.github.com/users/lorencarvalho/following{/other_user}", "gists_url": "https://api.github.com/users/lorencarvalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorencarvalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorencarvalho/subscriptions", "organizations_url": "https://api.github.com/users/lorencarvalho/orgs", "repos_url": "https://api.github.com/users/lorencarvalho/repos", "events_url": "https://api.github.com/users/lorencarvalho/events{/privacy}", "received_events_url": "https://api.github.com/users/lorencarvalho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-11T02:48:36Z", "updated_at": "2019-07-15T16:03:07Z", "closed_at": "2019-07-15T16:03:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there!\r\n\r\nI'm a big fan of this library and have used it extensively! I have a use case where I need to emit from many services on a box to a single statsd daemon (also on the box) that is listening on an AF_UNIX socket. To accomplish this I've subclassed the StatsClientBase in this library and added support for emitting to an AF_UNIX socket.\r\n\r\nI'm happy to submit a patch based on the subclass I mention, but I wanted to ask first if you would be interested in one. And if so, would you prefer it be \"automatic\" e.g. in my subclass if the `port` parameter is `None` we assume that the `address` is AF_UNIX. To me, that seems a little magical compared to the pystatsd API which is very explicit (and nice!). If so, would you prefer it be it's own StatsClientBase subclass like `StatsClientLocal` or something like that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/123", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/123/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/123/events", "html_url": "https://github.com/jsocol/pystatsd/issues/123", "id": 389230436, "node_id": "MDU6SXNzdWUzODkyMzA0MzY=", "number": 123, "title": "Option to not send timings in case of an exception", "user": {"login": "zeebonk", "id": 1188061, "node_id": "MDQ6VXNlcjExODgwNjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1188061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeebonk", "html_url": "https://github.com/zeebonk", "followers_url": "https://api.github.com/users/zeebonk/followers", "following_url": "https://api.github.com/users/zeebonk/following{/other_user}", "gists_url": "https://api.github.com/users/zeebonk/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeebonk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeebonk/subscriptions", "organizations_url": "https://api.github.com/users/zeebonk/orgs", "repos_url": "https://api.github.com/users/zeebonk/repos", "events_url": "https://api.github.com/users/zeebonk/events{/privacy}", "received_events_url": "https://api.github.com/users/zeebonk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-10T10:18:14Z", "updated_at": "2019-01-03T20:28:38Z", "closed_at": "2019-01-03T08:41:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The timing decorator is a very concise way of logging timing information for a block of code. We use these timings as the input for SLIs in our platform. When an exception takes places inside a timing context manager, the timing is always send. In our situation it would be preferable to NOT send a timing in case of an Exception.\r\n\r\nWould you be open for a PR that adds an extra optional argument to the `Timer` class that disables sending timings in case of an exception? For example: `log_on_exception=True`? The reason I'm asking is because it seems like a strange argument to have if you use the `Timer` class without the context manager.\r\n\r\nOr, if the above is not something you'd want, perhaps you might have other ideas for supporting this? I'm open for doing the implementation!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/120", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/120/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/120/events", "html_url": "https://github.com/jsocol/pystatsd/issues/120", "id": 371407244, "node_id": "MDU6SXNzdWUzNzE0MDcyNDQ=", "number": 120, "title": "Version 3.3.0 breaks backward compatibility", "user": {"login": "jancespivo", "id": 1116233, "node_id": "MDQ6VXNlcjExMTYyMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1116233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jancespivo", "html_url": "https://github.com/jancespivo", "followers_url": "https://api.github.com/users/jancespivo/followers", "following_url": "https://api.github.com/users/jancespivo/following{/other_user}", "gists_url": "https://api.github.com/users/jancespivo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jancespivo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jancespivo/subscriptions", "organizations_url": "https://api.github.com/users/jancespivo/orgs", "repos_url": "https://api.github.com/users/jancespivo/repos", "events_url": "https://api.github.com/users/jancespivo/events{/privacy}", "received_events_url": "https://api.github.com/users/jancespivo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-18T08:03:26Z", "updated_at": "2018-10-28T21:59:16Z", "closed_at": "2018-10-28T21:59:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nwe use typings in our projects. And because we want to run our projects on variety of clients according to actual demands (for example UnixSocketStatsClient  or TCPStatsClient or StatsClient) we use supertype `statsd.client.StatsClientBase` for typings. Unfortunatelly the `StatsClientBase` has been moved to `statsd.client.base` so the code is broken now. We know it is undocumented API, but it is public class.\r\n\r\nI created the pull request for it: https://github.com/jsocol/pystatsd/pull/121\r\n\r\nBest regards", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/106", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/106/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/106/events", "html_url": "https://github.com/jsocol/pystatsd/issues/106", "id": 352479689, "node_id": "MDU6SXNzdWUzNTI0Nzk2ODk=", "number": 106, "title": "Restore metaclass functionality on all python versions", "user": {"login": "jancespivo", "id": 1116233, "node_id": "MDQ6VXNlcjExMTYyMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1116233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jancespivo", "html_url": "https://github.com/jancespivo", "followers_url": "https://api.github.com/users/jancespivo/followers", "following_url": "https://api.github.com/users/jancespivo/following{/other_user}", "gists_url": "https://api.github.com/users/jancespivo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jancespivo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jancespivo/subscriptions", "organizations_url": "https://api.github.com/users/jancespivo/orgs", "repos_url": "https://api.github.com/users/jancespivo/repos", "events_url": "https://api.github.com/users/jancespivo/events{/privacy}", "received_events_url": "https://api.github.com/users/jancespivo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-08-21T10:30:36Z", "updated_at": "2018-10-02T11:18:30Z", "closed_at": "2018-08-21T14:48:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nsee https://github.com/jsocol/pystatsd/blob/ace112e95d7f7231a87513622913bb77debe0d7d/statsd/client.py#L84  \r\nUnfortunately `__metaclass__` has no effect in Python 3. The correct way in Python3 is: `class StatsClientBase(metaclass=abc.ABCMeta):` \r\n\r\nThe best way how to keep compatibility with the Python 2 is to use `six` or `future.utils`. For only this particular purpose I recommend the `future.utils`. See http://python-future.org/_modules/future/utils.html#with_metaclass", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/103", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/103/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/103/events", "html_url": "https://github.com/jsocol/pystatsd/issues/103", "id": 282393360, "node_id": "MDU6SXNzdWUyODIzOTMzNjA=", "number": 103, "title": "3.2.2 is not published yet", "user": {"login": "patoroco", "id": 701909, "node_id": "MDQ6VXNlcjcwMTkwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/701909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patoroco", "html_url": "https://github.com/patoroco", "followers_url": "https://api.github.com/users/patoroco/followers", "following_url": "https://api.github.com/users/patoroco/following{/other_user}", "gists_url": "https://api.github.com/users/patoroco/gists{/gist_id}", "starred_url": "https://api.github.com/users/patoroco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patoroco/subscriptions", "organizations_url": "https://api.github.com/users/patoroco/orgs", "repos_url": "https://api.github.com/users/patoroco/repos", "events_url": "https://api.github.com/users/patoroco/events{/privacy}", "received_events_url": "https://api.github.com/users/patoroco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-15T11:04:50Z", "updated_at": "2017-12-15T14:06:53Z", "closed_at": "2017-12-15T14:06:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI was reading [CHANGES](https://github.com/jsocol/pystatsd/blob/c934453f8d5709f7075b845e03ba31e228d31bca/CHANGES#L9) file, and it shows reference to 3.2.2 version, which was done in https://github.com/jsocol/pystatsd/commit/7c5ccf18c916ad4b812668c5f63170f9bb8b02a2, but this is not published yet in pypi.\r\n\r\nCould you push it to use these version instead of use github+sha reference?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/101", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/101/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/101/events", "html_url": "https://github.com/jsocol/pystatsd/issues/101", "id": 281792095, "node_id": "MDU6SXNzdWUyODE3OTIwOTU=", "number": 101, "title": "AttributeError: 'module' object has no attribute 'Connection'", "user": {"login": "commititup", "id": 10977405, "node_id": "MDQ6VXNlcjEwOTc3NDA1", "avatar_url": "https://avatars2.githubusercontent.com/u/10977405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/commititup", "html_url": "https://github.com/commititup", "followers_url": "https://api.github.com/users/commititup/followers", "following_url": "https://api.github.com/users/commititup/following{/other_user}", "gists_url": "https://api.github.com/users/commititup/gists{/gist_id}", "starred_url": "https://api.github.com/users/commititup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/commititup/subscriptions", "organizations_url": "https://api.github.com/users/commititup/orgs", "repos_url": "https://api.github.com/users/commititup/repos", "events_url": "https://api.github.com/users/commititup/events{/privacy}", "received_events_url": "https://api.github.com/users/commititup/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-13T15:35:22Z", "updated_at": "2017-12-14T06:15:45Z", "closed_at": "2017-12-13T17:16:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\ni was following the example given here https://pypi.python.org/pypi/python-statsd under the advanced section.\r\n\r\n```\r\nimport statsd\r\nconn = statsd.Connection(host='metrics.test.com',port=2000)\r\n```\r\nthis is giving me following error\r\n\r\n```\r\nconn = statsd.Connection(host='metrics.test.com',port=2000)\r\nAttributeError: 'module' object has no attribute 'Connection'\r\n```\r\n\r\ncan anybody explain what the issue is ?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/100", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/100/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/100/events", "html_url": "https://github.com/jsocol/pystatsd/issues/100", "id": 266984577, "node_id": "MDU6SXNzdWUyNjY5ODQ1Nzc=", "number": 100, "title": "multi-metric packets are not formatted correctly", "user": {"login": "gmlevin", "id": 5603695, "node_id": "MDQ6VXNlcjU2MDM2OTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5603695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmlevin", "html_url": "https://github.com/gmlevin", "followers_url": "https://api.github.com/users/gmlevin/followers", "following_url": "https://api.github.com/users/gmlevin/following{/other_user}", "gists_url": "https://api.github.com/users/gmlevin/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmlevin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmlevin/subscriptions", "organizations_url": "https://api.github.com/users/gmlevin/orgs", "repos_url": "https://api.github.com/users/gmlevin/repos", "events_url": "https://api.github.com/users/gmlevin/events{/privacy}", "received_events_url": "https://api.github.com/users/gmlevin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-19T20:50:44Z", "updated_at": "2017-10-25T19:10:09Z", "closed_at": "2017-10-20T14:45:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am seeing that if there are multiple metrics showing up in a udp packet, they are not separated by newlines, per this reference.\r\n\r\nhttps://github.com/etsy/statsd/blob/master/docs/metric_types.md#multi-metric-packets\r\n\r\nI am seeing things like `X:100|gY:250|g` which is misinterpreted by the daemon.\r\nIs this configurable? Is there a work around?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/97", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/97/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/97/events", "html_url": "https://github.com/jsocol/pystatsd/issues/97", "id": 249241582, "node_id": "MDU6SXNzdWUyNDkyNDE1ODI=", "number": 97, "title": "with gevent", "user": {"login": "huangxiaohen2738", "id": 6038418, "node_id": "MDQ6VXNlcjYwMzg0MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6038418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huangxiaohen2738", "html_url": "https://github.com/huangxiaohen2738", "followers_url": "https://api.github.com/users/huangxiaohen2738/followers", "following_url": "https://api.github.com/users/huangxiaohen2738/following{/other_user}", "gists_url": "https://api.github.com/users/huangxiaohen2738/gists{/gist_id}", "starred_url": "https://api.github.com/users/huangxiaohen2738/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huangxiaohen2738/subscriptions", "organizations_url": "https://api.github.com/users/huangxiaohen2738/orgs", "repos_url": "https://api.github.com/users/huangxiaohen2738/repos", "events_url": "https://api.github.com/users/huangxiaohen2738/events{/privacy}", "received_events_url": "https://api.github.com/users/huangxiaohen2738/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-10T06:03:38Z", "updated_at": "2017-08-10T08:48:48Z", "closed_at": "2017-08-10T08:48:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "when I use the celery with gevent, statsd doesn't work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/95", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/95/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/95/events", "html_url": "https://github.com/jsocol/pystatsd/issues/95", "id": 242008236, "node_id": "MDU6SXNzdWUyNDIwMDgyMzY=", "number": 95, "title": "Negative timer values due to time.time", "user": {"login": "Poogles", "id": 4892260, "node_id": "MDQ6VXNlcjQ4OTIyNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4892260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Poogles", "html_url": "https://github.com/Poogles", "followers_url": "https://api.github.com/users/Poogles/followers", "following_url": "https://api.github.com/users/Poogles/following{/other_user}", "gists_url": "https://api.github.com/users/Poogles/gists{/gist_id}", "starred_url": "https://api.github.com/users/Poogles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Poogles/subscriptions", "organizations_url": "https://api.github.com/users/Poogles/orgs", "repos_url": "https://api.github.com/users/Poogles/repos", "events_url": "https://api.github.com/users/Poogles/events{/privacy}", "received_events_url": "https://api.github.com/users/Poogles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-11T11:01:26Z", "updated_at": "2017-08-26T18:08:00Z", "closed_at": "2017-08-26T18:02:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "We're seeing very occasional negative timer values due to NTP shifts and calls of time.time to gettimeofday(), rough background on that [here](https://blog.habets.se/2010/09/gettimeofday-should-never-be-used-to-measure-time.html).\r\n\r\n[perf_counter](https://docs.python.org/3/library/time.html#time.perf_counter) provides the highest resolution wall time available in Python 3, fixing this for 2 seems a little harder.  [clock](https://docs.python.org/2/library/time.html#time.clock) seems to be the logical choice, it is also based off wall time, however it looks as though it suffers resolution problems according to the timeit docs [here](https://docs.python.org/2/library/timeit.html#timeit.default_timer).  Without wanting a resolution regression this bug/edgecase will likely have to stay.\r\n\r\nComparing the performance between time.time and time.perf_counter doesn't show any performance regression.\r\n\r\n```\r\nIn [57]: timeit.timeit('perf_counter()', setup='from time import perf_counter', number=10000000)\r\nOut[57]: 2.137723121792078\r\n\r\nIn [58]: timeit.timeit('time()', setup='from time import time', number=10000000)\r\nOut[58]: 2.1814921628683805\r\n```\r\n\r\nI'll open a PR with a fix, I'm not sure how I'd write a test for this however.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/93", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/93/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/93/events", "html_url": "https://github.com/jsocol/pystatsd/issues/93", "id": 231955014, "node_id": "MDU6SXNzdWUyMzE5NTUwMTQ=", "number": 93, "title": "Asyncio support", "user": {"login": "povilasb", "id": 1213442, "node_id": "MDQ6VXNlcjEyMTM0NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1213442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/povilasb", "html_url": "https://github.com/povilasb", "followers_url": "https://api.github.com/users/povilasb/followers", "following_url": "https://api.github.com/users/povilasb/following{/other_user}", "gists_url": "https://api.github.com/users/povilasb/gists{/gist_id}", "starred_url": "https://api.github.com/users/povilasb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/povilasb/subscriptions", "organizations_url": "https://api.github.com/users/povilasb/orgs", "repos_url": "https://api.github.com/users/povilasb/repos", "events_url": "https://api.github.com/users/povilasb/events{/privacy}", "received_events_url": "https://api.github.com/users/povilasb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-05-29T08:13:34Z", "updated_at": "2017-06-13T14:34:24Z", "closed_at": "2017-06-13T14:34:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I hope motivation is clear - I want to send metrics from my async daemon :)\r\n\r\nTCP transport implementation looks very lean https://github.com/jsocol/pystatsd/blob/master/statsd/client.py#L157.\r\nSo I guess it would not be too hard to implement asyncio support.\r\n\r\nMaybe I could even do it on my spare time.\r\nWhat do you guys think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/91", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/91/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/91/events", "html_url": "https://github.com/jsocol/pystatsd/issues/91", "id": 220894412, "node_id": "MDU6SXNzdWUyMjA4OTQ0MTI=", "number": 91, "title": "Statsd fails hard on gaierror", "user": {"login": "deejay1", "id": 41211, "node_id": "MDQ6VXNlcjQxMjEx", "avatar_url": "https://avatars0.githubusercontent.com/u/41211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deejay1", "html_url": "https://github.com/deejay1", "followers_url": "https://api.github.com/users/deejay1/followers", "following_url": "https://api.github.com/users/deejay1/following{/other_user}", "gists_url": "https://api.github.com/users/deejay1/gists{/gist_id}", "starred_url": "https://api.github.com/users/deejay1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deejay1/subscriptions", "organizations_url": "https://api.github.com/users/deejay1/orgs", "repos_url": "https://api.github.com/users/deejay1/repos", "events_url": "https://api.github.com/users/deejay1/events{/privacy}", "received_events_url": "https://api.github.com/users/deejay1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-11T09:40:47Z", "updated_at": "2017-07-09T14:05:45Z", "closed_at": "2017-07-09T14:05:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "When there are temporary problems with DNS access decorating a function will result in an exception, which introduces unnecessary errors when for example it's used with RQ.\r\n\r\n```python\r\n    self._addr = (socket.gethostbyname(host), port)\r\n\r\ngaierror: [Errno -2] Name or service not known\r\n```\r\n\r\nI think a better solution would be to either drop it or log it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/87", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/87/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/87/events", "html_url": "https://github.com/jsocol/pystatsd/issues/87", "id": 190182459, "node_id": "MDU6SXNzdWUxOTAxODI0NTk=", "number": 87, "title": "Permission to add statsd to typeshed?", "user": {"login": "rowillia", "id": 808798, "node_id": "MDQ6VXNlcjgwODc5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/808798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rowillia", "html_url": "https://github.com/rowillia", "followers_url": "https://api.github.com/users/rowillia/followers", "following_url": "https://api.github.com/users/rowillia/following{/other_user}", "gists_url": "https://api.github.com/users/rowillia/gists{/gist_id}", "starred_url": "https://api.github.com/users/rowillia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rowillia/subscriptions", "organizations_url": "https://api.github.com/users/rowillia/orgs", "repos_url": "https://api.github.com/users/rowillia/repos", "events_url": "https://api.github.com/users/rowillia/events{/privacy}", "received_events_url": "https://api.github.com/users/rowillia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-17T22:26:29Z", "updated_at": "2017-07-09T14:07:16Z", "closed_at": "2017-07-09T14:07:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Howdy\r\n\r\nI'd like to add stubs for statsd to https://github.com/python/typeshed, a repository used to store PEP 484 type signatures for the python stdlib and popular third party libraries. As per PEP 484, permission is required from the library owner before merging type signatures into typeshed - https://www.python.org/dev/peps/pep-0484/#the-typeshed-repo.  Would you mind if I contributed those stubs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/85", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/85/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/85/events", "html_url": "https://github.com/jsocol/pystatsd/issues/85", "id": 181209350, "node_id": "MDU6SXNzdWUxODEyMDkzNTA=", "number": 85, "title": "Timer cannot decorate a partial function", "user": {"login": "leplatrem", "id": 546692, "node_id": "MDQ6VXNlcjU0NjY5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/546692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leplatrem", "html_url": "https://github.com/leplatrem", "followers_url": "https://api.github.com/users/leplatrem/followers", "following_url": "https://api.github.com/users/leplatrem/following{/other_user}", "gists_url": "https://api.github.com/users/leplatrem/gists{/gist_id}", "starred_url": "https://api.github.com/users/leplatrem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leplatrem/subscriptions", "organizations_url": "https://api.github.com/users/leplatrem/orgs", "repos_url": "https://api.github.com/users/leplatrem/repos", "events_url": "https://api.github.com/users/leplatrem/events{/privacy}", "received_events_url": "https://api.github.com/users/leplatrem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-05T16:53:38Z", "updated_at": "2017-11-07T14:27:52Z", "closed_at": "2017-11-07T14:27:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "How to reproduce:\n\n``` python\n>>> import functools\n>>> import time\n>>> import statsd\n>>> client = statsd.StatsClient()\n>>> sleep5 = functools.partial(time.sleep, 5)\n>>> client.timer('mystat')(sleep5)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"build/bdist.linux-x86_64/egg/statsd/client.py\", line 26, in __call__\n  File \"/usr/lib/python2.7/functools.py\", line 33, in update_wrapper\n    setattr(wrapper, attr, getattr(wrapped, attr))\nAttributeError: 'functools.partial' object has no attribute '__module__'\n```\n\nThere seems to be several approaches to fix it, like for example using a _safe_ version of `functools.wraps`. What do you think?\nI would be happy to contribute a fix!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/84", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/84/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/84/events", "html_url": "https://github.com/jsocol/pystatsd/issues/84", "id": 175322224, "node_id": "MDU6SXNzdWUxNzUzMjIyMjQ=", "number": 84, "title": "Question on additional exception handling in UDP client", "user": {"login": "nate-opti", "id": 6729884, "node_id": "MDQ6VXNlcjY3Mjk4ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6729884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nate-opti", "html_url": "https://github.com/nate-opti", "followers_url": "https://api.github.com/users/nate-opti/followers", "following_url": "https://api.github.com/users/nate-opti/following{/other_user}", "gists_url": "https://api.github.com/users/nate-opti/gists{/gist_id}", "starred_url": "https://api.github.com/users/nate-opti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nate-opti/subscriptions", "organizations_url": "https://api.github.com/users/nate-opti/orgs", "repos_url": "https://api.github.com/users/nate-opti/repos", "events_url": "https://api.github.com/users/nate-opti/events{/privacy}", "received_events_url": "https://api.github.com/users/nate-opti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-06T18:51:23Z", "updated_at": "2016-09-06T20:06:52Z", "closed_at": "2016-09-06T20:06:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Wondering if you would be open to a PR adding additional exception handling, to catch _all_ exceptions while attempting to send UDP stats, instead of just socket and `RuntimeError`s? In case, for example, `data.encode('ascii')` throws an error, but the user doesn't want to crash the application because of it.\n\nE.g. changing this section: https://github.com/jsocol/pystatsd/blob/151ab6ba1d47a79404669b5a8c9b29d224862cf6/statsd/client.py#L145-L151\n\nTo this:\n\n```\ndef _send(self, data):\n    \"\"\"Send data to statsd.\"\"\"\n    try:\n        self._sock.sendto(data.encode('ascii'), self._addr)\n    except Exception:\n        # No time for love, Dr. Jones!\n        pass\n```\n\nIf not, this is certainly doable by the user of the lib, just wondering if you would like to add to trunk.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/83", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/83/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/83/events", "html_url": "https://github.com/jsocol/pystatsd/issues/83", "id": 173811852, "node_id": "MDU6SXNzdWUxNzM4MTE4NTI=", "number": 83, "title": "ability to send stated tags", "user": {"login": "kidanekal", "id": 1965078, "node_id": "MDQ6VXNlcjE5NjUwNzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1965078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kidanekal", "html_url": "https://github.com/kidanekal", "followers_url": "https://api.github.com/users/kidanekal/followers", "following_url": "https://api.github.com/users/kidanekal/following{/other_user}", "gists_url": "https://api.github.com/users/kidanekal/gists{/gist_id}", "starred_url": "https://api.github.com/users/kidanekal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kidanekal/subscriptions", "organizations_url": "https://api.github.com/users/kidanekal/orgs", "repos_url": "https://api.github.com/users/kidanekal/repos", "events_url": "https://api.github.com/users/kidanekal/events{/privacy}", "received_events_url": "https://api.github.com/users/kidanekal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-08-29T16:12:42Z", "updated_at": "2017-07-09T14:05:25Z", "closed_at": "2016-10-05T17:01:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looking at ways to send tags for a given metrics so that I can slice and dice data more easily. \n\nIt will be great if pystatsd support passing tags as follows.\n\n`statsd_client.incr('upload.request_count', tags=['env:local', 'db:remote'])`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/82", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/82/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/82/events", "html_url": "https://github.com/jsocol/pystatsd/issues/82", "id": 162391857, "node_id": "MDU6SXNzdWUxNjIzOTE4NTc=", "number": 82, "title": "Mocking statsd object while running tests", "user": {"login": "tasdikrahman", "id": 4672518, "node_id": "MDQ6VXNlcjQ2NzI1MTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4672518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tasdikrahman", "html_url": "https://github.com/tasdikrahman", "followers_url": "https://api.github.com/users/tasdikrahman/followers", "following_url": "https://api.github.com/users/tasdikrahman/following{/other_user}", "gists_url": "https://api.github.com/users/tasdikrahman/gists{/gist_id}", "starred_url": "https://api.github.com/users/tasdikrahman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tasdikrahman/subscriptions", "organizations_url": "https://api.github.com/users/tasdikrahman/orgs", "repos_url": "https://api.github.com/users/tasdikrahman/repos", "events_url": "https://api.github.com/users/tasdikrahman/events{/privacy}", "received_events_url": "https://api.github.com/users/tasdikrahman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-27T07:45:39Z", "updated_at": "2016-06-28T13:04:56Z", "closed_at": "2016-06-28T12:56:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey @jsocol \n\nThanks for your detailed response on #81 . It worked for me using the context manager.\n\nNow, I have a test suite in the project directory where I am using `statsd`. The method where I have my context manager is tested inside a unit test. \n\nWhenever I run `$ python setup.py test`, inside the statsd client, I see that the responses are getting logged in the statsd log (I am running statsd by doing a `$ node stats.js config.js 2>&1 > /tmp/statsd.log`)\n\n``` sh\n27 Jun 07:07:24 - DEBUG: numStats: 4\n27 Jun 07:07:32 - DEBUG: services.my_service-10.0.2.15-integrationtest#0_IOPerf:0.245810|ms\n27 Jun 07:07:32 - DEBUG: services.my_service-10.0.2.15-integrationtest#0_IOPerf:0.254869|ms\n27 Jun 07:07:34 - DEBUG: numStats: 5\n27 Jun 07:07:34 - DEBUG: services.my_service-10.0.2.15-integrationtest#0_IOPerf:0.131845|ms\n27 Jun 07:07:37 - DEBUG: services.test_IOPerf:0.015020|ms\n27 Jun 07:07:37 - DEBUG: services.test_IOPerf:0.016212|ms\n27 Jun 07:07:37 - DEBUG: services.test_IOPerf:0.015974|ms\n27 Jun 07:07:37 - DEBUG: services.test_IOPerf:0.010967|ms\n27 Jun 07:07:37 - DEBUG: services.test_IOPerf:0.011206|ms\n27 Jun 07:07:37 - DEBUG: services.test_IOPerf:0.008821|ms\n27 Jun 07:07:37 - DEBUG: services.test_IOPerf:0.010014|ms\n....\n....\n```\n\nSomething like the above. Now I don't want this to happen. How would I `mock` my `statsd` object here so as to not cause this processor overhead while testing\n\n**Method in which I have my `statsd` context manager, (which is being tested)**\n\n``` python\nstatsd = StatsClient(self.config['statsd_client'], prefix=socket.gethostname())\nstatsd_timer_name = '{0}_IOPerf'.format(self._consumer_tag)\n\nwith statsd.timer(statsd_timer_name):\n      self.handle(json_message)\n...\n```\n\nAny suggestions\n\n**EDIT**: Minor changes\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/81", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/81/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/81/events", "html_url": "https://github.com/jsocol/pystatsd/issues/81", "id": 161625071, "node_id": "MDU6SXNzdWUxNjE2MjUwNzE=", "number": 81, "title": "Use class variable for instantiating statsd object to use timer decorator", "user": {"login": "tasdikrahman", "id": 4672518, "node_id": "MDQ6VXNlcjQ2NzI1MTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4672518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tasdikrahman", "html_url": "https://github.com/tasdikrahman", "followers_url": "https://api.github.com/users/tasdikrahman/followers", "following_url": "https://api.github.com/users/tasdikrahman/following{/other_user}", "gists_url": "https://api.github.com/users/tasdikrahman/gists{/gist_id}", "starred_url": "https://api.github.com/users/tasdikrahman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tasdikrahman/subscriptions", "organizations_url": "https://api.github.com/users/tasdikrahman/orgs", "repos_url": "https://api.github.com/users/tasdikrahman/repos", "events_url": "https://api.github.com/users/tasdikrahman/events{/privacy}", "received_events_url": "https://api.github.com/users/tasdikrahman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-22T08:45:09Z", "updated_at": "2016-06-23T07:18:52Z", "closed_at": "2016-06-22T11:09:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use the `statsd` timer decorator\n\nMy file structure is something like this\n\n```\n\u251c\u2500\u2500 config.py\n\u251c\u2500\u2500 consumers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 foo_consumer.py\n```\n\nInside `foo_consumer.py`\n\n``` python\nfrom statsd import StatsClient\nimport socket\n\n# I am specifying the statsd client IP in the file \"config.py\"\nstatsd = \"\"\nstatsd_timer_name = 'foo_consumer_IOPerf_{0}'.format(socket.gethostname())\n\nclass FooConsumer(Consumer):\n    def __init__(self, config):\n        # Consumer class passed on the config.py file to this class\n        global statsd\n        statsd = StatsClient(config['statsd_client'], 8125)\n\n    @statsd.timer(statsd_timer_name)\n    def handle(self):\n        \"\"\"my heavyweight function\"\"\"\n```\n\nThis class is inherited by another class and then instantiated by it in the parent folder. \n\n**Error that I get**\n\n`AttributeError: 'str' object has no attribute 'timer'`\n\n**What else I have tried**\n\nIt is necessary that the `statsd_client` IP be specified over at the `config.py` file\n\nI thought about passing the `statsd_client` parameter to the decorator like this\n\n``` python\nclass FooConsumer(Consumer):\n    def __init__(self, config):\n        self.statsd = StatsClient(config['statsd_client'], 8125)\n\n    @self.statsd.timer(statsd_timer_name)\n    def handle(self):\n        \"\"\"my heavyweight function\"\"\"\n```\n\nNow wouldn't work as the class hasn't been instantiated and `self` is not known at this point.\n\nAny alternatives?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/80", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/80/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/80/events", "html_url": "https://github.com/jsocol/pystatsd/issues/80", "id": 159586107, "node_id": "MDU6SXNzdWUxNTk1ODYxMDc=", "number": 80, "title": "Backpoff mode for TCP client", "user": {"login": "mlowicki", "id": 97633, "node_id": "MDQ6VXNlcjk3NjMz", "avatar_url": "https://avatars0.githubusercontent.com/u/97633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlowicki", "html_url": "https://github.com/mlowicki", "followers_url": "https://api.github.com/users/mlowicki/followers", "following_url": "https://api.github.com/users/mlowicki/following{/other_user}", "gists_url": "https://api.github.com/users/mlowicki/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlowicki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlowicki/subscriptions", "organizations_url": "https://api.github.com/users/mlowicki/orgs", "repos_url": "https://api.github.com/users/mlowicki/repos", "events_url": "https://api.github.com/users/mlowicki/events{/privacy}", "received_events_url": "https://api.github.com/users/mlowicki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-10T08:40:15Z", "updated_at": "2016-06-10T12:41:10Z", "closed_at": "2016-06-10T11:21:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now when StatsD is down `TCPStatsClient` will try to establish TCP connection while handling each metric which is definitely unnecessary when it goes to use of resources and network saturation.\n\nIdea is to either implement simple logic like wait 1 second between each re-try or make it pluggable so would be easy to implement f.ex. exponential backoff.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/77", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/77/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/77/events", "html_url": "https://github.com/jsocol/pystatsd/issues/77", "id": 149865176, "node_id": "MDU6SXNzdWUxNDk4NjUxNzY=", "number": 77, "title": "suggested docs warning", "user": {"login": "jvanasco", "id": 204779, "node_id": "MDQ6VXNlcjIwNDc3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/204779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvanasco", "html_url": "https://github.com/jvanasco", "followers_url": "https://api.github.com/users/jvanasco/followers", "following_url": "https://api.github.com/users/jvanasco/following{/other_user}", "gists_url": "https://api.github.com/users/jvanasco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvanasco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvanasco/subscriptions", "organizations_url": "https://api.github.com/users/jvanasco/orgs", "repos_url": "https://api.github.com/users/jvanasco/repos", "events_url": "https://api.github.com/users/jvanasco/events{/privacy}", "received_events_url": "https://api.github.com/users/jvanasco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-04-20T19:36:59Z", "updated_at": "2016-05-28T15:49:47Z", "closed_at": "2016-05-28T15:49:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A common way to use Statsd is to create a client for a given process and continually reuse it.  That is fine, except for an annoying implementation detail that I noticed while securing a box.\n\nWhen data is first sent via `socket` ( https://github.com/jsocol/pystatsd/blob/master/statsd/client.py#L145-L151 ) Python appears to bind on all interfaces (e.g. `0.0.0.0`) to a random port in effort of accepting a response.  (sidenote: it took a while to pinpoint this onto pystatsd).  It would make sense to note this inherent behavior in the docs/readme for the next person who is securing their box.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/74", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/74/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/74/events", "html_url": "https://github.com/jsocol/pystatsd/issues/74", "id": 128021039, "node_id": "MDU6SXNzdWUxMjgwMjEwMzk=", "number": 74, "title": "Docs: Are timing decorators thread safe or not?", "user": {"login": "amedeedaboville", "id": 826619, "node_id": "MDQ6VXNlcjgyNjYxOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/826619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amedeedaboville", "html_url": "https://github.com/amedeedaboville", "followers_url": "https://api.github.com/users/amedeedaboville/followers", "following_url": "https://api.github.com/users/amedeedaboville/following{/other_user}", "gists_url": "https://api.github.com/users/amedeedaboville/gists{/gist_id}", "starred_url": "https://api.github.com/users/amedeedaboville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amedeedaboville/subscriptions", "organizations_url": "https://api.github.com/users/amedeedaboville/orgs", "repos_url": "https://api.github.com/users/amedeedaboville/repos", "events_url": "https://api.github.com/users/amedeedaboville/events{/privacy}", "received_events_url": "https://api.github.com/users/amedeedaboville/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-01-21T21:15:14Z", "updated_at": "2016-05-31T01:54:20Z", "closed_at": "2016-05-31T01:54:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "At http://statsd.readthedocs.org/en/latest/timing.html#using-a-decorator it says:\n\n```\nThe timer attribute decorates your methods in a thread-safe manner.\n```\n\nand on http://statsd.readthedocs.org/en/latest/reference.html#timer there is a big yellow warning box that says: \n\n```\nDecorators are not thread-safe and may cause errors when decorated functions are called concurrently. Use context managers or raw timers instead.\n```\n\nI'll use a `with` context manager for now, just in case. Thanks for the library!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/70", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/70/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/70/events", "html_url": "https://github.com/jsocol/pystatsd/issues/70", "id": 116995726, "node_id": "MDU6SXNzdWUxMTY5OTU3MjY=", "number": 70, "title": "gauges are not supported in statsd current version", "user": {"login": "edanshalom", "id": 4786397, "node_id": "MDQ6VXNlcjQ3ODYzOTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4786397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edanshalom", "html_url": "https://github.com/edanshalom", "followers_url": "https://api.github.com/users/edanshalom/followers", "following_url": "https://api.github.com/users/edanshalom/following{/other_user}", "gists_url": "https://api.github.com/users/edanshalom/gists{/gist_id}", "starred_url": "https://api.github.com/users/edanshalom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edanshalom/subscriptions", "organizations_url": "https://api.github.com/users/edanshalom/orgs", "repos_url": "https://api.github.com/users/edanshalom/repos", "events_url": "https://api.github.com/users/edanshalom/events{/privacy}", "received_events_url": "https://api.github.com/users/edanshalom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-15T14:48:21Z", "updated_at": "2015-11-15T14:49:17Z", "closed_at": "2015-11-15T14:49:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are gauges supported in the current statsd version embedded in this image?\nI tried to use them but I think the data is not being recorded.\nGauges were added to the statsd server in commit 0ed78be.\nDo you know if this version of statsd supports them?\nIf not, how can I update the current version of statsd?\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/67", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/67/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/67/events", "html_url": "https://github.com/jsocol/pystatsd/issues/67", "id": 112405681, "node_id": "MDU6SXNzdWUxMTI0MDU2ODE=", "number": 67, "title": "multiple-metrics packets with udp client?", "user": {"login": "filippog", "id": 93906, "node_id": "MDQ6VXNlcjkzOTA2", "avatar_url": "https://avatars1.githubusercontent.com/u/93906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/filippog", "html_url": "https://github.com/filippog", "followers_url": "https://api.github.com/users/filippog/followers", "following_url": "https://api.github.com/users/filippog/following{/other_user}", "gists_url": "https://api.github.com/users/filippog/gists{/gist_id}", "starred_url": "https://api.github.com/users/filippog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/filippog/subscriptions", "organizations_url": "https://api.github.com/users/filippog/orgs", "repos_url": "https://api.github.com/users/filippog/repos", "events_url": "https://api.github.com/users/filippog/events{/privacy}", "received_events_url": "https://api.github.com/users/filippog/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-20T16:17:00Z", "updated_at": "2015-10-20T19:12:03Z", "closed_at": "2015-10-20T19:12:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi,\nI was looking into having statsd send multiple packets via udp similarly to what tcp does, what do you think? statsd \"specs\" seem to suggest that multi-metric packets don't differentiate between udp and tcp\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/62", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/62/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/62/events", "html_url": "https://github.com/jsocol/pystatsd/issues/62", "id": 75886798, "node_id": "MDU6SXNzdWU3NTg4Njc5OA==", "number": 62, "title": "Allow lazy loading or re-configuring StatsClient", "user": {"login": "tuukkamustonen", "id": 94327, "node_id": "MDQ6VXNlcjk0MzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/94327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuukkamustonen", "html_url": "https://github.com/tuukkamustonen", "followers_url": "https://api.github.com/users/tuukkamustonen/followers", "following_url": "https://api.github.com/users/tuukkamustonen/following{/other_user}", "gists_url": "https://api.github.com/users/tuukkamustonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuukkamustonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuukkamustonen/subscriptions", "organizations_url": "https://api.github.com/users/tuukkamustonen/orgs", "repos_url": "https://api.github.com/users/tuukkamustonen/repos", "events_url": "https://api.github.com/users/tuukkamustonen/events{/privacy}", "received_events_url": "https://api.github.com/users/tuukkamustonen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-13T07:45:00Z", "updated_at": "2015-05-13T14:01:29Z", "closed_at": "2015-05-13T13:23:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Our WSGI application is created something like this:\n\n```\ndef build_app(conf_dir):\n    ...\n    return app\n```\n\nHere, I cannot define the `StatsClient` inside `build_app` as it wouldn't be importable for decorators then.\n\nSo I'm doing something like this:\n\n```\nclass ConfigurableStatsClient(StatsClient):\n    \"\"\"StatsClient extension that allows re-configuration after initialization.\n\n    Implemented because StatsClient does not allow lazy loading.\n\n    \"\"\"\n    def __init__(self, host='localhost', port=8125, prefix=None, maxudpsize=512, enabled=True):\n        \"\"\"Create a new client.\"\"\"\n        super(ConfigurableStatsClient, self).__init__(host, port, prefix, maxudpsize)\n        self._enabled = enabled\n\n    def reload(self, host='localhost', port=8125, prefix=None, maxudpsize=512, enabled=True):\n        \"\"\"Reloads client with newly given parameters.\"\"\"\n        self.__init__(host=host, port=port, prefix=prefix, maxudpsize=maxudpsize, enabled=enabled)\n\n    def _send(self, data):\n        \"\"\"Send data to statsd only if client is enabled.\"\"\"\n        if not self._enabled:\n            return\n        super(ConfigurableStatsClient, self)._send(data)\n\nSTATSD = ConfigurableStatsClient(enabled=False)\n\ndef build_app(conf_dir):\n\n    STATSD.reload(..., enabled=True)\n\n    return app\n```\n\nActually, `ConfigurableStatsClient` provides to features: 1) allow re-configuring later on, and 2) don't send packets if not `enabled`.\n\nI can make a PR out of this and split it into two, if it makes sense.\n\nOr, would there be some already supported way for doing this?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/61", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/61/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/61/events", "html_url": "https://github.com/jsocol/pystatsd/issues/61", "id": 62964868, "node_id": "MDU6SXNzdWU2Mjk2NDg2OA==", "number": 61, "title": "can't specify address family, may use the wrong one", "user": {"login": "nihn", "id": 7430132, "node_id": "MDQ6VXNlcjc0MzAxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7430132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nihn", "html_url": "https://github.com/nihn", "followers_url": "https://api.github.com/users/nihn/followers", "following_url": "https://api.github.com/users/nihn/following{/other_user}", "gists_url": "https://api.github.com/users/nihn/gists{/gist_id}", "starred_url": "https://api.github.com/users/nihn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nihn/subscriptions", "organizations_url": "https://api.github.com/users/nihn/orgs", "repos_url": "https://api.github.com/users/nihn/repos", "events_url": "https://api.github.com/users/nihn/events{/privacy}", "received_events_url": "https://api.github.com/users/nihn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-03-19T11:55:40Z", "updated_at": "2015-06-25T02:45:33Z", "closed_at": "2015-03-26T18:55:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nlatest release come with default ipv6 support. I think it should be an option not set by default because e.g. etsy statsd has ipv6 support disabled by default and updating pystatsd can easily broke metrics collecting and finding cause will be not so obvious (it happened to me :)).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/58", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/58/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/58/events", "html_url": "https://github.com/jsocol/pystatsd/issues/58", "id": 59636201, "node_id": "MDU6SXNzdWU1OTYzNjIwMQ==", "number": 58, "title": "Timer decorators on multiple functions send the same time values", "user": {"login": "sjwk", "id": 9693896, "node_id": "MDQ6VXNlcjk2OTM4OTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9693896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjwk", "html_url": "https://github.com/sjwk", "followers_url": "https://api.github.com/users/sjwk/followers", "following_url": "https://api.github.com/users/sjwk/following{/other_user}", "gists_url": "https://api.github.com/users/sjwk/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjwk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjwk/subscriptions", "organizations_url": "https://api.github.com/users/sjwk/orgs", "repos_url": "https://api.github.com/users/sjwk/repos", "events_url": "https://api.github.com/users/sjwk/events{/privacy}", "received_events_url": "https://api.github.com/users/sjwk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-03T12:41:38Z", "updated_at": "2015-03-03T14:25:15Z", "closed_at": "2015-03-03T14:20:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "This might be a bug, or by design and just my understanding of the docs that's bugged:\n\nI have a script (just a single thread) that is using decorators to apply timers to various functions so that I can see how long is spent in those functions on each run.\nHowever it seems that all timers, despite being different instances with different names, all send the same time value. (On my script, some functions take several seconds to run, yet all statsd timer values were showing up as around 66ms)\n\nFor example, a test script to demonstrate this:\n\n``` python\nimport time\nimport statsd\n\nsd=statsd.StatsClient('statsdhost', 8125, prefix='test')\n\n@sd.timer('wait_1')\n@sd.timer('wait_2')\n\ndef wait_1():\n        time.sleep(1)\n\ndef wait_2():\n        time.sleep(10)\n\nwait_2()\nwait_1()\nwith sd.timer('test2'):\n        wait_2()\n```\n\nsends the following values (captured from tcpdump between the machine the script is running on and the statsd host):\n\n```\ntest.wait_2:1001|ms\ntest.wait_1:1002|ms\ntest.test2:10010|ms\n```\n\nThe values aren't quite the same (1001 vs 1002), so it presumably isn't just using the same timer value, but test.wait_2 clearly isn't ~10,000ms either.  Changing the order that wait_1 and wait_2 are called does not change the value that is sent for both functions.\n\nSo, is this an issue, or is it my understanding of the code, and you can simply only have one timer running on a decorated function?  The docs don't say you can have more than one, but they don't say you can't either!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/56", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/56/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/56/events", "html_url": "https://github.com/jsocol/pystatsd/issues/56", "id": 56131077, "node_id": "MDU6SXNzdWU1NjEzMTA3Nw==", "number": 56, "title": "implement pyramid web framework default configuration", "user": {"login": "Webinator2129", "id": 1534356, "node_id": "MDQ6VXNlcjE1MzQzNTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1534356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Webinator2129", "html_url": "https://github.com/Webinator2129", "followers_url": "https://api.github.com/users/Webinator2129/followers", "following_url": "https://api.github.com/users/Webinator2129/following{/other_user}", "gists_url": "https://api.github.com/users/Webinator2129/gists{/gist_id}", "starred_url": "https://api.github.com/users/Webinator2129/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Webinator2129/subscriptions", "organizations_url": "https://api.github.com/users/Webinator2129/orgs", "repos_url": "https://api.github.com/users/Webinator2129/repos", "events_url": "https://api.github.com/users/Webinator2129/events{/privacy}", "received_events_url": "https://api.github.com/users/Webinator2129/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-01-31T16:58:57Z", "updated_at": "2015-03-18T12:30:33Z", "closed_at": "2015-03-18T12:30:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "implement support for pyramid web framework default configuration as done for Django\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/54", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/54/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/54/events", "html_url": "https://github.com/jsocol/pystatsd/issues/54", "id": 46787181, "node_id": "MDU6SXNzdWU0Njc4NzE4MQ==", "number": 54, "title": "support for sending data to statsd via tcp", "user": {"login": "WestleyArgentum", "id": 1900307, "node_id": "MDQ6VXNlcjE5MDAzMDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1900307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WestleyArgentum", "html_url": "https://github.com/WestleyArgentum", "followers_url": "https://api.github.com/users/WestleyArgentum/followers", "following_url": "https://api.github.com/users/WestleyArgentum/following{/other_user}", "gists_url": "https://api.github.com/users/WestleyArgentum/gists{/gist_id}", "starred_url": "https://api.github.com/users/WestleyArgentum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WestleyArgentum/subscriptions", "organizations_url": "https://api.github.com/users/WestleyArgentum/orgs", "repos_url": "https://api.github.com/users/WestleyArgentum/repos", "events_url": "https://api.github.com/users/WestleyArgentum/events{/privacy}", "received_events_url": "https://api.github.com/users/WestleyArgentum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-10-24T21:45:52Z", "updated_at": "2015-03-09T20:36:56Z", "closed_at": "2015-02-08T14:29:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Statsd can be configured to accept messages over tcp (instead of udp)\n\nWould it be easy to add support here?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/53", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/53/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/53/events", "html_url": "https://github.com/jsocol/pystatsd/issues/53", "id": 44681896, "node_id": "MDU6SXNzdWU0NDY4MTg5Ng==", "number": 53, "title": "How to map api key of hostedgrahite server", "user": {"login": "ianuragsingh", "id": 1724837, "node_id": "MDQ6VXNlcjE3MjQ4Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1724837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianuragsingh", "html_url": "https://github.com/ianuragsingh", "followers_url": "https://api.github.com/users/ianuragsingh/followers", "following_url": "https://api.github.com/users/ianuragsingh/following{/other_user}", "gists_url": "https://api.github.com/users/ianuragsingh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianuragsingh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianuragsingh/subscriptions", "organizations_url": "https://api.github.com/users/ianuragsingh/orgs", "repos_url": "https://api.github.com/users/ianuragsingh/repos", "events_url": "https://api.github.com/users/ianuragsingh/events{/privacy}", "received_events_url": "https://api.github.com/users/ianuragsingh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-02T12:43:47Z", "updated_at": "2014-10-02T15:25:32Z", "closed_at": "2014-10-02T15:25:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "HI James\n\nI am using pystatsd to send data on hostedgraphite, i have account there. But i am wondering how to use api key with this library.\n\nclient = statsd.StatsClient('statsd.hostedgraphite.com', 8125, prefix='staging.workers')\nclient.gauge('queueSize', 5);\n\nHow hosted graphite will map this data to my account. :)\n\nBest,\nAnurag\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/49", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/49/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/49/events", "html_url": "https://github.com/jsocol/pystatsd/issues/49", "id": 37718804, "node_id": "MDU6SXNzdWUzNzcxODgwNA==", "number": 49, "title": "statsd does nothing whereas shell test works fine", "user": {"login": "vak", "id": 69862, "node_id": "MDQ6VXNlcjY5ODYy", "avatar_url": "https://avatars1.githubusercontent.com/u/69862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vak", "html_url": "https://github.com/vak", "followers_url": "https://api.github.com/users/vak/followers", "following_url": "https://api.github.com/users/vak/following{/other_user}", "gists_url": "https://api.github.com/users/vak/gists{/gist_id}", "starred_url": "https://api.github.com/users/vak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vak/subscriptions", "organizations_url": "https://api.github.com/users/vak/orgs", "repos_url": "https://api.github.com/users/vak/repos", "events_url": "https://api.github.com/users/vak/events{/privacy}", "received_events_url": "https://api.github.com/users/vak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-07-12T12:40:25Z", "updated_at": "2014-07-12T13:46:33Z", "closed_at": "2014-07-12T13:46:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following works just fine in Ubuntu 14.04:\n\n``` bash\necho \"test.count 10 `date +%s`\" | nc -q0 127.0.0.1 2003\n```\n\nwhereas the following does nothing:\n\n``` python\nfrom statsd import StatsClient\nsc = StatsClient(host='localhost', port=2003, prefix='test', maxudpsize=512)\nsc.incr('count', 100)\n```\n\n```\n>>> statsd.__version__\n'3.0'\n```\n\ngraphite-carbon  0.9.12-3\ngraphite-web 0.9.12+debian-3\npython-whisper 0.9.12-1\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/47", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/47/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/47/events", "html_url": "https://github.com/jsocol/pystatsd/issues/47", "id": 34311484, "node_id": "MDU6SXNzdWUzNDMxMTQ4NA==", "number": 47, "title": "A way to change flush interval of a client", "user": {"login": "Shnkc", "id": 3256889, "node_id": "MDQ6VXNlcjMyNTY4ODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3256889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shnkc", "html_url": "https://github.com/Shnkc", "followers_url": "https://api.github.com/users/Shnkc/followers", "following_url": "https://api.github.com/users/Shnkc/following{/other_user}", "gists_url": "https://api.github.com/users/Shnkc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shnkc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shnkc/subscriptions", "organizations_url": "https://api.github.com/users/Shnkc/orgs", "repos_url": "https://api.github.com/users/Shnkc/repos", "events_url": "https://api.github.com/users/Shnkc/events{/privacy}", "received_events_url": "https://api.github.com/users/Shnkc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-05-26T14:31:06Z", "updated_at": "2014-05-26T18:08:47Z", "closed_at": "2014-05-26T18:08:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to change flush interval in client side? Metrics are sent in every 10 seconds. I want to widen the interval into a minute or more. (Pipeline gives the control of sending data, but I am looking for a way which will be exactly what I described above in order to get rid of satisfying thread-safety with pipeline)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/42", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/42/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/42/events", "html_url": "https://github.com/jsocol/pystatsd/issues/42", "id": 29169919, "node_id": "MDU6SXNzdWUyOTE2OTkxOQ==", "number": 42, "title": "timer used as a decorator can lead to runtime errors \"Already sent data\"", "user": {"login": "zvin", "id": 180331, "node_id": "MDQ6VXNlcjE4MDMzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/180331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zvin", "html_url": "https://github.com/zvin", "followers_url": "https://api.github.com/users/zvin/followers", "following_url": "https://api.github.com/users/zvin/following{/other_user}", "gists_url": "https://api.github.com/users/zvin/gists{/gist_id}", "starred_url": "https://api.github.com/users/zvin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zvin/subscriptions", "organizations_url": "https://api.github.com/users/zvin/orgs", "repos_url": "https://api.github.com/users/zvin/repos", "events_url": "https://api.github.com/users/zvin/events{/privacy}", "received_events_url": "https://api.github.com/users/zvin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-03-11T11:11:52Z", "updated_at": "2014-03-18T17:13:30Z", "closed_at": "2014-03-18T17:13:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think there should be a warning about using timers as decorators in http://statsd.readthedocs.org/en/latest/timing.html#using-a-decorator.\n\nFor example, if you use a timer decorator on a Flask view, you risk to run into a RuntimeError(\"Already sent data.\") if you have concurrent requests. This is because the decorator is interpreted only once and so it will call __enter__ and __exit__ methods on the same Timer object for different requests.\n\nTo avoid this, you should simply use a context manager inside of the function:\n\n``` python\ndef foo():\n    with sc.timer(\"foo\"):\n        bar()\n```\n\ninstead of \n\n``` python\n@sc.timer(\"foo\")\ndef foo():\n    bar()\n```\n\nHere is a test function that shows the issue:\n\n``` python\nfrom time import sleep\nfrom random import random\nfrom threading import Thread\ndef test_timer_decorator_concurrent():\n    sc = _client()\n\n    @sc.timer('bar')\n    def bar():\n        sleep(random())\n\n    nb_threads = 10\n    threads = []\n    for i in xrange(nb_threads):\n        t = Thread(target=bar)\n        threads.append(t)\n        t.start()\n    for t in threads:\n        t.join()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/40", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/40/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/40/events", "html_url": "https://github.com/jsocol/pystatsd/issues/40", "id": 25145282, "node_id": "MDU6SXNzdWUyNTE0NTI4Mg==", "number": 40, "title": "Negative values passed to gauge interpreted as delta", "user": {"login": "jaharkes", "id": 394722, "node_id": "MDQ6VXNlcjM5NDcyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/394722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaharkes", "html_url": "https://github.com/jaharkes", "followers_url": "https://api.github.com/users/jaharkes/followers", "following_url": "https://api.github.com/users/jaharkes/following{/other_user}", "gists_url": "https://api.github.com/users/jaharkes/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaharkes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaharkes/subscriptions", "organizations_url": "https://api.github.com/users/jaharkes/orgs", "repos_url": "https://api.github.com/users/jaharkes/repos", "events_url": "https://api.github.com/users/jaharkes/events{/privacy}", "received_events_url": "https://api.github.com/users/jaharkes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-01-07T02:56:06Z", "updated_at": "2014-01-07T21:02:14Z", "closed_at": "2014-01-07T21:02:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the current chilly weather we actually got negative Fahrenheit data values and when logged as a gauge we quickly arrived at -75 and plummeting ever faster. Oh wait no, the slightly negative values were interpreted as delta values.\n\nA fix for this is to send a 0 value before sending the negative value if delta is false.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/39", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/39/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/39/events", "html_url": "https://github.com/jsocol/pystatsd/issues/39", "id": 25126432, "node_id": "MDU6SXNzdWUyNTEyNjQzMg==", "number": 39, "title": "Noop client if a connection is not available", "user": {"login": "miracle2k", "id": 13807, "node_id": "MDQ6VXNlcjEzODA3", "avatar_url": "https://avatars1.githubusercontent.com/u/13807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miracle2k", "html_url": "https://github.com/miracle2k", "followers_url": "https://api.github.com/users/miracle2k/followers", "following_url": "https://api.github.com/users/miracle2k/following{/other_user}", "gists_url": "https://api.github.com/users/miracle2k/gists{/gist_id}", "starred_url": "https://api.github.com/users/miracle2k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miracle2k/subscriptions", "organizations_url": "https://api.github.com/users/miracle2k/orgs", "repos_url": "https://api.github.com/users/miracle2k/repos", "events_url": "https://api.github.com/users/miracle2k/events{/privacy}", "received_events_url": "https://api.github.com/users/miracle2k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-01-06T20:10:44Z", "updated_at": "2014-01-06T20:22:48Z", "closed_at": "2014-01-06T20:22:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "My could sometimes needs to run in scenarios where a statsd host is not available. I don't want to wrap every call to statsd into a condition.\n\nstatsd seems to be behave well if just using an empty string as the host, but I can't help but worry that this is the wrong thing performance wise.\n\nIs it a bad idea to just fire-and-forget and not worry about a statsd server being there? What is the right way?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/36", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/36/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/36/events", "html_url": "https://github.com/jsocol/pystatsd/issues/36", "id": 21301630, "node_id": "MDU6SXNzdWUyMTMwMTYzMA==", "number": 36, "title": "please tag v2.0.3 in git", "user": {"login": "hashar", "id": 281689, "node_id": "MDQ6VXNlcjI4MTY4OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/281689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hashar", "html_url": "https://github.com/hashar", "followers_url": "https://api.github.com/users/hashar/followers", "following_url": "https://api.github.com/users/hashar/following{/other_user}", "gists_url": "https://api.github.com/users/hashar/gists{/gist_id}", "starred_url": "https://api.github.com/users/hashar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hashar/subscriptions", "organizations_url": "https://api.github.com/users/hashar/orgs", "repos_url": "https://api.github.com/users/hashar/repos", "events_url": "https://api.github.com/users/hashar/events{/privacy}", "received_events_url": "https://api.github.com/users/hashar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-10-21T08:34:51Z", "updated_at": "2013-11-26T08:46:31Z", "closed_at": "2013-11-25T18:43:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nYou have recently released v2.0.3 on pypi: https://pypi.python.org/pypi/statsd but forgot to tag it in the git repository.\n\nThat prevents the Debian package from finding that version since it relies on git tags. It uses the URL: http://githubredir.debian.net/github/jsocol/pystatsd  which list v2.0.2.\n\nWould you be kind enough to tag v2.0.3 so I can get the Debian package updated and push it in Debian/unstable ?\n\nThank you!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/35", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/35/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/35/events", "html_url": "https://github.com/jsocol/pystatsd/issues/35", "id": 21282500, "node_id": "MDU6SXNzdWUyMTI4MjUwMA==", "number": 35, "title": "please tag in git v2.0.3", "user": {"login": "hashar", "id": 281689, "node_id": "MDQ6VXNlcjI4MTY4OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/281689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hashar", "html_url": "https://github.com/hashar", "followers_url": "https://api.github.com/users/hashar/followers", "following_url": "https://api.github.com/users/hashar/following{/other_user}", "gists_url": "https://api.github.com/users/hashar/gists{/gist_id}", "starred_url": "https://api.github.com/users/hashar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hashar/subscriptions", "organizations_url": "https://api.github.com/users/hashar/orgs", "repos_url": "https://api.github.com/users/hashar/repos", "events_url": "https://api.github.com/users/hashar/events{/privacy}", "received_events_url": "https://api.github.com/users/hashar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-10-20T16:11:24Z", "updated_at": "2013-11-25T18:45:06Z", "closed_at": "2013-11-25T18:45:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nI noticed you recently released v2.0.3 but apparently forgot to tag it in git. That is preventing the Debian package from discovering the new version.\n\npypi shows up 2.0.3 : https://pypi.python.org/pypi/statsd\n\nDebian tool detects only 2.0.2 : http://githubredir.debian.net/github/jsocol/pystatsd\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/31", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/31/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/31/events", "html_url": "https://github.com/jsocol/pystatsd/issues/31", "id": 17692505, "node_id": "MDU6SXNzdWUxNzY5MjUwNQ==", "number": 31, "title": "Presence of Django in environment doesn't mean statsd should import Django", "user": {"login": "wesc", "id": 214096, "node_id": "MDQ6VXNlcjIxNDA5Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/214096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesc", "html_url": "https://github.com/wesc", "followers_url": "https://api.github.com/users/wesc/followers", "following_url": "https://api.github.com/users/wesc/following{/other_user}", "gists_url": "https://api.github.com/users/wesc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesc/subscriptions", "organizations_url": "https://api.github.com/users/wesc/orgs", "repos_url": "https://api.github.com/users/wesc/repos", "events_url": "https://api.github.com/users/wesc/events{/privacy}", "received_events_url": "https://api.github.com/users/wesc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-08-06T14:19:46Z", "updated_at": "2014-05-09T15:31:20Z", "closed_at": "2014-05-09T15:31:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suppose that I have Django in my path because I'm developing a Django app. But I have an external tool, unrelated to Django, which requires pystatsd. If I import statsd, it will in turn import Django and use whatever STATSD_HOST it finds in settings.py, _even if that is not the STATSD_HOST I want_.\n\nThis also creates a dependency on Django. For example, if Django starts throwing a different error to signal missing defines in settings.py, pystatsd would have problems (similar to the Django 1.5 bug) -- even for non-Django applications.\n\nIf you want pystatsd to have Django support, my opinion is the correct approach is to create a statsd.django module that grabs STATSD_HOST from Django, and require Django apps to import that. For all other uses, importing statsd should have minimal dependencies.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/29", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/29/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/29/events", "html_url": "https://github.com/jsocol/pystatsd/issues/29", "id": 17168692, "node_id": "MDU6SXNzdWUxNzE2ODY5Mg==", "number": 29, "title": "PyPi has incorrect 2.0.1 version", "user": {"login": "jlintz", "id": 121029, "node_id": "MDQ6VXNlcjEyMTAyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/121029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlintz", "html_url": "https://github.com/jlintz", "followers_url": "https://api.github.com/users/jlintz/followers", "following_url": "https://api.github.com/users/jlintz/following{/other_user}", "gists_url": "https://api.github.com/users/jlintz/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlintz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlintz/subscriptions", "organizations_url": "https://api.github.com/users/jlintz/orgs", "repos_url": "https://api.github.com/users/jlintz/repos", "events_url": "https://api.github.com/users/jlintz/events{/privacy}", "received_events_url": "https://api.github.com/users/jlintz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-07-24T17:05:45Z", "updated_at": "2013-07-24T21:49:26Z", "closed_at": "2013-07-24T21:49:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "The library installed from PyPi says 2.0.1 but does not contain the fix for Django 1.5 and importing the settings.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/24", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/24/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/24/events", "html_url": "https://github.com/jsocol/pystatsd/issues/24", "id": 13344685, "node_id": "MDU6SXNzdWUxMzM0NDY4NQ==", "number": 24, "title": "Can't import if django in $PYTHONPATH, but not a django application", "user": {"login": "peritus", "id": 11022, "node_id": "MDQ6VXNlcjExMDIy", "avatar_url": "https://avatars0.githubusercontent.com/u/11022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peritus", "html_url": "https://github.com/peritus", "followers_url": "https://api.github.com/users/peritus/followers", "following_url": "https://api.github.com/users/peritus/following{/other_user}", "gists_url": "https://api.github.com/users/peritus/gists{/gist_id}", "starred_url": "https://api.github.com/users/peritus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peritus/subscriptions", "organizations_url": "https://api.github.com/users/peritus/orgs", "repos_url": "https://api.github.com/users/peritus/repos", "events_url": "https://api.github.com/users/peritus/events{/privacy}", "received_events_url": "https://api.github.com/users/peritus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-04-18T11:11:31Z", "updated_at": "2013-04-25T15:15:20Z", "closed_at": "2013-04-25T14:59:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a python application I want to send stats from. Django is installed in the $PYTHONPATH, so\n\n```\nfrom django.conf import settings\n```\n\nworks and `settings` is defined. [as in https://github.com/jsocol/pystatsd/blob/e81fb4dea2077f6e9e873d07db831bbf931df174/statsd/__init__.py#L6]\n\nHowever, if I import this from my app, this happens:\n\n```\n  File \"/home/vagrant/workspace/myproject/src/myproject/__init__.py\", line 13, in <module>\n    from statsd import StatsClient\n  File \"/home/vagrant/workspace/myproject/lib/python2.7/site-packages/statsd-2.0.1-py2.7.egg/statsd/__init__.py\", line 20, in <module>\n    host = getattr(settings, 'STATSD_HOST', 'localhost')\n  File \"/usr/local/lib/python2.7/dist-packages/django/conf/__init__.py\", line 52, in __getattr__\n    self._setup(name)\n  File \"/usr/local/lib/python2.7/dist-packages/django/conf/__init__.py\", line 45, in _setup\n    % (desc, ENVIRONMENT_VARIABLE))\ndjango.core.exceptions.ImproperlyConfigured: Requested setting STATSD_HOST, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\n```\n\nHTH,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/23", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/23/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/23/events", "html_url": "https://github.com/jsocol/pystatsd/issues/23", "id": 12350548, "node_id": "MDU6SXNzdWUxMjM1MDU0OA==", "number": 23, "title": "Unable to install into a fresh virtual environment", "user": {"login": "jensenbox", "id": 189265, "node_id": "MDQ6VXNlcjE4OTI2NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/189265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jensenbox", "html_url": "https://github.com/jensenbox", "followers_url": "https://api.github.com/users/jensenbox/followers", "following_url": "https://api.github.com/users/jensenbox/following{/other_user}", "gists_url": "https://api.github.com/users/jensenbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jensenbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jensenbox/subscriptions", "organizations_url": "https://api.github.com/users/jensenbox/orgs", "repos_url": "https://api.github.com/users/jensenbox/repos", "events_url": "https://api.github.com/users/jensenbox/events{/privacy}", "received_events_url": "https://api.github.com/users/jensenbox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-03-23T06:29:35Z", "updated_at": "2013-03-25T18:31:06Z", "closed_at": "2013-03-25T18:31:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have not had this issue previously. I suspect it is a 2.0 problem.\n\nFor some reason it appears that during the installation statsd is requesting settings that are not configured yet.\n\nI am using the git version now as the PyPi version was busted.\n\nI am more than happy to try again after a fix is made.\n\nHere is the stacktrace of the install:\n\n```\n  Running setup.py develop for statsd\n\n    Running command /opt/rh/venv/bin/python -c \"import setuptools; __file__='/opt/rh/venv/src/statsd/setup.py'; exec(compile(open(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" develop --no-deps\n    Traceback (most recent call last):\n\n      File \"<string>\", line 1, in <module>\n\n      File \"/opt/rh/venv/src/statsd/setup.py\", line 3, in <module>\n\n        import statsd\n\n      File \"statsd/__init__.py\", line 23, in <module>\n\n        host = getattr(settings, 'STATSD_HOST', 'localhost')\n\n      File \"/opt/rh/venv/local/lib/python2.7/site-packages/django/conf/__init__.py\", line 52, in __getattr__\n\n        self._setup(name)\n\n      File \"/opt/rh/venv/local/lib/python2.7/site-packages/django/conf/__init__.py\", line 45, in _setup\n\n        % (desc, ENVIRONMENT_VARIABLE))\n\n    django.core.exceptions.ImproperlyConfigured: Requested setting STATSD_HOST, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\n\n    Complete output from command /opt/rh/venv/bin/python -c \"import setuptools; __file__='/opt/rh/venv/src/statsd/setup.py'; exec(compile(open(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" develop --no-deps:\n\n    Traceback (most recent call last):\n\n  File \"<string>\", line 1, in <module>\n\n  File \"/opt/rh/venv/src/statsd/setup.py\", line 3, in <module>\n\n    import statsd\n\n  File \"statsd/__init__.py\", line 23, in <module>\n\n    host = getattr(settings, 'STATSD_HOST', 'localhost')\n\n  File \"/opt/rh/venv/local/lib/python2.7/site-packages/django/conf/__init__.py\", line 52, in __getattr__\n\n    self._setup(name)\n\n  File \"/opt/rh/venv/local/lib/python2.7/site-packages/django/conf/__init__.py\", line 45, in _setup\n\n    % (desc, ENVIRONMENT_VARIABLE))\n\ndjango.core.exceptions.ImproperlyConfigured: Requested setting STATSD_HOST, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\n\n----------------------------------------\n\nCommand /opt/rh/venv/bin/python -c \"import setuptools; __file__='/opt/rh/venv/src/statsd/setup.py'; exec(compile(open(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" develop --no-deps failed with error code 1 in /opt/rh/venv/src/statsd\n\nException information:\nTraceback (most recent call last):\n  File \"/opt/rh/venv/local/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/basecommand.py\", line 107, in main\n    status = self.run(options, args)\n  File \"/opt/rh/venv/local/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/commands/install.py\", line 261, in run\n    requirement_set.install(install_options, global_options)\n  File \"/opt/rh/venv/local/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/req.py\", line 1166, in install\n    requirement.install(install_options, global_options)\n  File \"/opt/rh/venv/local/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/req.py\", line 562, in install\n    self.install_editable(install_options, global_options)\n  File \"/opt/rh/venv/local/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/req.py\", line 652, in install_editable\n    show_stdout=False)\n  File \"/opt/rh/venv/local/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/util.py\", line 612, in call_subprocess\n    % (command_desc, proc.returncode, cwd))\nInstallationError: Command /opt/rh/venv/bin/python -c \"import setuptools; __file__='/opt/rh/venv/src/statsd/setup.py'; exec(compile(open(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" develop --no-deps failed with error code 1 in /opt/rh/venv/src/statsd\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/21", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/21/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/21/events", "html_url": "https://github.com/jsocol/pystatsd/issues/21", "id": 11557690, "node_id": "MDU6SXNzdWUxMTU1NzY5MA==", "number": 21, "title": "Gauge Delta", "user": {"login": "jsocol", "id": 180459, "node_id": "MDQ6VXNlcjE4MDQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/180459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsocol", "html_url": "https://github.com/jsocol", "followers_url": "https://api.github.com/users/jsocol/followers", "following_url": "https://api.github.com/users/jsocol/following{/other_user}", "gists_url": "https://api.github.com/users/jsocol/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsocol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsocol/subscriptions", "organizations_url": "https://api.github.com/users/jsocol/orgs", "repos_url": "https://api.github.com/users/jsocol/repos", "events_url": "https://api.github.com/users/jsocol/events{/privacy}", "received_events_url": "https://api.github.com/users/jsocol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jsocol", "id": 180459, "node_id": "MDQ6VXNlcjE4MDQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/180459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsocol", "html_url": "https://github.com/jsocol", "followers_url": "https://api.github.com/users/jsocol/followers", "following_url": "https://api.github.com/users/jsocol/following{/other_user}", "gists_url": "https://api.github.com/users/jsocol/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsocol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsocol/subscriptions", "organizations_url": "https://api.github.com/users/jsocol/orgs", "repos_url": "https://api.github.com/users/jsocol/repos", "events_url": "https://api.github.com/users/jsocol/events{/privacy}", "received_events_url": "https://api.github.com/users/jsocol/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jsocol", "id": 180459, "node_id": "MDQ6VXNlcjE4MDQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/180459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsocol", "html_url": "https://github.com/jsocol", "followers_url": "https://api.github.com/users/jsocol/followers", "following_url": "https://api.github.com/users/jsocol/following{/other_user}", "gists_url": "https://api.github.com/users/jsocol/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsocol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsocol/subscriptions", "organizations_url": "https://api.github.com/users/jsocol/orgs", "repos_url": "https://api.github.com/users/jsocol/repos", "events_url": "https://api.github.com/users/jsocol/events{/privacy}", "received_events_url": "https://api.github.com/users/jsocol/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/jsocol/pystatsd/milestones/1", "html_url": "https://github.com/jsocol/pystatsd/milestone/1", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/milestones/1/labels", "id": 278883, "node_id": "MDk6TWlsZXN0b25lMjc4ODgz", "number": 1, "title": "v2", "description": "", "creator": {"login": "jsocol", "id": 180459, "node_id": "MDQ6VXNlcjE4MDQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/180459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsocol", "html_url": "https://github.com/jsocol", "followers_url": "https://api.github.com/users/jsocol/followers", "following_url": "https://api.github.com/users/jsocol/following{/other_user}", "gists_url": "https://api.github.com/users/jsocol/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsocol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsocol/subscriptions", "organizations_url": "https://api.github.com/users/jsocol/orgs", "repos_url": "https://api.github.com/users/jsocol/repos", "events_url": "https://api.github.com/users/jsocol/events{/privacy}", "received_events_url": "https://api.github.com/users/jsocol/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2013-03-01T18:55:02Z", "updated_at": "2013-04-11T19:13:17Z", "due_on": null, "closed_at": "2013-04-11T19:13:17Z"}, "comments": 0, "created_at": "2013-03-01T19:15:02Z", "updated_at": "2013-08-26T22:37:08Z", "closed_at": "2013-03-06T23:55:39Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Add support for gauge deltas since that merged into statsd/master.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/16", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/16/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/16/events", "html_url": "https://github.com/jsocol/pystatsd/issues/16", "id": 8109066, "node_id": "MDU6SXNzdWU4MTA5MDY2", "number": 16, "title": "buffering doesn't limit the maximum packet size", "user": {"login": "acdha", "id": 46565, "node_id": "MDQ6VXNlcjQ2NTY1", "avatar_url": "https://avatars3.githubusercontent.com/u/46565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acdha", "html_url": "https://github.com/acdha", "followers_url": "https://api.github.com/users/acdha/followers", "following_url": "https://api.github.com/users/acdha/following{/other_user}", "gists_url": "https://api.github.com/users/acdha/gists{/gist_id}", "starred_url": "https://api.github.com/users/acdha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acdha/subscriptions", "organizations_url": "https://api.github.com/users/acdha/orgs", "repos_url": "https://api.github.com/users/acdha/repos", "events_url": "https://api.github.com/users/acdha/events{/privacy}", "received_events_url": "https://api.github.com/users/acdha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/jsocol/pystatsd/milestones/1", "html_url": "https://github.com/jsocol/pystatsd/milestone/1", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/milestones/1/labels", "id": 278883, "node_id": "MDk6TWlsZXN0b25lMjc4ODgz", "number": 1, "title": "v2", "description": "", "creator": {"login": "jsocol", "id": 180459, "node_id": "MDQ6VXNlcjE4MDQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/180459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsocol", "html_url": "https://github.com/jsocol", "followers_url": "https://api.github.com/users/jsocol/followers", "following_url": "https://api.github.com/users/jsocol/following{/other_user}", "gists_url": "https://api.github.com/users/jsocol/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsocol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsocol/subscriptions", "organizations_url": "https://api.github.com/users/jsocol/orgs", "repos_url": "https://api.github.com/users/jsocol/repos", "events_url": "https://api.github.com/users/jsocol/events{/privacy}", "received_events_url": "https://api.github.com/users/jsocol/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2013-03-01T18:55:02Z", "updated_at": "2013-04-11T19:13:17Z", "due_on": null, "closed_at": "2013-04-11T19:13:17Z"}, "comments": 5, "created_at": "2012-11-05T16:07:04Z", "updated_at": "2013-03-06T23:40:54Z", "closed_at": "2013-03-06T23:40:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/jsocol/pystatsd/blob/master/statsd/client.py#L67 has a potential data-loss / corruption issue:\n\n```\n    if (0 < len(self._stats)):\n        data = '\\n'.join(self._stats)\n        self._stats = []\n        try:\n            self._sock.sendto(data.encode('ascii'), self._addr)\n```\n\nThe problem with this is that UDP packets over a certain size may be dropped or fragmented - i.e. I've seen Graphite showing odd metrics because a packet was truncated mid-line and a new hierarchy was created from the truncated of the metric name.\n\nI'm not using pystatsd (yet) so my apologies for not sending a proper pull request. Here's the equivalent fragment of my monitoring code using a dirty hard-coded limit which should really be configurable:\n\n```\n        while data:\n            message = \"\"\n\n            while data and len(message) < 4000:\n                message += \"%s.%s\\n\" % (key_prefix, data.pop())\n\n            udp_sock.sendto(message, (host, port))\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/14", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/14/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/14/events", "html_url": "https://github.com/jsocol/pystatsd/issues/14", "id": 7794205, "node_id": "MDU6SXNzdWU3Nzk0MjA1", "number": 14, "title": "StatsClient.timer and timeout exception", "user": {"login": "warvariuc", "id": 1035452, "node_id": "MDQ6VXNlcjEwMzU0NTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1035452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/warvariuc", "html_url": "https://github.com/warvariuc", "followers_url": "https://api.github.com/users/warvariuc/followers", "following_url": "https://api.github.com/users/warvariuc/following{/other_user}", "gists_url": "https://api.github.com/users/warvariuc/gists{/gist_id}", "starred_url": "https://api.github.com/users/warvariuc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/warvariuc/subscriptions", "organizations_url": "https://api.github.com/users/warvariuc/orgs", "repos_url": "https://api.github.com/users/warvariuc/repos", "events_url": "https://api.github.com/users/warvariuc/events{/privacy}", "received_events_url": "https://api.github.com/users/warvariuc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2012-10-23T11:29:38Z", "updated_at": "2012-10-24T14:33:22Z", "closed_at": "2012-10-23T16:22:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n    def __exit__(self, typ, value, tb):\n        dt = time.time() - self.start\n        self.ms = int(round(1000 * dt))  # Convert to ms.\n        self.client.timing(self.stat, self.ms, self.rate)\n```\n\nI guess this means that in case of a request timeout exception, the timings will be submitted anyway?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/9", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/9/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/9/events", "html_url": "https://github.com/jsocol/pystatsd/issues/9", "id": 4219779, "node_id": "MDU6SXNzdWU0MjE5Nzc5", "number": 9, "title": "Drop IPv6", "user": {"login": "jsocol", "id": 180459, "node_id": "MDQ6VXNlcjE4MDQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/180459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsocol", "html_url": "https://github.com/jsocol", "followers_url": "https://api.github.com/users/jsocol/followers", "following_url": "https://api.github.com/users/jsocol/following{/other_user}", "gists_url": "https://api.github.com/users/jsocol/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsocol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsocol/subscriptions", "organizations_url": "https://api.github.com/users/jsocol/orgs", "repos_url": "https://api.github.com/users/jsocol/repos", "events_url": "https://api.github.com/users/jsocol/events{/privacy}", "received_events_url": "https://api.github.com/users/jsocol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jsocol", "id": 180459, "node_id": "MDQ6VXNlcjE4MDQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/180459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsocol", "html_url": "https://github.com/jsocol", "followers_url": "https://api.github.com/users/jsocol/followers", "following_url": "https://api.github.com/users/jsocol/following{/other_user}", "gists_url": "https://api.github.com/users/jsocol/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsocol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsocol/subscriptions", "organizations_url": "https://api.github.com/users/jsocol/orgs", "repos_url": "https://api.github.com/users/jsocol/repos", "events_url": "https://api.github.com/users/jsocol/events{/privacy}", "received_events_url": "https://api.github.com/users/jsocol/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jsocol", "id": 180459, "node_id": "MDQ6VXNlcjE4MDQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/180459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsocol", "html_url": "https://github.com/jsocol", "followers_url": "https://api.github.com/users/jsocol/followers", "following_url": "https://api.github.com/users/jsocol/following{/other_user}", "gists_url": "https://api.github.com/users/jsocol/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsocol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsocol/subscriptions", "organizations_url": "https://api.github.com/users/jsocol/orgs", "repos_url": "https://api.github.com/users/jsocol/repos", "events_url": "https://api.github.com/users/jsocol/events{/privacy}", "received_events_url": "https://api.github.com/users/jsocol/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2012-04-20T23:10:34Z", "updated_at": "2012-05-11T22:17:06Z", "closed_at": "2012-05-11T22:17:06Z", "author_association": "OWNER", "active_lock_reason": null, "body": "So, I went ahead and added IPv6 support to the host lookup without actually noticing that the StatsD server doesn't _bind_ to IPv6 interfaces. It uses Node's `dgram.createSocket('udp4')`. And, at least on most systems, Python's `socket.getaddrinfo()` will return an IPv6 address for `'localhost', 8125`, first. D'oh.\n\nSo, just gotta restrict `socket.getaddrinfo()` to IPv4, and might as well limit the search down to UDP, etc. I've got a patch, just creating a reminder.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jsocol/pystatsd/issues/2", "repository_url": "https://api.github.com/repos/jsocol/pystatsd", "labels_url": "https://api.github.com/repos/jsocol/pystatsd/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/jsocol/pystatsd/issues/2/comments", "events_url": "https://api.github.com/repos/jsocol/pystatsd/issues/2/events", "html_url": "https://github.com/jsocol/pystatsd/issues/2", "id": 1478712, "node_id": "MDU6SXNzdWUxNDc4NzEy", "number": 2, "title": "Make StatsClient.timer a contextdecorator", "user": {"login": "jsocol", "id": 180459, "node_id": "MDQ6VXNlcjE4MDQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/180459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsocol", "html_url": "https://github.com/jsocol", "followers_url": "https://api.github.com/users/jsocol/followers", "following_url": "https://api.github.com/users/jsocol/following{/other_user}", "gists_url": "https://api.github.com/users/jsocol/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsocol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsocol/subscriptions", "organizations_url": "https://api.github.com/users/jsocol/orgs", "repos_url": "https://api.github.com/users/jsocol/repos", "events_url": "https://api.github.com/users/jsocol/events{/privacy}", "received_events_url": "https://api.github.com/users/jsocol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2011-08-24T22:38:59Z", "updated_at": "2011-10-12T16:47:18Z", "closed_at": "2011-10-12T16:47:18Z", "author_association": "OWNER", "active_lock_reason": null, "body": "``` python\n@statsd.timer('name of thing')\ndef timed_method():\n    with statsd.timer('other thing'):\n        for i in xrange(0, 10000): pass\n    return 'this would be awesome'\n```\n", "performed_via_github_app": null, "score": 1.0}]}