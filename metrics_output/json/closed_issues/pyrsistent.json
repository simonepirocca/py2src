{"total_count": 106, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/207", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/207/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/207/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/207", "id": 696212209, "node_id": "MDU6SXNzdWU2OTYyMTIyMDk=", "number": 207, "title": "SyntaxError: invalid syntax in Python 2.7.17", "user": {"login": "rpetrenko", "id": 211505, "node_id": "MDQ6VXNlcjIxMTUwNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/211505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpetrenko", "html_url": "https://github.com/rpetrenko", "followers_url": "https://api.github.com/users/rpetrenko/followers", "following_url": "https://api.github.com/users/rpetrenko/following{/other_user}", "gists_url": "https://api.github.com/users/rpetrenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpetrenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpetrenko/subscriptions", "organizations_url": "https://api.github.com/users/rpetrenko/orgs", "repos_url": "https://api.github.com/users/rpetrenko/repos", "events_url": "https://api.github.com/users/rpetrenko/events{/privacy}", "received_events_url": "https://api.github.com/users/rpetrenko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-09-08T22:14:51Z", "updated_at": "2020-09-09T07:25:24Z", "closed_at": "2020-09-09T07:25:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "    from pyrsistent import pmap\r\n  File \"/usr/local/lib/python2.7/dist-packages/pyrsistent/__init__.py\", line 3, in <module>\r\n    from pyrsistent._pmap import pmap, m, PMap\r\n  File \"/usr/local/lib/python2.7/dist-packages/pyrsistent/_pmap.py\", line 98\r\n    ) from e\r\n         ^", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/205", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/205/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/205/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/205", "id": 696133097, "node_id": "MDU6SXNzdWU2OTYxMzMwOTc=", "number": 205, "title": "Add `python_requires` to declare Python2.7 support drop.", "user": {"login": "vphilippon", "id": 2819376, "node_id": "MDQ6VXNlcjI4MTkzNzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2819376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vphilippon", "html_url": "https://github.com/vphilippon", "followers_url": "https://api.github.com/users/vphilippon/followers", "following_url": "https://api.github.com/users/vphilippon/following{/other_user}", "gists_url": "https://api.github.com/users/vphilippon/gists{/gist_id}", "starred_url": "https://api.github.com/users/vphilippon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vphilippon/subscriptions", "organizations_url": "https://api.github.com/users/vphilippon/orgs", "repos_url": "https://api.github.com/users/vphilippon/repos", "events_url": "https://api.github.com/users/vphilippon/events{/privacy}", "received_events_url": "https://api.github.com/users/vphilippon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-09-08T19:49:20Z", "updated_at": "2020-09-09T07:22:38Z", "closed_at": "2020-09-09T07:22:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello!\r\n\r\nIs it possible to populate this field in `setup.py` please: https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires\r\n\r\nThis will populate the package metadata so that `pip` stops attempting to install the more recent version on Python 2.7.\r\n\r\nAlthough **this will require to also yank the `pyrsistent 0.17.0` release** afterwards, or else `pip` will continue to keep trying to install this incompatible version on Python2.7 environments.\r\nRef: https://pypi.org/help/#yanked\r\nThat's done via the PyPI maintainer interface.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/202", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/202/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/202/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/202", "id": 677988842, "node_id": "MDU6SXNzdWU2Nzc5ODg4NDI=", "number": 202, "title": "filter/collect support", "user": {"login": "antonkulaga", "id": 842436, "node_id": "MDQ6VXNlcjg0MjQzNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/842436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonkulaga", "html_url": "https://github.com/antonkulaga", "followers_url": "https://api.github.com/users/antonkulaga/followers", "following_url": "https://api.github.com/users/antonkulaga/following{/other_user}", "gists_url": "https://api.github.com/users/antonkulaga/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonkulaga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonkulaga/subscriptions", "organizations_url": "https://api.github.com/users/antonkulaga/orgs", "repos_url": "https://api.github.com/users/antonkulaga/repos", "events_url": "https://api.github.com/users/antonkulaga/events{/privacy}", "received_events_url": "https://api.github.com/users/antonkulaga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-12T21:25:26Z", "updated_at": "2020-09-07T19:55:58Z", "closed_at": "2020-09-07T19:55:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see that the only (apart from immutability) benefit that I get from pvector is transform function. However, transform just changes the elements that satisfy first lambda parameter but do not filter them (so I cannot get rid of the elements I do not need).\r\nTo make pyrsistent really useful we need filter method that will filter elements according to conditions. It would also nice to have scala-like collect ( http://allaboutscala.com/tutorials/chapter-8-beginner-tutorial-using-scala-collection-functions/scala-collect-function/ ) method that will filter and then map", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/190", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/190/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/190/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/190", "id": 552712995, "node_id": "MDU6SXNzdWU1NTI3MTI5OTU=", "number": 190, "title": "Proposal: Adding __call__ interface to containers", "user": {"login": "asmodehn", "id": 221256, "node_id": "MDQ6VXNlcjIyMTI1Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/221256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asmodehn", "html_url": "https://github.com/asmodehn", "followers_url": "https://api.github.com/users/asmodehn/followers", "following_url": "https://api.github.com/users/asmodehn/following{/other_user}", "gists_url": "https://api.github.com/users/asmodehn/gists{/gist_id}", "starred_url": "https://api.github.com/users/asmodehn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asmodehn/subscriptions", "organizations_url": "https://api.github.com/users/asmodehn/orgs", "repos_url": "https://api.github.com/users/asmodehn/repos", "events_url": "https://api.github.com/users/asmodehn/events{/privacy}", "received_events_url": "https://api.github.com/users/asmodehn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-21T09:02:33Z", "updated_at": "2020-01-23T20:35:44Z", "closed_at": "2020-01-23T20:35:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "How about adding a `__call__()` interface to `pyrsistent` containers ?\r\nsomething like\r\n```\r\n def __call__(self, *args):\r\n        # call just return a new container, with more content added.\r\n        # current one is untouched\r\n        return v(*[k for k in self], *args)\r\n```\r\n\r\nThis would , imho, enable clean python syntax integration :\r\n```py\r\n# we already have simple functions for constructing containers\r\nfrom pyrsistent import v\r\n\r\n# Lets create an immutable three\r\nthree = v(1, 2, 3)\r\n\r\n# we could, just by calling, append into the vector\r\nassert three(4,5,6) == v(1,2,3,4,5,6)\r\n\r\n# Still immutable three stays the same\r\nassert three == v(1,2,3)\r\n\r\n# to actually 'register' the change, one needs to store the new vector\r\nsix = three(4,5,6)\r\nassert six == v(1,2,3,4,5,6)\r\n\r\n# Incidently EmptyVector == v, because one could hypothetically do :\r\nassert EmptyVector(1,2,3) == v(1,2,3)\r\n\r\n```\r\n\r\nI feel this adds a more \"functional/lazy\" feel to using immutable containers, while providing a good pythonic syntax (and maybe some simplifications in the code ?)\r\n\r\nNot sure which container this would be suitable for however. Besides vector and map, the semantic of the container would need to somehow match the structure of python's args and kwargs, and what it means to \"add\" an element to the container (prepend, append?, insert at key?)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/189", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/189/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/189/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/189", "id": 549797719, "node_id": "MDU6SXNzdWU1NDk3OTc3MTk=", "number": 189, "title": "Doesn't install on python embedded on windows", "user": {"login": "AdrianVerde", "id": 1646766, "node_id": "MDQ6VXNlcjE2NDY3NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1646766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdrianVerde", "html_url": "https://github.com/AdrianVerde", "followers_url": "https://api.github.com/users/AdrianVerde/followers", "following_url": "https://api.github.com/users/AdrianVerde/following{/other_user}", "gists_url": "https://api.github.com/users/AdrianVerde/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdrianVerde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdrianVerde/subscriptions", "organizations_url": "https://api.github.com/users/AdrianVerde/orgs", "repos_url": "https://api.github.com/users/AdrianVerde/repos", "events_url": "https://api.github.com/users/AdrianVerde/events{/privacy}", "received_events_url": "https://api.github.com/users/AdrianVerde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-14T20:24:10Z", "updated_at": "2020-01-14T22:27:37Z", "closed_at": "2020-01-14T22:27:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "When ```pip install pyrsistent``` the result is:\r\n```\r\nERROR: Command errored out with exit status 1:\r\n     command: 'c:\\users\\adrian\\programs\\python-3.8.1-embed\\python.exe' -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'C:\\\\Users\\\\Adrian\\\\AppData\\\\Local\\\\Temp\\\\pip-install-22kw_g9h\\\\pyrsistent\\\\setup.py'\"'\"'; __file__='\"'\"'C:\\\\Users\\\\Adrian\\\\AppData\\\\Local\\\\Temp\\\\pip-install-22kw_g9h\\\\pyrsistent\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' egg_info --egg-base 'C:\\Users\\Adrian\\AppData\\Local\\Temp\\pip-install-22kw_g9h\\pyrsistent\\pip-egg-info'\r\n         cwd: C:\\Users\\Adrian\\AppData\\Local\\Temp\\pip-install-22kw_g9h\\pyrsistent\\\r\n    Complete output (5 lines):\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"C:\\Users\\Adrian\\AppData\\Local\\Temp\\pip-install-22kw_g9h\\pyrsistent\\setup.py\", line 10, in <module>\r\n        from _pyrsistent_version import __version__\r\n    ModuleNotFoundError: No module named '_pyrsistent_version'\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/186", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/186/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/186/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/186", "id": 540649839, "node_id": "MDU6SXNzdWU1NDA2NDk4Mzk=", "number": 186, "title": "Mypy errors", "user": {"login": "Qhesz", "id": 5576331, "node_id": "MDQ6VXNlcjU1NzYzMzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5576331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qhesz", "html_url": "https://github.com/Qhesz", "followers_url": "https://api.github.com/users/Qhesz/followers", "following_url": "https://api.github.com/users/Qhesz/following{/other_user}", "gists_url": "https://api.github.com/users/Qhesz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qhesz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qhesz/subscriptions", "organizations_url": "https://api.github.com/users/Qhesz/orgs", "repos_url": "https://api.github.com/users/Qhesz/repos", "events_url": "https://api.github.com/users/Qhesz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qhesz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-19T23:58:17Z", "updated_at": "2020-01-07T19:43:24Z", "closed_at": "2020-01-07T19:43:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With up to date python and mypy ( python 3.7.5, mypy 0.740 ) mypy shows errors.\r\n\r\nIn typing.pyi:\r\n```\r\ndef __new__(...) -> None:\r\n```\r\nThe return type should not be `None`, it should be the class, for CheckedPMap, CheckedPVector an CheckedPSet. \r\n\r\nIn __init__.pyi:\r\n```\r\nclass PRecord(...\r\n  def set(...\r\n  ...\r\n  @overload\r\n  def set(...\r\n  @overload\r\n  def set(...\r\n```\r\nEither the first `set(` needs to be removed (I think the second one covers it), or needs to have an `@overload` decorator and be placed next to the other two definitions.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/182", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/182/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/182/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/182", "id": 522655742, "node_id": "MDU6SXNzdWU1MjI2NTU3NDI=", "number": 182, "title": "Static symbol moduleinit clashes with pygit2 and evdev", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-14T06:35:10Z", "updated_at": "2019-11-23T07:46:07Z", "closed_at": "2019-11-23T07:46:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "pyrsistent and pygit2 and evdev all define static symbol `moduleinit`:\r\n\r\nhttps://github.com/tobgu/pyrsistent/blob/48f34fcdd1ea73e65975b9776cad6d502a81a1b4/pvectorcmodule.c#L1594\r\n\r\nhttps://github.com/libgit2/pygit2/blob/d2d6374e147a7ffaf5818608c02fcc2875a81778/src/pygit2.c\r\n\r\nhttps://github.com/gvalkov/python-evdev/blob/76b193d03b0f7d0a9991ceb5817c27d02757ffcc/evdev/input.c#L488\r\n\r\nThis causes PyOxidizer to break when two or more are included in a PyOxidizer project, as they all need to be statically compiled into a binary.\r\n\r\nI've been working on a fake project which includes *lots* of the prominent compiled Python libs, and only encountered a clash with these three, so I guess it is normally avoidable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/180", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/180/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/180/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/180", "id": 512928686, "node_id": "MDU6SXNzdWU1MTI5Mjg2ODY=", "number": 180, "title": "Public transform", "user": {"login": "jannikluhn", "id": 29854669, "node_id": "MDQ6VXNlcjI5ODU0NjY5", "avatar_url": "https://avatars1.githubusercontent.com/u/29854669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jannikluhn", "html_url": "https://github.com/jannikluhn", "followers_url": "https://api.github.com/users/jannikluhn/followers", "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}", "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions", "organizations_url": "https://api.github.com/users/jannikluhn/orgs", "repos_url": "https://api.github.com/users/jannikluhn/repos", "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}", "received_events_url": "https://api.github.com/users/jannikluhn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-27T06:52:16Z", "updated_at": "2019-10-28T06:42:45Z", "closed_at": "2019-10-28T06:42:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to build a datastructure which internally uses a `PVector` but adds some functionality. I would like it to expose (almost) the same interface as a `PVector`. For most methods this is trivial (just a little verbose): I can call the corresponding method on my internal `PVector` and add my custom code. The only problem is `transform`: It seems like using `pyrsistent._transformations.transform` *should* just work, but I have two concerns:\r\n\r\n- `transform` is technically not public\r\n- it is unclear to me what the exact interface is that `MyPVector` and the corresponding evolver have to support to be compatible with `transform`\r\n\r\nSo my questions are:\r\n\r\n- Can I rely on `transform` being stable? Is there a reason why it's not imported into the main namespace (if not I'd gladly create a PR)?\r\n- By reading the code, `transform` seems to use\r\n\r\n  - `MyPVector.items` or `MyPVector.__iter__`\r\n  - `MyPVector.__getitem__`\r\n  - `MyPVector.evolver`\r\n  - `MyEvolver.__delitem__`\r\n  - `MyEvolver.__setitem__`\r\n  - `MyEvolver.persistent()`\r\n\r\n  Have I missed anything?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/175", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/175/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/175/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/175", "id": 469671142, "node_id": "MDU6SXNzdWU0Njk2NzExNDI=", "number": 175, "title": "Pytest 5.x 2 tests fail", "user": {"login": "scarabeusiv", "id": 1055830, "node_id": "MDQ6VXNlcjEwNTU4MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1055830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scarabeusiv", "html_url": "https://github.com/scarabeusiv", "followers_url": "https://api.github.com/users/scarabeusiv/followers", "following_url": "https://api.github.com/users/scarabeusiv/following{/other_user}", "gists_url": "https://api.github.com/users/scarabeusiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/scarabeusiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scarabeusiv/subscriptions", "organizations_url": "https://api.github.com/users/scarabeusiv/orgs", "repos_url": "https://api.github.com/users/scarabeusiv/repos", "events_url": "https://api.github.com/users/scarabeusiv/events{/privacy}", "received_events_url": "https://api.github.com/users/scarabeusiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-18T09:42:22Z", "updated_at": "2019-07-27T18:59:00Z", "closed_at": "2019-07-27T18:59:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using pytest 5.0 to run the testsuite 2 tests are failing. Of course with pytest4 series all is fine:\r\n\r\n```\r\n[   12s] + py.test-3.7 --ignore=_build.python2 --ignore=_build.python3 --ignore=_build.pypy3 -v\r\n[   12s] ============================= test session starts ==============================\r\n[   12s] platform linux -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 -- /usr/bin/python3\r\n[   12s] cachedir: .pytest_cache\r\n[   12s] hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/abuild/rpmbuild/BUILD/pyrsistent-0.15.3/.hypothesis/examples')\r\n[   12s] rootdir: /home/abuild/rpmbuild/BUILD/pyrsistent-0.15.3\r\n[   12s] plugins: hypothesis-4.24.3\r\n[   13s] collecting ... collected 619 items\r\n```\r\n\r\n```\r\n[   15s] =================================== FAILURES ===================================\r\n[   15s] __________________________ test_indexing_invalid_type __________________________\r\n[   15s] \r\n[   15s]     def test_indexing_invalid_type():\r\n[   15s]         with pytest.raises(TypeError) as e:\r\n[   15s]             pdeque([1, 2, 3])['foo']\r\n[   15s]     \r\n[   15s] >       assert 'cannot be interpreted' in str(e)\r\n[   15s] E       AssertionError: assert 'cannot be interpreted' in '<ExceptionInfo TypeError tblen=2>'\r\n[   15s] E        +  where '<ExceptionInfo TypeError tblen=2>' = str(<ExceptionInfo TypeError tblen=2>)\r\n[   15s] \r\n[   15s] tests/deque_test.py:260: AssertionError\r\n[   15s] ___________________________ test_index_invalid_type ____________________________\r\n[   15s] \r\n[   15s]     def test_index_invalid_type():\r\n[   15s]         with pytest.raises(TypeError) as e:\r\n[   15s]             plist([1, 2, 3])['foo']  # type: ignore\r\n[   15s]     \r\n[   15s] >       assert 'cannot be interpreted' in str(e)\r\n[   15s] E       AssertionError: assert 'cannot be interpreted' in '<ExceptionInfo TypeError tblen=2>'\r\n[   15s] E        +  where '<ExceptionInfo TypeError tblen=2>' = str(<ExceptionInfo TypeError tblen=2>)\r\n[   15s] \r\n[   15s] tests/list_test.py:93: AssertionError\r\n[   15s] =============================== warnings summary ===============================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/173", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/173/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/173/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/173", "id": 459621996, "node_id": "MDU6SXNzdWU0NTk2MjE5OTY=", "number": 173, "title": "Generic types", "user": {"login": "jtrakk", "id": 43392409, "node_id": "MDQ6VXNlcjQzMzkyNDA5", "avatar_url": "https://avatars1.githubusercontent.com/u/43392409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrakk", "html_url": "https://github.com/jtrakk", "followers_url": "https://api.github.com/users/jtrakk/followers", "following_url": "https://api.github.com/users/jtrakk/following{/other_user}", "gists_url": "https://api.github.com/users/jtrakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrakk/subscriptions", "organizations_url": "https://api.github.com/users/jtrakk/orgs", "repos_url": "https://api.github.com/users/jtrakk/repos", "events_url": "https://api.github.com/users/jtrakk/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrakk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-23T21:52:26Z", "updated_at": "2019-07-06T00:01:10Z", "closed_at": "2019-07-06T00:01:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "The typing module provides [generics](https://mypy.readthedocs.io/en/latest/generics.html) such as [`t.FrozenSet[int]`](https://docs.python.org/3/library/typing.html#typing.FrozenSet). This is convenient for declaring a \"frozenset of ints\". How would you feel about having generic versions of the `pyrsistent` types?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/172", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/172/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/172/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/172", "id": 455538937, "node_id": "MDU6SXNzdWU0NTU1Mzg5Mzc=", "number": 172, "title": "distutils ValueError not caught when MS compiler missing", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259076, "node_id": "MDU6TGFiZWw0NDI1OTA3Ng==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1299605145, "node_id": "MDU6TGFiZWwxMjk5NjA1MTQ1", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/good%20first%20issue", "name": "good first issue", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-13T05:16:37Z", "updated_at": "2019-07-05T19:22:43Z", "closed_at": "2019-07-04T19:56:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the AppVeyor CI default Python 3.4 install , the default setuptools is 18.2\r\n\r\nIt fails if the C build is unsuccessful with a ValueError which isnt caught by `setup.py`\r\n\r\n```\r\npython -m pip install --no-cache-dir --prefer-binary pyrsistent\r\nCollecting pyrsistent\r\n  Downloading https://files.pythonhosted.org/packages/68/0b/f514e76b4e074386b60cfc6c8c2d75ca615b81e415417ccf3fac80ae0bf6/pyrsistent-0.15.2.tar.gz (106kB)\r\nCollecting six (from pyrsistent)\r\n  Downloading https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl\r\nInstalling collected packages: six, pyrsistent\r\n  Running setup.py install for pyrsistent: started\r\n    Running setup.py install for pyrsistent: finished with status 'error'\r\n    Complete output from command C:\\python\\python.exe -u -c \"import setuptools, tokenize;__file__='C:\\\\Users\\\\appveyor\\\\AppData\\\\Local\\\\Temp\\\\pip-install-8o_8oxha\\\\pyrsistent\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-record-jf4cvmj_\\install-record.txt --single-version-externally-managed --compile:\r\n    running install\r\n    running build\r\n    running build_py\r\n    creating build\r\n    creating build\\lib.win-amd64-3.4\r\n    copying _pyrsistent_version.py -> build\\lib.win-amd64-3.4\r\n    creating build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\typing.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_checked_types.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_compat.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_field_common.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_helpers.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_immutable.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_pbag.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_pclass.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_pdeque.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_plist.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_pmap.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_precord.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_pset.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_pvector.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_toolz.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\_transformations.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\__init__.py -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\py.typed -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\__init__.pyi -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    copying pyrsistent\\typing.pyi -> build\\lib.win-amd64-3.4\\pyrsistent\r\n    running build_ext\r\n    building 'pvectorc' extension\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-install-8o_8oxha\\pyrsistent\\setup.py\", line 94, in <module>\r\n        package_data={'pyrsistent': ['py.typed', '__init__.pyi', 'typing.pyi']},\r\n      File \"C:\\python\\lib\\distutils\\core.py\", line 148, in setup\r\n        dist.run_commands()\r\n      File \"C:\\python\\lib\\distutils\\dist.py\", line 955, in run_commands\r\n        self.run_command(cmd)\r\n      File \"C:\\python\\lib\\distutils\\dist.py\", line 974, in run_command\r\n        cmd_obj.run()\r\n      File \"C:\\python\\lib\\site-packages\\setuptools\\command\\install.py\", line 61, in run\r\n        return orig.install.run(self)\r\n      File \"C:\\python\\lib\\distutils\\command\\install.py\", line 539, in run\r\n        self.run_command('build')\r\n      File \"C:\\python\\lib\\distutils\\cmd.py\", line 313, in run_command\r\n        self.distribution.run_command(command)\r\n      File \"C:\\python\\lib\\distutils\\dist.py\", line 974, in run_command\r\n        cmd_obj.run()\r\n      File \"C:\\python\\lib\\distutils\\command\\build.py\", line 126, in run\r\n        self.run_command(cmd_name)\r\n      File \"C:\\python\\lib\\distutils\\cmd.py\", line 313, in run_command\r\n        self.distribution.run_command(command)\r\n      File \"C:\\python\\lib\\distutils\\dist.py\", line 974, in run_command\r\n        cmd_obj.run()\r\n      File \"C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-install-8o_8oxha\\pyrsistent\\setup.py\", line 43, in run\r\n        build_ext.run(self)\r\n      File \"C:\\python\\lib\\distutils\\command\\build_ext.py\", line 339, in run\r\n        self.build_extensions()\r\n      File \"C:\\python\\lib\\distutils\\command\\build_ext.py\", line 448, in build_extensions\r\n        self.build_extension(ext)\r\n      File \"C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-install-8o_8oxha\\pyrsistent\\setup.py\", line 55, in build_extension\r\n        build_ext.build_extension(self, ext)\r\n      File \"C:\\python\\lib\\distutils\\command\\build_ext.py\", line 503, in build_extension\r\n        depends=ext.depends)\r\n      File \"C:\\python\\lib\\distutils\\msvc9compiler.py\", line 460, in compile\r\n        self.initialize()\r\n      File \"C:\\python\\lib\\distutils\\msvc9compiler.py\", line 371, in initialize\r\n        vc_env = query_vcvarsall(VERSION, plat_spec)\r\n      File \"C:\\python\\lib\\site-packages\\setuptools\\msvc9_support.py\", line 52, in query_vcvarsall\r\n        return unpatched['query_vcvarsall'](version, *args, **kwargs)\r\n      File \"C:\\python\\lib\\distutils\\msvc9compiler.py\", line 287, in query_vcvarsall\r\n        raise ValueError(str(list(result.keys())))\r\n    ValueError: ['path']\r\n    \r\n    ----------------------------------------\r\nCommand \"C:\\python\\python.exe -u -c \"import setuptools, tokenize;__file__='C:\\\\Users\\\\appveyor\\\\AppData\\\\Local\\\\Temp\\\\pip-install-8o_8oxha\\\\pyrsistent\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-record-jf4cvmj_\\install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-install-8o_8oxha\\pyrsistent\\\r\nYou are using pip version 18.1, however version 19.1.1 is available.\r\nYou should consider upgrading via the 'python -m pip install --upgrade pip' command.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/171", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/171/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/171/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/171", "id": 449422218, "node_id": "MDU6SXNzdWU0NDk0MjIyMTg=", "number": 171, "title": "PythonPVector's equality operator raises exception instead of returning False", "user": {"login": "kintel", "id": 186094, "node_id": "MDQ6VXNlcjE4NjA5NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/186094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kintel", "html_url": "https://github.com/kintel", "followers_url": "https://api.github.com/users/kintel/followers", "following_url": "https://api.github.com/users/kintel/following{/other_user}", "gists_url": "https://api.github.com/users/kintel/gists{/gist_id}", "starred_url": "https://api.github.com/users/kintel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kintel/subscriptions", "organizations_url": "https://api.github.com/users/kintel/orgs", "repos_url": "https://api.github.com/users/kintel/repos", "events_url": "https://api.github.com/users/kintel/events{/privacy}", "received_events_url": "https://api.github.com/users/kintel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259076, "node_id": "MDU6TGFiZWw0NDI1OTA3Ng==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1299605145, "node_id": "MDU6TGFiZWwxMjk5NjA1MTQ1", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/good%20first%20issue", "name": "good first issue", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-28T18:48:05Z", "updated_at": "2019-07-04T20:08:11Z", "closed_at": "2019-07-04T20:08:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I guess there are some missing checks for whether the compared types are compatible; I'm not familiar enough with the pyrsistent codebase to suggest a good fix, but any pointers/hints would be welcome.\r\n\r\n```\r\nimport os\r\nos.environ['PYRSISTENT_NO_C_EXTENSION'] = 'TRUE'\r\nfrom pyrsistent import pvector\r\npvector([1,2,3]) == 5\r\n```\r\n\r\n->\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-2-ff08f7575227> in <module>\r\n      2 os.environ['PYRSISTENT_NO_C_EXTENSION'] = 'TRUE'\r\n      3 from pyrsistent import pvector\r\n----> 4 pvector([1,2,3]) == 5\r\n\r\n~/.local/share/virtualenvs/kensington-review-96-6JNiN/lib/python3.7/site-packages/pyrsistent/_pvector.py in __eq__(self, other)\r\n     80 \r\n     81     def __eq__(self, other):\r\n---> 82         return self is other or self._count == len(other) and compare_pvector(self, other, operator.eq)\r\n     83 \r\n     84     def __gt__(self, other):\r\n\r\nTypeError: object of type 'int' has no len()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/168", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/168/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/168/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/168", "id": 442722511, "node_id": "MDU6SXNzdWU0NDI3MjI1MTE=", "number": 168, "title": "Extension build warnings silenced by default by pip", "user": {"login": "JayH5", "id": 1748643, "node_id": "MDQ6VXNlcjE3NDg2NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1748643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JayH5", "html_url": "https://github.com/JayH5", "followers_url": "https://api.github.com/users/JayH5/followers", "following_url": "https://api.github.com/users/JayH5/following{/other_user}", "gists_url": "https://api.github.com/users/JayH5/gists{/gist_id}", "starred_url": "https://api.github.com/users/JayH5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JayH5/subscriptions", "organizations_url": "https://api.github.com/users/JayH5/orgs", "repos_url": "https://api.github.com/users/JayH5/repos", "events_url": "https://api.github.com/users/JayH5/events{/privacy}", "received_events_url": "https://api.github.com/users/JayH5/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259076, "node_id": "MDU6TGFiZWw0NDI1OTA3Ng==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1299605145, "node_id": "MDU6TGFiZWwxMjk5NjA1MTQ1", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/good%20first%20issue", "name": "good first issue", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-05-10T13:34:00Z", "updated_at": "2019-07-04T19:51:11Z", "closed_at": "2019-07-04T19:47:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not entirely sure if this is an issue/bug but I think it's something to be aware of.\r\n\r\nWhen installing `pyrsistent` with `pip` (like, `pip install pyrsistent` or `pip wheel pyrsistent`) in an environment where the C extension build fails (e.g. if GCC is not available), the warning that the C extension could not be compiled is silenced by default by pip. Only when running `pip` with `-v`/`--verbose` is the warning logged.\r\n\r\nInstalling/building pyrsistent without GCC is common when installing in an environment such as  a minimal Docker image. For example, you can do something like this:\r\n```\r\n$ docker run --rm -it python:3.7-slim pip install pyrsistent\r\nCollecting pyrsistent\r\n  Downloading https://files.pythonhosted.org/packages/2c/a7/8a50738eb27e204aa271abe170dec7bdbb07128ed892fb3a92f14a69bae3/pyrsistent-0.15.1.tar.gz (106kB)\r\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 112kB 83kB/s\r\nCollecting six (from pyrsistent)\r\n  Downloading https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl\r\nBuilding wheels for collected packages: pyrsistent\r\n  Building wheel for pyrsistent (setup.py) ... done\r\n  Stored in directory: /root/.cache/pip/wheels/93/03/43/ed0b3c9666e2001e2e6cce51efebdf3ce5e8edfa92966b1f6f\r\nSuccessfully built pyrsistent\r\nInstalling collected packages: six, pyrsistent\r\nSuccessfully installed pyrsistent-0.15.1 six-1.12.0\r\n```\r\n\r\nWhen running with `-v`:\r\n```\r\n$ docker run --rm -it python:3.7-slim pip -v install pyrsistent\r\nCollecting pyrsistent\r\n  Downloading https://files.pythonhosted.org/packages/2c/a7/8a50738eb27e204aa271abe170dec7bdbb07128ed892fb3a92f14a69bae3/pyrsistent-0.15.1.tar.gz (106kB)\r\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 112kB 35kB/s\r\n\r\n~lots of noise~\r\n\r\n  running build_ext\r\n  building 'pvectorc' extension\r\n  creating build/temp.linux-x86_64-3.7\r\n  gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -I/usr/local/include/python3.7m -c pvectorcmodule.c -o build/temp.linux-x86_64-3.7/pvectorcmodule.o\r\n  unable to execute 'gcc': No such file or directory\r\n  command 'gcc' failed with exit status 1\r\n  /tmp/pip-install-46jn4zcx/pyrsistent/setup.py:61: UserWarning:\r\n  ********************************************************************************\r\n  WARNING: Could not build the The pvectorc extension module.\r\n           Pyrsistent will still work but performance may be degraded.\r\n           The output above this warning shows how the compilation failed.\r\n  ********************************************************************************\r\n\r\n~lots of noise~\r\n```\r\n\r\nAgain, not technically anything _wrong_, just there may be quite a few users unintentionally using pyrsistent without the faster C implementation of pvector.\r\n\r\nPython: CPython 3.7.3\r\npip: 19.1.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/163", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/163/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/163/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/163", "id": 437413803, "node_id": "MDU6SXNzdWU0Mzc0MTM4MDM=", "number": 163, "title": "pryrsistent v0.15.0 fails", "user": {"login": "terabyte", "id": 204385, "node_id": "MDQ6VXNlcjIwNDM4NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/204385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terabyte", "html_url": "https://github.com/terabyte", "followers_url": "https://api.github.com/users/terabyte/followers", "following_url": "https://api.github.com/users/terabyte/following{/other_user}", "gists_url": "https://api.github.com/users/terabyte/gists{/gist_id}", "starred_url": "https://api.github.com/users/terabyte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terabyte/subscriptions", "organizations_url": "https://api.github.com/users/terabyte/orgs", "repos_url": "https://api.github.com/users/terabyte/repos", "events_url": "https://api.github.com/users/terabyte/events{/privacy}", "received_events_url": "https://api.github.com/users/terabyte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-04-25T21:53:53Z", "updated_at": "2019-04-26T16:19:01Z", "closed_at": "2019-04-26T04:01:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "My build seems to have broken suspiciously close to your release ~2hrs ago =)\r\n\r\nHere is the complete output of my repro:\r\n```\r\n 16:51:15 \u2b80 \u1f50B 100% \ue0b1 cmyers@lasersword \u2b80 python --version                     \r\nPython 2.7.16rc1                                                         \r\n 16:51:19 \u2b80 \u1f50B 100% \ue0b1 cmyers@lasersword \u2b80 virtualenv --version                 \r\n15.1.0                                                                    \r\n 16:51:26 \u2b80 \u1f50B 100% \ue0b1 cmyers@lasersword \u2b80 virtualenv ve                        \r\nRunning virtualenv with interpreter /usr/bin/python2                          \r\nNew python executable in /home/cmyers/projects/repro/ve/bin/python2      \r\nAlso creating executable in /home/cmyers/projects/repro/ve/bin/python    \r\nInstalling setuptools, pkg_resources, pip, wheel...done.              \r\nvirtualenv ve  1.47s user 0.17s system 86% cpu 1.884 total             \r\n 16:51:34 \u2b80 \u1f50B 100% \ue0b1 cmyers@lasersword \u2b80 source ve/bin/activate                                                                                               \r\n 16:52:08 \u2b80 \u1f50B 100% \ue0b1 cmyers@lasersword \u2b80 (ve) \u2b80 pip install pyrsistent==v0.15.0                                                                               \r\nDEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7.\r\nCollecting pyrsistent==v0.15.0                                                                                                                                 \r\n  Downloading https://files.pythonhosted.org/packages/e7/fd/5ede6c969bf75eeb0cf438117da6c220d09066d2e2ad2b829924393f658a/pyrsistent-0.15.0.tar.gz (105kB)\r\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 112kB 553kB/s                      \r\nCollecting six (from pyrsistent==v0.15.0)                                \r\n  Using cached https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl\r\nBuilding wheels for collected packages: pyrsistent                                                                                                                                                                                                                                                                               Building wheel for pyrsistent (setup.py) ... error                                                                                                                                                                                                                                                                           \r\n  ERROR: Complete output from command /home/cmyers/projects/repro/ve/bin/python2 -u -c 'import setuptools, tokenize;__file__='\"'\"'/tmp/pip-install-NJE0aa/pyrsistent/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file_\r\n_, '\"'\"'exec'\"'\"'))' bdist_wheel -d /tmp/pip-wheel-PnSkcT --python-tag cp27:\r\n  ERROR: running bdist_wheel                                            \r\n  running build    \r\n  running build_py                     \r\n  creating build                                                \r\n  creating build/lib.linux-x86_64-2.7                                                                                                                                                                                                                                                                                          \r\n  copying _pyrsistent_version.py -> build/lib.linux-x86_64-2.7           \r\n  creating build/lib.linux-x86_64-2.7/pyrsistent                           \r\n  copying pyrsistent/_plist.py -> build/lib.linux-x86_64-2.7/pyrsistent                                                                                        \r\n  copying pyrsistent/_pvector.py -> build/lib.linux-x86_64-2.7/pyrsistent  \r\n  copying pyrsistent/_field_common.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n  copying pyrsistent/__init__.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n  copying pyrsistent/_compat.py -> build/lib.linux-x86_64-2.7/pyrsistent \r\n  copying pyrsistent/_pbag.py -> build/lib.linux-x86_64-2.7/pyrsistent      \r\n  copying pyrsistent/_toolz.py -> build/lib.linux-x86_64-2.7/pyrsistent       \r\n  copying pyrsistent/_pmap.py -> build/lib.linux-x86_64-2.7/pyrsistent                                                                                         \r\n  copying pyrsistent/_helpers.py -> build/lib.linux-x86_64-2.7/pyrsistent                                                                                      \r\n  copying pyrsistent/typing.py -> build/lib.linux-x86_64-2.7/pyrsistent                                                                                        \r\n  copying pyrsistent/_transformations.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n  copying pyrsistent/_checked_types.py -> build/lib.linux-x86_64-2.7/pyrsistent \r\n  copying pyrsistent/_immutable.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n  copying pyrsistent/_precord.py -> build/lib.linux-x86_64-2.7/pyrsistent \r\n  copying pyrsistent/_pset.py -> build/lib.linux-x86_64-2.7/pyrsistent    \r\n  copying pyrsistent/_pdeque.py -> build/lib.linux-x86_64-2.7/pyrsistent                                                                                       \r\n  copying pyrsistent/_pclass.py -> build/lib.linux-x86_64-2.7/pyrsistent    \r\n  copying pyrsistent/py.typed -> build/lib.linux-x86_64-2.7/pyrsistent    \r\n  copying pyrsistent/__init__.pyi -> build/lib.linux-x86_64-2.7/pyrsistent\r\n  copying pyrsistent/typing.pyi -> build/lib.linux-x86_64-2.7/pyrsistent \r\n  running build_ext                     \r\n  building 'pvectorc' extension                                                                                                                                                                                                                                                                                                  creating build/temp.linux-x86_64-2.7     \r\n  x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fno-strict-aliasing -Wdate-time -D_FORTIFY_SOURCE=2 -g -fdebug-prefix-map=/build/python2.7-UboFgi/python2.7-2.7.16~rc1=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -I/usr/include/python2.7 -c pvectorcmodule.c -o bui\r\nld/temp.linux-x86_64-2.7/pvectorcmodule.o   \r\n  pvectorcmodule.c:1:10: fatal error: Python.h: No such file or directory\r\n   #include <Python.h>     \r\n            ^~~~~~~~~~                                                 \r\n  compilation terminated.                                                                                                                                      \r\n  Traceback (most recent call last):                                          \r\n    File \"<string>\", line 1, in <module>                                                                                                                       \r\n    File \"/tmp/pip-install-NJE0aa/pyrsistent/setup.py\", line 89, in <module>                                                                                   \r\n      package_data={'pyrsistent': ['py.typed', '__init__.pyi', 'typing.pyi']},\r\n    File \"/home/cmyers/projects/repro/ve/local/lib/python2.7/site-packages/setuptools/__init__.py\", line 145, in setup\r\n      return distutils.core.setup(**attrs)    \r\n    File \"/usr/lib/python2.7/distutils/core.py\", line 151, in setup         \r\n      dist.run_commands()                                                                                                                                                                                                                                                                                                      \r\n    File \"/usr/lib/python2.7/distutils/dist.py\", line 953, in run_commands                                                                                                                                                                                                                                                     \r\n      self.run_command(cmd)\r\n    File \"/usr/lib/python2.7/distutils/dist.py\", line 972, in run_command                                                                                      \r\n      cmd_obj.run()                  \r\n    File \"/home/cmyers/projects/repro/ve/local/lib/python2.7/site-packages/wheel/bdist_wheel.py\", line 192, in run\r\n      self.run_command('build')        \r\n    File \"/usr/lib/python2.7/distutils/cmd.py\", line 326, in run_command  \r\n      self.distribution.run_command(command)      \r\n    File \"/usr/lib/python2.7/distutils/dist.py\", line 972, in run_command  \r\n      cmd_obj.run()                                                        \r\n    File \"/usr/lib/python2.7/distutils/command/build.py\", line 128, in run                                                                                     \r\n      self.run_command(cmd_name)                                           \r\n    File \"/usr/lib/python2.7/distutils/cmd.py\", line 326, in run_command  \r\n      self.distribution.run_command(command)                            \r\n    File \"/usr/lib/python2.7/distutils/dist.py\", line 972, in run_command  \r\n      cmd_obj.run()                                                     \r\n    File \"/tmp/pip-install-NJE0aa/pyrsistent/setup.py\", line 39, in run    \r\n      except (CCompilerError, DistutilsExecError, DistutilsPlatformError, FileNotFoundError):                                                                  \r\n  NameError: global name 'FileNotFoundError' is not defined                                                                                                    \r\n  ----------------------------------------                                                                                                                     \r\n  ERROR: Failed building wheel for pyrsistent                                                                                                                                                                                                                                                                                    Running setup.py clean for pyrsistent                                                                                                                                                                                                                                                                                        \r\nFailed to build pyrsistent                                                                                                                                                                                                                                                                                                     \r\nInstalling collected packages: six, pyrsistent\r\n  Running setup.py install for pyrsistent ... error\r\n    ERROR: Complete output from command /home/cmyers/projects/repro/ve/bin/python2 -u -c 'import setuptools, tokenize;__file__='\"'\"'/tmp/pip-install-NJE0aa/pyrsistent/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record /tmp/pip-record-8oAUJ_/install-record.txt --single-version-externally-managed --compile --install-headers /home/cmyers/projects/repro/ve/include/site/python2.7/pyrsistent:\r\n    ERROR: running install\r\n    running build\r\n    running build_py\r\n    creating build\r\n    creating build/lib.linux-x86_64-2.7\r\n    copying _pyrsistent_version.py -> build/lib.linux-x86_64-2.7\r\n    creating build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_plist.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_pvector.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_field_common.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/__init__.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_compat.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_pbag.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_toolz.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_pmap.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_helpers.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/typing.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_transformations.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_checked_types.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_immutable.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_precord.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_pset.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_pdeque.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/_pclass.py -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/py.typed -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/__init__.pyi -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    copying pyrsistent/typing.pyi -> build/lib.linux-x86_64-2.7/pyrsistent\r\n    running build_ext\r\n    building 'pvectorc' extension\r\n    creating build/temp.linux-x86_64-2.7\r\n    x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fno-strict-aliasing -Wdate-time -D_FORTIFY_SOURCE=2 -g -fdebug-prefix-map=/build/python2.7-UboFgi/python2.7-2.7.16~rc1=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -I/usr/include/python2.7 -c pvectorcmodule.c -o build/temp.linux-x86_64-2.7/pvectorcmodule.o\r\n    pvectorcmodule.c:1:10: fatal error: Python.h: No such file or directory\r\n     #include <Python.h>\r\n              ^~~~~~~~~~\r\n    compilation terminated.\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-NJE0aa/pyrsistent/setup.py\", line 89, in <module>\r\n        package_data={'pyrsistent': ['py.typed', '__init__.pyi', 'typing.pyi']},\r\n      File \"/home/cmyers/projects/repro/ve/local/lib/python2.7/site-packages/setuptools/__init__.py\", line 145, in setup\r\n        return distutils.core.setup(**attrs)\r\n      File \"/usr/lib/python2.7/distutils/core.py\", line 151, in setup\r\n        dist.run_commands()\r\n      File \"/usr/lib/python2.7/distutils/dist.py\", line 953, in run_commands\r\n        self.run_command(cmd)\r\n      File \"/usr/lib/python2.7/distutils/dist.py\", line 972, in run_command\r\n        cmd_obj.run()\r\n      File \"/home/cmyers/projects/repro/ve/local/lib/python2.7/site-packages/setuptools/command/install.py\", line 61, in run\r\n        return orig.install.run(self)\r\n      File \"/usr/lib/python2.7/distutils/command/install.py\", line 601, in run\r\n        self.run_command('build')\r\n      File \"/usr/lib/python2.7/distutils/cmd.py\", line 326, in run_command\r\n        self.distribution.run_command(command)\r\n      File \"/usr/lib/python2.7/distutils/dist.py\", line 972, in run_command\r\n        cmd_obj.run()\r\n      File \"/usr/lib/python2.7/distutils/command/build.py\", line 128, in run\r\n        self.run_command(cmd_name)\r\n      File \"/usr/lib/python2.7/distutils/cmd.py\", line 326, in run_command\r\n        self.distribution.run_command(command)\r\n      File \"/usr/lib/python2.7/distutils/dist.py\", line 972, in run_command\r\n        cmd_obj.run()\r\n      File \"/tmp/pip-install-NJE0aa/pyrsistent/setup.py\", line 39, in run\r\n        except (CCompilerError, DistutilsExecError, DistutilsPlatformError, FileNotFoundError):\r\n    NameError: global name 'FileNotFoundError' is not defined\r\n    ----------------------------------------\r\nERROR: Command \"/home/cmyers/projects/repro/ve/bin/python2 -u -c 'import setuptools, tokenize;__file__='\"'\"'/tmp/pip-install-NJE0aa/pyrsistent/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record /tmp/pip-record-8oAUJ_/install-record.txt --single-version-externally-managed --compile --install-headers /home/cmyers/projects/repro/ve/include/site/python2.7/pyrsistent\" failed with error code 1 in /tmp/pip-install-NJE0aa/pyrsistent/\r\n```\r\n\r\nWhen I try the earlier version, I get:\r\n```\r\n 16:52:56 \u2b80 \u1f50B 100% \ue0b1 cmyers@lasersword \u2b80 (ve) \u2b80 pip install pyrsistent==v0.14.11\r\nDEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7.\r\nCollecting pyrsistent==v0.14.11\r\n  Downloading https://files.pythonhosted.org/packages/8c/46/4e93ab8a379d7efe93f20a0fb8a27bdfe88942cc954ab0210c3164e783e0/pyrsistent-0.14.11.tar.gz (104kB)\r\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 112kB 521kB/s \r\nRequirement already satisfied: six in ./ve/lib/python2.7/site-packages (from pyrsistent==v0.14.11) (1.12.0)\r\nBuilding wheels for collected packages: pyrsistent\r\n  Building wheel for pyrsistent (setup.py) ... done\r\n  Stored in directory: /home/cmyers/.cache/pip/wheels/83/59/9a/a037b9b3c3e93d9275ea0aff9d6064400f372879dfdab01afe\r\nSuccessfully built pyrsistent\r\nInstalling collected packages: pyrsistent\r\nSuccessfully installed pyrsistent-0.14.11\r\n```\r\n\r\nI am a trained monkey at best, I am trying to build a new internal project I am not super involved in so I don't have any context at all, but given the above logs I am pretty sure pyrsistent's most recent release is broke...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/161", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/161/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/161/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/161", "id": 437360209, "node_id": "MDU6SXNzdWU0MzczNjAyMDk=", "number": 161, "title": "Extension build fallback does not work on some windows platforms", "user": {"login": "MaxTaggart", "id": 16192899, "node_id": "MDQ6VXNlcjE2MTkyODk5", "avatar_url": "https://avatars2.githubusercontent.com/u/16192899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaxTaggart", "html_url": "https://github.com/MaxTaggart", "followers_url": "https://api.github.com/users/MaxTaggart/followers", "following_url": "https://api.github.com/users/MaxTaggart/following{/other_user}", "gists_url": "https://api.github.com/users/MaxTaggart/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaxTaggart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaxTaggart/subscriptions", "organizations_url": "https://api.github.com/users/MaxTaggart/orgs", "repos_url": "https://api.github.com/users/MaxTaggart/repos", "events_url": "https://api.github.com/users/MaxTaggart/events{/privacy}", "received_events_url": "https://api.github.com/users/MaxTaggart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-25T19:26:43Z", "updated_at": "2019-04-25T19:41:07Z", "closed_at": "2019-04-25T19:41:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As discussed in issue #88, setup.py includes a fallback to pure python when building the `pvectormodule` extension does not work. However, the fallback is not triggered on some Windows machines because the custom build module is not catching the `FileNotFoundError` that is thrown indicating that the windows SDK has not been installed. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/156", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/156/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/156/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/156", "id": 421721257, "node_id": "MDU6SXNzdWU0MjE3MjEyNTc=", "number": 156, "title": "Minor errors in type annotations", "user": {"login": "je-l", "id": 17461971, "node_id": "MDQ6VXNlcjE3NDYxOTcx", "avatar_url": "https://avatars1.githubusercontent.com/u/17461971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/je-l", "html_url": "https://github.com/je-l", "followers_url": "https://api.github.com/users/je-l/followers", "following_url": "https://api.github.com/users/je-l/following{/other_user}", "gists_url": "https://api.github.com/users/je-l/gists{/gist_id}", "starred_url": "https://api.github.com/users/je-l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/je-l/subscriptions", "organizations_url": "https://api.github.com/users/je-l/orgs", "repos_url": "https://api.github.com/users/je-l/repos", "events_url": "https://api.github.com/users/je-l/events{/privacy}", "received_events_url": "https://api.github.com/users/je-l/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259076, "node_id": "MDU6TGFiZWw0NDI1OTA3Ng==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-15T22:06:23Z", "updated_at": "2019-04-22T18:55:56Z", "closed_at": "2019-04-22T18:55:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI found some errors in the type hints when checking the test suite with mypy.\r\n\r\nHere is the used mypy.ini config:\r\n```\r\n[mypy]\r\nignore_missing_imports=true\r\nwarn_unused_ignores=true\r\ncheck_untyped_defs=true\r\n```\r\nRunning `mypy tests` yields a lot of errors. Many of these are because of mypy can't infer some types, but some are actual type errors from the annotations.\r\n\r\ne.g.\r\n\r\n* PMap.\\_\\_iter\\_\\_ has wrong TypeVar\r\n* Errors annotating iterable unpacking in `m()`, `v()`, `s()` etc.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/155", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/155/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/155/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/155", "id": 420636429, "node_id": "MDU6SXNzdWU0MjA2MzY0Mjk=", "number": 155, "title": "Evolvers are missing keys(), values(), and items()", "user": {"login": "turbolent", "id": 51661, "node_id": "MDQ6VXNlcjUxNjYx", "avatar_url": "https://avatars0.githubusercontent.com/u/51661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/turbolent", "html_url": "https://github.com/turbolent", "followers_url": "https://api.github.com/users/turbolent/followers", "following_url": "https://api.github.com/users/turbolent/following{/other_user}", "gists_url": "https://api.github.com/users/turbolent/gists{/gist_id}", "starred_url": "https://api.github.com/users/turbolent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/turbolent/subscriptions", "organizations_url": "https://api.github.com/users/turbolent/orgs", "repos_url": "https://api.github.com/users/turbolent/repos", "events_url": "https://api.github.com/users/turbolent/events{/privacy}", "received_events_url": "https://api.github.com/users/turbolent/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259076, "node_id": "MDU6TGFiZWw0NDI1OTA3Ng==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1299605145, "node_id": "MDU6TGFiZWwxMjk5NjA1MTQ1", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/good%20first%20issue", "name": "good first issue", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-13T17:48:47Z", "updated_at": "2019-07-04T20:24:06Z", "closed_at": "2019-07-04T20:24:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "The evolvers are typed as being `Mapping`s, e.g. https://github.com/tobgu/pyrsistent/blob/master/pyrsistent/typing.pyi#L45, but they don't support the `Mapping`'s `keys()`, `values()`, and `items()` methods", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/154", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/154/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/154/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/154", "id": 418785801, "node_id": "MDU6SXNzdWU0MTg3ODU4MDE=", "number": 154, "title": "Empty pmap cannot be set with `transform` function", "user": {"login": "michalvi", "id": 5452703, "node_id": "MDQ6VXNlcjU0NTI3MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5452703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalvi", "html_url": "https://github.com/michalvi", "followers_url": "https://api.github.com/users/michalvi/followers", "following_url": "https://api.github.com/users/michalvi/following{/other_user}", "gists_url": "https://api.github.com/users/michalvi/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalvi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalvi/subscriptions", "organizations_url": "https://api.github.com/users/michalvi/orgs", "repos_url": "https://api.github.com/users/michalvi/repos", "events_url": "https://api.github.com/users/michalvi/events{/privacy}", "received_events_url": "https://api.github.com/users/michalvi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259076, "node_id": "MDU6TGFiZWw0NDI1OTA3Ng==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1299605145, "node_id": "MDU6TGFiZWwxMjk5NjA1MTQ1", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/good%20first%20issue", "name": "good first issue", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-08T13:25:41Z", "updated_at": "2019-05-11T06:26:50Z", "closed_at": "2019-05-11T06:26:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nMy friend's found this issue while using `transform` method: an empty PMap cannot be set with the `transfom` function. Example:\r\n\r\n```python\r\nIn [1]:\r\nfrom pyrsistent import pmap\r\npmap().transform(['123'], pmap())\r\n\r\nOut[1]: pmap({})\r\n```\r\n\r\nThe result should actually be:\r\n\r\n```python\r\nOut[1]: pmap({'123': pmap({})})\r\n```\r\n\r\nI think the issue is that the `_update_structure` function ([_transformations.py#L128](https://github.com/tobgu/pyrsistent/blob/v0.14.11/pyrsistent/_transformations.py#L128)) is not aware that the `v` from `_get_keys_and_values` returns a singleton PMap (created by calling `pmap()` [#L102](https://github.com/tobgu/pyrsistent/blob/v0.14.11/pyrsistent/_transformations.py#L102)), the same one attempted to be set in the example above.\r\n\r\nWhat do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/153", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/153/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/153/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/153", "id": 418760591, "node_id": "MDU6SXNzdWU0MTg3NjA1OTE=", "number": 153, "title": "Freeze does not freeze defaultdict instances", "user": {"login": "michalvi", "id": 5452703, "node_id": "MDQ6VXNlcjU0NTI3MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5452703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalvi", "html_url": "https://github.com/michalvi", "followers_url": "https://api.github.com/users/michalvi/followers", "following_url": "https://api.github.com/users/michalvi/following{/other_user}", "gists_url": "https://api.github.com/users/michalvi/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalvi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalvi/subscriptions", "organizations_url": "https://api.github.com/users/michalvi/orgs", "repos_url": "https://api.github.com/users/michalvi/repos", "events_url": "https://api.github.com/users/michalvi/events{/privacy}", "received_events_url": "https://api.github.com/users/michalvi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-08T12:06:12Z", "updated_at": "2019-03-11T08:21:32Z", "closed_at": "2019-03-09T05:53:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nIs it deliberate that the `defaultdict` is not being frozen by the `freeze` function?\r\n\r\n```python\r\nIn [1]:\r\nfrom collections import defaultdict\r\nfrom pyrsistent import freeze\r\nfreeze(defaultdict(float))\r\n\r\nOut[1]: defaultdict(float, {})\r\n```\r\n\r\nI'd expect it to output:\r\n\r\n```python\r\nOut[1]: pmap({})\r\n```\r\n\r\nIn that case `thaw` will not recover it back to `defaultdict`, but the freezing aspect of `freeze` should be more important, shouldn't it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/150", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/150/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/150/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/150", "id": 407379855, "node_id": "MDU6SXNzdWU0MDczNzk4NTU=", "number": 150, "title": "Cannot install from other pip_index", "user": {"login": "max-wittig", "id": 6639323, "node_id": "MDQ6VXNlcjY2MzkzMjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6639323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-wittig", "html_url": "https://github.com/max-wittig", "followers_url": "https://api.github.com/users/max-wittig/followers", "following_url": "https://api.github.com/users/max-wittig/following{/other_user}", "gists_url": "https://api.github.com/users/max-wittig/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-wittig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-wittig/subscriptions", "organizations_url": "https://api.github.com/users/max-wittig/orgs", "repos_url": "https://api.github.com/users/max-wittig/repos", "events_url": "https://api.github.com/users/max-wittig/events{/privacy}", "received_events_url": "https://api.github.com/users/max-wittig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-06T18:52:19Z", "updated_at": "2019-02-21T21:35:04Z", "closed_at": "2019-02-21T21:34:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Same issue as encountered here: https://github.com/taverntesting/tavern/issues/163\r\n\r\nBasically the package can't be installed, because `setup_requires` doesn't consider the `pip install -i` command, when installing. Could we remove that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/147", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/147/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/147/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/147", "id": 398201305, "node_id": "MDU6SXNzdWUzOTgyMDEzMDU=", "number": 147, "title": "Error in pvectorc.cp37-win_amd64.pyd file", "user": {"login": "EfimovVladimir", "id": 17744188, "node_id": "MDQ6VXNlcjE3NzQ0MTg4", "avatar_url": "https://avatars3.githubusercontent.com/u/17744188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EfimovVladimir", "html_url": "https://github.com/EfimovVladimir", "followers_url": "https://api.github.com/users/EfimovVladimir/followers", "following_url": "https://api.github.com/users/EfimovVladimir/following{/other_user}", "gists_url": "https://api.github.com/users/EfimovVladimir/gists{/gist_id}", "starred_url": "https://api.github.com/users/EfimovVladimir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EfimovVladimir/subscriptions", "organizations_url": "https://api.github.com/users/EfimovVladimir/orgs", "repos_url": "https://api.github.com/users/EfimovVladimir/repos", "events_url": "https://api.github.com/users/EfimovVladimir/events{/privacy}", "received_events_url": "https://api.github.com/users/EfimovVladimir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259076, "node_id": "MDU6TGFiZWw0NDI1OTA3Ng==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 962340955, "node_id": "MDU6TGFiZWw5NjIzNDA5NTU=", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/help%20wanted", "name": "help wanted", "color": "6568ed", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-11T09:25:21Z", "updated_at": "2019-02-21T21:36:04Z", "closed_at": "2019-02-21T21:36:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use Anaconda, Jupyter, ipywidgets, beakerx on windows7.\r\nWhen I tried install  beakerx  I get this error: \r\n![image](https://user-images.githubusercontent.com/17744188/51023284-9d036080-1597-11e9-92f8-38ab5640bfb7.png)\r\n\r\n>   Problem signature:\r\n>   Problem Event Name:\tAPPCRASH\r\n>   Application Name:\tpython.exe\r\n>   Application Version:\t3.7.1150.1013\r\n>   Application Timestamp:\t5beb2087\r\n>   Fault Module Name:\tpvectorc.cp37-win_amd64.pyd\r\n>   Fault Module Version:\t0.0.0.0\r\n>   Fault Module Timestamp:\t5c3376f8\r\n>   Exception Code:\tc000001d\r\n>   Exception Offset:\t0000000000001f02\r\n>   OS Version:\t6.1.7601.2.1.0.256.48\r\n>   Locale ID:\t1049\r\n>   Additional Information 1:\t08c9\r\n>   Additional Information 2:\t08c98749f514ff01f379a1c92a04a722\r\n>   Additional Information 3:\tcd5e\r\n>   Additional Information 4:\tcd5e6c845063d19598dd6deedc510733\r\n\r\nIt points to pyrsistent module\r\nIt was 0.14.9 release\r\nAfter I downgrade pyrsistent to 0.14.8 all works fine.\r\n\r\nHope it will useful information for you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/145", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/145/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/145/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/145", "id": 393677195, "node_id": "MDU6SXNzdWUzOTM2NzcxOTU=", "number": 145, "title": "Why not use standard Python syntax for operations on the structures?", "user": {"login": "wh4everest", "id": 25324250, "node_id": "MDQ6VXNlcjI1MzI0MjUw", "avatar_url": "https://avatars0.githubusercontent.com/u/25324250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wh4everest", "html_url": "https://github.com/wh4everest", "followers_url": "https://api.github.com/users/wh4everest/followers", "following_url": "https://api.github.com/users/wh4everest/following{/other_user}", "gists_url": "https://api.github.com/users/wh4everest/gists{/gist_id}", "starred_url": "https://api.github.com/users/wh4everest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wh4everest/subscriptions", "organizations_url": "https://api.github.com/users/wh4everest/orgs", "repos_url": "https://api.github.com/users/wh4everest/repos", "events_url": "https://api.github.com/users/wh4everest/events{/privacy}", "received_events_url": "https://api.github.com/users/wh4everest/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-22T14:23:52Z", "updated_at": "2018-12-22T20:55:04Z", "closed_at": "2018-12-22T20:55:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey! A friendly and naive question, as I'm not very familiar with the library or any restrictions...\r\n\r\nWhy did you choose to go with a special syntax for basic operations, like item assignment in vectors, instead of using `v1[2] = 3` and overriding the behavior (return copy instead of mutate) with dunder methods?\r\n\r\nJust curious, thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/143", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/143/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/143/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/143", "id": 385982207, "node_id": "MDU6SXNzdWUzODU5ODIyMDc=", "number": 143, "title": "Compile pvectormodule.c on windows", "user": {"login": "ganwell", "id": 1186530, "node_id": "MDQ6VXNlcjExODY1MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1186530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ganwell", "html_url": "https://github.com/ganwell", "followers_url": "https://api.github.com/users/ganwell/followers", "following_url": "https://api.github.com/users/ganwell/following{/other_user}", "gists_url": "https://api.github.com/users/ganwell/gists{/gist_id}", "starred_url": "https://api.github.com/users/ganwell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ganwell/subscriptions", "organizations_url": "https://api.github.com/users/ganwell/orgs", "repos_url": "https://api.github.com/users/ganwell/repos", "events_url": "https://api.github.com/users/ganwell/events{/privacy}", "received_events_url": "https://api.github.com/users/ganwell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-30T00:11:09Z", "updated_at": "2019-01-12T09:58:48Z", "closed_at": "2019-01-12T09:58:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here is the patch I had to apply in order to compile pvectormodule.c.\r\n\r\n!! I didn't research/verify the changes: Someone on stackoverflow pointed to this: https://docs.python.org/2/extending/newtypes.html \r\n\r\n> This is so important that we\u2019re going to pick the top of it apart still further:\r\n> \r\n> `PyVarObject_HEAD_INIT(NULL, 0)`\r\n>\r\n> This line is a bit of a wart; what we\u2019d like to write is:\r\n> \r\n> `PyVarObject_HEAD_INIT(&PyType_Type, 0)`\r\n>\r\n> as the type of a type object is \u201ctype\u201d, but this isn\u2019t strictly conforming C and some compilers complain. Fortunately, this member will be filled in for us by `PyType_Ready()`.\r\n\r\nThis seems to state that whatever  `PyVarObject_HEAD_INIT(&PyType_Type, 0)` does, is filled in by `PyType_Ready()` later. But I don't know much about C extensions, that is why this isn't a PR, but an issue.\r\n\r\nI can say that my program works with this patch. Since it is much faster with the patch, I assume the extension was used.\r\n\r\n```\r\ndiff --git a/pvectorcmodule.c b/pvectorcmodule.c\r\nindex 38ff669..596de27 100644\r\n--- a/pvectorcmodule.c\r\n+++ b/pvectorcmodule.c\r\n@@ -1,6 +1,11 @@\r\n #include <Python.h>\r\n #include <structmember.h>\r\n\r\n+#ifdef _MSC_VER\r\n+#  include <intrin.h>\r\n+#  define __builtin_popcount __popcnt\r\n+#endif\r\n+\r\n /*\r\n Persistent/Immutable/Functional vector and helper types.\r\n\r\n@@ -1196,7 +1201,7 @@ static PyMethodDef PVectorIter_methods[] = {\r\n };\r\n\r\n static PyTypeObject PVectorIterType = {\r\n-    PyVarObject_HEAD_INIT(&PyType_Type, 0)\r\n+    PyVarObject_HEAD_INIT(NULL, 0)\r\n     \"pvector_iterator\",                         /* tp_name */\r\n     sizeof(PVectorIter),                        /* tp_basicsize */\r\n     0,                                          /* tp_itemsize */\r\n@@ -1307,7 +1312,7 @@ static PyMethodDef PVectorEvolver_methods[] = {\r\n };\r\n\r\n static PyTypeObject PVectorEvolverType = {\r\n-    PyVarObject_HEAD_INIT(&PyType_Type, 0)\r\n+    PyVarObject_HEAD_INIT(NULL, 0)\r\n     \"pvector_evolver\",                          /* tp_name */\r\n     sizeof(PVectorEvolver),                     /* tp_basicsize */\r\n     0,                                          /* tp_itemsize */\r\n````", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/137", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/137/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/137/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/137", "id": 360544650, "node_id": "MDU6SXNzdWUzNjA1NDQ2NTA=", "number": 137, "title": "Deprecation warnings for Python 3.7, will break for Python 3.8", "user": {"login": "wichert", "id": 199657, "node_id": "MDQ6VXNlcjE5OTY1Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/199657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wichert", "html_url": "https://github.com/wichert", "followers_url": "https://api.github.com/users/wichert/followers", "following_url": "https://api.github.com/users/wichert/following{/other_user}", "gists_url": "https://api.github.com/users/wichert/gists{/gist_id}", "starred_url": "https://api.github.com/users/wichert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wichert/subscriptions", "organizations_url": "https://api.github.com/users/wichert/orgs", "repos_url": "https://api.github.com/users/wichert/repos", "events_url": "https://api.github.com/users/wichert/events{/privacy}", "received_events_url": "https://api.github.com/users/wichert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-15T14:26:05Z", "updated_at": "2018-10-14T09:53:41Z", "closed_at": "2018-10-14T09:53:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using pyrsistent with Python 3.7 you get this warning:\r\n\r\n```\r\n.../lib/python3.7/site-packages/pyrsistent/_pmap.py:1: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  from collections import Mapping, Hashable\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/134", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/134/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/134/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/134", "id": 337247321, "node_id": "MDU6SXNzdWUzMzcyNDczMjE=", "number": 134, "title": "Persistent OrderedMap", "user": {"login": "bowbahdoe", "id": 5004262, "node_id": "MDQ6VXNlcjUwMDQyNjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/5004262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bowbahdoe", "html_url": "https://github.com/bowbahdoe", "followers_url": "https://api.github.com/users/bowbahdoe/followers", "following_url": "https://api.github.com/users/bowbahdoe/following{/other_user}", "gists_url": "https://api.github.com/users/bowbahdoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/bowbahdoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bowbahdoe/subscriptions", "organizations_url": "https://api.github.com/users/bowbahdoe/orgs", "repos_url": "https://api.github.com/users/bowbahdoe/repos", "events_url": "https://api.github.com/users/bowbahdoe/events{/privacy}", "received_events_url": "https://api.github.com/users/bowbahdoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-30T22:29:34Z", "updated_at": "2019-02-09T06:48:58Z", "closed_at": "2018-07-07T08:52:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the project I am working within currently, I get XML input passed to me from `xmltodict`, which uses an `OrderedDict` to represent the structure. I would like to be able to just `freeze` this structure before processing it, but there doesn't seem to be an analogous data structure in this library. \r\n\r\nIdeally, there would be a version of a `PMap` that saves insertion order to serve as the replacement.\r\n\r\nThis wouldn't be so much of a problem if `freeze` was made to be a generic function using `functools.singledispatch`, which would let me implement this behaviour on my own. (I can always make an association list), but having a `POrderedMap` built in would be nice.\r\n\r\nSince I need to output it to XML again at the end, `thaw` would need to work as well, either by adding the aforementioned data structure or giving an end user the ability to give customizations to the thaw procedure.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/133", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/133/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/133/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/133", "id": 337201776, "node_id": "MDU6SXNzdWUzMzcyMDE3NzY=", "number": 133, "title": "Test failures with Python 3.7", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259076, "node_id": "MDU6TGFiZWw0NDI1OTA3Ng==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-30T09:36:28Z", "updated_at": "2018-07-08T07:49:08Z", "closed_at": "2018-07-08T07:49:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n==================================== ERRORS ====================================\r\n_______________ ERROR collecting tests/immutable_object_test.py ________________\r\ntests/immutable_object_test.py:4: in <module>\r\n    class Empty(immutable(verbose=True)):\r\npyrsistent/_immutable.py:94: in immutable\r\n    six.exec_(template, namespace)\r\n<string>:2: in <module>\r\n    ???\r\nE   TypeError: namedtuple() got an unexpected keyword argument 'verbose'\r\n------------------------------- Captured stdout --------------------------------\r\n\r\nclass Immutable(namedtuple('ImmutableBase', [], verbose=True)):\r\n    __slots__ = tuple()\r\n\r\n    def __repr__(self):\r\n        return super(Immutable, self).__repr__().replace('ImmutableBase', self.__class__.__name__)\r\n\r\n    def set(self, **kwargs):\r\n        if not kwargs:\r\n            return self\r\n\r\n        fields_to_modify = set(kwargs.keys())\r\n        if not fields_to_modify <= set():\r\n            raise AttributeError(\"'%s' is not a member\" % ', '.join(fields_to_modify - set()))\r\n\r\n\r\n\r\n        return self.__class__.__new__(self.__class__, *map(kwargs.pop, [], self))\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/132", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/132/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/132/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/132", "id": 334942222, "node_id": "MDU6SXNzdWUzMzQ5NDIyMjI=", "number": 132, "title": "Transformation to query data", "user": {"login": "favetelinguis", "id": 5941745, "node_id": "MDQ6VXNlcjU5NDE3NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5941745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/favetelinguis", "html_url": "https://github.com/favetelinguis", "followers_url": "https://api.github.com/users/favetelinguis/followers", "following_url": "https://api.github.com/users/favetelinguis/following{/other_user}", "gists_url": "https://api.github.com/users/favetelinguis/gists{/gist_id}", "starred_url": "https://api.github.com/users/favetelinguis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/favetelinguis/subscriptions", "organizations_url": "https://api.github.com/users/favetelinguis/orgs", "repos_url": "https://api.github.com/users/favetelinguis/repos", "events_url": "https://api.github.com/users/favetelinguis/events{/privacy}", "received_events_url": "https://api.github.com/users/favetelinguis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259078, "node_id": "MDU6TGFiZWw0NDI1OTA3OA==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-22T16:28:19Z", "updated_at": "2018-06-27T20:02:19Z", "closed_at": "2018-06-27T20:02:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be hard to provide a way to use a transformation to return only the matched data without any transformation. It would be very useful to easily be able to query for a subest of the data in this way.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/131", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/131/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/131/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/131", "id": 321479103, "node_id": "MDU6SXNzdWUzMjE0NzkxMDM=", "number": 131, "title": "Immutable equivalent to types.SimpleNamespace", "user": {"login": "SaschaSchlemmer", "id": 35063695, "node_id": "MDQ6VXNlcjM1MDYzNjk1", "avatar_url": "https://avatars1.githubusercontent.com/u/35063695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SaschaSchlemmer", "html_url": "https://github.com/SaschaSchlemmer", "followers_url": "https://api.github.com/users/SaschaSchlemmer/followers", "following_url": "https://api.github.com/users/SaschaSchlemmer/following{/other_user}", "gists_url": "https://api.github.com/users/SaschaSchlemmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/SaschaSchlemmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SaschaSchlemmer/subscriptions", "organizations_url": "https://api.github.com/users/SaschaSchlemmer/orgs", "repos_url": "https://api.github.com/users/SaschaSchlemmer/repos", "events_url": "https://api.github.com/users/SaschaSchlemmer/events{/privacy}", "received_events_url": "https://api.github.com/users/SaschaSchlemmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-09T08:34:02Z", "updated_at": "2018-06-11T19:29:27Z", "closed_at": "2018-06-11T19:29:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I really like `types.SimpleNamespace` because it allows constructing objects by passing in keyword arguments and without the hassle of having to declare a name e.g.\r\n\r\n    my_obj = SimpleNamespace(x=1, y=2)\r\n\r\nI'd really like to have an immutable equivalent because using `namedtuple` or `pyrsistent.immutable` like in \r\n\r\n    my_immutable_obj = namedtuple('ImmutableNamespace', ('x', 'y'))(1, 2)\r\n    #or my_immutable_ob = immutable(('x','y'))(1,2)\r\n    #or my_immutable_ob = immutable('x,y')(1,2)\r\n\r\nis just plain ugly when wanting to only ever create a single instance of this kind.\r\n\r\nWritten as a wrapper around `immutable` an implementation could look something like this:\r\n\r\n    class ImmutableNamespace():\r\n        def __new__(self, **kwargs):\r\n            fields, values = zip(*kwargs.items())\r\n            return immutable(fields, name='ImmutableNamespace')(*values)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/129", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/129/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/129/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/129", "id": 314276302, "node_id": "MDU6SXNzdWUzMTQyNzYzMDI=", "number": 129, "title": "pyrsistent tests fails with python3 in Fedora 28, probably a compilation issue.", "user": {"login": "itamarjp", "id": 762712, "node_id": "MDQ6VXNlcjc2MjcxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/762712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarjp", "html_url": "https://github.com/itamarjp", "followers_url": "https://api.github.com/users/itamarjp/followers", "following_url": "https://api.github.com/users/itamarjp/following{/other_user}", "gists_url": "https://api.github.com/users/itamarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarjp/subscriptions", "organizations_url": "https://api.github.com/users/itamarjp/orgs", "repos_url": "https://api.github.com/users/itamarjp/repos", "events_url": "https://api.github.com/users/itamarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarjp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 962857216, "node_id": "MDU6TGFiZWw5NjI4NTcyMTY=", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/waiting%20for%20input", "name": "waiting for input", "color": "3faf03", "default": false, "description": "Waiting for further input from the reporter"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-13T23:23:31Z", "updated_at": "2018-09-17T13:02:36Z", "closed_at": "2018-09-16T19:56:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "here are the logs, \r\n\r\n+ /usr/bin/python3 setup.py test\r\nrunning test\r\nrunning egg_info\r\nwriting pyrsistent.egg-info/PKG-INFO\r\nwriting dependency_links to pyrsistent.egg-info/dependency_links.txt\r\nwriting requirements to pyrsistent.egg-info/requires.txt\r\nwriting top-level names to pyrsistent.egg-info/top_level.txt\r\nreading manifest file 'pyrsistent.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwriting manifest file 'pyrsistent.egg-info/SOURCES.txt'\r\nrunning build_ext\r\nbuilding 'pvectorc' extension\r\ngcc -pthread -Wno-unused-result -Wsign-compare -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -mcet -fcf-protection -D_GNU_SOURCE -fPIC -fwrapv -fPIC -I/usr/include/python3.6m -c pvectorcmodule.c -o build/temp.linux-x86_64-3.6/pvectorcmodule.o\r\npvectorcmodule.c: In function \u2018nodeFor\u2019:\r\npvectorcmodule.c:153:21: warning: comparison of integer expressions of different signedness: \u2018int\u2019 and \u2018unsigned int\u2019 [-Wsign-compare]\r\n   if((i >= 0) && (i < self->count)) {\r\n                     ^\r\npvectorcmodule.c:154:10: warning: comparison of integer expressions of different signedness: \u2018int\u2019 and \u2018unsigned int\u2019 [-Wsign-compare]\r\n     if(i >= TAIL_OFF(self)) {\r\n          ^~\r\npvectorcmodule.c: In function \u2018PVector_repeat\u2019:\r\npvectorcmodule.c:429:17: warning: comparison of integer expressions of different signedness: \u2018int\u2019 and \u2018unsigned int\u2019 [-Wsign-compare]\r\n       for(j=0; j<self->count; j++) {\r\n                 ^\r\npvectorcmodule.c: In function \u2018pushTail\u2019:\r\npvectorcmodule.c:731:12: warning: comparison of integer expressions of different signedness: \u2018unsigned int\u2019 and \u2018int\u2019 [-Wsign-compare]\r\n   if(level == SHIFT) {\r\n            ^~\r\npvectorcmodule.c: In function \u2018extendWithItem\u2019:\r\npvectorcmodule.c:146:52: warning: comparison of integer expressions of different signedness: \u2018unsigned int\u2019 and \u2018int\u2019 [-Wsign-compare]\r\n #define ROOT_NODE_FULL(vec) ((vec->count >> SHIFT) > (1 << vec->shift))\r\n                                                    ^\r\npvectorcmodule.c:770:8: note: in expansion of macro \u2018ROOT_NODE_FULL\u2019\r\n     if(ROOT_NODE_FULL(newVec)) {\r\n        ^~~~~~~~~~~~~~\r\npvectorcmodule.c: In function \u2018PVector_append\u2019:\r\npvectorcmodule.c:146:52: warning: comparison of integer expressions of different signedness: \u2018unsigned int\u2019 and \u2018int\u2019 [-Wsign-compare]\r\n #define ROOT_NODE_FULL(vec) ((vec->count >> SHIFT) > (1 << vec->shift))\r\n                                                    ^\r\npvectorcmodule.c:920:6: note: in expansion of macro \u2018ROOT_NODE_FULL\u2019\r\n   if(ROOT_NODE_FULL(self)) {\r\n      ^~~~~~~~~~~~~~\r\ngcc -pthread -shared -Wl,-z,relro -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -g -Wl,-z,relro -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -g -flto -fuse-linker-plugin -ffat-lto-objects -flto-partition=none build/temp.linux-x86_64-3.6/pvectorcmodule.o -L/usr/lib64 -lpython3.6m -o /home/itamar/rpmbuild/BUILD/pyrsistent-0.14.2/pvectorc.cpython-36m-x86_64-linux-gnu.so\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 85, in <module>\r\n    packages=['pyrsistent']\r\n  File \"/usr/lib/python3.6/site-packages/setuptools/__init__.py\", line 129, in setup\r\n    return distutils.core.setup(**attrs)\r\n  File \"/usr/lib64/python3.6/distutils/core.py\", line 148, in setup\r\n    dist.run_commands()\r\n  File \"/usr/lib64/python3.6/distutils/dist.py\", line 955, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/usr/lib64/python3.6/distutils/dist.py\", line 974, in run_command\r\n    cmd_obj.run()\r\n  File \"/usr/lib/python3.6/site-packages/setuptools/command/test.py\", line 226, in run\r\n    self.run_tests()\r\n  File \"/usr/lib/python3.6/site-packages/setuptools/command/test.py\", line 248, in run_tests\r\n    exit=False,\r\n  File \"/usr/lib64/python3.6/unittest/main.py\", line 94, in __init__\r\n    self.parseArgs(argv)\r\n  File \"/usr/lib64/python3.6/unittest/main.py\", line 141, in parseArgs\r\n    self.createTests()\r\n  File \"/usr/lib64/python3.6/unittest/main.py\", line 148, in createTests\r\n    self.module)\r\n  File \"/usr/lib64/python3.6/unittest/loader.py\", line 219, in loadTestsFromNames\r\n    suites = [self.loadTestsFromName(name, module) for name in names]\r\n  File \"/usr/lib64/python3.6/unittest/loader.py\", line 219, in <listcomp>\r\n    suites = [self.loadTestsFromName(name, module) for name in names]\r\n  File \"/usr/lib64/python3.6/unittest/loader.py\", line 190, in loadTestsFromName\r\n    return self.loadTestsFromModule(obj)\r\n  File \"/usr/lib/python3.6/site-packages/setuptools/command/test.py\", line 44, in loadTestsFromModule\r\n    for file in resource_listdir(module.__name__, ''):\r\n  File \"/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\", line 1155, in resource_listdir\r\n    resource_name\r\n  File \"/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\", line 1417, in resource_listdir\r\n    return self._listdir(self._fn(self.module_path, resource_name))\r\n  File \"/usr/lib/python3.6/site-packages/pkg_resources/__init__.py\", line 1459, in _listdir\r\n    \"Can't perform this operation for unregistered loader type\"\r\nNotImplementedError: Can't perform this operation for unregistered loader type\r\nerror: Bad exit status from /var/tmp/rpm-tmp.l8aRaH (%check)\r\n\r\n\r\nRPM build errors:\r\n    Bad exit status from /var/tmp/rpm-tmp.l8aRaH (%check)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/128", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/128/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/128/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/128", "id": 312066956, "node_id": "MDU6SXNzdWUzMTIwNjY5NTY=", "number": 128, "title": "PRecord.create() raises an exception when there are extra key values", "user": {"login": "fransiskusx", "id": 2587677, "node_id": "MDQ6VXNlcjI1ODc2Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2587677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fransiskusx", "html_url": "https://github.com/fransiskusx", "followers_url": "https://api.github.com/users/fransiskusx/followers", "following_url": "https://api.github.com/users/fransiskusx/following{/other_user}", "gists_url": "https://api.github.com/users/fransiskusx/gists{/gist_id}", "starred_url": "https://api.github.com/users/fransiskusx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fransiskusx/subscriptions", "organizations_url": "https://api.github.com/users/fransiskusx/orgs", "repos_url": "https://api.github.com/users/fransiskusx/repos", "events_url": "https://api.github.com/users/fransiskusx/events{/privacy}", "received_events_url": "https://api.github.com/users/fransiskusx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259078, "node_id": "MDU6TGFiZWw0NDI1OTA3OA==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 962340955, "node_id": "MDU6TGFiZWw5NjIzNDA5NTU=", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/help%20wanted", "name": "help wanted", "color": "6568ed", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-06T18:06:22Z", "updated_at": "2018-10-24T19:04:42Z", "closed_at": "2018-10-24T19:04:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example:\r\n\r\nclass Foo(PRecord):\r\n  bar = field(type=int)\r\n\r\nFoo.create({'bar':1, 'pie' :3})\r\n\r\nThis will raise an exception: AttributeError: 'pie' is not among the specified fields for Foo.\r\n\r\nIs there a specific rational why we wont allow extra values and just accept values that are part of the PRecord fields? Or can we introduce an option where it will just ignore extra values? I dont mind creating a Pull Request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/126", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/126/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/126/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/126", "id": 299082383, "node_id": "MDU6SXNzdWUyOTkwODIzODM=", "number": 126, "title": "pointer to project offering uniqueness of objects in memory?", "user": {"login": "DustinWehr", "id": 1623534, "node_id": "MDQ6VXNlcjE2MjM1MzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1623534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DustinWehr", "html_url": "https://github.com/DustinWehr", "followers_url": "https://api.github.com/users/DustinWehr/followers", "following_url": "https://api.github.com/users/DustinWehr/following{/other_user}", "gists_url": "https://api.github.com/users/DustinWehr/gists{/gist_id}", "starred_url": "https://api.github.com/users/DustinWehr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DustinWehr/subscriptions", "organizations_url": "https://api.github.com/users/DustinWehr/orgs", "repos_url": "https://api.github.com/users/DustinWehr/repos", "events_url": "https://api.github.com/users/DustinWehr/events{/privacy}", "received_events_url": "https://api.github.com/users/DustinWehr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-21T18:40:34Z", "updated_at": "2018-03-05T21:43:39Z", "closed_at": "2018-03-05T21:43:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I came here looking for a persistent data structures implementation that would, for example, make this assertions true:\r\n```\r\nfrom pyrsistent import  m\r\nm1 = m(a=1,b=2)\r\nm2 = m(a=1) + m(b=2)\r\nassert m1 is m2\r\n```\r\nfor the sake of constant time equality testing, similar to how numbers and strings work (up to a certain number only, I think, via string interning). If you guys know of such a project, it would help me, and might help others to put a link in the Readme.md.\r\n\r\nOr, since you've probably thought about this more than I have: is keeping a string representation of each object at all efficient? (assuming that you have large objects and lots of equality tests, so that non-constant time equality hurts pyrsistent performance)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/122", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/122/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/122/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/122", "id": 288359130, "node_id": "MDU6SXNzdWUyODgzNTkxMzA=", "number": 122, "title": "PSet and s do not work with generators unlike standard set", "user": {"login": "lshostenko", "id": 9046065, "node_id": "MDQ6VXNlcjkwNDYwNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9046065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lshostenko", "html_url": "https://github.com/lshostenko", "followers_url": "https://api.github.com/users/lshostenko/followers", "following_url": "https://api.github.com/users/lshostenko/following{/other_user}", "gists_url": "https://api.github.com/users/lshostenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/lshostenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lshostenko/subscriptions", "organizations_url": "https://api.github.com/users/lshostenko/orgs", "repos_url": "https://api.github.com/users/lshostenko/repos", "events_url": "https://api.github.com/users/lshostenko/events{/privacy}", "received_events_url": "https://api.github.com/users/lshostenko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-13T20:54:55Z", "updated_at": "2018-01-13T21:01:46Z", "closed_at": "2018-01-13T21:01:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems impossible to create a PSet object from a generator directly, without transforming it to set or list first:\r\n\r\n`In [1]: from pyrsistent import PSet, s\r\n\r\nIn [2]: PSet(range(10))\r\nOut[2]: pset([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n\r\nIn [3]: s(range(10))\r\nOut[3]: pset([range(0, 10)])\r\n\r\nIn [4]: 2 in s(range(10))\r\nOut[4]: False\r\n\r\nIn [5]: s(i for i in range(10))\r\nOut[5]: pset([<generator object <genexpr> at 0x104fc0a98>])\r\n\r\nIn [6]: PSet(i for i in range(10))\r\nOut[6]: ...\r\nTypeError: object of type 'generator' has no len()\r\n\r\nIn [7]: set(i for i in range(10))\r\nOut[7]: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/121", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/121/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/121/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/121", "id": 277058074, "node_id": "MDU6SXNzdWUyNzcwNTgwNzQ=", "number": 121, "title": "`.set(...)` regression", "user": {"login": "exarkun", "id": 254565, "node_id": "MDQ6VXNlcjI1NDU2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/254565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exarkun", "html_url": "https://github.com/exarkun", "followers_url": "https://api.github.com/users/exarkun/followers", "following_url": "https://api.github.com/users/exarkun/following{/other_user}", "gists_url": "https://api.github.com/users/exarkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/exarkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exarkun/subscriptions", "organizations_url": "https://api.github.com/users/exarkun/orgs", "repos_url": "https://api.github.com/users/exarkun/repos", "events_url": "https://api.github.com/users/exarkun/events{/privacy}", "received_events_url": "https://api.github.com/users/exarkun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-27T15:28:38Z", "updated_at": "2017-12-06T20:46:04Z", "closed_at": "2017-12-06T20:46:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On pyrsistent 0.14.0 and older, this is allowed:\r\n\r\n```\r\nfrom pyrsistent import PClass, pvector_field\r\n\r\nclass X(PClass):\r\n    y = pvector_field(int)\r\n\r\n    def __new__(cls, **kwargs):\r\n        items = kwargs.get(u\"y\", None)\r\n        if items is None:\r\n            kwargs[u\"y\"] = ()\r\n        return super(X, cls).__new__(cls, **kwargs)\r\n\r\na = X(y=[])\r\nb = a.set(y=None)\r\nprint(b)\r\n```\r\n\r\nStarting with pyrsistent 0.14.1 though, it fails:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/tmp/minimal.py\", line 13, in <module>\r\n    b = a.set(y=None)\r\n  File \"/home/exarkun/Environments/txkube/local/lib/python2.7/site-packages/pyrsistent/_pclass.py\", line 102, in set\r\n    kwargs[key] = field.factory(value)\r\n  File \"/home/exarkun/Environments/txkube/local/lib/python2.7/site-packages/pyrsistent/_checked_types.py\", line 223, in _checked_type_create\r\n    return cls(source_data)\r\n  File \"/home/exarkun/Environments/txkube/local/lib/python2.7/site-packages/pyrsistent/_checked_types.py\", line 244, in __new__\r\n    return CheckedPVector.Evolver(cls, python_pvector()).extend(initial).persistent()\r\n  File \"/home/exarkun/Environments/txkube/local/lib/python2.7/site-packages/pyrsistent/_checked_types.py\", line 287, in extend\r\n    it = list(it)\r\nTypeError: 'NoneType' object is not iterable\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/119", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/119/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/119/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/119", "id": 270875126, "node_id": "MDU6SXNzdWUyNzA4NzUxMjY=", "number": 119, "title": "nested dicts not converted to pmap", "user": {"login": "benjaminhon", "id": 8186376, "node_id": "MDQ6VXNlcjgxODYzNzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8186376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benjaminhon", "html_url": "https://github.com/benjaminhon", "followers_url": "https://api.github.com/users/benjaminhon/followers", "following_url": "https://api.github.com/users/benjaminhon/following{/other_user}", "gists_url": "https://api.github.com/users/benjaminhon/gists{/gist_id}", "starred_url": "https://api.github.com/users/benjaminhon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benjaminhon/subscriptions", "organizations_url": "https://api.github.com/users/benjaminhon/orgs", "repos_url": "https://api.github.com/users/benjaminhon/repos", "events_url": "https://api.github.com/users/benjaminhon/events{/privacy}", "received_events_url": "https://api.github.com/users/benjaminhon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-03T04:14:05Z", "updated_at": "2017-11-03T04:18:15Z", "closed_at": "2017-11-03T04:18:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example,\r\n\r\n``` python\r\nd = {'records': {'abc':1, 'def': 2}}\r\nstate = pmap(d)\r\nd['records']['def'] = 10\r\n```\r\nnow state.records['def'] is changed to 10!\r\n\r\nis there anyway to create the pmapize a nested dict?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/117", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/117/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/117/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/117", "id": 262597395, "node_id": "MDU6SXNzdWUyNjI1OTczOTU=", "number": 117, "title": "Don't Fail to Construct PMaps if Length Hinting Fails", "user": {"login": "Julian", "id": 329822, "node_id": "MDQ6VXNlcjMyOTgyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/329822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian", "html_url": "https://github.com/Julian", "followers_url": "https://api.github.com/users/Julian/followers", "following_url": "https://api.github.com/users/Julian/following{/other_user}", "gists_url": "https://api.github.com/users/Julian/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian/subscriptions", "organizations_url": "https://api.github.com/users/Julian/orgs", "repos_url": "https://api.github.com/users/Julian/repos", "events_url": "https://api.github.com/users/Julian/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-03T21:38:57Z", "updated_at": "2017-10-07T23:19:28Z", "closed_at": "2017-10-07T23:19:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It looks like `pyrsistent.pmap` does some length hinting that other types do not -- specifically, passing in a generator to one raises an exception:\r\n\r\n```\r\n>>> pyrsistent.pmap((i, i + 1) for i in xrange(100))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/Julian/.local/share/virtualenvs/dev/site-packages/pyrsistent/_pmap.py\", line 419, in pmap\r\n    return _turbo_mapping(initial, pre_size)\r\n  File \"/Users/Julian/.local/share/virtualenvs/dev/site-packages/pyrsistent/_pmap.py\", line 381, in _turbo_mapping\r\n    size = pre_size or (2 * len(initial)) or 8\r\nTypeError: 'generator' has no length\r\n'generator' has no length\r\n```\r\n\r\n(whereas the same works just fine for other pyrsistent types).\r\n\r\nIt would be nice if `pmap`s were OK with dynamically reallocating themselves in the case that length hinting didn't work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/114", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/114/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/114/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/114", "id": 248944175, "node_id": "MDU6SXNzdWUyNDg5NDQxNzU=", "number": 114, "title": "Comparison of PMaps is very slow", "user": {"login": "dtomas", "id": 4202709, "node_id": "MDQ6VXNlcjQyMDI3MDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4202709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtomas", "html_url": "https://github.com/dtomas", "followers_url": "https://api.github.com/users/dtomas/followers", "following_url": "https://api.github.com/users/dtomas/following{/other_user}", "gists_url": "https://api.github.com/users/dtomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtomas/subscriptions", "organizations_url": "https://api.github.com/users/dtomas/orgs", "repos_url": "https://api.github.com/users/dtomas/repos", "events_url": "https://api.github.com/users/dtomas/events{/privacy}", "received_events_url": "https://api.github.com/users/dtomas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-09T07:43:18Z", "updated_at": "2018-01-17T19:43:54Z", "closed_at": "2018-01-17T19:43:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With PMaps, comparison for equality is much slower than with plain dicts:\r\n\r\n```python\r\n>>> d1 = {x: x for x in range(100)}\r\n>>> d2 = {x: x for x in range(100)}\r\n>>> m1 = pmap(d1)\r\n>>> m2 = pmap(d2)\r\n>>> timeit.timeit('d1 == d2', 'from __main__ import d1, d2')\r\n3.137547683000008\r\n>>> timeit.timeit('m1 == m2', 'from __main__ import m1, m2')\r\n141.046567408\r\n```\r\n\r\nHowever, comparison by hash is faster:\r\n```python\r\n>>> timeit.timeit('hash(m1) == hash(m2)', 'from __main__ import m1, m2')\r\n1.9964914870000712\r\n```\r\n\r\nThis is due to `Mapping.__eq__` doing `dict(self.items()) == dict(other.items())` (in Python 3.6).\r\nSince PMaps are hashable, their `__eq__` method should probably use hashes when comparing to other PMaps.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/113", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/113/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/113/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/113", "id": 244831572, "node_id": "MDU6SXNzdWUyNDQ4MzE1NzI=", "number": 113, "title": "Skip field factories when loading pickled objects", "user": {"login": "tobgu", "id": 485836, "node_id": "MDQ6VXNlcjQ4NTgzNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/485836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobgu", "html_url": "https://github.com/tobgu", "followers_url": "https://api.github.com/users/tobgu/followers", "following_url": "https://api.github.com/users/tobgu/following{/other_user}", "gists_url": "https://api.github.com/users/tobgu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobgu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobgu/subscriptions", "organizations_url": "https://api.github.com/users/tobgu/orgs", "repos_url": "https://api.github.com/users/tobgu/repos", "events_url": "https://api.github.com/users/tobgu/events{/privacy}", "received_events_url": "https://api.github.com/users/tobgu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-07-22T07:47:49Z", "updated_at": "2017-07-22T07:48:27Z", "closed_at": "2017-07-22T07:48:27Z", "author_association": "OWNER", "active_lock_reason": null, "body": "See the discussion in PR https://github.com/tobgu/pyrsistent/pull/111", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/112", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/112/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/112/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/112", "id": 244481121, "node_id": "MDU6SXNzdWUyNDQ0ODExMjE=", "number": 112, "title": "Support transforming unset keys", "user": {"login": "arrdem", "id": 704767, "node_id": "MDQ6VXNlcjcwNDc2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/704767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arrdem", "html_url": "https://github.com/arrdem", "followers_url": "https://api.github.com/users/arrdem/followers", "following_url": "https://api.github.com/users/arrdem/following{/other_user}", "gists_url": "https://api.github.com/users/arrdem/gists{/gist_id}", "starred_url": "https://api.github.com/users/arrdem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arrdem/subscriptions", "organizations_url": "https://api.github.com/users/arrdem/orgs", "repos_url": "https://api.github.com/users/arrdem/repos", "events_url": "https://api.github.com/users/arrdem/events{/privacy}", "received_events_url": "https://api.github.com/users/arrdem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-20T20:03:54Z", "updated_at": "2017-08-18T20:32:30Z", "closed_at": "2017-08-18T20:32:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n>>> freeze({\"foo\": 3, \"bar\": 0}).transform([\"bar\"], f.fnil(f.inc, 0))\r\npmap({'foo': 3, 'bar': 1})\r\n>>> freeze({\"foo\": 3}).transform([\"bar\"], f.fnil(f.inc, 0))\r\nTraceback (most recent call last):\r\n  File \"<console>\", line 1, in <module>\r\n  File \"pyrsistent/_pmap.py\", line 256, in transform\r\n    return transform(self, transformations)\r\n  File \"pyrsistent/_transformations.py\", line 51, in transform\r\n    r = _do_to_path(r, path, command)\r\n  File \"pyrsistent/_transformations.py\", line 60, in _do_to_path\r\n    return _update_structure(structure, kvs, path[1:], command)\r\n  File \"pyrsistent/_transformations.py\", line 127, in _update_structure\r\n    result = _do_to_path(v, path, command)\r\n  File \"pyrsistent/_transformations.py\", line 57, in _do_to_path\r\n    return command(structure) if callable(command) else command\r\n  File \"util/functions.py\", line 142, in inner\r\n    return fn(*inner_args)\r\n  File \"util/functions.py\", line 72, in inc\r\n    return x + 1\r\n  File \"pyrsistent/_pmap.py\", line 224, in __add__\r\n    return self.update(other)\r\n  File \"pyrsistent/_pmap.py\", line 198, in update\r\n    return self.update_with(lambda l, r: r, *maps)\r\n  File \"pyrsistent/_pmap.py\", line 218, in update_with\r\n    for key, value in map.items():\r\nAttributeError: 'int' object has no attribute 'items'\r\n>>> \r\n```\r\n\r\nI'd expect that when I tried to transform `\"bar\"` with `\"bar\"` un-mapped I'd transform the default mapping to `None`. Instead, I get this really interesting stacktrace.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/109", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/109/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/109/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/109", "id": 232039993, "node_id": "MDU6SXNzdWUyMzIwMzk5OTM=", "number": 109, "title": "Support initial field values that are callable", "user": {"login": "exarkun", "id": 254565, "node_id": "MDQ6VXNlcjI1NDU2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/254565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exarkun", "html_url": "https://github.com/exarkun", "followers_url": "https://api.github.com/users/exarkun/followers", "following_url": "https://api.github.com/users/exarkun/following{/other_user}", "gists_url": "https://api.github.com/users/exarkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/exarkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exarkun/subscriptions", "organizations_url": "https://api.github.com/users/exarkun/orgs", "repos_url": "https://api.github.com/users/exarkun/repos", "events_url": "https://api.github.com/users/exarkun/events{/privacy}", "received_events_url": "https://api.github.com/users/exarkun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-29T14:37:33Z", "updated_at": "2018-06-12T20:04:18Z", "closed_at": "2018-06-12T20:04:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems the API `field(initial=foo)` cannot be used to supply an initial value which is a callable object.  Callables are detected and treated as factories for the initial value.\r\n\r\nI think `field(initial=foo)` should be replaced with an API which makes it explicit whether a factory or value is being supplied.  A couple possibilities:\r\n\r\n```\r\nfoo = field(initialValue=bar) # bar is the initial value\r\nfoo = field(initialFactory=bar) # bar() is the initial value\r\n```\r\n\r\nOr\r\n\r\n```\r\nfoo = field(initial=Value(bar)) # bar is the initial value\r\nfoo = field(initial=Factory(bar)) # bar() is the initial value\r\n```\r\n\r\nor possibly\r\n\r\n```\r\nfoo = field(initial=bar) # bar is the initial value\r\nfoo = field(initial=Factory(bar)) # bar() is the initial value\r\n```\r\n\r\nbut this last one has a difficult transition from the current API (since `initial=bar` already means something different).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/106", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/106/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/106/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/106", "id": 231619029, "node_id": "MDU6SXNzdWUyMzE2MTkwMjk=", "number": 106, "title": "Not all inherited `__invariant__` definitions are discovered by PClassMeta / store_invariants", "user": {"login": "exarkun", "id": 254565, "node_id": "MDQ6VXNlcjI1NDU2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/254565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exarkun", "html_url": "https://github.com/exarkun", "followers_url": "https://api.github.com/users/exarkun/followers", "following_url": "https://api.github.com/users/exarkun/following{/other_user}", "gists_url": "https://api.github.com/users/exarkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/exarkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exarkun/subscriptions", "organizations_url": "https://api.github.com/users/exarkun/orgs", "repos_url": "https://api.github.com/users/exarkun/repos", "events_url": "https://api.github.com/users/exarkun/events{/privacy}", "received_events_url": "https://api.github.com/users/exarkun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-26T12:55:36Z", "updated_at": "2017-05-30T08:14:50Z", "closed_at": "2017-05-30T08:14:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider this class hierarchy:\r\n\r\n```\r\nfrom pyrsistent import PClass\r\n\r\nclass W(object):\r\n    def __invariant__(self):\r\n        return [(False, \"W\")]\r\n\r\nclass Y(W, PClass):\r\n    pass\r\n```\r\n\r\nAttempting to instantiate this `Y` results in a failure as expected (at least by me):\r\n\r\n```\r\npyrsistent._checked_types.InvariantException: \r\n    Global invariant failed, invariant_errors=[('W',)], missing_fields=[]\r\n```\r\n\r\nNow compare to this class hierarchy:\r\n\r\n```\r\nfrom pyrsistent import PClass\r\n\r\nclass W(object):\r\n    def __invariant__(self):\r\n        return [(False, \"W\")]\r\n\r\nclass X(W):\r\n    pass\r\n\r\nclass Y(X, PClass):\r\n    pass\r\n```\r\n\r\nAttempting to instantiate *this* `Y` succeeds.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/104", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/104/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/104/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/104", "id": 223907909, "node_id": "MDU6SXNzdWUyMjM5MDc5MDk=", "number": 104, "title": "Where is data stored?", "user": {"login": "jrbrodie77", "id": 5175843, "node_id": "MDQ6VXNlcjUxNzU4NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5175843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrbrodie77", "html_url": "https://github.com/jrbrodie77", "followers_url": "https://api.github.com/users/jrbrodie77/followers", "following_url": "https://api.github.com/users/jrbrodie77/following{/other_user}", "gists_url": "https://api.github.com/users/jrbrodie77/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrbrodie77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrbrodie77/subscriptions", "organizations_url": "https://api.github.com/users/jrbrodie77/orgs", "repos_url": "https://api.github.com/users/jrbrodie77/repos", "events_url": "https://api.github.com/users/jrbrodie77/events{/privacy}", "received_events_url": "https://api.github.com/users/jrbrodie77/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-04-24T18:16:31Z", "updated_at": "2017-04-25T17:53:03Z", "closed_at": "2017-04-25T17:53:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just to make sure I'm using Pyrsistent properly, I'm curious where the data actually lives?  Is there a central global variable in the module?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/102", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/102/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/102/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/102", "id": 222478317, "node_id": "MDU6SXNzdWUyMjI0NzgzMTc=", "number": 102, "title": "export mypy type annotations", "user": {"login": "graingert", "id": 413772, "node_id": "MDQ6VXNlcjQxMzc3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/413772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graingert", "html_url": "https://github.com/graingert", "followers_url": "https://api.github.com/users/graingert/followers", "following_url": "https://api.github.com/users/graingert/following{/other_user}", "gists_url": "https://api.github.com/users/graingert/gists{/gist_id}", "starred_url": "https://api.github.com/users/graingert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graingert/subscriptions", "organizations_url": "https://api.github.com/users/graingert/orgs", "repos_url": "https://api.github.com/users/graingert/repos", "events_url": "https://api.github.com/users/graingert/events{/privacy}", "received_events_url": "https://api.github.com/users/graingert/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259078, "node_id": "MDU6TGFiZWw0NDI1OTA3OA==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 962340955, "node_id": "MDU6TGFiZWw5NjIzNDA5NTU=", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/help%20wanted", "name": "help wanted", "color": "6568ed", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2017-04-18T16:46:40Z", "updated_at": "2018-11-20T22:10:42Z", "closed_at": "2018-11-20T22:10:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/100", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/100/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/100/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/100", "id": 215114391, "node_id": "MDU6SXNzdWUyMTUxMTQzOTE=", "number": 100, "title": "Allow predicates on values in transform paths for pvectors and pmaps", "user": {"login": "exarkun", "id": 254565, "node_id": "MDQ6VXNlcjI1NDU2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/254565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exarkun", "html_url": "https://github.com/exarkun", "followers_url": "https://api.github.com/users/exarkun/followers", "following_url": "https://api.github.com/users/exarkun/following{/other_user}", "gists_url": "https://api.github.com/users/exarkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/exarkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exarkun/subscriptions", "organizations_url": "https://api.github.com/users/exarkun/orgs", "repos_url": "https://api.github.com/users/exarkun/repos", "events_url": "https://api.github.com/users/exarkun/events{/privacy}", "received_events_url": "https://api.github.com/users/exarkun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-17T20:31:06Z", "updated_at": "2017-05-30T08:25:23Z", "closed_at": "2017-05-30T08:25:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I often want to write transformations like:\r\n\r\n```\r\n# Double even elements of the list\r\nxs = pvector([1, 3, 2, 4])\r\nassert xs.transform(lambda x: x % 2 == 0, lambda x: x * 2) == pvector([1, 3, 4, 8])\r\n```\r\n\r\nParticular with more complex paths:\r\n\r\n```\r\nxs = pmap({\"foo\": pvector([1, 3, 2, 4]), \"bar\": pvector([1, 2, 3, 4])})\r\nassert xs.transform(\r\n    [\"foo\", lambda x: x % 2 == 0],\r\n    lambda x: x * 2,\r\n) == pmap({\"foo\": pvector([1, 3, 4, 8]), \"bar\": pvector([1, 2, 3, 4])})\r\n```\r\n\r\nI can often cobble together something that deals with the above two scenarios.  It usually involves duplicating some information from the path but it's kind of manageable.\r\n\r\nWhere I really have trouble is when I want to use this missing feature twice or more within a single path:\r\n\r\n```\r\nxs = pmap({\"foo\": pvector([1, 3, 2, 4]), \"bar\": pvector([1, 2])})\r\nassert xs.transform(\r\n    [lambda (k, v): len(v) == 4, lambda x: x % 2 == 0],\r\n    lambda x: x * 2,\r\n) == pmap({\"foo\": pvector([1, 3, 4, 8]), \"bar\": pvector([1, 2])})\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/99", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/99/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/99/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/99", "id": 210891783, "node_id": "MDU6SXNzdWUyMTA4OTE3ODM=", "number": 99, "title": "PyCharm autocomplete for PRecord?", "user": {"login": "jrbrodie77", "id": 5175843, "node_id": "MDQ6VXNlcjUxNzU4NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5175843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrbrodie77", "html_url": "https://github.com/jrbrodie77", "followers_url": "https://api.github.com/users/jrbrodie77/followers", "following_url": "https://api.github.com/users/jrbrodie77/following{/other_user}", "gists_url": "https://api.github.com/users/jrbrodie77/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrbrodie77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrbrodie77/subscriptions", "organizations_url": "https://api.github.com/users/jrbrodie77/orgs", "repos_url": "https://api.github.com/users/jrbrodie77/repos", "events_url": "https://api.github.com/users/jrbrodie77/events{/privacy}", "received_events_url": "https://api.github.com/users/jrbrodie77/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-28T20:14:55Z", "updated_at": "2017-03-14T04:40:02Z", "closed_at": "2017-03-14T04:40:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "(sorry for using Issues as a forum, please point me to any active forum on this project if there is one)\r\n\r\nIs there any way to wrap a PRecord so that it does argument auto-complete/suggestion in PyCharm?\r\n\r\nI've ended up having to do some pretty clunky stuff like:\r\n\r\n    class MyPClass(PRecord):\r\n        x = field()\r\n        y = fiels()\r\n\r\n    def my_pclass_create(x, y):\r\n        return MyPClass(x=x, y=y)\r\n\r\nThis gets tedious with many arguments and named/optional args.\r\n\r\nIs there a way to add an init to a class that inherits a PRecord? So that PyCharm can introspect it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/98", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/98/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/98/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/98", "id": 210478870, "node_id": "MDU6SXNzdWUyMTA0Nzg4NzA=", "number": 98, "title": "Make it possible to specify custom repr on PClass and PRecord ", "user": {"login": "tobgu", "id": 485836, "node_id": "MDQ6VXNlcjQ4NTgzNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/485836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobgu", "html_url": "https://github.com/tobgu", "followers_url": "https://api.github.com/users/tobgu/followers", "following_url": "https://api.github.com/users/tobgu/following{/other_user}", "gists_url": "https://api.github.com/users/tobgu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobgu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobgu/subscriptions", "organizations_url": "https://api.github.com/users/tobgu/orgs", "repos_url": "https://api.github.com/users/tobgu/repos", "events_url": "https://api.github.com/users/tobgu/events{/privacy}", "received_events_url": "https://api.github.com/users/tobgu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259078, "node_id": "MDU6TGFiZWw0NDI1OTA3OA==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "tobgu", "id": 485836, "node_id": "MDQ6VXNlcjQ4NTgzNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/485836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobgu", "html_url": "https://github.com/tobgu", "followers_url": "https://api.github.com/users/tobgu/followers", "following_url": "https://api.github.com/users/tobgu/following{/other_user}", "gists_url": "https://api.github.com/users/tobgu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobgu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobgu/subscriptions", "organizations_url": "https://api.github.com/users/tobgu/orgs", "repos_url": "https://api.github.com/users/tobgu/repos", "events_url": "https://api.github.com/users/tobgu/events{/privacy}", "received_events_url": "https://api.github.com/users/tobgu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tobgu", "id": 485836, "node_id": "MDQ6VXNlcjQ4NTgzNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/485836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobgu", "html_url": "https://github.com/tobgu", "followers_url": "https://api.github.com/users/tobgu/followers", "following_url": "https://api.github.com/users/tobgu/following{/other_user}", "gists_url": "https://api.github.com/users/tobgu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobgu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobgu/subscriptions", "organizations_url": "https://api.github.com/users/tobgu/orgs", "repos_url": "https://api.github.com/users/tobgu/repos", "events_url": "https://api.github.com/users/tobgu/events{/privacy}", "received_events_url": "https://api.github.com/users/tobgu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2017-02-27T13:08:00Z", "updated_at": "2017-02-27T13:13:07Z", "closed_at": "2017-02-27T13:13:07Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This would be helpful for classes holding large collection for which you would like restrict the depth and length that the repr traverses.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/97", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/97/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/97/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/97", "id": 208969328, "node_id": "MDU6SXNzdWUyMDg5NjkzMjg=", "number": 97, "title": "CheckedPVector can't be initialized from generators - fails insidiously", "user": {"login": "ipmcc", "id": 537077, "node_id": "MDQ6VXNlcjUzNzA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/537077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipmcc", "html_url": "https://github.com/ipmcc", "followers_url": "https://api.github.com/users/ipmcc/followers", "following_url": "https://api.github.com/users/ipmcc/following{/other_user}", "gists_url": "https://api.github.com/users/ipmcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipmcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipmcc/subscriptions", "organizations_url": "https://api.github.com/users/ipmcc/orgs", "repos_url": "https://api.github.com/users/ipmcc/repos", "events_url": "https://api.github.com/users/ipmcc/events{/privacy}", "received_events_url": "https://api.github.com/users/ipmcc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-20T19:54:23Z", "updated_at": "2017-02-26T13:52:48Z", "closed_at": "2017-02-26T13:52:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following:\r\n\r\n```\r\n    def test_vector_creation(self):\r\n        from pyrsistent import CheckedPVector, CheckedPSet\r\n        \r\n        class IntSet(CheckedPSet):\r\n            __type__ = int\r\n\r\n        class IntVector(CheckedPVector):\r\n            __type__ = int\r\n\r\n        # Baseline collection behavior\r\n        assert {1, 2, 3} == set([1, 2, 3])\r\n        assert {1, 2, 3} == set(x for x in [1, 2, 3])\r\n\r\n        assert [1, 2, 3] == list([1, 2, 3])\r\n        assert [1, 2, 3] == list(x for x in [1, 2, 3])\r\n\r\n        # Checked collection behavior\r\n        # Set\r\n        assert {1, 2, 3} == IntSet([1, 2, 3])\r\n        assert {1, 2, 3} == IntSet(x for x in [1, 2, 3])\r\n\r\n        # Vector\r\n        assert [1, 2, 3] == IntVector([1, 2, 3])\r\n        assert [1, 2, 3] == IntVector(x for x in [1, 2, 3])  # FAILS!\r\n\r\n```\r\n\r\nWhat's worse, `IntVector(x for x in [1, 2, 3]) == IntVector([])` which for me (and I'm sure many other cases) causes a \"silent failure\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/92", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/92/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/92/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/92", "id": 198543749, "node_id": "MDU6SXNzdWUxOTg1NDM3NDk=", "number": 92, "title": "multi-discard pvector transformation does the wrong thing", "user": {"login": "exarkun", "id": 254565, "node_id": "MDQ6VXNlcjI1NDU2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/254565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exarkun", "html_url": "https://github.com/exarkun", "followers_url": "https://api.github.com/users/exarkun/followers", "following_url": "https://api.github.com/users/exarkun/following{/other_user}", "gists_url": "https://api.github.com/users/exarkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/exarkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exarkun/subscriptions", "organizations_url": "https://api.github.com/users/exarkun/orgs", "repos_url": "https://api.github.com/users/exarkun/repos", "events_url": "https://api.github.com/users/exarkun/events{/privacy}", "received_events_url": "https://api.github.com/users/exarkun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-03T19:00:02Z", "updated_at": "2017-01-06T16:51:17Z", "closed_at": "2017-01-06T16:50:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n>>> pvector(range(5)).transform([lambda i: i % 2], discard)\r\npvector([0, 2, 3])\r\n```\r\n\r\nI would think the correct result is `pvector([0, 2, 4])`.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/91", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/91/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/91/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/91", "id": 185183530, "node_id": "MDU6SXNzdWUxODUxODM1MzA=", "number": 91, "title": "Add pset.update (pbag.update?)", "user": {"login": "Julian", "id": 329822, "node_id": "MDQ6VXNlcjMyOTgyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/329822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian", "html_url": "https://github.com/Julian", "followers_url": "https://api.github.com/users/Julian/followers", "following_url": "https://api.github.com/users/Julian/following{/other_user}", "gists_url": "https://api.github.com/users/Julian/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian/subscriptions", "organizations_url": "https://api.github.com/users/Julian/orgs", "repos_url": "https://api.github.com/users/Julian/repos", "events_url": "https://api.github.com/users/Julian/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-25T17:33:02Z", "updated_at": "2017-01-06T17:57:30Z", "closed_at": "2017-01-06T17:18:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "These are useful and missing from the general set interface (and seem to be present on pmap, though I haven't yet read whether they work like dict.update and take iterables or if they just take pmaps).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/90", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/90/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/90/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/90", "id": 182116099, "node_id": "MDU6SXNzdWUxODIxMTYwOTk=", "number": 90, "title": "PMap.get() introducing drag?", "user": {"login": "montegoode", "id": 3836154, "node_id": "MDQ6VXNlcjM4MzYxNTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3836154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/montegoode", "html_url": "https://github.com/montegoode", "followers_url": "https://api.github.com/users/montegoode/followers", "following_url": "https://api.github.com/users/montegoode/following{/other_user}", "gists_url": "https://api.github.com/users/montegoode/gists{/gist_id}", "starred_url": "https://api.github.com/users/montegoode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/montegoode/subscriptions", "organizations_url": "https://api.github.com/users/montegoode/orgs", "repos_url": "https://api.github.com/users/montegoode/repos", "events_url": "https://api.github.com/users/montegoode/events{/privacy}", "received_events_url": "https://api.github.com/users/montegoode/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-10T21:08:05Z", "updated_at": "2016-10-12T17:09:33Z", "closed_at": "2016-10-12T17:09:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Greetings folks, I'm not sure if this is an issue per se, but my manager wanted me to reach out to you just in case some insight or suggestions.\n\nI'm working on some time series abstraction code and we're using your awesome library to hold the payload inside our event objects. When we started running real data through it, i did some profiling to identify where the code could use some optimization. After fixing some issues that were my own doing, I noticed that when we are processing a lot of data, the code seemed to be spending a little more time in `PMap.get()` than I would have predicted.\n\nI see that creating or freezing/thawing a data structure is going to introduce overhead that native data structures would not. But I was a little puzzled that once my objects were created, that `PMap.get()` was somewhat slower than `dict.get()`. Processing the same sample data by using a `dict.get()` dropped the execution time from 16 seconds to 11 seconds. That can add up to real differences when you're running production quantities of data through it.\n\nSince we were puzzled that the read operations seemed to introduce some drag, my manager said \"get in touch with the developer and see what they have to say.\" So I did. :)\n\nCheers,\n\nMonte\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/87", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/87/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/87/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/87", "id": 145749259, "node_id": "MDU6SXNzdWUxNDU3NDkyNTk=", "number": 87, "title": "pmap.get(key_list) for easier access for nested dicts", "user": {"login": "gasparch", "id": 942380, "node_id": "MDQ6VXNlcjk0MjM4MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/942380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gasparch", "html_url": "https://github.com/gasparch", "followers_url": "https://api.github.com/users/gasparch/followers", "following_url": "https://api.github.com/users/gasparch/following{/other_user}", "gists_url": "https://api.github.com/users/gasparch/gists{/gist_id}", "starred_url": "https://api.github.com/users/gasparch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gasparch/subscriptions", "organizations_url": "https://api.github.com/users/gasparch/orgs", "repos_url": "https://api.github.com/users/gasparch/repos", "events_url": "https://api.github.com/users/gasparch/events{/privacy}", "received_events_url": "https://api.github.com/users/gasparch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-04-04T17:22:49Z", "updated_at": "2017-01-06T17:46:26Z", "closed_at": "2017-01-06T17:44:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would propose having some kind of get function which can fetch data from nested PMaps/Vectors. Common use can be like\n\nkeys = ['fruits', 'apples', 'count' ]\n\nsubState = state.get(keys).evolver()\n....do_some_work(subState)...\nstate = state.transform(keys, subState.persistent())\n\nit exists in immutable-js and it is very useful https://facebook.github.io/immutable-js/docs/#/Map/setIn\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/86", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/86/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/86/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/86", "id": 145170857, "node_id": "MDU6SXNzdWUxNDUxNzA4NTc=", "number": 86, "title": "different references when updating pmap with same string value with spaces", "user": {"login": "gasparch", "id": 942380, "node_id": "MDQ6VXNlcjk0MjM4MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/942380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gasparch", "html_url": "https://github.com/gasparch", "followers_url": "https://api.github.com/users/gasparch/followers", "following_url": "https://api.github.com/users/gasparch/following{/other_user}", "gists_url": "https://api.github.com/users/gasparch/gists{/gist_id}", "starred_url": "https://api.github.com/users/gasparch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gasparch/subscriptions", "organizations_url": "https://api.github.com/users/gasparch/orgs", "repos_url": "https://api.github.com/users/gasparch/repos", "events_url": "https://api.github.com/users/gasparch/events{/privacy}", "received_events_url": "https://api.github.com/users/gasparch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-04-01T12:41:42Z", "updated_at": "2016-10-10T21:36:02Z", "closed_at": "2016-10-10T21:36:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "import pyrsistent as ps\n\n```\nm = ps.freeze({1: \"foo\", \"key\": \"bar\"})\nm1 = m.set(\"key\", \"bar\")\nm == m1; m is m1\n```\n\nResult is \n\n> True\n> True\n\nTake note of spaces in following example. String length does not matter, just presence of spaces.\n\n```\nm = ps.freeze({1: \"foo\", \"key\": \"ba r\"})\nm1 = m.set(\"key\", \"ba r\")\nm == m1; m is m1\n```\n\nResult is \n\n> True\n> False\n\npypy -V\nPython 2.7.10 (246c9cf22037b11dc0e8c29ce3f291d3b8c5935a, Mar 13 2016, 00:12:47)\n[PyPy 5.0.0 with GCC 4.9.2]\n\nActually it is a python problem\n\n> aaa = \"qweqweqwe\"\n> qwe = \"qweqweqwe\"\n> aaa == qwe\n> **True**\n> aaa is qwe\n> **True**\n> aaa = \"qwe qweqwe\"\n> qwe = \"qwe qweqwe\"\n> aaa is qwe\n> **False**\n> aaa == qwe\n> **True**\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/84", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/84/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/84/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/84", "id": 142798528, "node_id": "MDU6SXNzdWUxNDI3OTg1Mjg=", "number": 84, "title": "Segfault on failed item repr", "user": {"login": "foolswood", "id": 306638, "node_id": "MDQ6VXNlcjMwNjYzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/306638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/foolswood", "html_url": "https://github.com/foolswood", "followers_url": "https://api.github.com/users/foolswood/followers", "following_url": "https://api.github.com/users/foolswood/following{/other_user}", "gists_url": "https://api.github.com/users/foolswood/gists{/gist_id}", "starred_url": "https://api.github.com/users/foolswood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/foolswood/subscriptions", "organizations_url": "https://api.github.com/users/foolswood/orgs", "repos_url": "https://api.github.com/users/foolswood/repos", "events_url": "https://api.github.com/users/foolswood/events{/privacy}", "received_events_url": "https://api.github.com/users/foolswood/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-22T22:22:27Z", "updated_at": "2016-04-03T07:06:05Z", "closed_at": "2016-04-03T06:43:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\nclass A:\n    def __repr__(self):\n        raise ValueError('oh no!')\n\nrepr(pvector([A()]))  # segfaults\n```\n\n[pvectorcmodule.c:261](https://github.com/tobgu/pyrsistent/blob/master/pvectorcmodule.c#L261) returns a NULL pointer in the case where the python object's repr raises an exception, which is then feeds into [pvectorcmodule.c:267](https://github.com/tobgu/pyrsistent/blob/master/pvectorcmodule.c#L267) causing it to segfault.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/83", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/83/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/83/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/83", "id": 141722276, "node_id": "MDU6SXNzdWUxNDE3MjIyNzY=", "number": 83, "title": "Using enum as pmap_field key_type", "user": {"login": "luizirber", "id": 6642, "node_id": "MDQ6VXNlcjY2NDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luizirber", "html_url": "https://github.com/luizirber", "followers_url": "https://api.github.com/users/luizirber/followers", "following_url": "https://api.github.com/users/luizirber/following{/other_user}", "gists_url": "https://api.github.com/users/luizirber/gists{/gist_id}", "starred_url": "https://api.github.com/users/luizirber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luizirber/subscriptions", "organizations_url": "https://api.github.com/users/luizirber/orgs", "repos_url": "https://api.github.com/users/luizirber/repos", "events_url": "https://api.github.com/users/luizirber/events{/privacy}", "received_events_url": "https://api.github.com/users/luizirber/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-03-17T22:24:46Z", "updated_at": "2016-03-21T05:14:44Z", "closed_at": "2016-03-21T05:14:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to use an `enum` as `key_type` in a `pmap_field` (relevant code: [Lines 1-38](https://github.com/luizirber/tam/blob/88c52a92d37f02de3453a456793815d03ee7d3d0/src/tam/defs.py#L38)), but got an error saying:\n\n``` python\ntests/test_tam.py:5: in <module>\n    import tam.defs\nsrc/tam/defs.py:32: in <module>\n    class Tile(PRecord):\nsrc/tam/defs.py:38: in Tile\n    glues = pmap_field(key_type=Direction, value_type=Glue)  # TODO: invariant?\npython3.5/site-packages/pyrsistent/_field_common.py:266: in pmap_field\n    TheMap = _make_pmap_field_type(key_type, value_type)\npython3.5/site-packages/pyrsistent/_field_common.py:239: in _make_pmap_field_type\n    class TheMap(CheckedPMap):\npython3.5/site-packages/pyrsistent/_checked_types.py:363: in __new__\n    _store_types(dct, bases, '_checked_key_types', '__key_type__')\npython3.5/site-packages/pyrsistent/_checked_types.py:57: in _store_types\n    raise TypeError('Type specifications must be types or strings')\nE   TypeError: Type specifications must be types or strings\n```\n\nIf instead I define it as\n\n```\nglues = pmap_field(key_type=type(Direction.North), value_type=Glue)\n```\n\nI get a different error, I can't instantiate the PRecord:\n\n``` python\ntests/test_tam.py:33: in test_glue_label_defaults\n    test_tile = tam.defs.new_tile(\"test\")\nsrc/tam/defs.py:76: in new_tile\n    glues=glues)\npython3.5/site-packages/pyrsistent/_precord.py:49: in __new__\n    e[k] = v\npython3.5/site-packages/pyrsistent/_precord.py:110: in __setitem__\n    self.set(key, original_value)\npython3.5/site-packages/pyrsistent/_precord.py:116: in set\n    value = field.factory(original_value)\npython3.5/site-packages/pyrsistent/_checked_types.py:441: in create\n    for key, value in source_data.items()))\npython3.5/site-packages/pyrsistent/_checked_types.py:410: in __new__\n    evolver.set(k, v)\npython3.5/site-packages/pyrsistent/_checked_types.py:458: in set\n    _check_types([key], self._destination_class._checked_key_types, self._destination_class, CheckedKeyTypeError)\npython3.5/site-packages/pyrsistent/_checked_types.py:172: in _check_types\n    raise exception_type(source_class, expected_types, actual_type, e, msg)\nE   pyrsistent._checked_types.CheckedKeyTypeError: Type EnummetaToGluePMap can only be used with ('EnumMeta',), not Direction\n```\n\nDid anyone try to use Enum, or do you recommend a different approach?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/82", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/82/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/82/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/82", "id": 139490442, "node_id": "MDU6SXNzdWUxMzk0OTA0NDI=", "number": 82, "title": "Not compatible with hypothesis 3.1", "user": {"login": "DamienCassou", "id": 217543, "node_id": "MDQ6VXNlcjIxNzU0Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/217543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DamienCassou", "html_url": "https://github.com/DamienCassou", "followers_url": "https://api.github.com/users/DamienCassou/followers", "following_url": "https://api.github.com/users/DamienCassou/following{/other_user}", "gists_url": "https://api.github.com/users/DamienCassou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DamienCassou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DamienCassou/subscriptions", "organizations_url": "https://api.github.com/users/DamienCassou/orgs", "repos_url": "https://api.github.com/users/DamienCassou/repos", "events_url": "https://api.github.com/users/DamienCassou/events{/privacy}", "received_events_url": "https://api.github.com/users/DamienCassou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-09T06:38:18Z", "updated_at": "2016-03-17T18:47:21Z", "closed_at": "2016-03-17T18:45:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running the tests on pyrsistent works fine with hypothesis1.14, but not with hypothesis3.1:\n\n```\nself = <hypothesis.internal.conjecture.data.TestData object at 0x7ffff21f3790>\nstrategy = choices()\n\n    def draw(self, strategy):\n        if self.is_find and not strategy.supports_find:\n            raise InvalidArgument((\n                'Cannot use strategy %r within a call to find (presumably '\n                'because it would be invalid after the call had ended).'\n>           ) % (strategy,))\nE           InvalidArgument: Cannot use strategy choices() within a call to find (presumably because it would be invalid after the call had ended).\n\nhypothesis/internal/conjecture/data.py:96: InvalidArgument\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/80", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/80/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/80/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/80", "id": 130367037, "node_id": "MDU6SXNzdWUxMzAzNjcwMzc=", "number": 80, "title": "test failure with python 2 in version 0.11.11", "user": {"login": "jlec", "id": 79732, "node_id": "MDQ6VXNlcjc5NzMy", "avatar_url": "https://avatars0.githubusercontent.com/u/79732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlec", "html_url": "https://github.com/jlec", "followers_url": "https://api.github.com/users/jlec/followers", "following_url": "https://api.github.com/users/jlec/following{/other_user}", "gists_url": "https://api.github.com/users/jlec/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlec/subscriptions", "organizations_url": "https://api.github.com/users/jlec/orgs", "repos_url": "https://api.github.com/users/jlec/repos", "events_url": "https://api.github.com/users/jlec/events{/privacy}", "received_events_url": "https://api.github.com/users/jlec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-02-01T13:52:05Z", "updated_at": "2016-02-07T10:36:21Z", "closed_at": "2016-02-06T13:42:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\n================================================ ERRORS ================================================\n_________________________________ ERROR collecting tests/class_test.py _________________________________\ntests/class_test.py:243: in <module>\n    class LinkedList(PClass):\ntests/class_test.py:244: in LinkedList\n    value = field(type='tests.class_test.Numbers')\npyrsistent/_field_common.py:84: in field\n    _check_field_parameters(field)\npyrsistent/_field_common.py:102: in _check_field_parameters\n    if not callable(field.factory):\npyrsistent/_field_common.py:54: in factory\n    typ = get_type(tuple(self.type)[0])\npyrsistent/_checked_types.py:156: in get_type\n    return _get_class(typ)\npyrsistent/_checked_types.py:148: in _get_class\n    module = __import__(module_name, fromlist=[class_name])\nE   ImportError: No module named tests.class_test\n=============================================== FAILURES ===============================================\n______________________________ test_type_check_with_string_specification _______________________________\n\n    def test_type_check_with_string_specification():\n        content = [1.5, 2.0]\n        vec = FloatVector(content)\n        sett = FloatSet(content)\n>       map = VectorToSetMap({vec: sett})\n\ntests/checked_map_test.py:138:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npyrsistent/_checked_types.py:410: in __new__\n    evolver.set(k, v)\npyrsistent/_checked_types.py:458: in set\n    _check_types([key], self._destination_class._checked_key_types, self._destination_class, CheckedKeyTypeError)\npyrsistent/_checked_types.py:166: in _check_types\n    if not any(isinstance(e, get_type(t)) for t in expected_types):\npyrsistent/_checked_types.py:166: in <genexpr>\n    if not any(isinstance(e, get_type(t)) for t in expected_types):\npyrsistent/_checked_types.py:156: in get_type\n    return _get_class(typ)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntype_name = 'tests.checked_map_test.FloatVector'\n\n    def _get_class(type_name):\n        module_name, class_name = type_name.rsplit('.', 1)\n>       module = __import__(module_name, fromlist=[class_name])\nE       ImportError: No module named tests.checked_map_test\n\npyrsistent/_checked_types.py:148: ImportError\n_____________________________ test_type_creation_with_string_specification _____________________________\n\n    def test_type_creation_with_string_specification():\n        content = (1.5, 2.0)\n>       map = VectorToSetMap.create({content: content})\n\ntests/checked_map_test.py:145:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npyrsistent/_checked_types.py:433: in create\n    key_types = get_types(cls._checked_key_types)\npyrsistent/_checked_types.py:160: in get_types\n    return [get_type(typ) for typ in typs]\npyrsistent/_checked_types.py:156: in get_type\n    return _get_class(typ)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntype_name = 'tests.checked_map_test.FloatVector'\n\n    def _get_class(type_name):\n        module_name, class_name = type_name.rsplit('.', 1)\n>       module = __import__(module_name, fromlist=[class_name])\nE       ImportError: No module named tests.checked_map_test\n\npyrsistent/_checked_types.py:148: ImportError\n_________________________________ test_check_with_string_specification _________________________________\n\n    def test_check_with_string_specification():\n        naturals_list = [Naturals([1, 2]), Naturals([3, 4])]\n>       nv = NaturalsVectorStr(naturals_list)\n\ntests/checked_vector_test.py:192:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npyrsistent/_checked_types.py:222: in __new__\n    return CheckedPVector.Evolver(cls, python_pvector()).extend(initial).persistent()\npyrsistent/_checked_types.py:265: in extend\n    self._check(it)\npyrsistent/_checked_types.py:252: in _check\n    _check_types(it, self._destination_class._checked_types, self._destination_class)\npyrsistent/_checked_types.py:166: in _check_types\n    if not any(isinstance(e, get_type(t)) for t in expected_types):\npyrsistent/_checked_types.py:166: in <genexpr>\n    if not any(isinstance(e, get_type(t)) for t in expected_types):\npyrsistent/_checked_types.py:156: in get_type\n    return _get_class(typ)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntype_name = 'tests.checked_vector_test.Naturals'\n\n    def _get_class(type_name):\n        module_name, class_name = type_name.rsplit('.', 1)\n>       module = __import__(module_name, fromlist=[class_name])\nE       ImportError: No module named tests.checked_vector_test\n\npyrsistent/_checked_types.py:148: ImportError\n________________________________ test_create_with_string_specification _________________________________\n\n    def test_create_with_string_specification():\n        naturals_list = [[1, 2], [3, 4]]\n>       nv = NaturalsVectorStr.create(naturals_list)\n\ntests/checked_vector_test.py:198:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npyrsistent/_checked_types.py:194: in _checked_type_create\n    types = get_types(cls._checked_types)\npyrsistent/_checked_types.py:160: in get_types\n    return [get_type(typ) for typ in typs]\npyrsistent/_checked_types.py:156: in get_type\n    return _get_class(typ)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntype_name = 'tests.checked_vector_test.Naturals'\n\n    def _get_class(type_name):\n        module_name, class_name = type_name.rsplit('.', 1)\n>       module = __import__(module_name, fromlist=[class_name])\nE       ImportError: No module named tests.checked_vector_test\n\npyrsistent/_checked_types.py:148: ImportError\n================== 4 failed, 526 passed, 1 pytest-warnings, 1 error in 11.64 seconds ==================\n```\n\nDoesn't happen with python3\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/79", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/79/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/79/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/79", "id": 130366276, "node_id": "MDU6SXNzdWUxMzAzNjYyNzY=", "number": 79, "title": "test failure with python3 in version 0.11.11", "user": {"login": "jlec", "id": 79732, "node_id": "MDQ6VXNlcjc5NzMy", "avatar_url": "https://avatars0.githubusercontent.com/u/79732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlec", "html_url": "https://github.com/jlec", "followers_url": "https://api.github.com/users/jlec/followers", "following_url": "https://api.github.com/users/jlec/following{/other_user}", "gists_url": "https://api.github.com/users/jlec/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlec/subscriptions", "organizations_url": "https://api.github.com/users/jlec/orgs", "repos_url": "https://api.github.com/users/jlec/repos", "events_url": "https://api.github.com/users/jlec/events{/privacy}", "received_events_url": "https://api.github.com/users/jlec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-02-01T13:47:48Z", "updated_at": "2016-02-06T13:43:20Z", "closed_at": "2016-02-06T13:43:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\n______________________________ test_type_check_with_string_specification _______________________________\n\n    def test_type_check_with_string_specification():\n        content = [1.5, 2.0]\n        vec = FloatVector(content)\n        sett = FloatSet(content)\n>       map = VectorToSetMap({vec: sett})\n\ntests/checked_map_test.py:138:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npyrsistent/_checked_types.py:410: in __new__\n    evolver.set(k, v)\npyrsistent/_checked_types.py:458: in set\n    _check_types([key], self._destination_class._checked_key_types, self._destination_class, CheckedKeyTypeError)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nit = [FloatVector([1.5, 2.0])], expected_types = ('tests.checked_map_test.FloatVector',)\nsource_class = <class 'checked_map_test.VectorToSetMap'>\nexception_type = <class 'pyrsistent._checked_types.CheckedKeyTypeError'>\n\n    def _check_types(it, expected_types, source_class, exception_type=CheckedValueTypeError):\n        if expected_types:\n            for e in it:\n                if not any(isinstance(e, get_type(t)) for t in expected_types):\n                    actual_type = type(e)\n                    msg = \"Type {source_class} can only be used with {expected_types}, not {actual_type}\".format(\n                        source_class=source_class.__name__,\n                        expected_types=tuple(get_type(et).__name__ for et in expected_types),\n                        actual_type=actual_type.__name__)\n>                   raise exception_type(source_class, expected_types, actual_type, e, msg)\nE                   pyrsistent._checked_types.CheckedKeyTypeError: Type VectorToSetMap can only be used with ('FloatVector',), not FloatVector\n\npyrsistent/_checked_types.py:172: CheckedKeyTypeError\n_________________________________ test_check_with_string_specification _________________________________\n\n    def test_check_with_string_specification():\n        naturals_list = [Naturals([1, 2]), Naturals([3, 4])]\n>       nv = NaturalsVectorStr(naturals_list)\n\ntests/checked_vector_test.py:192:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npyrsistent/_checked_types.py:222: in __new__\n    return CheckedPVector.Evolver(cls, python_pvector()).extend(initial).persistent()\npyrsistent/_checked_types.py:265: in extend\n    self._check(it)\npyrsistent/_checked_types.py:252: in _check\n    _check_types(it, self._destination_class._checked_types, self._destination_class)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nit = [Naturals([1, 2]), Naturals([3, 4])], expected_types = ('tests.checked_vector_test.Naturals',)\nsource_class = <class 'checked_vector_test.NaturalsVectorStr'>\nexception_type = <class 'pyrsistent._checked_types.CheckedValueTypeError'>\n\n    def _check_types(it, expected_types, source_class, exception_type=CheckedValueTypeError):\n        if expected_types:\n            for e in it:\n                if not any(isinstance(e, get_type(t)) for t in expected_types):\n                    actual_type = type(e)\n                    msg = \"Type {source_class} can only be used with {expected_types}, not {actual_type}\".format(\n                        source_class=source_class.__name__,\n                        expected_types=tuple(get_type(et).__name__ for et in expected_types),\n                        actual_type=actual_type.__name__)\n>                   raise exception_type(source_class, expected_types, actual_type, e, msg)\nE                   pyrsistent._checked_types.CheckedValueTypeError: Type NaturalsVectorStr can only be used with ('Naturals',), not Naturals\n\npyrsistent/_checked_types.py:172: CheckedValueTypeError\n____________________________________ test_string_as_type_specifier _____________________________________\n\n    def test_string_as_type_specifier():\n>       l = LinkedList(value=[1, 2], next=LinkedList(value=[3, 4], next=None))\n\ntests/class_test.py:249:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npyrsistent/_pclass.py:53: in __new__\n    _check_and_set_attr(cls, field, name, value, result, invariant_errors)\npyrsistent/_pclass.py:28: in _check_and_set_attr\n    check_type(cls, field, name, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndestination_cls = <class 'class_test.LinkedList'>\nfield = <pyrsistent._field_common._PField object at 0x7fa1be4d81a8>, name = 'next'\nvalue = LinkedList(value=Numbers([3, 4]), next=None)\n\n    def check_type(destination_cls, field, name, value):\n        if field.type and not any(isinstance(value, get_type(t)) for t in field.type):\n            actual_type = type(value)\n            message = \"Invalid type for field {0}.{1}, was {2}\".format(destination_cls.__name__, name, actual_type.__name__)\n>           raise PTypeError(destination_cls, name, field.type, actual_type, message)\nE           pyrsistent._field_common.PTypeError: Invalid type for field LinkedList.next, was LinkedList\n\npyrsistent/_field_common.py:36: PTypeError\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/78", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/78/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/78/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/78", "id": 129073662, "node_id": "MDU6SXNzdWUxMjkwNzM2NjI=", "number": 78, "title": "Please ship tests to pypi", "user": {"login": "jlec", "id": 79732, "node_id": "MDQ6VXNlcjc5NzMy", "avatar_url": "https://avatars0.githubusercontent.com/u/79732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlec", "html_url": "https://github.com/jlec", "followers_url": "https://api.github.com/users/jlec/followers", "following_url": "https://api.github.com/users/jlec/following{/other_user}", "gists_url": "https://api.github.com/users/jlec/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlec/subscriptions", "organizations_url": "https://api.github.com/users/jlec/orgs", "repos_url": "https://api.github.com/users/jlec/repos", "events_url": "https://api.github.com/users/jlec/events{/privacy}", "received_events_url": "https://api.github.com/users/jlec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-01-27T08:49:55Z", "updated_at": "2016-02-01T21:47:11Z", "closed_at": "2016-01-31T14:51:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Downstream package maintainer love to test during packaging. Please ship the tests to pypi.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/77", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/77/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/77/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/77", "id": 126218330, "node_id": "MDU6SXNzdWUxMjYyMTgzMzA=", "number": 77, "title": "New callable initial-value-for-fields feature seems problematic", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-01-12T16:33:01Z", "updated_at": "2016-01-13T12:51:22Z", "closed_at": "2016-01-13T12:51:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "1. Not backwards compatible: what if someone already had callable as an initial value for a field?\n2. (Reading the code the logic seems wrong, but maybe I just misread).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/75", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/75/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/75/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/75", "id": 121976060, "node_id": "MDU6SXNzdWUxMjE5NzYwNjA=", "number": 75, "title": "Allow invariant message to be calculated lazily.", "user": {"login": "tomprince", "id": 283816, "node_id": "MDQ6VXNlcjI4MzgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/283816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomprince", "html_url": "https://github.com/tomprince", "followers_url": "https://api.github.com/users/tomprince/followers", "following_url": "https://api.github.com/users/tomprince/following{/other_user}", "gists_url": "https://api.github.com/users/tomprince/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomprince/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomprince/subscriptions", "organizations_url": "https://api.github.com/users/tomprince/orgs", "repos_url": "https://api.github.com/users/tomprince/repos", "events_url": "https://api.github.com/users/tomprince/events{/privacy}", "received_events_url": "https://api.github.com/users/tomprince/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-14T05:18:28Z", "updated_at": "2015-12-27T20:15:23Z", "closed_at": "2015-12-27T20:15:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation suggests writing invariant like `lambda value: (condition \"message\")`. However, if the message is expensive to calculate (for example, if includes the representation of `value`) then it makes sense to only calculate it if the invariant fails. That currently requires writing code like\n\n``` python\nif condition:\n    return (False, \"message {!r}\".format(value))\nelse:\n    return (True, \"\")\n```\n\nIt would be convenient if this could be written something like\n\n``` python\nlambda value: (condition: lambda: \"message {!r}\".format(value))\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/74", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/74/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/74/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/74", "id": 121176124, "node_id": "MDU6SXNzdWUxMjExNzYxMjQ=", "number": 74, "title": "`PClass` evevolver should use attribute syntax.", "user": {"login": "tomprince", "id": 283816, "node_id": "MDQ6VXNlcjI4MzgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/283816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomprince", "html_url": "https://github.com/tomprince", "followers_url": "https://api.github.com/users/tomprince/followers", "following_url": "https://api.github.com/users/tomprince/following{/other_user}", "gists_url": "https://api.github.com/users/tomprince/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomprince/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomprince/subscriptions", "organizations_url": "https://api.github.com/users/tomprince/orgs", "repos_url": "https://api.github.com/users/tomprince/repos", "events_url": "https://api.github.com/users/tomprince/events{/privacy}", "received_events_url": "https://api.github.com/users/tomprince/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-09T06:59:31Z", "updated_at": "2015-12-27T20:15:23Z", "closed_at": "2015-12-27T20:15:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/73", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/73/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/73/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/73", "id": 121175682, "node_id": "MDU6SXNzdWUxMjExNzU2ODI=", "number": 73, "title": "`transform` should only check invariants after all the transformations have been applied.", "user": {"login": "tomprince", "id": 283816, "node_id": "MDQ6VXNlcjI4MzgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/283816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomprince", "html_url": "https://github.com/tomprince", "followers_url": "https://api.github.com/users/tomprince/followers", "following_url": "https://api.github.com/users/tomprince/following{/other_user}", "gists_url": "https://api.github.com/users/tomprince/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomprince/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomprince/subscriptions", "organizations_url": "https://api.github.com/users/tomprince/orgs", "repos_url": "https://api.github.com/users/tomprince/repos", "events_url": "https://api.github.com/users/tomprince/events{/privacy}", "received_events_url": "https://api.github.com/users/tomprince/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-12-09T06:54:43Z", "updated_at": "2016-03-17T18:56:04Z", "closed_at": "2016-03-17T18:56:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/69", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/69/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/69/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/69", "id": 114015774, "node_id": "MDU6SXNzdWUxMTQwMTU3NzQ=", "number": 69, "title": "Cannot pformat sets of PMaps", "user": {"login": "jml", "id": 125674, "node_id": "MDQ6VXNlcjEyNTY3NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/125674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jml", "html_url": "https://github.com/jml", "followers_url": "https://api.github.com/users/jml/followers", "following_url": "https://api.github.com/users/jml/following{/other_user}", "gists_url": "https://api.github.com/users/jml/gists{/gist_id}", "starred_url": "https://api.github.com/users/jml/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jml/subscriptions", "organizations_url": "https://api.github.com/users/jml/orgs", "repos_url": "https://api.github.com/users/jml/repos", "events_url": "https://api.github.com/users/jml/events{/privacy}", "received_events_url": "https://api.github.com/users/jml/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 44259076, "node_id": "MDU6TGFiZWw0NDI1OTA3Ng==", "url": "https://api.github.com/repos/tobgu/pyrsistent/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-29T09:57:47Z", "updated_at": "2018-06-15T10:29:44Z", "closed_at": "2018-06-15T10:29:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "``` python\nfrom pyrsistent import pmap\nfrom pprint import pprint\n\npprint({pmap({'foo': 2}), pmap({'bar': 3})})\n```\n\nGives this traceback:\n\n```\nset([Traceback (most recent call last):\n  File \"demo-pyrsistent-bug.py\", line 4, in <module>\n    pprint({pmap({'foo': 2}), pmap({'bar': 3})})\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py\", line 59, in pprint\n    printer.pprint(object)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py\", line 117, in pprint\n    self._format(object, self._stream, 0, 0, {}, 0)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py\", line 199, in _format\n    object = _sorted(object)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pprint.py\", line 82, in _sorted\n    return sorted(iterable)\n  File \"/Users/jml/.virtualenvs/flocker/lib/python2.7/site-packages/pyrsistent/_pmap.py\", line 132, in __lt__\n    raise TypeError('PMaps are not orderable')\nTypeError: PMaps are not orderable\n```\n\nThis is particularly a problem because many test suites call `pformat` on the inputs to assertions, which means that genuine test failures are more difficult to debug.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/66", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/66/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/66/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/66", "id": 111659678, "node_id": "MDU6SXNzdWUxMTE2NTk2Nzg=", "number": 66, "title": "Failing to pip install", "user": {"login": "foolswood", "id": 306638, "node_id": "MDQ6VXNlcjMwNjYzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/306638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/foolswood", "html_url": "https://github.com/foolswood", "followers_url": "https://api.github.com/users/foolswood/followers", "following_url": "https://api.github.com/users/foolswood/following{/other_user}", "gists_url": "https://api.github.com/users/foolswood/gists{/gist_id}", "starred_url": "https://api.github.com/users/foolswood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/foolswood/subscriptions", "organizations_url": "https://api.github.com/users/foolswood/orgs", "repos_url": "https://api.github.com/users/foolswood/repos", "events_url": "https://api.github.com/users/foolswood/events{/privacy}", "received_events_url": "https://api.github.com/users/foolswood/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-10-15T16:49:47Z", "updated_at": "2015-10-23T15:00:01Z", "closed_at": "2015-10-23T15:00:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ran into this trying to install pyrsistent, eventually got it to go by modifying the setup.py not to load the README, which isn't a real fix. Maybe loading it in utf-8 mode would be a better thing. Partly wondered if anyone else had seen this. I can implement the loading thing if that seems reasonable.\n\n> $ pip install pyrsistent\n> Collecting pyrsistent\n>   Downloading pyrsistent-0.11.7.tar.gz (62kB)\n>     100% |################################| 65kB 2.4MB/s\n>     Complete output from command python setup.py egg_info:\n>     Traceback (most recent call last):\n>       File \"<string>\", line 20, in <module>\n>       File \"/tmp/pip-build-7etocp9s/pyrsistent/setup.py\", line 13, in <module>\n>         readme = f.read()\n>       File \"/home/me/venv/lib64/python3.4/encodings/ascii.py\", line 26, in decode\n>         return codecs.ascii_decode(input, self.errors)[0]\n>     UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 21946: ordinal not in range(128)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/64", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/64/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/64/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/64", "id": 109560290, "node_id": "MDU6SXNzdWUxMDk1NjAyOTA=", "number": 64, "title": "Bad argument handling in PVector evolver", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-02T19:47:25Z", "updated_at": "2015-10-03T07:12:39Z", "closed_at": "2015-10-03T07:12:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Off by 1 bug?\n\n```\n>>> p = pvector([1, 2, 3])\n>>> del p.evolver()[3]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nSystemError: ../Objects/listobject.c:290: bad argument to internal function\n>>> del p.evolver()[4]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: Index out of range: 4\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/59", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/59/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/59/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/59", "id": 107957327, "node_id": "MDU6SXNzdWUxMDc5NTczMjc=", "number": 59, "title": "Can't create weakrefs to pyrsistent objects", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-09-23T16:27:03Z", "updated_at": "2015-09-28T20:07:53Z", "closed_at": "2015-09-28T19:52:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I wanted to use weakref-based memoization for a function that takes PRecord instances but looks like none of the pyrsistent types support weakrefs.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/58", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/58/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/58/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/58", "id": 107857966, "node_id": "MDU6SXNzdWUxMDc4NTc5NjY=", "number": 58, "title": "InvariantException should have a `__str__`", "user": {"login": "tomprince", "id": 283816, "node_id": "MDQ6VXNlcjI4MzgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/283816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomprince", "html_url": "https://github.com/tomprince", "followers_url": "https://api.github.com/users/tomprince/followers", "following_url": "https://api.github.com/users/tomprince/following{/other_user}", "gists_url": "https://api.github.com/users/tomprince/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomprince/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomprince/subscriptions", "organizations_url": "https://api.github.com/users/tomprince/orgs", "repos_url": "https://api.github.com/users/tomprince/repos", "events_url": "https://api.github.com/users/tomprince/events{/privacy}", "received_events_url": "https://api.github.com/users/tomprince/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-09-23T06:23:18Z", "updated_at": "2015-09-28T20:08:01Z", "closed_at": "2015-09-28T17:46:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "If some code unexpectedly raises an `InvariantException` and the exception is logged, or propagates to the top-level, only the bare description is printed, which makes it hard to see what the actual error is.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/56", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/56/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/56/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/56", "id": 106247014, "node_id": "MDU6SXNzdWUxMDYyNDcwMTQ=", "number": 56, "title": "p*_field prevents pickle from working on a PClass", "user": {"login": "radix", "id": 227068, "node_id": "MDQ6VXNlcjIyNzA2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/227068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radix", "html_url": "https://github.com/radix", "followers_url": "https://api.github.com/users/radix/followers", "following_url": "https://api.github.com/users/radix/following{/other_user}", "gists_url": "https://api.github.com/users/radix/gists{/gist_id}", "starred_url": "https://api.github.com/users/radix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radix/subscriptions", "organizations_url": "https://api.github.com/users/radix/orgs", "repos_url": "https://api.github.com/users/radix/repos", "events_url": "https://api.github.com/users/radix/events{/privacy}", "received_events_url": "https://api.github.com/users/radix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-09-13T22:56:48Z", "updated_at": "2015-09-15T04:57:13Z", "closed_at": "2015-09-15T04:57:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would never use pickle in production, but as I was trying to write some strawman example storage code for an example app, I discovered that while I could pickle basic PClasses, I can't pickle any that use pmap_field or pvector_field (and probably others that have similar implementations)\n\ne.g.:\n\n```\n>>> class Foo(PClass):\n...  v = pvector_field(int)\n...\n>>> Foo()\nFoo(v=IntPVector([]))\n>>> dumps(Foo())\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\ncPickle.PicklingError: Can't pickle <class 'pyrsistent._field_common.IntPVector'>: attribute lookup pyrsistent._field_common.IntPVector failed\n```\n\nThe same happens for `pmap_field`.\n\nI guess this is because of the way that those functions generate classes at runtime?\n\n@tobgu if you can let me know what needs done to fix this I can try to submit a PR.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/52", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/52/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/52/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/52", "id": 102870466, "node_id": "MDU6SXNzdWUxMDI4NzA0NjY=", "number": 52, "title": "Sometimes a pyrsistent-using program crashes with SIGSEGV", "user": {"login": "exarkun", "id": 254565, "node_id": "MDQ6VXNlcjI1NDU2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/254565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exarkun", "html_url": "https://github.com/exarkun", "followers_url": "https://api.github.com/users/exarkun/followers", "following_url": "https://api.github.com/users/exarkun/following{/other_user}", "gists_url": "https://api.github.com/users/exarkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/exarkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exarkun/subscriptions", "organizations_url": "https://api.github.com/users/exarkun/orgs", "repos_url": "https://api.github.com/users/exarkun/repos", "events_url": "https://api.github.com/users/exarkun/events{/privacy}", "received_events_url": "https://api.github.com/users/exarkun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2015-08-24T19:16:11Z", "updated_at": "2015-10-03T09:44:40Z", "closed_at": "2015-10-01T15:52:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We started noticing segfaults after introducing some hypothesis-based testing of some of our pyrsistent-using code.  Here's a specific failure we ran into, https://clusterhq.atlassian.net/browse/FLOC-2913\n\nI haven't constructed a minimal reproducing example yet (as I understand it, hypothesis is generating some random data and initializing a bunch of pyrsistent structures with it and **some** random data is causing the problem ... but I can't see which random data).\n\nMaybe some hypothesis-based tests in pyrsistent would be a good way to narrow down the problem.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/51", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/51/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/51/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/51", "id": 102804949, "node_id": "MDU6SXNzdWUxMDI4MDQ5NDk=", "number": 51, "title": "PClass.set doesn't work with string-based usage", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-24T14:19:24Z", "updated_at": "2015-08-24T20:13:31Z", "closed_at": "2015-08-24T19:37:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\n$ cat reproduce.py\nfrom uuid import uuid4, UUID\nfrom pyrsistent import PClass, field, optional\n\nclass DatasetState(PClass):\n    dataset_id = field(type=UUID, mandatory=True)\n    primary = field(type=optional(UUID), mandatory=True)\n    maximum_size = field(type=optional(int), mandatory=True)\n    path = field(type=optional(str), mandatory=True)\n\nd = DatasetState(dataset_id=uuid4(), primary=None, maximum_size=3,\n                 path=\"xxxx\")\nprint d\nd_with_kwargs = d.set(path=None)\nprint d_with_kwargs\n\n# This blows up though:\nd_with_string = d.set(\"path\", None)\n```\n\nAnd when I run it:\n\n```\n$ python reproduce.py \nDatasetState(path='xxxx', maximum_size=3, primary=None, dataset_id=UUID('beffffcc-ebc2-4047-8957-97db23c21c6b'))\nDatasetState(path=None, maximum_size=3, primary=None, dataset_id=UUID('beffffcc-ebc2-4047-8957-97db23c21c6b'))\nTraceback (most recent call last):\n  File \"reproduce.py\", line 19, in <module>\n    d_with_string = d.set(\"path\", None)\n  File \"/home/itamarst/ClusterHQ/flocker/.tox/py27/local/lib/python2.7/site-packages/pyrsistent/_pclass.py\", line 79, in set\n    return self.__class__(**{args[0]: args[1]})\n  File \"/home/itamarst/ClusterHQ/flocker/.tox/py27/local/lib/python2.7/site-packages/pyrsistent/_pclass.py\", line 48, in __new__\n    raise InvariantException(tuple(invariant_errors), tuple(missing_fields), 'Field invariant failed')\npyrsistent._checked_types.InvariantException: Field invariant failed\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/50", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/50/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/50/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/50", "id": 101425680, "node_id": "MDU6SXNzdWUxMDE0MjU2ODA=", "number": 50, "title": "Multiple invariants for a single field", "user": {"login": "jml", "id": 125674, "node_id": "MDQ6VXNlcjEyNTY3NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/125674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jml", "html_url": "https://github.com/jml", "followers_url": "https://api.github.com/users/jml/followers", "following_url": "https://api.github.com/users/jml/following{/other_user}", "gists_url": "https://api.github.com/users/jml/gists{/gist_id}", "starred_url": "https://api.github.com/users/jml/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jml/subscriptions", "organizations_url": "https://api.github.com/users/jml/orgs", "repos_url": "https://api.github.com/users/jml/repos", "events_url": "https://api.github.com/users/jml/events{/privacy}", "received_events_url": "https://api.github.com/users/jml/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-17T13:55:13Z", "updated_at": "2015-08-24T20:17:00Z", "closed_at": "2015-08-24T20:17:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would like to be able to specify more than one predicate as an invariant for a field, and have different messages for each predicate. \n\nSay I want a field for an integer that is both positive and even. I would currently have to write an invariant like this:\n\n``` python\nclass Foo(PRecord):\n  even_natural = field(type=int, invariant=lambda x: (x > 0 and x % 2 == 0, 'x negative or odd'))\n```\n\nI would rather write it like this:\n\n```\nclass Foo(PRecord):\n  even_natural = field(type=int, invariants=lambda x: [(x > 0, 'x negative'), (x % 2 == 0: 'x odd')])\n```\n\nI'm not 100% convinced that this is the right syntax\u2014perhaps a full suite of boolean combinators is necessary\u2014but I'd like something like this.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/48", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/48/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/48/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/48", "id": 101008242, "node_id": "MDU6SXNzdWUxMDEwMDgyNDI=", "number": 48, "title": "Define recursive data types", "user": {"login": "jml", "id": 125674, "node_id": "MDQ6VXNlcjEyNTY3NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/125674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jml", "html_url": "https://github.com/jml", "followers_url": "https://api.github.com/users/jml/followers", "following_url": "https://api.github.com/users/jml/following{/other_user}", "gists_url": "https://api.github.com/users/jml/gists{/gist_id}", "starred_url": "https://api.github.com/users/jml/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jml/subscriptions", "organizations_url": "https://api.github.com/users/jml/orgs", "repos_url": "https://api.github.com/users/jml/repos", "events_url": "https://api.github.com/users/jml/events{/privacy}", "received_events_url": "https://api.github.com/users/jml/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-08-14T13:15:23Z", "updated_at": "2017-09-02T08:29:10Z", "closed_at": "2015-08-24T20:17:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a bit of a wishlist feature.\n\nI'd like to be able to define a data structure that looks like this:\n\n``` python\nclass Leaf(PClass):\n  foo = field(type=unicode)\n\nclass Tree(PClass):\n  children = pvector_field((Tree, Leaf))\n```\n\nHowever, Python will object and say that `Tree` is not defined. Is there a way to specify the field's type after the class construction?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/46", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/46/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/46/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/46", "id": 99743662, "node_id": "MDU6SXNzdWU5OTc0MzY2Mg==", "number": 46, "title": "pyrsistent.readthedocs.org has an empty \"API\" section", "user": {"login": "radix", "id": 227068, "node_id": "MDQ6VXNlcjIyNzA2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/227068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radix", "html_url": "https://github.com/radix", "followers_url": "https://api.github.com/users/radix/followers", "following_url": "https://api.github.com/users/radix/following{/other_user}", "gists_url": "https://api.github.com/users/radix/gists{/gist_id}", "starred_url": "https://api.github.com/users/radix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radix/subscriptions", "organizations_url": "https://api.github.com/users/radix/orgs", "repos_url": "https://api.github.com/users/radix/repos", "events_url": "https://api.github.com/users/radix/events{/privacy}", "received_events_url": "https://api.github.com/users/radix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-07T22:53:43Z", "updated_at": "2015-08-10T18:08:51Z", "closed_at": "2015-08-10T18:04:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "At least it would be great to just run `sphinx-apidoc` to automatically build API docs from the docstrings so we could have an online reference.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/45", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/45/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/45/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/45", "id": 98701625, "node_id": "MDU6SXNzdWU5ODcwMTYyNQ==", "number": 45, "title": "Ordering for PClass instances", "user": {"login": "jml", "id": 125674, "node_id": "MDQ6VXNlcjEyNTY3NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/125674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jml", "html_url": "https://github.com/jml", "followers_url": "https://api.github.com/users/jml/followers", "following_url": "https://api.github.com/users/jml/following{/other_user}", "gists_url": "https://api.github.com/users/jml/gists{/gist_id}", "starred_url": "https://api.github.com/users/jml/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jml/subscriptions", "organizations_url": "https://api.github.com/users/jml/orgs", "repos_url": "https://api.github.com/users/jml/repos", "events_url": "https://api.github.com/users/jml/events{/privacy}", "received_events_url": "https://api.github.com/users/jml/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-08-03T09:03:50Z", "updated_at": "2018-06-12T10:47:31Z", "closed_at": "2018-06-12T10:47:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It'd be good if `PClass` instances were either automatically ordered or could have an ordering imposed.\n## Problem\n\nIn particular, given:\n\n``` python\nclass Foo(PClass):\n  x = field()\n```\n\nThis [hypothesis](https://hypothesis.rtfd.org) test reliably fails:\n\n``` python\n    @given(integers(), integers())\n    def test_pyrsistent_class_ordering(self, a, b):\n        [a, b] = sorted([a, b])\n        foo_a = Foo(x=a)\n        foo_b = Foo(x=b)\n        self.assertTrue(foo_a <= foo_b, '%s <= %s' % (foo_a, foo_b))\n```\n\nI can reproduce this in an interpreter:\n\n```\nIn [1]: from pyrsistent import PClass, field\n\nIn [2]: class Foo(PClass):\n\n        x = field()\n   ...:\n\nIn [3]: a = Foo(x=0)\n\nIn [4]: b = Foo(x=0)\n\nIn [5]: a <= b\nOut[5]: True\n\nIn [6]: a <= b\nOut[6]: True\n\nIn [7]: b <= a\nOut[7]: False\n```\n## Proposed solutions\n### Natural ordering\n\nFor `PClass` objects with multiple fields, there is a \"natural\" ordering, where objects in the `PClass` are ordered according to their components, with the first-defined field being the most significant component for ordering. I think this could make a sensible default ordering for `PClass`es. This is similar to what `attrs` does. e.g. objects of\n\n```\nclass Qux(PClass):\n  x = field()\n  y = field()\n```\n\nWould be ordered as if they were `(x, y)` tuples.\n### Explicit syntax\n\nAlternatively, there could be an explicit syntax for specifying how a `PClass` was ordered. e.g.\n\n```\n@ordered_by('z', 'x')\nclass Bar(PClass):\n  x = field()\n  y = field()\n  z = field()\n```\n\nSo that ordering on `Bar` was equivalent to ordering on `(Bar.z, Bar.x)`.\n\nIt has the advantage (& disadvantage) of being explicit, and cleanly separated from the rest of pyrsistent. I'm tinkering away at such a decorator now, but think that _some_ facility really ought to be provided by the `pyrsistent` library.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/44", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/44/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/44/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/44", "id": 96916536, "node_id": "MDU6SXNzdWU5NjkxNjUzNg==", "number": 44, "title": "Any ideas for something like \"lens\" for Python?", "user": {"login": "radix", "id": 227068, "node_id": "MDQ6VXNlcjIyNzA2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/227068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radix", "html_url": "https://github.com/radix", "followers_url": "https://api.github.com/users/radix/followers", "following_url": "https://api.github.com/users/radix/following{/other_user}", "gists_url": "https://api.github.com/users/radix/gists{/gist_id}", "starred_url": "https://api.github.com/users/radix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radix/subscriptions", "organizations_url": "https://api.github.com/users/radix/orgs", "repos_url": "https://api.github.com/users/radix/repos", "events_url": "https://api.github.com/users/radix/events{/privacy}", "received_events_url": "https://api.github.com/users/radix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-07-23T22:18:04Z", "updated_at": "2015-08-25T16:59:48Z", "closed_at": "2015-08-25T16:59:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm creating this ticket mostly as a point of discussion.\n\nHave you heard of the \"lens\" idea in Haskell? There are a few libraries that implement it, most popularly lens-family and lens. It's a pretty rich set of combinators for dealing with data structures. The most obvious thing it makes convenient is updating deeply nested immutable structures in a way that \"looks like\" imperative code. Basically, a generalized version of the (now gone) `set_in` method that used to be in pyrsistent, but can also representing getting.\n\nFor example, in Haskell, we have lenses called `_1` and `_2` which represents the respective items in a tuple.\n\n``` haskell\nghci> set (_2._1) 42 (\"hello\",(\"world\",\"!!!\"))\n(\"hello\",(42,\"!!!\"))\n```\n\nThe cool thing about lenses is that the `.` in between the `_2` and `_1` is just the normal function composition operator -- lenses are actually just functions. `set` takes a lens, a value, and the structure to update, and returns a new structure.\n\nI think it would be pretty handy to have something like this for Python. I think even if you don't represent them as functions-that-compose it can be pretty handy to have something like this:\n\n``` python\n_1 = index(1)\n_2 = index(2)\nset([_2, _1], 42, (\"hello\", (\"world\", \"!!!\")) == (\"hello\", (42, \"!!!\"))\n```\n\nAnd of course we can imagine having more lens-constructors like `attr` and `key`, and also a function `get` instead of `set`.\n\nI think this idea is probably useful enough to be something separate from pyrsistent (for example I often want it even when updating immutable objects that aren't created from pyrsistent) -- I just figured this would be a pretty good forum to bring it up in since it would be particularly useful for pyrsistent.\n\nOne design question would be whether there could be some way these \"lens constructors\" could be polymorphic to different data types. like, would we need separate lens-constructors for tuple-indexes and pvector-indexes? what about pmaps vs dicts? They would all need different implementations for setting (though they would be the same for getting). Maybe it'd be better to just keep these different, so the built-in lens library could have \"index\" for tuples and lists and \"key\" for dictionaries (which is implemented by copying the data structure), pyrsistent could provide \"pindex\" for pvectors and \"pkey\" for pmaps, etc.\n\nAs a final note, it's probably a bad idea to call these things \"lenses\" if they don't actually conform to the design of lenses in Haskell -- there's a lot of very precisely defined terminology in the computer-science community and I'd hate to make something that's blatantly different with the same name. I'm just trying to find a nicer way to update deeply nested structures in Python, not reproduce lens faithfully.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/42", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/42/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/42/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/42", "id": 92810967, "node_id": "MDU6SXNzdWU5MjgxMDk2Nw==", "number": 42, "title": "delete method for vectors", "user": {"login": "radix", "id": 227068, "node_id": "MDQ6VXNlcjIyNzA2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/227068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radix", "html_url": "https://github.com/radix", "followers_url": "https://api.github.com/users/radix/followers", "following_url": "https://api.github.com/users/radix/following{/other_user}", "gists_url": "https://api.github.com/users/radix/gists{/gist_id}", "starred_url": "https://api.github.com/users/radix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radix/subscriptions", "organizations_url": "https://api.github.com/users/radix/orgs", "repos_url": "https://api.github.com/users/radix/repos", "events_url": "https://api.github.com/users/radix/events{/privacy}", "received_events_url": "https://api.github.com/users/radix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-07-03T07:19:28Z", "updated_at": "2015-10-01T19:23:48Z", "closed_at": "2015-10-01T19:23:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I just realized that there's no way to delete items by index (or slice) in `PVector`. I realize that this wouldn't be super efficient, but it seems like a surprising hole in the API. Is it intentionally left out of the API to discourage it for performance reasons? If so it might be worth mentioning that in the docs somewhere.\n\nOtherwise I'd be happy to implement a `delete` method for the Python implementation. A C one might be a bit much for me though :) I suppose evolvers should also support `__delitem__`.\n\n(I just realized using `remove` as the name of this method would be confusing because `list.remove` removes by value, not index).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/41", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/41/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/41/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/41", "id": 89725781, "node_id": "MDU6SXNzdWU4OTcyNTc4MQ==", "number": 41, "title": "Automatically disable C extensions on PyPy", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-06-20T06:19:29Z", "updated_at": "2015-06-20T08:19:28Z", "closed_at": "2015-06-20T08:19:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using a CPython extension on PyPy will slow this module down.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/40", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/40/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/40/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/40", "id": 87397631, "node_id": "MDU6SXNzdWU4NzM5NzYzMQ==", "number": 40, "title": "Split out pyrsistent C extension?", "user": {"login": "radix", "id": 227068, "node_id": "MDQ6VXNlcjIyNzA2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/227068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radix", "html_url": "https://github.com/radix", "followers_url": "https://api.github.com/users/radix/followers", "following_url": "https://api.github.com/users/radix/following{/other_user}", "gists_url": "https://api.github.com/users/radix/gists{/gist_id}", "starred_url": "https://api.github.com/users/radix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radix/subscriptions", "organizations_url": "https://api.github.com/users/radix/orgs", "repos_url": "https://api.github.com/users/radix/repos", "events_url": "https://api.github.com/users/radix/events{/privacy}", "received_events_url": "https://api.github.com/users/radix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-06-11T16:09:26Z", "updated_at": "2015-06-13T17:23:52Z", "closed_at": "2015-06-13T16:54:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I don't really trust the C extension -- I'm seeing segfaults that go away when I disable it. I'm not 100% certain that it's from Pyrsistent's C extension (it's a complex app and there are some other extensions loaded, like Cryptography's), but in general I want to avoid C extensions wherever possible. And if I care about speed, I can always just use PyPy, which optimizes pyrsistent quite a bit.\n\nI'd really like to be able to install pyrsistent without the C extension. Could the C extension perhaps be split out into a separate library on pypi?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/39", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/39/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/39/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/39", "id": 87107656, "node_id": "MDU6SXNzdWU4NzEwNzY1Ng==", "number": 39, "title": "PMap and _PBag have ID-based comparison semantics", "user": {"login": "radix", "id": 227068, "node_id": "MDQ6VXNlcjIyNzA2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/227068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radix", "html_url": "https://github.com/radix", "followers_url": "https://api.github.com/users/radix/followers", "following_url": "https://api.github.com/users/radix/following{/other_user}", "gists_url": "https://api.github.com/users/radix/gists{/gist_id}", "starred_url": "https://api.github.com/users/radix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radix/subscriptions", "organizations_url": "https://api.github.com/users/radix/orgs", "repos_url": "https://api.github.com/users/radix/repos", "events_url": "https://api.github.com/users/radix/events{/privacy}", "received_events_url": "https://api.github.com/users/radix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-06-10T21:07:12Z", "updated_at": "2015-07-11T17:46:55Z", "closed_at": "2015-07-11T16:42:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "PMap does not implement the comparison methods, so ordering them gives non-deterministic results. Other objects in Pyrsistent like PSet and PVector do support comparison, but PMap and _PBag don't.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/38", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/38/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/38/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/38", "id": 85308462, "node_id": "MDU6SXNzdWU4NTMwODQ2Mg==", "number": 38, "title": "Nested record deserialization in collection fields ?", "user": {"login": "rubber-duck", "id": 424307, "node_id": "MDQ6VXNlcjQyNDMwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/424307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rubber-duck", "html_url": "https://github.com/rubber-duck", "followers_url": "https://api.github.com/users/rubber-duck/followers", "following_url": "https://api.github.com/users/rubber-duck/following{/other_user}", "gists_url": "https://api.github.com/users/rubber-duck/gists{/gist_id}", "starred_url": "https://api.github.com/users/rubber-duck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rubber-duck/subscriptions", "organizations_url": "https://api.github.com/users/rubber-duck/orgs", "repos_url": "https://api.github.com/users/rubber-duck/repos", "events_url": "https://api.github.com/users/rubber-duck/events{/privacy}", "received_events_url": "https://api.github.com/users/rubber-duck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-04T22:37:51Z", "updated_at": "2015-06-07T16:32:26Z", "closed_at": "2015-06-07T16:20:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\nclass Foo(PRecord):\n    foo = field(type=str)\n\nclass Bar(PRecord):\n    bar = pvector_field(Foo)\n\nBar.create(Bar(bar=v(Foo(foo=\"foo\"))).serialize())\n```\n\nIt seems like pvector_field can't figure out that it should try to desieralize Foo from a dict so I guess I have to implement a custom factory ? Is this just a missing implementation or me missing something obvious.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/37", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/37/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/37/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/37", "id": 80889242, "node_id": "MDU6SXNzdWU4MDg4OTI0Mg==", "number": 37, "title": "Why does PMap.items() return a list, not a PVector?", "user": {"login": "cdonat", "id": 2890589, "node_id": "MDQ6VXNlcjI4OTA1ODk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2890589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdonat", "html_url": "https://github.com/cdonat", "followers_url": "https://api.github.com/users/cdonat/followers", "following_url": "https://api.github.com/users/cdonat/following{/other_user}", "gists_url": "https://api.github.com/users/cdonat/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdonat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdonat/subscriptions", "organizations_url": "https://api.github.com/users/cdonat/orgs", "repos_url": "https://api.github.com/users/cdonat/repos", "events_url": "https://api.github.com/users/cdonat/events{/privacy}", "received_events_url": "https://api.github.com/users/cdonat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-26T09:55:20Z", "updated_at": "2015-07-11T17:48:38Z", "closed_at": "2015-07-11T16:28:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Actually this is just a question, not really an issue.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/35", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/35/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/35/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/35", "id": 70618306, "node_id": "MDU6SXNzdWU3MDYxODMwNg==", "number": 35, "title": "+ operator for PMap", "user": {"login": "boxed", "id": 332428, "node_id": "MDQ6VXNlcjMzMjQyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/332428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boxed", "html_url": "https://github.com/boxed", "followers_url": "https://api.github.com/users/boxed/followers", "following_url": "https://api.github.com/users/boxed/following{/other_user}", "gists_url": "https://api.github.com/users/boxed/gists{/gist_id}", "starred_url": "https://api.github.com/users/boxed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boxed/subscriptions", "organizations_url": "https://api.github.com/users/boxed/orgs", "repos_url": "https://api.github.com/users/boxed/repos", "events_url": "https://api.github.com/users/boxed/events{/privacy}", "received_events_url": "https://api.github.com/users/boxed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-24T07:57:37Z", "updated_at": "2015-04-28T17:40:47Z", "closed_at": "2015-04-28T17:40:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It'd be nice to be able to do\n\n```\n>>> pmap({1:2}) + pmap({3:4})\npmap({1:2, 3:4})\n>>> pmap({1:2}) + pmap({1:4})\npmap({1:4})\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/34", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/34/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/34/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/34", "id": 68940320, "node_id": "MDU6SXNzdWU2ODk0MDMyMA==", "number": 34, "title": "pvector doesn't compare correctly with other Python sequences", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-04-16T14:48:20Z", "updated_at": "2015-04-20T21:03:57Z", "closed_at": "2015-04-20T21:03:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Perhaps this is intentional, but in Python 2.7.8, pyrsistent 0.9.1:\n\n```\n>>> from pyrsistent import pvector\n>>> pvector([1, 2]) == [1, 2]\nFalse\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/33", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/33/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/33/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/33", "id": 65533256, "node_id": "MDU6SXNzdWU2NTUzMzI1Ng==", "number": 33, "title": "TypeError raised by checked types could be more informative", "user": {"login": "exarkun", "id": 254565, "node_id": "MDQ6VXNlcjI1NDU2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/254565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exarkun", "html_url": "https://github.com/exarkun", "followers_url": "https://api.github.com/users/exarkun/followers", "following_url": "https://api.github.com/users/exarkun/following{/other_user}", "gists_url": "https://api.github.com/users/exarkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/exarkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exarkun/subscriptions", "organizations_url": "https://api.github.com/users/exarkun/orgs", "repos_url": "https://api.github.com/users/exarkun/repos", "events_url": "https://api.github.com/users/exarkun/events{/privacy}", "received_events_url": "https://api.github.com/users/exarkun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-31T19:58:13Z", "updated_at": "2015-04-01T20:37:16Z", "closed_at": "2015-04-01T20:36:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When a type invariant of a CheckedPMap (and other checked types) is violated, the resulting `TypeError` doesn't say much about what happened:\n\n```\n>>> class X(CheckedPMap):                                                                                                                                      \n...     __key_type__ = int                                                                                                                                     \n...     __value_type__ = str                                                                                                             \n... \n>>> X().set(\"3\", \"4\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/jean-paul/Environments/flocker/local/lib/python2.7/site-packages/pyrsistent.py\", line 829, in set\n    return self.evolver().set(key, val).persistent()\n  File \"/home/jean-paul/Environments/flocker/local/lib/python2.7/site-packages/pyrsistent.py\", line 2971, in set\n    _check_types([key], self._destination_class._checked_key_types)\n  File \"/home/jean-paul/Environments/flocker/local/lib/python2.7/site-packages/pyrsistent.py\", line 2721, in _check_types\n    raise TypeError\nTypeError\n>>> \n```\n\nIt would be very nice to have an exception that included the type on which the invariant was violated, the expected type, and the received type.  For example, a string message like `TypeError(\"Type`X`can only be used with`int`keys, not`str`\")` would be great.  Presenting the information in a structured way would be pretty cool too - for example, using a subclass of `TypeError` with some attributes defined, eg `CheckedKeyTypeError(X, int, str)` producing an object with `checked_type`, `required_type`, and `received_type` attributes.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/32", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/32/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/32/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/32", "id": 65511625, "node_id": "MDU6SXNzdWU2NTUxMTYyNQ==", "number": 32, "title": "PRecord support for iteration is surprising and mostly undesirable", "user": {"login": "exarkun", "id": 254565, "node_id": "MDQ6VXNlcjI1NDU2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/254565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exarkun", "html_url": "https://github.com/exarkun", "followers_url": "https://api.github.com/users/exarkun/followers", "following_url": "https://api.github.com/users/exarkun/following{/other_user}", "gists_url": "https://api.github.com/users/exarkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/exarkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exarkun/subscriptions", "organizations_url": "https://api.github.com/users/exarkun/orgs", "repos_url": "https://api.github.com/users/exarkun/repos", "events_url": "https://api.github.com/users/exarkun/events{/privacy}", "received_events_url": "https://api.github.com/users/exarkun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-03-31T18:06:04Z", "updated_at": "2015-04-28T20:47:35Z", "closed_at": "2015-04-28T20:47:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "PRecord instances are iterable:\n\n```\n>>> from pyrsistent import PRecord, field\n>>> class X(PRecord):\n...     y = field()\n... \n>>> list(X(y=3))\n['y']\n```\n\nI see that this behavior is inherited from `PMap`, of which `PRecord` is a subclass.  I think that iteration over a notional record type is undesirable.  It's possible to iterate over the fields by using another of the inherited `PMap` features (`keys()`, `iterkeys()`) - though I'm not sure I like those features very much either (and I lose them if I happen to want a field with a colliding name).  Support for the implicit iterator protocol seems most likely to be a source of bugs.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/30", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/30/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/30/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/30", "id": 65479297, "node_id": "MDU6SXNzdWU2NTQ3OTI5Nw==", "number": 30, "title": "Instances of different PRecord subclasses compare equal to each other", "user": {"login": "exarkun", "id": 254565, "node_id": "MDQ6VXNlcjI1NDU2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/254565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exarkun", "html_url": "https://github.com/exarkun", "followers_url": "https://api.github.com/users/exarkun/followers", "following_url": "https://api.github.com/users/exarkun/following{/other_user}", "gists_url": "https://api.github.com/users/exarkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/exarkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exarkun/subscriptions", "organizations_url": "https://api.github.com/users/exarkun/orgs", "repos_url": "https://api.github.com/users/exarkun/repos", "events_url": "https://api.github.com/users/exarkun/events{/privacy}", "received_events_url": "https://api.github.com/users/exarkun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2015-03-31T15:31:58Z", "updated_at": "2015-04-28T20:46:16Z", "closed_at": "2015-04-28T20:46:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\n>>> from pyrsistent import PRecord, field\n>>> class A(PRecord):\n...     x = field()\n... \n>>> class B(PRecord):\n...     x = field()\n... \n>>> A(x=1) == B(x=1)\nTrue\n```\n\nThis is undesirable because it is idiomatic for different Python classes to represent different types.  If objects of different type accidentally share the same field names and values, they should still be considered different.\n\nBy way of analogy,\n\n```\n>>> (1,) == [1]\nFalse\n>>> (1,) == {1}\nFalse\n>>> (1,) == \"\\x01\"\nFalse\n>>> \n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/29", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/29/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/29/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/29", "id": 63022830, "node_id": "MDU6SXNzdWU2MzAyMjgzMA==", "number": 29, "title": "alternative names for single-letter constructors", "user": {"login": "radix", "id": 227068, "node_id": "MDQ6VXNlcjIyNzA2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/227068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radix", "html_url": "https://github.com/radix", "followers_url": "https://api.github.com/users/radix/followers", "following_url": "https://api.github.com/users/radix/following{/other_user}", "gists_url": "https://api.github.com/users/radix/gists{/gist_id}", "starred_url": "https://api.github.com/users/radix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radix/subscriptions", "organizations_url": "https://api.github.com/users/radix/orgs", "repos_url": "https://api.github.com/users/radix/repos", "events_url": "https://api.github.com/users/radix/events{/privacy}", "received_events_url": "https://api.github.com/users/radix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2015-03-19T15:50:21Z", "updated_at": "2018-06-12T10:40:42Z", "closed_at": "2018-06-12T10:40:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The single-letter constructors can be pretty annoying\n- they're hard to search for in a module\n- they very easily conflict with local variable names\n\nIt'd be nice if we had alternative, longer names for `v`, `s`, `m`, and `b`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/28", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/28/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/28/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/28", "id": 62397031, "node_id": "MDU6SXNzdWU2MjM5NzAzMQ==", "number": 28, "title": "Allow multiple types for checked classes", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-17T13:28:59Z", "updated_at": "2015-04-03T17:11:29Z", "closed_at": "2015-04-03T17:11:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "_Updated:_ Checked again and noticed fields already have tests for this, but checked types do not.\n\nSometimes it's useful to support multiple types.\n- Classic example is `int` and `long`: the difference between them is implementation detail in Python 2, so you pretty much always want to support both interchangeably.\n- We also have fields that are either `None` or `int`.\n\nFields already do this, but CheckedPVector etc. don't seem to have tests for this case.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/27", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/27/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/27/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/27", "id": 59136315, "node_id": "MDU6SXNzdWU1OTEzNjMxNQ==", "number": 27, "title": "Sometimes psets don't compare correctly with sets or frozensets", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2015-02-26T20:16:34Z", "updated_at": "2015-04-03T17:28:36Z", "closed_at": "2015-04-03T17:28:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "My branch adding a bunch of `pyrsistent` 0.9 usage is failing consistently on our build machines - but not on my local desktop. Sample failure:\n\n```\ntwisted.trial.unittest.FailTest: not equal:\na = [frozenset([<Application(name=u'mysql-clusterhq', image=<object object at 0x7ffacf447ba0>, ports=frozenset([]), volume=None, links=frozenset([]), environment=None, memory_limit=None, cpu_shares=None, restart_policy=<RestartNever()>)>,\n            <Application(name=u'site-clusterhq.com', image=<object object at 0x7ffacf447bb0>, ports=frozenset([]), volume=None, links=frozenset([]), environment=None, memory_limit=None, cpu_shares=None, restart_policy=<RestartNever()>)>]),\n u'example.com']\nb = [pset([<Application(name=u'site-clusterhq.com', image=<object object at 0x7ffacf447bb0>, ports=frozenset([]), volume=None, links=frozenset([]), environment=None, memory_limit=None, cpu_shares=None, restart_policy=<RestartNever()>)>, <Application(name=u'mysql-clusterhq', image=<object object at 0x7ffacf447ba0>, ports=frozenset([]), volume=None, links=frozenset([]), environment=None, memory_limit=None, cpu_shares=None, restart_policy=<RestartNever()>)>]),\n u'example.com']\n```\n\nThose two seem like they ought to be equal, and on my computer they are. And yet. (`Application` is a class using the `characteristic` library; eventually we'll probably switch everything to `pyrsistent`).\n\nFull set of failures:\nhttp://build.clusterhq.com/builders/flocker-ubuntu-14.04/builds/1272/steps/trial/logs/problems\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/26", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/26/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/26/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/26", "id": 59100201, "node_id": "MDU6SXNzdWU1OTEwMDIwMQ==", "number": 26, "title": "Add succinct idiom for checked types", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-02-26T16:42:57Z", "updated_at": "2015-04-26T20:42:20Z", "closed_at": "2015-04-26T20:42:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm writing code that pre-checked types looks like this:\n\n```\nclass MyRec(PRecord):\n    paths = field(type=PMap, initial=pmap(), factory=pmap, mandatory=True)\n```\n\nSwitching to CheckedPMap, it's now something like this:\n\n```\nclass MyRec(PRecord):\n    class _PathMap(CheckedPMap):\n        __key_type__ = unicode\n        __value_type__ = FilePath\n    paths = field(type=_PathMap, initial=_PathMap(), factory=_PathMap, mandatory=True)\n```\n\nThis is rather verbose, but likely to be a common use case. I'm thinking that perhaps some utility functions would be helpful. For example:\n\n```\nclass MyRec(PRecord):\n    # If mandatory=True then automatically set initial too? Probably.\n    paths = pmap_field(unicode, FilePath, mandatory=True)  # optional invariant keyword argument\n```\n\nIf I end up writing this for work I'll submit a PR.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/25", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/25/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/25/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/25", "id": 58810700, "node_id": "MDU6SXNzdWU1ODgxMDcwMA==", "number": 25, "title": "Release 0.9", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-02-24T21:46:04Z", "updated_at": "2015-02-25T21:25:20Z", "closed_at": "2015-02-25T20:28:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I keep hitting bugs that are fixed in `master`... any chance for a release?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/24", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/24/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/24/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/24", "id": 58638004, "node_id": "MDU6SXNzdWU1ODYzODAwNA==", "number": 24, "title": "PSet is not pickleable", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-23T19:48:24Z", "updated_at": "2015-02-23T20:43:17Z", "closed_at": "2015-02-23T20:41:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\n>>> pickle.dumps(pyrsistent.pset())\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python2.7/pickle.py\", line 1374, in dumps\n    Pickler(file, protocol).dump(obj)\n  File \"/usr/lib64/python2.7/pickle.py\", line 224, in dump\n    self.save(obj)\n  File \"/usr/lib64/python2.7/pickle.py\", line 306, in save\n    rv = reduce(self.proto)\n  File \"/usr/lib64/python2.7/copy_reg.py\", line 77, in _reduce_ex\n    raise TypeError(\"a class that defines __slots__ without \"\nTypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled\n```\n\nCheckout from today:\n\n```\n$ git log -1\ncommit ab29465bd31dfee63976f8ecf6be8de6fb106087\nAuthor: Tobias Gustafsson <tobias.l.gustafsson@gmail.com>\nDate:   Sat Feb 21 15:10:59 2015 +0100\n\n    Type and invariant checking for checked pmap\n```\n\nNot a priority for me, we're going to rip out all the pickling code soon, but something I encountered.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/23", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/23/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/23/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/23", "id": 58602805, "node_id": "MDU6SXNzdWU1ODYwMjgwNQ==", "number": 23, "title": "pyrsistent package has no __version__ attribute", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-23T15:39:45Z", "updated_at": "2015-02-23T21:16:30Z", "closed_at": "2015-02-23T21:16:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Fairly minor, but I was going to report a bug, and wanted to include package version in Python shell transcript.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/22", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/22/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/22/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/22", "id": 57682045, "node_id": "MDU6SXNzdWU1NzY4MjA0NQ==", "number": 22, "title": "equality with standard data structures", "user": {"login": "nathants", "id": 1566190, "node_id": "MDQ6VXNlcjE1NjYxOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1566190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathants", "html_url": "https://github.com/nathants", "followers_url": "https://api.github.com/users/nathants/followers", "following_url": "https://api.github.com/users/nathants/following{/other_user}", "gists_url": "https://api.github.com/users/nathants/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathants/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathants/subscriptions", "organizations_url": "https://api.github.com/users/nathants/orgs", "repos_url": "https://api.github.com/users/nathants/repos", "events_url": "https://api.github.com/users/nathants/events{/privacy}", "received_events_url": "https://api.github.com/users/nathants/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-14T05:27:26Z", "updated_at": "2015-02-14T16:48:02Z", "closed_at": "2015-02-14T16:48:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "it would be really awesome to do something like decorate functions so that all arguments to and the return value from get frozen. then inside the decorated function, use literal data, and even mutation, and lock it down on the way in/out.\n\nbeyond that use case, it seems to me that equality with standard data structures could be desirable in many circumstances.\n\nare there any kind of technical blockers for equality with standard data structures of the same type?\n\n``` python\nfrom pyrsistent import v, thaw\n\nassert thaw(v(1, 2, 3)) == [1, 2, 3], 'this works'\nassert v(1, 2, 3) == [1, 2, 3], 'this does not work'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/21", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/21/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/21/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/21", "id": 57531286, "node_id": "MDU6SXNzdWU1NzUzMTI4Ng==", "number": 21, "title": "PMap __getattr__ is problematic sometimes", "user": {"login": "radix", "id": 227068, "node_id": "MDQ6VXNlcjIyNzA2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/227068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radix", "html_url": "https://github.com/radix", "followers_url": "https://api.github.com/users/radix/followers", "following_url": "https://api.github.com/users/radix/following{/other_user}", "gists_url": "https://api.github.com/users/radix/gists{/gist_id}", "starred_url": "https://api.github.com/users/radix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radix/subscriptions", "organizations_url": "https://api.github.com/users/radix/orgs", "repos_url": "https://api.github.com/users/radix/repos", "events_url": "https://api.github.com/users/radix/events{/privacy}", "received_events_url": "https://api.github.com/users/radix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-12T22:41:23Z", "updated_at": "2015-02-14T14:10:50Z", "closed_at": "2015-02-14T14:10:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Frankly I'm not a fan of `PMap.__getattr__` in the first place, but in particular the fact that it raises `KeyError` and not `AttributeError` causes some things to misbehave.\n\nFor example, the `trial` unit test runner searches for test classes to run by going through all the objects in a module and doing an `issubclass(o, TestCase)` check.\n\n`issubclass` works by checking an object's `__bases__` attribute, and returning True if the second argument can be found in the bases (recursively).\n\nUsually `issubclass` raises a `TypeError` when an object isn't a class at all -- and trial specifically catches `TypeError`. The problem is that issubclass only catches `AttributeError` when trying to find a `__bases__` attribute, but it doesn't handle other errors like `KeyError` - so in this case it just raises the `KeyError` up to the caller.\n\nThis leads to `trial` completely bailing out if you happen to have a `PMap` instance as a global variable in module :crying_cat_face:.\n\nSo I think it would make more sense for `PMap.__getattr__` to translate KeyError to `AttributeError`, but honestly I would rather just see it removed -- mashing namespaces together (methods of `PMap` and items found within a `PMap`) can often lead to confusion and errors.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/19", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/19/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/19/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/19", "id": 56582297, "node_id": "MDU6SXNzdWU1NjU4MjI5Nw==", "number": 19, "title": "Perhaps PRecord shouldn't be based on PMap", "user": {"login": "radix", "id": 227068, "node_id": "MDQ6VXNlcjIyNzA2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/227068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radix", "html_url": "https://github.com/radix", "followers_url": "https://api.github.com/users/radix/followers", "following_url": "https://api.github.com/users/radix/following{/other_user}", "gists_url": "https://api.github.com/users/radix/gists{/gist_id}", "starred_url": "https://api.github.com/users/radix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radix/subscriptions", "organizations_url": "https://api.github.com/users/radix/orgs", "repos_url": "https://api.github.com/users/radix/repos", "events_url": "https://api.github.com/users/radix/events{/privacy}", "received_events_url": "https://api.github.com/users/radix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-02-04T20:25:11Z", "updated_at": "2015-02-14T14:12:19Z", "closed_at": "2015-02-14T14:12:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I don't think PMap is the most efficient way to represent most records  -- and the Clojure developers would seem to agree, given that their `record` system is not based on HAMTs, but rather just plain java objects, with updates causing full object copies. (well, I believe they do have a HAMT for _dynamic_ fields added after a record is instantiated, but the declared attributes are fully copied on modification).\n\nThis is because records have small, fixed numbers of fields, whereas pmaps excel at large data structures where modifications will not require reallocating most of the structure.\n\nI have a preliminary benchmark showing that copying the object + mutating the result is faster than PRecord for small numbers of fields. On CPython, with the pyrsistent C extension, object copy+mutate is faster up to and beyod 100 fields (I didn't want to wait to find out when/if they converge), but the gap clearly closes with a larger number of fields. On PyPy, the gap closes much quicker, with copy+mutate winning out significantly at 5 fields, and converging at around 10 fields. At 20 fields on PyPy, PRecord wins out significantly.\n\nThere's also the big caveat that my benchmark doesn't do all the same bookkeeping that PRecord does, like type checking and whatnot.\n\nSo there's some weighing to do here, and perhaps a consideration for dynamically switching between a PMap-based implementation or an copy+mutate implementation depending on the number of fields and the Python runtime. I suspect the number of fields per object in typical Python objects is significantly less than 10, though I've certainly seen (and written) my share of objects with 15 fields.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/18", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/18/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/18/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/18", "id": 55526259, "node_id": "MDU6SXNzdWU1NTUyNjI1OQ==", "number": 18, "title": "Expand invariants to cover PSet etc.", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-01-26T19:32:28Z", "updated_at": "2015-02-25T20:34:29Z", "closed_at": "2015-02-25T20:34:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As shown in #17, it's a little awkward to integrate the idea of \"a PSet (or PVector) of X\" into PRecord. For situations outside of PRecord it's not possible to enforce at all.\n\nIt would be nice if there was a way to add invariants (type-based, at a minimum) to PSet and friends, much like PRecord allows adding invariants to PMap.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/17", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/17/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/17/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/17", "id": 55525846, "node_id": "MDU6SXNzdWU1NTUyNTg0Ng==", "number": 17, "title": "Unify thaw()/freeze() with PRecord serialization somehow", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-01-26T19:28:57Z", "updated_at": "2015-02-25T22:02:45Z", "closed_at": "2015-02-25T21:43:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would like to round-trip a tree of nested PSets, PRecords, etc. into simple Python objects and back. I've written a simple sketch of this, which I will add below. One issue I encountered was that `thaw()` doesn't know about PRecord serialization, and vice versa:\n\n```\nfrom operator import and_\nfrom pyrsistent import PRecord, pset, PSet, field, thaw\n\n\ndef set_field(klass):\n    \"\"\"\n    Create a field which is a PSet of the given class.\n    \"\"\"\n    if issubclass(klass, PRecord):\n        klass_factory = klass.create\n    else:\n        klass_factory = klass\n\n    def invariant(obj):\n        return (\n            reduce(and_, [isinstance(i, klass) for i in obj]),\n            \"All instances must be of type {}\".format(klass))\n\n    def serializer(format, obj):\n        result = thaw(obj)\n        if issubclass(klass, PRecord):\n            result = [i.serialize() for i in result]\n        return result\n\n    def factory(items):\n        return pset([klass_factory(i) for i in items])\n\n    return field(type=PSet, factory=factory, invariant=invariant,\n                 serializer=serializer)\n\n\nclass Application(PRecord):\n    name = field(type=unicode)\n    image = field(type=unicode)\n\n\nclass Node(PRecord):\n    applications = set_field(Application)\n\n\ndef example():\n    node = Node(applications=[Application(name=u'myapp', image=u'myimage'),\n                              Application(name=u'b', image=u'c')])\n    print node\n    serialized = node.serialize()\n    print serialized\n    restored = Node.create(serialized)\n    print restored == node\n\n\nif __name__ == '__main__':\n    example()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/16", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/16/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/16/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/16", "id": 54921674, "node_id": "MDU6SXNzdWU1NDkyMTY3NA==", "number": 16, "title": "Implement .copy() to get closer to standard interface", "user": {"login": "jruere", "id": 1299142, "node_id": "MDQ6VXNlcjEyOTkxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1299142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruere", "html_url": "https://github.com/jruere", "followers_url": "https://api.github.com/users/jruere/followers", "following_url": "https://api.github.com/users/jruere/following{/other_user}", "gists_url": "https://api.github.com/users/jruere/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruere/subscriptions", "organizations_url": "https://api.github.com/users/jruere/orgs", "repos_url": "https://api.github.com/users/jruere/repos", "events_url": "https://api.github.com/users/jruere/events{/privacy}", "received_events_url": "https://api.github.com/users/jruere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-01-20T18:40:08Z", "updated_at": "2015-01-21T20:50:17Z", "closed_at": "2015-01-21T20:50:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I normally use the persistent data structures to have certainty that the code is not modifying something accidentally.\n\nNevertheless, I don't want all the code to know that then are dealing with something other than the standard types. If pyrsistent types implemented the `copy()` method just as `return self`, then I'd be able to use them in cases where a defensive copy is performed.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/15", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/15/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/15/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/15", "id": 54655508, "node_id": "MDU6SXNzdWU1NDY1NTUwOA==", "number": 15, "title": "Restructure package layout to get rid of top level test directory", "user": {"login": "tobgu", "id": 485836, "node_id": "MDQ6VXNlcjQ4NTgzNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/485836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobgu", "html_url": "https://github.com/tobgu", "followers_url": "https://api.github.com/users/tobgu/followers", "following_url": "https://api.github.com/users/tobgu/following{/other_user}", "gists_url": "https://api.github.com/users/tobgu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobgu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobgu/subscriptions", "organizations_url": "https://api.github.com/users/tobgu/orgs", "repos_url": "https://api.github.com/users/tobgu/repos", "events_url": "https://api.github.com/users/tobgu/events{/privacy}", "received_events_url": "https://api.github.com/users/tobgu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-17T08:31:12Z", "updated_at": "2015-01-21T20:50:53Z", "closed_at": "2015-01-21T20:50:53Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This directory may conflict with other installed packages and should be moved to within pyrsistent or removed from the package entirely.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tobgu/pyrsistent/issues/14", "repository_url": "https://api.github.com/repos/tobgu/pyrsistent", "labels_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/14/comments", "events_url": "https://api.github.com/repos/tobgu/pyrsistent/issues/14/events", "html_url": "https://github.com/tobgu/pyrsistent/issues/14", "id": 54644990, "node_id": "MDU6SXNzdWU1NDY0NDk5MA==", "number": 14, "title": "Py3 installation error", "user": {"login": "johanfforsberg", "id": 1274600, "node_id": "MDQ6VXNlcjEyNzQ2MDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1274600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johanfforsberg", "html_url": "https://github.com/johanfforsberg", "followers_url": "https://api.github.com/users/johanfforsberg/followers", "following_url": "https://api.github.com/users/johanfforsberg/following{/other_user}", "gists_url": "https://api.github.com/users/johanfforsberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/johanfforsberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johanfforsberg/subscriptions", "organizations_url": "https://api.github.com/users/johanfforsberg/orgs", "repos_url": "https://api.github.com/users/johanfforsberg/repos", "events_url": "https://api.github.com/users/johanfforsberg/events{/privacy}", "received_events_url": "https://api.github.com/users/johanfforsberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-17T01:18:10Z", "updated_at": "2015-01-17T08:29:39Z", "closed_at": "2015-01-17T08:25:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get the below error when installing pyrsistent with pip3. The installation apparently works anyway, looks like the error is in some performance test.\n\nAlso, is there supposed to be a \"tests\" package installed outside of pyrsistent? The name seems likely to collide with something else.\n\n```\nDownloading/unpacking pyrsistent\n  Downloading pyrsistent-0.7.0.tar.gz (47kB): 47kB downloaded\n  Running setup.py (path:/tmp/pip_build_jofo/pyrsistent/setup.py) egg_info for package pyrsistent\n\nRequirement already satisfied (use --upgrade to upgrade): six in /home/jofo/.local/lib/python3.4/site-packages (from pyrsistent)\nInstalling collected packages: pyrsistent\n  Running setup.py install for pyrsistent\n    building 'pvectorc' extension\n    x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.4m -c pvectorcmodule.c -o build/temp.linux-x86_64-3.4/pvectorcmodule.o\n    x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 build/temp.linux-x86_64-3.4/pvectorcmodule.o -o build/lib.linux-x86_64-3.4/pvectorc.cpython-34m.so\n      File \"/home/jofo/.local/lib/python3.4/site-packages/tests/performance_run.py\", line 247\n        print \"Number of accesses: %s\" % len(indices)\n                                     ^\n    SyntaxError: invalid syntax\n```\n", "performed_via_github_app": null, "score": 1.0}]}