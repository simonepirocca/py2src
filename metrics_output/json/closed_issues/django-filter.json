{"total_count": 596, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1265", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1265/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1265/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1265/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1265", "id": 697782121, "node_id": "MDU6SXNzdWU2OTc3ODIxMjE=", "number": 1265, "title": "No support for PositiveSmallIntegerField", "user": {"login": "Desttro", "id": 170174, "node_id": "MDQ6VXNlcjE3MDE3NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/170174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Desttro", "html_url": "https://github.com/Desttro", "followers_url": "https://api.github.com/users/Desttro/followers", "following_url": "https://api.github.com/users/Desttro/following{/other_user}", "gists_url": "https://api.github.com/users/Desttro/gists{/gist_id}", "starred_url": "https://api.github.com/users/Desttro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Desttro/subscriptions", "organizations_url": "https://api.github.com/users/Desttro/orgs", "repos_url": "https://api.github.com/users/Desttro/repos", "events_url": "https://api.github.com/users/Desttro/events{/privacy}", "received_events_url": "https://api.github.com/users/Desttro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-09-10T11:07:31Z", "updated_at": "2020-09-10T11:12:30Z", "closed_at": "2020-09-10T11:12:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI have defined a filed in models as PositiveSmallIntegerField and I am getting an error, when I trying to apply a filter:\r\n\r\n> Unsupported lookup 'year' for PositiveSmallIntegerField or join on the field not permitted.\r\n\r\n**models.py:**\r\n```\r\nclass Vehicle(models.Model):\r\n    year = models.PositiveSmallIntegerField()\r\n```\r\n\r\n**filters.py:**\r\n```\r\nclass VehicleFilter(django_filters.FilterSet):\r\n    year__gt = django_filters.NumberFilter(\r\n        field_name='year', lookup_expr='year__gt')\r\n    year__lt = django_filters.NumberFilter(\r\n        field_name='year', lookup_expr='year__lt')\r\n```\r\n\r\nIs possible to add support of PositiveSmallIntegerField, please?\r\n\r\nThank you!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1261", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1261/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1261/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1261/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1261", "id": 685723601, "node_id": "MDU6SXNzdWU2ODU3MjM2MDE=", "number": 1261, "title": "import error on django 3.1", "user": {"login": "MJoshua25", "id": 46876900, "node_id": "MDQ6VXNlcjQ2ODc2OTAw", "avatar_url": "https://avatars1.githubusercontent.com/u/46876900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MJoshua25", "html_url": "https://github.com/MJoshua25", "followers_url": "https://api.github.com/users/MJoshua25/followers", "following_url": "https://api.github.com/users/MJoshua25/following{/other_user}", "gists_url": "https://api.github.com/users/MJoshua25/gists{/gist_id}", "starred_url": "https://api.github.com/users/MJoshua25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MJoshua25/subscriptions", "organizations_url": "https://api.github.com/users/MJoshua25/orgs", "repos_url": "https://api.github.com/users/MJoshua25/repos", "events_url": "https://api.github.com/users/MJoshua25/events{/privacy}", "received_events_url": "https://api.github.com/users/MJoshua25/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-25T19:13:05Z", "updated_at": "2020-08-26T18:00:39Z", "closed_at": "2020-08-25T21:57:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have this error with Django 3.1 and django-filter 2.3.0\r\n\r\nImportError: cannot import name 'FieldDoesNotExist' from 'django.db.models.fields'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1257", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1257/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1257/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1257/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1257", "id": 680547881, "node_id": "MDU6SXNzdWU2ODA1NDc4ODE=", "number": 1257, "title": "`distinct` Not Called on `FilterSet`", "user": {"login": "loganknecht", "id": 1308524, "node_id": "MDQ6VXNlcjEzMDg1MjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1308524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loganknecht", "html_url": "https://github.com/loganknecht", "followers_url": "https://api.github.com/users/loganknecht/followers", "following_url": "https://api.github.com/users/loganknecht/following{/other_user}", "gists_url": "https://api.github.com/users/loganknecht/gists{/gist_id}", "starred_url": "https://api.github.com/users/loganknecht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loganknecht/subscriptions", "organizations_url": "https://api.github.com/users/loganknecht/orgs", "repos_url": "https://api.github.com/users/loganknecht/repos", "events_url": "https://api.github.com/users/loganknecht/events{/privacy}", "received_events_url": "https://api.github.com/users/loganknecht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-17T21:52:58Z", "updated_at": "2020-08-22T02:10:52Z", "closed_at": "2020-08-22T02:10:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Greetings\r\n\r\nHello there! I really appreciate the `django-filter` product/library! It has been so wonderful!\r\n\r\n# Problem\r\n\r\nI have a filter like this\r\n\r\n```Python\r\nclass SchoolFilter(FilterSet):\r\n    id = NumberFilter(distinct=True, field_name=\"id\")\r\n    school_name = CharFilter(field_name=\"name\",\r\n                             lookup_expr=\"icontains\")\r\n    # ---\r\n    course_name = CharFilter(field_name=\"school_course__name\",\r\n                             lookup_expr=\"icontains\")\r\n    course_description = CharFilter(field_name=\"school_course__description\",\r\n                                    lookup_expr=\"icontains\")\r\n    # ---\r\n    lesson_name = CharFilter(field_name=\"school_lesson__name\",\r\n                             lookup_expr=\"icontains\")\r\n    lesson_description = CharFilter(field_name=\"school_lesson__description\",\r\n                                    lookup_expr=\"icontains\")\r\n    # ---\r\n    flash_card_set_name = CharFilter(field_name=\"school_lesson__flash_card_set__name\",\r\n                                     lookup_expr=\"icontains\")\r\n    flash_card_set_description = CharFilter(field_name=\"school_lesson__flash_card_set__description\",\r\n                                            lookup_expr=\"icontains\")\r\n    # ---\r\n    headmaster_username = CharFilter(field_name=\"school_board__school_board_headmaster__learner__user__username\",\r\n                                     lookup_expr=\"icontains\")\r\n    board_member_username = CharFilter(field_name=\"school_board__school_board_member__learner__user__username\",\r\n                                       lookup_expr=\"icontains\")\r\n\r\n    # See:\r\n    # https://django-filter.readthedocs.io/en/stable/ref/filters.html#orderingfilter\r\n    order_by = OrderingFilter(\r\n        # tuple-mapping retains order\r\n        fields=(\r\n            (\"learner_enrolled_count\", \"learner_enrolled_count\"),\r\n        ),\r\n\r\n        # labels do not need to retain order\r\n        field_labels={\r\n            \"learner_enrolled_count\": \"Total learners enrolled in school\",\r\n        }\r\n    )\r\n\r\n    class Meta:\r\n        model = SchoolModel\r\n        fields = [\r\n            \"id\",\r\n            \"school_name\",\r\n            # ---\r\n            \"course_name\",\r\n            \"course_description\",\r\n            # ---\r\n            \"lesson_name\",\r\n            \"lesson_description\",\r\n            # ---\r\n            \"headmaster_username\",\r\n            \"board_member_username\",\r\n        ]\r\n```\r\n\r\nI call the filter in my view here\r\n```Python\r\nclass SchoolViewSet(ViewSet):\r\n    # ....\r\n    def list(self, request):\r\n        all_school_models = SchoolModel.objects.getBrowseSchoolsData()\r\n\r\n        school_filter = SchoolFilter(request.GET, queryset=all_school_models)\r\n\r\n        # import pdb\r\n        # pdb.set_trace()\r\n        paginator = HeaderLinkPagination()\r\n        current_page_results = paginator.paginate_queryset(school_filter.qs,\r\n                                                           request)\r\n\r\n        all_schools_serializer = SchoolSerializer(current_page_results,\r\n                                                  many=True)\r\n        response_data = {\r\n            \"schools\": all_schools_serializer.data\r\n        }\r\n\r\n        response_to_return = paginator.get_paginated_response(response_data)\r\n        return response_to_return\r\n```\r\n\r\nHowever it does not deduplicate the results!\r\n\r\nThis is what I get back\r\n```python\r\nschool_filter.qs\r\n<QuerySet [<SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, '...(remaining elements truncated)...']>\r\n```\r\n\r\nIf I call `distinct()` on that query set it doesn't help either since it just returns a different set with duplicates, and I was lead to believe via the documentation that the `FilterSet` would call `distinct`\r\n```python\r\n(Pdb++) school_filter.qs.distinct()\r\n<QuerySet [<SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (1)>, <SchoolModel: SchoolModel object (2)>, <SchoolModel: SchoolModel object (2)>, <SchoolModel: SchoolModel object (3)>, <SchoolModel: SchoolModel object (4)>, <SchoolModel: SchoolModel object (5)>, <SchoolModel: SchoolModel object (6)>, <SchoolModel: SchoolModel object (7)>, <SchoolModel: SchoolModel object (8)>, <SchoolModel: SchoolModel object (9)>, <SchoolModel: SchoolModel object (10)>, <SchoolModel: SchoolModel object (11)>, <SchoolModel: SchoolModel object (12)>, <SchoolModel: SchoolModel object (13)>, <SchoolModel: SchoolModel object (14)>, <SchoolModel: SchoolModel object (15)>, <SchoolModel: SchoolModel object (16)>, <SchoolModel: SchoolModel object (17)>, <SchoolModel: SchoolModel object (18)>, '...(remaining elements truncated)...']>\r\n```\r\n\r\n# Question\r\n\r\nWhat am I doing wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1256", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1256/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1256/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1256/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1256", "id": 680103868, "node_id": "MDU6SXNzdWU2ODAxMDM4Njg=", "number": 1256, "title": "Django_Filters :no need to show all items using object.all() at the first load", "user": {"login": "technqvi", "id": 38780060, "node_id": "MDQ6VXNlcjM4NzgwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/38780060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technqvi", "html_url": "https://github.com/technqvi", "followers_url": "https://api.github.com/users/technqvi/followers", "following_url": "https://api.github.com/users/technqvi/following{/other_user}", "gists_url": "https://api.github.com/users/technqvi/gists{/gist_id}", "starred_url": "https://api.github.com/users/technqvi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technqvi/subscriptions", "organizations_url": "https://api.github.com/users/technqvi/orgs", "repos_url": "https://api.github.com/users/technqvi/repos", "events_url": "https://api.github.com/users/technqvi/events{/privacy}", "received_events_url": "https://api.github.com/users/technqvi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-17T09:53:27Z", "updated_at": "2020-08-17T17:30:42Z", "closed_at": "2020-08-17T17:30:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am new for Django_Filter\r\n\r\nAs I notice, django_filter always loads all objects on the firs loading despite not filtered yet. Due to a large amount of data in the table in the database. So it results in poor performance for loading all objects unnecessarily.\r\n\r\n### **_it is rather unreasonable in my view. Thus the better way it should filter a result whenever click button only._**\r\n\r\nHow to set Django_Filter in order to show the result when only click the search button(I don't want to list all items by using objects.all()).\r\n\r\n[\r\n<img width=\"438\" alt=\"search-poor\" src=\"https://user-images.githubusercontent.com/38780060/90382558-1b47b300-e0a9-11ea-95f7-59dbcd505203.png\">\r\n](url)\r\n\r\n[You can click this like for more detail in stack flow (it is the same question as this issue)](https://stackoverflow.com/questions/63448278/django-filters-no-need-to-show-all-items-using-object-all-at-the-first-load)\r\n\r\nThank you in advance.\r\nPongthorn\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1255", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1255/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1255/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1255/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1255", "id": 679351175, "node_id": "MDU6SXNzdWU2NzkzNTExNzU=", "number": 1255, "title": "Filter Sets Do Not Support `order_by` For Query Sets That Already Had `distinct()` Applied", "user": {"login": "loganknecht", "id": 1308524, "node_id": "MDQ6VXNlcjEzMDg1MjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1308524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loganknecht", "html_url": "https://github.com/loganknecht", "followers_url": "https://api.github.com/users/loganknecht/followers", "following_url": "https://api.github.com/users/loganknecht/following{/other_user}", "gists_url": "https://api.github.com/users/loganknecht/gists{/gist_id}", "starred_url": "https://api.github.com/users/loganknecht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loganknecht/subscriptions", "organizations_url": "https://api.github.com/users/loganknecht/orgs", "repos_url": "https://api.github.com/users/loganknecht/repos", "events_url": "https://api.github.com/users/loganknecht/events{/privacy}", "received_events_url": "https://api.github.com/users/loganknecht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-14T19:10:06Z", "updated_at": "2020-08-22T02:16:45Z", "closed_at": "2020-08-22T02:16:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Greetings\r\n\r\nHello there! I've mentioned this previously, but once more thank you again for the wonderful library!\r\n\r\n# Problem Statement\r\n\r\nI have a bit of a strange issue.\r\n\r\nI'm trying to use a `FilterSet` to manage an endpoint that is supposed to list resources.\r\n\r\nThe issue is that when I combine the `Filterset` with a default `get_queryset` function that uses `distinct()` I get an error.\r\n\r\nIf I change the `get_queryset` function to not use `distinct()` it will work, but then I get a query set that's duplicated instances of a model, when all I need is the single instance by `id`\r\n\r\n# Errors\r\n\r\n## `get_queryset` Uses `distinct()`\r\n\r\n```\r\nInternal Server Error: /api/v1/schools/\r\nTraceback (most recent call last):\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/backends/utils.py\", line 86, in _execute\r\n    return self.cursor.execute(sql, params)\r\npsycopg2.errors.InvalidColumnReference: SELECT DISTINCT ON expressions must match initial ORDER BY expressions\r\nLINE 1: SELECT DISTINCT ON (\"piano_gym_api_schoolmodel\".\"id\") \"piano...\r\n                            ^\r\n\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/views/decorators/csrf.py\", line 54, in wrapped_view\r\n    return view_func(*args, **kwargs)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/rest_framework/viewsets.py\", line 114, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/rest_framework/views.py\", line 505, in dispatch\r\n    response = self.handle_exception(exc)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/rest_framework/views.py\", line 465, in handle_exception\r\n    self.raise_uncaught_exception(exc)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/rest_framework/views.py\", line 476, in raise_uncaught_exception\r\n    raise exc\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/rest_framework/views.py\", line 502, in dispatch\r\n    response = handler(request, *args, **kwargs)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/piano_gym_api/versions/v1/views/school_view.py\", line 102, in list\r\n    request)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/piano_gym_api/versions/v1/pagination/header_link_pagination.py\", line 91, in paginate_queryset\r\n    total_result_count = len(queryset)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/models/query.py\", line 258, in __len__\r\n    self._fetch_all()\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/models/query.py\", line 1261, in _fetch_all\r\n    self._result_cache = list(self._iterable_class(self))\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/models/query.py\", line 57, in __iter__\r\n    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/models/sql/compiler.py\", line 1144, in execute_sql\r\n    cursor.execute(sql, params)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/debug_toolbar/panels/sql/tracking.py\", line 198, in execute\r\n    return self._record(self.cursor.execute, sql, params)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/debug_toolbar/panels/sql/tracking.py\", line 133, in _record\r\n    return method(sql, params)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/backends/utils.py\", line 100, in execute\r\n    return super().execute(sql, params)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/backends/utils.py\", line 68, in execute\r\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/backends/utils.py\", line 77, in _execute_with_wrappers\r\n    return executor(sql, params, many, context)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/backends/utils.py\", line 86, in _execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/utils.py\", line 90, in __exit__\r\n    raise dj_exc_value.with_traceback(traceback) from exc_value\r\n  File \"/Users/hugbot/Repositories/piano-gym-api-web-server/piano_gym_back_end/venv/lib/python3.7/site-packages/django/db/backends/utils.py\", line 86, in _execute\r\n    return self.cursor.execute(sql, params)\r\ndjango.db.utils.ProgrammingError: SELECT DISTINCT ON expressions must match initial ORDER BY expressions\r\nLINE 1: SELECT DISTINCT ON (\"piano_gym_api_schoolmodel\".\"id\") \"piano...\r\n                            ^\r\n\r\n[15/Aug/2020 06:42:27] \"GET /api/v1/schools/?order_by=-learner_enrolled_count HTTP/1.1\" 500 27740\r\n```\r\n\r\n# Prior Resources\r\n\r\nI see that there is a `distinct` keyword for fields, but that does not appear to resolve the issue for me as this is for the fields themselves and not the model that the fields are querying on behalf of.\r\n\r\nSee:\r\nhttps://django-filter.readthedocs.io/en/stable/ref/filters.html#distinct\r\n\r\n# Implementation\r\n\r\nI won't go over my data model, however if you need it I'm more than happy to explain.\r\n\r\nI have a view that's supposed to return a list of distinct schools.\r\n\r\n```python\r\nclass SchoolViewSet(ViewSet):\r\n\r\n    # ...\r\n\r\n    def list(self, request):\r\n        all_school_models = SchoolModel.objects.getBrowseSchoolsData()\r\n\r\n        school_filter = SchoolFilter(request.GET, queryset=all_school_models)\r\n\r\n        paginator = HeaderLinkPagination()\r\n        current_page_results = paginator.paginate_queryset(school_filter.qs,\r\n                                                           request)\r\n\r\n        all_schools_serializer = SchoolSerializer(current_page_results,\r\n                                                  many=True)\r\n        response_data = {\r\n            \"schools\": all_schools_serializer.data\r\n        }\r\n\r\n        response_to_return = paginator.get_paginated_response(response_data)\r\n        return response_to_return\r\n```\r\n\r\nAs you can see it uses the `SchoolModel.objects.getBrowseSchoolsData()` function to generate the default `query_set`\r\n\r\nThat function is implemented like so\r\n```python\r\nclass SchoolModelManager(Manager):\r\n    def get_queryset(self):\r\n        \"\"\"Return default School information.\r\n\r\n        Generates default data and includes annotated statistics\r\n        \"\"\"\r\n        # WARNING: This MUST be imported here otherwise the compilation fails\r\n        #          because of circular dependencies\r\n        from piano_gym_api.versions.v1.models.flash_card_set_model import FlashCardSetModel\r\n        from piano_gym_api.versions.v1.models.flash_card_model import FlashCardModel\r\n        from piano_gym_api.versions.v1.models.flash_card_model import PlaySheetMusicFlashCardModel\r\n        from piano_gym_api.versions.v1.models.sheet_music_model import SheetMusicModel\r\n        from piano_gym_api.versions.v1.models.flash_card_model import TrueOrFalseFlashCardModel\r\n        from piano_gym_api.versions.v1.models.user_model import UserModel\r\n\r\n        # ----------------------------------------------------------------------\r\n        # Model Queries\r\n        # ----------------------------------------------------------------------\r\n        user_query_set = (UserModel.objects.all())\r\n        # ---\r\n        school_board_headmaster_query_set = (SchoolBoardHeadmasterModel.objects.all()\r\n                                             .select_related(\"learner\",\r\n                                                             \"school_board\"))\r\n        school_board_member_query_set = (SchoolBoardMemberModel.objects.all()\r\n                                         .select_related(\"learner\",\r\n                                                         \"school_board\"))\r\n        # ---\r\n        flash_card_set_query_set = (FlashCardSetModel.objects.all()\r\n                                    .select_related(\"school\"))\r\n        flash_card_query_set = (FlashCardModel.objects.all()\r\n                                .select_related(\"flash_card_set\",\r\n                                                \"playsheetmusicflashcardmodel\",\r\n                                                \"school\",\r\n                                                \"trueorfalseflashcardmodel\"))\r\n        play_sheet_music_flash_card_query_set = (PlaySheetMusicFlashCardModel.objects.all()\r\n                                                 .select_related(\"flash_card\",\r\n                                                                 \"school\",\r\n                                                                 \"sheet_music\"))\r\n        true_or_false_flash_card_query_set = (TrueOrFalseFlashCardModel.objects.all()\r\n                                              .select_related(\"flash_card\",\r\n                                                              \"school\"))\r\n        sheet_music_query_set = (SheetMusicModel.objects.all()\r\n                                 .select_related(\"school\"))\r\n        # ---\r\n        school_course_query_set = (SchoolCourseModel.objects.all()\r\n                                   .select_related(\"school\"))\r\n        # ---\r\n        school_lesson_query_set = (SchoolLessonModel.objects.all()\r\n                                   .select_related(\"course\",\r\n                                                   \"flash_card_set\",\r\n                                                   \"school\"))\r\n\r\n        # ----------------------------------------------------------------------\r\n        # Prefetch\r\n        # ----------------------------------------------------------------------\r\n        school_models = (super()\r\n                         .get_queryset()\r\n                         .select_related(\"school_board\")\r\n                         .prefetch_related(\r\n            # ------------------------------------------------------------------\r\n            # School Board\r\n            # ------------------------------------------------------------------\r\n            Prefetch(\"school_board__school_board_headmaster\",\r\n                     school_board_headmaster_query_set),\r\n            Prefetch(\"school_board__school_board_headmaster__learner__user\",\r\n                     user_query_set),\r\n            Prefetch(\"school_board__school_board_member\",\r\n                     school_board_member_query_set),\r\n            Prefetch(\"school_board__school_board_member__learner__user\",\r\n                     user_query_set),\r\n            # ------------------------------------------------------------------\r\n            # School Course\r\n            # ------------------------------------------------------------------\r\n            Prefetch(\"school_course\",\r\n                     school_course_query_set),\r\n            # ------------------------------------------------------------------\r\n            # School Course -> School Lesson\r\n            # ------------------------------------------------------------------\r\n            Prefetch(\"school_course__school_lesson\",\r\n                     school_lesson_query_set),\r\n            # ------------------------------------------------------------------\r\n            # School Course -> School Lesson -> Flash Card Set\r\n            # ------------------------------------------------------------------\r\n            Prefetch(\"school_course__school_lesson__flash_card_set\",\r\n                     flash_card_set_query_set),\r\n            Prefetch(\"school_course__school_lesson__flash_card_set__flash_card\",\r\n                     flash_card_query_set),\r\n            Prefetch(\"school_course__school_lesson__flash_card_set__flash_card__playsheetmusicflashcardmodel\",\r\n                     play_sheet_music_flash_card_query_set),\r\n            Prefetch(\"school_course__school_lesson__flash_card_set__flash_card__playsheetmusicflashcardmodel__sheet_music\",\r\n                     sheet_music_query_set),\r\n            Prefetch(\"school_course__school_lesson__flash_card_set__flash_card__trueorfalseflashcardmodel\",\r\n                     true_or_false_flash_card_query_set),\r\n            # ------------------------------------------------------------------\r\n            # School Resources\r\n            # ------------------------------------------------------------------\r\n            Prefetch(\"flashcardsetmodel_set\",\r\n                     flash_card_set_query_set),\r\n            # ---\r\n            Prefetch(\"flashcardsetmodel_set__flash_card\",\r\n                     flash_card_query_set),\r\n            # ---\r\n            Prefetch(\"flashcardsetmodel_set__flash_card__playsheetmusicflashcardmodel\",\r\n                     play_sheet_music_flash_card_query_set),\r\n            Prefetch(\"flashcardsetmodel_set__flash_card__playsheetmusicflashcardmodel__sheet_music\",\r\n                     sheet_music_query_set),\r\n            # ---\r\n            Prefetch(\"flashcardsetmodel_set__flash_card__trueorfalseflashcardmodel\",\r\n                     true_or_false_flash_card_query_set),\r\n            # ---\r\n            Prefetch(\"sheetmusicmodel_set\",\r\n                     sheet_music_query_set)\r\n        ))\r\n\r\n        schools_queryset = school_models.annotate(\r\n            learner_enrolled_count=Case(\r\n                When(learner_enrolled_school__learner_enrolled_course__learner_enrolled_lesson__is_enrolled=True,\r\n                     then=1),\r\n                default=0,\r\n                output_field=IntegerField()\r\n            ))\r\n\r\n        queryset_to_return = schools_queryset.distinct(\"id\")\r\n\r\n        return queryset_to_return\r\n\r\n    def getBrowseSchoolsData(self, *args, **kwargs):\r\n        \"\"\"Return all Schools that contain lessons with flash card sets.\r\n\r\n        Does not exclude empty sets, just requires that the school has something\r\n        to enroll in\r\n        \"\"\"\r\n        query_set_to_return = SchoolModel.objects.filter(school_lesson__flash_card_set__isnull=False)\r\n\r\n        return query_set_to_return\r\n```\r\n\r\n# Filter Configuration\r\n\r\nThis is the filter configuration I've created\r\n```python\r\nclass SchoolFilter(FilterSet):\r\n    school_name = CharFilter(field_name=\"name\",\r\n                             lookup_expr=\"icontains\")\r\n    # ---\r\n    course_name = CharFilter(field_name=\"school_course__name\",\r\n                             lookup_expr=\"icontains\")\r\n    course_description = CharFilter(field_name=\"school_course__description\",\r\n                                    lookup_expr=\"icontains\")\r\n    # ---\r\n    lesson_name = CharFilter(field_name=\"school_lesson__name\",\r\n                             lookup_expr=\"icontains\")\r\n    lesson_description = CharFilter(field_name=\"school_lesson__description\",\r\n                                    lookup_expr=\"icontains\")\r\n    # ---\r\n    flash_card_set_name = CharFilter(field_name=\"school_lesson__flash_card_set__name\",\r\n                                     lookup_expr=\"icontains\")\r\n    flash_card_set_description = CharFilter(field_name=\"school_lesson__flash_card_set__description\",\r\n                                            lookup_expr=\"icontains\")\r\n    # ---\r\n    headmaster_username = CharFilter(field_name=\"school_board__school_board_headmaster__learner__user__username\",\r\n                                     lookup_expr=\"icontains\")\r\n    board_member_username = CharFilter(field_name=\"school_board__school_board_member__learner__user__username\",\r\n                                       lookup_expr=\"icontains\")\r\n\r\n    # See:\r\n    # https://django-filter.readthedocs.io/en/stable/ref/filters.html#orderingfilter\r\n    order_by = OrderingFilter(\r\n        # tuple-mapping retains order\r\n        fields=(\r\n            (\"learner_enrolled_count\", \"learner_enrolled_count\"),\r\n        ),\r\n\r\n        # labels do not need to retain order\r\n        field_labels={\r\n            \"learner_enrolled_count\": \"Total learners enrolled in school\",\r\n        }\r\n    )\r\n\r\n    class Meta:\r\n        model = SchoolModel\r\n        fields = [\r\n            \"school_name\",\r\n            # ---\r\n            \"course_name\",\r\n            \"course_description\",\r\n            # ---\r\n            \"lesson_name\",\r\n            \"lesson_description\",\r\n            # ---\r\n            \"headmaster_username\",\r\n            \"board_member_username\"\r\n        ]\r\n```\r\n\r\n# Request For Help\r\n\r\nI'm not sure really where to solve this. I thought I was being clever by using the default `SchoolModel`'s `get_queryset` to return only distinct instances, but I guess that's mucking with how `django-filter` solves this?\r\n\r\nI thought that the `distinct` keyword in the `django-filter` library might help, but that's only for field specific information. Whereas I need it to be `distinct` on the model that's specified in the `FilterSet`'s `Meta` section.\r\n\r\nAm I misunderstanding something? I would appreciate any guidance on how to resolve this.\r\n\r\nThank you again for everything!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1253", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1253/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1253/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1253/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1253", "id": 677254296, "node_id": "MDU6SXNzdWU2NzcyNTQyOTY=", "number": 1253, "title": "Package Version compatible with Django 3.1", "user": {"login": "domdinicola", "id": 2621572, "node_id": "MDQ6VXNlcjI2MjE1NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2621572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domdinicola", "html_url": "https://github.com/domdinicola", "followers_url": "https://api.github.com/users/domdinicola/followers", "following_url": "https://api.github.com/users/domdinicola/following{/other_user}", "gists_url": "https://api.github.com/users/domdinicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/domdinicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domdinicola/subscriptions", "organizations_url": "https://api.github.com/users/domdinicola/orgs", "repos_url": "https://api.github.com/users/domdinicola/repos", "events_url": "https://api.github.com/users/domdinicola/events{/privacy}", "received_events_url": "https://api.github.com/users/domdinicola/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-11T23:04:06Z", "updated_at": "2020-08-12T12:41:33Z", "closed_at": "2020-08-12T12:41:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "@carltongibson do you have any idea of when next version would be released?\r\nThanks!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1250", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1250/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1250/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1250/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1250", "id": 663235804, "node_id": "MDU6SXNzdWU2NjMyMzU4MDQ=", "number": 1250, "title": "NullBooleanField is Deprecated in Django 3.1 Removed in Django 4.0", "user": {"login": "smithdc1", "id": 39445562, "node_id": "MDQ6VXNlcjM5NDQ1NTYy", "avatar_url": "https://avatars1.githubusercontent.com/u/39445562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smithdc1", "html_url": "https://github.com/smithdc1", "followers_url": "https://api.github.com/users/smithdc1/followers", "following_url": "https://api.github.com/users/smithdc1/following{/other_user}", "gists_url": "https://api.github.com/users/smithdc1/gists{/gist_id}", "starred_url": "https://api.github.com/users/smithdc1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smithdc1/subscriptions", "organizations_url": "https://api.github.com/users/smithdc1/orgs", "repos_url": "https://api.github.com/users/smithdc1/repos", "events_url": "https://api.github.com/users/smithdc1/events{/privacy}", "received_events_url": "https://api.github.com/users/smithdc1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-21T18:54:54Z", "updated_at": "2020-08-12T18:06:40Z", "closed_at": "2020-08-12T18:06:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Following the fix for `url()` there is one remaining Warning showing in [Travis.](https://travis-ci.org/github/carltongibson/django-filter/jobs/710248454)\r\n\r\n```\r\nWARNINGS:\r\ntests.User.is_employed: (fields.W903) NullBooleanField is deprecated. Support for it (except in historical migrations) will be removed in Django 4.0.\r\n\tHINT: Use BooleanField(null=True) instead.\r\n```\r\nIt's being generated by this line here\r\n\r\nhttps://github.com/carltongibson/django-filter/blob/52eece7b3b89109232669697c53e1b3001a9879b/tests/models.py#L50\r\n\r\nAs previous versions of Django will need to be supported for some time I investigated trying to [Temporarily suppress warnings](https://docs.python.org/3/library/warnings.html#temporarily-suppressing-warnings). But fell short of a solution that worked. Sorry I've not been able to find a solution for this. \r\n\r\nMore than happy to look further if someone can point me in the right direction as I'm missing something. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1245", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1245/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1245/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1245/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1245", "id": 660212772, "node_id": "MDU6SXNzdWU2NjAyMTI3NzI=", "number": 1245, "title": "Unclear error when configuring filters ", "user": {"login": "affonsobrian", "id": 20006012, "node_id": "MDQ6VXNlcjIwMDA2MDEy", "avatar_url": "https://avatars1.githubusercontent.com/u/20006012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/affonsobrian", "html_url": "https://github.com/affonsobrian", "followers_url": "https://api.github.com/users/affonsobrian/followers", "following_url": "https://api.github.com/users/affonsobrian/following{/other_user}", "gists_url": "https://api.github.com/users/affonsobrian/gists{/gist_id}", "starred_url": "https://api.github.com/users/affonsobrian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/affonsobrian/subscriptions", "organizations_url": "https://api.github.com/users/affonsobrian/orgs", "repos_url": "https://api.github.com/users/affonsobrian/repos", "events_url": "https://api.github.com/users/affonsobrian/events{/privacy}", "received_events_url": "https://api.github.com/users/affonsobrian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-18T15:30:29Z", "updated_at": "2020-08-08T05:58:11Z", "closed_at": "2020-08-08T05:58:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is not really a bug, but it is something that makes a programming error to be a little bit unclear.\r\nWhen creating a Filter class such as the following:                             \r\n```python                                                                       \r\nclass EngineFilter(filters.FilterSet):                                          \r\n    class Meta:                                                                 \r\n        model = Engine                                                          \r\n        fields = {\"model\": [\"exact\"], \"brand\": [\"exact\"]}                      \r\n```                                                                             \r\n                                                                                \r\nif for some reason you forget to use a tuple, set, or a list and leave it as a string like the following example:\r\n                                                                                \r\n```python                                                                       \r\nclass EngineFilter(filters.FilterSet):                                          \r\n    class Meta:                                                                 \r\n        model = Engine                                                          \r\n        fields = {\"model\": [\"exact\"], \"brand\": \"exact\"}                        \r\n```                                                                             \r\n                                                                                \r\nIt will raise an error saying that the _brand_ attribute cannot be searched by 'e'.\r\n                                                                                \r\nThis happens because the library tries to iterate through the string and the first element is _e_ which is not valid.\r\n                                                                                \r\nA solution for this would be a validation that raises an exception if the value is a incorrect type and explains that you must pass one of those valid types instead of the used type (in this example string).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1244", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1244/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1244/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1244/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1244", "id": 660007224, "node_id": "MDU6SXNzdWU2NjAwMDcyMjQ=", "number": 1244, "title": "Unclear Usage For `OrderingFilter` and Calculated Fields", "user": {"login": "loganknecht", "id": 1308524, "node_id": "MDQ6VXNlcjEzMDg1MjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1308524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loganknecht", "html_url": "https://github.com/loganknecht", "followers_url": "https://api.github.com/users/loganknecht/followers", "following_url": "https://api.github.com/users/loganknecht/following{/other_user}", "gists_url": "https://api.github.com/users/loganknecht/gists{/gist_id}", "starred_url": "https://api.github.com/users/loganknecht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loganknecht/subscriptions", "organizations_url": "https://api.github.com/users/loganknecht/orgs", "repos_url": "https://api.github.com/users/loganknecht/repos", "events_url": "https://api.github.com/users/loganknecht/events{/privacy}", "received_events_url": "https://api.github.com/users/loganknecht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-18T08:32:48Z", "updated_at": "2020-07-19T08:19:00Z", "closed_at": "2020-07-19T08:18:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Gratitude\r\n\r\nHello there!\r\n\r\nIt has been such a pleasure using this library! I'm so thrilled about all the convenience it offers!\r\n\r\nThank you for that!\r\n\r\n# Goal\r\n\r\nMy goal right now is I want to have an endpoint that supports search-ability on model parameters, and ordering as well.\r\n\r\n# Data Model\r\n\r\nI have a `School` model that has a calculated field on it called `learner_enrolled_count`\r\n\r\nThe JSON response looks something like this:\r\n```javascript\r\n{\r\n    \"schools\": [\r\n        {\r\n            \"id\": 6,\r\n            \"name\": \"Piano Gym Six\",\r\n            \"courses\": [\r\n                // ...\r\n            ],\r\n            \"learner_enrolled_count\": 0\r\n        },\r\n        {\r\n            \"id\": 7,\r\n            \"name\": \"Piano Gym Seven\",\r\n            \"courses\": [\r\n                // ...\r\n            ],\r\n            \"learner_enrolled_count\": 5\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nThe `learner_enrolled_count` is a calculated field.\r\n\r\n# The Problem\r\n\r\nI have read the documentation here:\r\nhttps://django-filter.readthedocs.io/en/stable/ref/filters.html?highlight=order#orderingfilter\r\nand here:\r\nhttps://django-filter.readthedocs.io/en/stable/ref/filters.html?highlight=order#adding-custom-filter-choices\r\n\r\nSo based on that I wrote this filter set here:\r\n```python\r\n# ------------------------------------------------------------------------------\r\n# Python Standard Libraries\r\n# ------------------------------------------------------------------------------\r\n# N/A\r\n# ------------------------------------------------------------------------------\r\n# Third-party Libraries\r\n# ------------------------------------------------------------------------------\r\nfrom django_filters import CharFilter\r\nfrom django_filters import OrderingFilter\r\nfrom django_filters.rest_framework import FilterSet\r\n# ------------------------------------------------------------------------------\r\n# Custom Libraries\r\n# ------------------------------------------------------------------------------\r\nfrom piano_gym_api.versions.v1.models.school_model import SchoolModel\r\n\r\n# See:\r\n# https://django-filter.readthedocs.io/en/stable/ref/filters.html#adding-custom-filter-choices\r\nclass SchoolOrderingFilter(OrderingFilter):\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.extra[\"choices\"] += [\r\n            (\"learner_enrolled_count\", \"Learner Enrolled Count\"),\r\n            (\"-learner_enrolled_count\", \"Learner Enrolled Count (descending)\"),\r\n        ]\r\n\r\n    def filter(self, query_set, values):\r\n        if(values is None):\r\n            return super().filter(query_set, values)\r\n\r\n        for value in values:\r\n            if value in ['learner_enrolled_count', '-learner_enrolled_count']:\r\n                return query_set.order_by(value)\r\n\r\n        return super().filter(query_set, values)\r\n\r\n\r\nclass SchoolFilter(FilterSet):\r\n    school_name = CharFilter(field_name=\"name\",\r\n                             lookup_expr=\"icontains\")\r\n    # ---\r\n    course_name = CharFilter(field_name=\"school_course__name\",\r\n                             lookup_expr=\"icontains\")\r\n    course_description = CharFilter(field_name=\"school_course__description\",\r\n                                    lookup_expr=\"icontains\")\r\n    # ---\r\n    lesson_name = CharFilter(field_name=\"school_lesson__name\",\r\n                             lookup_expr=\"icontains\")\r\n    lesson_description = CharFilter(field_name=\"school_lesson__description\",\r\n                                    lookup_expr=\"icontains\")\r\n    # ---\r\n    flash_card_set_name = CharFilter(field_name=\"school_lesson__flash_card_set__name\",\r\n                                     lookup_expr=\"icontains\")\r\n    flash_card_set_description = CharFilter(field_name=\"school_lesson__flash_card_set__description\",\r\n                                            lookup_expr=\"icontains\")\r\n    # ---\r\n    headmaster_username = CharFilter(field_name=\"school_board__school_board_headmaster__learner__user__username\",\r\n                                     lookup_expr=\"icontains\")\r\n    board_member_username = CharFilter(field_name=\"school_board__school_board_member__learner__user__username\",\r\n                                       lookup_expr=\"icontains\")\r\n\r\n    # See:\r\n    # https://django-filter.readthedocs.io/en/stable/ref/filters.html#orderingfilter\r\n    o = SchoolOrderingFilter(\r\n        # tuple-mapping retains order\r\n        fields=(\r\n            (\"learner_enrolled_count\", \"learner_enrolled_count\"),\r\n        ),\r\n\r\n        # labels do not need to retain order\r\n        field_labels={\r\n            \"learner_enrolled_count\": \"Total learners enrolled in school\",\r\n        }\r\n    )\r\n\r\n    class Meta:\r\n        model = SchoolModel\r\n        fields = [\r\n            \"school_name\",\r\n            # ---\r\n            \"course_name\",\r\n            \"course_description\",\r\n            # ---\r\n            \"lesson_name\",\r\n            \"lesson_description\",\r\n            # ---\r\n            \"headmaster_username\",\r\n            \"board_member_username\"\r\n        ]\r\n```\r\n\r\nThis issue is that it doesn't seem to be ordering at all! I have no idea why. It's so strange.\r\n\r\nIf I drop a debug trace into the `filter` method of `SchoolOrderingFilter` I see that `values` is `None`. I'm not sure what that should be.\r\n\r\n\r\nThe request I'm making looks like this\r\n`{{API_URL}}/api/v1/schools/?offset=5&limit=3&ordering=learner_enrolled_count`\r\n\r\nAnd the view that receives this request looks like this:\r\n```python\r\nclass SchoolViewSet(ViewSet):\r\n    # ...\r\n\r\n    def list(self, request):\r\n        all_school_models = SchoolModel.objects.getBrowseSchoolsData()\r\n\r\n        school_filter = SchoolFilter(request.GET, queryset=all_school_models)\r\n\r\n        paginator = HeaderLinkPagination()\r\n        current_page_results = paginator.paginate_queryset(school_filter.qs,\r\n                                                           request)\r\n\r\n        all_schools_serializer = SchoolSerializer(current_page_results,\r\n                                                  many=True)\r\n        response_data = {\r\n            \"schools\": all_schools_serializer.data\r\n        }\r\n\r\n        response_to_return = paginator.get_paginated_response(response_data)\r\n        return response_to_return\r\n```\r\n\r\n# The Questions\r\n\r\nI think it's really unclear for me in the documentation on how to use the filtering feature AND how to use the calculated field ordering.\r\n\r\nWhat am I doing wrong? Am I misunderstanding this functionality? I feel like I'm performing the correct steps for this, but just can't seem to get the `ordering` functionality of this library working!\r\n\r\nAgain, thanks for everything!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1243", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1243/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1243/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1243/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1243", "id": 658899144, "node_id": "MDU6SXNzdWU2NTg4OTkxNDQ=", "number": 1243, "title": "Fix isort config and CI for version 5", "user": {"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-17T05:58:42Z", "updated_at": "2020-07-20T14:31:45Z", "closed_at": "2020-07-20T14:31:45Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Grrrr. Breaking changes. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1242", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1242/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1242/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1242/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1242", "id": 658493020, "node_id": "MDU6SXNzdWU2NTg0OTMwMjA=", "number": 1242, "title": "get_schema_fields doesn't provide a way to add descriptions for filters", "user": {"login": "lpulley", "id": 7193187, "node_id": "MDQ6VXNlcjcxOTMxODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7193187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpulley", "html_url": "https://github.com/lpulley", "followers_url": "https://api.github.com/users/lpulley/followers", "following_url": "https://api.github.com/users/lpulley/following{/other_user}", "gists_url": "https://api.github.com/users/lpulley/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpulley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpulley/subscriptions", "organizations_url": "https://api.github.com/users/lpulley/orgs", "repos_url": "https://api.github.com/users/lpulley/repos", "events_url": "https://api.github.com/users/lpulley/events{/privacy}", "received_events_url": "https://api.github.com/users/lpulley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-16T19:25:38Z", "updated_at": "2020-07-22T15:40:57Z", "closed_at": "2020-07-22T15:40:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using DRF to generate a schema for my API. Several of my views have filters on them, but there seems to be no way for me to define a description for each field. Thus, I'm left with documentation like this:\r\n\r\n![image](https://user-images.githubusercontent.com/7193187/87713393-bb8b7e80-c76f-11ea-8ee2-9e062c09be0d.png)\r\n\r\n(The `mission` parameter is a filter, but the docs don't indicate that in any way. \"mission\" is not a good description of the parameter `mission`.)\r\n\r\nOther things in the schema generation seem to use docstrings as descriptions for fields. But I'm not sure what the best way is. Unless there *is* already a way to set schema descriptions on filters and I'm missing it somehow?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1241", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1241/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1241/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1241/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1241", "id": 657806018, "node_id": "MDU6SXNzdWU2NTc4MDYwMTg=", "number": 1241, "title": "ValidationError using parameters with invalid UUID ", "user": {"login": "CleitonDeLima", "id": 4956372, "node_id": "MDQ6VXNlcjQ5NTYzNzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4956372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleitonDeLima", "html_url": "https://github.com/CleitonDeLima", "followers_url": "https://api.github.com/users/CleitonDeLima/followers", "following_url": "https://api.github.com/users/CleitonDeLima/following{/other_user}", "gists_url": "https://api.github.com/users/CleitonDeLima/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleitonDeLima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleitonDeLima/subscriptions", "organizations_url": "https://api.github.com/users/CleitonDeLima/orgs", "repos_url": "https://api.github.com/users/CleitonDeLima/repos", "events_url": "https://api.github.com/users/CleitonDeLima/events{/privacy}", "received_events_url": "https://api.github.com/users/CleitonDeLima/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-07-16T03:04:44Z", "updated_at": "2020-08-20T19:37:37Z", "closed_at": "2020-08-08T19:02:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I have a model where the id is UUID, using `ModelMultipleChoiceFilter` or `ModelChoiceFilter`, making a request with an invalid UUID happens the error, example: \r\n\r\n```\r\nGET: ...path/?related_field=xxxxxxx\r\n```\r\n\r\n```python\r\nValidationError: '\u201cxxxxxxx\u201d is not a valid UUID.'\r\n```\r\n\r\nIs this behavior expected?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1235", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1235/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1235/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1235/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1235", "id": 642854212, "node_id": "MDU6SXNzdWU2NDI4NTQyMTI=", "number": 1235, "title": "Cannot Filter Reverse Foreign Key ", "user": {"login": "loganknecht", "id": 1308524, "node_id": "MDQ6VXNlcjEzMDg1MjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1308524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loganknecht", "html_url": "https://github.com/loganknecht", "followers_url": "https://api.github.com/users/loganknecht/followers", "following_url": "https://api.github.com/users/loganknecht/following{/other_user}", "gists_url": "https://api.github.com/users/loganknecht/gists{/gist_id}", "starred_url": "https://api.github.com/users/loganknecht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loganknecht/subscriptions", "organizations_url": "https://api.github.com/users/loganknecht/orgs", "repos_url": "https://api.github.com/users/loganknecht/repos", "events_url": "https://api.github.com/users/loganknecht/events{/privacy}", "received_events_url": "https://api.github.com/users/loganknecht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-06-22T08:10:23Z", "updated_at": "2020-06-23T18:56:03Z", "closed_at": "2020-06-23T00:45:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Introduction\r\n\r\nHello! Thank you so much for this library! It has been such a pleasure to test it with my current API!\r\n\r\n# Current Goal\r\n\r\nI have two models, a `School` and a `SchoolCourse`. `SchoolCourse` has a reverse many to one relationship to `School`.\r\n\r\nI want to be able to filter the `School` object based on the `name` of the `SchoolCourse`\r\n\r\nAdditionally as a stretch goal, I would love to be able to filter by `SchoolLesson` eventually as well.\r\n\r\n# Data Model\r\n\r\n## School Model\r\n```python\r\nclass SchoolModel(Model):\r\n    name = CharField(max_length=24, unique=True)\r\n\r\n    REQUIRED_FIELDS = [\"name\"]\r\n\r\n    class Meta:\r\n        ordering = (\"id\",)\r\n\r\n    def get_courses(self):\r\n        school_courses = SchoolCourseModel.objects.filter(school=self)\r\n        return school_courses\r\n```\r\n\r\n## School Course\r\n```python\r\nclass SchoolCourseModel(Model):\r\n    description = CharField(default=\"\", max_length=200)\r\n    name = CharField(max_length=50)\r\n    school = ForeignKey(SchoolModel,\r\n                        related_name=\"school_course\",\r\n                        on_delete=CASCADE)\r\n\r\n    REQUIRED_FIELDS = [\"school\", \"name\"]\r\n\r\n    class Meta:\r\n        ordering = (\"id\",)\r\n        unique_together = (\"school\", \"name\",)\r\n\r\n    def get_lessons(self):\r\n        school_lessons = SchoolLessonModel.objects.filter(course=self)\r\n        return school_lessons\r\n```\r\n\r\nWhich - if you play with these models in the debug view you'll see this\r\n\r\n```python\r\nall_school_models[50].school_course\r\n(Pdb++) <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x10a8177d0>\r\nall_school_models[50].school_course.all()\r\n(Pdb++) <QuerySet [<SchoolCourseModel: SchoolCourseModel object (151)>, <SchoolCourseModel: SchoolCourseModel object (152)>, <SchoolCourseModel: SchoolCourseModel object (153)>]>\r\nall_school_models[50].school_course.all()[0]\r\n(Pdb++) <SchoolCourseModel: SchoolCourseModel object (151)>\r\nall_school_models[50].school_course.all()[0].name\r\n(Pdb++) 'Nihongo Course One'\r\n```\r\n\r\n# Filter Configuration\r\n\r\nThe filter I made seems fairly straight-forward.\r\n\r\n```Python\r\nclass SchoolFilter(FilterSet):\r\n    school_name = CharFilter(field_name=\"name\",\r\n                             lookup_expr=\"icontains\")\r\n    # ---\r\n    course_name = CharFilter(field_name=\"school_course__name\",\r\n                             lookup_expr=\"icontains\")\r\n    course_description = CharFilter(field_name=\"school_course__description\",\r\n                                    lookup_expr=\"icontains\")\r\n\r\n    class Meta:\r\n        model = SchoolModel\r\n        fields = [\r\n            \"school_name\",\r\n            # ---\r\n            \"course_name\",\r\n            \"course_description\"\r\n        ]\r\n```\r\n\r\n# Problem\r\n\r\nHowever this does not work. If I make this request:\r\n`{{API_URL}}/api/v1/schools/?course_name=Nihongo`\r\n\r\nI get this back as a response\r\n```json\r\n{\r\n    \"schools\": []\r\n}\r\n```\r\n\r\n# Questions\r\n\r\nWhat am I doing wrong here?\r\n\r\nAm I misinterpreting django-filters? Am I misinterpreting how to connect the data models?\r\n\r\nAny guidance is appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1232", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1232/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1232/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1232/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1232", "id": 634280610, "node_id": "MDU6SXNzdWU2MzQyODA2MTA=", "number": 1232, "title": "Filter field rename in FilterSet class no longer works in 2.3", "user": {"login": "Bel-Shazzar", "id": 38129759, "node_id": "MDQ6VXNlcjM4MTI5NzU5", "avatar_url": "https://avatars2.githubusercontent.com/u/38129759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bel-Shazzar", "html_url": "https://github.com/Bel-Shazzar", "followers_url": "https://api.github.com/users/Bel-Shazzar/followers", "following_url": "https://api.github.com/users/Bel-Shazzar/following{/other_user}", "gists_url": "https://api.github.com/users/Bel-Shazzar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bel-Shazzar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bel-Shazzar/subscriptions", "organizations_url": "https://api.github.com/users/Bel-Shazzar/orgs", "repos_url": "https://api.github.com/users/Bel-Shazzar/repos", "events_url": "https://api.github.com/users/Bel-Shazzar/events{/privacy}", "received_events_url": "https://api.github.com/users/Bel-Shazzar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-08T07:19:42Z", "updated_at": "2020-06-12T05:57:01Z", "closed_at": "2020-06-08T17:25:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI have a filter that looks something like this:\r\n```python\r\nclass AwesomeFilter(django_filters.FilterSet):\r\n    shorter_name = django_filters.CharFilter(\r\n        field_name='way_too_long_name__what_were_you_even_thinking')\r\n\r\n    class Meta:\r\n        model = AwesomeModel\r\n        fields = {'shorter_name':['exact']}\r\n```\r\nSince today (as in, update to django-filter 2.3.0) this throws the following error on first import:\r\n`TypeError: 'Meta.fields' must not contain non-model field names: shorter_name`\r\n\r\nIs there a new way to do this or might this be a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1230", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1230/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1230/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1230/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1230", "id": 631434483, "node_id": "MDU6SXNzdWU2MzE0MzQ0ODM=", "number": 1230, "title": "Cannot import name 'FieldDoesNotExist' from 'django.db.models.fields'", "user": {"login": "AbdealiJK", "id": 2200743, "node_id": "MDQ6VXNlcjIyMDA3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2200743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AbdealiJK", "html_url": "https://github.com/AbdealiJK", "followers_url": "https://api.github.com/users/AbdealiJK/followers", "following_url": "https://api.github.com/users/AbdealiJK/following{/other_user}", "gists_url": "https://api.github.com/users/AbdealiJK/gists{/gist_id}", "starred_url": "https://api.github.com/users/AbdealiJK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AbdealiJK/subscriptions", "organizations_url": "https://api.github.com/users/AbdealiJK/orgs", "repos_url": "https://api.github.com/users/AbdealiJK/repos", "events_url": "https://api.github.com/users/AbdealiJK/events{/privacy}", "received_events_url": "https://api.github.com/users/AbdealiJK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-05T09:03:08Z", "updated_at": "2020-06-05T14:39:47Z", "closed_at": "2020-06-05T14:39:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using the latest development django, I get the error:\r\n```\r\nFile \"venv/lib/python3.7/site-packages/django_filters/utils.py\", line 10, in <module>\r\n    from django.db.models.fields import FieldDoesNotExist\r\nImportError: cannot import name 'FieldDoesNotExist' from 'django.db.models.fields' (venv/lib/python3.7/site-packages/django/db/models/fields/__init__.py)\r\n```\r\n\r\nCaused by:\r\nhttps://docs.djangoproject.com/en/dev/releases/3.1/\r\n> The compatibility import of django.core.exceptions.FieldDoesNotExist in django.db.models.fields is removed.\r\n\r\n\r\nWhile that django version is in dev - I thought I'd raise it here", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1228", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1228/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1228/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1228/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1228", "id": 623678161, "node_id": "MDU6SXNzdWU2MjM2NzgxNjE=", "number": 1228, "title": "How to simply add a class (CSS) to django-filter? ", "user": {"login": "alnikolaj", "id": 49072367, "node_id": "MDQ6VXNlcjQ5MDcyMzY3", "avatar_url": "https://avatars2.githubusercontent.com/u/49072367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alnikolaj", "html_url": "https://github.com/alnikolaj", "followers_url": "https://api.github.com/users/alnikolaj/followers", "following_url": "https://api.github.com/users/alnikolaj/following{/other_user}", "gists_url": "https://api.github.com/users/alnikolaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/alnikolaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alnikolaj/subscriptions", "organizations_url": "https://api.github.com/users/alnikolaj/orgs", "repos_url": "https://api.github.com/users/alnikolaj/repos", "events_url": "https://api.github.com/users/alnikolaj/events{/privacy}", "received_events_url": "https://api.github.com/users/alnikolaj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-23T15:02:40Z", "updated_at": "2020-05-27T17:16:11Z", "closed_at": "2020-05-27T17:16:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wish to add CSS classes to my django_filters filter form, nonetheless, I do not manage to get it working and I do somehow try something I either get an error (see below) or it messes with the HTML tag, e.g. a dropdown (select tag) gets converted to a text field, which is not good. \r\n\r\n```\r\n#filters.py\r\nclass OrderFilter(django_filters.FilterSet):\r\n\r\nclass Meta:\r\n    model = Order\r\n    fields = ['order', 'customer', 'status']\r\n    exclude = ['delivery_date']\r\n\r\n#THIS BELOW IS HOW I DO IT IN FORMS.PY - ANY EQUIVALENT FOR DJANGO-FORMS? \r\n    def __init__(self, *args, **kwargs):\r\n        super(ModelForm, self).__init__(*args, **kwargs)\r\n        #apply css to all fields\r\n        for visible in self.visible_fields():\r\n            visible.field.widget.attrs['class']  = 'w-full p-2 bg-gray-100 border border-gray-100'\r\n\r\n        #apply css to individual fields     \r\n        self.fields['order_date'].widget.attrs['class'] = 'flatpickr w-full bg-gray-100'\r\n```\r\n\r\nIs there somehow a possibility to easily add CSS classes to the filter fields as in the above example for the forms.py? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1224", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1224/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1224/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1224/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1224", "id": 620415246, "node_id": "MDU6SXNzdWU2MjA0MTUyNDY=", "number": 1224, "title": "Release new version?", "user": {"login": "TheMcGoose", "id": 4789596, "node_id": "MDQ6VXNlcjQ3ODk1OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4789596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheMcGoose", "html_url": "https://github.com/TheMcGoose", "followers_url": "https://api.github.com/users/TheMcGoose/followers", "following_url": "https://api.github.com/users/TheMcGoose/following{/other_user}", "gists_url": "https://api.github.com/users/TheMcGoose/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheMcGoose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheMcGoose/subscriptions", "organizations_url": "https://api.github.com/users/TheMcGoose/orgs", "repos_url": "https://api.github.com/users/TheMcGoose/repos", "events_url": "https://api.github.com/users/TheMcGoose/events{/privacy}", "received_events_url": "https://api.github.com/users/TheMcGoose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-18T18:26:10Z", "updated_at": "2020-06-05T14:47:30Z", "closed_at": "2020-06-05T14:47:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like there have been a number of changes since the last release https://github.com/carltongibson/django-filter/compare/2.2.0...master\r\n\r\nOne of these is https://github.com/carltongibson/django-filter/pull/1127 without which this library does not work with the latest versions of Django.\r\n\r\n@carltongibson would it be possible to release the current version out to PyPi? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1223", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1223/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1223/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1223/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1223", "id": 620403801, "node_id": "MDU6SXNzdWU2MjA0MDM4MDE=", "number": 1223, "title": "[Filter DRF browsable API filterchoices]", "user": {"login": "gabn88", "id": 7912953, "node_id": "MDQ6VXNlcjc5MTI5NTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/7912953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabn88", "html_url": "https://github.com/gabn88", "followers_url": "https://api.github.com/users/gabn88/followers", "following_url": "https://api.github.com/users/gabn88/following{/other_user}", "gists_url": "https://api.github.com/users/gabn88/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabn88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabn88/subscriptions", "organizations_url": "https://api.github.com/users/gabn88/orgs", "repos_url": "https://api.github.com/users/gabn88/repos", "events_url": "https://api.github.com/users/gabn88/events{/privacy}", "received_events_url": "https://api.github.com/users/gabn88/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-18T18:06:50Z", "updated_at": "2020-05-27T19:07:54Z", "closed_at": "2020-05-27T18:47:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure where to place this issue, so I hope this is the correct place.\r\n\r\nWhen I have filters on foreignkeys, the filter button at the top of the page of the browsable API will show ALL possible choices for the foreign key. With 2,5m rows the loading becomes very slow. But it is also a potential security risk (imagine having names of persons to filter for).\r\n\r\nIn the past I have disabled the browsable API completely because of this, but I would like to start using it again. \r\nWhen I look into filterset.py, the function `remote_queryset(f)` is responsible for creating the queryset. It would be nice if there was an easy way to override this. For example in DRFs serializers I use a SecureSerializerMixin to make sure that nobody creates an object with a related instance they should not be able to view, and also to limit the choices in the browsable API at the same time.\r\n\r\nI think the current way the FilterSet is setup does not allow an easy Mixin-based approach to limit the choices, or am I wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1219", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1219/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1219/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1219/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1219", "id": 618298388, "node_id": "MDU6SXNzdWU2MTgyOTgzODg=", "number": 1219, "title": "Test failure on Django 3.1a1", "user": {"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-14T14:55:09Z", "updated_at": "2020-05-20T10:19:40Z", "closed_at": "2020-05-20T10:19:40Z", "author_association": "OWNER", "active_lock_reason": null, "body": "\r\nThere's a few changes in Django 3.1 around date times and ISO parsing. \r\nhttps://docs.djangoproject.com/en/3.1/releases/3.1/\r\n\r\n[We've got one failure here](https://travis-ci.org/github/carltongibson/django-filter/jobs/687053341#L286-L296): \r\n\r\n```\r\n======================================================================\r\n287FAIL [0.002s]: test_clean (tests.test_fields.IsoDateTimeRangeFieldTests)\r\n288----------------------------------------------------------------------\r\n289Traceback (most recent call last):\r\n290  File \"/home/travis/build/carltongibson/django-filter/.tox/py37-latest/lib/python3.7/site-packages/django/test/utils.py\", line 381, in inner\r\n291    return func(*args, **kwargs)\r\n292  File \"/home/travis/build/carltongibson/django-filter/tests/test_fields.py\", line 107, in test_clean\r\n293    datetime(2015, 1, 10, 7, 45, 2, 345000)))\r\n294AssertionError: slice[26 chars], 1, 10, 30, 1, 123000, tzinfo=datetime.timezo[167 chars]None) != slice[26 chars], 1, 9, 30, 1, 123000), datetime.datetime(2015[28 chars]None)\r\n295\r\n296----------------------------------------------------------------------\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1216", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1216/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1216/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1216/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1216", "id": 615166275, "node_id": "MDU6SXNzdWU2MTUxNjYyNzU=", "number": 1216, "title": "manytomany field filter objects to logged in user", "user": {"login": "MrAlexWinkler", "id": 10102029, "node_id": "MDQ6VXNlcjEwMTAyMDI5", "avatar_url": "https://avatars2.githubusercontent.com/u/10102029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrAlexWinkler", "html_url": "https://github.com/MrAlexWinkler", "followers_url": "https://api.github.com/users/MrAlexWinkler/followers", "following_url": "https://api.github.com/users/MrAlexWinkler/following{/other_user}", "gists_url": "https://api.github.com/users/MrAlexWinkler/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrAlexWinkler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrAlexWinkler/subscriptions", "organizations_url": "https://api.github.com/users/MrAlexWinkler/orgs", "repos_url": "https://api.github.com/users/MrAlexWinkler/repos", "events_url": "https://api.github.com/users/MrAlexWinkler/events{/privacy}", "received_events_url": "https://api.github.com/users/MrAlexWinkler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-09T12:26:59Z", "updated_at": "2020-05-09T12:39:11Z", "closed_at": "2020-05-09T12:39:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to only show associated_portfolios that the logged-in user created but Django-filter is showing all existing portfolios. Not sure how to solve. Showed 2 attempts below. The extra curveball is that the associated_portfolios field in the Trade model is manytomany to the Portfolios model. \r\n\r\nIs this even possible? Maybe I'm missing something super obvious in the documentation. \r\n\r\nhttps://django-filter.readthedocs.io/en/stable/guide/usage.html?highlight=filter(user%3D#filtering-the-related-queryset-for-modelchoicefilter\r\n\r\nfilters.py \r\n\r\n```\r\n#Attempt 1\r\ndef associated_portfolios(request):\r\n    associated_portfolios = Portfolio.objects.filter(user=request.user)\r\n    return associated_portfolios.all()\r\n\r\nclass TradeFilter(django_filters.FilterSet):\r\n    #Attempt 1\r\n    associated_portfolios = django_filters.ModelMultipleChoiceFilter(queryset=associated_portfolios)\r\n\r\n    class Meta:\r\n        model = Trade\r\n        fields = ['status', 'type', 'asset', 'symbol', 'broker', 'patterns', 'associated_portfolios']\r\n\r\n    #Attempt 2\r\n    @property\r\n    def qs(self):\r\n        parent = super(TradeFilter, self).qs\r\n        associated_portfolios = Portfolio.objects.filter(user=self.request.user)\r\n        return parent.filter(associated_portfolios=associated_portfolios)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1214", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1214/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1214/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1214/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1214", "id": 613287596, "node_id": "MDU6SXNzdWU2MTMyODc1OTY=", "number": 1214, "title": "Docs include unreleased features", "user": {"login": "Mist3ry", "id": 33200836, "node_id": "MDQ6VXNlcjMzMjAwODM2", "avatar_url": "https://avatars1.githubusercontent.com/u/33200836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mist3ry", "html_url": "https://github.com/Mist3ry", "followers_url": "https://api.github.com/users/Mist3ry/followers", "following_url": "https://api.github.com/users/Mist3ry/following{/other_user}", "gists_url": "https://api.github.com/users/Mist3ry/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mist3ry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mist3ry/subscriptions", "organizations_url": "https://api.github.com/users/Mist3ry/orgs", "repos_url": "https://api.github.com/users/Mist3ry/repos", "events_url": "https://api.github.com/users/Mist3ry/events{/privacy}", "received_events_url": "https://api.github.com/users/Mist3ry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-06T12:38:55Z", "updated_at": "2020-05-08T22:00:39Z", "closed_at": "2020-05-08T22:00:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone,\r\nim trying to change default lookup expr behavior and i found in official documentation, that this can be done by defining an environment in `settings.py` to do that:\r\n```\r\nFILTERS_DEFAULT_LOOKUP_EXPR = 'contains'\r\n``` \r\nbut this did not bring the expected result, his behavior is still `exact`.  I also noticed that in my `django-filters/conf.py` [that line](https://github.com/carltongibson/django-filter/blob/fbb67b6d8d8a8114c69c16b8eaba81cea68e839e/django_filters/conf.py#L10) is missing.\r\n\r\nVersions that I installed with pip\r\n```\r\ndjango-filter==2.2.0\r\ndjangorestframework==3.11.0\r\npython==3.7.5\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1211", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1211/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1211/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1211/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1211", "id": 611516161, "node_id": "MDU6SXNzdWU2MTE1MTYxNjE=", "number": 1211, "title": "Queries for ModelMultipleChoiceFilter executed twice", "user": {"login": "valentijnscholten", "id": 4426050, "node_id": "MDQ6VXNlcjQ0MjYwNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4426050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valentijnscholten", "html_url": "https://github.com/valentijnscholten", "followers_url": "https://api.github.com/users/valentijnscholten/followers", "following_url": "https://api.github.com/users/valentijnscholten/following{/other_user}", "gists_url": "https://api.github.com/users/valentijnscholten/gists{/gist_id}", "starred_url": "https://api.github.com/users/valentijnscholten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valentijnscholten/subscriptions", "organizations_url": "https://api.github.com/users/valentijnscholten/orgs", "repos_url": "https://api.github.com/users/valentijnscholten/repos", "events_url": "https://api.github.com/users/valentijnscholten/events{/privacy}", "received_events_url": "https://api.github.com/users/valentijnscholten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-03T21:51:47Z", "updated_at": "2020-06-05T19:58:31Z", "closed_at": "2020-05-12T18:59:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am seeing that for every field that is a foreign key, that every query used to populate the dropdown list is executed twice.\r\n\r\nI have stripped down my big filter down to the simplified filter below, and I am still seeing 2 identical queries for prod_type.\r\n\r\nModels:\r\n\r\n```\r\nclass Product(models.Model):\r\n    ...\r\n\tprod_type = models.ForeignKey(Product_Type, related_name='prod_type',\r\n                                  null=True, blank=True, on_delete=models.CASCADE)\r\n\t...\r\n\r\nclass Product_Type(models.Model):\r\n\t...\r\n    name = models.CharField(max_length=255, unique=True)\r\n    updated = models.DateTimeField(auto_now=True, null=True)\r\n    created = models.DateTimeField(auto_now_add=True, null=True)\r\n\r\n    class Meta:\r\n        ordering = ('name',)\r\n\r\n    def __unicode__(self):\r\n        return self.name\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n```\r\n\r\nFilter:\r\n\r\n```\r\nclass ProductFilter2(DojoFilter):\r\n    prod_type = ModelMultipleChoiceFilter(\r\n        queryset=Product_Type.objects.all().order_by('name'),\r\n        label=\"Product Type\")\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        self.user = None\r\n        if 'user' in kwargs:\r\n            self.user = kwargs.pop('user')\r\n\r\n        super(ProductFilter2, self).__init__(*args, **kwargs)\r\n\r\n```\r\nIn a function based view:\r\n\r\n`filter = ProductFilter2(request.GET, queryset=prods, user=request.user)`\r\n\r\nTemplate:\r\n\r\n```\r\n<div class=\"filter-set\">\r\n    <form method=\"get\">\r\n        {{ filter.form.as_p }}\r\n        <input type=\"submit\" />\r\n    </form>\r\n</div>\r\n```\r\n\r\nQueries observed with django debug toolbar:\r\n\r\n```\r\nSELECT `dojo_product_type`.`id`,\r\n       `dojo_product_type`.`name`,\r\n       `dojo_product_type`.`updated`,\r\n       `dojo_product_type`.`created`\r\n  FROM `dojo_product_type`\r\n ORDER BY `dojo_product_type`.`name` ASC\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/4426050/80926681-0add2800-8d99-11ea-95ad-3d902b811dee.png)\r\n\r\n\r\nThe above are just examples, I have at least 5 other models and as many foreign key fields and all seem to trigger two queries per field.\r\n\r\nIt could be something I am overlooking, but I can't almost make my example any simpler. When I remove the prod_type field or remove the form.as_p from the template, both queries dissappear.\r\n\r\nIt happens both with autogenerated filters when using Meta model + fields, but also with a manual filter like the above.\r\n\r\nrequirements.txt:\r\n```\r\ndjango-filter==2.2.0\r\nDjango==2.2.12\r\n```\r\n\r\nBoth queries have an identical stacktrace/traceback:\r\n```\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/contrib/staticfiles/handlers.py in __call__(65)\r\n  return self.application(environ, start_response)\r\n/c/Data/dd/dd/middleware.py in __call__(62)\r\n  response = self.get_response(request)\r\n/c/Data/dd/dd/middleware.py in __call__(47)\r\n  response = self.get_response(request)\r\n/c/Data/dd/dd/product/views.py in product(79)\r\n  'user': request.user})\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/shortcuts.py in render(36)\r\n  content = loader.render_to_string(template_name, context, request, using=using)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/loader.py in render_to_string(62)\r\n  return template.render(context, request)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/backends/django.py in render(61)\r\n  return self.template.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render(171)\r\n  return self._render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/test/utils.py in instrumented_test_render(96)\r\n  return self.nodelist.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render(937)\r\n  bit = node.render_annotated(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render_annotated(904)\r\n  return self.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/loader_tags.py in render(150)\r\n  return compiled_parent._render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/test/utils.py in instrumented_test_render(96)\r\n  return self.nodelist.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render(937)\r\n  bit = node.render_annotated(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render_annotated(904)\r\n  return self.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/loader_tags.py in render(150)\r\n  return compiled_parent._render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/test/utils.py in instrumented_test_render(96)\r\n  return self.nodelist.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render(937)\r\n  bit = node.render_annotated(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render_annotated(904)\r\n  return self.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/loader_tags.py in render(62)\r\n  result = block.nodelist.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render(937)\r\n  bit = node.render_annotated(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render_annotated(904)\r\n  return self.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/loader_tags.py in render(188)\r\n  return template.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render(173)\r\n  return self._render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/test/utils.py in instrumented_test_render(96)\r\n  return self.nodelist.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render(937)\r\n  bit = node.render_annotated(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render_annotated(904)\r\n  return self.render(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in render(987)\r\n  output = self.filter_expression.resolve(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in resolve(671)\r\n  obj = self.var.resolve(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in resolve(796)\r\n  value = self._resolve_lookup(context)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/template/base.py in _resolve_lookup(858)\r\n  current = current()\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/forms/forms.py in as_p(304)\r\n  errors_on_separate_row=True,\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/forms/forms.py in _html_output(243)\r\n  'field_name': bf.html_name,\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/utils/html.py in <lambda>(388)\r\n  klass.__str__ = lambda self: mark_safe(klass_str(self))\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/forms/boundfield.py in __str__(33)\r\n  return self.as_widget()\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/forms/boundfield.py in as_widget(93)\r\n  renderer=self.form.renderer,\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/forms/widgets.py in render(241)\r\n  context = self.get_context(name, value, attrs)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/forms/widgets.py in get_context(678)\r\n  context = super().get_context(name, value, attrs)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/forms/widgets.py in get_context(639)\r\n  context['widget']['optgroups'] = self.optgroups(name, context['widget']['value'], attrs)\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/forms/widgets.py in optgroups(587)\r\n  for index, (option_value, option_label) in enumerate(self.choices):\r\n/home/user/venv_dd/lib/python3.6/site-packages/django_filters/fields.py in __iter__(252)\r\n  for value in iterable:\r\n/home/user/venv_dd/lib/python3.6/site-packages/django/forms/models.py in __iter__(1137)\r\n  for obj in queryset:\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1210", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1210/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1210/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1210/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1210", "id": 610599835, "node_id": "MDU6SXNzdWU2MTA1OTk4MzU=", "number": 1210, "title": "Callable value for queryset on ModelChoiceField not working", "user": {"login": "liquidscorpio", "id": 4113784, "node_id": "MDQ6VXNlcjQxMTM3ODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4113784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liquidscorpio", "html_url": "https://github.com/liquidscorpio", "followers_url": "https://api.github.com/users/liquidscorpio/followers", "following_url": "https://api.github.com/users/liquidscorpio/following{/other_user}", "gists_url": "https://api.github.com/users/liquidscorpio/gists{/gist_id}", "starred_url": "https://api.github.com/users/liquidscorpio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liquidscorpio/subscriptions", "organizations_url": "https://api.github.com/users/liquidscorpio/orgs", "repos_url": "https://api.github.com/users/liquidscorpio/repos", "events_url": "https://api.github.com/users/liquidscorpio/events{/privacy}", "received_events_url": "https://api.github.com/users/liquidscorpio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-01T06:51:43Z", "updated_at": "2020-05-01T12:17:58Z", "closed_at": "2020-05-01T11:12:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Version and environment\r\n- Python 3.7\r\n- Ubuntu 18 LTS\r\n```\r\nDjango==3.0.5\r\ndjango-filter==2.2.0\r\ndjangorestframework==3.10.3\r\n```\r\n\r\n### Steps to reproduce\r\nCreate a filterset as below - the important part is a callable value for queryset other aspects can be adapted.\r\n\r\n```python\r\ndef bar_qs(request):\r\n    return Bar.objects.filter(user=request.user)\r\n\r\nclass FooFilterSet(FilterSet):\r\n    bar = filters.ModelChoiceField(\r\n        to_field_name='uid', queryset=bar_qs)\r\n\r\n    class Meta:\r\n        model = Foo\r\n        fields = ('bar',)\r\n```\r\n\r\n### Expected output\r\nAs per the [docs](https://django-filter.readthedocs.io/en/master/ref/filters.html#modelchoicefilter):\r\n> The queryset argument also supports callable behavior. If a callable is passed, it will be invoked with Filterset.request as its only argument. This allows you to easily filter by properties on the request object without having to override the FilterSet.__init__.\r\n\r\nThe code is consistent with the docs.\r\n\r\n### Actual output\r\nThe django `runserver` command crashes with stack trace. \r\nSee the relevant parts of the stack-trace:\r\n\r\n```\r\n  File \"/app/.venv/lib/python3.7/site-packages/django_filters/fields.py\", line 265, in __init__\r\n    super().__init__(*args, **kwargs)\r\n  File \"/app/.venv/lib/python3.7/site-packages/django/forms/models.py\", line 1181, in __init__\r\n    self.queryset = queryset\r\n  File \"/app/.venv/lib/python3.7/site-packages/django/forms/models.py\", line 1206, in _set_queryset\r\n    self._queryset = None if queryset is None else queryset.all()\r\nAttributeError: 'function' object has no attribute 'all'\r\n```\r\n\r\n### Hints\r\nI had a cursory look at the code and, it seems, handling of `queryset` param is delegated to django-forms and it is not handling callable (I may be wrong here). The relevant code from django package (forms/models.py) below:\r\n```python\r\n    def _set_queryset(self, queryset):\r\n        self._queryset = None if queryset is None else queryset.all()\r\n        self.widget.choices = self.choices\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1209", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1209/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1209/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1209/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1209", "id": 609259665, "node_id": "MDU6SXNzdWU2MDkyNTk2NjU=", "number": 1209, "title": "CharFilter lookup_expr='icontains' lower/upper case for regional characters", "user": {"login": "moreplavec", "id": 6907705, "node_id": "MDQ6VXNlcjY5MDc3MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/6907705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moreplavec", "html_url": "https://github.com/moreplavec", "followers_url": "https://api.github.com/users/moreplavec/followers", "following_url": "https://api.github.com/users/moreplavec/following{/other_user}", "gists_url": "https://api.github.com/users/moreplavec/gists{/gist_id}", "starred_url": "https://api.github.com/users/moreplavec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moreplavec/subscriptions", "organizations_url": "https://api.github.com/users/moreplavec/orgs", "repos_url": "https://api.github.com/users/moreplavec/repos", "events_url": "https://api.github.com/users/moreplavec/events{/privacy}", "received_events_url": "https://api.github.com/users/moreplavec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-29T18:18:04Z", "updated_at": "2020-04-30T17:11:15Z", "closed_at": "2020-04-29T18:41:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to search and ignore upper/lower case for regional characters? For example:\r\n\r\none of my django_filters.FilterSet:\r\n\r\nsurname = django_filters.CharFilter(lookup_expr='icontains')\r\n\r\nbut when i try to search \"\u0161t\", no surname starting \"\u0160t\" (capital) is found. \r\n\r\nI prefer search to be not case sensitive even for regional characters. Or is it possible to define substitutions for my language somehow?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1208", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1208/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1208/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1208/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1208", "id": 609015134, "node_id": "MDU6SXNzdWU2MDkwMTUxMzQ=", "number": 1208, "title": "ModelChoiceFilter and Method not working together", "user": {"login": "s1104373", "id": 32356509, "node_id": "MDQ6VXNlcjMyMzU2NTA5", "avatar_url": "https://avatars0.githubusercontent.com/u/32356509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s1104373", "html_url": "https://github.com/s1104373", "followers_url": "https://api.github.com/users/s1104373/followers", "following_url": "https://api.github.com/users/s1104373/following{/other_user}", "gists_url": "https://api.github.com/users/s1104373/gists{/gist_id}", "starred_url": "https://api.github.com/users/s1104373/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s1104373/subscriptions", "organizations_url": "https://api.github.com/users/s1104373/orgs", "repos_url": "https://api.github.com/users/s1104373/repos", "events_url": "https://api.github.com/users/s1104373/events{/privacy}", "received_events_url": "https://api.github.com/users/s1104373/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T12:24:19Z", "updated_at": "2020-04-29T17:10:09Z", "closed_at": "2020-04-29T17:10:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "The method is not called even if it is present.\r\n\r\nMy code:\r\n```\r\nclass RegistrationFilter(FilterSet):\r\n    include_history = BooleanFilter(method='include_history_filter')\r\n    course = ModelChoiceFilter(queryset=Course.objects.all(), method='course_filter')\r\n    training = ModelChoiceFilter(method='training_filter', queryset=Training.objects.all())\r\n\r\n    class Meta:\r\n        model = Registration\r\n        fields = {\r\n            'first_name': ['exact', 'icontains'],\r\n            'last_name': ['exact', 'icontains'],\r\n            'company': ['exact', 'icontains'],\r\n        }\r\n\r\n    order_by = CustomOrderingFilter(\r\n        fields=(\r\n            ('first_name', 'firstName'),\r\n            ('course_name', 'course'),\r\n            ('company', 'company')\r\n        )\r\n    )\r\n\r\n    def course_filter(self, queryset, name, value):\r\n        logger.debug(name)\r\n        logger.debug(value)\r\n        return queryset.filter(course_name=value.name)\r\n\r\n    def training_filter(self, queryset, name, value):\r\n        logger.debug(name)\r\n        logger.debug(value)\r\n        return queryset\r\n\r\n    def include_history_filter(self, queryset, name, value):\r\n        if value:\r\n            return queryset\r\n        return queryset.filter(\r\n            training_dates__in=TrainingDate.objects.filter(date__gt=datetime.datetime.now())\r\n        ).distinct()\r\n```\r\n\r\nThe logger displays nothing and it does not stop on debug points I put in the method", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1207", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1207/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1207/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1207/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1207", "id": 608467770, "node_id": "MDU6SXNzdWU2MDg0Njc3NzA=", "number": 1207, "title": "Reusing a FilterSet in 2 different but similar models", "user": {"login": "marco-silva0000", "id": 3755075, "node_id": "MDQ6VXNlcjM3NTUwNzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3755075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marco-silva0000", "html_url": "https://github.com/marco-silva0000", "followers_url": "https://api.github.com/users/marco-silva0000/followers", "following_url": "https://api.github.com/users/marco-silva0000/following{/other_user}", "gists_url": "https://api.github.com/users/marco-silva0000/gists{/gist_id}", "starred_url": "https://api.github.com/users/marco-silva0000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marco-silva0000/subscriptions", "organizations_url": "https://api.github.com/users/marco-silva0000/orgs", "repos_url": "https://api.github.com/users/marco-silva0000/repos", "events_url": "https://api.github.com/users/marco-silva0000/events{/privacy}", "received_events_url": "https://api.github.com/users/marco-silva0000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-28T16:53:15Z", "updated_at": "2020-04-29T16:31:08Z", "closed_at": "2020-04-29T16:31:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using django-filter together with django-simple-history which will create a \"HistoryModel\" based on a \"MainModel\".\r\n\r\nOn a DRF list view I'm using Django filter, and on a particular case I want to list the history versions of the data. To do this I changed the queryset to have correct data, but then django-filter raises an exception on DjangoFilterBackend, line 64\r\n\r\n```python\r\nclass DjangoFilterBackend(metaclass=RenameAttributes):\r\n    def get_filterset_class(self, view, queryset=None):\r\n        #\r\n        #\r\n        if filterset_class:\r\n            filterset_model = filterset_class._meta.model\r\n\r\n            # FilterSets do not need to specify a Meta class\r\n            if filterset_model and queryset is not None:\r\n                assert issubclass(queryset.model, filterset_model), \\\r\n                    'FilterSet model %s does not match queryset model %s' % \\\r\n                    (filterset_model, queryset.model)\r\n\r\n            return filterset_class\r\n```\r\n\r\nI get why this check is in place, but I would like to have a way to override it, or to add a set of models to be valid on this filter.\r\n\r\nTo get around this I can duplicate the filter, set the model to the generated history model, and set self.filter_class to the copied model on the view code where I change querysets. I also did it another way that I'll leave here for anyone that needs.\r\n\r\n```python\r\n# this was done in a view's get_queryset method\r\nMainClassHistoryFilter = MainClassFilter\r\nMainClassHistoryFilter._meta.model = MainClassHistoryModel\r\nself.filter_class = MainClassHistoryFilter\r\n```\r\n\r\nSo I write this to ask if this is an appropriate way of hacking this, and if support for this use case would be a nice feature to add.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1201", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1201/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1201/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1201/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1201", "id": 602795977, "node_id": "MDU6SXNzdWU2MDI3OTU5Nzc=", "number": 1201, "title": "Correct Way to Use CSVWidget with CharFilter", "user": {"login": "banagale", "id": 1409710, "node_id": "MDQ6VXNlcjE0MDk3MTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1409710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/banagale", "html_url": "https://github.com/banagale", "followers_url": "https://api.github.com/users/banagale/followers", "following_url": "https://api.github.com/users/banagale/following{/other_user}", "gists_url": "https://api.github.com/users/banagale/gists{/gist_id}", "starred_url": "https://api.github.com/users/banagale/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/banagale/subscriptions", "organizations_url": "https://api.github.com/users/banagale/orgs", "repos_url": "https://api.github.com/users/banagale/repos", "events_url": "https://api.github.com/users/banagale/events{/privacy}", "received_events_url": "https://api.github.com/users/banagale/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-19T19:08:00Z", "updated_at": "2020-05-11T23:50:55Z", "closed_at": "2020-05-11T23:50:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I got this working, but am not sure I'm doing this in the most efficient way.\r\n\r\n**Problem:** How do you return a join of query filters based on multiple comma-separated strings passed in via the url coming from a related object's Charfield?\r\n\r\ni.e.  `/api/facilities/county=Talbot+County%2C+Baltimore+County,%20Howard%20County`\r\n\r\nPrior discussion on this: [in drf](https://github.com/encode/django-rest-framework/pull/2529) and here in #259 and #344.\r\n\r\nMy solution was to add the [CSVWidget](https://django-filter.readthedocs.io/en/master/ref/widgets.html#csvwidget) to the CharFilter, then create a custom class, `MultiValueCharFilter` which inherits `BaseCSVFilter`.\r\n\r\nThen I overrode the base class `Filter`'s [filter()](https://github.com/carltongibson/django-filter/blob/fbb67b6d8d8a8114c69c16b8eaba81cea68e839e/django_filters/filters.py#L139) to join the arbitrary number of querysets resulting from applying the char filter multiple times.\r\n\r\nThis works, but is there a better way to do this? Is this behavior documented already in a helpful way that I missed?\r\n\r\n\r\n`api/filters.py`\r\n```\r\nfrom django_filters.widgets import CSVWidget\r\nfrom django_filters.constants import EMPTY_VALUES\r\n\r\nclass MultiValueCharFilter(filters.BaseCSVFilter, filters.CharFilter):\r\n    \"\"\"\r\n    Custom filter to accept multiple CharFilter strings provided using CSVWidget\r\n    \"\"\"\r\n    def filter(self, qs, value):\r\n        values = value or []\r\n        queryset = None\r\n        for value in values:\r\n            if value in EMPTY_VALUES:\r\n                return qs\r\n            if self.distinct:\r\n                qs = qs.distinct()\r\n            lookup = '%s__%s' % (self.field_name, self.lookup_expr)\r\n            if not queryset:\r\n                queryset = self.get_method(qs)(**{lookup: value})\r\n            else:\r\n                queryset = queryset | self.get_method(qs)(**{lookup: value})\r\n        if not queryset:\r\n            queryset = qs.all()\r\n        return queryset\r\n\r\nclass FacilityFilter(filters.FilterSet):\r\n...\r\n    county = MultiValueCharFilter(\r\n        field_name='county__name',\r\n        label='county', widget=CSVWidget,\r\n        help_text=\"A list of county names, comma separated\",\r\n    )\r\n...\r\n```\r\n`models.py`\r\n```\r\nclass Facility(TimeStampedModel, AuthorStampedModel):\r\n...\r\n    county = models.ForeignKey(County, on_delete=models.SET_NULL, null=True)\r\n...\r\n\r\nclass County(TimeStampedModel):\r\n    name = models.CharField(max_length=100, blank=True, unique=True)\r\n````\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1200", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1200/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1200/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1200/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1200", "id": 602193826, "node_id": "MDU6SXNzdWU2MDIxOTM4MjY=", "number": 1200, "title": "CameraModelFilterSet resolved field 'tags' with 'exact' lookup to an unrecognized field type TaggableManager", "user": {"login": "djjudas21", "id": 604595, "node_id": "MDQ6VXNlcjYwNDU5NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/604595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djjudas21", "html_url": "https://github.com/djjudas21", "followers_url": "https://api.github.com/users/djjudas21/followers", "following_url": "https://api.github.com/users/djjudas21/following{/other_user}", "gists_url": "https://api.github.com/users/djjudas21/gists{/gist_id}", "starred_url": "https://api.github.com/users/djjudas21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djjudas21/subscriptions", "organizations_url": "https://api.github.com/users/djjudas21/orgs", "repos_url": "https://api.github.com/users/djjudas21/repos", "events_url": "https://api.github.com/users/djjudas21/events{/privacy}", "received_events_url": "https://api.github.com/users/djjudas21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-04-17T19:42:48Z", "updated_at": "2020-04-27T20:32:13Z", "closed_at": "2020-04-22T21:35:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been using `django-filter` for a while but I just added `django-taggit` to my project with minimal config as in these two commits, basically just adding a `tags` field to the model `CameraModel`:\r\n* https://github.com/djjudas21/camerahub/commit/fd322cb730dc9146cca366ef41dcc01efeabfcc9\r\n* https://github.com/djjudas21/camerahub/commit/9547319e200d4fc8751e54b7d399ae5989a47753\r\n\r\nStraight away I started getting this error about filters:\r\n\r\n```\r\nCameraModelFilterSet resolved field 'tags' with 'exact' lookup to an unrecognized field type TaggableManager. Try adding an override to 'Meta.filter_overrides'. See: https://django-filter.readthedocs.io/en/master/ref/filterset.html#customise-filter-generation-with-filter-overrides\r\n```\r\n\r\nI followed the advice in the URL in the error and specified `filter_overrides` in the pre-existing FilterSet as below, but this hasn't changed the error. Am I missing something? Thanks\r\n\r\n```py\r\nclass CameraModelFilter(FilterSet):\r\n    class Meta:\r\n        model = CameraModel\r\n        fields = [\r\n            'manufacturer',\r\n            'mount',\r\n            'format',\r\n            'negative_size',\r\n            'body_type',\r\n        ]\r\n        exclude = ['tags']\r\n        filter_overrides = {\r\n            TaggableManager: {\r\n                'filter_class': CharFilter,\r\n                'extra': lambda f: {\r\n                    'lookup_expr': 'icontains',\r\n                },\r\n            },\r\n        }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1199", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1199/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1199/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1199/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1199", "id": 598138283, "node_id": "MDU6SXNzdWU1OTgxMzgyODM=", "number": 1199, "title": "Filter method and lookup expressions", "user": {"login": "Subaku", "id": 1900930, "node_id": "MDQ6VXNlcjE5MDA5MzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1900930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Subaku", "html_url": "https://github.com/Subaku", "followers_url": "https://api.github.com/users/Subaku/followers", "following_url": "https://api.github.com/users/Subaku/following{/other_user}", "gists_url": "https://api.github.com/users/Subaku/gists{/gist_id}", "starred_url": "https://api.github.com/users/Subaku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Subaku/subscriptions", "organizations_url": "https://api.github.com/users/Subaku/orgs", "repos_url": "https://api.github.com/users/Subaku/repos", "events_url": "https://api.github.com/users/Subaku/events{/privacy}", "received_events_url": "https://api.github.com/users/Subaku/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-10T23:25:19Z", "updated_at": "2020-04-13T19:49:05Z", "closed_at": "2020-04-11T04:22:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nSeems like a potential bug. Declaring a method on a field in my FilterSet seems to not do anything under a couple of scenarios.\r\n\r\n1. If the field is a DateTimeField my method is not called\r\n2. If I add any lookup expression to my query it seems to not get called.\r\n\r\nAm I just expecting too much of the method?\r\n\r\nFor reference I had the filter working before without a declared method by defining the following in my Meta:\r\n```\r\nclass Meta:\r\n   model = MyModel\r\n   fields = {\r\n      when_seen: ['gt', 'gte', 'lt', 'lte'],\r\n      ...\r\n   }\r\n```\r\n\r\nWhich worked great. I now need a method so I can customize what happens if the user filters by `__gt` or `__gte`. So I figured I could simple remove the `when_seen` from my meta and declare:\r\n\r\n`when_seen = rest_filters.DateTimeFilter(field_name='when_seen', method='by_when_seen')`\r\n\r\nYet no matter what I do my method does not get called. Any ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1196", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1196/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1196/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1196/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1196", "id": 596985703, "node_id": "MDU6SXNzdWU1OTY5ODU3MDM=", "number": 1196, "title": "how to use modelchoicefilter self?", "user": {"login": "AsheKR", "id": 42999044, "node_id": "MDQ6VXNlcjQyOTk5MDQ0", "avatar_url": "https://avatars2.githubusercontent.com/u/42999044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsheKR", "html_url": "https://github.com/AsheKR", "followers_url": "https://api.github.com/users/AsheKR/followers", "following_url": "https://api.github.com/users/AsheKR/following{/other_user}", "gists_url": "https://api.github.com/users/AsheKR/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsheKR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsheKR/subscriptions", "organizations_url": "https://api.github.com/users/AsheKR/orgs", "repos_url": "https://api.github.com/users/AsheKR/repos", "events_url": "https://api.github.com/users/AsheKR/events{/privacy}", "received_events_url": "https://api.github.com/users/AsheKR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-09T02:59:29Z", "updated_at": "2020-04-20T04:42:20Z", "closed_at": "2020-04-20T04:42:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, everyone!\r\n\r\nI want to use Meta.model ChoiceFilter\r\n\r\n```python\r\nid = filters.ModelChoiceFilter(\r\n  field_name='self',\r\n  queryset=selfModel.objects.all()\r\n)\r\n```\r\n\r\nhow can i use it?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1192", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1192/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1192/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1192/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1192", "id": 585531367, "node_id": "MDU6SXNzdWU1ODU1MzEzNjc=", "number": 1192, "title": "How To Change Query Params Name in Filterset", "user": {"login": "mmohajer9", "id": 34323369, "node_id": "MDQ6VXNlcjM0MzIzMzY5", "avatar_url": "https://avatars1.githubusercontent.com/u/34323369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmohajer9", "html_url": "https://github.com/mmohajer9", "followers_url": "https://api.github.com/users/mmohajer9/followers", "following_url": "https://api.github.com/users/mmohajer9/following{/other_user}", "gists_url": "https://api.github.com/users/mmohajer9/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmohajer9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmohajer9/subscriptions", "organizations_url": "https://api.github.com/users/mmohajer9/orgs", "repos_url": "https://api.github.com/users/mmohajer9/repos", "events_url": "https://api.github.com/users/mmohajer9/events{/privacy}", "received_events_url": "https://api.github.com/users/mmohajer9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-21T16:25:17Z", "updated_at": "2020-04-01T12:50:49Z", "closed_at": "2020-04-01T12:50:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone !\r\n\r\ni'm using django-filter the latest version 2.2.0\r\n\r\nand i'm using it with Django Rest Framework\r\n\r\nmy issue is when i'm using the meta class and fields attribute , then i'm selecting some fields even with relationship path for example :\r\n\r\n```\r\nclass Member(Model):\r\n     user = Foreignkeyfield(User)  # e.g\r\n\r\n\r\nclass Meta:\r\n     model = Member\r\n     fields = [\r\n          \"user__username\"\r\n     ]\r\n\r\n```\r\n\r\nto make a filter based on username \r\n\r\n\r\nand  now the `query param` is `user__username`\r\n\r\nand it is worse for more complex relationships\r\n\r\nfor example\r\n\r\n`post__member__user__username`\r\n\r\nand it's annoying\r\n\r\nplease tell me how to fix this \r\n\r\nTnx", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1188", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1188/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1188/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1188/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1188", "id": 584249002, "node_id": "MDU6SXNzdWU1ODQyNDkwMDI=", "number": 1188, "title": "'property' object has no attribute '_iterable_class'", "user": {"login": "Ch41r0s", "id": 32594277, "node_id": "MDQ6VXNlcjMyNTk0Mjc3", "avatar_url": "https://avatars1.githubusercontent.com/u/32594277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ch41r0s", "html_url": "https://github.com/Ch41r0s", "followers_url": "https://api.github.com/users/Ch41r0s/followers", "following_url": "https://api.github.com/users/Ch41r0s/following{/other_user}", "gists_url": "https://api.github.com/users/Ch41r0s/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ch41r0s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ch41r0s/subscriptions", "organizations_url": "https://api.github.com/users/Ch41r0s/orgs", "repos_url": "https://api.github.com/users/Ch41r0s/repos", "events_url": "https://api.github.com/users/Ch41r0s/events{/privacy}", "received_events_url": "https://api.github.com/users/Ch41r0s/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-19T08:38:10Z", "updated_at": "2020-03-20T01:01:44Z", "closed_at": "2020-03-20T01:01:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to read queryset of filterset with django_pandas.io.read_frame, the error 'property' object has no attribute '_iterable_class' is thrown. I looked into django_filters source code to better address the issue, but couldn't find any lead. I also tried to override both .qs and it's __init__ in my code but couldn't get it to work.\r\n\r\nSteps to reproduce:\r\n\r\nCreate Model as Models.Model\r\nCreate FilterSet as django_filters.FilterSet\r\nCreate a def View, django_pandas.io.read_frame(FilterSet.qs)\r\n\r\nHow can i get a workaround for this issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1179", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1179/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1179/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1179/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1179", "id": 575711758, "node_id": "MDU6SXNzdWU1NzU3MTE3NTg=", "number": 1179, "title": "Regression: DateFilter in combination with lookup_expr fails for models.DateTimeField", "user": {"login": "gabn88", "id": 7912953, "node_id": "MDQ6VXNlcjc5MTI5NTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/7912953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabn88", "html_url": "https://github.com/gabn88", "followers_url": "https://api.github.com/users/gabn88/followers", "following_url": "https://api.github.com/users/gabn88/following{/other_user}", "gists_url": "https://api.github.com/users/gabn88/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabn88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabn88/subscriptions", "organizations_url": "https://api.github.com/users/gabn88/orgs", "repos_url": "https://api.github.com/users/gabn88/repos", "events_url": "https://api.github.com/users/gabn88/events{/privacy}", "received_events_url": "https://api.github.com/users/gabn88/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-04T19:43:51Z", "updated_at": "2020-05-18T20:39:47Z", "closed_at": "2020-03-04T19:52:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using a DateFilter, for example:\r\n\r\n```\r\nclass ModelStatusFilter(django_filters.FilterSet):\r\n    '''\r\n    This filter is used in the views\r\n    '''\r\n\r\n    timestamp__gte = django_filters.DateFilter(\r\n        field_name='timestamp', lookup_expr='gte', widget=CustomDatePicker())\r\n    timestamp__lte = django_filters.DateFilter(\r\n        field_name='timestamp', lookup_expr='lte', widget=CustomDatePicker())\r\n\r\n    class Meta:\r\n        model = ModelStatus\r\n        fields = {\r\n           'timestamp',\r\n            'status'\r\n        }\r\n```\r\n\r\nit used to work before, but since version 2.0 the filter will render fine, but when entering a date you'll get the error: \r\n\r\n```\r\nRuntimeWarning at /yourserver/\r\nDateTimeField ModelStatus.timestamp received a naive datetime (2020-02-25 00:00:00) while time zone support is active.\r\n```\r\n\r\nThis might have to do with the way we migrated from pre-2.0 to the post-2.0 version of this package, but I just expected it to work and I'm not sure how to go forward. \r\n\r\nWe tried the DateRangeFilter, but then we could not get the custom widget in place.\r\nOf course we could write a completely custom filter, but that seems quite a lot of work for something so simple, or am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1173", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1173/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1173/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1173/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1173", "id": 565233541, "node_id": "MDU6SXNzdWU1NjUyMzM1NDE=", "number": 1173, "title": "New release to update PyPI metadata for Django 3.0.", "user": {"login": "AndreyMZ", "id": 9609370, "node_id": "MDQ6VXNlcjk2MDkzNzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9609370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreyMZ", "html_url": "https://github.com/AndreyMZ", "followers_url": "https://api.github.com/users/AndreyMZ/followers", "following_url": "https://api.github.com/users/AndreyMZ/following{/other_user}", "gists_url": "https://api.github.com/users/AndreyMZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreyMZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreyMZ/subscriptions", "organizations_url": "https://api.github.com/users/AndreyMZ/orgs", "repos_url": "https://api.github.com/users/AndreyMZ/repos", "events_url": "https://api.github.com/users/AndreyMZ/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreyMZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-14T10:21:08Z", "updated_at": "2020-06-05T14:41:24Z", "closed_at": "2020-06-05T14:41:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does `django-filter` support Django 3.0?\r\n\r\nIf no, then let this issue be used for tracking the state/progress.\r\n\r\nIf yes, then the page <https://pypi.org/project/django-filter/> should be updated:\r\n- add \"Django :: 3.0\" in the list of _Frameworks_;\r\n- add \"3.0\" in the _Requirements_ section of  _Project description_.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1171", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1171/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1171/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1171/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1171", "id": 561925560, "node_id": "MDU6SXNzdWU1NjE5MjU1NjA=", "number": 1171, "title": "Why no body say i have to crate a file called \"filters.py\"", "user": {"login": "hakanoktay", "id": 34463463, "node_id": "MDQ6VXNlcjM0NDYzNDYz", "avatar_url": "https://avatars3.githubusercontent.com/u/34463463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hakanoktay", "html_url": "https://github.com/hakanoktay", "followers_url": "https://api.github.com/users/hakanoktay/followers", "following_url": "https://api.github.com/users/hakanoktay/following{/other_user}", "gists_url": "https://api.github.com/users/hakanoktay/gists{/gist_id}", "starred_url": "https://api.github.com/users/hakanoktay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hakanoktay/subscriptions", "organizations_url": "https://api.github.com/users/hakanoktay/orgs", "repos_url": "https://api.github.com/users/hakanoktay/repos", "events_url": "https://api.github.com/users/hakanoktay/events{/privacy}", "received_events_url": "https://api.github.com/users/hakanoktay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-07T23:38:19Z", "updated_at": "2020-02-10T02:50:09Z", "closed_at": "2020-02-10T02:50:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "`Why no body say i have to crate a file called \"filters.py\" in document. everything on the fly for newbies!`\r\nsorry for aggressive comments, everything works very well.\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1166", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1166/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1166/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1166/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1166", "id": 555391294, "node_id": "MDU6SXNzdWU1NTUzOTEyOTQ=", "number": 1166, "title": "I can not  paginate the results in django-filter", "user": {"login": "Lifechess", "id": 43080240, "node_id": "MDQ6VXNlcjQzMDgwMjQw", "avatar_url": "https://avatars1.githubusercontent.com/u/43080240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lifechess", "html_url": "https://github.com/Lifechess", "followers_url": "https://api.github.com/users/Lifechess/followers", "following_url": "https://api.github.com/users/Lifechess/following{/other_user}", "gists_url": "https://api.github.com/users/Lifechess/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lifechess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lifechess/subscriptions", "organizations_url": "https://api.github.com/users/Lifechess/orgs", "repos_url": "https://api.github.com/users/Lifechess/repos", "events_url": "https://api.github.com/users/Lifechess/events{/privacy}", "received_events_url": "https://api.github.com/users/Lifechess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-27T07:03:39Z", "updated_at": "2020-01-28T03:42:07Z", "closed_at": "2020-01-28T03:42:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "### my view\r\n\r\n```python\r\ndef post_list(request):\r\n    qs = Post.published.filter(location_id__lte=23225 ).order_by('-created')\r\n    past = timezone.datetime.today() - timezone.timedelta(days=30)\r\n    Post.objects.filter(created__lte=past).delete()\r\n    posts = PostFilter(request.GET, queryset=qs)\r\n    paginator = Paginator(posts.qs, 1)\r\n    page = request.GET.get('page')\r\n    try:\r\n        posts = paginator.page(page)\r\n    except PageNotAnInteger:\r\n        posts = paginator.page(1)\r\n    except EmptyPage:\r\n        posts = paginator.page(paginator.num_pages)\r\n    f = PostFilter(request.GET, queryset=qs) \r\n    context = {\r\n    'filter': f,\r\n    'posts': posts,\r\n    'page': page,\r\n    }\r\n    return render(request, 'ads_on_cafe/post_list.html', context)\r\n```\r\n\r\n### my templates\r\n\r\n`<div class=\"pagination mt-3\">\r\n\r\n    {% with request.get_full_path as querystring %}\r\n        <ul class=\"pagination\">\r\n\r\n            <!-- Previous p section -->\r\n            {% if posts.has_previous %}\r\n                {% if 'title' in querystring %}\r\n                    {% if 'p' in querystring %}\r\n                        <li class=\"page-item {% if posts.number == p %}active{% endif %}\">\r\n                            <a class=\"page-link\" href=\"{{ querystring|slice:\":-7\" }}&page={{ posts.previous_page_number }}\">&laquo;</a>\r\n                        </li>\r\n                    {% else %}\r\n                        <li class=\"page-item {% if posts.number == p %}active{% endif %}\">\r\n                            <a class=\"page-link\" href=\"{{ querystring }}&p={{ posts.previous_page_number }}\">&laquo;</a>\r\n                        </li>\r\n                    {% endif %}\r\n                {% else %}\r\n                    <li class=\"page-item {% if posts.number == p %}active{% endif %}\">\r\n                        <a class=\"page-link\" href=\"?page={{ posts.previous_p_number }}\">&laquo;</a>\r\n                    </li>\r\n                {% endif %}\r\n            {% endif %}\r\n\r\n            <!-- All posts section -->\r\n            {% for p in posts.paginator.page_range|slice:\":9\"  %}\r\n                {% if 'title' in querystring %}\r\n                    {% if 'p' in querystring %}\r\n                        <li class=\"page-item {% if posts.number == p %}active{% endif %}\">\r\n                            <a class=\"page-link\" href=\"{{ querystring|slice:\":-7\" }}&page={{ p }}\">{{ p }}</a>\r\n                        </li>\r\n                    {% else %}\r\n                        <li class=\"page-item {% if posts.number == p %}active{% endif %}\">\r\n                            <a class=\"page-link\" href=\"{{ querystring }}&page={{ p }}\">{{ p }}</a>\r\n                        </li>\r\n                    {% endif %}\r\n                {% else %}\r\n                    <li class=\"page-item {% if posts.number == p %}active{% endif %}\">\r\n                        <a class=\"page-link\" href=\"?page={{ p }}\">{{ p }}</a>\r\n                    </li>\r\n                {% endif %}\r\n            {% endfor %}\r\n\r\n            <!-- Next p section -->\r\n            {% if posts.has_next %}\r\n                {% if 'title' in querystring %}\r\n                    {% if 'p' in querystring %}\r\n                        <li class=\"page-item {% if posts.number == p %}active{% endif %}\">\r\n                            <a class=\"page-link\" href=\"{{ querystring|slice:\":-7\" }}&page={{ posts.next_page_number }}\">&raquo;</a>\r\n                        </li>\r\n                    {% else %}\r\n                        <li class=\"page-item {% if posts.number == p %}active{% endif %}\">\r\n                            <a class=\"page-link\" href=\"{{ querystring }}&page={{ posts.next_page_number }}\">&raquo;</a>\r\n                        </li>\r\n                    {% endif %}\r\n                {% else %}\r\n                    <li class=\"page-item {% if posts.number == p %}active{% endif %}\">\r\n                        <a class=\"page-link\" href=\"?page={{ posts.next_page_number }}\">&raquo;</a>\r\n                    </li>\r\n                {% endif %}\r\n            {% endif %}\r\n\r\n        </ul>\r\n    {% endwith %}\r\n\r\n</div>\r\n`\r\nMaybe my code is in the wrong approach but the documentation doesn't explain pagination", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1162", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1162/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1162/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1162/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1162", "id": 546961172, "node_id": "MDU6SXNzdWU1NDY5NjExNzI=", "number": 1162, "title": "Distinct seems missing on ordering filter", "user": {"login": "PokeTheCiTy", "id": 11784164, "node_id": "MDQ6VXNlcjExNzg0MTY0", "avatar_url": "https://avatars1.githubusercontent.com/u/11784164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PokeTheCiTy", "html_url": "https://github.com/PokeTheCiTy", "followers_url": "https://api.github.com/users/PokeTheCiTy/followers", "following_url": "https://api.github.com/users/PokeTheCiTy/following{/other_user}", "gists_url": "https://api.github.com/users/PokeTheCiTy/gists{/gist_id}", "starred_url": "https://api.github.com/users/PokeTheCiTy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PokeTheCiTy/subscriptions", "organizations_url": "https://api.github.com/users/PokeTheCiTy/orgs", "repos_url": "https://api.github.com/users/PokeTheCiTy/repos", "events_url": "https://api.github.com/users/PokeTheCiTy/events{/privacy}", "received_events_url": "https://api.github.com/users/PokeTheCiTy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-08T16:16:34Z", "updated_at": "2020-08-16T06:05:31Z", "closed_at": "2020-01-08T16:58:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am using ordering filter on M2M Relationship and got deduplication issue.\r\n\r\nLet's work with this example:\r\n```py\r\nclass Track(Model):\r\n    title = Charfield..\r\n    # stuff\r\n\r\nclass Artist(Model):\r\n    name = Charfield()\r\n    tracks = ManyToManyField(Track)\r\n```\r\n\r\nI used OrderingFilter on Track view like this:\r\n```py\r\n    ordering = OrderingFilter(\r\n        fields=(\r\n            (\"title\", \"title\"),\r\n            (\"artists__name\", \"artist\"),\r\n    )\r\n```\r\n\r\nHowever, for songs with more than 1 artist, I got X copy of it where X is the number of artists when I do `?ordering=artist`\r\n\r\nInspecting the code, I found that OrderingFilter inherit ChoiceFilter but reimplement `filter` method.\r\nThus, it does not have `return qs.distinct() if self.distinct else qs` which I think could fix the issue.\r\n\r\nIf I am wrong, can you please provide me a solution because adding kwarg `distinct=True` did not fix it.\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1159", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1159/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1159/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1159/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1159", "id": 539799073, "node_id": "MDU6SXNzdWU1Mzk3OTkwNzM=", "number": 1159, "title": "Document use with Django's Paginator", "user": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-18T16:49:38Z", "updated_at": "2019-12-18T18:19:49Z", "closed_at": "2019-12-18T18:18:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://stackoverflow.com/questions/48546864/django-filter-with-pagination seems to be the de facto documentation source and it's very complicated. I think it would be good to have a small example in the official django-filter docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1157", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1157/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1157/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1157/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1157", "id": 533859385, "node_id": "MDU6SXNzdWU1MzM4NTkzODU=", "number": 1157, "title": "AttributeError on startup when the foreign model is not resolved yet by Django", "user": {"login": "mlorant", "id": 532337, "node_id": "MDQ6VXNlcjUzMjMzNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/532337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlorant", "html_url": "https://github.com/mlorant", "followers_url": "https://api.github.com/users/mlorant/followers", "following_url": "https://api.github.com/users/mlorant/following{/other_user}", "gists_url": "https://api.github.com/users/mlorant/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlorant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlorant/subscriptions", "organizations_url": "https://api.github.com/users/mlorant/orgs", "repos_url": "https://api.github.com/users/mlorant/repos", "events_url": "https://api.github.com/users/mlorant/events{/privacy}", "received_events_url": "https://api.github.com/users/mlorant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-06T09:56:22Z", "updated_at": "2020-03-08T20:41:57Z", "closed_at": "2019-12-06T16:43:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been splitting a models.py file into distincts files in order to clarify my codebase. When I'm referencing my model [using its name instead of its references, due to circular imports](https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.ForeignKey), it breaks on the runserver startup.  Let's suppose I had the following structure before the refactoring:\r\n\r\n    class Group(models.Model):\r\n        some_field = models.ForeignKey(ExternalEntity)\r\n\r\n    class Item(models.Model):\r\n        group = models.ForeignKey(Group)\r\n\r\n    # in some viewsets file\r\n    class ItemFilterSet(FilterSetBase):\r\n        class Meta:\r\n            model = Item\r\n            fields = ['group__some_field',]\r\n\r\n\r\nThis was working great. Replacing ForeignKey(Group) by ForeignKey('Group') gives me:\r\n\r\n    File \"my_project/api/urls.py\", line 7, in <module>\r\n      from orfeo.api import views\r\n    File \"my_project/api/views.py\", line 88, in <module>\r\n      class ItemFilterSet(FilterSetBase):\r\n    File \".venv/MY_PROJECT/lib/python3.7/site-packages/django_filters/filterset.py\", line 71, in __new__\r\n      new_class.base_filters = new_class.get_filters()\r\n    File \".venv/MY_PROJECT/lib/python3.7/site-packages/django_filters/filterset.py\", line 330, in get_filters\r\n      field = get_model_field(cls._meta.model, field_name)\r\n    File \".venv/MY_PROJECT/lib/python3.7/site-packages/django_filters/utils.py\", line 141, in get_model_field\r\n      fields = get_field_parts(model, field_name)\r\n    File \".venv/MY_PROJECT/lib/python3.7/site-packages/django_filters/utils.py\", line 170, in get_field_parts\r\n      opts = field.remote_field.model._meta\r\n    AttributeError: 'str' object has no attribute '_meta'\r\n\r\n\r\nIndeed, the model _may_ not be loaded yet, depending on how Django import the models on the launch of the server.\r\n\r\nI can hopefully fix my problem hopefully by tweaking my structure to allow the import of the Group model in the Item file, but I guess `get_field_parts` might need to handle this case.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1152", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1152/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1152/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1152/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1152", "id": 526667677, "node_id": "MDU6SXNzdWU1MjY2Njc2Nzc=", "number": 1152, "title": "How to implement filtering on PostGres.JsonField", "user": {"login": "arbazkiraak", "id": 13177578, "node_id": "MDQ6VXNlcjEzMTc3NTc4", "avatar_url": "https://avatars2.githubusercontent.com/u/13177578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arbazkiraak", "html_url": "https://github.com/arbazkiraak", "followers_url": "https://api.github.com/users/arbazkiraak/followers", "following_url": "https://api.github.com/users/arbazkiraak/following{/other_user}", "gists_url": "https://api.github.com/users/arbazkiraak/gists{/gist_id}", "starred_url": "https://api.github.com/users/arbazkiraak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arbazkiraak/subscriptions", "organizations_url": "https://api.github.com/users/arbazkiraak/orgs", "repos_url": "https://api.github.com/users/arbazkiraak/repos", "events_url": "https://api.github.com/users/arbazkiraak/events{/privacy}", "received_events_url": "https://api.github.com/users/arbazkiraak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-21T15:29:53Z", "updated_at": "2019-11-22T15:20:11Z", "closed_at": "2019-11-22T15:20:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "`django-filter` works good on all the default fields of Model, but problem comes when we want to work it on postgres fields such as  JSONField\r\n\r\nI have the following model:\r\n\r\n```\r\nfrom django.contrib.postgres.fields import JSONField,ArrayField\r\n\r\nclass MyModel(models.Model):\r\n    j_field = JSONField(blank=True,null=True,default=dict)\r\n```\r\n\r\n`j_field` has data in the following structure:\r\n\r\n```\r\n[{\"name\":\"john\",\"work\":\"developer\"},{\"name\":\"cena\",\"work\":\"teacher\"}]\r\n```\r\n\r\n* How do I filter the results based on `name` or `work` from `j_field` using `django-filter`?\r\n\r\n```\r\nimport django_filters\r\n\r\nclass MyModelFilter(django_filters.FilterSet)\r\n  class Meta:\r\n      model = MyModel \r\n        ...\r\n        ...\r\n        what's next?\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1151", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1151/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1151/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1151/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1151", "id": 523344217, "node_id": "MDU6SXNzdWU1MjMzNDQyMTc=", "number": 1151, "title": "in `filterset.qs` error giving if self.form.cleaned_data has a field which is not in `self.filters`", "user": {"login": "anveshagarwal", "id": 53469788, "node_id": "MDQ6VXNlcjUzNDY5Nzg4", "avatar_url": "https://avatars0.githubusercontent.com/u/53469788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anveshagarwal", "html_url": "https://github.com/anveshagarwal", "followers_url": "https://api.github.com/users/anveshagarwal/followers", "following_url": "https://api.github.com/users/anveshagarwal/following{/other_user}", "gists_url": "https://api.github.com/users/anveshagarwal/gists{/gist_id}", "starred_url": "https://api.github.com/users/anveshagarwal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anveshagarwal/subscriptions", "organizations_url": "https://api.github.com/users/anveshagarwal/orgs", "repos_url": "https://api.github.com/users/anveshagarwal/repos", "events_url": "https://api.github.com/users/anveshagarwal/events{/privacy}", "received_events_url": "https://api.github.com/users/anveshagarwal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-15T09:05:52Z", "updated_at": "2020-03-04T20:04:44Z", "closed_at": "2020-03-04T20:04:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a condition in which my `self.form.cleaned_data` has a field but i dont have `filter` for that.\r\nso in `django-filter==1.1.0` since loop was ran over `filters` https://github.com/carltongibson/django-filter/blob/1.1.0/django_filters/filterset.py#L216\r\nSo it was working fine but in new `django-filter==2.2.0` the loop is running over `form.cleaned_data` https://github.com/carltongibson/django-filter/blob/1.1.0/django_filters/filterset.py#L216 so it is throwing `KeyError` for that field as that field is not in `self.filters`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1149", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1149/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1149/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1149/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1149", "id": 522872844, "node_id": "MDU6SXNzdWU1MjI4NzI4NDQ=", "number": 1149, "title": "how to make django-filter lookup_expr work for JSONField via declarable fields", "user": {"login": "udos", "id": 141107, "node_id": "MDQ6VXNlcjE0MTEwNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/141107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udos", "html_url": "https://github.com/udos", "followers_url": "https://api.github.com/users/udos/followers", "following_url": "https://api.github.com/users/udos/following{/other_user}", "gists_url": "https://api.github.com/users/udos/gists{/gist_id}", "starred_url": "https://api.github.com/users/udos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udos/subscriptions", "organizations_url": "https://api.github.com/users/udos/orgs", "repos_url": "https://api.github.com/users/udos/repos", "events_url": "https://api.github.com/users/udos/events{/privacy}", "received_events_url": "https://api.github.com/users/udos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-14T13:51:18Z", "updated_at": "2019-11-15T18:37:28Z", "closed_at": "2019-11-15T07:01:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "according docs\r\n\r\n - https://django-filter.readthedocs.io/en/master/ref/filterset.html#declaring-filterable-fields\r\n\r\nyou can configure django-filter to apply multiple lookup expressions (`lookup_expr`) to various fields. this is done via declarable fields as following:\r\n\r\n```python\r\nclass UserFilter(django_filters.FilterSet):\r\n    class Meta:\r\n        model = User\r\n        fields = {\r\n            'username': ['exact', 'contains'],\r\n            'last_login': ['exact', 'year__gt'],\r\n        }\r\n```\r\nin my case for field \"elevation\" (JSONField) unfortunately the `lookup_expr` are not applied. it always returns the full result.\r\n\r\nthe code for the filter:\r\n```python\r\n# api/views.py\r\nfrom django import forms\r\nfrom django_filters import rest_framework as drf_filters\r\nfrom segment.models import Segment\r\nfrom rest_framework import filters\r\n\r\n\r\nclass FloatFilter(drf_filters.Filter):\r\n    field_class = forms.FloatField\r\n\r\nclass SegmentFilter(drf_filters.FilterSet):\r\n    elevation = FloatFilter(field_name='data__properties__ele__max')\r\n\r\n    class Meta:\r\n        model = Segment\r\n        fields = {\r\n            'id': ['lt', 'lte', 'gt', 'gte'],\r\n            'elevation': ['lt', 'lte', 'gt', 'gte'],\r\n        }\r\n```\r\nwhich I use in the following viewset:\r\n```python\r\n# api/views.py\r\n\r\nclass SegmentViewSet(viewsets.ReadOnlyModelViewSet):\r\n    queryset = Segment.objects.all()\r\n    serializer_class = serializers.SegmentSerializer\r\n    filter_backends = [filters.OrderingFilter, drf_filters.DjangoFilterBackend]\r\n    filterset_class = SegmentFilter\r\n```\r\nthe serializer is this:\r\n```python\r\n# api/serializers.py\r\nfrom drf_queryfields import QueryFieldsMixin\r\nfrom rest_framework import serializers\r\nfrom segment.models import Segment\r\n\r\n\r\nclass SegmentSerializer(QueryFieldsMixin, serializers.HyperlinkedModelSerializer):\r\n    data = serializers.DictField()\r\n\r\n    class Meta:\r\n        model = Segment\r\n        fields = ['id', 'data']\r\n```\r\n\r\nnote: on field \"id\" the `lookup_expr` *lt*, *lte*, *gt and *gte* are working.\r\n\r\nany ideas why they are not applied on field \"elevation\"?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1144", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1144/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1144/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1144/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1144", "id": 521838127, "node_id": "MDU6SXNzdWU1MjE4MzgxMjc=", "number": 1144, "title": "documentation  issue: filter reference - keyword-only arguments - method", "user": {"login": "udos", "id": 141107, "node_id": "MDQ6VXNlcjE0MTEwNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/141107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udos", "html_url": "https://github.com/udos", "followers_url": "https://api.github.com/users/udos/followers", "following_url": "https://api.github.com/users/udos/following{/other_user}", "gists_url": "https://api.github.com/users/udos/gists{/gist_id}", "starred_url": "https://api.github.com/users/udos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udos/subscriptions", "organizations_url": "https://api.github.com/users/udos/orgs", "repos_url": "https://api.github.com/users/udos/repos", "events_url": "https://api.github.com/users/udos/events{/privacy}", "received_events_url": "https://api.github.com/users/udos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-12T22:23:18Z", "updated_at": "2020-03-04T21:17:45Z", "closed_at": "2020-03-04T21:17:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "the example at \r\n - https://django-filter.readthedocs.io/en/master/ref/filters.html#method\r\n\r\nlooks odd:\r\n\r\n```python\r\n\"\"\"Filter for Books by if books are published or not\"\"\"\r\npublished = BooleanFilter(field_name='published_on', method='filter_published')\r\n\r\ndef filter_published(self, queryset, name, value):\r\n    # construct the full lookup expression.\r\n    lookup = '__'.join([name, 'isnull'])\r\n    return queryset.filter(**{lookup: False})\r\n\r\n    # alternatively, it may not be necessary to construct the lookup.\r\n    return queryset.filter(published_on__isnull=False)\r\n\r\nclass Meta:\r\n    model = Book\r\n    fields = ['published']\r\n```\r\n\r\nthis part:\r\n```python\r\n    return queryset.filter(**{lookup: False})\r\n\r\n    # alternatively, it may not be necessary to construct the lookup.\r\n    return queryset.filter(published_on__isnull=False)\r\n```\r\n\r\nnote: awesome library!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1143", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1143/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1143/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1143/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1143", "id": 521524537, "node_id": "MDU6SXNzdWU1MjE1MjQ1Mzc=", "number": 1143, "title": "Filtering is reaalllllllly slow", "user": {"login": "JeromeDesseaux", "id": 7736777, "node_id": "MDQ6VXNlcjc3MzY3Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7736777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeromeDesseaux", "html_url": "https://github.com/JeromeDesseaux", "followers_url": "https://api.github.com/users/JeromeDesseaux/followers", "following_url": "https://api.github.com/users/JeromeDesseaux/following{/other_user}", "gists_url": "https://api.github.com/users/JeromeDesseaux/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeromeDesseaux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeromeDesseaux/subscriptions", "organizations_url": "https://api.github.com/users/JeromeDesseaux/orgs", "repos_url": "https://api.github.com/users/JeromeDesseaux/repos", "events_url": "https://api.github.com/users/JeromeDesseaux/events{/privacy}", "received_events_url": "https://api.github.com/users/JeromeDesseaux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-12T12:35:10Z", "updated_at": "2020-06-01T17:40:12Z", "closed_at": "2020-02-04T07:04:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi and thanks for this awesome library ! \r\n\r\nI am currently using it in a project and facing a huge problem : adding django-filter multiply render time by 6. \r\n\r\nI went from 700 ms to 5 to 6 seconds. This is really huge. \r\n\r\nI computed the server side render time which is only 0.23s. Measuring requests using django-toolbar makes an honnest 42ms request time. \r\n\r\nThis only concerns templates as soon as I remove the filter form, it's working fine again. This is something related to form rendering. I tried with and without crispy : it is the same. \r\n\r\nI don't know what to do to improve this load time that is not acceptable. \r\n\r\nThanks for your help :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1140", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1140/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1140/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1140/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1140", "id": 513435903, "node_id": "MDU6SXNzdWU1MTM0MzU5MDM=", "number": 1140, "title": "Can I pass two query sets?", "user": {"login": "avanibhatnagar", "id": 25621222, "node_id": "MDQ6VXNlcjI1NjIxMjIy", "avatar_url": "https://avatars0.githubusercontent.com/u/25621222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avanibhatnagar", "html_url": "https://github.com/avanibhatnagar", "followers_url": "https://api.github.com/users/avanibhatnagar/followers", "following_url": "https://api.github.com/users/avanibhatnagar/following{/other_user}", "gists_url": "https://api.github.com/users/avanibhatnagar/gists{/gist_id}", "starred_url": "https://api.github.com/users/avanibhatnagar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avanibhatnagar/subscriptions", "organizations_url": "https://api.github.com/users/avanibhatnagar/orgs", "repos_url": "https://api.github.com/users/avanibhatnagar/repos", "events_url": "https://api.github.com/users/avanibhatnagar/events{/privacy}", "received_events_url": "https://api.github.com/users/avanibhatnagar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2019-10-28T17:04:31Z", "updated_at": "2019-11-15T18:34:16Z", "closed_at": "2019-11-15T18:34:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Django doesn't let me pass two query sets for filtering. \r\n\r\nIn my app, join wasn't working so my final result is generated using two query sets. How can I use two query sets?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1133", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1133/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1133/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1133/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1133", "id": 505583521, "node_id": "MDU6SXNzdWU1MDU1ODM1MjE=", "number": 1133, "title": "adding FilterSet slows down, don't know why", "user": {"login": "littlehome-eugene", "id": 24217396, "node_id": "MDQ6VXNlcjI0MjE3Mzk2", "avatar_url": "https://avatars3.githubusercontent.com/u/24217396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/littlehome-eugene", "html_url": "https://github.com/littlehome-eugene", "followers_url": "https://api.github.com/users/littlehome-eugene/followers", "following_url": "https://api.github.com/users/littlehome-eugene/following{/other_user}", "gists_url": "https://api.github.com/users/littlehome-eugene/gists{/gist_id}", "starred_url": "https://api.github.com/users/littlehome-eugene/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/littlehome-eugene/subscriptions", "organizations_url": "https://api.github.com/users/littlehome-eugene/orgs", "repos_url": "https://api.github.com/users/littlehome-eugene/repos", "events_url": "https://api.github.com/users/littlehome-eugene/events{/privacy}", "received_events_url": "https://api.github.com/users/littlehome-eugene/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-11T01:04:00Z", "updated_at": "2019-10-11T07:41:09Z", "closed_at": "2019-10-11T07:41:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I added pretty basic setting as below, and the ViewSet's view endpoints are somehow really slow (CPU 200ms => 40000ms in django-debug-toolbar .. SQL query time remains the same)\r\n\r\n```\r\n class ReviewThreadFilterSet(filters.FilterSet):\r\n\r\n     class Meta:\r\n         model = ReviewThread\r\n         fields = {\r\n             'user_id': ['exact']\r\n         }\r\n\r\n```\r\nand adding\r\n```\r\n class ReviewThreadViewSet(serializers.ModelViewSet): \r\n     filterset_class = ReviewThreadFilterSet\r\n     filter_backends = [filters.DjangoFilterBackend]\r\n```\r\n\r\n\r\nUnderlying models looks like the following..  \r\n\r\n\r\n```\r\nclass Thread(models.Model):\r\n\r\n    user = ForeignKey(User) \r\n   \r\n\r\nclass ReviewThread(Thread):\r\n   pass\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1132", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1132/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1132/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1132/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1132", "id": 504661952, "node_id": "MDU6SXNzdWU1MDQ2NjE5NTI=", "number": 1132, "title": "Filter by a custom queryset method", "user": {"login": "denizdogan", "id": 50928, "node_id": "MDQ6VXNlcjUwOTI4", "avatar_url": "https://avatars0.githubusercontent.com/u/50928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denizdogan", "html_url": "https://github.com/denizdogan", "followers_url": "https://api.github.com/users/denizdogan/followers", "following_url": "https://api.github.com/users/denizdogan/following{/other_user}", "gists_url": "https://api.github.com/users/denizdogan/gists{/gist_id}", "starred_url": "https://api.github.com/users/denizdogan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denizdogan/subscriptions", "organizations_url": "https://api.github.com/users/denizdogan/orgs", "repos_url": "https://api.github.com/users/denizdogan/repos", "events_url": "https://api.github.com/users/denizdogan/events{/privacy}", "received_events_url": "https://api.github.com/users/denizdogan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-09T13:43:34Z", "updated_at": "2019-12-12T19:22:52Z", "closed_at": "2019-10-09T14:20:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following type of structure right now:\r\n\r\n```py\r\nclass InvoiceQuerySet(models.QuerySet):\r\n    def is_overdue(self, value=True):\r\n        ...\r\n\r\nclass InvoiceManager(models.Manager):\r\n    def get_queryset(self):\r\n        ...\r\n\r\nclass Invoice(models.Model):\r\n    ...\r\n    objects = InvoiceManager.from_queryset(InvoiceQuerySet)()\r\n\r\nclass InvoiceFilterSet(filters.FilterSet):\r\n    overdue = filters.BooleanFilter(method=\"filter_overdue\")\r\n    ...\r\n    def filter_overdue(self, queryset, name, value):\r\n        return queryset.is_overdue(value)\r\n```\r\n\r\nAs you can see, the last method definition just passes the value to a custom queryset method. It would be nice if there was a simpler way to tell django-filter to use the custom queryset method.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1126", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1126/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1126/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1126/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1126", "id": 499386466, "node_id": "MDU6SXNzdWU0OTkzODY0NjY=", "number": 1126, "title": "DjangoFilterBackend not filtering when '__in' filter is an empty list", "user": {"login": "Kurara", "id": 546403, "node_id": "MDQ6VXNlcjU0NjQwMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/546403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kurara", "html_url": "https://github.com/Kurara", "followers_url": "https://api.github.com/users/Kurara/followers", "following_url": "https://api.github.com/users/Kurara/following{/other_user}", "gists_url": "https://api.github.com/users/Kurara/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kurara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kurara/subscriptions", "organizations_url": "https://api.github.com/users/Kurara/orgs", "repos_url": "https://api.github.com/users/Kurara/repos", "events_url": "https://api.github.com/users/Kurara/events{/privacy}", "received_events_url": "https://api.github.com/users/Kurara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-27T11:15:12Z", "updated_at": "2019-10-15T08:55:13Z", "closed_at": "2019-10-15T08:54:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I created a custom backend with a custom query parameter that in base at other model data and calling _compose_list() return a list of current model data that is filled into an ___in_ property:\r\n\r\n```\r\nclass CustomFilterBackend(filters.DjangoFilterBackend):\r\n    \"\"\"\r\n    \"\"\"\r\n    def get_filterset_kwargs(self, request, queryset, view):\r\n        kwargs = super().get_filterset_kwargs(request, queryset, view)\r\n\r\n        if 'custom_filter' in kwargs.get('data'):\r\n            new_dict = kwargs.get('data').copy()\r\n            other_model_data_list = new_dict.pop('custom_filter')\r\n            profiles_list = self._compose_list(other_model_data_list)\r\n            if len(profiles_list) > 0:\r\n                    new_dict['profile__id__in'] = ','.join(\r\n                        str(id) for id in profiles_list\r\n                    )\r\n           else:\r\n                    # This filter does nothing!!!\r\n                    new_dict['profile__id__in'] = ''\r\n\r\n            kwargs['data'] = new_dict\r\n\r\n        return kwargs\r\n```\r\n\r\nThis is working when **profiles_list** is not empty. If it's not empty the queryset it does to database is:\r\n\r\n> SELECT `keyword`.`id`, `keyword`.`profile_id`, `keyword`.`keyword` FROM `keyword` WHERE `keyword`.`profile_id` IN (56, 68)\r\n\r\nBut when **profiles_list** is not empty the query it does instead is:\r\n\r\n> SELECT `keyword`.`id`, `keyword`.`profile_id`, `keyword`.`keyword` FROM `keyword`\r\n\r\nIt should add `keyword`.`profile_id` IN () to query, right?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1123", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1123/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1123/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1123/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1123", "id": 496408582, "node_id": "MDU6SXNzdWU0OTY0MDg1ODI=", "number": 1123, "title": "FilterSet with custom form doesn't filter correctly.", "user": {"login": "lorenzodantonio", "id": 39066537, "node_id": "MDQ6VXNlcjM5MDY2NTM3", "avatar_url": "https://avatars1.githubusercontent.com/u/39066537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorenzodantonio", "html_url": "https://github.com/lorenzodantonio", "followers_url": "https://api.github.com/users/lorenzodantonio/followers", "following_url": "https://api.github.com/users/lorenzodantonio/following{/other_user}", "gists_url": "https://api.github.com/users/lorenzodantonio/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorenzodantonio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorenzodantonio/subscriptions", "organizations_url": "https://api.github.com/users/lorenzodantonio/orgs", "repos_url": "https://api.github.com/users/lorenzodantonio/repos", "events_url": "https://api.github.com/users/lorenzodantonio/events{/privacy}", "received_events_url": "https://api.github.com/users/lorenzodantonio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-20T15:14:40Z", "updated_at": "2019-10-01T09:31:39Z", "closed_at": "2019-10-01T09:31:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need a filter with a custom form (I want to specify the widgets for each field).\r\nFrom the documentation there seems to be the possibility to specify a form attribute in the meta class of the FilterSet.\r\n\r\n```\r\nclass TestForm(ModelForm):\r\n\r\n    class Meta:\r\n        model = Model1\r\n        fields = ['field_1', 'field_2', 'field_3']\r\n        widgets = {\r\n            'field_1': ModelSelect2(url='url'))\r\n        }\r\n\r\n\r\nclass TestFilterset(FilterSet):\r\n\r\n    class Meta:\r\n        form = TestForm\r\n```\r\n\r\nThe form renders correctly (with the widgets I chose) but when I try to filter the queryset the behaviour of the FilterSet is aberrant: if the filtered queryset would normally be empty I receive a KeyError else I get an empty result.\r\n\r\n![key_error](https://user-images.githubusercontent.com/39066537/65337411-5ce58a80-dbc8-11e9-926b-0a8b3e7deaca.PNG)\r\n\r\nTrying to debug the problem I noticed that the content of self.filters is an empty OrderedDict in the KeyError case.\r\n\r\nI also tried to specify the Model and the fields in the Meta of the FilterSet but my custom form\r\nis overwritten.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1120", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1120/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1120/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1120/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1120", "id": 493389752, "node_id": "MDU6SXNzdWU0OTMzODk3NTI=", "number": 1120, "title": "Add support for Unix Epoch datetime filter", "user": {"login": "anudeepsamaiya", "id": 3428221, "node_id": "MDQ6VXNlcjM0MjgyMjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3428221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anudeepsamaiya", "html_url": "https://github.com/anudeepsamaiya", "followers_url": "https://api.github.com/users/anudeepsamaiya/followers", "following_url": "https://api.github.com/users/anudeepsamaiya/following{/other_user}", "gists_url": "https://api.github.com/users/anudeepsamaiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/anudeepsamaiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anudeepsamaiya/subscriptions", "organizations_url": "https://api.github.com/users/anudeepsamaiya/orgs", "repos_url": "https://api.github.com/users/anudeepsamaiya/repos", "events_url": "https://api.github.com/users/anudeepsamaiya/events{/privacy}", "received_events_url": "https://api.github.com/users/anudeepsamaiya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-13T15:32:36Z", "updated_at": "2019-09-16T15:08:51Z", "closed_at": "2019-09-16T15:08:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirstly, thanks for writing this wonderful library. \r\n\r\nThe `django-filter` library provides filtering for ISO-8601 format timestamps using `filters.IsoDateTimeFilter`. But there is no support for unix epoch format timestamps. Currently I am doing it using a custom backend which produces a string acceptable by `filters.IsoDateTimeFilter`. I would be nice to have something like `EpochTimeStampFilter` and `EpochTimeStampField`.\r\n\r\nMy Sample backend:  \r\n\r\n```\r\n    6 class UnixTimeStampBackend(filters.DjangoFilterBackend):\r\n    7     def get_filterset_kwargs(self, request, queryset, view):\r\n    8         kwargs = super().get_filterset_kwargs(request, queryset, view)\r\n    9 \r\n   10         # merge filterset kwargs provided by view class\r\n   11         if hasattr(view, \"get_filterset_kwargs\"):\r\n   12             kwargs.update(view.get_filterset_kwargs())\r\n   13 \r\n   14         query_params = kwargs.get(\"data\").copy()\r\n   15        \r\n   16         if \"created_from\" in request.query_params:\r\n   17             query_params.update({\r\n   18                 \"created_from\": datetime.fromtimestamp(\r\n   19                     int(kwargs[\"data\"][\"created_from\"])\r\n   20                 ).isoformat()\r\n   21             })\r\n   22             kwargs[\"data\"] = query_params\r\n   23         if \"created_to\" in request.query_params:\r\n   24             query_params.update({\r\n   25                 \"created_to\": datetime.fromtimestamp(\r\n   26                     int(kwargs[\"data\"][\"created_to\"])\r\n   27                 ).isoformat()\r\n   28             })\r\n   29             kwargs[\"data\"] = query_params\r\n   30 \r\n   31         return kwargs\r\n```\r\n\r\nWithout this custom backend, an error is raised by the django forms when using the default `DjangoFilterBackend`.\r\n\r\nFor example: \r\n```\r\nRequest:\r\n/?created_from=1568291825356\r\n\r\nResponse:\r\n\r\n{\r\n    \"details\": \"Created From: Enter a valid date/time\"\r\n}\r\n```\r\n\r\nMaybe related to: https://github.com/carltongibson/django-filter/issues/137", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1117", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1117/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1117/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1117/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1117", "id": 486057149, "node_id": "MDU6SXNzdWU0ODYwNTcxNDk=", "number": 1117, "title": "Did not work request based filter (doc is outdated)?", "user": {"login": "yn-coder", "id": 8451944, "node_id": "MDQ6VXNlcjg0NTE5NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8451944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yn-coder", "html_url": "https://github.com/yn-coder", "followers_url": "https://api.github.com/users/yn-coder/followers", "following_url": "https://api.github.com/users/yn-coder/following{/other_user}", "gists_url": "https://api.github.com/users/yn-coder/gists{/gist_id}", "starred_url": "https://api.github.com/users/yn-coder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yn-coder/subscriptions", "organizations_url": "https://api.github.com/users/yn-coder/orgs", "repos_url": "https://api.github.com/users/yn-coder/repos", "events_url": "https://api.github.com/users/yn-coder/events{/privacy}", "received_events_url": "https://api.github.com/users/yn-coder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-27T22:04:58Z", "updated_at": "2019-08-28T07:24:03Z", "closed_at": "2019-08-28T07:24:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Did not work request based filter (doc is outdated)?\r\n\r\n``request`` is not sended to callable object\r\n\r\nhttps://github.com/carltongibson/django-filter/blob/master/docs/guide/usage.txt#L224\r\n\r\nMy code is:\r\n\r\n    def user_projects(request):\r\n        if request is None:\r\n            return Project.objects.filter(id=3)\r\n    \r\n        return GetMemberedProjectList( request.user ) # GetMemberedProjectList - get projects for user\r\n\r\n    class TaskFilter(django_filters.FilterSet):\r\n        project = django_filters.ModelChoiceFilter(  queryset=user_projects )\r\n\r\n        class Meta:\r\n            model = Task\r\n            fields = ['project' ]\r\n\r\n    task_filter = TaskFilter( request.GET, queryset= Task.objects.all() )\r\n\r\n```request``` is always None", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1114", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1114/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1114/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1114/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1114", "id": 475583308, "node_id": "MDU6SXNzdWU0NzU1ODMzMDg=", "number": 1114, "title": "Integration with djangorestframework-camel-case", "user": {"login": "Reyvel", "id": 16963294, "node_id": "MDQ6VXNlcjE2OTYzMjk0", "avatar_url": "https://avatars2.githubusercontent.com/u/16963294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Reyvel", "html_url": "https://github.com/Reyvel", "followers_url": "https://api.github.com/users/Reyvel/followers", "following_url": "https://api.github.com/users/Reyvel/following{/other_user}", "gists_url": "https://api.github.com/users/Reyvel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Reyvel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Reyvel/subscriptions", "organizations_url": "https://api.github.com/users/Reyvel/orgs", "repos_url": "https://api.github.com/users/Reyvel/repos", "events_url": "https://api.github.com/users/Reyvel/events{/privacy}", "received_events_url": "https://api.github.com/users/Reyvel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-01T09:47:01Z", "updated_at": "2019-08-01T11:37:58Z", "closed_at": "2019-08-01T11:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Most javascript programmers in my team use camelCase. So I am wondering if I can integrate django-filter with djangorestframework-camel-case to make front end developers feel at home. I am thinking about using middleware to underscoreize the query params, but I don't know how to camelize the browseable api. Any idea?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1113", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1113/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1113/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1113/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1113", "id": 473251336, "node_id": "MDU6SXNzdWU0NzMyNTEzMzY=", "number": 1113, "title": "Using AND condition in django filters", "user": {"login": "Lepiloff", "id": 28572064, "node_id": "MDQ6VXNlcjI4NTcyMDY0", "avatar_url": "https://avatars3.githubusercontent.com/u/28572064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lepiloff", "html_url": "https://github.com/Lepiloff", "followers_url": "https://api.github.com/users/Lepiloff/followers", "following_url": "https://api.github.com/users/Lepiloff/following{/other_user}", "gists_url": "https://api.github.com/users/Lepiloff/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lepiloff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lepiloff/subscriptions", "organizations_url": "https://api.github.com/users/Lepiloff/orgs", "repos_url": "https://api.github.com/users/Lepiloff/repos", "events_url": "https://api.github.com/users/Lepiloff/events{/privacy}", "received_events_url": "https://api.github.com/users/Lepiloff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-26T08:55:20Z", "updated_at": "2019-07-28T06:13:00Z", "closed_at": "2019-07-28T06:13:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys!\r\nIs it possible to use AND condition in django-filter?\r\n\r\nI created simple filters with multiplechoice:\r\n\r\n**filters.py**\r\n```\r\nclass EmployeeFilter(django_filters.FilterSet):\r\n    skills = django_filters.ModelMultipleChoiceFilter(queryset=Technology.objects.all())\r\n\r\n    class Meta:\r\n        model = Employee\r\n        fields = ['skills']\r\n```\r\n**template.html**\r\n\r\n```\r\n                  <form method='get'>\r\n            <div class=\"input-group\">\r\n              {% render_field filter.form.skills class=\"form-control bg-light\" %}\r\n              <span class=\"input-group-btn\">\r\n                <button  type=\"submit\" class=\"btn btn-info\" type=\"button\">Go!</button>\r\n              </span>\r\n            </div>\r\n            </form>\r\n```\r\n**views.py**\r\n\r\n```\r\nclass AccountList(AuthorizedMixin, ListView):\r\n\r\n    model = Employee\r\n    template_name = 'employee_list.html'\r\n    filter_class = EmployeeFilter\r\n\r\n\r\n    def get_context_data(self, **kwargs):\r\n        context = super(AccountList, self).get_context_data(**kwargs)\r\n        context['filter'] = EmployeeFilter(self.request.GET, queryset=self.get_queryset())\r\n        return context\r\n```\r\n              \r\nAnd he's doing a great job with the OR condition.  But if I need using both OR / AND condition? How can I do that? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1111", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1111/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1111/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1111/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1111", "id": 473105611, "node_id": "MDU6SXNzdWU0NzMxMDU2MTE=", "number": 1111, "title": "assert isinstance() call", "user": {"login": "sirdodger", "id": 1163314, "node_id": "MDQ6VXNlcjExNjMzMTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1163314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirdodger", "html_url": "https://github.com/sirdodger", "followers_url": "https://api.github.com/users/sirdodger/followers", "following_url": "https://api.github.com/users/sirdodger/following{/other_user}", "gists_url": "https://api.github.com/users/sirdodger/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirdodger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirdodger/subscriptions", "organizations_url": "https://api.github.com/users/sirdodger/orgs", "repos_url": "https://api.github.com/users/sirdodger/repos", "events_url": "https://api.github.com/users/sirdodger/events{/privacy}", "received_events_url": "https://api.github.com/users/sirdodger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-25T23:03:35Z", "updated_at": "2020-03-04T20:13:24Z", "closed_at": "2020-03-04T20:13:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a loose assertion in filterset.py:225 that checks that the `queryset` argument is a models.QuerySet.  The problem with that is that it makes mocking the queryset difficult (especially since querysets tend to be chained).  It also violates the spirit of allowing duck typing in Python.\r\n\r\nCan it be removed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1109", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1109/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1109/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1109/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1109", "id": 472091983, "node_id": "MDU6SXNzdWU0NzIwOTE5ODM=", "number": 1109, "title": "How to do format the value of the filtered queryset..", "user": {"login": "wgf4242", "id": 3336626, "node_id": "MDQ6VXNlcjMzMzY2MjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3336626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wgf4242", "html_url": "https://github.com/wgf4242", "followers_url": "https://api.github.com/users/wgf4242/followers", "following_url": "https://api.github.com/users/wgf4242/following{/other_user}", "gists_url": "https://api.github.com/users/wgf4242/gists{/gist_id}", "starred_url": "https://api.github.com/users/wgf4242/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wgf4242/subscriptions", "organizations_url": "https://api.github.com/users/wgf4242/orgs", "repos_url": "https://api.github.com/users/wgf4242/repos", "events_url": "https://api.github.com/users/wgf4242/events{/privacy}", "received_events_url": "https://api.github.com/users/wgf4242/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-24T05:52:51Z", "updated_at": "2019-07-24T13:23:33Z", "closed_at": "2019-07-24T13:23:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "After filtering the queryset, I want to return a dictionary , not queryset.\r\nI tried to format in the ViewSet override the list method, the queryset is not filtered.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1108", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1108/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1108/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1108/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1108", "id": 469512816, "node_id": "MDU6SXNzdWU0Njk1MTI4MTY=", "number": 1108, "title": "Using django-filter with DetailView", "user": {"login": "Damar225", "id": 32112262, "node_id": "MDQ6VXNlcjMyMTEyMjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/32112262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Damar225", "html_url": "https://github.com/Damar225", "followers_url": "https://api.github.com/users/Damar225/followers", "following_url": "https://api.github.com/users/Damar225/following{/other_user}", "gists_url": "https://api.github.com/users/Damar225/gists{/gist_id}", "starred_url": "https://api.github.com/users/Damar225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Damar225/subscriptions", "organizations_url": "https://api.github.com/users/Damar225/orgs", "repos_url": "https://api.github.com/users/Damar225/repos", "events_url": "https://api.github.com/users/Damar225/events{/privacy}", "received_events_url": "https://api.github.com/users/Damar225/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-18T00:30:23Z", "updated_at": "2020-03-12T03:37:24Z", "closed_at": "2020-03-12T03:37:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I posted this problem on stackoverflow [here](https://stackoverflow.com/questions/57085070/using-django-filter-with-class-detailview)\r\nI know that i have just posted this problem on stackoverflow and it didn't take it is time, but i just want to know from you guys ... is this something that can be done with dango-filter or it is very hard/impossible ?\r\ni just want to link the filter form to django DetailView class.\r\nyou can see the link above for code details thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1107", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1107/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1107/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1107/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1107", "id": 469395059, "node_id": "MDU6SXNzdWU0NjkzOTUwNTk=", "number": 1107, "title": "Filter JSONCharField from Django jsonfield", "user": {"login": "frozen-yogurt", "id": 48257661, "node_id": "MDQ6VXNlcjQ4MjU3NjYx", "avatar_url": "https://avatars2.githubusercontent.com/u/48257661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frozen-yogurt", "html_url": "https://github.com/frozen-yogurt", "followers_url": "https://api.github.com/users/frozen-yogurt/followers", "following_url": "https://api.github.com/users/frozen-yogurt/following{/other_user}", "gists_url": "https://api.github.com/users/frozen-yogurt/gists{/gist_id}", "starred_url": "https://api.github.com/users/frozen-yogurt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frozen-yogurt/subscriptions", "organizations_url": "https://api.github.com/users/frozen-yogurt/orgs", "repos_url": "https://api.github.com/users/frozen-yogurt/repos", "events_url": "https://api.github.com/users/frozen-yogurt/events{/privacy}", "received_events_url": "https://api.github.com/users/frozen-yogurt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-17T19:08:36Z", "updated_at": "2019-07-18T05:29:16Z", "closed_at": "2019-07-18T05:29:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Is there any example on how to set up django-filter to search a specific field in JSON. \r\n\r\nFor example, I have a model: Exploration and it has a JSONCharField named location. Location looks like `{'name': 'aa'}`.  This JSONCharField is imported from Django jsonfield, it is a generic textfield that serializes/deserializes JSON objects, stored in the database like a CharField, which enables it to be used.\r\n\r\nAs for my Filter class, following the idea from #768, it is defined as below:\r\n```python\r\nfrom copy import deepcopy\r\nfrom jsonfield import JSONCharField\r\nfrom django_filters import filterset\r\n\r\nclass ExplorationFilter(FilterSet):\r\n    FILTER_DEFAULTS = deepcopy(filterset.FILTER_FOR_DBFIELD_DEFAULTS)\r\n    FILTER_DEFAULTS.update({\r\n        JSONCharField: {\r\n            'filter_class': filters.CharFilter,\r\n            'extra': lambda f: {'lookup_expr': ['icontains']},\r\n        },\r\n    })\r\n\r\n    location = filters.CharFilter(name='location', method='filter_location')\r\n\r\n    def filter_location(self, qs, name, value):\r\n        return qs.filter(location__name=value)\r\n\r\n    class Meta:\r\n        model = Exploration\r\n```\r\n\r\nI want to find all `Exploration` with `location.name == 'aa'`. \r\nHowever, when I GET `http://localhost:8000/api/v1/explorations?location=aa`, I get the following error: \r\n```\r\nException Type:  FieldError\r\nUnsupported lookup 'name' for JSONCharField or join on the field not permitted.\r\n```\r\n\r\nI think there must be some places that I did incorrectly. Is there any example that I could follow, to fix this? Thank you!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1105", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1105/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1105/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1105/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1105", "id": 468422271, "node_id": "MDU6SXNzdWU0Njg0MjIyNzE=", "number": 1105, "title": "simple ManyToMany filter", "user": {"login": "dbinetti", "id": 161722, "node_id": "MDQ6VXNlcjE2MTcyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/161722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbinetti", "html_url": "https://github.com/dbinetti", "followers_url": "https://api.github.com/users/dbinetti/followers", "following_url": "https://api.github.com/users/dbinetti/following{/other_user}", "gists_url": "https://api.github.com/users/dbinetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbinetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbinetti/subscriptions", "organizations_url": "https://api.github.com/users/dbinetti/orgs", "repos_url": "https://api.github.com/users/dbinetti/repos", "events_url": "https://api.github.com/users/dbinetti/events{/privacy}", "received_events_url": "https://api.github.com/users/dbinetti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-16T03:00:31Z", "updated_at": "2019-07-16T17:16:27Z", "closed_at": "2019-07-16T17:16:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have read the documentation and issues and it would seem that django-filter supports this kind of filterset declaration for use with DRF:\r\n\r\n```\r\nclass GroupFilterset(FilterSet):\r\n    class Meta:\r\n        model = Group\r\n        fields = {\r\n            'owners': [\r\n                'in',\r\n            ],\r\n       }\r\n```\r\n\r\nwhere the `owners` refers to ManyToMany field pointing at the User model.  However, it does not work, throwing a `AttributeError: 'list' object has no attribute 'split'` error.   (I have searched for this error and the answers appear to be unrelated to this particular issue.)\r\n\r\nI should mention that the mere inclusion of the above breaks the filter entirely, including for other simpler known-to-work requests.  So perhaps the `in` filter is not support for M2M?  If so, it would be worthwhile to say that in the documentation and perhaps have a more descriptive error.  If not, then perhaps I've stumbled on a bug.\r\n\r\nDjango 2.2.3\r\ndjango-filter 2.1.0\r\ndrf 3.9.4\r\n\r\nand FWIW, also using drf-jsonapi and dry-rest -permissions\r\n\r\nthanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1104", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1104/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1104/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1104/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1104", "id": 467769181, "node_id": "MDU6SXNzdWU0Njc3NjkxODE=", "number": 1104, "title": "Improve introspection of models in `DjangoFilterBackend.get_coreschema_field`", "user": {"login": "thismatters", "id": 5376995, "node_id": "MDQ6VXNlcjUzNzY5OTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5376995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thismatters", "html_url": "https://github.com/thismatters", "followers_url": "https://api.github.com/users/thismatters/followers", "following_url": "https://api.github.com/users/thismatters/following{/other_user}", "gists_url": "https://api.github.com/users/thismatters/gists{/gist_id}", "starred_url": "https://api.github.com/users/thismatters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thismatters/subscriptions", "organizations_url": "https://api.github.com/users/thismatters/orgs", "repos_url": "https://api.github.com/users/thismatters/repos", "events_url": "https://api.github.com/users/thismatters/events{/privacy}", "received_events_url": "https://api.github.com/users/thismatters/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-13T21:41:11Z", "updated_at": "2020-06-18T18:21:22Z", "closed_at": "2020-06-18T18:21:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm new to using `django-filter` (2.1.0) and so far I really like it and find it quite flexible; thank you for writing it! I have run into a small problem though. I'm following the documentation about integrating with DRF. I'm using a `FilterSet` as so:\r\n\r\n```python\r\nclass CIAttributeDefinitionFilter(filters.FilterSet):\r\n    ci_type_name = filters.CharFilter(field_name=\"ci_type\", lookup_expr='name')\r\n    ci_type_id = filters.NumberFilter(field_name=\"ci_type\", lookup_expr='pk')\r\n\r\n    class Meta:\r\n        model = CIAttributeDefinition\r\n        fields = [\r\n            'name', 'data_type', 'multiple', 'required',\r\n            'ci_type_name', 'ci_type_id', ]\r\n```\r\nThe model looks like this:\r\n\r\n```python\r\nclass CIAttributeDefinition(models.Model):\r\n    name = models.CharField('Attribute Name', max_length=64, unique=True)\r\n    ci_type = models.ForeignKey(\r\n        CIType, related_name='_native_attributes', on_delete=models.CASCADE)\r\n    data_type = models.CharField(\r\n        'Attribute Data Type', max_length=8,\r\n        choices=CIAttributeTypeEnum.choices())\r\n    description = models.CharField('Attribute Description', max_length=140)\r\n    default_value = models.ForeignKey(\r\n        'CIAttribute', on_delete=models.SET_NULL, null=True, blank=True)\r\n    multiple = models.BooleanField('Allow multiple values?', default=False)\r\n    required = models.BooleanField(default=False)\r\n```\r\n\r\nThis results in the following swagger documentation which shows all the named fields; however all but the `ci_type_id` parameter are listed as string parameters. The `coreschema` package has fields for [boolean](https://github.com/core-api/python-coreschema/blob/master/coreschema/schemas.py#L369) and [enum](https://github.com/core-api/python-coreschema/blob/master/coreschema/schemas.py#L369) data (among others). Has broader introspection for the purposes of documentation generation been considered and rejected in the past?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1102", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1102/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1102/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1102/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1102", "id": 467297094, "node_id": "MDU6SXNzdWU0NjcyOTcwOTQ=", "number": 1102, "title": "The filter seems dosen't work on the queryset generated by union operation", "user": {"login": "rootgrandfather", "id": 30030633, "node_id": "MDQ6VXNlcjMwMDMwNjMz", "avatar_url": "https://avatars1.githubusercontent.com/u/30030633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rootgrandfather", "html_url": "https://github.com/rootgrandfather", "followers_url": "https://api.github.com/users/rootgrandfather/followers", "following_url": "https://api.github.com/users/rootgrandfather/following{/other_user}", "gists_url": "https://api.github.com/users/rootgrandfather/gists{/gist_id}", "starred_url": "https://api.github.com/users/rootgrandfather/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rootgrandfather/subscriptions", "organizations_url": "https://api.github.com/users/rootgrandfather/orgs", "repos_url": "https://api.github.com/users/rootgrandfather/repos", "events_url": "https://api.github.com/users/rootgrandfather/events{/privacy}", "received_events_url": "https://api.github.com/users/rootgrandfather/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-07-12T08:50:41Z", "updated_at": "2019-07-12T16:06:13Z", "closed_at": "2019-07-12T10:14:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "1. What's the ORM query you want to perform?\r\n\r\n  ```python\r\n  # views.py\r\n  class ArticlesListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):\r\n      filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)\r\n      filter_class = ArticlesFilter\r\n  \r\n      def get_queryset(self):\r\n          docs,blogs=get_articles_objects()\r\n          if self.request.user.is_superuser:\r\n              return docs.union(blogs).all()\r\n          else:\r\n              filter_docs = docs.filter(Q(docsinfo__status__in=[DocsStatus.normal.value, DocsStatus.convert_fail.value]))\r\n              filter_blogs = blogs.filter(Q(blogsinfo__status__in=[BlogsStatus.normal.value]))\r\n              return filter_docs.union(filter_blogs).all()\r\n  ```\r\n\r\n  ```python\r\n  # filters.py\r\n  class ArticlesFilter(django_filters.rest_framework.FilterSet):\r\n      category=django_filters.NumberFilter(method='category_filter')\r\n      def category_filter(self, queryset, name, value):\r\n       \treturn queryset.filter(category__id=value)\r\n  ```\r\n\r\n  I want to apply the filter on the queryset generated by get_queryset()\r\n\r\n2. What have you tried?\r\n\r\n   I tried to apply the category_filter on the queryset,but it dosen't work.\r\n\r\n3. What result do you see?\r\n\r\n   It dosen't work,I want the filtered queryset.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1101", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1101/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1101/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1101/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1101", "id": 467221197, "node_id": "MDU6SXNzdWU0NjcyMjExOTc=", "number": 1101, "title": "How to apply a filter on a union queryset?That dosen't working.", "user": {"login": "rootgrandfather", "id": 30030633, "node_id": "MDQ6VXNlcjMwMDMwNjMz", "avatar_url": "https://avatars1.githubusercontent.com/u/30030633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rootgrandfather", "html_url": "https://github.com/rootgrandfather", "followers_url": "https://api.github.com/users/rootgrandfather/followers", "following_url": "https://api.github.com/users/rootgrandfather/following{/other_user}", "gists_url": "https://api.github.com/users/rootgrandfather/gists{/gist_id}", "starred_url": "https://api.github.com/users/rootgrandfather/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rootgrandfather/subscriptions", "organizations_url": "https://api.github.com/users/rootgrandfather/orgs", "repos_url": "https://api.github.com/users/rootgrandfather/repos", "events_url": "https://api.github.com/users/rootgrandfather/events{/privacy}", "received_events_url": "https://api.github.com/users/rootgrandfather/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-12T04:57:45Z", "updated_at": "2019-07-12T08:04:00Z", "closed_at": "2019-07-12T08:04:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use django-filter on a queryset generated by union(),but that dosen't working.Is there a solution?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1100", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1100/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1100/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1100/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1100", "id": 466795666, "node_id": "MDU6SXNzdWU0NjY3OTU2NjY=", "number": 1100, "title": "JSONField with ModelMultipleChoiceFilter", "user": {"login": "Sqvall", "id": 47914396, "node_id": "MDQ6VXNlcjQ3OTE0Mzk2", "avatar_url": "https://avatars2.githubusercontent.com/u/47914396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sqvall", "html_url": "https://github.com/Sqvall", "followers_url": "https://api.github.com/users/Sqvall/followers", "following_url": "https://api.github.com/users/Sqvall/following{/other_user}", "gists_url": "https://api.github.com/users/Sqvall/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sqvall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sqvall/subscriptions", "organizations_url": "https://api.github.com/users/Sqvall/orgs", "repos_url": "https://api.github.com/users/Sqvall/repos", "events_url": "https://api.github.com/users/Sqvall/events{/privacy}", "received_events_url": "https://api.github.com/users/Sqvall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-11T10:06:39Z", "updated_at": "2019-07-11T19:19:30Z", "closed_at": "2019-07-11T19:19:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\nI read a lot Issue, but i don't understand why my filter does not work?\r\nI have model:\r\n```python\r\nclass Product(models.Model):\r\n    name = models.CharField(max_length=120)\r\n    properties = JSONField(default=dict, blank=True, null=True)\r\n```\r\nand Filter\r\n```python\r\nclass ProductFilter(FilterSet):\r\n    color = filters.ModelMultipleChoiceFilter(\r\n        queryset=Product.objects.values_list('properties__color', flat=True).distinct(),\r\n        field_name='properties',\r\n        to_field_name='properties__color__contains',\r\n        conjoined=True,\r\n        )\r\n\r\n    class Meta:\r\n        model = Product\r\n        fields = {\r\n            'color': 'color__contains',\r\n        }\r\n```\r\nMy item\r\n```json\r\n{\r\n    \"id\": 10,\r\n    \"name\": \"Test_3\",\r\n    \"properties\": {\r\n        \"color\": \"Black\",\r\n        \"invertor technology\": false,\r\n        \"service area, m\u00b2\": 24\r\n    },\r\n},\r\n```\r\nBut i have this SQL query\r\n```sql\r\nSELECT \u2022\u2022\u2022 FROM \"products_product\" WHERE (\"products_product\".\"properties\" #> ARRAY['color','contains']) IN ('\"Black\"')\r\n```\r\nIf i change this:\r\n```python\r\nto_field_name='properties__color'\r\n```\r\nI have:\r\n```sql\r\nSELECT \u2022\u2022\u2022 FROM \"products_product\" WHERE (\"products_product\".\"properties\" -> 'color') IN ('\"Black\"')\r\n```\r\nAnd i have Error: ```'str' object has no attribute 'properties__color'```\r\nHow i can have:\r\n```sql\r\nSELECT \u2022\u2022\u2022 FROM \"products_product\" WHERE (\"products_product\".\"properties\" -> 'color') @> '\"Black\"'\r\n```\r\nOr may be you tell me what SQL query more correct?\r\nIf i use this CharFilter:\r\n```python\r\ncolor2 = filters.CharFilter(\r\n        field_name='properties',\r\n        lookup_expr='color__contains',\r\n    )\r\n```\r\nAll work wonderful, but I need have choose more one values this filter.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1099", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1099/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1099/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1099/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1099", "id": 466447156, "node_id": "MDU6SXNzdWU0NjY0NDcxNTY=", "number": 1099, "title": "_meta error with DRF package.", "user": {"login": "VasiliyRusin", "id": 3685852, "node_id": "MDQ6VXNlcjM2ODU4NTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3685852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VasiliyRusin", "html_url": "https://github.com/VasiliyRusin", "followers_url": "https://api.github.com/users/VasiliyRusin/followers", "following_url": "https://api.github.com/users/VasiliyRusin/following{/other_user}", "gists_url": "https://api.github.com/users/VasiliyRusin/gists{/gist_id}", "starred_url": "https://api.github.com/users/VasiliyRusin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VasiliyRusin/subscriptions", "organizations_url": "https://api.github.com/users/VasiliyRusin/orgs", "repos_url": "https://api.github.com/users/VasiliyRusin/repos", "events_url": "https://api.github.com/users/VasiliyRusin/events{/privacy}", "received_events_url": "https://api.github.com/users/VasiliyRusin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-10T18:09:38Z", "updated_at": "2019-07-10T18:44:41Z", "closed_at": "2019-07-10T18:44:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "### UPD. I have an error even if I use filters.FilterSet (for DRF).\r\nRemove Meta class is only one way to solve this problem.\r\n___\r\n\r\nSo if I have a class with two inheritance it will raise an error: \r\n`AttributeError: 'tuple' object has no attribute '_meta'`\r\n\r\nfilters.py\r\n\r\n```\r\nclass IdFilter(filters.FilterSet):\r\n    class Meta:\r\n        fields = ['id']\r\n\r\n    id = filters.NumberFilter()\r\n\r\n\r\nclass NameFilter(filters.FilterSet):\r\n    class Meta:\r\n        fields = ['name']\r\n\r\n    name = filters.CharFilter(lookup_expr='icontains')\r\n\r\n\r\nclass GenreFilter(IdFilter, NameFilter):\r\n    class Meta:\r\n        model = Genre,\r\n        fields = ['id', 'name']\r\n```\r\n\r\nAs far as I remember non-DRF version works correctly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1094", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1094/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1094/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1094/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1094", "id": 464819512, "node_id": "MDU6SXNzdWU0NjQ4MTk1MTI=", "number": 1094, "title": "Dynammic lookup dropdown filters", "user": {"login": "dan-developer", "id": 10473169, "node_id": "MDQ6VXNlcjEwNDczMTY5", "avatar_url": "https://avatars3.githubusercontent.com/u/10473169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dan-developer", "html_url": "https://github.com/dan-developer", "followers_url": "https://api.github.com/users/dan-developer/followers", "following_url": "https://api.github.com/users/dan-developer/following{/other_user}", "gists_url": "https://api.github.com/users/dan-developer/gists{/gist_id}", "starred_url": "https://api.github.com/users/dan-developer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dan-developer/subscriptions", "organizations_url": "https://api.github.com/users/dan-developer/orgs", "repos_url": "https://api.github.com/users/dan-developer/repos", "events_url": "https://api.github.com/users/dan-developer/events{/privacy}", "received_events_url": "https://api.github.com/users/dan-developer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-06T05:22:33Z", "updated_at": "2020-03-12T03:36:15Z", "closed_at": "2020-03-12T03:36:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It is possible to render forms with lookups in a dropdown for the user to select as in the attached example?\r\nIf it is not possible, please tell me where I can customize how form is rendered that I will send a pull request with this feature.\r\nThis is very important for business applications.\r\n![B4A59363-1AA9-4B74-8E10-177A512FC620](https://user-images.githubusercontent.com/10473169/60751948-e3f57000-9f94-11e9-8e1d-ccf6a03fd657.png)\r\n![2E91793A-DD43-4EC3-ABBE-A0A6F0AC91E2](https://user-images.githubusercontent.com/10473169/60751949-e3f57000-9f94-11e9-8342-f3f213d53327.jpeg)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1093", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1093/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1093/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1093/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1093", "id": 463212107, "node_id": "MDU6SXNzdWU0NjMyMTIxMDc=", "number": 1093, "title": "`CSVWidget` does not handle attrs parameters", "user": {"login": "tdelion", "id": 50208408, "node_id": "MDQ6VXNlcjUwMjA4NDA4", "avatar_url": "https://avatars2.githubusercontent.com/u/50208408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tdelion", "html_url": "https://github.com/tdelion", "followers_url": "https://api.github.com/users/tdelion/followers", "following_url": "https://api.github.com/users/tdelion/following{/other_user}", "gists_url": "https://api.github.com/users/tdelion/gists{/gist_id}", "starred_url": "https://api.github.com/users/tdelion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tdelion/subscriptions", "organizations_url": "https://api.github.com/users/tdelion/orgs", "repos_url": "https://api.github.com/users/tdelion/repos", "events_url": "https://api.github.com/users/tdelion/events{/privacy}", "received_events_url": "https://api.github.com/users/tdelion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-02T12:52:58Z", "updated_at": "2020-03-04T17:02:02Z", "closed_at": "2020-03-04T17:02:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems to me that `CSVWidget` does not handle `attrs` parameters. \r\n\r\nI would use it to give CSS class to the rendered form.\r\n\r\nIs it an issue ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1091", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1091/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1091/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1091/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1091", "id": 461002231, "node_id": "MDU6SXNzdWU0NjEwMDIyMzE=", "number": 1091, "title": "Adding generic filter to DRF pre-filtered queryset", "user": {"login": "ggjersund", "id": 26675510, "node_id": "MDQ6VXNlcjI2Njc1NTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/26675510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ggjersund", "html_url": "https://github.com/ggjersund", "followers_url": "https://api.github.com/users/ggjersund/followers", "following_url": "https://api.github.com/users/ggjersund/following{/other_user}", "gists_url": "https://api.github.com/users/ggjersund/gists{/gist_id}", "starred_url": "https://api.github.com/users/ggjersund/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ggjersund/subscriptions", "organizations_url": "https://api.github.com/users/ggjersund/orgs", "repos_url": "https://api.github.com/users/ggjersund/repos", "events_url": "https://api.github.com/users/ggjersund/events{/privacy}", "received_events_url": "https://api.github.com/users/ggjersund/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-26T14:23:21Z", "updated_at": "2019-08-19T14:13:50Z", "closed_at": "2019-08-19T14:13:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some weird reason I can't pre-filter my queryset in the `get_queryset(self)` function. `DjangoFilterBackend` seemes to only accept in my case `return Project.objects.all()` instead of some `return Project.objects.filter(company='<some company>')`.\r\n\r\nIs this documented somehow or is it a bug?\r\n\r\n**UPDATE**:\r\nIt seemes that filters directly related to the model, such as `return Project.objects.filter(number=1)` works, but `return Project.objects.filter(company__owner=self.request.user)` does not.\r\n\r\n**UPDATE 2**:\r\nBoiled the problem down to using `self.request.user`as `return Project.objects.filter(company__owner=1)` works. Any ideas?\r\n\r\n**UPDATE 3**:\r\nYupp, somehow `django-filter` hates `self.request.user`.\r\n```\r\nuser = self.request.user\r\nreturn Project.objects.filter(company__administrators__user=1)\r\n```\r\nwont work, however this (commenting out) will\r\n```\r\n#user = self.request.user\r\nreturn Project.objects.filter(company__administrators__user=1)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1083", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1083/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1083/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1083/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1083", "id": 450458946, "node_id": "MDU6SXNzdWU0NTA0NTg5NDY=", "number": 1083, "title": "get_schema_operation_parameters()", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-30T19:04:50Z", "updated_at": "2019-07-15T19:18:59Z", "closed_at": "2019-07-15T19:18:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As of current master branch (3.10 milestone) DRF `generateschema` expects each filter class to have a `get_schema_operation_parameters()` function which is defined in [rest_framework.filters.BaseFilterBackend](https://github.com/encode/django-rest-framework/blob/c2293e9f251b1f215825186a7bcbf5a006df0cb0/rest_framework/filters.py#L20-L38).\r\n\r\nThis is currently missing from `DjangoFilterBackend`  https://github.com/carltongibson/django-filter/blob/7c08deea132686f456df8a646a9c65654cee2712/django_filters/rest_framework/backends.py#L20\r\n\r\nPerhaps update `DjangoFilterBackend` to extend `rest_framework.filters.BaseFilterBackend` as a start and then add an implementation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1078", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1078/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1078/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1078/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1078", "id": 446349350, "node_id": "MDU6SXNzdWU0NDYzNDkzNTA=", "number": 1078, "title": "graphene-django DjangoFilterConnectionField not filtering for type ID", "user": {"login": "amarkezic", "id": 17450181, "node_id": "MDQ6VXNlcjE3NDUwMTgx", "avatar_url": "https://avatars0.githubusercontent.com/u/17450181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amarkezic", "html_url": "https://github.com/amarkezic", "followers_url": "https://api.github.com/users/amarkezic/followers", "following_url": "https://api.github.com/users/amarkezic/following{/other_user}", "gists_url": "https://api.github.com/users/amarkezic/gists{/gist_id}", "starred_url": "https://api.github.com/users/amarkezic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amarkezic/subscriptions", "organizations_url": "https://api.github.com/users/amarkezic/orgs", "repos_url": "https://api.github.com/users/amarkezic/repos", "events_url": "https://api.github.com/users/amarkezic/events{/privacy}", "received_events_url": "https://api.github.com/users/amarkezic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-20T23:16:53Z", "updated_at": "2019-05-23T08:08:56Z", "closed_at": "2019-05-23T08:08:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "`graphene-django` uses this library to filter django model fields. Everything works fine until you try to filter a field that has graphql type ID. When exeucting query of type:\r\n```\r\nquery {\r\n  userManagerQueries {\r\n    tenantUsers(userId: \"VXNlck5vZGU6MQ==\") {\r\n\tedges {\r\n          node {\r\n            tenantId {\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n```\r\nYou get the all the results instead of the one you are filtering (so it like you didn't apply the filter)\r\n\r\nAfter doing some digging i found out the the source of the problem is in the file\r\n`django-filters/filterset.py` in the method:\r\n```\r\n    @property\r\n    def qs(self):\r\n        if not hasattr(self, '_qs'):\r\n            qs = self.queryset.all()\r\n            if self.is_bound:\r\n                # ensure form validation before filtering\r\n                self.errors\r\n                qs = self.filter_queryset(qs)\r\n            self._qs = qs\r\n        return self._qs\r\n\r\n```\r\nBecause no error is raised uppon form validation and the next method in the callstack `filter_queryset` (still in `django-filters/filterset.py` ) uses `cleaned_data` the error gets ignored and the filter dosen't appear in the cleaned_data dict and is not applied to the query set.\r\n```\r\n    def filter_queryset(self, queryset):\r\n        \"\"\"\r\n        Filter the queryset with the underlying form's `cleaned_data`. You must\r\n        call `is_valid()` or `errors` before calling this method.\r\n\r\n        This method should be overridden if additional filtering needs to be\r\n        applied to the queryset before it is cached.\r\n        \"\"\"\r\n\r\n        for name, value in self.form.cleaned_data.items():\r\n            queryset = self.filters[name].filter(queryset, value)\r\n            assert isinstance(queryset, models.QuerySet), \\\r\n                \"Expected '%s.%s' to return a QuerySet, but got a %s instead.\" \\\r\n                % (type(self).__name__, name, type(queryset).__name__)\r\n        return queryset\r\n```\r\n\r\nI did a quick fix by raisging an error uppon unsuccessful form validation:\r\n```\r\n    def qs(self):\r\n        if not hasattr(self, '_qs'):\r\n            qs = self.queryset.all()\r\n            if self.is_bound:\r\n                # ensure form validation before filtering\r\n                if len(self.errors) > 0:\r\n                    raise Exception(self.errors)\r\n                qs = self.filter_queryset(qs)\r\n            self._qs = qs\r\n        return self._qs\r\n\r\n```\r\n\r\nThe question i now have is. Can this be fixed or is it intended to be this way and i have to do the form validation in some other part in my code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1076", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1076/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1076/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1076/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1076", "id": 440153010, "node_id": "MDU6SXNzdWU0NDAxNTMwMTA=", "number": 1076, "title": "Logical OR on multiple values for a CharField", "user": {"login": "jeremystretch", "id": 13487278, "node_id": "MDQ6VXNlcjEzNDg3Mjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/13487278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystretch", "html_url": "https://github.com/jeremystretch", "followers_url": "https://api.github.com/users/jeremystretch/followers", "following_url": "https://api.github.com/users/jeremystretch/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystretch/subscriptions", "organizations_url": "https://api.github.com/users/jeremystretch/orgs", "repos_url": "https://api.github.com/users/jeremystretch/repos", "events_url": "https://api.github.com/users/jeremystretch/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystretch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-05-03T17:49:54Z", "updated_at": "2019-05-08T19:56:28Z", "closed_at": "2019-05-08T19:55:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Use Case\r\n\r\nSuppose I have a Device model defined like this:\r\n\r\n```\r\nclass Device(models.Model):\r\n    name = models.CharField(max_length=100)\r\n```\r\n\r\nAnd I have a Django REST API endpoint at `/devices/` which lists all Devices. What I'd like to do is turn a query such as\r\n\r\n```\r\nGET /devices/?name=Foo&name=Bar&name=Baz\r\n```\r\n\r\ninto the Queryset\r\n\r\n```\r\nDevice.objects.filter(Q(name='Foo') | Q(name='Bar') | Q(name='Baz'))\r\n```\r\n\r\nso that any Device named Foo OR Bar OR Baz is returned. The response should _not_ trigger a validation error if any of these names are not found.\r\n\r\nWhen using a stock CharFilter on the `name` field, only the last parameter is passed to the filter, resulting in the Queryset\r\n\r\n```\r\nDevice.objects.filter(name='Baz')\r\n```\r\n\r\n## What I've Tried\r\n\r\nMultipleChoiceFilter doesn't work because it requires a predefined set of `choices` to be provided.\r\n\r\nAllValuesMultipleFilter _sort of_ works, but it populates a list of all available values from the database to check against. This is undesirable both because of the additional overhead introduced and because it raises a ValidationError if any of the provided values do not exist. I don't want to validate the provided values; I only want to match on them.\r\n\r\nProviding a custom `method` on CharFilter doesn't seem to be an option because we need to provide a Django form field capable of accepting multiple values.\r\n\r\nApologies if I've missed something obvious. I've looked around for other issues relating to this but didn't find anything quite the same (#137 was very similar).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1074", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1074/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1074/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1074/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1074", "id": 437952682, "node_id": "MDU6SXNzdWU0Mzc5NTI2ODI=", "number": 1074, "title": "ModelMultipleChoiceFilter and AllValuesMultipleFilter", "user": {"login": "Zverushko", "id": 4013285, "node_id": "MDQ6VXNlcjQwMTMyODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4013285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zverushko", "html_url": "https://github.com/Zverushko", "followers_url": "https://api.github.com/users/Zverushko/followers", "following_url": "https://api.github.com/users/Zverushko/following{/other_user}", "gists_url": "https://api.github.com/users/Zverushko/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zverushko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zverushko/subscriptions", "organizations_url": "https://api.github.com/users/Zverushko/orgs", "repos_url": "https://api.github.com/users/Zverushko/repos", "events_url": "https://api.github.com/users/Zverushko/events{/privacy}", "received_events_url": "https://api.github.com/users/Zverushko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-27T15:09:18Z", "updated_at": "2019-04-27T19:52:51Z", "closed_at": "2019-04-27T19:52:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi!\r\n\r\ni have filter for m2m field:\r\n\r\n    color = django_filters.ModelMultipleChoiceFilter(\r\n            queryset=Color.objects.all(),\r\n            widget=forms.CheckboxSelectMultiple,\r\n            field_name='color__name',\r\n            to_field_name='name',\r\n            label='\u0426\u0432\u0435\u0442',\r\n        )\r\n\r\nbut I want to hide options with 0 result:\r\n\r\n    color = django_filters.AllValuesMultipleFilter(\r\n            widget=forms.CheckboxSelectMultiple,\r\n        )\r\n\r\n\r\nThe problem is that AllValuesMultipleFilter does not have ModelMultipleChoiceFilter fields.\r\n\r\nhow to do it?\r\nthx!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1073", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1073/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1073/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1073/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1073", "id": 437622323, "node_id": "MDU6SXNzdWU0Mzc2MjIzMjM=", "number": 1073, "title": "through m2m filter", "user": {"login": "Zverushko", "id": 4013285, "node_id": "MDQ6VXNlcjQwMTMyODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4013285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zverushko", "html_url": "https://github.com/Zverushko", "followers_url": "https://api.github.com/users/Zverushko/followers", "following_url": "https://api.github.com/users/Zverushko/following{/other_user}", "gists_url": "https://api.github.com/users/Zverushko/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zverushko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zverushko/subscriptions", "organizations_url": "https://api.github.com/users/Zverushko/orgs", "repos_url": "https://api.github.com/users/Zverushko/repos", "events_url": "https://api.github.com/users/Zverushko/events{/privacy}", "received_events_url": "https://api.github.com/users/Zverushko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-26T11:09:36Z", "updated_at": "2020-03-12T03:45:53Z", "closed_at": "2020-03-12T03:45:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi!\r\ni have models:\r\n\r\n    class Product(model.Model):\r\n        attributes = models.ManyToManyField(Attribute, through='ProductAttribute')`\r\n\r\n    class ProductAttribute(Base):\r\n        product = models.ForeignKey(Product, on_delete=models.CASCADE)\r\n        attribute = models.ForeignKey(Attribute, on_delete=models.CASCADE)\r\n        value = models.CharField(max_length=255)\r\n\r\n\r\nand filter class:\r\n\r\n    class ProductFilter(django_filters.FilterSet):\r\n       class Meta:\r\n            model = Product\r\n            fields = ['attributes_set_value']`\r\n\r\ni have error:\r\nTypeError: 'Meta.fields' contains fields that are not defined on this FilterSet: attributes_set__value\r\n\r\nhow i can use ProductAttribute__value for filter?\r\nthx! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1069", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1069/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1069/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1069/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1069", "id": 432197712, "node_id": "MDU6SXNzdWU0MzIxOTc3MTI=", "number": 1069, "title": "Creating test database for alias 'default'...", "user": {"login": "lbazan", "id": 3780147, "node_id": "MDQ6VXNlcjM3ODAxNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3780147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbazan", "html_url": "https://github.com/lbazan", "followers_url": "https://api.github.com/users/lbazan/followers", "following_url": "https://api.github.com/users/lbazan/following{/other_user}", "gists_url": "https://api.github.com/users/lbazan/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbazan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbazan/subscriptions", "organizations_url": "https://api.github.com/users/lbazan/orgs", "repos_url": "https://api.github.com/users/lbazan/repos", "events_url": "https://api.github.com/users/lbazan/events{/privacy}", "received_events_url": "https://api.github.com/users/lbazan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-11T19:12:41Z", "updated_at": "2020-03-12T03:44:35Z", "closed_at": "2020-03-12T03:44:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "+ /usr/bin/python3 runtests.py\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (0 silenced).\r\n.......sssssss..................................................................................................s..x...F....ss..x..x..................................................................................................................................................................................................................................s....................sss.........................................................................................................\r\n======================================================================\r\nFAIL: test_filtering (tests.test_filtering.IsoDateTimeFromToRangeFilterTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/lbazan/rpmbuild/BUILD/django-filter-2.1.0/tests/test_filtering.py\", line 1005, in test_filtering\r\n    self.assertEqual(len(results.qs), 2)\r\nAssertionError: 1 != 2\r\n\r\n----------------------------------------------------------------------\r\nRan 487 tests in 0.839s\r\n\r\nFAILED (failures=1, skipped=14, expected failures=3)\r\nDestroying test database for alias 'default'...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1068", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1068/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1068/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1068/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1068", "id": 429627354, "node_id": "MDU6SXNzdWU0Mjk2MjczNTQ=", "number": 1068, "title": "ModelChoiceFilter doesn't support empty value", "user": {"login": "arielpontes", "id": 1641431, "node_id": "MDQ6VXNlcjE2NDE0MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1641431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielpontes", "html_url": "https://github.com/arielpontes", "followers_url": "https://api.github.com/users/arielpontes/followers", "following_url": "https://api.github.com/users/arielpontes/following{/other_user}", "gists_url": "https://api.github.com/users/arielpontes/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielpontes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielpontes/subscriptions", "organizations_url": "https://api.github.com/users/arielpontes/orgs", "repos_url": "https://api.github.com/users/arielpontes/repos", "events_url": "https://api.github.com/users/arielpontes/events{/privacy}", "received_events_url": "https://api.github.com/users/arielpontes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-05T07:53:04Z", "updated_at": "2019-04-08T17:51:27Z", "closed_at": "2019-04-05T19:56:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's say I have the following models:\r\n\r\n```\r\nclass User(models.Model):\r\n    name = models.CharField()\r\n\r\nclass Post(models.Model):\r\n    text = models.TextField()\r\n    author = models.ForeignKey(User)\r\n\r\nclass Comment(models.Model):\r\n    text = models.TextField()\r\n    author = models.ForeignKey(User, related_name='comments')\r\n    post = models.ForeignKey(Post, related_name='comments')\r\n```\r\n\r\nIf I want to filter the user list so that I can see all users that commented on a given post, I can do:\r\n\r\n    post = filters.ModelChoiceFilter(\r\n        field_name='comments__post',\r\n        queryset=Post.objects.all()\r\n    )\r\n\r\nHowever, if I want to filter the user list to get all users who have NOT commented on ANY post, passing `null` or empty string doesn't work. I couldn't find any solution in the documentation. Am I missing something? If this really isn't possible, it would be a nice feature to have. For the moment the only solution I see is to use a custom method and renounce on the `ModelChoiceFilter` altogether.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1067", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1067/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1067/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1067/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1067", "id": 429362317, "node_id": "MDU6SXNzdWU0MjkzNjIzMTc=", "number": 1067, "title": "DRF: document that filterset_class is now filter_class", "user": {"login": "fpghost", "id": 2691631, "node_id": "MDQ6VXNlcjI2OTE2MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2691631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fpghost", "html_url": "https://github.com/fpghost", "followers_url": "https://api.github.com/users/fpghost/followers", "following_url": "https://api.github.com/users/fpghost/following{/other_user}", "gists_url": "https://api.github.com/users/fpghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/fpghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fpghost/subscriptions", "organizations_url": "https://api.github.com/users/fpghost/orgs", "repos_url": "https://api.github.com/users/fpghost/repos", "events_url": "https://api.github.com/users/fpghost/events{/privacy}", "received_events_url": "https://api.github.com/users/fpghost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-04T16:03:53Z", "updated_at": "2019-04-04T16:21:47Z", "closed_at": "2019-04-04T16:18:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could you please document that for DRF `filterset_class` is actually now called `filter_class`.\r\n\r\nCurrently [the docs](https://django-filter.readthedocs.io/en/master/guide/rest_framework.html#adding-a-filterset-with-filterset-class) suggest `filterset_class`, but actually \r\n\r\n```\r\nfrom django_filters import rest_framework as filters\r\n\r\nclass AgentListViewSet(viewsets.ModelViewSet):\r\n    filter_backends = (filters.DjangoFilterBackend, )\r\n    filter_class = UserFilter\r\n```\r\n\r\nis what works.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1062", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1062/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1062/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1062/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1062", "id": 426715366, "node_id": "MDU6SXNzdWU0MjY3MTUzNjY=", "number": 1062, "title": "It queries database even if filters wasn't requested by user.", "user": {"login": "MuhammedKpln", "id": 17166855, "node_id": "MDQ6VXNlcjE3MTY2ODU1", "avatar_url": "https://avatars3.githubusercontent.com/u/17166855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MuhammedKpln", "html_url": "https://github.com/MuhammedKpln", "followers_url": "https://api.github.com/users/MuhammedKpln/followers", "following_url": "https://api.github.com/users/MuhammedKpln/following{/other_user}", "gists_url": "https://api.github.com/users/MuhammedKpln/gists{/gist_id}", "starred_url": "https://api.github.com/users/MuhammedKpln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MuhammedKpln/subscriptions", "organizations_url": "https://api.github.com/users/MuhammedKpln/orgs", "repos_url": "https://api.github.com/users/MuhammedKpln/repos", "events_url": "https://api.github.com/users/MuhammedKpln/events{/privacy}", "received_events_url": "https://api.github.com/users/MuhammedKpln/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-28T21:28:20Z", "updated_at": "2019-04-04T16:19:53Z", "closed_at": "2019-04-04T16:19:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "It queries database even if filters wasn't requested by user.\r\n\r\nThose filters are from models so it should of course query it, but it's not nessecary when filters wasn't requested by the client.\r\n\r\n![](https://i.imgur.com/tmANxEZ.png)\r\n(Uses rest framework)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1057", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1057/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1057/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1057/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1057", "id": 422392527, "node_id": "MDU6SXNzdWU0MjIzOTI1Mjc=", "number": 1057, "title": "KeyError exception for every field which is not in the fields list", "user": {"login": "ksantr", "id": 12990677, "node_id": "MDQ6VXNlcjEyOTkwNjc3", "avatar_url": "https://avatars1.githubusercontent.com/u/12990677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksantr", "html_url": "https://github.com/ksantr", "followers_url": "https://api.github.com/users/ksantr/followers", "following_url": "https://api.github.com/users/ksantr/following{/other_user}", "gists_url": "https://api.github.com/users/ksantr/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksantr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksantr/subscriptions", "organizations_url": "https://api.github.com/users/ksantr/orgs", "repos_url": "https://api.github.com/users/ksantr/repos", "events_url": "https://api.github.com/users/ksantr/events{/privacy}", "received_events_url": "https://api.github.com/users/ksantr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-18T19:21:59Z", "updated_at": "2020-03-12T03:48:13Z", "closed_at": "2020-03-12T03:48:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a simple example.\r\nMy model has three fields: login, group and name. Any field that is not in the fields list raises the KeyError exception.\r\n\r\nclass MyFilter(FilterSet):\r\n    class Meta:\r\n        model = Mymodel\r\n        fields = ['group', 'name']\r\n\r\nWARNING:root:Could not resolve form field 'login'.\r\nTraceback (most recent call last):\r\n  File \"/home/venv/lib/python3.6/site-packages/django/forms/forms.py\", line 163, in __getitem__\r\n    field = self.fields[name]\r\nKeyError: \"Key 'login' not found in 'MyFilterForm'. Choices are: 'group', 'name'\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1056", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1056/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1056/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1056/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1056", "id": 421294464, "node_id": "MDU6SXNzdWU0MjEyOTQ0NjQ=", "number": 1056, "title": "Filters get deleted from classes", "user": {"login": "prescod", "id": 22091, "node_id": "MDQ6VXNlcjIyMDkx", "avatar_url": "https://avatars1.githubusercontent.com/u/22091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prescod", "html_url": "https://github.com/prescod", "followers_url": "https://api.github.com/users/prescod/followers", "following_url": "https://api.github.com/users/prescod/following{/other_user}", "gists_url": "https://api.github.com/users/prescod/gists{/gist_id}", "starred_url": "https://api.github.com/users/prescod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prescod/subscriptions", "organizations_url": "https://api.github.com/users/prescod/orgs", "repos_url": "https://api.github.com/users/prescod/repos", "events_url": "https://api.github.com/users/prescod/events{/privacy}", "received_events_url": "https://api.github.com/users/prescod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-14T23:52:51Z", "updated_at": "2019-03-15T22:35:52Z", "closed_at": "2019-03-15T21:38:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found this behaviour surprising. I needed the list of filters on my class for a reason and they had been deleted.\r\n\r\nhttps://gist.github.com/prescod/148e0f6cbb70f29be317b4507796c763\r\n\r\nI would guess that this behaviour is caused by the .pop in     \r\n\r\n```python\r\ndef get_declared_filters(cls, bases, attrs):\r\n        filters = [\r\n            (filter_name, attrs.pop(filter_name))\r\n            for filter_name, obj in list(attrs.items())\r\n            if isinstance(obj, Filter)\r\n        ]\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1046", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1046/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1046/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1046/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1046", "id": 414182329, "node_id": "MDU6SXNzdWU0MTQxODIzMjk=", "number": 1046, "title": "Inconsistent behavior of filter_overrides - it's not possible to override ChoiceFilter", "user": {"login": "ckrybus", "id": 1301950, "node_id": "MDQ6VXNlcjEzMDE5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1301950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckrybus", "html_url": "https://github.com/ckrybus", "followers_url": "https://api.github.com/users/ckrybus/followers", "following_url": "https://api.github.com/users/ckrybus/following{/other_user}", "gists_url": "https://api.github.com/users/ckrybus/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckrybus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckrybus/subscriptions", "organizations_url": "https://api.github.com/users/ckrybus/orgs", "repos_url": "https://api.github.com/users/ckrybus/repos", "events_url": "https://api.github.com/users/ckrybus/events{/privacy}", "received_events_url": "https://api.github.com/users/ckrybus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-25T16:10:05Z", "updated_at": "2019-02-26T00:21:31Z", "closed_at": "2019-02-26T00:21:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the filter_for_lookup method one can use a custom filter_class by specifying [filter_overrides](https://django-filter.readthedocs.io/en/master/ref/filterset.html\\#filter-overrides), this works for most fields. But when one tries to override a field which uses choices and has a lookup_type=exact the custom filter_class read from filter_overrides is never being used, instead filter_for_lookup() always returns ChoiceFilter.\r\n\r\n```\r\n    @classmethod\r\n    def filter_for_lookup(cls, field, lookup_type):\r\n        DEFAULTS = dict(cls.FILTER_DEFAULTS)\r\n        if hasattr(cls, '_meta'):\r\n            DEFAULTS.update(cls._meta.filter_overrides)\r\n\r\n        data = try_dbfield(DEFAULTS.get, field.__class__) or {}\r\n        filter_class = data.get('filter_class')\r\n        params = data.get('extra', lambda field: {})(field)\r\n\r\n       # (...)\r\n\r\n        # perform lookup specific checks\r\n        if lookup_type == 'exact' and getattr(field, 'choices', None):  # ---> filter_class is not being used here\r\n            return ChoiceFilter, {'choices': field.choices}\r\n\r\n        if lookup_type == 'isnull':\r\n            data = try_dbfield(DEFAULTS.get, models.BooleanField)\r\n            filter_class = data.get('filter_class')\r\n            params = data.get('extra', lambda field: {})(field)\r\n            return filter_class, params\r\n\r\n```\r\nI know it is possible to overwrite filter_for_lookup(), the docs even [say so](https://django-filter.readthedocs.io/en/master/ref/filterset.html#filter-for-lookup), but I think the filter override functionality should behave consistently. Also silently ignoring the override is probably not the best user experience.\r\n\r\nAny thoughts? I would create a pull request, but in this case I'm not sure if the code behavior is intended or not and what the correct solution is. I personally tend to think that making the override behavior consistent is the best option.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1041", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1041/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1041/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1041/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1041", "id": 412574557, "node_id": "MDU6SXNzdWU0MTI1NzQ1NTc=", "number": 1041, "title": "[DRF] Schema not generated for custom ViewSet actions", "user": {"login": "hexedit", "id": 11680233, "node_id": "MDQ6VXNlcjExNjgwMjMz", "avatar_url": "https://avatars3.githubusercontent.com/u/11680233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hexedit", "html_url": "https://github.com/hexedit", "followers_url": "https://api.github.com/users/hexedit/followers", "following_url": "https://api.github.com/users/hexedit/following{/other_user}", "gists_url": "https://api.github.com/users/hexedit/gists{/gist_id}", "starred_url": "https://api.github.com/users/hexedit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hexedit/subscriptions", "organizations_url": "https://api.github.com/users/hexedit/orgs", "repos_url": "https://api.github.com/users/hexedit/repos", "events_url": "https://api.github.com/users/hexedit/events{/privacy}", "received_events_url": "https://api.github.com/users/hexedit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-20T18:49:02Z", "updated_at": "2019-02-20T22:59:12Z", "closed_at": "2019-02-20T22:59:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Filter:\r\n```python\r\nclass MyModelFilter(filters.FilterSet):\r\n    class Meta:\r\n        model = MyModel\r\n        fields = ['int_filter', 'str_filter']\r\n```\r\nViewSet:\r\n```python\r\nclass MyModelView(ModelViewSet):\r\n    queryset = MyModel.objects.all()\r\n    serializer_class = MyModelSerializer\r\n    filterset_class = MyModelFilter\r\n\r\n    @action(detail=False)\r\n    def count(self):\r\n        queryset = self.filter_queryset(self.get_queryset())\r\n        return Response({'count': queryset.count()})\r\n```\r\nGenerated schema:\r\n```yaml\r\npaths:\r\n  /mymodel/:\r\n    get:\r\n      operationId: mymodel_list\r\n      parameters:\r\n      - in: query\r\n        name: int_filter\r\n        schema:\r\n          description: ''\r\n          title: ''\r\n          type: number\r\n      - in: query\r\n        name: str_filter\r\n        schema:\r\n          description: ''\r\n          title: ''\r\n          type: string\r\n      tags:\r\n      - mymodel\r\n  /mymodel/count/:\r\n    get:\r\n      operationId: mymodel_count\r\n      tags:\r\n      - mymodel\r\n  /mymodel/{id}/:\r\n    get:\r\n      operationId: mymodel_read\r\n      parameters:\r\n      - in: path\r\n        name: id\r\n        required: true\r\n        schema:\r\n          description: A unique integer value identifying this mymodel.\r\n          title: ID\r\n          type: integer\r\n      - in: query\r\n        name: int_filter\r\n        schema:\r\n          description: ''\r\n          title: ''\r\n          type: number\r\n      - in: query\r\n        name: str_filter\r\n        schema:\r\n          description: ''\r\n          title: ''\r\n          type: string\r\n      tags:\r\n      - mymodel\r\n```\r\nFiltering on `count` works as expected but parameters are not generated in schema (schema is generated by `rest_framework.schemas.get_schema_view`)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1040", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1040/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1040/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1040/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1040", "id": 411237259, "node_id": "MDU6SXNzdWU0MTEyMzcyNTk=", "number": 1040, "title": "LookupChoiceFilter lookup missing from API schema", "user": {"login": "dms-cat", "id": 45862333, "node_id": "MDQ6VXNlcjQ1ODYyMzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/45862333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dms-cat", "html_url": "https://github.com/dms-cat", "followers_url": "https://api.github.com/users/dms-cat/followers", "following_url": "https://api.github.com/users/dms-cat/following{/other_user}", "gists_url": "https://api.github.com/users/dms-cat/gists{/gist_id}", "starred_url": "https://api.github.com/users/dms-cat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dms-cat/subscriptions", "organizations_url": "https://api.github.com/users/dms-cat/orgs", "repos_url": "https://api.github.com/users/dms-cat/repos", "events_url": "https://api.github.com/users/dms-cat/events{/privacy}", "received_events_url": "https://api.github.com/users/dms-cat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-17T21:27:49Z", "updated_at": "2019-02-19T18:21:20Z", "closed_at": "2019-02-18T21:19:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "## How to reproduce\r\n\r\nCreate a filter class with *either* a filter like `code = filters.LookupChoiceFilter(field_name='code', lookup_choices=[('exact', 'Equals'), ('contains', 'Contains')])` *or* declare `Meta.fields` as a `dict` containing `'code': ['exact', 'contains']`.\r\n\r\n## What should happen?\r\n\r\nThe generated API schema should contain the relevant fields for requesting either an exact or substring match.\r\n\r\n## What happens instead?\r\n\r\nOnly the `code` field (no suffix or `code_lookup`) is in the generated API schema. I therefore don't see this parameter in the drf-yasg API explorer, and I get the following error message when trying to GET with `code`:\r\n\r\n```json\r\n{\r\n  \"code\": [\r\n    \"Select a lookup.\"\r\n  ]\r\n}\r\n```\r\n\r\n## Additional information\r\n\r\nConstructing the filter class with `data={'code': 'some code'}` or  `data={'code__contains': 'some substring'}` (without `code_lookup`) work fine and return the expected object. Which indicates that testing the filter class directly may not be viable, because additional validation of the input happens somewhere else.\r\n\r\nUsing django-filter 2.1.0 from PyPI.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1037", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1037/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1037/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1037/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1037", "id": 410288950, "node_id": "MDU6SXNzdWU0MTAyODg5NTA=", "number": 1037, "title": "Add DateTimeFromToRangeFilter to Migration Guide", "user": {"login": "Uxio0", "id": 6909403, "node_id": "MDQ6VXNlcjY5MDk0MDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6909403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Uxio0", "html_url": "https://github.com/Uxio0", "followers_url": "https://api.github.com/users/Uxio0/followers", "following_url": "https://api.github.com/users/Uxio0/following{/other_user}", "gists_url": "https://api.github.com/users/Uxio0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Uxio0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Uxio0/subscriptions", "organizations_url": "https://api.github.com/users/Uxio0/orgs", "repos_url": "https://api.github.com/users/Uxio0/repos", "events_url": "https://api.github.com/users/Uxio0/events{/privacy}", "received_events_url": "https://api.github.com/users/Uxio0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-14T13:01:54Z", "updated_at": "2019-02-15T11:13:08Z", "closed_at": "2019-02-15T11:13:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I went through the migration guide to update `django-filters` from v1 to v2, but the case of `DateTimeFromToRangeFilter` was not documented, lucky I found that during testing.\r\n\r\nI realized that previously in the query strings the datetimes were expected to end on `_0` and `_1`, while on the new version `_after` and `_before` was expected.\r\n\r\nI know that there's a hint that says `MultiWidget replaced by SuffixedMultiWidget`, but I think it doesn't make obvious that some fields were affected.\r\n\r\nThanks for the amazing work you do with this library", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1032", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1032/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1032/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1032/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1032", "id": 405254951, "node_id": "MDU6SXNzdWU0MDUyNTQ5NTE=", "number": 1032, "title": "Search Inside the jsonField", "user": {"login": "nikolas310", "id": 15107827, "node_id": "MDQ6VXNlcjE1MTA3ODI3", "avatar_url": "https://avatars2.githubusercontent.com/u/15107827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikolas310", "html_url": "https://github.com/nikolas310", "followers_url": "https://api.github.com/users/nikolas310/followers", "following_url": "https://api.github.com/users/nikolas310/following{/other_user}", "gists_url": "https://api.github.com/users/nikolas310/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikolas310/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikolas310/subscriptions", "organizations_url": "https://api.github.com/users/nikolas310/orgs", "repos_url": "https://api.github.com/users/nikolas310/repos", "events_url": "https://api.github.com/users/nikolas310/events{/privacy}", "received_events_url": "https://api.github.com/users/nikolas310/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-31T13:51:23Z", "updated_at": "2019-02-13T02:33:01Z", "closed_at": "2019-02-13T02:33:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've a jsonfield with data like {\"amount\": 20000}. \r\n\r\n\r\n```\r\nclass ApplicationFilter(filters.FilterSet):\r\n    FILTER_DEFAULTS = deepcopy(filterset.FILTER_FOR_DBFIELD_DEFAULTS)\r\n    FILTER_DEFAULTS.update({\r\n        JSONField: {\r\n            'filter_class': CharFilter,\r\n            'extra': lambda f: {'lookup_choices': ['icontains']},\r\n        },\r\n    })\r\n```\r\nworks fine with exact amount. But problem is when I use gte, gt, lte or lt. How to query inside json object", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1031", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1031/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1031/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1031/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1031", "id": 405036351, "node_id": "MDU6SXNzdWU0MDUwMzYzNTE=", "number": 1031, "title": "can't raise strict exception because `name` not in __init__", "user": {"login": "jheld", "id": 828813, "node_id": "MDQ6VXNlcjgyODgxMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/828813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jheld", "html_url": "https://github.com/jheld", "followers_url": "https://api.github.com/users/jheld/followers", "following_url": "https://api.github.com/users/jheld/following{/other_user}", "gists_url": "https://api.github.com/users/jheld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jheld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jheld/subscriptions", "organizations_url": "https://api.github.com/users/jheld/orgs", "repos_url": "https://api.github.com/users/jheld/repos", "events_url": "https://api.github.com/users/jheld/events{/privacy}", "received_events_url": "https://api.github.com/users/jheld/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-31T01:10:49Z", "updated_at": "2019-01-31T03:05:35Z", "closed_at": "2019-01-31T02:35:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please see this part of the traceback:\r\n  File \"/Users/<name>/3_env/lib/python3.6/site-packages/django_filters/rest_framework/backends.py\", line 94, in filter_queryset\r\n    if not filterset.is_valid() and self.raise_exception:\r\n  File \"/Users/<name>/3_env/lib/python3.6/site-packages/django_filters/filterset.py\", line 206, in is_valid\r\n    return self.is_bound and self.form.is_valid()\r\n  File \"/Users/<name>/3_env/lib/python3.6/site-packages/django_filters/rest_framework/filterset.py\", line 24, in form\r\n    form = super().form\r\n  File \"/Users/<name>/3_env/lib/python3.6/site-packages/django_filters/filterset.py\", line 258, in form\r\n    Form = self.get_form_class()\r\n  File \"/Users/<name>/3_env/lib/python3.6/site-packages/django_filters/filterset.py\", line 250, in get_form_class\r\n    for name, filter_ in self.filters.items()])\r\n  File \"/Users/<name>/3_env/lib/python3.6/site-packages/django_filters/filterset.py\", line 250, in <listcomp>\r\n    for name, filter_ in self.filters.items()])\r\n  File \"/Users/<name>/3_env/lib/python3.6/site-packages/django_filters/filters.py\", line 140, in field\r\n    self._field = self.field_class(label=self.label, **field_kwargs)\r\n  File \"/Users/<name>/3_env/lib/python3.6/site-packages/django/forms/fields.py\", line 895, in __init__\r\n    super().__init__(**kwargs)\r\n  File \"/Users/<name>/3_env/lib/python3.6/site-packages/django/forms/fields.py\", line 767, in __init__\r\n    super().__init__(**kwargs)\r\nTypeError: __init__() got an unexpected keyword argument 'name'\r\n\r\n\r\nWhen I went into that function (again this is hitting into django), and did `kwargs.pop(\"name\")` (when it's in the kwargs), then it worked.\r\n\r\nMy team is looking to migrate to django 2.1 ASAP and this is definitely going to hold us up. We have 2.1.0 version for django filter, and latest DRF.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1030", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1030/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1030/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1030/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1030", "id": 403075219, "node_id": "MDU6SXNzdWU0MDMwNzUyMTk=", "number": 1030, "title": "MultipleChoiceFilter with empty square brackets", "user": {"login": "art1415926535", "id": 5222234, "node_id": "MDQ6VXNlcjUyMjIyMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/5222234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/art1415926535", "html_url": "https://github.com/art1415926535", "followers_url": "https://api.github.com/users/art1415926535/followers", "following_url": "https://api.github.com/users/art1415926535/following{/other_user}", "gists_url": "https://api.github.com/users/art1415926535/gists{/gist_id}", "starred_url": "https://api.github.com/users/art1415926535/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/art1415926535/subscriptions", "organizations_url": "https://api.github.com/users/art1415926535/orgs", "repos_url": "https://api.github.com/users/art1415926535/repos", "events_url": "https://api.github.com/users/art1415926535/events{/privacy}", "received_events_url": "https://api.github.com/users/art1415926535/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-25T09:34:43Z", "updated_at": "2019-10-12T08:06:51Z", "closed_at": "2019-01-25T10:02:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can I create a PHP style MultipleChoiceFilter field?\r\n`?field[]=var1&field[]=var2`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1024", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1024/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1024/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1024/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1024", "id": 400985729, "node_id": "MDU6SXNzdWU0MDA5ODU3Mjk=", "number": 1024, "title": "filter field_name of foreign key not working if same field name", "user": {"login": "gonzaloamadio", "id": 1005027, "node_id": "MDQ6VXNlcjEwMDUwMjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1005027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gonzaloamadio", "html_url": "https://github.com/gonzaloamadio", "followers_url": "https://api.github.com/users/gonzaloamadio/followers", "following_url": "https://api.github.com/users/gonzaloamadio/following{/other_user}", "gists_url": "https://api.github.com/users/gonzaloamadio/gists{/gist_id}", "starred_url": "https://api.github.com/users/gonzaloamadio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gonzaloamadio/subscriptions", "organizations_url": "https://api.github.com/users/gonzaloamadio/orgs", "repos_url": "https://api.github.com/users/gonzaloamadio/repos", "events_url": "https://api.github.com/users/gonzaloamadio/events{/privacy}", "received_events_url": "https://api.github.com/users/gonzaloamadio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-19T11:08:39Z", "updated_at": "2019-01-21T20:52:39Z", "closed_at": "2019-01-21T20:52:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following model\r\n\r\n```\r\nclass ActiveJob(models.Model):\r\n  amount_to_pay=models.PositiveSmallIntegerField()\r\n  post_category=models.ForeignKey(post_area)\r\n  title = models.CharField(max_length=128)\r\n\r\n```\r\nAnd I want to filter by the name field of post_category, with icontains. If I define the filter with the same name as the field in ActiveJob model, it is now working (it returns me the hole queryset !! )\r\n\r\nWith the two commented lines I was calling like this:\r\n\r\n`/?post_category=Telecommunications`\r\n\r\nAnd with the filter defined only as category, I am calling like this:\r\n\r\n`/?category=Telecommunications\r\n`\r\n\r\nThis is the filter definition\r\n```\r\nclass ActiveJobFilter(filters.FilterSet):                                        \r\n    min_payment = filters.NumberFilter(field_name=\"amount_to_pay\", lookup_expr=\"gte\")\r\n    max_payment = filters.NumberFilter(field_name=\"amount_to_pay\", lookup_expr=\"lte\")\r\n    title = filters.CharFilter(lookup_expr='icontains')                          \r\n    #post_category = filters.CharFilter(lookup_expr='icontains', field_name='post_category__name')\r\n    category = filters.CharFilter(lookup_expr='icontains', field_name='post_category__name')\r\n                                                                                 \r\n    class Meta:                                                                  \r\n        model = ActiveJob                                                        \r\n        fields = [                                                               \r\n            \"title\",                                                             \r\n            \"category\",\r\n#            \"post_category\",                                                          \r\n            \"max_payment\",                                                       \r\n        ]                                                                        \r\n\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1023", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1023/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1023/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1023/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1023", "id": 397574193, "node_id": "MDU6SXNzdWUzOTc1NzQxOTM=", "number": 1023, "title": "Filtering by Foreign Key Model's Attribute", "user": {"login": "madelyneriksen", "id": 36825510, "node_id": "MDQ6VXNlcjM2ODI1NTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/36825510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madelyneriksen", "html_url": "https://github.com/madelyneriksen", "followers_url": "https://api.github.com/users/madelyneriksen/followers", "following_url": "https://api.github.com/users/madelyneriksen/following{/other_user}", "gists_url": "https://api.github.com/users/madelyneriksen/gists{/gist_id}", "starred_url": "https://api.github.com/users/madelyneriksen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madelyneriksen/subscriptions", "organizations_url": "https://api.github.com/users/madelyneriksen/orgs", "repos_url": "https://api.github.com/users/madelyneriksen/repos", "events_url": "https://api.github.com/users/madelyneriksen/events{/privacy}", "received_events_url": "https://api.github.com/users/madelyneriksen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-09T21:42:18Z", "updated_at": "2019-01-23T15:06:51Z", "closed_at": "2019-01-23T14:15:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there!\r\n\r\nI was working on an issue at work and wondering what the most idiomatic way of tackling it is. We have multiple `ModelMultipleChoiceFilter` filter fields for foreign keys of a model. I'm trying to figure out how to filter by a unique attribute on the foreign keys while using a `CheckboxSelectMultiple` widget, without exposing primary keys in the URLs.\r\n\r\nHere's an example that (more or less) shows how I have it set up right now.\r\n\r\n```python\r\n# app/models.py\r\nfrom django.db import models\r\n\r\nclass Foo(models.Model):\r\n    prop = models.CharField(max_length=55, unique=True)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n\r\nclass Bar(models.Model):\r\n    foo = models.ForeignKey(Foo, related_name=\"bars\")\r\n```\r\n\r\n```python\r\n# app/filters.py\r\nimport django_filters\r\nfrom app.models import Bar, Foo\r\n\r\nclass BarFilter(django_filters.FilterSet):\r\n    foo = django_filters.ModelMultipleChoiceFilter(\r\n        queryset=Foo.objects.all(),\r\n        widget=CheckboxSelectMultiple(),\r\n        label=\"Foo\",\r\n        label_suffix=\"\",\r\n    )\r\n\r\n    class Meta:\r\n        model = bar\r\n        fields = ['foo']\r\n```\r\n\r\nThis works totally fine in the view. The filters work and filter correctly with the right widgets. However, the url has the primary key in it, so in this example `/?foo=1`, whereas I want it to read `/?foo=<prop value>`, to prevent exposing my pk as well as make urls more readable.\r\n\r\nI tried modifying fields like this, because elsewhere in Django it tends to work:\r\n\r\n```python\r\n# app/filters.py\r\n...snip...\r\n    class Meta:\r\n        model = bar\r\n        fields = ['foo__prop']\r\n```\r\n\r\nThis makes the url respond to `/?foo=<prop value>` as desired, but now it doesn't use `CheckboxSelectMultiple` for the form. I tried making the attribute into `foo__prop` as well, but the form rendering was still incorrect.\r\n\r\nI have a feeling what I am trying to do is supported considering its almost working, but I can't seem to figure out quite how to get it. If this is outside the current supported scope, I can write my own form to handle this. Thank you very much for any help and for the awesome project!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1022", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1022/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1022/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1022/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1022", "id": 397490468, "node_id": "MDU6SXNzdWUzOTc0OTA0Njg=", "number": 1022, "title": "Update requirements issue in PYPI", "user": {"login": "jocassid", "id": 5742458, "node_id": "MDQ6VXNlcjU3NDI0NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5742458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jocassid", "html_url": "https://github.com/jocassid", "followers_url": "https://api.github.com/users/jocassid/followers", "following_url": "https://api.github.com/users/jocassid/following{/other_user}", "gists_url": "https://api.github.com/users/jocassid/gists{/gist_id}", "starred_url": "https://api.github.com/users/jocassid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jocassid/subscriptions", "organizations_url": "https://api.github.com/users/jocassid/orgs", "repos_url": "https://api.github.com/users/jocassid/repos", "events_url": "https://api.github.com/users/jocassid/events{/privacy}", "received_events_url": "https://api.github.com/users/jocassid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-09T18:06:57Z", "updated_at": "2019-01-20T11:03:39Z", "closed_at": "2019-01-20T11:03:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "PYPI says that the most recent version of Django supported is 2.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1018", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1018/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1018/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1018/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1018", "id": 390795211, "node_id": "MDU6SXNzdWUzOTA3OTUyMTE=", "number": 1018, "title": "Non model fields in the filterset form", "user": {"login": "Tomasz-Kluczkowski", "id": 26039401, "node_id": "MDQ6VXNlcjI2MDM5NDAx", "avatar_url": "https://avatars1.githubusercontent.com/u/26039401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tomasz-Kluczkowski", "html_url": "https://github.com/Tomasz-Kluczkowski", "followers_url": "https://api.github.com/users/Tomasz-Kluczkowski/followers", "following_url": "https://api.github.com/users/Tomasz-Kluczkowski/following{/other_user}", "gists_url": "https://api.github.com/users/Tomasz-Kluczkowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tomasz-Kluczkowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tomasz-Kluczkowski/subscriptions", "organizations_url": "https://api.github.com/users/Tomasz-Kluczkowski/orgs", "repos_url": "https://api.github.com/users/Tomasz-Kluczkowski/repos", "events_url": "https://api.github.com/users/Tomasz-Kluczkowski/events{/privacy}", "received_events_url": "https://api.github.com/users/Tomasz-Kluczkowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-13T18:03:43Z", "updated_at": "2018-12-17T20:28:36Z", "closed_at": "2018-12-17T20:28:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a need to filter by a result of a method call. Unfortunately it needs 3 parameters to be provided by the user. I know I can declare a non model field in the filter with a method to call but then just one parameter is passed to the method.\r\nI can declare 3 non model fields but then I end with 3 different methods or calling the same one with 1 changing parameter 3 times.\r\nexample code:\r\n```python\r\nclass ContractorFilter(FilterSet):\r\n    status = ChoiceFilter(field_name='status', choices=Contractor.STATUS_CHOICES)\r\n    # I show an example of what I need to achieve below, obviously it will not work as\r\n    # I need to give the user 3 fields to fill in and call the method only once with their values...\r\n    \r\n    latitude = NumberField(label='latitude', method='check_if_in_range')\r\n    longitude = NumberField(label='longitude', method='check_if_in_range')\r\n    radius = NumberField(label='radius', method='check_if_in_range') \r\n\r\n    class Meta:\r\n        model = Contractor\r\n        fields = 'status',\r\n ```\r\nexample method to filter by 3 parameters:\r\n```python\r\ndef check_if_in_range(self, queryset, name, value):\r\n    here I need access to the values from 3 non model form fields...\r\n    do calculation and filter the queryset\r\n        return <filtered queryset>\r\n```\r\n\r\nIs this even doable?\r\nI want my users to be able to use ```url?longitude=234234&latitude=232342&radius=34``` to filter contractors through the API...\r\nThank you for your time & help!\r\n\r\nTomasz", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1015", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1015/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1015/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1015/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1015", "id": 390112962, "node_id": "MDU6SXNzdWUzOTAxMTI5NjI=", "number": 1015, "title": "ImportError: cannot import name 'STRICTNESS'", "user": {"login": "dorokhin", "id": 10822884, "node_id": "MDQ6VXNlcjEwODIyODg0", "avatar_url": "https://avatars2.githubusercontent.com/u/10822884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dorokhin", "html_url": "https://github.com/dorokhin", "followers_url": "https://api.github.com/users/dorokhin/followers", "following_url": "https://api.github.com/users/dorokhin/following{/other_user}", "gists_url": "https://api.github.com/users/dorokhin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dorokhin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dorokhin/subscriptions", "organizations_url": "https://api.github.com/users/dorokhin/orgs", "repos_url": "https://api.github.com/users/dorokhin/repos", "events_url": "https://api.github.com/users/dorokhin/events{/privacy}", "received_events_url": "https://api.github.com/users/dorokhin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-12T08:23:42Z", "updated_at": "2018-12-13T02:04:19Z", "closed_at": "2018-12-13T02:04:19Z", "author_association": "NONE", "active_lock_reason": null, "body": " There is mistake on [doc page ](https://django-filter.readthedocs.io/en/stable/ref/filterset.html#handling-validation-errors-with-strict) \r\n\r\nSection: **Handling validation errors with strict**\r\n\r\nImportError: cannot import name 'STRICTNESS' from 'django_filters'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1013", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1013/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1013/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1013/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1013", "id": 389341912, "node_id": "MDU6SXNzdWUzODkzNDE5MTI=", "number": 1013, "title": "Meta.fields dict usage silently fails on declared filters", "user": {"login": "rpkilby", "id": 2370209, "node_id": "MDQ6VXNlcjIzNzAyMDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2370209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpkilby", "html_url": "https://github.com/rpkilby", "followers_url": "https://api.github.com/users/rpkilby/followers", "following_url": "https://api.github.com/users/rpkilby/following{/other_user}", "gists_url": "https://api.github.com/users/rpkilby/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpkilby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpkilby/subscriptions", "organizations_url": "https://api.github.com/users/rpkilby/orgs", "repos_url": "https://api.github.com/users/rpkilby/repos", "events_url": "https://api.github.com/users/rpkilby/events{/privacy}", "received_events_url": "https://api.github.com/users/rpkilby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-12-10T15:03:31Z", "updated_at": "2020-03-04T19:18:11Z", "closed_at": "2020-03-04T19:18:11Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The below is a simplified version of https://stackoverflow.com/q/53411473/1103124\r\n\r\n```python\r\nclass MyModel(models.Model):\r\n    name = models.CharField()\r\n\r\n\r\nclass CustomFilter(django_filters.FilterSet):\r\n    value = django_filters.CharFilter(field_name=\"name\")\r\n\r\n    class Meta:\r\n        model = MyModel\r\n        fields = {\r\n            'value': ['exact', 'iexact', 'contains', 'icontains', ...],\r\n        }\r\n```\r\n\r\nIn the above, the user has aliased the model's `name` field to `value`. They then try to generate additional filters against the parameter name instead of the underlying model name, but this fails silently. This should be raising `TypeError(\"'Meta.fields' contains fields that are not defined on this FilterSet: value\")`.\r\n\r\nThe underlying issue is the check here:\r\nhttps://github.com/carltongibson/django-filter/blob/15683cd14e0f20a0bed8abab3448b5789e78fc62/django_filters/filterset.py#L348\r\n\r\nSince `value` is a declared filter, it's removed from the list. \r\n\r\nThe \"missing fields\" handling should be reworked to \"missing field/lookup expressions\". I assume this code also silently fails for non-existent lookups such as `foo`.\r\n\r\n----\r\n\r\nOne alternative solution would be to support #774. It would be possible to use the declared filter's attribute name and `field_name` as the basis for generating additional aliased filters, but I have a feeling this could be too magical/complex. e.g., would users expect the declared filter's arguments (e.g., `choices`) to be copied or not?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1010", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1010/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1010/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1010/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1010", "id": 383671364, "node_id": "MDU6SXNzdWUzODM2NzEzNjQ=", "number": 1010, "title": "Meta.fields look-ups no longer work with annotated fields in 2.0", "user": {"login": "markgajdosik", "id": 1584019, "node_id": "MDQ6VXNlcjE1ODQwMTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1584019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markgajdosik", "html_url": "https://github.com/markgajdosik", "followers_url": "https://api.github.com/users/markgajdosik/followers", "following_url": "https://api.github.com/users/markgajdosik/following{/other_user}", "gists_url": "https://api.github.com/users/markgajdosik/gists{/gist_id}", "starred_url": "https://api.github.com/users/markgajdosik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markgajdosik/subscriptions", "organizations_url": "https://api.github.com/users/markgajdosik/orgs", "repos_url": "https://api.github.com/users/markgajdosik/repos", "events_url": "https://api.github.com/users/markgajdosik/events{/privacy}", "received_events_url": "https://api.github.com/users/markgajdosik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-22T23:18:53Z", "updated_at": "2018-12-17T18:29:18Z", "closed_at": "2018-12-17T18:29:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've recently upgraded to 2.0, which apart from this particular issue, went quite well. I am using query-set annotations as quick read-only fields. I define supported look-ups for these fields in `Meta.fields`, but as of 2.0, these now work only for actual model fields:\r\n\r\n```python\r\nclass MySerializer(ModelSerializer):\r\n    annotated_field = IntegerField(read_only=True)\r\n\r\n    class Meta:\r\n        model = MyModel\r\n        fields = ('model_field', 'annotated_field')\r\n\r\n\r\nclass MyFilterSet(FilterSet):\r\n    annotated_field = NumberFilter()\r\n\r\n    class Meta:\r\n        model = MyModel\r\n        fields = {'model_field': ['exact', 'gt', 'lt'], # <-- Works as expected.\r\n                  'annotated_field': ['exact', 'gt', 'lt']}  # <-- Doesn't work for me.\r\n\r\n\r\nclass MyViewSet(ModelViewSet):\r\n    serializer_class = MySerializer\r\n    filterset_class = MyFilterSet\r\n    filter_backends = (DjangoFilterBackend,)\r\n    queryset = MyModel.objects.annotate(\r\n        annotated_field=Coalesce('field_a', 'field_b', 'field_c'))\r\n```\r\nAs you can see above, my `Meta.fields` defines **exact**, **gt** and **lt** as look-ups available to both the model and the annotated field. For some reason, I can't get the annotated field look-ups to work and I am sure this was OK in 1.x. Has this functionality been deprecated or accidentally removed? \r\n\r\nThank you in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1009", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1009/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1009/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1009/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1009", "id": 383225271, "node_id": "MDU6SXNzdWUzODMyMjUyNzE=", "number": 1009, "title": "`[invalid_name]` displaying when not filtering on a model field", "user": {"login": "knyghty", "id": 3871354, "node_id": "MDQ6VXNlcjM4NzEzNTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3871354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/knyghty", "html_url": "https://github.com/knyghty", "followers_url": "https://api.github.com/users/knyghty/followers", "following_url": "https://api.github.com/users/knyghty/following{/other_user}", "gists_url": "https://api.github.com/users/knyghty/gists{/gist_id}", "starred_url": "https://api.github.com/users/knyghty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/knyghty/subscriptions", "organizations_url": "https://api.github.com/users/knyghty/orgs", "repos_url": "https://api.github.com/users/knyghty/repos", "events_url": "https://api.github.com/users/knyghty/events{/privacy}", "received_events_url": "https://api.github.com/users/knyghty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-21T17:32:01Z", "updated_at": "2019-10-01T17:17:46Z", "closed_at": "2019-10-01T17:17:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is a bug report or a feature request.\r\n\r\nIf I have a field that doesn't correspond to a field on the model (filters multiple fields, etc.), the label defaults to `[invalid_name]`. It seems like it'd be nicer if it defaulted to the field name or something similar?\r\n\r\nWorks fine:\r\n```python\r\nstatus = django_filters.ChoiceFilter(\r\n    label='Status',\r\n    method='filter_status',\r\n    choices=STATUS_CHOICES,\r\n)\r\n```\r\n\r\n`[invalid_name]`:\r\n```python\r\nstatus = django_filters.ChoiceFilter(method='filter_status', choices=STATUS_CHOICES)\r\n```\r\n\r\nAlso `[invalid_name]`:\r\n```python\r\nstatus = django_filters.ChoiceFilter(\r\n    field_name='status',\r\n    method='filter_status',\r\n    choices=STATUS_CHOICES,\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1008", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1008/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1008/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1008/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1008", "id": 382175116, "node_id": "MDU6SXNzdWUzODIxNzUxMTY=", "number": 1008, "title": "No warnings shown when using deprecated functionality", "user": {"login": "OskarPersson", "id": 935414, "node_id": "MDQ6VXNlcjkzNTQxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/935414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OskarPersson", "html_url": "https://github.com/OskarPersson", "followers_url": "https://api.github.com/users/OskarPersson/followers", "following_url": "https://api.github.com/users/OskarPersson/following{/other_user}", "gists_url": "https://api.github.com/users/OskarPersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/OskarPersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OskarPersson/subscriptions", "organizations_url": "https://api.github.com/users/OskarPersson/orgs", "repos_url": "https://api.github.com/users/OskarPersson/repos", "events_url": "https://api.github.com/users/OskarPersson/events{/privacy}", "received_events_url": "https://api.github.com/users/OskarPersson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-19T11:37:51Z", "updated_at": "2018-12-18T09:44:21Z", "closed_at": "2018-12-18T09:44:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've setup a simple project based on the example described by Django Rest Framework (DRF) where I've added a `filter_class` and `detail_route` to the viewset:\r\n\r\n```\r\n# djangofilterwarn/urls.py\r\n\r\nfrom django.conf.urls import url, include\r\nfrom django.contrib.auth.models import User\r\nfrom django_filters import rest_framework as filters\r\nfrom rest_framework import decorators, serializers, viewsets, routers\r\n\r\n\r\nclass UserFilter(filters.FilterSet):\r\n    class Meta:\r\n        model = User\r\n        fields = ['username']\r\n\r\n\r\n# Serializers define the API representation.\r\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\r\n    class Meta:\r\n        model = User\r\n        fields = ('url', 'username', 'email', 'is_staff')\r\n\r\n\r\n# ViewSets define the view behavior.\r\nclass UserViewSet(viewsets.ModelViewSet):\r\n    queryset = User.objects.all()\r\n    serializer_class = UserSerializer\r\n    filter_backends = (filters.DjangoFilterBackend,)\r\n    filter_class = UserFilter\r\n\r\n    @decorators.detail_route()\r\n    def foo(self, request, pk=None):\r\n        pass\r\n\r\nrouter = routers.DefaultRouter()\r\nrouter.register(r'users', UserViewSet)\r\n\r\nurlpatterns = [\r\n    url(r'^', include(router.urls)),\r\n]\r\n```\r\n\r\nWhen running `python -W once manage.py test` this should print a message warning me about `filter_class` being replaced by `filterset_class` but the only message I get is the DRF deprecation of `detail_route` being replaced by `action`:\r\n\r\n```\r\npython -W once manage.py test\r\nCreating test database for alias 'default'...\r\n/Users/Oskar/git/djangofilterwarn/djangofilterwarn/urls.py:26: PendingDeprecationWarning: `detail_route` is pending deprecation and will be removed in 3.10 in favor of `action`, which accepts a `detail` bool. Use `@action(detail=True)` instead.\r\n  @decorators.detail_route()\r\nSystem check identified no issues (0 silenced).\r\n\r\n----------------------------------------------------------------------\r\nRan 0 tests in 0.000s\r\n\r\nOK\r\nDestroying test database for alias 'default'...\r\n```\r\n\r\n\r\nI'm using Python 3.6.6 and the output of `pip freeze` is:\r\n```\r\nDjango==1.11.16\r\ndjango-filter==2.0.0\r\ndjangorestframework==3.8.2\r\npytz==2018.7\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1006", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1006/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1006/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1006/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1006", "id": 381786499, "node_id": "MDU6SXNzdWUzODE3ODY0OTk=", "number": 1006, "title": "Use a certain lookup by default?", "user": {"login": "tiloc", "id": 16414047, "node_id": "MDQ6VXNlcjE2NDE0MDQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/16414047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tiloc", "html_url": "https://github.com/tiloc", "followers_url": "https://api.github.com/users/tiloc/followers", "following_url": "https://api.github.com/users/tiloc/following{/other_user}", "gists_url": "https://api.github.com/users/tiloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/tiloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tiloc/subscriptions", "organizations_url": "https://api.github.com/users/tiloc/orgs", "repos_url": "https://api.github.com/users/tiloc/repos", "events_url": "https://api.github.com/users/tiloc/events{/privacy}", "received_events_url": "https://api.github.com/users/tiloc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-16T22:42:25Z", "updated_at": "2018-11-17T15:10:54Z", "closed_at": "2018-11-17T10:34:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a field called 'code' in my model. Due to its semantics it makes sense to always use the 'istartswith' lookup on it. When I declare my FilterSet like this:\r\n```python\r\nclass ObservationFilter(FilterSet):\r\n    \"\"\"Custom filters for observations\"\"\"\r\n    class Meta:\r\n        model = Observation\r\n        fields = {\r\n            'code': ['istartswith']\r\n        }\r\n```\r\n\r\nI get a request parameter ```code__istartswith``` in DRF. Can I somehow tweak this thus that the name of the parameter is just ```code```, but it still uses ```istartswith``` semantics?\r\n\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1004", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1004/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1004/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1004/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1004", "id": 380288081, "node_id": "MDU6SXNzdWUzODAyODgwODE=", "number": 1004, "title": "Add a IsoDateTimeFromToRangeFilter", "user": {"login": "jobec", "id": 16192496, "node_id": "MDQ6VXNlcjE2MTkyNDk2", "avatar_url": "https://avatars3.githubusercontent.com/u/16192496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jobec", "html_url": "https://github.com/jobec", "followers_url": "https://api.github.com/users/jobec/followers", "following_url": "https://api.github.com/users/jobec/following{/other_user}", "gists_url": "https://api.github.com/users/jobec/gists{/gist_id}", "starred_url": "https://api.github.com/users/jobec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jobec/subscriptions", "organizations_url": "https://api.github.com/users/jobec/orgs", "repos_url": "https://api.github.com/users/jobec/repos", "events_url": "https://api.github.com/users/jobec/events{/privacy}", "received_events_url": "https://api.github.com/users/jobec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-13T15:40:06Z", "updated_at": "2018-12-17T20:08:30Z", "closed_at": "2018-12-17T20:08:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There's a `DateTimeFromToRangeFilter` but this one does not support dates formatted in ISO format.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1002", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1002/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1002/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1002/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1002", "id": 378372874, "node_id": "MDU6SXNzdWUzNzgzNzI4NzQ=", "number": 1002, "title": "Custom order explanation", "user": {"login": "s1104373", "id": 32356509, "node_id": "MDQ6VXNlcjMyMzU2NTA5", "avatar_url": "https://avatars0.githubusercontent.com/u/32356509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s1104373", "html_url": "https://github.com/s1104373", "followers_url": "https://api.github.com/users/s1104373/followers", "following_url": "https://api.github.com/users/s1104373/following{/other_user}", "gists_url": "https://api.github.com/users/s1104373/gists{/gist_id}", "starred_url": "https://api.github.com/users/s1104373/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s1104373/subscriptions", "organizations_url": "https://api.github.com/users/s1104373/orgs", "repos_url": "https://api.github.com/users/s1104373/repos", "events_url": "https://api.github.com/users/s1104373/events{/privacy}", "received_events_url": "https://api.github.com/users/s1104373/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-07T16:43:01Z", "updated_at": "2018-11-08T11:26:15Z", "closed_at": "2018-11-08T11:26:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a foreign key on a table to the table I want to order on. I wanted to make a custom order filter for it but it won't work. This is the filter:\r\n\r\n```\r\n    class TrainingDateOrderingFilter(OrderingFilter):\r\n        def __init__(self, *args, **kwargs):\r\n            super(TrainingDateOrderingFilter, self).__init__(*args, **kwargs)\r\n            self.extra['choices'] += [\r\n                ('dates', 'dates'),\r\n                ('-dates', '-dates'),\r\n            ]\r\n\r\n        def filter(self, qs, value):\r\n            if any(v in ['dates', '-dates'] for v in value):\r\n                return qs.order_by(lambda t: t.dates.first().date)\r\n            return super(TrainingDateOrderingFilter, self).filter(qs, value)\r\n```\r\n\r\nthe filter class itself:\r\n```\r\n    class TrainingFilter(FilterSet):\r\n        dates = TrainingDateOrderingFilter()\r\n\r\n        class Meta:\r\n            model = Training\r\n            fields = '__all__'\r\n\r\n        order_by = OrderingFilter(\r\n            fields=(\r\n                ('location', 'location'),\r\n                ('course__name', 'course'),\r\n                ('trainer__name', 'trainer'),\r\n            ),\r\n            choices=(\r\n                ('dates', 'dates'),\r\n            )\r\n        )\r\n```\r\n\r\nCan someone explain what I am doing wrong. I get 2 errors:\r\nTo many values to unpack (expected 2)\r\nAnd\r\n'NoneType' object is not iterable\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/1001", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1001/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1001/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/1001/events", "html_url": "https://github.com/carltongibson/django-filter/issues/1001", "id": 377582992, "node_id": "MDU6SXNzdWUzNzc1ODI5OTI=", "number": 1001, "title": "TypeError: 'Meta.fields' contains fields that are not defined on this FilterSet:", "user": {"login": "damey2011", "id": 13982346, "node_id": "MDQ6VXNlcjEzOTgyMzQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/13982346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/damey2011", "html_url": "https://github.com/damey2011", "followers_url": "https://api.github.com/users/damey2011/followers", "following_url": "https://api.github.com/users/damey2011/following{/other_user}", "gists_url": "https://api.github.com/users/damey2011/gists{/gist_id}", "starred_url": "https://api.github.com/users/damey2011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/damey2011/subscriptions", "organizations_url": "https://api.github.com/users/damey2011/orgs", "repos_url": "https://api.github.com/users/damey2011/repos", "events_url": "https://api.github.com/users/damey2011/events{/privacy}", "received_events_url": "https://api.github.com/users/damey2011/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-05T21:08:14Z", "updated_at": "2018-11-05T22:35:31Z", "closed_at": "2018-11-05T22:35:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "When we have a model that is extending another class for example:\r\n\r\n`class ExtraMixin:`\r\n`     is_head = models.BooleanField(default=False)`\r\n\r\n`class Account(AbstractUser, ExtraMixin):`\r\n`    email = models.EmailField(unique=True)`\r\n`    date_of_birth = models.DateField(null=True, blank=True)`\r\n`    sex = models.CharField(max_length=3, blank=True, null=True, choices=SEX)\r\n`\r\nThis error is returned when 'is_head; is added to the Filterset class as a field\r\n\r\n`TypeError: 'Meta.fields' contains fields that are not defined on this FilterSet: is_head`\r\n\r\nBut once you add 'is_head' to the main Account model, all works as expected\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/999", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/999/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/999/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/999/events", "html_url": "https://github.com/carltongibson/django-filter/issues/999", "id": 376726435, "node_id": "MDU6SXNzdWUzNzY3MjY0MzU=", "number": 999, "title": "Not able to set custom context variable", "user": {"login": "parijathakumar", "id": 883045, "node_id": "MDQ6VXNlcjg4MzA0NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/883045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parijathakumar", "html_url": "https://github.com/parijathakumar", "followers_url": "https://api.github.com/users/parijathakumar/followers", "following_url": "https://api.github.com/users/parijathakumar/following{/other_user}", "gists_url": "https://api.github.com/users/parijathakumar/gists{/gist_id}", "starred_url": "https://api.github.com/users/parijathakumar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parijathakumar/subscriptions", "organizations_url": "https://api.github.com/users/parijathakumar/orgs", "repos_url": "https://api.github.com/users/parijathakumar/repos", "events_url": "https://api.github.com/users/parijathakumar/events{/privacy}", "received_events_url": "https://api.github.com/users/parijathakumar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-02T09:12:14Z", "updated_at": "2018-11-02T10:10:55Z", "closed_at": "2018-11-02T10:10:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to capture a URL parameter named 'role' and pass a filtered (based on the captured 'role') queryset to the filterset.\r\n\r\n\r\nURL ...\r\n\r\n`\r\npath('<slug:role>/', PartyList.as_view(), name='party_list')`\r\n\r\nIt's my view ...\r\n\r\n```\r\nclass PartyList(FilterView):\r\n    filterset_class = PartyFilter\r\n    queryset = Party.objects.filter(abstract_entry=False)\r\n    template_name = 'core/party_list.html'\r\n    strict = False\r\n\r\n    def get_queryset(self, *args, **kwargs):\r\n        queryset = super().get_queryset(*args, **kwargs)\r\n        return queryset.filter(role=self.kwargs['role'])\r\n\r\n    def get_context_data(self, *args, **kwargs):\r\n        context = super().get_context_data(*args, **kwargs)\r\n        context['role'] = self.kwargs['role']       \r\n        return context\r\n```\r\n\r\nMy filterset is defined as below ...\r\n\r\n```\r\nclass PartyFilter(django_filters.FilterSet):\r\n    title = django_filters.CharFilter(lookup_expr='icontains')\r\n    short_title = django_filters.CharFilter(lookup_expr='icontains')\r\n\r\n    class Meta:\r\n        model = Party\r\n        fields = ['title', 'short_title', 'category', 'industry']\r\n```\r\n\r\nBut the context variable 'role' which I've added in get_context_data() is not added to the context. Am I missing anything here ?   ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/992", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/992/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/992/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/992/events", "html_url": "https://github.com/carltongibson/django-filter/issues/992", "id": 375242744, "node_id": "MDU6SXNzdWUzNzUyNDI3NDQ=", "number": 992, "title": "Limiting/cutoff model choices with DRF", "user": {"login": "rrauenza", "id": 1376251, "node_id": "MDQ6VXNlcjEzNzYyNTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1376251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rrauenza", "html_url": "https://github.com/rrauenza", "followers_url": "https://api.github.com/users/rrauenza/followers", "following_url": "https://api.github.com/users/rrauenza/following{/other_user}", "gists_url": "https://api.github.com/users/rrauenza/gists{/gist_id}", "starred_url": "https://api.github.com/users/rrauenza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rrauenza/subscriptions", "organizations_url": "https://api.github.com/users/rrauenza/orgs", "repos_url": "https://api.github.com/users/rrauenza/repos", "events_url": "https://api.github.com/users/rrauenza/events{/privacy}", "received_events_url": "https://api.github.com/users/rrauenza/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-29T22:26:11Z", "updated_at": "2018-10-31T17:18:59Z", "closed_at": "2018-10-30T10:19:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a 'through' model (used for Many to Many) I'm making a DRF endpoint for and I need to be able to filter on the two foreign keys.\r\n\r\nWhen I add the filterset to the DRF view, the API Render of the endpoint in DRF takes a really really long time to render because it is adding all the possible choices to DRF Filter UI's choices field.   I'd like to be able to limit the number of choices (or force it to be just a text box, with no suggested choices for the foreign key.)\r\n\r\nIs this possible?\r\n\r\nUsing django-filter 1.x because Python 2.x :(", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/carltongibson/django-filter/issues/990", "repository_url": "https://api.github.com/repos/carltongibson/django-filter", "labels_url": "https://api.github.com/repos/carltongibson/django-filter/issues/990/labels{/name}", "comments_url": "https://api.github.com/repos/carltongibson/django-filter/issues/990/comments", "events_url": "https://api.github.com/repos/carltongibson/django-filter/issues/990/events", "html_url": "https://github.com/carltongibson/django-filter/issues/990", "id": 374694555, "node_id": "MDU6SXNzdWUzNzQ2OTQ1NTU=", "number": 990, "title": "Travis build failing due to incompatibility between tox and detox", "user": {"login": "therefromhere", "id": 197540, "node_id": "MDQ6VXNlcjE5NzU0MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/197540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/therefromhere", "html_url": "https://github.com/therefromhere", "followers_url": "https://api.github.com/users/therefromhere/followers", "following_url": "https://api.github.com/users/therefromhere/following{/other_user}", "gists_url": "https://api.github.com/users/therefromhere/gists{/gist_id}", "starred_url": "https://api.github.com/users/therefromhere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/therefromhere/subscriptions", "organizations_url": "https://api.github.com/users/therefromhere/orgs", "repos_url": "https://api.github.com/users/therefromhere/repos", "events_url": "https://api.github.com/users/therefromhere/events{/privacy}", "received_events_url": "https://api.github.com/users/therefromhere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-10-27T22:15:59Z", "updated_at": "2018-11-05T21:34:20Z", "closed_at": "2018-10-29T14:04:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "eg: https://travis-ci.org/carltongibson/django-filter/jobs/446129405\r\n\r\n`Traceback (most recent call last):\r\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/py/_path/local.py\", line 152, in __init__\r\n    path = fspath(path)\r\nTypeError: expected str, bytes or os.PathLike object, not tuple`\r\n\r\nsee https://github.com/tox-dev/detox/issues/33", "performed_via_github_app": null, "score": 1.0}]}