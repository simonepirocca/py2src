{"total_count": 7, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/14", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-base-url", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/14/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/14/events", "html_url": "https://github.com/pytest-dev/pytest-base-url/issues/14", "id": 638170994, "node_id": "MDU6SXNzdWU2MzgxNzA5OTQ=", "number": 14, "title": "Upcoming incompatibility in pytest-xdist 2.0: \"slave\" aliases removed", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-13T14:25:23Z", "updated_at": "2020-06-19T22:53:11Z", "closed_at": "2020-06-19T22:53:11Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hi!\r\n\r\nAs per https://github.com/pytest-dev/pytest-xdist/pull/541, pytest-xdist 2.0 will remove the deprecated \"slave\" \r\naliases, which have been replaced by \"worker\" since pytest-xdist 1.22.\r\n\r\nTo avoid breakage, the team suggests to update your package to use the new terms, and make a new release to avoid sudden breakages once pytest-xdist 2.0 is released.\r\n\r\ncc @Zac-HD @RonnyPfannschmidt\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/12", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-base-url", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/12/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/12/events", "html_url": "https://github.com/pytest-dev/pytest-base-url/issues/12", "id": 620816935, "node_id": "MDU6SXNzdWU2MjA4MTY5MzU=", "number": 12, "title": "Lazy load requests dependency", "user": {"login": "BeyondEvil", "id": 15611634, "node_id": "MDQ6VXNlcjE1NjExNjM0", "avatar_url": "https://avatars3.githubusercontent.com/u/15611634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BeyondEvil", "html_url": "https://github.com/BeyondEvil", "followers_url": "https://api.github.com/users/BeyondEvil/followers", "following_url": "https://api.github.com/users/BeyondEvil/following{/other_user}", "gists_url": "https://api.github.com/users/BeyondEvil/gists{/gist_id}", "starred_url": "https://api.github.com/users/BeyondEvil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BeyondEvil/subscriptions", "organizations_url": "https://api.github.com/users/BeyondEvil/orgs", "repos_url": "https://api.github.com/users/BeyondEvil/repos", "events_url": "https://api.github.com/users/BeyondEvil/events{/privacy}", "received_events_url": "https://api.github.com/users/BeyondEvil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-05-19T09:17:53Z", "updated_at": "2020-05-23T09:32:41Z", "closed_at": "2020-05-23T09:32:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Closed PR (and start of discussion): https://github.com/pytest-dev/pytest-base-url/pull/9\r\n\r\nBefore I consider implementing the lazy load, I need to understand the time/speed issue 100% and have exhausted all other (resonable) approaches.\r\n\r\n@boxed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/10", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-base-url", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/10/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/10/events", "html_url": "https://github.com/pytest-dev/pytest-base-url/issues/10", "id": 582217808, "node_id": "MDU6SXNzdWU1ODIyMTc4MDg=", "number": 10, "title": "Malformed URL: / is not a valid URL", "user": {"login": "RuslanBM", "id": 54805270, "node_id": "MDQ6VXNlcjU0ODA1Mjcw", "avatar_url": "https://avatars3.githubusercontent.com/u/54805270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RuslanBM", "html_url": "https://github.com/RuslanBM", "followers_url": "https://api.github.com/users/RuslanBM/followers", "following_url": "https://api.github.com/users/RuslanBM/following{/other_user}", "gists_url": "https://api.github.com/users/RuslanBM/gists{/gist_id}", "starred_url": "https://api.github.com/users/RuslanBM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RuslanBM/subscriptions", "organizations_url": "https://api.github.com/users/RuslanBM/orgs", "repos_url": "https://api.github.com/users/RuslanBM/repos", "events_url": "https://api.github.com/users/RuslanBM/events{/privacy}", "received_events_url": "https://api.github.com/users/RuslanBM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-16T11:30:46Z", "updated_at": "2020-03-19T23:08:01Z", "closed_at": "2020-03-19T23:08:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I got an error, when use base-url for open main page with xdist plugin. My test starts with:\r\n`main_page.open()`\r\n\r\nI run it:\r\n`pytest -n 2`\r\n\r\nAnd gets an Error:\r\n`selenium.common.exceptions.InvalidArgumentException: Message: Malformed URL: / is not a valid URL.`\r\n\r\nIf I not use base_url and go to page this way:\r\n`main_page.open_url('www.google.com')`\r\nand comment it at pytest.ini - everything is good.\r\n\r\nMy conftest.py have:\r\n@pytest.fixture()\r\ndef page_main(selenium):\r\n    return pages.MainPage(selenium)\r\n\r\nMy Pipfile:\r\n```PyPOM==2.2.0\r\npytest==5.1.2\r\npytest-bdd==3.2.1\r\npytest-xdist==1.31.0\r\npytest-base-url==1.4.1\r\npytest-selenium==1.17.0\r\n\r\ngcloud==0.18.3\r\nfirebase==3.0.1\r\npython_jwt==3.2.4\r\nsseclient-py==1.7\r\npy-postgresql==1.2.1\r\nrequests-toolbelt==0.9.1\r\narrow==0.15.4\r\nkombu==4.6.7\r\n```\r\n\r\nMy pytest.ini\r\n```\r\n[pytest]\r\nbdd_features_base_dir = tests\r\nbase_url = https://projectname.com\r\nsensitive_url = https://projectname.com\r\naddopts = --driver Remote\r\n          --port 4444\r\n          --capability browserName firefox\r\n          --html tests/logs/report.html\r\n          --cucumberjson=tests/uploads/cucumber.json\r\n          --cucumberjson-expanded\r\n          -v\r\nfilterwarnings =\r\n    ignore::DeprecationWarning\r\nmarkers =\r\n    smoke: fast result\r\n    crypto: add calculations\r\n```\r\nHere is track trace:\r\n\r\nresult = call_fixture_func(fixturefunc, request, kwargs)\r\n../../.pyenv/versions/3.6.8/envs/projectname/lib/python3.6/site-packages/_pytest/fixtures.py:778: in call_fixture_func\r\n    res = fixturefunc(**kwargs)\r\ntests/functional/test_02_deposit_by_dash.py:20: in user_signed_in\r\n    page_main.open()\r\n../../.pyenv/versions/3.6.8/envs/projectname/lib/python3.6/site-packages/pypom/page.py:130: in open\r\n    self.driver_adapter.open(self.seed_url)\r\n../../.pyenv/versions/3.6.8/envs/projectname/lib/python3.6/site-packages/pypom/selenium_driver.py:48: in open\r\n    self.driver.get(url)\r\n../../.pyenv/versions/3.6.8/envs/projectname/lib/python3.6/site-packages/selenium/webdriver/remote/webdriver.py:333: in get\r\n    self.execute(Command.GET, {'url': url})\r\n../../.pyenv/versions/3.6.8/envs/projectname/lib/python3.6/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\r\n    self.error_handler.check_response(response)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10faa6f98>\r\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"Malformed URL: / is not a valid URL.\",\"stack...dArgumentError@chrome://marionette/content/error.js:304:5\\\\nget@chrome://marionette/content/listener.js:1132:19\\\\n\"}}'}\r\n**E       selenium.common.exceptions.InvalidArgumentException: Message: Malformed URL: / is not a valid URL.**\r\n\r\nPlease help me to figure out usage of base-url plugin or fix It if you can.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/8", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-base-url", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/8/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/8/events", "html_url": "https://github.com/pytest-dev/pytest-base-url/issues/8", "id": 488195047, "node_id": "MDU6SXNzdWU0ODgxOTUwNDc=", "number": 8, "title": "`pytest.config` removed", "user": {"login": "OJFord", "id": 3946014, "node_id": "MDQ6VXNlcjM5NDYwMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3946014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OJFord", "html_url": "https://github.com/OJFord", "followers_url": "https://api.github.com/users/OJFord/followers", "following_url": "https://api.github.com/users/OJFord/following{/other_user}", "gists_url": "https://api.github.com/users/OJFord/gists{/gist_id}", "starred_url": "https://api.github.com/users/OJFord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OJFord/subscriptions", "organizations_url": "https://api.github.com/users/OJFord/orgs", "repos_url": "https://api.github.com/users/OJFord/repos", "events_url": "https://api.github.com/users/OJFord/events{/privacy}", "received_events_url": "https://api.github.com/users/OJFord/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-09-02T13:37:59Z", "updated_at": "2020-05-17T17:48:56Z", "closed_at": "2020-05-17T16:31:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "The readme suggests:\r\n```python\r\n@pytest.mark.skipif(\r\n    'dev' in pytest.config.getoption('base_url'),\r\n    reason='Search not available on dev')\r\n```\r\n\r\nbut use of `pytest.config` is deprecated in v4 and removed in v5. (Latest stable release as of writing is 5.1.2.)\r\n\r\nNot clear to me what the best recommendation is now, there's a `pytestconfig` fixture, but since it's a fixture it can't be used in a mark.\r\n\r\nSkipping in the body of the test is inelegant for a common case, but perhaps it's the only solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/6", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-base-url", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/6/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/6/events", "html_url": "https://github.com/pytest-dev/pytest-base-url/issues/6", "id": 477117875, "node_id": "MDU6SXNzdWU0NzcxMTc4NzU=", "number": 6, "title": "Trying to verify a hostname with a self signed cert fails", "user": {"login": "jrbenny35", "id": 5751892, "node_id": "MDQ6VXNlcjU3NTE4OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5751892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrbenny35", "html_url": "https://github.com/jrbenny35", "followers_url": "https://api.github.com/users/jrbenny35/followers", "following_url": "https://api.github.com/users/jrbenny35/following{/other_user}", "gists_url": "https://api.github.com/users/jrbenny35/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrbenny35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrbenny35/subscriptions", "organizations_url": "https://api.github.com/users/jrbenny35/orgs", "repos_url": "https://api.github.com/users/jrbenny35/repos", "events_url": "https://api.github.com/users/jrbenny35/events{/privacy}", "received_events_url": "https://api.github.com/users/jrbenny35/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2019-08-06T01:00:05Z", "updated_at": "2020-05-20T19:12:52Z", "closed_at": "2020-05-20T19:12:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I try to use ```--verify-base-url``` against a host that has a self signed certificate, verify times out with this error:\r\n```\r\nrequest = <SubRequest '_verify_url' for <Function test_owned_experiments_page_loads>>, base_url = 'https://localhost'\r\n\r\n    @pytest.fixture(scope='session', autouse=True)\r\n    def _verify_url(request, base_url):\r\n        \"\"\"Verifies the base URL\"\"\"\r\n        verify = request.config.option.verify_base_url\r\n        if base_url and verify:\r\n            session = requests.Session()\r\n            retries = Retry(backoff_factor=0.1,\r\n                            status_forcelist=[500, 502, 503, 504])\r\n            session.mount(base_url, HTTPAdapter(max_retries=retries))\r\n>           session.get(base_url)\r\n\r\n.tox/integration-test/lib/python3.6/site-packages/pytest_base_url/plugin.py:31: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n.tox/integration-test/lib/python3.6/site-packages/requests/sessions.py:546: in get\r\n    return self.request('GET', url, **kwargs)\r\n.tox/integration-test/lib/python3.6/site-packages/requests/sessions.py:533: in request\r\n    resp = self.send(prep, **send_kwargs)\r\n.tox/integration-test/lib/python3.6/site-packages/requests/sessions.py:646: in send\r\n    r = adapter.send(request, **kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <requests.adapters.HTTPAdapter object at 0x7f576912eac8>, request = <PreparedRequest [GET]>, stream = False, timeout = <urllib3.util.timeout.Timeout object at 0x7f5769bc3c50>, verify = True, cert = None, proxies = OrderedDict()\r\n\r\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\r\n        \"\"\"Sends PreparedRequest object. Returns Response object.\r\n    \r\n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\r\n        :param stream: (optional) Whether to stream the request content.\r\n        :param timeout: (optional) How long to wait for the server to send\r\n            data before giving up, as a float, or a :ref:`(connect timeout,\r\n            read timeout) <timeouts>` tuple.\r\n        :type timeout: float or tuple or urllib3 Timeout object\r\n        :param verify: (optional) Either a boolean, in which case it controls whether\r\n            we verify the server's TLS certificate, or a string, in which case it\r\n            must be a path to a CA bundle to use\r\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\r\n        :param proxies: (optional) The proxies dictionary to apply to the request.\r\n        :rtype: requests.Response\r\n        \"\"\"\r\n    \r\n        try:\r\n            conn = self.get_connection(request.url, proxies)\r\n        except LocationValueError as e:\r\n            raise InvalidURL(e, request=request)\r\n    \r\n        self.cert_verify(conn, request.url, verify, cert)\r\n        url = self.request_url(request, proxies)\r\n        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\r\n    \r\n        chunked = not (request.body is None or 'Content-Length' in request.headers)\r\n    \r\n        if isinstance(timeout, tuple):\r\n            try:\r\n                connect, read = timeout\r\n                timeout = TimeoutSauce(connect=connect, read=read)\r\n            except ValueError as e:\r\n                # this may raise a string formatting error.\r\n                err = (\"Invalid timeout {}. Pass a (connect, read) \"\r\n                       \"timeout tuple, or a single float to set \"\r\n                       \"both timeouts to the same value\".format(timeout))\r\n                raise ValueError(err)\r\n        elif isinstance(timeout, TimeoutSauce):\r\n            pass\r\n        else:\r\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\r\n    \r\n        try:\r\n            if not chunked:\r\n                resp = conn.urlopen(\r\n                    method=request.method,\r\n                    url=url,\r\n                    body=request.body,\r\n                    headers=request.headers,\r\n                    redirect=False,\r\n                    assert_same_host=False,\r\n                    preload_content=False,\r\n                    decode_content=False,\r\n                    retries=self.max_retries,\r\n                    timeout=timeout\r\n                )\r\n    \r\n            # Send the request.\r\n            else:\r\n                if hasattr(conn, 'proxy_pool'):\r\n                    conn = conn.proxy_pool\r\n    \r\n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\r\n    \r\n                try:\r\n                    low_conn.putrequest(request.method,\r\n                                        url,\r\n                                        skip_accept_encoding=True)\r\n    \r\n                    for header, value in request.headers.items():\r\n                        low_conn.putheader(header, value)\r\n    \r\n                    low_conn.endheaders()\r\n    \r\n                    for i in request.body:\r\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\r\n                        low_conn.send(b'\\r\\n')\r\n                        low_conn.send(i)\r\n                        low_conn.send(b'\\r\\n')\r\n                    low_conn.send(b'0\\r\\n\\r\\n')\r\n    \r\n                    # Receive the response from the server\r\n                    try:\r\n                        # For Python 2.7, use buffering of HTTP responses\r\n                        r = low_conn.getresponse(buffering=True)\r\n                    except TypeError:\r\n                        # For compatibility with Python 3.3+\r\n                        r = low_conn.getresponse()\r\n    \r\n                    resp = HTTPResponse.from_httplib(\r\n                        r,\r\n                        pool=conn,\r\n                        connection=low_conn,\r\n                        preload_content=False,\r\n                        decode_content=False\r\n                    )\r\n                except:\r\n                    # If we hit any problems here, clean up the connection.\r\n                    # Then, reraise so that we can handle the actual exception.\r\n                    low_conn.close()\r\n                    raise\r\n    \r\n        except (ProtocolError, socket.error) as err:\r\n            raise ConnectionError(err, request=request)\r\n    \r\n        except MaxRetryError as e:\r\n            if isinstance(e.reason, ConnectTimeoutError):\r\n                # TODO: Remove this in 3.0.0: see #2811\r\n                if not isinstance(e.reason, NewConnectionError):\r\n                    raise ConnectTimeout(e, request=request)\r\n    \r\n            if isinstance(e.reason, ResponseError):\r\n                raise RetryError(e, request=request)\r\n    \r\n            if isinstance(e.reason, _ProxyError):\r\n                raise ProxyError(e, request=request)\r\n    \r\n            if isinstance(e.reason, _SSLError):\r\n                # This branch is for urllib3 v1.22 and later.\r\n>               raise SSLError(e, request=request)\r\nE               requests.exceptions.SSLError: HTTPSConnectionPool(host='localhost', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:852)'),))\r\n\r\n.tox/integration-test/lib/python3.6/site-packages/requests/adapters.py:514: SSLError\r\n```\r\n\r\nAccording to [this](https://stackoverflow.com/a/46567419) there is a way for requests to skip this verification. Of course that can lead to other problems.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/3", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-base-url", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/3/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/3/events", "html_url": "https://github.com/pytest-dev/pytest-base-url/issues/3", "id": 223949088, "node_id": "MDU6SXNzdWUyMjM5NDkwODg=", "number": 3, "title": "Multiple attempts to verify the base URL.", "user": {"login": "jrbenny35", "id": 5751892, "node_id": "MDQ6VXNlcjU3NTE4OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5751892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrbenny35", "html_url": "https://github.com/jrbenny35", "followers_url": "https://api.github.com/users/jrbenny35/followers", "following_url": "https://api.github.com/users/jrbenny35/following{/other_user}", "gists_url": "https://api.github.com/users/jrbenny35/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrbenny35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrbenny35/subscriptions", "organizations_url": "https://api.github.com/users/jrbenny35/orgs", "repos_url": "https://api.github.com/users/jrbenny35/repos", "events_url": "https://api.github.com/users/jrbenny35/events{/privacy}", "received_events_url": "https://api.github.com/users/jrbenny35/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 373732165, "node_id": "MDU6TGFiZWwzNzM3MzIxNjU=", "url": "https://api.github.com/repos/pytest-dev/pytest-base-url/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "jrbenny35", "id": 5751892, "node_id": "MDQ6VXNlcjU3NTE4OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5751892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrbenny35", "html_url": "https://github.com/jrbenny35", "followers_url": "https://api.github.com/users/jrbenny35/followers", "following_url": "https://api.github.com/users/jrbenny35/following{/other_user}", "gists_url": "https://api.github.com/users/jrbenny35/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrbenny35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrbenny35/subscriptions", "organizations_url": "https://api.github.com/users/jrbenny35/orgs", "repos_url": "https://api.github.com/users/jrbenny35/repos", "events_url": "https://api.github.com/users/jrbenny35/events{/privacy}", "received_events_url": "https://api.github.com/users/jrbenny35/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jrbenny35", "id": 5751892, "node_id": "MDQ6VXNlcjU3NTE4OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5751892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrbenny35", "html_url": "https://github.com/jrbenny35", "followers_url": "https://api.github.com/users/jrbenny35/followers", "following_url": "https://api.github.com/users/jrbenny35/following{/other_user}", "gists_url": "https://api.github.com/users/jrbenny35/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrbenny35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrbenny35/subscriptions", "organizations_url": "https://api.github.com/users/jrbenny35/orgs", "repos_url": "https://api.github.com/users/jrbenny35/repos", "events_url": "https://api.github.com/users/jrbenny35/events{/privacy}", "received_events_url": "https://api.github.com/users/jrbenny35/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2017-04-24T20:58:13Z", "updated_at": "2017-06-13T15:46:44Z", "closed_at": "2017-06-12T21:43:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think it would be nice to have multiple attempts at trying to verify the base URL, especially if a server is starting up. Maybe just a number of attempts, or a max time allowed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/1", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-base-url", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/1/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-base-url/issues/1/events", "html_url": "https://github.com/pytest-dev/pytest-base-url/issues/1", "id": 178826727, "node_id": "MDU6SXNzdWUxNzg4MjY3Mjc=", "number": 1, "title": "Support specifying a base URL via environment variable", "user": {"login": "davehunt", "id": 122800, "node_id": "MDQ6VXNlcjEyMjgwMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/122800?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davehunt", "html_url": "https://github.com/davehunt", "followers_url": "https://api.github.com/users/davehunt/followers", "following_url": "https://api.github.com/users/davehunt/following{/other_user}", "gists_url": "https://api.github.com/users/davehunt/gists{/gist_id}", "starred_url": "https://api.github.com/users/davehunt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davehunt/subscriptions", "organizations_url": "https://api.github.com/users/davehunt/orgs", "repos_url": "https://api.github.com/users/davehunt/repos", "events_url": "https://api.github.com/users/davehunt/events{/privacy}", "received_events_url": "https://api.github.com/users/davehunt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 373732165, "node_id": "MDU6TGFiZWwzNzM3MzIxNjU=", "url": "https://api.github.com/repos/pytest-dev/pytest-base-url/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 373732166, "node_id": "MDU6TGFiZWwzNzM3MzIxNjY=", "url": "https://api.github.com/repos/pytest-dev/pytest-base-url/labels/help%20wanted", "name": "help wanted", "color": "128A0C", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "m8ttyB", "id": 63193, "node_id": "MDQ6VXNlcjYzMTkz", "avatar_url": "https://avatars3.githubusercontent.com/u/63193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m8ttyB", "html_url": "https://github.com/m8ttyB", "followers_url": "https://api.github.com/users/m8ttyB/followers", "following_url": "https://api.github.com/users/m8ttyB/following{/other_user}", "gists_url": "https://api.github.com/users/m8ttyB/gists{/gist_id}", "starred_url": "https://api.github.com/users/m8ttyB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m8ttyB/subscriptions", "organizations_url": "https://api.github.com/users/m8ttyB/orgs", "repos_url": "https://api.github.com/users/m8ttyB/repos", "events_url": "https://api.github.com/users/m8ttyB/events{/privacy}", "received_events_url": "https://api.github.com/users/m8ttyB/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "m8ttyB", "id": 63193, "node_id": "MDQ6VXNlcjYzMTkz", "avatar_url": "https://avatars3.githubusercontent.com/u/63193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m8ttyB", "html_url": "https://github.com/m8ttyB", "followers_url": "https://api.github.com/users/m8ttyB/followers", "following_url": "https://api.github.com/users/m8ttyB/following{/other_user}", "gists_url": "https://api.github.com/users/m8ttyB/gists{/gist_id}", "starred_url": "https://api.github.com/users/m8ttyB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m8ttyB/subscriptions", "organizations_url": "https://api.github.com/users/m8ttyB/orgs", "repos_url": "https://api.github.com/users/m8ttyB/repos", "events_url": "https://api.github.com/users/m8ttyB/events{/privacy}", "received_events_url": "https://api.github.com/users/m8ttyB/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2016-09-23T09:23:17Z", "updated_at": "2017-02-27T15:24:37Z", "closed_at": "2017-02-27T15:24:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It's already possible to do this using `PYTEST_ADDOPTS` but I think it would be a nice idea to add support for a `PYTEST_BASE_URL` environment variable. If present this would be used, but would be overridden by any other method for specifying the URL.\n", "performed_via_github_app": null, "score": 1.0}]}