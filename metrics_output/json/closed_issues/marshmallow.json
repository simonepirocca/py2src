{"total_count": 845, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1652", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1652/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1652/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1652/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1652", "id": 681019848, "node_id": "MDU6SXNzdWU2ODEwMTk4NDg=", "number": 1652, "title": "Access schema fields on class level", "user": {"login": "KaiMueller01", "id": 38523338, "node_id": "MDQ6VXNlcjM4NTIzMzM4", "avatar_url": "https://avatars2.githubusercontent.com/u/38523338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KaiMueller01", "html_url": "https://github.com/KaiMueller01", "followers_url": "https://api.github.com/users/KaiMueller01/followers", "following_url": "https://api.github.com/users/KaiMueller01/following{/other_user}", "gists_url": "https://api.github.com/users/KaiMueller01/gists{/gist_id}", "starred_url": "https://api.github.com/users/KaiMueller01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KaiMueller01/subscriptions", "organizations_url": "https://api.github.com/users/KaiMueller01/orgs", "repos_url": "https://api.github.com/users/KaiMueller01/repos", "events_url": "https://api.github.com/users/KaiMueller01/events{/privacy}", "received_events_url": "https://api.github.com/users/KaiMueller01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-18T12:55:41Z", "updated_at": "2020-08-18T13:12:25Z", "closed_at": "2020-08-18T13:12:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\nI tried some stuff with this library and had the requirement to dynamically get the the data key of a field in a schema. This would avoid duplicate strings as shown below:\r\n\r\n```python\r\nfrom marshmallow import Schema, fields, validates_schema\r\nclass Sample(Schema):\r\n  foo = fields.Str(data_key=\"bar\")\r\n\r\n  @validates_schema\r\n  def validate(self, data, **_):\r\n    # id data[Sample.foo.data_key]\r\n    if data[\"bar\"]:\r\n      pass\r\n```\r\n\r\nIf I use the direct access _Sample.foo.data_key_ the access fails with _AttributeError: type object 'Sample' has no attribute 'foo'_.\r\nIs this blocked by purpose?\r\n\r\nBest regards,\r\nKai", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1650", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1650/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1650/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1650/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1650", "id": 679898982, "node_id": "MDU6SXNzdWU2Nzk4OTg5ODI=", "number": 1650, "title": "It seems better changing the validate module to \"validators\"", "user": {"login": "looker53", "id": 17780176, "node_id": "MDQ6VXNlcjE3NzgwMTc2", "avatar_url": "https://avatars1.githubusercontent.com/u/17780176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/looker53", "html_url": "https://github.com/looker53", "followers_url": "https://api.github.com/users/looker53/followers", "following_url": "https://api.github.com/users/looker53/following{/other_user}", "gists_url": "https://api.github.com/users/looker53/gists{/gist_id}", "starred_url": "https://api.github.com/users/looker53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/looker53/subscriptions", "organizations_url": "https://api.github.com/users/looker53/orgs", "repos_url": "https://api.github.com/users/looker53/repos", "events_url": "https://api.github.com/users/looker53/events{/privacy}", "received_events_url": "https://api.github.com/users/looker53/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-17T03:04:34Z", "updated_at": "2020-08-18T14:08:32Z", "closed_at": "2020-08-18T14:08:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "suggestion:\r\n\r\nchange marshmallow.validate.py   to   marshmallow.validators.py\r\n\r\n\r\nI got confused when I used the module and the \"validates\" decorator.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1647", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1647/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1647/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1647/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1647", "id": 678135740, "node_id": "MDU6SXNzdWU2NzgxMzU3NDA=", "number": 1647, "title": "Could you please add any way to filter the invalid data when using many param?", "user": {"login": "looker53", "id": 17780176, "node_id": "MDQ6VXNlcjE3NzgwMTc2", "avatar_url": "https://avatars1.githubusercontent.com/u/17780176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/looker53", "html_url": "https://github.com/looker53", "followers_url": "https://api.github.com/users/looker53/followers", "following_url": "https://api.github.com/users/looker53/following{/other_user}", "gists_url": "https://api.github.com/users/looker53/gists{/gist_id}", "starred_url": "https://api.github.com/users/looker53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/looker53/subscriptions", "organizations_url": "https://api.github.com/users/looker53/orgs", "repos_url": "https://api.github.com/users/looker53/repos", "events_url": "https://api.github.com/users/looker53/events{/privacy}", "received_events_url": "https://api.github.com/users/looker53/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-13T04:12:59Z", "updated_at": "2020-08-15T09:30:23Z", "closed_at": "2020-08-15T09:30:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "e.g.\r\n\r\n```python\r\nfrom marshmallow import schema, fields\r\n\r\n\r\nclass User:\r\n    def __init__(self, username, password, age):\r\n        self.username = username\r\n        self.password = password\r\n        self.age = age\r\n        \r\n    def __repr__(self):\r\n        return f\"User<username={self.username}>\"\r\n    \r\n    \r\nclass UserSchema(schema.Schema):\r\n    username = fields.Str()\r\n    password = fields.Str()\r\n    age = fields.Int()\r\n\r\n\r\nschema = UserSchema(many=True)\r\nuser1 = User(username='username1', password='123', age=14)\r\nuser2 = User(username='username2', password='123', age=\"not a int\")\r\nusers = schema.dump([user1, user2])\r\n```\r\n\r\nI got a `ValueError: invalid literal for int() with base 10: 'not a int'`  exception as usual.\r\n\r\nAny way I can delete the user2 data without an error??\r\n\r\njust like I can got a result of\r\n```\r\n[{'username': 'yuz', 'password': '123', 'age': 14}]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1646", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1646/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1646/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1646/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1646", "id": 678089271, "node_id": "MDU6SXNzdWU2NzgwODkyNzE=", "number": 1646, "title": "Why validation does not occur on serialization in 3.X?", "user": {"login": "hurcy", "id": 982262, "node_id": "MDQ6VXNlcjk4MjI2Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/982262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hurcy", "html_url": "https://github.com/hurcy", "followers_url": "https://api.github.com/users/hurcy/followers", "following_url": "https://api.github.com/users/hurcy/following{/other_user}", "gists_url": "https://api.github.com/users/hurcy/gists{/gist_id}", "starred_url": "https://api.github.com/users/hurcy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hurcy/subscriptions", "organizations_url": "https://api.github.com/users/hurcy/orgs", "repos_url": "https://api.github.com/users/hurcy/repos", "events_url": "https://api.github.com/users/hurcy/events{/privacy}", "received_events_url": "https://api.github.com/users/hurcy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-13T01:54:02Z", "updated_at": "2020-08-18T14:13:07Z", "closed_at": "2020-08-18T14:13:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to upgrade to version 3.X.\r\nI've used different naming conventions for variables in serialization.\r\nFor example, \r\nlatestAdmission = fields.DateTime(attribute=\"latest_admission\")\r\n\r\nSince I have different variable names, I can't validate using the load function.\r\nhttps://marshmallow.readthedocs.io/en/stable/upgrading.html#validation-does-not-occur-on-serialization\r\nCan I use `validate` instead of `load`?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1640", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1640/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1640/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1640/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1640", "id": 669854869, "node_id": "MDU6SXNzdWU2Njk4NTQ4Njk=", "number": 1640, "title": "How can i deserialize date as milliseconds ? ", "user": {"login": "mdhafizur", "id": 47850184, "node_id": "MDQ6VXNlcjQ3ODUwMTg0", "avatar_url": "https://avatars2.githubusercontent.com/u/47850184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdhafizur", "html_url": "https://github.com/mdhafizur", "followers_url": "https://api.github.com/users/mdhafizur/followers", "following_url": "https://api.github.com/users/mdhafizur/following{/other_user}", "gists_url": "https://api.github.com/users/mdhafizur/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdhafizur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdhafizur/subscriptions", "organizations_url": "https://api.github.com/users/mdhafizur/orgs", "repos_url": "https://api.github.com/users/mdhafizur/repos", "events_url": "https://api.github.com/users/mdhafizur/events{/privacy}", "received_events_url": "https://api.github.com/users/mdhafizur/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-31T14:07:43Z", "updated_at": "2020-08-01T13:00:05Z", "closed_at": "2020-08-01T12:05:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1639", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1639/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1639/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1639/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1639", "id": 665566423, "node_id": "MDU6SXNzdWU2NjU1NjY0MjM=", "number": 1639, "title": "1% and 0.01 handling in marshmallow", "user": {"login": "ftian1", "id": 16394660, "node_id": "MDQ6VXNlcjE2Mzk0NjYw", "avatar_url": "https://avatars1.githubusercontent.com/u/16394660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftian1", "html_url": "https://github.com/ftian1", "followers_url": "https://api.github.com/users/ftian1/followers", "following_url": "https://api.github.com/users/ftian1/following{/other_user}", "gists_url": "https://api.github.com/users/ftian1/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftian1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftian1/subscriptions", "organizations_url": "https://api.github.com/users/ftian1/orgs", "repos_url": "https://api.github.com/users/ftian1/repos", "events_url": "https://api.github.com/users/ftian1/events{/privacy}", "received_events_url": "https://api.github.com/users/ftian1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-25T11:10:46Z", "updated_at": "2020-07-25T17:13:50Z", "closed_at": "2020-07-25T17:13:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "for example i have a dict like below. the value of the dict could be a float or a percentage using % sign.\r\n{\r\n'loss': 0.01    # or 1% depends on how user enter\r\n}\r\n\r\nmay I know how to use marshmallow validate it? from the doc, fields.decimal() should be able to handle it, but I failed on it...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1638", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1638/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1638/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1638/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1638", "id": 663088058, "node_id": "MDU6SXNzdWU2NjMwODgwNTg=", "number": 1638, "title": "How to specify type for a method field, if type is a class/schema?", "user": {"login": "kettenbach-it", "id": 7711872, "node_id": "MDQ6VXNlcjc3MTE4NzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7711872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kettenbach-it", "html_url": "https://github.com/kettenbach-it", "followers_url": "https://api.github.com/users/kettenbach-it/followers", "following_url": "https://api.github.com/users/kettenbach-it/following{/other_user}", "gists_url": "https://api.github.com/users/kettenbach-it/gists{/gist_id}", "starred_url": "https://api.github.com/users/kettenbach-it/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kettenbach-it/subscriptions", "organizations_url": "https://api.github.com/users/kettenbach-it/orgs", "repos_url": "https://api.github.com/users/kettenbach-it/repos", "events_url": "https://api.github.com/users/kettenbach-it/events{/privacy}", "received_events_url": "https://api.github.com/users/kettenbach-it/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-21T15:03:56Z", "updated_at": "2020-07-21T23:40:07Z", "closed_at": "2020-07-21T23:40:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "This works:\r\n\r\n```\r\npricerange = ma.fields.Method(\"get_pricerange\")\r\n@classmethod\r\n    def get_pricerange(cls, obj: Sample):\r\n        .... do some things ....\r\n        return PricerangeSchema().dump(the_things_I_calculated)\r\n```\r\n\r\nbut the apispec will not contain a type for \"pricerange\". How can I supply the type/schema \"PricerangeSchema\" for pricerange", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1630", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1630/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1630/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1630/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1630", "id": 657259955, "node_id": "MDU6SXNzdWU2NTcyNTk5NTU=", "number": 1630, "title": "TypeError: pre_load() got an unexpected keyword argument 'many'", "user": {"login": "lungati", "id": 270464, "node_id": "MDQ6VXNlcjI3MDQ2NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/270464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lungati", "html_url": "https://github.com/lungati", "followers_url": "https://api.github.com/users/lungati/followers", "following_url": "https://api.github.com/users/lungati/following{/other_user}", "gists_url": "https://api.github.com/users/lungati/gists{/gist_id}", "starred_url": "https://api.github.com/users/lungati/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lungati/subscriptions", "organizations_url": "https://api.github.com/users/lungati/orgs", "repos_url": "https://api.github.com/users/lungati/repos", "events_url": "https://api.github.com/users/lungati/events{/privacy}", "received_events_url": "https://api.github.com/users/lungati/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-15T10:58:17Z", "updated_at": "2020-07-16T08:12:52Z", "closed_at": "2020-07-16T08:12:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm using Marshmallow 3.0.0b8 and I'm trying to upgrade but I get the error `TypeError: pre_load() got an unexpected keyword argument 'many'`\r\nThese are the related packages:\r\n\r\n` marshmallow==3.0.0b8\r\n-marshmallow-enum==1.4.1\r\n-marshmallow-sqlalchemy==0.14.1\r\n+marshmallow-enum==1.5.1\r\n+marshmallow-sqlalchemy==0.23.1\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1635", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1635/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1635/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1635/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1635", "id": 659281515, "node_id": "MDU6SXNzdWU2NTkyODE1MTU=", "number": 1635, "title": "syntax error marshmallow", "user": {"login": "yassinechaouch", "id": 24269960, "node_id": "MDQ6VXNlcjI0MjY5OTYw", "avatar_url": "https://avatars3.githubusercontent.com/u/24269960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yassinechaouch", "html_url": "https://github.com/yassinechaouch", "followers_url": "https://api.github.com/users/yassinechaouch/followers", "following_url": "https://api.github.com/users/yassinechaouch/following{/other_user}", "gists_url": "https://api.github.com/users/yassinechaouch/gists{/gist_id}", "starred_url": "https://api.github.com/users/yassinechaouch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yassinechaouch/subscriptions", "organizations_url": "https://api.github.com/users/yassinechaouch/orgs", "repos_url": "https://api.github.com/users/yassinechaouch/repos", "events_url": "https://api.github.com/users/yassinechaouch/events{/privacy}", "received_events_url": "https://api.github.com/users/yassinechaouch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-08T13:47:56Z", "updated_at": "2020-07-27T14:08:43Z", "closed_at": "2020-07-27T14:08:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n![error](https://user-images.githubusercontent.com/24269960/86926378-e3ecfa80-c129-11ea-8d91-225cfb51479c.png)\r\n\r\nwhen I try to run my flask app on a ubuntu server I get this error. \r\nAny help is much appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1625", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1625/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1625/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1625/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1625", "id": 651036048, "node_id": "MDU6SXNzdWU2NTEwMzYwNDg=", "number": 1625, "title": "Update fields.Nested documentation", "user": {"login": "Enola-guy", "id": 17969523, "node_id": "MDQ6VXNlcjE3OTY5NTIz", "avatar_url": "https://avatars3.githubusercontent.com/u/17969523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enola-guy", "html_url": "https://github.com/Enola-guy", "followers_url": "https://api.github.com/users/Enola-guy/followers", "following_url": "https://api.github.com/users/Enola-guy/following{/other_user}", "gists_url": "https://api.github.com/users/Enola-guy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enola-guy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enola-guy/subscriptions", "organizations_url": "https://api.github.com/users/Enola-guy/orgs", "repos_url": "https://api.github.com/users/Enola-guy/repos", "events_url": "https://api.github.com/users/Enola-guy/events{/privacy}", "received_events_url": "https://api.github.com/users/Enola-guy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 121211057, "node_id": "MDU6TGFiZWwxMjEyMTEwNTc=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/docs", "name": "docs", "color": "bfdadc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-05T09:38:15Z", "updated_at": "2020-07-05T14:52:24Z", "closed_at": "2020-07-05T14:52:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I've tried to use `fields.Nested(nested=\"self\")` as the  [documentation for the nested parameter said](https://marshmallow.readthedocs.io/en/stable/_modules/marshmallow/fields.html#Nested) only to have errors.\r\n\r\nAfter checking the code it seems that this is no longer supported according to the [internal code](https://marshmallow.readthedocs.io/en/stable/_modules/marshmallow/fields.html?highlight=MySchema(...)#Nested) I saw:\r\n\r\n```\r\n        if nested == \"self\":\r\n            warnings.warn(\r\n                \"Passing 'self' to `Nested` is deprecated. \"\r\n                \"Use `Nested(lambda: MySchema(...))` instead.\",\r\n                DeprecationWarning,\r\n            )\r\n```\r\nI think it would be nice to update the doc on **readthedocs** meanwhile I'll stick to the one in the repo.\r\n\r\nThanks !\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1623", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1623/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1623/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1623/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1623", "id": 650727810, "node_id": "MDU6SXNzdWU2NTA3Mjc4MTA=", "number": 1623, "title": "`PhoneNumberType` cannot query `phonenumbers.phonenumber.PhoneNumber` objects.", "user": {"login": "kunalbhagawati", "id": 8683984, "node_id": "MDQ6VXNlcjg2ODM5ODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8683984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kunalbhagawati", "html_url": "https://github.com/kunalbhagawati", "followers_url": "https://api.github.com/users/kunalbhagawati/followers", "following_url": "https://api.github.com/users/kunalbhagawati/following{/other_user}", "gists_url": "https://api.github.com/users/kunalbhagawati/gists{/gist_id}", "starred_url": "https://api.github.com/users/kunalbhagawati/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kunalbhagawati/subscriptions", "organizations_url": "https://api.github.com/users/kunalbhagawati/orgs", "repos_url": "https://api.github.com/users/kunalbhagawati/repos", "events_url": "https://api.github.com/users/kunalbhagawati/events{/privacy}", "received_events_url": "https://api.github.com/users/kunalbhagawati/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-03T18:42:30Z", "updated_at": "2020-07-03T18:44:01Z", "closed_at": "2020-07-03T18:43:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given this class:\r\n\r\n```python\r\nfrom sqlalchemy_utils import PhoneNumberType\r\n\r\nclass User(db.Model):\r\n    __tablename__ = 'users'\r\n\r\n    phone_number = db.Column(PhoneNumberType(region='IN'), unique=True, nullable=False)\r\n```\r\n\r\nthe query \r\n```python\r\nfrom phonenumbers.phonenumber import PhoneNumber\r\n\r\nphone_number = PhoneNumber('+919999999999')\r\n\r\ndb.session.query(User).filter(User.phone_number == phone_number).one()\r\n```\r\n\r\nfails with \r\n```\r\n### truncated for brevity\r\n\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/orm/query.py\", line 3436, in one\r\n    ret = self.one_or_none()\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/orm/query.py\", line 3405, in one_or_none\r\n    ret = list(self)\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/src/core/db/query.py\", line 17, in __iter__\r\n    return BaseQuery.__iter__(self.undeleted())\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/orm/query.py\", line 3481, in __iter__\r\n    return self._execute_and_instances(context)\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/orm/query.py\", line 3506, in _execute_and_instances\r\n    result = conn.execute(querycontext.statement, self._params)\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1020, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py\", line 298, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1133, in _execute_clauseelement\r\n    ret = self._execute_context(\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1213, in _execute_context\r\n    self._handle_dbapi_exception(\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1517, in _handle_dbapi_exception\r\n    util.raise_(\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py\", line 178, in raise_\r\n    raise exception\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1211, in _execute_context\r\n    context = constructor(dialect, self, conn, *args)\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 855, in _init_compiled\r\n    param = dict(\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 858, in <genexpr>\r\n    processors[key](compiled_params[key])\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy/sql/type_api.py\", line 1230, in process\r\n    return impl_processor(process_param(value, dialect))\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy_utils/types/phone_number.py\", line 183, in process_bind_param\r\n    value = PhoneNumber(value, region=self.region)\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/sqlalchemy_utils/types/phone_number.py\", line 88, in __init__\r\n    self._phone_number = phonenumbers.parse(\r\n  File \"/Users/kunal/Projects/fREADom/optimus_prime/.venv/lib/python3.8/site-packages/phonenumbers/phonenumberutil.py\", line 2792, in parse\r\n    elif len(number) > _MAX_INPUT_STRING_LENGTH:\r\nsqlalchemy.exc.StatementError: (builtins.TypeError) object of type 'PhoneNumber' has no len()\r\n[SQL: SELECT users.id AS users_id, users.entry_timestamp AS users_entry_timestamp, users.modified_timestamp AS users_modified_timestamp, users.entry_user_id AS users_entry_user_id, users.modified_user_id AS users_modified_user_id, users.deleted_timestamp AS users_deleted_timestamp, users.name AS users_name, users.email AS users_email, users.phone_number AS users_phone_number, users.properties AS users_properties, users.otp_secret AS users_otp_secret \r\nFROM users \r\nWHERE users.phone_number = %(phone_number_1)s]\r\n[parameters: [immutabledict({})]]\r\n```\r\n\r\n---\r\n\r\nMy understanding is `PhoneNumberType#process_bind_param` will raise this during instance check since it expects `sqlalchemy_utils.types.phone_number.PhoneNumber`, which is a subclass of `phonenumbers.phonenumber.PhoneNumber`.\r\n\r\n```python\r\n    def process_bind_param(self, value, dialect):\r\n        if value:\r\n            if not isinstance(value, PhoneNumber):  # <<<<< Fails here\r\n                value = PhoneNumber(value, region=self.region)\r\n\r\n            if self.STORE_FORMAT == 'e164' and value.extension:\r\n                return '%s;ext=%s' % (value.e164, value.extension)\r\n\r\n            return getattr(value, self.STORE_FORMAT)\r\n\r\n        return value\r\n```\r\n\r\nCan we add support for the base class here, or failing that, should we mention this fact in the docs?\r\n\r\n---\r\n\r\n`marshmallow==3.6.1`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1620", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1620/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1620/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1620/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1620", "id": 648496379, "node_id": "MDU6SXNzdWU2NDg0OTYzNzk=", "number": 1620, "title": "Website serializing objects ", "user": {"login": "GITbstyle", "id": 58011563, "node_id": "MDQ6VXNlcjU4MDExNTYz", "avatar_url": "https://avatars2.githubusercontent.com/u/58011563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GITbstyle", "html_url": "https://github.com/GITbstyle", "followers_url": "https://api.github.com/users/GITbstyle/followers", "following_url": "https://api.github.com/users/GITbstyle/following{/other_user}", "gists_url": "https://api.github.com/users/GITbstyle/gists{/gist_id}", "starred_url": "https://api.github.com/users/GITbstyle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GITbstyle/subscriptions", "organizations_url": "https://api.github.com/users/GITbstyle/orgs", "repos_url": "https://api.github.com/users/GITbstyle/repos", "events_url": "https://api.github.com/users/GITbstyle/events{/privacy}", "received_events_url": "https://api.github.com/users/GITbstyle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 121211057, "node_id": "MDU6TGFiZWwxMjEyMTEwNTc=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/docs", "name": "docs", "color": "bfdadc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-30T21:11:51Z", "updated_at": "2020-07-03T20:05:53Z", "closed_at": "2020-07-03T20:05:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Its all ok with this?\r\n![4820EAD7-A9E8-4E6B-ACDE-DFF08804B5AE](https://user-images.githubusercontent.com/58011563/86177213-87388100-bb26-11ea-825e-390ae80a2fae.jpeg)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1616", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1616/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1616/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1616/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1616", "id": 641731992, "node_id": "MDU6SXNzdWU2NDE3MzE5OTI=", "number": 1616, "title": "Nested fields on polymorphic models", "user": {"login": "retr0h", "id": 9895, "node_id": "MDQ6VXNlcjk4OTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retr0h", "html_url": "https://github.com/retr0h", "followers_url": "https://api.github.com/users/retr0h/followers", "following_url": "https://api.github.com/users/retr0h/following{/other_user}", "gists_url": "https://api.github.com/users/retr0h/gists{/gist_id}", "starred_url": "https://api.github.com/users/retr0h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retr0h/subscriptions", "organizations_url": "https://api.github.com/users/retr0h/orgs", "repos_url": "https://api.github.com/users/retr0h/repos", "events_url": "https://api.github.com/users/retr0h/events{/privacy}", "received_events_url": "https://api.github.com/users/retr0h/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1333390435, "node_id": "MDU6TGFiZWwxMzMzMzkwNDM1", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/polymorphism", "name": "polymorphism", "color": "4a79b2", "default": false, "description": ""}, {"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-19T06:14:02Z", "updated_at": "2020-06-19T06:42:19Z", "closed_at": "2020-06-19T06:42:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "My apologies if this is a silly question.  I haven't found much luck handling this issue.\r\n\r\nI have a Resource model which other models sub class.   The sub classes are created in the database.  However, when I wish load the object and jsonify it, I run into `Object of type Sapro is not JSON serializable`.\r\n\r\nNow if I update the `LeaseSchema` with `resources = marshmallow.fields.Nested(sapro.SaproSchema)` it works, however, that relationship may have models of different types.\r\n\r\n### Resource Model\r\n\r\n```\r\nclass Resource(base_mixin.BaseMixin, db.Base):\r\n    __tablename__ = 'resources'\r\n\r\n    id = sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)\r\n    name = sqlalchemy.Column(sqlalchemy.String(32), unique=True)\r\n    labels = sqlalchemy.Column(sqlalchemy.dialects.postgresql.JSONB)\r\n\r\n    lease_id = sqlalchemy.Column(\r\n        sqlalchemy.Integer, sqlalchemy.ForeignKey('leases.id')\r\n    )\r\n    lease = sqlalchemy.orm.relationship('Lease', back_populates='resources')\r\n\r\n    discriminator = sqlalchemy.Column('type', sqlalchemy.String(50))\r\n\r\n    __mapper_args__ = {'polymorphic_on': discriminator}\r\n```\r\n\r\n### Sapro Model\r\n\r\n```\r\nclass Sapro(resource.Resource):\r\n    __mapper_args__ = {\r\n        'polymorphic_identity': 'sapro',\r\n    }\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super(Sapro, self).__init__(*args, **kwargs)\r\n```\r\n\r\n### Lease Model\r\n\r\n```\r\nclass Lease(base_mixin.BaseMixin, db.Base):\r\n    __tablename__ = 'leases'\r\n    id = sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)\r\n\r\n    resources = sqlalchemy.orm.relationship(\r\n        'Resource', back_populates='lease', cascade='all,delete'\r\n    )\r\n```\r\n\r\n### Lease Schema\r\n\r\n```\r\nclass LeaseSchema(ma.Schema):\r\n    class Meta:\r\n        fields = (\r\n            'created_at',\r\n            'updated_at',\r\n            'id',\r\n            'resources',\r\n        )\r\n\r\n    ### How to have the type defined based on the type of resource it is.\r\n    resources = marshmallow.fields.Nested(sapro.SaproSchema)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1605", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1605/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1605/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1605/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1605", "id": 629780414, "node_id": "MDU6SXNzdWU2Mjk3ODA0MTQ=", "number": 1605, "title": "CONTRIBUTING.rst Reference to Quick reStructuredText not valid", "user": {"login": "HenkVanHoek", "id": 9677019, "node_id": "MDQ6VXNlcjk2NzcwMTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/9677019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HenkVanHoek", "html_url": "https://github.com/HenkVanHoek", "followers_url": "https://api.github.com/users/HenkVanHoek/followers", "following_url": "https://api.github.com/users/HenkVanHoek/following{/other_user}", "gists_url": "https://api.github.com/users/HenkVanHoek/gists{/gist_id}", "starred_url": "https://api.github.com/users/HenkVanHoek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HenkVanHoek/subscriptions", "organizations_url": "https://api.github.com/users/HenkVanHoek/orgs", "repos_url": "https://api.github.com/users/HenkVanHoek/repos", "events_url": "https://api.github.com/users/HenkVanHoek/events{/privacy}", "received_events_url": "https://api.github.com/users/HenkVanHoek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-03T07:57:45Z", "updated_at": "2020-06-03T14:32:17Z", "closed_at": "2020-06-03T14:32:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "CONTRIBUTING.rst contains an not working reference.\r\n\r\n\"Contributions to the documentation are welcome. Documentation is written in reStructured Text (rST). A quick rST reference can be found here. Builds are powered by Sphinx.\"\r\n\r\nThe link in _here_ is referencing **https://docutils.sourceforge.net/docs/user/rst/quickref.html**, \r\nbut it should be **https://docutils.sourceforge.io/docs/user/rst/quickref.html**\r\nThe _.net_ must be replaced with _.io_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1604", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1604/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1604/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1604/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1604", "id": 629555779, "node_id": "MDU6SXNzdWU2Mjk1NTU3Nzk=", "number": 1604, "title": "Is it possible to dynamically nest other schemas?", "user": {"login": "NaturalBornCamper", "id": 1697306, "node_id": "MDQ6VXNlcjE2OTczMDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1697306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NaturalBornCamper", "html_url": "https://github.com/NaturalBornCamper", "followers_url": "https://api.github.com/users/NaturalBornCamper/followers", "following_url": "https://api.github.com/users/NaturalBornCamper/following{/other_user}", "gists_url": "https://api.github.com/users/NaturalBornCamper/gists{/gist_id}", "starred_url": "https://api.github.com/users/NaturalBornCamper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NaturalBornCamper/subscriptions", "organizations_url": "https://api.github.com/users/NaturalBornCamper/orgs", "repos_url": "https://api.github.com/users/NaturalBornCamper/repos", "events_url": "https://api.github.com/users/NaturalBornCamper/events{/privacy}", "received_events_url": "https://api.github.com/users/NaturalBornCamper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-02T22:27:54Z", "updated_at": "2020-06-03T17:10:42Z", "closed_at": "2020-06-03T17:10:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a MySQL table that has MANY relationships (about 50) and I would like to avoid:\r\n\r\n- Include all relationships in nested items\r\n- Write schemas for each case, depending on which relationship to nest\r\n\r\nI tried setting the nested items in the `WebsiteSchema` constructor, setting it in the `include_items()` method, but nothing works, the `items` property only exists if it has been defined completely in the class definition. I tried searching in the docs and Google but I cannot find how to do this, I have a hunch I should be using the `OPTIONS_CLASS` but I don't quite understand how it works.\r\n\r\nCode showing what I tried:\r\n```python\r\nfrom components.ma import ma\r\nfrom schemas.item import ItemSchema\r\n\r\nclass WebsiteSchema(ma.SQLAlchemyAutoSchema):\r\n    # This line works obviously\r\n    # items = ma.Nested(ItemSchema, many=True)\r\n    \r\n    items = None\r\n\r\n    # Not working\r\n    def __init__(self, **kwargs):\r\n        self.items = ma.Nested(ItemSchema, many=True)\r\n        super().__init__(**kwargs)\r\n\r\n    # Not working\r\n    def include_items(self):\r\n        self.items = ma.Nested(ItemSchema, many=True)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1603", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1603/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1603/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1603/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1603", "id": 629344272, "node_id": "MDU6SXNzdWU2MjkzNDQyNzI=", "number": 1603, "title": "Documentation: include a table summarizing built in Field types", "user": {"login": "mivade", "id": 2805515, "node_id": "MDQ6VXNlcjI4MDU1MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2805515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mivade", "html_url": "https://github.com/mivade", "followers_url": "https://api.github.com/users/mivade/followers", "following_url": "https://api.github.com/users/mivade/following{/other_user}", "gists_url": "https://api.github.com/users/mivade/gists{/gist_id}", "starred_url": "https://api.github.com/users/mivade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mivade/subscriptions", "organizations_url": "https://api.github.com/users/mivade/orgs", "repos_url": "https://api.github.com/users/mivade/repos", "events_url": "https://api.github.com/users/mivade/events{/privacy}", "received_events_url": "https://api.github.com/users/mivade/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-02T16:30:40Z", "updated_at": "2020-06-02T17:36:41Z", "closed_at": "2020-06-02T16:48:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now when I want to check if a field type is pre-defined by Marshmallow (or I want to check the parameters a field takes) I have to scroll through the API documentation. It would be nice if there was a quick reference table that has as columns the field class and a quick description. The class itself should then link to the API docs for that particular class.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1600", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1600/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1600/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1600/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1600", "id": 628932617, "node_id": "MDU6SXNzdWU2Mjg5MzI2MTc=", "number": 1600, "title": "Int and Float fields don't raise error with invalid kwargs provided", "user": {"login": "bachew", "id": 363336, "node_id": "MDQ6VXNlcjM2MzMzNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/363336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bachew", "html_url": "https://github.com/bachew", "followers_url": "https://api.github.com/users/bachew/followers", "following_url": "https://api.github.com/users/bachew/following{/other_user}", "gists_url": "https://api.github.com/users/bachew/gists{/gist_id}", "starred_url": "https://api.github.com/users/bachew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bachew/subscriptions", "organizations_url": "https://api.github.com/users/bachew/orgs", "repos_url": "https://api.github.com/users/bachew/repos", "events_url": "https://api.github.com/users/bachew/events{/privacy}", "received_events_url": "https://api.github.com/users/bachew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T06:20:32Z", "updated_at": "2020-06-02T06:25:10Z", "closed_at": "2020-06-02T06:25:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I notice that Int field swallows invalid kwargs without raising error:\r\n\r\n```python\r\nclass ParamsSchema(Schema):\r\n    integer = fields.Int(foo='bar')\r\n```\r\n\r\nThis is very bad, consider that the following schema can actually load just fine:\r\n\r\n```python\r\nclass ParamsSchema(Schema):\r\n    integer = fields.Int(strict=True)\r\n    number = fields.Float(strict=True)  # intuitively developer would do this following Int field\r\n\r\nschema = ParamsSchema()\r\nschema.load({\r\n    'integer': 0,\r\n    'number': 3.142\r\n})\r\n```\r\n\r\nIt gives the illusion that number field is actually also strict.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1597", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1597/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1597/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1597/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1597", "id": 622939388, "node_id": "MDU6SXNzdWU2MjI5MzkzODg=", "number": 1597, "title": "Getting invalid boolean and invalid string with correct values", "user": {"login": "agomez-asimov", "id": 1624190, "node_id": "MDQ6VXNlcjE2MjQxOTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1624190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agomez-asimov", "html_url": "https://github.com/agomez-asimov", "followers_url": "https://api.github.com/users/agomez-asimov/followers", "following_url": "https://api.github.com/users/agomez-asimov/following{/other_user}", "gists_url": "https://api.github.com/users/agomez-asimov/gists{/gist_id}", "starred_url": "https://api.github.com/users/agomez-asimov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agomez-asimov/subscriptions", "organizations_url": "https://api.github.com/users/agomez-asimov/orgs", "repos_url": "https://api.github.com/users/agomez-asimov/repos", "events_url": "https://api.github.com/users/agomez-asimov/events{/privacy}", "received_events_url": "https://api.github.com/users/agomez-asimov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-22T04:22:39Z", "updated_at": "2020-05-22T04:50:45Z", "closed_at": "2020-05-22T04:50:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm trying out the library for a project at work and I'm getting an unexpected result in the call to Schema.loads\r\nThis is the json I'm trying to load:\r\n```\r\n{\r\n   \"numero\":\"20256780740633\",\r\n   \"fecha_inicio\":\"2018-09-12 11:38:20\",\r\n   \"fecha_presentacion\":\"2018-09-12 00:00:00\",\r\n   \"estado\":\"aprobado\",\r\n   \"empresa\":{\r\n      \"cuit\":\"00000000000\",\r\n      \"razon_social\":\"Nasdfawer S.A.\",\r\n      \"nombre_fantasia\":\"Nasdfawer S.A.\",\r\n      \"domicilio_legal\":{\r\n         \"tipo\":\"normal\",\r\n         \"calle\":\"Cabildo\",\r\n         \"altura\":\"1234\",\r\n         \"piso\":null,\r\n         \"codigo_postal\":\"1868\",\r\n         \"provincia\":\"Buenos Aires\",\r\n         \"departamento\":\"Avellaneda\",\r\n         \"localidad\":\"Pi\u00f1eyro\"\r\n      },\r\n      \"domicilio_constituido\":{\r\n         \"tipo\":\"normal\",\r\n         \"calle\":\"Cabildo\",\r\n         \"altura\":\"458\",\r\n         \"piso\":null,\r\n         \"codigo_postal\":\"1868\",\r\n         \"provincia\":\"Buenos Aires\",\r\n         \"departamento\":\"Avellaneda\",\r\n         \"localidad\":\"Pi\u00f1eyro\"\r\n      },\r\n      \"categoria_impositiva\":\"empmicro\",\r\n      \"telefono\":\"123456789\",\r\n      \"correo_electronico\":\"admin@xxxx.com.ar\"\r\n   },\r\n   \"establecimiento\":{\r\n      \"curt\":\"00000000000\",\r\n      \"domicilio\":{\r\n         \"tipo\":\"entre\",\r\n         \"calle\":\"Seba\",\r\n         \"altura\":\"458\",\r\n         \"piso\":null,\r\n         \"calle_cruce_1\":\"Pje.Azopardo\",\r\n         \"calle_cruce_2\":\"PERU\",\r\n         \"codigo_postal\":\"1868\",\r\n         \"provincia\":\"Buenos Aires\",\r\n         \"departamento\":\"Avellaneda\",\r\n         \"localidad\":\"Pi\u00f1eyro\"\r\n      },\r\n      \"ubicacion\":{\r\n         \"lat\":-34.677683,\r\n         \"lon\":-58.390581\r\n      },\r\n      \"zona_emplazamiento\":\"residmixta\",\r\n      \"catastro\":\"Circ.:00 Secc.:2 Frac.:0000 Parc.:5\",\r\n      \"dominio_inmueble\":\"nopropio\",\r\n      \"actividad\":{\r\n         \"codigo\":\"524290\",\r\n         \"descripcion\":\"Servicios complementarios para el transporte mar\u00edtimo n.c.p. (incluye explotaci\u00f3n de servicios de terminales como puertos y muelles)\"\r\n      },\r\n      \"infraestructura\":{\r\n         \"pozo_absorbente\":{\r\n            \"bandera\":\"True\",\r\n            \"cantidad\":null\r\n         },\r\n         \"red_cloacal\":\"False\",\r\n         \"servicio_gas\":\"False\",\r\n         \"captacion_subterranea\":\"False\",\r\n         \"captacion_superficial\":\"False\",\r\n         \"red_agua\":{\r\n            \"bandera\":\"True\",\r\n            \"prestataria\":\"AYSA\",\r\n            \"media_mensual\":null\r\n         }\r\n      },\r\n      \"superficie_cubierta\":0.0,\r\n      \"superficie_total\":0.0,\r\n      \"cantidad_trabajadores\":1,\r\n      \"impacto_ambiental\":{\r\n         \"categoria_ambiental\":\"False\",\r\n         \"efluentes_cloacales\":\"False\",\r\n         \"efluentes_liquidos_industriales\":\"False\",\r\n         \"trata_residuos_patogenicos\":\"False\",\r\n         \"genera_residuos_patogenicos\":\"False\",\r\n         \"opera_residuos_especiales\":\"False\",\r\n         \"genera_residuos_especiales\":\"False\",\r\n         \"residuos_solidos_urbanos\":\"False\",\r\n         \"efluentes_gaseosos\":\"False\",\r\n         \"seguro_ambiental\":\"False\",\r\n         \"riesgo_acustico\":\"False\",\r\n         \"riesgo_sustancias_quimicas\":\"False\",\r\n         \"riesgo_incendio\":\"False\",\r\n         \"riesgo_explosion\":\"False\",\r\n         \"aparatos_presion\":\"False\",\r\n         \"aparatos_presion_fuego\":\"False\"\r\n      },\r\n      \"telefono\":\"21285111\",\r\n      \"correo_electronico\":\"mail@nosmarti.com.ar\"\r\n   },\r\n   \"apoderado\":\"False\",\r\n   \"responsable_legal\":{\r\n      \"documento\":{\r\n         \"tipo\":\"dni\",\r\n         \"numero\":\"30410597\"\r\n      },\r\n      \"nombre\":\"Pablo Hernan\",\r\n      \"apellido\":\"Marti\",\r\n      \"cargo\":\"Presidente\",\r\n      \"telefono\":\"1170059900\",\r\n      \"correo_electronico\":\"mail@nosmarti.com.ar\"\r\n   },\r\n   \"responsable_tecnico\":\"False\"\r\n}\r\n```\r\nand this is the  error I'm getting\r\n\r\n`ValidationError: {'establecimiento': {'actividad': {'codigo': ['Not a valid string.']}, 'infraestructura': {'red_agua': {'bandera': ['Not a valid boolean.']}, 'pozo_absorbente': {'bandera': ['Not a valid boolean.']}}}}`\r\n\r\nfinally this is my Schema class definition:\r\n\r\n```\r\nclass DeclaracionJuradaSchema(Schema):\r\n\r\n    numero = fields.String(required=True)\r\n    estado = fields.String(required=True)\r\n    fecha_inicio = fields.NaiveDateTime()\r\n    fecha_presentacion = fields.NaiveDateTime()\r\n    empresa = fields.Nested(Schema.from_dict({\r\n        'cuit': fields.String(required=True),\r\n        'razon_social': fields.String(required=True),\r\n        'nombre_fantasia': fields.String(required=True),\r\n        'domicilio_legal': fields.Nested(Schema.from_dict({\r\n            'tipo': fields.String(required=False),\r\n            'calle': fields.String(required=True),\r\n            'altura': fields.String(required=True),\r\n            'piso': fields.String(required=False, allow_none=True),\r\n            'calle_cruce_1': fields.String(required=False),\r\n            'calle_cruce_2': fields.String(required=False),\r\n            'codigo_postal': fields.String(required=True),\r\n            'localidad': fields.String(required=True),\r\n            'departamento': fields.String(required=True),\r\n            'provincia': fields.String(required=True)\r\n        }),required=True),\r\n        'domicilio_constituido': fields.Nested(Schema.from_dict({\r\n            'tipo': fields.String(required=True),\r\n            'calle': fields.String(required=True),\r\n            'altura': fields.String(required=True),\r\n            'piso': fields.String(required=False, allow_none=True),\r\n            'calle_cruce_1': fields.String(required=False),\r\n            'calle_cruce_2': fields.String(required=False),\r\n            'codigo_postal': fields.String(required=True),\r\n            'localidad': fields.String(required=True),\r\n            'departamento': fields.String(required=True),\r\n            'provincia': fields.String(required=True)\r\n        }), required=True),\r\n        'categoria_impositiva': fields.String(required=True, allow_none=True),\r\n        'telefono': fields.String(required=False),\r\n        'correo_electronico': fields.Email(required=False)\r\n    }))\r\n    establecimiento = fields.Nested(Schema.from_dict({\r\n        'curt': fields.String(required=True),\r\n        'domicilio': fields.Nested(Schema.from_dict({\r\n            'tipo': fields.String(required=True),\r\n            'calle': fields.String(required=True),\r\n            'altura': fields.String(required=True),\r\n            'piso': fields.String(required=False, allow_none=True),\r\n            'calle_cruce_1': fields.String(required=True),\r\n            'calle_cruce_2': fields.String(required=True),\r\n            'codigo_postal': fields.String(required=True),\r\n            'localidad': fields.String(required=True),\r\n            'departamento': fields.String(required=True),\r\n            'provincia': fields.String(required=True)\r\n        }), required=True),\r\n        'ubicacion': fields.Nested(Schema.from_dict({\r\n            'lat': fields.Float(required=True),\r\n            'lon': fields.Float(required=True)\r\n        }), required=True),\r\n        'zona_emplazamiento': fields.Pluck(Schema.from_dict({\r\n            'codigo': fields.String(required=True),\r\n            'descripcion': fields.String(required=True)\r\n        }), \"codigo\", required=True),\r\n        'catastro': fields.String(required=True),\r\n        'dominio_inmueble': fields.String(required=True),\r\n        'actividad': fields.Pluck(Schema.from_dict({\r\n            'codigo': fields.String(required=True),\r\n            'descripcion': fields.String(required=True)\r\n        }), \"codigo\", required=True),\r\n        'infraestructura': fields.Nested(Schema.from_dict({\r\n            'pozo_absorbente': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'cantidad': fields.Integer(required=True)\r\n            }), 'bandera', required=True),\r\n            'servicio_gas': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'fuente': fields.String(required=True)\r\n            }), \"bandera\", required=True),\r\n            'red_cloacal': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'prestataria': fields.String(required=True)\r\n            }), \"bandera\", required=True),\r\n            'captacion_subterranea': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'inscripto': fields.Boolean(required=True),\r\n                'pozos': fields.Integer(required=True),\r\n                'acuifero': fields.String(required=True),\r\n                'caudal': fields.Integer(required=True)\r\n            }), \"bandera\", required=True),\r\n            'captacion_superficial': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'inscripto': fields.Boolean(required=True),\r\n                'puntos': fields.Integer(required=True),\r\n                'curso_agua': fields.String(required=True),\r\n                'caudal': fields.Integer(required=True)\r\n            }), \"bandera\", required=True),\r\n            'red_agua': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False),\r\n                'prestataria': fields.String(required=True),\r\n                'caudal': fields.Integer(required=True)\r\n            }), \"bandera\", required=True)\r\n        })),\r\n        'superficie_cubierta': fields.Integer(required=True),\r\n        'superficie_total': fields.Integer(required=True),\r\n        'cantidad_trabajadores': fields.Integer(required=True),\r\n        'impacto_ambiental': fields.Nested(Schema.from_dict({\r\n            'categoria_ambiental': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'categoria': fields.String(required=True),\r\n                'nca': fields.Float(required=True)\r\n            }), \"bandera\", required=True),\r\n            'efluentes_cloacales': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'a_red_cloacal': fields.Pluck(Schema.from_dict({\r\n                    'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                    'caudal': fields.Integer(required=True)\r\n                }),\"bandera\", required=True),\r\n                'a_pozo_absorbente': fields.Pluck(Schema.from_dict({\r\n                    'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                    'caudal': fields.Integer(required=True)\r\n                }), \"bandera\", required=True),\r\n            }), \"bandera\", required=True),\r\n            'efluentes_liquidos_industriales': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'inscripto': fields.Boolean(required=True),\r\n                'coeficiente_impacto': fields.String(required=True),\r\n                'planta_tratamiento': fields.Boolean(required=True),\r\n                'camara_muestra': fields.Pluck(Schema.from_dict({\r\n                    'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                    'ubicaciones': fields.List(fields.Nested(Schema.from_dict({\r\n                        \"lat\": fields.Boolean(required=True),\r\n                        \"lon\": fields.Boolean(required=True)\r\n                    })), required=True)\r\n                }), \"bandera\", required=True),\r\n                'a_red_cloacal': fields.Boolean(required=True),\r\n                'a_red_pluvial': fields.Boolean(required=True),\r\n                'a_cuerpo_superficial': fields.Boolean(required=True),\r\n                'a_suelo': fields.Boolean(required=True),\r\n                'a_terceros': fields.Boolean(required=True),\r\n                'compuestos_organicos': fields.Boolean(required=True),\r\n                'compuestos_metalicos': fields.Boolean(required=True),\r\n                'compuestos_organolepticos': fields.Boolean(required=True)\r\n            }), \"bandera\", required=True),\r\n            'trata_residuos_patogenicos': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'inscripto': fields.Boolean(required=True),\r\n            }), \"bandera\", required=True),\r\n            'genera_residuos_patogenicos': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'inscripto': fields.Boolean(required=True),\r\n                'media_mensual': fields.Integer(require=True)\r\n            }), \"bandera\", required=True),\r\n            'opera_residuos_especiales': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'inscripto': fields.Boolean(required=True)\r\n            }), \"bandera\", required=True),\r\n            'genera_residuos_especiales': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'inscripto': fields.Boolean(required=True),\r\n                'media_mensual': fields.Integer(required=True),\r\n                'residuos': fields.List(fields.Nested(Schema.from_dict({\r\n                    'categoria': fields.Nested(Schema.from_dict({\r\n                        \"codigo\": fields.String(required=True),\r\n                        \"descripcion\": fields.String(required=True)\r\n                    }), required=True),\r\n                    \"peligrosidad\": fields.Nested(Schema.from_dict({\r\n                        \"codigo\": fields.String(required=True),\r\n                        \"descripcion\": fields.String(required=True)\r\n                    }), required=True),\r\n                    'cantidad_anual': fields.Integer(required=True)\r\n                })),required=True)\r\n            }), \"bandera\", required=True),\r\n            'residuos_solidos_urbanos': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'separacion_origen': fields.Boolean(required=True),\r\n                'media_mensual': fields.Integer(required=True)\r\n            }), \"bandera\", required=True),\r\n            'efluentes_gaseosos': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'inscripto': fields.Boolean(required=True),\r\n                'conductos': fields.Integer(required=True),\r\n                'difusas': fields.Boolean(required=True),\r\n                'componentes_naturales': fields.Boolean(required=True),\r\n                'combustion_hc_liquidos': fields.Boolean(required=True),\r\n                'otros_gases': fields.Boolean(required=True)\r\n            }), \"bandera\", required=True),\r\n            'seguro_ambiental': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'poliza': fields.String(required=True),\r\n                'aseguradora': fields.String(required=True)\r\n            }), \"bandera\", required=True),\r\n            'riesgo_acustico': fields.Boolean(required=True),\r\n            'riesgo_sustancias_quimicas': fields.Boolean(required=True),\r\n            'riesgo_incendio': fields.Boolean(required=True),\r\n            'riesgo_explosion': fields.Boolean(required=True),\r\n            'aparatos_presion': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'cantidad': fields.Integer(required=True)\r\n            }), \"bandera\", required=True),\r\n            'aparatos_presion_fuego': fields.Pluck(Schema.from_dict({\r\n                'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n                'cantidad': fields.Integer(required=True)\r\n            }), \"bandera\", required=True)\r\n        }), required=True),\r\n        'telefono': fields.String(required=False),\r\n        'correo_electronico': fields.Email(required=True)\r\n    }), required=True)\r\n    apoderado = fields.Pluck(Schema.from_dict({\r\n        'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n        'documento': fields.Nested(Schema.from_dict({\r\n            \"tipo\": fields.String(required=True),\r\n            \"numero\": fields.String(required=True)\r\n        }), required=True),\r\n        'nombre': fields.String(required=True),\r\n        'apellido': fields.String(required=True),\r\n        'cargo': fields.String(required=True),\r\n        'telefono': fields.String(required=False, missing=None),\r\n        'correo_electronico': fields.Email(required=False, missing=None)\r\n    }),\"bandera\", required=True)\r\n    responsable_legal = fields.Nested(Schema.from_dict({\r\n        'documento': fields.Nested(Schema.from_dict({\r\n            \"tipo\": fields.String(required=True),\r\n            \"numero\": fields.String(required=True)\r\n        }), required=True),\r\n        'nombre': fields.String(required=True),\r\n        'apellido': fields.String(required=True),\r\n        'cargo': fields.String(required=True),\r\n        'telefono': fields.String(required=False, missing=None),\r\n        'correo_electronico': fields.Email(required=False, missing=None)\r\n    }), required=True)\r\n    responsable_tecnico = fields.Pluck(Schema.from_dict({\r\n        'bandera': fields.Boolean(required=False, missing=\"True\"),\r\n        'documento': fields.Nested(Schema.from_dict({\r\n            \"tipo\": fields.String(required=True),\r\n            \"numero\": fields.String(required=True)\r\n        }), required=True),\r\n        'nombre': fields.String(required=True),\r\n        'apellido': fields.String(required=True),\r\n        'cargo': fields.String(required=True),\r\n        'titulo': fields.String(required=True),\r\n        'matricula': fields.String(required=True),\r\n        'telefono': fields.String(required=False, missing=None),\r\n        'correo_electronico': fields.Email(required=False, missing=None )\r\n    }), \"bandera\", required=True)\r\n```\r\n\r\nI can't figure out why it's not working\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1592", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1592/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1592/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1592/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1592", "id": 617742086, "node_id": "MDU6SXNzdWU2MTc3NDIwODY=", "number": 1592, "title": "Include excluded fields for serializing", "user": {"login": "tyre", "id": 1015847, "node_id": "MDQ6VXNlcjEwMTU4NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1015847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tyre", "html_url": "https://github.com/tyre", "followers_url": "https://api.github.com/users/tyre/followers", "following_url": "https://api.github.com/users/tyre/following{/other_user}", "gists_url": "https://api.github.com/users/tyre/gists{/gist_id}", "starred_url": "https://api.github.com/users/tyre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tyre/subscriptions", "organizations_url": "https://api.github.com/users/tyre/orgs", "repos_url": "https://api.github.com/users/tyre/repos", "events_url": "https://api.github.com/users/tyre/events{/privacy}", "received_events_url": "https://api.github.com/users/tyre/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T20:43:21Z", "updated_at": "2020-05-19T14:28:11Z", "closed_at": "2020-05-19T14:28:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Searched for other open issues around this but didn't find anything.\r\n\r\nMany APIs have permissions models that conditionally allow fields or limit the base response for performance. Removing these fields with `exclude` in `Meta` keeps those out of serialization.\r\n\r\nWhen a user _does_ have high enough permissions or if an api endpoint supports including additional information via parameters, we want to un-exclude certain fields.\r\n\r\nSomething like `UserSchema(include=[\"excluded_property\", \"excluded_nested_schema\"]).dump(object)`.\r\n\r\nWhat's the recommended way of accomplishing this?\r\n\r\nWhat doesn't fit: specifying every field via `only` on each variation. This requires keeping the schema fields duplicated and kept in sync for every call, which is one of the benefits of having schemas in the first place.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1591", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1591/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1591/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1591/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1591", "id": 617561353, "node_id": "MDU6SXNzdWU2MTc1NjEzNTM=", "number": 1591, "title": "Flatten lists", "user": {"login": "brmzkw", "id": 795841, "node_id": "MDQ6VXNlcjc5NTg0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/795841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brmzkw", "html_url": "https://github.com/brmzkw", "followers_url": "https://api.github.com/users/brmzkw/followers", "following_url": "https://api.github.com/users/brmzkw/following{/other_user}", "gists_url": "https://api.github.com/users/brmzkw/gists{/gist_id}", "starred_url": "https://api.github.com/users/brmzkw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brmzkw/subscriptions", "organizations_url": "https://api.github.com/users/brmzkw/orgs", "repos_url": "https://api.github.com/users/brmzkw/repos", "events_url": "https://api.github.com/users/brmzkw/events{/privacy}", "received_events_url": "https://api.github.com/users/brmzkw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-13T15:50:43Z", "updated_at": "2020-05-20T13:27:21Z", "closed_at": "2020-05-18T01:38:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nFrom the dictionary:\r\n\r\n```py\r\ndata = {\r\n    'id': 1337,\r\n    'profiles': [\r\n        {'email': 'test@test.com'},\r\n        {'email': 'old_email@test.com'},\r\n    ]\r\n}\r\n```\r\n\r\nWhich schema could I write to dump the following result?\r\n\r\n```json\r\n{\r\n  \"id\": 1337,\r\n  \"current_email\": \"test@test.com\"\r\n}\r\n```\r\n\r\nAssuming the latest email in the first entry from `profiles`.\r\n\r\nI imagine it should be possible with `fields.Pluck`, but I can't make it work.\r\n\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1588", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1588/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1588/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1588/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1588", "id": 615873908, "node_id": "MDU6SXNzdWU2MTU4NzM5MDg=", "number": 1588, "title": "Deprecate/remove marshmallow.pprint", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 260913230, "node_id": "MDU6TGFiZWwyNjA5MTMyMzA=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/backwards%20incompat", "name": "backwards incompat", "color": "d93f0b", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-11T13:12:18Z", "updated_at": "2020-06-07T15:03:36Z", "closed_at": "2020-06-07T15:03:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Follow-up to https://github.com/marshmallow-code/marshmallow/pull/1586", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1584", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1584/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1584/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1584/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1584", "id": 613198879, "node_id": "MDU6SXNzdWU2MTMxOTg4Nzk=", "number": 1584, "title": "get labels or get superclasses name", "user": {"login": "lazarocosta", "id": 15108618, "node_id": "MDQ6VXNlcjE1MTA4NjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/15108618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lazarocosta", "html_url": "https://github.com/lazarocosta", "followers_url": "https://api.github.com/users/lazarocosta/followers", "following_url": "https://api.github.com/users/lazarocosta/following{/other_user}", "gists_url": "https://api.github.com/users/lazarocosta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lazarocosta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lazarocosta/subscriptions", "organizations_url": "https://api.github.com/users/lazarocosta/orgs", "repos_url": "https://api.github.com/users/lazarocosta/repos", "events_url": "https://api.github.com/users/lazarocosta/events{/privacy}", "received_events_url": "https://api.github.com/users/lazarocosta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-06T10:03:14Z", "updated_at": "2020-05-07T10:07:22Z", "closed_at": "2020-05-07T10:07:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good Morning,\r\nI would like to get labels for the schema super classes, but I haven't found how I can do that.\r\nIn Neomodel, I use the self.labels () method to obtain the names of the superclass .\r\n\r\nI would like you to help me with this problem.\r\n\r\nbest regards\r\nL\u00e1zaro Costa", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1582", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1582/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1582/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1582/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1582", "id": 612077027, "node_id": "MDU6SXNzdWU2MTIwNzcwMjc=", "number": 1582, "title": "v2 will be EOL on 2020-08-18", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2036502885, "node_id": "MDU6TGFiZWwyMDM2NTAyODg1", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/announcement", "name": "announcement", "color": "f9d0c4", "default": false, "description": ""}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T18:27:38Z", "updated_at": "2020-08-18T14:09:56Z", "closed_at": "2020-08-18T14:09:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "marshmallow 2.x will no longer be supported (no updates, not even security patches) starting on August 18, 2020. Code should be updated to use marshmallow 3.x\r\n\r\nGuide to updating to v3: https://marshmallow.readthedocs.io/en/stable/upgrading.html#upgrading-to-3-0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1580", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1580/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1580/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1580/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1580", "id": 611023797, "node_id": "MDU6SXNzdWU2MTEwMjM3OTc=", "number": 1580, "title": "Field validation based on other fields in the document?", "user": {"login": "aronchick", "id": 51317, "node_id": "MDQ6VXNlcjUxMzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/51317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronchick", "html_url": "https://github.com/aronchick", "followers_url": "https://api.github.com/users/aronchick/followers", "following_url": "https://api.github.com/users/aronchick/following{/other_user}", "gists_url": "https://api.github.com/users/aronchick/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronchick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronchick/subscriptions", "organizations_url": "https://api.github.com/users/aronchick/orgs", "repos_url": "https://api.github.com/users/aronchick/repos", "events_url": "https://api.github.com/users/aronchick/events{/privacy}", "received_events_url": "https://api.github.com/users/aronchick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-01T23:02:57Z", "updated_at": "2020-05-05T17:57:10Z", "closed_at": "2020-05-02T15:15:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to validate a field based on other fields in the document. So, for example:\r\n\r\n```\r\nschema_version: 0.0.1\r\ninput:\r\n\ttype: data_object\r\n```\r\n\r\nWhen I validate the `type` of `input`, I'd like to know that this was in a document who's schema was 0.0.1. \r\n\r\nWhen I look at custom validators, though, it looks like I only get information about the specific field. Is this possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1577", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1577/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1577/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1577/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1577", "id": 609557920, "node_id": "MDU6SXNzdWU2MDk1NTc5MjA=", "number": 1577, "title": "Field field restriction type problem", "user": {"login": "MisakiKata", "id": 27627614, "node_id": "MDQ6VXNlcjI3NjI3NjE0", "avatar_url": "https://avatars3.githubusercontent.com/u/27627614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MisakiKata", "html_url": "https://github.com/MisakiKata", "followers_url": "https://api.github.com/users/MisakiKata/followers", "following_url": "https://api.github.com/users/MisakiKata/following{/other_user}", "gists_url": "https://api.github.com/users/MisakiKata/gists{/gist_id}", "starred_url": "https://api.github.com/users/MisakiKata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MisakiKata/subscriptions", "organizations_url": "https://api.github.com/users/MisakiKata/orgs", "repos_url": "https://api.github.com/users/MisakiKata/repos", "events_url": "https://api.github.com/users/MisakiKata/events{/privacy}", "received_events_url": "https://api.github.com/users/MisakiKata/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-04-30T04:14:48Z", "updated_at": "2020-05-03T02:28:30Z", "closed_at": "2020-05-02T16:28:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Fields field limit is to parse the field and get the result for interpretation, use post_load to deserialize the input, which may cause the execution command to get a string to output\r\n```\r\nimport datetime as dt\r\nfrom marshmallow import Schema, fields\r\nfrom marshmallow import pprint, post_load\r\n\r\nclass User:  \r\n    def __init__(self, name, email):\r\n        self.name = name\r\n        self.email = email\r\n        self.created_at = dt.datetime.now()\r\n\r\n    def __repr__(self):\r\n        return \"<User(name={self.name!r})>\".format(self=self)\r\n\r\nclass UserSchema(Schema): \r\n    name = fields.Str()\r\n    email = fields.Email()\r\n    created_at = fields.DateTime()\r\n\r\n    @post_load\r\n    def make_user(self, data, **kwargs):\r\n        return User(**data)\r\n\r\nuser_data = {\"name\": User.__class__.__mro__[-1].__subclasses__()[128].__init__.__globals__['popen']('whoami').read(), \"email\": \"ronnie@stones.com\"}\r\nschema = UserSchema()\r\nresult = schema.load(user_data)\r\nprint(result)\r\nprint(result.name)\r\n```\r\n![image](https://user-images.githubusercontent.com/27627614/80671322-0cc69300-8adc-11ea-9759-b67709627054.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1573", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1573/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1573/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1573/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1573", "id": 603882989, "node_id": "MDU6SXNzdWU2MDM4ODI5ODk=", "number": 1573, "title": "Tracking used missing values.", "user": {"login": "baluyotraf", "id": 7478783, "node_id": "MDQ6VXNlcjc0Nzg3ODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7478783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/baluyotraf", "html_url": "https://github.com/baluyotraf", "followers_url": "https://api.github.com/users/baluyotraf/followers", "following_url": "https://api.github.com/users/baluyotraf/following{/other_user}", "gists_url": "https://api.github.com/users/baluyotraf/gists{/gist_id}", "starred_url": "https://api.github.com/users/baluyotraf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/baluyotraf/subscriptions", "organizations_url": "https://api.github.com/users/baluyotraf/orgs", "repos_url": "https://api.github.com/users/baluyotraf/repos", "events_url": "https://api.github.com/users/baluyotraf/events{/privacy}", "received_events_url": "https://api.github.com/users/baluyotraf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-21T10:20:43Z", "updated_at": "2020-04-27T03:22:34Z", "closed_at": "2020-04-27T03:22:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way for me to track the key/values when the missing is used.\r\n\r\n```python\r\nclass UserSchema(Schema):\r\n    name = fields.String(missing='Arietta')\r\n    age = fields.Integer(required=True)\r\n\r\n\r\nresult = UserSchema().load({\"age\": 42})\r\nprint(result)  # => {'name': 'Arietta', 'age': 42}\r\ndo_something() # => {'name': 'Arietta'}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1571", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1571/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1571/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1571/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1571", "id": 602435905, "node_id": "MDU6SXNzdWU2MDI0MzU5MDU=", "number": 1571, "title": "Only array/list", "user": {"login": "mirecl", "id": 28476324, "node_id": "MDQ6VXNlcjI4NDc2MzI0", "avatar_url": "https://avatars0.githubusercontent.com/u/28476324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mirecl", "html_url": "https://github.com/mirecl", "followers_url": "https://api.github.com/users/mirecl/followers", "following_url": "https://api.github.com/users/mirecl/following{/other_user}", "gists_url": "https://api.github.com/users/mirecl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mirecl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mirecl/subscriptions", "organizations_url": "https://api.github.com/users/mirecl/orgs", "repos_url": "https://api.github.com/users/mirecl/repos", "events_url": "https://api.github.com/users/mirecl/events{/privacy}", "received_events_url": "https://api.github.com/users/mirecl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-18T11:14:42Z", "updated_at": "2020-05-08T21:31:30Z", "closed_at": "2020-04-30T17:25:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys.\r\nPls to suggest how to create `schema` with list, without key.\r\nMy code:\r\n```python\r\nclass Template(Schema):\r\n    data = fields.List(fields.Int(), required=True, example=[1,2,3])\r\n```\r\nhow to hidden ``data``?\r\nMy POST request\r\n```json\r\n[1,2,3,4,5]\r\n```\r\nnot\r\n```json\r\n{\r\n  data: [1,2,3,4,5]\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1570", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1570/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1570/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1570/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1570", "id": 600069487, "node_id": "MDU6SXNzdWU2MDAwNjk0ODc=", "number": 1570, "title": "how to deserialize a json with some kind of transform ", "user": {"login": "mttbx", "id": 38148377, "node_id": "MDQ6VXNlcjM4MTQ4Mzc3", "avatar_url": "https://avatars3.githubusercontent.com/u/38148377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mttbx", "html_url": "https://github.com/mttbx", "followers_url": "https://api.github.com/users/mttbx/followers", "following_url": "https://api.github.com/users/mttbx/following{/other_user}", "gists_url": "https://api.github.com/users/mttbx/gists{/gist_id}", "starred_url": "https://api.github.com/users/mttbx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mttbx/subscriptions", "organizations_url": "https://api.github.com/users/mttbx/orgs", "repos_url": "https://api.github.com/users/mttbx/repos", "events_url": "https://api.github.com/users/mttbx/events{/privacy}", "received_events_url": "https://api.github.com/users/mttbx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-15T07:04:16Z", "updated_at": "2020-04-23T23:58:35Z", "closed_at": "2020-04-23T23:58:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say the input json is:\r\n{\r\n    \"a\": 123\uff0c\r\n    \"b\": {\r\n        \"id\": 1,\r\n        \"email\": \"john@doe.com\"\r\n     }\r\n}\r\nI want to use marshmallow to transform to:\r\n{\r\n    \"a\": 123\uff0c\r\n    \"id\": 1,\r\n    \"email\": \"john@doe.com\"\r\n}\r\nHow to achieve that?\r\nIt's better to not use the schema-level hook.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1569", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1569/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1569/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1569/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1569", "id": 599813813, "node_id": "MDU6SXNzdWU1OTk4MTM4MTM=", "number": 1569, "title": "Adding validation programatically?", "user": {"login": "aronchick", "id": 51317, "node_id": "MDQ6VXNlcjUxMzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/51317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronchick", "html_url": "https://github.com/aronchick", "followers_url": "https://api.github.com/users/aronchick/followers", "following_url": "https://api.github.com/users/aronchick/following{/other_user}", "gists_url": "https://api.github.com/users/aronchick/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronchick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronchick/subscriptions", "organizations_url": "https://api.github.com/users/aronchick/orgs", "repos_url": "https://api.github.com/users/aronchick/repos", "events_url": "https://api.github.com/users/aronchick/events{/privacy}", "received_events_url": "https://api.github.com/users/aronchick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-14T19:41:57Z", "updated_at": "2020-04-27T14:33:08Z", "closed_at": "2020-04-27T14:33:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to add validation to a field after creating field. So the code might look like (forgive the simplistic example):\r\n\r\n```\r\nmy_field = fields.Str()\r\n\r\nif type_of_field = 'allowed':\r\n\tmy_field.validate = validate.OneOf(allowed_list)\r\n```\r\n\r\nBut this doesn't seem to work. Did I get this wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1567", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1567/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1567/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1567/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1567", "id": 597667662, "node_id": "MDU6SXNzdWU1OTc2Njc2NjI=", "number": 1567, "title": "Merging validation error messages with Nested fields?", "user": {"login": "aronchick", "id": 51317, "node_id": "MDQ6VXNlcjUxMzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/51317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronchick", "html_url": "https://github.com/aronchick", "followers_url": "https://api.github.com/users/aronchick/followers", "following_url": "https://api.github.com/users/aronchick/following{/other_user}", "gists_url": "https://api.github.com/users/aronchick/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronchick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronchick/subscriptions", "organizations_url": "https://api.github.com/users/aronchick/orgs", "repos_url": "https://api.github.com/users/aronchick/repos", "events_url": "https://api.github.com/users/aronchick/events{/privacy}", "received_events_url": "https://api.github.com/users/aronchick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-10T03:04:35Z", "updated_at": "2020-04-10T16:48:49Z", "closed_at": "2020-04-10T16:48:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working with a schema that has nested fields, something like the following:\r\n\r\n```\r\nclass A:\r\n    def __init__(self, field_a, field_b, field_c):\r\n        self.field_a = field_a\r\n        self.field_a = field_b\r\n        self.field_c = field_c\r\n\r\nclass B:\r\n    def __init__(self, field_d, field_e, field_f):\r\n        self.field_d = field_d\r\n        self.field_e = field_e\r\n\t\tself.field_f = field_5\r\n\r\nclass A_Schema(Schema):\r\n    field_a = fields.String(required=True)\r\n    field_b = fields.Int(required=True)\r\n    field_c = fields.Email()\r\n\r\nclass B_Schema(Schema):\r\n    field_d = fields.Int(required=True)\r\n    field_e = fields.Nested(A_Schema)\r\n\tfield_f = fields.Int(required=True)\r\n\r\n```\r\nWhat I'd really like to do is have a single yaml file get input and mapped against the entire structure - a yaml like this:\r\n\r\n```\r\nDATA_WITH_MISSING_FIELDS = \"\"\"\r\nfield_d: 'm'\r\nfield_e:\r\n\tfield_a: 'n'\r\n\tfield_b:  1\r\n\t# field_c: 'bob@bob.com'\r\n# field_f: 1\r\n```\r\n\r\nI've been able to hack together a solution by converting each sub-schema to an object and then attaching it, but then the validation errors (as seen above) appear when I create the sub-object, not the overall object.\r\n\r\nTwo questions:\r\n- Is it possible to wait and do validation on the whole object at the end?\r\n- Is there an elegant way to take a nested object like this and apply sub schemas (and validation)? I couldn't find anything in the docs.\r\n\r\n-----\r\n\r\nThe way I've tackled this to date has been to catch all the thrown errors, and build an error array, and then throw a final validation error at the end if the error array has any contents.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1562", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1562/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1562/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1562/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1562", "id": 596963648, "node_id": "MDU6SXNzdWU1OTY5NjM2NDg=", "number": 1562, "title": "Creating \"Stub\" objects", "user": {"login": "aronchick", "id": 51317, "node_id": "MDQ6VXNlcjUxMzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/51317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronchick", "html_url": "https://github.com/aronchick", "followers_url": "https://api.github.com/users/aronchick/followers", "following_url": "https://api.github.com/users/aronchick/following{/other_user}", "gists_url": "https://api.github.com/users/aronchick/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronchick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronchick/subscriptions", "organizations_url": "https://api.github.com/users/aronchick/orgs", "repos_url": "https://api.github.com/users/aronchick/repos", "events_url": "https://api.github.com/users/aronchick/events{/privacy}", "received_events_url": "https://api.github.com/users/aronchick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-09T01:46:03Z", "updated_at": "2020-04-23T00:03:50Z", "closed_at": "2020-04-23T00:03:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking to offer objects to users of my libraries based on the schemas that I've created behind the scenes. In order to do this, I need to offer them \"stub\" objects that have all the fields created in a dict, but the dict is frozen so no new fields can be created. It won't validate until the user submits the object back to ```.validate()``` (which will probably be also done behind the scenes.\r\n\r\nI was thinking of using ```.declared_fields``` to pop out the dict into something, but that feels like I'm doing a bunch of internal manipulation. Is there any defined way to get a dict from a defined Schema? Kind of like ```.from_dict()``` but in reverse?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1561", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1561/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1561/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1561/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1561", "id": 596251852, "node_id": "MDU6SXNzdWU1OTYyNTE4NTI=", "number": 1561, "title": "Suggestions for patterns for the following user flow", "user": {"login": "aronchick", "id": 51317, "node_id": "MDQ6VXNlcjUxMzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/51317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronchick", "html_url": "https://github.com/aronchick", "followers_url": "https://api.github.com/users/aronchick/followers", "following_url": "https://api.github.com/users/aronchick/following{/other_user}", "gists_url": "https://api.github.com/users/aronchick/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronchick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronchick/subscriptions", "organizations_url": "https://api.github.com/users/aronchick/orgs", "repos_url": "https://api.github.com/users/aronchick/repos", "events_url": "https://api.github.com/users/aronchick/events{/privacy}", "received_events_url": "https://api.github.com/users/aronchick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-08T01:46:01Z", "updated_at": "2020-04-14T19:38:38Z", "closed_at": "2020-04-14T19:38:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm building a strongly typed schema for data scientists who want to work at a higher level of abstraction than understanding marshmallow schema tools.\r\n\r\nSo the flow would look like the following:\r\n\r\n1. Data scientist decides she wants to create a new 'model package' object that has three fields: `framework`, `framework_version`, `model_uri`\r\n2. Data scientist instantiates an object from a library - e.g. MLSpec.model_package() - that has no data in it.\r\n3. Data scientist attempts to assign to the field `frame_work` but this fails (at runtime) because the attribute is `framework`\r\n4. The data scientist assigns values for `framework_version` and `model_uri`.\r\n5. Data scientist uses a method to `.validate()` the object against the schema.\r\n6. Data scientist executes `.save(<path>)` to serialize and save the object.\r\n\r\nAny thoughts here? Nothing seems terribly difficult - my biggest challenges would be catching misassigned fields, I believe (and ensuring the data scientist isn't accidentally writing to a Schema variable).\r\n\r\nExtra credit if I could make the schema show up for doc-string and/or code completion in VSCode & Jupyter.\r\n\r\nExtra extra credit if I could deserialize all objects so I don't have to load the schemas from disk on every import of the library.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1560", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1560/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1560/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1560/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1560", "id": 595410598, "node_id": "MDU6SXNzdWU1OTU0MTA1OTg=", "number": 1560, "title": "Wiping class_registry for unit testing", "user": {"login": "aronchick", "id": 51317, "node_id": "MDQ6VXNlcjUxMzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/51317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronchick", "html_url": "https://github.com/aronchick", "followers_url": "https://api.github.com/users/aronchick/followers", "following_url": "https://api.github.com/users/aronchick/following{/other_user}", "gists_url": "https://api.github.com/users/aronchick/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronchick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronchick/subscriptions", "organizations_url": "https://api.github.com/users/aronchick/orgs", "repos_url": "https://api.github.com/users/aronchick/repos", "events_url": "https://api.github.com/users/aronchick/events{/privacy}", "received_events_url": "https://api.github.com/users/aronchick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-06T20:36:04Z", "updated_at": "2020-04-06T21:40:21Z", "closed_at": "2020-04-06T21:40:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm doing a number of unit tests in a row, and between each one, the class_registry object maintains. This is as intended when the app is running, but not so when just running unit tests.\r\n\r\nIs there a best practice for wiping the class_registry? Or for just removing all registered objects since the class was created?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1556", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1556/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1556/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1556/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1556", "id": 593997652, "node_id": "MDU6SXNzdWU1OTM5OTc2NTI=", "number": 1556, "title": "Reference one Schema in another", "user": {"login": "Spothedog1", "id": 7429961, "node_id": "MDQ6VXNlcjc0Mjk5NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/7429961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Spothedog1", "html_url": "https://github.com/Spothedog1", "followers_url": "https://api.github.com/users/Spothedog1/followers", "following_url": "https://api.github.com/users/Spothedog1/following{/other_user}", "gists_url": "https://api.github.com/users/Spothedog1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Spothedog1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Spothedog1/subscriptions", "organizations_url": "https://api.github.com/users/Spothedog1/orgs", "repos_url": "https://api.github.com/users/Spothedog1/repos", "events_url": "https://api.github.com/users/Spothedog1/events{/privacy}", "received_events_url": "https://api.github.com/users/Spothedog1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-04T18:49:12Z", "updated_at": "2020-04-04T18:57:33Z", "closed_at": "2020-04-04T18:51:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nclass SerieId(Schema):\r\n    serieId = fields.Str(location='view_args', required=True)\r\n\r\nclass Version(Schema):\r\n    version = fields.Str(location='view_args', required=False)\r\n\r\nclass ChartGetRequest(Schema):\r\n    serieId = SerieId()\r\n    version = Version()\r\n```\r\n\r\nHello - I'm trying to build a bunch of schemas up into one schema. The reason for this is the ChartGetRequest is used for validating the input of my API, while SerieId and Version are used for Swagger API Documentation purposes and are separate path parameters. I was wondering if there was a way to do what I'm trying to do above. When I call this I get an error saying SerieId is the wrong type. I tried a couple of other ways also such as \r\n\r\n`serieId = SerieId._declared_fields['serieId']`\r\n\r\nbut this isn't working either. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1555", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1555/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1555/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1555/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1555", "id": 593650502, "node_id": "MDU6SXNzdWU1OTM2NTA1MDI=", "number": 1555, "title": "Proposal: Use of dotmap or equivalent to simplify usage of the deserialized object", "user": {"login": "aronchick", "id": 51317, "node_id": "MDQ6VXNlcjUxMzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/51317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronchick", "html_url": "https://github.com/aronchick", "followers_url": "https://api.github.com/users/aronchick/followers", "following_url": "https://api.github.com/users/aronchick/following{/other_user}", "gists_url": "https://api.github.com/users/aronchick/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronchick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronchick/subscriptions", "organizations_url": "https://api.github.com/users/aronchick/orgs", "repos_url": "https://api.github.com/users/aronchick/repos", "events_url": "https://api.github.com/users/aronchick/events{/privacy}", "received_events_url": "https://api.github.com/users/aronchick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-03T21:27:29Z", "updated_at": "2020-04-08T02:31:06Z", "closed_at": "2020-04-07T13:59:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Because Marshmallow provides a nice abstraction over the datamodel, it might be nice to go even further and use something like DotMap (https://github.com/drgrib/dotmap) to simplify using the objects. \r\n\r\nE.g. instead of \r\n```\r\nuser['created_at']\r\n```\r\n\r\nyou could type:\r\n\r\n```\r\nuser.created_at\r\n```\r\n\r\nThis also provides the benefit of giving you a layer to prevent messing with the object (instead of with a visible dict data structure, where it feels like it's more open to interference).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1554", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1554/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1554/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1554/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1554", "id": 593537679, "node_id": "MDU6SXNzdWU1OTM1Mzc2Nzk=", "number": 1554, "title": "Datetimes from Yaml", "user": {"login": "aronchick", "id": 51317, "node_id": "MDQ6VXNlcjUxMzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/51317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronchick", "html_url": "https://github.com/aronchick", "followers_url": "https://api.github.com/users/aronchick/followers", "following_url": "https://api.github.com/users/aronchick/following{/other_user}", "gists_url": "https://api.github.com/users/aronchick/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronchick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronchick/subscriptions", "organizations_url": "https://api.github.com/users/aronchick/orgs", "repos_url": "https://api.github.com/users/aronchick/repos", "events_url": "https://api.github.com/users/aronchick/events{/privacy}", "received_events_url": "https://api.github.com/users/aronchick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-03T17:38:00Z", "updated_at": "2020-04-03T20:15:50Z", "closed_at": "2020-04-03T20:15:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "This may be more of a yaml loading issue, but I'm stuck trying to figure out how to do this with a Marshmallow schema.\r\n\r\nI'm loading an object from a yaml serialization, and it looks like the following:\r\n\r\n```\r\nraw_string = \"\"\"\r\nrun_date: 1970-01-01 00:00:00.00000\r\n\"\"\"\r\n```\r\nThe code & schema that consume this looks like the following:\r\n\r\n```\r\ndate_schema = Schema().from_dict({'run_date': fields.DateTime()})\r\ndata_yaml = yaml.safe_load(raw_string)\r\n# data_yaml => {'run_date': datetime.datetime(1970, 1, 1, 0, 0)}\r\npprint(data_yaml)\r\nthis_object = DateSchema().load(data_yaml)\r\npprint(this_object)\r\n```\r\n\r\nUnfortunately, when I run this, the value is not recognized as a valid datetime by Marshmallow. How is this supposed to work?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1553", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1553/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1553/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1553/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1553", "id": 593519325, "node_id": "MDU6SXNzdWU1OTM1MTkzMjU=", "number": 1553, "title": "Building a schema from yaml issues", "user": {"login": "aronchick", "id": 51317, "node_id": "MDQ6VXNlcjUxMzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/51317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronchick", "html_url": "https://github.com/aronchick", "followers_url": "https://api.github.com/users/aronchick/followers", "following_url": "https://api.github.com/users/aronchick/following{/other_user}", "gists_url": "https://api.github.com/users/aronchick/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronchick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronchick/subscriptions", "organizations_url": "https://api.github.com/users/aronchick/orgs", "repos_url": "https://api.github.com/users/aronchick/repos", "events_url": "https://api.github.com/users/aronchick/events{/privacy}", "received_events_url": "https://api.github.com/users/aronchick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-03T17:02:40Z", "updated_at": "2020-04-23T00:04:07Z", "closed_at": "2020-04-23T00:04:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a dynamic schema definition that I want to construct from a yaml and then, after converting the yaml to a dict, hand the entire thing to ```from_dict``` to create the Schema.\r\n\r\nUnfortunately, something like this doesn't work:\r\n\r\n```\r\nschema_as_yaml = {'run_date': 'fields.DateTime()'}\r\nthis_schema = Schema.from_dict(schema_as_yaml)\r\ndata = {'run_date': '1970-01-01'}\r\nthis_schema().load(data)\r\n# => ValidationError: {'run_date': ['Unknown field.']}\r\n```\r\n\r\nI've debugged why (the value for \"run_date\" in the schema needs to be a function, not a string), but is there a better way to address this? Manipulating strings is much easier than having to do function lookups.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1552", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1552/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1552/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1552/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1552", "id": 590115322, "node_id": "MDU6SXNzdWU1OTAxMTUzMjI=", "number": 1552, "title": "Deserialize raises typeerror got an unexpected keyword argument 'error_store'", "user": {"login": "markvtussenbroek", "id": 62877780, "node_id": "MDQ6VXNlcjYyODc3Nzgw", "avatar_url": "https://avatars2.githubusercontent.com/u/62877780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markvtussenbroek", "html_url": "https://github.com/markvtussenbroek", "followers_url": "https://api.github.com/users/markvtussenbroek/followers", "following_url": "https://api.github.com/users/markvtussenbroek/following{/other_user}", "gists_url": "https://api.github.com/users/markvtussenbroek/gists{/gist_id}", "starred_url": "https://api.github.com/users/markvtussenbroek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markvtussenbroek/subscriptions", "organizations_url": "https://api.github.com/users/markvtussenbroek/orgs", "repos_url": "https://api.github.com/users/markvtussenbroek/repos", "events_url": "https://api.github.com/users/markvtussenbroek/events{/privacy}", "received_events_url": "https://api.github.com/users/markvtussenbroek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-30T09:00:14Z", "updated_at": "2020-03-30T12:53:27Z", "closed_at": "2020-03-30T12:53:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n    def _do_load(\r\n        self, data, *, many=None, partial=None, unknown=None, postprocess=True\r\n    ):\r\n        \"\"\"Deserialize `data`, returning the deserialized result.\r\n    \r\n        :param data: The data to deserialize.\r\n        :param bool many: Whether to deserialize `data` as a collection. If `None`, the\r\n            value for `self.many` is used.\r\n        :param bool|tuple partial: Whether to validate required fields. If its\r\n            value is an iterable, only fields listed in that iterable will be\r\n            ignored will be allowed missing. If `True`, all fields will be allowed missing.\r\n            If `None`, the value for `self.partial` is used.\r\n        :param unknown: Whether to exclude, include, or raise an error for unknown\r\n            fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`.\r\n            If `None`, the value for `self.unknown` is used.\r\n        :param bool postprocess: Whether to run post_load methods..\r\n        :return: A dict of deserialized data\r\n        :rtype: dict\r\n        \"\"\"\r\n        error_store = ErrorStore()\r\n        errors = {}\r\n        many = self.many if many is None else bool(many)\r\n        unknown = unknown or self.unknown\r\n        if partial is None:\r\n            partial = self.partial\r\n        # Run preprocessors\r\n        if self._has_processors(PRE_LOAD):\r\n            try:\r\n                processed_data = self._invoke_load_processors(\r\n                    PRE_LOAD, data, many=many, original_data=data, partial=partial\r\n                )\r\n            except ValidationError as err:\r\n                errors = err.normalized_messages()\r\n                result = None\r\n        else:\r\n            processed_data = data\r\n        if not errors:\r\n            # Deserialize data\r\n            result = self._deserialize(\r\n                processed_data,\r\n                error_store=error_store,\r\n                many=many,\r\n                partial=partial,\r\n>               unknown=unknown,\r\n            )\r\nE           TypeError: _deserialize() got an unexpected keyword argument 'error_store'\r\n\r\nvenv_35/lib/python3.5/site-packages/marshmallow/schema.py:799: TypeError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1550", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1550/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1550/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1550/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1550", "id": 587855257, "node_id": "MDU6SXNzdWU1ODc4NTUyNTc=", "number": 1550, "title": "Dumping collections does not work with marshmallow 3.5.1 / Flask 1.1.1", "user": {"login": "embeddedc", "id": 4259379, "node_id": "MDQ6VXNlcjQyNTkzNzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4259379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/embeddedc", "html_url": "https://github.com/embeddedc", "followers_url": "https://api.github.com/users/embeddedc/followers", "following_url": "https://api.github.com/users/embeddedc/following{/other_user}", "gists_url": "https://api.github.com/users/embeddedc/gists{/gist_id}", "starred_url": "https://api.github.com/users/embeddedc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/embeddedc/subscriptions", "organizations_url": "https://api.github.com/users/embeddedc/orgs", "repos_url": "https://api.github.com/users/embeddedc/repos", "events_url": "https://api.github.com/users/embeddedc/events{/privacy}", "received_events_url": "https://api.github.com/users/embeddedc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-25T17:12:47Z", "updated_at": "2020-03-26T15:30:29Z", "closed_at": "2020-03-26T15:30:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n$ cat test.py \r\n\r\nfrom flask import Flask\r\nfrom flask_marshmallow import Marshmallow\r\nfrom flask_sqlalchemy import SQLAlchemy\r\n\r\napp = Flask(__name__)\r\n\r\ndb = SQLAlchemy(app)\r\nma = Marshmallow(app)\r\n\r\nclass User(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String)\r\n\r\nclass UserSchema(ma.Schema):\r\n    class Meta:\r\n        fields = (\"id\", \"name\")\r\n\r\nuser_schema = UserSchema()\r\nusers_schema = UserSchema(many=True)\r\n\r\n@app.route(\"/api/users/\")\r\ndef users():\r\n    all_users = User.query.all()\r\n    return users_schema.dump(all_users)\r\n\r\n\r\n@app.route(\"/api/users/<id>\")\r\ndef user_detail(id):\r\n    user = User.query.get(id)\r\n    return user_schema.dump(user)\r\n```\r\n`dump(user)`  works fine\r\n```\r\n$ curl localhost:5000/api/users/1\r\n\r\n{\r\n  \"id\": 1, \r\n  \"name\": \"John\"\r\n}\r\n```\r\n`dump(all_users)` fails:\r\n```\r\n$ curl -L localhost:5000/api/user\r\n\r\n[...]\r\nTraceback (most recent call last):\r\n  File \"venv/lib/python3.7/site-packages/flask/app.py\", line 2463, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"venv/lib/python3.7/site-packages/flask/app.py\", line 2449, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"venv/lib/python3.7/site-packages/flask/app.py\", line 1866, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"venv/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"venv/lib/python3.7/site-packages/flask/app.py\", line 2446, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"venv/lib/python3.7/site-packages/flask/app.py\", line 1952, in full_dispatch_request\r\n    return self.finalize_request(rv)\r\n  File \"venv/lib/python3.7/site-packages/flask/app.py\", line 1967, in finalize_request\r\n    response = self.make_response(rv)\r\n  File \"venv/lib/python3.7/site-packages/flask/app.py\", line 2130, in make_response\r\n    \" {rv.__class__.__name__}.\".format(rv=rv)\r\nTypeError: The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a list.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1548", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1548/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1548/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1548/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1548", "id": 586976987, "node_id": "MDU6SXNzdWU1ODY5NzY5ODc=", "number": 1548, "title": "Feature request: Add Meta definition to \"Schema.from_dict\"", "user": {"login": "t-bittarn", "id": 50064934, "node_id": "MDQ6VXNlcjUwMDY0OTM0", "avatar_url": "https://avatars1.githubusercontent.com/u/50064934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-bittarn", "html_url": "https://github.com/t-bittarn", "followers_url": "https://api.github.com/users/t-bittarn/followers", "following_url": "https://api.github.com/users/t-bittarn/following{/other_user}", "gists_url": "https://api.github.com/users/t-bittarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-bittarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-bittarn/subscriptions", "organizations_url": "https://api.github.com/users/t-bittarn/orgs", "repos_url": "https://api.github.com/users/t-bittarn/repos", "events_url": "https://api.github.com/users/t-bittarn/events{/privacy}", "received_events_url": "https://api.github.com/users/t-bittarn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96590028, "node_id": "MDU6TGFiZWw5NjU5MDAyOA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-24T13:53:55Z", "updated_at": "2020-03-25T14:23:08Z", "closed_at": "2020-03-25T14:23:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem:**\r\nCurrently, we cant define Schema Meta in from_dict method.\r\n**Reason**\r\nMeta data is hard coded in from_dict method.\r\n```python\r\nattrs[\"Meta\"] = type(\r\n            \"GeneratedMeta\", (getattr(cls, \"Meta\", object),), {\"register\": False}\r\n        )\r\n```\r\n**Possible solutions**\r\nUse user input meta data instead.\r\n```python\r\nmeta_data = attrs.pop(\"Meta\", {})\r\nmeta_data[\"register\"] = False\r\nattrs[\"Meta\"] = type(\r\n            \"GeneratedMeta\", (getattr(cls, \"Meta\", object),), meta_data\r\n        )\r\n```\r\n**Why this feature helpful**\r\nI'm a webargs user. If I can't define \"unknown\" in schema dict definition, I need define a Schema class for every web route, that waste a lot of code. This feature can also let from_dict method more powerful in other places.\r\n\r\nThanks. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1547", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1547/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1547/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1547/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1547", "id": 586389906, "node_id": "MDU6SXNzdWU1ODYzODk5MDY=", "number": 1547, "title": "Formatting error messages on validation", "user": {"login": "Jonyorker", "id": 23500563, "node_id": "MDQ6VXNlcjIzNTAwNTYz", "avatar_url": "https://avatars0.githubusercontent.com/u/23500563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jonyorker", "html_url": "https://github.com/Jonyorker", "followers_url": "https://api.github.com/users/Jonyorker/followers", "following_url": "https://api.github.com/users/Jonyorker/following{/other_user}", "gists_url": "https://api.github.com/users/Jonyorker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jonyorker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jonyorker/subscriptions", "organizations_url": "https://api.github.com/users/Jonyorker/orgs", "repos_url": "https://api.github.com/users/Jonyorker/repos", "events_url": "https://api.github.com/users/Jonyorker/events{/privacy}", "received_events_url": "https://api.github.com/users/Jonyorker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-23T17:31:45Z", "updated_at": "2020-07-27T14:40:11Z", "closed_at": "2020-07-27T14:40:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nCurrently, when I encounter a schema validation error I get this as output\r\n\r\n```\r\n{\r\n  \"mode\": {\r\n    \"0\": {\r\n      \"values\": {\r\n        \"sov\": [\r\n          \"Value must be greater than 0\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIs it possible to modify something to get this as output? (notice the square brackets around the value)\r\n\r\n```\r\n{\r\n  \"mode\": {\r\n    \"0\": {\r\n      \"values\": [\r\n        {\r\n          \"sov\": [\r\n            \"Value must be greater than 0\"\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1546", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1546/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1546/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1546/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1546", "id": 585593200, "node_id": "MDU6SXNzdWU1ODU1OTMyMDA=", "number": 1546, "title": "TypeError:@validates_schema got an unexpected keyword argument 'partial'", "user": {"login": "IamSAB", "id": 8931240, "node_id": "MDQ6VXNlcjg5MzEyNDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8931240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IamSAB", "html_url": "https://github.com/IamSAB", "followers_url": "https://api.github.com/users/IamSAB/followers", "following_url": "https://api.github.com/users/IamSAB/following{/other_user}", "gists_url": "https://api.github.com/users/IamSAB/gists{/gist_id}", "starred_url": "https://api.github.com/users/IamSAB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IamSAB/subscriptions", "organizations_url": "https://api.github.com/users/IamSAB/orgs", "repos_url": "https://api.github.com/users/IamSAB/repos", "events_url": "https://api.github.com/users/IamSAB/events{/privacy}", "received_events_url": "https://api.github.com/users/IamSAB/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-21T21:58:18Z", "updated_at": "2020-03-21T22:14:10Z", "closed_at": "2020-03-21T22:14:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I go this wierd error:\r\n\r\nTypeError: validate_schema() got an unexpected keyword argument 'partial'\r\n\r\nusing this code with flask_marhsmallow, flask_restx and flask_accepts:\r\n\r\nschemas:\r\n```python\r\nclass EmailSchema(ma.Schema):\r\n    email = ma.Email()\r\n\r\n\r\nclass UsernameSchema(ma.Schema):\r\n    username = ma.String()\r\n\r\n\r\nclass ConfirmPasswordSchema(ma.Schema):\r\n    password = ma.String()\r\n    confirmation = ma.String()\r\n\r\n    @validates_schema\r\n    def validate_schema(self, data):\r\n        if data.password != data.confirmation:\r\n            raise ValidationError(\"Incorrect password confirmation\")\r\n\r\n\r\nclass AccountSchema(ma.SQLAlchemySchema, EmailSchema, UsernameSchema, ConfirmPasswordSchema):\r\n\r\n    class Meta:\r\n        model = User\r\n\r\n    id = ma.Integer(required=True)\r\n    name = ma.String(required=True)\r\n```\r\nusage of schema\r\n```python\r\n@api.route('/')\r\nclass Account(Resource):\r\n\r\n    @accepts(schema=AccountSchema, api=api)\r\n    @responds(schema=AccountSchema, api=api)\r\n    def post(self):\r\n       ...\r\n```\r\nIs it possible that there is a problem with extending schemas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1542", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1542/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1542/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1542/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1542", "id": 583433053, "node_id": "MDU6SXNzdWU1ODM0MzMwNTM=", "number": 1542, "title": "Serializing ObjectId", "user": {"login": "mekanix", "id": 610855, "node_id": "MDQ6VXNlcjYxMDg1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/610855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mekanix", "html_url": "https://github.com/mekanix", "followers_url": "https://api.github.com/users/mekanix/followers", "following_url": "https://api.github.com/users/mekanix/following{/other_user}", "gists_url": "https://api.github.com/users/mekanix/gists{/gist_id}", "starred_url": "https://api.github.com/users/mekanix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mekanix/subscriptions", "organizations_url": "https://api.github.com/users/mekanix/orgs", "repos_url": "https://api.github.com/users/mekanix/repos", "events_url": "https://api.github.com/users/mekanix/events{/privacy}", "received_events_url": "https://api.github.com/users/mekanix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-18T03:15:00Z", "updated_at": "2020-03-18T20:07:35Z", "closed_at": "2020-03-18T20:07:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to serialize MongoEngine object the following error is raised\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/app.py\", line 2463, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/app.py\", line 2449, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask_cors/extension.py\", line 161, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/app.py\", line 1866, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/app.py\", line 2446, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/app.py\", line 1951, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask_cors/extension.py\", line 161, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/app.py\", line 1820, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/app.py\", line 1949, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/app.py\", line 1935, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/views.py\", line 89, in view\r\n    return self.dispatch_request(*args, **kwargs)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/views.py\", line 163, in dispatch_request\r\n    return meth(*args, **kwargs)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask_smorest/response.py\", line 80, in wrapper\r\n    func(*args, **kwargs))\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/webargs/core.py\", line 459, in wrapper\r\n    return func(*new_args, **kwargs)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask_smorest/arguments.py\", line 77, in wrapper\r\n    return func(*f_args, **f_kwargs)\r\n  File \"/usr/src/freenit/api/auth.py\", line 52, in post\r\n    access_token = create_access_token(identity=user.id)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask_jwt_extended/utils.py\", line 173, in create_access_token\r\n    headers=headers)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask_jwt_extended/jwt_manager.py\", line 522, in _create_access_token\r\n    headers=headers\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask_jwt_extended/tokens.py\", line 77, in encode_access_token\r\n    json_encoder=json_encoder, headers=headers)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask_jwt_extended/tokens.py\", line 30, in _encode_jwt\r\n    json_encoder=json_encoder, headers=headers).decode('utf-8')\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/jwt/api_jwt.py\", line 61, in encode\r\n    cls=json_encoder\r\n  File \"/usr/local/lib/python3.7/json/__init__.py\", line 238, in dumps\r\n    **kw).encode(obj)\r\n  File \"/usr/local/lib/python3.7/json/encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"/usr/local/lib/python3.7/json/encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask_mongoengine/json.py\", line 18, in default\r\n    return superclass.default(self, obj)\r\n  File \"/usr/home/devel/.virtualenvs/freenitback/lib/python3.7/site-packages/flask/json/__init__.py\", line 100, in default\r\n    return _json.JSONEncoder.default(self, o)\r\n  File \"/usr/local/lib/python3.7/json/encoder.py\", line 179, in default\r\n    raise TypeError(f'Object of type {o.__class__.__name__} '\r\n```\r\n\r\nSo, how to write a schema in this case? Or maybe better question is which field to use of ObjectId? I tried the type mapping suggested in https://stackoverflow.com/a/28094611 (first link while googling) but it doesn't work. Thank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1540", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1540/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1540/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1540/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1540", "id": 582233534, "node_id": "MDU6SXNzdWU1ODIyMzM1MzQ=", "number": 1540, "title": "Adding location like header in Schema body", "user": {"login": "priyanshu20", "id": 59313375, "node_id": "MDQ6VXNlcjU5MzEzMzc1", "avatar_url": "https://avatars3.githubusercontent.com/u/59313375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/priyanshu20", "html_url": "https://github.com/priyanshu20", "followers_url": "https://api.github.com/users/priyanshu20/followers", "following_url": "https://api.github.com/users/priyanshu20/following{/other_user}", "gists_url": "https://api.github.com/users/priyanshu20/gists{/gist_id}", "starred_url": "https://api.github.com/users/priyanshu20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/priyanshu20/subscriptions", "organizations_url": "https://api.github.com/users/priyanshu20/orgs", "repos_url": "https://api.github.com/users/priyanshu20/repos", "events_url": "https://api.github.com/users/priyanshu20/events{/privacy}", "received_events_url": "https://api.github.com/users/priyanshu20/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-16T11:57:07Z", "updated_at": "2020-04-12T05:46:27Z", "closed_at": "2020-04-12T05:46:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "So i need to add the authorization bearer model in the header part of a json request\r\ncan i validate it with the marshmallow schema?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1538", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1538/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1538/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1538/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1538", "id": 580839502, "node_id": "MDU6SXNzdWU1ODA4Mzk1MDI=", "number": 1538, "title": "Error when running Custom Fields documented example", "user": {"login": "pablospizzamiglio", "id": 2845728, "node_id": "MDQ6VXNlcjI4NDU3Mjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2845728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pablospizzamiglio", "html_url": "https://github.com/pablospizzamiglio", "followers_url": "https://api.github.com/users/pablospizzamiglio/followers", "following_url": "https://api.github.com/users/pablospizzamiglio/following{/other_user}", "gists_url": "https://api.github.com/users/pablospizzamiglio/gists{/gist_id}", "starred_url": "https://api.github.com/users/pablospizzamiglio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pablospizzamiglio/subscriptions", "organizations_url": "https://api.github.com/users/pablospizzamiglio/orgs", "repos_url": "https://api.github.com/users/pablospizzamiglio/repos", "events_url": "https://api.github.com/users/pablospizzamiglio/events{/privacy}", "received_events_url": "https://api.github.com/users/pablospizzamiglio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 121211057, "node_id": "MDU6TGFiZWwxMjEyMTEwNTc=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/docs", "name": "docs", "color": "bfdadc", "default": false, "description": null}, {"id": 96590028, "node_id": "MDU6TGFiZWw5NjU5MDAyOA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-13T20:51:21Z", "updated_at": "2020-05-10T17:45:18Z", "closed_at": "2020-05-10T17:45:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI was trying to run the Custom Field [example](https://marshmallow.readthedocs.io/en/stable/custom_fields.html#creating-a-field-class) but I get an error related to the keys being duplicate. \r\n\r\nThis is the example:\r\n```\r\nfrom marshmallow import fields, Schema, pprint\r\n\r\n\r\nclass TitleCased(fields.Field):\r\n    \"\"\"Field that serializes to a title case string and deserializes\r\n    to a lower case string.\r\n    \"\"\"\r\n\r\n    def _serialize(self, value, attr, obj, **kwargs):\r\n        if value is None:\r\n            return \"\"\r\n        return value.title()\r\n\r\n    def _deserialize(self, value, attr, data, **kwargs):\r\n        return value.lower()\r\n\r\n\r\nclass UserSchema(Schema):\r\n    name = fields.String()\r\n    email = fields.String()\r\n    created_at = fields.DateTime()\r\n    titlename = TitleCased(attribute=\"name\")\r\n```\r\n\r\nThis is the code snipet I use to run the example since the example seems to miss to tell how to actually test the example:\r\n```\r\nuser_schema = UserSchema()\r\nuser = user_schema.load({\"name\": \"John Doe\", \"email\": \"johndoe@test.com\", \"created_at\": datetime.utcnow().isoformat()})\r\npprint(user)\r\n```\r\n\r\nThis is the result:\r\n```\r\n(venv) PS D:\\Documents\\Projects\\research\\marsh> python.exe .\\poc.py                                                     Traceback (most recent call last):\r\n  File \".\\poc.py\", line 27, in <module>\r\n    user_schema = UserSchema()\r\n  File \"D:\\Documents\\Projects\\research\\marsh\\venv\\lib\\site-packages\\marshmallow\\schema.py\", line 397, in __init__\r\n    self._init_fields()\r\n  File \"D:\\Documents\\Projects\\research\\marsh\\venv\\lib\\site-packages\\marshmallow\\schema.py\", line 1008, in _init_fields\r\n    raise ValueError(\r\nValueError: The attribute argument for one or more fields collides with another field's name or attribute argument. Check the following field names and attribute arguments: ['name']\r\n```\r\n\r\nBut if I change the schema definition to this:\r\n```\r\nclass UserSchema(Schema):\r\n    # name = fields.String()\r\n    email = fields.String()\r\n    created_at = fields.DateTime()\r\n    name = TitleCased(attribute=\"name\")\r\n```\r\n\r\nThen I get the following output:\r\n```\r\n{'created_at': datetime.datetime(2020, 3, 13, 20, 46, 42, 817528),\r\n 'email': 'johndoe@test.com',\r\n 'name': 'john doe'}\r\n```\r\n\r\nIn conclusion I'm not sure if it's me doing something wrong or the documentation is not complete for this particular feature.\r\n\r\nI'll gladly accept any help regarding this. \r\nCheers.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1532", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1532/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1532/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1532/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1532", "id": 576423365, "node_id": "MDU6SXNzdWU1NzY0MjMzNjU=", "number": 1532, "title": "Date validation fails for Feb 29 if year not included", "user": {"login": "pylipp", "id": 10617122, "node_id": "MDQ6VXNlcjEwNjE3MTIy", "avatar_url": "https://avatars1.githubusercontent.com/u/10617122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylipp", "html_url": "https://github.com/pylipp", "followers_url": "https://api.github.com/users/pylipp/followers", "following_url": "https://api.github.com/users/pylipp/following{/other_user}", "gists_url": "https://api.github.com/users/pylipp/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylipp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylipp/subscriptions", "organizations_url": "https://api.github.com/users/pylipp/orgs", "repos_url": "https://api.github.com/users/pylipp/repos", "events_url": "https://api.github.com/users/pylipp/events{/privacy}", "received_events_url": "https://api.github.com/users/pylipp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1011519607, "node_id": "MDU6TGFiZWwxMDExNTE5NjA3", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/datetime", "name": "datetime", "color": "432393", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-05T17:40:47Z", "updated_at": "2020-03-05T20:18:12Z", "closed_at": "2020-03-05T20:16:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using marshmallow 3.3.0, date validation fails for leap year days when no additional year info given.\r\nA custom validate function does not remedy the issue.\r\n\r\n```python\r\nfrom marshmallow import Schema, fields, validates\r\n\r\nclass TestSchema(Schema):\r\n    date = fields.Date(format=\"%m-%d\")\r\n\r\n# returns: {'date': ['Not a valid date.']}\r\nTestSchema().validate({\"date\": \"02-29\"})\r\n\r\nclass TestSchema(Schema):\r\n    date = fields.Date(format=\"%y-%m-%d\")\r\n\r\n# returns: {}\r\nTestSchema().validate(\"date\": \"20-02-29\"})\r\n\r\ndef validate(d):\r\n    try:\r\n        time.strptime(d, \"%m-%d\")\r\n        return True\r\n    except ValueError:\r\n        return False\r\n\r\nclass TestSchema(Schema):\r\n    date = fields.Date(validate=validate)\r\n\r\n# returns: {'date': ['Not a valid date.']}\r\nTestSchema().validate(\"date\": \"02-29\"})\r\n```\r\n\r\nPython built-in `datetime.datetime.strptime` has the same issue (https://bugs.python.org/issue14157, https://bugs.python.org/issue26460) while `time.strptime` has not.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1531", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1531/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1531/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1531/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1531", "id": 576306621, "node_id": "MDU6SXNzdWU1NzYzMDY2MjE=", "number": 1531, "title": "Value Error when parsing data, error to user_schema", "user": {"login": "brightmaraba", "id": 29838897, "node_id": "MDQ6VXNlcjI5ODM4ODk3", "avatar_url": "https://avatars1.githubusercontent.com/u/29838897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brightmaraba", "html_url": "https://github.com/brightmaraba", "followers_url": "https://api.github.com/users/brightmaraba/followers", "following_url": "https://api.github.com/users/brightmaraba/following{/other_user}", "gists_url": "https://api.github.com/users/brightmaraba/gists{/gist_id}", "starred_url": "https://api.github.com/users/brightmaraba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brightmaraba/subscriptions", "organizations_url": "https://api.github.com/users/brightmaraba/orgs", "repos_url": "https://api.github.com/users/brightmaraba/repos", "events_url": "https://api.github.com/users/brightmaraba/events{/privacy}", "received_events_url": "https://api.github.com/users/brightmaraba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-05T14:47:53Z", "updated_at": "2020-03-05T22:59:05Z", "closed_at": "2020-03-05T22:59:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "The code\r\n` data, errors = user_schema.load(data=json_data)`\r\nworks perfectly in marshmallow==2.19.5 but throws a Value Error: too many variables in later versions. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1530", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1530/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1530/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1530/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1530", "id": 575549654, "node_id": "MDU6SXNzdWU1NzU1NDk2NTQ=", "number": 1530, "title": "Errorhandler not work for ValidationError from marshmallow", "user": {"login": "Cheban1996", "id": 11075696, "node_id": "MDQ6VXNlcjExMDc1Njk2", "avatar_url": "https://avatars0.githubusercontent.com/u/11075696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cheban1996", "html_url": "https://github.com/Cheban1996", "followers_url": "https://api.github.com/users/Cheban1996/followers", "following_url": "https://api.github.com/users/Cheban1996/following{/other_user}", "gists_url": "https://api.github.com/users/Cheban1996/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cheban1996/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cheban1996/subscriptions", "organizations_url": "https://api.github.com/users/Cheban1996/orgs", "repos_url": "https://api.github.com/users/Cheban1996/repos", "events_url": "https://api.github.com/users/Cheban1996/events{/privacy}", "received_events_url": "https://api.github.com/users/Cheban1996/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-04T16:19:57Z", "updated_at": "2020-08-11T14:18:17Z", "closed_at": "2020-03-04T16:59:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!-- **This issue tracker is a tool to address bugs in Flask itself.\r\nPlease use the Pallets Discord or Stack Overflow for general questions\r\nabout using Flask or issues not related to Flask.** -->\r\n\r\n<!-- If you'd like to report a bug in Flask, fill out the template below. Provide\r\nany extra information that may be useful / related to your problem.\r\nIdeally, create an [MCVE](https://stackoverflow.com/help/mcve), which helps us\r\nunderstand the problem and helps check that it is not caused by something in\r\nyour code. -->\r\n\r\n### Expected Behavior\r\nWhen happens exeption ValidationError i waiting that be handled function handle_exception\r\n\r\n### Actual Behavior\r\n```pytb\r\n  File \"/usr/lib/python3.7/site-packages/marshmallow/schema.py\", line 892, in _do_load\r\n    raise exc\r\nmarshmallow.exceptions.ValidationError: {'active': ['Not a valid boolean.']}\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: 3.8\r\n* Flask version: 1.1.1\r\n* Werkzeug version: 0.16.1\r\n* Marshmallow: 3.5.0\r\n```\r\n@app.errorhandler(marshmallow.exceptions.ValidationError)\r\ndef handle_exception(e):\r\n    return {'message': e.normalized_messages()}, 400\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1529", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1529/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1529/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1529/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1529", "id": 574295512, "node_id": "MDU6SXNzdWU1NzQyOTU1MTI=", "number": 1529, "title": "Troubles with validating nested values", "user": {"login": "Jonyorker", "id": 23500563, "node_id": "MDQ6VXNlcjIzNTAwNTYz", "avatar_url": "https://avatars0.githubusercontent.com/u/23500563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jonyorker", "html_url": "https://github.com/Jonyorker", "followers_url": "https://api.github.com/users/Jonyorker/followers", "following_url": "https://api.github.com/users/Jonyorker/following{/other_user}", "gists_url": "https://api.github.com/users/Jonyorker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jonyorker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jonyorker/subscriptions", "organizations_url": "https://api.github.com/users/Jonyorker/orgs", "repos_url": "https://api.github.com/users/Jonyorker/repos", "events_url": "https://api.github.com/users/Jonyorker/events{/privacy}", "received_events_url": "https://api.github.com/users/Jonyorker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-02T22:40:04Z", "updated_at": "2020-03-05T22:21:05Z", "closed_at": "2020-03-05T22:21:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am looking to add validation to my api endpoint using Marshmallow.\r\n\r\nI am running into the problem of how to get this chunk properly validated. The end goal is to make sure impressions is a positive number.\r\n\r\nI would greatly appreciate any help or insight you can provide. First time using Marshmallow.\r\n\r\n**Sample JSON:**\r\n```\r\n{\r\n    \"mode\": [\r\n        {\r\n            \"type\": \"String\",\r\n            \"values\": {\r\n                \"visits\": 1000,\r\n                \"budget\": 400\r\n            },\r\n            \"active\": true\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n**Sample code attempting to validate**\r\n\r\n```\r\nclass ValidateValues(BaseSchema):\r\n    visits = fields.Int(allow_none=True, validate=[validate.Range(min=0, error=\"Value must be greater than 0\")])\r\n    budget = fields.Int(allow_none=True, validate=[validate.Range(min=0, error=\"Value must be greater than 0\")])\r\n\r\n\r\nclass ModeSchema(BaseSchema):\r\n    type = fields.String(required=True)\r\n    active = fields.Boolean(required=True)\r\n    values = fields.Nested(ValidateValues)\r\n\r\n\r\nclass JsonSchema(BaseSchema):\r\n    mode = fields.List(fields.Dict(fields.Nested(ModeSchema, many=True)))\r\n```\r\n\r\n**Current result**\r\n\r\n```\r\n{\r\n    \"mode\": {\r\n        \"0\": {\r\n            \"type\": {\r\n                \"key\": [\r\n                    \"Invalid type.\"\r\n                ]\r\n            },\r\n            \"values\": {\r\n                \"key\": [\r\n                    \"Invalid type.\"\r\n                ]\r\n            },\r\n            \"active\": {\r\n                \"key\": [\r\n                    \"Invalid type.\"\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1528", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1528/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1528/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1528/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1528", "id": 574179318, "node_id": "MDU6SXNzdWU1NzQxNzkzMTg=", "number": 1528, "title": "Feature Suggestion: Add ContainsNoneOf validator", "user": {"login": "Resinderate", "id": 4006460, "node_id": "MDQ6VXNlcjQwMDY0NjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4006460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Resinderate", "html_url": "https://github.com/Resinderate", "followers_url": "https://api.github.com/users/Resinderate/followers", "following_url": "https://api.github.com/users/Resinderate/following{/other_user}", "gists_url": "https://api.github.com/users/Resinderate/gists{/gist_id}", "starred_url": "https://api.github.com/users/Resinderate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Resinderate/subscriptions", "organizations_url": "https://api.github.com/users/Resinderate/orgs", "repos_url": "https://api.github.com/users/Resinderate/repos", "events_url": "https://api.github.com/users/Resinderate/events{/privacy}", "received_events_url": "https://api.github.com/users/Resinderate/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183468, "node_id": "MDU6TGFiZWw2NTE4MzQ2OA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/enhancement", "name": "enhancement", "color": "1d76db", "default": true, "description": ""}, {"id": 96590028, "node_id": "MDU6TGFiZWw5NjU5MDAyOA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-02T18:59:44Z", "updated_at": "2020-05-08T21:21:16Z", "closed_at": "2020-05-08T21:21:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Background\r\nThere is a `ContainsOnly` validator which can be thought of as the iterable version of the `OneOf` validator. I propose the addition of a `ContainsNoneOf` sibling (or some other succinct name) which would be the iterable version of the `NoneOf` validator.\r\n\r\nI see the `ContainsOnly` as the whitelist side of the coin, and a `ContainsNoneOf` as the blacklist side of the coin.\r\n\r\n### User Story\r\nAs a developer I have a simple schema for a user complaint, which validates what kind of letters they can have in their reason:\r\n```\r\nclass Complaint(Schema):\r\n    ALLOWED = string.ascii_letters + string.digits\r\n    reason = fields.Str(validate=validate.ContainsOnly(ALLOWED))\r\n```\r\nUsers keep asking for more characters the be allowed so I continue to update my whitelist of characters.\r\n```\r\nclass Complaint(Schema):\r\n    ALLOWED = string.ascii_letters + string.digits + \"!?\u00a3@\"\r\n    reason = fields.Str(validate=validate.ContainsOnly(ALLOWED))\r\n```\r\n\r\nWe keep getting asked to update the allowed characters so I decide to implement a blacklist instead of a whitelist. I would like to be able to do something like:\r\n```\r\nclass Complaint(Schema):\r\n    NOT_ALLOWED = \"><$;\"\r\n    reason = fields.Str(validate=validate.ContainsNoneOf(NOT_ALLOWED))\r\n```\r\n### Implementation\r\nThe idea would be to support not just string, but all iterables similarly to `ContainsOnly`. For example, I should be able to declare:\r\n```\r\nclass Sentence(Schema):\r\n    words = fields.List(fields.Str(), validate=validate.ContainsNoneOf([\"baloney\"]))\r\n```\r\n\r\nI've already implemented this in my project following the `OneOf` -> `ContainsOnly` style, so would be happy to contribute the work for this. Mostly trying to gauge for interest or feedback as to why it might be a bad idea before starting a PR.\r\n\r\nThanks,\r\nRonan", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1526", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1526/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1526/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1526/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1526", "id": 572548353, "node_id": "MDU6SXNzdWU1NzI1NDgzNTM=", "number": 1526, "title": "2.10.2 -> 2.10.3 breaks certain number fields ", "user": {"login": "epicfaace", "id": 1689183, "node_id": "MDQ6VXNlcjE2ODkxODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1689183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epicfaace", "html_url": "https://github.com/epicfaace", "followers_url": "https://api.github.com/users/epicfaace/followers", "following_url": "https://api.github.com/users/epicfaace/following{/other_user}", "gists_url": "https://api.github.com/users/epicfaace/gists{/gist_id}", "starred_url": "https://api.github.com/users/epicfaace/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epicfaace/subscriptions", "organizations_url": "https://api.github.com/users/epicfaace/orgs", "repos_url": "https://api.github.com/users/epicfaace/repos", "events_url": "https://api.github.com/users/epicfaace/events{/privacy}", "received_events_url": "https://api.github.com/users/epicfaace/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-28T06:27:49Z", "updated_at": "2020-07-27T14:37:26Z", "closed_at": "2020-07-27T14:37:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "There appears to be a breaking change from version 2.10.2 to 2.10.3 (d81cab413e231ec40123020f110a8c0af22163ed, which was supposed to fix #538).\r\n\r\nWe have a field, `id = fields.Integer(as_string=True, dump_only=True)`. However, this field appears to be omitted upon serialization after upgrading from 2.10.2 to 2.10.3. I'm not exactly sure why the above change caused this, but reverting that particular change fixed the issue for us (our codebase's complete fix is available at https://github.com/codalab/codalab-worksheets/pull/2042).\r\n\r\nDo you have any idea why the above commit might have caused this breaking change in behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1522", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1522/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1522/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1522/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1522", "id": 570954535, "node_id": "MDU6SXNzdWU1NzA5NTQ1MzU=", "number": 1522, "title": "Incorrect Email Validation", "user": {"login": "nbanmp", "id": 10455480, "node_id": "MDQ6VXNlcjEwNDU1NDgw", "avatar_url": "https://avatars0.githubusercontent.com/u/10455480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbanmp", "html_url": "https://github.com/nbanmp", "followers_url": "https://api.github.com/users/nbanmp/followers", "following_url": "https://api.github.com/users/nbanmp/following{/other_user}", "gists_url": "https://api.github.com/users/nbanmp/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbanmp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbanmp/subscriptions", "organizations_url": "https://api.github.com/users/nbanmp/orgs", "repos_url": "https://api.github.com/users/nbanmp/repos", "events_url": "https://api.github.com/users/nbanmp/events{/privacy}", "received_events_url": "https://api.github.com/users/nbanmp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183466, "node_id": "MDU6TGFiZWw2NTE4MzQ2Ng==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/bug", "name": "bug", "color": "b60205", "default": true, "description": ""}, {"id": 96590028, "node_id": "MDU6TGFiZWw5NjU5MDAyOA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}, {"id": 96590020, "node_id": "MDU6TGFiZWw5NjU5MDAyMA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-26T00:27:08Z", "updated_at": "2020-03-05T13:06:33Z", "closed_at": "2020-03-05T13:06:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/marshmallow-code/marshmallow/blob/fbe22eb47db5df64b2c4133f9a5cb6c6920e8dd2/src/marshmallow/validate.py#L136-L151\r\n\r\nThe email validation regex will match `email@domain.com\\n`, `email\\n@domain.com`, and `email\\n@domain.com\\n`.\r\n\r\nThe issue is that `$` is used to match until the end of a string. Instead, `\\Z` should be used. - https://stackoverflow.com/a/48730645\r\n\r\nIt is possible that other validators might suffer from the same bug, so it would be good if other regexes were also checked.\r\n\r\nIt is unclear, but this may lead to a security vulnerability in some projects that use marshmallow (depending on how the validator is used), so a quick fix here might be helpful. In my quick look around I didn't notice anything critical, however, so I figured it would be fine to open this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1520", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1520/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1520/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1520/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1520", "id": 567913663, "node_id": "MDU6SXNzdWU1Njc5MTM2NjM=", "number": 1520, "title": "post_load: no attribute data", "user": {"login": "ssimontacchi", "id": 29785389, "node_id": "MDQ6VXNlcjI5Nzg1Mzg5", "avatar_url": "https://avatars2.githubusercontent.com/u/29785389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssimontacchi", "html_url": "https://github.com/ssimontacchi", "followers_url": "https://api.github.com/users/ssimontacchi/followers", "following_url": "https://api.github.com/users/ssimontacchi/following{/other_user}", "gists_url": "https://api.github.com/users/ssimontacchi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssimontacchi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssimontacchi/subscriptions", "organizations_url": "https://api.github.com/users/ssimontacchi/orgs", "repos_url": "https://api.github.com/users/ssimontacchi/repos", "events_url": "https://api.github.com/users/ssimontacchi/events{/privacy}", "received_events_url": "https://api.github.com/users/ssimontacchi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-19T23:16:00Z", "updated_at": "2020-02-20T06:59:05Z", "closed_at": "2020-02-20T06:59:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "From [the docs][1] under 'Deserializing to Objects':\r\n\r\n```\r\nfrom marshmallow import Schema, fields, post_load\r\n\r\n\r\nclass UserSchema(Schema):\r\n    name = fields.Str()\r\n    email = fields.Email()\r\n    created_at = fields.DateTime()\r\n\r\n    @post_load\r\n    def make_user(self, data, **kwargs):\r\n        return User(**data)\r\n\r\n```\r\nBut I when I run this code, I get: \r\n`AttributeError: 'User' object has no attribute 'data'`\r\n\r\nWhat am I missing?\r\n\r\n  [1]: https://marshmallow.readthedocs.io/en/stable/quickstart.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1516", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1516/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1516/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1516/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1516", "id": 566514128, "node_id": "MDU6SXNzdWU1NjY1MTQxMjg=", "number": 1516, "title": "Fix simple typo: declard -> declared", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-17T20:58:34Z", "updated_at": "2020-02-18T07:51:46Z", "closed_at": "2020-02-18T07:51:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in src/marshmallow/schema.py.\nShould read `declared` rather than `declard`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1514", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1514/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1514/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1514/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1514", "id": 566007747, "node_id": "MDU6SXNzdWU1NjYwMDc3NDc=", "number": 1514, "title": "No matching distribution found for marshmallow==3.4.0", "user": {"login": "gusingh-r7", "id": 54996581, "node_id": "MDQ6VXNlcjU0OTk2NTgx", "avatar_url": "https://avatars2.githubusercontent.com/u/54996581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gusingh-r7", "html_url": "https://github.com/gusingh-r7", "followers_url": "https://api.github.com/users/gusingh-r7/followers", "following_url": "https://api.github.com/users/gusingh-r7/following{/other_user}", "gists_url": "https://api.github.com/users/gusingh-r7/gists{/gist_id}", "starred_url": "https://api.github.com/users/gusingh-r7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gusingh-r7/subscriptions", "organizations_url": "https://api.github.com/users/gusingh-r7/orgs", "repos_url": "https://api.github.com/users/gusingh-r7/repos", "events_url": "https://api.github.com/users/gusingh-r7/events{/privacy}", "received_events_url": "https://api.github.com/users/gusingh-r7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-17T01:22:31Z", "updated_at": "2020-02-19T11:18:20Z", "closed_at": "2020-02-19T11:18:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please refer TravisCI error below and suggest what could be the issue here?. I was able to build my application locally with `marshmallow==3.4.0`\r\n```\r\nCollecting marshmallow==3.4.0 (from [secure]==3.4.0)\r\n  Could not find a version that satisfies the requirement marshmallow==3.4.0 (from [secure]==3.4.0) (from versions: 0.1.0, 0.2.0, 0.2.1, 0.3.0, 0.3.1, 0.4.0, 0.4.1, 0.5.0, 0.5.1, 0.5.2, 0.5.3, 0.5.4, 0.5.5, 0.6.0, 0.7.0, 1.0.0a0, 1.0.0, 1.0.1, 1.1.0, 1.2.0, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 2.0.0a1, 2.0.0b1, 2.0.0b2, 2.0.0b3, 2.0.0b4, 2.0.0b5, 2.0.0rc1, 2.0.0rc2, 2.0.0, 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.2.0, 2.2.1, 2.3.0, 2.4.0, 2.4.1, 2.4.2, 2.5.0, 2.6.0, 2.6.1, 2.7.0, 2.7.1, 2.7.2, 2.7.3, 2.8.0, 2.9.0, 2.9.1, 2.10.0, 2.10.1, 2.10.2, 2.10.3, 2.10.4, 2.10.5, 2.11.0, 2.11.1, 2.12.0, 2.12.1, 2.12.2, 2.13.0, 2.13.1, 2.13.2, 2.13.3, 2.13.4, 2.13.5, 2.13.6, 2.14.0, 2.15.0, 2.15.1, 2.15.2, 2.15.3, 2.15.4, 2.15.5, 2.15.6, 2.16.0, 2.16.1, 2.16.2, 2.16.3, 2.17.0, 2.18.0, 2.18.1, 2.19.0, 2.19.1, 2.19.2, 2.19.3, 2.19.4, 2.19.5, 2.20.0, 2.20.1, 2.20.2, 2.20.3, 2.20.4, 2.20.5, 3.0.0a1, 3.0.0b1, 3.0.0b2, 3.0.0b3, 3.0.0b4, 3.0.0b5, 3.0.0b6, 3.0.0b7, 3.0.0b8, 3.0.0b9, 3.0.0b10, 3.0.0b11, 3.0.0b12, 3.0.0b13, 3.0.0b14, 3.0.0b15, 3.0.0b16, 3.0.0b17, 3.0.0b18, 3.0.0b19, 3.0.0b20, 3.0.0rc1, 3.0.0rc2, 3.0.0rc3, 3.0.0rc4, 3.0.0rc5)\r\nNo matching distribution found for marshmallow==3.4.0 (from [secure]==3.4.0)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1513", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1513/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1513/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1513/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1513", "id": 565223614, "node_id": "MDU6SXNzdWU1NjUyMjM2MTQ=", "number": 1513, "title": "Is This An Acceptable Way to Pass Arguments to post_dump?", "user": {"login": "Anti-Distinctlyminty", "id": 1378483, "node_id": "MDQ6VXNlcjEzNzg0ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1378483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Anti-Distinctlyminty", "html_url": "https://github.com/Anti-Distinctlyminty", "followers_url": "https://api.github.com/users/Anti-Distinctlyminty/followers", "following_url": "https://api.github.com/users/Anti-Distinctlyminty/following{/other_user}", "gists_url": "https://api.github.com/users/Anti-Distinctlyminty/gists{/gist_id}", "starred_url": "https://api.github.com/users/Anti-Distinctlyminty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Anti-Distinctlyminty/subscriptions", "organizations_url": "https://api.github.com/users/Anti-Distinctlyminty/orgs", "repos_url": "https://api.github.com/users/Anti-Distinctlyminty/repos", "events_url": "https://api.github.com/users/Anti-Distinctlyminty/events{/privacy}", "received_events_url": "https://api.github.com/users/Anti-Distinctlyminty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-14T10:03:10Z", "updated_at": "2020-02-17T15:25:34Z", "closed_at": "2020-02-17T09:34:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to be able to treat my marshmallow post_dump differently based on the wishes of the user, but there seems to be no way to pass arguments to the a post_dump decorated method. i.e. I'm trying to avoid something like this \r\n```python\r\nquery = db.sessions.query(MyModel)\r\n\r\nif group_output:\r\n    outputSchema = GroupedOutputSchema(many=True)\r\nelse:\r\n    outputSchema = OutputSchema(many=True)\r\n\r\nallOutput = outputSchema.dump(query.all())\r\n```\r\nIn favour of something like this\r\n```python\r\nquery = db.sessions.query(MyModel)\r\n\r\noutputSchema = FlexibleOutputSchema(many=True, group_output=group_output)\r\nallOutput = outputSchema.dump(query.all())\r\n```\r\nAs the latter allows me to avoid having to write one output schema for every type of post processing I available.\r\n\r\nMy current 'solution' is to pass my own keyword arguments to the constructor of the ModelSchema\r\n```python\r\nclass FlexibleOutputSchema(ModelSchema):\r\n    def __init__(self, *args, **kwargs):\r\n        self._group_output = kwargs.pop('group_output')\r\n        super().__init__(*args, **kwargs)\r\n\r\n    @post_dump(pass_many=True)\r\n    def postProcess(self, data, many):\r\n        if self._group_output:\r\n           # Do grouping\r\n        else:\r\n           # Do other stuff\r\n```\r\nSo, my question is: Is there anything wrong with this approach? It feels quite hacky to me and that's usually a path that leads to bad times.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1511", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1511/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1511/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1511/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1511", "id": 562703835, "node_id": "MDU6SXNzdWU1NjI3MDM4MzU=", "number": 1511, "title": "TypeError thrown for empty dict on non-required field", "user": {"login": "gothill", "id": 52655395, "node_id": "MDQ6VXNlcjUyNjU1Mzk1", "avatar_url": "https://avatars0.githubusercontent.com/u/52655395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gothill", "html_url": "https://github.com/gothill", "followers_url": "https://api.github.com/users/gothill/followers", "following_url": "https://api.github.com/users/gothill/following{/other_user}", "gists_url": "https://api.github.com/users/gothill/gists{/gist_id}", "starred_url": "https://api.github.com/users/gothill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gothill/subscriptions", "organizations_url": "https://api.github.com/users/gothill/orgs", "repos_url": "https://api.github.com/users/gothill/repos", "events_url": "https://api.github.com/users/gothill/events{/privacy}", "received_events_url": "https://api.github.com/users/gothill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-10T17:11:12Z", "updated_at": "2020-02-10T17:51:49Z", "closed_at": "2020-02-10T17:51:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1509", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1509/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1509/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1509/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1509", "id": 561724813, "node_id": "MDU6SXNzdWU1NjE3MjQ4MTM=", "number": 1509, "title": "validate.Equal() is not working", "user": {"login": "FCNealVillangca", "id": 53071059, "node_id": "MDQ6VXNlcjUzMDcxMDU5", "avatar_url": "https://avatars0.githubusercontent.com/u/53071059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FCNealVillangca", "html_url": "https://github.com/FCNealVillangca", "followers_url": "https://api.github.com/users/FCNealVillangca/followers", "following_url": "https://api.github.com/users/FCNealVillangca/following{/other_user}", "gists_url": "https://api.github.com/users/FCNealVillangca/gists{/gist_id}", "starred_url": "https://api.github.com/users/FCNealVillangca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FCNealVillangca/subscriptions", "organizations_url": "https://api.github.com/users/FCNealVillangca/orgs", "repos_url": "https://api.github.com/users/FCNealVillangca/repos", "events_url": "https://api.github.com/users/FCNealVillangca/events{/privacy}", "received_events_url": "https://api.github.com/users/FCNealVillangca/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-07T15:57:54Z", "updated_at": "2020-02-10T00:18:48Z", "closed_at": "2020-02-10T00:18:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "confirm_password = fields.String(validate=validate.Equal(comparable=password))\r\n\r\nthe validation is not disappearing even if the password and confirm password is the same", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1508", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1508/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1508/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1508/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1508", "id": 561290224, "node_id": "MDU6SXNzdWU1NjEyOTAyMjQ=", "number": 1508, "title": "fields.String and unicode literals", "user": {"login": "airstandley", "id": 17914999, "node_id": "MDQ6VXNlcjE3OTE0OTk5", "avatar_url": "https://avatars1.githubusercontent.com/u/17914999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airstandley", "html_url": "https://github.com/airstandley", "followers_url": "https://api.github.com/users/airstandley/followers", "following_url": "https://api.github.com/users/airstandley/following{/other_user}", "gists_url": "https://api.github.com/users/airstandley/gists{/gist_id}", "starred_url": "https://api.github.com/users/airstandley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airstandley/subscriptions", "organizations_url": "https://api.github.com/users/airstandley/orgs", "repos_url": "https://api.github.com/users/airstandley/repos", "events_url": "https://api.github.com/users/airstandley/events{/privacy}", "received_events_url": "https://api.github.com/users/airstandley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-06T21:49:21Z", "updated_at": "2020-02-06T21:53:51Z", "closed_at": "2020-02-06T21:53:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey! There is not necessarily a bug here, but this behaviour caused some issues when converting an old library from Python 2.7 to Python3. I wanted to raise the behaviour as I certainly found it a bit odd. Sorry for the bother if this is expected behaviour.\r\n\r\n\r\nIf given bytes with invalid unicode sequences field.String raises 'Not a valid utf-8 string.', but if given a unicode literal with invalid unicode sequences it happily validates the string.\r\n\r\nExample:\r\n```\r\nclass TestSchema(Schema):\r\n    value = fields.String()\r\nschema = TestSchema()\r\n\r\nunicode_literal = {\"value\": \"test_\\ud8e8_breaks\"}\r\nbinary_literal = {\"value\": b'test_\\xd8e8_breaks'}\r\n\r\nschema.load(unicode_literal)  # {'file_name': 'test_\\ud8e8_breaks'}\r\nschema.load(binary_literal) # marshmallow.exceptions.ValidationError: {'value': ['Not a valid utf-8 string.']}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1507", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1507/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1507/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1507/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1507", "id": 560403033, "node_id": "MDU6SXNzdWU1NjA0MDMwMzM=", "number": 1507, "title": "Confused by fields.Function(serialize=f) behavior", "user": {"login": "Quidge", "id": 6530629, "node_id": "MDQ6VXNlcjY1MzA2Mjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6530629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Quidge", "html_url": "https://github.com/Quidge", "followers_url": "https://api.github.com/users/Quidge/followers", "following_url": "https://api.github.com/users/Quidge/following{/other_user}", "gists_url": "https://api.github.com/users/Quidge/gists{/gist_id}", "starred_url": "https://api.github.com/users/Quidge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Quidge/subscriptions", "organizations_url": "https://api.github.com/users/Quidge/orgs", "repos_url": "https://api.github.com/users/Quidge/repos", "events_url": "https://api.github.com/users/Quidge/events{/privacy}", "received_events_url": "https://api.github.com/users/Quidge/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-05T14:20:22Z", "updated_at": "2020-02-06T19:30:43Z", "closed_at": "2020-02-06T19:30:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "(marshmallow 2.xx) (Yes, I do recognize that `fields.DateTime` is built for my example case. My questions below still holds though.)\r\n\r\nI don't follow how the `serialize=function` kwarg is supposed to work for `fields.Function`. Digging around the code for `_serialize`, I found this comment which leads me to believe I don't understand the how this is supposed to be used:\r\n\r\n```python\r\n    def _serialize(self, value, attr, obj):\r\n        try:\r\n            return self._call_or_raise(self.serialize_func, obj, attr)\r\n        except AttributeError:  # the object is not expected to have the attribute\r\n            pass\r\n        return missing_\r\n```\r\n\r\n`# the object is not expected to have the attribute` really? Then what should I do if I want to have a serialized version of an attribute?\r\n\r\nSay I have this schema:\r\n\r\n```python\r\nclass SomeSchema(Schema):\r\n    created_at = fields.Function(\r\n        serialize=lambda value: value['created_at'].toisoformat(),\r\n        deserialize=lambda value: datetime.fromisoformat(value)\r\n    )\r\n```\r\n\r\nWhat can should the `serialize` function be passed if it isn't expected to be passed an object with the attribute? The following result from a `load` + `dump` is baffling to me:\r\n\r\n```python\r\nIn [2]: from datetime import datetime, timezone\r\n\r\nIn [3]: from upstreamapi.activities import SomeSchema\r\n\r\nIn [4]: d = SomeSchema().load({'created_at': datetime.now().isoformat()}).data\r\n\r\nIn [5]: d\r\nOut[5]: {'created_at': datetime.datetime(2020, 2, 5, 9, 9, 50, 847165)}\r\n\r\nIn [6]: SomeSchema().dump(d)\r\nOut[6]: MarshalResult(data={}, errors={})\r\n```\r\n\r\nThe key point being that the `data` is missing a `created_at` field, even though it was present in the input to `dump`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1505", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1505/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1505/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1505/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1505", "id": 559656541, "node_id": "MDU6SXNzdWU1NTk2NTY1NDE=", "number": 1505, "title": "Add remove_hook to undo the effect of set_hook", "user": {"login": "kitchoi", "id": 3673984, "node_id": "MDQ6VXNlcjM2NzM5ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitchoi", "html_url": "https://github.com/kitchoi", "followers_url": "https://api.github.com/users/kitchoi/followers", "following_url": "https://api.github.com/users/kitchoi/following{/other_user}", "gists_url": "https://api.github.com/users/kitchoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitchoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitchoi/subscriptions", "organizations_url": "https://api.github.com/users/kitchoi/orgs", "repos_url": "https://api.github.com/users/kitchoi/repos", "events_url": "https://api.github.com/users/kitchoi/events{/privacy}", "received_events_url": "https://api.github.com/users/kitchoi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-04T11:26:52Z", "updated_at": "2020-02-07T09:39:55Z", "closed_at": "2020-02-07T09:39:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Despite the documentation says that we should not need to call `set_hook` directly, I do have a use case where using `set_hook` would result in a nicer design. If there is a way to put up something (`set_hook`), there should also be a way to put it down (the proposed `remove_hook` here).\r\n\r\nStory:\r\nI have an Adapter design pattern where marshmallow schemas are used. We may have one adapter that does one thing, another adapter does something different, but both want to use the same schema. One adapter can use `set_hook` to add hooks without affecting another adapter.\r\nSomething like this:\r\n```\r\nclass MyAdapter:\r\n    def load(self, schema):\r\n        schema.set_hook(my_post_load_function, (POST_LOAD, pass_many))\r\n        try:\r\n                return schema.load(...)\r\n        finally:\r\n            # remove_hook is proposed here\r\n            schema.remove_hook(my_post_load_function, (POST_LOAD, pass_many))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1504", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1504/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1504/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1504/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1504", "id": 559553036, "node_id": "MDU6SXNzdWU1NTk1NTMwMzY=", "number": 1504, "title": "[Question] Is it possible to override a load_only=True field for a one off?", "user": {"login": "symonk", "id": 17887843, "node_id": "MDQ6VXNlcjE3ODg3ODQz", "avatar_url": "https://avatars0.githubusercontent.com/u/17887843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/symonk", "html_url": "https://github.com/symonk", "followers_url": "https://api.github.com/users/symonk/followers", "following_url": "https://api.github.com/users/symonk/following{/other_user}", "gists_url": "https://api.github.com/users/symonk/gists{/gist_id}", "starred_url": "https://api.github.com/users/symonk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/symonk/subscriptions", "organizations_url": "https://api.github.com/users/symonk/orgs", "repos_url": "https://api.github.com/users/symonk/repos", "events_url": "https://api.github.com/users/symonk/events{/privacy}", "received_events_url": "https://api.github.com/users/symonk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-04T08:10:48Z", "updated_at": "2020-02-10T00:24:46Z", "closed_at": "2020-02-10T00:24:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "lets say we have:\r\n\r\n```\r\n identity_number = fields.Integer(load_only=True)\r\n```\r\n\r\nThis is great, the server never accepts one in the payload; however theres a bug and we want to write a simple test that actually includes the identity_number value in the json payload; this is a minority case, how can we dump through the schema and have it include this field as if it is not load_only=True? for a one off use case", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1497", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1497/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1497/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1497/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1497", "id": 557666396, "node_id": "MDU6SXNzdWU1NTc2NjYzOTY=", "number": 1497, "title": "Regression on list of nullable nested fields", "user": {"login": "Meallia", "id": 7398724, "node_id": "MDQ6VXNlcjczOTg3MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7398724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Meallia", "html_url": "https://github.com/Meallia", "followers_url": "https://api.github.com/users/Meallia/followers", "following_url": "https://api.github.com/users/Meallia/following{/other_user}", "gists_url": "https://api.github.com/users/Meallia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Meallia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Meallia/subscriptions", "organizations_url": "https://api.github.com/users/Meallia/orgs", "repos_url": "https://api.github.com/users/Meallia/repos", "events_url": "https://api.github.com/users/Meallia/events{/privacy}", "received_events_url": "https://api.github.com/users/Meallia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-30T18:15:22Z", "updated_at": "2020-02-19T10:31:04Z", "closed_at": "2020-02-19T10:31:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWhile porting some code from 2.20 to 3.3, I stumbled upon this change in behavior regarding list of nullable fields.\r\n\r\nin 2.20 the following code works:\r\n```python\r\nfrom marshmallow import fields, Schema\r\n\r\nclass S(Schema):\r\n    f = fields.List(fields.Nested(Schema, allow_none=True))\r\n\r\nassert S().dump(dict(f=[None])).data == dict(f=[None])\r\n```\r\nwhereas the same code in 3.3 fails with\r\n`AssertionError: assert {'f': [{}]} == {'f': [None]}`\r\n```python\r\nfrom marshmallow import fields, Schema\r\n\r\nclass S(Schema):\r\n    f = fields.List(fields.Nested(Schema, allow_none=True))\r\n\r\nassert S().dump(dict(f=[None])) == dict(f=[None])\r\n```\r\n\r\nI could not find anything related to this in the upgrade instructions or the documentation.\r\nI'm fully aware that this is an edge case and I don't mind looking into it if it's actually considered as a bug.\r\n\r\nhere are two unit tests that can be used to reproduce this issue:\r\n```python\r\ndef test_list_of_nested_nullable_serialize_none_to_none(self):\r\n    res = fields.List(fields.Nested(Schema, allow_none=True)).serialize(\"foo\", {\"foo\": [None]})\r\n    assert res == [None]\r\n\r\ndef test_nested_multiple_nullable_serialize_none_to_none(self):\r\n    res = fields.Nested(Schema, allow_none=True, many=True).serialize(\"foo\", {\"foo\": [None]})\r\n    assert res == [None]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1496", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1496/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1496/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1496/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1496", "id": 556887113, "node_id": "MDU6SXNzdWU1NTY4ODcxMTM=", "number": 1496, "title": "Validate JSON", "user": {"login": "GabrielFiel", "id": 12551784, "node_id": "MDQ6VXNlcjEyNTUxNzg0", "avatar_url": "https://avatars0.githubusercontent.com/u/12551784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GabrielFiel", "html_url": "https://github.com/GabrielFiel", "followers_url": "https://api.github.com/users/GabrielFiel/followers", "following_url": "https://api.github.com/users/GabrielFiel/following{/other_user}", "gists_url": "https://api.github.com/users/GabrielFiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/GabrielFiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GabrielFiel/subscriptions", "organizations_url": "https://api.github.com/users/GabrielFiel/orgs", "repos_url": "https://api.github.com/users/GabrielFiel/repos", "events_url": "https://api.github.com/users/GabrielFiel/events{/privacy}", "received_events_url": "https://api.github.com/users/GabrielFiel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1333390435, "node_id": "MDU6TGFiZWwxMzMzMzkwNDM1", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/polymorphism", "name": "polymorphism", "color": "4a79b2", "default": false, "description": ""}, {"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-29T14:10:36Z", "updated_at": "2020-01-29T19:54:10Z", "closed_at": "2020-01-29T19:54:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI have this json:\r\n\r\n```\r\ndata = {\r\n    \"company\": \"Google\",\r\n    \"members\": [\r\n        {\r\n            \"type\": 2,\r\n            \"name\": \"James\",\r\n            \"age\": 25\r\n        },\r\n        {\r\n            \"type\": 1,\r\n            \"name\": \"Maria\",\r\n            \"age\": 22\r\n        },\r\n        {\r\n            \"type\": 2,\r\n            \"name\": \"George\",\r\n            \"age\": 44\r\n        }\r\n    ]\r\n}\r\n```\r\nI just don't know how to validate the members **age**, because the number of members is not fixed, it could be 1, 2 or more and it needs to be validated by the **type** field.\r\n\r\nFor example:\r\nGeorge's age must return an error because his type (2) needs to be between 18 and 30", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1492", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1492/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1492/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1492/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1492", "id": 550700396, "node_id": "MDU6SXNzdWU1NTA3MDAzOTY=", "number": 1492, "title": "Typing issue in `Schema.load`", "user": {"login": "mehdigmira", "id": 13655536, "node_id": "MDQ6VXNlcjEzNjU1NTM2", "avatar_url": "https://avatars3.githubusercontent.com/u/13655536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehdigmira", "html_url": "https://github.com/mehdigmira", "followers_url": "https://api.github.com/users/mehdigmira/followers", "following_url": "https://api.github.com/users/mehdigmira/following{/other_user}", "gists_url": "https://api.github.com/users/mehdigmira/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehdigmira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehdigmira/subscriptions", "organizations_url": "https://api.github.com/users/mehdigmira/orgs", "repos_url": "https://api.github.com/users/mehdigmira/repos", "events_url": "https://api.github.com/users/mehdigmira/events{/privacy}", "received_events_url": "https://api.github.com/users/mehdigmira/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-16T10:03:49Z", "updated_at": "2020-02-02T19:55:11Z", "closed_at": "2020-02-02T19:55:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThe signature of `Schema.load()` is the following:\r\n``` \r\n    def load(\r\n        self,\r\n        data: typing.Mapping,\r\n        *,\r\n        many: bool = None,\r\n        partial: typing.Union[bool, types.StrSequenceOrSet] = None,\r\n        unknown: str = None\r\n    ):\r\n```\r\n\r\nwhile `data` can be of type `List`, if many=True is used. Is this intentional or is it a bug ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1491", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1491/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1491/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1491/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1491", "id": 550062743, "node_id": "MDU6SXNzdWU1NTAwNjI3NDM=", "number": 1491, "title": "The changes made on 'only' property doesn't take effect after initializing the serializer", "user": {"login": "mohannad-musleh", "id": 7196034, "node_id": "MDQ6VXNlcjcxOTYwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7196034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mohannad-musleh", "html_url": "https://github.com/mohannad-musleh", "followers_url": "https://api.github.com/users/mohannad-musleh/followers", "following_url": "https://api.github.com/users/mohannad-musleh/following{/other_user}", "gists_url": "https://api.github.com/users/mohannad-musleh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mohannad-musleh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mohannad-musleh/subscriptions", "organizations_url": "https://api.github.com/users/mohannad-musleh/orgs", "repos_url": "https://api.github.com/users/mohannad-musleh/repos", "events_url": "https://api.github.com/users/mohannad-musleh/events{/privacy}", "received_events_url": "https://api.github.com/users/mohannad-musleh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-15T09:22:44Z", "updated_at": "2020-01-16T04:17:12Z", "closed_at": "2020-01-16T04:17:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm upgrading from version 2.20.5 to version 3.3.0.\r\n\r\nI set the 'only' property after the serializer is initialized, but the serializer ignore the new value and will include all properties, any idea ??\r\n\r\nExample code:\r\n```\r\nfrom marshmallow import Schema, fields\r\nclass TestSchema(Schema):\r\n    field_1 = fields.String()\r\n    field_2 = fields.String()\r\n    field_3 = fields.Dict()\r\n\r\n_serializer = TestSchema()\r\n_serializer.only = (\"field_1\", \"field_2\") # this will be ignored\r\n    \r\nserialized_data = _serializer.dump({\"field_1\": None, \"field_2\": \"TRUST_ID_FULL\", \"field_3\": {\"first_name\": \"test\", \"last_name\": \"test\", \"is_active\": True}})\r\n    \r\nprint(serialized_data)\r\n# Actual result: {'field_1': None, 'field_2': 'example_value', 'field_3': {'first_name': 'test', 'last_name': 'test', 'is_active': True}}\r\n# expected result: {'field_1': None, 'field_2': 'example_value'}\r\n```\r\n\r\nEnvironment Details:\r\n- Marshmallow version: 3.3.0\r\n- Python version: 3.7.5", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1487", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1487/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1487/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1487/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1487", "id": 547846751, "node_id": "MDU6SXNzdWU1NDc4NDY3NTE=", "number": 1487, "title": "Recommended way to set specific field on a Schema instance", "user": {"login": "vzts", "id": 27868171, "node_id": "MDQ6VXNlcjI3ODY4MTcx", "avatar_url": "https://avatars3.githubusercontent.com/u/27868171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vzts", "html_url": "https://github.com/vzts", "followers_url": "https://api.github.com/users/vzts/followers", "following_url": "https://api.github.com/users/vzts/following{/other_user}", "gists_url": "https://api.github.com/users/vzts/gists{/gist_id}", "starred_url": "https://api.github.com/users/vzts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vzts/subscriptions", "organizations_url": "https://api.github.com/users/vzts/orgs", "repos_url": "https://api.github.com/users/vzts/repos", "events_url": "https://api.github.com/users/vzts/events{/privacy}", "received_events_url": "https://api.github.com/users/vzts/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-10T03:39:51Z", "updated_at": "2020-01-14T05:14:19Z", "closed_at": "2020-01-14T05:13:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I have a question. Given that I have below schema,\r\n```\r\nclass UserSchema(Schema):\r\n    email = fields.Str()\r\n    role = fields.Str()\r\n```\r\nand simple model\r\n```\r\n@dataclass\r\nclass UserModel:\r\n    email: str\r\n```\r\nand I want to add a role to the initialized schema later.\r\nWhat is the official way to do it? I've looked over the doc and code, and I couldn't find an answer.\r\n```\r\nuser = UserModel('some@email.com')\r\nschema = UserSchema(user)\r\n???  # update this schema to have role field set?\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1483", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1483/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1483/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1483/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1483", "id": 542341563, "node_id": "MDU6SXNzdWU1NDIzNDE1NjM=", "number": 1483, "title": "TypeError: validate_additionally() got an unexpected keyword argument 'many'", "user": {"login": "ra-coder", "id": 47606823, "node_id": "MDQ6VXNlcjQ3NjA2ODIz", "avatar_url": "https://avatars0.githubusercontent.com/u/47606823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ra-coder", "html_url": "https://github.com/ra-coder", "followers_url": "https://api.github.com/users/ra-coder/followers", "following_url": "https://api.github.com/users/ra-coder/following{/other_user}", "gists_url": "https://api.github.com/users/ra-coder/gists{/gist_id}", "starred_url": "https://api.github.com/users/ra-coder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ra-coder/subscriptions", "organizations_url": "https://api.github.com/users/ra-coder/orgs", "repos_url": "https://api.github.com/users/ra-coder/repos", "events_url": "https://api.github.com/users/ra-coder/events{/privacy}", "received_events_url": "https://api.github.com/users/ra-coder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-25T13:24:30Z", "updated_at": "2019-12-27T20:19:24Z", "closed_at": "2019-12-27T01:55:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have schema like \r\n\r\n```\r\nfrom marshmallow import Schema\r\n\r\nclass CallsSortingSchema(Schema):\r\n    metric = mm.Str(required=True, validate=Length(1, MAX_METRIC_NAME_LENGTH))\r\n    order = mm.Str(required=True, validate=OneOf(['asc', 'desc']))\r\n\r\n    @post_load\r\n    def validate_additionally(self, data):\r\n        if not data['metric'].startswith(CUSTOM_METRIC_PREFIX) \\\r\n                and data['metric'] not in SORTABLE_METRICS:\r\n            raise ValidationError('metric must be in SORTABLE_METRICS or starts with '\r\n                                  + CUSTOM_METRIC_PREFIX)\r\n        return data\r\n```\r\n\r\nafter upgrade from `marshmallow==3.0.0b13` to` marshmallow==3.3.0`\r\ni got\r\n\r\n```\r\nattr_name = 'validate_additionally', processor_kwargs = {'pass_original': False}\r\n\r\n    def _invoke_processors(\r\n        self,\r\n        tag: str,\r\n        *,\r\n        pass_many: bool,\r\n        data,\r\n        many: bool,\r\n        original_data=None,\r\n        **kwargs\r\n    ):\r\n        key = (tag, pass_many)\r\n        for attr_name in self._hooks[key]:\r\n            # This will be a bound method.\r\n            processor = getattr(self, attr_name)\r\n    \r\n            processor_kwargs = processor.__marshmallow_hook__[key]\r\n            pass_original = processor_kwargs.get(\"pass_original\", False)\r\n    \r\n            if many and not pass_many:\r\n                if pass_original:\r\n                    data = [\r\n                        processor(item, original, many=many, **kwargs)\r\n                        for item, original in zip(data, original_data)\r\n                    ]\r\n                else:\r\n                    data = [processor(item, many=many, **kwargs) for item in data]\r\n            else:\r\n                if pass_original:\r\n                    data = processor(data, original_data, many=many, **kwargs)\r\n                else:\r\n>                   data = processor(data, many=many, **kwargs)\r\nE                   TypeError: validate_additionally() got an unexpected keyword argument 'many'\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1479", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1479/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1479/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1479/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1479", "id": 540144104, "node_id": "MDU6SXNzdWU1NDAxNDQxMDQ=", "number": 1479, "title": "Improve fields type annotations a little bit.", "user": {"login": "Reskov", "id": 4832451, "node_id": "MDQ6VXNlcjQ4MzI0NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4832451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Reskov", "html_url": "https://github.com/Reskov", "followers_url": "https://api.github.com/users/Reskov/followers", "following_url": "https://api.github.com/users/Reskov/following{/other_user}", "gists_url": "https://api.github.com/users/Reskov/gists{/gist_id}", "starred_url": "https://api.github.com/users/Reskov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Reskov/subscriptions", "organizations_url": "https://api.github.com/users/Reskov/orgs", "repos_url": "https://api.github.com/users/Reskov/repos", "events_url": "https://api.github.com/users/Reskov/events{/privacy}", "received_events_url": "https://api.github.com/users/Reskov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-19T07:57:59Z", "updated_at": "2020-01-05T18:30:51Z", "closed_at": "2020-01-05T18:30:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using `mypy` with an option `--disallow-untyped-calls`\r\n\r\nFrom mypy docs\r\n```\r\n--disallow-untyped-calls\r\nThis flag reports an error whenever a function with type annotations calls a function defined without annotations.\r\n```\r\n\r\nRunning command\r\n```\r\nmypy --disallow-untyped-calls .\r\n```\r\non following code\r\n\r\n```python\r\nimport marshmallow as ma\r\nclass MySchema(ma.Schema):\r\n    arb = ma.fields.Float()\r\n```\r\ngives me output\r\n\r\n``` \r\nerror: Call to untyped function \"Float\" in typed context\r\n```\r\nThe same for `Pluck`, `Method`, `Constant`\r\nFor other `ma.fields` seem to be fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1478", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1478/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1478/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1478/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1478", "id": 539483210, "node_id": "MDU6SXNzdWU1Mzk0ODMyMTA=", "number": 1478, "title": "issue with marshmallow..", "user": {"login": "isaacaugustus", "id": 39795365, "node_id": "MDQ6VXNlcjM5Nzk1MzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/39795365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isaacaugustus", "html_url": "https://github.com/isaacaugustus", "followers_url": "https://api.github.com/users/isaacaugustus/followers", "following_url": "https://api.github.com/users/isaacaugustus/following{/other_user}", "gists_url": "https://api.github.com/users/isaacaugustus/gists{/gist_id}", "starred_url": "https://api.github.com/users/isaacaugustus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isaacaugustus/subscriptions", "organizations_url": "https://api.github.com/users/isaacaugustus/orgs", "repos_url": "https://api.github.com/users/isaacaugustus/repos", "events_url": "https://api.github.com/users/isaacaugustus/events{/privacy}", "received_events_url": "https://api.github.com/users/isaacaugustus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-18T06:43:23Z", "updated_at": "2019-12-18T07:08:21Z", "closed_at": "2019-12-18T07:08:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I used marshmallow fields and schemas, werkzeug filestorage data type and flask-uploads to build an image upload app.. it works perfectly in my local machine but doesnt work in production server.... I created a log to find whats wrong.. these are the trace backs `packages/marshmallow/schema.py\", line 849, in _do_load unknown=unknown, File \"/antenv3.6/lib/python3.6/site-packages/marshmallow/schema.py\", line 663, in _deserialize index=index, File \"/antenv3.6/lib/python3.6/site-packages/marshmallow/schema.py\", line 490, in _call_and_store value = getter_func(data) File \"/antenv3.6/lib/python3.6/site-packages/marshmallow/schema.py\", line 656, in val, field_name, data, **d_kwargs File \"/antenv3.6/lib/python3.6/site-packages/marshmallow/fields.py\", line 351, in deserialize output = self._deserialize(value, attr, data, **kwargs) TypeError: _deserialize() got an unexpected keyword argument 'partial' 2019-12-18 00:51:37,318 ERROR app Exception on `", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1473", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1473/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1473/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1473/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1473", "id": 537517088, "node_id": "MDU6SXNzdWU1Mzc1MTcwODg=", "number": 1473, "title": "Pass context to schema if class name provided as string", "user": {"login": "Finn10111", "id": 1082059, "node_id": "MDQ6VXNlcjEwODIwNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1082059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Finn10111", "html_url": "https://github.com/Finn10111", "followers_url": "https://api.github.com/users/Finn10111/followers", "following_url": "https://api.github.com/users/Finn10111/following{/other_user}", "gists_url": "https://api.github.com/users/Finn10111/gists{/gist_id}", "starred_url": "https://api.github.com/users/Finn10111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Finn10111/subscriptions", "organizations_url": "https://api.github.com/users/Finn10111/orgs", "repos_url": "https://api.github.com/users/Finn10111/repos", "events_url": "https://api.github.com/users/Finn10111/events{/privacy}", "received_events_url": "https://api.github.com/users/Finn10111/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-13T12:10:59Z", "updated_at": "2019-12-18T19:47:07Z", "closed_at": "2019-12-18T19:47:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the context of a schema to decide if I want to wrap the data or not. It looks something like this:\r\n```\r\n    @post_dump(pass_many=True)\r\n    def wrap_with_envelope(self, data, many, **kwargs):\r\n        if 'noenvelope' in self.context and self.context['noenvelope']:\r\n            return data\r\n        else:\r\n            key = self.opts.plural_name if many else self.opts.name\r\n            return {key: data}\r\n```\r\n\r\nWith this I have an easy way to decide if I want to have an envelope or not:\r\n```\r\norderSchema = OrderSchema()\r\norderSchema.context['noenvelope'] = True\r\norder = ma.Nested(orderSchema, exclude=('transactions',))\r\n```\r\n\r\nThis works fine but sometimes I need to reference the schema via the class name as string instead the class itself:\r\n```\r\ntransactions = ma.Nested('TransactionSchema', many=True, exlude=('orders',))\r\n```\r\n\r\nAm I missing something in the docs (https://marshmallow.readthedocs.io/en/stable/nesting.html#two-way-nesting) or is there no way to pass the context to the schema?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1471", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1471/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1471/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1471/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1471", "id": 535791104, "node_id": "MDU6SXNzdWU1MzU3OTExMDQ=", "number": 1471, "title": "Deserialization based on type field", "user": {"login": "mikeholler", "id": 1164112, "node_id": "MDQ6VXNlcjExNjQxMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1164112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeholler", "html_url": "https://github.com/mikeholler", "followers_url": "https://api.github.com/users/mikeholler/followers", "following_url": "https://api.github.com/users/mikeholler/following{/other_user}", "gists_url": "https://api.github.com/users/mikeholler/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeholler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeholler/subscriptions", "organizations_url": "https://api.github.com/users/mikeholler/orgs", "repos_url": "https://api.github.com/users/mikeholler/repos", "events_url": "https://api.github.com/users/mikeholler/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeholler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1333390435, "node_id": "MDU6TGFiZWwxMzMzMzkwNDM1", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/polymorphism", "name": "polymorphism", "color": "4a79b2", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-10T15:08:37Z", "updated_at": "2019-12-10T15:19:24Z", "closed_at": "2019-12-10T15:16:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm assessing using this library for our company's SDK and I am curious to know whether marshmallow supports deserialization based on type. I've searched the documentation and have not been able to find anything about this, but I know different tools use different terminology, so I might be missing something.\r\n\r\nI'm coming from a Java background, where we have a similar, popular deserialization tool called Jackson with a feature called Polymorphic Deserialization. [[1]] Essentially, it works like this:\r\n\r\n```kotlin\r\n@JsonTypeInfo(\r\n    use = JsonTypeInfo.Id.NAME,\r\n    include = JsonTypeInfo.As.PROPERTY,\r\n    property = \"type\",\r\n    visible = false\r\n)\r\n@JsonSubTypes(\r\n    JsonSubTypes.Type(value = Cat::class, name = \"Cat\"),\r\n    JsonSubTypes.Type(value = Dog::class, name = \"Dog\")\r\n)\r\nsealed class Pet {\r\n    abstract val name: String\r\n}\r\n\r\ndata class Dog(\r\n    override val name: String,\r\n    val isBarking: Boolean\r\n): Pet\r\n\r\ndata class Cat(\r\n    override val name: String,\r\n    val isMeowing: Boolean\r\n): Pet\r\n```\r\n\r\nThe above code will allow deserialization like so:\r\n\r\n```kotlin\r\n// Returns an instance of Dog\r\nObjectMapper.readValue<Pet>(\"\"\"\r\n    {\r\n        \"type\": \"Dog\",\r\n        \"name\": \"Fido\",\r\n        \"isBarking\": false\r\n    }\r\n\"\"\")\r\n\r\n// Returns an instance of Cat\r\nObjectMapper.readValue<Pet>(\"\"\"\r\n    {\r\n        \"type\": \"Cat\",\r\n        \"name\": \"Sparkle\",\r\n        \"isMeowing\": false\r\n    }\r\n\"\"\")\r\n\r\n// Raises an exception -- mouse is not a valid pet\r\nObjectMapper.readValue<Pet>(\"\"\"\r\n    {\r\n        \"type\": \"Mouse\",\r\n        \"name\": \"Squeak\"\r\n    }\r\n\"\"\")\r\n\r\n// Raises an exception -- dogs can't meow\r\nObjectMapper.readValue<Pet>(\"\"\"\r\n    {\r\n        \"type\": \"Dog\",\r\n        \"name\": \"Tom\",\r\n        \"isMeowing\": true\r\n    }\r\n\"\"\")\r\n```\r\n\r\nIs there a way to do something similar with Marshmallow? I'm also interested in using `marshmallow_dataclass` as well (if that helps).\r\n\r\n[1]: https://stackoverflow.com/questions/11798394/polymorphism-in-jackson-annotations-jsontypeinfo-usage", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1470", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1470/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1470/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1470/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1470", "id": 534758992, "node_id": "MDU6SXNzdWU1MzQ3NTg5OTI=", "number": 1470, "title": "How to Validate ENUM field using marshmallow ?", "user": {"login": "vvksahoo", "id": 56999733, "node_id": "MDQ6VXNlcjU2OTk5NzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/56999733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvksahoo", "html_url": "https://github.com/vvksahoo", "followers_url": "https://api.github.com/users/vvksahoo/followers", "following_url": "https://api.github.com/users/vvksahoo/following{/other_user}", "gists_url": "https://api.github.com/users/vvksahoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvksahoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvksahoo/subscriptions", "organizations_url": "https://api.github.com/users/vvksahoo/orgs", "repos_url": "https://api.github.com/users/vvksahoo/repos", "events_url": "https://api.github.com/users/vvksahoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vvksahoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-09T08:04:30Z", "updated_at": "2019-12-09T09:56:15Z", "closed_at": "2019-12-09T09:56:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been using marshmallow for API's request json validation ,Its a great Library . Now i came across a situation where i have to validate ENUM filed . I have a ENUM field called 'gender' which will expect 3 values ('Male', 'Female', 'Others'). So here how do i add this validation field to Schema. Below i have mentioned one example .\r\n\r\nfrom marshmallow import Schema, fields, validate\r\nclass UserDetails(Schema):\r\n    user_id = fields.Integer(required=True, validate=validate.Range(min=0,\r\n                                                                  error=\"user_id is invalid, it should be a positive integer.\"))\r\n   user_name = fields.String(required=True, validate=validate.Length(min=1, error=\"Field should not \r\n                                                 be empty.\"))\r\n\r\n  user_gender = ?\r\n\r\nThanks in Advanced .\r\n   \r\n \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1468", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1468/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1468/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1468/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1468", "id": 534308282, "node_id": "MDU6SXNzdWU1MzQzMDgyODI=", "number": 1468, "title": "Schema.from_dict cannot be pickled", "user": {"login": "smith-kyle", "id": 5474861, "node_id": "MDQ6VXNlcjU0NzQ4NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/5474861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smith-kyle", "html_url": "https://github.com/smith-kyle", "followers_url": "https://api.github.com/users/smith-kyle/followers", "following_url": "https://api.github.com/users/smith-kyle/following{/other_user}", "gists_url": "https://api.github.com/users/smith-kyle/gists{/gist_id}", "starred_url": "https://api.github.com/users/smith-kyle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smith-kyle/subscriptions", "organizations_url": "https://api.github.com/users/smith-kyle/orgs", "repos_url": "https://api.github.com/users/smith-kyle/repos", "events_url": "https://api.github.com/users/smith-kyle/events{/privacy}", "received_events_url": "https://api.github.com/users/smith-kyle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-06T23:34:27Z", "updated_at": "2020-01-05T18:31:58Z", "closed_at": "2020-01-05T18:31:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The schema returned from `Schema.from_dict` cannot be pickled because of the way that the schema class is created\r\n\r\nExample:\r\n```python\r\npickle.dumps(Schema.from_dict({ 'a': fields.Integer() }))\r\n_pickle.PicklingError: Can't pickle <class 'marshmallow.schema.GeneratedSchema'>: attribute lookup GeneratedSchema on marshmallow.schema failed\r\n```\r\n\r\nIs this something that should be addressed in marshmallow? If so, I'm happy to help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1465", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1465/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1465/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1465/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1465", "id": 533450238, "node_id": "MDU6SXNzdWU1MzM0NTAyMzg=", "number": 1465, "title": "Pandas-like orient parameter?", "user": {"login": "marcinliebiediew", "id": 21069150, "node_id": "MDQ6VXNlcjIxMDY5MTUw", "avatar_url": "https://avatars1.githubusercontent.com/u/21069150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcinliebiediew", "html_url": "https://github.com/marcinliebiediew", "followers_url": "https://api.github.com/users/marcinliebiediew/followers", "following_url": "https://api.github.com/users/marcinliebiediew/following{/other_user}", "gists_url": "https://api.github.com/users/marcinliebiediew/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcinliebiediew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcinliebiediew/subscriptions", "organizations_url": "https://api.github.com/users/marcinliebiediew/orgs", "repos_url": "https://api.github.com/users/marcinliebiediew/repos", "events_url": "https://api.github.com/users/marcinliebiediew/events{/privacy}", "received_events_url": "https://api.github.com/users/marcinliebiediew/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-05T16:14:17Z", "updated_at": "2020-01-16T04:17:54Z", "closed_at": "2020-01-16T04:17:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! Awesome work, thanks for putting you time into this ting, it serves me very well.\r\n\r\nI'd like to know if marshmallow can output my data in different shape (kinda like [**orient** parameter](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html) in pandas)?\r\n e.g., following code (I'm using marshmallow+flask+sqlalchemy):\r\n```python\r\ndata = SQLAModel.query.all()\r\ndata_schema = DataSchema(many=True)\r\nreturn jsonify(data_schema.dump(data))\r\n```\r\nwill output:\r\n```json\r\n[\r\n  { \r\n    \"a\" : \"asd\",\r\n    \"b\" : \"bsd\"\r\n  },\r\n  { \r\n    \"a\" : \"das\",\r\n    \"b\" : \"sdb\"\r\n  }\r\n]\r\n```\r\n\r\nwhereas I'd like to have:\r\n\r\n```json\r\n{\r\n    \"a\": [\"asd\", \"das\"],\r\n    \"b\": [\"bsd\", \"sdb\"]\r\n}\r\n```\r\n\r\nI skimmed over documentation but didn't find built-in way to do it.\r\nIs there marshmallow'ic way to do it or should I stick to manipulating python objects to produce my result?\r\n\r\n\r\n**EDIT**: [seems like skimming the docs doesnt serve me at all](https://marshmallow.readthedocs.io/en/stable/extending.html)\r\n\r\nnevertheless, I still think it's a cool idea \ud83d\ude03 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1464", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1464/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1464/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1464/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1464", "id": 531879032, "node_id": "MDU6SXNzdWU1MzE4NzkwMzI=", "number": 1464, "title": "How to validate boolean value in request json ?", "user": {"login": "vvksahoo", "id": 56999733, "node_id": "MDQ6VXNlcjU2OTk5NzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/56999733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvksahoo", "html_url": "https://github.com/vvksahoo", "followers_url": "https://api.github.com/users/vvksahoo/followers", "following_url": "https://api.github.com/users/vvksahoo/following{/other_user}", "gists_url": "https://api.github.com/users/vvksahoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvksahoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvksahoo/subscriptions", "organizations_url": "https://api.github.com/users/vvksahoo/orgs", "repos_url": "https://api.github.com/users/vvksahoo/repos", "events_url": "https://api.github.com/users/vvksahoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vvksahoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-03T10:24:49Z", "updated_at": "2019-12-03T11:05:58Z", "closed_at": "2019-12-03T11:05:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to validate request json where some fields are Boolean value . So i  am looking ,is there any validate() which will make sure Boolean fields are not empty in request json body.\r\nexample :\r\nuser_id = fields.Integer(required=True, validate=validate.Range(min=0,\r\n                                                                      error=\"user_id is invalid, it should be a positive integer.\")) \r\nAbove i am using Range to make sure that user_id should not be empty in request body for that i am sending appropriate error message also \"user_id is invalid, it should be a positive integer.\"\r\n\r\nSo i have one more filed called 'is_joined\" basically it will take a Boolean value .\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1462", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1462/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1462/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1462/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1462", "id": 530938283, "node_id": "MDU6SXNzdWU1MzA5MzgyODM=", "number": 1462, "title": "Unable to use List(Str(attribute='')) in marshmallow 3.x", "user": {"login": "AbdealiJK", "id": 2200743, "node_id": "MDQ6VXNlcjIyMDA3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2200743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AbdealiJK", "html_url": "https://github.com/AbdealiJK", "followers_url": "https://api.github.com/users/AbdealiJK/followers", "following_url": "https://api.github.com/users/AbdealiJK/following{/other_user}", "gists_url": "https://api.github.com/users/AbdealiJK/gists{/gist_id}", "starred_url": "https://api.github.com/users/AbdealiJK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AbdealiJK/subscriptions", "organizations_url": "https://api.github.com/users/AbdealiJK/orgs", "repos_url": "https://api.github.com/users/AbdealiJK/repos", "events_url": "https://api.github.com/users/AbdealiJK/events{/privacy}", "received_events_url": "https://api.github.com/users/AbdealiJK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-02T07:17:25Z", "updated_at": "2019-12-02T07:57:22Z", "closed_at": "2019-12-02T07:57:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is somewhat of a follow up from a previous issue.\r\nI have a case where I do:\r\n```python\r\nfrom marshmallow import fields, Schema\r\nclass MySchema(Schema):\r\n    f = fields.List(fields.Str(attribute='name'), attribute='all_values')\r\n\r\nprint(MySchema().dumps({'all_values': [{'name': 1}]}))\r\n\r\n```\r\n\r\nThis was working upto 3.0.0.rc5 and seems to not be giving me the same result after that.\r\n\r\nIn 3.0.0rc5: `{\"f\": [\"1\"]}` ------------- what I expected\r\nIn 3.0.0rc6: `{\"f\": [\"{'name': 1}\"]}`\r\nIn 3.0.0rc9: `{\"f\": [\"{'name': 1}\"]}`\r\n\r\n\r\nIn the release notes for 3.0.0.rc6, it says:\r\nhttps://github.com/marshmallow-code/marshmallow/blob/3.2.2/CHANGELOG.rst#300rc6-2019-05-05\r\n> Backwards-incompatible: Remove special-casing in fields.List and fields.Tuple for accessing nested attributes (:pr:`1188`). Use fields.List(fields.Pluck(...)) instead.\r\n\r\nIn the release notes for 3.0.0.rc9:\r\nhttps://github.com/marshmallow-code/marshmallow/blob/3.2.2/CHANGELOG.rst#300rc9-2019-07-31\r\nHaven't found what exactly caused the difference\r\n\r\nIn https://github.com/marshmallow-code/marshmallow/issues/1187#issuecomment-480615368 the alternative that is suggested it to use List(Pluck) like:\r\n```python\r\nfrom marshmallow import fields, Schema\r\n\r\nclass MySchema2(Schema):\r\n    name = fields.String()\r\n\r\nclass MySchema(Schema):\r\n    f = fields.List(fields.Pluck(MySchema2, 'name'), attribute='all_values')\r\n\r\nprint(MySchema().dumps({'all_values': [{'name': 1}]}))\r\n```\r\nBut when I use this, I get:\r\nIn 3.0.0rc5: `{\"f\": [\"1\"]}` ------------- what I expected\r\nIn 3.0.0rc6: `{\"f\": [\"1\"]}` ------------- what I expected\r\nIn 3.0.0rc9: `{\"f\": [\"1\"]}` ------------- what I expected\r\nIn 3.2.2: `TypeError: list indices must be integers or slices, not str`\r\n\r\nSo, it looks like the alternative that @sloria mentioned in the comment is not valid anymore. And I'm not too clear on how to solve the serialization I require above using marshmallow", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1460", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1460/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1460/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1460/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1460", "id": 526812168, "node_id": "MDU6SXNzdWU1MjY4MTIxNjg=", "number": 1460, "title": "missing parameter is not working ", "user": {"login": "sakshiaroras", "id": 54166372, "node_id": "MDQ6VXNlcjU0MTY2Mzcy", "avatar_url": "https://avatars0.githubusercontent.com/u/54166372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sakshiaroras", "html_url": "https://github.com/sakshiaroras", "followers_url": "https://api.github.com/users/sakshiaroras/followers", "following_url": "https://api.github.com/users/sakshiaroras/following{/other_user}", "gists_url": "https://api.github.com/users/sakshiaroras/gists{/gist_id}", "starred_url": "https://api.github.com/users/sakshiaroras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sakshiaroras/subscriptions", "organizations_url": "https://api.github.com/users/sakshiaroras/orgs", "repos_url": "https://api.github.com/users/sakshiaroras/repos", "events_url": "https://api.github.com/users/sakshiaroras/events{/privacy}", "received_events_url": "https://api.github.com/users/sakshiaroras/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-21T20:02:38Z", "updated_at": "2019-11-22T15:46:49Z", "closed_at": "2019-11-22T15:46:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to deserialise data with schema as :\r\n\r\n```py\r\nclass EmailSchema(Schema):\r\n    attachment_id = fields.Int(missing=0)\r\n    recipient_id = fields.Int(missing=0)\r\n    return_path_recipient_id = fields.Int(missing = 0)\r\n    reply_to_recipient_id = fields.Int(missing = 0)\r\n  ```\r\n\r\nNow when i am dumping it as \r\n\r\n```py\r\nnested_json, errors = EmailSchema().dump(pars_email)\r\n```\r\n\r\nhere pars_email is email object which contains data as {attachment_id = null, recipient_id=1,..}\r\nhere i am defining missing = 0 but still i am getting null \r\n\r\nI am using marshmallow version 2.20.7", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1459", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1459/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1459/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1459/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1459", "id": 524358640, "node_id": "MDU6SXNzdWU1MjQzNTg2NDA=", "number": 1459, "title": "How to Validate json against jsonschema? ", "user": {"login": "vvksahoo", "id": 56999733, "node_id": "MDQ6VXNlcjU2OTk5NzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/56999733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvksahoo", "html_url": "https://github.com/vvksahoo", "followers_url": "https://api.github.com/users/vvksahoo/followers", "following_url": "https://api.github.com/users/vvksahoo/following{/other_user}", "gists_url": "https://api.github.com/users/vvksahoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvksahoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvksahoo/subscriptions", "organizations_url": "https://api.github.com/users/vvksahoo/orgs", "repos_url": "https://api.github.com/users/vvksahoo/repos", "events_url": "https://api.github.com/users/vvksahoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vvksahoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-18T13:11:42Z", "updated_at": "2019-11-21T15:19:01Z", "closed_at": "2019-11-21T15:19:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any functionality support by marshmallow where we can pass one argument is jsonschema and second is json and validate it and return True or False?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1456", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1456/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1456/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1456/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1456", "id": 521510069, "node_id": "MDU6SXNzdWU1MjE1MTAwNjk=", "number": 1456, "title": "How to Pluck multiple values from the same object?", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-12T12:05:18Z", "updated_at": "2020-01-26T21:56:27Z", "closed_at": "2019-11-13T09:31:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have this schema:\r\n\r\n```python\r\nclass EditingRevisionFileSchema(Schema):\r\n    uuid = fields.Pluck(FileSchema, 'uuid', attribute='file')\r\n    filename = fields.Pluck(FileSchema, 'filename', attribute='file')\r\n    size = fields.Pluck(FileSchema, 'size', attribute='file')\r\n    content_type = fields.Pluck(FileSchema, 'content_type', attribute='file')\r\n    download_url = fields.Constant('#')  # TODO\r\n```\r\n\r\nBut it fails because I'm using `file` in multiple places.\r\n\r\n> ValueError: The attribute argument for one or more fields collides with another field's name or attribute argument. Check the following field names and attribute arguments: [u'file']\r\n\r\nIs there a solution for this besides using `uuid = Function(lambda x: x.file.uuid)` etc.?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1455", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1455/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1455/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1455/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1455", "id": 521455952, "node_id": "MDU6SXNzdWU1MjE0NTU5NTI=", "number": 1455, "title": "How do we validate a dynamic json schema in python flask marshmallow?", "user": {"login": "vvksahoo", "id": 56999733, "node_id": "MDQ6VXNlcjU2OTk5NzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/56999733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvksahoo", "html_url": "https://github.com/vvksahoo", "followers_url": "https://api.github.com/users/vvksahoo/followers", "following_url": "https://api.github.com/users/vvksahoo/following{/other_user}", "gists_url": "https://api.github.com/users/vvksahoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvksahoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvksahoo/subscriptions", "organizations_url": "https://api.github.com/users/vvksahoo/orgs", "repos_url": "https://api.github.com/users/vvksahoo/repos", "events_url": "https://api.github.com/users/vvksahoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vvksahoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-12T10:17:32Z", "updated_at": "2020-01-16T04:18:53Z", "closed_at": "2020-01-16T04:18:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "In db there is a table called X. X having json column in it and it has some data. In one of my post api call passing josn input like:\r\n\r\nINPUT JSON:\r\n{\r\n'x_id':1;\r\n'json':{\r\n      'id':1,\r\n      'name':'jack',\r\n      'address':'Newyork'\r\n       }\r\n}\r\nX-table:\r\nid:1\r\njson:{\r\n     'id':2,\r\n      'name':'some',\r\n       'address':'somewhere'\r\n\r\n }\r\n\r\ni want to validate input 'json' keyword schema with x-table json schema based on x_id. x-table json schema will vary so against that json schema my api json schema will validate.\r\n\r\nSome example:\r\nif API input json:\r\n{\r\n'x_id':1;\r\n'json':{\r\n     'id':1,\r\n     'Country':'USA',\r\n     'address':'Newyork'\r\n      }\r\n}\r\nAnd in db X-table look like:\r\nid:1\r\njson:{\r\n    'id':2,\r\n     'name':'some',\r\n      'address':'somewhere'\r\n\r\n   }\r\nIn this scenarios i want to throw error saying that 'Country' parameter is in-valid and 'name' parameter is missing . \r\nSecond Example: \r\nif API input json:\r\n{\r\n'x_id':2;\r\n'json':{\r\n'id':1,\r\n'Country':'USA',\r\n'address':'Newyork'\r\n}\r\n}\r\nAnd in db X-table look like:\r\nid:2\r\njson:{\r\n'id':1,\r\n'Country':'some',\r\n'address':'somewhere'\r\n\r\n}\r\nFor this case i wont get any error message . Look like both json schema same here. \r\nSo how to do this using marshmallow?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1454", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1454/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1454/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1454/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1454", "id": 520531804, "node_id": "MDU6SXNzdWU1MjA1MzE4MDQ=", "number": 1454, "title": "Intellisense autocomplete plugin or similiar", "user": {"login": "DavidM42", "id": 20495505, "node_id": "MDQ6VXNlcjIwNDk1NTA1", "avatar_url": "https://avatars1.githubusercontent.com/u/20495505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidM42", "html_url": "https://github.com/DavidM42", "followers_url": "https://api.github.com/users/DavidM42/followers", "following_url": "https://api.github.com/users/DavidM42/following{/other_user}", "gists_url": "https://api.github.com/users/DavidM42/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidM42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidM42/subscriptions", "organizations_url": "https://api.github.com/users/DavidM42/orgs", "repos_url": "https://api.github.com/users/DavidM42/repos", "events_url": "https://api.github.com/users/DavidM42/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidM42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-10T00:11:11Z", "updated_at": "2019-11-11T03:31:02Z", "closed_at": "2019-11-11T03:31:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think it would be a really nice tool/addition for this library if a plugin for vscode allowed devs to have intellisense auto complete on loaded dicts. Standard python intellisense sadly doesn't know about the static defined dict keys of marshmallow loaded objects so it's easy to misspell keys.\r\nAs I don't know anything about vscode plugins and linting/autocomplete/... I still wanted to throw the idea into the room if anyone is interested", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1452", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1452/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1452/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1452/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1452", "id": 520514909, "node_id": "MDU6SXNzdWU1MjA1MTQ5MDk=", "number": 1452, "title": "utils.get_value swallows AttributeError thrown elsewhere in the call chain", "user": {"login": "billyrrr", "id": 24789156, "node_id": "MDQ6VXNlcjI0Nzg5MTU2", "avatar_url": "https://avatars0.githubusercontent.com/u/24789156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/billyrrr", "html_url": "https://github.com/billyrrr", "followers_url": "https://api.github.com/users/billyrrr/followers", "following_url": "https://api.github.com/users/billyrrr/following{/other_user}", "gists_url": "https://api.github.com/users/billyrrr/gists{/gist_id}", "starred_url": "https://api.github.com/users/billyrrr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/billyrrr/subscriptions", "organizations_url": "https://api.github.com/users/billyrrr/orgs", "repos_url": "https://api.github.com/users/billyrrr/repos", "events_url": "https://api.github.com/users/billyrrr/events{/privacy}", "received_events_url": "https://api.github.com/users/billyrrr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-09T21:15:30Z", "updated_at": "2019-12-06T20:46:07Z", "closed_at": "2019-12-06T20:46:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I noticed that some ```AttributeError``` is swallowed by ```utils.get_value```. I have written a test case that reproduces this error. \r\n\r\n```python\r\n\r\nclass Square:\r\n\r\n    def __init__(self, p1: tuple, side_length):\r\n        self.p1 = p1\r\n        self.side_length = side_length\r\n\r\n    @property\r\n    def p2_fail(self):\r\n        return self.p1 + self.non_existent_property\r\n\r\n    # # p3 is not defined\r\n    # @property\r\n    # def p3_not_defined(self):\r\n    #     pass\r\n\r\n    @property\r\n    def favorite_food(self):\r\n        raise Exception\r\n\r\n    @property\r\n    def p4(self):\r\n        return self.p1[0]+self.side_length, self.p1[1]+self.side_length\r\n\r\n\r\ndef test_get_property_value_from_object():\r\n\r\n    # Will succeed\r\n    sq = Square(p1=(0, 0), side_length=1)\r\n    assert utils.get_value(sq, \"p4\") == (1, 1)\r\n    assert utils.get_value(sq, \"p3_not_defined\") == utils.missing\r\n    with pytest.raises(Exception):\r\n        utils.get_value(sq, \"favorite_food\")\r\n\r\n    # Will fail\r\n    with pytest.raises(AttributeError):\r\n        utils.get_value(sq, \"p2_fail\")\r\n\r\n```\r\n\r\n(Marshmallow is built using the current master branch. Test is run in Python 3.7 venv)\r\n\r\nExpected behavior: ```utils.get_value(sq, \"p2_fail\")``` raises ```AttributeError``` as ```p2_fail``` is a valid attribute in ```sq```, but the error is thrown in the scope of ```p2_fail```. \r\n\r\nCurrent behavior: ```utils.get_value(sq, \"p2_fail\")``` returns ```utils.missing``` rather than throwing an error. \r\n\r\nThis may have been caused by ```getattr``` swallowing ```AttributeError``` when ```default``` is set, but since it is part of the standard library we have to make changes in ```utils.get_value```\r\n\r\nThe current design results in critical error messages being swallowed in runtime. I am about to submit a pull request that includes tests written above. \r\n\r\nAlthough this error can be fixed by specifying a ```get_attribute``` function, it is nevertheless unexpected that the default behavior does not differentiate between \"p2_fail\" case and \"p3_not_defined\" case. I think that this is a defect. \r\n\r\nThanks! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1451", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1451/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1451/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1451/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1451", "id": 520079941, "node_id": "MDU6SXNzdWU1MjAwNzk5NDE=", "number": 1451, "title": "Bug / Feature request: allow DateTime object be deserialized if trailing Z indicates UTC", "user": {"login": "mirko", "id": 106558, "node_id": "MDQ6VXNlcjEwNjU1OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/106558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mirko", "html_url": "https://github.com/mirko", "followers_url": "https://api.github.com/users/mirko/followers", "following_url": "https://api.github.com/users/mirko/following{/other_user}", "gists_url": "https://api.github.com/users/mirko/gists{/gist_id}", "starred_url": "https://api.github.com/users/mirko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mirko/subscriptions", "organizations_url": "https://api.github.com/users/mirko/orgs", "repos_url": "https://api.github.com/users/mirko/repos", "events_url": "https://api.github.com/users/mirko/events{/privacy}", "received_events_url": "https://api.github.com/users/mirko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-08T15:33:55Z", "updated_at": "2019-11-08T16:30:46Z", "closed_at": "2019-11-08T16:24:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently a string like `2008-01-01T00:00:00.000Z` - generated from JavaScript - via `toISOString()` is considered invalid by the `DateTime()` definition within marshmallow.\r\n\r\nThat is, because `datetime.fromisoformat()` does only support timezones declared in the format of `+AB:CD` (for UTC that would `+00:00`).\r\n\r\nWhile it is clear, that the trailing `Z` indicating UTC is valid according to ISO8601, the maintainer of the datetime package (currently) refuses to add supporting that format of TZ-indication.\r\n\r\nThere's a lengthy discussion about that: https://discuss.python.org/t/parse-z-timezone-suffix-in-datetime/2220\r\n\r\nPutting that aside, I'd really be in favour of marshmallow accepting that part of ISO8601 and not consider above format as invalid.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1450", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1450/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1450/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1450/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1450", "id": 519418499, "node_id": "MDU6SXNzdWU1MTk0MTg0OTk=", "number": 1450, "title": "Does not raise error when passed unknown field", "user": {"login": "manoadamro", "id": 29605020, "node_id": "MDQ6VXNlcjI5NjA1MDIw", "avatar_url": "https://avatars2.githubusercontent.com/u/29605020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manoadamro", "html_url": "https://github.com/manoadamro", "followers_url": "https://api.github.com/users/manoadamro/followers", "following_url": "https://api.github.com/users/manoadamro/following{/other_user}", "gists_url": "https://api.github.com/users/manoadamro/gists{/gist_id}", "starred_url": "https://api.github.com/users/manoadamro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manoadamro/subscriptions", "organizations_url": "https://api.github.com/users/manoadamro/orgs", "repos_url": "https://api.github.com/users/manoadamro/repos", "events_url": "https://api.github.com/users/manoadamro/events{/privacy}", "received_events_url": "https://api.github.com/users/manoadamro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-07T17:48:30Z", "updated_at": "2019-11-07T17:57:58Z", "closed_at": "2019-11-07T17:57:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom marshmallow import Schema, RAISE\r\nclass S(Schema):\r\n    class Meta:\r\n        unknown = RAISE\r\n    x = fields.Int()\r\n    \r\ns = S()\r\ns.dump({\"nope\": True})\r\n{}\r\n\r\ns = S(unknown=RAISE)\r\ns.dump({\"nope\": True})\r\n{}\r\n\r\nclass S(Schema):\r\n    x = fields.Int()\r\n    \r\ns = S()\r\ns.dump({\"nope\": True})\r\n{}\r\n\r\n```\r\n\r\nThe docs [here](https://marshmallow.readthedocs.io/en/stable/quickstart.html#handling-unknown-fields) suggest that it should raise an error by default. I can't seem to get it to raise one at all. Am i doing something wrong here or is this a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1447", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1447/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1447/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1447/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1447", "id": 517056194, "node_id": "MDU6SXNzdWU1MTcwNTYxOTQ=", "number": 1447, "title": "How to raise an exception if json parameter is not having value (empty string) ? ", "user": {"login": "vvksahoo", "id": 56999733, "node_id": "MDQ6VXNlcjU2OTk5NzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/56999733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvksahoo", "html_url": "https://github.com/vvksahoo", "followers_url": "https://api.github.com/users/vvksahoo/followers", "following_url": "https://api.github.com/users/vvksahoo/following{/other_user}", "gists_url": "https://api.github.com/users/vvksahoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvksahoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvksahoo/subscriptions", "organizations_url": "https://api.github.com/users/vvksahoo/orgs", "repos_url": "https://api.github.com/users/vvksahoo/repos", "events_url": "https://api.github.com/users/vvksahoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vvksahoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-04T10:15:05Z", "updated_at": "2019-11-06T15:50:00Z", "closed_at": "2019-11-06T15:49:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to raise an exception if my input json will look like :\r\n{\r\n\t\"username\":\"user\",\r\n\t\"password\": \"\"\t\r\n}\r\nif i am passing password as null then i want to raise an exception . May i know how does it handle by marshmallow .\r\nI dont want to check explicitly like below : \r\n------------------------\r\nrequest_jsn = request.get_json()\r\nif 'password' in request_jsn.keys() :\r\n if request_jsn['password'] : \r\n   password = request_jsn['password']\r\n------------------------------\r\nfrom marshmallow import Schema, fields\r\nclass UserSchema(Schema):\r\n    username = fields.String(required=True)\r\n    password = fields.String(required=True)\r\n\r\n    def post(self):\r\n\r\n        if not request.json:\r\n            return jsonify( {'msg':\"Unsupported media type,Requests must be JSON\",'code': 415})\r\n        try:\r\n           request_jsn =  Schema().load(request.get_json())\r\n        except ValidationError as e:\r\n            return jsonify(error_dict(current_request_id(), str(e), 400))", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1445", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1445/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1445/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1445/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1445", "id": 516257513, "node_id": "MDU6SXNzdWU1MTYyNTc1MTM=", "number": 1445, "title": "Passing empty dict to schema", "user": {"login": "AlwxSin", "id": 3910216, "node_id": "MDQ6VXNlcjM5MTAyMTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3910216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlwxSin", "html_url": "https://github.com/AlwxSin", "followers_url": "https://api.github.com/users/AlwxSin/followers", "following_url": "https://api.github.com/users/AlwxSin/following{/other_user}", "gists_url": "https://api.github.com/users/AlwxSin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlwxSin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlwxSin/subscriptions", "organizations_url": "https://api.github.com/users/AlwxSin/orgs", "repos_url": "https://api.github.com/users/AlwxSin/repos", "events_url": "https://api.github.com/users/AlwxSin/events{/privacy}", "received_events_url": "https://api.github.com/users/AlwxSin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-01T17:48:00Z", "updated_at": "2019-11-01T17:52:54Z", "closed_at": "2019-11-01T17:52:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version: `marshmallow-3.2.1`\r\n\r\nCode example\r\n```python\r\nclass TestSchema(Schema):\r\n    key = fields.Str()\r\n\r\nvalid_data = {'key': 'data'}\r\ninvalid_data = {'bad_key': 'data'}\r\nshould_be_invalid_data = {}\r\n\r\nschema = TestSchema()\r\nschema.load(valid_data)  # passes\r\nschema.load(invalid_data)  # ValidationError \r\nschema.load(should_be_invalid_data)  # passes\r\n```\r\n\r\nIs it supposed behavior when I pass empty dict to schema `.load` method and it's ok? If so, how can I set that empty dict is not allowed?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1441", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1441/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1441/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1441/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1441", "id": 515648081, "node_id": "MDU6SXNzdWU1MTU2NDgwODE=", "number": 1441, "title": "Old documentation links are dead", "user": {"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-31T18:21:11Z", "updated_at": "2019-11-01T13:47:30Z", "closed_at": "2019-11-01T13:47:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation URLs have changed and all old links now return a 404 status.\r\n\r\nExample: `https://marshmallow.readthedocs.io/en/3.0/api_reference.html`\r\n\r\nMaybe there should be a redirection from the old URLs to the new ones, since there are existing links to the old URLs...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1440", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1440/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1440/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1440/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1440", "id": 515509407, "node_id": "MDU6SXNzdWU1MTU1MDk0MDc=", "number": 1440, "title": "Potential logically dead code in error_store.py", "user": {"login": "huornlmj", "id": 28444739, "node_id": "MDQ6VXNlcjI4NDQ0NzM5", "avatar_url": "https://avatars3.githubusercontent.com/u/28444739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huornlmj", "html_url": "https://github.com/huornlmj", "followers_url": "https://api.github.com/users/huornlmj/followers", "following_url": "https://api.github.com/users/huornlmj/following{/other_user}", "gists_url": "https://api.github.com/users/huornlmj/gists{/gist_id}", "starred_url": "https://api.github.com/users/huornlmj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huornlmj/subscriptions", "organizations_url": "https://api.github.com/users/huornlmj/orgs", "repos_url": "https://api.github.com/users/huornlmj/repos", "events_url": "https://api.github.com/users/huornlmj/events{/privacy}", "received_events_url": "https://api.github.com/users/huornlmj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-31T15:08:59Z", "updated_at": "2019-11-01T15:04:58Z", "closed_at": "2019-11-01T15:04:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to a recent Coverity scan, there is potential logically dead code beginning at [error_store.py line 34.](https://github.com/marshmallow-code/marshmallow/blob/dev/src/marshmallow/error_store.py#L34).  Is this correct or is the flow part of some defensive error control? \r\n\r\n```\r\n34    if not errors1:\r\n35        return errors2\r\n  \t**cond_cannot_single: Condition errors2, taking true branch. Now the value of errors2 cannot be equal to 0.\r\n  \tcond_true: Condition errors2, taking true branch. The truth value of errors2 must be true.\r\n  \tcond_types: Condition errors2, taking true branch. Now the type of errors2 cannot be any of undefined and null.**\r\n36    if not errors2:\r\n37        return errors1\r\n38    if isinstance(errors1, list):\r\n39        if isinstance(errors2, list):\r\n40            return errors1 + errors2\r\n41        if isinstance(errors2, dict):\r\n42            return dict(errors2, **{SCHEMA: merge_errors(errors1, errors2.get(SCHEMA))})\r\n43        return errors1 + [errors2]\r\n44    if isinstance(errors1, dict):\r\n45        if isinstance(errors2, list):\r\n46            return dict(errors1, **{SCHEMA: merge_errors(errors1.get(SCHEMA), errors2)})\r\n47        if isinstance(errors2, dict):\r\n48            errors = dict(errors1)\r\n49            for key, val in errors2.items():\r\n50                if key in errors:\r\n51                    errors[key] = merge_errors(errors[key], val)\r\n52                else:\r\n53                    errors[key] = val\r\n54            return errors\r\n55        return dict(errors1, **{SCHEMA: merge_errors(errors1.get(SCHEMA), errors2)})\r\n56    if isinstance(errors2, list):\r\n\r\n**cannot_single: At condition errors2, the value of errors2 cannot be equal to 0.\r\n  \ttruth: At condition errors2, the truth value of errors2 must be true.\r\n  \tpossible_types: At condition errors2, the type of errors2 cannot be any of undefined and null.\r\n  \tdead_error_condition: The condition errors2 must be true.\r\nCID 1406512: Logically dead code (DEADCODE)\r\ndead_error_line: Execution cannot reach the expression errors1 inside this statement: return errors2 ? {errors1} ....** \r\n```\r\n![dead-code](https://user-images.githubusercontent.com/28444739/67959559-dec9ca00-fbf0-11e9-8e70-0608abd02f0f.jpg)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1439", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1439/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1439/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1439/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1439", "id": 515462367, "node_id": "MDU6SXNzdWU1MTU0NjIzNjc=", "number": 1439, "title": "post_load decorated functions with same name are not executed  ", "user": {"login": "cimourdain", "id": 4066777, "node_id": "MDQ6VXNlcjQwNjY3Nzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4066777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cimourdain", "html_url": "https://github.com/cimourdain", "followers_url": "https://api.github.com/users/cimourdain/followers", "following_url": "https://api.github.com/users/cimourdain/following{/other_user}", "gists_url": "https://api.github.com/users/cimourdain/gists{/gist_id}", "starred_url": "https://api.github.com/users/cimourdain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cimourdain/subscriptions", "organizations_url": "https://api.github.com/users/cimourdain/orgs", "repos_url": "https://api.github.com/users/cimourdain/repos", "events_url": "https://api.github.com/users/cimourdain/events{/privacy}", "received_events_url": "https://api.github.com/users/cimourdain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-31T14:08:28Z", "updated_at": "2019-10-31T15:51:33Z", "closed_at": "2019-10-31T15:51:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "With schema inheritance or mixins, post_load decorators execution is dependant of their function name.\r\n\r\nIn the following example:\r\n```python\r\nfrom marshmallow import Schema, fields, post_load\r\n\r\n\r\nclass Schema1(Schema):\r\n    toto = fields.String()\r\n\r\n    @post_load\r\n    def schema1_post_load(self, data, **kwargs):\r\n        print('Schema1 post load: data = %s' % data)\r\n        return data\r\n\r\n\r\nclass Schema2(Schema):\r\n    toto = fields.String()\r\n\r\n    @post_load\r\n    def schema2_post_load(self, data, **kwargs):\r\n        print('Schema2 post load: data = %s' % data)\r\n        return data\r\n\r\n\r\nclass MixinSchema(Schema2, Schema1):\r\n    titi = fields.String()\r\n\r\n    @post_load\r\n    def mixinshchema_post_load(self, data, **kwargs):\r\n        print('MixinSchema post load: data = %s' % data)\r\n        return data\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    payload = {\r\n        'toto': 'gfdgefrh',\r\n        'titi': 'fdghfgjhjh'\r\n    }\r\n\r\n    result = MixinSchema().load(payload)\r\n```\r\nThis example produces the following output:\r\n```\r\nMixinSchema post load: data = {'titi': 'fdghfgjhjh', 'toto': 'gfdgefrh'}\r\nSchema1 post load: data = {'titi': 'fdghfgjhjh', 'toto': 'gfdgefrh'}\r\nSchema2 post load: data = {'titi': 'fdghfgjhjh', 'toto': 'gfdgefrh'}\r\n```\r\n\r\nAs per the [decorators documentation](https://marshmallow.readthedocs.io/en/stable/api_reference.html#module-marshmallow.decorators) i understand that the execution order is not guaranteed, so the output is fine by me because all the post_loads are executed.\r\n\r\nThen, when i give the `MixinSchema` post_load function the same name as `Schema2`:\r\n```python\r\nfrom marshmallow import Schema, fields, post_load\r\n\r\n\r\nclass Schema1(Schema):\r\n    toto = fields.String()\r\n\r\n    @post_load\r\n    def schema1_post_load(self, data, **kwargs):\r\n        print('Schema1 post load: data = %s' % data)\r\n        return data\r\n\r\n\r\nclass Schema2(Schema):\r\n    toto = fields.String()\r\n\r\n    @post_load\r\n    def schema2_post_load(self, data, **kwargs):\r\n        print('Schema2 post load: data = %s' % data)\r\n        return data\r\n\r\n\r\nclass MixinSchema(Schema2, Schema1):\r\n    titi = fields.String()\r\n\r\n    @post_load\r\n    def schema2_post_load(self, data, **kwargs):\r\n        print('MixinSchema post load: data = %s' % data)\r\n        return data\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    payload = {\r\n        'toto': 'gfdgefrh',\r\n        'titi': 'fdghfgjhjh'\r\n    }\r\n\r\n    result = MixinSchema().load(payload)\r\n```\r\nThen i get the following output:\r\n```\r\nSchema1 post load: data = {'titi': 'fdghfgjhjh', 'toto': 'gfdgefrh'}\r\nMixinSchema post load: data = {'titi': 'fdghfgjhjh', 'toto': 'gfdgefrh'}\r\n\r\n```\r\n\r\nThe Schema2 post_load is not executed. From my point of view, post_load execution should not be dependant of function naming.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1438", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1438/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1438/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1438/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1438", "id": 514739688, "node_id": "MDU6SXNzdWU1MTQ3Mzk2ODg=", "number": 1438, "title": "Requiring a dump_only field", "user": {"login": "Brettpow", "id": 9546095, "node_id": "MDQ6VXNlcjk1NDYwOTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9546095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Brettpow", "html_url": "https://github.com/Brettpow", "followers_url": "https://api.github.com/users/Brettpow/followers", "following_url": "https://api.github.com/users/Brettpow/following{/other_user}", "gists_url": "https://api.github.com/users/Brettpow/gists{/gist_id}", "starred_url": "https://api.github.com/users/Brettpow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Brettpow/subscriptions", "organizations_url": "https://api.github.com/users/Brettpow/orgs", "repos_url": "https://api.github.com/users/Brettpow/repos", "events_url": "https://api.github.com/users/Brettpow/events{/privacy}", "received_events_url": "https://api.github.com/users/Brettpow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-30T14:57:51Z", "updated_at": "2019-10-30T15:22:06Z", "closed_at": "2019-10-30T15:22:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nIs it possible to require a field when dumping? I would expect something like this to work but it doesn't. \r\n\r\n```\r\nfrom marshmallow import fields, Schema\r\n\r\n\r\nclass RequireDump(Schema):\r\n    class Meta:\r\n        strict = True\r\n        dateformat = 'iso'\r\n    name = fields.Str(required=True, dump_only=True)\r\n\r\n\r\nclass RequireLoad(Schema):\r\n    class Meta:\r\n        strict = True\r\n        dateformat = 'iso'\r\n    name = fields.Str(required=True)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1436", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1436/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1436/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1436/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1436", "id": 514050791, "node_id": "MDU6SXNzdWU1MTQwNTA3OTE=", "number": 1436, "title": "Duplicate chunk in src/marshmallow/schema.py", "user": {"login": "huornlmj", "id": 28444739, "node_id": "MDQ6VXNlcjI4NDQ0NzM5", "avatar_url": "https://avatars3.githubusercontent.com/u/28444739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huornlmj", "html_url": "https://github.com/huornlmj", "followers_url": "https://api.github.com/users/huornlmj/followers", "following_url": "https://api.github.com/users/huornlmj/following{/other_user}", "gists_url": "https://api.github.com/users/huornlmj/gists{/gist_id}", "starred_url": "https://api.github.com/users/huornlmj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huornlmj/subscriptions", "organizations_url": "https://api.github.com/users/huornlmj/orgs", "repos_url": "https://api.github.com/users/huornlmj/repos", "events_url": "https://api.github.com/users/huornlmj/events{/privacy}", "received_events_url": "https://api.github.com/users/huornlmj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 167345320, "node_id": "MDU6TGFiZWwxNjczNDUzMjA=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/refactor", "name": "refactor", "color": "1d76db", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-29T16:22:55Z", "updated_at": "2019-11-06T08:39:47Z", "closed_at": "2019-11-06T08:39:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sonarqube flags duplication in src/marshmallow/schema.py.\r\nLines 1200 to 1203 are duplicated in the same if statement at lines 1213 to 1216.\r\nIs this intentional ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1435", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1435/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1435/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1435/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1435", "id": 513944079, "node_id": "MDU6SXNzdWU1MTM5NDQwNzk=", "number": 1435, "title": "Question about Nested", "user": {"login": "mayku00", "id": 43533407, "node_id": "MDQ6VXNlcjQzNTMzNDA3", "avatar_url": "https://avatars3.githubusercontent.com/u/43533407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mayku00", "html_url": "https://github.com/mayku00", "followers_url": "https://api.github.com/users/mayku00/followers", "following_url": "https://api.github.com/users/mayku00/following{/other_user}", "gists_url": "https://api.github.com/users/mayku00/gists{/gist_id}", "starred_url": "https://api.github.com/users/mayku00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mayku00/subscriptions", "organizations_url": "https://api.github.com/users/mayku00/orgs", "repos_url": "https://api.github.com/users/mayku00/repos", "events_url": "https://api.github.com/users/mayku00/events{/privacy}", "received_events_url": "https://api.github.com/users/mayku00/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-10-29T14:07:05Z", "updated_at": "2019-10-30T15:41:06Z", "closed_at": "2019-10-30T15:41:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have two Schemas:\r\n\r\nclass SonSchema(Schema):\r\n\tparamter1 = fields.String()\r\n\tparameter2 = fields.String()\r\n\r\nclass FatherSchema(Schema):\r\n\tson = fields.Nested(SonSchema)\r\n\r\n\t\r\nThen I trie to load some json into the FatherSchema:\r\n\r\nschema = FatherSchema().load(response)\r\n\r\n\r\nWhat I need is depending on a external param, I want to make some validation in the SonSchema, for example if extertal param = True then parameter1 needs to be in the response (with a @validation_schema).\r\n\r\nAny ideas??", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1434", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1434/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1434/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1434/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1434", "id": 513224674, "node_id": "MDU6SXNzdWU1MTMyMjQ2NzQ=", "number": 1434, "title": "Can marshmallow provide a model class serializer like the django rest framework?", "user": {"login": "luli817", "id": 31745402, "node_id": "MDQ6VXNlcjMxNzQ1NDAy", "avatar_url": "https://avatars2.githubusercontent.com/u/31745402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luli817", "html_url": "https://github.com/luli817", "followers_url": "https://api.github.com/users/luli817/followers", "following_url": "https://api.github.com/users/luli817/following{/other_user}", "gists_url": "https://api.github.com/users/luli817/gists{/gist_id}", "starred_url": "https://api.github.com/users/luli817/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luli817/subscriptions", "organizations_url": "https://api.github.com/users/luli817/orgs", "repos_url": "https://api.github.com/users/luli817/repos", "events_url": "https://api.github.com/users/luli817/events{/privacy}", "received_events_url": "https://api.github.com/users/luli817/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-28T10:40:05Z", "updated_at": "2019-10-28T14:40:13Z", "closed_at": "2019-10-28T13:46:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nclass BookInfoSerializer(serializers.ModelSerializer):\r\n    \"\"\"book model class serializer\"\"\"\r\n    class Meta:\r\n        model = BookInfo\r\n        fields = ('id', 'btitle', 'bpub_date')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1430", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1430/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1430/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1430/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1430", "id": 509034785, "node_id": "MDU6SXNzdWU1MDkwMzQ3ODU=", "number": 1430, "title": "Extract value from field Nested ", "user": {"login": "alCheban", "id": 53557233, "node_id": "MDQ6VXNlcjUzNTU3MjMz", "avatar_url": "https://avatars0.githubusercontent.com/u/53557233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alCheban", "html_url": "https://github.com/alCheban", "followers_url": "https://api.github.com/users/alCheban/followers", "following_url": "https://api.github.com/users/alCheban/following{/other_user}", "gists_url": "https://api.github.com/users/alCheban/gists{/gist_id}", "starred_url": "https://api.github.com/users/alCheban/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alCheban/subscriptions", "organizations_url": "https://api.github.com/users/alCheban/orgs", "repos_url": "https://api.github.com/users/alCheban/repos", "events_url": "https://api.github.com/users/alCheban/events{/privacy}", "received_events_url": "https://api.github.com/users/alCheban/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T11:58:25Z", "updated_at": "2019-10-21T08:42:16Z", "closed_at": "2019-10-21T08:42:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have next structure object\r\n\r\n```py\r\nclass A(Schema):\r\n    people = field.Nested(PeopleSchema, only=('id', 'name',))\r\n    age = field.Integer()\r\n```\r\nnow run\r\n\r\n```py\r\nA().dump(object).data\r\n```\r\nand i get\r\n\r\n```py\r\n{people:{id:0, name:Name}, age:100}\r\n```\r\n\r\nBut i want next structure\r\n\r\n```py\r\n{id:0, name:Name, age:100}\r\n```\r\nThanks\r\nI use 2 version", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1426", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1426/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1426/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1426/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1426", "id": 507279047, "node_id": "MDU6SXNzdWU1MDcyNzkwNDc=", "number": 1426, "title": "decimal.InvalidOperation", "user": {"login": "asmodehn", "id": 221256, "node_id": "MDQ6VXNlcjIyMTI1Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/221256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asmodehn", "html_url": "https://github.com/asmodehn", "followers_url": "https://api.github.com/users/asmodehn/followers", "following_url": "https://api.github.com/users/asmodehn/following{/other_user}", "gists_url": "https://api.github.com/users/asmodehn/gists{/gist_id}", "starred_url": "https://api.github.com/users/asmodehn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asmodehn/subscriptions", "organizations_url": "https://api.github.com/users/asmodehn/orgs", "repos_url": "https://api.github.com/users/asmodehn/repos", "events_url": "https://api.github.com/users/asmodehn/events{/privacy}", "received_events_url": "https://api.github.com/users/asmodehn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-15T14:22:02Z", "updated_at": "2019-10-15T14:30:49Z", "closed_at": "2019-10-15T14:30:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I triggered the following error, by attempting to convert \"ABCD\" into a decimal\r\n```\r\n    self.schema.dump(model)\r\n  File \"/opt/Projects/aiokraken/aiokraken/rest/schemas/base.py\", line 27, in dump\r\n    return super().dump(*args, **kwargs)\r\n  File \"/home/alexv/.local/share/virtualenvs/aiokraken-bMbyeTfo/lib/python3.7/site-packages/marshmallow/schema.py\", line 553, in dump\r\n    result = self._serialize(processed_obj, many=many)\r\n  File \"/home/alexv/.local/share/virtualenvs/aiokraken-bMbyeTfo/lib/python3.7/site-packages/marshmallow/schema.py\", line 517, in _serialize\r\n    value = field_obj.serialize(attr_name, obj, accessor=self.get_attribute)\r\n  File \"/home/alexv/.local/share/virtualenvs/aiokraken-bMbyeTfo/lib/python3.7/site-packages/marshmallow/fields.py\", line 325, in serialize\r\n    return self._serialize(value, attr, obj, **kwargs)\r\n  File \"/home/alexv/.local/share/virtualenvs/aiokraken-bMbyeTfo/lib/python3.7/site-packages/marshmallow/fields.py\", line 899, in _serialize\r\n    ret = self._format_num(value)  # type: _T\r\n  File \"/home/alexv/.local/share/virtualenvs/aiokraken-bMbyeTfo/lib/python3.7/site-packages/marshmallow/fields.py\", line 1019, in _format_num\r\n    num = decimal.Decimal(str(value))\r\ndecimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]\r\n```\r\nI would expect this kind of error to be grabbed by marshmallow and wrapped into a \"ValidationError\". Is that correct and is this a bug ? Or am I wrong to expect such a behaviour here ?\r\n\r\nNote : marshmallow \"version\": \"==3.2.1\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1424", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1424/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1424/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1424/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1424", "id": 506117914, "node_id": "MDU6SXNzdWU1MDYxMTc5MTQ=", "number": 1424, "title": "List(Pluck()) raises while Pluck(many=True) works", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "deckar01", "id": 3108007, "node_id": "MDQ6VXNlcjMxMDgwMDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3108007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deckar01", "html_url": "https://github.com/deckar01", "followers_url": "https://api.github.com/users/deckar01/followers", "following_url": "https://api.github.com/users/deckar01/following{/other_user}", "gists_url": "https://api.github.com/users/deckar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/deckar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deckar01/subscriptions", "organizations_url": "https://api.github.com/users/deckar01/orgs", "repos_url": "https://api.github.com/users/deckar01/repos", "events_url": "https://api.github.com/users/deckar01/events{/privacy}", "received_events_url": "https://api.github.com/users/deckar01/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "deckar01", "id": 3108007, "node_id": "MDQ6VXNlcjMxMDgwMDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3108007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deckar01", "html_url": "https://github.com/deckar01", "followers_url": "https://api.github.com/users/deckar01/followers", "following_url": "https://api.github.com/users/deckar01/following{/other_user}", "gists_url": "https://api.github.com/users/deckar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/deckar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deckar01/subscriptions", "organizations_url": "https://api.github.com/users/deckar01/orgs", "repos_url": "https://api.github.com/users/deckar01/repos", "events_url": "https://api.github.com/users/deckar01/events{/privacy}", "received_events_url": "https://api.github.com/users/deckar01/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2019-10-12T02:22:46Z", "updated_at": "2020-02-19T10:31:04Z", "closed_at": "2020-02-19T10:31:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "For completeness, below is my example where I noticed this but a PR with at least a test added is on it's way and I'll see if I can figure out how to fix it.  This was broken by https://github.com/marshmallow-code/marshmallow/commit/a6fd2b6f759c1b99275f949b7663295f85cc7f27.\r\n\r\nhttps://repl.it/@altendky/UnluckyInfiniteUnits-5\r\n```python3\r\nimport attr\r\nimport marshmallow\r\n\r\n\r\n@attr.s\r\nclass Member:\r\n    name = attr.ib()\r\n    other = attr.ib()\r\n\r\n\r\nclass MemberSchema(marshmallow.Schema):\r\n    name = marshmallow.fields.String()\r\n    other = marshmallow.fields.String()\r\n\r\n\r\n@attr.s\r\nclass Holder:\r\n    members = attr.ib()\r\n\r\nclass HolderSchema(marshmallow.Schema):\r\n    members = marshmallow.fields.List(marshmallow.fields.Pluck(MemberSchema, field_name='name'))\r\n    # members = marshmallow.fields.Pluck(MemberSchema, field_name='name', many=True)\r\n\r\n\r\ndef main():\r\n    my_holder = Holder(\r\n        members=[\r\n            Member(name='name_0', other='other_0'),\r\n            Member(name='name_1', other='other_1'),\r\n        ],\r\n    )\r\n\r\n    dumped = HolderSchema().dump(my_holder)\r\n    print(dumped)\r\n\r\nmain()\r\n```\r\n```python-traceback\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 45, in <module>\r\n    main()\r\n  File \"main.py\", line 42, in main\r\n    dumped = HolderSchema().dump(my_holder)\r\n  File \"/home/runner/.local/share/virtualenvs/python3/lib/python3.7/site-packages/marshmallow/schema.py\", line 553, in dump\r\n    result = self._serialize(processed_obj, many=many)\r\n  File \"/home/runner/.local/share/virtualenvs/python3/lib/python3.7/site-packages/marshmallow/schema.py\", line 517, in _serialize\r\n    value = field_obj.serialize(attr_name, obj, accessor=self.get_attribute)\r\n  File \"/home/runner/.local/share/virtualenvs/python3/lib/python3.7/site-packages/marshmallow/fields.py\", line 325, in serialize\r\n    return self._serialize(value, attr, obj, **kwargs)\r\n  File \"/home/runner/.local/share/virtualenvs/python3/lib/python3.7/site-packages/marshmallow/fields.py\", line 695, in _serialize\r\n    return self.inner._serialize(value, attr, obj, many=True, **kwargs)\r\n  File \"/home/runner/.local/share/virtualenvs/python3/lib/python3.7/site-packages/marshmallow/fields.py\", line 635, in _serialize\r\n    return ret[self._field_data_key]\r\nTypeError: list indices must be integers or slices, not str\r\n```\r\n`requirements.txt`\r\n```\r\nattrs==19.2.0\r\nmarshmallow==3.2.1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1420", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1420/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1420/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1420/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1420", "id": 501573648, "node_id": "MDU6SXNzdWU1MDE1NzM2NDg=", "number": 1420, "title": "'_schema': ['Invalid input type.'] is overwriting personalized errors", "user": {"login": "WhiteSummeRK", "id": 33036566, "node_id": "MDQ6VXNlcjMzMDM2NTY2", "avatar_url": "https://avatars1.githubusercontent.com/u/33036566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WhiteSummeRK", "html_url": "https://github.com/WhiteSummeRK", "followers_url": "https://api.github.com/users/WhiteSummeRK/followers", "following_url": "https://api.github.com/users/WhiteSummeRK/following{/other_user}", "gists_url": "https://api.github.com/users/WhiteSummeRK/gists{/gist_id}", "starred_url": "https://api.github.com/users/WhiteSummeRK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WhiteSummeRK/subscriptions", "organizations_url": "https://api.github.com/users/WhiteSummeRK/orgs", "repos_url": "https://api.github.com/users/WhiteSummeRK/repos", "events_url": "https://api.github.com/users/WhiteSummeRK/events{/privacy}", "received_events_url": "https://api.github.com/users/WhiteSummeRK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-02T15:46:22Z", "updated_at": "2019-10-02T18:06:40Z", "closed_at": "2019-10-02T18:06:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "my test:\r\n\r\n```\r\ndef test_receive_data_should_respond_400_when_record_type_incorrect(self):\r\n        request = self.client.post(\r\n            url_for('receive.receive_data'),\r\n            json={\r\n                'record_type': 2,\r\n                'record_timestamp': self.date_test,\r\n                'call_identifier': 30,\r\n                'origin_phone': '1234567891',\r\n                'dest_phone': '12345678911'}\r\n        )\r\n        self.assertEqual(request.status_code, 400)\r\n        self.assertEqual(\r\n            request.json['record_type'][0],\r\n            \"Err: record_type is 0 for start call and 1 for end call\"\r\n        )\r\n```\r\n\r\nmy serializer:\r\n\r\n```\r\n class PhoneCallReceive(ma.Schema):\r\n    class Meta:\r\n        fields = ('record_type',\r\n                  'record_timestamp',\r\n                  'call_identifier',\r\n                  'origin_phone',\r\n                  'dest_phone')\r\n\r\n    record_type = fields.Int(\r\n        required=True,\r\n        validate=OneOf(\r\n            choices=[0, 1],\r\n            error='Err: record_type is 0 for start call and 1 for end call')\r\n    )\r\n    record_timestamp = fields.Str(required=True)\r\n    call_identifier = fields.Int(required=True)\r\n    origin_phone = fields.Str(\r\n        required=False,\r\n        validate=Length(\r\n            min=10,\r\n            max=11,\r\n            error='Err: origin_phone should be min={min} and max={max}'\r\n        )\r\n    )\r\n    dest_phone = fields.Str(\r\n        required=False,\r\n        validate=Length(\r\n            min=10,\r\n            max=11,\r\n            error='Err: dest_phone should be min={min} and max={max}'\r\n        )\r\n    )\r\n```\r\n\r\nBy sending the json data as the test sends, the serializer should use the record_type validate field to display a personalized error message, but the result is always the same with `{'_schema': ['Invalid input type.']}`. i cant understand whats happening. is this a bug? a change from 3.0 that i couldnt figure out?\r\n\r\nby the way, this is how i temporarily set my route to be after the 3.0\r\n\r\n```\r\n@app.route('/', methods=['POST'])\r\ndef receive_data():\r\n    pcr = PhoneCallReceive()\r\n    result = None\r\n    error = None\r\n\r\n    try:\r\n        result = pcr.load(request.json)\r\n    except ValidationError as err:\r\n        error = err.normalized_messages()\r\n\r\n    result_call, error_call = save_call(result)\r\n\r\n    if error or error_call:\r\n        return jsonify(error or error_call), 400\r\n\r\n    return pcr.jsonify(result), 201\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1417", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1417/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1417/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1417/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1417", "id": 496836760, "node_id": "MDU6SXNzdWU0OTY4MzY3NjA=", "number": 1417, "title": "Freature request: allow handle_error to suppress an error.", "user": {"login": "bitdancer", "id": 476443, "node_id": "MDQ6VXNlcjQ3NjQ0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/476443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitdancer", "html_url": "https://github.com/bitdancer", "followers_url": "https://api.github.com/users/bitdancer/followers", "following_url": "https://api.github.com/users/bitdancer/following{/other_user}", "gists_url": "https://api.github.com/users/bitdancer/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitdancer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitdancer/subscriptions", "organizations_url": "https://api.github.com/users/bitdancer/orgs", "repos_url": "https://api.github.com/users/bitdancer/repos", "events_url": "https://api.github.com/users/bitdancer/events{/privacy}", "received_events_url": "https://api.github.com/users/bitdancer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-09-22T21:42:17Z", "updated_at": "2019-10-14T00:18:41Z", "closed_at": "2019-09-23T01:21:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "In `do_load` you have the following code block:\r\n\r\n```    \r\n        if errors:\r\n            exc = ValidationError(errors, data=data, valid_data=result)\r\n            self.handle_error(exc, data, many=many, partial=partial)\r\n            raise exc\r\n```\r\n\r\nSo the exception is raised unconditionally.  This means that there is no way for a custom schema to correct or suppress an error raised by a sub-schema.\r\n\r\nOur use case is wanting to have a schema in which some fields are validated, but the remainder are passed \"as is\" (they are massaged and validated later on in our data pipeline).  In Marshmallow 2 we set our schema to strict=False and had our handle_error raise on the fields we wanted validated.  As far as I can see there is no equivalent functionality in Marshmallow 3.  This could be solved by having the code that calls handle_error allow it to signal that the exception be ignored.  For example, it could treat a return value of `True` from handle_error as signalling that the error has been successfully handled and should not be raised.\r\n\r\n(By the way, this use case is similar to that mentioned in #1198, but we aren't serializing an object, just a json data structure.  We are currently using a @post_dump method to include the unknown fields in the dump, but I haven't actually gotten far enough yet to know if that will actually work in Marshmallow 3 :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1414", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1414/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1414/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow/issues/1414/events", "html_url": "https://github.com/marshmallow-code/marshmallow/issues/1414", "id": 495667033, "node_id": "MDU6SXNzdWU0OTU2NjcwMzM=", "number": 1414, "title": "@validates_schema doesn't return '_schema' key when ValidationError receives a dict parameter in versions > 3.x.  Feature or bug?", "user": {"login": "mamalos", "id": 12953013, "node_id": "MDQ6VXNlcjEyOTUzMDEz", "avatar_url": "https://avatars1.githubusercontent.com/u/12953013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mamalos", "html_url": "https://github.com/mamalos", "followers_url": "https://api.github.com/users/mamalos/followers", "following_url": "https://api.github.com/users/mamalos/following{/other_user}", "gists_url": "https://api.github.com/users/mamalos/gists{/gist_id}", "starred_url": "https://api.github.com/users/mamalos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mamalos/subscriptions", "organizations_url": "https://api.github.com/users/mamalos/orgs", "repos_url": "https://api.github.com/users/mamalos/repos", "events_url": "https://api.github.com/users/mamalos/events{/privacy}", "received_events_url": "https://api.github.com/users/mamalos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 65183470, "node_id": "MDU6TGFiZWw2NTE4MzQ3MA==", "url": "https://api.github.com/repos/marshmallow-code/marshmallow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-19T09:01:53Z", "updated_at": "2019-09-26T08:19:18Z", "closed_at": "2019-09-25T19:02:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nSorry for the long subject, I couldn't think of something shorter and descriptive enough...:)\r\n\r\nSince **marshmallow** v.3.x, **marshmallow** integration with **cornice** has been a bit cumbersome, so I'm trying to resolve the issues that have been risen.\r\n\r\nOne of these issues is that some code fails in cornice when a **ValidationError** is raised from within a `@validates_schema` decorator and instead of passing a string when calling **ValidationError**, a `dict` is passed.\r\n\r\nMore specifically let's consider the following code:\r\n```python\r\nfrom marshmallow import Schema, validates_schema\r\n\r\nclass UserSchema(Schema):  \r\n     email = fields.Str(required=True)  \r\n\r\n     @validates_schema  \r\n     def validate_email(self, data, **kwargs):  \r\n         if len(data['email']) < 15:  \r\n             raise ValidationError({'email': 'Email should be greater than 15'})\r\n\r\n_user = {'email': 'a@c', 'name': 'babakis'}\r\nUserSchema().validate(_user)\r\n```\r\n\r\nWhen using marshmallow v.2.20.5 the above returns:\r\n```{'_schema': [{'email': 'Email should be greater than 15'}]}```\r\n\r\nwhereas when using marshmallow v.3.2  it returns:\r\n```{'email': 'Email should be greater than 15'}```\r\n\r\nThis might be sort-of documented in recent documentation, where it mentions that `If a dict, the keys are subitems and the values are error messages.`, but since I'm not exactly sure if that's the meaning of the documentation, and since this breaks some cornice tests, I would like to verify\r\nif this difference is expected behaviour in order to change the relevant code in cornice.\r\n\r\nThanks.\r\n", "performed_via_github_app": null, "score": 1.0}]}