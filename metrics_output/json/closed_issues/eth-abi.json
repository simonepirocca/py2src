{"total_count": 37, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ethereum/eth-abi/issues/135", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/135/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/135/events", "html_url": "https://github.com/ethereum/eth-abi/issues/135", "id": 522392267, "node_id": "MDU6SXNzdWU1MjIzOTIyNjc=", "number": 135, "title": "Modelling of trailing zeros in ContextFramesBytesIO", "user": {"login": "JoranHonig", "id": 8710366, "node_id": "MDQ6VXNlcjg3MTAzNjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/8710366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoranHonig", "html_url": "https://github.com/JoranHonig", "followers_url": "https://api.github.com/users/JoranHonig/followers", "following_url": "https://api.github.com/users/JoranHonig/following{/other_user}", "gists_url": "https://api.github.com/users/JoranHonig/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoranHonig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoranHonig/subscriptions", "organizations_url": "https://api.github.com/users/JoranHonig/orgs", "repos_url": "https://api.github.com/users/JoranHonig/repos", "events_url": "https://api.github.com/users/JoranHonig/events{/privacy}", "received_events_url": "https://api.github.com/users/JoranHonig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-13T18:20:06Z", "updated_at": "2020-02-19T08:37:24Z", "closed_at": "2020-02-19T08:37:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* Version: 2.0.0\r\n\r\n### What was wrong?\r\nThe eth-abi decoder models the calldata of a transaction as a finite length datastream.\r\nHowever, the evm models calldata as an infinite length bytestream. \r\nReturning zero bytes when the transaction does not specify the bytes requested.\r\n\r\nThe tests in this repository do seem to indicate that the decoder is intentionally modelled this way.\r\nI'm not sure why this is the case. It'd be cool if there is an additional option to model the bytestream as infinite.\r\n\r\n### How can it be fixed?\r\n\r\nI have a local branch where I adapted the `ContextFramesBytesIO` object to mimic the behaviour of calldata in the evm. \r\nI'm happy to submit a pr if this is something that could be added to the repository.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/134", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/134/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/134/events", "html_url": "https://github.com/ethereum/eth-abi/issues/134", "id": 491815574, "node_id": "MDU6SXNzdWU0OTE4MTU1NzQ=", "number": 134, "title": "Doctest failed on the version bump to v2", "user": {"login": "carver", "id": 205327, "node_id": "MDQ6VXNlcjIwNTMyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/205327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carver", "html_url": "https://github.com/carver", "followers_url": "https://api.github.com/users/carver/followers", "following_url": "https://api.github.com/users/carver/following{/other_user}", "gists_url": "https://api.github.com/users/carver/gists{/gist_id}", "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carver/subscriptions", "organizations_url": "https://api.github.com/users/carver/orgs", "repos_url": "https://api.github.com/users/carver/repos", "events_url": "https://api.github.com/users/carver/events{/privacy}", "received_events_url": "https://api.github.com/users/carver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-10T17:55:51Z", "updated_at": "2019-11-27T16:14:12Z", "closed_at": "2019-11-26T19:46:17Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nThe CI build badge is showing red in the readme, because of this failure:\r\nhttps://circleci.com/gh/ethereum/eth-abi/2086?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link\r\n\r\ncc @davesque\r\n\r\n### How can it be fixed?\r\n\r\n:man_shrugging: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/132", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/132/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/132/events", "html_url": "https://github.com/ethereum/eth-abi/issues/132", "id": 477989795, "node_id": "MDU6SXNzdWU0Nzc5ODk3OTU=", "number": 132, "title": "`Codec.is_encodable` returns `True` for `bytes32` on empty text string", "user": {"login": "pipermerriam", "id": 824194, "node_id": "MDQ6VXNlcjgyNDE5NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/824194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pipermerriam", "html_url": "https://github.com/pipermerriam", "followers_url": "https://api.github.com/users/pipermerriam/followers", "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}", "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions", "organizations_url": "https://api.github.com/users/pipermerriam/orgs", "repos_url": "https://api.github.com/users/pipermerriam/repos", "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}", "received_events_url": "https://api.github.com/users/pipermerriam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-07T15:13:11Z", "updated_at": "2019-08-07T15:19:49Z", "closed_at": "2019-08-07T15:19:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\n```python\r\n>>> codec.is_encodable('bytes32', '')\r\nTrue\r\n```\r\n\r\nThis is surprising behavior.\r\n\r\n### How can it be fixed?\r\n\r\ndunno yet.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/131", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/131/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/131/events", "html_url": "https://github.com/ethereum/eth-abi/issues/131", "id": 439940661, "node_id": "MDU6SXNzdWU0Mzk5NDA2NjE=", "number": 131, "title": "AttributeError: type object 'Callable' has no attribute '_abc_registry'", "user": {"login": "gt299792", "id": 19958475, "node_id": "MDQ6VXNlcjE5OTU4NDc1", "avatar_url": "https://avatars1.githubusercontent.com/u/19958475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gt299792", "html_url": "https://github.com/gt299792", "followers_url": "https://api.github.com/users/gt299792/followers", "following_url": "https://api.github.com/users/gt299792/following{/other_user}", "gists_url": "https://api.github.com/users/gt299792/gists{/gist_id}", "starred_url": "https://api.github.com/users/gt299792/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gt299792/subscriptions", "organizations_url": "https://api.github.com/users/gt299792/orgs", "repos_url": "https://api.github.com/users/gt299792/repos", "events_url": "https://api.github.com/users/gt299792/events{/privacy}", "received_events_url": "https://api.github.com/users/gt299792/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-03T08:28:28Z", "updated_at": "2020-08-04T09:56:54Z", "closed_at": "2019-05-03T22:56:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Version: 1.3.0\r\n* Python: 3.7\r\n* OS: osx/linux/win\r\n\r\n* result of `pip freeze | grep eth`\r\n\r\neth-abi==1.3.0\r\neth-account==0.3.0\r\neth-hash==0.2.0\r\neth-keyfile==0.5.1\r\neth-keys==0.2.0b3\r\neth-rlp==0.1.2\r\neth-typing==2.1.0\r\neth-utils==1.5.2\r\nprometheus-client==0.3.1\r\npyethereum==1.0.0\r\n\r\n\r\n\r\n### What was wrong?\r\n\r\nPlease include any of the following that are applicable:\r\n\r\n* The code which produced the error\r\n```\r\nimport eth_abi\r\n```\r\n\r\n* The full output of the error\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Python37\\Lib\\site-packages\\eth_abi\\__init__.py\", line 3, in <module>\r\n    from eth_abi.abi import (  # NOQA\r\n  File \"C:\\Python37\\Lib\\site-packages\\eth_abi\\abi.py\", line 4, in <module>\r\n    from eth_utils import (\r\n  File \"C:\\Python37\\Lib\\site-packages\\eth_utils\\__init__.py\", line 5, in <module>\r\n    from .abi import (  # noqa: F401\r\n  File \"C:\\Python37\\Lib\\site-packages\\eth_utils\\abi.py\", line 1, in <module>\r\n    from typing import Any, Dict\r\n  File \"C:\\Python37\\Lib\\site-packages\\typing.py\", line 1356, in <module>\r\n    class Callable(extra=collections_abc.Callable, metaclass=CallableMeta):\r\n  File \"C:\\Python37\\Lib\\site-packages\\typing.py\", line 1004, in __new__\r\n    self._abc_registry = extra._abc_registry\r\nAttributeError: type object 'Callable' has no attribute '_abc_registry'\r\n```\r\n\r\n### How can it be fixed?\r\n\r\nFill this section in if you know how this could or should be fixed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/126", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/126/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/126/events", "html_url": "https://github.com/ethereum/eth-abi/issues/126", "id": 424492999, "node_id": "MDU6SXNzdWU0MjQ0OTI5OTk=", "number": 126, "title": "Capitalized Types not handled properly", "user": {"login": "Bhargavasomu", "id": 15922456, "node_id": "MDQ6VXNlcjE1OTIyNDU2", "avatar_url": "https://avatars0.githubusercontent.com/u/15922456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bhargavasomu", "html_url": "https://github.com/Bhargavasomu", "followers_url": "https://api.github.com/users/Bhargavasomu/followers", "following_url": "https://api.github.com/users/Bhargavasomu/following{/other_user}", "gists_url": "https://api.github.com/users/Bhargavasomu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bhargavasomu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bhargavasomu/subscriptions", "organizations_url": "https://api.github.com/users/Bhargavasomu/orgs", "repos_url": "https://api.github.com/users/Bhargavasomu/repos", "events_url": "https://api.github.com/users/Bhargavasomu/events{/privacy}", "received_events_url": "https://api.github.com/users/Bhargavasomu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-23T11:55:21Z", "updated_at": "2019-03-24T04:50:08Z", "closed_at": "2019-03-24T04:50:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "### What was wrong?\r\nIf the `type` is given as capital letter, then the code is not working (some `grammar` error). Please see the following code.\r\n```\r\nfrom eth_abi.grammar import parse\r\nobj = parse(\"person[2]\")\r\nobj1 = parse(\"Person[2]\")\r\n---------------------------------------------------------------------------\r\nParseError                                Traceback (most recent call last)\r\n~/ethereum/eth-account/venv/lib/python3.6/site-packages/eth_abi/grammar.py in parse(self, type_str)\r\n    122         try:\r\n--> 123             return super().parse(type_str)\r\n    124         except parsimonious.ParseError as e:\r\n\r\n~/ethereum/eth-account/venv/lib/python3.6/site-packages/parsimonious/nodes.py in parse(self, text, pos)\r\n    253         \"\"\"\r\n--> 254         return self._parse_or_match(text, pos, 'parse')\r\n    255 \r\n\r\n~/ethereum/eth-account/venv/lib/python3.6/site-packages/parsimonious/nodes.py in _parse_or_match(self, text, pos, method_name)\r\n    288                     method=method_name))\r\n--> 289         return self.visit(getattr(self.grammar, method_name)(text, pos=pos))\r\n    290 \r\n\r\n~/ethereum/eth-account/venv/lib/python3.6/site-packages/parsimonious/grammar.py in parse(self, text, pos)\r\n    114         self._check_default_rule()\r\n--> 115         return self.default_rule.parse(text, pos=pos)\r\n    116 \r\n\r\n~/ethereum/eth-account/venv/lib/python3.6/site-packages/parsimonious/expressions.py in parse(self, text, pos)\r\n    119         \"\"\"\r\n--> 120         node = self.match(text, pos=pos)\r\n    121         if node.end < len(text):\r\n\r\n~/ethereum/eth-account/venv/lib/python3.6/site-packages/parsimonious/expressions.py in match(self, text, pos)\r\n    136         if node is None:\r\n--> 137             raise error\r\n    138         return node\r\n\r\nParseError: Rule 'type' didn't match at 'Person[]' (line 1, column 1).\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nParseError                                Traceback (most recent call last)\r\n<ipython-input-6-ed74617bc5cf> in <module>\r\n----> 1 obj = parse(\"Person[]\")\r\n\r\n~/ethereum/eth-account/venv/lib/python3.6/site-packages/eth_abi/grammar.py in parse(self, type_str)\r\n    123             return super().parse(type_str)\r\n    124         except parsimonious.ParseError as e:\r\n--> 125             raise ParseError(e.text, e.pos, e.expr)\r\n    126 \r\n    127 \r\n\r\n```\r\n\r\n### How can it be fixed?\r\n\r\nFill this section in if you know how this could or should be fixed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/125", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/125/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/125/events", "html_url": "https://github.com/ethereum/eth-abi/issues/125", "id": 423875249, "node_id": "MDU6SXNzdWU0MjM4NzUyNDk=", "number": 125, "title": "Add utility checking functions for determining if a type is known.", "user": {"login": "pipermerriam", "id": 824194, "node_id": "MDQ6VXNlcjgyNDE5NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/824194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pipermerriam", "html_url": "https://github.com/pipermerriam", "followers_url": "https://api.github.com/users/pipermerriam/followers", "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}", "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions", "organizations_url": "https://api.github.com/users/pipermerriam/orgs", "repos_url": "https://api.github.com/users/pipermerriam/repos", "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}", "received_events_url": "https://api.github.com/users/pipermerriam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-03-21T18:18:03Z", "updated_at": "2019-05-31T04:19:38Z", "closed_at": "2019-05-31T04:19:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Inspired by: https://github.com/ethereum/eth-account/pull/57#discussion_r267862695\r\n\r\n### What was wrong?\r\n\r\nThe `is_encodable` function can raise an exception if the type is unknown.  This is probably un-avoidable, but it does leave 3rd party libraries in an awkward position when they *might* be dealing with an unknown or invalid type string.\r\n\r\n### How can it be fixed?\r\n\r\nNot sure which of these is the right API but adding one or both of the following utilities.\r\n\r\n1. registry.is_valid_type(type_str) -> return `True/False` (never raises exception)\r\n2. registry.validate_type(type_str) -> returns `None` or raises `eth_utils.ValidationError`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/119", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/119/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/119/events", "html_url": "https://github.com/ethereum/eth-abi/issues/119", "id": 412578805, "node_id": "MDU6SXNzdWU0MTI1Nzg4MDU=", "number": 119, "title": "Update/add documentation for `eth_abi.grammar` module", "user": {"login": "davesque", "id": 791437, "node_id": "MDQ6VXNlcjc5MTQzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/791437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davesque", "html_url": "https://github.com/davesque", "followers_url": "https://api.github.com/users/davesque/followers", "following_url": "https://api.github.com/users/davesque/following{/other_user}", "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davesque/subscriptions", "organizations_url": "https://api.github.com/users/davesque/orgs", "repos_url": "https://api.github.com/users/davesque/repos", "events_url": "https://api.github.com/users/davesque/events{/privacy}", "received_events_url": "https://api.github.com/users/davesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-20T18:59:27Z", "updated_at": "2019-02-21T22:00:23Z", "closed_at": "2019-02-21T22:00:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nAs mentioned in PR #118 , the `eth_abi.grammar` module is starting to be used in web3.py.  This means it's beginning to look more like public API.\r\n\r\n### How can it be fixed?\r\n\r\nWe should write a section in the docs dedicated to use of the parsing and grammar facilities and add docstrings and maybe type annotations where needed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/117", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/117/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/117/events", "html_url": "https://github.com/ethereum/eth-abi/issues/117", "id": 401875114, "node_id": "MDU6SXNzdWU0MDE4NzUxMTQ=", "number": 117, "title": "decode_abi fails with Overflow error but decode_single does not", "user": {"login": "ankitchiplunkar", "id": 5904910, "node_id": "MDQ6VXNlcjU5MDQ5MTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5904910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ankitchiplunkar", "html_url": "https://github.com/ankitchiplunkar", "followers_url": "https://api.github.com/users/ankitchiplunkar/followers", "following_url": "https://api.github.com/users/ankitchiplunkar/following{/other_user}", "gists_url": "https://api.github.com/users/ankitchiplunkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/ankitchiplunkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ankitchiplunkar/subscriptions", "organizations_url": "https://api.github.com/users/ankitchiplunkar/orgs", "repos_url": "https://api.github.com/users/ankitchiplunkar/repos", "events_url": "https://api.github.com/users/ankitchiplunkar/events{/privacy}", "received_events_url": "https://api.github.com/users/ankitchiplunkar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-22T17:33:53Z", "updated_at": "2019-01-24T21:15:58Z", "closed_at": "2019-01-23T19:47:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Version: '1.3.0'\r\n* Python: 3.6.7\r\n* OS: linux\r\n\r\n\r\n### What was wrong?\r\nCannot decode the first event of this transaction using `decode_abi` but can decode using `decode_single`: https://etherscan.io/tx/0xe331b086561bad5554503115728123d93b8cb64f89b71d94e90876127c773379#eventlog\r\n\r\nPlease include any of the following that are applicable:\r\n\r\n#### Data of the event\r\n```\r\n>>> from eth_abi import decode_abi, decode_single\r\n>>> from hexbytes import HexBytes\r\n>>> variables = '0x000000000000000000000000f232cbab76d7e90911cd2573f1d8afe70d0c9f9b0000000000000000000000006ccc8faebd1dedd14831e80435c82930bec0db770000000000000000000000000000000000000000000000d3d6b463e32cc9400000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000'\r\n>>> b_variables = HexBytes(variables)\r\n>>> types = ['address', 'address', 'uint256', 'bytes']\r\n````\r\n#### Tried decoding using `decode_abi`\r\n``` \r\n>>> decode_abi(types, b_variables)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/ankit/venv/lib/python3.6/site-packages/eth_abi/abi.py\", line 96, in decode_abi\r\n    return decoder(stream)\r\n  File \"/home/ankit/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 118, in __call__\r\n    return self.decode(stream)\r\n  File \"/home/ankit/venv/lib/python3.6/site-packages/eth_utils/functional.py\", line 46, in inner\r\n    return callback(fn(*args, **kwargs))\r\n  File \"/home/ankit/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 164, in decode\r\n    yield decoder(stream)\r\n  File \"/home/ankit/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 118, in __call__\r\n    return self.decode(stream)\r\n  File \"/home/ankit/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 136, in decode\r\n    value = self.tail_decoder(stream)\r\n  File \"/home/ankit/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 118, in __call__\r\n    return self.decode(stream)\r\n  File \"/home/ankit/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 186, in decode\r\n    raw_data = self.read_data_from_stream(stream)\r\n  File \"/home/ankit/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 583, in read_data_from_stream\r\n    data = stream.read(padded_length)\r\nOverflowError: Python int too large to convert to C ssize_t\r\n```\r\n#### Can decode using `decode_single`\r\n```\r\n>>> decode_single('address', b_variables[:32])\r\n'0xf232cbab76d7e90911cd2573f1d8afe70d0c9f9b'\r\n>>> decode_single('address', b_variables[32:64])\r\n'0x6ccc8faebd1dedd14831e80435c82930bec0db77'\r\n>>> decode_single('uint256', b_variables[64:96])\r\n3907734100000000000000\r\n>>> decode_single('bytes', b_variables[96:])\r\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\r\n```\r\n\r\n### How can it be fixed?\r\n\r\nDon't know", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/116", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/116/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/116/events", "html_url": "https://github.com/ethereum/eth-abi/issues/116", "id": 401073983, "node_id": "MDU6SXNzdWU0MDEwNzM5ODM=", "number": 116, "title": "\"Padding bytes were not empty\" when parsing bytes16 argument", "user": {"login": "Destiner", "id": 4247901, "node_id": "MDQ6VXNlcjQyNDc5MDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4247901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Destiner", "html_url": "https://github.com/Destiner", "followers_url": "https://api.github.com/users/Destiner/followers", "following_url": "https://api.github.com/users/Destiner/following{/other_user}", "gists_url": "https://api.github.com/users/Destiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/Destiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Destiner/subscriptions", "organizations_url": "https://api.github.com/users/Destiner/orgs", "repos_url": "https://api.github.com/users/Destiner/repos", "events_url": "https://api.github.com/users/Destiner/events{/privacy}", "received_events_url": "https://api.github.com/users/Destiner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-20T08:16:42Z", "updated_at": "2019-01-22T20:34:04Z", "closed_at": "2019-01-22T20:34:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Version: 1.3.0 and 2.0.0b4\r\n* Python: 3.7\r\n* OS: macOS 10.14.2\r\n\r\n### What was wrong?\r\n\r\nI tried to parse input of transaction and it gave me an error. Tx hash is [0xfc70289a7d33238c1d45fa62b7cd1f150e8951264025f782f87c5ad09b5838c9](https://etherscan.io/tx/0xfc70289a7d33238c1d45fa62b7cd1f150e8951264025f782f87c5ad09b5838c9).\r\n\r\nSource of this contract is publicly known, and both Etherscan and 4bytes show the same signature for that method_id (0x35adc0c5).\r\n\r\nHowever, when I try to decode that particular transaction with that ABI (`bytes16,address,address,uint256,uint16`), the eth-abi gives me an error. I believe that this is due to the fact that the first argument is bytes16 while the input looks like bytes32. Moreover, replacing last 16 bytes with zeroes solves the problem.\r\n\r\n* The code which produced the error\r\n\r\n```python\r\nfrom eth_abi import decode_abi\r\n\r\nseller_cancel_abi = [\"bytes16\",\"address\",\"address\",\"uint256\",\"uint16\"]\r\ninput_data = '0x35adc0c53039616566623164303162643464343438333039393266386631323132303631000000000000000000000000e144447b7cfc65a1f859a50df6e134548b5a084b00000000000000000000000014965de4057658ca30c4bc9d0411dd9d97b1392e000000000000000000000000000000000000000000000000712d5ff393d900000000000000000000000000000000000000000000000000000000000000000064'\r\ninput_method_data = input_data[10:]\r\ninput_data_bytes = bytes.fromhex(input_method_data)\r\ndecode_abi(seller_cancel_abi, input_data_bytes) # fails\r\n\r\nfixed_input_data = '0x35adc0c53039616566623164303162643464343400000000000000000000000000000000000000000000000000000000e144447b7cfc65a1f859a50df6e134548b5a084b00000000000000000000000014965de4057658ca30c4bc9d0411dd9d97b1392e000000000000000000000000000000000000000000000000712d5ff393d900000000000000000000000000000000000000000000000000000000000000000064'\r\nfixed_input_method_data = fixed_input_data[10:]\r\nfixed_input_data_bytes = bytes.fromhex(fixed_input_method_data)\r\ndecode_abi(seller_cancel_abi, fixed_input_data_bytes) # works fine\r\n```\r\n\r\n* The full output of the error\r\n\r\n\r\n<details>\r\n  <summary>Click to expand</summary>\r\n  ---------------------------------------------------------------------------\r\n\r\nNonEmptyPaddingBytes                      Traceback (most recent call last)\r\n```\r\n<ipython-input-7-657262f49cdb> in <module>()\r\n      5 input_method_data = input_data[10:]\r\n      6 input_data_bytes = bytes.fromhex(input_method_data)\r\n----> 7 decode_abi(seller_cancel_abi, input_data_bytes)\r\n\r\n~/Files/research/env/lib/python3.7/site-packages/eth_abi/codec.py in decode_abi(self, types, data)\r\n    163         stream = ContextFramesBytesIO(data)\r\n    164 \r\n--> 165         return decoder(stream)\r\n    166 \r\n    167 \r\n\r\n~/Files/research/env/lib/python3.7/site-packages/eth_abi/decoding.py in __call__(self, stream)\r\n    125 \r\n    126     def __call__(self, stream: ContextFramesBytesIO) -> Any:\r\n--> 127         return self.decode(stream)\r\n    128 \r\n    129 \r\n\r\n~/Files/research/env/lib/python3.7/site-packages/eth_utils/functional.py in inner(*args, **kwargs)\r\n     44         @functools.wraps(fn)\r\n     45         def inner(*args, **kwargs) -> T:  # type: ignore\r\n---> 46             return callback(fn(*args, **kwargs))\r\n     47 \r\n     48         return inner\r\n\r\n~/Files/research/env/lib/python3.7/site-packages/eth_abi/decoding.py in decode(self, stream)\r\n    171     def decode(self, stream):\r\n    172         for decoder in self.decoders:\r\n--> 173             yield decoder(stream)\r\n    174 \r\n    175     @parse_tuple_type_str\r\n\r\n~/Files/research/env/lib/python3.7/site-packages/eth_abi/decoding.py in __call__(self, stream)\r\n    125 \r\n    126     def __call__(self, stream: ContextFramesBytesIO) -> Any:\r\n--> 127         return self.decode(stream)\r\n    128 \r\n    129 \r\n\r\n~/Files/research/env/lib/python3.7/site-packages/eth_abi/decoding.py in decode(self, stream)\r\n    196         data, padding_bytes = self.split_data_and_padding(raw_data)\r\n    197         value = self.decoder_fn(data)\r\n--> 198         self.validate_padding_bytes(value, padding_bytes)\r\n    199 \r\n    200         return value\r\n\r\n~/Files/research/env/lib/python3.7/site-packages/eth_abi/decoding.py in validate_padding_bytes(self, value, padding_bytes)\r\n    328         if padding_bytes != b'\\x00' * padding_size:\r\n    329             raise NonEmptyPaddingBytes(\r\n--> 330                 \"Padding bytes were not empty: {0}\".format(repr(padding_bytes))\r\n    331             )\r\n    332 \r\n\r\n**NonEmptyPaddingBytes: Padding bytes were not empty: b'830992f8f1212061'**\r\n```\r\n</details>\r\n\r\n\r\n* Additional info\r\n\r\nHere's another transaction from the same contract that can't be parsed:\r\n0x035b1e59b573ab7f4ec05f235c01b8ac0304c995e542d52ad321b4e2ea796315\r\n\r\nHere's another transaction from similar contract that can't be parsed:\r\n0x7977c27c9312ef4d98f5e42ff0e2774157af4fc3664e5211589721cacd4fbce0\r\n\r\nAll other transactions from these two contracts work fine.\r\n\r\n### How can it be fixed?\r\n\r\nSeems like eth-abi should accept that input even though it seems malformed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/112", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/112/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/112/events", "html_url": "https://github.com/ethereum/eth-abi/issues/112", "id": 388408626, "node_id": "MDU6SXNzdWUzODg0MDg2MjY=", "number": 112, "title": "Request Release of 1.2.3 version", "user": {"login": "javimaravillas", "id": 1310900, "node_id": "MDQ6VXNlcjEzMTA5MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javimaravillas", "html_url": "https://github.com/javimaravillas", "followers_url": "https://api.github.com/users/javimaravillas/followers", "following_url": "https://api.github.com/users/javimaravillas/following{/other_user}", "gists_url": "https://api.github.com/users/javimaravillas/gists{/gist_id}", "starred_url": "https://api.github.com/users/javimaravillas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javimaravillas/subscriptions", "organizations_url": "https://api.github.com/users/javimaravillas/orgs", "repos_url": "https://api.github.com/users/javimaravillas/repos", "events_url": "https://api.github.com/users/javimaravillas/events{/privacy}", "received_events_url": "https://api.github.com/users/javimaravillas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-06T21:37:39Z", "updated_at": "2018-12-06T22:55:07Z", "closed_at": "2018-12-06T22:55:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I request a release of 1.2.3 as https://github.com/ethereum/eth-abi/pull/110 has been merged and it is needed for fixing https://github.com/ethereum/py-evm/issues/1484\r\n\r\n@davesque can you help?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/106", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/106/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/106/events", "html_url": "https://github.com/ethereum/eth-abi/issues/106", "id": 372723290, "node_id": "MDU6SXNzdWUzNzI3MjMyOTA=", "number": 106, "title": "Type hint support broken: missing py.typed", "user": {"login": "feuGeneA", "id": 7883777, "node_id": "MDQ6VXNlcjc4ODM3Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7883777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feuGeneA", "html_url": "https://github.com/feuGeneA", "followers_url": "https://api.github.com/users/feuGeneA/followers", "following_url": "https://api.github.com/users/feuGeneA/following{/other_user}", "gists_url": "https://api.github.com/users/feuGeneA/gists{/gist_id}", "starred_url": "https://api.github.com/users/feuGeneA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feuGeneA/subscriptions", "organizations_url": "https://api.github.com/users/feuGeneA/orgs", "repos_url": "https://api.github.com/users/feuGeneA/repos", "events_url": "https://api.github.com/users/feuGeneA/events{/privacy}", "received_events_url": "https://api.github.com/users/feuGeneA/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-22T22:16:21Z", "updated_at": "2018-10-23T14:59:10Z", "closed_at": "2018-10-23T03:27:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "![image](https://user-images.githubusercontent.com/7883777/47320630-01112b00-d620-11e8-89e8-f96414b83fca.png)\r\n\r\n* Version: 1.2.0\r\n* Python: 3.7\r\n* OS: linux\r\n\r\n\r\n### What was wrong?\r\n\r\nI have a package which uses `eth_abi`, and which lints its code with `mypy`.  Telling `mypy` to ignore the `eth_abi` import (`import ...  # type: ignore`) obviously works fine, but when I remove that `ignore`, I get the following message:\r\n\r\n```\r\ntest.py:13: error: Cannot find module named 'eth_abi'\r\ntest.py:13: note: (Perhaps setting MYPYPATH or using the \"--ignore-missing-imports\" flag would help)\r\n```\r\n\r\nThe line in question is simply:\r\n```\r\nfrom eth_abi import encode_abi\r\n```\r\n### How can it be fixed?\r\n\r\nPer PEP 484, include a file `py.typed` in the package.  In my local environment, I was able to solve the problem by simply doing `touch ~/.pythonz/lib/python3.7/site-packages/eth_abi-1.2.0-py3.7.egg/eth_abi/py.typed`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/103", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/103/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/103/events", "html_url": "https://github.com/ethereum/eth-abi/issues/103", "id": 371150666, "node_id": "MDU6SXNzdWUzNzExNTA2NjY=", "number": 103, "title": "Expose type hints via PEP561", "user": {"login": "pipermerriam", "id": 824194, "node_id": "MDQ6VXNlcjgyNDE5NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/824194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pipermerriam", "html_url": "https://github.com/pipermerriam", "followers_url": "https://api.github.com/users/pipermerriam/followers", "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}", "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions", "organizations_url": "https://api.github.com/users/pipermerriam/orgs", "repos_url": "https://api.github.com/users/pipermerriam/repos", "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}", "received_events_url": "https://api.github.com/users/pipermerriam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-17T15:58:19Z", "updated_at": "2018-10-23T03:27:09Z", "closed_at": "2018-10-23T03:27:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Do as was done in https://github.com/ethereum/eth-typing/pull/10", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/101", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/101/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/101/events", "html_url": "https://github.com/ethereum/eth-abi/issues/101", "id": 369356824, "node_id": "MDU6SXNzdWUzNjkzNTY4MjQ=", "number": 101, "title": "attempting to encode bytes of wrong size produces a misleading error message", "user": {"login": "ldct", "id": 130362, "node_id": "MDQ6VXNlcjEzMDM2Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/130362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldct", "html_url": "https://github.com/ldct", "followers_url": "https://api.github.com/users/ldct/followers", "following_url": "https://api.github.com/users/ldct/following{/other_user}", "gists_url": "https://api.github.com/users/ldct/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldct/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldct/subscriptions", "organizations_url": "https://api.github.com/users/ldct/orgs", "repos_url": "https://api.github.com/users/ldct/repos", "events_url": "https://api.github.com/users/ldct/events{/privacy}", "received_events_url": "https://api.github.com/users/ldct/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1088988077, "node_id": "MDU6TGFiZWwxMDg4OTg4MDc3", "url": "https://api.github.com/repos/ethereum/eth-abi/labels/Good%20First%20Issue", "name": "Good First Issue", "color": "d4c5f9", "default": false, "description": ""}, {"id": 858133213, "node_id": "MDU6TGFiZWw4NTgxMzMyMTM=", "url": "https://api.github.com/repos/ethereum/eth-abi/labels/Good%20for%20Bounty", "name": "Good for Bounty", "color": "5319e7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-12T00:40:04Z", "updated_at": "2018-10-16T22:05:51Z", "closed_at": "2018-10-16T22:05:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Version: 2.0.0b1\r\n* Python: 3.7\r\n* OS: macos\r\n\r\n### What was wrong?\r\n\r\n```\r\n>>> eth_abi.encode_single(\"address\", b\"a\"*20)\r\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00aaaaaaaaaaaaaaaaaaaa'\r\n```\r\n\r\n```\r\n>>> eth_abi.encode_single(\"address\", b\"a\"*21)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/xuanji/gits/cf/plasma-cash/venv/lib/python3.7/site-packages/eth_abi/abi.py\", line 43, in encode_single\r\n    return encoder(arg)\r\n  File \"/Users/xuanji/gits/cf/plasma-cash/venv/lib/python3.7/site-packages/eth_abi/encoding.py\", line 73, in __call__\r\n    return self.encode(value)\r\n  File \"/Users/xuanji/gits/cf/plasma-cash/venv/lib/python3.7/site-packages/eth_abi/encoding.py\", line 178, in encode\r\n    self.validate_value(value)\r\n  File \"/Users/xuanji/gits/cf/plasma-cash/venv/lib/python3.7/site-packages/eth_abi/encoding.py\", line 456, in validate_value\r\n    cls.__name__,\r\neth_abi.exceptions.EncodingTypeError: Value of type <class 'bytes'> cannot be encoded by AddressEncoder\r\n```\r\n\r\ncontrary to what the error message says, `bytes` can be encoded by AddressEncoder\r\n\r\n### How can it be fixed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/96", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/96/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/96/events", "html_url": "https://github.com/ethereum/eth-abi/issues/96", "id": 354526270, "node_id": "MDU6SXNzdWUzNTQ1MjYyNzA=", "number": 96, "title": "Figure out why some hypothesis tests are running too slow", "user": {"login": "carver", "id": 205327, "node_id": "MDQ6VXNlcjIwNTMyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/205327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carver", "html_url": "https://github.com/carver", "followers_url": "https://api.github.com/users/carver/followers", "following_url": "https://api.github.com/users/carver/following{/other_user}", "gists_url": "https://api.github.com/users/carver/gists{/gist_id}", "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carver/subscriptions", "organizations_url": "https://api.github.com/users/carver/orgs", "repos_url": "https://api.github.com/users/carver/repos", "events_url": "https://api.github.com/users/carver/events{/privacy}", "received_events_url": "https://api.github.com/users/carver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-28T00:33:30Z", "updated_at": "2018-08-28T22:17:49Z", "closed_at": "2018-08-28T22:17:49Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nSee the test failure on https://github.com/ethereum/eth-abi/pull/95 and the subsequent patchup: https://github.com/ethereum/eth-abi/pull/95/commits/f0bf403639ceef5c09838037fe48a3029e81386d\r\n\r\n\r\n### How can it be fixed?\r\n\r\n:man_shrugging: \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/94", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/94/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/94/events", "html_url": "https://github.com/ethereum/eth-abi/issues/94", "id": 353032594, "node_id": "MDU6SXNzdWUzNTMwMzI1OTQ=", "number": 94, "title": "Backport dynamic array encoding to v1", "user": {"login": "carver", "id": 205327, "node_id": "MDQ6VXNlcjIwNTMyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/205327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carver", "html_url": "https://github.com/carver", "followers_url": "https://api.github.com/users/carver/followers", "following_url": "https://api.github.com/users/carver/following{/other_user}", "gists_url": "https://api.github.com/users/carver/gists{/gist_id}", "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carver/subscriptions", "organizations_url": "https://api.github.com/users/carver/orgs", "repos_url": "https://api.github.com/users/carver/repos", "events_url": "https://api.github.com/users/carver/events{/privacy}", "received_events_url": "https://api.github.com/users/carver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "carver", "id": 205327, "node_id": "MDQ6VXNlcjIwNTMyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/205327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carver", "html_url": "https://github.com/carver", "followers_url": "https://api.github.com/users/carver/followers", "following_url": "https://api.github.com/users/carver/following{/other_user}", "gists_url": "https://api.github.com/users/carver/gists{/gist_id}", "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carver/subscriptions", "organizations_url": "https://api.github.com/users/carver/orgs", "repos_url": "https://api.github.com/users/carver/repos", "events_url": "https://api.github.com/users/carver/events{/privacy}", "received_events_url": "https://api.github.com/users/carver/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "carver", "id": 205327, "node_id": "MDQ6VXNlcjIwNTMyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/205327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carver", "html_url": "https://github.com/carver", "followers_url": "https://api.github.com/users/carver/followers", "following_url": "https://api.github.com/users/carver/following{/other_user}", "gists_url": "https://api.github.com/users/carver/gists{/gist_id}", "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carver/subscriptions", "organizations_url": "https://api.github.com/users/carver/orgs", "repos_url": "https://api.github.com/users/carver/repos", "events_url": "https://api.github.com/users/carver/events{/privacy}", "received_events_url": "https://api.github.com/users/carver/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-08-22T16:32:27Z", "updated_at": "2018-08-28T22:17:59Z", "closed_at": "2018-08-28T22:17:59Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\n#93 support is not available in a stable version (v1).\r\n\r\n### How can it be fixed?\r\n\r\nBackport #92 to the v1 branch\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/93", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/93/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/93/events", "html_url": "https://github.com/ethereum/eth-abi/issues/93", "id": 351790118, "node_id": "MDU6SXNzdWUzNTE3OTAxMTg=", "number": 93, "title": "Support for arrays of variable length types is broken", "user": {"login": "Arachnid", "id": 17865, "node_id": "MDQ6VXNlcjE3ODY1", "avatar_url": "https://avatars2.githubusercontent.com/u/17865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arachnid", "html_url": "https://github.com/Arachnid", "followers_url": "https://api.github.com/users/Arachnid/followers", "following_url": "https://api.github.com/users/Arachnid/following{/other_user}", "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions", "organizations_url": "https://api.github.com/users/Arachnid/orgs", "repos_url": "https://api.github.com/users/Arachnid/repos", "events_url": "https://api.github.com/users/Arachnid/events{/privacy}", "received_events_url": "https://api.github.com/users/Arachnid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-18T04:43:51Z", "updated_at": "2018-08-22T16:30:26Z", "closed_at": "2018-08-22T05:28:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's the canonical way (per Solidity, at least) to encode `(bytes[](\"0xf8a8fd6d\", \"0xf8a8fd6d\"))`:\r\n\r\n```\r\n0000000000000000000000000000000000000000000000000000000000000020\r\n0000000000000000000000000000000000000000000000000000000000000002\r\n0000000000000000000000000000000000000000000000000000000000000040\r\n0000000000000000000000000000000000000000000000000000000000000080\r\n0000000000000000000000000000000000000000000000000000000000000004\r\nf8a8fd6d00000000000000000000000000000000000000000000000000000000\r\n0000000000000000000000000000000000000000000000000000000000000004\r\nf8a8fd6d00000000000000000000000000000000000000000000000000000000\r\n```\r\n\r\nBroken down:\r\n\r\n - 0x00: A head component, consisting of an offset for the tail data (0x20)\r\n - 0x20: The tail of the array, specifying its length (2)\r\n - 0x40: The head component of the first element of the array: the offset for the tail data, relative to the start of the current tail data (0x40 + 0x40 = 0x80)\r\n - 0x60: The head component of the first element of the array: the offset for the tail data, relative to the start of the current tail data (0x80 + 0x40 = 0xC0)\r\n - 0x80: The length of the first array element (4)\r\n - 0xA0: The first array element (0xf8a8fd6d)\r\n - 0xC0: The length of the second array element (4)\r\n - 0xE0: The second array element (0xf8a8fd6d)\r\n\r\nThis is most easily thought of as a recursive encoding: The tail data for the first (and in this case, only) element of the ABI is the entire ABI encoding of that element.\r\n\r\nIn contrast, this library presently produces the current output:\r\n\r\n```\r\n0000000000000000000000000000000000000000000000000000000000000020\r\n0000000000000000000000000000000000000000000000000000000000000002\r\n0000000000000000000000000000000000000000000000000000000000000004\r\nf8a8fd6d00000000000000000000000000000000000000000000000000000000\r\n0000000000000000000000000000000000000000000000000000000000000004\r\nf8a8fd6d00000000000000000000000000000000000000000000000000000000\r\n```\r\n\r\nThe head element, and the length of the array are correct, but then array elements are packed tightly, without the correct head/tail recursive encoding.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/91", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/91/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/91/events", "html_url": "https://github.com/ethereum/eth-abi/issues/91", "id": 349484258, "node_id": "MDU6SXNzdWUzNDk0ODQyNTg=", "number": 91, "title": "Unable to decode uint256 when response is 0", "user": {"login": "Netherdrake", "id": 3516903, "node_id": "MDQ6VXNlcjM1MTY5MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3516903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Netherdrake", "html_url": "https://github.com/Netherdrake", "followers_url": "https://api.github.com/users/Netherdrake/followers", "following_url": "https://api.github.com/users/Netherdrake/following{/other_user}", "gists_url": "https://api.github.com/users/Netherdrake/gists{/gist_id}", "starred_url": "https://api.github.com/users/Netherdrake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Netherdrake/subscriptions", "organizations_url": "https://api.github.com/users/Netherdrake/orgs", "repos_url": "https://api.github.com/users/Netherdrake/repos", "events_url": "https://api.github.com/users/Netherdrake/events{/privacy}", "received_events_url": "https://api.github.com/users/Netherdrake/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-10T11:43:24Z", "updated_at": "2018-08-10T11:51:03Z", "closed_at": "2018-08-10T11:50:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Version: eth-abi: 1.1.1, web3: 4.5.0\r\n* Python: 3.6.5\r\n\r\n### What was wrong?\r\nCalling an ERC20 `balanceOf` will blow up if balance is 0.\r\n\r\n```\r\n_______________________________ test_historic_view_token_balance _______________________________\r\n\r\nweb3 = <web3.main.Web3 object at 0x7f2029a5b860>\r\naddress = '0xFBCe7c17608eBd5640313eCf4d2ff09B6726bAB9', normalizers = ()\r\nfunction_identifier = 'balanceOf'\r\ntransaction = {'to': '0xFBCe7c17608eBd5640313eCf4d2ff09B6726bAB9'}, block_id = 5876634\r\ncontract_abi = [{'constant': True, 'inputs': [], 'name': 'totalSupply', 'outputs': [{'name': '', 'type': 'uint256'}], ...}, {'constan...s'}, {'name': 'guy', 'type': 'address'}], 'name': 'allowance', 'outputs': [{'name': '', 'type': 'uint256'}], ...}, ...]\r\nfn_abi = {'constant': True, 'inputs': [{'name': 'src', 'type': 'address'}], 'name': 'balanceOf', 'outputs': [{'name': '', 'type': 'uint256'}], ...}\r\nargs = ('0xaAF3FFEE9d4C976aA8d0CB1bb84c3C90ee6E9118',), kwargs = {}\r\ncall_transaction = {'data': '0x70a08231000000000000000000000000aaf3ffee9d4c976aa8d0cb1bb84c3c90ee6e9118', 'to': '0xFBCe7c17608eBd5640313eCf4d2ff09B6726bAB9'}\r\nreturn_data = HexBytes('0x'), output_types = ['uint256'], is_missing_code_error = False\r\nmsg = \"Could not decode contract function call balanceOf return data b'' for output_types ['uint256']\"\r\n\r\n    def call_contract_function(\r\n            web3,\r\n            address,\r\n            normalizers,\r\n            function_identifier,\r\n            transaction,\r\n            block_id=None,\r\n            contract_abi=None,\r\n            fn_abi=None,\r\n            *args,\r\n            **kwargs):\r\n        \"\"\"\r\n        Helper function for interacting with a contract function using the\r\n        `eth_call` API.\r\n        \"\"\"\r\n        call_transaction = prepare_transaction(\r\n            address,\r\n            web3,\r\n            fn_identifier=function_identifier,\r\n            contract_abi=contract_abi,\r\n            fn_abi=fn_abi,\r\n            transaction=transaction,\r\n            fn_args=args,\r\n            fn_kwargs=kwargs,\r\n        )\r\n    \r\n        if block_id is None:\r\n            return_data = web3.eth.call(call_transaction)\r\n        else:\r\n            return_data = web3.eth.call(call_transaction, block_identifier=block_id)\r\n    \r\n        if fn_abi is None:\r\n            fn_abi = find_matching_fn_abi(contract_abi, function_identifier, args, kwargs)\r\n    \r\n        output_types = get_abi_output_types(fn_abi)\r\n    \r\n        try:\r\n>           output_data = decode_abi(output_types, return_data)\r\n\r\n../../../.pyenv/versions/3.6.5/envs/general/lib/python3.6/site-packages/web3/contract.py:1363: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ntypes = ['uint256'], data = HexBytes('0x')\r\n\r\n    def decode_abi(types, data):\r\n        if not is_bytes(data):\r\n            raise TypeError(\"The `data` value must be of bytes type.  Got {0}\".format(type(data)))\r\n    \r\n        decoders = [\r\n            registry.get_decoder(type_str)\r\n            for type_str in types\r\n        ]\r\n    \r\n        decoder = TupleDecoder(decoders=decoders)\r\n        stream = ContextFramesBytesIO(data)\r\n    \r\n>       return decoder(stream)\r\n\r\n../../../.pyenv/versions/3.6.5/envs/general/lib/python3.6/site-packages/eth_abi/abi.py:96: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <eth_abi.decoding.TupleDecoder object at 0x7f2033b002b0>\r\nstream = <eth_abi.decoding.ContextFramesBytesIO object at 0x7f2029cb2150>\r\n\r\n    def __call__(self, stream):\r\n>       return self.decode(stream)\r\n\r\n../../../.pyenv/versions/3.6.5/envs/general/lib/python3.6/site-packages/eth_abi/decoding.py:118: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nargs = (<eth_abi.decoding.TupleDecoder object at 0x7f2033b002b0>, <eth_abi.decoding.ContextFramesBytesIO object at 0x7f2029cb2150>)\r\nkwargs = {}\r\n\r\n    @functools.wraps(fn)\r\n    def inner(*args, **kwargs):\r\n>       return callback(fn(*args, **kwargs))\r\n\r\n../../../.pyenv/versions/3.6.5/envs/general/lib/python3.6/site-packages/eth_utils/functional.py:22: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <eth_abi.decoding.TupleDecoder object at 0x7f2033b002b0>\r\nstream = <eth_abi.decoding.ContextFramesBytesIO object at 0x7f2029cb2150>\r\n\r\n    @to_tuple\r\n    def decode(self, stream):\r\n        for decoder in self.decoders:\r\n>           yield decoder(stream)\r\n\r\n../../../.pyenv/versions/3.6.5/envs/general/lib/python3.6/site-packages/eth_abi/decoding.py:164: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <eth_abi.decoding.UnsignedIntegerDecoder object at 0x7f2029a73518>\r\nstream = <eth_abi.decoding.ContextFramesBytesIO object at 0x7f2029cb2150>\r\n\r\n    def __call__(self, stream):\r\n>       return self.decode(stream)\r\n\r\n../../../.pyenv/versions/3.6.5/envs/general/lib/python3.6/site-packages/eth_abi/decoding.py:118: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <eth_abi.decoding.UnsignedIntegerDecoder object at 0x7f2029a73518>\r\nstream = <eth_abi.decoding.ContextFramesBytesIO object at 0x7f2029cb2150>\r\n\r\n    def decode(self, stream):\r\n>       raw_data = self.read_data_from_stream(stream)\r\n\r\n../../../.pyenv/versions/3.6.5/envs/general/lib/python3.6/site-packages/eth_abi/decoding.py:186: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <eth_abi.decoding.UnsignedIntegerDecoder object at 0x7f2029a73518>\r\nstream = <eth_abi.decoding.ContextFramesBytesIO object at 0x7f2029cb2150>\r\n\r\n    def read_data_from_stream(self, stream):\r\n        data = stream.read(self.data_byte_size)\r\n    \r\n        if len(data) != self.data_byte_size:\r\n            raise InsufficientDataBytes(\r\n                \"Tried to read {0} bytes.  Only got {1} bytes\".format(\r\n                    self.data_byte_size,\r\n>                   len(data),\r\n                )\r\n            )\r\nE           eth_abi.exceptions.InsufficientDataBytes: Tried to read 32 bytes.  Only got 0 bytes\r\n\r\n../../../.pyenv/versions/3.6.5/envs/general/lib/python3.6/site-packages/eth_abi/decoding.py:279: InsufficientDataBytes\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\n    def test_historic_view_token_balance():\r\n        assert ETH_CHAIN == 'kovan', 'This test was designed for Kovan chain.'\r\n    \r\n        address = '0xaAF3FFEE9d4C976aA8d0CB1bb84c3C90ee6E9118'\r\n>       assert view_token_balance(address, block_num=5876634) == 0\r\n\r\ntests/core/test_eth.py:36: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nsrc/core/eth.py:101: in view_token_balance\r\n    return instance.functions.balanceOf(address).call(block_identifier=block_num)\r\n../../../.pyenv/versions/3.6.5/envs/general/lib/python3.6/site-packages/web3/contract.py:1106: in call\r\n    **self.kwargs\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nweb3 = <web3.main.Web3 object at 0x7f2029a5b860>\r\naddress = '0xFBCe7c17608eBd5640313eCf4d2ff09B6726bAB9', normalizers = ()\r\nfunction_identifier = 'balanceOf'\r\ntransaction = {'to': '0xFBCe7c17608eBd5640313eCf4d2ff09B6726bAB9'}, block_id = 5876634\r\ncontract_abi = [{'constant': True, 'inputs': [], 'name': 'totalSupply', 'outputs': [{'name': '', 'type': 'uint256'}], ...}, {'constan...s'}, {'name': 'guy', 'type': 'address'}], 'name': 'allowance', 'outputs': [{'name': '', 'type': 'uint256'}], ...}, ...]\r\nfn_abi = {'constant': True, 'inputs': [{'name': 'src', 'type': 'address'}], 'name': 'balanceOf', 'outputs': [{'name': '', 'type': 'uint256'}], ...}\r\nargs = ('0xaAF3FFEE9d4C976aA8d0CB1bb84c3C90ee6E9118',), kwargs = {}\r\ncall_transaction = {'data': '0x70a08231000000000000000000000000aaf3ffee9d4c976aa8d0cb1bb84c3c90ee6e9118', 'to': '0xFBCe7c17608eBd5640313eCf4d2ff09B6726bAB9'}\r\nreturn_data = HexBytes('0x'), output_types = ['uint256'], is_missing_code_error = False\r\nmsg = \"Could not decode contract function call balanceOf return data b'' for output_types ['uint256']\"\r\n\r\n    def call_contract_function(\r\n            web3,\r\n            address,\r\n            normalizers,\r\n            function_identifier,\r\n            transaction,\r\n            block_id=None,\r\n            contract_abi=None,\r\n            fn_abi=None,\r\n            *args,\r\n            **kwargs):\r\n        \"\"\"\r\n        Helper function for interacting with a contract function using the\r\n        `eth_call` API.\r\n        \"\"\"\r\n        call_transaction = prepare_transaction(\r\n            address,\r\n            web3,\r\n            fn_identifier=function_identifier,\r\n            contract_abi=contract_abi,\r\n            fn_abi=fn_abi,\r\n            transaction=transaction,\r\n            fn_args=args,\r\n            fn_kwargs=kwargs,\r\n        )\r\n    \r\n        if block_id is None:\r\n            return_data = web3.eth.call(call_transaction)\r\n        else:\r\n            return_data = web3.eth.call(call_transaction, block_identifier=block_id)\r\n    \r\n        if fn_abi is None:\r\n            fn_abi = find_matching_fn_abi(contract_abi, function_identifier, args, kwargs)\r\n    \r\n        output_types = get_abi_output_types(fn_abi)\r\n    \r\n        try:\r\n            output_data = decode_abi(output_types, return_data)\r\n        except DecodingError as e:\r\n            # Provide a more helpful error message than the one provided by\r\n            # eth-abi-utils\r\n            is_missing_code_error = (\r\n                return_data in ACCEPTABLE_EMPTY_STRINGS and\r\n                web3.eth.getCode(address) in ACCEPTABLE_EMPTY_STRINGS\r\n            )\r\n            if is_missing_code_error:\r\n                msg = (\r\n                    \"Could not transact with/call contract function, is contract \"\r\n                    \"deployed correctly and chain synced?\"\r\n                )\r\n            else:\r\n                msg = (\r\n                    \"Could not decode contract function call {} return data {} for \"\r\n                    \"output_types {}\".format(\r\n                        function_identifier,\r\n                        return_data,\r\n                        output_types\r\n                    )\r\n                )\r\n>           raise BadFunctionCallOutput(msg) from e\r\nE           web3.exceptions.BadFunctionCallOutput: Could not decode contract function call balanceOf return data b'' for output_types ['uint256']\r\n\r\n../../../.pyenv/versions/3.6.5/envs/general/lib/python3.6/site-packages/web3/contract.py:1385: BadFunctionCallOutput\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/85", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/85/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/85/events", "html_url": "https://github.com/ethereum/eth-abi/issues/85", "id": 345030686, "node_id": "MDU6SXNzdWUzNDUwMzA2ODY=", "number": 85, "title": "Remove `process_type` utility function in favor of `grammar.parse`", "user": {"login": "davesque", "id": 791437, "node_id": "MDQ6VXNlcjc5MTQzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/791437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davesque", "html_url": "https://github.com/davesque", "followers_url": "https://api.github.com/users/davesque/followers", "following_url": "https://api.github.com/users/davesque/following{/other_user}", "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davesque/subscriptions", "organizations_url": "https://api.github.com/users/davesque/orgs", "repos_url": "https://api.github.com/users/davesque/repos", "events_url": "https://api.github.com/users/davesque/events{/privacy}", "received_events_url": "https://api.github.com/users/davesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-07-26T22:44:06Z", "updated_at": "2018-08-30T19:12:44Z", "closed_at": "2018-08-30T19:11:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nThe `process_type` utility function (found [here](https://github.com/ethereum/eth-abi/blob/master/eth_abi/utils/parsing.py#L11)) is left over from the previous style of parsing type strings.  The `parse` function in the `grammar` module (found [here](https://github.com/ethereum/eth-abi/blob/master/eth_abi/grammar.py#L357)) provides the same functionality and is more extensible.\r\n\r\n### How can it be fixed?\r\n\r\nWe should remove the `process_type` function in favor of the `grammar.parse` function.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/81", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/81/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/81/events", "html_url": "https://github.com/ethereum/eth-abi/issues/81", "id": 340450749, "node_id": "MDU6SXNzdWUzNDA0NTA3NDk=", "number": 81, "title": "decode_abi with a string returns a bytes value", "user": {"login": "carver", "id": 205327, "node_id": "MDQ6VXNlcjIwNTMyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/205327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carver", "html_url": "https://github.com/carver", "followers_url": "https://api.github.com/users/carver/followers", "following_url": "https://api.github.com/users/carver/following{/other_user}", "gists_url": "https://api.github.com/users/carver/gists{/gist_id}", "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carver/subscriptions", "organizations_url": "https://api.github.com/users/carver/orgs", "repos_url": "https://api.github.com/users/carver/repos", "events_url": "https://api.github.com/users/carver/events{/privacy}", "received_events_url": "https://api.github.com/users/carver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-12T00:36:00Z", "updated_at": "2019-11-26T19:51:04Z", "closed_at": "2019-11-26T19:51:04Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "* Version: df3fc70cc0 (master at creation time)\r\n* Python: 3.6\r\n* OS: linux\r\n\r\n\r\n### What was wrong?\r\n\r\nI would expect that decoding an abi value of `string` would return a `str`-typed value.\r\n\r\n```py\r\nIn [1]: from eth_abi import decode_abi\r\n\r\nIn [2]: decode_abi(['string'], b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05mystr\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\r\nOut[2]: (b'mystr',)\r\n```\r\nI expected `('mystr',)`\r\n\r\n### How can it be fixed?\r\n\r\nLast step of decoding should be to call `.decode('utf8')` on a bytes value if using a string decoder.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/80", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/80/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/80/events", "html_url": "https://github.com/ethereum/eth-abi/issues/80", "id": 338000666, "node_id": "MDU6SXNzdWUzMzgwMDA2NjY=", "number": 80, "title": "decoding tx input data", "user": {"login": "owocki", "id": 513929, "node_id": "MDQ6VXNlcjUxMzkyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/513929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/owocki", "html_url": "https://github.com/owocki", "followers_url": "https://api.github.com/users/owocki/followers", "following_url": "https://api.github.com/users/owocki/following{/other_user}", "gists_url": "https://api.github.com/users/owocki/gists{/gist_id}", "starred_url": "https://api.github.com/users/owocki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/owocki/subscriptions", "organizations_url": "https://api.github.com/users/owocki/orgs", "repos_url": "https://api.github.com/users/owocki/repos", "events_url": "https://api.github.com/users/owocki/events{/privacy}", "received_events_url": "https://api.github.com/users/owocki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-03T17:59:54Z", "updated_at": "2018-10-10T17:00:08Z", "closed_at": "2018-10-10T17:00:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Version: 1.1.1\r\n* Python: 3.5\r\n* OS: linux\r\n\r\n\r\n### What was wrong?\r\n\r\nhey yall, question for you\r\n\r\nin https://eth-abi.readthedocs.io/en/stable/decoding.html , i see \r\n\r\n```\r\n>>> decode_single('uint256', '0x0000000000000000000000000000000000000000000000000000000000003039')\r\n12345\r\n```\r\n\r\nthe first param is type, which is labeled uint256, but i see the 2nd param is a `str` despite the first input being `uint256' \r\n\r\nare the docs wrong?\r\n\r\n\r\nfor context, i am trying to use this lib to\r\n\r\n```\r\nipdb> decode_single('uint256','0x1e688c1400000000000000000000000000000000000000000000000000000000000002b7000000000\r\n000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000\r\n0002e516d50413441646154745867423943596a394d5545505578745a4d5a6d334d7469656b676e444a695a793275557a00000000000000000\r\n0000000000000000000' )\r\n*** TypeError: The `data` value must be of bytes type.  Got <class 'str'>\r\n```\r\n\r\nbut i get a type error", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/67", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/67/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/67/events", "html_url": "https://github.com/ethereum/eth-abi/issues/67", "id": 318595871, "node_id": "MDU6SXNzdWUzMTg1OTU4NzE=", "number": 67, "title": "Add support for non-standard packed mode", "user": {"login": "davesque", "id": 791437, "node_id": "MDQ6VXNlcjc5MTQzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/791437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davesque", "html_url": "https://github.com/davesque", "followers_url": "https://api.github.com/users/davesque/followers", "following_url": "https://api.github.com/users/davesque/following{/other_user}", "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davesque/subscriptions", "organizations_url": "https://api.github.com/users/davesque/orgs", "repos_url": "https://api.github.com/users/davesque/repos", "events_url": "https://api.github.com/users/davesque/events{/privacy}", "received_events_url": "https://api.github.com/users/davesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-28T03:25:35Z", "updated_at": "2018-11-19T21:46:35Z", "closed_at": "2018-11-14T22:17:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nWe should add support for non-standard packed mode as described in the solidity ABI spec here: https://solidity.readthedocs.io/en/develop/abi-spec.html#non-standard-packed-mode\r\n\r\n### How can it be fixed?\r\n\r\nI imagine support could be added in the form of another encoding function which could be imported by doing `from eth_abi import encode_packed` or something like it.  There is no need for a corresponding decoding function since the format is ambiguous and not parsable.\r\n\r\nThe `encode_packed` function would probably need to use a separate `packed_registry` as well as separate packed coder classes which would be routed by that registry.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/53", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/53/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/53/events", "html_url": "https://github.com/ethereum/eth-abi/issues/53", "id": 314872792, "node_id": "MDU6SXNzdWUzMTQ4NzI3OTI=", "number": 53, "title": "Use simple coder class instantiation instead of on-the-fly subclassing for particular types?", "user": {"login": "davesque", "id": 791437, "node_id": "MDQ6VXNlcjc5MTQzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/791437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davesque", "html_url": "https://github.com/davesque", "followers_url": "https://api.github.com/users/davesque/followers", "following_url": "https://api.github.com/users/davesque/following{/other_user}", "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davesque/subscriptions", "organizations_url": "https://api.github.com/users/davesque/orgs", "repos_url": "https://api.github.com/users/davesque/repos", "events_url": "https://api.github.com/users/davesque/events{/privacy}", "received_events_url": "https://api.github.com/users/davesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-17T01:30:39Z", "updated_at": "2018-04-21T00:37:49Z", "closed_at": "2018-04-21T00:37:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nCoder classes currently use programmatic subclassing via the built-in `type` function as an intermediate step toward creating a callable which performs the actual encoding/decoding of values:\r\n\r\nhttps://github.com/ethereum/eth-abi/blob/master/eth_abi/encoding.py#L62\r\nhttps://github.com/ethereum/eth-abi/blob/master/eth_abi/decoding.py#L41\r\n\r\n### How can it be fixed?\r\n\r\nWould it be simpler to just pass in coder settings as keyword arguments to an `__init__` method on coder classes?  So something like this:\r\n\r\n```python\r\nclass BaseEncoder(BaseCoder):\r\n    def __init__(self, **kwargs):\r\n        cls = type(self)\r\n        \r\n        for key, value in kwargs.items():\r\n            if not hasattr(cls, key):\r\n                raise AttributeError(\r\n                    'Property {key} not found on {cls_name} class. '\r\n                    '`{cls_name}.__init__` only accepts keyword arguments which are '\r\n                    'present on the {cls_name} class.'.format(\r\n                        key=repr(key),\r\n                        cls_name=cls.__name__,\r\n                    )\r\n                )\r\n            \r\n            setattr(self, key, value)\r\n\r\n        self.validate()\r\n\r\n    ...\r\n```\r\n\r\n### Disclaimer\r\n\r\nIf there's a particular reason that this approach was chosen, then just ignore me \ud83d\ude04 .", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/50", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/50/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/50/events", "html_url": "https://github.com/ethereum/eth-abi/issues/50", "id": 314220114, "node_id": "MDU6SXNzdWUzMTQyMjAxMTQ=", "number": 50, "title": "Should remove support for `ureal` and `real` types?", "user": {"login": "davesque", "id": 791437, "node_id": "MDQ6VXNlcjc5MTQzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/791437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davesque", "html_url": "https://github.com/davesque", "followers_url": "https://api.github.com/users/davesque/followers", "following_url": "https://api.github.com/users/davesque/following{/other_user}", "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davesque/subscriptions", "organizations_url": "https://api.github.com/users/davesque/orgs", "repos_url": "https://api.github.com/users/davesque/repos", "events_url": "https://api.github.com/users/davesque/events{/privacy}", "received_events_url": "https://api.github.com/users/davesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-13T19:11:22Z", "updated_at": "2018-07-27T06:53:15Z", "closed_at": "2018-07-27T06:53:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nI'm not sure if anything is still using the `ureal` and `real` types but they seem pretty old and it would be nice to clear out some code.\r\n\r\n### How can it be fixed?\r\n\r\nShould delete code relating to those types.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/47", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/47/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/47/events", "html_url": "https://github.com/ethereum/eth-abi/issues/47", "id": 312239350, "node_id": "MDU6SXNzdWUzMTIyMzkzNTA=", "number": 47, "title": "Should zero-length tuple types be a valid type?", "user": {"login": "davesque", "id": 791437, "node_id": "MDQ6VXNlcjc5MTQzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/791437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davesque", "html_url": "https://github.com/davesque", "followers_url": "https://api.github.com/users/davesque/followers", "following_url": "https://api.github.com/users/davesque/following{/other_user}", "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davesque/subscriptions", "organizations_url": "https://api.github.com/users/davesque/orgs", "repos_url": "https://api.github.com/users/davesque/repos", "events_url": "https://api.github.com/users/davesque/events{/privacy}", "received_events_url": "https://api.github.com/users/davesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-07T20:16:13Z", "updated_at": "2018-04-09T19:42:28Z", "closed_at": "2018-04-09T19:42:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "*Note: This issue ticket doesn't follow the usual format because I couldn't think of a way to fit it into that.*\r\n\r\nIn the [solidity ABI spec](https://solidity.readthedocs.io/en/develop/abi-spec.html#types), it appears that zero-length tuple types are a valid type:\r\n\r\n> (T1,T2,...,Tn): tuple consisting of the types T1, \u2026, Tn, n >= 0\r\n\r\nIf that was intentional, then should it be assumed that this is some kind of [unit type](https://en.wikipedia.org/wiki/Unit_type) (e.g. like `None` in Python or `()` in Haskell)?\r\n\r\nAdditionally, if it's correct to see zero-length tuples as unit types, how should we support that?  I suppose an encoder for the unit type could just encode `b'\\x00'` in every case and just ignore whatever Python value it is given to encode.  A decoder could also just return `None` by default in every case for the decoded value but still consume and ignore 256 bits of data.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/44", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/44/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/44/events", "html_url": "https://github.com/ethereum/eth-abi/issues/44", "id": 311853582, "node_id": "MDU6SXNzdWUzMTE4NTM1ODI=", "number": 44, "title": "Fixed length string type is valid?", "user": {"login": "davesque", "id": 791437, "node_id": "MDQ6VXNlcjc5MTQzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/791437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davesque", "html_url": "https://github.com/davesque", "followers_url": "https://api.github.com/users/davesque/followers", "following_url": "https://api.github.com/users/davesque/following{/other_user}", "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davesque/subscriptions", "organizations_url": "https://api.github.com/users/davesque/orgs", "repos_url": "https://api.github.com/users/davesque/repos", "events_url": "https://api.github.com/users/davesque/events{/privacy}", "received_events_url": "https://api.github.com/users/davesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-06T05:39:17Z", "updated_at": "2018-05-02T23:28:46Z", "closed_at": "2018-05-02T23:28:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nIt appears that eth-abi considers a string with a fixed length to be a valid type:\r\nhttps://github.com/ethereum/eth-abi/blob/master/eth_abi/utils/parsing.py#L57-L61\r\n\r\nHowever, eth-abi handles fixed length strings no differently than dynamic-length strings:\r\nhttps://github.com/ethereum/eth-abi/blob/master/eth_abi/encoding.py#L66-L67\r\nhttps://github.com/ethereum/eth-abi/blob/master/eth_abi/decoding.py#L52-L53\r\n\r\n### How can it be fixed?\r\n\r\nPerhaps the type validation code should be updated at some point to throw an error for fixed length strings?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/39", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/39/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/39/events", "html_url": "https://github.com/ethereum/eth-abi/issues/39", "id": 306183625, "node_id": "MDU6SXNzdWUzMDYxODM2MjU=", "number": 39, "title": "Add support for Vyper decimal10 ABI type", "user": {"login": "davesque", "id": 791437, "node_id": "MDQ6VXNlcjc5MTQzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/791437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davesque", "html_url": "https://github.com/davesque", "followers_url": "https://api.github.com/users/davesque/followers", "following_url": "https://api.github.com/users/davesque/following{/other_user}", "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davesque/subscriptions", "organizations_url": "https://api.github.com/users/davesque/orgs", "repos_url": "https://api.github.com/users/davesque/repos", "events_url": "https://api.github.com/users/davesque/events{/privacy}", "received_events_url": "https://api.github.com/users/davesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-17T19:28:27Z", "updated_at": "2019-01-23T19:48:33Z", "closed_at": "2019-01-23T19:48:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nNeed to add support for Vyper `decimal10` type.  See here: https://github.com/ethereum/web3.py/issues/700\r\n\r\n### How can it be fixed?\r\n\r\nNeed to add support for it.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/36", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/36/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/36/events", "html_url": "https://github.com/ethereum/eth-abi/issues/36", "id": 302778975, "node_id": "MDU6SXNzdWUzMDI3Nzg5NzU=", "number": 36, "title": "Convert library to use a registry pattern for encoders and decoders.", "user": {"login": "pipermerriam", "id": 824194, "node_id": "MDQ6VXNlcjgyNDE5NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/824194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pipermerriam", "html_url": "https://github.com/pipermerriam", "followers_url": "https://api.github.com/users/pipermerriam/followers", "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}", "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions", "organizations_url": "https://api.github.com/users/pipermerriam/orgs", "repos_url": "https://api.github.com/users/pipermerriam/repos", "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}", "received_events_url": "https://api.github.com/users/pipermerriam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 858133213, "node_id": "MDU6TGFiZWw4NTgxMzMyMTM=", "url": "https://api.github.com/repos/ethereum/eth-abi/labels/Good%20for%20Bounty", "name": "Good for Bounty", "color": "5319e7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-03-06T16:48:36Z", "updated_at": "2018-04-13T16:22:36Z", "closed_at": "2018-04-13T16:22:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nThe way `eth-abi` is structured, it cannot be extended without changes to the core library.  This is problematic because new ABI types are likely to be created (as seen [here](http://solidity.readthedocs.io/en/latest/abi-spec.html#handling-tuple-types)).\r\n\r\n### How can it be fixed?\r\n\r\nWe'll create a new `ABIRegistry` class with the following functionality.\r\n\r\n```\r\nregistry = ABIRegistry()\r\n\r\n# register an encoder and a decoder for a static type.\r\nregistry.register(\"string\", string_encoder, string_decoder)\r\n\r\n# register only an encoder or decoder\r\nregistry.register_encoder(\"string\", string_encoder)\r\nregistry.register_decoder(\"string\", string_decoder)\r\n\r\n# register a dynamic encoder/decoder\r\nregistry.register(lambda base, sub, arrlist: bool(arrlist), array_encoder, array_decoder)\r\n\r\n# register an exact static type.\r\nregistry.register((\"uint\", \"256\", \"[]\", uint_encoder, uint_decoder)\r\n\r\n# the main encode/decode API\r\nencode_abi = registry.encode_abi\r\ndecode_abi = registry.decode_abi\r\nencode_single = registry.encode_single\r\ndecode_single = registry.decode_single\r\n```\r\n\r\nThen, within the codebase, we make a default registry to expose all of the built-in encoders and decoders.\r\n\r\n#### Implementation details.\r\n\r\n**validation**\r\n\r\nThe `register` method should raise an exception if the same static type is registered twice.\r\n\r\n**determining which encoder/decoder to use**\r\n\r\nInternally, the `ABIRegistry` will need to implement a dynamic version of the `eth_abi.encoding.get_single_encoder` and `eth_abi.decoding.get_single_decoder`.  The logic for these functions should be as follows.\r\n\r\n1. check for an exact match against static abi types.\r\n2. evaluate all callbacks.  If exactly one (1) returns true, use that type.  Otherwise raise an appropriate exception.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/35", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/35/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/35/events", "html_url": "https://github.com/ethereum/eth-abi/issues/35", "id": 302764371, "node_id": "MDU6SXNzdWUzMDI3NjQzNzE=", "number": 35, "title": "Add support for tuple types", "user": {"login": "pipermerriam", "id": 824194, "node_id": "MDQ6VXNlcjgyNDE5NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/824194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pipermerriam", "html_url": "https://github.com/pipermerriam", "followers_url": "https://api.github.com/users/pipermerriam/followers", "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}", "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions", "organizations_url": "https://api.github.com/users/pipermerriam/orgs", "repos_url": "https://api.github.com/users/pipermerriam/repos", "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}", "received_events_url": "https://api.github.com/users/pipermerriam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 858133213, "node_id": "MDU6TGFiZWw4NTgxMzMyMTM=", "url": "https://api.github.com/repos/ethereum/eth-abi/labels/Good%20for%20Bounty", "name": "Good for Bounty", "color": "5319e7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-03-06T16:12:27Z", "updated_at": "2018-05-26T08:32:24Z", "closed_at": "2018-05-08T05:23:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nsee:\r\n\r\n- https://blog.ricmoo.com/solidity-abiv2-a-foray-into-the-experimental-a6afd3d47185\r\n- http://solidity.readthedocs.io/en/latest/abi-spec.html#handling-tuple-types\r\n\r\nSolidity has an experimental feature that will allow *tuple* types.\r\n\r\n> snipped below is from the linked solidity docs\r\n\r\n```javascript\r\npragma solidity ^0.4.19;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Test {\r\n  struct S { uint a; uint[] b; T[] c; }\r\n  struct T { uint x; uint y; }\r\n  function f(S s, T t, uint a) public { }\r\n  function g() public returns (S s, T t, uint a) {}\r\n}\r\n```\r\n\r\nThe code above would result in the following ABI\r\n\r\n```javascript\r\n[\r\n  {\r\n    \"name\": \"f\",\r\n    \"type\": \"function\",\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"s\",\r\n        \"type\": \"tuple\",\r\n        \"components\": [\r\n          {\r\n            \"name\": \"a\",\r\n            \"type\": \"uint256\"\r\n          },\r\n          {\r\n            \"name\": \"b\",\r\n            \"type\": \"uint256[]\"\r\n          },\r\n          {\r\n            \"name\": \"c\",\r\n            \"type\": \"tuple[]\",\r\n            \"components\": [\r\n              {\r\n                \"name\": \"x\",\r\n                \"type\": \"uint256\"\r\n              },\r\n              {\r\n                \"name\": \"y\",\r\n                \"type\": \"uint256\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"t\",\r\n        \"type\": \"tuple\",\r\n        \"components\": [\r\n          {\r\n            \"name\": \"x\",\r\n            \"type\": \"uint256\"\r\n          },\r\n          {\r\n            \"name\": \"y\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"a\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"outputs\": []\r\n  }\r\n]\r\n```\r\n\r\n\r\n\r\n### How can it be fixed?\r\n\r\nWe should add a new `TupleEncoder` and `TupleDecoder` to handle these types.\r\n\r\n- The `TupleEncoder` should accept an iterable of values as it's input.\r\n- The `TupleDecoder` should return a python `tuple` of values as output.\r\n\r\n#### Documentation\r\n\r\nThe `README.md` should be updated to include at minimum, information about the accepted input and output formats for *tuple* ABI types.\r\n\r\n#### Tests\r\n\r\nTest cases should include declarative test cases for the following.\r\n\r\n- A *tuple* type with all fixed size elements.\r\n- A *tuple* type with a dynamically sized element at positions first, last, and somewhere in the middle.\r\n- A *tuple* type with multiple dynamically sized elements.\r\n\r\nProperty based test(s) should be created for:\r\n\r\n- Dynamically generated *tuple* types with multiple fields and types, including both dynamic and fixed sized types.\r\n- Round trip operations for `encode -> decode` **and** `decode -> encode`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/33", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/33/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/33/events", "html_url": "https://github.com/ethereum/eth-abi/issues/33", "id": 301257773, "node_id": "MDU6SXNzdWUzMDEyNTc3NzM=", "number": 33, "title": "Add type hints and mypy to CI", "user": {"login": "pipermerriam", "id": 824194, "node_id": "MDQ6VXNlcjgyNDE5NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/824194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pipermerriam", "html_url": "https://github.com/pipermerriam", "followers_url": "https://api.github.com/users/pipermerriam/followers", "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}", "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions", "organizations_url": "https://api.github.com/users/pipermerriam/orgs", "repos_url": "https://api.github.com/users/pipermerriam/repos", "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}", "received_events_url": "https://api.github.com/users/pipermerriam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 858133213, "node_id": "MDU6TGFiZWw4NTgxMzMyMTM=", "url": "https://api.github.com/repos/ethereum/eth-abi/labels/Good%20for%20Bounty", "name": "Good for Bounty", "color": "5319e7", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-01T02:38:48Z", "updated_at": "2018-08-30T19:04:45Z", "closed_at": "2018-08-30T19:04:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nWe should add type hints to the code as well as a `mypy` run to the CI environment.\r\n\r\n\r\n### How can it be fixed?\r\n\r\nCopy implementation from `eth-keys` or `py-evm` repo.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/31", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/31/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/31/events", "html_url": "https://github.com/ethereum/eth-abi/issues/31", "id": 299253700, "node_id": "MDU6SXNzdWUyOTkyNTM3MDA=", "number": 31, "title": "StringEncoder accepts byte-serialized objects, not a string", "user": {"login": "anomit", "id": 101592, "node_id": "MDQ6VXNlcjEwMTU5Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/101592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anomit", "html_url": "https://github.com/anomit", "followers_url": "https://api.github.com/users/anomit/followers", "following_url": "https://api.github.com/users/anomit/following{/other_user}", "gists_url": "https://api.github.com/users/anomit/gists{/gist_id}", "starred_url": "https://api.github.com/users/anomit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anomit/subscriptions", "organizations_url": "https://api.github.com/users/anomit/orgs", "repos_url": "https://api.github.com/users/anomit/repos", "events_url": "https://api.github.com/users/anomit/events{/privacy}", "received_events_url": "https://api.github.com/users/anomit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-22T07:59:59Z", "updated_at": "2018-02-22T14:49:29Z", "closed_at": "2018-02-22T14:49:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Version: 0.50\r\n* Python: 3.6.4\r\n* OS: osx\r\n\r\n\r\n### What was wrong?\r\n\r\nI get it that Solidity specifies string to be nothing but a dynamic sized array of bytes, but as a user of a python library, isn't it more intuitive to expect that I can pass a standard Python string to be encoded as a Solidity \"string\". \r\n\r\nCurrently this is the line #410 in [eth_abi/encoding.py](https://github.com/ethereum/eth-abi/blob/655c3bd15952d0b6d7b1efd9d6767be14056217e/eth_abi/encoding.py#L410) \r\n```\r\nclass StringEncoder(BaseEncoder):\r\n    @classmethod\r\n    def encode(cls, value):\r\n        if not is_bytes(value):\r\n            raise EncodingTypeError(\r\n                \"Value of type {0} cannot be encoded by StringEncoder\".format(\r\n                    type(value),\r\n                )\r\n            )\r\n```\r\n\r\n\r\n### How can it be fixed?\r\n\r\nI would take a shot at the following:\r\n```\r\nif type(value) is not str:\r\n    raise EncodingTypeError(\r\n                \"Value of type {0} cannot be encoded by StringEncoder\".format(\r\n                    type(value),\r\n                )\r\n            )\r\nserialized_bytes = value.encode('utf-8')\r\n#perform consequent operations on serialized_bytes\r\n```\r\n\r\nIn any case I would like to understand more on the decision to accept only bytes, the challenges and considerations that were thought of in the first place.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/25", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/25/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/25/events", "html_url": "https://github.com/ethereum/eth-abi/issues/25", "id": 293953541, "node_id": "MDU6SXNzdWUyOTM5NTM1NDE=", "number": 25, "title": "eth-utils dependency conflicts with other eth-* packages", "user": {"login": "mbeacom", "id": 7315957, "node_id": "MDQ6VXNlcjczMTU5NTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/7315957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbeacom", "html_url": "https://github.com/mbeacom", "followers_url": "https://api.github.com/users/mbeacom/followers", "following_url": "https://api.github.com/users/mbeacom/following{/other_user}", "gists_url": "https://api.github.com/users/mbeacom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbeacom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbeacom/subscriptions", "organizations_url": "https://api.github.com/users/mbeacom/orgs", "repos_url": "https://api.github.com/users/mbeacom/repos", "events_url": "https://api.github.com/users/mbeacom/events{/privacy}", "received_events_url": "https://api.github.com/users/mbeacom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "carver", "id": 205327, "node_id": "MDQ6VXNlcjIwNTMyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/205327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carver", "html_url": "https://github.com/carver", "followers_url": "https://api.github.com/users/carver/followers", "following_url": "https://api.github.com/users/carver/following{/other_user}", "gists_url": "https://api.github.com/users/carver/gists{/gist_id}", "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carver/subscriptions", "organizations_url": "https://api.github.com/users/carver/orgs", "repos_url": "https://api.github.com/users/carver/repos", "events_url": "https://api.github.com/users/carver/events{/privacy}", "received_events_url": "https://api.github.com/users/carver/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "carver", "id": 205327, "node_id": "MDQ6VXNlcjIwNTMyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/205327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carver", "html_url": "https://github.com/carver", "followers_url": "https://api.github.com/users/carver/followers", "following_url": "https://api.github.com/users/carver/following{/other_user}", "gists_url": "https://api.github.com/users/carver/gists{/gist_id}", "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carver/subscriptions", "organizations_url": "https://api.github.com/users/carver/orgs", "repos_url": "https://api.github.com/users/carver/repos", "events_url": "https://api.github.com/users/carver/events{/privacy}", "received_events_url": "https://api.github.com/users/carver/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2018-02-02T16:52:08Z", "updated_at": "2018-03-27T15:40:30Z", "closed_at": "2018-02-02T19:32:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Version: 0.5.0\r\n* Python: 3.5/3.6\r\n* OS: osx/linux\r\n\r\n\r\n### What was wrong?\r\n\r\nCurrently, the https://github.com/gitcoinco/web repository Travis builds are failing due to a dependency conflict with other `eth-` packages. \r\nExplanation: https://github.com/gitcoinco/web/issues/367\r\n\r\nValidation is failing due to a conflict in dependencies:\r\n\r\n- eth-keys and eth-keyfile pins eth-utils<2.0.0,>=1.0.0-beta.1\r\n- eth-abi pins `eth-utils==0.7.*`\r\n\r\nThis seems to cause the build to fail dependency validation.\r\n\r\n### How can it be fixed?\r\n\r\n- Update `eth-abi` to use` >=1.0.0b1` of the `eth-utils` package?\r\n\r\n#### Note\r\n\r\nIt appears `eth-tester` is resulting in the same error due to pinning `<1.0.0`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/22", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/22/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/22/events", "html_url": "https://github.com/ethereum/eth-abi/issues/22", "id": 281671623, "node_id": "MDU6SXNzdWUyODE2NzE2MjM=", "number": 22, "title": "pip install broken for 0.4.5", "user": {"login": "fuzzyami", "id": 829266, "node_id": "MDQ6VXNlcjgyOTI2Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/829266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuzzyami", "html_url": "https://github.com/fuzzyami", "followers_url": "https://api.github.com/users/fuzzyami/followers", "following_url": "https://api.github.com/users/fuzzyami/following{/other_user}", "gists_url": "https://api.github.com/users/fuzzyami/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuzzyami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuzzyami/subscriptions", "organizations_url": "https://api.github.com/users/fuzzyami/orgs", "repos_url": "https://api.github.com/users/fuzzyami/repos", "events_url": "https://api.github.com/users/fuzzyami/events{/privacy}", "received_events_url": "https://api.github.com/users/fuzzyami/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-13T09:02:36Z", "updated_at": "2017-12-18T18:38:05Z", "closed_at": "2017-12-18T18:38:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Version: 0.4.5\r\n* Python: 2.7\r\n* OS: linux, macos\r\n\r\npip install fails with the following output:\r\n\r\n\u279c  kinawardservice git:(master) \u2717 sudo pip install ethereum-abi-utils --upgrade\r\n\r\n\r\nThe directory '/Users/amiblonder/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.\r\nThe directory '/Users/amiblonder/Library/Caches/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.\r\n\r\n\r\nCollecting ethereum-abi-utils\r\n  Downloading ethereum-abi-utils-0.4.5.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n\r\n    Installed /private/tmp/pip-build-XVffAh/ethereum-abi-utils/.eggs/setuptools_markdown-0.2-py2.7.egg\r\n    Searching for pypandoc\r\n    Reading https://pypi.python.org/simple/pypandoc/\r\n    Best match: pypandoc 1.4\r\n    Downloading https://pypi.python.org/packages/71/81/00184643e5a10a456b4118fc12c96780823adb8ed974eb2289f29703b29b/pypandoc-1.4.tar.gz#md5=28d28cf8f1942abf680c040707cee55a\r\n    Processing pypandoc-1.4.tar.gz\r\n    Writing /tmp/easy_install-c6FpMb/pypandoc-1.4/setup.cfg\r\n    Running pypandoc-1.4/setup.py -q bdist_egg --dist-dir /tmp/easy_install-c6FpMb/pypandoc-1.4/egg-dist-tmp-Rubecs\r\n    Maybe try:\r\n\r\n        brew install pandoc\r\n    See http://johnmacfarlane.net/pandoc/installing.html\r\n    for installation options\r\n    ---------------------------------------------------------------\r\n\r\n    zip_safe flag not set; analyzing archive contents...\r\n    pypandoc.__init__: module references __file__\r\n\r\n\r\n    !!! pandoc not found, long_description is bad, don't upload this to PyPI !!!\r\n\r\n\r\n    creating /private/tmp/pip-build-XVffAh/ethereum-abi-utils/.eggs/pypandoc-1.4-py2.7.egg\r\n    Extracting pypandoc-1.4-py2.7.egg to /private/tmp/pip-build-XVffAh/ethereum-abi-utils/.eggs\r\n\r\n    Installed /private/tmp/pip-build-XVffAh/ethereum-abi-utils/.eggs/pypandoc-1.4-py2.7.egg\r\n    Searching for wheel>=0.25.0\r\n    Reading https://pypi.python.org/simple/wheel/\r\n    Best match: wheel 0.30.0\r\n    Downloading https://pypi.python.org/packages/fa/b4/f9886517624a4dcb81a1d766f68034344b7565db69f13d52697222daeb72/wheel-0.30.0.tar.gz#md5=e48f8f2329f1419572d93b68a63272a9\r\n    Processing wheel-0.30.0.tar.gz\r\n    Writing /tmp/easy_install-XliS_m/wheel-0.30.0/setup.cfg\r\n    Running wheel-0.30.0/setup.py -q bdist_egg --dist-dir /tmp/easy_install-XliS_m/wheel-0.30.0/egg-dist-tmp-5IAHAX\r\n    warning: no files found matching 'wheel/*.txt'\r\n    warning: no files found matching '*.py' under directory 'wheel/test'\r\n    warning: no files found matching 'wheel/test/test-1.0-py2.py3-none-win32.whl'\r\n    warning: no files found matching 'wheel/test/headers.dist/header.h'\r\n    warning: no files found matching 'wheel/test/pydist-schema.json'\r\n    no previously-included directories found matching 'wheel/test/*/dist'\r\n    no previously-included directories found matching 'wheel/test/*/build'\r\n    creating /private/tmp/pip-build-XVffAh/ethereum-abi-utils/.eggs/wheel-0.30.0-py2.7.egg\r\n    Extracting wheel-0.30.0-py2.7.egg to /private/tmp/pip-build-XVffAh/ethereum-abi-utils/.eggs\r\n\r\n    Installed /private/tmp/pip-build-XVffAh/ethereum-abi-utils/.eggs/wheel-0.30.0-py2.7.egg\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/private/tmp/pip-build-XVffAh/ethereum-abi-utils/setup.py\", line 33, in <module>\r\n        'Programming Language :: Python :: 3.5',\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/core.py\", line 111, in setup\r\n        _setup_distribution = dist = klass(attrs)\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/setuptools/dist.py\", line 272, in __init__\r\n        _Distribution.__init__(self,attrs)\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/dist.py\", line 287, in __init__\r\n        self.finalize_options()\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/setuptools/dist.py\", line 327, in finalize_options\r\n        ep.load()(self, ep.name, value)\r\n      File \"/private/tmp/pip-build-XVffAh/ethereum-abi-utils/.eggs/setuptools_markdown-0.2-py2.7.egg/setuptools_markdown.py\", line 22, in long_description_markdown_filename\r\n        output = pypandoc.convert(markdown_filename, 'rst')\r\n      File \"/private/tmp/pip-build-XVffAh/ethereum-abi-utils/.eggs/pypandoc-1.4-py2.7.egg/pypandoc/__init__.py\", line 66, in convert\r\n        raise RuntimeError(\"Format missing, but need one (identified source as text as no \"\r\n    RuntimeError: Format missing, but need one (identified source as text as no file with that name was found).\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/tmp/pip-build-XVffAh/ethereum-abi-utils/\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/14", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/14/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/14/events", "html_url": "https://github.com/ethereum/eth-abi/issues/14", "id": 254883691, "node_id": "MDU6SXNzdWUyNTQ4ODM2OTE=", "number": 14, "title": "Add documentation to the README", "user": {"login": "reiven", "id": 362717, "node_id": "MDQ6VXNlcjM2MjcxNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/362717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reiven", "html_url": "https://github.com/reiven", "followers_url": "https://api.github.com/users/reiven/followers", "following_url": "https://api.github.com/users/reiven/following{/other_user}", "gists_url": "https://api.github.com/users/reiven/gists{/gist_id}", "starred_url": "https://api.github.com/users/reiven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reiven/subscriptions", "organizations_url": "https://api.github.com/users/reiven/orgs", "repos_url": "https://api.github.com/users/reiven/repos", "events_url": "https://api.github.com/users/reiven/events{/privacy}", "received_events_url": "https://api.github.com/users/reiven/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 39, "created_at": "2017-09-03T16:07:15Z", "updated_at": "2018-01-26T15:34:14Z", "closed_at": "2018-01-24T19:24:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nThere is no documentation in the `README.md`\r\n\r\n### How can it be fixed?\r\n\r\nAdd documentation, including examples to the following methods.  The format used in [`eth-utils`](https://github.com/ethereum/eth-utils) should be sufficient.\r\n\r\n- `eth_abi.decode_single`\r\n- `eth_abi.decode_abi`\r\n- `eth_abi.encode_single`\r\n- `eth_abi.encode_abi`\r\n\r\n#### Cute Animal Picture\r\n\r\n> put a cute animal picture here.\r\n![image](https://user-images.githubusercontent.com/362717/30004594-c983fbf8-90a8-11e7-8d01-c880c25e87c4.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/13", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/13/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/13/events", "html_url": "https://github.com/ethereum/eth-abi/issues/13", "id": 225705924, "node_id": "MDU6SXNzdWUyMjU3MDU5MjQ=", "number": 13, "title": "`bytes32` is decoded as a unicode string", "user": {"login": "Arachnid", "id": 17865, "node_id": "MDQ6VXNlcjE3ODY1", "avatar_url": "https://avatars2.githubusercontent.com/u/17865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arachnid", "html_url": "https://github.com/Arachnid", "followers_url": "https://api.github.com/users/Arachnid/followers", "following_url": "https://api.github.com/users/Arachnid/following{/other_user}", "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions", "organizations_url": "https://api.github.com/users/Arachnid/orgs", "repos_url": "https://api.github.com/users/Arachnid/repos", "events_url": "https://api.github.com/users/Arachnid/events{/privacy}", "received_events_url": "https://api.github.com/users/Arachnid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-02T14:06:05Z", "updated_at": "2018-02-28T00:45:42Z", "closed_at": "2018-02-28T00:45:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "### What was wrong?\r\n`bytes32` arguments in ABIs are decoded as null-terminated unicode strings, although they often don't contain text data.\r\n\r\n### How was it fixed?\r\n`bytes32` should be represented as a 64-character hex string, instead.\r\n\r\n#### Cute Animal Picture\r\n\r\nhttp://news.nationalgeographic.com/content/dam/news/2016/07/19/slothlove/01_slothlove_leaves.jpg", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/8", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/8/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/8/events", "html_url": "https://github.com/ethereum/eth-abi/issues/8", "id": 205773387, "node_id": "MDU6SXNzdWUyMDU3NzMzODc=", "number": 8, "title": "decode_abi fails with ValueError", "user": {"login": "jo-tud", "id": 1543640, "node_id": "MDQ6VXNlcjE1NDM2NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1543640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jo-tud", "html_url": "https://github.com/jo-tud", "followers_url": "https://api.github.com/users/jo-tud/followers", "following_url": "https://api.github.com/users/jo-tud/following{/other_user}", "gists_url": "https://api.github.com/users/jo-tud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jo-tud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jo-tud/subscriptions", "organizations_url": "https://api.github.com/users/jo-tud/orgs", "repos_url": "https://api.github.com/users/jo-tud/repos", "events_url": "https://api.github.com/users/jo-tud/events{/privacy}", "received_events_url": "https://api.github.com/users/jo-tud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-07T03:10:28Z", "updated_at": "2017-02-13T23:32:22Z", "closed_at": "2017-02-13T23:32:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "decode_abi(types, data) fails with ValueError(\"Wrong data size for string/bytes object\") when called with the payload from\r\nTx 0x070d2cf5c6ee0285e78b50aef397585865b41c2b56a8051370eaedac7d95d54c\r\n\r\nTo reproduce:\r\n\r\n```\r\ntypes = ['uint256', 'bytes']\r\n\r\ndata = '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\r\n\r\ndecode_abi(types, data)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/6", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/6/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/6/events", "html_url": "https://github.com/ethereum/eth-abi/issues/6", "id": 188117685, "node_id": "MDU6SXNzdWUxODgxMTc2ODU=", "number": 6, "title": "Missing fixed type", "user": {"login": "hackaugusto", "id": 310139, "node_id": "MDQ6VXNlcjMxMDEzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/310139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackaugusto", "html_url": "https://github.com/hackaugusto", "followers_url": "https://api.github.com/users/hackaugusto/followers", "following_url": "https://api.github.com/users/hackaugusto/following{/other_user}", "gists_url": "https://api.github.com/users/hackaugusto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackaugusto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackaugusto/subscriptions", "organizations_url": "https://api.github.com/users/hackaugusto/orgs", "repos_url": "https://api.github.com/users/hackaugusto/repos", "events_url": "https://api.github.com/users/hackaugusto/events{/privacy}", "received_events_url": "https://api.github.com/users/hackaugusto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-08T22:11:01Z", "updated_at": "2017-02-22T18:52:04Z", "closed_at": "2017-02-22T18:52:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "### What was wrong?\r\n\r\nSolidity added the `fixed` type back in version 0.3 [ref](https://github.com/ethereum/solidity/blob/develop/Changelog.md#030-2016-03-11)\r\n\r\nThis library uses a vendored version prior to the patches that changed from real to fixed.\r\n\r\n### How was it fixed?\r\n\r\nUpdate the vendored code\r\n\r\n#### Cute Animal Picture\r\n\r\n![bat](https://cloud.githubusercontent.com/assets/310139/20119367/6523ebf4-a5ef-11e6-9a57-b6ff98dc63f3.jpg)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ethereum/eth-abi/issues/1", "repository_url": "https://api.github.com/repos/ethereum/eth-abi", "labels_url": "https://api.github.com/repos/ethereum/eth-abi/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/ethereum/eth-abi/issues/1/comments", "events_url": "https://api.github.com/repos/ethereum/eth-abi/issues/1/events", "html_url": "https://github.com/ethereum/eth-abi/issues/1", "id": 160209320, "node_id": "MDU6SXNzdWUxNjAyMDkzMjA=", "number": 1, "title": "Python 3 support", "user": {"login": "PiDelport", "id": 630271, "node_id": "MDQ6VXNlcjYzMDI3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/630271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PiDelport", "html_url": "https://github.com/PiDelport", "followers_url": "https://api.github.com/users/PiDelport/followers", "following_url": "https://api.github.com/users/PiDelport/following{/other_user}", "gists_url": "https://api.github.com/users/PiDelport/gists{/gist_id}", "starred_url": "https://api.github.com/users/PiDelport/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PiDelport/subscriptions", "organizations_url": "https://api.github.com/users/PiDelport/orgs", "repos_url": "https://api.github.com/users/PiDelport/repos", "events_url": "https://api.github.com/users/PiDelport/events{/privacy}", "received_events_url": "https://api.github.com/users/PiDelport/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-14T15:19:52Z", "updated_at": "2017-02-22T18:52:11Z", "closed_at": "2017-02-22T18:52:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice for this library to support Python 3.\n#### Cute Animal Picture\n\n![python](http://i.imgur.com/YidZYVf.jpg)\n", "performed_via_github_app": null, "score": 1.0}]}