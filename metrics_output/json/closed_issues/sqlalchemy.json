{"total_count": 5166, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5563", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5563/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5563/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5563/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5563", "id": 694777651, "node_id": "MDU6SXNzdWU2OTQ3Nzc2NTE=", "number": 5563, "title": "Bug on documentation (Isolation level)", "user": {"login": "AnderUstarroz", "id": 8544110, "node_id": "MDQ6VXNlcjg1NDQxMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8544110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnderUstarroz", "html_url": "https://github.com/AnderUstarroz", "followers_url": "https://api.github.com/users/AnderUstarroz/followers", "following_url": "https://api.github.com/users/AnderUstarroz/following{/other_user}", "gists_url": "https://api.github.com/users/AnderUstarroz/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnderUstarroz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnderUstarroz/subscriptions", "organizations_url": "https://api.github.com/users/AnderUstarroz/orgs", "repos_url": "https://api.github.com/users/AnderUstarroz/repos", "events_url": "https://api.github.com/users/AnderUstarroz/events{/privacy}", "received_events_url": "https://api.github.com/users/AnderUstarroz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 4, "created_at": "2020-09-07T07:02:29Z", "updated_at": "2020-09-09T01:27:52Z", "closed_at": "2020-09-08T22:08:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seems to be contradictory information within the transaction isolation page on: \r\n\r\n- [https://docs.sqlalchemy.org/en/13/orm/session_transaction.html#session-transaction-isolation](https://docs.sqlalchemy.org/en/13/orm/session_transaction.html#session-transaction-isolation)\r\n\r\nA valid Transaction level is defined as `'REPEATABLE READ'`, `'READ COMMITTED'`, etc..   but according the [create_engine accepted params](https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine.params.isolation_level) should be actually `'REPEATABLE_READ'`,  `'READ_COMMITTED'`..\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5561", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5561/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5561/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5561/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5561", "id": 694247069, "node_id": "MDU6SXNzdWU2OTQyNDcwNjk=", "number": 5561, "title": "CheckConstraint with multiple conditions raises warning", "user": {"login": "Feijo", "id": 1585710, "node_id": "MDQ6VXNlcjE1ODU3MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1585710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Feijo", "html_url": "https://github.com/Feijo", "followers_url": "https://api.github.com/users/Feijo/followers", "following_url": "https://api.github.com/users/Feijo/following{/other_user}", "gists_url": "https://api.github.com/users/Feijo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Feijo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Feijo/subscriptions", "organizations_url": "https://api.github.com/users/Feijo/orgs", "repos_url": "https://api.github.com/users/Feijo/repos", "events_url": "https://api.github.com/users/Feijo/events{/privacy}", "received_events_url": "https://api.github.com/users/Feijo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2011745336, "node_id": "MDU6TGFiZWwyMDExNzQ1MzM2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/requires%20triage", "name": "requires triage", "color": "ffff00", "default": false, "description": "New issue that requires categorization"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-09-06T04:30:13Z", "updated_at": "2020-09-06T07:24:27Z", "closed_at": "2020-09-06T07:24:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Versions**\r\n - OS: Windows 10\r\n - Python: 3.8.5\r\n - SQLAlchemy: 1.3.18\r\n - Database: PostgreSQL 12\r\n - DBAPI: psycopg2 2.8.5\r\n\r\nI have the following table declaration with a Check Constraint with multiple columns and conditions:\r\n\r\n```\r\nTable(\r\n    'my_table',\r\n    MetaData(),\r\n    Column('id', Integer, primary_key=True),\r\n    Column('start', DateTime(), nullable=False),\r\n    Column('end', DateTime(), nullable=False),\r\n    CheckConstraint(\r\n        and_(\r\n            or_(\r\n                func.date_trunc('month', column('start')) == func.date_trunc('month', column('end')),\r\n                func.extract('day', column('end')) == 1\r\n            ),\r\n            (column('end') - (column('start') + func.make_interval(0, 1)) <= func.make_interval())\r\n        )\r\n    )\r\n)\r\n```\r\n\r\nAlthough the application DOES create the check constraint in the database correctly, I'm getting the following warning:\r\n\r\n> C:\\Python38\\lib\\site-packages\\sqlalchemy\\sql\\base.py:559: SAWarning: Column 'end' on table None being replaced by <sqlalchemy.sql.elements.ColumnClause at 0x26522ab0e50; end>, which has the same key. Consider use_labels for select() statements.\r\n> \r\n> C:\\Python38\\lib\\site-packages\\sqlalchemy\\sql\\base.py:559: SAWarning: Column 'start' on table None being replaced by <sqlalchemy.sql.elements.ColumnClause at 0x26522ab0b80; start>, which has the same key. Consider use_labels for select() statements.\r\n> \r\n> C:\\Python38\\lib\\site-packages\\sqlalchemy\\sql\\base.py:559: SAWarning: Column 'end' on table None being replaced by <sqlalchemy.sql.elements.ColumnClause at 0x26522ab0c70; end>, which has the same key. Consider use_labels for select() statements.\r\n\r\nWhat I am doing wrong?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5559", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5559/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5559/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5559/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5559", "id": 694151047, "node_id": "MDU6SXNzdWU2OTQxNTEwNDc=", "number": 5559, "title": "CursorResultMetaData._adapt_to_context causes ambiguous column name", "user": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141274292, "node_id": "MDU6TGFiZWwxMTQxMjc0Mjky", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/blocker", "name": "blocker", "color": "FF5025", "default": false, "description": "issue that must be resolved asap as it is preventing things from working"}, {"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 2160880772, "node_id": "MDU6TGFiZWwyMTYwODgwNzcy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/statement%20caching", "name": "statement caching", "color": "d0d30e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 5, "created_at": "2020-09-05T19:17:44Z", "updated_at": "2020-09-06T19:34:39Z", "closed_at": "2020-09-06T19:34:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nWhen two identical queries (with same column names from different tables) with different memory address are executed sequentially, the latter reuses the cached compiled statement, and calls `CursorResultMetaData._adapt_to_context()` but breaks the metadata, leading to \"ambiguous column name\" errors when indexing by columns.\r\n\r\n**Expected behavior**\r\n\r\nMetadata is not broken, and the result indexing by columns works.\r\n\r\n**To Reproduce**\r\n\r\n```py\r\nimport sqlalchemy as sa\r\n\r\nmetadata = sa.MetaData()\r\nusers = sa.Table(\r\n    \"users\",\r\n    metadata,\r\n    sa.Column(\"id\", sa.Integer, primary_key=True),\r\n    sa.Column(\"team_id\", metadata, sa.ForeignKey(\"teams.id\")),\r\n)\r\nteams = sa.Table(\r\n    \"teams\", metadata, sa.Column(\"id\", sa.Integer, primary_key=True),\r\n)\r\n\r\n\r\ndef build_query():\r\n    return sa.select([users.c.id, teams.c.id]).select_from(\r\n        users.outerjoin(teams)\r\n    )\r\n\r\n\r\ne = sa.create_engine(\"postgresql:///\", echo=True)\r\nmetadata.drop_all(e)\r\nmetadata.create_all(e)\r\ntid = e.execute(teams.insert().returning(teams.c.id)).scalar()\r\ne.execute(users.insert().values(team_id=tid))\r\n\r\nprint(e.execute(build_query()).first()[users.c.id])  # always succeed\r\nprint(e.execute(build_query()).first()[users.c.id])  # success expected\r\n```\r\n\r\n**Error**\r\n\r\n```\r\n2020-09-05 14:00:42,711 INFO sqlalchemy.engine.Engine SELECT users.id, teams.id \r\nFROM users LEFT OUTER JOIN teams ON teams.id = users.team_id\r\n2020-09-05 14:00:42,711 INFO sqlalchemy.engine.Engine [generated in 0.00025s] {}\r\n1\r\n2020-09-05 14:00:42,712 INFO sqlalchemy.engine.Engine SELECT users.id, teams.id \r\nFROM users LEFT OUTER JOIN teams ON teams.id = users.team_id\r\n2020-09-05 14:00:42,712 INFO sqlalchemy.engine.Engine [cached since 0.001864s ago] {}\r\nTraceback (most recent call last):\r\n  File \"test_cache.py\", line 28, in <module>\r\n    print(e.execute(build_query()).first()[users.c.id])\r\n  File \"sqlalchemy/lib/sqlalchemy/engine/cursor.py\", line 587, in _raise_for_ambiguous_column_name\r\n    raise exc.InvalidRequestError(\r\nsqlalchemy.exc.InvalidRequestError: Ambiguous column name 'id' in result set column descriptions\r\n```\r\n\r\n**Versions.**\r\n - OS: Darwin Kernel Version 19.5.0\r\n - Python: Python 3.8.2\r\n - SQLAlchemy: 1.4.0b1 @ fc612d17145453ad95e5f9ba6a40ba70d2f507c3\r\n - Database: PostgreSQL 12.4\r\n - DBAPI: psycopg2 2.8.5 (dt dec pq3 ext lo64)\r\n\r\n**Additional context**\r\n\r\n```python\r\nrow = e.execute(build_query()).first()\r\nprint(row._keymap[users.c.id])\r\nrow = e.execute(build_query()).first()\r\nprint(row._keymap[users.c.id])\r\n```\r\n\r\nOutput:\r\n```\r\n(0, (Column('id', Integer(), table=<users>, primary_key=True, nullable=False), 'id', 'id', 'users_id'), 'id', 'id', None, None)\r\n(None, (), 'id')\r\n```\r\n\r\nPart of the reasoning:\r\nhttps://github.com/sqlalchemy/sqlalchemy/blob/fc612d17145453ad95e5f9ba6a40ba70d2f507c3/lib/sqlalchemy/engine/cursor.py#L1246-L1253\r\n\r\nBecause `compiled.statement is not context.invoked_statement` (different memory address), `_adapt_to_context()` is called and I didn't follow into that method to find out why it breaks the metadata.\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5553", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5553/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5553/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5553/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5553", "id": 691143780, "node_id": "MDU6SXNzdWU2OTExNDM3ODA=", "number": 5553, "title": "query_expression not overriden if model instance for the same row is still around", "user": {"login": "bbc2", "id": 1645335, "node_id": "MDQ6VXNlcjE2NDUzMzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1645335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbc2", "html_url": "https://github.com/bbc2", "followers_url": "https://api.github.com/users/bbc2/followers", "following_url": "https://api.github.com/users/bbc2/following{/other_user}", "gists_url": "https://api.github.com/users/bbc2/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbc2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbc2/subscriptions", "organizations_url": "https://api.github.com/users/bbc2/orgs", "repos_url": "https://api.github.com/users/bbc2/repos", "events_url": "https://api.github.com/users/bbc2/events{/privacy}", "received_events_url": "https://api.github.com/users/bbc2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273966, "node_id": "MDU6TGFiZWwxMTQxMjczOTY2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/orm", "name": "orm", "color": "20C0B0", "default": false, "description": null}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-09-02T15:57:55Z", "updated_at": "2020-09-03T13:50:12Z", "closed_at": "2020-09-02T18:57:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nI retrieve an instance first without `with_expression`, then again with `with_expression`.  The second instance doesn't have the query expression populated.\r\n\r\n**Expected behavior**\r\n\r\nI expect the query expression to be populated on the second instance.\r\n\r\n**To Reproduce**\r\n\r\n```py\r\nfrom sqlalchemy import Column, Integer, create_engine\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import query_expression, sessionmaker, with_expression\r\nfrom sqlalchemy.sql import literal\r\n\r\nBase = declarative_base()\r\n\r\n\r\nclass User(Base):\r\n    __tablename__ = \"users\"\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    number = query_expression()\r\n\r\n\r\ndef main():\r\n    engine = create_engine(\"sqlite:///:memory:\")\r\n    Base.metadata.create_all(engine)\r\n    Session = sessionmaker(bind=engine)\r\n    session = Session()\r\n\r\n    session.add(User())\r\n    session.commit()\r\n\r\n    user = session.query(User).one()  # Remove `user =` and the issue disappears\r\n    same_user = session.query(User).options(with_expression(User.number, literal(1))).one()\r\n\r\n    assert same_user.number is not None\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"foo.py\", line 32, in <module>\r\n    main()\r\n  File \"foo.py\", line 28, in main\r\n    assert same_user.number is not None\r\nAssertionError\r\n```\r\n\r\n**Versions.**\r\n - Python: 3.8.5\r\n - SQLAlchemy: 1.3.19\r\n - Database: SQLite or PostgreSQL\r\n\r\n**Additional context**\r\n\r\nThe problem appeared in SQLAlchemy 1.3.18.  By doing some testing, I was able to pinpoint the exact PR: #5354.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5551", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5551/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5551/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5551/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5551", "id": 690305935, "node_id": "MDU6SXNzdWU2OTAzMDU5MzU=", "number": 5551, "title": "Feature not supported: UNIQUE column constraint", "user": {"login": "nndo1991", "id": 1577168, "node_id": "MDQ6VXNlcjE1NzcxNjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1577168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nndo1991", "html_url": "https://github.com/nndo1991", "followers_url": "https://api.github.com/users/nndo1991/followers", "following_url": "https://api.github.com/users/nndo1991/following{/other_user}", "gists_url": "https://api.github.com/users/nndo1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/nndo1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nndo1991/subscriptions", "organizations_url": "https://api.github.com/users/nndo1991/orgs", "repos_url": "https://api.github.com/users/nndo1991/repos", "events_url": "https://api.github.com/users/nndo1991/events{/privacy}", "received_events_url": "https://api.github.com/users/nndo1991/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1143451229, "node_id": "MDU6TGFiZWwxMTQzNDUxMjI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/external%20driver%20issues", "name": "external driver issues", "color": "2d6eb7", "default": false, "description": "the issue involves a misbehavior on the part of the DBAPI itself, probably not SQLAlchemy"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-09-01T17:03:56Z", "updated_at": "2020-09-02T15:40:36Z", "closed_at": "2020-09-02T15:40:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nWe are the developers of [sqlalchemy_exasol](https://github.com/blue-yonder/sqlalchemy_exasol) and we are trying to upgrade `SQLAlchemy==1.3.16` to `SQLAlchemy==1.3.19`. Now all of the _QuotedNameArgumentTest_ tests inside the **test_suite.py** are failing, and it used to work fine in 1.3.16\r\n\r\n**To Reproduce**\r\n\r\n```py\r\npy.test --dropfirst --dburi exa+pyodbc://sys:exasol@localhost:8888/TEST?DRIVER=EXAODBC&CONNECTIONLCALL=en_US.UTF-8\r\n```\r\n\r\n**Error**\r\n\r\n```\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_check_constraints[quote \" two-_exclusions1] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_check_constraints[quote ' one-_exclusions0] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_columns[quote \" two-_exclusions1] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_columns[quote ' one-_exclusions0] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_foreign_keys[quote \" two-_exclusions1] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_foreign_keys[quote ' one-_exclusions0] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_indexes[quote \" two-_exclusions1] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_indexes[quote ' one-_exclusions0] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_pk_constraint[quote \" two-_exclusions1] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_pk_constraint[quote ' one-_exclusions0] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_table_comment[quote \" two-_exclusions1] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_table_comment[quote ' one-_exclusions0] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_table_options[quote \" two-_exclusions1] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_table_options[quote ' one-_exclusions0] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_unique_constraints[quote \" two-_exclusions1] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_unique_constraints[quote ' one-_exclusions0] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_view_definition[quote \" two-_exclusions1] ERROR\r\ntest/test_suite.py::QuotedNameArgumentTest_exasol+pyodbc_6_2_6::test_get_view_definition[quote ' one-_exclusions0] ERROR\r\n```\r\n\r\n```\r\n______________ ERROR at setup of QuotedNameArgumentTest_exasol+pyodbc_6_2_6.test_get_check_constraints[quote \" two-_exclusions1] _____\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1277, in _execute_context\r\n    cursor, statement, parameters, context\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/engine/default.py\", line 593, in do_execute\r\n    cursor.execute(statement, parameters)\r\npyodbc.NotSupportedError: ('0A000', '[0A000] [EXASOL][EXASolution driver]Feature not supported: UNIQUE column constraint (Session: 1676648133635310965) (-1) (SQLExecDirectW)')\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/testing/fixtures.py\", line 117, in setup_class\r\n    cls._setup_once_tables()\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/testing/fixtures.py\", line 147, in _setup_once_tables\r\n    cls.metadata.create_all(cls.bind)\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/sql/schema.py\", line 4556, in create_all\r\n    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 2097, in _run_visitor\r\n    conn._run_visitor(visitorcallable, element, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1656, in _run_visitor\r\n    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py\", line 145, in traverse_single\r\n    return meth(obj, **kw)\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py\", line 787, in visit_metadata\r\n    _is_metadata_operation=True,\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py\", line 145, in traverse_single\r\n    return meth(obj, **kw)\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py\", line 832, in visit_table\r\n    include_foreign_key_constraints,  # noqa\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1011, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py\", line 72, in _execute_on_connection\r\n    return connection._execute_ddl(self, multiparams, params)\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1073, in _execute_ddl\r\n    compiled,\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1317, in _execute_context\r\n    e, statement, parameters, cursor, context\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1511, in _handle_dbapi_exception\r\n    sqlalchemy_exception, with_traceback=exc_info[2], from_=e\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/util/compat.py\", line 182, in raise_\r\n    raise exception\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1277, in _execute_context\r\n    cursor, statement, parameters, context\r\n  File \"/usr/local/lib/python3.6/site-packages/sqlalchemy/engine/default.py\", line 593, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.NotSupportedError: (pyodbc.NotSupportedError) ('0A000', '[0A000] [EXASOL][EXASolution driver]Feature not supported: UNIQUE column constraint (Session: 1676648133635310965) (-1) (SQLExecDirectW)')\r\n[SQL: \r\nCREATE TABLE \"quote ' one\" (\r\n\tid INTEGER NOT NULL, \r\n\tname VARCHAR(50), \r\n\t\"data\" VARCHAR(50), \r\n\trelated_id INTEGER, \r\n\tCONSTRAINT \"pk quote ' one\" PRIMARY KEY (id), \r\n\tCONSTRAINT \"uq quote' one\" UNIQUE (\"data\"), \r\n\tCONSTRAINT \"ck quote ' one\" CHECK (name != 'foo')\r\n)\r\n\r\n]\r\n(Background on this error at: http://sqlalche.me/e/13/tw8g)\r\n```\r\n\r\n**Versions.**\r\n - OS: Debian GNU/Linux 10 (buster)\r\n - Python: 3.6.10\r\n - SQLAlchemy: 1.3.19\r\n - Database: Exasol\r\n - DBAPI: pyodbc==4.0.30\r\n\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5549", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5549/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5549/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5549/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5549", "id": 689261255, "node_id": "MDU6SXNzdWU2ODkyNjEyNTU=", "number": 5549, "title": "implement tranasction_characteristics API which mirrors isolation level API; implement flags for postgresql", "user": {"login": "ziima", "id": 331955, "node_id": "MDQ6VXNlcjMzMTk1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/331955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ziima", "html_url": "https://github.com/ziima", "followers_url": "https://api.github.com/users/ziima/followers", "following_url": "https://api.github.com/users/ziima/following{/other_user}", "gists_url": "https://api.github.com/users/ziima/gists{/gist_id}", "starred_url": "https://api.github.com/users/ziima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ziima/subscriptions", "organizations_url": "https://api.github.com/users/ziima/orgs", "repos_url": "https://api.github.com/users/ziima/repos", "events_url": "https://api.github.com/users/ziima/events{/privacy}", "received_events_url": "https://api.github.com/users/ziima/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141275752, "node_id": "MDU6TGFiZWwxMTQxMjc1NzUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/engine", "name": "engine", "color": "B04040", "default": false, "description": "engines, connections, transactions, isolation levels, execution options"}, {"id": 1141273914, "node_id": "MDU6TGFiZWwxMTQxMjczOTE0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/postgresql", "name": "postgresql", "color": "60A070", "default": false, "description": ""}, {"id": 1313059238, "node_id": "MDU6TGFiZWwxMzEzMDU5MjM4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/use%20case", "name": "use case", "color": "b54650", "default": false, "description": "not really a feature or a bug; can be support for new DB features or user use cases not anticipated"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2020-08-31T14:41:25Z", "updated_at": "2020-09-09T06:00:47Z", "closed_at": "2020-09-08T15:17:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Apart from having option to select isolation level, it may come handy to create a transaction in a read only mode. This option is supported on postgres, see https://www.postgresql.org/docs/current/sql-set-transaction.html. I'm not sure about other database backends, but mysql seems to support them as well, see https://dev.mysql.com/doc/refman/8.0/en/set-transaction.html.\r\n\r\nI suggest to add an optional parameter transaction mode with possible values `READ WRITE` (default) or `READ ONLY` to execution options, similarly to isolation level.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5546", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5546/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5546/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5546/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5546", "id": 688569119, "node_id": "MDU6SXNzdWU2ODg1NjkxMTk=", "number": 5546, "title": "AsyncEngine fails to connect when the pool is exhausted", "user": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2296459902, "node_id": "MDU6TGFiZWwyMjk2NDU5OTAy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/asyncio", "name": "asyncio", "color": "ef7fac", "default": false, "description": ""}, {"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-08-29T17:05:48Z", "updated_at": "2020-08-31T14:36:54Z", "closed_at": "2020-08-31T14:36:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nWhen the connection pool is exhausted, further `connect()` calls on `AsyncEngine` will fail. This is an issue on `AsyncAdaptedQueue` where its `await_` member is defined as a bound method.\r\n\r\n**Expected behavior**\r\n\r\nSuch `connect()` calls should wait for connections to be returned to the pool, until `pool_timeout` is reached.\r\n\r\n**To Reproduce**\r\n\r\n```py\r\nimport asyncio\r\n\r\nfrom sqlalchemy.ext.asyncio import create_async_engine\r\n\r\n\r\nasync def main():\r\n    e = create_async_engine(\r\n        \"postgresql+asyncpg:///\",\r\n        pool_size=1,\r\n        max_overflow=0,\r\n        pool_timeout=0.1,\r\n    )\r\n\r\n    async with e.connect():\r\n        await e.connect()  # expecting asyncio.TimeoutError here\r\n\r\n\r\nasyncio.run(main())\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nsqlalchemy/lib/sqlalchemy/util/queue.py:254: RuntimeWarning: coroutine 'wait_for' was never awaited\r\n  return self.await_(\r\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\r\nsqlalchemy/lib/sqlalchemy/util/queue.py:254: RuntimeWarning: coroutine 'Queue.get' was never awaited\r\n  return self.await_(\r\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\r\nTraceback (most recent call last):\r\n  File \"issue.py\", line 18, in <module>\r\n    asyncio.run(main())\r\n  File \"asyncio/runners.py\", line 43, in run\r\n    return loop.run_until_complete(main)\r\n  File \"asyncio/base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"issue.py\", line 15, in main\r\n    await e.connect()  # expecting asyncio.TimeoutError here\r\n  File \"sqlalchemy/lib/sqlalchemy/ext/asyncio/engine.py\", line 79, in start\r\n    self.sync_connection = await (greenlet_spawn(self.sync_engine.connect))\r\n  File \"sqlalchemy/lib/sqlalchemy/util/_concurrency_py3k.py\", line 81, in greenlet_spawn\r\n    result = context.switch(*args, **kwargs)\r\n  File \"sqlalchemy/lib/sqlalchemy/future/engine.py\", line 426, in connect\r\n    return super(Engine, self).connect()\r\n  File \"sqlalchemy/lib/sqlalchemy/engine/base.py\", line 2914, in connect\r\n    return self._connection_cls(self, close_with_result=close_with_result)\r\n  File \"sqlalchemy/lib/sqlalchemy/engine/base.py\", line 90, in __init__\r\n    else engine.raw_connection()\r\n  File \"sqlalchemy/lib/sqlalchemy/engine/base.py\", line 2993, in raw_connection\r\n    return self._wrap_pool_connect(self.pool.connect, _connection)\r\n  File \"sqlalchemy/lib/sqlalchemy/engine/base.py\", line 2960, in _wrap_pool_connect\r\n    return fn()\r\n  File \"sqlalchemy/lib/sqlalchemy/pool/base.py\", line 301, in connect\r\n    return _ConnectionFairy._checkout(self)\r\n  File \"sqlalchemy/lib/sqlalchemy/pool/base.py\", line 698, in _checkout\r\n    fairy = _ConnectionRecord.checkout(pool)\r\n  File \"sqlalchemy/lib/sqlalchemy/pool/base.py\", line 419, in checkout\r\n    rec = pool._do_get()\r\n  File \"sqlalchemy/lib/sqlalchemy/pool/impl.py\", line 120, in _do_get\r\n    return self._pool.get(wait, self._timeout)\r\n  File \"sqlalchemy/lib/sqlalchemy/util/queue.py\", line 254, in get\r\n    return self.await_(\r\nTypeError: await_fallback() takes 1 positional argument but 2 were given\r\n```\r\n\r\n**Versions.**\r\n - OS: Darwin 19.5.0\r\n - Python: 3.8.2\r\n - SQLAlchemy: 1.4.0b1 @ 1e800285508ecd869c6874fed6f46ff68815d184\r\n - Database: PostgreSQL 12.4\r\n - DBAPI: asyncpg 0.21.0\r\n\r\n**Additional context**\r\n\r\nExpected output:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"issue.py\", line 18, in <module>\r\n    asyncio.run(main())\r\n  File \"asyncio/runners.py\", line 43, in run\r\n    return loop.run_until_complete(main)\r\n  File \"asyncio/base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"issue.py\", line 15, in main\r\n    await e.connect()  # expecting asyncio.TimeoutError here\r\n  File \"sqlalchemy/lib/sqlalchemy/ext/asyncio/engine.py\", line 79, in start\r\n    self.sync_connection = await (greenlet_spawn(self.sync_engine.connect))\r\n  File \"sqlalchemy/lib/sqlalchemy/util/_concurrency_py3k.py\", line 91, in greenlet_spawn\r\n    result = context.throw(*sys.exc_info())\r\n  File \"sqlalchemy/lib/sqlalchemy/future/engine.py\", line 426, in connect\r\n    return super(Engine, self).connect()\r\n  File \"sqlalchemy/lib/sqlalchemy/engine/base.py\", line 2914, in connect\r\n    return self._connection_cls(self, close_with_result=close_with_result)\r\n  File \"sqlalchemy/lib/sqlalchemy/engine/base.py\", line 90, in __init__\r\n    else engine.raw_connection()\r\n  File \"sqlalchemy/lib/sqlalchemy/engine/base.py\", line 2993, in raw_connection\r\n    return self._wrap_pool_connect(self.pool.connect, _connection)\r\n  File \"sqlalchemy/lib/sqlalchemy/engine/base.py\", line 2960, in _wrap_pool_connect\r\n    return fn()\r\n  File \"sqlalchemy/lib/sqlalchemy/pool/base.py\", line 301, in connect\r\n    return _ConnectionFairy._checkout(self)\r\n  File \"sqlalchemy/lib/sqlalchemy/pool/base.py\", line 698, in _checkout\r\n    fairy = _ConnectionRecord.checkout(pool)\r\n  File \"sqlalchemy/lib/sqlalchemy/pool/base.py\", line 419, in checkout\r\n    rec = pool._do_get()\r\n  File \"sqlalchemy/lib/sqlalchemy/pool/impl.py\", line 120, in _do_get\r\n    return self._pool.get(wait, self._timeout)\r\n  File \"sqlalchemy/lib/sqlalchemy/util/queue.py\", line 254, in get\r\n    return self.await_(\r\n  File \"sqlalchemy/lib/sqlalchemy/util/_concurrency_py3k.py\", line 63, in await_fallback\r\n    return current.driver.switch(awaitable)\r\n  File \"sqlalchemy/lib/sqlalchemy/util/_concurrency_py3k.py\", line 86, in greenlet_spawn\r\n    value = await result\r\n  File \"asyncio/tasks.py\", line 490, in wait_for\r\n    raise exceptions.TimeoutError()\r\nasyncio.exceptions.TimeoutError\r\n```\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5544", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5544/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5544/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5544/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5544", "id": 687608816, "node_id": "MDU6SXNzdWU2ODc2MDg4MTY=", "number": 5544, "title": "Postgres <col>.any(<obj>, operator=operators.ne) compiles incorrectly", "user": {"login": "bradykieffer", "id": 6308101, "node_id": "MDQ6VXNlcjYzMDgxMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6308101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradykieffer", "html_url": "https://github.com/bradykieffer", "followers_url": "https://api.github.com/users/bradykieffer/followers", "following_url": "https://api.github.com/users/bradykieffer/following{/other_user}", "gists_url": "https://api.github.com/users/bradykieffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradykieffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradykieffer/subscriptions", "organizations_url": "https://api.github.com/users/bradykieffer/orgs", "repos_url": "https://api.github.com/users/bradykieffer/repos", "events_url": "https://api.github.com/users/bradykieffer/events{/privacy}", "received_events_url": "https://api.github.com/users/bradykieffer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273914, "node_id": "MDU6TGFiZWwxMTQxMjczOTE0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/postgresql", "name": "postgresql", "color": "60A070", "default": false, "description": ""}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}, {"id": 1141274001, "node_id": "MDU6TGFiZWwxMTQxMjc0MDAx", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sql", "name": "sql", "color": "5060F0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-27T23:39:18Z", "updated_at": "2020-08-28T13:58:49Z", "closed_at": "2020-08-28T13:58:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI'm _fairly_ sure that calling `col.any(\"foo\", operator=operators.ne)` results in an incorrect query being compiled (although I could 100% be wrong on this). I have a draft patch put up that I think pretty succinctly demonstrates the issue [here](https://github.com/bradykieffer/sqlalchemy/pull/1) (on a fork). The generated SQL leads to weird behavior / doesn't actually guarantee that none of the elements within the aggregated set do not equal `foo`.\r\n\r\n**Expected behavior**\r\nI expect the underlying SQL generated from:\r\n\r\n```python\r\nc.any(5, operator=operators.ne)\r\n``` \r\n\r\nto be:\r\n```sql\r\nNOT (5 = ANY(x))\r\n```\r\n\r\n**To Reproduce**\r\n[This](https://github.com/sqlalchemy/sqlalchemy/blob/master/test/dialect/postgresql/test_compiler.py#L1276) test case actually repros the issue directly. Specifically calling `column.any(value, operator=operators.ne)` will repro it for me. I haven't verified other cases because I wanted to double check this isn't expected behavior first. I've modified the testcase [here](https://github.com/bradykieffer/sqlalchemy/pull/1) in a draft patch to demonstrate the error & my attempt at a fix.\r\n\r\n```py\r\nself.assert_compile(\r\n    c.any(5, operator=operators.ne),\r\n    \"NOT (%(param_1)s = ANY (x))\",\r\n    checkparams={\"param_1\": 5},\r\n)\r\n```\r\n\r\n**Versions.**\r\n - OS: macOS\r\n - Python: Python3.8\r\n - SQLAlchemy: Running off commit: d78686b4f109fdc78ca6239e5a5af791717bc48d\r\n - Database: Postgres (I'm running 9.6 at the moment)\r\n - DBAPI psycopg2\r\n\r\n**Additional context**\r\nAgain I'm not 100% certain on this but I'd love to figure out how to properly test the issue assuming it is one to get more familiar with the code base \ud83d\ude04 \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5543", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5543/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5543/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5543/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5543", "id": 687524528, "node_id": "MDU6SXNzdWU2ODc1MjQ1Mjg=", "number": 5543, "title": "bulk_update_mappings method does not work with list of dictionaries given as a variable for update while the same list when provided as an expanded form(actual dictionary with key and value) works fine", "user": {"login": "nirum09", "id": 15206483, "node_id": "MDQ6VXNlcjE1MjA2NDgz", "avatar_url": "https://avatars1.githubusercontent.com/u/15206483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirum09", "html_url": "https://github.com/nirum09", "followers_url": "https://api.github.com/users/nirum09/followers", "following_url": "https://api.github.com/users/nirum09/following{/other_user}", "gists_url": "https://api.github.com/users/nirum09/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirum09/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirum09/subscriptions", "organizations_url": "https://api.github.com/users/nirum09/orgs", "repos_url": "https://api.github.com/users/nirum09/repos", "events_url": "https://api.github.com/users/nirum09/events{/privacy}", "received_events_url": "https://api.github.com/users/nirum09/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1146930079, "node_id": "MDU6TGFiZWwxMTQ2OTMwMDc5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/awaiting%20info", "name": "awaiting info", "color": "1f8ec1", "default": false, "description": "waiting for the submitter to give more information"}, {"id": 2316937896, "node_id": "MDU6TGFiZWwyMzE2OTM3ODk2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/numpy%20datatype%20incompatibility", "name": "numpy datatype incompatibility", "color": "3ed1f9", "default": false, "description": "usually numpy.int64"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-27T20:37:32Z", "updated_at": "2020-09-01T17:41:33Z", "closed_at": "2020-08-27T21:53:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nupdated_records=[{'id':1, 'salary':5000},{'id':2, 'salary':8000}]\r\ndb.session.bulk_update_mappings(Salary, updated_records)\r\nthrows error sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) can't adapt type 'numpy.int64' \r\n(Background on this error at: http://sqlalche.me/e/13/f405)\r\n\r\nwhile \r\ndb.session.bulk_update_mappings(Salary,[{'id':1, 'salary':5000}, {'id':2, 'salary':8000}]) works fine\r\n\r\n**Expected behavior**\r\nboth scenarios should work as they are same\r\n\r\n**To Reproduce**\r\nPlease try to provide a [Minimal, Complete, and Verifiable](http://stackoverflow.com/help/mcve) example. \r\nSee also [Reporting Bugs](https://www.sqlalchemy.org/participate.html#bugs) on the website, and some [example issues](https://github.com/sqlalchemy/sqlalchemy/issues?q=label%3A%22great+mcve%22)\r\n\r\n```py\r\nupdated_records=[{'id':1, 'salary':5000},{'id':2, 'salary':8000}]\r\ndb.session.bulk_update_mappings(Salary, updated_records)\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nsqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) can't adapt type 'numpy.int64' \r\n(Background on this error at: http://sqlalche.me/e/13/f405)\r\n```\r\n\r\n**Versions.**\r\n - OS: macOS Catalina \r\n - Python: 3.8\r\n - SQLAlchemy: 1.3.18 (Flask-SQLAlchemy version: 2.4.3)\r\n - Database:postgresdb\r\n - DBAPI: psycopg2\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. -->\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5542", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5542/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5542/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5542/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5542", "id": 687499050, "node_id": "MDU6SXNzdWU2ODc0OTkwNTA=", "number": 5542, "title": "raise informative message when assocaition proxy attempted to be used in plain column context", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2306070027, "node_id": "MDU6TGFiZWwyMzA2MDcwMDI3", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/association%20proxy", "name": "association proxy", "color": "94d606", "default": false, "description": ""}, {"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141273966, "node_id": "MDU6TGFiZWwxMTQxMjczOTY2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/orm", "name": "orm", "color": "20C0B0", "default": false, "description": null}, {"id": 2011745336, "node_id": "MDU6TGFiZWwyMDExNzQ1MzM2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/requires%20triage", "name": "requires triage", "color": "ffff00", "default": false, "description": "New issue that requires categorization"}, {"id": 1141286348, "node_id": "MDU6TGFiZWwxMTQxMjg2MzQ4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sqlalchemy.ext", "name": "sqlalchemy.ext", "color": "90E060", "default": false, "description": "extension modules, most of which are ORM related"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-08-27T19:52:31Z", "updated_at": "2020-08-27T20:58:51Z", "closed_at": "2020-08-27T20:58:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "raise an error when the use case at #5541 is used, until if and when we have a better approach.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5540", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5540/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5540/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5540/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5540", "id": 687479479, "node_id": "MDU6SXNzdWU2ODc0Nzk0Nzk=", "number": 5540, "title": "Create an exception for replace when there is an unvalid % in manual queries", "user": {"login": "m2b-tborges", "id": 61765873, "node_id": "MDQ6VXNlcjYxNzY1ODcz", "avatar_url": "https://avatars0.githubusercontent.com/u/61765873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m2b-tborges", "html_url": "https://github.com/m2b-tborges", "followers_url": "https://api.github.com/users/m2b-tborges/followers", "following_url": "https://api.github.com/users/m2b-tborges/following{/other_user}", "gists_url": "https://api.github.com/users/m2b-tborges/gists{/gist_id}", "starred_url": "https://api.github.com/users/m2b-tborges/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m2b-tborges/subscriptions", "organizations_url": "https://api.github.com/users/m2b-tborges/orgs", "repos_url": "https://api.github.com/users/m2b-tborges/repos", "events_url": "https://api.github.com/users/m2b-tborges/events{/privacy}", "received_events_url": "https://api.github.com/users/m2b-tborges/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-27T19:16:46Z", "updated_at": "2020-08-28T14:58:19Z", "closed_at": "2020-08-28T14:58:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "My queries use to be ridiculous complex, and I have the necessity to write its DQL. \r\nThis is okay. Until I need to use a LIKE in query with '%'.\r\n\r\nI've spent countless hours debugging my codes looking for an issue and always I have the necessity to use LIKE in a query it's happens. The exception that breaks my code is inconsistent and does not allow me to understand where the error is.\r\n\r\nI would like to ask you guys help with this situation.\r\nThe error that returns is a generic error and doesn't help to identify where the mistake is.\r\n\r\n  File \"/home/thcborges/.pyenv/versions/3.8.2/envs/retention-dashes/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 976, in execute\r\n    return self._execute_text(object_, multiparams, params)\r\n  File \"/home/thcborges/.pyenv/versions/3.8.2/envs/retention-dashes/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1145, in _execute_text\r\n    ret = self._execute_context(\r\n  File \"/home/thcborges/.pyenv/versions/3.8.2/envs/retention-dashes/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1287, in _execute_context\r\n    self._handle_dbapi_exception(\r\n  File \"/home/thcborges/.pyenv/versions/3.8.2/envs/retention-dashes/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1485, in _handle_dbapi_exception\r\n    util.raise_(exc_info[1], with_traceback=exc_info[2])\r\n  File \"/home/thcborges/.pyenv/versions/3.8.2/envs/retention-dashes/lib/python3.8/site-packages/sqlalchemy/util/compat.py\", line 178, in raise_\r\n    raise exception\r\n  File \"/home/thcborges/.pyenv/versions/3.8.2/envs/retention-dashes/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1247, in _execute_context\r\n    self.dialect.do_execute(\r\n  File \"/home/thcborges/.pyenv/versions/3.8.2/envs/retention-dashes/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 590, in do_execute\r\n    cursor.execute(statement, parameters)\r\nTypeError: dict is not a sequence\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5538", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5538/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5538/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5538/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5538", "id": 686188267, "node_id": "MDU6SXNzdWU2ODYxODgyNjc=", "number": 5538, "title": "attribute_mapped_collection not working in some case", "user": {"login": "youtux", "id": 778703, "node_id": "MDQ6VXNlcjc3ODcwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/778703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/youtux", "html_url": "https://github.com/youtux", "followers_url": "https://api.github.com/users/youtux/followers", "following_url": "https://api.github.com/users/youtux/following{/other_user}", "gists_url": "https://api.github.com/users/youtux/gists{/gist_id}", "starred_url": "https://api.github.com/users/youtux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/youtux/subscriptions", "organizations_url": "https://api.github.com/users/youtux/orgs", "repos_url": "https://api.github.com/users/youtux/repos", "events_url": "https://api.github.com/users/youtux/events{/privacy}", "received_events_url": "https://api.github.com/users/youtux/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-08-26T10:00:12Z", "updated_at": "2020-09-07T10:29:45Z", "closed_at": "2020-08-26T15:46:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nIt seems to me that attribute_mapped_collection() does populate the dictionary key correctly using a specific order of argument when creating an object. See the code below.\r\n\r\n**Expected behavior**\r\nThe argument order passed to `ItemSaleSettings.__init__` should not matter, and both definition of that object should back-populate Sale.item_settings correctly.\r\n\r\n**To Reproduce**\r\n\r\n```py\r\nfrom sqlalchemy import *\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import relationship\r\nfrom sqlalchemy.orm.collections import attribute_mapped_collection\r\n\r\n# Just used for better string representation\r\nclass _Base(object):\r\n    def __str__(self):\r\n        return '{self.__class__.__name__}({self.id})'.format(self=self)\r\n    __repr__ = __str__\r\n\r\n\r\nBase = declarative_base(cls=_Base)\r\n\r\n\r\nclass Sale(Base):\r\n    __tablename__ = \"sale\"\r\n    id = Column(Integer, primary_key=True)\r\n\r\n    item_settings = relationship(\r\n        lambda: ItemSaleSettings,\r\n        back_populates='sale',\r\n        collection_class=attribute_mapped_collection('item'),\r\n    )\r\n\r\n\r\nclass Item(Base):\r\n    __tablename__ = \"item\"\r\n    id = Column(Integer, primary_key=True)\r\n\r\n\r\nclass ItemSaleSettings(Base):\r\n    __tablename__ = \"item_sale_settings\"\r\n    __table_args__ = (UniqueConstraint('sale_id', 'item_id'),)\r\n\r\n    id = Column(Integer, primary_key=True)\r\n\r\n    sale_id = Column(Integer, ForeignKey(Sale.id), nullable=False)\r\n    sale = relationship(Sale, back_populates='item_settings')\r\n\r\n    item_id = Column(Integer, ForeignKey(Item.id), nullable=False)\r\n    item = relationship(Item)\r\n\r\n    enabled = Column(Boolean, nullable=False, default=False)\r\n\r\n    # potentially other settings, but irrelevant for this bug report\r\n\r\n\r\nsale = Sale(id=1)\r\n\r\nitem1, item2 = Item(id=1), Item(id=2)\r\n\r\n\r\niss1 = ItemSaleSettings(\r\n    id=1,\r\n    enabled=True,\r\n\r\n    item=item1,\r\n    sale=sale,\r\n)\r\n\r\nprint(sale.item_settings)\r\nassert sale.item_settings[item1].enabled  # works as expected\r\n\r\niss2 = ItemSaleSettings(\r\n    id=2,\r\n    enabled=True,\r\n    # Swapping the order of the params (sale, item) will make the assertion fail\r\n    sale=sale,\r\n    item=item2,\r\n)\r\n\r\nprint(sale.item_settings)  # Notice the key `None`, which should not exist\r\nassert sale.item_settings[item2].enabled  # Breaks!\r\n\r\n```\r\n\r\n**Error**\r\n\r\n```\r\n{Item(1): ItemSaleSettings(1)}\r\n{Item(1): ItemSaleSettings(1), None: ItemSaleSettings(2)}\r\nTraceback (most recent call last):\r\n  File \"/Users/youtux/Library/Application Support/JetBrains/PyCharm2020.2/scratches/scratch_1.py\", line 78, in <module>\r\n    assert sale.item_settings[item2].enabled\r\nKeyError: Item(2)\r\n\r\n```\r\n\r\n**Versions.**\r\n - OS: macOS Catalina 10.15.6\r\n - Python: 3.6.11\r\n - SQLAlchemy: 1.3.19\r\n - Database: not relevant\r\n - DBAPI: not relevant\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5537", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5537/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5537/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5537/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5537", "id": 685155808, "node_id": "MDU6SXNzdWU2ODUxNTU4MDg=", "number": 5537, "title": "Cannot insert ARRAY of Enum with Postgres", "user": {"login": "daveisfera", "id": 1686193, "node_id": "MDQ6VXNlcjE2ODYxOTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1686193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daveisfera", "html_url": "https://github.com/daveisfera", "followers_url": "https://api.github.com/users/daveisfera/followers", "following_url": "https://api.github.com/users/daveisfera/following{/other_user}", "gists_url": "https://api.github.com/users/daveisfera/gists{/gist_id}", "starred_url": "https://api.github.com/users/daveisfera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daveisfera/subscriptions", "organizations_url": "https://api.github.com/users/daveisfera/orgs", "repos_url": "https://api.github.com/users/daveisfera/repos", "events_url": "https://api.github.com/users/daveisfera/events{/privacy}", "received_events_url": "https://api.github.com/users/daveisfera/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1146930079, "node_id": "MDU6TGFiZWwxMTQ2OTMwMDc5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/awaiting%20info", "name": "awaiting info", "color": "1f8ec1", "default": false, "description": "waiting for the submitter to give more information"}, {"id": 1143569068, "node_id": "MDU6TGFiZWwxMTQzNTY5MDY4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/datatypes", "name": "datatypes", "color": "59d67b", "default": false, "description": "things to do with database types, like VARCHAR and others"}, {"id": 1959689852, "node_id": "MDU6TGFiZWwxOTU5Njg5ODUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/great%20mcve", "name": "great mcve", "color": "dcf972", "default": false, "description": "An issue with a great mcve"}, {"id": 1141273914, "node_id": "MDU6TGFiZWwxMTQxMjczOTE0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/postgresql", "name": "postgresql", "color": "60A070", "default": false, "description": ""}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-08-25T04:15:24Z", "updated_at": "2020-08-26T02:39:09Z", "closed_at": "2020-08-26T02:11:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nAn `ARRAY` of `Enum` can now be created ( see #5265 and #5266 ), but values cannot be inserted into it.\r\n\r\n**Expected behavior**\r\nValues can be inserted into the created column\r\n\r\n**To Reproduce**\r\n```py\r\nimport enum\r\nfrom typing import List\r\n\r\nfrom sqlalchemy import ARRAY\r\nfrom sqlalchemy import Column\r\nfrom sqlalchemy import Enum\r\nfrom sqlalchemy import Integer\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import Session\r\nfrom sqlalchemy import create_engine\r\n\r\nBase = declarative_base()\r\n\r\n\r\nclass MyEnum(enum.Enum):\r\n    one = 1\r\n    two = 2\r\n    three = 3\r\n\r\n\r\nclass TestArrayEnum(Base):\r\n    __tablename__ = \"test_array_enum\"\r\n    id = Column(Integer, primary_key=True)\r\n    values = Column(ARRAY(Enum(MyEnum)), nullable=False)\r\n\r\n    def __init__(self, values: List[MyEnum]):\r\n        self.values = values\r\n\r\n\r\nengine = create_engine('***postgress connection string***')\r\nBase.metadata.create_all(engine)\r\n\r\nsession = Session(engine)\r\n\r\nsession.add(TestArrayEnum([MyEnum.one, MyEnum.two, MyEnum.three]))\r\n\r\nsession.commit()\r\n```\r\n\r\n**Error**\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1248, in _execute_context\r\n    self.dialect.do_execute(\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 580, in do_execute\r\n    cursor.execute(statement, parameters)\r\npsycopg2.errors.DatatypeMismatch: column \"values\" is of type myenum[] but expression is of type text[]\r\nLINE 1: INSERT INTO test_array_enum (values) VALUES (ARRAY['one','tw...\r\n                                                     ^\r\nHINT:  You will need to rewrite or cast the expression.\r\n\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 38, in <module>\r\n    session.commit()\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 1027, in commit\r\n    self.transaction.commit()\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 494, in commit\r\n    self._prepare_impl()\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 473, in _prepare_impl\r\n    self.session.flush()\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 2470, in flush\r\n    self._flush(objects)\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 2608, in _flush\r\n    transaction.rollback(_capture_exception=True)\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py\", line 68, in __exit__\r\n    compat.reraise(exc_type, exc_value, exc_tb)\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/util/compat.py\", line 153, in reraise\r\n    raise value\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 2568, in _flush\r\n    flush_context.execute()\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py\", line 422, in execute\r\n    rec.execute(self)\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py\", line 586, in execute\r\n    persistence.save_obj(\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py\", line 239, in save_obj\r\n    _emit_insert_statements(\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py\", line 1136, in _emit_insert_statements\r\n    result = cached_connections[connection].execute(\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 988, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/sql/elements.py\", line 287, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1101, in _execute_clauseelement\r\n    ret = self._execute_context(\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1252, in _execute_context\r\n    self._handle_dbapi_exception(\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1473, in _handle_dbapi_exception\r\n    util.raise_from_cause(sqlalchemy_exception, exc_info)\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/util/compat.py\", line 398, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/util/compat.py\", line 152, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1248, in _execute_context\r\n    self.dialect.do_execute(\r\n  File \"/Users/dlj/.pyenv/versions/3.8.2/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 580, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.ProgrammingError: (psycopg2.errors.DatatypeMismatch) column \"values\" is of type myenum[] but expression is of type text[]\r\nLINE 1: INSERT INTO test_array_enum (values) VALUES (ARRAY['one','tw...\r\n                                                     ^\r\nHINT:  You will need to rewrite or cast the expression.\r\n\r\n[SQL: INSERT INTO test_array_enum (values) VALUES (%(values)s) RETURNING test_array_enum.id]\r\n[parameters: {'values': ['one', 'two', 'three']}]\r\n(Background on this error at: http://sqlalche.me/e/f405)\r\n```\r\n\r\n**Versions.**\r\n - OS: macOS 10.15.6\r\n - Python: 3.8.2\r\n - SQLAlchemy: 1.3.19\r\n - Database: Postgres 11.7\r\n - DBAPI: psycopg2 2.8.5\r\n\r\n**Additional context**\r\nSetting `create_constraint=False, native_enum=False` is a workaround so data can be inserted", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5535", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5535/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5535/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5535/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5535", "id": 684958140, "node_id": "MDU6SXNzdWU2ODQ5NTgxNDA=", "number": 5535, "title": "typo in 'Constructing a pool' docs - wrong parameter name (username instead of user)", "user": {"login": "toinbis", "id": 68685, "node_id": "MDQ6VXNlcjY4Njg1", "avatar_url": "https://avatars2.githubusercontent.com/u/68685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toinbis", "html_url": "https://github.com/toinbis", "followers_url": "https://api.github.com/users/toinbis/followers", "following_url": "https://api.github.com/users/toinbis/following{/other_user}", "gists_url": "https://api.github.com/users/toinbis/gists{/gist_id}", "starred_url": "https://api.github.com/users/toinbis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toinbis/subscriptions", "organizations_url": "https://api.github.com/users/toinbis/orgs", "repos_url": "https://api.github.com/users/toinbis/repos", "events_url": "https://api.github.com/users/toinbis/events{/privacy}", "received_events_url": "https://api.github.com/users/toinbis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "CaselIT", "id": 16175304, "node_id": "MDQ6VXNlcjE2MTc1MzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/16175304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaselIT", "html_url": "https://github.com/CaselIT", "followers_url": "https://api.github.com/users/CaselIT/followers", "following_url": "https://api.github.com/users/CaselIT/following{/other_user}", "gists_url": "https://api.github.com/users/CaselIT/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaselIT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaselIT/subscriptions", "organizations_url": "https://api.github.com/users/CaselIT/orgs", "repos_url": "https://api.github.com/users/CaselIT/repos", "events_url": "https://api.github.com/users/CaselIT/events{/privacy}", "received_events_url": "https://api.github.com/users/CaselIT/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "CaselIT", "id": 16175304, "node_id": "MDQ6VXNlcjE2MTc1MzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/16175304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaselIT", "html_url": "https://github.com/CaselIT", "followers_url": "https://api.github.com/users/CaselIT/followers", "following_url": "https://api.github.com/users/CaselIT/following{/other_user}", "gists_url": "https://api.github.com/users/CaselIT/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaselIT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaselIT/subscriptions", "organizations_url": "https://api.github.com/users/CaselIT/orgs", "repos_url": "https://api.github.com/users/CaselIT/repos", "events_url": "https://api.github.com/users/CaselIT/events{/privacy}", "received_events_url": "https://api.github.com/users/CaselIT/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-08-24T20:52:25Z", "updated_at": "2020-08-24T22:41:10Z", "closed_at": "2020-08-24T22:41:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://docs.sqlalchemy.org/en/13/core/pooling.html#constructing-a-pool seems to have a typo in docs.  \r\nAs per https://www.psycopg.org/docs/module.html#psycopg2.connect , psycopg2.connect takes `user`, not `username` as the argument. Once `username` is passed, the error is raised: `psycopg2.ProgrammingError: invalid dsn: invalid connection option \"username\"`.\r\n\r\n![Screenshot 2020-08-24 at 23 51 18](https://user-images.githubusercontent.com/68685/91095288-c8e83280-e664-11ea-981c-e9352b30e66b.png)\r\n\r\nP.S. Many thanks for creating SqlAlchemy!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5532", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5532/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5532/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5532/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5532", "id": 684389317, "node_id": "MDU6SXNzdWU2ODQzODkzMTc=", "number": 5532, "title": "AttributeError: 'property' object has no attribute 'property'", "user": {"login": "cuzox", "id": 3461464, "node_id": "MDQ6VXNlcjM0NjE0NjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3461464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuzox", "html_url": "https://github.com/cuzox", "followers_url": "https://api.github.com/users/cuzox/followers", "following_url": "https://api.github.com/users/cuzox/following{/other_user}", "gists_url": "https://api.github.com/users/cuzox/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuzox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuzox/subscriptions", "organizations_url": "https://api.github.com/users/cuzox/orgs", "repos_url": "https://api.github.com/users/cuzox/repos", "events_url": "https://api.github.com/users/cuzox/events{/privacy}", "received_events_url": "https://api.github.com/users/cuzox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1146930079, "node_id": "MDU6TGFiZWwxMTQ2OTMwMDc5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/awaiting%20info", "name": "awaiting info", "color": "1f8ec1", "default": false, "description": "waiting for the submitter to give more information"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-08-24T06:11:38Z", "updated_at": "2020-08-25T04:11:46Z", "closed_at": "2020-08-24T20:15:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say we have a base class with an instance method that tries to read a property's type at runtime:\r\n```python\r\nclass CustomBase(object):\r\n  def instance_method(self):\r\n    class_ = inspect(self).mapper.class_\r\n    class_property = class_.bravo.property\r\n    print(type(class_property))\r\n\r\nBase = declarative_base(cls=CustomBase)\r\n\r\nclass Alpha(Base):\r\n  bravo = relationship('Bravo')\r\n```\r\n\r\nWhen running `Alpha().instance_method()`, I'm getting `AttributeError: 'property' object has no attribute 'property'`.\r\nThat is because the type of `class_.bravo` is actually `<class 'property'>`\r\nWhen I do the same outside of the instance method:\r\n```python\r\nclass_ = inspect(Alpha()).mapper.class_\r\nclass_property = class_.bravo.property\r\nprint(type(class_property))\r\n```\r\n\r\nI get the expected output: `RelationshipProperty`\r\nBecause the type of `class_.bravo` is `<class InstrumentedAttribute>`\r\nWhy is the type of the model field different when accessed from outside, than it is when accessed from an instance method? Shouldn't it be the same?\r\n\r\n**Versions.**\r\n - OS: Alpine 3.8\r\n - Python: 3.7\r\n - SQLAlchemy: 1.3.16\r\n - Database: PostgreSQL 11\r\n - DBAPI: 2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5529", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5529/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5529/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5529/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5529", "id": 684252463, "node_id": "MDU6SXNzdWU2ODQyNTI0NjM=", "number": 5529, "title": "`create_async_engine(server_side_cursors=True)` raises wrong exception", "user": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2296459902, "node_id": "MDU6TGFiZWwyMjk2NDU5OTAy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/asyncio", "name": "asyncio", "color": "ef7fac", "default": false, "description": ""}, {"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-08-23T20:37:50Z", "updated_at": "2020-08-31T23:03:01Z", "closed_at": "2020-08-31T23:03:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\nThis is a typo in `create_async_engine()` where it should be `async_exc` instead of `exc`.\r\n\r\n```python\r\nIn [1]: from sqlalchemy.ext.asyncio import create_async_engine\r\n\r\nIn [2]: await create_async_engine(server_side_cursors=True)\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-2-2bcff6ed9bdc> in <module>\r\n----> 1 await create_async_engine(server_side_cursors=True)\r\n\r\nlib/sqlalchemy/ext/asyncio/engine.py in create_async_engine(*arg, **kw)\r\n     32\r\n     33     if kw.get(\"server_side_cursors\", False):\r\n---> 34         raise exc.AsyncMethodRequired(\r\n     35             \"Can't set server_side_cursors for async engine globally; \"\r\n     36             \"use the connection.stream() method for an async \"\r\n\r\nAttributeError: module 'sqlalchemy.exc' has no attribute 'AsyncMethodRequired'\r\n```\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen. -->\r\n```python\r\nIn [1]: from sqlalchemy.ext.asyncio import create_async_engine\r\n\r\nIn [2]: await create_async_engine(server_side_cursors=True)\r\n---------------------------------------------------------------------------\r\nAsyncMethodRequired                       Traceback (most recent call last)\r\n<ipython-input-2-2bcff6ed9bdc> in <module>\r\n----> 1 await create_async_engine(server_side_cursors=True)\r\n\r\nlib/sqlalchemy/ext/asyncio/engine.py in create_async_engine(*arg, **kw)\r\n     32\r\n     33     if kw.get(\"server_side_cursors\", False):\r\n---> 34         raise async_exc.AsyncMethodRequired(\r\n     35             \"Can't set server_side_cursors for async engine globally; \"\r\n     36             \"use the connection.stream() method for an async \"\r\n\r\nAsyncMethodRequired: Can't set server_side_cursors for async engine globally; use the connection.stream() method for an async streaming result set\r\n```\r\n\r\n**To Reproduce**\r\n<!--Please try to provide a [Minimal, Complete, and Verifiable](http://stackoverflow.com/help/mcve) example. \r\nSee also [Reporting Bugs](https://www.sqlalchemy.org/participate.html#bugs) on the website, and some [example issues](https://github.com/sqlalchemy/sqlalchemy/issues?q=label%3A%22great+mcve%22)-->\r\n\r\n```py\r\nimport asyncio\r\nfrom sqlalchemy.ext.asyncio import create_async_engine\r\n\r\nasyncio.run(create_async_engine(server_side_cursors=True))\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"reproduce.py\", line 4, in <module>\r\n    asyncio.run(create_async_engine(server_side_cursors=True))\r\n  File \"..../lib/sqlalchemy/ext/asyncio/engine.py\", line 34, in create_async_engine\r\n    raise exc.AsyncMethodRequired(\r\nAttributeError: module 'sqlalchemy.exc' has no attribute 'AsyncMethodRequired'\r\n```\r\n\r\n**Versions.**\r\n - OS: Darwin 19.5.0\r\n - Python: Python 3.8.2\r\n - SQLAlchemy: 1.4.0b1 317f2e1be2b06cdc12bc84510eb743d9752763dd\r\n - Database: PostgreSQL 12.4\r\n - DBAPI: asyncpg 0.21.0\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. -->\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5528", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5528/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5528/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5528/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5528", "id": 683859076, "node_id": "MDU6SXNzdWU2ODM4NTkwNzY=", "number": 5528, "title": "Improve mariadb sequence support", "user": {"login": "CaselIT", "id": 16175304, "node_id": "MDQ6VXNlcjE2MTc1MzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/16175304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaselIT", "html_url": "https://github.com/CaselIT", "followers_url": "https://api.github.com/users/CaselIT/followers", "following_url": "https://api.github.com/users/CaselIT/following{/other_user}", "gists_url": "https://api.github.com/users/CaselIT/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaselIT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaselIT/subscriptions", "organizations_url": "https://api.github.com/users/CaselIT/orgs", "repos_url": "https://api.github.com/users/CaselIT/repos", "events_url": "https://api.github.com/users/CaselIT/events{/privacy}", "received_events_url": "https://api.github.com/users/CaselIT/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2205915448, "node_id": "MDU6TGFiZWwyMjA1OTE1NDQ4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/mariadb", "name": "mariadb", "color": "c1fdff", "default": false, "description": ""}, {"id": 1141273948, "node_id": "MDU6TGFiZWwxMTQxMjczOTQ4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/schema", "name": "schema", "color": "602060", "default": false, "description": "things related to the DDL related objects like Table, Column, CreateIndex, etc."}, {"id": 1313059238, "node_id": "MDU6TGFiZWwxMzEzMDU5MjM4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/use%20case", "name": "use case", "color": "b54650", "default": false, "description": "not really a feature or a bug; can be support for new DB features or user use cases not anticipated"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-08-21T22:30:28Z", "updated_at": "2020-08-25T22:14:40Z", "closed_at": "2020-08-25T22:14:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "- support optional sequences\r\n- `inserted_primary_key` is nor returned correctly if the column does not have auto_increment\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5526", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5526/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5526/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5526/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5526", "id": 683625571, "node_id": "MDU6SXNzdWU2ODM2MjU1NzE=", "number": 5526, "title": "make URL a NamedTuple like stdlib url objects; provide a method to alter fields in a new copy", "user": {"login": "rjarry", "id": 472286, "node_id": "MDQ6VXNlcjQ3MjI4Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/472286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rjarry", "html_url": "https://github.com/rjarry", "followers_url": "https://api.github.com/users/rjarry/followers", "following_url": "https://api.github.com/users/rjarry/following{/other_user}", "gists_url": "https://api.github.com/users/rjarry/gists{/gist_id}", "starred_url": "https://api.github.com/users/rjarry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rjarry/subscriptions", "organizations_url": "https://api.github.com/users/rjarry/orgs", "repos_url": "https://api.github.com/users/rjarry/repos", "events_url": "https://api.github.com/users/rjarry/events{/privacy}", "received_events_url": "https://api.github.com/users/rjarry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141275752, "node_id": "MDU6TGFiZWwxMTQxMjc1NzUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/engine", "name": "engine", "color": "B04040", "default": false, "description": "engines, connections, transactions, isolation levels, execution options"}, {"id": 1141273925, "node_id": "MDU6TGFiZWwxMTQxMjczOTI1", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/feature", "name": "feature", "color": "306080", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 8, "created_at": "2020-08-21T15:02:01Z", "updated_at": "2020-08-26T02:47:14Z", "closed_at": "2020-08-26T02:44:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nSince commit https://github.com/sqlalchemy/sqlalchemy/commit/2644693c0bf5b775f7a7283cdbf566a37872586f converting an URL object to string will fail if query parameter values are not string nor bytes. Before this fix, query parameter values were (silently) converted to string (and not quoted, which was a problem).\r\n\r\n**Expected behavior**\r\n\r\nNon-string query parameter values should be converted to string before calling `urllib.parse.quote_plus()`.\r\n\r\n**To Reproduce**\r\n\r\n```pycon\r\nroot@f7839e4d5ed1:/# python3\r\nPython 3.8.5 (default, Aug  2 2020, 15:09:07) \r\n...\r\n>>> from sqlalchemy.engine import url\r\n>>> u = url.make_url('mysql:///dbname?charset=utf8')\r\n>>> u.query['use_unicode'] = True\r\n>>> str(u)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/url.py\", line 106, in __str__\r\n    return self.__to_string__(hide_password=False)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/url.py\", line 98, in __to_string__\r\n    s += \"?\" + \"&\".join(\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/url.py\", line 99, in <genexpr>\r\n    \"%s=%s\" % (util.quote_plus(k), util.quote_plus(element))\r\n  File \"/usr/lib/python3.8/urllib/parse.py\", line 855, in quote_plus\r\n    string = quote(string, safe + space, encoding, errors)\r\n  File \"/usr/lib/python3.8/urllib/parse.py\", line 839, in quote\r\n    return quote_from_bytes(string, safe)\r\n  File \"/usr/lib/python3.8/urllib/parse.py\", line 864, in quote_from_bytes\r\n    raise TypeError(\"quote_from_bytes() expected bytes\")\r\nTypeError: quote_from_bytes() expected bytes\r\n```\r\n\r\n**Versions.**\r\n - OS: All\r\n - Python: 3\r\n - SQLAlchemy: 1.3.18\r\n - Database: All\r\n - DBAPI: N/A\r\n\r\n**Na\u00efve patch to fix the problem**\r\n\r\n```diff\r\ndiff --git a/lib/sqlalchemy/engine/url.py b/lib/sqlalchemy/engine/url.py\r\nindex f0685d9e3367..f8be390ce943 100644\r\n--- a/lib/sqlalchemy/engine/url.py\r\n+++ b/lib/sqlalchemy/engine/url.py\r\n@@ -96,7 +96,7 @@ class URL(object):\r\n             keys = list(self.query)\r\n             keys.sort()\r\n             s += \"?\" + \"&\".join(\r\n-                \"%s=%s\" % (util.quote_plus(k), util.quote_plus(element))\r\n+                \"%s=%s\" % (util.quote_plus(k), util.quote_plus(str(element)))\r\n                 for k in keys\r\n                 for element in util.to_list(self.query[k])\r\n             )\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5521", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5521/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5521/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5521/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5521", "id": 681516665, "node_id": "MDU6SXNzdWU2ODE1MTY2NjU=", "number": 5521, "title": "Typing support for query results", "user": {"login": "henrycjc", "id": 1715928, "node_id": "MDQ6VXNlcjE3MTU5Mjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1715928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henrycjc", "html_url": "https://github.com/henrycjc", "followers_url": "https://api.github.com/users/henrycjc/followers", "following_url": "https://api.github.com/users/henrycjc/following{/other_user}", "gists_url": "https://api.github.com/users/henrycjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/henrycjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henrycjc/subscriptions", "organizations_url": "https://api.github.com/users/henrycjc/orgs", "repos_url": "https://api.github.com/users/henrycjc/repos", "events_url": "https://api.github.com/users/henrycjc/events{/privacy}", "received_events_url": "https://api.github.com/users/henrycjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269144, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-19T03:24:19Z", "updated_at": "2020-08-20T18:54:57Z", "closed_at": "2020-08-19T03:57:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "(Apologies if this is not the appropriate forum for such open ended discussion). \r\n\r\nContext: my colleagues and I use Python 3's typing annotations (https://docs.python.org/3/library/typing.html) extensively for not only static analysis (i.e. mypy), but also for maintainability (the self documentation is invaluable) and productivity (i.e. PyCharm linting/auto completion etc.). We also use SQLAlchemy extensively. \r\n\r\nCanonical example:\r\n\r\n```\r\ndef get_query(session: MySession) -> List[orm.TableModel]:\r\n    return session.query(...).all()\r\n```\r\n\r\nWhen constricting a non-trivial SQLA query (i.e. more than `select *`), our ability to provide types for return values quickly diminishes. Unions (e.g. `Union[orm.Foo, orm.Bar]`) are useful when there is a full join of two tables but this is seldom the case. Another limitation is this pattern requires explicitly calling `.all()` when we would like to perhaps exploit the lazy evaluation or combine the query with another query. \r\n\r\nWe have worked around this by building a wrapper proxy object of sorts for the return values: \r\n\r\nContrived example (perhaps not the best at exhibiting the value):\r\n```\r\nT = TypeVar(\"T\")\r\nQueryVal = Union[T, sa.ClauseElement]\r\n\r\nclass JoinedQueryRow(object):\r\n    table_one_name: QueryVal[str]\r\n    table_two_value: QueryVal[int]\r\n\r\n\r\nclass QueryContract(ABC, Generic[RowT]):\r\n    def all(self) -> List[RowT]:\r\n        ...\r\n    def group_by(self: T, *criteria: ClauseElement) -> T:\r\n        ...\r\n    # etc.\r\n\r\ndef get_foo_bar_qry(...) -> QueryContract[JoinedQueryRow]:\r\n   return session.query(orm.Table1.table_one_name, orm.Table2.table_two_value).join(...)\r\n```\r\n\r\nThis is not perfect but has a real effect of cutting down on bugs when combining our query code with Pandas code. \r\nUltimately a lot of the value comes from PyCharm auto completion, enabling developers to write fewer obvious bugs and improve productivity when navigating very large code bases.\r\n\r\n**Questions**\r\n@zzzeek, would you care to share any feedback or comments on this approach please?\r\nAre there any plans for first class typing support within SQLAlchemy? Noting this could encroach on Python2 compatibility if annotations were used instead of comments\r\n(If so, what might that look like for e.g. Query objects where attributes are naturally dynamic?)\r\n\r\n\r\n**Versions**\r\n - OS: Any\r\n - Python: 3.6+\r\n - SQLAlchemy: 1.2.19\r\n - Database: PostgreSQL though could be any\r\n - DBAPI: psycopg2 though could be any\r\n\r\nThank you for your time", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5520", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5520/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5520/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5520/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5520", "id": 681394889, "node_id": "MDU6SXNzdWU2ODEzOTQ4ODk=", "number": 5520, "title": "enum checkfirst does not consult schema translate map", "user": {"login": "robertmuil", "id": 637885, "node_id": "MDQ6VXNlcjYzNzg4NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/637885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertmuil", "html_url": "https://github.com/robertmuil", "followers_url": "https://api.github.com/users/robertmuil/followers", "following_url": "https://api.github.com/users/robertmuil/following{/other_user}", "gists_url": "https://api.github.com/users/robertmuil/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertmuil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertmuil/subscriptions", "organizations_url": "https://api.github.com/users/robertmuil/orgs", "repos_url": "https://api.github.com/users/robertmuil/repos", "events_url": "https://api.github.com/users/robertmuil/events{/privacy}", "received_events_url": "https://api.github.com/users/robertmuil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141273914, "node_id": "MDU6TGFiZWwxMTQxMjczOTE0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/postgresql", "name": "postgresql", "color": "60A070", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 12, "created_at": "2020-08-18T23:11:05Z", "updated_at": "2020-08-21T15:37:15Z", "closed_at": "2020-08-19T17:38:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nIf the `schema_translation_map` is used with the engine, to support multiple schemas at runtime, then the use of an Enum within the ORM paradigm will generate a `type <name> already exists`.\r\n\r\nSetting the `create_type` of the ENUM to False will allow it to succeed but **only if used in a single column**. I suspect there might be two bugs here:\r\n1. that the `create_type=False` of an ENUM is not being properly honoured\r\n2. that the check for existence of a type is not working in the case of a schema_translation_map\r\n\r\n**Expected behavior**\r\nExpect the enum to be created **once, and once only** with a `CREATE TYPE` statement.\r\nInstead, multiple of these statements are issued, causing postgres to complain that it already exists.\r\n\r\n**To Reproduce**\r\n\r\n```py\r\nimport enum\r\nfrom sqlalchemy.exc import ProgrammingError\r\nfrom sqlalchemy.schema import CreateSchema, DropSchema\r\nfrom sqlalchemy import Column, Integer, String, create_engine, Sequence\r\nfrom sqlalchemy.engine import Connection\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.dialects.postgresql import ENUM\r\n\r\nDB_URL = 'postgres://<user>:<password>@<host>/<database>'\r\n\r\nclass Mood(enum.Enum):\r\n    sad = 1\r\n    ok = 2\r\n    happy = 3\r\n\r\nengine = create_engine(DB_URL, echo=True)\r\n\r\nschema_name = 'minimal_failing_example'\r\n\r\nengine.execute(CreateSchema(schema_name))\r\n\r\nBase = declarative_base()\r\n\r\nmood_enum = ENUM(Mood, schema=Base.metadata.schema)\r\n# 2nd alternative:\r\n# mood_enum = ENUM(Mood, schema=Base.metadata.schema), create_type=False)\r\n\r\nclass Person(Base):\r\n    __tablename__ = 'person'\r\n    id = Column(Integer, Sequence('pid_seq'), primary_key=True)\r\n    name = Column(String, nullable=False)\r\n    dominant_mood = Column(mood_enum, nullable=True)\r\n    #2nd alternative:\r\n    # current_mood = Column(mood_enum, nullable=True)\r\n\r\nconn: Connection = engine.connect().execution_options(schema_translate_map={None: schema_name})\r\n\r\ntry:\r\n    Base.metadata.create_all(bind=conn)\r\nexcept ProgrammingError as ex:\r\n    engine.execute(DropSchema(schema_name, cascade=True))\r\n    raise ex\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1277, in _execute_context\r\n    self.dialect.do_execute(\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 593, in do_execute\r\n    cursor.execute(statement, parameters)\r\npsycopg2.errors.DuplicateObject: type \"mood\" already exists\r\n\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/robert_muil/Library/Application Support/JetBrains/PyCharm2020.2/scratches/scratch_9.py\", line 51, in <module>\r\n    raise ex\r\n  File \"/Users/robert_muil/Library/Application Support/JetBrains/PyCharm2020.2/scratches/scratch_9.py\", line 48, in <module>\r\n    Base.metadata.create_all(bind=conn)\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/sql/schema.py\", line 4546, in create_all\r\n    bind._run_visitor(\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1657, in _run_visitor\r\n    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/sql/visitors.py\", line 144, in traverse_single\r\n    return meth(obj, **kw)\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/sql/ddl.py\", line 783, in visit_metadata\r\n    self.traverse_single(\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/sql/visitors.py\", line 144, in traverse_single\r\n    return meth(obj, **kw)\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/sql/ddl.py\", line 811, in visit_table\r\n    table.dispatch.before_create(\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/event/attr.py\", line 322, in __call__\r\n    fn(*args, **kw)\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py\", line 645, in __call__\r\n    return getattr(self.target, self.name)(*arg, **kw)\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/dialects/postgresql/base.py\", line 1575, in _on_table_create\r\n    self.create(bind=bind, checkfirst=checkfirst)\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/dialects/postgresql/base.py\", line 1510, in create\r\n    bind.execute(CreateEnumType(self))\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1014, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/sql/ddl.py\", line 72, in _execute_on_connection\r\n    return connection._execute_ddl(self, multiparams, params)\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1071, in _execute_ddl\r\n    ret = self._execute_context(\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1317, in _execute_context\r\n    self._handle_dbapi_exception(\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1511, in _handle_dbapi_exception\r\n    util.raise_(\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/util/compat.py\", line 178, in raise_\r\n    raise exception\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1277, in _execute_context\r\n    self.dialect.do_execute(\r\n  File \"/usr/local/anaconda3/envs/datacat/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 593, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.ProgrammingError: (psycopg2.errors.DuplicateObject) type \"mood\" already exists\r\n\r\n[SQL: CREATE TYPE minimal_failing_example.mood AS ENUM ('sad', 'ok', 'happy')]\r\n(Background on this error at: http://sqlalche.me/e/13/f405)\r\n```\r\n\r\n**Versions.**\r\n - OS: `MacOS Catalina 10.15.6`\r\n - Python: `3.8`\r\n - SQLAlchemy: `1.3.18`\r\n - Database: `PostgreSQL 12.3`\r\n - DBAPI: `org.postgresql:postgresql:RELEASE 42.2.5`\r\n\r\n**Additional context**\r\n\r\nRegardless of the actual issue, I think that the following code, from lines 1565-1572 in `base.py` are incorrect:\r\n```py\r\n        if (\r\n            checkfirst\r\n            or (\r\n                not self.metadata\r\n                and not kw.get(\"_is_metadata_operation\", False)\r\n            )\r\n            and not self._check_for_name_in_memos(checkfirst, kw)\r\n        ):\r\n```\r\nThis conditional will evaluate true even if the check for name comes back True (which it always will when `create_type=False`. I believe there are brackets missing and that it should read:\r\n```py\r\n        if (\r\n             ( checkfirst\r\n                or (\r\n                    not self.metadata\r\n                    and not kw.get(\"_is_metadata_operation\", False)\r\n                )\r\n            )\r\n            and not self._check_for_name_in_memos(checkfirst, kw)\r\n        ):\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5519", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5519/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5519/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5519/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5519", "id": 681375942, "node_id": "MDU6SXNzdWU2ODEzNzU5NDI=", "number": 5519, "title": "Connection pool rollback()s obscuring pg_stat_database metrics", "user": {"login": "pearsonhenri", "id": 6347812, "node_id": "MDQ6VXNlcjYzNDc4MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/6347812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pearsonhenri", "html_url": "https://github.com/pearsonhenri", "followers_url": "https://api.github.com/users/pearsonhenri/followers", "following_url": "https://api.github.com/users/pearsonhenri/following{/other_user}", "gists_url": "https://api.github.com/users/pearsonhenri/gists{/gist_id}", "starred_url": "https://api.github.com/users/pearsonhenri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pearsonhenri/subscriptions", "organizations_url": "https://api.github.com/users/pearsonhenri/orgs", "repos_url": "https://api.github.com/users/pearsonhenri/repos", "events_url": "https://api.github.com/users/pearsonhenri/events{/privacy}", "received_events_url": "https://api.github.com/users/pearsonhenri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141275054, "node_id": "MDU6TGFiZWwxMTQxMjc1MDU0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/connection%20pool", "name": "connection pool", "color": "4cc5c9", "default": false, "description": ""}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-08-18T22:18:48Z", "updated_at": "2020-08-21T14:09:54Z", "closed_at": "2020-08-21T02:45:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to keep a closer eye on some of the performance metrics for our production Postgres instance, and I was somewhat alarmed when I took a look at the `pg_stat_database` numbers (particularly the `xact_rollback` count). Dug into it a bit, and it appears that this is largely due to [connection release behavior](https://docs.sqlalchemy.org/en/13/core/connections.html):\r\n> When the connection is returned to the pool for re-use, the pooling mechanism issues a rollback() call on the DBAPI connection so that any transactional state or locks are removed, and the connection is ready for its next use.\r\n\r\nI suppose I understand the motive for this behavior (get the connection in a \"clean\" transactional state), but I don't really see that benefit outweighing the obfuscation of these meaningful database states. We have millions of aborted transactions, and it's very hard to find signal through the noise. Possibly we could avoid this problem by creating the connection with `autocommit=True`, but I don't exactly want that either. Is there something that I'm doing wrong here, or is there no way to have my cake and eat it too with SQLAlchemy and Postgres?\r\n\r\nThank you!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5518", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5518/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5518/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5518/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5518", "id": 680862448, "node_id": "MDU6SXNzdWU2ODA4NjI0NDg=", "number": 5518, "title": "Negation of ANY/ALL", "user": {"login": "quinot", "id": 1678806, "node_id": "MDQ6VXNlcjE2Nzg4MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1678806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quinot", "html_url": "https://github.com/quinot", "followers_url": "https://api.github.com/users/quinot/followers", "following_url": "https://api.github.com/users/quinot/following{/other_user}", "gists_url": "https://api.github.com/users/quinot/gists{/gist_id}", "starred_url": "https://api.github.com/users/quinot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quinot/subscriptions", "organizations_url": "https://api.github.com/users/quinot/orgs", "repos_url": "https://api.github.com/users/quinot/repos", "events_url": "https://api.github.com/users/quinot/events{/privacy}", "received_events_url": "https://api.github.com/users/quinot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273914, "node_id": "MDU6TGFiZWwxMTQxMjczOTE0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/postgresql", "name": "postgresql", "color": "60A070", "default": false, "description": ""}, {"id": 1313059238, "node_id": "MDU6TGFiZWwxMzEzMDU5MjM4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/use%20case", "name": "use case", "color": "b54650", "default": false, "description": "not really a feature or a bug; can be support for new DB features or user use cases not anticipated"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 5, "created_at": "2020-08-18T09:55:39Z", "updated_at": "2020-08-18T19:55:06Z", "closed_at": "2020-08-18T19:07:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe negation of ANY generates incorrect SQL:\r\n\r\n```\r\nIn [2]: from sqlalchemy import column,ARRAY,String\r\n\r\nIn [3]: c = column('arr', ARRAY(String))\r\n\r\nIn [4]: print(c.any('foo'))\r\n:param_1 = ANY (arr)\r\n\r\nIn [5]: print(~c.any('foo'))\r\n:param_1 != ANY (arr)\r\n\r\nIn [6]: print(c.any('foo').isnot(True))\r\n(:param_1 = ANY (arr)) IS NOT true\r\n\r\nIn [7]: print(~c.all('foo'))\r\n:param_1 != ALL (arr)\r\n```\r\n\r\n**Expected behavior**\r\nGenerate `NOT('xxx' = ANY(arr))`, `NOT('xxx' = ALL(arr))`\r\n\r\n**To Reproduce**\r\nSee above description\r\n\r\n**Versions.**\r\n - OS: Linux\r\n - Python: 3.7.6\r\n - SQLAlchemy: 1.3.9\r\n - Database: PostgreSQL\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5517", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5517/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5517/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5517/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5517", "id": 680829171, "node_id": "MDU6SXNzdWU2ODA4MjkxNzE=", "number": 5517, "title": "Why session can not be closed properly", "user": {"login": "vliweihan", "id": 37055604, "node_id": "MDQ6VXNlcjM3MDU1NjA0", "avatar_url": "https://avatars2.githubusercontent.com/u/37055604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vliweihan", "html_url": "https://github.com/vliweihan", "followers_url": "https://api.github.com/users/vliweihan/followers", "following_url": "https://api.github.com/users/vliweihan/following{/other_user}", "gists_url": "https://api.github.com/users/vliweihan/gists{/gist_id}", "starred_url": "https://api.github.com/users/vliweihan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vliweihan/subscriptions", "organizations_url": "https://api.github.com/users/vliweihan/orgs", "repos_url": "https://api.github.com/users/vliweihan/repos", "events_url": "https://api.github.com/users/vliweihan/events{/privacy}", "received_events_url": "https://api.github.com/users/vliweihan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-18T09:05:10Z", "updated_at": "2020-08-20T01:50:40Z", "closed_at": "2020-08-18T14:52:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I met this problem, I want to close the session after executing something, but it doesn't seem to have worked.\r\n\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy.orm import sessionmaker, scoped_session\r\nfrom sqlalchemy import func, distinct\r\nfrom sqlalchemy.pool import NullPool\r\nfrom models import TABLE1, TABLE2\r\n\r\nengine = create_engine('mysql+pymysql://root:a123456@localhost:3306/TEST', poolclass=NullPool)\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\nr = session.query(distinct(TABLE1.TABLE_NAME)).all()\r\nsession.close()\r\nengine.dispose()\r\n# session is remain available after closing\r\ns = session.query(distinct(TABLE2.DATABASE)).all()", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5513", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5513/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5513/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5513/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5513", "id": 678753903, "node_id": "MDU6SXNzdWU2Nzg3NTM5MDM=", "number": 5513, "title": "allow polymorphic_union column name to be customized", "user": {"login": "Jesse-Bakker", "id": 22473248, "node_id": "MDQ6VXNlcjIyNDczMjQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/22473248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jesse-Bakker", "html_url": "https://github.com/Jesse-Bakker", "followers_url": "https://api.github.com/users/Jesse-Bakker/followers", "following_url": "https://api.github.com/users/Jesse-Bakker/following{/other_user}", "gists_url": "https://api.github.com/users/Jesse-Bakker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jesse-Bakker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jesse-Bakker/subscriptions", "organizations_url": "https://api.github.com/users/Jesse-Bakker/orgs", "repos_url": "https://api.github.com/users/Jesse-Bakker/repos", "events_url": "https://api.github.com/users/Jesse-Bakker/events{/privacy}", "received_events_url": "https://api.github.com/users/Jesse-Bakker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141297829, "node_id": "MDU6TGFiZWwxMTQxMjk3ODI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/declarative", "name": "declarative", "color": "602050", "default": false, "description": "has to do with the declarative API, scanning classes and mixins for attributes to be mapped"}, {"id": 1313059238, "node_id": "MDU6TGFiZWwxMzEzMDU5MjM4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/use%20case", "name": "use case", "color": "b54650", "default": false, "description": "not really a feature or a bug; can be support for new DB features or user use cases not anticipated"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 7, "created_at": "2020-08-13T21:48:37Z", "updated_at": "2020-08-17T19:55:58Z", "closed_at": "2020-08-17T19:55:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen using AbstractConcreteBase to define a concrete inheritance hierarchy, sqlalchemy uses a column named `type` as discriminator. If sublcass has a column named `type`, this causes an error when querying polymorphically because there are then two columns named `type`.\r\n\r\n**Expected behavior**\r\nPolymorphic query gives results from all subclasses.\r\n\r\n**To Reproduce**\r\n\r\n```py\r\nfrom sqlalchemy import create_engine, Column, Integer, ForeignKey, String\r\nfrom sqlalchemy.ext.declarative import declarative_base, AbstractConcreteBase, declared_attr, ConcreteBase\r\nfrom sqlalchemy.orm import configure_mappers, relationship\r\nfrom sqlalchemy.orm import Session\r\n\r\nBase = declarative_base()\r\n\r\nclass Employee(AbstractConcreteBase, Base):\r\n    employee_id = Column(Integer, primary_key=True)\r\n\r\nclass Manager(Employee):\r\n    __tablename__ = 'manager'\r\n\r\n    name = Column(String(50))\r\n    manager_data = Column(String(40))\r\n\r\n    type = Column(String(20))\r\n\r\n    __mapper_args__ = {\r\n        'polymorphic_identity':'manager',\r\n        'concrete':True}\r\n\r\nclass Engineer(Employee):\r\n    __tablename__ = 'engineer'\r\n\r\n    name = Column(String(50))\r\n\r\n    type = Column(String(30))\r\n\r\n    __mapper_args__ = {\r\n        'polymorphic_identity':'engineer',\r\n        'concrete':True}\r\n\r\nengine = create_engine(\"<connection string>\", echo=True)\r\n\r\nsession = Session(bind=engine)\r\nsession.add_all([\r\n    Manager(name=\"A\", manager_data=\"ABC\", type=\"Z\"),\r\n    Engineer(name=\"B\", type=\"W\"),\r\n    ])\r\n\r\nsession.commit()\r\nsession.query(Employee).all()\r\n\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1277, in _execute_context\r\n    self.dialect.do_execute(\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 593, in do_execute\r\n    cursor.execute(statement, parameters)\r\npsycopg2.errors.AmbiguousColumn: column reference \"type\" is ambiguous\r\nLINE 1: ...d AS pjoin_employee_id, pjoin.name AS pjoin_name, pjoin.type...\r\n                                                             ^\r\n\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"models.py\", line 45, in <module>\r\n    session.query(Employee).all()\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/orm/query.py\", line 3341, in all\r\n    return list(self)\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/orm/query.py\", line 3503, in __iter__\r\n    return self._execute_and_instances(context)\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/orm/query.py\", line 3528, in _execute_and_instances\r\n    result = conn.execute(querycontext.statement, self._params)\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1014, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/sql/elements.py\", line 298, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1127, in _execute_clauseelement\r\n    ret = self._execute_context(\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1317, in _execute_context\r\n    self._handle_dbapi_exception(\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1511, in _handle_dbapi_exception\r\n    util.raise_(\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/util/compat.py\", line 178, in raise_\r\n    raise exception\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1277, in _execute_context\r\n    self.dialect.do_execute(\r\n  File \"/home/jesse/.local/share/virtualenvs/sqla-XdCa15U5/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 593, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.ProgrammingError: (psycopg2.errors.AmbiguousColumn) column reference \"type\" is ambiguous\r\nLINE 1: ...d AS pjoin_employee_id, pjoin.name AS pjoin_name, pjoin.type...\r\n                                                             ^\r\n\r\n[SQL: SELECT pjoin.employee_id AS pjoin_employee_id, pjoin.name AS pjoin_name, pjoin.type AS pjoin_type, pjoin.manager_data AS pjoin_manager_data\r\nFROM (SELECT grunt.employee_id AS employee_id, grunt.name AS name, grunt.type AS type, CAST(NULL AS VARCHAR(40)) AS manager_data, 'engineer' AS type\r\nFROM grunt UNION ALL SELECT manager.employee_id AS employee_id, manager.name AS name, manager.type AS type, manager.manager_data AS manager_data, 'manager' AS type\r\nFROM manager) AS pjoin]\r\n(Background on this error at: http://sqlalche.me/e/13/f405)\r\n```\r\n\r\n**Versions.**\r\n - OS: 5.7.12-arch1-1 x86_64 GNU/Linux\r\n - Python: 3.8.5\r\n - SQLAlchemy: 1.3.18\r\n - Database: PostgreSQL and MySQL\r\n - DBAPI: psycopg2 and pymysql\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5512", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5512/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5512/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5512/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5512", "id": 678520278, "node_id": "MDU6SXNzdWU2Nzg1MjAyNzg=", "number": 5512, "title": "Pymssql import will stop working from python 3.9", "user": {"login": "shishirpy", "id": 1947809, "node_id": "MDQ6VXNlcjE5NDc4MDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1947809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shishirpy", "html_url": "https://github.com/shishirpy", "followers_url": "https://api.github.com/users/shishirpy/followers", "following_url": "https://api.github.com/users/shishirpy/following{/other_user}", "gists_url": "https://api.github.com/users/shishirpy/gists{/gist_id}", "starred_url": "https://api.github.com/users/shishirpy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shishirpy/subscriptions", "organizations_url": "https://api.github.com/users/shishirpy/orgs", "repos_url": "https://api.github.com/users/shishirpy/repos", "events_url": "https://api.github.com/users/shishirpy/events{/privacy}", "received_events_url": "https://api.github.com/users/shishirpy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1143451229, "node_id": "MDU6TGFiZWwxMTQzNDUxMjI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/external%20driver%20issues", "name": "external driver issues", "color": "2d6eb7", "default": false, "description": "the issue involves a misbehavior on the part of the DBAPI itself, probably not SQLAlchemy"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-13T15:17:37Z", "updated_at": "2020-08-13T16:51:14Z", "closed_at": "2020-08-13T16:51:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I got this warning from `pytest`, the import method needs to be changed.\r\n\r\n```shell\r\n /lib/python3.8/site-packages/sqlalchemy/dialects/mssql/pymssql.py:80: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working\r\n    module = __import__(\"pymssql\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5511", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5511/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5511/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5511/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5511", "id": 678445001, "node_id": "MDU6SXNzdWU2Nzg0NDUwMDE=", "number": 5511, "title": "Invalid Query is generated on MS Server (distinct) ", "user": {"login": "theosotr", "id": 6434138, "node_id": "MDQ6VXNlcjY0MzQxMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6434138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theosotr", "html_url": "https://github.com/theosotr", "followers_url": "https://api.github.com/users/theosotr/followers", "following_url": "https://api.github.com/users/theosotr/following{/other_user}", "gists_url": "https://api.github.com/users/theosotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/theosotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theosotr/subscriptions", "organizations_url": "https://api.github.com/users/theosotr/orgs", "repos_url": "https://api.github.com/users/theosotr/repos", "events_url": "https://api.github.com/users/theosotr/events{/privacy}", "received_events_url": "https://api.github.com/users/theosotr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269144, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}, {"id": 2011745336, "node_id": "MDU6TGFiZWwyMDExNzQ1MzM2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/requires%20triage", "name": "requires triage", "color": "ffff00", "default": false, "description": "New issue that requires categorization"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-13T13:39:02Z", "updated_at": "2020-08-13T14:38:59Z", "closed_at": "2020-08-13T14:06:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\nSQLAlchemy produces an invalid MSSQL query.\r\n\r\nSpecifically, I have the following simple query run on MS Server.\r\n\r\n```python\r\nexpr = Table.col+ literal(1) \r\nsession.query(expr).select_from(Yangon).order_by(asc(expr)).distinct()\r\n```\r\n\r\nthis causes the following exception\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1284, in _execute_context\r\n    cursor, statement, parameters, context\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/engine/default.py\", line 590, in do_execute\r\n    cursor.execute(statement, parameters)\r\npyodbc.ProgrammingError: ('42000', '[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]ORDER BY items must appear in the select list if SELECT DISTINCT is specified. (145) (SQLExecDirectW)')\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"driver_mssql.py\", line 34, in <module>\r\n    for r in ret2:\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/orm/query.py\", line 3481, in __iter__\r\n    return self._execute_and_instances(context)\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/orm/query.py\", line 3506, in _execute_and_instances\r\n    result = conn.execute(querycontext.statement, self._params)\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1020, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/sql/elements.py\", line 298, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1139, in _execute_clauseelement\r\n    distilled_params,\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1324, in _execute_context\r\n    e, statement, parameters, cursor, context\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1518, in _handle_dbapi_exception\r\n    sqlalchemy_exception, with_traceback=exc_info[2], from_=e\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/util/compat.py\", line 178, in raise_\r\n    raise exception\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1284, in _execute_context\r\n    cursor, statement, parameters, context\r\n  File \"/home/.env/lib/python3.6/site-packages/sqlalchemy/engine/default.py\", line 590, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.ProgrammingError: (pyodbc.ProgrammingError) ('42000', '[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]ORDER BY items must appear in the select list if SELECT DISTINCT is specified. (145) (SQLExecDirectW)')\r\n[SQL: SELECT DISTINCT table.col + ? AS anon_1\r\nFROM table ORDER BY table.col + ? ASC]\r\n[parameters: (1, 1)]\r\n(Background on this error at: http://sqlalche.me/e/f405)\r\n````\r\n\r\n**Expected behavior**\r\n\r\n```sql\r\nSELECT DISTINCT table.col + 1 AS anon_1\r\nFROM table ORDER BY anon_1 ASC\r\n```\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5510", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5510/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5510/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5510/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5510", "id": 678043442, "node_id": "MDU6SXNzdWU2NzgwNDM0NDI=", "number": 5510, "title": "update.ordered_values does not actually work at all", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141274292, "node_id": "MDU6TGFiZWwxMTQxMjc0Mjky", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/blocker", "name": "blocker", "color": "FF5025", "default": false, "description": "issue that must be resolved asap as it is preventing things from working"}, {"id": 1141274001, "node_id": "MDU6TGFiZWwxMTQxMjc0MDAx", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sql", "name": "sql", "color": "5060F0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-08-12T23:42:19Z", "updated_at": "2020-08-13T16:36:48Z", "closed_at": "2020-08-13T16:36:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "in crud.py line 79 we get stmt_parameters from the dictionary, ignore the ordering, and fill up values() with an arbitrary order.\r\n\r\nno idea how the tests are passing, no idea if this is also broken in 1.3.\r\n\r\n```\r\n    def test_update_to_expression_two(self):\r\n        \"\"\"test update from an expression.\r\n\r\n        this logic is triggered currently by a left side that doesn't\r\n        have a key.  The current supported use case is updating the index\r\n        of a PostgreSQL ARRAY type.\r\n\r\n        \"\"\"\r\n\r\n        from sqlalchemy import ARRAY\r\n\r\n        t = table(\r\n            \"foo\",\r\n            column(\"data1\", ARRAY(Integer)),\r\n            column(\"data2\", ARRAY(Integer)),\r\n        )\r\n\r\n        stmt = t.update().ordered_values(\r\n            (t.c.data1[5], 7), (t.c.data2[10], 18)\r\n        )\r\n        dialect = default.StrCompileDialect()\r\n        dialect.paramstyle = \"qmark\"\r\n        dialect.positional = True\r\n        self.assert_compile(\r\n            stmt,\r\n            \"UPDATE foo SET data1[?]=?, data2[?]=?\",\r\n            dialect=dialect,\r\n            checkpositional=(5, 7, 10, 18),\r\n        )\r\n\r\n\r\n        stmt = t.update().ordered_values(\r\n            (t.c.data2[10], 18), (t.c.data1[5], 7),\r\n        )\r\n        self.assert_compile(\r\n            stmt,\r\n            \"UPDATE foo SET data2[?]=?, data1[?]=?\",\r\n            dialect=dialect,\r\n            checkpositional=(10, 18, 5, 7),\r\n        )\r\n\r\n\r\n```\r\n\r\nreplaces #5509\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5509", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5509/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5509/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5509/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5509", "id": 678013305, "node_id": "MDU6SXNzdWU2NzgwMTMzMDU=", "number": 5509, "title": "Intermittent \"test_update_to_expression_two\" failures", "user": {"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141269144, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}, {"id": 1141273864, "node_id": "MDU6TGFiZWwxMTQxMjczODY0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/tests", "name": "tests", "color": "20A050", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-08-12T22:19:32Z", "updated_at": "2020-08-12T23:42:43Z", "closed_at": "2020-08-12T23:42:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "My first patchset for [Gerrit 2143](https://gerrit.sqlalchemy.org/c/sqlalchemy/sqlalchemy/+/2143) had a single failure in\r\n\r\n[sqlalchemy_gerrit/cext=cext,db=mysql,pyv=py27](https://jenkins.sqlalchemy.org/job/sqlalchemy_gerrit/cext=cext,db=mysql,pyv=py27/5459/)\r\n\r\nspecifically [this](https://jenkins.sqlalchemy.org/job/sqlalchemy_gerrit/cext=cext,db=mysql,pyv=py27/5459/testReport/junit/test.sql.test_update/UpdateTest/test_update_to_expression_two/):\r\n\r\n``` none\r\nTraceback (most recent call last):\r\n  File \"/home/jenkins/workspace/sqlalchemy_gerrit/20384d2e/test/sql/test_update.py\", line 886, in test_update_to_expression_two\r\n    checkpositional=(5, 7, 10, 18),\r\n  File \"/home/jenkins/workspace/sqlalchemy_gerrit/20384d2e/.tox/py27-cext-mysql/lib/python2.7/site-packages/sqlalchemy/testing/assertions.py\", line 439, in assert_compile\r\n    eq_(cc, result, \"%r != %r on dialect %r\" % (cc, result, dialect))\r\n  File \"/home/jenkins/workspace/sqlalchemy_gerrit/20384d2e/.tox/py27-cext-mysql/lib/python2.7/site-packages/sqlalchemy/testing/assertions.py\", line 207, in eq_\r\n    assert a == b, msg or \"%r != %r\" % (a, b)\r\nAssertionError: u'UPDATE foo SET data2[?]=?, data1[?]=?' != 'UPDATE foo SET data1[?]=?, data2[?]=?' on dialect <sqlalchemy.engine.default.StrCompileDialect object at 0x7f35acce5c10>\r\nassert 'UPDATE foo S...?, data1[?]=?' == 'UPDATE foo SE...?, data2[?]=?'\r\n  - UPDATE foo SET data2[?]=?, data1[?]=?\r\n  + UPDATE foo SET data1[?]=?, data2[?]=?\r\n```\r\n\r\nI seemed to recall having seen a failure like that before, so I did a `recheck` and CI failed again, but this time it wasn't \"db=mysql,pyv=py27\" that failed, it was\r\n\r\n[sqlalchemy_gerrit/cext=nocext,db=sqlite-postgresql,pyv=py27](https://jenkins.sqlalchemy.org/job/sqlalchemy_gerrit/cext=nocext,db=sqlite-postgresql,pyv=py27/5460/)\r\n\r\nSame test failing, both py27, but the first time it was mysql that failed and postgresql that passed, while on `recheck` it was the other way around.\r\n\r\nI wonder if this is somehow similar to the recent behaviour seen in #5411 where \"the order of things\" can be non-deterministic based on [hash randomization](https://github.com/sqlalchemy/sqlalchemy/issues/5411#issuecomment-646969210)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5506", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5506/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5506/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5506/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5506", "id": 677267420, "node_id": "MDU6SXNzdWU2NzcyNjc0MjA=", "number": 5506, "title": "Improve reflection for mssql temporary tables", "user": {"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141277259, "node_id": "MDU6TGFiZWwxMTQxMjc3MjU5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/SQL%20Server", "name": "SQL Server", "color": "C02080", "default": false, "description": "Microsoft SQL Server, e.g. mssql"}, {"id": 1313059238, "node_id": "MDU6TGFiZWwxMzEzMDU5MjM4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/use%20case", "name": "use case", "color": "b54650", "default": false, "description": "not really a feature or a bug; can be support for new DB features or user use cases not anticipated"}], "state": "closed", "locked": false, "assignee": {"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2020-08-11T23:37:01Z", "updated_at": "2020-09-01T17:12:30Z", "closed_at": "2020-09-01T17:12:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nSee Stack Overflow question [here](https://stackoverflow.com/q/63305154/2144390). The mssql dialect cannot determine whether or not a #temporary table exists because temporary tables do not appear in the `INFORMATION_SCHEMA.TABLES` view for the current catalog (database). (@CaselIT - They don't appear in `sys.tables`, either. \u263a\ufe0f)\r\n\r\n**Describe the solution you'd like**\r\nSee if there is a practical way to get `autoload_with=` to work with temporary tables.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5505", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5505/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5505/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5505/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5505", "id": 677065665, "node_id": "MDU6SXNzdWU2NzcwNjU2NjU=", "number": 5505, "title": "sqlite binary without encoding", "user": {"login": "nationwidepants", "id": 7494630, "node_id": "MDQ6VXNlcjc0OTQ2MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7494630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nationwidepants", "html_url": "https://github.com/nationwidepants", "followers_url": "https://api.github.com/users/nationwidepants/followers", "following_url": "https://api.github.com/users/nationwidepants/following{/other_user}", "gists_url": "https://api.github.com/users/nationwidepants/gists{/gist_id}", "starred_url": "https://api.github.com/users/nationwidepants/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nationwidepants/subscriptions", "organizations_url": "https://api.github.com/users/nationwidepants/orgs", "repos_url": "https://api.github.com/users/nationwidepants/repos", "events_url": "https://api.github.com/users/nationwidepants/events{/privacy}", "received_events_url": "https://api.github.com/users/nationwidepants/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1143569068, "node_id": "MDU6TGFiZWwxMTQzNTY5MDY4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/datatypes", "name": "datatypes", "color": "59d67b", "default": false, "description": "things to do with database types, like VARCHAR and others"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}, {"id": 1141273987, "node_id": "MDU6TGFiZWwxMTQxMjczOTg3", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sqlite", "name": "sqlite", "color": "E0D0A0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-11T17:39:32Z", "updated_at": "2020-08-12T09:33:06Z", "closed_at": "2020-08-12T09:33:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please let me know if I've made a mistake, but it does seem that this is unexpected behavior.\r\n#5073  #5175\r\n\r\n```bash\r\n$ python3 --version\r\nPython 3.7.8\r\n$ python3 -m pytest x.py\r\n```\r\n```python\r\nfrom sqlalchemy import Column, Table\r\nfrom sqlalchemy.types import LargeBinary\r\nimport sqlalchemy as sa\r\nimport asyncio, pytest\r\nmeta = sa.MetaData()\r\nengine = sa.create_engine('sqlite:///sqlite.db')\r\n\r\nz = Table(\r\n    \"z\", meta,\r\n    Column(\"x\", LargeBinary, nullable=False, primary_key=True),\r\n)\r\n\r\nmodel = {\"x\": b'\\x16\\r\\xd4)\\x93>(\\x04\\x83\\xcc\\xc5\\xd6\\xff'}\r\n\r\nclass TestDatabase:\r\n    def test_get(db_class):\r\n        meta.create_all(engine)\r\n        query = z.insert().values(**model)\r\n        with engine.connect() as connection:\r\n            connection.execute(query)\r\n\r\n        query = sa.select([z.c.x])\r\n        with engine.connect() as connection:\r\n            record = connection.execute(query)\r\n            assert record is not None\r\n            for row in record:\r\n                assert model['x'] == row.x # <-- No TypeError\r\n```\r\n```python\r\nfrom sqlalchemy import Column, Table\r\nfrom sqlalchemy.types import LargeBinary\r\nimport sqlalchemy as sa\r\nimport asyncio, pytest\r\nmeta = sa.MetaData()\r\nengine = sa.create_engine('sqlite:///sqlite.db')\r\n\r\nz = Table(\r\n    \"z\", meta,\r\n    Column(\"x\", LargeBinary, nullable=False, primary_key=True),\r\n)\r\n\r\nmodel = {\"x\": b'\\x16\\r\\xd4)\\x93>(\\x04\\x83\\xcc\\xc5\\xd6\\xff'}\r\n\r\nclass TestDatabase:\r\n    def test_get(db_class):\r\n        meta.create_all(engine)\r\n        mydict = {}\r\n        modelset_iteration = [key for key, value in model.items()]\r\n        question_marks = ', :'.join(list(modelset_iteration))\r\n        question_marks = \":\" + question_marks\r\n        value = ', '.join(list(modelset_iteration))\r\n\r\n        query = f'INSERT INTO {z.name}({value}) VALUES ({question_marks})'\r\n        for key, value in model.items():\r\n            mydict.update({key: str(value)})\r\n        with engine.connect() as connection:\r\n            connection.execute(query, mydict)\r\n\r\n        query = sa.select([z.c.x])\r\n        with engine.connect() as connection:\r\n            record = connection.execute(query)\r\n            assert record is not None\r\n            for row in record:\r\n                assert model['x'] == row.x # <-- TypeError: string argument without an encoding\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5503", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5503/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5503/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5503/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5503", "id": 676387210, "node_id": "MDU6SXNzdWU2NzYzODcyMTA=", "number": 5503, "title": "result.scalars() should return a different object, like ScalarResult", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141275752, "node_id": "MDU6TGFiZWwxMTQxMjc1NzUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/engine", "name": "engine", "color": "B04040", "default": false, "description": "engines, connections, transactions, isolation levels, execution options"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-08-10T20:10:32Z", "updated_at": "2020-08-12T16:41:14Z", "closed_at": "2020-08-12T16:41:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "as we want to support pep-484 / liskov substitution to the greatest degree possible, this would be an intermediary object where methods like all(), fetchall(), fetchmany() etc. return lists of Any rather than lists of Row.    it would proxy the Result object underneath and if you de-select scalar mode you go back to the Result.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5500", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5500/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5500/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5500/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5500", "id": 675061150, "node_id": "MDU6SXNzdWU2NzUwNjExNTA=", "number": 5500, "title": "Sequence.next_value does not use schema_translate_map in server_default", "user": {"login": "sdhawley", "id": 4137541, "node_id": "MDQ6VXNlcjQxMzc1NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4137541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdhawley", "html_url": "https://github.com/sdhawley", "followers_url": "https://api.github.com/users/sdhawley/followers", "following_url": "https://api.github.com/users/sdhawley/following{/other_user}", "gists_url": "https://api.github.com/users/sdhawley/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdhawley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdhawley/subscriptions", "organizations_url": "https://api.github.com/users/sdhawley/orgs", "repos_url": "https://api.github.com/users/sdhawley/repos", "events_url": "https://api.github.com/users/sdhawley/events{/privacy}", "received_events_url": "https://api.github.com/users/sdhawley/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1959689852, "node_id": "MDU6TGFiZWwxOTU5Njg5ODUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/great%20mcve", "name": "great mcve", "color": "dcf972", "default": false, "description": "An issue with a great mcve"}, {"id": 1141273948, "node_id": "MDU6TGFiZWwxMTQxMjczOTQ4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/schema", "name": "schema", "color": "602060", "default": false, "description": "things related to the DDL related objects like Table, Column, CreateIndex, etc."}, {"id": 1141274001, "node_id": "MDU6TGFiZWwxMTQxMjc0MDAx", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sql", "name": "sql", "color": "5060F0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 4, "created_at": "2020-08-07T14:40:29Z", "updated_at": "2020-08-07T17:35:42Z", "closed_at": "2020-08-07T17:22:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n<!-- A clear and concise description of what the bug is. -->\r\nCreating a multitenant db with schema per user I set schema_translate_map, the sequence is created correctly but the DDL for the column does not use the translated schema name in the server_default\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen. -->\r\nserver_default will refer to the correct customer schema to get next item in sequence on insert\r\n\r\n**To Reproduce**\r\nPlease try to provide a [Minimal, Complete, and Verifiable](http://stackoverflow.com/help/mcve) example. \r\nSee also [Reporting Bugs](https://www.sqlalchemy.org/participate.html#bugs) on the website, and some [example issues](https://github.com/sqlalchemy/sqlalchemy/issues?q=label%3A%22great+mcve%22)\r\n\r\n```py\r\n# session.py\r\nfrom contextlib import contextmanager\r\n\r\nimport sqlalchemy as sql\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker\r\n\r\nBase = declarative_base()\r\nengine = sql.create_engine('postgresql://postgres:sqlalchemy@localhost/postgres', echo=True)\r\nSession = sessionmaker(bind=engine)\r\n\r\n\r\n@contextmanager\r\ndef new_session(schema) -> Session:\r\n    execution_options = {\r\n        \"schema_translate_map\": {\r\n            \"customer_schema\": schema,\r\n        }\r\n    }\r\n    conn = engine.connect().execution_options(**execution_options)\r\n    session = Session(bind=conn)\r\n    try:\r\n        yield session\r\n        session.commit()\r\n    except:\r\n        session.rollback()\r\n    finally:\r\n        print(f'closing session for schema {schema}')\r\n        session.close()\r\n        conn.close()\r\n\r\n# models.py\r\nfrom sqlalchemy import Column, BigInteger, String, Sequence\r\n\r\nfrom schemas.session import Base\r\n\r\n\r\nclass Contact(Base):\r\n    __tablename__ = 'contact'\r\n    __table_args__ = {'schema': 'customer_schema'}\r\n\r\n    # Setting schema='customer_schema' on the Sequence here creates the sequence correctly,\r\n    # but then translate map does not apply to the server default\r\n    contactid_seq = Sequence('contact_contactid_seq', metadata=Base.metadata, schema='customer_schema')\r\n    contactid = Column(BigInteger, contactid_seq, primary_key=True, server_default=contactid_seq.next_value())\r\n\r\n    username = Column(String(255), unique=True)\r\n    userfirstname = Column(String(45))\r\n    userlastname = Column(String(45))\r\n\r\n# driver.py\r\nfrom sqlalchemy import Sequence\r\nfrom sqlalchemy.exc import ProgrammingError\r\nfrom sqlalchemy.sql.ddl import CreateSchema, DropSchema, DropSequence\r\n\r\nfrom schemas.models import Contact\r\nfrom schemas.session import new_session\r\n\r\nwith new_session('customer_one') as customer_one_sess:\r\n    conn = customer_one_sess.connection()\r\n    print('drop all')\r\n    try:\r\n        conn.execute(DropSchema('customer_one', cascade=True))\r\n        Contact.metadata.drop_all(customer_one_sess.connection())\r\n        customer_one_sess.commit()\r\n    except ProgrammingError:\r\n        customer_one_sess.rollback()\r\n\r\n    print('create all')\r\n    conn.execute(CreateSchema('customer_one'))\r\n    Contact.metadata.create_all(customer_one_sess.connection())\r\n    customer_one_sess.commit()\r\n\r\n    for i in range(10):\r\n        c = Contact(username=f'customer_one_{i}', userfirstname='John', userlastname='Smyth')\r\n        customer_one_sess.add(c)\r\n    customer_one_sess.commit()\r\n\r\nwith new_session('public') as session:\r\n    conn = session.connection()\r\n    try:\r\n        conn.execute(DropSequence(Sequence('contact_contactid_seq')))\r\n    except Exception as e:\r\n        print(f'got exception {e} while dropping public sequence')\r\n        session.rollback()\r\n```\r\n\r\n**Error**\r\n\r\n```\r\n2020-08-07 09:22:38,421 INFO sqlalchemy.engine.base.Engine select version()\r\n2020-08-07 09:22:38,421 INFO sqlalchemy.engine.base.Engine {}\r\n2020-08-07 09:22:38,422 INFO sqlalchemy.engine.base.Engine select current_schema()\r\n2020-08-07 09:22:38,422 INFO sqlalchemy.engine.base.Engine {}\r\n2020-08-07 09:22:38,423 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1\r\n2020-08-07 09:22:38,423 INFO sqlalchemy.engine.base.Engine {}\r\n2020-08-07 09:22:38,424 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1\r\n2020-08-07 09:22:38,424 INFO sqlalchemy.engine.base.Engine {}\r\n2020-08-07 09:22:38,424 INFO sqlalchemy.engine.base.Engine show standard_conforming_strings\r\n2020-08-07 09:22:38,424 INFO sqlalchemy.engine.base.Engine {}\r\n2020-08-07 09:22:38,425 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\r\ndrop all\r\n2020-08-07 09:22:38,425 INFO sqlalchemy.engine.base.Engine DROP SCHEMA customer_one CASCADE\r\n2020-08-07 09:22:38,425 INFO sqlalchemy.engine.base.Engine {}\r\n2020-08-07 09:22:38,427 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where n.nspname=%(schema)s and relname=%(name)s\r\n2020-08-07 09:22:38,427 INFO sqlalchemy.engine.base.Engine {'schema': 'customer_one', 'name': 'contact'}\r\n2020-08-07 09:22:38,428 INFO sqlalchemy.engine.base.Engine COMMIT\r\ncreate all\r\n2020-08-07 09:22:38,444 INFO sqlalchemy.engine.base.Engine CREATE SCHEMA customer_one\r\n2020-08-07 09:22:38,444 INFO sqlalchemy.engine.base.Engine {}\r\n2020-08-07 09:22:38,445 INFO sqlalchemy.engine.base.Engine COMMIT\r\n2020-08-07 09:22:38,454 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\r\n2020-08-07 09:22:38,454 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where n.nspname=%(schema)s and relname=%(name)s\r\n2020-08-07 09:22:38,455 INFO sqlalchemy.engine.base.Engine {'schema': 'customer_one', 'name': 'contact'}\r\n2020-08-07 09:22:38,456 INFO sqlalchemy.engine.base.Engine SELECT relname FROM pg_class c join pg_namespace n on n.oid=c.relnamespace where relkind='S' and n.nspname=%(schema)s and relname=%(name)s\r\n2020-08-07 09:22:38,456 INFO sqlalchemy.engine.base.Engine {'schema': 'customer_one', 'name': 'contact_contactid_seq'}\r\n2020-08-07 09:22:38,457 INFO sqlalchemy.engine.base.Engine CREATE SEQUENCE customer_one.contact_contactid_seq\r\n2020-08-07 09:22:38,457 INFO sqlalchemy.engine.base.Engine {}\r\n2020-08-07 09:22:38,458 INFO sqlalchemy.engine.base.Engine \r\nCREATE TABLE customer_one.contact (\r\n\tcontactid BIGINT DEFAULT nextval('customer_schema.contact_contactid_seq') NOT NULL, \r\n\tusername VARCHAR(255), \r\n\tuserfirstname VARCHAR(45), \r\n\tuserlastname VARCHAR(45), \r\n\tPRIMARY KEY (contactid), \r\n\tUNIQUE (username)\r\n)\r\n2020-08-07 09:22:38,459 INFO sqlalchemy.engine.base.Engine {}\r\n2020-08-07 09:22:38,461 INFO sqlalchemy.engine.base.Engine ROLLBACK\r\nclosing session for schema customer_one\r\n```\r\n\r\n**Versions.**\r\n - OS: Linux/Fedora 32\r\n - Python: 3.8.5\r\n - SQLAlchemy: 1.3.18\r\n - psycopg2 2.8.5\r\n - Database: Postgres (fresh docker pull postgres:9-alpine)\r\n - DBAPI: 2\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. -->\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5499", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5499/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5499/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5499/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5499", "id": 674882946, "node_id": "MDU6SXNzdWU2NzQ4ODI5NDY=", "number": 5499, "title": "DeferredReflection with postgres (materialized) views", "user": {"login": "ibot3", "id": 8113443, "node_id": "MDQ6VXNlcjgxMTM0NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8113443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibot3", "html_url": "https://github.com/ibot3", "followers_url": "https://api.github.com/users/ibot3/followers", "following_url": "https://api.github.com/users/ibot3/following{/other_user}", "gists_url": "https://api.github.com/users/ibot3/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibot3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibot3/subscriptions", "organizations_url": "https://api.github.com/users/ibot3/orgs", "repos_url": "https://api.github.com/users/ibot3/repos", "events_url": "https://api.github.com/users/ibot3/events{/privacy}", "received_events_url": "https://api.github.com/users/ibot3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-07T09:17:52Z", "updated_at": "2020-08-13T13:16:17Z", "closed_at": "2020-08-13T08:58:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to reflect a view by using the declarative way with DeferredReflection:\r\n\r\n```\r\nclass ViewName(DeferredReflection, ModelBase):\r\n    __tablename__ = 'view_name'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n```\r\n\r\nHowever, when executing the reflections with\r\n\r\n```\r\nDeferredReflection.prepare(engine)\r\n```\r\nI get the error `sqlalchemy.exc.NoSuchTableError: view_name`, although the view exists in the database.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/opt/pycroft/app/helpers/interactive.py\", line 31, in <module>\r\n    DeferredReflection.prepare(engine)\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/ext/declarative/api.py\", line 755, in prepare\r\n    cls._sa_decl_prepare(thingy.local_table, engine)\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/ext/declarative/api.py\", line 787, in _sa_decl_prepare\r\n    cls._reflect_table(local_table, engine)\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/ext/declarative/api.py\", line 808, in _reflect_table\r\n    schema=table.schema,\r\n  File \"<string>\", line 2, in __new__\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py\", line 139, in warned\r\n    return fn(*args, **kwargs)\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/sql/schema.py\", line 545, in __new__\r\n    table._init_existing(*args, **kw)\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/sql/schema.py\", line 762, in _init_existing\r\n    _extend_on=_extend_on,\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/sql/schema.py\", line 672, in _autoload\r\n    _extend_on=_extend_on,\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 2215, in run_callable\r\n    return conn.run_callable(callable_, *args, **kwargs)\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1654, in run_callable\r\n    return callable_(self, *args, **kwargs)\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 470, in reflecttable\r\n    table, include_columns, exclude_columns, resolve_fks, **opts\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/engine/reflection.py\", line 666, in reflecttable\r\n    table_name, schema, **table.dialect_kwargs\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/engine/reflection.py\", line 392, in get_columns\r\n    self.bind, table_name, schema, info_cache=self.info_cache, **kw\r\n  File \"<string>\", line 2, in get_columns\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/engine/reflection.py\", line 52, in cache\r\n    ret = fn(self, con, *args, **kw)\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/dialects/postgresql/base.py\", line 2936, in get_columns\r\n    connection, table_name, schema, info_cache=kw.get(\"info_cache\")\r\n  File \"<string>\", line 2, in get_table_oid\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/engine/reflection.py\", line 52, in cache\r\n    ret = fn(self, con, *args, **kw)\r\n  File \"/opt/pycroft/venv/lib/python3.7/site-packages/sqlalchemy/dialects/postgresql/base.py\", line 2850, in get_table_oid\r\n    raise exc.NoSuchTableError(table_name)\r\nsqlalchemy.exc.NoSuchTableError: view_name\r\n```\r\n\r\nIs there some option somewhere that needs to be enabled to support views or is it not possible at all to use `DeferredReflection` with views?\r\n\r\n**Versions**\r\n - OS: Debian 9\r\n - Python: 3.7\r\n - SQLAlchemy: 1.3.18\r\n - Database: Postgres 12\r\n - DBAPI: psycopg2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5498", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5498/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5498/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5498/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5498", "id": 674829949, "node_id": "MDU6SXNzdWU2NzQ4Mjk5NDk=", "number": 5498, "title": "Add support for data_type on sequence in all dialects", "user": {"login": "CaselIT", "id": 16175304, "node_id": "MDQ6VXNlcjE2MTc1MzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/16175304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaselIT", "html_url": "https://github.com/CaselIT", "followers_url": "https://api.github.com/users/CaselIT/followers", "following_url": "https://api.github.com/users/CaselIT/following{/other_user}", "gists_url": "https://api.github.com/users/CaselIT/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaselIT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaselIT/subscriptions", "organizations_url": "https://api.github.com/users/CaselIT/orgs", "repos_url": "https://api.github.com/users/CaselIT/repos", "events_url": "https://api.github.com/users/CaselIT/events{/privacy}", "received_events_url": "https://api.github.com/users/CaselIT/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273914, "node_id": "MDU6TGFiZWwxMTQxMjczOTE0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/postgresql", "name": "postgresql", "color": "60A070", "default": false, "description": ""}, {"id": 1141273948, "node_id": "MDU6TGFiZWwxMTQxMjczOTQ4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/schema", "name": "schema", "color": "602060", "default": false, "description": "things related to the DDL related objects like Table, Column, CreateIndex, etc."}, {"id": 1313059238, "node_id": "MDU6TGFiZWwxMzEzMDU5MjM4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/use%20case", "name": "use case", "color": "b54650", "default": false, "description": "not really a feature or a bug; can be support for new DB features or user use cases not anticipated"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2020-08-07T07:44:41Z", "updated_at": "2020-08-19T15:00:50Z", "closed_at": "2020-08-19T15:00:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nIssue https://github.com/sqlalchemy/sqlalchemy/issues/4235 has added a data_type in the Sequence, but it is currently only used\r\nby the mssql dialect.\r\n**Describe the solution you'd like**\r\nAll dialects that support it have support for the sequence data type, eg postgres\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5497", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5497/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5497/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5497/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5497", "id": 674769341, "node_id": "MDU6SXNzdWU2NzQ3NjkzNDE=", "number": 5497, "title": "evaluate why we are calling on_connect twice for first connection", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141275752, "node_id": "MDU6TGFiZWwxMTQxMjc1NzUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/engine", "name": "engine", "color": "B04040", "default": false, "description": "engines, connections, transactions, isolation levels, execution options"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-08-07T05:28:30Z", "updated_at": "2020-08-07T22:56:31Z", "closed_at": "2020-08-07T22:56:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "e.g. even back in 1.1:\r\n\r\n```\r\n      if _initialize:\r\n            do_on_connect = dialect.on_connect()\r\n            if do_on_connect:\r\n                def on_connect(dbapi_connection, connection_record):\r\n                    conn = getattr(\r\n                        dbapi_connection, '_sqla_unwrap', dbapi_connection)\r\n                    if conn is None:\r\n                        return\r\n                    do_on_connect(conn)\r\n\r\n                event.listen(pool, 'first_connect', on_connect)\r\n                event.listen(pool, 'connect', on_connect)\r\n\r\n```\r\n\r\nwhy?  I have the vaguest recollection of some DBAPI that needed this for some reason but this is just wrong.   Tests seem to pass without first_connect in there, but i need to do a full run.   goal should be to put a comment in there because I spent an hour confused about this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5496", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5496/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5496/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5496/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5496", "id": 674468940, "node_id": "MDU6SXNzdWU2NzQ0Njg5NDA=", "number": 5496, "title": "Add a way of specifying to the MySQL dialect that we will use MariaDb", "user": {"login": "CaselIT", "id": 16175304, "node_id": "MDQ6VXNlcjE2MTc1MzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/16175304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaselIT", "html_url": "https://github.com/CaselIT", "followers_url": "https://api.github.com/users/CaselIT/followers", "following_url": "https://api.github.com/users/CaselIT/following{/other_user}", "gists_url": "https://api.github.com/users/CaselIT/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaselIT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaselIT/subscriptions", "organizations_url": "https://api.github.com/users/CaselIT/orgs", "repos_url": "https://api.github.com/users/CaselIT/repos", "events_url": "https://api.github.com/users/CaselIT/events{/privacy}", "received_events_url": "https://api.github.com/users/CaselIT/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2205915448, "node_id": "MDU6TGFiZWwyMjA1OTE1NDQ4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/mariadb", "name": "mariadb", "color": "c1fdff", "default": false, "description": ""}, {"id": 1141273954, "node_id": "MDU6TGFiZWwxMTQxMjczOTU0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/mysql", "name": "mysql", "color": "30A040", "default": false, "description": null}, {"id": 1313059238, "node_id": "MDU6TGFiZWwxMzEzMDU5MjM4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/use%20case", "name": "use case", "color": "b54650", "default": false, "description": "not really a feature or a bug; can be support for new DB features or user use cases not anticipated"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-08-06T17:06:14Z", "updated_at": "2020-08-13T19:50:00Z", "closed_at": "2020-08-13T19:50:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nCurrently the MySQL dialect is used by both MySQL and by MariaDB. The dialect does detect which database is connected to on first connection, but there may be cases that use the dialect without an actual connection.\r\n\r\n**Describe the solution you'd like**\r\nA way of specifying to the dialect that the underlying database is MariaDB. One option may be a kw argument, so that I may create it with:\r\n```py\r\nfrom sqlalchemy.dialects.mysql import dialect\r\nmdb = dialect(is_mariadb=True)\r\n```\r\n\r\nAn alternative may be to support `mariadb://` as an alias for `mysql://` that sets the `id_mariadb` flag, so that I can then use:\r\n```py\r\nfrom sqlalchemy import create_engine\r\nmdb = create_engine('mariadb://').dialect\r\n```\r\n\r\n**Additional context**\r\nThis may be useful since there are starting to be cases where the sql of mysql and mariadb has some differences.\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5495", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5495/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5495/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5495/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5495", "id": 674413646, "node_id": "MDU6SXNzdWU2NzQ0MTM2NDY=", "number": 5495, "title": "sqlite misuse of aggregate error after upgrade to python 3.8.4", "user": {"login": "olinger", "id": 5412354, "node_id": "MDQ6VXNlcjU0MTIzNTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5412354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olinger", "html_url": "https://github.com/olinger", "followers_url": "https://api.github.com/users/olinger/followers", "following_url": "https://api.github.com/users/olinger/following{/other_user}", "gists_url": "https://api.github.com/users/olinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/olinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olinger/subscriptions", "organizations_url": "https://api.github.com/users/olinger/orgs", "repos_url": "https://api.github.com/users/olinger/repos", "events_url": "https://api.github.com/users/olinger/events{/privacy}", "received_events_url": "https://api.github.com/users/olinger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-06T15:44:56Z", "updated_at": "2020-08-06T16:25:45Z", "closed_at": "2020-08-06T16:25:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI am seeing the following error in code that has not changed after upgrading python from 3.8.2 to 3.8.4 (it also happens in 3.8.3). I have downgraded back to 3.8.2 and confirmed there is no error when running in python 3.8.2.\r\n```\r\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) misuse of aggregate: sum()\r\n```\r\nThe error is happening in a unit test. My unit tests are using a sqlite database. The project itself is using a mysql database. There is no issue with the query in question in python 3.8.4 when running the app itself, the query executes and the results are the expected one. The error only occurs in the unit test which is using sqlite.\r\n\r\n**Expected behavior**\r\nNo error\r\n\r\n**To Reproduce**\r\n\r\nThe query that is causing it:\r\n```py\r\nmeta_query = PatientBill.query.with_entities(func.sum(PatientBill.subtotal).label(\"subtotal\"))\\\r\n.filter(*query_adapter.filters).first()\r\n```\r\n\r\nThe property in question on the PatientBill model:\r\n```py\r\nsubtotal = column_property(select([func.sum(PatientBillLineItem.subtotal)]).\\\r\n                            where(PatientBillLineItem.patient_bill_id == id).\\\r\n                            correlate_except(PatientBillLineItem))\r\n```\r\nThe property referenced by the above column_property on the PatientBillLineItem model:\r\n```py\r\nsubtotal = column_property(func.round(adjusted_price * quantity, 2))\r\n```\r\n**Error**\r\n\r\n```\r\ntest_get_all: test_get_all\r\nFail: sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) misuse of aggregate: sum()pytest(./app/test/services/test_patient_bill_service.py::test_get_all)\r\ntest_patient_bill_service.py(19, 5): test_get_all\r\nbase.py(1245, 21): self.dialect.do_execute(\r\ndefault.py(588, 9): cursor.execute(statement, parameters)\r\ntest_patient_bill_service.py(35, 9): results: List[PatientBill] = PatientBillService.get_all_patient_bills(query_adapter)\r\npatient_bill_service.py(49, 9): meta_query = PatientBill.query.with_entities(func.sum(PatientBill.subtotal).label(\"subtotal\"))\\\r\nquery.py(3287, 13): ret = list(self[0:1])\r\nquery.py(3065, 17): return list(res)\r\nquery.py(3389, 9): return self._execute_and_instances(context)\r\nquery.py(3414, 9): result = conn.execute(querycontext.statement, self._params)\r\nbase.py(982, 13): return meth(self, multiparams, params)\r\nelements.py(293, 13): return connection._execute_clauseelement(self, multiparams, params)\r\nbase.py(1095, 9): ret = self._execute_context(\r\nbase.py(1249, 13): self._handle_dbapi_exception(\r\nbase.py(1476, 17): util.raise_from_cause(sqlalchemy_exception, exc_info)\r\ncompat.py(398, 5): reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\ncompat.py(152, 13): raise value.with_traceback(tb)\r\nbase.py(1245, 21): self.dialect.do_execute(\r\ndefault.py(588, 9): cursor.execute(statement, parameters)\r\n\r\n```\r\n\r\n**Versions.**\r\n - OS: macOS 10.14.6\r\n - Python: 3.8.4 (no error in 3.8.2)\r\n - SQLAlchemy: 1.3.13\r\n - Database: sqlite / mysql\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5494", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5494/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5494/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5494/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5494", "id": 674301926, "node_id": "MDU6SXNzdWU2NzQzMDE5MjY=", "number": 5494, "title": "deterministic sorting for all_orm_descriptors", "user": {"login": "sevens-ef", "id": 35069043, "node_id": "MDQ6VXNlcjM1MDY5MDQz", "avatar_url": "https://avatars1.githubusercontent.com/u/35069043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sevens-ef", "html_url": "https://github.com/sevens-ef", "followers_url": "https://api.github.com/users/sevens-ef/followers", "following_url": "https://api.github.com/users/sevens-ef/following{/other_user}", "gists_url": "https://api.github.com/users/sevens-ef/gists{/gist_id}", "starred_url": "https://api.github.com/users/sevens-ef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sevens-ef/subscriptions", "organizations_url": "https://api.github.com/users/sevens-ef/orgs", "repos_url": "https://api.github.com/users/sevens-ef/repos", "events_url": "https://api.github.com/users/sevens-ef/events{/privacy}", "received_events_url": "https://api.github.com/users/sevens-ef/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273966, "node_id": "MDU6TGFiZWwxMTQxMjczOTY2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/orm", "name": "orm", "color": "20C0B0", "default": false, "description": null}, {"id": 1313059238, "node_id": "MDU6TGFiZWwxMzEzMDU5MjM4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/use%20case", "name": "use case", "color": "b54650", "default": false, "description": "not really a feature or a bug; can be support for new DB features or user use cases not anticipated"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 10, "created_at": "2020-08-06T13:10:20Z", "updated_at": "2020-08-11T16:16:25Z", "closed_at": "2020-08-07T03:10:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not entirely sure if this should be a bug or a feature request, added it as the former.\r\n\r\n**Describe the bug**\r\n`hybrid_property`s don't have a `_creation_order` attribute, while most/all other `Column`s and properties from SQLAlchemy seem to have one (as far as I can tell from checking the codebase).\r\n\r\n**Expected behavior**\r\n`hybrid_property`s to have a `_creation_order` so it can be sorted predictably.\r\n\r\n**To Reproduce**\r\n<details>\r\n\r\n```py\r\n#!/usr/bin/env python\r\nimport sqlalchemy\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.ext.hybrid import hybrid_property\r\n\r\nBase = declarative_base()\r\n\r\n\r\nclass Model(Base):\r\n    __tablename__ = 'model'\r\n\r\n    id = sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)\r\n    assert hasattr(id, '_creation_order')\r\n\r\n    @hybrid_property\r\n    def foo(self):\r\n        return 'bar'\r\n\r\n    assert not hasattr(foo, '_creation_order')  # Would expect this to fail\r\n\r\n\r\ninspector = sqlalchemy.inspect(Model)\r\nsorted_descriptors = sorted(list(inspector.all_orm_descriptors.items()),\r\n                            key=lambda item: getattr(item[1], '_creation_order', 0))\r\n\r\n# This fails (attribute 'foo' should be the second item in `sorted_descriptors`)\r\nassert sorted_descriptors[1][0] == 'foo'\r\n```\r\n\r\n</details>\r\n\r\n**Error**\r\nN/a\r\n\r\n**Versions.**\r\n - OS: Ubuntu 18.04\r\n - Python: 3.6.9\r\n - SQLAlchemy: 1.3.18\r\n - Database: PostgreSQL (but this shouldn't matter here ;) )\r\n - DBAPI: psycopg2\r\n\r\n**Additional context**\r\nWe use this in our own code, including in a custom fork of ColanderAlchemy to deterministically sort the properties of a model.\r\n\r\nMonkey-patching a `sqlalchemy.util.set_creation_order(self)` call to the end of `hybrid_property.__init__()` seems to fix this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5493", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5493/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5493/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5493/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5493", "id": 673572824, "node_id": "MDU6SXNzdWU2NzM1NzI4MjQ=", "number": 5493, "title": "mariadb connection was killed 1927 not handled", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141274292, "node_id": "MDU6TGFiZWwxMTQxMjc0Mjky", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/blocker", "name": "blocker", "color": "FF5025", "default": false, "description": "issue that must be resolved asap as it is preventing things from working"}, {"id": 1141273954, "node_id": "MDU6TGFiZWwxMTQxMjczOTU0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/mysql", "name": "mysql", "color": "30A040", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-08-05T14:12:52Z", "updated_at": "2020-08-05T20:19:34Z", "closed_at": "2020-08-05T20:19:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "not sure how this hasn't been reported.   this breaks the \"pre_ping\" handler for a simple database restart:\r\n\r\n```\r\n File \"/home/classic/dev/sqlalchemy/lib/sqlalchemy/pool.py\", line 875, in _checkout\r\n    result = pool._dialect.do_ping(fairy.connection)\r\n  File \"/home/classic/dev/sqlalchemy/lib/sqlalchemy/engine/default.py\", line 495, in do_ping\r\n    cursor.execute(self._dialect_specific_select_one)\r\n  File \"/home/classic/.venv3/lib/python3.8/site-packages/MySQLdb/cursors.py\", line 209, in execute\r\n    res = self._query(query)\r\n  File \"/home/classic/.venv3/lib/python3.8/site-packages/MySQLdb/cursors.py\", line 315, in _query\r\n    db.query(q)\r\n  File \"/home/classic/.venv3/lib/python3.8/site-packages/MySQLdb/connections.py\", line 226, in query\r\n    _mysql.connection.query(self, query)\r\nsqlalchemy.exc.OperationalError: (MySQLdb._exceptions.OperationalError) (1927, 'Connection was killed') (Background on this error at: http://sqlalche.me/e/e3q8)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5491", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5491/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5491/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5491/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5491", "id": 672593238, "node_id": "MDU6SXNzdWU2NzI1OTMyMzg=", "number": 5491, "title": "joinedload not working with a non \"fresh\" session?", "user": {"login": "davidgu", "id": 21150842, "node_id": "MDQ6VXNlcjIxMTUwODQy", "avatar_url": "https://avatars3.githubusercontent.com/u/21150842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidgu", "html_url": "https://github.com/davidgu", "followers_url": "https://api.github.com/users/davidgu/followers", "following_url": "https://api.github.com/users/davidgu/following{/other_user}", "gists_url": "https://api.github.com/users/davidgu/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidgu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidgu/subscriptions", "organizations_url": "https://api.github.com/users/davidgu/orgs", "repos_url": "https://api.github.com/users/davidgu/repos", "events_url": "https://api.github.com/users/davidgu/events{/privacy}", "received_events_url": "https://api.github.com/users/davidgu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-04T08:04:34Z", "updated_at": "2020-08-07T16:28:06Z", "closed_at": "2020-08-07T16:28:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a function which runs several queries with a single session object, with the following \"pseudocode\".\r\n```\r\nsession1 = Session()\r\nobjects_1 = session1.query(Object1).filter(...).all()\r\nobjects_2 = session1.query(Object2).filter(Object2.id.between(A, B)).all()\r\nsession1.close()\r\n\r\nsession2 = Session()\r\nobjects_3 = session2.query(Object3).options(joinedload(Object4.field).joinedload(Object5.field).joinedload(Object6.field)).get(id)\r\nsession2.close()\r\n```\r\nThere is no data written to the db though this session at any point. The 3rd query is quite complex, and has unacceptable performance without the `joinedload` as otherwise hundreds of queries would be required to load related rows.\r\n\r\nIf I do not create the second `Session` object `session2`, the `joinedload` seemingly does not work since the profiler reports hundreds of cursor.execute calls, and performance is very bad. Am I misunderstanding some aspect of how the `Session` is supposed to be used, and it's associated performance characteristics?\r\n\r\nSorry for not being able to attach a reproducible example.\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5487", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5487/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5487/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5487/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5487", "id": 669953723, "node_id": "MDU6SXNzdWU2Njk5NTM3MjM=", "number": 5487, "title": "Accessing Query.selectable causes RecursionError in \"before_compile\" event listener", "user": {"login": "the-wondersmith", "id": 61921871, "node_id": "MDQ6VXNlcjYxOTIxODcx", "avatar_url": "https://avatars1.githubusercontent.com/u/61921871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the-wondersmith", "html_url": "https://github.com/the-wondersmith", "followers_url": "https://api.github.com/users/the-wondersmith/followers", "following_url": "https://api.github.com/users/the-wondersmith/following{/other_user}", "gists_url": "https://api.github.com/users/the-wondersmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/the-wondersmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the-wondersmith/subscriptions", "organizations_url": "https://api.github.com/users/the-wondersmith/orgs", "repos_url": "https://api.github.com/users/the-wondersmith/repos", "events_url": "https://api.github.com/users/the-wondersmith/events{/privacy}", "received_events_url": "https://api.github.com/users/the-wondersmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2020-07-31T15:49:39Z", "updated_at": "2020-08-09T16:44:24Z", "closed_at": "2020-08-09T16:44:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I posted a [question](https://stackoverflow.com/questions/63180197/sqlalchemy-change-table-name-in-fromclause-w-event-listener) on StackOverflow pertaining to what I'm actually trying to accomplish with the `before_compile` event listener. In the course of experimenting while waiting for an answer, I made some headway but eventually got stuck.\r\n\r\nIt seems as though attempting to access virtually any attribute or property of the Query object passed into the registered event handler causes the interpreter to throw a recursion error. I can get at the Query object's attributes if I attach a debugger and set a break point on the function entry, so I know that it at least *appears* to have all of the attributes that I'd like to modify prior to compilation, I just can't... do anything with them.\r\n\r\nI've tried to dig into this and the best I can tell is that accessing certain attributes causes the event handler to be fired again? Either that or there are multiple circular references between the various things that comprise the Query objects attributes and properties.\r\n\r\nThe full explanation of why I'd like to do so is in the StackOverflow link above, but the much condensed version is that I'm stuck supporting a very silly DB design that breaks out what should be one table into ~28 different tables that all share the same layout. Due to other entangled complications, SQLAlchemy's table inheritance recipes don't feel like the best option. The best thing I can think of would be to utilize an event listener to modify emitted queries prior to their compilation and set the correct table name for the record that's being requested.\r\n\r\nWhat did I miss in the documentation about how the `before_compile` event works?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5486", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5486/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5486/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5486/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5486", "id": 669953112, "node_id": "MDU6SXNzdWU2Njk5NTMxMTI=", "number": 5486, "title": "Documentation typo in comment", "user": {"login": "inspire12", "id": 11865970, "node_id": "MDQ6VXNlcjExODY1OTcw", "avatar_url": "https://avatars2.githubusercontent.com/u/11865970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inspire12", "html_url": "https://github.com/inspire12", "followers_url": "https://api.github.com/users/inspire12/followers", "following_url": "https://api.github.com/users/inspire12/following{/other_user}", "gists_url": "https://api.github.com/users/inspire12/gists{/gist_id}", "starred_url": "https://api.github.com/users/inspire12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inspire12/subscriptions", "organizations_url": "https://api.github.com/users/inspire12/orgs", "repos_url": "https://api.github.com/users/inspire12/repos", "events_url": "https://api.github.com/users/inspire12/events{/privacy}", "received_events_url": "https://api.github.com/users/inspire12/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-31T15:49:00Z", "updated_at": "2020-08-27T16:34:38Z", "closed_at": "2020-08-27T16:34:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI found small typo on the following comments, in lib/sqlalchemy/sql/schema.py 1068 line\r\n\r\n        :param type\\_: The column's type, indicated using an instance which\r\nshould be\r\n        :param type: The column's type, indicated using an instance which\r\n\r\nCan i pr this project?\r\n\r\nthanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5485", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5485/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5485/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5485/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5485", "id": 669216267, "node_id": "MDU6SXNzdWU2NjkyMTYyNjc=", "number": 5485, "title": "Oracle Error ORA-01008 : Not all variables bound", "user": {"login": "CrabbyPete", "id": 86552, "node_id": "MDQ6VXNlcjg2NTUy", "avatar_url": "https://avatars1.githubusercontent.com/u/86552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrabbyPete", "html_url": "https://github.com/CrabbyPete", "followers_url": "https://api.github.com/users/CrabbyPete/followers", "following_url": "https://api.github.com/users/CrabbyPete/following{/other_user}", "gists_url": "https://api.github.com/users/CrabbyPete/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrabbyPete/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrabbyPete/subscriptions", "organizations_url": "https://api.github.com/users/CrabbyPete/orgs", "repos_url": "https://api.github.com/users/CrabbyPete/repos", "events_url": "https://api.github.com/users/CrabbyPete/events{/privacy}", "received_events_url": "https://api.github.com/users/CrabbyPete/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1146930079, "node_id": "MDU6TGFiZWwxMTQ2OTMwMDc5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/awaiting%20info", "name": "awaiting info", "color": "1f8ec1", "default": false, "description": "waiting for the submitter to give more information"}, {"id": 1141274156, "node_id": "MDU6TGFiZWwxMTQxMjc0MTU2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/oracle", "name": "oracle", "color": "A020C0", "default": false, "description": null}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-30T21:37:11Z", "updated_at": "2020-08-07T16:39:00Z", "closed_at": "2020-08-07T16:39:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a schema which has long names\r\n\r\nlass Document(Base):\r\n    __tablename__ = 'document'\r\n\r\n    id                                          = Column(String(100), primary_key=True, autoincrement=False)\r\n    oid                                         = Column(String(100), nullable=True)\r\n    displayname                                 = Column(String(500), nullable=True)\r\n    category                                    = Column(String(100), nullable=True)\r\n    subcategory                                 = Column(String(100), nullable=True)\r\n    effectivedate                               = Column(Date, nullable=True)\r\n    expirationdate                              = Column(Date, nullable=True)\r\n    creationdate                                = Column(Date, nullable=True)\r\n    filename                                    = Column(String(500), nullable=True)\r\n    filesize                                    = Column(Numeric, nullable=True)\r\n    keywords                                    = Column(String(1000), nullable=True)\r\n    documentesignature_esignaturestatus         = Column(String(100), nullable=True)\r\n    documentesignature_esignaturerequesteddate  = Column(Date, nullable=True)\r\n    documentesignature_esignaturerequestername  = Column(String(100), nullable=True)\r\n    documentesignature_esignaturesigneddate     = Column(Date, nullable=True)\r\n    documentesignature_esignaturesignedbyname   = Column(String(100), nullable=True)\r\n\r\nIf I create a record with this like record = Document(**data) and save it I get the Oracle Error ORA-01800 \r\nIf I remove the last three columns I don't get the error. \r\n\r\nIf I run a sql command it works from sqlalchemy it work\r\n\r\nI am using cx_Oracle 8.0 \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5484", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5484/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5484/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5484/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5484", "id": 667948273, "node_id": "MDU6SXNzdWU2Njc5NDgyNzM=", "number": 5484, "title": "'Using Passive Deletes' section missing in documentation", "user": {"login": "isolovey", "id": 12663941, "node_id": "MDQ6VXNlcjEyNjYzOTQx", "avatar_url": "https://avatars1.githubusercontent.com/u/12663941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isolovey", "html_url": "https://github.com/isolovey", "followers_url": "https://api.github.com/users/isolovey/followers", "following_url": "https://api.github.com/users/isolovey/following{/other_user}", "gists_url": "https://api.github.com/users/isolovey/gists{/gist_id}", "starred_url": "https://api.github.com/users/isolovey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isolovey/subscriptions", "organizations_url": "https://api.github.com/users/isolovey/orgs", "repos_url": "https://api.github.com/users/isolovey/repos", "events_url": "https://api.github.com/users/isolovey/events{/privacy}", "received_events_url": "https://api.github.com/users/isolovey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-29T15:47:27Z", "updated_at": "2020-07-29T16:54:17Z", "closed_at": "2020-07-29T16:53:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe 'Using Passive Deletes' section of `doc/build/orm/collections.rst` [refers to itself](https://docs.sqlalchemy.org/en/14/orm/collections.html#passive-deletes). There's no content.\r\n\r\n**Expected behavior**\r\nEither having the section present, as in [v1.2](https://docs.sqlalchemy.org/en/12/orm/collections.html#passive-deletes), or a reference to elsewhere in the documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5482", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5482/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5482/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5482/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5482", "id": 667845920, "node_id": "MDU6SXNzdWU2Njc4NDU5MjA=", "number": 5482, "title": "Cleanup - UUID module is always available", "user": {"login": "ziima", "id": 331955, "node_id": "MDQ6VXNlcjMzMTk1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/331955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ziima", "html_url": "https://github.com/ziima", "followers_url": "https://api.github.com/users/ziima/followers", "following_url": "https://api.github.com/users/ziima/following{/other_user}", "gists_url": "https://api.github.com/users/ziima/gists{/gist_id}", "starred_url": "https://api.github.com/users/ziima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ziima/subscriptions", "organizations_url": "https://api.github.com/users/ziima/orgs", "repos_url": "https://api.github.com/users/ziima/repos", "events_url": "https://api.github.com/users/ziima/events{/privacy}", "received_events_url": "https://api.github.com/users/ziima/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273994, "node_id": "MDU6TGFiZWwxMTQxMjczOTk0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/easy", "name": "easy", "color": "76f799", "default": false, "description": "a one / two  liner type of thing that anyone can do in short order. also see \"fairly easy\""}, {"id": 1141269146, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/help%20wanted", "name": "help wanted", "color": "008672", "default": true, "description": "Extra attention is needed"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/19", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/19", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/19/labels", "id": 3850573, "node_id": "MDk6TWlsZXN0b25lMzg1MDU3Mw==", "number": 19, "title": "1.x.xx", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 45, "closed_issues": 142, "state": "open", "created_at": "2018-11-27T03:49:23Z", "updated_at": "2020-09-07T20:25:50Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-07-29T13:28:46Z", "updated_at": "2020-08-02T00:10:02Z", "closed_at": "2020-08-02T00:10:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nI noticed conditions handling a case of missing `uuid` module in python. Since `uuid` module is available since 2.5 and thus it's available in all supported python versions, related code may be removed.\r\n\r\n**Describe the solution you'd like**\r\nImport `UUID` unconditionally and remove related code.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5481", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5481/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5481/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5481/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5481", "id": 667218216, "node_id": "MDU6SXNzdWU2NjcyMTgyMTY=", "number": 5481, "title": "render MySQL FROM DUAL if WHERE clause and no FROM present", "user": {"login": "aneesh-joseph", "id": 9010621, "node_id": "MDQ6VXNlcjkwMTA2MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/9010621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aneesh-joseph", "html_url": "https://github.com/aneesh-joseph", "followers_url": "https://api.github.com/users/aneesh-joseph/followers", "following_url": "https://api.github.com/users/aneesh-joseph/following{/other_user}", "gists_url": "https://api.github.com/users/aneesh-joseph/gists{/gist_id}", "starred_url": "https://api.github.com/users/aneesh-joseph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aneesh-joseph/subscriptions", "organizations_url": "https://api.github.com/users/aneesh-joseph/orgs", "repos_url": "https://api.github.com/users/aneesh-joseph/repos", "events_url": "https://api.github.com/users/aneesh-joseph/events{/privacy}", "received_events_url": "https://api.github.com/users/aneesh-joseph/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273954, "node_id": "MDU6TGFiZWwxMTQxMjczOTU0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/mysql", "name": "mysql", "color": "30A040", "default": false, "description": null}, {"id": 1313059238, "node_id": "MDU6TGFiZWwxMzEzMDU5MjM4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/use%20case", "name": "use case", "color": "b54650", "default": false, "description": "not really a feature or a bug; can be support for new DB features or user use cases not anticipated"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 5, "created_at": "2020-07-28T16:43:12Z", "updated_at": "2020-07-30T00:11:27Z", "closed_at": "2020-07-29T18:44:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\nA row exists check like :\r\n\r\nhttps://github.com/apache/airflow/blob/1.10.11/airflow/models/dagcode.py#L163-L164\r\n\r\n```\r\nfrom sqlalchemy.sql import exists\r\nsession.query(exists().where(cls.fileloc_hash == fileloc_hash))\\\r\n            .scalar()\r\n```\r\nworks against MySQL and Postgres but fails against Microsoft SQL server  as it doesn't support an exists expression in select clause and errors out with \r\n\r\n```\r\nE       sqlalchemy.exc.ProgrammingError: (pyodbc.ProgrammingError) ('42000', \"[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'EXISTS'. (156) (SQLExecDirectW)\")\r\nE       [SQL: SELECT EXISTS (SELECT * \r\nE       FROM dag_code \r\nE       WHERE dag_code.fileloc_hash = ?) AS anon_1]\r\nE       [parameters: (58425611885652217,)]\r\nE       (Background on this error at: http://sqlalche.me/e/13/f405)\r\n```\r\n\r\nchanging this to \r\n\r\n```\r\nfrom sqlalchemy.sql.expression import literal\r\n        session.query(literal(True)).filter(\r\n            session.query(cls).filter(cls.fileloc_hash == fileloc_hash).exists()\r\n        ).scalar()\r\n```\r\n\r\nworks on Postgres and Microsoft SQL Server  but fails on MySQL \r\n\r\n```\r\nE           ProgrammingError: (_mysql_exceptions.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE EXISTS (SELECT 1 \\nFROM dag_code \\nWHERE dag_code.fileloc_hash = 27753634201' at line 2\")\r\nE           [SQL: SELECT %s AS param_1 \r\nE           WHERE EXISTS (SELECT 1 \r\nE           FROM dag_code \r\nE           WHERE dag_code.fileloc_hash = %s)]\r\nE           [parameters: (1, 27753634201084933)]\r\nE           (Background on this error at: http://sqlalche.me/e/13/f405)\r\n```\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen. -->\r\n\r\nthe same exists() check works correctly across dialects \r\n\r\n\r\n**To Reproduce**\r\nPlease try to provide a [Minimal, Complete, and Verifiable](http://stackoverflow.com/help/mcve) example. \r\nSee also [Reporting Bugs](https://www.sqlalchemy.org/participate.html#bugs) on the website, and some [example issues](https://github.com/sqlalchemy/sqlalchemy/issues?q=label%3A%22great+mcve%22)\r\n\r\n```py\r\n# Insert code here\r\n```\r\n\r\n**Error**\r\n\r\n```\r\n# Copy error here. Please include the full stack trace.\r\n```\r\n\r\n**Versions.**\r\n - OS: \r\n - Python:\r\n - SQLAlchemy:\r\n - Database:\r\n - DBAPI:\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. -->\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5479", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5479/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5479/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5479/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5479", "id": 666673027, "node_id": "MDU6SXNzdWU2NjY2NzMwMjc=", "number": 5479, "title": "Some slashes are lost when data is inserted into `bytea` column in Postgres DB", "user": {"login": "yyibin", "id": 10551414, "node_id": "MDQ6VXNlcjEwNTUxNDE0", "avatar_url": "https://avatars0.githubusercontent.com/u/10551414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yyibin", "html_url": "https://github.com/yyibin", "followers_url": "https://api.github.com/users/yyibin/followers", "following_url": "https://api.github.com/users/yyibin/following{/other_user}", "gists_url": "https://api.github.com/users/yyibin/gists{/gist_id}", "starred_url": "https://api.github.com/users/yyibin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yyibin/subscriptions", "organizations_url": "https://api.github.com/users/yyibin/orgs", "repos_url": "https://api.github.com/users/yyibin/repos", "events_url": "https://api.github.com/users/yyibin/events{/privacy}", "received_events_url": "https://api.github.com/users/yyibin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-28T00:49:15Z", "updated_at": "2020-07-31T07:23:48Z", "closed_at": "2020-07-31T07:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some slashes are lost when data is inserted into column that has `bytea` type in Postgres DB. \r\n\r\nFor example, if the data is `C:\\\\\\\\test.txt`, the data saved to the DB looks like `C:\\\\test.txt`.\r\n\r\n**Expected behavior**\r\nSlashes shouldn't be lost.\r\n\r\n**To Reproduce**\r\nThe following code inserts data into `servers` table.\r\n\r\nThe `servers` table looks like\r\n```\r\n# \\d servers;\r\nTable \"<pg_schema_name>.servers\"\r\n Column | Type  | Collation | Nullable | Default \r\n--------+-------+-----------+----------+---------\r\n id     | uuid  |           | not null | \r\n config | bytea |           | not null | \r\nIndexes:\r\n    \"servers_pkey\" PRIMARY KEY, btree (id)\r\n```\r\n\r\n```py\r\nfrom sqlalchemy import sql as sqlalchemy_sql, create_engine\r\nfrom sqlalchemy.orm.session import Session\r\n\r\nuri = \"postgresql://root:postgres@postgres:5432/<db_name>?client_encoding=utf8\"\r\ncol_names = set(['config', 'id'])\r\ntable = \"servers\"\r\nt = sqlalchemy_sql.table(table, *(sqlalchemy_sql.column(c) for c in col_names))\r\n\r\nengine = create_engine(uri)\r\nsession = Session(bind=engine)\r\nsession.execute(\"SET search_path TO <pg_schema_name>;\")\r\nt.bind = session.get_bind()\r\n\r\nvalues = [{'config': 'C:\\\\\\\\test.txt', 'id': 'f8768281-de43-4812-b6ca-c03181e97c83'}]\r\nstatement = t.insert(values=values)\r\n\r\nfoo = session.execute(statement)\r\nsession.execute('COMMIT;')\r\n```\r\n\r\n**Error**\r\n\r\nNo error stack. \r\n\r\nWhen the data is retrieved, some slashes are lost.\r\n\r\n```\r\nres = session.execute('select * from servers;')\r\nfor r in res:\r\n    test = r\r\n\r\n>>> test\r\n(UUID('f8768281-de43-4812-b6ca-c03181e97c83'), <read-only buffer for 0x7f55175d1c90, size 11, offset 0 at 0x7f55166c9130>)\r\n>>> str(test[1])\r\n'C:\\\\test.txt'\r\n```\r\n\r\n**Versions.**\r\n - OS: python:2.7.14-alpine3.4 (base docker image)\r\n - Python: 2.7\r\n - SQLAlchemy: 1.3.18\r\n - Database: Postgres\r\n\r\n**More context**\r\nSlashes are not lost if the column type is `varchar`.\r\n\r\nTried the same insertion code with the following table and slashes are not lost:\r\n```\r\n# \\d users;\r\n      Table \"<pg_schema_name>.auth_servers\"\r\n    Column    |          Type          | Collation | Nullable | Default \r\n--------------+------------------------+-----------+----------+---------\r\n id           | uuid                   |           | not null | \r\n name         | character varying(128) |           | not null | \r\n```\r\n```\r\n>>> uri = \"postgresql://root:postgres@postgres:5432/<db_name>?client_encoding=utf8\"\r\n>>> col_names = set(['name', 'id'])\r\n>>> table = \"users\"\r\n>>> t = sqlalchemy_sql.table(table, *(sqlalchemy_sql.column(c) for c in col_names))\r\n>>> \r\n>>> engine = create_engine(uri)\r\n>>> session = Session(bind=engine)\r\n>>> session.execute(\"SET search_path TO <pg_schema_name>;\")\r\n<sqlalchemy.engine.result.ResultProxy object at 0x7f5516687890>\r\n>>> t.bind = session.get_bind()\r\n>>> \r\n>>> values = [{'name': 'C:\\\\\\\\test.txt', 'id': 'f8768281-de43-4812-b6ca-c03181e97c81'}]\r\n>>> statement = t.insert(values=values)\r\n>>> \r\n>>> foo = session.execute(statement)\r\n>>> session.execute('COMMIT;')\r\n<sqlalchemy.engine.result.ResultProxy object at 0x7f55166c90d0>\r\n>>> \r\n>>> bar = session.execute('select * from users;')\r\n>>> \r\n>>> for r in res:\r\n...     test = r\r\n... \r\n>>> r\r\n(UUID('f8768281-de43-4812-b6ca-c03181e97c81'), u'C:\\\\\\\\test.txt')\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5476", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5476/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5476/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5476/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5476", "id": 665816522, "node_id": "MDU6SXNzdWU2NjU4MTY1MjI=", "number": 5476, "title": "TypeDecorator on PostgreSQL range type is passed `bool` from comparison operator.", "user": {"login": "TallJimbo", "id": 1330720, "node_id": "MDQ6VXNlcjEzMzA3MjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1330720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TallJimbo", "html_url": "https://github.com/TallJimbo", "followers_url": "https://api.github.com/users/TallJimbo/followers", "following_url": "https://api.github.com/users/TallJimbo/following{/other_user}", "gists_url": "https://api.github.com/users/TallJimbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/TallJimbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TallJimbo/subscriptions", "organizations_url": "https://api.github.com/users/TallJimbo/orgs", "repos_url": "https://api.github.com/users/TallJimbo/repos", "events_url": "https://api.github.com/users/TallJimbo/events{/privacy}", "received_events_url": "https://api.github.com/users/TallJimbo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1143569068, "node_id": "MDU6TGFiZWwxMTQzNTY5MDY4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/datatypes", "name": "datatypes", "color": "59d67b", "default": false, "description": "things to do with database types, like VARCHAR and others"}, {"id": 1141273914, "node_id": "MDU6TGFiZWwxMTQxMjczOTE0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/postgresql", "name": "postgresql", "color": "60A070", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 4, "created_at": "2020-07-26T16:41:50Z", "updated_at": "2020-07-29T16:49:44Z", "closed_at": "2020-07-29T16:49:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen defining a `TypeDecorator` based on `dialects.postgresql.ranges.INT8RANGE` (or any other range, I think), `process_result_value` is called with the result of calling the `overlaps` method (or other comparisons) from `dialects.postgresql.ranges.RangeComparison.comparison_factory`, even though that returns `bool` rather than a range type.\r\n\r\n[Docs](https://docs.sqlalchemy.org/en/13/core/custom_types.html#redefining-and-creating-new-operators) suggest that operators that return `bool` should be marked by passing `is_comparison` to `Operators.op`, which is indeed missing (e.g. https://github.com/sqlalchemy/sqlalchemy/blob/master/lib/sqlalchemy/dialects/postgresql/ranges.py#L58), and I _suspect_ that explains what I'm seeing.\r\n\r\n**Expected behavior**\r\nCalling `overlaps` or other `bool`-returning comparison methods in a query should bypass the `TypeDecorator`'s result processing.\r\n\r\n**To Reproduce**\r\nI am happy to provide a minimal example upon request, but would prefer to spend that time writing an actual test in a PR instead, if I can first get confirmation here that my diagnosis is correct.\r\n\r\n**Versions.**\r\n - OS: Linux (Mint 20.0)\r\n - Python: 3.7\r\n - SQLAlchemy: 1.3.17 (_if_ my diagnosis is correct, the problem is present on master as well)\r\n - Database: PostgreSQL\r\n - DBAPI: psycopg2 2.8.5\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5473", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5473/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5473/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5473/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5473", "id": 665286312, "node_id": "MDU6SXNzdWU2NjUyODYzMTI=", "number": 5473, "title": "Why ColumnAssociationProxyInstance gets injected onto the class when getting class attributes", "user": {"login": "gjeusel", "id": 16243660, "node_id": "MDQ6VXNlcjE2MjQzNjYw", "avatar_url": "https://avatars1.githubusercontent.com/u/16243660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gjeusel", "html_url": "https://github.com/gjeusel", "followers_url": "https://api.github.com/users/gjeusel/followers", "following_url": "https://api.github.com/users/gjeusel/following{/other_user}", "gists_url": "https://api.github.com/users/gjeusel/gists{/gist_id}", "starred_url": "https://api.github.com/users/gjeusel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gjeusel/subscriptions", "organizations_url": "https://api.github.com/users/gjeusel/orgs", "repos_url": "https://api.github.com/users/gjeusel/repos", "events_url": "https://api.github.com/users/gjeusel/events{/privacy}", "received_events_url": "https://api.github.com/users/gjeusel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}, {"id": 1141286348, "node_id": "MDU6TGFiZWwxMTQxMjg2MzQ4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sqlalchemy.ext", "name": "sqlalchemy.ext", "color": "90E060", "default": false, "description": "extension modules, most of which are ORM related"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-24T16:39:30Z", "updated_at": "2020-07-25T20:30:22Z", "closed_at": "2020-07-25T20:30:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Mike !\r\n\r\n### Question\r\n\r\nI'm struggling with a behaviour of the association proxy, since the introductions of `ObjectAssociationProxyInstance` and `ColumnAssociationProxyInstance`.\r\n\r\nWhy the injection of a class attribute at the moment you get the attribute of an association proxy from the class ?\r\n\r\n### Reproducible script\r\n\r\nHere is a simple script to highlight my \"tricky\" question:\r\n\r\n```python\r\nimport sqlalchemy as sa\r\nfrom sqlalchemy.ext.associationproxy import association_proxy\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import backref, relationship\r\n\r\nengine = sa.create_engine(\"sqlite:///:memory:\")\r\nBase = declarative_base()\r\nBase.metadata.bind = engine\r\nSession = sa.orm.sessionmaker(autocommit=False, autoflush=False, bind=engine)\r\nsession = sa.orm.scoped_session(Session)\r\n\r\n\r\nclass Person(Base):\r\n    __tablename__ = \"person\"\r\n    id = sa.Column(sa.Integer, primary_key=True)\r\n    name = sa.Column(sa.Unicode, unique=True)\r\n\r\n\r\nclass Book(Base):\r\n    __tablename__ = \"book\"\r\n    id = sa.Column(sa.Integer, primary_key=True)\r\n    owner_id = sa.Column(sa.Integer, sa.ForeignKey(\"person.id\"))\r\n    owner = relationship(\"Person\", backref=backref(\"books\", lazy=\"dynamic\"))\r\n    owner_name = association_proxy(\"owner\", \"name\")\r\n\r\n\r\nBase.metadata.create_all()\r\n\r\nfirst_dir = dir(Book)\r\n\r\n# Getting the attr on the Class itself:\r\nprint(\"Type of Book.owner_name: \", type(Book.owner_name))\r\n\r\nsecond_dir = dir(Book)\r\n\r\ninjected_attrs = set(second_dir) - set(first_dir)\r\nprint(f\"Injected attributes are: {injected_attrs}\")\r\n\r\nattrname = tuple(injected_attrs)[0]\r\nassert id(Book.owner_name) == id(getattr(Book, attrname))\r\n```\r\n\r\nExample output:\r\n\r\n```sh\r\nType of Book.owner_name:  <class 'sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance'>\r\nInjected attributes are: {'_AssociationProxy_owner_4375252160_inst'}\r\n```\r\n\r\n### Why does it matter ?\r\n\r\nAt the moment you inspect classes and want to find associations proxies, it's a bit struggling to exclude the injected ones.\r\n\r\n---\r\n### Versions:\r\n\r\n - OS: Macos 10.14.6\r\n - Python: Python 3.6.10 :: Anaconda, Inc.\r\n - SQLAlchemy: 1.3.18\r\n - Database: sqlite 3.30.1\r\n - DBAPI: psycopg2==2.8.5\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5472", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5472/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5472/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5472/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5472", "id": 664461547, "node_id": "MDU6SXNzdWU2NjQ0NjE1NDc=", "number": 5472, "title": "Issue on query generation with Hive", "user": {"login": "OpenDataAlex", "id": 244256, "node_id": "MDQ6VXNlcjI0NDI1Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/244256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OpenDataAlex", "html_url": "https://github.com/OpenDataAlex", "followers_url": "https://api.github.com/users/OpenDataAlex/followers", "following_url": "https://api.github.com/users/OpenDataAlex/following{/other_user}", "gists_url": "https://api.github.com/users/OpenDataAlex/gists{/gist_id}", "starred_url": "https://api.github.com/users/OpenDataAlex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OpenDataAlex/subscriptions", "organizations_url": "https://api.github.com/users/OpenDataAlex/orgs", "repos_url": "https://api.github.com/users/OpenDataAlex/repos", "events_url": "https://api.github.com/users/OpenDataAlex/events{/privacy}", "received_events_url": "https://api.github.com/users/OpenDataAlex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1143451229, "node_id": "MDU6TGFiZWwxMTQzNDUxMjI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/external%20driver%20issues", "name": "external driver issues", "color": "2d6eb7", "default": false, "description": "the issue involves a misbehavior on the part of the DBAPI itself, probably not SQLAlchemy"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-23T13:11:29Z", "updated_at": "2020-07-25T19:48:54Z", "closed_at": "2020-07-25T19:48:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm attempting to build a GraphQL API with Hive as part of the backend.  I'm leveraging graphene-sqlalchemy, which uses sqlalchemy for the query generation.  I originally posted this on their Issue board and it was recommended to post this over here. Following the documentation I created the following schema:\r\n\r\n`class Manufacturer(SQLAlchemyObjectType):\r\nclass Meta:\r\nmodel = ManufacturerModel\r\ninterfaces = (relay.Node,)\r\n\r\nclass Query(ObjectType):\r\nnode = relay.Node.Field()\r\nall_manufacturers = SQLAlchemyConnectionField(Manufacturer.connection)`\r\n\r\nWhich leverages the following SQLAlchemy model:\r\n\r\n`class Manufacturer(Base):\r\n\r\ntablename = 'manufacturer_hub'\r\n\r\nmanufacturer_hub_pk = Column(String, primary_key=True)\r\nmanufacturer_name = Column(String)`\r\n\r\nI'm able to connect to the Hive cluster and a query attempts to run, but it fails due to the sort that is provided:\r\n\r\nSELECT manufacturer_hub.manufacturer_hub_pk AS manufacturer_hub_manufacturer_hub_pk, manufacturer_hub.manufacturer_name AS manufacturer_hub_manufacturer_name FROM manufacturer_hub ORDER BY manufacturer_hub.manufacturer_hub_pk ASC\r\n\r\nIf aliases are being provided for columns, Hive is expecting them to be used in the ORDER BY. Running the following corrected query in Hive works:\r\n\r\nSELECT manufacturer_hub.manufacturer_hub_pk AS manufacturer_hub_manufacturer_hub_pk, manufacturer_hub.manufacturer_name AS manufacturer_hub_manufacturer_name FROM manufacturer_hub ORDER BY manufacturer_hub_manufacturer_hub_pk ASC", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5471", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5471/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5471/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5471/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5471", "id": 664363201, "node_id": "MDU6SXNzdWU2NjQzNjMyMDE=", "number": 5471, "title": "having a custom DDL at a table ORM configuration", "user": {"login": "MosheVai", "id": 34818222, "node_id": "MDQ6VXNlcjM0ODE4MjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/34818222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MosheVai", "html_url": "https://github.com/MosheVai", "followers_url": "https://api.github.com/users/MosheVai/followers", "following_url": "https://api.github.com/users/MosheVai/following{/other_user}", "gists_url": "https://api.github.com/users/MosheVai/gists{/gist_id}", "starred_url": "https://api.github.com/users/MosheVai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MosheVai/subscriptions", "organizations_url": "https://api.github.com/users/MosheVai/orgs", "repos_url": "https://api.github.com/users/MosheVai/repos", "events_url": "https://api.github.com/users/MosheVai/events{/privacy}", "received_events_url": "https://api.github.com/users/MosheVai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-07-23T10:23:51Z", "updated_at": "2020-08-07T16:38:10Z", "closed_at": "2020-08-07T16:38:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following table:\r\n```python\r\n    class Asset2020(Base):\r\n        __tablename__ = 'assets_2020'\r\n        id = Column(Integer)\r\n        asset_symbol = Column(String)\r\n        price_date = Column(Date)\r\n```\r\nwhen I use `.create_all` to create the table I want to have a completely custom DDL script.\r\nI didnt find how to do this in the documentation, I would imagine it will be in the `__table_args__` argument.\r\n\r\n---\r\n\r\nhow to do something similar to this:\r\n\r\n```python\r\n    class Asset2020(Base):\r\n          __table_args__ = {\r\n        'custom_ddl': \"\"\"CREATE TABLE assets_2020 PARTITION OF assets\r\n    FOR VALUES FROM ('2020-01-01') TO ('2020-12-31');\"\"\"\r\n    }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5470", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5470/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5470/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5470/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5470", "id": 663058151, "node_id": "MDU6SXNzdWU2NjMwNTgxNTE=", "number": 5470, "title": "expression in ORDER BY clause does match any expression in the SELECT clause (SQL Server)", "user": {"login": "theosotr", "id": 6434138, "node_id": "MDQ6VXNlcjY0MzQxMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6434138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theosotr", "html_url": "https://github.com/theosotr", "followers_url": "https://api.github.com/users/theosotr/followers", "following_url": "https://api.github.com/users/theosotr/following{/other_user}", "gists_url": "https://api.github.com/users/theosotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/theosotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theosotr/subscriptions", "organizations_url": "https://api.github.com/users/theosotr/orgs", "repos_url": "https://api.github.com/users/theosotr/repos", "events_url": "https://api.github.com/users/theosotr/events{/privacy}", "received_events_url": "https://api.github.com/users/theosotr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141274001, "node_id": "MDU6TGFiZWwxMTQxMjc0MDAx", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sql", "name": "sql", "color": "5060F0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 12, "created_at": "2020-07-21T14:25:37Z", "updated_at": "2020-08-14T06:47:47Z", "closed_at": "2020-08-13T21:43:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\nI run the following query on SQL Server\r\n\r\n```python\r\nexpr = (Model.columnA.op('+')(2)).label('label')\r\nsession.query(expr).select_from(Model).order_by(desc(expr))).distinct()\r\n```\r\n\r\nSQLalchemy generates the following query\r\n\r\n```sql\r\nSELECT DISTINCT model.columnA + ? AS label, (model.columnA + ?) AS anon_1\r\nFROM model ORDER BY (model.columnA + ?) DESC\r\n```\r\nthe query above crashes on SQL Server with\r\n\r\n```\r\nsqlalchemy.exc.ProgrammingError: (pyodbc.ProgrammingError) ('42000', '[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]ORDER BY items must appear in the select list if SELECT DISTINCT is specified. (145) (SQLExecDirectW)')\r\n```\r\n\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen. -->\r\nI expect SQLAlchemy to produce this query instead\r\n\r\n```sql\r\nSELECT DISTINCT model.columnA + ? AS label\r\nFROM model ORDER BY label DESC\r\n```\r\n\r\nNotably, when i replace the `op('+')` method, with the Python operator `+` SQLalchemy produces the expected query. That is\r\n\r\n```python\r\nexpr = (Model.columnA + 2).label('label')\r\nsession.query(expr).select_from(Model).order_by(desc(expr))).distinct()\r\n```\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5469", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5469/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5469/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5469/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5469", "id": 661776887, "node_id": "MDU6SXNzdWU2NjE3NzY4ODc=", "number": 5469, "title": "Invalid SQL code is generated when combining DISTINCT ON with UNION (Postgres)", "user": {"login": "theosotr", "id": 6434138, "node_id": "MDQ6VXNlcjY0MzQxMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6434138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theosotr", "html_url": "https://github.com/theosotr", "followers_url": "https://api.github.com/users/theosotr/followers", "following_url": "https://api.github.com/users/theosotr/following{/other_user}", "gists_url": "https://api.github.com/users/theosotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/theosotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theosotr/subscriptions", "organizations_url": "https://api.github.com/users/theosotr/orgs", "repos_url": "https://api.github.com/users/theosotr/repos", "events_url": "https://api.github.com/users/theosotr/events{/privacy}", "received_events_url": "https://api.github.com/users/theosotr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141274001, "node_id": "MDU6TGFiZWwxMTQxMjc0MDAx", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sql", "name": "sql", "color": "5060F0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2020-07-20T12:41:40Z", "updated_at": "2020-07-20T22:56:10Z", "closed_at": "2020-07-20T22:56:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nI have the following models\r\n\r\n```python\r\nclass Fixated(Base):\r\n    __tablename__ = 'fixated'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    tailpipe = Column(Integer)\r\n    joshua = Column(String(50))\r\n    grittiest = Column(String(50))\r\n    baltic = Column(String(50))\r\n\r\nclass Trait(Base):\r\n    __tablename__ = 'trait'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    chambray_id = Column(ForeignKey('chambray.id'))\r\n    nancy = Column(String(50))\r\n    repairs = Column(String(50))\r\n    nymph = Column(String(50))\r\n```\r\n\r\nWhen I run the following query on postgres\r\n\r\n```python\r\nq1 = session.query(Trait.repairs.label('column1')).select_from(Trait)\r\nq1 = q1.filter(Trait.nancy.startswith('ste_', autoescape=True)).distinct(Trait.nancy)\r\n\r\nq2 = session.query(Fixated.joshua).select_from(Fixated)\r\nq1.union(q2)\r\n```\r\n\r\nSQLAlchemy crashes with\r\n\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1510, in _execute_context\r\n    cursor, statement, parameters, context\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/engine/default.py\", line 586, in do_execute\r\n    cursor.execute(statement, parameters)\r\npsycopg2.errors.UndefinedTable: missing FROM-clause entry for table \"trait\"\r\nLINE 1: SELECT DISTINCT ON (trait.nancy) anon_1.column1 AS anon_1_co...\r\n                            ^\r\n\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"tmp.py\", line 34, in <module>\r\n    for r in ret:\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/orm/query.py\", line 2690, in __iter__\r\n    return self._iter().__iter__()\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/orm/query.py\", line 2700, in _iter\r\n    future=True,\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/orm/session.py\", line 1621, in execute\r\n    result = conn._execute_20(statement, params or {}, execution_options)\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1333, in _execute_20\r\n    return meth(self, multiparams, params, execution_options)\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/sql/elements.py\", line 310, in _execute_on_connection\r\n    self, multiparams, params, execution_options\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1232, in _execute_clauseelement\r\n    cache_hit=cache_hit,\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1553, in _execute_context\r\n    e, statement, parameters, cursor, context\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1734, in _handle_dbapi_exception\r\n    sqlalchemy_exception, with_traceback=exc_info[2], from_=e\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/util/compat.py\", line 172, in raise_\r\n    raise exception\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1510, in _execute_context\r\n    cursor, statement, parameters, context\r\n  File \"/home/.env/lib/python3.6/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.6-linux-x86_64.egg/sqlalchemy/engine/default.py\", line 586, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedTable) missing FROM-clause entry for table \"trait\"\r\nLINE 1: SELECT DISTINCT ON (trait.nancy) anon_1.column1 AS anon_1_co...\r\n                            ^\r\n\r\n[SQL: SELECT DISTINCT ON (trait.nancy) anon_1.column1 AS anon_1_column1\r\nFROM (SELECT DISTINCT ON (trait.nancy) trait.repairs AS column1\r\nFROM trait\r\nWHERE (trait.nancy LIKE %(nancy_1)s || '%%' ESCAPE '/') UNION SELECT fixated.joshua AS fixated_joshua\r\nFROM fixated) AS anon_1]\r\n[parameters: {'nancy_1': 'ste/_'}]\r\n(Background on this error at: http://sqlalche.me/e/14/f405)\r\n```\r\n\r\nbecause the generated query is wrong! That is\r\n\r\n```sql\r\nSELECT DISTINCT ON (trait.nancy) anon_1.column1 AS anon_1_column1\r\nFROM (SELECT DISTINCT ON (trait.nancy) trait.repairs AS column1\r\nFROM trait\r\nWHERE (trait.nancy LIKE %(nancy_1)s || '%%' ESCAPE '/') UNION SELECT fixated.joshua AS fixated_joshua\r\nFROM fixated) AS anon_1\r\n```\r\n\r\n\r\n**Expected behavior**\r\n\r\nThe right query should be\r\n\r\n```sql\r\nSELECT anon_1.column1 AS anon_1_column1\r\nFROM (SELECT DISTINCT ON (trait.nancy) trait.repairs AS column1\r\nFROM trait\r\nWHERE (trait.nancy LIKE %(nancy_1)s || '%%' ESCAPE '/') UNION SELECT fixated.joshua AS fixated_joshua\r\nFROM fixated) AS anon_1\r\n```\r\n\r\n**NOTE**:  I ran the expected SQL query above on Postgres, and returned the desired records!\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5468", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5468/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5468/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5468/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5468", "id": 660289670, "node_id": "MDU6SXNzdWU2NjAyODk2NzA=", "number": 5468, "title": "create_engine throws an error", "user": {"login": "tllucero", "id": 532920, "node_id": "MDQ6VXNlcjUzMjkyMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/532920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tllucero", "html_url": "https://github.com/tllucero", "followers_url": "https://api.github.com/users/tllucero/followers", "following_url": "https://api.github.com/users/tllucero/following{/other_user}", "gists_url": "https://api.github.com/users/tllucero/gists{/gist_id}", "starred_url": "https://api.github.com/users/tllucero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tllucero/subscriptions", "organizations_url": "https://api.github.com/users/tllucero/orgs", "repos_url": "https://api.github.com/users/tllucero/repos", "events_url": "https://api.github.com/users/tllucero/events{/privacy}", "received_events_url": "https://api.github.com/users/tllucero/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-18T18:03:09Z", "updated_at": "2020-07-20T04:01:05Z", "closed_at": "2020-07-20T04:01:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\ncreate_engine throws an error\r\n\r\n**Expected behavior**\r\nexpected create_engine to work\r\n\r\n**To Reproduce**\r\n\r\n\r\n```py\r\nimport os\r\n\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\n\r\nBase = declarative_base()\r\n\r\ndb_name = 'stss_development'\r\n\r\nuser_pass = os.environ['PG_STSS_DB_USER'] +':' + os.environ['PG_STSS_DBX']\r\nengine_string = 'postgresql+psycopg2://' + user_pass + '@localhost/' + db_name\r\nengine = create_engine(engine_string)\r\n\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"random.py\", line 3, in <module>\r\n    from sqlalchemy import create_engine\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/__init__.py\", line 146, in <module>\r\n    __go(locals())\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/__init__.py\", line 143, in __go\r\n    _sa_util.dependencies.resolve_all(\"sqlalchemy\")\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/langhelpers.py\", line 1024, in resolve_all\r\n    m._resolve()\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/langhelpers.py\", line 1064, in _resolve\r\n    self._initial_import = compat.import_(\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/default.py\", line 17, in <module>\r\n    import random\r\n  File \"/opt/Markets/programming/python/random.py\", line 12, in <module>\r\n    engine = create_engine(engine_string)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/__init__.py\", line 479, in create_engine\r\n    return strategy.create(*args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/strategies.py\", line 61, in create\r\n    entrypoint = u._get_entrypoint()\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/url.py\", line 172, in _get_entrypoint\r\n    cls = registry.load(name)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/langhelpers.py\", line 225, in load\r\n    loader = self.auto_fn(name)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/dialects/__init__.py\", line 45, in _auto_fn\r\n    module = __import__(\"sqlalchemy.dialects.%s\" % (dialect,)).dialects\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/dialects/postgresql/__init__.py\", line 8, in <module>\r\n    from . import base\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/dialects/postgresql/base.py\", line 2317, in <module>\r\n    class PGExecutionContext(default.DefaultExecutionContext):\r\nAttributeError: partially initialized module 'sqlalchemy.engine.default' has no attribute 'DefaultExecutionContext' (most likely due to a circular import)\r\nError in sys.excepthook:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3/dist-packages/apport_python_hook.py\", line 72, in apport_excepthook\r\n    from apport.fileutils import likely_packaged, get_recent_crashes\r\n  File \"/usr/lib/python3/dist-packages/apport/__init__.py\", line 5, in <module>\r\n    from apport.report import Report\r\n  File \"/usr/lib/python3/dist-packages/apport/report.py\", line 12, in <module>\r\n    import subprocess, tempfile, os.path, re, pwd, grp, os, time, io\r\n  File \"/usr/lib/python3.8/tempfile.py\", line 184, in <module>\r\n    from random import Random as _Random\r\n  File \"/opt/Markets/programming/python/random.py\", line 12, in <module>\r\n    engine = create_engine(engine_string)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/__init__.py\", line 479, in create_engine\r\n    return strategy.create(*args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/strategies.py\", line 61, in create\r\n    entrypoint = u._get_entrypoint()\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/url.py\", line 172, in _get_entrypoint\r\n    cls = registry.load(name)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/langhelpers.py\", line 225, in load\r\n    loader = self.auto_fn(name)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/dialects/__init__.py\", line 45, in _auto_fn\r\n    module = __import__(\"sqlalchemy.dialects.%s\" % (dialect,)).dialects\r\nAttributeError: module 'sqlalchemy' has no attribute 'dialects'\r\n\r\nOriginal exception was:\r\nTraceback (most recent call last):\r\n  File \"random.py\", line 3, in <module>\r\n    from sqlalchemy import create_engine\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/__init__.py\", line 146, in <module>\r\n    __go(locals())\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/__init__.py\", line 143, in __go\r\n    _sa_util.dependencies.resolve_all(\"sqlalchemy\")\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/langhelpers.py\", line 1024, in resolve_all\r\n    m._resolve()\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/langhelpers.py\", line 1064, in _resolve\r\n    self._initial_import = compat.import_(\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/default.py\", line 17, in <module>\r\n    import random\r\n  File \"/opt/Markets/programming/python/random.py\", line 12, in <module>\r\n    engine = create_engine(engine_string)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/__init__.py\", line 479, in create_engine\r\n    return strategy.create(*args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/strategies.py\", line 61, in create\r\n    entrypoint = u._get_entrypoint()\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/url.py\", line 172, in _get_entrypoint\r\n    cls = registry.load(name)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/langhelpers.py\", line 225, in load\r\n    loader = self.auto_fn(name)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/dialects/__init__.py\", line 45, in _auto_fn\r\n    module = __import__(\"sqlalchemy.dialects.%s\" % (dialect,)).dialects\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/dialects/postgresql/__init__.py\", line 8, in <module>\r\n    from . import base\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/dialects/postgresql/base.py\", line 2317, in <module>\r\n    class PGExecutionContext(default.DefaultExecutionContext):\r\nAttributeError: partially initialized module 'sqlalchemy.engine.default' has no attribute 'DefaultExecutionContext' (most likely due to a circular import)\r\n```\r\n\r\n**Versions.**\r\n - OS: Ubuntu 20.04\r\n - Python: 3.8.2\r\n - SQLAlchemy: 1.3.12+ds1-1ubuntu2\r\n - Database: postgresql\r\n - DBAPI: psycopg2\r\n\r\n**Additional context**\r\nCode worked 2020-07-17\r\nCode failed 2020-07-18\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5467", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5467/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5467/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5467/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5467", "id": 659700523, "node_id": "MDU6SXNzdWU2NTk3MDA1MjM=", "number": 5467, "title": "mssql dialect improperly quotes object (table/column) names containing ']'", "user": {"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141277259, "node_id": "MDU6TGFiZWwxMTQxMjc3MjU5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/SQL%20Server", "name": "SQL Server", "color": "C02080", "default": false, "description": "Microsoft SQL Server, e.g. mssql"}, {"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141274001, "node_id": "MDU6TGFiZWwxMTQxMjc0MDAx", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sql", "name": "sql", "color": "5060F0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-07-17T22:39:21Z", "updated_at": "2020-07-19T21:33:48Z", "closed_at": "2020-07-19T21:33:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe mssql dialect improperly quotes object (e.g., table/column) names containing ']' characters.\r\n\r\n**Expected behavior**\r\nThe dialect should escape ']' characters as ']]' like the T-SQL function `QUOTENAMES` does.\r\n\r\n**To Reproduce**\r\n\r\n```py\r\nmeta = sa.MetaData()\r\ntable_name = \"colo[u]r\"\r\ntbl = sa.Table(table_name, meta, sa.Column(\"id\", sa.Integer))\r\nmeta.create_all(engine)\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nsqlalchemy.exc.ProgrammingError: (pyodbc.ProgrammingError) ('42000', \"[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'r'. (102) (SQLExecDirectW)\")\r\n[SQL: \r\nCREATE TABLE [colo[u]r] (\r\n\tid INTEGER NULL\r\n)\r\n\r\n]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5466", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5466/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5466/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5466/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5466", "id": 659025533, "node_id": "MDU6SXNzdWU2NTkwMjU1MzM=", "number": 5466, "title": "Download documentation", "user": {"login": "eirnym", "id": 485399, "node_id": "MDQ6VXNlcjQ4NTM5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/485399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eirnym", "html_url": "https://github.com/eirnym", "followers_url": "https://api.github.com/users/eirnym/followers", "following_url": "https://api.github.com/users/eirnym/following{/other_user}", "gists_url": "https://api.github.com/users/eirnym/gists{/gist_id}", "starred_url": "https://api.github.com/users/eirnym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eirnym/subscriptions", "organizations_url": "https://api.github.com/users/eirnym/orgs", "repos_url": "https://api.github.com/users/eirnym/repos", "events_url": "https://api.github.com/users/eirnym/events{/privacy}", "received_events_url": "https://api.github.com/users/eirnym/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-07-17T08:41:53Z", "updated_at": "2020-07-18T12:33:36Z", "closed_at": "2020-07-17T22:30:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nI'm unable to use SQLAlchemy documentation offline, e.g having no or very limited internet connection. Not every environment provides free or good connection. \r\n\r\n**Describe the solution you'd like**\r\nPlease, add an offline documentation for personal use as many others did.\r\n\r\n**Describe alternatives you've considered**\r\nDownloading web pages is not an option, even \"save as pdf\" like macOS have\r\n\r\nThank you from a mountain", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5464", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5464/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5464/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5464/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5464", "id": 657959569, "node_id": "MDU6SXNzdWU2NTc5NTk1Njk=", "number": 5464, "title": "How to Insert to MsSql Table with primary key is not an identity column - Set Identity_insert to OFF error.", "user": {"login": "xhuyvn", "id": 8791671, "node_id": "MDQ6VXNlcjg3OTE2NzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/8791671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xhuyvn", "html_url": "https://github.com/xhuyvn", "followers_url": "https://api.github.com/users/xhuyvn/followers", "following_url": "https://api.github.com/users/xhuyvn/following{/other_user}", "gists_url": "https://api.github.com/users/xhuyvn/gists{/gist_id}", "starred_url": "https://api.github.com/users/xhuyvn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xhuyvn/subscriptions", "organizations_url": "https://api.github.com/users/xhuyvn/orgs", "repos_url": "https://api.github.com/users/xhuyvn/repos", "events_url": "https://api.github.com/users/xhuyvn/events{/privacy}", "received_events_url": "https://api.github.com/users/xhuyvn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141277259, "node_id": "MDU6TGFiZWwxMTQxMjc3MjU5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/SQL%20Server", "name": "SQL Server", "color": "C02080", "default": false, "description": "Microsoft SQL Server, e.g. mssql"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-16T08:06:44Z", "updated_at": "2020-07-26T17:03:45Z", "closed_at": "2020-07-26T17:03:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI'm using sqlalchemy 1.3 to insert a table on SQL Server 2016. The table has a primary key like this: **PKID int Not null.**\r\nThe insert script: _connection.execute(table.insert(),listToWrite)_ => it is give an errror : SQL can not set  Identity_insert to OFF.\r\nBut I use _dataframe.to_sql(...)_ for insert => it is fine.\r\n\r\nI found the information: [sqlalchemy doc](https://docs.sqlalchemy.org/en/13/dialects/mssql.html#auto-increment-behavior-identity-columns): _**the first integer primary key column in a Table will be considered to be the identity column**_.\r\nI updated column to **PKID int Identity(1,1)** and run _connection.execute(table.insert(),listToWrite)_ again, it fine.\r\nThe value inserted into PKID column is correct, it keeps the value of _listToWrite_ , not incremental value.\r\n\r\nMy question is: How do I insert to the table without setting the primary key to an Identity column using sqlalchemy core.\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5460", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5460/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5460/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5460/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5460", "id": 657518094, "node_id": "MDU6SXNzdWU2NTc1MTgwOTQ=", "number": 5460, "title": "Using Connection Pooling Queues with Python multiprocessing", "user": {"login": "palisadoes", "id": 16875803, "node_id": "MDQ6VXNlcjE2ODc1ODAz", "avatar_url": "https://avatars2.githubusercontent.com/u/16875803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palisadoes", "html_url": "https://github.com/palisadoes", "followers_url": "https://api.github.com/users/palisadoes/followers", "following_url": "https://api.github.com/users/palisadoes/following{/other_user}", "gists_url": "https://api.github.com/users/palisadoes/gists{/gist_id}", "starred_url": "https://api.github.com/users/palisadoes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palisadoes/subscriptions", "organizations_url": "https://api.github.com/users/palisadoes/orgs", "repos_url": "https://api.github.com/users/palisadoes/repos", "events_url": "https://api.github.com/users/palisadoes/events{/privacy}", "received_events_url": "https://api.github.com/users/palisadoes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2020-07-15T17:13:46Z", "updated_at": "2020-08-07T16:28:32Z", "closed_at": "2020-08-07T16:28:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "The SQLAlchemy documentation \"[How do I use engines / connections / sessions with Python multiprocessing, or os.fork()?](https://docs.sqlalchemy.org/en/13/faq/connections.html#how-do-i-use-engines-connections-sessions-with-python-multiprocessing-or-os-fork)\" does not consider using connection pooling queues with multiprocessing. \r\n\r\nThe example given does not specify a Queue using a `poolclass` kwarg, therefore the default `None` queue is used. I have found when using queues that you need to **also** apply the `add_engine_pidguard` function to the imported queue class  **prior** to creating the engine or else the connections hang.\r\n\r\nWhen using the stock example, some connections are logged as being checked out, but your application will hang eventually. This can be easily verified as you will see many process ids for your application in your process table when using the `ps aux | grep application_name` command that are not logged.\r\n\r\nThe resulting working code looks like this when using the `QueuePool` class.\r\n\r\n**Note:** the add_engine_pidguard function is identical to the documentation:\r\n\r\n```\r\nimport os\r\nimport warnings\r\n\r\nfrom sqlalchemy import event\r\nfrom sqlalchemy import exc\r\nfrom sqlalchemy.pool import QueuePool\r\n\r\nadd_engine_pidguard(QueuePool)\r\nengine = create_engine(\"...\", poolclass=QueuePool)\r\nadd_engine_pidguard(engine)\r\n\r\ndef add_engine_pidguard(engine):\r\n    \"\"\"Add multiprocessing guards.\r\n\r\n    Forces a connection to be reconnected if it is detected\r\n    as having been shared to a sub-process.\r\n\r\n    \"\"\"\r\n\r\n    @event.listens_for(engine, \"connect\")\r\n    def connect(dbapi_connection, connection_record):\r\n        connection_record.info['pid'] = os.getpid()\r\n\r\n    @event.listens_for(engine, \"checkout\")\r\n    def checkout(dbapi_connection, connection_record, connection_proxy):\r\n        pid = os.getpid()\r\n        if connection_record.info['pid'] != pid:\r\n            # substitute log.debug() or similar here as desired\r\n            warnings.warn(\r\n                \"Parent process %(orig)s forked (%(newproc)s) with an open \"\r\n                \"database connection, \"\r\n                \"which is being discarded and recreated.\" %\r\n                {\"newproc\": pid, \"orig\": connection_record.info['pid']})\r\n            connection_record.connection = connection_proxy.connection = None\r\n            raise exc.DisconnectionError(\r\n                \"Connection record belongs to pid %s, \"\r\n                \"attempting to check out in pid %s\" %\r\n                (connection_record.info['pid'], pid)\r\n            )\r\n```\r\n----\r\n**Versions (Multiple)**\r\n - OS: CentOS Linux release 7.8.2003 (Core)\r\n - Python: 3.6.8\r\n - SQLAlchemy: 1.3.15\r\n - Database: MariaDB-Galera-server-10.0.38-1\r\n - DBAPI: pymysql 0.9.3\r\n----\r\n - OS: Ubuntu 20.04 LTS\r\n - Python: 3.8.2\r\n - SQLAlchemy: 1.3.16\r\n - Database: mariadb-server-10.3 (1:10.3.22-1ubuntu1)\r\n - DBAPI: pymysql 0.9.3\r\n----\r\n\r\nPlease verify whether this observation is correct and whether my solution is officially recommended. I will update the documentation if this is so.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5459", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5459/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5459/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5459/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5459", "id": 656738547, "node_id": "MDU6SXNzdWU2NTY3Mzg1NDc=", "number": 5459, "title": "Consider adding suport to MariaDB's official Connector", "user": {"login": "honglei", "id": 1011330, "node_id": "MDQ6VXNlcjEwMTEzMzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1011330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honglei", "html_url": "https://github.com/honglei", "followers_url": "https://api.github.com/users/honglei/followers", "following_url": "https://api.github.com/users/honglei/following{/other_user}", "gists_url": "https://api.github.com/users/honglei/gists{/gist_id}", "starred_url": "https://api.github.com/users/honglei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honglei/subscriptions", "organizations_url": "https://api.github.com/users/honglei/orgs", "repos_url": "https://api.github.com/users/honglei/repos", "events_url": "https://api.github.com/users/honglei/events{/privacy}", "received_events_url": "https://api.github.com/users/honglei/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1143451229, "node_id": "MDU6TGFiZWwxMTQzNDUxMjI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/external%20driver%20issues", "name": "external driver issues", "color": "2d6eb7", "default": false, "description": "the issue involves a misbehavior on the part of the DBAPI itself, probably not SQLAlchemy"}, {"id": 1141273925, "node_id": "MDU6TGFiZWwxMTQxMjczOTI1", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/feature", "name": "feature", "color": "306080", "default": false, "description": null}, {"id": 2205915448, "node_id": "MDU6TGFiZWwyMjA1OTE1NDQ4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/mariadb", "name": "mariadb", "color": "c1fdff", "default": false, "description": ""}, {"id": 1171369643, "node_id": "MDU6TGFiZWwxMTcxMzY5NjQz", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/motivated%20volunteers%20requested", "name": "motivated volunteers requested", "color": "b8e0f9", "default": false, "description": "a feature that has noone to implement; can reopen a 'wontfix'"}, {"id": 1141273954, "node_id": "MDU6TGFiZWwxMTQxMjczOTU0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/mysql", "name": "mysql", "color": "30A040", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 22, "created_at": "2020-07-14T16:21:02Z", "updated_at": "2020-09-01T17:09:39Z", "closed_at": "2020-09-01T17:09:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://pypi.org/project/mariadb/\r\n\r\nhttps://mariadb.com/resources/blog/how-to-connect-python-programs-to-mariadb/\r\n\r\nDocs:\r\nhttps://mariadb.com/docs/appdev/connector-python/\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5458", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5458/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5458/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5458/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5458", "id": 656650000, "node_id": "MDU6SXNzdWU2NTY2NTAwMDA=", "number": 5458, "title": "New python breaks sqlalchemy", "user": {"login": "shailoantz", "id": 5684177, "node_id": "MDQ6VXNlcjU2ODQxNzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5684177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shailoantz", "html_url": "https://github.com/shailoantz", "followers_url": "https://api.github.com/users/shailoantz/followers", "following_url": "https://api.github.com/users/shailoantz/following{/other_user}", "gists_url": "https://api.github.com/users/shailoantz/gists{/gist_id}", "starred_url": "https://api.github.com/users/shailoantz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shailoantz/subscriptions", "organizations_url": "https://api.github.com/users/shailoantz/orgs", "repos_url": "https://api.github.com/users/shailoantz/repos", "events_url": "https://api.github.com/users/shailoantz/events{/privacy}", "received_events_url": "https://api.github.com/users/shailoantz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1518758061, "node_id": "MDU6TGFiZWwxNTE4NzU4MDYx", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/external%20extension%20issues", "name": "external extension issues", "color": "4aa0f7", "default": false, "description": "an extension to SQLAlchemy may be producing a problem"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-14T14:18:59Z", "updated_at": "2020-07-14T17:34:25Z", "closed_at": "2020-07-14T17:19:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nFailure in declarative base creation (see *error* section)\r\n\r\n**Expected behavior**\r\nsuccessfully create a declarative base...\r\n\r\n**To Reproduce**\r\nUpdate to python 3.8.4 and run sqlalchemy with this code\r\n\r\n```py\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy\r\n\r\napp = Flask(__name__)\r\ndb = SQLAlchemy(app)\r\n```\r\n\r\n**Error**\r\n\r\n   File \"/usr/local/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py\", line 715, in __init__\r\n     self.Model = self.make_declarative_base(model_class, metadata)\r\n   File \"/usr/local/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py\", line 797, in make_declarative_base\r\n     model.query_class = self.Query\r\n   File \"/usr/local/lib/python3.8/site-packages/sqlalchemy/ext/declarative/api.py\", line 79, in __setattr__\r\n     _add_attribute(cls, key, value)\r\n   File \"/usr/local/lib/python3.8/site-packages/sqlalchemy/ext/declarative/base.py\", line 802, in _add_attribute\r\n     type.__setattr__(cls, key, value)\r\n TypeError: can't apply this __setattr__ to DefaultMeta object\r\n\r\n**Versions.**\r\n - OS: Debian slim-buster\r\n - Python: 3.8.4\r\n - SQLAlchemy: 1.3.18\r\n - Database: postgres\r\n - DBAPI: psycopg2\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5457", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5457/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5457/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5457/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5457", "id": 656089635, "node_id": "MDU6SXNzdWU2NTYwODk2MzU=", "number": 5457, "title": ".limit().all() and .offset().all() seem to override .options(load_only('col_1', 'col_2')) and include all columns", "user": {"login": "christopherpickering", "id": 17788706, "node_id": "MDQ6VXNlcjE3Nzg4NzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/17788706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christopherpickering", "html_url": "https://github.com/christopherpickering", "followers_url": "https://api.github.com/users/christopherpickering/followers", "following_url": "https://api.github.com/users/christopherpickering/following{/other_user}", "gists_url": "https://api.github.com/users/christopherpickering/gists{/gist_id}", "starred_url": "https://api.github.com/users/christopherpickering/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christopherpickering/subscriptions", "organizations_url": "https://api.github.com/users/christopherpickering/orgs", "repos_url": "https://api.github.com/users/christopherpickering/repos", "events_url": "https://api.github.com/users/christopherpickering/events{/privacy}", "received_events_url": "https://api.github.com/users/christopherpickering/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1959689852, "node_id": "MDU6TGFiZWwxOTU5Njg5ODUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/great%20mcve", "name": "great mcve", "color": "dcf972", "default": false, "description": "An issue with a great mcve"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-13T19:37:27Z", "updated_at": "2020-08-07T16:36:39Z", "closed_at": "2020-08-07T16:36:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nHi, I'm trying to use \"load_only\" to select only a handful of columns in the table, however, it seems to always return all columns in the table, not just what I specify.\r\n\r\n```python\r\nstuff = Table.query.filter_by(col_1='this')).options(load_only('col_1', 'col_2')).limit(5).all()\r\n```\r\n\r\nstuff should return data with only two columns, col 1 and 2, but is returning all columns in the table.\r\n\r\nso if I put just .limit(5), I get the sql query that is limited to the one column. When I add .all() to get the results then I get all columns. With offset it is the same result - nice sql query until I add \".all()\" to get the results.\r\n\r\n**Expected behavior**\r\nI expect to only have the two columns in the result when I \"load_only\".\r\n\r\n\r\n**Versions.**\r\n - OS: Alpine Linux\r\n - Python:3.8.2\r\n - SQLAlchemy:1.3.17\r\n - Database:Sqlite3\r\n - DBAPI:\r\n\r\n**Have a nice day!**\r\n\r\nref: https://github.com/pallets/flask-sqlalchemy/issues/851", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5456", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5456/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5456/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5456/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5456", "id": 655876394, "node_id": "MDU6SXNzdWU2NTU4NzYzOTQ=", "number": 5456, "title": "quoting not applied for SQLite get_view_definition", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141273987, "node_id": "MDU6TGFiZWwxMTQxMjczOTg3", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sqlite", "name": "sqlite", "color": "E0D0A0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2020-07-13T14:00:28Z", "updated_at": "2020-07-13T19:07:55Z", "closed_at": "2020-07-13T19:07:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```\r\nfrom sqlalchemy import create_engine, inspect\r\n\r\n\r\ne = create_engine(\"sqlite://\", echo=True)\r\n\r\nwith e.connect() as conn:\r\n    conn.execute(\"create table foo (id integer)\")\r\n    conn.execute('create view \"My \\' View\" as select id from foo')\r\n\r\n\r\n    insp = inspect(conn)\r\n\r\n    def_ = insp.get_view_definition(\"My ' View\")\r\n\r\n    assert def_ is not None\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5455", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5455/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5455/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5455/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5455", "id": 655487243, "node_id": "MDU6SXNzdWU2NTU0ODcyNDM=", "number": 5455, "title": "engine level isolation level doesn't work (update: I'm wrong)", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141275752, "node_id": "MDU6TGFiZWwxMTQxMjc1NzUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/engine", "name": "engine", "color": "B04040", "default": false, "description": "engines, connections, transactions, isolation levels, execution options"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-07-12T22:17:49Z", "updated_at": "2020-07-12T22:21:07Z", "closed_at": "2020-07-12T22:20:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There is no call to set_connection_execution_options when isolation level is set at the engine level.  this affects all the docs at https://docs.sqlalchemy.org/en/14/orm/session_transaction.html#setting-isolation-for-individual-sessions and none of that works at all including in 1.3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5454", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5454/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5454/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5454/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5454", "id": 655480122, "node_id": "MDU6SXNzdWU2NTU0ODAxMjI=", "number": 5454, "title": "memoized bug", "user": {"login": "heukirne", "id": 97672, "node_id": "MDQ6VXNlcjk3Njcy", "avatar_url": "https://avatars2.githubusercontent.com/u/97672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heukirne", "html_url": "https://github.com/heukirne", "followers_url": "https://api.github.com/users/heukirne/followers", "following_url": "https://api.github.com/users/heukirne/following{/other_user}", "gists_url": "https://api.github.com/users/heukirne/gists{/gist_id}", "starred_url": "https://api.github.com/users/heukirne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heukirne/subscriptions", "organizations_url": "https://api.github.com/users/heukirne/orgs", "repos_url": "https://api.github.com/users/heukirne/repos", "events_url": "https://api.github.com/users/heukirne/events{/privacy}", "received_events_url": "https://api.github.com/users/heukirne/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-12T21:29:14Z", "updated_at": "2020-07-13T02:19:59Z", "closed_at": "2020-07-13T02:08:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\nmemoized does not work for dynamic Table such as schema change in the same app\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen. -->\r\n\r\n**To Reproduce**\r\nPlease try to provide a [Minimal, Complete, and Verifiable](http://stackoverflow.com/help/mcve) example. \r\nSee also [Reporting Bugs](https://www.sqlalchemy.org/participate.html#bugs) on the website, and some [example issues](https://github.com/sqlalchemy/sqlalchemy/issues?q=label%3A%22great+mcve%22)\r\n\r\n```py\r\nclass User(Base):\r\n     __tablename__ = 'user'\r\n     __table_args__ = {'schema':'public'}\r\n     id = Column(Integer, primary_key=True)\r\n     name = Column(String)\r\n\r\n     def setSchema(schema):\r\n        __table_args__ = {'schema':schema}\r\n\r\nUser.setSchema('public')\r\nsa.select(User.name).where(User.name == \"name1\").execute().fetchall()\r\n\r\nUser.setSchema('someschema')\r\nsa.select(User.name).where(User.name == \"name1\").execute().fetchall()\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nShould change schema on query but memoization do not update\r\n```\r\n\r\n**Versions.**\r\n - OS: \r\n - Python:\r\n - SQLAlchemy:\r\n - Database:\r\n - DBAPI:\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. -->\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5450", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5450/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5450/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5450/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5450", "id": 655124264, "node_id": "MDU6SXNzdWU2NTUxMjQyNjQ=", "number": 5450, "title": "sqlalchemy/1.3.18 requires zzzeeksphinx/1.1.5 but that version was never released", "user": {"login": "sandrotosi", "id": 346648, "node_id": "MDQ6VXNlcjM0NjY0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/346648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandrotosi", "html_url": "https://github.com/sandrotosi", "followers_url": "https://api.github.com/users/sandrotosi/followers", "following_url": "https://api.github.com/users/sandrotosi/following{/other_user}", "gists_url": "https://api.github.com/users/sandrotosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandrotosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandrotosi/subscriptions", "organizations_url": "https://api.github.com/users/sandrotosi/orgs", "repos_url": "https://api.github.com/users/sandrotosi/repos", "events_url": "https://api.github.com/users/sandrotosi/events{/privacy}", "received_events_url": "https://api.github.com/users/sandrotosi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}, {"id": 1332626373, "node_id": "MDU6TGFiZWwxMzMyNjI2Mzcz", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/setup", "name": "setup", "color": "81baef", "default": false, "description": "issues related to installation and setup"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-07-11T03:27:10Z", "updated_at": "2020-07-12T21:56:48Z", "closed_at": "2020-07-12T21:56:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nat https://github.com/sqlalchemy/sqlalchemy/blob/master/doc/build/conf.py#L40 `needs_extensions = {\"zzzeeksphinx\": \"1.1.5\"}` but AFAICS, the latest released version of zzzeeksphinx is 1.1.4; there are no tags at https://github.com/sqlalchemyorg/zzzeeksphinx to understand the release process, and on PyPI https://pypi.org/project/zzzeeksphinx/#history 1.1.4 is the latest\r\n\r\ncan you clarify?\r\n\r\nthe reason is that building sqla doc from the released tarball fails with:\r\n\r\n```\r\nSphinx version error:\r\nThis project needs the extension zzzeeksphinx at least in version 1.1.5 and therefore cannot be built with the loaded version (1.1.4).\r\n```\r\n\r\nthis is to update the debian packaging of sqlalchemy\r\n\r\nThanks,\r\nSandro", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5449", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5449/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5449/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5449/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5449", "id": 654701900, "node_id": "MDU6SXNzdWU2NTQ3MDE5MDA=", "number": 5449, "title": "With query in SQLAchamy and postgresql(Amazon redshift) giving syntax error", "user": {"login": "shubhranshbslice", "id": 64770430, "node_id": "MDQ6VXNlcjY0NzcwNDMw", "avatar_url": "https://avatars3.githubusercontent.com/u/64770430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shubhranshbslice", "html_url": "https://github.com/shubhranshbslice", "followers_url": "https://api.github.com/users/shubhranshbslice/followers", "following_url": "https://api.github.com/users/shubhranshbslice/following{/other_user}", "gists_url": "https://api.github.com/users/shubhranshbslice/gists{/gist_id}", "starred_url": "https://api.github.com/users/shubhranshbslice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shubhranshbslice/subscriptions", "organizations_url": "https://api.github.com/users/shubhranshbslice/orgs", "repos_url": "https://api.github.com/users/shubhranshbslice/repos", "events_url": "https://api.github.com/users/shubhranshbslice/events{/privacy}", "received_events_url": "https://api.github.com/users/shubhranshbslice/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1143451229, "node_id": "MDU6TGFiZWwxMTQzNDUxMjI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/external%20driver%20issues", "name": "external driver issues", "color": "2d6eb7", "default": false, "description": "the issue involves a misbehavior on the part of the DBAPI itself, probably not SQLAlchemy"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-10T11:04:36Z", "updated_at": "2020-07-11T09:20:37Z", "closed_at": "2020-07-11T09:20:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to run this query (Part of script)\r\n`with tn as (select dateadd(minute, -135, getdate()) as last_two_hours_date)\u2028insert into loans_emi_updated(\u2028    select \r\n`\r\nUsing **create_engine** and **.execute** using python sqlalchemy\r\nBut it returns an exception (psycopg2.errors.SyntaxError) syntax error at or near \"insert\"\r\nLINE 3:             insert into \r\n\r\nAny help for the same?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5448", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5448/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5448/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5448/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5448", "id": 654691699, "node_id": "MDU6SXNzdWU2NTQ2OTE2OTk=", "number": 5448, "title": "Multiple table cross association", "user": {"login": "suuuch", "id": 1031844, "node_id": "MDQ6VXNlcjEwMzE4NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1031844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suuuch", "html_url": "https://github.com/suuuch", "followers_url": "https://api.github.com/users/suuuch/followers", "following_url": "https://api.github.com/users/suuuch/following{/other_user}", "gists_url": "https://api.github.com/users/suuuch/gists{/gist_id}", "starred_url": "https://api.github.com/users/suuuch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suuuch/subscriptions", "organizations_url": "https://api.github.com/users/suuuch/orgs", "repos_url": "https://api.github.com/users/suuuch/repos", "events_url": "https://api.github.com/users/suuuch/events{/privacy}", "received_events_url": "https://api.github.com/users/suuuch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-10T10:45:02Z", "updated_at": "2020-08-07T16:28:55Z", "closed_at": "2020-08-07T16:28:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Recently, I realize  a very special situation.**\r\n\r\nI have three table .\r\n\r\n```\r\nclasss TableA(Base):\r\n   id = Integer\r\n   status = Integer\r\n   \r\n   score = relationship(\"TableB\", foreign_keys=TableA.id, primaryjoin='TableA.id == TableB.a_id' )\r\n   payment = relationship(\"TableC\", foreign_keys=TableA.id, primaryjoin='TableA.id == TableC.a_id' )\r\n\r\nclass TableB(Base):\r\n  id = Integer\r\n  a_id = Integer\r\n  year = Integer\r\n  score = Integer\r\n\r\nclass TableC(Base):\r\n  id = Integer\r\n  a_id = Integer\r\n  year = Integer\r\n  payment = Integer\r\n\r\n```\r\n### Table A Data:\r\n| id  | status  |\r\n| ------------- | ------------- |\r\n| 1 | 100  |\r\n| 2  | 200  |\r\n\r\n\r\n### Table B Data:\r\n| id  | a_id |year | score |\r\n| ------------- | ------------- | -------- | ----- |\r\n| 1 | 1| 2017 | 600 |\r\n| 2  | 1| 2018 | 630 |\r\n\r\n### Table C Data:\r\n| id  | a_id |year | payment |\r\n| ------------- | ------------- | -------- | ----- |\r\n| 1 | 1| 2017 | 2000|\r\n| 2  | 1| 2018 | 3000|\r\n| 3  | 1| 2019 | 3000|\r\n\r\n\r\n<hr />\r\n\r\n### Direct query SQL\r\n```\r\nselect *\r\nfrom tableA\r\n         left join tableB on tableA.id = tableB.id_a\r\n         left join tableC on tableA.id = tableC.id_a\r\n```\r\n\r\n### Direct query results \r\n\r\n| id | status | id | id\\_a | year | score | id | id\\_a | year | payment |\r\n| :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\r\n| 1 | 100 | 1 | 1 | 2017 | 600 | 1 | 1 | 2017 | 1000 |\r\n| 1 | 100 | 2 | 1 | 2018 | 630 | 1 | 1 | 2017 | 1000 |\r\n| 1 | 100 | 1 | 1 | 2017 | 600 | 2 | 1 | 2018 | 2000 |\r\n| 1 | 100 | 2 | 1 | 2018 | 630 | 2 | 1 | 2018 | 2000 |\r\n| 2 | 200 | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL |\r\n\r\n\r\n\r\n## The problem is :\r\nI want add a condition like `TableA.year == TableB.year`\r\nmake the sql like this :\r\n```\r\nselect *\r\nfrom tableA\r\n         left join tableB on tableA.id = tableB.id_a\r\n         left join tableC on tableA.id = tableC.id_a on TableB.year= tableC.year\r\n```\r\nBut I don't know how.\r\nCan I get some help ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5447", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5447/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5447/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5447/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5447", "id": 654578670, "node_id": "MDU6SXNzdWU2NTQ1Nzg2NzA=", "number": 5447, "title": "Regular expression search operator", "user": {"login": "TMiguelT", "id": 5019367, "node_id": "MDQ6VXNlcjUwMTkzNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5019367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TMiguelT", "html_url": "https://github.com/TMiguelT", "followers_url": "https://api.github.com/users/TMiguelT/followers", "following_url": "https://api.github.com/users/TMiguelT/following{/other_user}", "gists_url": "https://api.github.com/users/TMiguelT/gists{/gist_id}", "starred_url": "https://api.github.com/users/TMiguelT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TMiguelT/subscriptions", "organizations_url": "https://api.github.com/users/TMiguelT/orgs", "repos_url": "https://api.github.com/users/TMiguelT/repos", "events_url": "https://api.github.com/users/TMiguelT/events{/privacy}", "received_events_url": "https://api.github.com/users/TMiguelT/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269144, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}, {"id": 2011745336, "node_id": "MDU6TGFiZWwyMDExNzQ1MzM2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/requires%20triage", "name": "requires triage", "color": "ffff00", "default": false, "description": "New issue that requires categorization"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-10T07:39:35Z", "updated_at": "2020-07-10T14:29:11Z", "closed_at": "2020-07-10T14:07:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nI would like to be able to execute a \"find all rows where column `a` matches regex `b`\" query in a database-independent manner. \r\n\r\n**Describe the solution you'd like**\r\nI propose we add the following method to `sqlalchemy.sql.operators.ColumnOperators`:\r\n\r\n```\r\ndef regex_match(self, pattern: str):\r\n    \"\"\"\r\n    :param pattern: A POSIX regular expression\r\n    Returns an expression that will be converted to a database-appropriate regex match\r\n    \"\"\"\r\n```\r\nThe call `column.regex_match('[a-z]*')` would then evaluate to:\r\n* [Postgres](https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-POSIX-REGEXP): `column ~ \"[a-z]*\"`\r\n* [SQLite](https://www.sqlite.org/lang_expr.html#the_like_glob_regexp_and_match_operators): `column REGEXP \"[a-z]*\"`\r\n* [MySQL](https://dev.mysql.com/doc/refman/8.0/en/regexp.html#operator_regexp): `column REGEXP \"[a-z]*\"`\r\n* [Oracle](https://docs.oracle.com/cd/B12037_01/server.101/b10759/conditions018.htm#SQLRF00501): `REGEXP_LIKE(column, \"[a-z]*\")`\r\n* MSSQL: throw exception\r\n\r\n**Describe alternatives you've considered**\r\n\r\n* Doing nothing? Users can't use regular expressions in queries, which limits the ability for users to write powerful queries\r\n* Relying on `column.op`()`? This is not database-independent, since there is no one regex operator used in the main DBMS\r\n* Including regex flags in the function call? I considered this, but many DBMS don't support it, e.g. SQLite\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5444", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5444/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5444/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5444/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5444", "id": 653599020, "node_id": "MDU6SXNzdWU2NTM1OTkwMjA=", "number": 5444, "title": "AttributeError: module 'time' has no attribute 'clock'", "user": {"login": "crushsoccer", "id": 65049660, "node_id": "MDQ6VXNlcjY1MDQ5NjYw", "avatar_url": "https://avatars2.githubusercontent.com/u/65049660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crushsoccer", "html_url": "https://github.com/crushsoccer", "followers_url": "https://api.github.com/users/crushsoccer/followers", "following_url": "https://api.github.com/users/crushsoccer/following{/other_user}", "gists_url": "https://api.github.com/users/crushsoccer/gists{/gist_id}", "starred_url": "https://api.github.com/users/crushsoccer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crushsoccer/subscriptions", "organizations_url": "https://api.github.com/users/crushsoccer/orgs", "repos_url": "https://api.github.com/users/crushsoccer/repos", "events_url": "https://api.github.com/users/crushsoccer/events{/privacy}", "received_events_url": "https://api.github.com/users/crushsoccer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1146930079, "node_id": "MDU6TGFiZWwxMTQ2OTMwMDc5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/awaiting%20info", "name": "awaiting info", "color": "1f8ec1", "default": false, "description": "waiting for the submitter to give more information"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-08T21:09:41Z", "updated_at": "2020-07-13T19:10:50Z", "closed_at": "2020-07-13T19:10:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to build a chatter bot using python on windows 10. I downloaded chatterbot from github because pip have some problems installing chatterbot.The import and every thing works perfectly fine in my code up until when i try to initialize the package (chatbot) it gives me this error.\r\n\r\nAttributeError: module 'time' has no attribute 'clock'\r\n\r\nCan anyone help me please?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5443", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5443/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5443/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5443/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5443", "id": 652301806, "node_id": "MDU6SXNzdWU2NTIzMDE4MDY=", "number": 5443, "title": "SQLAlchemy generates invalid query", "user": {"login": "StefanosChaliasos", "id": 15054312, "node_id": "MDQ6VXNlcjE1MDU0MzEy", "avatar_url": "https://avatars0.githubusercontent.com/u/15054312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StefanosChaliasos", "html_url": "https://github.com/StefanosChaliasos", "followers_url": "https://api.github.com/users/StefanosChaliasos/followers", "following_url": "https://api.github.com/users/StefanosChaliasos/following{/other_user}", "gists_url": "https://api.github.com/users/StefanosChaliasos/gists{/gist_id}", "starred_url": "https://api.github.com/users/StefanosChaliasos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StefanosChaliasos/subscriptions", "organizations_url": "https://api.github.com/users/StefanosChaliasos/orgs", "repos_url": "https://api.github.com/users/StefanosChaliasos/repos", "events_url": "https://api.github.com/users/StefanosChaliasos/events{/privacy}", "received_events_url": "https://api.github.com/users/StefanosChaliasos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141274001, "node_id": "MDU6TGFiZWwxMTQxMjc0MDAx", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sql", "name": "sql", "color": "5060F0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-07T12:58:50Z", "updated_at": "2020-07-07T18:58:38Z", "closed_at": "2020-07-07T18:58:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen using a labeled field in a query with `join`s and `distinct`, SQLAlchemy generates an `SQL` query with a syntax error.\r\n\r\n**To Reproduce**\r\n\r\n* Query\r\n\r\n```py\r\nfrom sqlalchemy import (create_engine, desc)\r\nfrom sqlalchemy.orm import sessionmaker\r\nfrom models import *\r\n\r\n\r\nengine = create_engine('sqlite:////home/example.db')\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\n\r\n\r\ncol = Table1.price.label('col')\r\nq1 = session.query(Table3.id).select_from(Table3)\r\nq2 = q1.join(Table2, Table3.table2).join(Table1, Table2.table1).distinct().order_by(desc(col))\r\nfor r in q2:\r\n    print(r)\r\n```\r\n\r\n* Models\r\n\r\n```py\r\nfrom sqlalchemy import Column, ForeignKey, Integer, Numeric, String\r\nfrom sqlalchemy.orm import relationship\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\n\r\nBase = declarative_base()\r\nmetadata = Base.metadata\r\n\r\n\r\nclass Table1(Base):\r\n    __tablename__ = 'table1'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    price = Column(Numeric(10, 2))\r\n\r\n\r\nclass Table2(Base):\r\n    __tablename__ = 'table2'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    table1_id = Column(ForeignKey('table1.id', ondelete='CASCADE'))\r\n\r\n    table1 = relationship('Table1')\r\n\r\n\r\nclass Table3(Base):\r\n    __tablename__ = 'table3'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    table2_id = Column(ForeignKey('table2.id', ondelete='CASCADE'))\r\n\r\n    table2 = relationship('Table2')\r\n```\r\n\r\n* SQL script to generate the tables\r\n\r\n```sql\r\nDROP TABLE IF EXISTS table1;\r\nDROP TABLE IF EXISTS table2;\r\nDROP TABLE IF EXISTS table3;\r\nCREATE TABLE table1 (\r\nid integer,\r\nprice numeric(10, 2),\r\nPRIMARY KEY (id)\r\n);\r\nINSERT INTO table1(id,price) VALUES (1,-7);\r\nINSERT INTO table1(id,price) VALUES (2,6);\r\nINSERT INTO table1(id,price) VALUES (3,3);\r\nINSERT INTO table1(id,price) VALUES (4,7);\r\n\r\nCREATE TABLE table2 (\r\nid integer,\r\ntable1_id integer,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (table1_id) REFERENCES table1(id) ON DELETE CASCADE\r\n);\r\nINSERT INTO table2(id,table1_id) VALUES (1,1);\r\nINSERT INTO table2(id,table1_id) VALUES (2,3);\r\nINSERT INTO table2(id,table1_id) VALUES (3,2);\r\nINSERT INTO table2(id,table1_id) VALUES (4,2);\r\n\r\nCREATE TABLE table3 (\r\nid integer,\r\ntable2_id integer,\r\nPRIMARY KEY (id),\r\nFOREIGN KEY (table2_id) REFERENCES table2(id) ON DELETE CASCADE\r\n);\r\nINSERT INTO table3(id,table2_id) VALUES (1,1);\r\nINSERT INTO table3(id,table2_id) VALUES (2,3);\r\nINSERT INTO table3(id,table2_id) VALUES (3,4);\r\nINSERT INTO table3(id,table2_id) VALUES (4,2);\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1514, in _execute_context\r\n    self.dialect.do_execute(\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/engine/default.py\", line 592, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlite3.OperationalError: near \"DESC\": syntax error\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"driver_sqlite.py\", line 14, in <module>\r\n    for r in q2:\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/orm/query.py\", line 2807, in __iter__\r\n    return self._iter().__iter__()\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/orm/query.py\", line 2813, in _iter\r\n    result = self.session.execute(\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/orm/session.py\", line 1490, in execute\r\n    result = conn._execute_20(statement, params or {}, execution_options)\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1328, in _execute_20\r\n    return meth(self, multiparams, params, execution_options)\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/sql/elements.py\", line 308, in _execute_on_connection\r\n    return connection._execute_clauseelement(\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1218, in _execute_clauseelement\r\n    ret = self._execute_context(\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1558, in _execute_context\r\n    self._handle_dbapi_exception(\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1739, in _handle_dbapi_exception\r\n    util.raise_(\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/util/compat.py\", line 169, in raise_\r\n    raise exception\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/engine/base.py\", line 1514, in _execute_context\r\n    self.dialect.do_execute(\r\n  File \"/home/.env/lib/python3.8/site-packages/SQLAlchemy-1.4.0b1.dev0-py3.8-linux-x86_64.egg/sqlalchemy/engine/default.py\", line 592, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near \"DESC\": syntax error\r\n[SQL: SELECT DISTINCT table3.id AS table3_id, table1.price AS col DESC\r\nFROM table3 JOIN table2 ON table2.id = table3.table2_id JOIN table1 ON table1.id = table2.table1_id ORDER BY table1.price DESC]\r\n(Background on this error at: http://sqlalche.me/e/e3q8)\r\n```\r\n\r\n\r\n**Versions.**\r\n - SQLAlchemy: 1.4.0b1.dev0\r\n - Database: sqlite3, mysql, postgresql\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5442", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5442/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5442/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5442/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5442", "id": 651089907, "node_id": "MDU6SXNzdWU2NTEwODk5MDc=", "number": 5442, "title": "synchronize session not working for lambda cache updates", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141273966, "node_id": "MDU6TGFiZWwxMTQxMjczOTY2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/orm", "name": "orm", "color": "20C0B0", "default": false, "description": null}, {"id": 2011745336, "node_id": "MDU6TGFiZWwyMDExNzQ1MzM2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/requires%20triage", "name": "requires triage", "color": "ffff00", "default": false, "description": "New issue that requires categorization"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2020-07-05T15:23:00Z", "updated_at": "2020-07-05T21:46:27Z", "closed_at": "2020-07-05T21:46:26Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "\r\n```\r\nfrom sqlalchemy import Column\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy import Integer\r\nfrom sqlalchemy import lambda_stmt\r\nfrom sqlalchemy import select\r\nfrom sqlalchemy import String\r\nfrom sqlalchemy import update\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.future import select\r\nfrom sqlalchemy.orm import Session\r\n\r\n\r\nBase = declarative_base()\r\n\r\n\r\nclass A(Base):\r\n    __tablename__ = \"a\"\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    data = Column(String)\r\n\r\n\r\ne = create_engine(\"postgresql://scott:tiger@pg12/test\", echo=True)\r\n\r\n\r\nBase.metadata.drop_all(e)\r\nBase.metadata.create_all(e)\r\n\r\n# this will be how to create the Session in that same upcoming commit\r\n# in order to use 2.0 future mode\r\n# s = Session(e, future=True)\r\n\r\ns = Session(e)\r\n\r\ns.add_all([A(data=\"data %d\" % i) for i in range(1500)])\r\n\r\ns.commit()\r\n\r\nall_the_as = s.execute(select(A)).scalars().all()\r\n\r\n\r\ndef run_updates_lambda_cache(crit, val):\r\n    statement = lambda_stmt(\r\n        lambda: update(A).where(A.data.like(crit)).values({\"data\": val})\r\n    )\r\n\r\n    s.execute(statement, execution_options={\"synchronize_session\": \"fetch\"})\r\n\r\n\r\ndef run_updates_plain_cache(crit, val):\r\n    statement = update(A).where(A.data.like(crit)).values({\"data\": val})\r\n\r\n    s.execute(statement, execution_options={\"synchronize_session\": \"fetch\"})\r\n\r\n\r\nrun_updates_plain_cache(\"data %%%2\", \"data 2 modified\")\r\nrun_updates_lambda_cache(\"data %%%2\", \"data 2 modified\")\r\n\r\n```\r\n\r\noutput:\r\n\r\n```\r\nUPDATE a SET data=%(data)s WHERE a.data LIKE %(data_1)s RETURNING a.id\r\n2020-07-05 11:21:42,852 INFO sqlalchemy.engine.Engine [generated in 0.00039s] {'data': 'data 2 modified', 'data_1': 'data %%%2'}\r\n2020-07-05 11:21:42,872 INFO sqlalchemy.engine.Engine UPDATE a SET data=%(data)s WHERE a.data LIKE %(crit_1)s\r\n2020-07-05 11:21:42,872 INFO sqlalchemy.engine.Engine [generated in 0.00021s] {'data': 'data 2 modified', 'crit_1': 'data %%%2'}\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5440", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5440/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5440/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5440/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5440", "id": 651061627, "node_id": "MDU6SXNzdWU2NTEwNjE2Mjc=", "number": 5440, "title": "NullPool connections not closed in interactive session on MSSQL", "user": {"login": "thorstenkampe", "id": 475462, "node_id": "MDQ6VXNlcjQ3NTQ2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/475462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thorstenkampe", "html_url": "https://github.com/thorstenkampe", "followers_url": "https://api.github.com/users/thorstenkampe/followers", "following_url": "https://api.github.com/users/thorstenkampe/following{/other_user}", "gists_url": "https://api.github.com/users/thorstenkampe/gists{/gist_id}", "starred_url": "https://api.github.com/users/thorstenkampe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thorstenkampe/subscriptions", "organizations_url": "https://api.github.com/users/thorstenkampe/orgs", "repos_url": "https://api.github.com/users/thorstenkampe/repos", "events_url": "https://api.github.com/users/thorstenkampe/events{/privacy}", "received_events_url": "https://api.github.com/users/thorstenkampe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141277259, "node_id": "MDU6TGFiZWwxMTQxMjc3MjU5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/SQL%20Server", "name": "SQL Server", "color": "C02080", "default": false, "description": "Microsoft SQL Server, e.g. mssql"}, {"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}, {"id": 1143451229, "node_id": "MDU6TGFiZWwxMTQzNDUxMjI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/external%20driver%20issues", "name": "external driver issues", "color": "2d6eb7", "default": false, "description": "the issue involves a misbehavior on the part of the DBAPI itself, probably not SQLAlchemy"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-05T12:32:23Z", "updated_at": "2020-07-05T15:10:04Z", "closed_at": "2020-07-05T14:29:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n`NullPool` connections are not closed in interactive session (IPython) on MSSQL\r\n\r\n**Expected behavior**\r\nAfter explicitly closing a `NullPool` connection I expect all sessions on the database server opened by SQlAlchemy gone. This is how it works with Oracle, PostgreSQL and MySQL but not with MSSQL.\r\n\r\n**To Reproduce**\r\n\r\n```py\r\n>>> from sqlalchemy import create_engine\r\n>>> from sqlalchemy.pool import NullPool\r\n\r\n>>> dsn = 'mssql://sa:password@HOST/master?driver=ODBC+Driver+17+for+SQL+Server'\r\n>>> eng = create_engine(dsn, poolclass=NullPool)\r\n>>> conn = eng.connect()\r\n>>> conn.close()\r\n```\r\n\r\n`sp_who2` (or similar tools) show that there is still an open session by Python (SQLAlchemy)\r\n\r\n**Versions.**\r\n - OS: Windows 10\r\n - Python: 3.8.3\r\n - SQLAlchemy: 1.3.18\r\n - Database:  SQL Server 2019 on Windows and Linux\r\n\r\n**Additional context**\r\nIt takes about 75 seconds until the session is finally gone. Exiting IPython makes the session disappear immediately.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5438", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5438/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5438/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5438/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5438", "id": 650524164, "node_id": "MDU6SXNzdWU2NTA1MjQxNjQ=", "number": 5438, "title": "How to create autoincrement primary_key on sqlite", "user": {"login": "q98765543221", "id": 17985599, "node_id": "MDQ6VXNlcjE3OTg1NTk5", "avatar_url": "https://avatars0.githubusercontent.com/u/17985599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/q98765543221", "html_url": "https://github.com/q98765543221", "followers_url": "https://api.github.com/users/q98765543221/followers", "following_url": "https://api.github.com/users/q98765543221/following{/other_user}", "gists_url": "https://api.github.com/users/q98765543221/gists{/gist_id}", "starred_url": "https://api.github.com/users/q98765543221/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/q98765543221/subscriptions", "organizations_url": "https://api.github.com/users/q98765543221/orgs", "repos_url": "https://api.github.com/users/q98765543221/repos", "events_url": "https://api.github.com/users/q98765543221/events{/privacy}", "received_events_url": "https://api.github.com/users/q98765543221/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1146930079, "node_id": "MDU6TGFiZWwxMTQ2OTMwMDc5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/awaiting%20info", "name": "awaiting info", "color": "1f8ec1", "default": false, "description": "waiting for the submitter to give more information"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}, {"id": 1141273987, "node_id": "MDU6TGFiZWwxMTQxMjczOTg3", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sqlite", "name": "sqlite", "color": "E0D0A0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-03T11:04:29Z", "updated_at": "2020-07-06T02:35:03Z", "closed_at": "2020-07-06T02:35:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "model\r\n```\r\nclass Article(Base, DateTimeModelMixin):\r\n  __tablename__ = 'articles'\r\n\r\n  id = Column(Integer, primary_key=True, index=True, autoincrement=True)\r\n  slug = Column(String)\r\n  title = Column(String)\r\n  description = Column(String)\r\n  body = Column(String)\r\n  tags = Column(String)\r\n  author_id = Column(Integer, ForeignKey('users.id'))\r\n\r\n  author = relationship('User', back_populates='articles')\r\n  comments = relationship('Comment', back_populates='article', order_by='desc(Comment.update_at)')\r\n```\r\n\r\nlog\r\n```\r\nCREATE TABLE articles (\r\n\tcreate_at DATETIME, \r\n\tupdate_at DATETIME, \r\n\tid INTEGER NOT NULL, \r\n\tslug VARCHAR, \r\n\ttitle VARCHAR, \r\n\tdescription VARCHAR, \r\n\tbody VARCHAR, \r\n\ttags VARCHAR, \r\n\tauthor_id INTEGER, \r\n\tPRIMARY KEY (id), \r\n\tFOREIGN KEY(author_id) REFERENCES users (id)\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5437", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5437/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5437/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5437/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5437", "id": 650445080, "node_id": "MDU6SXNzdWU2NTA0NDUwODA=", "number": 5437, "title": "Flask server crashes when making a database query with sqlalchemy", "user": {"login": "DimitarDevP", "id": 46571197, "node_id": "MDQ6VXNlcjQ2NTcxMTk3", "avatar_url": "https://avatars3.githubusercontent.com/u/46571197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DimitarDevP", "html_url": "https://github.com/DimitarDevP", "followers_url": "https://api.github.com/users/DimitarDevP/followers", "following_url": "https://api.github.com/users/DimitarDevP/following{/other_user}", "gists_url": "https://api.github.com/users/DimitarDevP/gists{/gist_id}", "starred_url": "https://api.github.com/users/DimitarDevP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DimitarDevP/subscriptions", "organizations_url": "https://api.github.com/users/DimitarDevP/orgs", "repos_url": "https://api.github.com/users/DimitarDevP/repos", "events_url": "https://api.github.com/users/DimitarDevP/events{/privacy}", "received_events_url": "https://api.github.com/users/DimitarDevP/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}, {"id": 2011745336, "node_id": "MDU6TGFiZWwyMDExNzQ1MzM2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/requires%20triage", "name": "requires triage", "color": "ffff00", "default": false, "description": "New issue that requires categorization"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-07-03T08:45:45Z", "updated_at": "2020-07-07T06:58:22Z", "closed_at": "2020-07-07T06:58:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have created this sqlalchemy abstraction layer for performing CRUD operations. I have been using it for well over 6 months now and it has served me just fine. \r\nThe other day though when I was developing out of nowhere my Flask server started crashing. So i played around with it for a while and found that the error is not with Flask but rather with the database or the database connection.\r\n\r\nI saw several different errors and behaviors. Some time it will just crash the server without an error message, other times it will fail to execute the query but keep the server running and i have seen it log the error and crash the server right after.\r\n\r\nI saw a few different errors. The one which appears most often is the  following:\r\n```\r\n(MySQLdb._exceptions.ProgrammingError) (2014, \"Commands out of sync; you can't run this command now\")\r\n[SQL: SELECT * FROM _users]\r\n(Background on this error at: http://sqlalche.me/e/f405)\r\n```\r\nBut i also saw this error:\r\n```\r\n(MySQLdb._exceptions.OperationalError) (2000, 'Unknown MySQL error')\r\n[SQL: SELECT * FROM _user_types]\r\n(Background on this error at: http://sqlalche.me/e/e3q8)\r\n```\r\nAnd this:\r\n```\r\n(MySQLdb._exceptions.OperationalError) (2006, 'Lost connection to MySQL server during query')\r\n[SQL: SELECT * FROM _states]\r\n(Background on this error at: http://sqlalche.me/e/e3q8)\r\n```\r\n\r\nand this a `\"No Database Selected\"` error which I cannot seem to reproduce right now. \r\n\r\nHere is where it crashed last, but it has crashed on multiple other routes too.\r\n```\r\ndef get_users(self, request):\r\n    users = fdb.read(\"\"\"SELECT * FROM _users\"\"\", (), True)\r\n    return jsonify({\r\n        \"allUsers\": users\r\n    })\r\n\r\ndef read(self, query_string, query_params = (), fetchall = True):\r\n    try:\r\n        data = self.connection.execute(query_string, query_params)\r\n        if fetchall: \r\n            data = data.fetchall()\r\n            data = [dict(row) for row in data]\r\n        else:\r\n            data = data.fetchone()\r\n            data = dict(data)\r\n        return data\r\n    except Exception as e:\r\n        print(e)\r\n        return e\r\n    finally:\r\n        pass # close\r\n```\r\n\r\nUnfortunately I cannot provide a sure way to reproduce these errors. It tends to happen more when there is a big amount of traffic hitting the REST API (multiple requests). I have only gotten this error when I am using Fetch/Axios/xhr. I tried to reproduce with cURL, postman and from the browser and none of those caused the error. \r\n\r\n - OS: Arch Linux\r\n - Python: 3.8.3\r\n - SQLAlchemy: 1.3.17\r\n - Database: MySQL (built in to XAMPP)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5436", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5436/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5436/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5436/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5436", "id": 650392199, "node_id": "MDU6SXNzdWU2NTAzOTIxOTk=", "number": 5436, "title": "Wheel support for linux aarch64", "user": {"login": "odidev", "id": 40816837, "node_id": "MDQ6VXNlcjQwODE2ODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/40816837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/odidev", "html_url": "https://github.com/odidev", "followers_url": "https://api.github.com/users/odidev/followers", "following_url": "https://api.github.com/users/odidev/following{/other_user}", "gists_url": "https://api.github.com/users/odidev/gists{/gist_id}", "starred_url": "https://api.github.com/users/odidev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/odidev/subscriptions", "organizations_url": "https://api.github.com/users/odidev/orgs", "repos_url": "https://api.github.com/users/odidev/repos", "events_url": "https://api.github.com/users/odidev/events{/privacy}", "received_events_url": "https://api.github.com/users/odidev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2179539129, "node_id": "MDU6TGFiZWwyMTc5NTM5MTI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/arm", "name": "arm", "color": "b0d9fc", "default": false, "description": "issue related to the arm architecture"}, {"id": 1332626373, "node_id": "MDU6TGFiZWwxMzMyNjI2Mzcz", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/setup", "name": "setup", "color": "81baef", "default": false, "description": "issues related to installation and setup"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 10, "created_at": "2020-07-03T07:08:28Z", "updated_at": "2020-08-28T20:25:35Z", "closed_at": "2020-08-28T20:25:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Summary**\r\nInstalling sqlalchemy on aarch64 via pip using command \"pip3 install sqlalchemy\" tries to build wheel from source code\r\n\r\n**Problem description**\r\nsqlalchemy don't have wheel for aarch64 on PyPI repository. So, while installing sqlalchemy via pip on aarch64, pip builds wheel for same resulting in it takes more time to install sqlalchemy. Making wheel available for aarch64 will benefit aarch64 users by minimizing sqlalchemy installation time.\r\n\r\n**Expected Output**\r\nPip should be able to download sqlalchemy wheel from PyPI repository rather than building it from source code.\r\n\r\n@sqlalchemy-team, please let me know if I can help you building wheel/uploading to PyPI repository. I am curious to make sqlalchemy wheel available for aarch64. It will be a great opportunity for me to work with you.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5434", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5434/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5434/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5434/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5434", "id": 649470838, "node_id": "MDU6SXNzdWU2NDk0NzA4Mzg=", "number": 5434, "title": "How to get value from sqlalchemy .execute() method? Python + Sqlalchemy+ MS SQL server", "user": {"login": "edo101", "id": 25592347, "node_id": "MDQ6VXNlcjI1NTkyMzQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/25592347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edo101", "html_url": "https://github.com/edo101", "followers_url": "https://api.github.com/users/edo101/followers", "following_url": "https://api.github.com/users/edo101/following{/other_user}", "gists_url": "https://api.github.com/users/edo101/gists{/gist_id}", "starred_url": "https://api.github.com/users/edo101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edo101/subscriptions", "organizations_url": "https://api.github.com/users/edo101/orgs", "repos_url": "https://api.github.com/users/edo101/repos", "events_url": "https://api.github.com/users/edo101/events{/privacy}", "received_events_url": "https://api.github.com/users/edo101/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-02T00:52:49Z", "updated_at": "2020-07-13T19:11:15Z", "closed_at": "2020-07-13T19:11:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi wrote a method to get the status of a csv file in a sql server table. The table has column named CSV_STATUS, and for the particular csv, I'd like my method to give me the value of the CSV status. I wrote the following function:\r\n\r\n```\r\ndef return_csv_status_db(db_instance, name_of_db_instance_tabledict, csvfile_path):\r\n    table_dict = db_instance[name_of_db_instance_tabledict]\r\n    csvfile_name = csvfile_path.name\r\n    sql = db.select([table_dict['table'].c.CSV_STATUS]).where(table_dict['table'].c.CSV_FILENAME == csvfile_name)\r\n    result = table_dict['engine'].execute(sql)\r\n    print(result)\r\n```\r\n\r\nWhenever I print result, it returns: `<sqlalchemy.engine.result.ResultProxy object at 0x0000005E642256C8>` How can I extract the value of the select statement?\r\n\r\n**Versions**\r\n - OS: Windows Server 2012\r\n - Python: 3.6\r\n - SQLAlchemy: Not sure. Latest one?\r\n - Database: SQL Server 2017\r\n - DBAPI: Not sure, default?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5433", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5433/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5433/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5433/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5433", "id": 649394043, "node_id": "MDU6SXNzdWU2NDkzOTQwNDM=", "number": 5433, "title": "sqlalchemy.exc.ResourceClosedError: This result object does not return rows. It has been closed automatically.", "user": {"login": "edo101", "id": 25592347, "node_id": "MDQ6VXNlcjI1NTkyMzQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/25592347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edo101", "html_url": "https://github.com/edo101", "followers_url": "https://api.github.com/users/edo101/followers", "following_url": "https://api.github.com/users/edo101/following{/other_user}", "gists_url": "https://api.github.com/users/edo101/gists{/gist_id}", "starred_url": "https://api.github.com/users/edo101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edo101/subscriptions", "organizations_url": "https://api.github.com/users/edo101/orgs", "repos_url": "https://api.github.com/users/edo101/repos", "events_url": "https://api.github.com/users/edo101/events{/privacy}", "received_events_url": "https://api.github.com/users/edo101/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-01T23:16:49Z", "updated_at": "2020-08-07T16:35:56Z", "closed_at": "2020-08-07T16:35:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, so I am trying to update a table in my db thorugh sql alchmey mixed with pandas. This actually might be the culprit of my issue. I am new to sql alchemy, pandas, and python so I used a template my mentor gave me to add to the code. \r\n\r\nAnyways, my script processes csv files. if the file has format error, it will update the status of the file in the table to \"error\" and move the file to an \"error\" directory. To this regard I wrote an update table method:\r\n\r\n```\r\ndef update_csv_status_db(db_instance, name_of_db_instance_tabledict, csvfile_path, dir_status):\r\n    table_dict = db_instance[name_of_db_instance_tabledict]\r\n    csvfile_name = csvfile_path.name\r\n    sql = update(table_dict['table']).where(table_dict['table'].c.CSV_FILENAME == csvfile_name).values(CSV_STATUS=dir_status)\r\n    df = pd.read_sql(sql, table_dict['connection'])\r\n    #df.to_sql('odfs_tester_history_files', con=table_dict['engine'], if_exists='append', index=False)\r\n\r\n```\r\nWhich is called in this function: \r\n\r\n```\r\ndef odf_history_from_csv_to_dbtable(db_instance):\r\n    odfsdict = db_instance['odfs_tester_history']\r\n    #table_row = {}\r\n    totalresult_list = []\r\n\r\n    dir_dict, dictofpdir_flist = make_dict_of_csvprocessing_dirs()\r\n    print(dir_dict)\r\n    csvbase_path_list = dictofpdir_flist[\"csvbase_path_list\"]\r\n    archivefiles_path_set = dictofpdir_flist[\"archivefiles_path_set\"]\r\n    errorfiles_path_set = dictofpdir_flist[\"errorfiles_path_set\"]\r\n    emptyfiles_path_set = dictofpdir_flist[\"emptyfiles_path_set\"]\r\n\r\n    for csv in csvbase_path_list:  # is there a faster way to compare the list of files in archive and history?\r\n        if csv.name in archivefiles_path_set:\r\n            print(csv.name + \" is in archive folder already\")\r\n        elif csv.name in errorfiles_path_set:\r\n            print(csv.name + \" is in error folder already\")\r\n        elif csv.name in emptyfiles_path_set:\r\n            print(csv.name + \" is in empty folder already\")\r\n        else:\r\n            csvhistoryfilelist_to_dbtable(csv, db_instance)\r\n            df_tuple = process_csv_formatting(csv)\r\n            df_cnum, odfscsv_df = df_tuple\r\n            if df_cnum == 1:\r\n                trg_path = Path(dir_dict['empty_dir'])\r\n                csv.rename(trg_path.joinpath(csv.name))\r\n                update_csv_status_db(db_instance, 'odfs_tester_history_files', csv, 'empty')\r\n            elif df_cnum == 0 and len(odfscsv_df.index != 0):\r\n                result = odfscsv_df.to_sql('odfs_tester_history', con=odfsdict['engine'], if_exists='append', index=False)\r\n                totalresult_list.append(result)\r\n                trg_path = Path(dir_dict['archive_dir'])\r\n                csv.rename(trg_path.joinpath(csv.name))\r\n                update_csv_status_db(db_instance, 'odfs_tester_history_files', csv, 'archive')\r\n\r\n    return totalresult_list\r\n```\r\n\r\nSo a very weird error happens after this runs. Testing it with one file that contains bad formating, an \"error\" file. it actually processes the file, moves it to the error directory and updates the table. However at the end, the program breaks and returns the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\result.py\", line 1161, in _fetchall_impl\r\n    return self.cursor.fetchall()\r\nAttributeError: 'NoneType' object has no attribute 'fetchall'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:/Users/sys_nsgprobeingestio/Documents/dozie/odfs/odfshistory3.py\", line 269, in <module>\r\n    odf_history_from_csv_to_dbtable(db_instance)\r\n  File \"C:/Users/sys_nsgprobeingestio/Documents/dozie/odfs/odfshistory3.py\", line 244, in odf_history_from_csv_to_dbtable\r\n    update_csv_status_db(db_instance, 'odfs_tester_history_files', csv, 'error')\r\n  File \"C:/Users/sys_nsgprobeingestio/Documents/dozie/odfs/odfshistory3.py\", line 178, in update_csv_status_db\r\n    df = pd.read_sql(sql, table_dict['connection'])\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\io\\sql.py\", line 438, in read_sql\r\n    chunksize=chunksize,\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\io\\sql.py\", line 1231, in read_query\r\n    data = result.fetchall()\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\result.py\", line 1216, in fetchall\r\n    e, None, None, self.cursor, self.context\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1478, in _handle_dbapi_exception\r\n    util.reraise(*exc_info)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 153, in reraise\r\n    raise value\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\result.py\", line 1211, in fetchall\r\n    l = self.process_rows(self._fetchall_impl())\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\result.py\", line 1163, in _fetchall_impl\r\n    return self._non_result([])\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\result.py\", line 1168, in _non_result\r\n    \"This result object does not return rows. \"\r\nsqlalchemy.exc.ResourceClosedError: This result object does not return rows. It has been closed automatically.\r\n```\r\n\r\nI have noticed when I have multiple files, it will process some of them, the rest it will leave once it hits this error. And it is spontaneous on when it hits the error. How can I fix this? \r\n\r\nIs there a way to update thet able without needing to use pandas _readsql? COuld this  be the issue? The fact that I am using pandas _tosql. And if so, what alternative can i use to commit the update?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5432", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5432/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5432/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5432/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5432", "id": 648316985, "node_id": "MDU6SXNzdWU2NDgzMTY5ODU=", "number": 5432, "title": "Add Values to documentation", "user": {"login": "CaselIT", "id": 16175304, "node_id": "MDQ6VXNlcjE2MTc1MzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/16175304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaselIT", "html_url": "https://github.com/CaselIT", "followers_url": "https://api.github.com/users/CaselIT/followers", "following_url": "https://api.github.com/users/CaselIT/following{/other_user}", "gists_url": "https://api.github.com/users/CaselIT/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaselIT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaselIT/subscriptions", "organizations_url": "https://api.github.com/users/CaselIT/orgs", "repos_url": "https://api.github.com/users/CaselIT/repos", "events_url": "https://api.github.com/users/CaselIT/events{/privacy}", "received_events_url": "https://api.github.com/users/CaselIT/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2020-06-30T16:27:56Z", "updated_at": "2020-07-03T19:13:33Z", "closed_at": "2020-07-01T23:56:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Values, added in #4868, is not present in the documentation.\r\n\r\nWe should probably add both the `values` factory function and `Values` the class", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5430", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5430/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5430/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5430/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5430", "id": 648180413, "node_id": "MDU6SXNzdWU2NDgxODA0MTM=", "number": 5430, "title": "Ordering of classes will cause assoxiation_proxy assess in mapper_configured event listener to fail for versions >=1.3", "user": {"login": "Erich-e", "id": 16398098, "node_id": "MDQ6VXNlcjE2Mzk4MDk4", "avatar_url": "https://avatars0.githubusercontent.com/u/16398098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Erich-e", "html_url": "https://github.com/Erich-e", "followers_url": "https://api.github.com/users/Erich-e/followers", "following_url": "https://api.github.com/users/Erich-e/following{/other_user}", "gists_url": "https://api.github.com/users/Erich-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/Erich-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Erich-e/subscriptions", "organizations_url": "https://api.github.com/users/Erich-e/orgs", "repos_url": "https://api.github.com/users/Erich-e/repos", "events_url": "https://api.github.com/users/Erich-e/events{/privacy}", "received_events_url": "https://api.github.com/users/Erich-e/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1959689852, "node_id": "MDU6TGFiZWwxOTU5Njg5ODUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/great%20mcve", "name": "great mcve", "color": "dcf972", "default": false, "description": "An issue with a great mcve"}, {"id": 1141273966, "node_id": "MDU6TGFiZWwxMTQxMjczOTY2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/orm", "name": "orm", "color": "20C0B0", "default": false, "description": null}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}, {"id": 1141286348, "node_id": "MDU6TGFiZWwxMTQxMjg2MzQ4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sqlalchemy.ext", "name": "sqlalchemy.ext", "color": "90E060", "default": false, "description": "extension modules, most of which are ORM related"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-30T13:35:07Z", "updated_at": "2020-06-30T14:59:36Z", "closed_at": "2020-06-30T14:59:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a class with an association_proxy is configured before the class it is related to, accessing the association_proxy attribute will fail and throw `AttributeError: 'NoneType' object has no attribute 'uses_objects'`.\r\nI found that this would work for `1.2.19` but not for `1.3.0` onwards.\r\n\r\nWith 1.3 this will throw:\r\n```py\r\nfrom sqlalchemy import Column, Integer, ForeignKey, event\r\nfrom sqlalchemy.ext.associationproxy import association_proxy\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import relationship, mapper\r\n\r\n\r\nBase = declarative_base()\r\n\r\n\r\n@event.listens_for(mapper, \"mapper_configured\")\r\ndef f(mapper, cls):\r\n\r\n    # Try to access the association proxy\r\n    print(cls, Foo.bar_data)\r\n\r\n\r\nclass Foo(Base):\r\n    __tablename__ = \"foo\"\r\n    id = Column(Integer, primary_key=True)\r\n    bar = relationship(\"Bar\")\r\n    bar_id = Column(Integer, ForeignKey(\"bar.id\"))\r\n    bar_data = association_proxy(\"bar\", \"data\")\r\n\r\n\r\nclass Bar(Base):\r\n    __tablename__ = \"bar\"\r\n    id = Column(Integer, primary_key=True)\r\n    data = Column(Integer)\r\n\r\n\r\nbar = Bar(data=9)\r\n```\r\n\r\nWith this stack trace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/ext/associationproxy.py\", line 241, in _as_instance\r\n    inst = class_.__dict__[self.key + \"_inst\"]\r\nKeyError: '_AssociationProxy_bar_4351340048_inst'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"example.py\", line 106, in <module>\r\n    bar = Bar(data=9)\r\n  File \"<string>\", line 2, in __init__\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/orm/instrumentation.py\", line 373, in _new_state_if_none\r\n    state = self._state_constructor(instance, self)\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py\", line 855, in __get__\r\n    obj.__dict__[self.__name__] = result = self.fget(obj)\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/orm/instrumentation.py\", line 199, in _state_constructor\r\n    self.dispatch.first_init(self, self.class_)\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/event/attr.py\", line 297, in __call__\r\n    fn(*args, **kw)\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/orm/mapper.py\", line 3341, in _event_on_first_init\r\n    configure_mappers()\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/orm/mapper.py\", line 3232, in configure_mappers\r\n    mapper, mapper.class_\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/event/attr.py\", line 259, in __call__\r\n    fn(*args, **kw)\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/orm/events.py\", line 639, in wrap\r\n    fn(*arg, **kw)\r\n  File \"example.py\", line 89, in f\r\n    print(cls, Foo.bar_data)\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/ext/associationproxy.py\", line 187, in __get__\r\n    inst = self._as_instance(class_, obj)\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/ext/associationproxy.py\", line 245, in _as_instance\r\n    inst = AssociationProxyInstance.for_proxy(self, owner, obj)\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/ext/associationproxy.py\", line 371, in for_proxy\r\n    target_assoc, parent, owning_class, target_class, value_attr\r\n  File \"/Users/erich/code/nuffsaid/venv/lib/python3.7/site-packages/sqlalchemy/ext/associationproxy.py\", line 388, in _construct_for_assoc\r\n    is_object = attr.impl.uses_objects\r\nAttributeError: 'NoneType' object has no attribute 'uses_objects'\r\n```\r\n\r\nHowever, this ordering will succeed:\r\n\r\n```py\r\n\r\nfrom sqlalchemy import Column, Integer, ForeignKey, event\r\nfrom sqlalchemy.ext.associationproxy import association_proxy\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import relationship, mapper\r\n\r\n\r\nBase = declarative_base()\r\n\r\n\r\n@event.listens_for(mapper, \"mapper_configured\")\r\ndef f(mapper, cls):\r\n\r\n    # Try to access the association proxy\r\n    print(cls, Foo.bar_data)\r\n\r\n\r\nclass Bar(Base):\r\n    __tablename__ = \"bar\"\r\n    id = Column(Integer, primary_key=True)\r\n    data = Column(Integer)\r\n\r\n\r\nclass Foo(Base):\r\n    __tablename__ = \"foo\"\r\n    id = Column(Integer, primary_key=True)\r\n    bar = relationship(\"Bar\")\r\n    bar_id = Column(Integer, ForeignKey(\"bar.id\"))\r\n    bar_data = association_proxy(\"bar\", \"data\")\r\n\r\n\r\nbar = Bar(data=9)\r\n```\r\n\r\nand outputs \r\n```\r\n<class '__main__.Bar'> <sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance object at 0x105d4e320>\r\n<class '__main__.Foo'> <sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance object at 0x105d4e320>\r\n```\r\n\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5428", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5428/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5428/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5428/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5428", "id": 647572229, "node_id": "MDU6SXNzdWU2NDc1NzIyMjk=", "number": 5428, "title": "Confusing points in the documentation v1.4", "user": {"login": "aplatkouski", "id": 5857672, "node_id": "MDQ6VXNlcjU4NTc2NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5857672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aplatkouski", "html_url": "https://github.com/aplatkouski", "followers_url": "https://api.github.com/users/aplatkouski/followers", "following_url": "https://api.github.com/users/aplatkouski/following{/other_user}", "gists_url": "https://api.github.com/users/aplatkouski/gists{/gist_id}", "starred_url": "https://api.github.com/users/aplatkouski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aplatkouski/subscriptions", "organizations_url": "https://api.github.com/users/aplatkouski/orgs", "repos_url": "https://api.github.com/users/aplatkouski/repos", "events_url": "https://api.github.com/users/aplatkouski/events{/privacy}", "received_events_url": "https://api.github.com/users/aplatkouski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2020-06-29T18:17:01Z", "updated_at": "2020-09-09T15:02:15Z", "closed_at": "2020-09-09T15:02:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This issue contains the remaining unanswered questions from PR #5371\r\n\r\n### Question 1.\r\nhttps://github.com/sqlalchemy/sqlalchemy/blob/5f5b56d646f154ee572c9de80449423304103bad/lib/sqlalchemy/sql/selectable.py#L4042-L4043\r\nIs the description of this parameter correct now?\r\n\r\n**Pay attention for**: The ``c`` collection of the resulting ``Select`` object will use ...\r\n\r\n**By fact** that in v.1.4 a select() object no longer has a ``.c`` attribute (see #4617 )\r\n\r\n### Question 2.\r\n\r\nAre the following three excerpts from the documentation and docstrings correct?\r\n\r\n**Prerequisite:** Changed in version 1.4: the SessionTransaction **is not created immediately** within a Session when constructed or when the previous transaction is removed\r\n\r\n#### Quote 2.1\r\n\r\nhttps://github.com/sqlalchemy/sqlalchemy/blob/5624430eb1d07c68d0931bc89f7146bc003fde19/lib/sqlalchemy/orm/session.py#L1250-L1252\r\n\r\n#### Quote 2.2\r\n\r\nhttps://github.com/sqlalchemy/sqlalchemy/blob/5624430eb1d07c68d0931bc89f7146bc003fde19/lib/sqlalchemy/orm/session.py#L3377-L3380\r\n\r\n#### Quote 2.3\r\n\r\n[orm/session_basics.rst](https://github.com/sqlalchemy/sqlalchemy/blob/master/doc/build/orm/session_basics.rst#committing)\r\n> Note that the default behavior of the :class:`~sqlalchemy.orm.session.Session` is **that a \"transaction\" is always present**; this behavior can be disabled by setting autocommit=True\r\n\r\n\r\n### Question 3.\r\n\r\nIs there a contradiction in the following excerpt?\r\n\r\n**Prerequisite:** This documentation for v.1.4 and \r\nhttps://github.com/sqlalchemy/sqlalchemy/blob/5624430eb1d07c68d0931bc89f7146bc003fde19/lib/sqlalchemy/orm/relationships.py#L227-L229\r\n\r\n#### 3.1 but see quote\r\n[orm/extensions/declarative/relationships.rst](https://github.com/sqlalchemy/sqlalchemy/blob/master/doc/build/orm/extensions/declarative/relationships.rst#evaluation-of-relationship-arguments)\r\n>  **evaluated as Python expressions using Python's built-in eval() function.**\r\n\r\n\r\n### Question 4.\r\n\r\nIs there a contradiction in the following excerpt?\r\n\r\n**Prerequisite:** [changelog/migration_10.html#bug-3288](https://docs.sqlalchemy.org/en/14/changelog/migration_10.html#bug-3288)\r\n> Python-side defaults invoked **for each row** individually when using a multivalued insert\r\n\r\n#### 4.1 but see quote\r\nhttps://github.com/sqlalchemy/sqlalchemy/blob/5624430eb1d07c68d0931bc89f7146bc003fde19/lib/sqlalchemy/sql/dml.py#L909-L911\r\n\r\n\r\n### Question 5.\r\n\r\nIs the correct description in the excerpt below?\r\n\r\nsee parameters of method:\r\nhttps://github.com/sqlalchemy/sqlalchemy/blob/5624430eb1d07c68d0931bc89f7146bc003fde19/lib/sqlalchemy/engine/reflection.py#L243\r\n\r\n#### 5.1 and docstrings:\r\nhttps://github.com/sqlalchemy/sqlalchemy/blob/5624430eb1d07c68d0931bc89f7146bc003fde19/lib/sqlalchemy/engine/reflection.py#L258-L261\r\n\r\n\r\n### Question 6.\r\n\r\n\r\n**Prerequisite:** [changelog/migration_07.rst](https://github.com/sqlalchemy/sqlalchemy/blob/master/doc/build/changelog/migration_07.rst)\r\n> ``DDLElement.execute_at`` method are deprecated and now implemented in terms of the\r\nnew system\r\n\r\n\r\n#### 6.1 Quote\r\nhttps://github.com/sqlalchemy/sqlalchemy/blob/5624430eb1d07c68d0931bc89f7146bc003fde19/lib/sqlalchemy/sql/ddl.py#L98-L99\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5427", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5427/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5427/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5427/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5427", "id": 647557905, "node_id": "MDU6SXNzdWU2NDc1NTc5MDU=", "number": 5427, "title": "SQLAlchemy ignores server_onupdate clause on update", "user": {"login": "Sebi2020", "id": 1862664, "node_id": "MDQ6VXNlcjE4NjI2NjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1862664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sebi2020", "html_url": "https://github.com/Sebi2020", "followers_url": "https://api.github.com/users/Sebi2020/followers", "following_url": "https://api.github.com/users/Sebi2020/following{/other_user}", "gists_url": "https://api.github.com/users/Sebi2020/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sebi2020/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sebi2020/subscriptions", "organizations_url": "https://api.github.com/users/Sebi2020/orgs", "repos_url": "https://api.github.com/users/Sebi2020/repos", "events_url": "https://api.github.com/users/Sebi2020/events{/privacy}", "received_events_url": "https://api.github.com/users/Sebi2020/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1143569068, "node_id": "MDU6TGFiZWwxMTQzNTY5MDY4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/datatypes", "name": "datatypes", "color": "59d67b", "default": false, "description": "things to do with database types, like VARCHAR and others"}, {"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}, {"id": 1141269144, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}, {"id": 1141273954, "node_id": "MDU6TGFiZWwxMTQxMjczOTU0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/mysql", "name": "mysql", "color": "30A040", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-29T17:50:43Z", "updated_at": "2020-06-29T19:46:13Z", "closed_at": "2020-06-29T18:58:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nDifferent than described in the official documentation SQLAlchemy ORM does not take care of the **server_onupdate** statement and produces an error if you try to commit a Model-Object to the database\r\n\r\n**Expected behavior**\r\nI expected SQLAlchemy to append  something like `DEFAULT ... ON UPDATE` to the updatedAt column DDL.\r\n\r\n**To Reproduce**\r\n1. Create a model with a updatedAt DateTime Column and the server_onupdate keyword set to  `func.now()` and a second Column with an arbitary type.\r\n2. Try to insert one row ( this will fail if you haven't specified a value for the updatedAt column or haven't set the server_default keyword).\r\n\r\nIf you have set a value on insertion or a server_default:\r\n3. Try to update the second column and commit your changes to the db (without updating the updatedAt column). The `server_onupdate` clause has no effect. The old value is still present.\r\n\r\n**Versions.**\r\n - OS: Linux\r\n - Python: 3.6, 3.8\r\n - SQLAlchemy: 1.3.16\r\n - Database: MySQL\r\n - DBAPI: Mysqldb\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5426", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5426/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5426/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5426/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5426", "id": 646991912, "node_id": "MDU6SXNzdWU2NDY5OTE5MTI=", "number": 5426, "title": "util.symbol() interferes with @util.deprecated decorator", "user": {"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1313059238, "node_id": "MDU6TGFiZWwxMzEzMDU5MjM4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/use%20case", "name": "use case", "color": "b54650", "default": false, "description": "not really a feature or a bug; can be support for new DB features or user use cases not anticipated"}, {"id": 1141282641, "node_id": "MDU6TGFiZWwxMTQxMjgyNjQx", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/utils", "name": "utils", "color": "2030C0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-06-28T19:40:47Z", "updated_at": "2020-06-29T19:50:50Z", "closed_at": "2020-06-29T19:50:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Describe the bug**\r\nAdding an `@util.deprecated` decorator as shown at\r\n\r\nhttps://gerrit.sqlalchemy.org/c/sqlalchemy/sqlalchemy/+/2060/3/lib/sqlalchemy/sql/schema.py#872\r\n\r\ncauses pytest to crash with \r\n\r\n``` text\r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\venv\\lib\\site-packages\\_pytest\\main.py\", line 189, in wrap_session\r\nINTERNALERROR>     config.hook.pytest_sessionstart(session=session)\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\venv\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 87, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\testing\\plugin\\pytestplugin.py\", line 106, in pytest_sessionstart\r\nINTERNALERROR>     plugin_base.post_begin()\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\testing\\plugin\\plugin_base.py\", line 259, in post_begin\r\nINTERNALERROR>     fn(options, file_config)\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\testing\\plugin\\plugin_base.py\", line 341, in _init_symbols\r\nINTERNALERROR>     from sqlalchemy.testing import config\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\__init__.py\", line 9, in <module>\r\nINTERNALERROR>     from .engine import create_engine  # noqa\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\engine\\__init__.py\", line 18, in <module>\r\nINTERNALERROR>     from . import events  # noqa\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\engine\\events.py\", line 9, in <module>\r\nINTERNALERROR>     from .base import Engine\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\engine\\base.py\", line 12, in <module>\r\nINTERNALERROR>     from .interfaces import Connectable\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\engine\\interfaces.py\", line 11, in <module>\r\nINTERNALERROR>     from ..sql.compiler import Compiled  # noqa\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\sql\\__init__.py\", line 8, in <module>\r\nINTERNALERROR>     from .compiler import COLLECT_CARTESIAN_PRODUCTS  # noqa\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\sql\\compiler.py\", line 36, in <module>\r\nINTERNALERROR>     from . import functions\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\sql\\functions.py\", line 15, in <module>\r\nINTERNALERROR>     from . import schema\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\sql\\schema.py\", line 145, in <module>\r\nINTERNALERROR>     class Table(DialectKWArgs, SchemaItem, TableClause):\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\sql\\schema.py\", line 878, in Table\r\nINTERNALERROR>     name=None,\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\util\\deprecations.py\", line 126, in decorate\r\nINTERNALERROR>     fn, warning, message % dict(func=fn.__name__), version, header\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\util\\deprecations.py\", line 314, in _decorate_with_warning\r\nINTERNALERROR>     decorated = warned(func)\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\util\\langhelpers.py\", line 161, in decorate\r\nINTERNALERROR>     code, {targ_name: target, fn_name: fn}, fn.__name__\r\nINTERNALERROR>   File \"C:\\Users\\Gord\\git\\sqla-gerrit\\test\\..\\lib\\sqlalchemy\\util\\langhelpers.py\", line 171, in _exec_code_in_env\r\nINTERNALERROR>     exec(code, env)\r\nINTERNALERROR>   File \"<string>\", line 1, in <module>\r\nINTERNALERROR> NameError: name 'symbol' is not defined\r\n```\r\n\r\n**Expected behavior**\r\nNo crash.\r\n\r\n**Error**\r\nUsing pdb I found that the issue is related to `schema=RETAIN_SCHEMA` in the arguments list for the `tometadata` function, where RETAIN_SCHEMA is\r\n\r\n``` python\r\nRETAIN_SCHEMA = util.symbol(\"retain_schema\")\r\n```\r\n\r\nWhen pdb kicks in we can see that\r\n\r\n``` text\r\n> <string>(1)<module>()\r\n(Pdb) u\r\n> c:\\users\\gord\\git\\sqla-gerrit\\lib\\sqlalchemy\\util\\langhelpers.py(171)_exec_code_in_env()\r\n-> exec(code, env)\r\n(Pdb) code\r\n\"def tometadata(self, metadata, schema=symbol('retain_schema'), referred_schema_fn=None, name=None):\\n    return target(fn, self, metadata, schema=schema, referred_schema_fn=referred_schema_fn, name=name)\\n\"\r\n(Pdb)\r\n```\r\n\r\n**Versions.**\r\n - OS: Windows 8.1\r\n - Python: 3.7.5 x64\r\n - SQLAlchemy: https://gerrit.sqlalchemy.org/c/sqlalchemy/sqlalchemy/+/2060\r\n - Database: mssql\r\n - DBAPI: pyodbc\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5425", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5425/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5425/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5425/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5425", "id": 646618693, "node_id": "MDU6SXNzdWU2NDY2MTg2OTM=", "number": 5425, "title": "Dynamically joined Many-To-One pop by index skips index 0", "user": {"login": "jslay88", "id": 6158929, "node_id": "MDQ6VXNlcjYxNTg5Mjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6158929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jslay88", "html_url": "https://github.com/jslay88", "followers_url": "https://api.github.com/users/jslay88/followers", "following_url": "https://api.github.com/users/jslay88/following{/other_user}", "gists_url": "https://api.github.com/users/jslay88/gists{/gist_id}", "starred_url": "https://api.github.com/users/jslay88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jslay88/subscriptions", "organizations_url": "https://api.github.com/users/jslay88/orgs", "repos_url": "https://api.github.com/users/jslay88/repos", "events_url": "https://api.github.com/users/jslay88/events{/privacy}", "received_events_url": "https://api.github.com/users/jslay88/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-27T06:15:29Z", "updated_at": "2020-06-27T15:38:36Z", "closed_at": "2020-06-27T15:38:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI am having an issue where I am getting different values for the same index on a model attribute that is dynamically joined via backref.\r\n\r\nFor instance, say `child` was backref'd with a dynamic join to `parent` under the attribute `children`.\r\n\r\nand lets say parent has 4 children, `a`, `b`, `c`, and `d`  in this order.\r\n\r\nif I iterate over the children by index directly against the attribute, i get the following output\r\n```py\r\nfor i in range(4):\r\n  print(parent.children[i])\r\n\r\nb, b, c, d\r\n```\r\n\r\nbut if I type cast it to a list before popping via index, I get the correct return\r\n```py\r\nfor i in range(4):\r\n  print(list(parent.children)[i])\r\n\r\na, b, c, d\r\n```\r\n\r\nThe issue is resolved if I have it automatically join via `joined` instead of `dynamic`\r\n\r\n**Expected behavior**\r\nGrabbing an item from a many-to-one dynamically joined backref via index\r\n\r\n**To Reproduce**\r\n```py\r\nclass Owner(db.Model):\r\n    id = db.Column(db.VARCHAR(16), primary_key=True)\r\n    name = db.Column(db.VARCHAR(32), nullable=False)\r\n\r\nclass Product(db.Model):\r\n    sku_prefix = db.Column(db.VARCHAR(24), db.ForeignKey('default_product.sku_prefix'), primary_key=True)\r\n    owner_id = db.Column(db.VARCHAR(16), db.ForeignKey('owner.id'), primary_key=True)\r\n    enabled = db.Column(db.Boolean, nullable=False, default=True)\r\n\r\n    default_product = db.relationship(DefaultProduct, backref=db.backref('products', lazy='dynamic'), lazy='joined')\r\n    owner = db.relationship(Owner, backref=db.backref('products', lazy='dynamic'), lazy='joined')\r\n\r\nowner = Owner.query.first()\r\nprint('Indexed Product 0', owner.products[0])\r\nprint('List Indexed Product 0', list(owner.products)[0])\r\nprint('Indexed Product 1', owner.products[1])\r\nprint('List Indexed Product 1', list(owner.products)[1])\r\nprint('Indexed Product 2', owner.products[2])\r\nprint('List Indexed Product 2', list(owner.products)[2])\r\n\r\nIndexed Product 0 <Product product_1>  # <---- This is wrong\r\nList Indexed Product 0 <Product product_0>\r\nIndexed Product 1 <Product product_1>\r\nList Indexed Product 1 <Product product_1> \r\nIndexed Product 2 <Product product_2>\r\nList Indexed Product 2 <Product product_2> \r\n```\r\n\r\n**Versions.**\r\n - OS: Windows/Linux\r\n - Python: 3.7 and 3.8\r\n - SQLAlchemy: 1.3.18\r\n - Flask-SQLAlchemy: 2.4.3\r\n - Database: Postgres 12\r\n - psycopg2: 2.8.5 \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5424", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5424/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5424/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5424/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5424", "id": 645878934, "node_id": "MDU6SXNzdWU2NDU4Nzg5MzQ=", "number": 5424, "title": "Check if a value in table exists sqlalchemy + mssql in Python", "user": {"login": "edo101", "id": 25592347, "node_id": "MDQ6VXNlcjI1NTkyMzQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/25592347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edo101", "html_url": "https://github.com/edo101", "followers_url": "https://api.github.com/users/edo101/followers", "following_url": "https://api.github.com/users/edo101/following{/other_user}", "gists_url": "https://api.github.com/users/edo101/gists{/gist_id}", "starred_url": "https://api.github.com/users/edo101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edo101/subscriptions", "organizations_url": "https://api.github.com/users/edo101/orgs", "repos_url": "https://api.github.com/users/edo101/repos", "events_url": "https://api.github.com/users/edo101/events{/privacy}", "received_events_url": "https://api.github.com/users/edo101/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2011745336, "node_id": "MDU6TGFiZWwyMDExNzQ1MzM2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/requires%20triage", "name": "requires triage", "color": "ffff00", "default": false, "description": "New issue that requires categorization"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-25T22:05:14Z", "updated_at": "2020-06-25T22:32:14Z", "closed_at": "2020-06-25T22:14:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to look for a csv file in a table in mssql server. If the csv file name exists in the table I want it to return true or false so that I can use that information for if then statement. I tried doing the following but I get errors. I am using Pyhton 3.7 with sql achemy and pandas.\r\n\r\n```\r\nimport sqlalchemy as db\r\nfrom sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey, update, exists\r\n\r\ndef dbhandler():\r\n    params = urllib.parse.quote_plus(db_string)\r\n    engine = db.create_engine(\"mssql+pyodbc:///?odbc_connect={}\".format(params))\r\n\r\n    connection = engine.connect()\r\n    metadata = db.MetaData()\r\n    odfs_tester_history_files = db.Table('odfs_tester_history_files', metadata, autoload=True, autoload_with=engine)\r\n    odfs_tester_history = db.Table('odfs_tester_history', metadata, autoload=True, autoload_with=engine)\r\n    tables_dict = {'odfs_tester_history_files': {'engine': engine, 'connection': connection, 'table': odfs_tester_history_files}, 'odfs_tester_history': {'engine': engine, 'connection': connection, 'table': odfs_tester_history}}\r\n    #return {'engine': engine, 'connection': connection, 'table': odfs_tester_history_files}\r\n    return tables_dict\r\n\r\ndb_instance = dbhandler()\r\nodfs_tabletest_dict = db_instance['odfs_tester_history_files']\r\n\r\nsql = exists(db.select([odfs_tabletest_dict['table']]).where(odfs_tabletest_dict['table'].c.CSV_FILENAME == '06_16_2020_FMGN519.csv'))\r\ndf = pd.read_sql(sql, odfs_tabletest_dict['connection'])\r\n```\r\n\r\nThis gives me the error: \r\n**Error: raise exc.ObjectNotExecutableError(self) sqlalchemy.exc.ObjectNotExecutableError: Not an executable object: <sqlalchemy.sql.selectable.Exists object at 0x000000096F8782C8>**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5423", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5423/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5423/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5423/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5423", "id": 645798486, "node_id": "MDU6SXNzdWU2NDU3OTg0ODY=", "number": 5423, "title": "Why do you need [ ] bracket for table in SQLAlchemy Select statement?", "user": {"login": "edo101", "id": 25592347, "node_id": "MDQ6VXNlcjI1NTkyMzQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/25592347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edo101", "html_url": "https://github.com/edo101", "followers_url": "https://api.github.com/users/edo101/followers", "following_url": "https://api.github.com/users/edo101/following{/other_user}", "gists_url": "https://api.github.com/users/edo101/gists{/gist_id}", "starred_url": "https://api.github.com/users/edo101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edo101/subscriptions", "organizations_url": "https://api.github.com/users/edo101/orgs", "repos_url": "https://api.github.com/users/edo101/repos", "events_url": "https://api.github.com/users/edo101/events{/privacy}", "received_events_url": "https://api.github.com/users/edo101/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-06-25T19:26:32Z", "updated_at": "2020-06-29T19:05:59Z", "closed_at": "2020-06-29T19:05:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to query an existing table in mssql. First task is displaying what is in the table, the other tasK i also want to do is do an exists() statment to check if the data in the table does exist.\r\n\r\nSo I wrote the following code snippet:\r\n\r\n```\r\ndef dbhandler():\r\n    params = urllib.parse.quote_plus(db_string)\r\n    engine = db.create_engine(\"mssql+pyodbc:///?odbc_connect={}\".format(params))\r\n    connection = engine.connect()\r\n    metadata = db.MetaData()\r\n    odfs_tester_history_files = db.Table('odfs_tester_history_files', metadata, autoload=True, autoload_with=engine)\r\n    odfs_tester_history = db.Table('odfs_tester_history', metadata, autoload=True, autoload_with=engine)\r\n    tables_dict = {'odfs_tester_history_files': {'engine': engine, 'connection': connection, 'table': odfs_tester_history_files}, \r\n    'odfs_tester_history': {'engine': engine, 'connection': connection, 'table': odfs_tester_history}}\r\n    #return {'engine': engine, 'connection': connection, 'table': odfs_tester_history_files}\r\n    return tables_dict\r\n\r\ndb_instance = dbhandler()\r\nodfs_tabletest_dict = db_instance['odfs_tester_history']\r\nfoo_col = db.sql.column('CSV_FILENAME')\r\nsql = db.select(odfs_tabletest_dict['table']).where(odfs_tabletest_dict['odfs_tester_history'].c.foo_col == '06_16_2020_FMGN519.csv')\r\ndf = pd.read_sql(sql, odfs_tabletest_dict['connection'])\r\nprint(df)\r\n\r\n```\r\n**However, when I ran this code, for, my select statement, I got this errror:\r\nsqlalchemy.exc.ArgumentError: columns argument to select() must be a Python list or other iterable**\r\n\r\nI searched far and wide. Stack overflow couldn't help. IN fact the examples in these links I used to no success:\r\n\r\nhttps://stackoverflow.com/questions/636548/select-in-sqlalchemy\r\n\r\n**It wasn't till my mentor suggest I put square brackets around my table object. No where in documentation does it say you need square brackets. so I did it:**\r\n\r\n`sql = db.select([odfs_tabletest_dict['table']]).where(odfs_tabletest_dict['table'].c.CSV_FILENAME == '06_16_2020_FMGN519.csv')\r\ndf = pd.read_sql(sql, odfs_tabletest_dict['connection'])`\r\n\r\n**And it worked. My Question now is why does it work for when I use square bracket and as opposed to when I don't? What does using a [ ]  around my table object do? This is not how you cast thigns into lists in python IIRC? \r\nAnd can we improve the documentation of SQLalchemy to include this [ ] stuff?**\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5422", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5422/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5422/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5422/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5422", "id": 645724517, "node_id": "MDU6SXNzdWU2NDU3MjQ1MTc=", "number": 5422, "title": "objects reverting to previous states after referencing", "user": {"login": "kg-2", "id": 15877005, "node_id": "MDQ6VXNlcjE1ODc3MDA1", "avatar_url": "https://avatars1.githubusercontent.com/u/15877005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kg-2", "html_url": "https://github.com/kg-2", "followers_url": "https://api.github.com/users/kg-2/followers", "following_url": "https://api.github.com/users/kg-2/following{/other_user}", "gists_url": "https://api.github.com/users/kg-2/gists{/gist_id}", "starred_url": "https://api.github.com/users/kg-2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kg-2/subscriptions", "organizations_url": "https://api.github.com/users/kg-2/orgs", "repos_url": "https://api.github.com/users/kg-2/repos", "events_url": "https://api.github.com/users/kg-2/events{/privacy}", "received_events_url": "https://api.github.com/users/kg-2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-25T17:12:47Z", "updated_at": "2020-06-26T17:18:23Z", "closed_at": "2020-06-25T17:31:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n<!-- A clear and concise description of what the bug is. -->\r\nObjects are reverting to their previous states after being referenced. For example, if I set an attribute of a model\r\n\r\n`self.status = 5`\r\nand then reference that status twice \r\n\r\n`assert self.status == 5 # True`\r\n`assert self.status == 5 # False`\r\nThe second reference reverts back to the status it previously was. I first ran into this issue when flushing an item to the database. The first time I referenced the item after flushing it seemed to be normal, and then the second time the object had reverted back to transient status. I posted a question on stack overflow [here](https://stackoverflow.com/questions/62546439/sqlalchemy-object-reverts-back-to-transient-status?noredirect=1). \r\n\r\n**Environment:**\r\nUbuntu 18.04\r\nPostgreSQL)12.3 (Ubuntu 12.3-1.pgdg18.04+1)\r\nGunicorn: 20.0.4\r\npython 3.8.3\r\nflask 1.1.2\r\nflask sqlalchemy 2.4.3\r\nsqlalchemy 1.3.17\r\n\r\nCreating the database:\r\n`db = _SQLAlchemyMod(query_class=QueryMod, model_class=_ModelMod, session_options={\"autoflush\": False})`\r\n\r\n```\r\nclass _SQLAlchemyMod(SQLAlchemy):\r\n    def init_app(self, app):\r\n        super().init_app(app)\r\n        engine = self.get_engine()\r\n\r\n        @event.listens_for(engine, \"connect\")\r\n        def connect(dbapi_connection, connection_record):\r\n            connection_record.info['pid'] = os.getpid()\r\n\r\n        @event.listens_for(engine, \"checkout\")\r\n        def checkout(dbapi_connection, connection_record, connection_proxy):\r\n            pid = os.getpid()\r\n            if connection_record.info['pid'] != pid:\r\n                connection_record.connection = connection_proxy.connection = None\r\n                raise exc.DisconnectionError(\r\n                    \"Connection record belongs to pid %s, \"\r\n                    \"attempting to check out in pid %s\" %\r\n                    (connection_record.info['pid'], pid)\r\n                )\r\n```\r\n\r\n```\r\nclass _ModelMod(_Model):\r\n    \"\"\"\r\n    extends the functionality of the db.Model class\r\n    \"\"\"\r\n\r\n    @classmethod\r\n    def lazy_iter(cls, per_page_count=100, **kwargs):\r\n        \"\"\"\r\n        kwargs is a simple way to add additional query parameters\r\n        ie its possible to call: transaction.lazy_iter(user_id=5)\r\n        The notable limitation is that it can't handle anything other\r\n        than the equality == operator\r\n        \"\"\"\r\n        statement = cls.query\r\n        if kwargs:\r\n            statement = statement.filter_by(**kwargs)\r\n\r\n        pagination = statement.paginate(1, per_page_count)\r\n        while True:\r\n            yield from pagination.items\r\n            if not pagination.has_next:\r\n                break\r\n            pagination = pagination.next()\r\n```\r\n\r\n**Config**\r\n```\r\nSQLALCHEMY_TRACK_MODIFICATIONS = False\r\n```\r\n\r\n**What I've Tried**\r\nAdding db.session.flush() calls\r\nRemoving db.session.flush() calls\r\nDisabling gunicorn web reload\r\nChanging the number of gunicorn workers and threads to 1\r\nCalling sqlalchemy.inspect  (although I'm not good enough to know where to go from here)\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5421", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5421/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5421/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5421/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5421", "id": 645625095, "node_id": "MDU6SXNzdWU2NDU2MjUwOTU=", "number": 5421, "title": "use oracle GENERATED to detect PK indexes", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141274156, "node_id": "MDU6TGFiZWwxMTQxMjc0MTU2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/oracle", "name": "oracle", "color": "A020C0", "default": false, "description": null}, {"id": 1142415575, "node_id": "MDU6TGFiZWwxMTQyNDE1NTc1", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/reflection", "name": "reflection", "color": "60e0cb", "default": false, "description": "reflection of tables, columns, constraints, defaults, sequences, views, everything else"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2020-06-25T14:47:45Z", "updated_at": "2020-06-25T18:25:47Z", "closed_at": "2020-06-25T18:25:46Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "the oracle dialect considers any index that has all the primary key columns to be the generated primary key index.   this causes real indexes to be skipped. There's a GENERATED column that we should also include here: https://docs.oracle.com/cd/B19306_01/server.102/b14237/statviews_1069.htm#i1578369   .   we should look at both the existing \"primary key\" columns as well as that \"GENERATED\" is present so that user-created indexes against the primary key columns are returned.\r\n\r\n```\r\nfrom sqlalchemy import Column\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy import Date\r\nfrom sqlalchemy import DateTime\r\nfrom sqlalchemy import Index\r\nfrom sqlalchemy import inspect\r\nfrom sqlalchemy import Numeric\r\nfrom sqlalchemy import String\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\n\r\nBASE = declarative_base()\r\ntarget_metadata = BASE.metadata\r\n\r\n\r\nclass EditEOB(BASE):\r\n    \"\"\"This is the Edit EOB cross reference table.\"\"\"\r\n\r\n    __tablename__ = \"edit_eob\"\r\n    __table_args__ = (\r\n        Index(\r\n            \"eob_edit_idx\",\r\n            \"eob_rid\",\r\n            \"edit_rid\",\r\n            \"relationship_type\",\r\n            \"effective_date\",\r\n            unique=True,\r\n        ),\r\n    )\r\n    edit_rid = Column(Numeric(15, 0), primary_key=True)\r\n    eob_rid = Column(Numeric(15, 0), primary_key=True)\r\n    effective_date = Column(Date, primary_key=True)\r\n    relationship_type = Column(String(3), primary_key=True)\r\n\r\ne = create_engine(\"oracle://scott:tiger@oracle1120\", echo=\"debug\")\r\n\r\nBASE.metadata.create_all(e)\r\n\r\ninsp = inspect(e)\r\nprint(insp.get_indexes(\"edit_eob\"))\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5415", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5415/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5415/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5415/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5415", "id": 643588330, "node_id": "MDU6SXNzdWU2NDM1ODgzMzA=", "number": 5415, "title": "SAWarning: index key 'sqlnotapplicable' was not located in columns for table", "user": {"login": "pon-sander", "id": 52027205, "node_id": "MDQ6VXNlcjUyMDI3MjA1", "avatar_url": "https://avatars3.githubusercontent.com/u/52027205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pon-sander", "html_url": "https://github.com/pon-sander", "followers_url": "https://api.github.com/users/pon-sander/followers", "following_url": "https://api.github.com/users/pon-sander/following{/other_user}", "gists_url": "https://api.github.com/users/pon-sander/gists{/gist_id}", "starred_url": "https://api.github.com/users/pon-sander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pon-sander/subscriptions", "organizations_url": "https://api.github.com/users/pon-sander/orgs", "repos_url": "https://api.github.com/users/pon-sander/repos", "events_url": "https://api.github.com/users/pon-sander/events{/privacy}", "received_events_url": "https://api.github.com/users/pon-sander/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1143451229, "node_id": "MDU6TGFiZWwxMTQzNDUxMjI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/external%20driver%20issues", "name": "external driver issues", "color": "2d6eb7", "default": false, "description": "the issue involves a misbehavior on the part of the DBAPI itself, probably not SQLAlchemy"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}, {"id": 1142415575, "node_id": "MDU6TGFiZWwxMTQyNDE1NTc1", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/reflection", "name": "reflection", "color": "60e0cb", "default": false, "description": "reflection of tables, columns, constraints, defaults, sequences, views, everything else"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-23T07:06:03Z", "updated_at": "2020-06-24T11:39:53Z", "closed_at": "2020-06-24T11:39:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI keep getting the warning below. and can't find a sollution to this warning.\r\n/opt/conda/lib/python3.5/site-packages/sqlalchemy/engine/reflection.py:740: SAWarning: index key 'sqlnotapplicable' was not located in columns for table '##########'\r\n  flavor, c, table_name\r\n\r\n**Expected behavior**\r\nCant find any doccumentation on this warning\r\n\r\n**To Reproduce**\r\n\r\n\r\n```py\r\ndf.to_sql(name='table', schema='schema', con=engine,\r\n              if_exists=replace, dtype=dashdb_typemap, index=False)\r\n```\r\n\r\n**Error**\r\n\r\n```\r\nI keep getting the warning below. and can't find a sollution to this warning.\r\n/opt/conda/lib/python3.5/site-packages/sqlalchemy/engine/reflection.py:740: SAWarning: index key 'sqlnotapplicable' was not located in columns for table '##########'\r\n  flavor, c, table_name\r\n```\r\n\r\n**Versions.**\r\n - OS: Linux \r\n - Python: 3.5\r\n - SQLAlchemy: 1.0.13\r\n - Database: DB2 11.5\r\n - DBAPI: Jaydbapi - ibm_db_sa\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5414", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5414/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5414/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5414/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5414", "id": 643431153, "node_id": "MDU6SXNzdWU2NDM0MzExNTM=", "number": 5414, "title": "Can test_computed_col_default_not_set stop relying on autoincrement being set?", "user": {"login": "rafiss", "id": 1320573, "node_id": "MDQ6VXNlcjEzMjA1NzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1320573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafiss", "html_url": "https://github.com/rafiss", "followers_url": "https://api.github.com/users/rafiss/followers", "following_url": "https://api.github.com/users/rafiss/following{/other_user}", "gists_url": "https://api.github.com/users/rafiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafiss/subscriptions", "organizations_url": "https://api.github.com/users/rafiss/orgs", "repos_url": "https://api.github.com/users/rafiss/repos", "events_url": "https://api.github.com/users/rafiss/events{/privacy}", "received_events_url": "https://api.github.com/users/rafiss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}, {"id": 1142415575, "node_id": "MDU6TGFiZWwxMTQyNDE1NTc1", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/reflection", "name": "reflection", "color": "60e0cb", "default": false, "description": "reflection of tables, columns, constraints, defaults, sequences, views, everything else"}, {"id": 1141273864, "node_id": "MDU6TGFiZWwxMTQxMjczODY0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/tests", "name": "tests", "color": "20A050", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 9, "created_at": "2020-06-22T23:57:09Z", "updated_at": "2020-07-09T15:51:47Z", "closed_at": "2020-07-09T15:51:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe your question**\r\n\r\nThe test `test_computed_col_default_not_set` in `ComputedReflectionTest` performs the following check:\r\n\r\n```\r\n        cols = insp.get_columns(\"computed_column_table\")\r\n        for col in cols:\r\n            if col[\"name\"] == \"with_default\":\r\n                is_true(\"42\" in col[\"default\"])\r\n            elif not col[\"autoincrement\"]:\r\n                is_(col[\"default\"], None)\r\n```\r\n\r\nThis only works if the dialect being tested properly supports autoincrement.\r\n\r\nThe documentation of `ComponentReflectionTest::test_autoincrement_col` says the following:\r\n\r\n```\r\n        A backend is better off not returning \"autoincrement\" at all,\r\n        instead of potentially returning \"False\" for an auto-incrementing\r\n        primary key column.\r\n```\r\n\r\nI am wondering if would be ok to change the `elif not col[\"autoincrement\"]` check to something like `elif col[\"name\"] != \"id\"` instead.\r\n\r\n**Additional context**\r\n\r\nI am asking this question because I'm working on the [sqlalchemy-cockroachdb](https://github.com/cockroachdb/sqlalchemy-cockroachdb) dialect. CockroachDB does not support `autoincrement` by default because when using the `SERIAL` type, the default value is created using `unique_rowid()`, which generates a random integer (instead of using a sequence with `nextval()`).\r\n\r\nI'm happy to make the code change in the test if this idea seems acceptable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5413", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5413/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5413/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5413/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5413", "id": 643357144, "node_id": "MDU6SXNzdWU2NDMzNTcxNDQ=", "number": 5413, "title": "Rename Table.tometadata to to_metadata", "user": {"login": "CaselIT", "id": 16175304, "node_id": "MDQ6VXNlcjE2MTc1MzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/16175304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaselIT", "html_url": "https://github.com/CaselIT", "followers_url": "https://api.github.com/users/CaselIT/followers", "following_url": "https://api.github.com/users/CaselIT/following{/other_user}", "gists_url": "https://api.github.com/users/CaselIT/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaselIT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaselIT/subscriptions", "organizations_url": "https://api.github.com/users/CaselIT/orgs", "repos_url": "https://api.github.com/users/CaselIT/repos", "events_url": "https://api.github.com/users/CaselIT/events{/privacy}", "received_events_url": "https://api.github.com/users/CaselIT/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1146874745, "node_id": "MDU6TGFiZWwxMTQ2ODc0NzQ1", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/deprecations", "name": "deprecations", "color": "368da5", "default": false, "description": ""}, {"id": 1141273948, "node_id": "MDU6TGFiZWwxMTQxMjczOTQ4", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/schema", "name": "schema", "color": "602060", "default": false, "description": "things related to the DDL related objects like Table, Column, CreateIndex, etc."}], "state": "closed", "locked": false, "assignee": {"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2020-06-22T20:59:08Z", "updated_at": "2020-06-29T19:50:49Z", "closed_at": "2020-06-29T19:50:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As discussed in the dev meeting we should deprecate `Table.tometadata` and replace it with `Table.to_metadata`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5412", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5412/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5412/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5412/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5412", "id": 643007240, "node_id": "MDU6SXNzdWU2NDMwMDcyNDA=", "number": 5412, "title": "How to set Oracle database param while aleady set the sid in dsn?", "user": {"login": "liuzhenji", "id": 10750792, "node_id": "MDQ6VXNlcjEwNzUwNzky", "avatar_url": "https://avatars3.githubusercontent.com/u/10750792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liuzhenji", "html_url": "https://github.com/liuzhenji", "followers_url": "https://api.github.com/users/liuzhenji/followers", "following_url": "https://api.github.com/users/liuzhenji/following{/other_user}", "gists_url": "https://api.github.com/users/liuzhenji/gists{/gist_id}", "starred_url": "https://api.github.com/users/liuzhenji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liuzhenji/subscriptions", "organizations_url": "https://api.github.com/users/liuzhenji/orgs", "repos_url": "https://api.github.com/users/liuzhenji/repos", "events_url": "https://api.github.com/users/liuzhenji/events{/privacy}", "received_events_url": "https://api.github.com/users/liuzhenji/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1143451229, "node_id": "MDU6TGFiZWwxMTQzNDUxMjI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/external%20driver%20issues", "name": "external driver issues", "color": "2d6eb7", "default": false, "description": "the issue involves a misbehavior on the part of the DBAPI itself, probably not SQLAlchemy"}, {"id": 1141274156, "node_id": "MDU6TGFiZWwxMTQxMjc0MTU2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/oracle", "name": "oracle", "color": "A020C0", "default": false, "description": null}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-06-22T11:56:36Z", "updated_at": "2020-06-24T03:16:05Z", "closed_at": "2020-06-23T13:43:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe your question**\r\n\r\noracle://user:password@host:port/sid\r\nbut sid is not the database, so\r\n\r\nwhen i try to query something by the model class ,\r\nthere will always be exception : table or view does not exist\r\n\r\n**Example (if applicable)**\r\n\r\nengine = create_engine('oracle://oracle:123@192.168.0.6:1521/sidname', encoding='utf-8', echo=True)\r\n\r\n\r\nclass ListMain(Base):\r\n    __tablename__ = 'tablename'\r\n\r\n    testMainId = Column('main_id', String(50), primary_key=True)\r\n\r\nsession = DBSession()\r\ntestMain = session.query(ListMain).filter(ListMain.testMainId=='116040055948_2002_20161014_C723-G8').one()\r\n\r\n\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5411", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5411/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5411/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5411/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5411", "id": 642342840, "node_id": "MDU6SXNzdWU2NDIzNDI4NDA=", "number": 5411, "title": "\"CREATE TABLE\" statement doesn't provide COLLATE correctly with MySQL", "user": {"login": "youtux", "id": 778703, "node_id": "MDQ6VXNlcjc3ODcwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/778703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/youtux", "html_url": "https://github.com/youtux", "followers_url": "https://api.github.com/users/youtux/followers", "following_url": "https://api.github.com/users/youtux/following{/other_user}", "gists_url": "https://api.github.com/users/youtux/gists{/gist_id}", "starred_url": "https://api.github.com/users/youtux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/youtux/subscriptions", "organizations_url": "https://api.github.com/users/youtux/orgs", "repos_url": "https://api.github.com/users/youtux/repos", "events_url": "https://api.github.com/users/youtux/events{/privacy}", "received_events_url": "https://api.github.com/users/youtux/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269142, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1141273954, "node_id": "MDU6TGFiZWwxMTQxMjczOTU0", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/mysql", "name": "mysql", "color": "30A040", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gordthompson", "id": 15894006, "node_id": "MDQ6VXNlcjE1ODk0MDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/15894006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gordthompson", "html_url": "https://github.com/gordthompson", "followers_url": "https://api.github.com/users/gordthompson/followers", "following_url": "https://api.github.com/users/gordthompson/following{/other_user}", "gists_url": "https://api.github.com/users/gordthompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/gordthompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gordthompson/subscriptions", "organizations_url": "https://api.github.com/users/gordthompson/orgs", "repos_url": "https://api.github.com/users/gordthompson/repos", "events_url": "https://api.github.com/users/gordthompson/events{/privacy}", "received_events_url": "https://api.github.com/users/gordthompson/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/90", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/90/labels", "id": 4888003, "node_id": "MDk6TWlsZXN0b25lNDg4ODAwMw==", "number": 90, "title": "1.3.x", "description": null, "creator": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "open_issues": 29, "closed_issues": 222, "state": "open", "created_at": "2019-11-28T15:49:07Z", "updated_at": "2020-09-08T22:08:41Z", "due_on": null, "closed_at": null}, "comments": 16, "created_at": "2020-06-20T09:22:36Z", "updated_at": "2020-08-12T15:07:16Z", "closed_at": "2020-08-12T15:04:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe syntax to define a collation and charset when creating a table has to follow the following grammar rule ([relevant documentation](https://dev.mysql.com/doc/refman/8.0/en/charset-table.html)):\r\n```\r\nCREATE TABLE tbl_name (column_list)\r\n    [[DEFAULT] CHARACTER SET charset_name]\r\n    [COLLATE collation_name]]\r\n```\r\n\r\nSqlalchemy seems to not respect the order of CHARACTER SET and COLLATION, resulting in the wrong collation being used for the created table.\r\n\r\n**Expected behavior**\r\nI expect Sqlalchemy to emit a CREATE TABLE statement that correctly sets the COLLATION and CHARACTER SET.\r\n\r\n**To Reproduce**\r\nThe following snippet reproduces the issue, but not consistently. You may need to run this multiple times before it fails on the assertion.\r\nEDIT: See the comment below to get it consistently failing. TL;DR set PYTHONHASHSEED=1.\r\nMy guess here is that the compile for the CREATE TABLE statement does not define the order of the \"post table parenthesis\" options, (like CHARACTER SET, COLLATION, ENGINE, etc.), and the for some reason the order of these options is randomized at every run.\r\n\r\n```py\r\nfrom sqlalchemy import *\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\n\r\n\r\nclass _Base(object):\r\n    __table_args__ = {\r\n        \"mysql_engine\": \"InnoDB\",\r\n        \"mysql_collate\": \"utf8_unicode_ci\",\r\n        \"mysql_charset\": \"utf8\",\r\n    }\r\n\r\n\r\nBase = declarative_base(cls=_Base)\r\n\r\n\r\nclass User(Base):\r\n    __tablename__ = \"test_table\"\r\n    id = Column(Integer, primary_key=True)\r\n\r\n\r\nengine = create_engine(\"mysql://root@localhost:3306/test\", echo=True)\r\n\r\n\r\nengine.execute(\"DROP TABLE IF EXISTS test_table\")\r\n\r\nBase.metadata.create_all(engine)\r\n\r\nresult = engine.execute(\r\n    \"select TABLE_COLLATION from information_schema.TABLES where table_name = 'test_table'\",\r\n).fetchone()\r\n\r\nprint(f\"Table collation is {result.TABLE_COLLATION}\")\r\n\r\n# This is the line that breaks. Commenting it will show that changing the order of CHARSET/COLLATE fixes the issue\r\n# In my test, the resulting collation is \"utf8_general_ci\"\r\nassert result.TABLE_COLLATION == \"utf8_unicode_ci\"\r\n\r\n\r\n\r\n# Correct statement\r\nengine.execute(\"DROP TABLE IF EXISTS test_table\")\r\nengine.execute(\r\n    \"\"\"\r\nCREATE TABLE test_table (\r\n    id INTEGER NOT NULL AUTO_INCREMENT, \r\n    PRIMARY KEY (id)\r\n) CHARSET=utf8 COLLATE utf8_unicode_ci ENGINE=InnoDB \r\n\"\"\"\r\n)\r\n\r\nresult = engine.execute(\r\n    \"select TABLE_COLLATION, ENGINE from information_schema.TABLES where table_name = 'test_table'\",\r\n).fetchone()\r\n\r\n# As expected\r\nassert result.TABLE_COLLATION == \"utf8_unicode_ci\"\r\n\r\n\r\n```\r\n\r\n**Error**\r\n\r\n```\r\n/tmp/sqlalchemybug/env/bin/python /tmp/sqlalchemybug/test_bug.py\r\n2020-06-20 11:18:15,850 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'sql_mode'\r\n2020-06-20 11:18:15,850 INFO sqlalchemy.engine.base.Engine ()\r\n2020-06-20 11:18:15,851 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'lower_case_table_names'\r\n2020-06-20 11:18:15,851 INFO sqlalchemy.engine.base.Engine ()\r\n2020-06-20 11:18:15,852 INFO sqlalchemy.engine.base.Engine SELECT DATABASE()\r\n2020-06-20 11:18:15,852 INFO sqlalchemy.engine.base.Engine ()\r\n2020-06-20 11:18:15,852 INFO sqlalchemy.engine.base.Engine show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'\r\n2020-06-20 11:18:15,852 INFO sqlalchemy.engine.base.Engine ()\r\n2020-06-20 11:18:15,854 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1\r\n2020-06-20 11:18:15,854 INFO sqlalchemy.engine.base.Engine ()\r\n2020-06-20 11:18:15,854 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1\r\n2020-06-20 11:18:15,854 INFO sqlalchemy.engine.base.Engine ()\r\n2020-06-20 11:18:15,855 INFO sqlalchemy.engine.base.Engine SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1\r\n2020-06-20 11:18:15,855 INFO sqlalchemy.engine.base.Engine ()\r\n2020-06-20 11:18:15,856 INFO sqlalchemy.engine.base.Engine DROP TABLE IF EXISTS test_table\r\n2020-06-20 11:18:15,856 INFO sqlalchemy.engine.base.Engine ()\r\n2020-06-20 11:18:15,859 INFO sqlalchemy.engine.base.Engine COMMIT\r\n2020-06-20 11:18:15,860 INFO sqlalchemy.engine.base.Engine DESCRIBE `test_table`\r\n2020-06-20 11:18:15,860 INFO sqlalchemy.engine.base.Engine ()\r\n2020-06-20 11:18:15,863 INFO sqlalchemy.engine.base.Engine ROLLBACK\r\n2020-06-20 11:18:15,863 INFO sqlalchemy.engine.base.Engine \r\nCREATE TABLE test_table (\r\n\tid INTEGER NOT NULL AUTO_INCREMENT, \r\n\tPRIMARY KEY (id)\r\n)COLLATE utf8_unicode_ci ENGINE=InnoDB CHARSET=utf8\r\n\r\n\r\n2020-06-20 11:18:15,863 INFO sqlalchemy.engine.base.Engine ()\r\n2020-06-20 11:18:15,875 INFO sqlalchemy.engine.base.Engine COMMIT\r\n2020-06-20 11:18:15,876 INFO sqlalchemy.engine.base.Engine select TABLE_COLLATION from information_schema.TABLES where table_name = 'test_table'\r\n2020-06-20 11:18:15,876 INFO sqlalchemy.engine.base.Engine ()\r\nTable collation is utf8_general_ci\r\nTraceback (most recent call last):\r\n  File \"/tmp/sqlalchemybug/test_bug.py\", line 36, in <module>\r\n    assert result.TABLE_COLLATION == \"utf8_unicode_ci\"\r\nAssertionError\r\n\r\n```\r\n\r\n**Versions.**\r\n - OS: Mac OS 10.15 (but tested also on Ubuntu Bionic)\r\n - Python: 3.6.9\r\n - SQLAlchemy: 1.3.17\r\n - Database: MySQL 5.6.47\r\n - DBAPI: mysqlclient 1.4.6\r\n\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5409", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5409/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5409/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5409/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5409", "id": 642106309, "node_id": "MDU6SXNzdWU2NDIxMDYzMDk=", "number": 5409, "title": "FROM table being repeated / Creating the expression of a hybrid_method", "user": {"login": "zd4y", "id": 59004538, "node_id": "MDQ6VXNlcjU5MDA0NTM4", "avatar_url": "https://avatars3.githubusercontent.com/u/59004538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zd4y", "html_url": "https://github.com/zd4y", "followers_url": "https://api.github.com/users/zd4y/followers", "following_url": "https://api.github.com/users/zd4y/following{/other_user}", "gists_url": "https://api.github.com/users/zd4y/gists{/gist_id}", "starred_url": "https://api.github.com/users/zd4y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zd4y/subscriptions", "organizations_url": "https://api.github.com/users/zd4y/orgs", "repos_url": "https://api.github.com/users/zd4y/repos", "events_url": "https://api.github.com/users/zd4y/events{/privacy}", "received_events_url": "https://api.github.com/users/zd4y/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-19T16:51:10Z", "updated_at": "2020-06-19T22:56:26Z", "closed_at": "2020-06-19T22:56:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using a `hybrid_method` to check if a `User` has a specific permission. It returns `True` if the user has the permission itself or if one of the roles the user has, has the permission:\r\n```python\r\n@hybrid_method\r\ndef has_permission(self, permission_name: Perm) -> bool:\r\n    session = Session.object_session(self)\r\n    return session.query(Permission.value).\\\r\n        filter(\r\n            Permission.name == permission_name,\r\n            or_(Permission.users.any(id=self.id), Permission.roles.any(Role.users.any(id=self.id)))\r\n        ).limit(1).scalar() or False\r\n```\r\n\r\nIt works great, so I tried to create the expression of this method based on the raw sql it produces:\r\n```python\r\n@has_permission.expression\r\ndef has_permission(self, permission_name: Perm) -> ScalarSelect:\r\n    return select([Permission.value]).\\\r\n        where(Permission.name == permission_name).where(or_(\r\n            Permission.users.any(id=self.id), Permission.roles.any(Role.users.any(id=self.id))\r\n        )).limit(1).as_scalar()\r\n```\r\nBoth produce almost exact SQLs, however, the expression one returns all users when using it like this:\r\n```python\r\nsession.query(User).filter(User.has_permission(Perm.delete_all_posts).is_(True)).all()\r\n```\r\nIf at least one user has the permission, then it returns all the users in the database.\r\n\r\n\r\nSeeing the raw SQL that it produces:\r\n```sql\r\nSELECT users.id, users.state, users.created_at, users.deleted_at, users.username \r\nFROM users \r\nWHERE (SELECT permissions.value \r\nFROM permissions \r\nWHERE permissions.name = 'delete_all_posts' AND ((EXISTS (SELECT 1 \r\nFROM user_permissions, users \r\nWHERE permissions.id = user_permissions.permission_id AND users.id = user_permissions.user_id AND users.id = users.id)) OR (EXISTS (SELECT 1 \r\nFROM role_permissions, roles \r\nWHERE permissions.id = role_permissions.permission_id AND roles.id = role_permissions.role_id AND (EXISTS (SELECT 1 \r\nFROM user_roles, users \r\nWHERE roles.id = user_roles.role_id AND users.id = user_roles.user_id AND users.id = users.id))))) \r\nLIMIT 1) IS true\r\n```\r\nI realize that some tables' `FROM` is being repeated, for example:\r\n```sql\r\nFROM users # (line 2)\r\nFROM user_permissions, users # (line 6)\r\n```\r\nAnd that's where the problem is...\r\n\r\nI modified that sql a little bit and got a working one:\r\n```sql\r\nSELECT users.id, users.state, users.created_at, users.deleted_at, users.username \r\nFROM users \r\nWHERE (SELECT permissions.value \r\nFROM permissions \r\nWHERE permissions.name = 'delete_all_posts' AND ((EXISTS (SELECT 1 \r\nFROM user_permissions \r\nWHERE permissions.id = user_permissions.permission_id AND users.id = user_permissions.user_id)) OR (EXISTS (SELECT 1 \r\nFROM role_permissions, roles \r\nWHERE permissions.id = role_permissions.permission_id AND roles.id = role_permissions.role_id AND (EXISTS (SELECT 1 \r\nFROM user_roles \r\nWHERE roles.id = user_roles.role_id AND users.id = user_roles.user_id))))) \r\nLIMIT 1) IS true\r\n```\r\nRemoving the repeted `FROM table`s and also removing the two redundant `AND users.id = users.id`\r\n\r\nSo my question is how can I avoid that repeating? I want to create a expression similar to that modified sql.\r\n\r\nExtra: In the `hybrid_method has_permission()` there is a `.scalar() or False`. I am not sure how to get this fallback `False` result with sql expressions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5408", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5408/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5408/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5408/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5408", "id": 642063887, "node_id": "MDU6SXNzdWU2NDIwNjM4ODc=", "number": 5408, "title": "Gevent with SQL Alchemy and Pyodbc", "user": {"login": "jlongo-daitan", "id": 21343782, "node_id": "MDQ6VXNlcjIxMzQzNzgy", "avatar_url": "https://avatars0.githubusercontent.com/u/21343782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlongo-daitan", "html_url": "https://github.com/jlongo-daitan", "followers_url": "https://api.github.com/users/jlongo-daitan/followers", "following_url": "https://api.github.com/users/jlongo-daitan/following{/other_user}", "gists_url": "https://api.github.com/users/jlongo-daitan/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlongo-daitan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlongo-daitan/subscriptions", "organizations_url": "https://api.github.com/users/jlongo-daitan/orgs", "repos_url": "https://api.github.com/users/jlongo-daitan/repos", "events_url": "https://api.github.com/users/jlongo-daitan/events{/privacy}", "received_events_url": "https://api.github.com/users/jlongo-daitan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1143451229, "node_id": "MDU6TGFiZWwxMTQzNDUxMjI5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/external%20driver%20issues", "name": "external driver issues", "color": "2d6eb7", "default": false, "description": "the issue involves a misbehavior on the part of the DBAPI itself, probably not SQLAlchemy"}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-19T15:48:57Z", "updated_at": "2020-08-07T17:09:06Z", "closed_at": "2020-08-07T16:34:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've tried to search in Google, but I haven't had good results.\r\n\r\nIs it possible to use gevent with SQL Alchemy and pyodbc?\r\n\r\nI could make it work with my current Flask Restplus application, but when SQL Alchemy comes into play, the async behavior stop working.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5407", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5407/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5407/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5407/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5407", "id": 641909377, "node_id": "MDU6SXNzdWU2NDE5MDkzNzc=", "number": 5407, "title": "Delete error when using master and slave(read only)", "user": {"login": "lz1998", "id": 9082086, "node_id": "MDQ6VXNlcjkwODIwODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9082086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lz1998", "html_url": "https://github.com/lz1998", "followers_url": "https://api.github.com/users/lz1998/followers", "following_url": "https://api.github.com/users/lz1998/following{/other_user}", "gists_url": "https://api.github.com/users/lz1998/gists{/gist_id}", "starred_url": "https://api.github.com/users/lz1998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lz1998/subscriptions", "organizations_url": "https://api.github.com/users/lz1998/orgs", "repos_url": "https://api.github.com/users/lz1998/repos", "events_url": "https://api.github.com/users/lz1998/events{/privacy}", "received_events_url": "https://api.github.com/users/lz1998/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141273862, "node_id": "MDU6TGFiZWwxMTQxMjczODYy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/documentation", "name": "documentation", "color": "ffe7a8", "default": true, "description": ""}, {"id": 1141273966, "node_id": "MDU6TGFiZWwxMTQxMjczOTY2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/orm", "name": "orm", "color": "20C0B0", "default": false, "description": null}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-06-19T11:41:10Z", "updated_at": "2020-08-07T16:33:44Z", "closed_at": "2020-08-07T16:33:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n<!-- A clear and concise description of what the bug is. -->\r\nWhen I use master(write) and slave(read only), I cant delete data.\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen. -->\r\n\r\n**To Reproduce**\r\nPlease try to provide a [Minimal, Complete, and Verifiable](http://stackoverflow.com/help/mcve) example. \r\nSee also [Reporting Bugs](https://www.sqlalchemy.org/participate.html#bugs) on the website, and some [example issues](https://github.com/sqlalchemy/sqlalchemy/issues?q=label%3A%22great+mcve%22)\r\n\r\n```py\r\nsession = RoutingSession()\r\nclass RoutingSession(Session):\r\n    def get_bind(self, mapper=None, clause=None):\r\n        if self._flushing:\r\n            print(\"write\")\r\n            return write_engine\r\n        else:\r\n            print(\"read\")\r\n            return read_engine\r\n\r\nsession.query(...).delete()\r\nsession.commit()\r\n```\r\n\r\n**Error**\r\n\r\n```\r\n# Copy error here. Please include the full stack trace.\r\nsqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1045, 'proxy is read only')\r\n```\r\n\r\n**Versions.**\r\n - OS: macos\r\n - Python: 3.7\r\n - SQLAlchemy: 1.3.17\r\n - Database: mysql\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. -->\r\nWhy `session.query(...).delete()` is read?\r\n**Have a nice day!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5406", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5406/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5406/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5406/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5406", "id": 641885297, "node_id": "MDU6SXNzdWU2NDE4ODUyOTc=", "number": 5406, "title": "Strange behaviour when performing join with aliased table", "user": {"login": "StefanosChaliasos", "id": 15054312, "node_id": "MDQ6VXNlcjE1MDU0MzEy", "avatar_url": "https://avatars0.githubusercontent.com/u/15054312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StefanosChaliasos", "html_url": "https://github.com/StefanosChaliasos", "followers_url": "https://api.github.com/users/StefanosChaliasos/followers", "following_url": "https://api.github.com/users/StefanosChaliasos/following{/other_user}", "gists_url": "https://api.github.com/users/StefanosChaliasos/gists{/gist_id}", "starred_url": "https://api.github.com/users/StefanosChaliasos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StefanosChaliasos/subscriptions", "organizations_url": "https://api.github.com/users/StefanosChaliasos/orgs", "repos_url": "https://api.github.com/users/StefanosChaliasos/repos", "events_url": "https://api.github.com/users/StefanosChaliasos/events{/privacy}", "received_events_url": "https://api.github.com/users/StefanosChaliasos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-19T10:55:12Z", "updated_at": "2020-06-19T15:08:56Z", "closed_at": "2020-06-19T15:08:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nHi\r\n\r\nI have three models\r\n\r\n```python\r\nclass Author(Base):\r\n    __tablename__ = 'author'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n\r\n\r\nclass Book(Base):\r\n    __tablename__ = 'book'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    author_id = Column(ForeignKey('author.id', ondelete='CASCADE'))\r\n\r\n    author = relationship('Author')\r\n\r\n\r\nclass Review(Base):\r\n    __tablename__ = 'review'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    book_id = Column(ForeignKey('book.id', ondelete='CASCADE'))\r\n\r\n    book = relationship('book')\r\n\r\n```\r\n\r\nand I write the following query (simplified for opening the issue)\r\nwhere I perform three joins with aliased tables.\r\n\r\n```python\r\nbookAl = aliased(Book)\r\nsession.query(Author.id).select_from(Review).join(\r\n  bookAl.author).join(bookAl, Review.book)\r\n```\r\n\r\nwhen I execute this query, I get a strange error\r\n\r\n\r\n```\r\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) ambiguous column name: book_1.id\r\n[SQL: SELECT author.id AS author_id\r\nFROM review JOIN book AS book_1 ON book_1.id = review.book_id, book AS book_1 JOIN author ON author.id = book_1.author_id]\r\n(Background on this error at: http://sqlalche.me/e/e3q8)\r\n```\r\n\r\nthe generated query is\r\n\r\n```sql\r\nSELECT author.id AS author_id\r\nFROM review JOIN book AS book_1 ON book_1.id = review.book_id, book AS book_1 JOIN author ON author.id = book_1.author_id\r\n```\r\n\r\n**Have a nice day!**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5405", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5405/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5405/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5405/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5405", "id": 641505267, "node_id": "MDU6SXNzdWU2NDE1MDUyNjc=", "number": 5405, "title": "Engine.execute() does not commit automatically when using Oracle's merge update syntax", "user": {"login": "nathan-wood", "id": 12720055, "node_id": "MDQ6VXNlcjEyNzIwMDU1", "avatar_url": "https://avatars2.githubusercontent.com/u/12720055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathan-wood", "html_url": "https://github.com/nathan-wood", "followers_url": "https://api.github.com/users/nathan-wood/followers", "following_url": "https://api.github.com/users/nathan-wood/following{/other_user}", "gists_url": "https://api.github.com/users/nathan-wood/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathan-wood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathan-wood/subscriptions", "organizations_url": "https://api.github.com/users/nathan-wood/orgs", "repos_url": "https://api.github.com/users/nathan-wood/repos", "events_url": "https://api.github.com/users/nathan-wood/events{/privacy}", "received_events_url": "https://api.github.com/users/nathan-wood/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141275752, "node_id": "MDU6TGFiZWwxMTQxMjc1NzUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/engine", "name": "engine", "color": "B04040", "default": false, "description": "engines, connections, transactions, isolation levels, execution options"}, {"id": 1959689852, "node_id": "MDU6TGFiZWwxOTU5Njg5ODUy", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/great%20mcve", "name": "great mcve", "color": "dcf972", "default": false, "description": "An issue with a great mcve"}, {"id": 1141274156, "node_id": "MDU6TGFiZWwxMTQxMjc0MTU2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/oracle", "name": "oracle", "color": "A020C0", "default": false, "description": null}, {"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-18T19:43:21Z", "updated_at": "2020-06-19T19:25:54Z", "closed_at": "2020-06-19T19:25:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen using Oracle's Merge Update syntax, transactions are not automatically committed when using engine.execute().\r\nMerge Update syntax example:\r\n```\r\nMERGE into Z_TEST2\r\nusing (select Z_TEST1.descp, Z_TEST1.CHECKVAL from Z_TEST1 ) T1\r\nON (T1.DESCP = Z_TEST2.DESCP)\r\nWHEN MATCHED THEN\r\nUPDATE SET Z_TEST2.CHECKVAL = T1.CHECKVAL\r\n```\r\n\r\n**Expected behavior**\r\nTransaction should commit automatically when using engine.execute()\r\n\r\n**To Reproduce**\r\nThe following python script will demonstrate the issue failing with engine execute() and succeeding by manually committing the transation.\r\n\r\n\r\n```py\r\nimport pandas as pd\r\nfrom sqlalchemy import create_engine\r\nengine = create_engine('oracle+cx_oracle://xxxxxx' )\r\n\r\ndef check_commit():\r\n        df = pd.read_sql(\" select CHECKVAL from Z_TEST2 where CHECKVAL='CHECK' \",con=engine)\r\n        if len(df) >= 1:\r\n                print('Committed Successfully')\r\n        else:\r\n                print('Did not commit transaction when executing merge update.')\r\n\r\n## PROCESS ##\r\nengine.execute(\" create table Z_TEST1 ( DESCP VARCHAR(20), CHECKVAL VARCHAR(20)) \")\r\nengine.execute(\" create table Z_TEST2 ( DESCP VARCHAR(20), CHECKVAL VARCHAR(20)) \")\r\n                \r\n\r\nengine.execute( 'TRUNCATE TABLE Z_TEST1')\r\nengine.execute( 'TRUNCATE TABLE Z_TEST2')\r\nengine.execute(\"insert into Z_TEST1 values ('Test1','CHECK')\")\r\nengine.execute(\"insert into Z_TEST2 values ('Test1',NULL)\")\r\n\r\nprint('Running Merge Update using Execute')\r\n\r\nmerge_update_sql = '''MERGE into Z_TEST2\r\n                using (select Z_TEST1.descp, Z_TEST1.CHECKVAL from Z_TEST1 ) T1\r\n                ON (T1.DESCP = Z_TEST2.DESCP)\r\n                WHEN MATCHED THEN\r\n                UPDATE SET Z_TEST2.CHECKVAL = T1.CHECKVAL\r\n                '''\r\nengine.execute(merge_update_sql)\r\n                \r\ncheck_commit()\r\n\r\nprint('Running Merge Update with connection/ transaction')\r\nwith engine.connect() as connection:\r\n        trans = connection.begin()\r\n        connection.execute(merge_update_sql)\r\n        trans.commit()\r\n\r\ncheck_commit()\r\n\r\nengine.execute(\" DROP TABLE Z_TEST1 PURGE\")\r\nengine.execute(\" DROP TABLE Z_TEST2 PURGE\")\r\n```\r\n\r\nThis is the printed result:\r\n```\r\nRunning Merge Update using Execute\r\nDid not commit transaction when executing merge update.\r\nRunning Merge Update with connection/ transaction\r\nCommitted Successfully\r\n```\r\n\r\n\r\n**Versions.**\r\n - OS: Windows 10\r\n - Python: 3.7.7\r\n - SQLAlchemy: 1.3.17\r\n - Database: Oracle Database 11g Release 11.2.0.3.0 - 64bit Production\r\n - DBAPI: cxOracle\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5404", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5404/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5404/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5404/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5404", "id": 641277223, "node_id": "MDU6SXNzdWU2NDEyNzcyMjM=", "number": 5404, "title": "switch to setuptools setup.cfg format", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1332626373, "node_id": "MDU6TGFiZWwxMzMyNjI2Mzcz", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/setup", "name": "setup", "color": "81baef", "default": false, "description": "issues related to installation and setup"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51", "html_url": "https://github.com/sqlalchemy/sqlalchemy/milestone/51", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/milestones/51/labels", "id": 3850624, "node_id": "MDk6TWlsZXN0b25lMzg1MDYyNA==", "number": 51, "title": "1.4", "description": null, "creator": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "open_issues": 20, "closed_issues": 148, "state": "open", "created_at": "2018-11-27T04:11:27Z", "updated_at": "2020-09-09T15:02:15Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-06-18T14:56:28Z", "updated_at": "2020-06-19T20:56:06Z", "closed_at": "2020-06-19T20:56:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "given that we want to upgrade our setuptools concept and *maybe* have a conditional requirement as stated in #5400 we should see if we can upgrade to setup.cfg format as docuemnted at https://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files.\r\n\r\nThis new format will allow the code in setup.py that parses `__version__` and the README.rst file to be set up declaratively.  \r\n\r\nWe still would be looking to maintain our C-extension fallback building approach and w would still have the extra run_setup() indirection going on in setup.py.   \r\n\r\nI haven't tried it yet but I am *assuming* we can send programmatic options to setuptools.setup(), which currently include cmdclass, distclass.  find_packages it looks like they have a declarative version of that for setup.cfg.\r\n\r\nI also want to attempt to understand what's going on with our custom Distribution class and see if we still need to be doing this in that way.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5403", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5403/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5403/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5403/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5403", "id": 640804194, "node_id": "MDU6SXNzdWU2NDA4MDQxOTQ=", "number": 5403, "title": "Cannot get simple sqlalchemy query to work (maximum recursion reached)", "user": {"login": "flipperbw", "id": 796868, "node_id": "MDQ6VXNlcjc5Njg2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/796868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flipperbw", "html_url": "https://github.com/flipperbw", "followers_url": "https://api.github.com/users/flipperbw/followers", "following_url": "https://api.github.com/users/flipperbw/following{/other_user}", "gists_url": "https://api.github.com/users/flipperbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/flipperbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flipperbw/subscriptions", "organizations_url": "https://api.github.com/users/flipperbw/orgs", "repos_url": "https://api.github.com/users/flipperbw/repos", "events_url": "https://api.github.com/users/flipperbw/events{/privacy}", "received_events_url": "https://api.github.com/users/flipperbw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2011745336, "node_id": "MDU6TGFiZWwyMDExNzQ1MzM2", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/requires%20triage", "name": "requires triage", "color": "ffff00", "default": false, "description": "New issue that requires categorization"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-17T23:31:54Z", "updated_at": "2020-06-17T23:51:18Z", "closed_at": "2020-06-17T23:51:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe your question**\r\n\r\nI can't get SQLAlchemy to work at all with the latest release of Pypy. Here is the simple toy code I am trying to run:\r\n\r\n```\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy.orm import sessionmaker                                                                                                                                                                                                                                                                               \r\n\r\nengine = create_engine('postgresql://my_localhost_info')\r\nmaker = sessionmaker(bind=engine)\r\nsession = maker()\r\n\r\ndata = session.execute('select now()')\r\nfor row in data:\r\n    print(row)\r\n```\r\n\r\nAll I get is this giant traceback. I should note this works fine in regular python.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"testing.py\", line 8, in <module>\r\n    data = session.execute('select now()')\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/orm/session.py\", line 1291, in execute\r\n    return self._connection_for_bind(bind, close_with_result=True).execute(\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/orm/session.py\", line 1147, in _connection_for_bind\r\n    engine, execution_options\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/orm/session.py\", line 433, in _connection_for_bind\r\n    conn = bind._contextual_connect()\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/base.py\", line 2311, in _contextual_connect\r\n    self._wrap_pool_connect(self.pool.connect, None),\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/base.py\", line 2345, in _wrap_pool_connect\r\n    return fn()\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/pool/base.py\", line 364, in connect\r\n    return _ConnectionFairy._checkout(self)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/pool/base.py\", line 778, in _checkout\r\n    fairy = _ConnectionRecord.checkout(pool)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/pool/base.py\", line 495, in checkout\r\n    rec = pool._do_get()\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/pool/impl.py\", line 140, in _do_get\r\n    self._dec_overflow()\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/util/langhelpers.py\", line 69, in __exit__\r\n    exc_value, with_traceback=exc_tb,\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/util/compat.py\", line 178, in raise_\r\n    raise exception\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/pool/impl.py\", line 137, in _do_get\r\n    return self._create_connection()\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/pool/base.py\", line 309, in _create_connection\r\n    return _ConnectionRecord(self)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/pool/base.py\", line 440, in __init__\r\n    self.__connect(first_connect_check=True)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/pool/base.py\", line 666, in __connect\r\n    ).exec_once_unless_exception(self.connection, self)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/event/attr.py\", line 314, in exec_once_unless_exception\r\n    self._exec_once_impl(True, *args, **kw)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/event/attr.py\", line 285, in _exec_once_impl\r\n    self(*args, **kw)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/event/attr.py\", line 322, in __call__\r\n    fn(*args, **kw)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/util/langhelpers.py\", line 1513, in go\r\n    return once_fn(*arg, **kw)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/strategies.py\", line 199, in first_connect\r\n    dialect.initialize(c)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/dialects/postgresql/psycopg2.py\", line 732, in initialize\r\n    super(PGDialect_psycopg2, self).initialize(connection)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/dialects/postgresql/base.py\", line 2516, in initialize\r\n    super(PGDialect, self).initialize(connection)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/default.py\", line 310, in initialize\r\n    connection\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/dialects/postgresql/base.py\", line 2757, in _get_server_version_info\r\n    v = connection.execute(\"select version()\").scalar()\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/base.py\", line 1012, in execute\r\n    return self._execute_text(object_, multiparams, params)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/base.py\", line 1187, in _execute_text\r\n    parameters,\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/base.py\", line 1324, in _execute_context\r\n    e, statement, parameters, cursor, context\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/base.py\", line 1521, in _handle_dbapi_exception\r\n    util.raise_(exc_info[1], with_traceback=exc_info[2])\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/util/compat.py\", line 178, in raise_\r\n    raise exception\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/base.py\", line 1301, in _execute_context\r\n    result = context._setup_crud_result_proxy()\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/default.py\", line 1240, in _setup_crud_result_proxy\r\n    result = self.get_result_proxy()\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/dialects/postgresql/psycopg2.py\", line 601, in get_result_proxy\r\n    return _result.ResultProxy(self)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/result.py\", line 775, in __init__\r\n    self._init_metadata()\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/result.py\", line 807, in _init_metadata\r\n    self._metadata = ResultMetaData(self, cursor_description)\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/result.py\", line 296, in __init__\r\n    textual_ordered,\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/result.py\", line 514, in _merge_cursor_description\r\n    ) in raw_iterator\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/result.py\", line 497, in <listcomp>\r\n    (\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/result.py\", line 621, in _merge_cols_by_none\r\n    ) in self._colnames_from_description(context, cursor_description):\r\n  File \"python/venv-pypy/site-packages/sqlalchemy/engine/result.py\", line 541, in _colnames_from_description\r\n    colname = rec[0]\r\nRecursionError: maximum recursion depth exceeded\r\n```\r\n\r\nAny idea what is going wrong?\r\n\r\n**Additional context**\r\nPYPY Version: pypy3.6-v7.3.1-linux64\r\nSQLA Version: 1.3.17", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5402", "repository_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy", "labels_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5402/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5402/comments", "events_url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/issues/5402/events", "html_url": "https://github.com/sqlalchemy/sqlalchemy/issues/5402", "id": 640747512, "node_id": "MDU6SXNzdWU2NDA3NDc1MTI=", "number": 5402, "title": "how to set autoincrement to 1000", "user": {"login": "shivgana", "id": 51191342, "node_id": "MDQ6VXNlcjUxMTkxMzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/51191342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivgana", "html_url": "https://github.com/shivgana", "followers_url": "https://api.github.com/users/shivgana/followers", "following_url": "https://api.github.com/users/shivgana/following{/other_user}", "gists_url": "https://api.github.com/users/shivgana/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivgana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivgana/subscriptions", "organizations_url": "https://api.github.com/users/shivgana/orgs", "repos_url": "https://api.github.com/users/shivgana/repos", "events_url": "https://api.github.com/users/shivgana/events{/privacy}", "received_events_url": "https://api.github.com/users/shivgana/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1141269149, "node_id": "MDU6TGFiZWwxMTQxMjY5MTQ5", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "a usage question that could just as well be on the mailing list"}, {"id": 1141273987, "node_id": "MDU6TGFiZWwxMTQxMjczOTg3", "url": "https://api.github.com/repos/sqlalchemy/sqlalchemy/labels/sqlite", "name": "sqlite", "color": "E0D0A0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-17T21:16:41Z", "updated_at": "2020-06-20T11:18:39Z", "closed_at": "2020-06-20T11:18:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n", "performed_via_github_app": null, "score": 1.0}]}