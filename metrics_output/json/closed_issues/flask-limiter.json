{"total_count": 9, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/alisaifee/limits/issues/52", "repository_url": "https://api.github.com/repos/alisaifee/limits", "labels_url": "https://api.github.com/repos/alisaifee/limits/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/alisaifee/limits/issues/52/comments", "events_url": "https://api.github.com/repos/alisaifee/limits/issues/52/events", "html_url": "https://github.com/alisaifee/limits/issues/52", "id": 570895911, "node_id": "MDU6SXNzdWU1NzA4OTU5MTE=", "number": 52, "title": "support for sql tables", "user": {"login": "therealadityashankar", "id": 21975892, "node_id": "MDQ6VXNlcjIxOTc1ODky", "avatar_url": "https://avatars3.githubusercontent.com/u/21975892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/therealadityashankar", "html_url": "https://github.com/therealadityashankar", "followers_url": "https://api.github.com/users/therealadityashankar/followers", "following_url": "https://api.github.com/users/therealadityashankar/following{/other_user}", "gists_url": "https://api.github.com/users/therealadityashankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/therealadityashankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/therealadityashankar/subscriptions", "organizations_url": "https://api.github.com/users/therealadityashankar/orgs", "repos_url": "https://api.github.com/users/therealadityashankar/repos", "events_url": "https://api.github.com/users/therealadityashankar/events{/privacy}", "received_events_url": "https://api.github.com/users/therealadityashankar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 164085315, "node_id": "MDU6TGFiZWwxNjQwODUzMTU=", "url": "https://api.github.com/repos/alisaifee/limits/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-08T13:40:34Z", "updated_at": "2020-06-10T17:19:51Z", "closed_at": "2020-06-10T17:19:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey !,\r\nI was wondering if you'd be willing to add support for SQL tables (I'm willing to contribute)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alisaifee/limits/issues/30", "repository_url": "https://api.github.com/repos/alisaifee/limits", "labels_url": "https://api.github.com/repos/alisaifee/limits/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/alisaifee/limits/issues/30/comments", "events_url": "https://api.github.com/repos/alisaifee/limits/issues/30/events", "html_url": "https://github.com/alisaifee/limits/issues/30", "id": 509402501, "node_id": "MDU6SXNzdWU1MDk0MDI1MDE=", "number": 30, "title": "Allow sending extra kwargs to Redis Sentinel", "user": {"login": "gergelypolonkai", "id": 264485, "node_id": "MDQ6VXNlcjI2NDQ4NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/264485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gergelypolonkai", "html_url": "https://github.com/gergelypolonkai", "followers_url": "https://api.github.com/users/gergelypolonkai/followers", "following_url": "https://api.github.com/users/gergelypolonkai/following{/other_user}", "gists_url": "https://api.github.com/users/gergelypolonkai/gists{/gist_id}", "starred_url": "https://api.github.com/users/gergelypolonkai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gergelypolonkai/subscriptions", "organizations_url": "https://api.github.com/users/gergelypolonkai/orgs", "repos_url": "https://api.github.com/users/gergelypolonkai/repos", "events_url": "https://api.github.com/users/gergelypolonkai/events{/privacy}", "received_events_url": "https://api.github.com/users/gergelypolonkai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-19T06:13:56Z", "updated_at": "2020-06-10T15:28:34Z", "closed_at": "2020-06-10T15:28:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a Sentinel cluster where even the sentinels require a password. However, using `Sentinel(\u2026, password=password)` sends the password only to the actual Redis instances, but not to the sentinels.\r\n\r\nTo do this, you have to instantiate `Sentinel()` like this:\r\n\r\n```\r\nstorage = Sentinel(sentinel_list, password=redis_password, sentinel_kwargs={'password': sentinel_password})\r\n```\r\nI have a fix in place locally (a subclass of `RedisSentinelStorage`) that sends the same password to the sentinels this way, but it would be awesome to be able to set the sentinel password separately.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alisaifee/limits/issues/29", "repository_url": "https://api.github.com/repos/alisaifee/limits", "labels_url": "https://api.github.com/repos/alisaifee/limits/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/alisaifee/limits/issues/29/comments", "events_url": "https://api.github.com/repos/alisaifee/limits/issues/29/events", "html_url": "https://github.com/alisaifee/limits/issues/29", "id": 468405264, "node_id": "MDU6SXNzdWU0Njg0MDUyNjQ=", "number": 29, "title": "Connect to Redis by Unix socket?", "user": {"login": "stenlytw", "id": 13073900, "node_id": "MDQ6VXNlcjEzMDczOTAw", "avatar_url": "https://avatars3.githubusercontent.com/u/13073900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stenlytw", "html_url": "https://github.com/stenlytw", "followers_url": "https://api.github.com/users/stenlytw/followers", "following_url": "https://api.github.com/users/stenlytw/following{/other_user}", "gists_url": "https://api.github.com/users/stenlytw/gists{/gist_id}", "starred_url": "https://api.github.com/users/stenlytw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stenlytw/subscriptions", "organizations_url": "https://api.github.com/users/stenlytw/orgs", "repos_url": "https://api.github.com/users/stenlytw/repos", "events_url": "https://api.github.com/users/stenlytw/events{/privacy}", "received_events_url": "https://api.github.com/users/stenlytw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-16T01:42:34Z", "updated_at": "2019-12-17T01:53:23Z", "closed_at": "2019-12-17T01:53:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to connect to Redis by Unix socket? Because my shared hosting only provides Unix socket instead of TCP connection.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alisaifee/limits/issues/14", "repository_url": "https://api.github.com/repos/alisaifee/limits", "labels_url": "https://api.github.com/repos/alisaifee/limits/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/alisaifee/limits/issues/14/comments", "events_url": "https://api.github.com/repos/alisaifee/limits/issues/14/events", "html_url": "https://github.com/alisaifee/limits/issues/14", "id": 170566639, "node_id": "MDU6SXNzdWUxNzA1NjY2Mzk=", "number": 14, "title": "redis hit has a race condition", "user": {"login": "tbarbugli", "id": 88735, "node_id": "MDQ6VXNlcjg4NzM1", "avatar_url": "https://avatars3.githubusercontent.com/u/88735?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbarbugli", "html_url": "https://github.com/tbarbugli", "followers_url": "https://api.github.com/users/tbarbugli/followers", "following_url": "https://api.github.com/users/tbarbugli/following{/other_user}", "gists_url": "https://api.github.com/users/tbarbugli/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbarbugli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbarbugli/subscriptions", "organizations_url": "https://api.github.com/users/tbarbugli/orgs", "repos_url": "https://api.github.com/users/tbarbugli/repos", "events_url": "https://api.github.com/users/tbarbugli/events{/privacy}", "received_events_url": "https://api.github.com/users/tbarbugli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-08-11T04:06:11Z", "updated_at": "2016-11-05T14:34:25Z", "closed_at": "2016-11-05T14:34:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "the redis `hit` implementation seems to suffer from a race condition. If the code after the `incr` is not executed (eg. python crashes) then the `expire` command is never executed and the key will live indefinitely. This would result in false positive rate limit checks / wrong stats. Redis docs has a note about this here: http://redis.io/commands/incr#pattern-rate-limiter-2\n\nReplacing incr + expire with a LUA script could do it easily (though LUA is not available on old Redis versions); I can come up with a PR if necessary.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alisaifee/limits/issues/8", "repository_url": "https://api.github.com/repos/alisaifee/limits", "labels_url": "https://api.github.com/repos/alisaifee/limits/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/alisaifee/limits/issues/8/comments", "events_url": "https://api.github.com/repos/alisaifee/limits/issues/8/events", "html_url": "https://github.com/alisaifee/limits/issues/8", "id": 123399495, "node_id": "MDU6SXNzdWUxMjMzOTk0OTU=", "number": 8, "title": "verify limits before calling", "user": {"login": "thestick613", "id": 1608525, "node_id": "MDQ6VXNlcjE2MDg1MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1608525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestick613", "html_url": "https://github.com/thestick613", "followers_url": "https://api.github.com/users/thestick613/followers", "following_url": "https://api.github.com/users/thestick613/following{/other_user}", "gists_url": "https://api.github.com/users/thestick613/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestick613/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestick613/subscriptions", "organizations_url": "https://api.github.com/users/thestick613/orgs", "repos_url": "https://api.github.com/users/thestick613/repos", "events_url": "https://api.github.com/users/thestick613/events{/privacy}", "received_events_url": "https://api.github.com/users/thestick613/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-22T02:26:20Z", "updated_at": "2015-12-25T01:03:38Z", "closed_at": "2015-12-25T01:03:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apparently if you set a horrible limit, you won't be able to evaluate the script; try like this\n98765432198765432198765 per 3600 seconds.\nIt gives a pretty nice traceback, but i seem to have lost it. I think lua data type is responsible for this, so just raise an exception when you construct the object.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alisaifee/limits/issues/7", "repository_url": "https://api.github.com/repos/alisaifee/limits", "labels_url": "https://api.github.com/repos/alisaifee/limits/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/alisaifee/limits/issues/7/comments", "events_url": "https://api.github.com/repos/alisaifee/limits/issues/7/events", "html_url": "https://github.com/alisaifee/limits/issues/7", "id": 122912560, "node_id": "MDU6SXNzdWUxMjI5MTI1NjA=", "number": 7, "title": "Create a RedisSentinelStorage via an already existing sentinel instance", "user": {"login": "thestick613", "id": 1608525, "node_id": "MDQ6VXNlcjE2MDg1MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1608525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestick613", "html_url": "https://github.com/thestick613", "followers_url": "https://api.github.com/users/thestick613/followers", "following_url": "https://api.github.com/users/thestick613/following{/other_user}", "gists_url": "https://api.github.com/users/thestick613/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestick613/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestick613/subscriptions", "organizations_url": "https://api.github.com/users/thestick613/orgs", "repos_url": "https://api.github.com/users/thestick613/repos", "events_url": "https://api.github.com/users/thestick613/events{/privacy}", "received_events_url": "https://api.github.com/users/thestick613/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-12-18T09:32:08Z", "updated_at": "2015-12-18T23:34:36Z", "closed_at": "2015-12-18T23:34:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Your implementation supports sentinel but it doesn't support authentication. I already had a sentinel instance initialized in my code, which i used for multiple purposes, so will you accept a PR which allows creating this?\nthx\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alisaifee/limits/issues/6", "repository_url": "https://api.github.com/repos/alisaifee/limits", "labels_url": "https://api.github.com/repos/alisaifee/limits/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/alisaifee/limits/issues/6/comments", "events_url": "https://api.github.com/repos/alisaifee/limits/issues/6/events", "html_url": "https://github.com/alisaifee/limits/issues/6", "id": 122636936, "node_id": "MDU6SXNzdWUxMjI2MzY5MzY=", "number": 6, "title": "any idea what's happening here? LockError: Cannot release an unlocked lock", "user": {"login": "thestick613", "id": 1608525, "node_id": "MDQ6VXNlcjE2MDg1MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1608525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestick613", "html_url": "https://github.com/thestick613", "followers_url": "https://api.github.com/users/thestick613/followers", "following_url": "https://api.github.com/users/thestick613/following{/other_user}", "gists_url": "https://api.github.com/users/thestick613/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestick613/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestick613/subscriptions", "organizations_url": "https://api.github.com/users/thestick613/orgs", "repos_url": "https://api.github.com/users/thestick613/repos", "events_url": "https://api.github.com/users/thestick613/events{/privacy}", "received_events_url": "https://api.github.com/users/thestick613/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-12-17T00:43:14Z", "updated_at": "2015-12-18T23:17:52Z", "closed_at": "2015-12-18T23:17:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running a pretty big stress test with redis+sentinel and this popped up:\n\n```\n  File \"/root/venv_smtpin/local/lib/python2.7/site-packages/limits/strategies.py\", line 76, in hit\n    item.get_expiry()\n  File \"/root/venv_smtpin/local/lib/python2.7/site-packages/limits/storage.py\", line 456, in acquire_entry\n    key, limit, expiry, master, no_add\n  File \"/root/venv_smtpin/local/lib/python2.7/site-packages/limits/storage.py\", line 294, in acquire_entry\n    return True\n  File \"/root/venv_smtpin/local/lib/python2.7/site-packages/redis/lock.py\", line 88, in __exit__\n    self.release()\n  File \"/root/venv_smtpin/local/lib/python2.7/site-packages/redis/lock.py\", line 133, in release\n    raise LockError(\"Cannot release an unlocked lock\")\nLockError: Cannot release an unlocked lock\n```\n\nI'm firing up a lot of gevent workers on this and i'm just forcing a lot of hits upon a small moving window. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alisaifee/limits/issues/3", "repository_url": "https://api.github.com/repos/alisaifee/limits", "labels_url": "https://api.github.com/repos/alisaifee/limits/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/alisaifee/limits/issues/3/comments", "events_url": "https://api.github.com/repos/alisaifee/limits/issues/3/events", "html_url": "https://github.com/alisaifee/limits/issues/3", "id": 84277028, "node_id": "MDU6SXNzdWU4NDI3NzAyOA==", "number": 3, "title": "Threading based lock will not work on multi-machine system", "user": {"login": "twolfson", "id": 902488, "node_id": "MDQ6VXNlcjkwMjQ4OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/902488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twolfson", "html_url": "https://github.com/twolfson", "followers_url": "https://api.github.com/users/twolfson/followers", "following_url": "https://api.github.com/users/twolfson/following{/other_user}", "gists_url": "https://api.github.com/users/twolfson/gists{/gist_id}", "starred_url": "https://api.github.com/users/twolfson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twolfson/subscriptions", "organizations_url": "https://api.github.com/users/twolfson/orgs", "repos_url": "https://api.github.com/users/twolfson/repos", "events_url": "https://api.github.com/users/twolfson/events{/privacy}", "received_events_url": "https://api.github.com/users/twolfson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-06-03T00:23:46Z", "updated_at": "2015-06-07T23:56:28Z", "closed_at": "2015-06-05T17:45:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "While reviewing `limits`/`flask-limiter`, we came across a scaling issue that we wanted to bring up. The current Redis implementation is using a non-Redis based mechanism for locking. Instead, it is using a threading based lock.\n\nhttps://github.com/alisaifee/limits/blob/1.0.6/limits/storage.py#L55-L56\n\nhttps://github.com/alisaifee/limits/blob/1.0.6/limits/storage.py#L249\n\nhttps://github.com/alisaifee/limits/blob/1.0.6/limits/storage.py#L279\n\nThis is fine for when a service is running on 1 machine but when it goes to multiple machines with multiple disks, then it falls apart. Instead of this approach, maybe move to dynamic Redis keys that leverage `INCR` instead to avoid the locking issue altogether? (e.g. `127.0.0.1/endpoint/epoch_000`, `127.0.0.1/endpoint/epoch_100`)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alisaifee/limits/issues/2", "repository_url": "https://api.github.com/repos/alisaifee/limits", "labels_url": "https://api.github.com/repos/alisaifee/limits/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/alisaifee/limits/issues/2/comments", "events_url": "https://api.github.com/repos/alisaifee/limits/issues/2/events", "html_url": "https://github.com/alisaifee/limits/issues/2", "id": 59419184, "node_id": "MDU6SXNzdWU1OTQxOTE4NA==", "number": 2, "title": "Make limits more flexible specifically in conjunction with flask_limiter", "user": {"login": "reallistic", "id": 3686226, "node_id": "MDQ6VXNlcjM2ODYyMjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3686226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reallistic", "html_url": "https://github.com/reallistic", "followers_url": "https://api.github.com/users/reallistic/followers", "following_url": "https://api.github.com/users/reallistic/following{/other_user}", "gists_url": "https://api.github.com/users/reallistic/gists{/gist_id}", "starred_url": "https://api.github.com/users/reallistic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reallistic/subscriptions", "organizations_url": "https://api.github.com/users/reallistic/orgs", "repos_url": "https://api.github.com/users/reallistic/repos", "events_url": "https://api.github.com/users/reallistic/events{/privacy}", "received_events_url": "https://api.github.com/users/reallistic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-03-01T21:46:14Z", "updated_at": "2015-11-11T01:48:54Z", "closed_at": "2015-11-11T01:48:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be awesome to have the following options in limits that can be passed to it via other packages (such as flask_limiter).\n- Specify the use of [bmemcached](https://github.com/jaysonsantos/python-binary-memcached) for saslmemcached connections or regular memcached connections.\n- Allow configuration options specific to storage providers. For example setting a redis key prefix or telling pymemcache what socket module to use.\n\n(Feature requests originated in pull #1)\n", "performed_via_github_app": null, "score": 1.0}]}