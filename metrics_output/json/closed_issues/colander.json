{"total_count": 88, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/Pylons/colander/issues/339", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/339/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/339/events", "html_url": "https://github.com/Pylons/colander/issues/339", "id": 674041181, "node_id": "MDU6SXNzdWU2NzQwNDExODE=", "number": 339, "title": "What about locale directory", "user": {"login": "iinov", "id": 30430058, "node_id": "MDQ6VXNlcjMwNDMwMDU4", "avatar_url": "https://avatars1.githubusercontent.com/u/30430058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iinov", "html_url": "https://github.com/iinov", "followers_url": "https://api.github.com/users/iinov/followers", "following_url": "https://api.github.com/users/iinov/following{/other_user}", "gists_url": "https://api.github.com/users/iinov/gists{/gist_id}", "starred_url": "https://api.github.com/users/iinov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iinov/subscriptions", "organizations_url": "https://api.github.com/users/iinov/orgs", "repos_url": "https://api.github.com/users/iinov/repos", "events_url": "https://api.github.com/users/iinov/events{/privacy}", "received_events_url": "https://api.github.com/users/iinov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-08-06T06:00:49Z", "updated_at": "2020-08-08T06:21:13Z", "closed_at": "2020-08-06T23:34:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI retrieve the new 1.8.0 release and I no longer have a locale directory. Is it normal?\r\nBest regards,\r\nPatrick PIERRE ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/337", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/337/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/337/events", "html_url": "https://github.com/Pylons/colander/issues/337", "id": 667828304, "node_id": "MDU6SXNzdWU2Njc4MjgzMDQ=", "number": 337, "title": "Deserialization of date inputs", "user": {"login": "Mr-F", "id": 3585440, "node_id": "MDQ6VXNlcjM1ODU0NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3585440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mr-F", "html_url": "https://github.com/Mr-F", "followers_url": "https://api.github.com/users/Mr-F/followers", "following_url": "https://api.github.com/users/Mr-F/following{/other_user}", "gists_url": "https://api.github.com/users/Mr-F/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mr-F/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mr-F/subscriptions", "organizations_url": "https://api.github.com/users/Mr-F/orgs", "repos_url": "https://api.github.com/users/Mr-F/repos", "events_url": "https://api.github.com/users/Mr-F/events{/privacy}", "received_events_url": "https://api.github.com/users/Mr-F/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-29T13:03:19Z", "updated_at": "2020-08-06T08:44:18Z", "closed_at": "2020-08-06T08:44:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've recently found what I'm wondering is an unexpected behaviour with the deseralization code for the Date type.  Before I submitted a pull request I thought I wanted to have a short discussion, in case I was completely missing the point.\r\n\r\n_Note: Please accept my apologies about the length of this description, I wasn't sure how much information to put in to try and cover everything_\r\n\r\nHere is an example schema to work with:\r\n\r\n```\r\nclass TestSchema(colander.MappingSchema):\r\n    date_input = colander.SchemaNode(\r\n        colander.Date()\r\n    )\r\n```\r\nRunning the following works as expected\r\n```\r\nTestSchema().deserialize({\"date_input\": \"2020-01-01\"})                                                                                                                                                                                                                                                                                               \r\n> {'date_input': datetime.date(2020, 1, 1)}\r\n```\r\nand running the following raises a `colander.Invalid` exception as expected:\r\n```\r\nTestSchema().deserialize({\"date_input\": \"2020/01/01\"})    \r\n```\r\n\r\nHowever, if we defined a format for the date node i.e.\r\n```\r\nclass TestSchema(colander.MappingSchema):\r\n    date_input = colander.SchemaNode(\r\n        colander.Date(format=\"%d/%m/%Y\")\r\n    )\r\n```\r\nThen things behave slightly differently.  A correct response is as you would expect successfully parsed and return\r\n\r\n```\r\nTestSchema().deserialize({\"date_input\": \"01/01/2020\"})                                                                                                                                                                                                                                                                                               \r\n> {'date_input': datetime.date(2020, 1, 1)}\r\n```\r\nBut incorrectly formatted strings, don't raise a `colander.Invalid` exception as I would have expected, but allows a `ValueError` to propogate. \r\n```\r\nTestSchema().deserialize({\"date_input\": \"01-01-2020\"})     \r\n...\r\nValueError: time data '01-01-2020' does not match format '%d/%m/%Y'               \r\n```\r\nFurther more if the type of the input is also not a string, then the `strptime` function raises a `TypeError`\r\n```\r\nTestSchema().deserialize({\"date_input\": 12})\r\n...\r\nTypeError: strptime() argument 1 must be str, not int\r\n```                                                            \r\n\r\nIn both of the cases I feel it should raise an Invalid exception in the same way that the standard ISO parsedate flow works.  If so then we just need to modify this block of code\r\n```\r\ntry:\r\n    if self.format:\r\n        result = datetime.datetime.strptime(cstruct, self.format)\r\n    else:\r\n        result = iso8601.parse_date(cstruct)\r\n    result = result.date()\r\nexcept iso8601.ParseError as e:\r\n    raise Invalid(\r\n        node, _(self.err_template, mapping={'val': cstruct, 'err': e})\r\n    )\r\n```\r\n\r\n### My solution        \r\n\r\nLooking at the code I think my solution for the incorrect format would be to add an except clause to the existing try-except block.  \r\n\r\nFor the second issue with the incorrect type, there are a number of options which we could use.  Instead of adding another except block I wonder if we simply add a test e.g. not isinstance(cstruct, str), and raise an Invalid exception if required.  The other option which could be combined with the previous would be to add a flag to the construction which will indicate if we should attempt to cast the value to a string.  My thinking about this is that if we are calling `strptime` we know that it needs a string value, so having the ability to attempt the cast might make sense.  I guess you could argue that this should be handled by a preparer but that feels a bit disconnected to required that.\r\n\r\nAnyway again please accept my apologies about the long description, but hopefully this will explain what I'm thinking.  What do people think?\r\n\r\nIf it helps I can make a pull request so you can see what I'm thinking in terms of code changes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/331", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/331/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/331/events", "html_url": "https://github.com/Pylons/colander/issues/331", "id": 482784698, "node_id": "MDU6SXNzdWU0ODI3ODQ2OTg=", "number": 331, "title": "dynamic dictionary", "user": {"login": "keith6014", "id": 24735116, "node_id": "MDQ6VXNlcjI0NzM1MTE2", "avatar_url": "https://avatars0.githubusercontent.com/u/24735116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keith6014", "html_url": "https://github.com/keith6014", "followers_url": "https://api.github.com/users/keith6014/followers", "following_url": "https://api.github.com/users/keith6014/following{/other_user}", "gists_url": "https://api.github.com/users/keith6014/gists{/gist_id}", "starred_url": "https://api.github.com/users/keith6014/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keith6014/subscriptions", "organizations_url": "https://api.github.com/users/keith6014/orgs", "repos_url": "https://api.github.com/users/keith6014/repos", "events_url": "https://api.github.com/users/keith6014/events{/privacy}", "received_events_url": "https://api.github.com/users/keith6014/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-20T10:44:55Z", "updated_at": "2019-08-20T11:44:21Z", "closed_at": "2019-08-20T11:44:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried doing this in Marshmallow but was too cumbersome and was wondering if colander can do this.\r\n```json\r\n{\r\n  \"title\": \"arba\",\r\n  \"srv\": {\r\n    \"A\": [\r\n      {\r\n        \"server:export0\": \"/mp1\",\r\n        \"server:export1\": \"/mp2\"\r\n      }\r\n    ],\r\n    \"B\": [\r\n      {\r\n        \"server:export1\": \"/mnt/ffee\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n````\r\n* \"title\" is mandatory. Must be string\r\n* \"srv\" will be dynamic. Must be a string. Dynamic means, it will be called \"srv\", \"foo\",\"bar\", or whatever\r\n* \"A\" & \"B\" will be dynamic. Must be string\r\n\r\nis there a way to use Colander to validate this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/330", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/330/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/330/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/330/events", "html_url": "https://github.com/Pylons/colander/issues/330", "id": 467646740, "node_id": "MDU6SXNzdWU0Njc2NDY3NDA=", "number": 330, "title": "Email validator accepting \"invalid@email\"", "user": {"login": "bachirelkhoury", "id": 186698, "node_id": "MDQ6VXNlcjE4NjY5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/186698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bachirelkhoury", "html_url": "https://github.com/bachirelkhoury", "followers_url": "https://api.github.com/users/bachirelkhoury/followers", "following_url": "https://api.github.com/users/bachirelkhoury/following{/other_user}", "gists_url": "https://api.github.com/users/bachirelkhoury/gists{/gist_id}", "starred_url": "https://api.github.com/users/bachirelkhoury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bachirelkhoury/subscriptions", "organizations_url": "https://api.github.com/users/bachirelkhoury/orgs", "repos_url": "https://api.github.com/users/bachirelkhoury/repos", "events_url": "https://api.github.com/users/bachirelkhoury/events{/privacy}", "received_events_url": "https://api.github.com/users/bachirelkhoury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-13T00:37:56Z", "updated_at": "2019-07-13T09:31:52Z", "closed_at": "2019-07-13T09:31:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, the regex is allowing an email **invalid@email** with no dots. \r\n\r\nPerhaps related to #171 request. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/308", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/308/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/308/events", "html_url": "https://github.com/Pylons/colander/issues/308", "id": 326771815, "node_id": "MDU6SXNzdWUzMjY3NzE4MTU=", "number": 308, "title": "Drop py33 support?", "user": {"login": "stevepiercy", "id": 102112, "node_id": "MDQ6VXNlcjEwMjExMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/102112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevepiercy", "html_url": "https://github.com/stevepiercy", "followers_url": "https://api.github.com/users/stevepiercy/followers", "following_url": "https://api.github.com/users/stevepiercy/following{/other_user}", "gists_url": "https://api.github.com/users/stevepiercy/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevepiercy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevepiercy/subscriptions", "organizations_url": "https://api.github.com/users/stevepiercy/orgs", "repos_url": "https://api.github.com/users/stevepiercy/repos", "events_url": "https://api.github.com/users/stevepiercy/events{/privacy}", "received_events_url": "https://api.github.com/users/stevepiercy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-26T22:31:47Z", "updated_at": "2018-05-27T12:31:00Z", "closed_at": "2018-05-27T12:31:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "[Travis no like the py33](https://travis-ci.org/Pylons/colander/jobs/384211856#L478).\r\n\r\nShould we drop it from tox, Travis, update `setup.py` trove classifiers, `CHANGES.rst`, etc.?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/303", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/303/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/303/events", "html_url": "https://github.com/Pylons/colander/issues/303", "id": 304771279, "node_id": "MDU6SXNzdWUzMDQ3NzEyNzk=", "number": 303, "title": "missing=colander.drop misbehaving on unpickled schemas", "user": {"login": "Zachu", "id": 1262488, "node_id": "MDQ6VXNlcjEyNjI0ODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1262488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zachu", "html_url": "https://github.com/Zachu", "followers_url": "https://api.github.com/users/Zachu/followers", "following_url": "https://api.github.com/users/Zachu/following{/other_user}", "gists_url": "https://api.github.com/users/Zachu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zachu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zachu/subscriptions", "organizations_url": "https://api.github.com/users/Zachu/orgs", "repos_url": "https://api.github.com/users/Zachu/repos", "events_url": "https://api.github.com/users/Zachu/events{/privacy}", "received_events_url": "https://api.github.com/users/Zachu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-13T13:47:17Z", "updated_at": "2018-09-10T19:22:47Z", "closed_at": "2018-09-10T19:22:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Howdy!\r\n\r\nWhen creating `colander.Schema()` with a optional `SchemaNode` that should be dropped when it is missing, everything works as expected. After the schema goes through unpickling, `colander.drop` fields do still stay in the deserialized dict, with a value `<colander.drop>`.\r\n\r\nVersions used:\r\n```\r\n$ python --version\r\nPython 3.5.2\r\n```\r\n```\r\n$ pip freeze |grep colander\r\ncolander==1.4\r\n```\r\n\r\nSteps to reproduce:\r\n```python\r\n>>> import colander\r\n>>> schema = colander.Schema()\r\n>>> schema.add(colander.SchemaNode(colander.String(), missing=colander.drop, name='test'))\r\n>>> schema.deserialize({})\r\n{}\r\n>>> import pickle\r\n>>> pickled = pickle.dumps(schema)\r\n>>> p_schema = pickle.loads(pickled)\r\n>>> p_schema.deserialize({})\r\n{'test': <colander.drop>}\r\n```\r\nExpected behaviour:\r\n- SchemaNode test should be dropped and empty dict `{}` should be returned", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/298", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/298/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/298/events", "html_url": "https://github.com/Pylons/colander/issues/298", "id": 249737735, "node_id": "MDU6SXNzdWUyNDk3Mzc3MzU=", "number": 298, "title": "How to validate dependency between validated schema data", "user": {"login": "jenstroeger", "id": 12053937, "node_id": "MDQ6VXNlcjEyMDUzOTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/12053937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jenstroeger", "html_url": "https://github.com/jenstroeger", "followers_url": "https://api.github.com/users/jenstroeger/followers", "following_url": "https://api.github.com/users/jenstroeger/following{/other_user}", "gists_url": "https://api.github.com/users/jenstroeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/jenstroeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jenstroeger/subscriptions", "organizations_url": "https://api.github.com/users/jenstroeger/orgs", "repos_url": "https://api.github.com/users/jenstroeger/repos", "events_url": "https://api.github.com/users/jenstroeger/events{/privacy}", "received_events_url": "https://api.github.com/users/jenstroeger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 667024225, "node_id": "MDU6TGFiZWw2NjcwMjQyMjU=", "url": "https://api.github.com/repos/Pylons/colander/labels/question", "name": "question", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-11T20:19:48Z", "updated_at": "2017-08-15T01:29:28Z", "closed_at": "2017-08-11T20:53:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "(Based on [this Stackoverflow question](https://stackoverflow.com/questions/45627443/colander-schema-validation-validate-dependency-between-data) for lack of another documented place to ask Colander related questions.)\r\n\r\nSuppose I have a [Colander](https://docs.pylonsproject.org/projects/colander/en/latest/) schema that specifies a date and time range:\r\n```python\r\n    class DateRangeSchema(colander.MappingSchema):\r\n        start = colander.SchemaNode(\r\n            colander.DateTime(),\r\n            missing=None, # Can\u2019t be a callable?\r\n            )\r\n        end = colander.SchemaNode(\r\n            colander.DateTime(),\r\n            missing=None, # Can\u2019t be a callable?\r\n            )\r\n```\r\nI would like to check that `start > end`, essentially adding a \u201cpost-validation hook\u201d (the opposite of a [preparer](https://docs.pylonsproject.org/projects/colander/en/latest/interfaces.html#colander.interfaces.Preparer)) which allows me to enforce further constraints on individually valid data items _in relation to each other_.\r\n\r\nHow would I specify such dependencies?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/294", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/294/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/294/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/294/events", "html_url": "https://github.com/Pylons/colander/issues/294", "id": 246230920, "node_id": "MDU6SXNzdWUyNDYyMzA5MjA=", "number": 294, "title": "ImportError: cannot import name 'Utc'", "user": {"login": "jomasti", "id": 416773, "node_id": "MDQ6VXNlcjQxNjc3Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/416773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jomasti", "html_url": "https://github.com/jomasti", "followers_url": "https://api.github.com/users/jomasti/followers", "following_url": "https://api.github.com/users/jomasti/following{/other_user}", "gists_url": "https://api.github.com/users/jomasti/gists{/gist_id}", "starred_url": "https://api.github.com/users/jomasti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jomasti/subscriptions", "organizations_url": "https://api.github.com/users/jomasti/orgs", "repos_url": "https://api.github.com/users/jomasti/repos", "events_url": "https://api.github.com/users/jomasti/events{/privacy}", "received_events_url": "https://api.github.com/users/jomasti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-07-28T03:51:42Z", "updated_at": "2017-07-31T17:30:40Z", "closed_at": "2017-07-31T17:30:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, when pulling down Colander and importing it, I get `ImportError: cannot import name 'Utc'`. Presumably, it's because of a new release of iso8601 (0.1.12, 5 hours ago) and the lack of version pinning for it. It includes [this commit](https://bitbucket.org/micktwomey/pyiso8601/commits/a1f771bc36754edb2fd649ab2fbe6b788b6c6149) that removes that class for Python versions \u2265 3.2.\r\n\r\nFor completeness:\r\n\r\nPython version: 3.4\r\nColander version: 1.3.1\r\nStack trace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/josh/project/env/lib/python3.4/site-packages/_pytest/config.py\", line 325, in _getconftestmodules\r\n    return self._path2confmods[path]\r\nKeyError: local('/home/josh/project/backend/tests')\r\n\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"/home/josh/project/env/lib/python3.4/site-packages/_pytest/config.py\", line 356, in _importconftest\r\n    return self._conftestpath2mod[conftestpath]\r\nKeyError: local('/home/josh/project/backend/tests/conftest.py')\r\n\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"/home/josh/project/env/lib/python3.4/site-packages/_pytest/config.py\", line 362, in _importconftest\r\n    mod = conftestpath.pyimport()\r\n  File \"/home/josh/project/env/lib/python3.4/site-packages/py/_path/local.py\", line 662, in pyimport\r\n    __import__(modname)\r\n  File \"/home/josh/project/env/lib/python3.4/site-packages/_pytest/assertion/rewrite.py\", line 216, in load_module\r\n    py.builtin.exec_(co, mod.__dict__)\r\n  File \"/home/josh/project/backend/tests/conftest.py\", line 12, in <module>\r\n    from josh/project.models import (\r\n  File \"/home/josh/project/backend/josh/project/__init__.py\", line 17, in <module>\r\n    from josh/project.api.auth.single_sign_on import SSOAuthenticationPolicy\r\n  File \"/home/josh/project/backend/josh/project/api/__init__.py\", line 2, in <module>\r\n    import colander\r\n  File \"/home/josh/project/env/lib/python3.4/site-packages/colander/__init__.py\", line 21, in <module>\r\n    from . import iso8601\r\n  File \"/home/josh/project/env/lib/python3.4/site-packages/colander/iso8601.py\", line 3, in <module>\r\n    from iso8601.iso8601 import (parse_date, ParseError, Utc, FixedOffset, UTC, ZERO, ISO8601_REGEX)\r\nImportError: cannot import name 'Utc'\r\nERROR: could not load /home/josh/project/backend/tests/conftest.py\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/292", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/292/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/292/events", "html_url": "https://github.com/Pylons/colander/issues/292", "id": 240087074, "node_id": "MDU6SXNzdWUyNDAwODcwNzQ=", "number": 292, "title": "passing a float to colander.Integer does not throw exception", "user": {"login": "cecemel", "id": 2422745, "node_id": "MDQ6VXNlcjI0MjI3NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2422745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cecemel", "html_url": "https://github.com/cecemel", "followers_url": "https://api.github.com/users/cecemel/followers", "following_url": "https://api.github.com/users/cecemel/following{/other_user}", "gists_url": "https://api.github.com/users/cecemel/gists{/gist_id}", "starred_url": "https://api.github.com/users/cecemel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cecemel/subscriptions", "organizations_url": "https://api.github.com/users/cecemel/orgs", "repos_url": "https://api.github.com/users/cecemel/repos", "events_url": "https://api.github.com/users/cecemel/events{/privacy}", "received_events_url": "https://api.github.com/users/cecemel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-03T07:22:41Z", "updated_at": "2019-02-01T19:51:29Z", "closed_at": "2019-02-01T18:13:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "When passing a float value (e.g. 1.21) to a colander.Integer node, no exception is thrown.\r\nI am not sure of the expected behaviour though...\r\n\r\nVersion: 1.3.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/290", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/290/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/290/events", "html_url": "https://github.com/Pylons/colander/issues/290", "id": 224397208, "node_id": "MDU6SXNzdWUyMjQzOTcyMDg=", "number": 290, "title": "Unclosed parenthesis in URL causes infinite loop", "user": {"login": "p-m-k", "id": 3678714, "node_id": "MDQ6VXNlcjM2Nzg3MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3678714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p-m-k", "html_url": "https://github.com/p-m-k", "followers_url": "https://api.github.com/users/p-m-k/followers", "following_url": "https://api.github.com/users/p-m-k/following{/other_user}", "gists_url": "https://api.github.com/users/p-m-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/p-m-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p-m-k/subscriptions", "organizations_url": "https://api.github.com/users/p-m-k/orgs", "repos_url": "https://api.github.com/users/p-m-k/repos", "events_url": "https://api.github.com/users/p-m-k/events{/privacy}", "received_events_url": "https://api.github.com/users/p-m-k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-26T09:11:05Z", "updated_at": "2019-02-01T18:04:33Z", "closed_at": "2019-02-01T18:04:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "When there is an unclosed parenthesis in URL and we use _url_ validator, it causes an infinite loop. What's more interesting is that it only happens when the unclosed parenthesis is followed by many characters (check test case number 3 and 4).\r\n```\r\nfrom colander import MappingSchema, SchemaNode, Str, url\r\n\r\n\r\nclass MySchema(MappingSchema):\r\n    url = SchemaNode(Str(encoding='utf-8'), validator=url)\r\n\r\nprint MySchema().deserialize({\"url\": \"http://www.mysite.com/tttttttttttttttttttttt.jpg\"})  # it works\r\nprint MySchema().deserialize({\"url\": \"http://www.mysite.com/(tttttttttttttttttttttt).jpg\"})  # it works\r\nprint MySchema().deserialize({\"url\": \"http://www.mysite.com/(ttttttttttt.jpg\"})  # it works\r\nprint MySchema().deserialize({\"url\": \"http://www.mysite.com/(tttttttttttttttttttttt.jpg\"})  # infinite loop\r\n```\r\n\r\n\r\nIn addition, if you check it in an online regex checker (https://regex101.com/) it also fails. Try this regex, it's used for URL validation in colander. It's taken from _colander.\\_\\_init\\_\\_.py:438_, I only escaped two slashes here.\r\n```\r\n(?i)\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\r\n```\r\nUse this URL: _http://www.mysite.com/(tttttttttttttttttttttt.jpg_ and you'll get _catastrophic backtracking_. You can use debugger on that site to check which group falls in infinite loop.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/287", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/287/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/287/events", "html_url": "https://github.com/Pylons/colander/issues/287", "id": 222244468, "node_id": "MDU6SXNzdWUyMjIyNDQ0Njg=", "number": 287, "title": "GlobalObject serialization incorrect?", "user": {"login": "jay-hennen", "id": 14843789, "node_id": "MDQ6VXNlcjE0ODQzNzg5", "avatar_url": "https://avatars0.githubusercontent.com/u/14843789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jay-hennen", "html_url": "https://github.com/jay-hennen", "followers_url": "https://api.github.com/users/jay-hennen/followers", "following_url": "https://api.github.com/users/jay-hennen/following{/other_user}", "gists_url": "https://api.github.com/users/jay-hennen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jay-hennen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jay-hennen/subscriptions", "organizations_url": "https://api.github.com/users/jay-hennen/orgs", "repos_url": "https://api.github.com/users/jay-hennen/repos", "events_url": "https://api.github.com/users/jay-hennen/events{/privacy}", "received_events_url": "https://api.github.com/users/jay-hennen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51486984, "node_id": "MDU6TGFiZWw1MTQ4Njk4NA==", "url": "https://api.github.com/repos/Pylons/colander/labels/bug", "name": "bug", "color": "e11d21", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-04-17T22:04:01Z", "updated_at": "2017-04-25T06:46:38Z", "closed_at": "2017-04-25T06:46:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nfrom colander import GlobalObject, SchemaNode\r\nimport collections\r\n\r\nsn = SchemaNode(typ=GlobalObject(collections))\r\nser = sn.serialize(collections.OrderedDict)\r\nprint ser\r\n    'OrderedDict'\r\ndes = sn.deserialize(ser)\r\n    Invalid: {'': u'The dotted name \"OrderedDict\" cannot be imported'}\r\nser = '.OrderedDict'\r\ndes = sn.deserialize(ser)\r\n    collections.OrderedDict\r\n```\r\n\r\nTo summarize, the serialization only returns the `__class__` of a type, without a '.' appended. To get the class from the deserialize function it needs to be given a dotted class name, in which case the behavior seems to be appropriate.\r\n\r\nAm I mistaken in how serialize/deserialize are supposed to work in this situation? Please advise.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/283", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/283/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/283/events", "html_url": "https://github.com/Pylons/colander/issues/283", "id": 215072506, "node_id": "MDU6SXNzdWUyMTUwNzI1MDY=", "number": 283, "title": "Email validator does not allow double hyphen", "user": {"login": "dAnjou", "id": 117147, "node_id": "MDQ6VXNlcjExNzE0Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/117147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dAnjou", "html_url": "https://github.com/dAnjou", "followers_url": "https://api.github.com/users/dAnjou/followers", "following_url": "https://api.github.com/users/dAnjou/following{/other_user}", "gists_url": "https://api.github.com/users/dAnjou/gists{/gist_id}", "starred_url": "https://api.github.com/users/dAnjou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dAnjou/subscriptions", "organizations_url": "https://api.github.com/users/dAnjou/orgs", "repos_url": "https://api.github.com/users/dAnjou/repos", "events_url": "https://api.github.com/users/dAnjou/events{/privacy}", "received_events_url": "https://api.github.com/users/dAnjou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-17T17:33:29Z", "updated_at": "2019-02-01T15:47:27Z", "closed_at": "2019-02-01T15:47:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "`lorem@i--ipsum.com` is a valid email address but the current email validator doesn't validate it.\r\n\r\nHere's an email validator that I wrote with code that I stole from Django which works:\r\n```python\r\n\r\nclass Email(object):\r\n    \"\"\"\r\n    Email validator shamelessly stolen from Django\r\n    \"\"\"\r\n    USER_REGEX = (\r\n        r\"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*\\Z\"  # dot-atom\r\n        r'|^\"([\\001-\\010\\013\\014\\016-\\037!#-\\[\\]-\\177]|\\\\[\\001-\\011\\013\\014\\016-\\177])*\"\\Z)'  # quoted-string\r\n    )\r\n    # max length for domain name labels is 63 characters per RFC 1034\r\n    DOMAIN_REGEX = r'((?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+)(?:[A-Z0-9-]{2,63}(?<!-))\\Z'\r\n\r\n    def __init__(self, msg=None):\r\n        if msg is None:\r\n            msg = \"Invalid email address\"\r\n        self.msg = msg\r\n        self.user_regex = re.compile(self.USER_REGEX, re.IGNORECASE)\r\n        self.domain_regex = re.compile(self.DOMAIN_REGEX, re.IGNORECASE)\r\n\r\n    def __call__(self, node, value):\r\n        if not value or '@' not in value:\r\n            raise Invalid(node, self.msg)\r\n\r\n        user_part, domain_part = value.rsplit('@', 1)\r\n\r\n        if not self.user_regex.match(user_part):\r\n            raise Invalid(node, self.msg)\r\n\r\n        if not self.domain_regex.match(domain_part):\r\n            # Try for possible IDN domain-part\r\n            try:\r\n                domain_part = domain_part.encode('idna').decode('ascii')\r\n                if self.domain_regex.match(domain_part):\r\n                    return\r\n            except UnicodeError:\r\n                pass\r\n            raise Invalid(node, self.msg)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/279", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/279/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/279/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/279/events", "html_url": "https://github.com/Pylons/colander/issues/279", "id": 204157434, "node_id": "MDU6SXNzdWUyMDQxNTc0MzQ=", "number": 279, "title": "Cloned SchemaNodes cannot be used together in py3", "user": {"login": "bakkerthehacker", "id": 1406235, "node_id": "MDQ6VXNlcjE0MDYyMzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1406235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bakkerthehacker", "html_url": "https://github.com/bakkerthehacker", "followers_url": "https://api.github.com/users/bakkerthehacker/followers", "following_url": "https://api.github.com/users/bakkerthehacker/following{/other_user}", "gists_url": "https://api.github.com/users/bakkerthehacker/gists{/gist_id}", "starred_url": "https://api.github.com/users/bakkerthehacker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bakkerthehacker/subscriptions", "organizations_url": "https://api.github.com/users/bakkerthehacker/orgs", "repos_url": "https://api.github.com/users/bakkerthehacker/repos", "events_url": "https://api.github.com/users/bakkerthehacker/events{/privacy}", "received_events_url": "https://api.github.com/users/bakkerthehacker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51486984, "node_id": "MDU6TGFiZWw1MTQ4Njk4NA==", "url": "https://api.github.com/repos/Pylons/colander/labels/bug", "name": "bug", "color": "e11d21", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-01-30T23:06:41Z", "updated_at": "2017-02-01T05:22:10Z", "closed_at": "2017-02-01T05:22:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following fails on python 3:\r\n```python\r\nfrom colander import SchemaNode, String, MappingSchema\r\ntest_node = SchemaNode(String())\r\nclass TestSchema(MappingSchema):\r\n    a = test_node.clone()\r\n    b = test_node.clone()\r\n```\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-2-a3cd8223c87c> in <module>()\r\n      1 from colander import SchemaNode, String, MappingSchema\r\n      2 test_node = SchemaNode(String())\r\n----> 3 class TestSchema(MappingSchema):\r\n      4     a = test_node.clone()\r\n      5     b = test_node.clone()\r\n\r\n/nail/home/gbakker/pg/clientlibs/rate_tracker/.tox/py35/lib/python3.5/site-packages/colander/__init__.py in __init__(cls, name, bases, clsattrs)\r\n   2239                 nodes.append((value._order, value))\r\n   2240 \r\n-> 2241         nodes.sort()\r\n   2242         cls.__class_schema_nodes__ = [ n[1] for n in nodes ]\r\n   2243 \r\n\r\nTypeError: unorderable types: SchemaNode() < SchemaNode()\r\n```\r\n\r\nThis works on python 2 and it works if I change the nodes to not use clone.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/277", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/277/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/277/events", "html_url": "https://github.com/Pylons/colander/issues/277", "id": 198684796, "node_id": "MDU6SXNzdWUxOTg2ODQ3OTY=", "number": 277, "title": "RegEx validator matches only from the beginning of the string", "user": {"login": "jenstroeger", "id": 12053937, "node_id": "MDQ6VXNlcjEyMDUzOTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/12053937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jenstroeger", "html_url": "https://github.com/jenstroeger", "followers_url": "https://api.github.com/users/jenstroeger/followers", "following_url": "https://api.github.com/users/jenstroeger/following{/other_user}", "gists_url": "https://api.github.com/users/jenstroeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/jenstroeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jenstroeger/subscriptions", "organizations_url": "https://api.github.com/users/jenstroeger/orgs", "repos_url": "https://api.github.com/users/jenstroeger/repos", "events_url": "https://api.github.com/users/jenstroeger/events{/privacy}", "received_events_url": "https://api.github.com/users/jenstroeger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-01-04T11:17:18Z", "updated_at": "2017-01-14T08:29:36Z", "closed_at": "2017-01-14T08:29:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current version of Colander\u2019s `RegEx()` validator calls Python\u2019s [`match()`](https://docs.python.org/3/library/re.html#re.match) function, see source [here](https://github.com/Pylons/colander/blob/5e4d2c6fa4f6dc86465516ee93f45be61539c7e4/colander/__init__.py#L345). That function matches only the beginning of the string, not the entire given string.\r\n\r\nThis should be documented as it impacts the regular expressions used.\r\n\r\nAs of Python 3.4, [`fullmatch()`](https://docs.python.org/3/library/re.html#re.fullmatch) should be considered to replace the call to `match()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/256", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/256/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/256/events", "html_url": "https://github.com/Pylons/colander/issues/256", "id": 144223466, "node_id": "MDU6SXNzdWUxNDQyMjM0NjY=", "number": 256, "title": "preparer cannot call under subclassed SchemaNode", "user": {"login": "gjo", "id": 22487, "node_id": "MDQ6VXNlcjIyNDg3", "avatar_url": "https://avatars3.githubusercontent.com/u/22487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gjo", "html_url": "https://github.com/gjo", "followers_url": "https://api.github.com/users/gjo/followers", "following_url": "https://api.github.com/users/gjo/following{/other_user}", "gists_url": "https://api.github.com/users/gjo/gists{/gist_id}", "starred_url": "https://api.github.com/users/gjo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gjo/subscriptions", "organizations_url": "https://api.github.com/users/gjo/orgs", "repos_url": "https://api.github.com/users/gjo/repos", "events_url": "https://api.github.com/users/gjo/events{/privacy}", "received_events_url": "https://api.github.com/users/gjo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-29T10:31:02Z", "updated_at": "2016-03-29T14:31:27Z", "closed_at": "2016-03-29T14:31:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`colander.interfaces.Preparer` says preparer has one argument.\nHowever, when a SchemaNode is subclass-ed, `preparer.__call__(value)` requires two arguments (`self` and `value`) and raises exception.\n\n``` python\nimport colander as c\n\ndef global_preparer(value):\n    return 'global_prepared:' + value\n\n\nclass Schema1(c.Schema):\n    node = c.SchemaNode(typ=c.Str(), preparer=global_preparer)\n\n\nschema1 = Schema1().bind()\ndeserialized = schema1.deserialize({'node': 'test'})\nprint('Schema1:', deserialized)\n# printed\n# Schema1: {'node': 'global_prepared:test'}\n\nclass Node(c.SchemaNode):\n    schema_type = c.Str\n    preparer = global_preparer\n\n\nclass Schema2(c.Schema):\n    node = Node()\n\n\nschema2 = Schema2().bind()\ndeserialized = schema2.deserialize({'node': 'test'})\n# exceptioned\n# TypeError: global_preparer() takes 1 positional argument but 2 were given\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/255", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/255/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/255/events", "html_url": "https://github.com/Pylons/colander/issues/255", "id": 137653978, "node_id": "MDU6SXNzdWUxMzc2NTM5Nzg=", "number": 255, "title": "Support for Thrift or Avro", "user": {"login": "0x0ece", "id": 1491992, "node_id": "MDQ6VXNlcjE0OTE5OTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1491992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0x0ece", "html_url": "https://github.com/0x0ece", "followers_url": "https://api.github.com/users/0x0ece/followers", "following_url": "https://api.github.com/users/0x0ece/following{/other_user}", "gists_url": "https://api.github.com/users/0x0ece/gists{/gist_id}", "starred_url": "https://api.github.com/users/0x0ece/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0x0ece/subscriptions", "organizations_url": "https://api.github.com/users/0x0ece/orgs", "repos_url": "https://api.github.com/users/0x0ece/repos", "events_url": "https://api.github.com/users/0x0ece/events{/privacy}", "received_events_url": "https://api.github.com/users/0x0ece/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-01T18:44:49Z", "updated_at": "2016-03-01T19:13:41Z", "closed_at": "2016-03-01T19:10:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any plan to support either Thrift or Avro for schema definition? Or, any argument against? Thanks, E.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/246", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/246/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/246/events", "html_url": "https://github.com/Pylons/colander/issues/246", "id": 127082556, "node_id": "MDU6SXNzdWUxMjcwODI1NTY=", "number": 246, "title": "Minor documentation issue: wrong \"latest\" version on readthedocs ", "user": {"login": "lmctv", "id": 1045050, "node_id": "MDQ6VXNlcjEwNDUwNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1045050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lmctv", "html_url": "https://github.com/lmctv", "followers_url": "https://api.github.com/users/lmctv/followers", "following_url": "https://api.github.com/users/lmctv/following{/other_user}", "gists_url": "https://api.github.com/users/lmctv/gists{/gist_id}", "starred_url": "https://api.github.com/users/lmctv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lmctv/subscriptions", "organizations_url": "https://api.github.com/users/lmctv/orgs", "repos_url": "https://api.github.com/users/lmctv/repos", "events_url": "https://api.github.com/users/lmctv/events{/privacy}", "received_events_url": "https://api.github.com/users/lmctv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2016-01-17T08:52:37Z", "updated_at": "2016-01-18T12:32:29Z", "closed_at": "2016-01-17T23:34:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As of now, if I follow the default link to colander docs,\nhttp://colander.readthedocs.org/, I land on the docs for v 1.0b1 since the default version \"latest\" points to \"1.0-branch\".\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/237", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/237/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/237/events", "html_url": "https://github.com/Pylons/colander/issues/237", "id": 91050242, "node_id": "MDU6SXNzdWU5MTA1MDI0Mg==", "number": 237, "title": "No mention in docs about using `default=colander.drop`", "user": {"login": "tisdall", "id": 4029388, "node_id": "MDQ6VXNlcjQwMjkzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4029388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tisdall", "html_url": "https://github.com/tisdall", "followers_url": "https://api.github.com/users/tisdall/followers", "following_url": "https://api.github.com/users/tisdall/following{/other_user}", "gists_url": "https://api.github.com/users/tisdall/gists{/gist_id}", "starred_url": "https://api.github.com/users/tisdall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tisdall/subscriptions", "organizations_url": "https://api.github.com/users/tisdall/orgs", "repos_url": "https://api.github.com/users/tisdall/repos", "events_url": "https://api.github.com/users/tisdall/events{/privacy}", "received_events_url": "https://api.github.com/users/tisdall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-06-25T19:12:04Z", "updated_at": "2016-01-18T01:14:40Z", "closed_at": "2016-01-18T01:14:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "You can apparently use a `colander.drop` as a value for `default`, but there's no mention in the documents.\n\nExample:\n\n```\n>>> x = colander.SchemaNode(\n...     colander.Mapping(),\n...     colander.SchemaNode(colander.String(), name=\"y\")\n... )\n>>> x.serialize({'y':3})\n{'y': '3'}\n>>> x.serialize({})\n{'y': <colander.null>}\n>>> x = colander.SchemaNode(\n...     colander.Mapping(),\n...     colander.SchemaNode(colander.String(), name=\"y\", default=colander.drop)\n... )\n>>> x.serialize({})\n{}\n```\n\nNow, I find this feature very useful for what I'm working on.  However, before I work on updating the docs to mention how this works, does anyone have any reasons for this to be labelled a bug?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/233", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/233/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/233/events", "html_url": "https://github.com/Pylons/colander/issues/233", "id": 88821275, "node_id": "MDU6SXNzdWU4ODgyMTI3NQ==", "number": 233, "title": "String with encoding", "user": {"login": "tisdall", "id": 4029388, "node_id": "MDQ6VXNlcjQwMjkzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4029388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tisdall", "html_url": "https://github.com/tisdall", "followers_url": "https://api.github.com/users/tisdall/followers", "following_url": "https://api.github.com/users/tisdall/following{/other_user}", "gists_url": "https://api.github.com/users/tisdall/gists{/gist_id}", "starred_url": "https://api.github.com/users/tisdall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tisdall/subscriptions", "organizations_url": "https://api.github.com/users/tisdall/orgs", "repos_url": "https://api.github.com/users/tisdall/repos", "events_url": "https://api.github.com/users/tisdall/events{/privacy}", "received_events_url": "https://api.github.com/users/tisdall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-06-16T19:43:18Z", "updated_at": "2015-06-23T20:29:07Z", "closed_at": "2015-06-23T20:29:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There seems to be some inconsistencies with respect to the `encoding` argument on `String` objects.  For example (in py3):\n\n```\n>>> import colander\n>>> s = colander.String('utf-8')\n>>> s.serialize(None, 123)\n'123'\n>>> s.serialize(None, '123')\nb'123'\n>>> s.serialize(None, str(123))\nb'123'\n```\n\nin py2:\n\n```\n>>> import colander\n>>> s = colander.String('utf-8')\n>>> s.serialize(None, 123)\nu'123'\n>>> s.serialize(None, '123')\n'123'\n>>> s.serialize(None, unicode(123))\n'123'\n```\n\nBasically, if you pass something that isn't an instance of one of the python string types you can bypass the encoding step.\n\nThe docs say:\n\n> A non-Unicode input value to `serialize` is converted to a\n> Unicode using the encoding (`unicode(value, encoding)`);\n> subsequently the Unicode object is reeencoded to a `str`\n> object using the encoding and returned.\n\nThis seems to be a regression as it appears it did work properly in previous versions.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/231", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/231/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/231/events", "html_url": "https://github.com/Pylons/colander/issues/231", "id": 87016116, "node_id": "MDU6SXNzdWU4NzAxNjExNg==", "number": 231, "title": "doc example doesn't work", "user": {"login": "tisdall", "id": 4029388, "node_id": "MDQ6VXNlcjQwMjkzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4029388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tisdall", "html_url": "https://github.com/tisdall", "followers_url": "https://api.github.com/users/tisdall/followers", "following_url": "https://api.github.com/users/tisdall/following{/other_user}", "gists_url": "https://api.github.com/users/tisdall/gists{/gist_id}", "starred_url": "https://api.github.com/users/tisdall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tisdall/subscriptions", "organizations_url": "https://api.github.com/users/tisdall/orgs", "repos_url": "https://api.github.com/users/tisdall/repos", "events_url": "https://api.github.com/users/tisdall/events{/privacy}", "received_events_url": "https://api.github.com/users/tisdall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-10T15:52:41Z", "updated_at": "2016-01-16T21:39:51Z", "closed_at": "2016-01-16T21:39:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Trying out [an example in the docs](http://docs.pylonsproject.org/projects/colander/en/latest/basics.html?highlight=schema_type#subclassing-schemanode) I get the following:\n\n```\n>>> ranged_int = colander.SchemaNode(\n...     schema_type=colander.Int,\n...     validator=colander.Range(0, 10),\n...     default=10,\n...     title='Ranged Int'\n...     )\nTraceback (most recent call last):\n  File \"<stdin>\", line 5, in <module>\n  File \"/sites/metrics_dev/env/lib/python3.4/site-packages/colander/__init__.py\", line 1817, in __init__\n    self.typ = self.schema_type()\n  File \"/sites/metrics_dev/env/lib/python3.4/site-packages/colander/__init__.py\", line 1833, in schema_type\n    'Schema node construction without a typ argument or '\nNotImplementedError: Schema node construction without a typ argument or a schema_type() callable present on the node class \n```\n\nrelated to #229 \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/230", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/230/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/230/events", "html_url": "https://github.com/Pylons/colander/issues/230", "id": 87011691, "node_id": "MDU6SXNzdWU4NzAxMTY5MQ==", "number": 230, "title": "SchemaNode should default to Mapping?", "user": {"login": "tisdall", "id": 4029388, "node_id": "MDQ6VXNlcjQwMjkzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4029388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tisdall", "html_url": "https://github.com/tisdall", "followers_url": "https://api.github.com/users/tisdall/followers", "following_url": "https://api.github.com/users/tisdall/following{/other_user}", "gists_url": "https://api.github.com/users/tisdall/gists{/gist_id}", "starred_url": "https://api.github.com/users/tisdall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tisdall/subscriptions", "organizations_url": "https://api.github.com/users/tisdall/orgs", "repos_url": "https://api.github.com/users/tisdall/repos", "events_url": "https://api.github.com/users/tisdall/events{/privacy}", "received_events_url": "https://api.github.com/users/tisdall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-06-10T15:39:48Z", "updated_at": "2015-07-02T15:22:18Z", "closed_at": "2015-07-02T15:22:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The docs say the following about [colander.SchemaNode](http://docs.pylonsproject.org/projects/colander/en/latest/api.html#colander.SchemaNode):\n\n> typ: The \u2018type\u2019 for this node. It should be an instance of a class that implements the colander.interfaces.Type interface. **If typ is not passed, it defaults to colander.Mapping().**\n\nThis is currently not true:\n\n```\n>>> import colander\n>>> x = colander.SchemaNode()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/sites/metrics_dev/env/lib/python3.4/site-packages/colander/__init__.py\", line 1817, in __init__\n    self.typ = self.schema_type()\n  File \"/sites/metrics_dev/env/lib/python3.4/site-packages/colander/__init__.py\", line 1833, in schema_type\n    'Schema node construction without a typ argument or '\nNotImplementedError: Schema node construction without a typ argument or a schema_type() callable present on the node class \n>>> \n```\n\nSo, I can provide a PR, but should the docs be changed or the code?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/226", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/226/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/226/events", "html_url": "https://github.com/Pylons/colander/issues/226", "id": 76050668, "node_id": "MDU6SXNzdWU3NjA1MDY2OA==", "number": 226, "title": "py3k coverage not 100%", "user": {"login": "tisdall", "id": 4029388, "node_id": "MDQ6VXNlcjQwMjkzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4029388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tisdall", "html_url": "https://github.com/tisdall", "followers_url": "https://api.github.com/users/tisdall/followers", "following_url": "https://api.github.com/users/tisdall/following{/other_user}", "gists_url": "https://api.github.com/users/tisdall/gists{/gist_id}", "starred_url": "https://api.github.com/users/tisdall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tisdall/subscriptions", "organizations_url": "https://api.github.com/users/tisdall/orgs", "repos_url": "https://api.github.com/users/tisdall/repos", "events_url": "https://api.github.com/users/tisdall/events{/privacy}", "received_events_url": "https://api.github.com/users/tisdall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-05-13T16:43:29Z", "updated_at": "2020-02-25T14:41:01Z", "closed_at": "2016-01-16T21:43:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\n$ env/bin/nosetests --with-xunit --with-xcoverage --cover-min-percentage=100\nName                           Stmts   Miss  Cover   Missing\n------------------------------------------------------------\ncolander                         989      2    99%   2207-2208\ncolander.compat                    9      0   100%   \ncolander.iso8601                   4      0   100%   \ncolander.tests                     1      0   100%   \ncolander.tests.test_colander    2786      0   100%   \ncolander.tests.test_iso8601      145      0   100%   \n------------------------------------------------------------\nTOTAL                           3934      2    99%   \nnose.plugins.cover: ERROR: TOTAL Coverage did not reach minimum required: 100%\n```\n\nThe code in question is:\n\n``` python\n        try:\n            functools.update_wrapper(self, wrapped)\n        except AttributeError: #non-function\n            self.__doc__ = getattr(wrapped, '__doc__', None)\n```\n\nAnd the reason can be [found in the docs](https://docs.python.org/3/library/functools.html#functools.update_wrapper):\n\n> Changed in version 3.2: Missing attributes no longer trigger an AttributeError.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/224", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/224/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/224/events", "html_url": "https://github.com/Pylons/colander/issues/224", "id": 75946674, "node_id": "MDU6SXNzdWU3NTk0NjY3NA==", "number": 224, "title": "colander.drop not working for sequences and tuples", "user": {"login": "pallix", "id": 676838, "node_id": "MDQ6VXNlcjY3NjgzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/676838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pallix", "html_url": "https://github.com/pallix", "followers_url": "https://api.github.com/users/pallix/followers", "following_url": "https://api.github.com/users/pallix/following{/other_user}", "gists_url": "https://api.github.com/users/pallix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pallix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pallix/subscriptions", "organizations_url": "https://api.github.com/users/pallix/orgs", "repos_url": "https://api.github.com/users/pallix/repos", "events_url": "https://api.github.com/users/pallix/events{/privacy}", "received_events_url": "https://api.github.com/users/pallix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-13T11:06:57Z", "updated_at": "2016-01-18T17:50:15Z", "closed_at": "2016-01-18T17:50:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `missing=colander.drop` does not work when deserializing a sequence or a tuple. Instead of dropping the value colander uses literalarly `drop` as a value. I'm using colander 1.0.\n\n```\nimport colander\n\n\nclass Friends(colander.SequenceSchema):\n    name = colander.SchemaNode(colander.String(), missing=colander.drop)\n\n\nFriends().deserialize(['tom', None])\n\n>>> ['tom', <colander._drop at 0x7efee92fd588>]\n\nclass Toy(colander.TupleSchema):\n    name = colander.SchemaNode(colander.String())\n    price = colander.SchemaNode(colander.String(), missing=colander.drop)\n\n\nToy().deserialize(('lego', None))\n\n>>> ('lego', <colander._drop at 0x7efee92fd588>)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/222", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/222/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/222/events", "html_url": "https://github.com/Pylons/colander/issues/222", "id": 73402812, "node_id": "MDU6SXNzdWU3MzQwMjgxMg==", "number": 222, "title": "tox docs test doesn't cover pdf", "user": {"login": "tisdall", "id": 4029388, "node_id": "MDQ6VXNlcjQwMjkzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4029388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tisdall", "html_url": "https://github.com/tisdall", "followers_url": "https://api.github.com/users/tisdall/followers", "following_url": "https://api.github.com/users/tisdall/following{/other_user}", "gists_url": "https://api.github.com/users/tisdall/gists{/gist_id}", "starred_url": "https://api.github.com/users/tisdall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tisdall/subscriptions", "organizations_url": "https://api.github.com/users/tisdall/orgs", "repos_url": "https://api.github.com/users/tisdall/repos", "events_url": "https://api.github.com/users/tisdall/events{/privacy}", "received_events_url": "https://api.github.com/users/tisdall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-05-05T19:09:29Z", "updated_at": "2015-05-06T13:59:17Z", "closed_at": "2015-05-06T06:18:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Related to #221:  The pdf's were failing to generate on readthedocs and this was causing both the html and pdf version to fail to be updated.\n\nI'm thinking someone needs to update the test to include PDF generation.  I'm not really sure how to do that properly, though...  It's likely an issue with all the Pylons projects too.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/219", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/219/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/219/events", "html_url": "https://github.com/Pylons/colander/issues/219", "id": 72240084, "node_id": "MDU6SXNzdWU3MjI0MDA4NA==", "number": 219, "title": "Support for selects with multiple values", "user": {"login": "AnderUstarroz", "id": 8544110, "node_id": "MDQ6VXNlcjg1NDQxMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8544110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnderUstarroz", "html_url": "https://github.com/AnderUstarroz", "followers_url": "https://api.github.com/users/AnderUstarroz/followers", "following_url": "https://api.github.com/users/AnderUstarroz/following{/other_user}", "gists_url": "https://api.github.com/users/AnderUstarroz/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnderUstarroz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnderUstarroz/subscriptions", "organizations_url": "https://api.github.com/users/AnderUstarroz/orgs", "repos_url": "https://api.github.com/users/AnderUstarroz/repos", "events_url": "https://api.github.com/users/AnderUstarroz/events{/privacy}", "received_events_url": "https://api.github.com/users/AnderUstarroz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-30T18:21:50Z", "updated_at": "2015-05-05T18:34:16Z", "closed_at": "2015-05-05T18:33:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looks like colander cannot deserialize properly  the arrays generated by multiple selects like the ones used in [Bootstrap](http://formvalidation.io/examples/bootstrap-multiselect/).\nWhen a form sends a POST request with multiple options selected like the following:\n\n```\n<form method=\"post\">   \n    <select class=\"form-control\" name=\"browsers\" multiple>\n                <option value=\"chrome\">Google Chrome</option>\n                <option value=\"firefox\">Firefox</option>\n                <option value=\"ie\">IE</option>\n                <option value=\"safari\">Safari</option>\n                <option value=\"opera\">Opera</option>\n                <option value=\"other\">Other</option>\n    </select>\n    <input type=\"submit\">\n</form>\n```\n\nColander will only deserialize the last value of the selected options from the received array.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/216", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/216/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/216/events", "html_url": "https://github.com/Pylons/colander/issues/216", "id": 69106427, "node_id": "MDU6SXNzdWU2OTEwNjQyNw==", "number": 216, "title": "Feature request: Internationalization", "user": {"login": "AnderUstarroz", "id": 8544110, "node_id": "MDQ6VXNlcjg1NDQxMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8544110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnderUstarroz", "html_url": "https://github.com/AnderUstarroz", "followers_url": "https://api.github.com/users/AnderUstarroz/followers", "following_url": "https://api.github.com/users/AnderUstarroz/following{/other_user}", "gists_url": "https://api.github.com/users/AnderUstarroz/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnderUstarroz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnderUstarroz/subscriptions", "organizations_url": "https://api.github.com/users/AnderUstarroz/orgs", "repos_url": "https://api.github.com/users/AnderUstarroz/repos", "events_url": "https://api.github.com/users/AnderUstarroz/events{/privacy}", "received_events_url": "https://api.github.com/users/AnderUstarroz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-04-17T09:50:30Z", "updated_at": "2015-05-05T21:49:54Z", "closed_at": "2015-05-05T19:04:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I translate the error messages from the [colander](http://docs.pylonsproject.org/projects/colander/en/latest/) validators? The documentation just says that it's possible. \n\n```\ndef valid_text(node, value):\n        raise Invalid(node, u\"Some error message\")\n\nclass form(colander.MappingSchema):\n    name = colander.SchemaNode(colander.String(), validator=valid_text)\n```\n\nI know that [deform](http://deform.readthedocs.org/en/latest/) does it already but I need to use **colander** on his own.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/214", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/214/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/214/events", "html_url": "https://github.com/Pylons/colander/issues/214", "id": 67985301, "node_id": "MDU6SXNzdWU2Nzk4NTMwMQ==", "number": 214, "title": "Can't deserialize empty string.", "user": {"login": "Cykooz", "id": 163725, "node_id": "MDQ6VXNlcjE2MzcyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/163725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cykooz", "html_url": "https://github.com/Cykooz", "followers_url": "https://api.github.com/users/Cykooz/followers", "following_url": "https://api.github.com/users/Cykooz/following{/other_user}", "gists_url": "https://api.github.com/users/Cykooz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cykooz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cykooz/subscriptions", "organizations_url": "https://api.github.com/users/Cykooz/orgs", "repos_url": "https://api.github.com/users/Cykooz/repos", "events_url": "https://api.github.com/users/Cykooz/events{/privacy}", "received_events_url": "https://api.github.com/users/Cykooz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-04-13T01:49:55Z", "updated_at": "2016-01-19T17:27:32Z", "closed_at": "2016-01-19T17:27:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Please, explain to me, why a node with an empty string value is considered as a missed node?\n\n``` python\n>>> node = colander.SchemaNode(colander.String(), name='str_node')\n>>> node.deserialize('')\n...\nInvalid: {'str_node': u'Required'}\n```\n\nSuch behaviour affecting correct work of my code.\nI use \"Colander\" in tests for validate the results returned by REST methods. Some fields in the results is required, but value of these fields can be an empty string.\n\nIn my case the result shown below is correct:\n\n``` python\n{\n    'name': 'Service name',\n    'description': ''\n}\n```\n\nBut the next result must raise an exception:\n\n``` python\n{\n    'name': 'Service name'\n}\n```\n\nHow could I get this behaviour of Colander?\n\nPS:\nMy question duplicate the closed issue #14, because it has not contains a full answer.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/213", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/213/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/213/events", "html_url": "https://github.com/Pylons/colander/issues/213", "id": 65761484, "node_id": "MDU6SXNzdWU2NTc2MTQ4NA==", "number": 213, "title": "Returned HTTP status code for invalid scehma.", "user": {"login": "andrewjburnett", "id": 7442407, "node_id": "MDQ6VXNlcjc0NDI0MDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/7442407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewjburnett", "html_url": "https://github.com/andrewjburnett", "followers_url": "https://api.github.com/users/andrewjburnett/followers", "following_url": "https://api.github.com/users/andrewjburnett/following{/other_user}", "gists_url": "https://api.github.com/users/andrewjburnett/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewjburnett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewjburnett/subscriptions", "organizations_url": "https://api.github.com/users/andrewjburnett/orgs", "repos_url": "https://api.github.com/users/andrewjburnett/repos", "events_url": "https://api.github.com/users/andrewjburnett/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewjburnett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-01T19:30:53Z", "updated_at": "2015-04-01T19:40:32Z", "closed_at": "2015-04-01T19:35:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I am using Colander for schema validation, is it possible to change the returned http status code when there is an error? For example, if my colander schema is invalid, how can I capture this error and return its message along with a status code of my choosing. For example, how would I go about returning a different status code, say '422 Unprocessable Entity', for this type of invalid schema error?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/210", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/210/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/210/events", "html_url": "https://github.com/Pylons/colander/issues/210", "id": 60696478, "node_id": "MDU6SXNzdWU2MDY5NjQ3OA==", "number": 210, "title": "Add py.test as testing runner/framework", "user": {"login": "sandhujasmine", "id": 359129, "node_id": "MDQ6VXNlcjM1OTEyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/359129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandhujasmine", "html_url": "https://github.com/sandhujasmine", "followers_url": "https://api.github.com/users/sandhujasmine/followers", "following_url": "https://api.github.com/users/sandhujasmine/following{/other_user}", "gists_url": "https://api.github.com/users/sandhujasmine/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandhujasmine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandhujasmine/subscriptions", "organizations_url": "https://api.github.com/users/sandhujasmine/orgs", "repos_url": "https://api.github.com/users/sandhujasmine/repos", "events_url": "https://api.github.com/users/sandhujasmine/events{/privacy}", "received_events_url": "https://api.github.com/users/sandhujasmine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51486998, "node_id": "MDU6TGFiZWw1MTQ4Njk5OA==", "url": "https://api.github.com/repos/Pylons/colander/labels/sprintable", "name": "sprintable", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-03-11T17:32:05Z", "updated_at": "2020-04-18T04:32:24Z", "closed_at": "2020-04-18T04:32:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "In April the pytest team is holding \"adopt pytest month\" to encourage projects to consider using pytest, by pairing open source projects with experienced pytest helpers. It doesn't matter if your test suite right now is barely-there or has 100% code coverage - we think pytest can improve almost any testing situation, and we would like to invite this project to take part.\nFor more information and to sign up please check out: http://pytest.org/latest/adopt.html\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/208", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/208/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/208/events", "html_url": "https://github.com/Pylons/colander/issues/208", "id": 58780867, "node_id": "MDU6SXNzdWU1ODc4MDg2Nw==", "number": 208, "title": "Any chance of getting a new release on pypi?", "user": {"login": "Natim", "id": 229453, "node_id": "MDQ6VXNlcjIyOTQ1Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/229453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Natim", "html_url": "https://github.com/Natim", "followers_url": "https://api.github.com/users/Natim/followers", "following_url": "https://api.github.com/users/Natim/following{/other_user}", "gists_url": "https://api.github.com/users/Natim/gists{/gist_id}", "starred_url": "https://api.github.com/users/Natim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Natim/subscriptions", "organizations_url": "https://api.github.com/users/Natim/orgs", "repos_url": "https://api.github.com/users/Natim/repos", "events_url": "https://api.github.com/users/Natim/events{/privacy}", "received_events_url": "https://api.github.com/users/Natim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2015-02-24T18:18:40Z", "updated_at": "2016-01-18T09:27:03Z", "closed_at": "2016-01-16T21:43:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "They are lots of commits in master that are not in the last release.\nCould we do a release with the last master please?\n\nSee https://github.com/Pylons/colander/compare/1.0...master\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/204", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/204/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/204/events", "html_url": "https://github.com/Pylons/colander/issues/204", "id": 55943483, "node_id": "MDU6SXNzdWU1NTk0MzQ4Mw==", "number": 204, "title": "Why not allow `None` in an appstruct serialized by Number?", "user": {"login": "tisdall", "id": 4029388, "node_id": "MDQ6VXNlcjQwMjkzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4029388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tisdall", "html_url": "https://github.com/tisdall", "followers_url": "https://api.github.com/users/tisdall/followers", "following_url": "https://api.github.com/users/tisdall/following{/other_user}", "gists_url": "https://api.github.com/users/tisdall/gists{/gist_id}", "starred_url": "https://api.github.com/users/tisdall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tisdall/subscriptions", "organizations_url": "https://api.github.com/users/tisdall/orgs", "repos_url": "https://api.github.com/users/tisdall/repos", "events_url": "https://api.github.com/users/tisdall/events{/privacy}", "received_events_url": "https://api.github.com/users/tisdall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "bertjwregeer", "id": 649426, "node_id": "MDQ6VXNlcjY0OTQyNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/649426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bertjwregeer", "html_url": "https://github.com/bertjwregeer", "followers_url": "https://api.github.com/users/bertjwregeer/followers", "following_url": "https://api.github.com/users/bertjwregeer/following{/other_user}", "gists_url": "https://api.github.com/users/bertjwregeer/gists{/gist_id}", "starred_url": "https://api.github.com/users/bertjwregeer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bertjwregeer/subscriptions", "organizations_url": "https://api.github.com/users/bertjwregeer/orgs", "repos_url": "https://api.github.com/users/bertjwregeer/repos", "events_url": "https://api.github.com/users/bertjwregeer/events{/privacy}", "received_events_url": "https://api.github.com/users/bertjwregeer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bertjwregeer", "id": 649426, "node_id": "MDQ6VXNlcjY0OTQyNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/649426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bertjwregeer", "html_url": "https://github.com/bertjwregeer", "followers_url": "https://api.github.com/users/bertjwregeer/followers", "following_url": "https://api.github.com/users/bertjwregeer/following{/other_user}", "gists_url": "https://api.github.com/users/bertjwregeer/gists{/gist_id}", "starred_url": "https://api.github.com/users/bertjwregeer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bertjwregeer/subscriptions", "organizations_url": "https://api.github.com/users/bertjwregeer/orgs", "repos_url": "https://api.github.com/users/bertjwregeer/repos", "events_url": "https://api.github.com/users/bertjwregeer/events{/privacy}", "received_events_url": "https://api.github.com/users/bertjwregeer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2015-01-29T19:18:36Z", "updated_at": "2019-02-01T15:53:00Z", "closed_at": "2019-02-01T15:53:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "relates to part of #186\n\nA commit was made a while ago that removed the ability to pass `None` as an appstruct value to a `Number` type ( commit 513d860 ).  The commit says it's reverting a change related to **Strings** but then made this change to `Number`.  It seems like an odd change and is removing useful functionality.\n\nBasically, it comes down to the fact `colander.null` is not equal to `None`.  This makes sense in the cases where `None` is a valid serialization.  From the docs:\n\n> Note that colander.null has no relationship to the built-in Python None value. colander.null is used instead of None because None is a potentially valid value for some serializations and deserializations, and using it as a sentinel would prevent None from being used in this way.\n\nHowever, in the cases where `None` is not a valid value, why not treat it as equal to `colander.null` for simplicity?  The very common use case is when using an SQL DB for storing of values.  An integer column that's nullable can store both integers and None.\n\nIncidentally, where is the case where `None` is a valid value?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/200", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/200/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/200/events", "html_url": "https://github.com/Pylons/colander/issues/200", "id": 50496073, "node_id": "MDU6SXNzdWU1MDQ5NjA3Mw==", "number": 200, "title": "[Proposal] Add logs to colander", "user": {"login": "jaseemabid", "id": 601714, "node_id": "MDQ6VXNlcjYwMTcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/601714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaseemabid", "html_url": "https://github.com/jaseemabid", "followers_url": "https://api.github.com/users/jaseemabid/followers", "following_url": "https://api.github.com/users/jaseemabid/following{/other_user}", "gists_url": "https://api.github.com/users/jaseemabid/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaseemabid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaseemabid/subscriptions", "organizations_url": "https://api.github.com/users/jaseemabid/orgs", "repos_url": "https://api.github.com/users/jaseemabid/repos", "events_url": "https://api.github.com/users/jaseemabid/events{/privacy}", "received_events_url": "https://api.github.com/users/jaseemabid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-12-01T07:43:43Z", "updated_at": "2017-05-02T20:28:36Z", "closed_at": "2017-05-02T20:28:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've encountered cases when colander silently drops attributes because I forgot\nto white-list them in validation classes. It would be helpful to get logs from\ncolander of the form\n\n```\n- [DEBUG] Validating user schema \n- [DEBUG] Received attributes [id, name, age, evil]\n- [DEBUG] Validated attributes [id, name]\n- [DEBUG] Validation failed for attributes [age]\n- [DEBUG] Dropped unknown attributes [evil]\n```\n\nAny comments? \nIf this is OK, I'll try to do patch over the weekend.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/190", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/190/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/190/events", "html_url": "https://github.com/Pylons/colander/issues/190", "id": 42661107, "node_id": "MDU6SXNzdWU0MjY2MTEwNw==", "number": 190, "title": "What about dynamic default value?", "user": {"login": "fangpenlin", "id": 201615, "node_id": "MDQ6VXNlcjIwMTYxNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/201615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangpenlin", "html_url": "https://github.com/fangpenlin", "followers_url": "https://api.github.com/users/fangpenlin/followers", "following_url": "https://api.github.com/users/fangpenlin/following{/other_user}", "gists_url": "https://api.github.com/users/fangpenlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangpenlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangpenlin/subscriptions", "organizations_url": "https://api.github.com/users/fangpenlin/orgs", "repos_url": "https://api.github.com/users/fangpenlin/repos", "events_url": "https://api.github.com/users/fangpenlin/events{/privacy}", "received_events_url": "https://api.github.com/users/fangpenlin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-09-12T19:14:36Z", "updated_at": "2014-09-15T17:42:14Z", "closed_at": "2014-09-15T17:42:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometime, I want to create a JSON record with certain default values, but these values are not static ones, they could be an UUID or current timestamp. The schema would be something looks like this\n\n``` python\nclass Event(colander.MappingSchema):\n    id = colander.SchemaNode(colander.String(), default=gen_guid)\n    channel = colander.SchemaNode(colander.String())\n    timestamp = colander.SchemaNode(colander.DateTime(), default=utcnow)\n```\n\nHowever, for now, it seems `default` only supports static value, I tried to pass a function, but it treats function as the value. So I am thinking, what about make it possible to generate default dynamically? like\n\n``` python\nif callable(default):\n    value = default()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/187", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/187/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/187/events", "html_url": "https://github.com/Pylons/colander/issues/187", "id": 41945930, "node_id": "MDU6SXNzdWU0MTk0NTkzMA==", "number": 187, "title": "Colander datetime validation bug", "user": {"login": "nxvipin", "id": 227757, "node_id": "MDQ6VXNlcjIyNzc1Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/227757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nxvipin", "html_url": "https://github.com/nxvipin", "followers_url": "https://api.github.com/users/nxvipin/followers", "following_url": "https://api.github.com/users/nxvipin/following{/other_user}", "gists_url": "https://api.github.com/users/nxvipin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nxvipin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nxvipin/subscriptions", "organizations_url": "https://api.github.com/users/nxvipin/orgs", "repos_url": "https://api.github.com/users/nxvipin/repos", "events_url": "https://api.github.com/users/nxvipin/events{/privacy}", "received_events_url": "https://api.github.com/users/nxvipin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-09-04T14:53:03Z", "updated_at": "2014-11-28T06:21:24Z", "closed_at": "2014-11-27T15:54:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Steps to reproduce:\n\n``` python\nimport colander as C\n\nclass DateTimeTest(C.MappingSchema):\n    date = C.SchemaNode(C.DateTime(), title='date')\n\nschema = DateTimeTest()\n\n# Test Input\nschema.deserialize({'date': '2014-09-09 10:9:00'})\n```\n\nThis should either raise an exception or return a datetime object with minute set as 9. Currently it returns a datetime object with minute set as 0.\n\n``` python\nschema.deserialize({'date': '2014-09-09 10:9:99'})\n```\n\nThis should definitely raise an exception but it returns a datetime object with minute and second set to 0. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/179", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/179/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/179/events", "html_url": "https://github.com/Pylons/colander/issues/179", "id": 37487509, "node_id": "MDU6SXNzdWUzNzQ4NzUwOQ==", "number": 179, "title": "flatten() produces incompatible dotted names for list", "user": {"login": "voxspox", "id": 1503565, "node_id": "MDQ6VXNlcjE1MDM1NjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1503565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voxspox", "html_url": "https://github.com/voxspox", "followers_url": "https://api.github.com/users/voxspox/followers", "following_url": "https://api.github.com/users/voxspox/following{/other_user}", "gists_url": "https://api.github.com/users/voxspox/gists{/gist_id}", "starred_url": "https://api.github.com/users/voxspox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voxspox/subscriptions", "organizations_url": "https://api.github.com/users/voxspox/orgs", "repos_url": "https://api.github.com/users/voxspox/repos", "events_url": "https://api.github.com/users/voxspox/events{/privacy}", "received_events_url": "https://api.github.com/users/voxspox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-07-09T17:10:35Z", "updated_at": "2015-07-13T15:58:57Z", "closed_at": "2015-07-13T15:58:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "flatten() produces dotted names with a ending '.' for a sequence type, p.ex. `answer.0.`\nWhen using these names with set_value() this leads to an exception:\n`AssertionError: Can't call 'set_value' on a leaf node.`\n\nsample code:\n\n``` python\nimport colander\n\nclass Schema(colander.MappingSchema):\n    answers = colander.SchemaNode(\n                colander.Sequence(),\n                colander.SchemaNode(colander.String(), name='answer'),\n                default=[u'1',u'2',u'3',u'4'],\n                )\n\nschema = Schema()\n\nd1 = schema.serialize({})\nprint 'data:', d1\n\nd1_flat = schema.flatten(d1)\nprint 'flatten:', d1_flat\n\n# pick one dotted name\ndotted_name = d1_flat.keys()[0]\nprint 'a dotted name:', dotted_name\n\n# this works:\nschema.set_value(d1, 'answers.0' , 'test')\nprint d1\n\n# dotted names have a ending '.' which confuses set_value\nschema.set_value(d1, dotted_name , 'test')\nprint d1\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/174", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/174/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/174/events", "html_url": "https://github.com/Pylons/colander/issues/174", "id": 33829377, "node_id": "MDU6SXNzdWUzMzgyOTM3Nw==", "number": 174, "title": "SchemaNode subclasses title being ignored", "user": {"login": "Mr-F", "id": 3585440, "node_id": "MDQ6VXNlcjM1ODU0NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3585440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mr-F", "html_url": "https://github.com/Mr-F", "followers_url": "https://api.github.com/users/Mr-F/followers", "following_url": "https://api.github.com/users/Mr-F/following{/other_user}", "gists_url": "https://api.github.com/users/Mr-F/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mr-F/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mr-F/subscriptions", "organizations_url": "https://api.github.com/users/Mr-F/orgs", "repos_url": "https://api.github.com/users/Mr-F/repos", "events_url": "https://api.github.com/users/Mr-F/events{/privacy}", "received_events_url": "https://api.github.com/users/Mr-F/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-05-19T19:32:26Z", "updated_at": "2015-07-13T16:13:23Z", "closed_at": "2015-07-13T16:13:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems when you create a custom SchemaNode as per the example in the document i.e.\n\n```\nclass EmailSchemaNode(colander.SchemaNode):\n    schema_type = colander.String\n    title = 'Email Address'\n    validator = colander.Email()\n```\n\nand then use it like this\n\n```\nclass MySchema(colander.MappingSchema):\n    email = EmailSchemaNode()\n```\n\nthe label displays \"Email\" instead of \"Email Address\".  I would have thought that specify the title in the node would mean it would be used as the default value, or am I missing something\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/171", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/171/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/171/events", "html_url": "https://github.com/Pylons/colander/issues/171", "id": 31204213, "node_id": "MDU6SXNzdWUzMTIwNDIxMw==", "number": 171, "title": "Email validator dot support", "user": {"login": "VladUlshin", "id": 7244618, "node_id": "MDQ6VXNlcjcyNDQ2MTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7244618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VladUlshin", "html_url": "https://github.com/VladUlshin", "followers_url": "https://api.github.com/users/VladUlshin/followers", "following_url": "https://api.github.com/users/VladUlshin/following{/other_user}", "gists_url": "https://api.github.com/users/VladUlshin/gists{/gist_id}", "starred_url": "https://api.github.com/users/VladUlshin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VladUlshin/subscriptions", "organizations_url": "https://api.github.com/users/VladUlshin/orgs", "repos_url": "https://api.github.com/users/VladUlshin/repos", "events_url": "https://api.github.com/users/VladUlshin/events{/privacy}", "received_events_url": "https://api.github.com/users/VladUlshin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2014-04-09T23:38:05Z", "updated_at": "2019-10-15T07:01:56Z", "closed_at": "2019-07-13T18:56:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there!\nCurrent  (v1.0b01)  Email validator uses Regex \nEMAIL_RE = \"(?i)^[A-Z0-9._%!#$%&'*+-/=?^_`{|}~()]+@[A-Z0-9]+([.-][A-Z0-9]+)*.[A-Z]{2,8}$\"\n\nThis allows dots to be first and last character of the email local part, as well as multiple dots. i.e. The following email are not RFC822 valid: .localpart@domain.com   localpart.@domain.com  localp..art@domain.com but passes colander Email validator.\n\nchange regex to something like this should eliminate the problem\nEMAIL_RE = \"(?i)(?!^[.]|._[.]@._|._[.]{2,}._)^[A-Z0-9._%!#$%&'*+-/=?^_`{|}~()]+@[A-Z0-9]+([.-][A-Z0-9]+)*.[A-Z]{2,8}$\"\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/170", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/170/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/170/events", "html_url": "https://github.com/Pylons/colander/issues/170", "id": 30243140, "node_id": "MDU6SXNzdWUzMDI0MzE0MA==", "number": 170, "title": "Support for bypassing default value injection.", "user": {"login": "AndreLouisCaron", "id": 135974, "node_id": "MDQ6VXNlcjEzNTk3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/135974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreLouisCaron", "html_url": "https://github.com/AndreLouisCaron", "followers_url": "https://api.github.com/users/AndreLouisCaron/followers", "following_url": "https://api.github.com/users/AndreLouisCaron/following{/other_user}", "gists_url": "https://api.github.com/users/AndreLouisCaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreLouisCaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreLouisCaron/subscriptions", "organizations_url": "https://api.github.com/users/AndreLouisCaron/orgs", "repos_url": "https://api.github.com/users/AndreLouisCaron/repos", "events_url": "https://api.github.com/users/AndreLouisCaron/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreLouisCaron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-03-26T19:24:34Z", "updated_at": "2016-09-22T23:58:16Z", "closed_at": "2016-09-22T23:58:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there!\n\nI ran into this case today, and I can't figure out how to do it with Colander.\n\nI defined a schema for validation of user input, say:\n\n```\nclass PersonSchema(colander.MappingSchema):\n    name = colander.SchemaNode(colander.String())\n    phone = colander.SchemaNode(colander.String(), missing=None)\n    email = colander.SchemaNode(colander.String(), missing=None) \n```\n\nAll goes fine when I use this to create a new `Person` entry in the database.  However, I also need to allow users to update a subset of the information (e.g. the phone and/or the email) and leave the rest of their information intact.\n\nI would like to re-use the same `PersonSchema` for the partial update input validation, but if I do that, colander will inject the schema nodes' `missing` value for all fields not provided in the input.\n\nThe current workaround is to perform validation, then do a second pass to remove the default values injected by deserialization.  Apart from being clumbersome, it adds unnecessary overhead.\n\nDeserialization should have an argument that disables injecting missing values.\n\nJust to be clear: the existing behavior is desired, but I'd like to _contextually_ turn it off.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/169", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/169/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/169/events", "html_url": "https://github.com/Pylons/colander/issues/169", "id": 28476553, "node_id": "MDU6SXNzdWUyODQ3NjU1Mw==", "number": 169, "title": "Any chance of getting a new release on pypi?", "user": {"login": "neilferreira", "id": 1369584, "node_id": "MDQ6VXNlcjEzNjk1ODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1369584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilferreira", "html_url": "https://github.com/neilferreira", "followers_url": "https://api.github.com/users/neilferreira/followers", "following_url": "https://api.github.com/users/neilferreira/following{/other_user}", "gists_url": "https://api.github.com/users/neilferreira/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilferreira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilferreira/subscriptions", "organizations_url": "https://api.github.com/users/neilferreira/orgs", "repos_url": "https://api.github.com/users/neilferreira/repos", "events_url": "https://api.github.com/users/neilferreira/events{/privacy}", "received_events_url": "https://api.github.com/users/neilferreira/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2014-02-28T03:47:55Z", "updated_at": "2015-02-24T18:39:38Z", "closed_at": "2015-01-29T19:00:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to use this feature in a release and would like a new tag for my buildout file: https://github.com/Pylons/colander/commit/80058f11e907527c894a99bbbbf48e2f1782867d\n\nAny chance you guys can publish a new release? I would like to avoid using mr.developer.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/159", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/159/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/159/events", "html_url": "https://github.com/Pylons/colander/issues/159", "id": 24970506, "node_id": "MDU6SXNzdWUyNDk3MDUwNg==", "number": 159, "title": "Email validator rejects valid email addresses, accept some invalid ones", "user": {"login": "vincent-hatakeyama", "id": 6304302, "node_id": "MDQ6VXNlcjYzMDQzMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/6304302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincent-hatakeyama", "html_url": "https://github.com/vincent-hatakeyama", "followers_url": "https://api.github.com/users/vincent-hatakeyama/followers", "following_url": "https://api.github.com/users/vincent-hatakeyama/following{/other_user}", "gists_url": "https://api.github.com/users/vincent-hatakeyama/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincent-hatakeyama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincent-hatakeyama/subscriptions", "organizations_url": "https://api.github.com/users/vincent-hatakeyama/orgs", "repos_url": "https://api.github.com/users/vincent-hatakeyama/repos", "events_url": "https://api.github.com/users/vincent-hatakeyama/events{/privacy}", "received_events_url": "https://api.github.com/users/vincent-hatakeyama/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-01-02T15:46:53Z", "updated_at": "2014-02-09T00:32:43Z", "closed_at": "2014-02-09T00:32:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "The email validator rejects valid email addresses.\nFor example, new TLD are rejected, some characters also are (especially $, *), quoting the local part\u2026\n\nIt also accepts invalid email addresses, like abc..stuff@example.org.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/155", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/155/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/155/events", "html_url": "https://github.com/Pylons/colander/issues/155", "id": 22912626, "node_id": "MDU6SXNzdWUyMjkxMjYyNg==", "number": 155, "title": "docs: basics.html / Subclassing SchemaNode", "user": {"login": "agroszer", "id": 350912, "node_id": "MDQ6VXNlcjM1MDkxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/350912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agroszer", "html_url": "https://github.com/agroszer", "followers_url": "https://api.github.com/users/agroszer/followers", "following_url": "https://api.github.com/users/agroszer/following{/other_user}", "gists_url": "https://api.github.com/users/agroszer/gists{/gist_id}", "starred_url": "https://api.github.com/users/agroszer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agroszer/subscriptions", "organizations_url": "https://api.github.com/users/agroszer/orgs", "repos_url": "https://api.github.com/users/agroszer/repos", "events_url": "https://api.github.com/users/agroszer/events{/privacy}", "received_events_url": "https://api.github.com/users/agroszer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-11-19T13:48:03Z", "updated_at": "2014-04-15T17:08:21Z", "closed_at": "2014-04-15T17:08:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\nclass RangedInt(colander.SchemaNode):\n    typ = colander.Int()\n```\n\nThat's probably\n\n```\nclass RangedInt(colander.SchemaNode):\n    schema_type = colander.Int()\n```\n\ntyp vs. schema_type\n\nor am I wrong?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/152", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/152/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/152/events", "html_url": "https://github.com/Pylons/colander/issues/152", "id": 22526475, "node_id": "MDU6SXNzdWUyMjUyNjQ3NQ==", "number": 152, "title": "Language translated error messages in Invalid.asdict()?", "user": {"login": "sq9mev", "id": 592307, "node_id": "MDQ6VXNlcjU5MjMwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/592307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sq9mev", "html_url": "https://github.com/sq9mev", "followers_url": "https://api.github.com/users/sq9mev/followers", "following_url": "https://api.github.com/users/sq9mev/following{/other_user}", "gists_url": "https://api.github.com/users/sq9mev/gists{/gist_id}", "starred_url": "https://api.github.com/users/sq9mev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sq9mev/subscriptions", "organizations_url": "https://api.github.com/users/sq9mev/orgs", "repos_url": "https://api.github.com/users/sq9mev/repos", "events_url": "https://api.github.com/users/sq9mev/events{/privacy}", "received_events_url": "https://api.github.com/users/sq9mev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2013-11-12T15:28:10Z", "updated_at": "2014-03-11T17:35:00Z", "closed_at": "2014-03-11T17:35:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Colander is used sometimes with cornice, and cornice uses Invalid.asdict() method to build it's error messages. Unfortunately asdict() returns basic (non-language-translated) error report, that's why it's impossible to have localized error report when using cornice with colander.\n\nThere's one solution here: https://groups.google.com/forum/#!msg/pylons-discuss/f10m24zyVeo/6Yo795hE7psJ [1] but this requires custom asdict() implementation, and is far from DRY.\n\nAdditionally ametaireau says that it's not cornice issue, but colander one: https://github.com/mozilla-services/cornice/issues/200#issuecomment-28290109, however he says that it would be nice to have translated error messages.\n\nThe simpliest solution seems to allow passing optional argument request or translator to asdict(), and use it like in [1], but i'm not sure if it's not too specyfic as for asdict() method. On the other hand, colander and cornice may be used to validate and [de]serialize quite complicated data structures, and error messages provided by asdict() are very helpful here, the only problem is that they lack translation.\n\nAny idea?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/150", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/150/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/150/events", "html_url": "https://github.com/Pylons/colander/issues/150", "id": 22355971, "node_id": "MDU6SXNzdWUyMjM1NTk3MQ==", "number": 150, "title": "SchemaNode subclasses don't properly add children", "user": {"login": "mmerickel", "id": 487237, "node_id": "MDQ6VXNlcjQ4NzIzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/487237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmerickel", "html_url": "https://github.com/mmerickel", "followers_url": "https://api.github.com/users/mmerickel/followers", "following_url": "https://api.github.com/users/mmerickel/following{/other_user}", "gists_url": "https://api.github.com/users/mmerickel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmerickel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmerickel/subscriptions", "organizations_url": "https://api.github.com/users/mmerickel/orgs", "repos_url": "https://api.github.com/users/mmerickel/repos", "events_url": "https://api.github.com/users/mmerickel/events{/privacy}", "received_events_url": "https://api.github.com/users/mmerickel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-11-08T18:53:12Z", "updated_at": "2016-01-16T21:39:19Z", "closed_at": "2016-01-16T21:39:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Prior to 1.0, it was possible to create children of a `MappingSchema` via \n\n``` python\ncolander.MappingSchema(colander.SchemaNode(colander.Integer(), name='foo')).\n```\n\nHowever, this is broken, as the `schema_type` property is ignored, so `MappingSchema` still expects the first argument to be a type. The following is the fallback I'm having to use right now.\n\n``` python\ncolander.SchemaNode(colander.Mapping(), colander.SchemaNode(colander.Integer(), name='foo'))\n```\n\nThis looks to be due to some decisions made in the `SchemaNode.__init__` which aren't really lining up with what I'd expect.\n\nhttps://github.com/Pylons/colander/blob/master/colander/__init__.py#L1809\n\nIn my mind, the `MappingSchema` subclass should override the `__init__` and call super with the appropriate type to keep the hierarchy working as expected.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/149", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/149/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/149/events", "html_url": "https://github.com/Pylons/colander/issues/149", "id": 22278574, "node_id": "MDU6SXNzdWUyMjI3ODU3NA==", "number": 149, "title": "error : Schema node construction without a typ argument", "user": {"login": "sdementen", "id": 1304950, "node_id": "MDQ6VXNlcjEzMDQ5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1304950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdementen", "html_url": "https://github.com/sdementen", "followers_url": "https://api.github.com/users/sdementen/followers", "following_url": "https://api.github.com/users/sdementen/following{/other_user}", "gists_url": "https://api.github.com/users/sdementen/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdementen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdementen/subscriptions", "organizations_url": "https://api.github.com/users/sdementen/orgs", "repos_url": "https://api.github.com/users/sdementen/repos", "events_url": "https://api.github.com/users/sdementen/events{/privacy}", "received_events_url": "https://api.github.com/users/sdementen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-11-07T16:39:16Z", "updated_at": "2014-04-15T17:08:21Z", "closed_at": "2014-04-15T17:08:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "with 1.0b1, if I define\n\n``` python\nclass User(colander.MappingSchema):\n    @colander.instantiate()\n    class age(colander.SchemaNode):\n        typ = colander.Integer()\n```\n\ni get the message \"NotImplementedError: Schema node construction without a typ argument or a schema_type() callable present on the node class\".\n\nI wonder if the **init** in _SchemaNode shouldn't start by\n\n``` python\n    def __init__(self, *arg, **kw):\n        # bw compat forces us to treat first arg as type always\n        if 'typ' in kw:\n            self.typ = kw.pop('typ')\n            _add_node_children(self, arg)\n        elif arg:\n            self.typ = arg[0]\n            _add_node_children(self, arg[1:])\n        elif hasattr(self, 'typ'):\n            pass\n        else:\n            self.typ = self.schema_type()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/148", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/148/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/148/events", "html_url": "https://github.com/Pylons/colander/issues/148", "id": 22271395, "node_id": "MDU6SXNzdWUyMjI3MTM5NQ==", "number": 148, "title": "how to declare after_bind in declarative way", "user": {"login": "sdementen", "id": 1304950, "node_id": "MDQ6VXNlcjEzMDQ5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1304950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdementen", "html_url": "https://github.com/sdementen", "followers_url": "https://api.github.com/users/sdementen/followers", "following_url": "https://api.github.com/users/sdementen/following{/other_user}", "gists_url": "https://api.github.com/users/sdementen/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdementen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdementen/subscriptions", "organizations_url": "https://api.github.com/users/sdementen/orgs", "repos_url": "https://api.github.com/users/sdementen/repos", "events_url": "https://api.github.com/users/sdementen/events{/privacy}", "received_events_url": "https://api.github.com/users/sdementen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2013-11-07T15:05:20Z", "updated_at": "2013-11-07T15:11:34Z", "closed_at": "2013-11-07T15:11:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the declarative form, is it possible to declare after_bind in the class (vs passing the after_bind in the constructor) ?\nInstead of \n\n``` python\nclass UserSchema(colander.MappingSchema):\n  name = colander.SchemaNode(colander.String())\ndef after_bind(node, kw):\n   # do something\nuser = UserSchema(after_bind=after_bind)\n```\n\nhave\n\n``` python\nclass User(colander.MappingSchema):\n  name = colander.SchemaNode(colander.String())\n  def after_bind(self, kw):\n     # do something\n```\n\nI am using 0.9.9 ... i think this is solved in 1.0\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/145", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/145/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/145/events", "html_url": "https://github.com/Pylons/colander/issues/145", "id": 21112202, "node_id": "MDU6SXNzdWUyMTExMjIwMg==", "number": 145, "title": "widget.TextInputWidget ignores size parameter in textinput template", "user": {"login": "joelburton", "id": 1178518, "node_id": "MDQ6VXNlcjExNzg1MTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1178518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joelburton", "html_url": "https://github.com/joelburton", "followers_url": "https://api.github.com/users/joelburton/followers", "following_url": "https://api.github.com/users/joelburton/following{/other_user}", "gists_url": "https://api.github.com/users/joelburton/gists{/gist_id}", "starred_url": "https://api.github.com/users/joelburton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joelburton/subscriptions", "organizations_url": "https://api.github.com/users/joelburton/orgs", "repos_url": "https://api.github.com/users/joelburton/repos", "events_url": "https://api.github.com/users/joelburton/events{/privacy}", "received_events_url": "https://api.github.com/users/joelburton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-10-16T21:32:38Z", "updated_at": "2013-10-17T07:43:39Z", "closed_at": "2013-10-17T07:43:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "The TextInputWidget's docstring includes a \"size\" parameter. This is not referenced by the class or used by the textinput template--making it difficult to size a TextInputWidget field except via CSS hacks.\n\nAlso, as a potential useful enhancement: a maxlen parameter would be nice, too.\n\n(& Chris: I'm happy to make these changes; if you'd like me to do so and make a pull request, let me know)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/144", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/144/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/144/events", "html_url": "https://github.com/Pylons/colander/issues/144", "id": 20811302, "node_id": "MDU6SXNzdWUyMDgxMTMwMg==", "number": 144, "title": "Serialize default=colander.drop doesn't work with the Sequence", "user": {"login": "olegpidsadnyi", "id": 2608181, "node_id": "MDQ6VXNlcjI2MDgxODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2608181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegpidsadnyi", "html_url": "https://github.com/olegpidsadnyi", "followers_url": "https://api.github.com/users/olegpidsadnyi/followers", "following_url": "https://api.github.com/users/olegpidsadnyi/following{/other_user}", "gists_url": "https://api.github.com/users/olegpidsadnyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegpidsadnyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegpidsadnyi/subscriptions", "organizations_url": "https://api.github.com/users/olegpidsadnyi/orgs", "repos_url": "https://api.github.com/users/olegpidsadnyi/repos", "events_url": "https://api.github.com/users/olegpidsadnyi/events{/privacy}", "received_events_url": "https://api.github.com/users/olegpidsadnyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-10-10T14:38:32Z", "updated_at": "2016-01-19T01:44:59Z", "closed_at": "2016-01-19T01:44:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had to subclass the Sequence and override the _impl(\n\nand return the value if it is null or drop. otherwise it is trying to enumerate the drop or even catches it in the _validate\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/143", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/143/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/143/events", "html_url": "https://github.com/Pylons/colander/issues/143", "id": 20617761, "node_id": "MDU6SXNzdWUyMDYxNzc2MQ==", "number": 143, "title": "unknown='raise' doesn't work", "user": {"login": "olegpidsadnyi", "id": 2608181, "node_id": "MDQ6VXNlcjI2MDgxODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2608181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegpidsadnyi", "html_url": "https://github.com/olegpidsadnyi", "followers_url": "https://api.github.com/users/olegpidsadnyi/followers", "following_url": "https://api.github.com/users/olegpidsadnyi/following{/other_user}", "gists_url": "https://api.github.com/users/olegpidsadnyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegpidsadnyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegpidsadnyi/subscriptions", "organizations_url": "https://api.github.com/users/olegpidsadnyi/orgs", "repos_url": "https://api.github.com/users/olegpidsadnyi/repos", "events_url": "https://api.github.com/users/olegpidsadnyi/events{/privacy}", "received_events_url": "https://api.github.com/users/olegpidsadnyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-10-07T15:13:06Z", "updated_at": "2013-10-07T15:49:15Z", "closed_at": "2013-10-07T15:49:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like it should not compare:\nself.unknown == 'raise'\nbut\n\nif node.unknown == 'raise'\ninstead\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/141", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/141/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/141/events", "html_url": "https://github.com/Pylons/colander/issues/141", "id": 19552828, "node_id": "MDU6SXNzdWUxOTU1MjgyOA==", "number": 141, "title": "Newly introduced AttributeError when using colander.deferred with callables.", "user": {"login": "thruflo", "id": 60015, "node_id": "MDQ6VXNlcjYwMDE1", "avatar_url": "https://avatars1.githubusercontent.com/u/60015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thruflo", "html_url": "https://github.com/thruflo", "followers_url": "https://api.github.com/users/thruflo/followers", "following_url": "https://api.github.com/users/thruflo/following{/other_user}", "gists_url": "https://api.github.com/users/thruflo/gists{/gist_id}", "starred_url": "https://api.github.com/users/thruflo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thruflo/subscriptions", "organizations_url": "https://api.github.com/users/thruflo/orgs", "repos_url": "https://api.github.com/users/thruflo/repos", "events_url": "https://api.github.com/users/thruflo/events{/privacy}", "received_events_url": "https://api.github.com/users/thruflo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-09-16T14:15:45Z", "updated_at": "2013-10-28T09:12:35Z", "closed_at": "2013-09-16T19:03:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, pull request #134 raises an AttributeError when passing callables to\ncolander.deferred, i.e.: colander.deferred now expects its arg to be a\nfunction, whereas before it could be an instance with a `__call__` method.\n\nIs this intended?  Or is it intended that the decorator continue to work\nwith arbitrary callables?\n\nFor example, I have code (which worked fine in colander 1.0a5) like:\n\n```\nproduct_widget = colander.deferred(ModelWidget(Product))\n```\n\nWhere `ModelWidget` is along the lines of:\n\n```\nclass ModelWidget(object):\n    def __call__(self, node, kw):\n        # returns a widget with values populated from the database\n```\n\nUpdating to 1.0b1 now raises an exception at import time:\n\n```\n14:55:12 web.1      |   File \"XXX\", line XXX, in <module>\n14:55:12 web.1      |     product_widget = colander.deferred(ModelWidget(Product))\n14:55:12 web.1      |   File \"XXX/lib/python2.7/site-packages/colander/__init__.py\", line 2128, in __init__\n14:55:12 web.1      |     functools.update_wrapper(self, wrapped)\n14:55:12 web.1      |   File \"/usr/local/Cellar/python/2.7.2/lib/python2.7/functools.py\", line 33, in update_wrapper\n14:55:12 web.1      |     setattr(wrapper, attr, getattr(wrapped, attr))\n14:55:12 web.1      | AttributeError: 'ModelWidget' object has no attribute '__name__'\n```\n\nLooking at the [functools docs](http://docs.python.org/2/library/functools.html#functools.update_wrapper) it seems pretty clear that `wrapped` needs to\nbe a function with a `__name__` attribute.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/139", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/139/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/139/events", "html_url": "https://github.com/Pylons/colander/issues/139", "id": 18920196, "node_id": "MDU6SXNzdWUxODkyMDE5Ng==", "number": 139, "title": "The new support for default=drop just doesn't work", "user": {"login": "damz", "id": 110678, "node_id": "MDQ6VXNlcjExMDY3OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/110678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/damz", "html_url": "https://github.com/damz", "followers_url": "https://api.github.com/users/damz/followers", "following_url": "https://api.github.com/users/damz/following{/other_user}", "gists_url": "https://api.github.com/users/damz/gists{/gist_id}", "starred_url": "https://api.github.com/users/damz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/damz/subscriptions", "organizations_url": "https://api.github.com/users/damz/orgs", "repos_url": "https://api.github.com/users/damz/repos", "events_url": "https://api.github.com/users/damz/events{/privacy}", "received_events_url": "https://api.github.com/users/damz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-09-03T16:59:58Z", "updated_at": "2014-02-09T21:18:08Z", "closed_at": "2014-02-09T20:36:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just copy-pasting the example from `CHANGES.txt`:\n\n```\nimport colander\n\nclass What(colander.MappingSchema):\n    thing = colander.SchemaNode(colander.String(), default=colander.drop,\n        missing=None)\n\nresult = What().serialize({}) # no \"thing\" in mapping\nassert result == {}\n```\n\nResult is actually:\n\n```\n{'thing': u'<colander._drop object at 0x1f26190>'}\n```\n\n(ie. the `drop` object cast to a string)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/138", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/138/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/138/events", "html_url": "https://github.com/Pylons/colander/issues/138", "id": 18919058, "node_id": "MDU6SXNzdWUxODkxOTA1OA==", "number": 138, "title": "How should the default keyword on SchemaNode be used?", "user": {"login": "tonnydourado", "id": 891178, "node_id": "MDQ6VXNlcjg5MTE3OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/891178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonnydourado", "html_url": "https://github.com/tonnydourado", "followers_url": "https://api.github.com/users/tonnydourado/followers", "following_url": "https://api.github.com/users/tonnydourado/following{/other_user}", "gists_url": "https://api.github.com/users/tonnydourado/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonnydourado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonnydourado/subscriptions", "organizations_url": "https://api.github.com/users/tonnydourado/orgs", "repos_url": "https://api.github.com/users/tonnydourado/repos", "events_url": "https://api.github.com/users/tonnydourado/events{/privacy}", "received_events_url": "https://api.github.com/users/tonnydourado/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-09-03T16:40:07Z", "updated_at": "2013-09-03T17:54:52Z", "closed_at": "2013-09-03T17:54:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to specify an optional field, but it raises colander.Invalid when the value is empty, even if I passed a default value to the constructor.\n\nCode: http://pastebin.com/VBuBy32X\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/137", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/137/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/137/events", "html_url": "https://github.com/Pylons/colander/issues/137", "id": 18731668, "node_id": "MDU6SXNzdWUxODczMTY2OA==", "number": 137, "title": "Serializing datetime data from UTC to localtime trouble", "user": {"login": "Gemmu", "id": 2232590, "node_id": "MDQ6VXNlcjIyMzI1OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2232590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gemmu", "html_url": "https://github.com/Gemmu", "followers_url": "https://api.github.com/users/Gemmu/followers", "following_url": "https://api.github.com/users/Gemmu/following{/other_user}", "gists_url": "https://api.github.com/users/Gemmu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gemmu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gemmu/subscriptions", "organizations_url": "https://api.github.com/users/Gemmu/orgs", "repos_url": "https://api.github.com/users/Gemmu/repos", "events_url": "https://api.github.com/users/Gemmu/events{/privacy}", "received_events_url": "https://api.github.com/users/Gemmu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-08-29T13:46:50Z", "updated_at": "2013-08-29T16:35:41Z", "closed_at": "2013-08-29T16:35:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have set colander.DateTime to use a timezone (offset +2 and day light savings). I did this by subclassing th tzinfo in python.\n\nWhen i deserialize a datetime string of \"2013-08-16 07:00:00\" it creates a datetime object of datetime.datetime(2013, 8, 16, 7, 0, tzinfo=TimeZone object at...) which prints out as \"2013-08-16T07:00:00+03:00\".\n\nData is then stored in MongoDB as ISODate(\"2013-08-16T04: 00: 00.0Z\")-object. Which in my mind seems right, so all the datetimes in database are in UTC.\n\nWhen i try to serialize the saved datetime back to string the database hands the appstruct to colander in the form of datetime.datetime(2013, 8, 16, 4, 0) without timezone info. So I would assume it should be handled as UTC, right? But when the data is passed to colander to serialize, it adds the timezone and the result is\n\"2013-08-16T04:00:00+03:00\".\n\nAm I missing something here or is this a bug?\n\nHere's my code, in case needed.\n\n``` python\nclass TimeZone(tzinfo):\n    def __init__(self, offset, isdst, name):\n        self.offset = offset\n        self.isdst = isdst\n        self.name = name\n    def utcoffset(self, dt):\n        return timedelta(hours=self.offset) + self.dst(dt)\n    def dst(self, dt):\n        return timedelta(hours=1) if self.isdst else timedelta(0)\n    def tzname(self, dt):\n        return self.name\n\ntimezone = TimeZone(+2, True, \"Finland/Helsinki\")\n\nclass Data(colander.MappingSchema):\n    time = colander.SchemaNode(\n        colander.DateTime(timezone)\n        )\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/135", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/135/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/135/events", "html_url": "https://github.com/Pylons/colander/issues/135", "id": 18346505, "node_id": "MDU6SXNzdWUxODM0NjUwNQ==", "number": 135, "title": "colander installs stray .po & .pot files", "user": {"login": "mgorny", "id": 110765, "node_id": "MDQ6VXNlcjExMDc2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/110765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgorny", "html_url": "https://github.com/mgorny", "followers_url": "https://api.github.com/users/mgorny/followers", "following_url": "https://api.github.com/users/mgorny/following{/other_user}", "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions", "organizations_url": "https://api.github.com/users/mgorny/orgs", "repos_url": "https://api.github.com/users/mgorny/repos", "events_url": "https://api.github.com/users/mgorny/events{/privacy}", "received_events_url": "https://api.github.com/users/mgorny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-08-21T10:30:34Z", "updated_at": "2013-08-21T12:39:07Z", "closed_at": "2013-08-21T12:39:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n--- /usr/lib64/python2.7/site-packages/colander/locale/\n>>> /usr/lib64/python2.7/site-packages/colander/locale/colander.pot\n--- /usr/lib64/python2.7/site-packages/colander/locale/cs/\n--- /usr/lib64/python2.7/site-packages/colander/locale/cs/LC_MESSAGES/\n>>> /usr/lib64/python2.7/site-packages/colander/locale/cs/LC_MESSAGES/colander.mo\n>>> /usr/lib64/python2.7/site-packages/colander/locale/cs/LC_MESSAGES/colander.po\n--- /usr/lib64/python2.7/site-packages/colander/locale/de_DE/\n--- /usr/lib64/python2.7/site-packages/colander/locale/de_DE/LC_MESSAGES/\n>>> /usr/lib64/python2.7/site-packages/colander/locale/de_DE/LC_MESSAGES/colander.mo\n>>> /usr/lib64/python2.7/site-packages/colander/locale/de_DE/LC_MESSAGES/colander.po\n```\n\netc.\n\nThe `.po` and `.pot` files are merely sources for messages and are not used by anything in runtime. Therefore, they shouldn't be installed.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/120", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/120/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/120/events", "html_url": "https://github.com/Pylons/colander/issues/120", "id": 17267236, "node_id": "MDU6SXNzdWUxNzI2NzIzNg==", "number": 120, "title": "autobind feature?", "user": {"login": "tisdall", "id": 4029388, "node_id": "MDQ6VXNlcjQwMjkzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4029388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tisdall", "html_url": "https://github.com/tisdall", "followers_url": "https://api.github.com/users/tisdall/followers", "following_url": "https://api.github.com/users/tisdall/following{/other_user}", "gists_url": "https://api.github.com/users/tisdall/gists{/gist_id}", "starred_url": "https://api.github.com/users/tisdall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tisdall/subscriptions", "organizations_url": "https://api.github.com/users/tisdall/orgs", "repos_url": "https://api.github.com/users/tisdall/repos", "events_url": "https://api.github.com/users/tisdall/events{/privacy}", "received_events_url": "https://api.github.com/users/tisdall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-07-26T14:53:59Z", "updated_at": "2013-08-10T07:55:07Z", "closed_at": "2013-08-10T07:55:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The binding feature seems like a great feature.  However, it means that you have to know beforehand to call bind() before [de]serialize().  It would be nice if you could set an `autobind` variable on a SchemaNode so that [de]serialize() would automatically call `bind()` for you.\n\nThe specific use-case I have in mind is https://github.com/stefanofontanelli/ColanderAlchemy/ where the schema is automatically generated and it's possible the schema may have deferred elements.  Currently the code never uses deferred elements because the end user will likely not remember (or know) to call bind() before [de]serialize().\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/119", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/119/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/119/events", "html_url": "https://github.com/Pylons/colander/issues/119", "id": 17215700, "node_id": "MDU6SXNzdWUxNzIxNTcwMA==", "number": 119, "title": "Slightly incorrect German translations", "user": {"login": "danwerner", "id": 171729, "node_id": "MDQ6VXNlcjE3MTcyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/171729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danwerner", "html_url": "https://github.com/danwerner", "followers_url": "https://api.github.com/users/danwerner/followers", "following_url": "https://api.github.com/users/danwerner/following{/other_user}", "gists_url": "https://api.github.com/users/danwerner/gists{/gist_id}", "starred_url": "https://api.github.com/users/danwerner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danwerner/subscriptions", "organizations_url": "https://api.github.com/users/danwerner/orgs", "repos_url": "https://api.github.com/users/danwerner/repos", "events_url": "https://api.github.com/users/danwerner/events{/privacy}", "received_events_url": "https://api.github.com/users/danwerner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51486984, "node_id": "MDU6TGFiZWw1MTQ4Njk4NA==", "url": "https://api.github.com/repos/Pylons/colander/labels/bug", "name": "bug", "color": "e11d21", "default": true, "description": null}, {"id": 51486998, "node_id": "MDU6TGFiZWw1MTQ4Njk5OA==", "url": "https://api.github.com/repos/Pylons/colander/labels/sprintable", "name": "sprintable", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-07-25T14:53:04Z", "updated_at": "2013-08-17T12:35:41Z", "closed_at": "2013-08-17T12:35:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "The German colander.po has:\n\n```\nmsgid \"Shorter than minimum length ${min}\"\nmsgstr \"K\u00fcrzer als erlaubt, die Mindestl\u00e4nge betr\u00e4gt ${min} Zeichen\"\n\nmsgid \"Longer than maximum length ${max}\"\nmsgstr \"L\u00e4nger als erlaubt, die Maximall\u00e4nge betr\u00e4gt ${max} Zeichen\"\n```\n\nThe English version is non-specific as to _whose_ length is too short/long. However, the German version specifies \"Zeichen\" (characters), which is incorrect if the Range validator is used for sequences etc.\n\nThe simples solution would be to simply leave out the word \"Zeichen\" completely.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/116", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/116/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/116/events", "html_url": "https://github.com/Pylons/colander/issues/116", "id": 16529662, "node_id": "MDU6SXNzdWUxNjUyOTY2Mg==", "number": 116, "title": "Hard to use unknown='preserve' in mapping schema", "user": {"login": "AndreLouisCaron", "id": 135974, "node_id": "MDQ6VXNlcjEzNTk3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/135974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreLouisCaron", "html_url": "https://github.com/AndreLouisCaron", "followers_url": "https://api.github.com/users/AndreLouisCaron/followers", "following_url": "https://api.github.com/users/AndreLouisCaron/following{/other_user}", "gists_url": "https://api.github.com/users/AndreLouisCaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreLouisCaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreLouisCaron/subscriptions", "organizations_url": "https://api.github.com/users/AndreLouisCaron/orgs", "repos_url": "https://api.github.com/users/AndreLouisCaron/repos", "events_url": "https://api.github.com/users/AndreLouisCaron/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreLouisCaron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51486997, "node_id": "MDU6TGFiZWw1MTQ4Njk5Nw==", "url": "https://api.github.com/repos/Pylons/colander/labels/enhancement", "name": "enhancement", "color": "009800", "default": true, "description": null}, {"id": 51486998, "node_id": "MDU6TGFiZWw1MTQ4Njk5OA==", "url": "https://api.github.com/repos/Pylons/colander/labels/sprintable", "name": "sprintable", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-07-09T15:04:55Z", "updated_at": "2014-07-19T21:45:46Z", "closed_at": "2013-08-15T15:40:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "To allow preservation of unknown keys when deserializing with a `MappingSchema`, I need to write this:\n\n```\nclass MySchema(colander.MappingSchema):\n    some_key = colander.SchemaNode(colander.String())\n\n    # Force colander to preserve unknown fields.\n    def __init__(self, *args, **kwds):\n        typ = colander.Mapping(unknown='preserve')\n        super(MySchema, self).__init__(typ, *args, **kwds)\n```\n\nI would really prefer having a simple way to do this, such as:\n\n```\nclass MySchema(colander.MappingSchema):\n    unknown = 'preserve'\n    some_key = colander.SchemaNode(colander.String())\n```\n\nOr even\n\n```\nMySchema(unknown='preserve').deserialize(...)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/111", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/111/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/111/events", "html_url": "https://github.com/Pylons/colander/issues/111", "id": 14966922, "node_id": "MDU6SXNzdWUxNDk2NjkyMg==", "number": 111, "title": "TypeError at deserializing malformed Date and DateTime", "user": {"login": "leplatrem", "id": 546692, "node_id": "MDQ6VXNlcjU0NjY5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/546692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leplatrem", "html_url": "https://github.com/leplatrem", "followers_url": "https://api.github.com/users/leplatrem/followers", "following_url": "https://api.github.com/users/leplatrem/following{/other_user}", "gists_url": "https://api.github.com/users/leplatrem/gists{/gist_id}", "starred_url": "https://api.github.com/users/leplatrem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leplatrem/subscriptions", "organizations_url": "https://api.github.com/users/leplatrem/orgs", "repos_url": "https://api.github.com/users/leplatrem/repos", "events_url": "https://api.github.com/users/leplatrem/events{/privacy}", "received_events_url": "https://api.github.com/users/leplatrem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2013-05-30T23:14:45Z", "updated_at": "2014-12-28T11:52:35Z", "closed_at": "2013-05-31T15:57:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version **1.0a2 is ok**, it raises `Invalid`.\n\n```\n>>>colander.SchemaNode(colander.DateTime()).deserialize('2013/05/31')\nTraceback (most recent call last):\n ...\n ...\ncolander.Invalid: {'': u'Invalid date'}\n```\n\nVersion **1.0a3 crashes**, and raises `TypeError`:\n\n```\n>>> colander.SchemaNode(colander.DateTime()).deserialize('2013/05/31')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/mathieu/Code/daybed/src/local/lib/python2.7/site-packages/colander/__init__.py\", line 1864, in deserialize\n    appstruct = self.typ.deserialize(self, cstruct)\n  File \"/home/mathieu/Code/daybed/src/local/lib/python2.7/site-packages/colander/__init__.py\", line 1492, in deserialize\n    cstruct, default_timezone=self.default_tzinfo)\n  File \"/home/mathieu/Code/daybed/src/local/lib/python2.7/site-packages/colander/iso8601.py\", line 137, in parse_date\n    return datetime(int(groups[\"year\"]), int(groups[\"month\"]), int(groups[\"day\"]),\nTypeError: int() argument must be a string or a number, not 'NoneType'\n\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/103", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/103/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/103/events", "html_url": "https://github.com/Pylons/colander/issues/103", "id": 13751786, "node_id": "MDU6SXNzdWUxMzc1MTc4Ng==", "number": 103, "title": "PO files not compiled in 1.0a2?", "user": {"login": "danwerner", "id": 171729, "node_id": "MDQ6VXNlcjE3MTcyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/171729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danwerner", "html_url": "https://github.com/danwerner", "followers_url": "https://api.github.com/users/danwerner/followers", "following_url": "https://api.github.com/users/danwerner/following{/other_user}", "gists_url": "https://api.github.com/users/danwerner/gists{/gist_id}", "starred_url": "https://api.github.com/users/danwerner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danwerner/subscriptions", "organizations_url": "https://api.github.com/users/danwerner/orgs", "repos_url": "https://api.github.com/users/danwerner/repos", "events_url": "https://api.github.com/users/danwerner/events{/privacy}", "received_events_url": "https://api.github.com/users/danwerner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51486998, "node_id": "MDU6TGFiZWw1MTQ4Njk5OA==", "url": "https://api.github.com/repos/Pylons/colander/labels/sprintable", "name": "sprintable", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-04-29T09:20:24Z", "updated_at": "2013-08-17T14:49:25Z", "closed_at": "2013-08-17T14:49:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed that the German translations for colander validation error messages displayed in my application do not match the translations contained in colander.po. Especially, some translation mistakes that seem to have been fixed in the PO files still appear in the application.\n\nPerhaps the PO files have not been compiled to MO files before release? (I obtained colander 1.0a2 from pypi using `pip install`.)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/100", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/100/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/100/events", "html_url": "https://github.com/Pylons/colander/issues/100", "id": 12810279, "node_id": "MDU6SXNzdWUxMjgxMDI3OQ==", "number": 100, "title": "False positive validation for strings", "user": {"login": "saltmueller", "id": 147088, "node_id": "MDQ6VXNlcjE0NzA4OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/147088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saltmueller", "html_url": "https://github.com/saltmueller", "followers_url": "https://api.github.com/users/saltmueller/followers", "following_url": "https://api.github.com/users/saltmueller/following{/other_user}", "gists_url": "https://api.github.com/users/saltmueller/gists{/gist_id}", "starred_url": "https://api.github.com/users/saltmueller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saltmueller/subscriptions", "organizations_url": "https://api.github.com/users/saltmueller/orgs", "repos_url": "https://api.github.com/users/saltmueller/repos", "events_url": "https://api.github.com/users/saltmueller/events{/privacy}", "received_events_url": "https://api.github.com/users/saltmueller/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51486984, "node_id": "MDU6TGFiZWw1MTQ4Njk4NA==", "url": "https://api.github.com/repos/Pylons/colander/labels/bug", "name": "bug", "color": "e11d21", "default": true, "description": null}, {"id": 51486998, "node_id": "MDU6TGFiZWw1MTQ4Njk5OA==", "url": "https://api.github.com/repos/Pylons/colander/labels/sprintable", "name": "sprintable", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2013-04-04T17:15:14Z", "updated_at": "2013-08-17T07:36:56Z", "closed_at": "2013-08-17T07:36:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I doubt that I am the first one to see this, so it might be a feature. But it seems like a bug to me. Apologies if I am missing something. \n\nIMO the call to deserialize should fail in this example below. But instead the \"name\" dictionary of the input is converted to a string:\n\n```\nimport colander \n\nclass BizCard(colander.MappingSchema):\n    name = colander.SchemaNode(colander.String())\n\njson_data = {\n    \"name\" : {\n            \"first\": \"John\",\n            \"last\": \"Doe\"\n        }\n}\n\nschema = BizCard()\nschema.deserialize(json_data)\n```\n\n(tested against version 1.0a2)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/90", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/90/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/90/events", "html_url": "https://github.com/Pylons/colander/issues/90", "id": 12056145, "node_id": "MDU6SXNzdWUxMjA1NjE0NQ==", "number": 90, "title": "SchemaNode constructor doesn't accept typ as a keyword argument", "user": {"login": "danwerner", "id": 171729, "node_id": "MDQ6VXNlcjE3MTcyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/171729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danwerner", "html_url": "https://github.com/danwerner", "followers_url": "https://api.github.com/users/danwerner/followers", "following_url": "https://api.github.com/users/danwerner/following{/other_user}", "gists_url": "https://api.github.com/users/danwerner/gists{/gist_id}", "starred_url": "https://api.github.com/users/danwerner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danwerner/subscriptions", "organizations_url": "https://api.github.com/users/danwerner/orgs", "repos_url": "https://api.github.com/users/danwerner/repos", "events_url": "https://api.github.com/users/danwerner/events{/privacy}", "received_events_url": "https://api.github.com/users/danwerner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51486997, "node_id": "MDU6TGFiZWw1MTQ4Njk5Nw==", "url": "https://api.github.com/repos/Pylons/colander/labels/enhancement", "name": "enhancement", "color": "009800", "default": true, "description": null}, {"id": 51486998, "node_id": "MDU6TGFiZWw1MTQ4Njk5OA==", "url": "https://api.github.com/repos/Pylons/colander/labels/sprintable", "name": "sprintable", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-03-15T09:44:10Z", "updated_at": "2013-08-15T15:34:25Z", "closed_at": "2013-08-15T15:34:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Constructing SchemaNodes as follows:\n\n``` python\ncolander.SchemaNode(typ=colander.Integer)\n```\n\nLeads to a \"NotImplementedError: SchemaNode construction without a typ argument ...\". Ideally, the SchemaNode constructor would have code somewhat like this:\n\n``` python\nif arg:\n    self.typ = arg[0]\n    _add_node_children(self, arg[1:])\nelif 'typ' in kw:\n    self.typ = kw['typ']\nelse:\n    self.typ = self.schema_type()\n```\n\nThat would allow constructing SchemaNodes from dictionaries of arbitrary keyword arguments.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/89", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/89/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/89/events", "html_url": "https://github.com/Pylons/colander/issues/89", "id": 11985983, "node_id": "MDU6SXNzdWUxMTk4NTk4Mw==", "number": 89, "title": "documentation: error in example", "user": {"login": "matgessner", "id": 3856610, "node_id": "MDQ6VXNlcjM4NTY2MTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3856610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matgessner", "html_url": "https://github.com/matgessner", "followers_url": "https://api.github.com/users/matgessner/followers", "following_url": "https://api.github.com/users/matgessner/following{/other_user}", "gists_url": "https://api.github.com/users/matgessner/gists{/gist_id}", "starred_url": "https://api.github.com/users/matgessner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matgessner/subscriptions", "organizations_url": "https://api.github.com/users/matgessner/orgs", "repos_url": "https://api.github.com/users/matgessner/repos", "events_url": "https://api.github.com/users/matgessner/events{/privacy}", "received_events_url": "https://api.github.com/users/matgessner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-03-13T18:03:58Z", "updated_at": "2013-03-19T18:15:47Z", "closed_at": "2013-03-19T18:15:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "http://docs.pylonsproject.org/projects/colander/en/latest/basics.html#defining-a-schema-imperatively\nIn the 2nd example on line 7 it says:\nfriend.add(colander.SchemaNode(colander.String()), name='name')\nBut it should say:\nfriend.add(colander.SchemaNode(colander.String(), name='name'))\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/87", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/87/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/87/events", "html_url": "https://github.com/Pylons/colander/issues/87", "id": 11920303, "node_id": "MDU6SXNzdWUxMTkyMDMwMw==", "number": 87, "title": "Cannot prepare based on schema binding.", "user": {"login": "AndreLouisCaron", "id": 135974, "node_id": "MDQ6VXNlcjEzNTk3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/135974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreLouisCaron", "html_url": "https://github.com/AndreLouisCaron", "followers_url": "https://api.github.com/users/AndreLouisCaron/followers", "following_url": "https://api.github.com/users/AndreLouisCaron/following{/other_user}", "gists_url": "https://api.github.com/users/AndreLouisCaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreLouisCaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreLouisCaron/subscriptions", "organizations_url": "https://api.github.com/users/AndreLouisCaron/orgs", "repos_url": "https://api.github.com/users/AndreLouisCaron/repos", "events_url": "https://api.github.com/users/AndreLouisCaron/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreLouisCaron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-03-12T11:37:55Z", "updated_at": "2013-03-19T16:28:48Z", "closed_at": "2013-03-19T16:28:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is no support for deferred preparers, which would seem to be the only way to transform values during serialization if some bound value must be used.\n\n**Edit**: the [Colander: Is preparer supported in schema binding?](https://groups.google.com/forum/?fromgroups=#!msg/pylons-discuss/gxneQPiNkUo/T-wh_hHoHnYJ) thread served as inspiration for the fix.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/82", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/82/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/82/events", "html_url": "https://github.com/Pylons/colander/issues/82", "id": 11122131, "node_id": "MDU6SXNzdWUxMTEyMjEzMQ==", "number": 82, "title": "Email validator accepts bad email addresses.", "user": {"login": "rkintzi", "id": 232022, "node_id": "MDQ6VXNlcjIzMjAyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/232022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkintzi", "html_url": "https://github.com/rkintzi", "followers_url": "https://api.github.com/users/rkintzi/followers", "following_url": "https://api.github.com/users/rkintzi/following{/other_user}", "gists_url": "https://api.github.com/users/rkintzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkintzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkintzi/subscriptions", "organizations_url": "https://api.github.com/users/rkintzi/orgs", "repos_url": "https://api.github.com/users/rkintzi/repos", "events_url": "https://api.github.com/users/rkintzi/events{/privacy}", "received_events_url": "https://api.github.com/users/rkintzi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-02-18T16:45:11Z", "updated_at": "2013-08-10T08:03:31Z", "closed_at": "2013-08-10T08:03:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Examples of invalid addresses accepted by validator:\nala@ma.kota..pl\nala@ma-kota-.pl\n\nBetter regular expression: (?i)^[A-Z0-9._%+-]+@[A-Z0-9]+([.-][A-Z0-9]+)*.[A-Z]{2,4}$\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/81", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/81/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/81/events", "html_url": "https://github.com/Pylons/colander/issues/81", "id": 11040872, "node_id": "MDU6SXNzdWUxMTA0MDg3Mg==", "number": 81, "title": "How do I use `accept_scalar`?", "user": {"login": "AndreLouisCaron", "id": 135974, "node_id": "MDQ6VXNlcjEzNTk3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/135974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreLouisCaron", "html_url": "https://github.com/AndreLouisCaron", "followers_url": "https://api.github.com/users/AndreLouisCaron/followers", "following_url": "https://api.github.com/users/AndreLouisCaron/following{/other_user}", "gists_url": "https://api.github.com/users/AndreLouisCaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreLouisCaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreLouisCaron/subscriptions", "organizations_url": "https://api.github.com/users/AndreLouisCaron/orgs", "repos_url": "https://api.github.com/users/AndreLouisCaron/repos", "events_url": "https://api.github.com/users/AndreLouisCaron/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreLouisCaron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-02-15T16:00:56Z", "updated_at": "2013-08-10T08:05:16Z", "closed_at": "2013-08-10T08:05:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "From the docs, I can't figure out how the `accept_scalar` argument can be used in my schemas.\n\nI'd like something like this:\n\n```\nfrom colander import Date\nfrom colander import SequenceSchema\nclass DatesSchema(SequenceSchema):\n    date = Date()\n```\n\n   DatesSchema().deserialize(['2013-02-14', '2013-02-15'])\n   DatesSchema().deserialize('2013-02-14') # can't get this one to work.\n\nIf it's any help, I'm trying to use Colander to validate an URL query string and I can't determine before passing the results of `urlparse.parse_qs()` to Colander if the passed in value should be a list or not.  Query arguments with a single value can either be treated as 1-item lists or scalars.  If I set them as 1-item lists, then all scalar values don't work.  If I set them as scalars, then I can't pass in a 1-item list (it's converted as a scalar and rejected by Colander).\n\nFor example:\n- `/foo?dates=2013-02-14,2013-02-15` # I got this to work\n- `/foo?dates=2013-02-14` # This ends up as a scalar and it's rejected.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/80", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/80/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/80/events", "html_url": "https://github.com/Pylons/colander/issues/80", "id": 10702411, "node_id": "MDU6SXNzdWUxMDcwMjQxMQ==", "number": 80, "title": "Colander serializes numbers & bools as strings.", "user": {"login": "AndreLouisCaron", "id": 135974, "node_id": "MDQ6VXNlcjEzNTk3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/135974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreLouisCaron", "html_url": "https://github.com/AndreLouisCaron", "followers_url": "https://api.github.com/users/AndreLouisCaron/followers", "following_url": "https://api.github.com/users/AndreLouisCaron/following{/other_user}", "gists_url": "https://api.github.com/users/AndreLouisCaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreLouisCaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreLouisCaron/subscriptions", "organizations_url": "https://api.github.com/users/AndreLouisCaron/orgs", "repos_url": "https://api.github.com/users/AndreLouisCaron/repos", "events_url": "https://api.github.com/users/AndreLouisCaron/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreLouisCaron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2013-02-06T17:33:41Z", "updated_at": "2014-11-23T03:35:20Z", "closed_at": "2013-02-06T18:59:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I use the `Bool` and `Int` types in my schemas like so:\n\n```\nclass TestSchema(MappingSchema):\n    interested = SchemaNode(Boolean(), missing=False, default=False)\n```\n\nAnd I use it to serialize some data like so:\n\n```\nschema = TestSchema()\ndata = schema.serialize(dict(interested=True))\n```\n\nThen `data['interested']' is`\"true\"` (a string).\n\nNow, if I `json.dumps(data)`, I get strings in my JSON data instead of the boolean I requested.  This is really annoying because there's no way to fix this reliably after the fact!  At best, I can supply a custom `JSONEncoder`, but I can still accidentally convert strings that shouldn't be converted.\n\nThe same problem exists with numbers.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/77", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/77/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/77/events", "html_url": "https://github.com/Pylons/colander/issues/77", "id": 9243733, "node_id": "MDU6SXNzdWU5MjQzNzMz", "number": 77, "title": "Enable multi-field / field comparison validation", "user": {"login": "oveddan", "id": 891755, "node_id": "MDQ6VXNlcjg5MTc1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/891755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oveddan", "html_url": "https://github.com/oveddan", "followers_url": "https://api.github.com/users/oveddan/followers", "following_url": "https://api.github.com/users/oveddan/following{/other_user}", "gists_url": "https://api.github.com/users/oveddan/gists{/gist_id}", "starred_url": "https://api.github.com/users/oveddan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oveddan/subscriptions", "organizations_url": "https://api.github.com/users/oveddan/orgs", "repos_url": "https://api.github.com/users/oveddan/repos", "events_url": "https://api.github.com/users/oveddan/events{/privacy}", "received_events_url": "https://api.github.com/users/oveddan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2012-12-13T06:42:23Z", "updated_at": "2012-12-25T20:09:11Z", "closed_at": "2012-12-13T06:55:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be great to be able to add a validation that compares the value of two fields.  For example, checking that two password fields are equal, or requiring phone only if email is null.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/75", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/75/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/75/events", "html_url": "https://github.com/Pylons/colander/issues/75", "id": 9042436, "node_id": "MDU6SXNzdWU5MDQyNDM2", "number": 75, "title": "conditional validation", "user": {"login": "marconi", "id": 49830, "node_id": "MDQ6VXNlcjQ5ODMw", "avatar_url": "https://avatars0.githubusercontent.com/u/49830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marconi", "html_url": "https://github.com/marconi", "followers_url": "https://api.github.com/users/marconi/followers", "following_url": "https://api.github.com/users/marconi/following{/other_user}", "gists_url": "https://api.github.com/users/marconi/gists{/gist_id}", "starred_url": "https://api.github.com/users/marconi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marconi/subscriptions", "organizations_url": "https://api.github.com/users/marconi/orgs", "repos_url": "https://api.github.com/users/marconi/repos", "events_url": "https://api.github.com/users/marconi/events{/privacy}", "received_events_url": "https://api.github.com/users/marconi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-12-06T03:28:48Z", "updated_at": "2016-03-23T21:26:04Z", "closed_at": "2012-12-06T03:35:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I achieve conditional validation?\n\nSay I have two fields field_a and field_b, field_b is optional by default but it becomes required when field_a has certain values.\n\nI've been looking at the existing validators and it seems it only receives the node that it should validate, how can I access other nodes within the same schema from a validator?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/74", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/74/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/74/events", "html_url": "https://github.com/Pylons/colander/issues/74", "id": 8586416, "node_id": "MDU6SXNzdWU4NTg2NDE2", "number": 74, "title": "apply a validator to a schema", "user": {"login": "pansen", "id": 219162, "node_id": "MDQ6VXNlcjIxOTE2Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/219162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pansen", "html_url": "https://github.com/pansen", "followers_url": "https://api.github.com/users/pansen/followers", "following_url": "https://api.github.com/users/pansen/following{/other_user}", "gists_url": "https://api.github.com/users/pansen/gists{/gist_id}", "starred_url": "https://api.github.com/users/pansen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pansen/subscriptions", "organizations_url": "https://api.github.com/users/pansen/orgs", "repos_url": "https://api.github.com/users/pansen/repos", "events_url": "https://api.github.com/users/pansen/events{/privacy}", "received_events_url": "https://api.github.com/users/pansen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2012-11-22T20:06:21Z", "updated_at": "2012-12-13T10:33:48Z", "closed_at": "2012-12-13T06:56:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi, \n\nfirst, thanks for that great library!\n\ni wonder if there is a solution to apply a validator to a schema before it is used. e.g.::\n\n```\nclass LocationSchema(colander.Schema):\n    validator = something\n    ...\n```\n\nthis doesn't work, because all constructor arguments of `SchemaNode` eliminate the class attributes::\n\n```\ndef __init__(self, typ, *children, **kw):\n    self.typ = typ\n    self.preparer = kw.pop('preparer', None)\n    self.validator = kw.pop('validator', None)\n    ... \n```\n\nbut in my opinion there should be a way. imagine having a schema, inherited schemas and each instanciation needs the validator applied. if that is missing, the validation is dangerously wrong. \n\ndo you have an idea?\n\nbest, andi\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/72", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/72/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/72/events", "html_url": "https://github.com/Pylons/colander/issues/72", "id": 8407692, "node_id": "MDU6SXNzdWU4NDA3Njky", "number": 72, "title": "String() serializes empty string to colander.null", "user": {"login": "tranminhh", "id": 18300, "node_id": "MDQ6VXNlcjE4MzAw", "avatar_url": "https://avatars1.githubusercontent.com/u/18300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tranminhh", "html_url": "https://github.com/tranminhh", "followers_url": "https://api.github.com/users/tranminhh/followers", "following_url": "https://api.github.com/users/tranminhh/following{/other_user}", "gists_url": "https://api.github.com/users/tranminhh/gists{/gist_id}", "starred_url": "https://api.github.com/users/tranminhh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tranminhh/subscriptions", "organizations_url": "https://api.github.com/users/tranminhh/orgs", "repos_url": "https://api.github.com/users/tranminhh/repos", "events_url": "https://api.github.com/users/tranminhh/events{/privacy}", "received_events_url": "https://api.github.com/users/tranminhh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-11-16T00:43:50Z", "updated_at": "2013-01-10T08:11:35Z", "closed_at": "2013-01-10T08:11:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\n>>> colander.String().serialize(node, '')    # buggy behavior\n<colander.null>\n>>> colander.String().serialize(node, None)  # expected behavior\n<colander.null>\n\n```\n\nThis seems to be a \"regression\" from https://github.com/Pylons/colander/pull/45\n\nWhile it makes sense that there is no obvious string representation of None, it seems intuitive to me that serializing a string would result in a string.\n\nWith the current behavior, it is not possible to have a String type SchemaNode with a default of empty string, e.g.:\n\n``` python\nclass Foo(colander.MappingSchema):\n    bar = colander.SchemaNode(colander.String(), default='')\n```\n\nwould give this:\n\n```\n>>> Foo().serialize({})\n{'bar': <colander.null>}\n```\n\nThank you for your time and clarification.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/69", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/69/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/69/events", "html_url": "https://github.com/Pylons/colander/issues/69", "id": 7850426, "node_id": "MDU6SXNzdWU3ODUwNDI2", "number": 69, "title": "collander.All validator do not work with deferred validators", "user": {"login": "igudym", "id": 344241, "node_id": "MDQ6VXNlcjM0NDI0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/344241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/igudym", "html_url": "https://github.com/igudym", "followers_url": "https://api.github.com/users/igudym/followers", "following_url": "https://api.github.com/users/igudym/following{/other_user}", "gists_url": "https://api.github.com/users/igudym/gists{/gist_id}", "starred_url": "https://api.github.com/users/igudym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/igudym/subscriptions", "organizations_url": "https://api.github.com/users/igudym/orgs", "repos_url": "https://api.github.com/users/igudym/repos", "events_url": "https://api.github.com/users/igudym/events{/privacy}", "received_events_url": "https://api.github.com/users/igudym/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-10-25T06:57:54Z", "updated_at": "2013-03-19T18:23:10Z", "closed_at": "2013-03-19T18:23:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "It throws exception \nAttributeError: 'int' object has no attribute 'get'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/68", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/68/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/68/events", "html_url": "https://github.com/Pylons/colander/issues/68", "id": 7734462, "node_id": "MDU6SXNzdWU3NzM0NDYy", "number": 68, "title": "Deferred Declarative Properties", "user": {"login": "jayd3e", "id": 563531, "node_id": "MDQ6VXNlcjU2MzUzMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/563531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayd3e", "html_url": "https://github.com/jayd3e", "followers_url": "https://api.github.com/users/jayd3e/followers", "following_url": "https://api.github.com/users/jayd3e/following{/other_user}", "gists_url": "https://api.github.com/users/jayd3e/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayd3e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayd3e/subscriptions", "organizations_url": "https://api.github.com/users/jayd3e/orgs", "repos_url": "https://api.github.com/users/jayd3e/repos", "events_url": "https://api.github.com/users/jayd3e/events{/privacy}", "received_events_url": "https://api.github.com/users/jayd3e/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2012-10-20T02:54:46Z", "updated_at": "2013-03-19T18:23:31Z", "closed_at": "2013-03-19T18:23:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is actually kind of a big feature, as it would make it possible to support all possible types of relationships between schemas declaratively.  I've been looking into how to implement it, but can't find any obvious ways.  Going to continue to try, but just wanted to make it known.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/67", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/67/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/67/events", "html_url": "https://github.com/Pylons/colander/issues/67", "id": 7638906, "node_id": "MDU6SXNzdWU3NjM4OTA2", "number": 67, "title": "Recursive schemas are currently not possible declaratively", "user": {"login": "jayd3e", "id": 563531, "node_id": "MDQ6VXNlcjU2MzUzMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/563531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayd3e", "html_url": "https://github.com/jayd3e", "followers_url": "https://api.github.com/users/jayd3e/followers", "following_url": "https://api.github.com/users/jayd3e/following{/other_user}", "gists_url": "https://api.github.com/users/jayd3e/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayd3e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayd3e/subscriptions", "organizations_url": "https://api.github.com/users/jayd3e/orgs", "repos_url": "https://api.github.com/users/jayd3e/repos", "events_url": "https://api.github.com/users/jayd3e/events{/privacy}", "received_events_url": "https://api.github.com/users/jayd3e/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-10-16T20:58:41Z", "updated_at": "2013-03-19T18:26:18Z", "closed_at": "2013-03-19T18:23:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When a schema, let's call it SchemaA, contains a sequence, where the child schema is SchemaA, one of the classes(either SchemaA, or the sequence schema) will not be found, as it hasn't been defined yet.  An example of this is the following:\n\n```\nclass CommentSchema(MappingSchema):\n    solution_id = SchemaNode(Int(),  missing=None)\n    parent_id = SchemaNode(Int(),  missing=None)\n    replies = CommentsSchema()\n    revisions = CommentRevisionsSchema(missing=None)\n    votes = CommentVotesSchema(missing=None)\n\nclass CommentsSchema(SequenceSchema):\n     comment = CommentSchema()\n```\n\nI have written a public api, to deal with this issue, that would be used like so:\n\n```\nCommentSchema.add_node(CommentsSchema(missing=None, name='replies'))\n\nclass CommentSchema(MappingSchema):\n    solution_id = SchemaNode(Int(), missing=None)\n    parent_id = SchemaNode(Int(), missing=None)\n    revisions = CommentRevisionsSchema(missing=None)\n    votes = CommentVotesSchema(missing=None)\n\nclass CommentsSchema(SequenceSchema):\n     comment = CommentSchema()\n\nCommentSchema.add_node(CommentsSchema(missing=None, name='replies'))\n```\n\nThe problem is, is that at the point where CommentSchema is instantiated on CommentsSchema, CommentSchema does not yet have the replies attribute, so this results in the Schema  structure to not be fully recursive, as it just goes down one level.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/66", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/66/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/66/events", "html_url": "https://github.com/Pylons/colander/issues/66", "id": 7281279, "node_id": "MDU6SXNzdWU3MjgxMjc5", "number": 66, "title": "Test failure with Python 3.3", "user": {"login": "Arfrever", "id": 656294, "node_id": "MDQ6VXNlcjY1NjI5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/656294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arfrever", "html_url": "https://github.com/Arfrever", "followers_url": "https://api.github.com/users/Arfrever/followers", "following_url": "https://api.github.com/users/Arfrever/following{/other_user}", "gists_url": "https://api.github.com/users/Arfrever/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arfrever/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arfrever/subscriptions", "organizations_url": "https://api.github.com/users/Arfrever/orgs", "repos_url": "https://api.github.com/users/Arfrever/repos", "events_url": "https://api.github.com/users/Arfrever/events{/privacy}", "received_events_url": "https://api.github.com/users/Arfrever/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-10-02T01:40:42Z", "updated_at": "2012-10-02T03:12:11Z", "closed_at": "2012-10-02T02:52:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Colander 0.9.9 introduced test_serialize_quantize_no_rounding(), which fails with Python 3.3. It passes with older versions of Python.\n\n```\n$ python3.3 setup.py test\n...\n======================================================================\nERROR: test_serialize_quantize_no_rounding (colander.tests.test_colander.TestDecimal)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/colander-0.9.9/colander/__init__.py\", line 1035, in serialize\n    return str(self.num(appstruct))\n  File \"/tmp/colander-0.9.9/colander/__init__.py\", line 1109, in num\n    result = result.quantize(self.quant, self.rounding)\nTypeError: an integer is required\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/colander-0.9.9/colander/tests/test_colander.py\", line 1371, in test_serialize_quantize_no_rounding\n    result = typ.serialize(node, val)\n  File \"/tmp/colander-0.9.9/colander/__init__.py\", line 1039, in serialize\n    mapping={'val':appstruct}),\ncolander.Invalid: {'': '\".000001\" is not a number'}\n\n----------------------------------------------------------------------\nRan 335 tests in 0.195s\n\nFAILED (errors=1)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/64", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/64/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/64/events", "html_url": "https://github.com/Pylons/colander/issues/64", "id": 7068488, "node_id": "MDU6SXNzdWU3MDY4NDg4", "number": 64, "title": "Message argument to validators", "user": {"login": "domenkozar", "id": 126339, "node_id": "MDQ6VXNlcjEyNjMzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/126339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domenkozar", "html_url": "https://github.com/domenkozar", "followers_url": "https://api.github.com/users/domenkozar/followers", "following_url": "https://api.github.com/users/domenkozar/following{/other_user}", "gists_url": "https://api.github.com/users/domenkozar/gists{/gist_id}", "starred_url": "https://api.github.com/users/domenkozar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domenkozar/subscriptions", "organizations_url": "https://api.github.com/users/domenkozar/orgs", "repos_url": "https://api.github.com/users/domenkozar/repos", "events_url": "https://api.github.com/users/domenkozar/events{/privacy}", "received_events_url": "https://api.github.com/users/domenkozar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51486997, "node_id": "MDU6TGFiZWw1MTQ4Njk5Nw==", "url": "https://api.github.com/repos/Pylons/colander/labels/enhancement", "name": "enhancement", "color": "009800", "default": true, "description": null}, {"id": 51486998, "node_id": "MDU6TGFiZWw1MTQ4Njk5OA==", "url": "https://api.github.com/repos/Pylons/colander/labels/sprintable", "name": "sprintable", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-09-23T11:48:29Z", "updated_at": "2013-08-17T08:37:23Z", "closed_at": "2013-08-16T10:46:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See http://docs.pylonsproject.org/projects/colander/en/latest/api.html#validators\n\nCurrently some require `msg` and some `message`. Would be nice to go for one and deprecate the other.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/60", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/60/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/60/events", "html_url": "https://github.com/Pylons/colander/issues/60", "id": 5757353, "node_id": "MDU6SXNzdWU1NzU3MzUz", "number": 60, "title": "Allow for missing values", "user": {"login": "scott2b", "id": 307713, "node_id": "MDQ6VXNlcjMwNzcxMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/307713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scott2b", "html_url": "https://github.com/scott2b", "followers_url": "https://api.github.com/users/scott2b/followers", "following_url": "https://api.github.com/users/scott2b/following{/other_user}", "gists_url": "https://api.github.com/users/scott2b/gists{/gist_id}", "starred_url": "https://api.github.com/users/scott2b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scott2b/subscriptions", "organizations_url": "https://api.github.com/users/scott2b/orgs", "repos_url": "https://api.github.com/users/scott2b/repos", "events_url": "https://api.github.com/users/scott2b/events{/privacy}", "received_events_url": "https://api.github.com/users/scott2b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2012-07-22T00:36:27Z", "updated_at": "2013-08-10T08:08:18Z", "closed_at": "2013-08-10T08:08:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is not clear why colander strictly enforces the presence of non-required values. There should at least be an 'optional' parameter which would enable validation of schemata with non-required nodes without forcing undesired default or sentinel values.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/47", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/47/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/47/events", "html_url": "https://github.com/Pylons/colander/issues/47", "id": 3977634, "node_id": "MDU6SXNzdWUzOTc3NjM0", "number": 47, "title": "Unbound deferred validators are ignored?", "user": {"login": "dairiki", "id": 495018, "node_id": "MDQ6VXNlcjQ5NTAxOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/495018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dairiki", "html_url": "https://github.com/dairiki", "followers_url": "https://api.github.com/users/dairiki/followers", "following_url": "https://api.github.com/users/dairiki/following{/other_user}", "gists_url": "https://api.github.com/users/dairiki/gists{/gist_id}", "starred_url": "https://api.github.com/users/dairiki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dairiki/subscriptions", "organizations_url": "https://api.github.com/users/dairiki/orgs", "repos_url": "https://api.github.com/users/dairiki/repos", "events_url": "https://api.github.com/users/dairiki/events{/privacy}", "received_events_url": "https://api.github.com/users/dairiki/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51486997, "node_id": "MDU6TGFiZWw1MTQ4Njk5Nw==", "url": "https://api.github.com/repos/Pylons/colander/labels/enhancement", "name": "enhancement", "color": "009800", "default": true, "description": null}, {"id": 51486998, "node_id": "MDU6TGFiZWw1MTQ4Njk5OA==", "url": "https://api.github.com/repos/Pylons/colander/labels/sprintable", "name": "sprintable", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2012-04-04T20:16:48Z", "updated_at": "2014-11-30T17:23:32Z", "closed_at": "2014-11-30T17:23:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "On IRC this morning, _subsu_ pointed out to me that unbound deferred validators are silently ignored when deserializing.  Indeed, this behavior is [documented](http://docs.pylonsproject.org/projects/colander/en/latest/binding.html#unbound-schemas-with-deferreds).\n\nThis seems completely backwards to me.  The validators are supposed to make particular assertions about the integrity of the unserialized data.  If I forget to bind one, it is a programming error, and I want an exception thrown.  I certainly don't want untrusted input to be passed through unvalidated. This is freaking me out, man!\n\nIs this really what was intended?  (Why?)  Anyhow, I propose either: changing this behavior (which might be problematic, given that it is documented and all); or adding a second deferred (sub)class (`compulsory_deferred` or some such) for which errors will be thrown if an attempt is made to use them before they are bound.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/42", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/42/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/42/events", "html_url": "https://github.com/Pylons/colander/issues/42", "id": 3546600, "node_id": "MDU6SXNzdWUzNTQ2NjAw", "number": 42, "title": "Allow deferred default to execute per schema in sequence", "user": {"login": "bbangert", "id": 100193, "node_id": "MDQ6VXNlcjEwMDE5Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/100193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbangert", "html_url": "https://github.com/bbangert", "followers_url": "https://api.github.com/users/bbangert/followers", "following_url": "https://api.github.com/users/bbangert/following{/other_user}", "gists_url": "https://api.github.com/users/bbangert/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbangert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbangert/subscriptions", "organizations_url": "https://api.github.com/users/bbangert/orgs", "repos_url": "https://api.github.com/users/bbangert/repos", "events_url": "https://api.github.com/users/bbangert/events{/privacy}", "received_events_url": "https://api.github.com/users/bbangert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-03-07T16:57:57Z", "updated_at": "2012-09-25T08:23:22Z", "closed_at": "2012-09-25T08:23:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The default using a deferred is only created once during schema initialization. This isn't that great when using SchemaNode's in a Sequence to provide defaults since they all get the same default. In my case I need each one to have a random int applied, and they all get the same int.\n\nIt'd be great if there was some way to indicate a deferred default should run for each object in the sequence.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/39", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/39/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/39/events", "html_url": "https://github.com/Pylons/colander/issues/39", "id": 3331879, "node_id": "MDU6SXNzdWUzMzMxODc5", "number": 39, "title": "Can't define declarative schema with non python identifiers as name", "user": {"login": "dwt", "id": 57199, "node_id": "MDQ6VXNlcjU3MTk5", "avatar_url": "https://avatars1.githubusercontent.com/u/57199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwt", "html_url": "https://github.com/dwt", "followers_url": "https://api.github.com/users/dwt/followers", "following_url": "https://api.github.com/users/dwt/following{/other_user}", "gists_url": "https://api.github.com/users/dwt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwt/subscriptions", "organizations_url": "https://api.github.com/users/dwt/orgs", "repos_url": "https://api.github.com/users/dwt/repos", "events_url": "https://api.github.com/users/dwt/events{/privacy}", "received_events_url": "https://api.github.com/users/dwt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-02-22T12:24:56Z", "updated_at": "2012-02-23T06:21:47Z", "closed_at": "2012-02-23T06:21:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's an example\n\n``` python\n        class FnordSchema(colander.Schema):\n            fnord = colander.SchemaNode(\n                colander.Sequence(), \n                colander.SchemaNode(colander.Integer(), name='integer in sequence'), \n                name=\"fnord[]\"))\n```\n\nInstead I have to use this workaround:\n\n``` python\n        class FnordSchema(colander.Schema):\n        schema = FnordSchema()\n        schema.add(colander.SchemaNode(\n                colander.Sequence(), \n                colander.SchemaNode(colander.Integer(), name='integer in sequence'), \n                name=\"fnord[]\"))\n```\n\nIdeally the parsed value would be available under the name 'fnord' instead of 'fnord[]', but that would be an exciter. :-)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/38", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/38/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/38/events", "html_url": "https://github.com/Pylons/colander/issues/38", "id": 3277409, "node_id": "MDU6SXNzdWUzMjc3NDA5", "number": 38, "title": "Documentation fails to build", "user": {"login": "Arfrever", "id": 656294, "node_id": "MDQ6VXNlcjY1NjI5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/656294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arfrever", "html_url": "https://github.com/Arfrever", "followers_url": "https://api.github.com/users/Arfrever/followers", "following_url": "https://api.github.com/users/Arfrever/following{/other_user}", "gists_url": "https://api.github.com/users/Arfrever/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arfrever/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arfrever/subscriptions", "organizations_url": "https://api.github.com/users/Arfrever/orgs", "repos_url": "https://api.github.com/users/Arfrever/repos", "events_url": "https://api.github.com/users/Arfrever/events{/privacy}", "received_events_url": "https://api.github.com/users/Arfrever/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-02-18T04:24:58Z", "updated_at": "2012-02-18T04:51:50Z", "closed_at": "2012-02-18T04:35:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n$ make html\nmkdir -p _build/html _build/doctrees\nsphinx-build -b html -d _build/doctrees  -W . _build/html\nRunning Sphinx v1.1.2\nCloning into '_themes'...\nremote: Counting objects: 315, done.\nremote: Compressing objects: 100% (239/239), done.\nremote: Total 315 (delta 146), reused 199 (delta 74)\nReceiving objects: 100% (315/315), 455.44 KiB | 264 KiB/s, done.\nResolving deltas: 100% (146/146), done.\nrunning test\nrunning egg_info\ncreating colander.egg-info\nwriting requirements to colander.egg-info/requires.txt\nwriting colander.egg-info/PKG-INFO\nwriting top-level names to colander.egg-info/top_level.txt\nwriting dependency_links to colander.egg-info/dependency_links.txt\nwriting manifest file 'colander.egg-info/SOURCES.txt'\nreading manifest file 'colander.egg-info/SOURCES.txt'\nwriting manifest file 'colander.egg-info/SOURCES.txt'\nrunning build_ext\n..................................................................................................................................................................................................................................................................................................\n----------------------------------------------------------------------\nRan 290 tests in 0.123s\n\nOK\nloading pickled environment... not yet created\nbuilding [html]: targets for 10 source files that are out of date\nupdating environment: 10 added, 0 changed, 0 removed\nreading sources... [100%] null                                                                                                                               \n\nWarning, treated as error:\n/tmp/colander/docs/null.rst:191: ERROR: Error in \"note\" directive:\ninvalid option block.\n\n.. note:: ``<missing>`` in the above table represents the circumstance\n   in which a key present in a :class:`colander.MappingSchema` is not\n   present in a mapping passed to its\n   :meth:`colander.SchemaNode.serialize` method.  In reality,\n   ``<missing>`` means exactly the same thing as\n   :attr:`colanderr.null`, because the :class:`colander.Mapping` type\n   does the equivalent of ``mapping.get(keyname, colander.null)`` to\n   find a subvalue during serialization.\n\nmake: *** [html] Error 1\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/37", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/37/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/37/events", "html_url": "https://github.com/Pylons/colander/issues/37", "id": 3245607, "node_id": "MDU6SXNzdWUzMjQ1NjA3", "number": 37, "title": "flatten of mapping produces dot-prefixed keys", "user": {"login": "mcdonc", "id": 125174, "node_id": "MDQ6VXNlcjEyNTE3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/125174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcdonc", "html_url": "https://github.com/mcdonc", "followers_url": "https://api.github.com/users/mcdonc/followers", "following_url": "https://api.github.com/users/mcdonc/following{/other_user}", "gists_url": "https://api.github.com/users/mcdonc/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcdonc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcdonc/subscriptions", "organizations_url": "https://api.github.com/users/mcdonc/orgs", "repos_url": "https://api.github.com/users/mcdonc/repos", "events_url": "https://api.github.com/users/mcdonc/events{/privacy}", "received_events_url": "https://api.github.com/users/mcdonc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-02-16T02:42:52Z", "updated_at": "2012-02-18T04:36:44Z", "closed_at": "2012-02-18T04:36:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "``` python\n\nimport colander\nimport pprint\n\nclass Friend(colander.TupleSchema):\n    rank = colander.SchemaNode(colander.Int(),\n                               validator=colander.Range(0, 9999))\n    name = colander.SchemaNode(colander.String())\n\nclass Phone(colander.MappingSchema):\n    location = colander.SchemaNode(colander.String(),\n                                  validator=colander.OneOf(['home', 'work']))\n    number = colander.SchemaNode(colander.String())\n\nclass Friends(colander.SequenceSchema):\n    friend = Friend()\n\nclass Phones(colander.SequenceSchema):\n    phone = Phone()\n\nclass Person(colander.MappingSchema):\n    name = colander.SchemaNode(colander.String())\n    age = colander.SchemaNode(colander.Int(),\n                             validator=colander.Range(0, 200))\n    friends = Friends()\n    phones = Phones()\n\nschema = Person()\nappstruct = {\n  'name':'keith',\n  'age':20,\n  'friends':[(1, 'jim'),(2, 'bob'), (3, 'joe'), (4, 'fred')],\n  'phones':[{'location':'home', 'number':'555-1212'},\n            {'location':'work', 'number':'555-8989'},],\n  }\n\npprint.pprint(schema.flatten(appstruct))\n\n# produces:\n\n# {'.age': 20,\n#  '.friends.0.name': 'jim',\n#  '.friends.0.rank': 1,\n#  '.friends.1.name': 'bob',\n#  '.friends.1.rank': 2,\n#  '.friends.2.name': 'joe',\n#  '.friends.2.rank': 3,\n#  '.friends.3.name': 'fred',\n#  '.friends.3.rank': 4,\n#  '.name': 'keith',\n#  '.phones.0.location': 'home',\n#  '.phones.0.number': '555-1212',\n#  '.phones.1.location': 'work',\n#  '.phones.1.number': '555-8989'}\n\n# should produce?:\n\n# {'age': 20,\n#  'friends.0.name': 'jim',\n#  'friends.0.rank': 1,\n#  'friends.1.name': 'bob',\n#  'friends.1.rank': 2,\n#  'friends.2.name': 'joe',\n#  'friends.2.rank': 3,\n#  'friends.3.name': 'fred',\n#  'friends.3.rank': 4,\n#  'name': 'keith',\n#  'phones.0.location': 'home',\n#  'phones.0.number': '555-1212',\n#  'phones.1.location': 'work',\n#  'phones.1.number': '555-8989'}\n```\n\nI think this is the right fix, but it'd be nice to get some confirmation from @chrisrossi:\n\nhttps://github.com/Pylons/colander/compare/fix.rootflatten\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/31", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/31/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/31/events", "html_url": "https://github.com/Pylons/colander/issues/31", "id": 2547524, "node_id": "MDU6SXNzdWUyNTQ3NTI0", "number": 31, "title": "Inconsistent parameter names", "user": {"login": "attilaolah", "id": 196617, "node_id": "MDQ6VXNlcjE5NjYxNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/196617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/attilaolah", "html_url": "https://github.com/attilaolah", "followers_url": "https://api.github.com/users/attilaolah/followers", "following_url": "https://api.github.com/users/attilaolah/following{/other_user}", "gists_url": "https://api.github.com/users/attilaolah/gists{/gist_id}", "starred_url": "https://api.github.com/users/attilaolah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/attilaolah/subscriptions", "organizations_url": "https://api.github.com/users/attilaolah/orgs", "repos_url": "https://api.github.com/users/attilaolah/repos", "events_url": "https://api.github.com/users/attilaolah/events{/privacy}", "received_events_url": "https://api.github.com/users/attilaolah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2011-12-14T04:11:40Z", "updated_at": "2013-08-16T07:30:53Z", "closed_at": "2012-09-21T08:53:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`Function` accepts `message`,  but most other classes seem to accept `msg`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/30", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/30/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/30/events", "html_url": "https://github.com/Pylons/colander/issues/30", "id": 2547464, "node_id": "MDU6SXNzdWUyNTQ3NDY0", "number": 30, "title": "Support multiple validators, but stop at first exception", "user": {"login": "attilaolah", "id": 196617, "node_id": "MDQ6VXNlcjE5NjYxNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/196617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/attilaolah", "html_url": "https://github.com/attilaolah", "followers_url": "https://api.github.com/users/attilaolah/followers", "following_url": "https://api.github.com/users/attilaolah/following{/other_user}", "gists_url": "https://api.github.com/users/attilaolah/gists{/gist_id}", "starred_url": "https://api.github.com/users/attilaolah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/attilaolah/subscriptions", "organizations_url": "https://api.github.com/users/attilaolah/orgs", "repos_url": "https://api.github.com/users/attilaolah/repos", "events_url": "https://api.github.com/users/attilaolah/events{/privacy}", "received_events_url": "https://api.github.com/users/attilaolah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2011-12-14T03:59:16Z", "updated_at": "2014-02-06T11:49:42Z", "closed_at": "2012-12-10T21:12:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be handy if there would be something like `All` that would stop at the first validation error.\n\nSome validations are quick & easy, like `Email`, but some can be pretty expensive, like checking if the email address is already in use. There's no need for that check, if the email is not valid in the first place.\n\nI'm happy to attach a pull request, if somebody would be smart enough to suggest a name.\n\nAn alternative would be to support a list or tuple of validators as the `validator` argument  to `SchemaNode` and stop at the first failure by default.\n\nOr maybe I'm just missing the obvious way to do this, in which case the docs should be updated (which I'm happy to do once somebody explains me how to do what I want).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/23", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/23/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/23/events", "html_url": "https://github.com/Pylons/colander/issues/23", "id": 1707975, "node_id": "MDU6SXNzdWUxNzA3OTc1", "number": 23, "title": "Unable to set Mapping's \"uknown\" attribute with MappingSchema", "user": {"login": "akheron", "id": 70927, "node_id": "MDQ6VXNlcjcwOTI3", "avatar_url": "https://avatars3.githubusercontent.com/u/70927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akheron", "html_url": "https://github.com/akheron", "followers_url": "https://api.github.com/users/akheron/followers", "following_url": "https://api.github.com/users/akheron/following{/other_user}", "gists_url": "https://api.github.com/users/akheron/gists{/gist_id}", "starred_url": "https://api.github.com/users/akheron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akheron/subscriptions", "organizations_url": "https://api.github.com/users/akheron/orgs", "repos_url": "https://api.github.com/users/akheron/repos", "events_url": "https://api.github.com/users/akheron/events{/privacy}", "received_events_url": "https://api.github.com/users/akheron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-09-22T07:14:16Z", "updated_at": "2012-09-25T08:17:43Z", "closed_at": "2012-09-25T08:17:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When created imperatively, I can set a Mapping's \"unknown\" attribute:\n\n```\nmy_mapping = SchemaNode(Mapping(unknown='raise'))\nmy_mapping.add(...)\n```\n\nWhen created declaratively, there's no way to do this, though:\n\n```\nclass MyMapping(MappingSchema):  # :(\n    ...\n```\n\nThe same applies to Sequence's \"scalar\" attribute and SequenceSchema.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/19", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/19/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/19/events", "html_url": "https://github.com/Pylons/colander/issues/19", "id": 1513051, "node_id": "MDU6SXNzdWUxNTEzMDUx", "number": 19, "title": "Invalid date exception is raised when datetime.now() is passed to deserialize", "user": {"login": "sarafsaurabh", "id": 341438, "node_id": "MDQ6VXNlcjM0MTQzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/341438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarafsaurabh", "html_url": "https://github.com/sarafsaurabh", "followers_url": "https://api.github.com/users/sarafsaurabh/followers", "following_url": "https://api.github.com/users/sarafsaurabh/following{/other_user}", "gists_url": "https://api.github.com/users/sarafsaurabh/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarafsaurabh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarafsaurabh/subscriptions", "organizations_url": "https://api.github.com/users/sarafsaurabh/orgs", "repos_url": "https://api.github.com/users/sarafsaurabh/repos", "events_url": "https://api.github.com/users/sarafsaurabh/events{/privacy}", "received_events_url": "https://api.github.com/users/sarafsaurabh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2011-08-29T18:46:02Z", "updated_at": "2013-08-10T08:12:06Z", "closed_at": "2013-08-10T08:12:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "if date string is passed, deserialize() works fine. However passing datetime.now() raises Invalid date exception.\n\n> > > import colander\n> > > import datetime\n> > > class Schema(colander.MappingSchema):\n> > > ...     dt = colander.SchemaNode(colander.DateTime())\n> > > ... \n> > > sch = Schema()\n> > > val = sch.deserialize({'dt': '2011-08-29 11:30:44.212639'})\n> > > val\n> > > {'dt': datetime.datetime(2011, 8, 29, 11, 30, 44, 212639, tzinfo=<iso8601.iso8601.Utc object at 0x237a3d0>)}\n> > > val = sch.deserialize({'dt': datetime.datetime.now()})\n> > > Traceback (most recent call last):\n> > >   File \"<console>\", line 1, in <module>\n> > >     raise error\n> > > Invalid: {'dt': u'Invalid date'}\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/17", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/17/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/17/events", "html_url": "https://github.com/Pylons/colander/issues/17", "id": 1453295, "node_id": "MDU6SXNzdWUxNDUzMjk1", "number": 17, "title": "colander.deferred loses wrapped object's __doc__ etc", "user": {"login": "mcdonc", "id": 125174, "node_id": "MDQ6VXNlcjEyNTE3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/125174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcdonc", "html_url": "https://github.com/mcdonc", "followers_url": "https://api.github.com/users/mcdonc/followers", "following_url": "https://api.github.com/users/mcdonc/following{/other_user}", "gists_url": "https://api.github.com/users/mcdonc/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcdonc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcdonc/subscriptions", "organizations_url": "https://api.github.com/users/mcdonc/orgs", "repos_url": "https://api.github.com/users/mcdonc/repos", "events_url": "https://api.github.com/users/mcdonc/events{/privacy}", "received_events_url": "https://api.github.com/users/mcdonc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 51487306, "node_id": "MDU6TGFiZWw1MTQ4NzMwNg==", "url": "https://api.github.com/repos/Pylons/colander/labels/docs", "name": "docs", "color": "0052cc", "default": false, "description": null}, {"id": 51486998, "node_id": "MDU6TGFiZWw1MTQ4Njk5OA==", "url": "https://api.github.com/repos/Pylons/colander/labels/sprintable", "name": "sprintable", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2011-08-21T16:50:58Z", "updated_at": "2013-08-19T18:42:14Z", "closed_at": "2013-08-19T18:42:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "For sphinx autodoc docs, colander.deferred should try to retain as much info about the wrapped object as possible so it can be rendered.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/14", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/14/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/14/events", "html_url": "https://github.com/Pylons/colander/issues/14", "id": 1352415, "node_id": "MDU6SXNzdWUxMzUyNDE1", "number": 14, "title": "Can't deserialize empty string", "user": {"login": "fafhrd91", "id": 598990, "node_id": "MDQ6VXNlcjU5ODk5MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/598990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fafhrd91", "html_url": "https://github.com/fafhrd91", "followers_url": "https://api.github.com/users/fafhrd91/followers", "following_url": "https://api.github.com/users/fafhrd91/following{/other_user}", "gists_url": "https://api.github.com/users/fafhrd91/gists{/gist_id}", "starred_url": "https://api.github.com/users/fafhrd91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fafhrd91/subscriptions", "organizations_url": "https://api.github.com/users/fafhrd91/orgs", "repos_url": "https://api.github.com/users/fafhrd91/repos", "events_url": "https://api.github.com/users/fafhrd91/events{/privacy}", "received_events_url": "https://api.github.com/users/fafhrd91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2011-08-05T17:05:44Z", "updated_at": "2011-08-05T18:47:26Z", "closed_at": "2011-08-05T18:41:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "string type treats empty string as missing value\n\nnode = colander.SchemaNode(\n    colander.String(),\n    name = 'str',\n    default = '')\n\nnode.deserialize('')\n^^^^^^^^^^^^^^^^^  raises required exception\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/7", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/7/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/7/events", "html_url": "https://github.com/Pylons/colander/issues/7", "id": 721023, "node_id": "MDU6SXNzdWU3MjEwMjM=", "number": 7, "title": "IndexError: list index out of range in Colander 0.8.1", "user": {"login": "zopyx", "id": 594239, "node_id": "MDQ6VXNlcjU5NDIzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/594239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zopyx", "html_url": "https://github.com/zopyx", "followers_url": "https://api.github.com/users/zopyx/followers", "following_url": "https://api.github.com/users/zopyx/following{/other_user}", "gists_url": "https://api.github.com/users/zopyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/zopyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zopyx/subscriptions", "organizations_url": "https://api.github.com/users/zopyx/orgs", "repos_url": "https://api.github.com/users/zopyx/repos", "events_url": "https://api.github.com/users/zopyx/events{/privacy}", "received_events_url": "https://api.github.com/users/zopyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2011-03-31T13:14:59Z", "updated_at": "2011-06-23T07:52:49Z", "closed_at": "2011-06-23T07:52:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Getting the following error with 0.8.1\n\n  Module haufe.adb.main.deform_util, line 173, in render_form\n  Module deform.field, line 419, in render\n  Module colander, line 1296, in serialize\n  Module colander, line 452, in serialize\n  Module colander, line 423, in _impl\n  Module colander, line 450, in callback\n  Module colander, line 1296, in serialize\n  Module colander, line 452, in serialize\n  Module colander, line 423, in _impl\n  Module colander, line 450, in callback\n  Module colander, line 1296, in serialize\n  Module colander, line 654, in serialize\n  Module colander, line 615, in _impl\n IndexError: list index out of range\n\nThis happens because one particular node has no children:\n\n(Pdb) print node\n<colander.SchemaNode object at 46912531444688 (named geschaeftsfelder)>\n(Pdb) print node.children\n[]\n\nthe node is defined as \n\n```\ngeschaeftsfelder = ListOfIntegers(\n    title=u'Redaktion(en)',\n    missing='',\n    widget=selection_geschaeftsfelder,\n    ro_widget=MultiSelectWidget(),\n    view_roles=[u'AutorenRed', u'AutorenFibu'],\n    edit_roles=[],\n    create_roles=[u'AutorenRed'],\n)\n```\n\nand ListOfIntegers defined as\n\nclass ListOfIntegers(colander.SequenceSchema):\n    item = colander.SchemaNode(\n                colander.Int(), \n             )\n\nWhy does Colander expect that a node must have at least one child:\n\n 613         for num, subval in enumerate(value):$\n 614             try:$\n 615                 result.append(callback(node.children[0], subval))$\n\n?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Pylons/colander/issues/2", "repository_url": "https://api.github.com/repos/Pylons/colander", "labels_url": "https://api.github.com/repos/Pylons/colander/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/Pylons/colander/issues/2/comments", "events_url": "https://api.github.com/repos/Pylons/colander/issues/2/events", "html_url": "https://github.com/Pylons/colander/issues/2", "id": 638028, "node_id": "MDU6SXNzdWU2MzgwMjg=", "number": 2, "title": "Invalid.asdict() broken for colander.All()", "user": {"login": "mmerickel", "id": 487237, "node_id": "MDQ6VXNlcjQ4NzIzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/487237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmerickel", "html_url": "https://github.com/mmerickel", "followers_url": "https://api.github.com/users/mmerickel/followers", "following_url": "https://api.github.com/users/mmerickel/following{/other_user}", "gists_url": "https://api.github.com/users/mmerickel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmerickel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmerickel/subscriptions", "organizations_url": "https://api.github.com/users/mmerickel/orgs", "repos_url": "https://api.github.com/users/mmerickel/repos", "events_url": "https://api.github.com/users/mmerickel/events{/privacy}", "received_events_url": "https://api.github.com/users/mmerickel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2011-03-01T17:24:33Z", "updated_at": "2012-02-23T05:57:12Z", "closed_at": "2012-02-23T05:57:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Invalid.asdict() fails to handle the list of messages returned by colander.All().\n\nIt should check if `if hasattr(exc.msg, '__iter__')` and do an extend instead of append or something similar.\n\n```\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/logging/__init__.py\", line 324, in getMessage\n    msg = str(self.msg)\nFile \"/Users/example/.virtualenvs/project/lib/python2.7/site-packages/colander-0.9.1-py2.7.egg/colander/__init__.py\", line 157, in __str__\n    return pprint.pformat(self.asdict())\nFile \"/Users/example/.virtualenvs/project/lib/python2.7/site-packages/colander-0.9.1-py2.7.egg/colander/__init__.py\", line 151, in asdict\n    errors['.'.join(keyparts)] = '; '.join(interpolate(msgs))\nTypeError: sequence item 0: expected string, list found\n```\n", "performed_via_github_app": null, "score": 1.0}]}