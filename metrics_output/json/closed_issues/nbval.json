{"total_count": 56, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/143", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/143/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/143/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/143", "id": 619717551, "node_id": "MDU6SXNzdWU2MTk3MTc1NTE=", "number": 143, "title": "Warnings in Python 3.8", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-17T14:29:22Z", "updated_at": "2020-05-17T20:13:01Z", "closed_at": "2020-05-17T20:13:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Deprecation warnings are raised due to invalid escape sequences. This can be fixed by using raw strings or escaping the literals. pyupgrade also helps in automatic conversion : https://github.com/asottile/pyupgrade/\r\n\r\n```\r\nfind . -iname '*.py' | xargs -P4 -I{} python3.8 -Wall -m py_compile {}\r\n./tests/test_unit_tests_in_notebooks.py:69: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\r\n  assert exitcode is 0\r\n./nbval/nbdime_reporter.py:28: DeprecationWarning: invalid escape sequence \\.\r\n  _re_nbval_nodeid = re.compile('.*\\.ipynb::Cell \\d+')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/139", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/139/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/139/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/139", "id": 585693084, "node_id": "MDU6SXNzdWU1ODU2OTMwODQ=", "number": 139, "title": "Deprication warnings from Pytest", "user": {"login": "ocampor", "id": 10488868, "node_id": "MDQ6VXNlcjEwNDg4ODY4", "avatar_url": "https://avatars3.githubusercontent.com/u/10488868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ocampor", "html_url": "https://github.com/ocampor", "followers_url": "https://api.github.com/users/ocampor/followers", "following_url": "https://api.github.com/users/ocampor/following{/other_user}", "gists_url": "https://api.github.com/users/ocampor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ocampor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ocampor/subscriptions", "organizations_url": "https://api.github.com/users/ocampor/orgs", "repos_url": "https://api.github.com/users/ocampor/repos", "events_url": "https://api.github.com/users/ocampor/events{/privacy}", "received_events_url": "https://api.github.com/users/ocampor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-22T11:04:04Z", "updated_at": "2020-07-30T16:48:50Z", "closed_at": "2020-07-30T10:49:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Problem Description\r\n\r\nI run some tests using nbval that raised the following warnings:\r\n- PytestDeprecationWarning: direct construction of IPyNbFile has been deprecated, please use IPyNbFile.from_parent return IPyNbFile(path, parent)\r\n- PytestDeprecationWarning: direct construction of IPyNbCell has been deprecated, please use IPyNbCell.from_parent\r\n    cell, options)\r\n-  DeprecationWarning: KernelManager._kernel_spec_manager_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.\r\n    def _kernel_spec_manager_changed(self):\r\n\r\n\r\n### Environment Details:\r\n\r\n```\r\nPytest Version: 5.4.1\r\nPython Version: 3.7\r\nNbval Version: 0.9.5\r\n```\r\n\r\nI can probably create a PR to fix these issues if you want.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/129", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/129/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/129/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/129", "id": 537949841, "node_id": "MDU6SXNzdWU1Mzc5NDk4NDE=", "number": 129, "title": "Incompatible with coverage 5.0", "user": {"login": "goerz", "id": 112306, "node_id": "MDQ6VXNlcjExMjMwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/112306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goerz", "html_url": "https://github.com/goerz", "followers_url": "https://api.github.com/users/goerz/followers", "following_url": "https://api.github.com/users/goerz/following{/other_user}", "gists_url": "https://api.github.com/users/goerz/gists{/gist_id}", "starred_url": "https://api.github.com/users/goerz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goerz/subscriptions", "organizations_url": "https://api.github.com/users/goerz/orgs", "repos_url": "https://api.github.com/users/goerz/repos", "events_url": "https://api.github.com/users/goerz/events{/privacy}", "received_events_url": "https://api.github.com/users/goerz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-12-14T18:45:06Z", "updated_at": "2020-02-12T12:06:17Z", "closed_at": "2020-02-08T16:40:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems like `nbval` does not work with the just released coverage 5.0 package: https://travis-ci.org/qucontrol/krotov/jobs/625049383", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/128", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/128/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/128/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/128", "id": 533257497, "node_id": "MDU6SXNzdWU1MzMyNTc0OTc=", "number": 128, "title": "RuntimeError with py38 on Windows", "user": {"login": "s-weigand", "id": 9513634, "node_id": "MDQ6VXNlcjk1MTM2MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/9513634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s-weigand", "html_url": "https://github.com/s-weigand", "followers_url": "https://api.github.com/users/s-weigand/followers", "following_url": "https://api.github.com/users/s-weigand/following{/other_user}", "gists_url": "https://api.github.com/users/s-weigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/s-weigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s-weigand/subscriptions", "organizations_url": "https://api.github.com/users/s-weigand/orgs", "repos_url": "https://api.github.com/users/s-weigand/repos", "events_url": "https://api.github.com/users/s-weigand/events{/privacy}", "received_events_url": "https://api.github.com/users/s-weigand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-05T10:23:02Z", "updated_at": "2020-02-12T12:09:19Z", "closed_at": "2020-02-12T12:09:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if I'm barking up the wrong tree and this is a problem with `jupyter_client`, but I'm sure you are more qualified to assess that.\r\n\r\n__Description:__\r\nPython version: 3.8\r\nOs: Windows 10 (`windows-latest` on github actions)\r\n\r\nIf you [run nbval with this settings](https://github.com/s-weigand/python-tools-for-students/runs/334654218#step:5:346), The kernel does not respond and throws:\r\n\r\n`RuntimeError: Kernel didn't respond in 60 seconds`\r\n\r\nThis problem only occurs on Windows, MacOx and Linux work fine.\r\n\r\nPS: If you are interested to migrate you tests to github actions as well, I could make a PR for that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/125", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/125/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/125/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/125", "id": 477384129, "node_id": "MDU6SXNzdWU0NzczODQxMjk=", "number": 125, "title": "Ensure notebooks running without error", "user": {"login": "wingedRuslan", "id": 14000852, "node_id": "MDQ6VXNlcjE0MDAwODUy", "avatar_url": "https://avatars1.githubusercontent.com/u/14000852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wingedRuslan", "html_url": "https://github.com/wingedRuslan", "followers_url": "https://api.github.com/users/wingedRuslan/followers", "following_url": "https://api.github.com/users/wingedRuslan/following{/other_user}", "gists_url": "https://api.github.com/users/wingedRuslan/gists{/gist_id}", "starred_url": "https://api.github.com/users/wingedRuslan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wingedRuslan/subscriptions", "organizations_url": "https://api.github.com/users/wingedRuslan/orgs", "repos_url": "https://api.github.com/users/wingedRuslan/repos", "events_url": "https://api.github.com/users/wingedRuslan/events{/privacy}", "received_events_url": "https://api.github.com/users/wingedRuslan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-06T13:33:06Z", "updated_at": "2019-08-07T14:29:19Z", "closed_at": "2019-08-07T14:29:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Although **nbval** extension is mainly used to compare the existed cell output with the output while testing(running) notebook, I would like to use **nbval** just to make sure that notebooks are running without errors. \r\n\r\nHow can I achieve this goal to ensure that running cells **will not** cause any errors?\r\n\r\n*My outputs are produced figures*\r\n\r\nThis will cause all cells to fail because the output information contains the memory address where the figure is stored (obviously, this is the unique value so it can't be compared).\r\n```\r\npy.test --nbval visualisations_tutorial.ipynb\r\n```\r\n\r\nMy workaround(?) solution is to place this comment in a cell so that the output is not compared.\r\n```\r\n# NBVAL_IGNORE_OUTPUT\r\npy.test --nbval visualisations_tutorial.ipynb\r\n```\r\n\r\nIs there a better solution to ensure that the notebooks are running without errors?\r\n\r\nIf you have any questions, feel free to ask.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/124", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/124/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/124/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/124", "id": 476342941, "node_id": "MDU6SXNzdWU0NzYzNDI5NDE=", "number": 124, "title": "Databricks support for code-coverage", "user": {"login": "tintinmj", "id": 4194530, "node_id": "MDQ6VXNlcjQxOTQ1MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4194530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tintinmj", "html_url": "https://github.com/tintinmj", "followers_url": "https://api.github.com/users/tintinmj/followers", "following_url": "https://api.github.com/users/tintinmj/following{/other_user}", "gists_url": "https://api.github.com/users/tintinmj/gists{/gist_id}", "starred_url": "https://api.github.com/users/tintinmj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tintinmj/subscriptions", "organizations_url": "https://api.github.com/users/tintinmj/orgs", "repos_url": "https://api.github.com/users/tintinmj/repos", "events_url": "https://api.github.com/users/tintinmj/events{/privacy}", "received_events_url": "https://api.github.com/users/tintinmj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-08-02T20:25:12Z", "updated_at": "2020-02-12T12:24:30Z", "closed_at": "2020-02-12T12:24:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Though the `nbval` is used for Jupyter notebook, I am not able to implement it in Databricks as it doesn't have `.ipynb` extension. Can a feature be introduced to test Databricks notebook too.\r\n\r\nCommunity version of Databricks can be used for development - https://community.cloud.databricks.com", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/121", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/121/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/121/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/121", "id": 452966120, "node_id": "MDU6SXNzdWU0NTI5NjYxMjA=", "number": 121, "title": "nbval not working with parallel/distributed pytest", "user": {"login": "CeaVi", "id": 49487501, "node_id": "MDQ6VXNlcjQ5NDg3NTAx", "avatar_url": "https://avatars2.githubusercontent.com/u/49487501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CeaVi", "html_url": "https://github.com/CeaVi", "followers_url": "https://api.github.com/users/CeaVi/followers", "following_url": "https://api.github.com/users/CeaVi/following{/other_user}", "gists_url": "https://api.github.com/users/CeaVi/gists{/gist_id}", "starred_url": "https://api.github.com/users/CeaVi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CeaVi/subscriptions", "organizations_url": "https://api.github.com/users/CeaVi/orgs", "repos_url": "https://api.github.com/users/CeaVi/repos", "events_url": "https://api.github.com/users/CeaVi/events{/privacy}", "received_events_url": "https://api.github.com/users/CeaVi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-06T10:58:24Z", "updated_at": "2019-06-08T12:27:39Z", "closed_at": "2019-06-06T12:28:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Parallel/distributed testing with pytest (pytest-xdist) fails: it seems that all cells are executed in parallel instead of sequentially, which will obviously not work for most notebooks.\r\n\r\nTo reproduce, create a notebook doing dependent things in different cells, for example import a package in the first cell and then use it in other packages. Install pytest-xdist. Then, try for example:\r\n\r\n```shell\r\npurest -n auto --nbval <notebook file>\r\n```\r\n\r\n(the `-n auto` option asking pytest to use all available CPU cores on the machine)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/120", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/120/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/120/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/120", "id": 451779628, "node_id": "MDU6SXNzdWU0NTE3Nzk2Mjg=", "number": 120, "title": "Possible framework alternative", "user": {"login": "glass-ships", "id": 26975530, "node_id": "MDQ6VXNlcjI2OTc1NTMw", "avatar_url": "https://avatars2.githubusercontent.com/u/26975530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glass-ships", "html_url": "https://github.com/glass-ships", "followers_url": "https://api.github.com/users/glass-ships/followers", "following_url": "https://api.github.com/users/glass-ships/following{/other_user}", "gists_url": "https://api.github.com/users/glass-ships/gists{/gist_id}", "starred_url": "https://api.github.com/users/glass-ships/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glass-ships/subscriptions", "organizations_url": "https://api.github.com/users/glass-ships/orgs", "repos_url": "https://api.github.com/users/glass-ships/repos", "events_url": "https://api.github.com/users/glass-ships/events{/privacy}", "received_events_url": "https://api.github.com/users/glass-ships/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-04T03:22:57Z", "updated_at": "2019-06-04T07:51:28Z", "closed_at": "2019-06-04T07:51:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently, I wrote a python script which uses `nbformat` and `nbconvert` to operate as a simple test that a jupyter notebook runs without error. Output comparison is something I'm interested in but haven't added quite yet. It's available in a gitlab repo [here](https://gitlab.com/glass-ships/analysis-tools/blob/master/nbtest.py).\r\n\r\nThat said, I'm curious as to why `py.test` is used here preferentially (ie. is there functionality specific to the pytest suite that outweighs the benefit of something like my script? \r\n\r\nSecondary to that, I've noticed in my research that `py.test` has been deprecated in favor of `pytest` - is there any motivation (or need) to update the calls made? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/115", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/115/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/115/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/115", "id": 436532851, "node_id": "MDU6SXNzdWU0MzY1MzI4NTE=", "number": 115, "title": "Issues with the xeus-cling C++ kernel", "user": {"login": "SylvainCorlay", "id": 2397974, "node_id": "MDQ6VXNlcjIzOTc5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvainCorlay", "html_url": "https://github.com/SylvainCorlay", "followers_url": "https://api.github.com/users/SylvainCorlay/followers", "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}", "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions", "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs", "repos_url": "https://api.github.com/users/SylvainCorlay/repos", "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-24T07:12:43Z", "updated_at": "2019-04-24T12:16:20Z", "closed_at": "2019-04-24T12:16:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just opening this for reference, as I could not investigate this morning:\r\n\r\n`nbval` does not appear to work with `xeus-cling`.\r\n\r\nDebugging xeus-cling messaging, it does appear that we *are* adding the status to the messages. This may be due to xeus-cling sending iopub messages before the `execute_reply`.\r\n\r\n```\r\nself = <nbval.kernel.RunningKernel object at 0x7f317307cac8>\r\nmsg_id = '499b8458-486c2e61b016925af10d2be8', timeout = 10\r\n\r\n    def await_reply(self, msg_id, timeout=None):\r\n        \"\"\"\r\n        Continuously poll the kernel 'shell' stream for messages until:\r\n         - It receives an 'execute_reply' status for the given message id\r\n         - The timeout is reached awaiting a message, in which case\r\n           a `Queue.Empty` exception will be raised.\r\n        \"\"\"\r\n        while True:\r\n            msg = self.get_message(stream='shell', timeout=timeout)\r\n    \r\n            # Is this the message we are waiting for?\r\n            if msg['parent_header'].get('msg_id') == msg_id:\r\n>               if msg['content']['status'] == 'aborted':\r\nE               KeyError: 'status'\r\n\r\n../../miniconda3/lib/python3.7/site-packages/nbval/kernel.py:161: KeyError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/114", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/114/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/114/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/114", "id": 430162116, "node_id": "MDU6SXNzdWU0MzAxNjIxMTY=", "number": 114, "title": "The option to execute only notebooks seems to be broken with pytest 4.4.0", "user": {"login": "ocefpaf", "id": 950575, "node_id": "MDQ6VXNlcjk1MDU3NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/950575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ocefpaf", "html_url": "https://github.com/ocefpaf", "followers_url": "https://api.github.com/users/ocefpaf/followers", "following_url": "https://api.github.com/users/ocefpaf/following{/other_user}", "gists_url": "https://api.github.com/users/ocefpaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ocefpaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ocefpaf/subscriptions", "organizations_url": "https://api.github.com/users/ocefpaf/orgs", "repos_url": "https://api.github.com/users/ocefpaf/repos", "events_url": "https://api.github.com/users/ocefpaf/events{/privacy}", "received_events_url": "https://api.github.com/users/ocefpaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-07T16:03:20Z", "updated_at": "2020-04-27T13:59:13Z", "closed_at": "2020-04-27T13:59:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Something changed in the latest pytest and the option `-p no:python` now returns `ValueError: unknown configuration value: 'python_files'`.\r\nDowngrading `pytest` or not using the option fixes the problem.\r\n\r\nFull traceback below.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 927, in getini\r\n    return self._inicache[name]\r\nKeyError: 'python_files'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 934, in _getini\r\n    description, type, default = self._parser._inidict[name]\r\nKeyError: 'python_files'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/bin/pytest\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 60, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 201, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/pluggy/hooks.py\", line 289, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/pluggy/manager.py\", line 68, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/pluggy/manager.py\", line 62, in <lambda>\r\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/pluggy/callers.py\", line 203, in _multicall\r\n    gen.send(outcome)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/helpconfig.py\", line 93, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 679, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 896, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 836, in _preparse\r\n    self._consider_importhook(args)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 772, in _consider_importhook\r\n    hook = _pytest.assertion.install_importhook(self)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/assertion/__init__.py\", line 81, in install_importhook\r\n    config._assertstate.hook = hook = rewrite.AssertionRewritingHook(config)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/assertion/rewrite.py\", line 63, in __init__\r\n    self.fnpats = config.getini(\"python_files\")\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 929, in getini\r\n    self._inicache[name] = val = self._getini(name)\r\n  File \"/home/filipe/miniconda3/envs/FOLIUM/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 936, in _getini\r\n    raise ValueError(\"unknown configuration value: %r\" % (name,))\r\nValueError: unknown configuration value: 'python_files'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/105", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/105/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/105/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/105", "id": 370921321, "node_id": "MDU6SXNzdWUzNzA5MjEzMjE=", "number": 105, "title": "How to run unittest", "user": {"login": "eLvErDe", "id": 1586757, "node_id": "MDQ6VXNlcjE1ODY3NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1586757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eLvErDe", "html_url": "https://github.com/eLvErDe", "followers_url": "https://api.github.com/users/eLvErDe/followers", "following_url": "https://api.github.com/users/eLvErDe/following{/other_user}", "gists_url": "https://api.github.com/users/eLvErDe/gists{/gist_id}", "starred_url": "https://api.github.com/users/eLvErDe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eLvErDe/subscriptions", "organizations_url": "https://api.github.com/users/eLvErDe/orgs", "repos_url": "https://api.github.com/users/eLvErDe/repos", "events_url": "https://api.github.com/users/eLvErDe/events{/privacy}", "received_events_url": "https://api.github.com/users/eLvErDe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-10-17T06:45:25Z", "updated_at": "2018-10-17T09:47:06Z", "closed_at": "2018-10-17T09:08:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWhen I run pytest I get\r\n\r\n`\r\nusage: py.test [options] [file_or_dir] [file_or_dir] [...]\r\npy.test: error: unrecognized arguments: --nbval --current-env\r\n  inifile: None\r\n  rootdir: /home/acecile/packaging/onnx/nbval/nbval-0.9.1\r\n`\r\n\r\nI have the feeling that unittest can be run only AFTER the package has been installed system-wide, which looks wrong to me.\r\n\r\nThanks in advance, Adam", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/104", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/104/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/104/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/104", "id": 367139118, "node_id": "MDU6SXNzdWUzNjcxMzkxMTg=", "number": 104, "title": "Nbval vs conda envs", "user": {"login": "vidartf", "id": 510760, "node_id": "MDQ6VXNlcjUxMDc2MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/510760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vidartf", "html_url": "https://github.com/vidartf", "followers_url": "https://api.github.com/users/vidartf/followers", "following_url": "https://api.github.com/users/vidartf/following{/other_user}", "gists_url": "https://api.github.com/users/vidartf/gists{/gist_id}", "starred_url": "https://api.github.com/users/vidartf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vidartf/subscriptions", "organizations_url": "https://api.github.com/users/vidartf/orgs", "repos_url": "https://api.github.com/users/vidartf/repos", "events_url": "https://api.github.com/users/vidartf/events{/privacy}", "received_events_url": "https://api.github.com/users/vidartf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-05T09:52:46Z", "updated_at": "2018-10-12T09:06:32Z", "closed_at": "2018-10-12T09:06:32Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I ran into an interesting case today:\r\n- I had nbval installed in my root conda env\r\n- I had the package I wanted to test dev installed in a separate conda env (activated)\r\n- Running nbval gave `ModuleNotFoundError` as it could not find the package that I wanted to test. This happened even if I used the `--current-env` flag.\r\n- Running `python -c import mymodule` while the env was activated did *not* throw a `ModuleNotFoundError`. Opening and running the notebook with `jupyter notebook <file>` also worked as expected.\r\n- Installing nbval into the non-root conda env fixed the problem.\r\n\r\nIs this to be expected? If so, is this a case were we should give a more specific warning/error?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/103", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/103/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/103/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/103", "id": 362851731, "node_id": "MDU6SXNzdWUzNjI4NTE3MzE=", "number": 103, "title": "coverage report should use package relative path instead of absolute path", "user": {"login": "utensil", "id": 64258, "node_id": "MDQ6VXNlcjY0MjU4", "avatar_url": "https://avatars1.githubusercontent.com/u/64258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/utensil", "html_url": "https://github.com/utensil", "followers_url": "https://api.github.com/users/utensil/followers", "following_url": "https://api.github.com/users/utensil/following{/other_user}", "gists_url": "https://api.github.com/users/utensil/gists{/gist_id}", "starred_url": "https://api.github.com/users/utensil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/utensil/subscriptions", "organizations_url": "https://api.github.com/users/utensil/orgs", "repos_url": "https://api.github.com/users/utensil/repos", "events_url": "https://api.github.com/users/utensil/events{/privacy}", "received_events_url": "https://api.github.com/users/utensil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-09-22T12:00:32Z", "updated_at": "2018-10-02T08:33:32Z", "closed_at": "2018-10-01T13:37:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Before adding nbval, the test command was like:\r\n\r\n```bash\r\npytest --cov=galgebra test\r\n```\r\n\r\nit outputs:\r\n\r\n```\r\n----------- coverage: platform win32, python 3.6.2-final-0 -----------\r\nName                   Stmts   Miss  Cover\r\n------------------------------------------\r\ngalgebra\\__init__.py       0      0   100%\r\ngalgebra\\ga.py          1116    415    63%\r\ngalgebra\\lt.py           594    529    11%\r\ngalgebra\\metric.py       481    219    54%\r\ngalgebra\\mv.py          1815   1142    37%\r\ngalgebra\\printer.py      914    639    30%\r\ngalgebra\\setgapth.py      25     25     0%\r\ngalgebra\\utils.py         11      6    45%\r\n------------------------------------------\r\nTOTAL                   4956   2975    40%\r\n```\r\nAfter adding nbval, the test command was like:\r\n\r\n```\r\npytest --cov=galgebra --nbval examples/ipython/dop.ipynb --current-env test\r\n```\r\nit outputs:\r\n\r\n```\r\n----------- coverage: platform win32, python 3.6.2-final-0 -----------\r\nName                                                   Stmts   Miss  Cover\r\n--------------------------------------------------------------------------\r\nE:\\Miniconda3\\Lib\\site-packages\\galgebra\\__init__.py       0      0   100%\r\nE:\\Miniconda3\\Lib\\site-packages\\galgebra\\ga.py          1116    654    41%\r\nE:\\Miniconda3\\Lib\\site-packages\\galgebra\\lt.py           594    529    11%\r\nE:\\Miniconda3\\Lib\\site-packages\\galgebra\\metric.py       481    274    43%\r\nE:\\Miniconda3\\Lib\\site-packages\\galgebra\\mv.py          1815   1083    40%\r\nE:\\Miniconda3\\Lib\\site-packages\\galgebra\\printer.py      914    573    37%\r\nE:\\Miniconda3\\Lib\\site-packages\\galgebra\\setgapth.py      25     25     0%\r\nE:\\Miniconda3\\Lib\\site-packages\\galgebra\\utils.py         11      6    45%\r\ngalgebra\\__init__.py                                       0      0   100%\r\ngalgebra\\ga.py                                          1116    415    63%\r\ngalgebra\\lt.py                                           594    529    11%\r\ngalgebra\\metric.py                                       481    219    54%\r\ngalgebra\\mv.py                                          1815   1142    37%\r\ngalgebra\\printer.py                                      914    639    30%\r\ngalgebra\\setgapth.py                                      25     25     0%\r\ngalgebra\\utils.py                                         11      6    45%\r\n--------------------------------------------------------------------------\r\nTOTAL                                                   9912   6119    38%\r\n```\r\n\r\nwhich is not desired.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/101", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/101/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/101/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/101", "id": 353775601, "node_id": "MDU6SXNzdWUzNTM3NzU2MDE=", "number": 101, "title": "Support pytest.skip()", "user": {"login": "gasparka", "id": 16946258, "node_id": "MDQ6VXNlcjE2OTQ2MjU4", "avatar_url": "https://avatars2.githubusercontent.com/u/16946258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gasparka", "html_url": "https://github.com/gasparka", "followers_url": "https://api.github.com/users/gasparka/followers", "following_url": "https://api.github.com/users/gasparka/following{/other_user}", "gists_url": "https://api.github.com/users/gasparka/gists{/gist_id}", "starred_url": "https://api.github.com/users/gasparka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gasparka/subscriptions", "organizations_url": "https://api.github.com/users/gasparka/orgs", "repos_url": "https://api.github.com/users/gasparka/repos", "events_url": "https://api.github.com/users/gasparka/events{/privacy}", "received_events_url": "https://api.github.com/users/gasparka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-24T13:03:51Z", "updated_at": "2018-08-26T14:54:24Z", "closed_at": "2018-08-26T14:35:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is the standard way to skip in pytest and i my opinion superior to # NBVAL_SKIP. \r\nFor example if i only want to skip the cell in CI i could write:\r\n```python\r\nif  'TRAVIS' in os.environ:\r\n    pytest.skip()\r\n```\r\nI could work on a PR if there is interest in pulling this in.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/99", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/99/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/99/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/99", "id": 353013998, "node_id": "MDU6SXNzdWUzNTMwMTM5OTg=", "number": 99, "title": "Option to select only notebook tests", "user": {"login": "gasparka", "id": 16946258, "node_id": "MDQ6VXNlcjE2OTQ2MjU4", "avatar_url": "https://avatars2.githubusercontent.com/u/16946258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gasparka", "html_url": "https://github.com/gasparka", "followers_url": "https://api.github.com/users/gasparka/followers", "following_url": "https://api.github.com/users/gasparka/following{/other_user}", "gists_url": "https://api.github.com/users/gasparka/gists{/gist_id}", "starred_url": "https://api.github.com/users/gasparka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gasparka/subscriptions", "organizations_url": "https://api.github.com/users/gasparka/orgs", "repos_url": "https://api.github.com/users/gasparka/repos", "events_url": "https://api.github.com/users/gasparka/events{/privacy}", "received_events_url": "https://api.github.com/users/gasparka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-22T15:45:20Z", "updated_at": "2018-08-24T07:18:16Z", "closed_at": "2018-08-24T07:18:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `pytest --nbval` picks all the tests it finds. It would be useful to have an option to select only the notebooks. I found some ways to do this via .cfg file, but command line option would be better.\r\nIdeas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/97", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/97/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/97/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/97", "id": 348477837, "node_id": "MDU6SXNzdWUzNDg0Nzc4Mzc=", "number": 97, "title": "pytest --nbval comparing inline images from extension", "user": {"login": "stuaxo", "id": 179677, "node_id": "MDQ6VXNlcjE3OTY3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/179677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stuaxo", "html_url": "https://github.com/stuaxo", "followers_url": "https://api.github.com/users/stuaxo/followers", "following_url": "https://api.github.com/users/stuaxo/following{/other_user}", "gists_url": "https://api.github.com/users/stuaxo/gists{/gist_id}", "starred_url": "https://api.github.com/users/stuaxo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stuaxo/subscriptions", "organizations_url": "https://api.github.com/users/stuaxo/orgs", "repos_url": "https://api.github.com/users/stuaxo/repos", "events_url": "https://api.github.com/users/stuaxo/events{/privacy}", "received_events_url": "https://api.github.com/users/stuaxo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-08-07T20:36:59Z", "updated_at": "2018-10-04T12:45:56Z", "closed_at": "2018-10-04T12:16:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n   I'm trying to use pytest --nbval to test output from cairo-jupyter.\r\n\r\nWe use display(surface), which outputs png data into the notebook.\r\n\r\nWhen I try and run inside pytest --nbval, it acts as though the extension is not loaded, although the cell before it has ```%reload_ext cairo_jupyter```.\r\n\r\nAny idea whats going on ?\r\n\r\nextension (info here on how to install)\r\nhttps://github.com/fomightez/cairo-jupyter\r\n\r\nnotebook - you can see the output here, if you view in raw mode you can see the cell output is a data url with a png\r\nhttps://github.com/fomightez/cairo-jupyter/blob/master/demos/cairo_jupyter_extension.ipynb\r\n\r\noutput\r\n```\r\n$ py.test --nbval demos/cairo_jupyter_extension.ipynb \r\n===================================================================================== test session starts =====================================================================================\r\nplatform linux -- Python 3.6.5, pytest-3.7.1, py-1.5.4, pluggy-0.7.1\r\nrootdir: /home/stu/projects/mine/cairo-jupyter, inifile:\r\nplugins: nbval-0.9.1\r\ncollected 3 items                                                                                                                                                                             \r\n\r\ndemos/cairo_jupyter_extension.ipynb .F.                                                                                                                                                 [100%]\r\n\r\n========================================================================================== FAILURES ===========================================================================================\r\n_________________________________________________________________________ demos/cairo_jupyter_extension.ipynb::Cell 1 _________________________________________________________________________\r\nNotebook cell execution failed\r\nCell 1: Cell outputs differ\r\n\r\nInput:\r\n%load_ext cairo_jupyter\r\n\r\n# Using display with cairo surfaces\r\nimport cairocffi as cairo\r\n\r\nsurface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 300, 300)\r\n    \r\ncr = cairo.Context(surface)\r\n\r\nfor i in range(16):\r\n    cr.save()\r\n    cr.translate(150, 150)\r\n    cr.set_source_rgba(0.7, 0.9, 0.0, 0.25)\r\n    cr.rotate(i * 0.1)\r\n    cr.rectangle(-50, -50, 100, 100)\r\n    cr.stroke()\r\n    cr.restore()\r\n\r\ndisplay(surface)\r\n\r\nTraceback:\r\n mismatch 'text/plain'\r\n\r\n assert reference_output == test_output failed:\r\n\r\n  '<cairocffi.s...7eff8065dc88>' == '<cairocffi.su...7f3ec81aaa90>'\r\n  - <cairocffi.surfaces.ImageSurface at 0x7eff8065dc88>\r\n  ?                                         -------  ^\r\n  + <cairocffi.surfaces.ImageSurface at 0x7f3ec81aaa90>\r\n  ?                                        ++   ^^^^^^\r\n\r\n\r\n============================================================================= 1 failed, 2 passed in 2.13 seconds ==============================================================================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/96", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/96/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/96/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/96", "id": 347215193, "node_id": "MDU6SXNzdWUzNDcyMTUxOTM=", "number": 96, "title": "run loops for just one iteration?", "user": {"login": "jeff-regier", "id": 8953355, "node_id": "MDQ6VXNlcjg5NTMzNTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/8953355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeff-regier", "html_url": "https://github.com/jeff-regier", "followers_url": "https://api.github.com/users/jeff-regier/followers", "following_url": "https://api.github.com/users/jeff-regier/following{/other_user}", "gists_url": "https://api.github.com/users/jeff-regier/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeff-regier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeff-regier/subscriptions", "organizations_url": "https://api.github.com/users/jeff-regier/orgs", "repos_url": "https://api.github.com/users/jeff-regier/repos", "events_url": "https://api.github.com/users/jeff-regier/events{/privacy}", "received_events_url": "https://api.github.com/users/jeff-regier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-03T00:06:30Z", "updated_at": "2018-08-03T18:51:17Z", "closed_at": "2018-08-03T18:46:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to have nbval-lax run slightly different code than Jupyter would? In the Jupyter notebook, I have an algorithm that runs for a long time -- too long for unit tests. I'd like to nbval-lax to run that loop for just 1 iteration. Is there a way to do that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/91", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/91/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/91/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/91", "id": 292827705, "node_id": "MDU6SXNzdWUyOTI4Mjc3MDU=", "number": 91, "title": "Disable colors for junit reports", "user": {"login": "gartentrio", "id": 25531202, "node_id": "MDEyOk9yZ2FuaXphdGlvbjI1NTMxMjAy", "avatar_url": "https://avatars3.githubusercontent.com/u/25531202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gartentrio", "html_url": "https://github.com/gartentrio", "followers_url": "https://api.github.com/users/gartentrio/followers", "following_url": "https://api.github.com/users/gartentrio/following{/other_user}", "gists_url": "https://api.github.com/users/gartentrio/gists{/gist_id}", "starred_url": "https://api.github.com/users/gartentrio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gartentrio/subscriptions", "organizations_url": "https://api.github.com/users/gartentrio/orgs", "repos_url": "https://api.github.com/users/gartentrio/repos", "events_url": "https://api.github.com/users/gartentrio/events{/privacy}", "received_events_url": "https://api.github.com/users/gartentrio/received_events", "type": "Organization", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-01-30T15:35:52Z", "updated_at": "2018-02-10T15:58:38Z", "closed_at": "2018-02-10T15:58:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "We use pytest and nbval to generate junit-xml files. Unfortunately there is no option to disable the coloring of output messages. Here is an example junit xml file:\r\n\r\n```\r\n<testsuite errors=\"0\" failures=\"1\" name=\"pytest\" skips=\"0\" tests=\"3\" time=\"3.044\">\r\n<testcase classname=\"notebooks.tests.test_error.ipynb\" file=\"notebooks/tests/test_error.ipynb\" line=\"0\" name=\"Cell 0\" time=\"1.4594926834106445\">\r\n<failure message=\"#x1B[91mNotebook cell execution failed#x1B[0m #x1B[94mCell 0: Cell execution caused an exception Input: #x1B[0mfoo = \"Hase\" assert foo == \"Igel\" #x1B[94mTraceback:#x1B[0m #x1B[0;31m---------------------------------------------------------------------------#x1B[0m #x1B[0;31mAssertionError#x1B[0m Traceback (most recent call last) #x1B[0;32m<ipython-input-1-24658342da6f>#x1B[0m in #x1B[0;36m<module>#x1B[0;34m()#x1B[0m #x1B[1;32m 1#x1B[0m #x1B[0mfoo#x1B[0m #x1B[0;34m=#x1B[0m #x1B[0;34m\"Hase\"#x1B[0m#x1B[0;34m#x1B[0m#x1B[0m #x1B[1;32m 2#x1B[0m #x1B[0;34m#x1B[0m#x1B[0m #x1B[0;32m----> 3#x1B[0;31m #x1B[0;32massert#x1B[0m #x1B[0mfoo#x1B[0m #x1B[0;34m==#x1B[0m #x1B[0;34m\"Igel\"#x1B[0m#x1B[0;34m#x1B[0m#x1B[0m #x1B[0m #x1B[0;31mAssertionError#x1B[0m: \">\r\n#x1B[91mNotebook cell execution failed#x1B[0m #x1B[94mCell 0: Cell execution caused an exception Input: #x1B[0mfoo = \"Hase\" assert foo == \"Igel\" #x1B[94mTraceback:#x1B[0m #x1B[0;31m---------------------------------------------------------------------------#x1B[0m #x1B[0;31mAssertionError#x1B[0m Traceback (most recent call last) #x1B[0;32m<ipython-input-1-24658342da6f>#x1B[0m in #x1B[0;36m<module>#x1B[0;34m()#x1B[0m #x1B[1;32m 1#x1B[0m #x1B[0mfoo#x1B[0m #x1B[0;34m=#x1B[0m #x1B[0;34m\"Hase\"#x1B[0m#x1B[0;34m#x1B[0m#x1B[0m #x1B[1;32m 2#x1B[0m #x1B[0;34m#x1B[0m#x1B[0m #x1B[0;32m----> 3#x1B[0;31m #x1B[0;32massert#x1B[0m #x1B[0mfoo#x1B[0m #x1B[0;34m==#x1B[0m #x1B[0;34m\"Igel\"#x1B[0m#x1B[0;34m#x1B[0m#x1B[0m #x1B[0m #x1B[0;31mAssertionError#x1B[0m:\r\n</failure>\r\n</testcase>\r\n<testcase classname=\"notebooks.tests.test_error.ipynb\" file=\"notebooks/tests/test_error.ipynb\" line=\"0\" name=\"Cell 1\" time=\"1.2278406620025635\"/>\r\n<testcase classname=\"notebooks.tests.test_error.ipynb\" file=\"notebooks/tests/test_error.ipynb\" line=\"0\" name=\"Cell 2\" time=\"0.34316015243530273\"/>\r\n</testsuite>\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/88", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/88/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/88/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/88", "id": 291840922, "node_id": "MDU6SXNzdWUyOTE4NDA5MjI=", "number": 88, "title": "Option to ignore logs (output to stderr)", "user": {"login": "gartentrio", "id": 25531202, "node_id": "MDEyOk9yZ2FuaXphdGlvbjI1NTMxMjAy", "avatar_url": "https://avatars3.githubusercontent.com/u/25531202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gartentrio", "html_url": "https://github.com/gartentrio", "followers_url": "https://api.github.com/users/gartentrio/followers", "following_url": "https://api.github.com/users/gartentrio/following{/other_user}", "gists_url": "https://api.github.com/users/gartentrio/gists{/gist_id}", "starred_url": "https://api.github.com/users/gartentrio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gartentrio/subscriptions", "organizations_url": "https://api.github.com/users/gartentrio/orgs", "repos_url": "https://api.github.com/users/gartentrio/repos", "events_url": "https://api.github.com/users/gartentrio/events{/privacy}", "received_events_url": "https://api.github.com/users/gartentrio/received_events", "type": "Organization", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-26T09:19:57Z", "updated_at": "2018-01-30T15:31:58Z", "closed_at": "2018-01-30T15:31:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nit would be great if there was an option to ignore output to stderr altogether when running tests. Have you considered implementing this?\r\nThanks\r\nMark", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/84", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/84/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/84/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/84", "id": 288672651, "node_id": "MDU6SXNzdWUyODg2NzI2NTE=", "number": 84, "title": "Missing coverage dependency", "user": {"login": "serge-sans-paille", "id": 863807, "node_id": "MDQ6VXNlcjg2MzgwNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/863807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/serge-sans-paille", "html_url": "https://github.com/serge-sans-paille", "followers_url": "https://api.github.com/users/serge-sans-paille/followers", "following_url": "https://api.github.com/users/serge-sans-paille/following{/other_user}", "gists_url": "https://api.github.com/users/serge-sans-paille/gists{/gist_id}", "starred_url": "https://api.github.com/users/serge-sans-paille/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/serge-sans-paille/subscriptions", "organizations_url": "https://api.github.com/users/serge-sans-paille/orgs", "repos_url": "https://api.github.com/users/serge-sans-paille/repos", "events_url": "https://api.github.com/users/serge-sans-paille/events{/privacy}", "received_events_url": "https://api.github.com/users/serge-sans-paille/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-15T17:46:19Z", "updated_at": "2018-01-16T10:09:28Z", "closed_at": "2018-01-16T10:09:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`nbval` now depends from the `coverage` package, as required in `nbval/cover.py`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/81", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/81/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/81/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/81", "id": 288231646, "node_id": "MDU6SXNzdWUyODgyMzE2NDY=", "number": 81, "title": "Failing on a cell that returns no output normally", "user": {"login": "psychemedia", "id": 82988, "node_id": "MDQ6VXNlcjgyOTg4", "avatar_url": "https://avatars0.githubusercontent.com/u/82988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psychemedia", "html_url": "https://github.com/psychemedia", "followers_url": "https://api.github.com/users/psychemedia/followers", "following_url": "https://api.github.com/users/psychemedia/following{/other_user}", "gists_url": "https://api.github.com/users/psychemedia/gists{/gist_id}", "starred_url": "https://api.github.com/users/psychemedia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psychemedia/subscriptions", "organizations_url": "https://api.github.com/users/psychemedia/orgs", "repos_url": "https://api.github.com/users/psychemedia/repos", "events_url": "https://api.github.com/users/psychemedia/events{/privacy}", "received_events_url": "https://api.github.com/users/psychemedia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-12T20:05:01Z", "updated_at": "2018-01-15T14:34:27Z", "closed_at": "2018-01-15T13:49:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a notebook in which a code cell is used to run a shell command that, if all goes well, does not return anything. If the shell command breaks, an error message is returned and displayed as code cell output.\r\n\r\nThis error does not seem to result in a failed test.\r\n\r\nTo test this, I created a notebook with 3 code cells, `print('test')` in each, ran the notebook, cleared the output of the second code cell and then ran a test. It passed whereas I would have expected it to fail in the sense of cell 2 generating an output where there was none originally.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/79", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/79/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/79/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/79", "id": 278320892, "node_id": "MDU6SXNzdWUyNzgzMjA4OTI=", "number": 79, "title": "How to determine if a Notebook has cell errors", "user": {"login": "rjrussell77", "id": 8116184, "node_id": "MDQ6VXNlcjgxMTYxODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/8116184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rjrussell77", "html_url": "https://github.com/rjrussell77", "followers_url": "https://api.github.com/users/rjrussell77/followers", "following_url": "https://api.github.com/users/rjrussell77/following{/other_user}", "gists_url": "https://api.github.com/users/rjrussell77/gists{/gist_id}", "starred_url": "https://api.github.com/users/rjrussell77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rjrussell77/subscriptions", "organizations_url": "https://api.github.com/users/rjrussell77/orgs", "repos_url": "https://api.github.com/users/rjrussell77/repos", "events_url": "https://api.github.com/users/rjrussell77/events{/privacy}", "received_events_url": "https://api.github.com/users/rjrussell77/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-01T00:44:57Z", "updated_at": "2017-12-01T11:33:01Z", "closed_at": "2017-12-01T11:33:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am writing a New Relic Synthetic (Javascript) which opens and runs a Notebook. I block until Jupyter.notebook.kernel_busy is false. Now I need to know if the notebook completed successfully with NO errors in any cells. Is there such a boolean or status or event or ??? I can monitor to determine success?\r\nBasically I need a programmatic way to know if a Notebook has completed with errors or success.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/78", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/78/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/78/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/78", "id": 269519779, "node_id": "MDU6SXNzdWUyNjk1MTk3Nzk=", "number": 78, "title": "Improve documentation", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-10-30T08:44:36Z", "updated_at": "2020-02-12T12:19:24Z", "closed_at": "2020-02-12T12:19:11Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We need an overview of what NBVAL can do, including a screen shoot of typical test output to explain quickly why people may (or may not) want to read further about the tool. This might be an opportunity to move documentation to read the docs, to generally be more in line with what is expected from potential customers.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/74", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/74/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/74/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/74", "id": 254741892, "node_id": "MDU6SXNzdWUyNTQ3NDE4OTI=", "number": 74, "title": "Link to documentation in readme?", "user": {"login": "mpacer", "id": 2482408, "node_id": "MDQ6VXNlcjI0ODI0MDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2482408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpacer", "html_url": "https://github.com/mpacer", "followers_url": "https://api.github.com/users/mpacer/followers", "following_url": "https://api.github.com/users/mpacer/following{/other_user}", "gists_url": "https://api.github.com/users/mpacer/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpacer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpacer/subscriptions", "organizations_url": "https://api.github.com/users/mpacer/orgs", "repos_url": "https://api.github.com/users/mpacer/repos", "events_url": "https://api.github.com/users/mpacer/events{/privacy}", "received_events_url": "https://api.github.com/users/mpacer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-01T20:18:28Z", "updated_at": "2018-01-13T13:48:28Z", "closed_at": "2018-01-13T13:48:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is no current link to the documentation as a static website in the readme\u2026 nbviewer should be fine for this, I'll make a PR. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/67", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/67/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/67/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/67", "id": 239099343, "node_id": "MDU6SXNzdWUyMzkwOTkzNDM=", "number": 67, "title": "Show filename of notebook with failing cell", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-06-28T09:08:03Z", "updated_at": "2018-01-13T13:41:41Z", "closed_at": "2018-01-13T13:41:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Example files in https://github.com/computationalmodelling/nbval/tree/master/issues/67\r\n\r\nIssues is that \r\n\r\nWhen running\r\n\r\n  `py.test --nbval notebook1.ipynb notebook2.ipynb`\r\n\r\nthe output is::\r\n\r\n    ======================================= test session starts ===============\r\n    platform darwin -- Python 3.6.0, pytest-3.0.7, py-1.4.33, pluggy-0.4.0\r\n    rootdir: /Users/fangohr/git/nbval, inifile:\r\n    plugins: nbval-0.6\r\n    collected 2 items\r\n\r\n    notebook1.ipynb .\r\n    notebook2.ipynb F\r\n\r\n    ============================================ FAILURES =====================\r\n    _____________________________________________ cell 0 ______________________\r\n    Notebook cell execution failed\r\n    Cell 0: Cell outputs differ\r\n\r\n    Input:\r\n    import time\r\n\r\n    time.time()\r\n\r\n    Traceback: mismatch 'text/plain'\r\n    <<<<<<<<<<<< Reference output from ipynb file:\r\n    1498639847.528011\r\n    ============ disagrees with newly computed (test) output:\r\n    1498640219.550588\r\n    >>>>>>>>>>>>\r\n    =============================== 1 failed, 1 passed in 2.07 seconds ========\r\n\r\nThis is not ideal as we know there is a fail in Cell 0, but  we don't\r\nknow in which file. (Here it is ``notebook1.ipynb``).\r\n\r\nSuggest that the name of the file in which the reported failures take\r\nplace is displayed somehow.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/60", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/60/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/60/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/60", "id": 221358770, "node_id": "MDU6SXNzdWUyMjEzNTg3NzA=", "number": 60, "title": "Unable to sanitize output_type", "user": {"login": "rmjarvis", "id": 623887, "node_id": "MDQ6VXNlcjYyMzg4Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/623887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmjarvis", "html_url": "https://github.com/rmjarvis", "followers_url": "https://api.github.com/users/rmjarvis/followers", "following_url": "https://api.github.com/users/rmjarvis/following{/other_user}", "gists_url": "https://api.github.com/users/rmjarvis/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmjarvis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmjarvis/subscriptions", "organizations_url": "https://api.github.com/users/rmjarvis/orgs", "repos_url": "https://api.github.com/users/rmjarvis/repos", "events_url": "https://api.github.com/users/rmjarvis/events{/privacy}", "received_events_url": "https://api.github.com/users/rmjarvis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-12T18:59:42Z", "updated_at": "2017-04-13T13:18:28Z", "closed_at": "2017-04-13T13:18:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting a discrepancy in my output_types with nbval 0.5 that doesn't show up in nbval 0.4:\r\n```\r\n______________________________________________ cell 4 ______________________________________________\r\nNotebook cell execution failed\r\nCell 4: Cell outputs differ\r\n\r\nInput:\r\ntreecorr.corr2(config)\r\n\r\nTraceback: mismatch 'output_type'\r\n<<<<<<<<<<<< Reference output from ipynb file:\r\nstream\r\n============ disagrees with newly computed (test) output:  \r\nstreamst...<snip base64, md5=1d90ad9225fdb1ef...>\r\n>>>>>>>>>>>>\r\n```\r\nThe output is from a logger object with `logging.StreamHandler(stream=sys.stdout)` for its handler.  My Jupiter installation (4.1.0) and nbval 0.4.0 both give the output_type as simply `stream`.  But nbval 0.5 has the above weird `streamst` thing.\r\n\r\nAnyway, I thought I'd be able to ignore this using my sanitize file.  I added\r\n```\r\n[output_type]\r\nregex: stream.*\r\nreplace: stream\r\n```\r\nbut it didn't work.  It turns out that you [don't run](https://github.com/computationalmodelling/nbval/blob/093d38d4853f3b3cf7c23eeac5ab45d7f56ea8bf/nbval/plugin.py#L724) sanitize on the `output_type` field.\r\n\r\nSo what is my workaround to deal with this?  Thanks for any help you can provide.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/59", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/59/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/59/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/59", "id": 219545888, "node_id": "MDU6SXNzdWUyMTk1NDU4ODg=", "number": 59, "title": "conda-forge package", "user": {"login": "kain88-de", "id": 4302678, "node_id": "MDQ6VXNlcjQzMDI2Nzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4302678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kain88-de", "html_url": "https://github.com/kain88-de", "followers_url": "https://api.github.com/users/kain88-de/followers", "following_url": "https://api.github.com/users/kain88-de/following{/other_user}", "gists_url": "https://api.github.com/users/kain88-de/gists{/gist_id}", "starred_url": "https://api.github.com/users/kain88-de/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kain88-de/subscriptions", "organizations_url": "https://api.github.com/users/kain88-de/orgs", "repos_url": "https://api.github.com/users/kain88-de/repos", "events_url": "https://api.github.com/users/kain88-de/events{/privacy}", "received_events_url": "https://api.github.com/users/kain88-de/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-05T11:04:53Z", "updated_at": "2017-04-16T14:53:45Z", "closed_at": "2017-04-16T14:53:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Conda forge package.\r\n\r\nI've submitted nbval as a conda package to conda-forge\r\n\r\nhttps://github.com/conda-forge/staged-recipes/pull/2750\r\n\r\nIf you want to help maintain the package please let me now", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/58", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/58/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/58/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/58", "id": 219522864, "node_id": "MDU6SXNzdWUyMTk1MjI4NjQ=", "number": 58, "title": "Add LICENSE file to release version", "user": {"login": "kain88-de", "id": 4302678, "node_id": "MDQ6VXNlcjQzMDI2Nzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4302678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kain88-de", "html_url": "https://github.com/kain88-de", "followers_url": "https://api.github.com/users/kain88-de/followers", "following_url": "https://api.github.com/users/kain88-de/following{/other_user}", "gists_url": "https://api.github.com/users/kain88-de/gists{/gist_id}", "starred_url": "https://api.github.com/users/kain88-de/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kain88-de/subscriptions", "organizations_url": "https://api.github.com/users/kain88-de/orgs", "repos_url": "https://api.github.com/users/kain88-de/repos", "events_url": "https://api.github.com/users/kain88-de/events{/privacy}", "received_events_url": "https://api.github.com/users/kain88-de/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-05T09:33:38Z", "updated_at": "2017-04-05T14:45:01Z", "closed_at": "2017-04-05T14:44:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current release source package on pypi doesn't contain a license file. It would be nice if you could include that in the next release.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/56", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/56/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/56/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/56", "id": 214694579, "node_id": "MDU6SXNzdWUyMTQ2OTQ1Nzk=", "number": 56, "title": "BUG: Problems when using tqdm", "user": {"login": "schlichtanders", "id": 4255480, "node_id": "MDQ6VXNlcjQyNTU0ODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4255480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schlichtanders", "html_url": "https://github.com/schlichtanders", "followers_url": "https://api.github.com/users/schlichtanders/followers", "following_url": "https://api.github.com/users/schlichtanders/following{/other_user}", "gists_url": "https://api.github.com/users/schlichtanders/gists{/gist_id}", "starred_url": "https://api.github.com/users/schlichtanders/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schlichtanders/subscriptions", "organizations_url": "https://api.github.com/users/schlichtanders/orgs", "repos_url": "https://api.github.com/users/schlichtanders/repos", "events_url": "https://api.github.com/users/schlichtanders/events{/privacy}", "received_events_url": "https://api.github.com/users/schlichtanders/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-03-16T12:53:47Z", "updated_at": "2017-04-18T14:33:01Z", "closed_at": "2017-04-18T14:33:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear nbval-Team,\r\n\r\nunfortunately nbval is not working with ``tqdm``. (this is the minimal working example for #55)\r\n\r\nWhile a cell with ``output_type=\"execute_result\"`` seem to always work, like e.g.\r\n```\r\ns = \"foo\"\r\ns\r\n```\r\nthe success of a cell with ``output_type=\"stream\"`` depends on whether ``tqdm`` was imported or not. For instance\r\n```\r\nimport tqdm\r\nprint(\"goo\")\r\n```\r\nwill throw the following error when tested with ``py.test --nbval  path/to/file.ipynb``\r\n```\r\npy.test --nbval .\\test_nbval.ipynb\r\n============================= test session starts =============================\r\nplatform win32 -- Python 3.6.0, pytest-3.0.5, py-1.4.32, pluggy-0.4.0\r\nrootdir: D:\\Projects\\telefonica-callcenter-online, inifile:\r\nplugins: nbval-0.5\r\ncollected 3 items \r\n\r\ntest_nbval.ipynb ..F\r\n\r\n================================== FAILURES ===================================\r\n___________________________________ cell 2 ____________________________________\r\nNotebook cell execution failed\r\nCell 2: Cell outputs differ\r\n\r\nInput:\r\nimport tqdm\r\nprint(\"goo\")\r\n\r\nTraceback: mismatch 'output_type'\r\n<<<<<<<<<<<< Reference output from ipynb file:\r\nstream\r\n============ disagrees with newly computed (test) output:  \r\nstreamstream\r\n>>>>>>>>>>>>\r\n===================== 1 failed, 2 passed in 2.13 seconds ======================\r\n```\r\nThis behaviour does not depend at all on where ``tqdm`` is imported but only on whether ``tqdm`` gets imported. Without, everything runs through as expected.\r\n\r\nI created a small gist with a respective example notebook, you can find it here https://gist.github.com/anonymous/15a17512fb72fee2c8a8abbe46316eff\r\n\r\nAny help is highly appreciated, as I love this pytest extension and would really like to use it more.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/55", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/55/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/55/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/55", "id": 214480785, "node_id": "MDU6SXNzdWUyMTQ0ODA3ODU=", "number": 55, "title": "certain notebooks don't work at all", "user": {"login": "schlichtanders", "id": 4255480, "node_id": "MDQ6VXNlcjQyNTU0ODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4255480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schlichtanders", "html_url": "https://github.com/schlichtanders", "followers_url": "https://api.github.com/users/schlichtanders/followers", "following_url": "https://api.github.com/users/schlichtanders/following{/other_user}", "gists_url": "https://api.github.com/users/schlichtanders/gists{/gist_id}", "starred_url": "https://api.github.com/users/schlichtanders/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schlichtanders/subscriptions", "organizations_url": "https://api.github.com/users/schlichtanders/orgs", "repos_url": "https://api.github.com/users/schlichtanders/repos", "events_url": "https://api.github.com/users/schlichtanders/events{/privacy}", "received_events_url": "https://api.github.com/users/schlichtanders/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-15T18:15:08Z", "updated_at": "2017-05-03T17:02:49Z", "closed_at": "2017-04-18T14:33:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "when executing nbval on one of my notebooks, I get weird py.test --nbval reportings like the following:\r\n\r\n```\r\n<<<<<<<<<<<< Reference output from ipynb file:\r\nstream\r\n============ disagrees with newly computed (test) output:  \r\nstreamstreamstreamstreamstreamstreamstreamstreamstreamstreamstreamstreamstreamstreamstream\r\n>>>>>>>>>>>>\r\n```\r\n```\r\n<<<<<<<<<<<< Reference output from ipynb file:\r\nstream\r\n============ disagrees with newly computed (test) output:  \r\nstreamstreamstream\r\n>>>>>>>>>>>>\r\n```\r\n```\r\n<<<<<<<<<<<< Reference output from ipynb file:\r\nstream\r\n============ disagrees with newly computed (test) output:  \r\nstreamst...<snip base64, md5=1d90ad9225fdb1ef...>\r\n>>>>>>>>>>>>\r\n```\r\n\r\nI was not able to make a minimal working example out of it yet, however maybe someone has seen this before and can help me.\r\n\r\n[Interestingly, when downloading the example documentation.ipynb from nbval repository, everything works perfect]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/54", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/54/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/54/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/54", "id": 211962167, "node_id": "MDU6SXNzdWUyMTE5NjIxNjc=", "number": 54, "title": "Flaky test failures: 'stream' != 'streamstream'", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-03-05T15:54:48Z", "updated_at": "2017-05-15T16:27:06Z", "closed_at": "2017-04-13T14:08:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm seeing unexplainable test failures for cells with print statements, for example \r\n```\r\n=================================== FAILURES ===================================\r\n____________________________________ cell 8 ____________________________________\r\nNotebook cell execution failed\r\nCell 8: Cell outputs differ\r\n\r\nInput:\r\ntrace(system_test, 'unit_i', 10)\r\n\r\nTraceback: mismatch 'output_type'\r\n<<<<<<<<<<<< Reference output from ipynb file:\r\nstream\r\n============ disagrees with newly computed (test) output:\r\nstreamstream\r\n>>>>>>>>>>>>\r\n```\r\nThe cell in question runs a function that print()s a few lines then returns None\r\n```\r\ntrace(system_test, 'unit_i', 10)\r\n```\r\nI have not been able to reproduce with a simple example, but you can see the failing notebook at\r\n  https://github.com/fritzo/pomagma/blob/47eecf8/src/examples/definable_systems.ipynb\r\nwhere I've `if 0` guarded the final cell to work around this issue.\r\n\r\nHere's my system (running python 2.7)\r\n```\r\n$ pip freeze\r\naltgraph==0.10.2\r\napipkg==1.4\r\nappnope==0.1.0\r\nappscript==1.0.1\r\nargh==0.15.1\r\nautoflake==0.6.6\r\nautopep8==1.2.4\r\nbackports.shutil-get-terminal-size==1.0.0\r\nbackports.ssl-match-hostname==3.4.0.2\r\nbdist-mpkg==0.5.0\r\nBeautifulSoup==3.2.1\r\nbleach==1.5.0\r\nbonjour-py==0.3\r\nboto==2.43.0\r\nbottle==0.11.6\r\ncdiff==0.9.6\r\ncertifi==2015.9.6.2\r\nconfigparser==3.5.0\r\ncontextlib2==0.5.4\r\ndecorator==4.0.10\r\ndocformatter==0.8\r\nentrypoints==0.2.2\r\nenum34==1.1.6\r\nexecnet==1.4.1\r\nflake8==3.2.1\r\nfuncsigs==1.0.2\r\nfunctools32==3.2.3.post2\r\ngoftests==0.2.0\r\ngprof2dot==2015.12.1\r\nhtml5lib==0.9999999\r\nhypothesis==3.6.1\r\nipykernel==4.5.2\r\nipython==5.1.0\r\nipython-genutils==0.1.0\r\nipywidgets==5.2.2\r\nisodate==0.4.8\r\nisort==4.2.5\r\nJinja2==2.8.1\r\njsonschema==2.5.1\r\njupyter==1.0.0\r\njupyter-client==4.4.0\r\njupyter-console==5.0.0\r\njupyter-core==4.2.1\r\njupyterthemes==0.13.9\r\nlesscpy==0.12.0\r\nlogic==0.1.10\r\nmacholib==1.5.1\r\nMarkdown==2.2.0\r\nMarkupSafe==0.23\r\nmatplotlib==1.3.1\r\nmccabe==0.5.3\r\nmistune==0.7.3\r\nmock==2.0.0\r\nmodulegraph==0.10.4\r\nmultipledispatch==0.4.9\r\nnbconvert==5.0.0\r\nnbformat==4.2.0\r\nnbval==0.5\r\nnose==1.3.7\r\nnotebook==4.3.1\r\nnumpy==1.6.2\r\npandocfilters==1.4.1\r\nparsable==0.2.2\r\npathlib2==2.1.0\r\npbr==1.10.0\r\npep8==1.7.0\r\npexpect==4.2.1\r\npickleshare==0.7.4\r\nply==3.9\r\n-e git+git@github.com:fritzo/pomagma.git@47eecf89dda27a81f7e7900597c2ab5f0f8fbce3#egg=pomagma\r\nprompt-toolkit==1.0.9\r\nprotobuf==2.6.1\r\npsutil==4.4.2\r\nptyprocess==0.5.1\r\npy==1.4.31\r\npy2app==0.7.3\r\npycodestyle==2.2.0\r\npyflakes==1.3.0\r\npyformat==0.6\r\nPygments==1.5\r\npyobjc-core==2.5.1\r\npyobjc-framework-Accounts==2.5.1\r\npyobjc-framework-AddressBook==2.5.1\r\npyobjc-framework-AppleScriptKit==2.5.1\r\npyobjc-framework-AppleScriptObjC==2.5.1\r\npyobjc-framework-Automator==2.5.1\r\npyobjc-framework-CFNetwork==2.5.1\r\npyobjc-framework-Cocoa==2.5.1\r\npyobjc-framework-Collaboration==2.5.1\r\npyobjc-framework-CoreData==2.5.1\r\npyobjc-framework-CoreLocation==2.5.1\r\npyobjc-framework-CoreText==2.5.1\r\npyobjc-framework-DictionaryServices==2.5.1\r\npyobjc-framework-EventKit==2.5.1\r\npyobjc-framework-ExceptionHandling==2.5.1\r\npyobjc-framework-FSEvents==2.5.1\r\npyobjc-framework-InputMethodKit==2.5.1\r\npyobjc-framework-InstallerPlugins==2.5.1\r\npyobjc-framework-InstantMessage==2.5.1\r\npyobjc-framework-LatentSemanticMapping==2.5.1\r\npyobjc-framework-LaunchServices==2.5.1\r\npyobjc-framework-Message==2.5.1\r\npyobjc-framework-OpenDirectory==2.5.1\r\npyobjc-framework-PreferencePanes==2.5.1\r\npyobjc-framework-PubSub==2.5.1\r\npyobjc-framework-QTKit==2.5.1\r\npyobjc-framework-Quartz==2.5.1\r\npyobjc-framework-ScreenSaver==2.5.1\r\npyobjc-framework-ScriptingBridge==2.5.1\r\npyobjc-framework-SearchKit==2.5.1\r\npyobjc-framework-ServiceManagement==2.5.1\r\npyobjc-framework-Social==2.5.1\r\npyobjc-framework-SyncServices==2.5.1\r\npyobjc-framework-SystemConfiguration==2.5.1\r\npyobjc-framework-WebKit==2.5.1\r\npyOpenSSL==0.13.1\r\npyparsing==2.0.1\r\nPySMT==0.6.1\r\npytest==3.0.3\r\npytest-profiling==1.1.1\r\npytest-timeout==1.0.0\r\npytest-xdist==1.15.0\r\npython-dateutil==1.5\r\npython-magic==0.4.6\r\npytz==2013.7\r\nPyYAML==3.10\r\npyzmq==16.0.0\r\nqtconsole==4.2.1\r\nrequests==2.12.4\r\nRunSnakeRun==2.0.4\r\ns3cmd==1.5.2\r\nscipy==0.13.0b1\r\nselenium==2.33.0\r\nsimplegeneric==0.8.1\r\nsimplejson==3.10.0\r\nsix==1.10.0\r\nsnakeviz==0.4.0\r\nsplinter==0.5.4\r\nSquareMap==1.0.4\r\nstevedore==1.18.0\r\nterminado==0.6\r\ntestpath==0.3\r\ntoolz==0.8.0\r\ntornado==4.2.1\r\ntraitlets==4.3.1\r\nunification==0.2.2\r\nunify==0.2\r\nuntokenize==0.1.1\r\nvboxapi==1.0\r\nveritable===0.9.8preBUILD-NUMBER\r\nvirtualenv==15.0.3\r\nvirtualenv-clone==0.2.6\r\nvirtualenvwrapper==4.7.2\r\nwcwidth==0.1.7\r\nwidgetsnbextension==1.2.6\r\nxattr==0.6.4\r\nyapf==0.14.0\r\nzope.interface==4.1.1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/52", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/52/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/52/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/52", "id": 209831758, "node_id": "MDU6SXNzdWUyMDk4MzE3NTg=", "number": 52, "title": "Release 0.5", "user": {"login": "takluyver", "id": 327925, "node_id": "MDQ6VXNlcjMyNzkyNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/takluyver", "html_url": "https://github.com/takluyver", "followers_url": "https://api.github.com/users/takluyver/followers", "following_url": "https://api.github.com/users/takluyver/following{/other_user}", "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}", "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions", "organizations_url": "https://api.github.com/users/takluyver/orgs", "repos_url": "https://api.github.com/users/takluyver/repos", "events_url": "https://api.github.com/users/takluyver/events{/privacy}", "received_events_url": "https://api.github.com/users/takluyver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-23T17:36:34Z", "updated_at": "2017-02-24T14:31:21Z", "closed_at": "2017-02-24T14:21:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We've made quite a few changes since the last release, and we should try to make a new release.\r\n\r\n@vidartf @fangohr is there anything high priority which we should fix before releasing 0.5?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/49", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/49/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/49/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/49", "id": 207249307, "node_id": "MDU6SXNzdWUyMDcyNDkzMDc=", "number": 49, "title": "Count only code cells for cell numbers?", "user": {"login": "takluyver", "id": 327925, "node_id": "MDQ6VXNlcjMyNzkyNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/takluyver", "html_url": "https://github.com/takluyver", "followers_url": "https://api.github.com/users/takluyver/followers", "following_url": "https://api.github.com/users/takluyver/following{/other_user}", "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}", "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions", "organizations_url": "https://api.github.com/users/takluyver/orgs", "repos_url": "https://api.github.com/users/takluyver/repos", "events_url": "https://api.github.com/users/takluyver/events{/privacy}", "received_events_url": "https://api.github.com/users/takluyver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-13T15:25:17Z", "updated_at": "2017-02-21T17:55:34Z", "closed_at": "2017-02-21T17:55:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "nbval currently names tests as e.g. 'Cell 3', counting all the cells of the notebook including markdown cells. Jupyter does not expose any visible numbering of cells, but if you start the kernel and 'run all', you will effectively get a numbering of only code cells. So nbval's 'Cell 3' could have an `In [1]:` prompt by it.\r\n\r\nI think it would be better for the names in nbval to look like 'Code cell 1', so it's easy to match up to a notebook that has been executed straight-through.\r\n\r\n@vidartf I assume the nbdime reporting doesn't rely on these names?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/47", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/47/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/47/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/47", "id": 207180953, "node_id": "MDU6SXNzdWUyMDcxODA5NTM=", "number": 47, "title": "`--nbval-lax` cannot find notebook to test", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-13T10:47:41Z", "updated_at": "2017-02-13T14:13:38Z", "closed_at": "2017-02-13T14:13:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "While working on the deliverable report, I have just found this behaviour:\r\n\r\n<pre>\r\n(nbval) iota:examples fangohr$ py.test -v --nbval demo-with-fail.ipynb \r\n======================================= test session starts ========================================\r\nplatform darwin -- Python 3.6.0, pytest-3.0.6, py-1.4.32, pluggy-0.4.0 -- /Users/fangohr/anaconda/envs/nbval/bin/python\r\ncachedir: .cache\r\nrootdir: /Users/fangohr/git/OpenDreamKit-D48/WP4/D4.8/examples, inifile: \r\nplugins: nbval-0.4.1\r\ncollected 5 items \r\n\r\ndemo-with-fail.ipynb::Cell 1 PASSED\r\ndemo-with-fail.ipynb::Cell 2 PASSED\r\ndemo-with-fail.ipynb::Cell 3 PASSED\r\ndemo-with-fail.ipynb::Cell 5 PASSED\r\ndemo-with-fail.ipynb::Cell 7 FAILED\r\n\r\n============================================= FAILURES =============================================\r\n______________________________________________ cell 7 ______________________________________________\r\nNotebook cell execution failed\r\nCell 7: Cell outputs differ\r\n\r\nInput:\r\ndatetime.datetime.now()\r\n\r\nTraceback: mismatch 'text/plain'\r\n<<<<<<<<<<<< Reference output from ipynb file:\r\ndatetime.datetime(2017, 2, 13, 10, 16, 15, 240125)\r\n============ disagrees with newly computed (test) output:  \r\ndatetime.datetime(2017, 2, 13, 10, 43, 31, 39014)\r\n>>>>>>>>>>>>\r\n================================ 1 failed, 4 passed in 2.05 seconds ================================\r\n</pre>\r\nThe above is okay and works as desired. Interesting is the following for a very minor change in calling the command: \r\n\r\n<pre>\r\n(nbval) iota:examples fangohr$ py.test -v --nbval-lax demo-with-fail.ipynb \r\n======================================= test session starts ========================================\r\nplatform darwin -- Python 3.6.0, pytest-3.0.6, py-1.4.32, pluggy-0.4.0 -- /Users/fangohr/anaconda/envs/nbval/bin/python\r\ncachedir: .cache\r\nrootdir: /Users/fangohr/git/OpenDreamKit-D48/WP4/D4.8/examples, inifile: \r\nplugins: nbval-0.4.1\r\ncollecting 0 items\r\n=================================== no tests ran in 0.00 seconds ===================================\r\nERROR: not found: /Users/fangohr/git/OpenDreamKit-D48/WP4/D4.8/examples/demo-with-fail.ipynb\r\n(no name '/Users/fangohr/git/OpenDreamKit-D48/WP4/D4.8/examples/demo-with-fail.ipynb' in any of [])\r\n</pre>\r\n\r\nLooks like a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/41", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/41/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/41/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/41", "id": 204910382, "node_id": "MDU6SXNzdWUyMDQ5MTAzODI=", "number": 41, "title": "Kernel should be interrupted on cell timeout", "user": {"login": "vidartf", "id": 510760, "node_id": "MDQ6VXNlcjUxMDc2MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/510760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vidartf", "html_url": "https://github.com/vidartf", "followers_url": "https://api.github.com/users/vidartf/followers", "following_url": "https://api.github.com/users/vidartf/following{/other_user}", "gists_url": "https://api.github.com/users/vidartf/gists{/gist_id}", "starred_url": "https://api.github.com/users/vidartf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vidartf/subscriptions", "organizations_url": "https://api.github.com/users/vidartf/orgs", "repos_url": "https://api.github.com/users/vidartf/repos", "events_url": "https://api.github.com/users/vidartf/events{/privacy}", "received_events_url": "https://api.github.com/users/vidartf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-02T15:43:00Z", "updated_at": "2017-02-08T16:13:49Z", "closed_at": "2017-02-08T16:13:49Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently, if a cell reaches timeout, it seems that it simply continues to the next cell, without interrupting the kernel. So e.g. if a cell enters an infinite loop, all following cells will try to execute, but the kernel will still be running the previous cell.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/40", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/40/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/40/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/40", "id": 204898873, "node_id": "MDU6SXNzdWUyMDQ4OTg4NzM=", "number": 40, "title": "Configure timeouts", "user": {"login": "vidartf", "id": 510760, "node_id": "MDQ6VXNlcjUxMDc2MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/510760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vidartf", "html_url": "https://github.com/vidartf", "followers_url": "https://api.github.com/users/vidartf/followers", "following_url": "https://api.github.com/users/vidartf/following{/other_user}", "gists_url": "https://api.github.com/users/vidartf/gists{/gist_id}", "starred_url": "https://api.github.com/users/vidartf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vidartf/subscriptions", "organizations_url": "https://api.github.com/users/vidartf/orgs", "repos_url": "https://api.github.com/users/vidartf/repos", "events_url": "https://api.github.com/users/vidartf/events{/privacy}", "received_events_url": "https://api.github.com/users/vidartf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-02T15:03:36Z", "updated_at": "2017-02-08T16:13:49Z", "closed_at": "2017-02-08T16:13:49Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The user should be given the option to specify how long to wait for cell execution timeout. The current timeout is set to ~half an hour (2000 s).\r\n\r\nOne option is to piggy-back on the `timeout` option added by the [timeout plugin](https://pypi.python.org/pypi/pytest-timeout). If not, we should ensure that we choose an option name that won't conflict, like `nbval-cell-timeout` (or maybe a shorter version).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/38", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/38/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/38/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/38", "id": 203969940, "node_id": "MDU6SXNzdWUyMDM5Njk5NDA=", "number": 38, "title": "Should nbval be testing all cells?", "user": {"login": "russel", "id": 24420, "node_id": "MDQ6VXNlcjI0NDIw", "avatar_url": "https://avatars2.githubusercontent.com/u/24420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/russel", "html_url": "https://github.com/russel", "followers_url": "https://api.github.com/users/russel/followers", "following_url": "https://api.github.com/users/russel/following{/other_user}", "gists_url": "https://api.github.com/users/russel/gists{/gist_id}", "starred_url": "https://api.github.com/users/russel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/russel/subscriptions", "organizations_url": "https://api.github.com/users/russel/orgs", "repos_url": "https://api.github.com/users/russel/repos", "events_url": "https://api.github.com/users/russel/events{/privacy}", "received_events_url": "https://api.github.com/users/russel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568173, "node_id": "MDU6TGFiZWwxOTc1NjgxNzM=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-30T10:14:51Z", "updated_at": "2017-01-30T11:49:33Z", "closed_at": "2017-01-30T11:49:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some %timeit cells, as well as some code, markdown and pytest cells in a notebook and when running nbval, all the %timeit cells create test fails as the time taken to run the code is different between the nbval execution and the number in the notebook. Is this to be expected?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/37", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/37/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/37/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/37", "id": 203892253, "node_id": "MDU6SXNzdWUyMDM4OTIyNTM=", "number": 37, "title": "super() is invalid in Python 2.7", "user": {"login": "rmjarvis", "id": 623887, "node_id": "MDQ6VXNlcjYyMzg4Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/623887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmjarvis", "html_url": "https://github.com/rmjarvis", "followers_url": "https://api.github.com/users/rmjarvis/followers", "following_url": "https://api.github.com/users/rmjarvis/following{/other_user}", "gists_url": "https://api.github.com/users/rmjarvis/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmjarvis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmjarvis/subscriptions", "organizations_url": "https://api.github.com/users/rmjarvis/orgs", "repos_url": "https://api.github.com/users/rmjarvis/repos", "events_url": "https://api.github.com/users/rmjarvis/events{/privacy}", "received_events_url": "https://api.github.com/users/rmjarvis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-01-29T20:01:50Z", "updated_at": "2017-01-29T21:57:51Z", "closed_at": "2017-01-29T21:32:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting errors using nbval 0.4.0 with Python 2.7.  Running\r\n```\r\npy.test --nbval documentation.ipynb\r\n```\r\nproduces the following output:\r\n```\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 2.7.10, pytest-3.0.2, py-1.4.31, pluggy-0.3.1\r\nrootdir: /Users/Mike/nbval, inifile:\r\nplugins: nbval-0.4.0\r\ncollected 11 items\r\n\r\ndocumentation.ipynb EEEEEEEEEEEE\r\n\r\n==================================== ERRORS ====================================\r\n___________________________ ERROR at setup of cell 6 ___________________________\r\n\r\nself = <CallInfo when='setup' exception: super() takes at least 1 argument (0 given)>\r\nfunc = <function <lambda> at 0x10f261cf8>, when = 'setup'\r\n\r\n    def __init__(self, func, when):\r\n        #: context of invocation: one of \"setup\", \"call\",\r\n        #: \"teardown\", \"memocollect\"\r\n        self.when = when\r\n        self.start = time()\r\n        try:\r\n>           self.result = func()\r\n\r\n../Library/Python/2.7/lib/python/site-packages/_pytest/runner.py:163:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   return CallInfo(lambda: ihook(item=item, **kwds), when=when)\r\n\r\n../Library/Python/2.7/lib/python/site-packages/_pytest/runner.py:151:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <_HookCaller 'pytest_runtest_setup'>\r\nkwargs = {'__multicall__': <_MultiCall 0 results, 1 meths, kwargs={'item': <IPyNbCell 'Cell 6'>, '__multicall__': <_MultiCall 0 results, 1 meths, kwargs={...}>}>, 'item': <IPyNbCell 'Cell 6'>}\r\n\r\n    def __call__(self, **kwargs):\r\n        assert not self.is_historic()\r\n>       return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n\r\n../Library/Python/2.7/lib/python/site-packages/_pytest/vendored_packages/pluggy.py:724:\r\n\r\n# ... [snip] ....\r\n\r\n/Library/Python/2.7/site-packages/jupyter_client/manager.py:230:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <jupyter_client.manager.KernelManager object at 0x10f282ad0>\r\nextra_arguments = []\r\n\r\n    def format_kernel_cmd(self, extra_arguments=None):\r\n        \"\"\"replace templated args (e.g. {connection_file})\"\"\"\r\n        extra_arguments = extra_arguments or []\r\n        if self.kernel_cmd:\r\n            cmd = self.kernel_cmd + extra_arguments\r\n        else:\r\n>           cmd = self.kernel_spec.argv + extra_arguments\r\n\r\n/Library/Python/2.7/site-packages/jupyter_client/manager.py:170:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <jupyter_client.manager.KernelManager object at 0x10f282ad0>\r\n\r\n    @property\r\n    def kernel_spec(self):\r\n        if self._kernel_spec is None:\r\n>           self._kernel_spec = self.kernel_spec_manager.get_kernel_spec(self.kernel_name)\r\n\r\n/Library/Python/2.7/site-packages/jupyter_client/manager.py:82:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <nbval.kernel.NbvalKernelspecManager object at 0x10f282b50>\r\nkernel_name = 'python3'\r\n\r\n>   ???\r\nE   TypeError: super() takes at least 1 argument (0 given)\r\n\r\nbuild/bdist.macosx-10.10-intel/egg/nbval/kernel.py:33: TypeError\r\n__________________________ ERROR at setup of cell 13 __________________________\r\n# ... etc.\r\n```\r\n\r\nI don't get this with v0.3.6.  With that version if fails in the places it is supposed to fail (as documented, that is).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/34", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/34/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/34/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/34", "id": 202495332, "node_id": "MDU6SXNzdWUyMDI0OTUzMzI=", "number": 34, "title": "Funding acknowledgement in Readme?", "user": {"login": "mikecroucher", "id": 82705, "node_id": "MDQ6VXNlcjgyNzA1", "avatar_url": "https://avatars1.githubusercontent.com/u/82705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikecroucher", "html_url": "https://github.com/mikecroucher", "followers_url": "https://api.github.com/users/mikecroucher/followers", "following_url": "https://api.github.com/users/mikecroucher/following{/other_user}", "gists_url": "https://api.github.com/users/mikecroucher/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikecroucher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikecroucher/subscriptions", "organizations_url": "https://api.github.com/users/mikecroucher/orgs", "repos_url": "https://api.github.com/users/mikecroucher/repos", "events_url": "https://api.github.com/users/mikecroucher/events{/privacy}", "received_events_url": "https://api.github.com/users/mikecroucher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-23T10:24:23Z", "updated_at": "2017-01-28T22:50:04Z", "closed_at": "2017-01-28T22:50:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Should we include the EU funding?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/31", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/31/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/31/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/31", "id": 202085135, "node_id": "MDU6SXNzdWUyMDIwODUxMzU=", "number": 31, "title": "add `ipykernel` to requirements", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568168, "node_id": "MDU6TGFiZWwxOTc1NjgxNjg=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-20T08:51:49Z", "updated_at": "2017-01-20T15:31:14Z", "closed_at": "2017-01-20T15:31:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It seems we need `ipykernel` as one of the requirements for nbval. \r\n\r\nHowever, our tests don't show that so far. I suggest we create a docker container as part of the testing process, and try to run `py.test --version` or a quick test on something inside the container to check the requirements.\r\n\r\nThis is based on finding that the requirement was missing for tests using `--nbval` in joommf/oommfc (https://github.com/joommf/oommfc/commit/613c4777ff4afc2b66bdbb3e2abbbb942475d1ad)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/28", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/28/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/28/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/28", "id": 201266442, "node_id": "MDU6SXNzdWUyMDEyNjY0NDI=", "number": 28, "title": "Check links (URLs) in notebook", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568170, "node_id": "MDU6TGFiZWwxOTc1NjgxNzA=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-01-17T12:31:53Z", "updated_at": "2017-02-20T15:50:10Z", "closed_at": "2017-02-20T15:50:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "A possible extension of the notebook testing: can we check URLs (in the markdown presumably) to see if those are accessible (i.e. URL linting)? \r\n\r\nThis could be activated by an additional switch (maybe `--url-lint` or so) and report failures if a URL is not accessible. (To run the test, Internet access will be required.)\r\n\r\nThis was proposed at the Jupyter Workshop January 2017 in Edinburgh (http://opendreamkit.org/meetings/2017-01-16-ICMS/programme/).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/27", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/27/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/27/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/27", "id": 201264263, "node_id": "MDU6SXNzdWUyMDEyNjQyNjM=", "number": 27, "title": "Compare LaTeX output ", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-17T12:22:24Z", "updated_at": "2017-01-17T16:55:56Z", "closed_at": "2017-01-17T16:55:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Arising from the Jupyter Workshop in Edinburgh (http://opendreamkit.org/meetings/2017-01-16-ICMS/programme/): A useful feature for computational mathematics (and presumably symbolic operations) would be the comparison of \"latex\" output as part of NBVAL's output comparison. (With Nicolas Thiery.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/21", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/21/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/21/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/21", "id": 197052125, "node_id": "MDU6SXNzdWUxOTcwNTIxMjU=", "number": 21, "title": "Smarter picking of kernel to start", "user": {"login": "takluyver", "id": 327925, "node_id": "MDQ6VXNlcjMyNzkyNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/takluyver", "html_url": "https://github.com/takluyver", "followers_url": "https://api.github.com/users/takluyver/followers", "following_url": "https://api.github.com/users/takluyver/following{/other_user}", "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}", "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions", "organizations_url": "https://api.github.com/users/takluyver/orgs", "repos_url": "https://api.github.com/users/takluyver/repos", "events_url": "https://api.github.com/users/takluyver/events{/privacy}", "received_events_url": "https://api.github.com/users/takluyver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568170, "node_id": "MDU6TGFiZWwxOTc1NjgxNzA=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-21T22:48:07Z", "updated_at": "2017-01-17T10:13:14Z", "closed_at": "2017-01-17T10:13:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, nbval always starts the default Python kernel, though this is not necessarily running in the same Python environment as nbval itself (see discussion on #6).\r\n\r\n1. In the default case, we should probably pick the kernel to start based on notebook metadata, like nbconvert does for `--execute`. This would allow validating notebooks in other languages.\r\n2. We may also want an option which forces it to start a Python kernel in the same Python environment as nbconvert itself, so we know that test dependencies affect what's available in the kernel. Thoughts on what this should be called?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/20", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/20/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/20/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/20", "id": 197050977, "node_id": "MDU6SXNzdWUxOTcwNTA5Nzc=", "number": 20, "title": "Should not assume that matplotlib is available", "user": {"login": "takluyver", "id": 327925, "node_id": "MDQ6VXNlcjMyNzkyNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/takluyver", "html_url": "https://github.com/takluyver", "followers_url": "https://api.github.com/users/takluyver/followers", "following_url": "https://api.github.com/users/takluyver/following{/other_user}", "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}", "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions", "organizations_url": "https://api.github.com/users/takluyver/orgs", "repos_url": "https://api.github.com/users/takluyver/repos", "events_url": "https://api.github.com/users/takluyver/events{/privacy}", "received_events_url": "https://api.github.com/users/takluyver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568170, "node_id": "MDU6TGFiZWwxOTc1NjgxNzA=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-21T22:41:36Z", "updated_at": "2017-01-17T10:13:14Z", "closed_at": "2017-01-17T10:13:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We currently pass `--matplotlib=inline` when starting the kernel, to force figures to appear inline. However, this means that if `matplotlib` is not installed in the environment where the kernel runs (which may not be the same as the one nbval is running in), the kernel will fail to start.\r\n\r\nFrom comments on #6.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/18", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/18/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/18/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/18", "id": 196902831, "node_id": "MDU6SXNzdWUxOTY5MDI4MzE=", "number": 18, "title": "Option to only check output on marked cells", "user": {"login": "takluyver", "id": 327925, "node_id": "MDQ6VXNlcjMyNzkyNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/takluyver", "html_url": "https://github.com/takluyver", "followers_url": "https://api.github.com/users/takluyver/followers", "following_url": "https://api.github.com/users/takluyver/following{/other_user}", "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}", "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions", "organizations_url": "https://api.github.com/users/takluyver/orgs", "repos_url": "https://api.github.com/users/takluyver/repos", "events_url": "https://api.github.com/users/takluyver/events{/privacy}", "received_events_url": "https://api.github.com/users/takluyver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-21T10:54:08Z", "updated_at": "2016-12-21T20:26:08Z", "closed_at": "2016-12-21T20:26:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We currently check output on all cells not explicitly marked with the `IGNORE_OUTPUT` comment.\r\n\r\nBecause many outputs can be variable, I'd like an alternative way to use nbval which runs the whole notebook, but only compares the output of cells marked with something like `# NBVAL_CHECK_OUTPUT`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/17", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/17/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/17/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/17", "id": 196863409, "node_id": "MDU6SXNzdWUxOTY4NjM0MDk=", "number": 17, "title": "Should we allow non-execution of cells for nbval?", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568170, "node_id": "MDU6TGFiZWwxOTc1NjgxNzA=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-21T07:19:41Z", "updated_at": "2017-02-09T17:31:21Z", "closed_at": "2017-02-09T17:31:21Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We have a keyword `#NBVAL_IGNORE_OUTPUT` (see issue #16) that stops nbval from comparing the computed output against the stored output for the input cell in which the string `#NBVAL_IGNORE_OUTPUT` is found. However, the input cell code is still executed. This is normally useful as later cells may depend on it.\r\n\r\nWould it be useful to also support another feature, maybe using the keyword `#NBVAL_IGNORE`, which means that the input cell in which this is found will not be executed at all? This could be used in cases where we know that the execution causes side effects on the host that executes the command, which we may not want or need as part of the nbval testing. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/16", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/16/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/16/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/16", "id": 196862956, "node_id": "MDU6SXNzdWUxOTY4NjI5NTY=", "number": 16, "title": "Rename #PYTEST_VALIDATE_IGNORE_OUTPUT", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568170, "node_id": "MDU6TGFiZWwxOTc1NjgxNzA=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-21T07:16:12Z", "updated_at": "2016-12-21T20:29:46Z", "closed_at": "2016-12-21T20:29:46Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The keyword `#PYTEST_VALIDATE_IGNORE_OUTPUT` used to ignore comparison of computed and saved output originates from a time when the tool was called 'pytest-validate'. As the name now is 'nbval' (standing for NoteBook VALidation), it seems sensible to rename that keyword to `#NBVAL_IGNORE_OUTPUT`.\r\n\r\nWe should still allow #PYTEST_VALIDATE_IGNORE_OUTPUT to be used for backwards compatibility.\r\n\r\nMust update documentation accordingly.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/15", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/15/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/15/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/15", "id": 196862233, "node_id": "MDU6SXNzdWUxOTY4NjIyMzM=", "number": 15, "title": "Exploit nbdime to show diffs of outputs", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568170, "node_id": "MDU6TGFiZWwxOTc1NjgxNzA=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-12-21T07:10:37Z", "updated_at": "2017-01-17T15:31:43Z", "closed_at": "2017-01-17T15:31:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The current workflow for nbval is that it a text-based diff of the computed and stored output is presented. Here is an example for failing cells 6 and 17:\r\n<pre>\r\nbin:nbval fangohr$ py.test -v --nbval documentation.ipynb \r\n============================================ test session starts ============================================\r\nplatform darwin -- Python 3.5.2, pytest-2.9.2, py-1.4.31, pluggy-0.3.1 -- /Users/fangohr/anaconda3/bin/python\r\ncachedir: .cache\r\nrootdir: /Users/fangohr/git/nbval, inifile: \r\nplugins: nbval-0.3.6, cov-2.3.1\r\ncollected 10 items \r\n\r\ndocumentation.ipynb::Cell 6 FAILED\r\ndocumentation.ipynb::Cell 13 PASSED\r\ndocumentation.ipynb::Cell 15 PASSED\r\ndocumentation.ipynb::Cell 17 FAILED\r\ndocumentation.ipynb::Cell 19 FAILED\r\ndocumentation.ipynb::Cell 21 FAILED\r\ndocumentation.ipynb::Cell 24 PASSED\r\ndocumentation.ipynb::Cell 26 PASSED\r\ndocumentation.ipynb::Cell 28 FAILED\r\ndocumentation.ipynb::Cell 29 PASSED\r\n\r\n================================================= FAILURES ==================================================\r\n__________________________________________________ cell 6 ___________________________________________________\r\nNotebook cell execution failed\r\nCell 6: Error with cell\r\n\r\nInput:\r\n%%writefile doc_sanitize.cfg\r\n[regex1]\r\nregex: \\d{1,2}/\\d{1,2}/\\d{2,4}\r\nreplace: DATE-STAMP\r\n\r\n[regex2]\r\nregex: \\d{2}:\\d{2}:\\d{2}\r\nreplace: TIME-STAMP\r\n\r\nTraceback: mismatch 'text'\r\n<<<<<<<<<<<< Reference output from ipynb file:\r\nWriting doc_sanitize.cfg\r\n\r\n============ disagrees with newly computed (test) output:  \r\nOverwriting doc_sanitize.cfg\r\n\r\n>>>>>>>>>>>>\r\n__________________________________________________ cell 17 __________________________________________________\r\nNotebook cell execution failed\r\nCell 17: Error with cell\r\n\r\nInput:\r\nprint([np.random.rand() for i in range(4)])\r\nprint([np.random.rand() for i in range(4)])\r\n\r\nTraceback: mismatch 'text'\r\n<<<<<<<<<<<< Reference output from ipynb file:\r\n[0.5484774726012661, 0.6435546033932157, 0.10826743499682889, 0.5748413548528436]\r\n[0.7290940674500538, 0.6663117586823235, 0.7182293584340027, 0.22383996412490337]\r\n\r\n============ disagrees with newly computed (test) output:  \r\n[0.4660913775186526, 0.31178898136714595, 0.25151291353922156, 0.5269909473164134]\r\n[0.4953052207494243, 0.04899424112512207, 0.14481404964135336, 0.5252754048311362]\r\n\r\n>>>>>>>>>>>>\r\n</pre>\r\n\r\nWould it be possible to use [nbdime](https://github.com/jupyter/nbdime) to display those diffs in a nicer way (in the browser)?\r\n\r\nIf so, then two possible user interfaces come to mind:\r\n\r\n1. creation of a diff-document in browser which shows the changes in nbdime style for each failing test. (The changes here are the changes between the saved output cell, and the computed output data. The input data will be the same as it comes from the saved notebook for both outputs.)\r\n\r\n2. the option to display the diff output for just a particular cell in the saved document, for example cell 6 in the example above, and to produce the nbdime diff output just for that cell. This might be useful to focus on a particular failing cell. This would require a new flag to py.test to indicated which cell we want to focus on. We would probably still have to execute all notebook cells up to that cell to make sure the commands in cell 6 can reasonably execute.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/14", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/14/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/14/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/14", "id": 188572692, "node_id": "MDU6SXNzdWUxODg1NzI2OTI=", "number": 14, "title": "No TDD possible with nbval", "user": {"login": "michaelaye", "id": 69774, "node_id": "MDQ6VXNlcjY5Nzc0", "avatar_url": "https://avatars1.githubusercontent.com/u/69774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelaye", "html_url": "https://github.com/michaelaye", "followers_url": "https://api.github.com/users/michaelaye/followers", "following_url": "https://api.github.com/users/michaelaye/following{/other_user}", "gists_url": "https://api.github.com/users/michaelaye/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelaye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelaye/subscriptions", "organizations_url": "https://api.github.com/users/michaelaye/orgs", "repos_url": "https://api.github.com/users/michaelaye/repos", "events_url": "https://api.github.com/users/michaelaye/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelaye/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-10T17:39:37Z", "updated_at": "2016-11-11T21:04:37Z", "closed_at": "2016-11-10T18:03:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "So, I really like the simplicity of nbval, but was wondering:\r\nSometimes it's really nice to clear you mind about what you actually want from a new module by doing TDD, meaning writing a few tests for the non-existing API or module and then develop it, reducing the failing tests one by one.\r\nDo you envision something like that to be possible with `nbval`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/13", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/13/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/13/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/13", "id": 188032712, "node_id": "MDU6SXNzdWUxODgwMzI3MTI=", "number": 13, "title": "Error in KernelSpecManager when using Travis CI", "user": {"login": "wd15", "id": 1986844, "node_id": "MDQ6VXNlcjE5ODY4NDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1986844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wd15", "html_url": "https://github.com/wd15", "followers_url": "https://api.github.com/users/wd15/followers", "following_url": "https://api.github.com/users/wd15/following{/other_user}", "gists_url": "https://api.github.com/users/wd15/gists{/gist_id}", "starred_url": "https://api.github.com/users/wd15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wd15/subscriptions", "organizations_url": "https://api.github.com/users/wd15/orgs", "repos_url": "https://api.github.com/users/wd15/repos", "events_url": "https://api.github.com/users/wd15/events{/privacy}", "received_events_url": "https://api.github.com/users/wd15/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-08T16:06:59Z", "updated_at": "2016-11-09T16:30:09Z", "closed_at": "2016-11-09T16:30:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following error is occurring when using Nbval with Travis CI.\r\n```\r\nself = <jupyter_client.kernelspec.KernelSpecManager object at 0x7fa7fc2c1c88>\r\nkernel_name = 'python3'\r\n    def get_kernel_spec(self, kernel_name):\r\n        \"\"\"Returns a :class:`KernelSpec` instance for the given kernel_name.\r\n    \r\n            Raises :exc:`NoSuchKernel` if the given kernel name is not found.\r\n            \"\"\"\r\n        d = self.find_kernel_specs()\r\n        try:\r\n>           resource_dir = d[kernel_name.lower()]\r\nE           KeyError: 'python3'\r\n../../../miniconda/envs/test-environment/lib/python3.5/site-packages/jupyter_client/kernelspec.py:173: KeyError\r\nDuring handling of the above exception, another exception occurred:\r\nself = <CallInfo when='setup' exception: No such kernel named python3>\r\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x7fa8025b4378>\r\nwhen = 'setup'\r\n    def __init__(self, func, when):\r\n        #: context of invocation: one of \"setup\", \"call\",\r\n        #: \"teardown\", \"memocollect\"\r\n        self.when = when\r\n        self.start = time()\r\n        try:\r\n>           self.result = func()\r\n../../../miniconda/envs/test-environment/lib/python3.5/site-packages/_pytest/runner.py:163: \r\n```\r\nSee https://travis-ci.org/wd15/nbval-bug/builds/174248175\r\n\r\nThe `.travis.yml` file is https://github.com/wd15/nbval-bug/blob/master/.travis.yml and the test, https://github.com/wd15/nbval-bug/blob/master/test.ipynb\r\n\r\nThe test seems to work fine on my local workstation outside of Travis CI.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/11", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/11/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/11/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/11", "id": 183257460, "node_id": "MDU6SXNzdWUxODMyNTc0NjA=", "number": 11, "title": "Interaction with cell magics", "user": {"login": "rpep", "id": 8539474, "node_id": "MDQ6VXNlcjg1Mzk0NzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/8539474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpep", "html_url": "https://github.com/rpep", "followers_url": "https://api.github.com/users/rpep/followers", "following_url": "https://api.github.com/users/rpep/following{/other_user}", "gists_url": "https://api.github.com/users/rpep/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpep/subscriptions", "organizations_url": "https://api.github.com/users/rpep/orgs", "repos_url": "https://api.github.com/users/rpep/repos", "events_url": "https://api.github.com/users/rpep/events{/privacy}", "received_events_url": "https://api.github.com/users/rpep/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568168, "node_id": "MDU6TGFiZWwxOTc1NjgxNjg=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rpep", "id": 8539474, "node_id": "MDQ6VXNlcjg1Mzk0NzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/8539474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpep", "html_url": "https://github.com/rpep", "followers_url": "https://api.github.com/users/rpep/followers", "following_url": "https://api.github.com/users/rpep/following{/other_user}", "gists_url": "https://api.github.com/users/rpep/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpep/subscriptions", "organizations_url": "https://api.github.com/users/rpep/orgs", "repos_url": "https://api.github.com/users/rpep/repos", "events_url": "https://api.github.com/users/rpep/events{/privacy}", "received_events_url": "https://api.github.com/users/rpep/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rpep", "id": 8539474, "node_id": "MDQ6VXNlcjg1Mzk0NzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/8539474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpep", "html_url": "https://github.com/rpep", "followers_url": "https://api.github.com/users/rpep/followers", "following_url": "https://api.github.com/users/rpep/following{/other_user}", "gists_url": "https://api.github.com/users/rpep/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpep/subscriptions", "organizations_url": "https://api.github.com/users/rpep/orgs", "repos_url": "https://api.github.com/users/rpep/repos", "events_url": "https://api.github.com/users/rpep/events{/privacy}", "received_events_url": "https://api.github.com/users/rpep/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2016-10-16T09:25:01Z", "updated_at": "2016-10-17T14:00:01Z", "closed_at": "2016-10-17T14:00:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Cell magic syntax requires that the cell magic is on the first line. This causes problems when that cell needs to be ignored by nbval, as nbval doesn't pick up the '#PYTEST_VALIDATE_IGNORE_OUTPUT' unless it's on the first line.\n\nI'd suggest maybe the way to do this is to check whether the first line is a cell magic, and if so, check whether the following line in the cell is an nbval statement.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/9", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/9/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/9/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/9", "id": 180069195, "node_id": "MDU6SXNzdWUxODAwNjkxOTU=", "number": 9, "title": "nbval error in docker (ubuntu 16.04 and python 3.5.2)", "user": {"login": "marijanbeg", "id": 12461206, "node_id": "MDQ6VXNlcjEyNDYxMjA2", "avatar_url": "https://avatars1.githubusercontent.com/u/12461206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijanbeg", "html_url": "https://github.com/marijanbeg", "followers_url": "https://api.github.com/users/marijanbeg/followers", "following_url": "https://api.github.com/users/marijanbeg/following{/other_user}", "gists_url": "https://api.github.com/users/marijanbeg/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijanbeg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijanbeg/subscriptions", "organizations_url": "https://api.github.com/users/marijanbeg/orgs", "repos_url": "https://api.github.com/users/marijanbeg/repos", "events_url": "https://api.github.com/users/marijanbeg/events{/privacy}", "received_events_url": "https://api.github.com/users/marijanbeg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-09-29T14:43:35Z", "updated_at": "2016-10-04T13:28:10Z", "closed_at": "2016-09-29T15:44:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "With `Dockerfile`:\n\n```\nFROM ubuntu:16.04\n\nRUN apt-get update -y && \\\n    apt-get install -y git python3-pip curl && \\\n    python3 -m pip install --upgrade pip pytest-cov codecov \\\n      matplotlib tornado ipython ipykernel \\\n      git+git://github.com/computationalmodelling/nbval.git\n\nWORKDIR /usr/local/\n\nRUN git clone https://github.com/joommf/discretisedfield.git\n```\n\nWhen run:\n\n```\ndocker build -t dockertestimage .\ndocker run -ti dockertestimage /bin/bash -c \"cd discretisedfield; python3 -m pytest --nbval docs/ipynb/*.ipynb\"\n```\n\nThe error is:\n\n```\n============================= test session starts ==============================\nplatform linux -- Python 3.5.2, pytest-3.0.2, py-1.4.31, pluggy-0.3.1\nrootdir: /usr/local/discretisedfield, inifile: \nplugins: nbval-0.3, cov-2.3.1\ncollected 77 items / 1 errors \n\n==================================== ERRORS ====================================\n_____________ ERROR collecting docs/ipynb/creating_fd_field.ipynb ______________\n../lib/python3.5/dist-packages/nbval/plugin.py:194: in collect\n    self.nb = reads(f.read(), 4)\n/usr/lib/python3.5/encodings/ascii.py:26: in decode\n    return codecs.ascii_decode(input, self.errors)[0]\nE   UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 3202:\nordinal not in range(128)\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\n=========================== 1 error in 0.59 seconds ============================\n```\n\nAny thoughts?\n\nThanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/8", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/8/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/8/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/8", "id": 172208264, "node_id": "MDU6SXNzdWUxNzIyMDgyNjQ=", "number": 8, "title": "make tool available via pip", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568170, "node_id": "MDU6TGFiZWwxOTc1NjgxNzA=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-19T19:56:18Z", "updated_at": "2016-10-18T12:14:10Z", "closed_at": "2016-10-18T11:55:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Maybe pytest-nbval is a good name?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/7", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/7/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/7/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/7", "id": 160671219, "node_id": "MDU6SXNzdWUxNjA2NzEyMTk=", "number": 7, "title": "Record nbval test coverage in coverage ", "user": {"login": "fangohr", "id": 4489119, "node_id": "MDQ6VXNlcjQ0ODkxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4489119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangohr", "html_url": "https://github.com/fangohr", "followers_url": "https://api.github.com/users/fangohr/followers", "following_url": "https://api.github.com/users/fangohr/following{/other_user}", "gists_url": "https://api.github.com/users/fangohr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangohr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangohr/subscriptions", "organizations_url": "https://api.github.com/users/fangohr/orgs", "repos_url": "https://api.github.com/users/fangohr/repos", "events_url": "https://api.github.com/users/fangohr/events{/privacy}", "received_events_url": "https://api.github.com/users/fangohr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568170, "node_id": "MDU6TGFiZWwxOTc1NjgxNzA=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-06-16T14:09:52Z", "updated_at": "2017-03-26T13:25:50Z", "closed_at": "2017-03-26T13:25:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "A description of the issue is provided in this jupyter notebook [issues/7/issue.ipynb](../blob/master/issues/7/issue.ipynb).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/5", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/5/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/5/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/5", "id": 142695390, "node_id": "MDU6SXNzdWUxNDI2OTUzOTA=", "number": 5, "title": "Use cell metadata rather than inline comments", "user": {"login": "owlas", "id": 11660098, "node_id": "MDQ6VXNlcjExNjYwMDk4", "avatar_url": "https://avatars3.githubusercontent.com/u/11660098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/owlas", "html_url": "https://github.com/owlas", "followers_url": "https://api.github.com/users/owlas/followers", "following_url": "https://api.github.com/users/owlas/following{/other_user}", "gists_url": "https://api.github.com/users/owlas/gists{/gist_id}", "starred_url": "https://api.github.com/users/owlas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/owlas/subscriptions", "organizations_url": "https://api.github.com/users/owlas/orgs", "repos_url": "https://api.github.com/users/owlas/repos", "events_url": "https://api.github.com/users/owlas/events{/privacy}", "received_events_url": "https://api.github.com/users/owlas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568170, "node_id": "MDU6TGFiZWwxOTc1NjgxNzA=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-03-22T15:58:55Z", "updated_at": "2017-02-08T12:56:28Z", "closed_at": "2017-02-08T12:56:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Ignore output is done by adding an inline comment to the cell. Could this be done in a cleaner way using cell metadata.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/computationalmodelling/nbval/issues/4", "repository_url": "https://api.github.com/repos/computationalmodelling/nbval", "labels_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/4/comments", "events_url": "https://api.github.com/repos/computationalmodelling/nbval/issues/4/events", "html_url": "https://github.com/computationalmodelling/nbval/issues/4", "id": 142694846, "node_id": "MDU6SXNzdWUxNDI2OTQ4NDY=", "number": 4, "title": "Option to ignore error on cell", "user": {"login": "owlas", "id": 11660098, "node_id": "MDQ6VXNlcjExNjYwMDk4", "avatar_url": "https://avatars3.githubusercontent.com/u/11660098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/owlas", "html_url": "https://github.com/owlas", "followers_url": "https://api.github.com/users/owlas/followers", "following_url": "https://api.github.com/users/owlas/following{/other_user}", "gists_url": "https://api.github.com/users/owlas/gists{/gist_id}", "starred_url": "https://api.github.com/users/owlas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/owlas/subscriptions", "organizations_url": "https://api.github.com/users/owlas/orgs", "repos_url": "https://api.github.com/users/owlas/repos", "events_url": "https://api.github.com/users/owlas/events{/privacy}", "received_events_url": "https://api.github.com/users/owlas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 197568170, "node_id": "MDU6TGFiZWwxOTc1NjgxNzA=", "url": "https://api.github.com/repos/computationalmodelling/nbval/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-03-22T15:56:55Z", "updated_at": "2017-02-14T16:41:05Z", "closed_at": "2017-02-14T16:41:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Its possible to ignore the cell output but not errors. Sometimes we might want a cell failure and not have it tested. \n", "performed_via_github_app": null, "score": 1.0}]}