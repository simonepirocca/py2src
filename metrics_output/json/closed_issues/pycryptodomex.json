{"total_count": 299, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/441", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/441/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/441/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/441", "id": 679363175, "node_id": "MDU6SXNzdWU2NzkzNjMxNzU=", "number": 441, "title": "Integrating with OSS-Fuzz", "user": {"login": "rjotwani", "id": 8094015, "node_id": "MDQ6VXNlcjgwOTQwMTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/8094015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rjotwani", "html_url": "https://github.com/rjotwani", "followers_url": "https://api.github.com/users/rjotwani/followers", "following_url": "https://api.github.com/users/rjotwani/following{/other_user}", "gists_url": "https://api.github.com/users/rjotwani/gists{/gist_id}", "starred_url": "https://api.github.com/users/rjotwani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rjotwani/subscriptions", "organizations_url": "https://api.github.com/users/rjotwani/orgs", "repos_url": "https://api.github.com/users/rjotwani/repos", "events_url": "https://api.github.com/users/rjotwani/events{/privacy}", "received_events_url": "https://api.github.com/users/rjotwani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-14T19:36:26Z", "updated_at": "2020-08-18T02:43:17Z", "closed_at": "2020-08-18T02:43:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Greetings PyCryptodome developers and contributors,\r\n\r\nWe\u2019re reaching out because your project is an important part of the open source ecosystem, and we\u2019d like to invite you to integrate with our [fuzzing](https://www.owasp.org/index.php/Fuzzing) service, [OSS-Fuzz](https://opensource.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html). OSS-Fuzz is a free fuzzing infrastructure you can use to identify security vulnerabilities and stability bugs in your project. OSS-Fuzz will:\r\n\r\n- Continuously run at scale all the fuzzers you write.\r\n- Alert you when it finds issues.\r\n- Automatically close issues after they\u2019ve been fixed by a commit.\r\n\r\nMany widely used [open source projects](https://github.com/google/oss-fuzz/tree/master/projects) like OpenSSL, FFmpeg, LibreOffice, and ImageMagick are fuzzing via OSS-Fuzz, which helps them find and remediate [critical issues](https://bugs.chromium.org/p/oss-fuzz/issues/list?can=1&q=status%3AFixed%2CVerified+Type%3ABug%2CBug-Security+-component%3AInfra+).\r\n\r\nWe've already done the [heavy lifting](https://github.com/google/oss-fuzz/pull/4317), and all we need from you is a primary contact email address to which we can send bug reports. We've found the email `helderijs@gmail.com` in your repository, so please advise if it's alright to use this.\r\n\r\nPlease let me know if you have any questions about OSS-Fuzz, or if there's anything else I can help with.\r\n\r\nThanks!\r\n\r\nRavi\r\nOSS-Fuzz Team", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/436", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/436/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/436/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/436", "id": 665497114, "node_id": "MDU6SXNzdWU2NjU0OTcxMTQ=", "number": 436, "title": "Java Native AES/CBC/PKCS5PADDING encrypt output diff with python", "user": {"login": "JanYunkai", "id": 10251474, "node_id": "MDQ6VXNlcjEwMjUxNDc0", "avatar_url": "https://avatars0.githubusercontent.com/u/10251474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanYunkai", "html_url": "https://github.com/JanYunkai", "followers_url": "https://api.github.com/users/JanYunkai/followers", "following_url": "https://api.github.com/users/JanYunkai/following{/other_user}", "gists_url": "https://api.github.com/users/JanYunkai/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanYunkai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanYunkai/subscriptions", "organizations_url": "https://api.github.com/users/JanYunkai/orgs", "repos_url": "https://api.github.com/users/JanYunkai/repos", "events_url": "https://api.github.com/users/JanYunkai/events{/privacy}", "received_events_url": "https://api.github.com/users/JanYunkai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-25T02:22:34Z", "updated_at": "2020-07-25T02:36:07Z", "closed_at": "2020-07-25T02:26:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/434", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/434/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/434/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/434/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/434", "id": 659913787, "node_id": "MDU6SXNzdWU2NTk5MTM3ODc=", "number": 434, "title": "Decrypting textbook/no padding RSA values?", "user": {"login": "dstaley", "id": 88163, "node_id": "MDQ6VXNlcjg4MTYz", "avatar_url": "https://avatars2.githubusercontent.com/u/88163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dstaley", "html_url": "https://github.com/dstaley", "followers_url": "https://api.github.com/users/dstaley/followers", "following_url": "https://api.github.com/users/dstaley/following{/other_user}", "gists_url": "https://api.github.com/users/dstaley/gists{/gist_id}", "starred_url": "https://api.github.com/users/dstaley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dstaley/subscriptions", "organizations_url": "https://api.github.com/users/dstaley/orgs", "repos_url": "https://api.github.com/users/dstaley/repos", "events_url": "https://api.github.com/users/dstaley/events{/privacy}", "received_events_url": "https://api.github.com/users/dstaley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 29, "created_at": "2020-07-18T05:16:36Z", "updated_at": "2020-07-21T09:45:04Z", "closed_at": "2020-07-21T09:45:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "PyCrypto had the `RSA.decrypt` method to decrypt textbook RSA encoded values. I understand that PyCryptodome doesn't support encrypting or decrypting these values through the same method, but is there an alternative/hidden/private method that would achieve the same result? If not, is there a suggested alternative? I understand that it's not secure, but I'm just looking to decrypt some previously-encrypted values.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/433", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/433/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/433/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/433", "id": 655842682, "node_id": "MDU6SXNzdWU2NTU4NDI2ODI=", "number": 433, "title": "Problem with AES IV", "user": {"login": "StevenLOL", "id": 5893788, "node_id": "MDQ6VXNlcjU4OTM3ODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5893788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StevenLOL", "html_url": "https://github.com/StevenLOL", "followers_url": "https://api.github.com/users/StevenLOL/followers", "following_url": "https://api.github.com/users/StevenLOL/following{/other_user}", "gists_url": "https://api.github.com/users/StevenLOL/gists{/gist_id}", "starred_url": "https://api.github.com/users/StevenLOL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StevenLOL/subscriptions", "organizations_url": "https://api.github.com/users/StevenLOL/orgs", "repos_url": "https://api.github.com/users/StevenLOL/repos", "events_url": "https://api.github.com/users/StevenLOL/events{/privacy}", "received_events_url": "https://api.github.com/users/StevenLOL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-13T13:15:24Z", "updated_at": "2020-07-13T23:39:04Z", "closed_at": "2020-07-13T23:37:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please see the follwoing code block and its output:\r\n\r\nPlease check out the thrid \"AES.new\" where I use a \"wrong\" IV value. \r\n\r\nExpected output:\r\n    The code should fail to recover the orignial data. \r\nBut:\r\n    The code can still recover part of the orignial data.\r\nVersion:\r\n    3.9.8\r\n\r\n\r\nCode:\r\n```\r\n# coding: utf-8\r\nfrom Crypto.Cipher import AES\r\nimport Crypto\r\nprint(Crypto.__version__)\r\nfrom Crypto import Random\r\n\r\ndata = '1234567890123456789012345678901234567890123456789012345678901234567890'\r\nprint('data.encode=',data.encode())\r\nkey = b'this is a 16 key'  #  16\uff08AES-128\uff09\uff0c 24\uff08AES-192\uff09\uff0c 32\uff08AES-256\uff09\r\niv = Random.new().read(AES.block_size) # \r\nprint('iv=',iv)\r\nprint('block_size=',AES.block_size)\r\nmycipher = AES.new(key, AES.MODE_CFB, iv)\r\nciptext = iv + mycipher.encrypt(data.encode())\r\nprint('len(iv)=',len(iv),'\\nlen(data.encode())=',len(data.encode()))\r\nprint(ciptext,len(ciptext))\r\nmydecrypt = AES.new(key, AES.MODE_CFB, ciptext[:AES.block_size])\r\ndecrytext = mydecrypt.decrypt(ciptext[AES.block_size:])\r\nprint('decrytextEncoded=',decrytext)\r\nprint('data.encode==decrytextEncoded?',data.encode()==decrytext)\r\n\r\nmydecrypt = AES.new(key, AES.MODE_CFB, iv=Random.new().read(AES.block_size)) #where I use a \"wrong\" IV value\r\ndecrytext = mydecrypt.decrypt(ciptext[AES.block_size:])\r\nprint('\\ndecrytextEncoded=',decrytext) #The code can still recover part of the orignial data.\r\nprint('data.encode==decrytextEncoded?',data.encode()==decrytext)\r\n```\r\n\r\n\r\n\r\nSample output:\r\n\r\n```\r\n\r\n3.9.8\r\ndata.encode= b'1234567890123456789012345678901234567890123456789012345678901234567890'\r\niv= b'\\x85\\xd2\\xdc;@\\x14\\xf55\\x06\\xaeZ&\\xe9\\x1e\\xac='\r\nblock_size= 16\r\nlen(iv)= 16 \r\nlen(data.encode())= 70\r\nb\"\\x85\\xd2\\xdc;@\\x14\\xf55\\x06\\xaeZ&\\xe9\\x1e\\xac='E\\xf0\\x8d\\xabC\\x97w\\xff\\xde7\\x8b\\xa5h\\x11\\xe7\\xe8!\\xf1.\\x7f  )\\x13\\xc7\\xf6\\xe9cT\\xd9Z\\xfa\\xc3d\\x90&d6;]\\xf2)\\x9e8\\xc0\\x8b\\x153A\\x93\\xbdL\\xf4\\x15@z$\\xa5\\xd7\\x87\\x8d\\x85\\xd4\\x16\\xa7\\x87\\x1bx=\" 86\r\ndecrytextEncoded= b'1234567890123456789012345678901234567890123456789012345678901234567890'\r\ndata.encode==decrytextEncoded? True\r\n\r\ndecrytextEncoded= b'\\xb6p\\xeb\\x80Y\\x93O\\x13T\\xbe9\\xac\\xb3\\x8f\\xe4u789012345678901234567890123456789012345678901234567890'   #The code can still recover part of the orignial data.\r\ndata.encode==decrytextEncoded? False\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/432", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/432/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/432/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/432", "id": 655825908, "node_id": "MDU6SXNzdWU2NTU4MjU5MDg=", "number": 432, "title": "Usage of HMAC", "user": {"login": "StevenLOL", "id": 5893788, "node_id": "MDQ6VXNlcjU4OTM3ODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5893788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StevenLOL", "html_url": "https://github.com/StevenLOL", "followers_url": "https://api.github.com/users/StevenLOL/followers", "following_url": "https://api.github.com/users/StevenLOL/following{/other_user}", "gists_url": "https://api.github.com/users/StevenLOL/gists{/gist_id}", "starred_url": "https://api.github.com/users/StevenLOL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StevenLOL/subscriptions", "organizations_url": "https://api.github.com/users/StevenLOL/orgs", "repos_url": "https://api.github.com/users/StevenLOL/repos", "events_url": "https://api.github.com/users/StevenLOL/events{/privacy}", "received_events_url": "https://api.github.com/users/StevenLOL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-13T12:51:25Z", "updated_at": "2020-07-23T04:58:12Z", "closed_at": "2020-07-23T04:58:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nIt is not clear how to use the HMAC in the following document:\r\n\r\nhttps://github.com/Legrandin/pycryptodome/blob/master/Doc/src/hash/hmac.rst\r\n\r\neg:\r\n\r\nWhere is the \"msg\" and \"mac\" come from in the code block?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/430", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/430/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/430/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/430", "id": 644385456, "node_id": "MDU6SXNzdWU2NDQzODU0NTY=", "number": 430, "title": "3.9.8 not on pypi?", "user": {"login": "mgorny", "id": 110765, "node_id": "MDQ6VXNlcjExMDc2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/110765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgorny", "html_url": "https://github.com/mgorny", "followers_url": "https://api.github.com/users/mgorny/followers", "following_url": "https://api.github.com/users/mgorny/following{/other_user}", "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions", "organizations_url": "https://api.github.com/users/mgorny/orgs", "repos_url": "https://api.github.com/users/mgorny/repos", "events_url": "https://api.github.com/users/mgorny/events{/privacy}", "received_events_url": "https://api.github.com/users/mgorny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-24T07:26:59Z", "updated_at": "2020-06-25T18:51:47Z", "closed_at": "2020-06-24T21:26:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that the 3.9.8 release is found on github but on pypi. Is this intentional? Is the release ready to be used?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/429", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/429/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/429/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/429", "id": 643156773, "node_id": "MDU6SXNzdWU2NDMxNTY3NzM=", "number": 429, "title": "The 'pycryptodomex' distribution was not found and is required by impacket", "user": {"login": "kaizen-dry", "id": 62895723, "node_id": "MDQ6VXNlcjYyODk1NzIz", "avatar_url": "https://avatars3.githubusercontent.com/u/62895723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaizen-dry", "html_url": "https://github.com/kaizen-dry", "followers_url": "https://api.github.com/users/kaizen-dry/followers", "following_url": "https://api.github.com/users/kaizen-dry/following{/other_user}", "gists_url": "https://api.github.com/users/kaizen-dry/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaizen-dry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaizen-dry/subscriptions", "organizations_url": "https://api.github.com/users/kaizen-dry/orgs", "repos_url": "https://api.github.com/users/kaizen-dry/repos", "events_url": "https://api.github.com/users/kaizen-dry/events{/privacy}", "received_events_url": "https://api.github.com/users/kaizen-dry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-22T15:18:27Z", "updated_at": "2020-06-23T12:36:37Z", "closed_at": "2020-06-23T08:07:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Command: **sudo smbserver.py -smb2support -debug -comment \"test\" data /home/janak/smbserver**\r\n\r\nActually any command related to smbserver.py gives me same error as below:\r\n\r\n`File \"/usr/local/bin/smbserver.py\", line 4, in <module>\r\n    __import__('pkg_resources').run_script('impacket==0.9.22.dev1+20200520.120526.3f1e7ddd', 'smbserver.py')\r\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 3251, in <module>\r\n    @_call_aside\r\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 3235, in _call_aside\r\n    f(*args, **kwargs)\r\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 3264, in _initialize_master_working_set\r\n    working_set = WorkingSet._build_master()\r\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 583, in _build_master\r\n    ws.require(__requires__)\r\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 900, in require\r\n    needed = self.resolve(parse_requirements(requirements))\r\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 786, in resolve\r\n    raise DistributionNotFound(req, requirers)\r\npkg_resources.DistributionNotFound: The 'pycryptodomex' distribution was not found and is required by impacket`\r\n\r\n pycryptodomex:\r\n```\r\npip install pycryptodomex                                                                                                                                                               \r\nDefaulting to user installation because normal site-packages is not writeable                                                                                                                 \r\nRequirement already satisfied: pycryptodomex in /usr/lib/python3/dist-packages (3.9.7)\r\n```\r\npycryptodome:\r\n```\r\npip install pycryptodome\r\nDefaulting to user installation because normal site-packages is not writeable\r\nRequirement already satisfied: pycryptodome in /home/janak/.local/lib/python3.8/site-packages (3.9.7)\r\n```\r\nimpacket version:\r\n`python3-impacket/rolling,rolling,now 0.9.20-5 all [installed]`\r\n\r\nI was following this article where he creates UNC path pointing towards his smbserver, so his smbserver can transfer files from this path. Following is from article itself : \r\n\r\n_Tomcat interprets the UNC path and is trying to install an application from the \u201cdatatest\u201d folder. We will oblige it and create the \u201cdatatest\u201d folder, and add a little WAR file in which we insert a backdoor that will enable us to take over the server from our C&C._\r\n\r\nhttps://www.certilience.fr/2019/03/tomcat-exploit-variant-host-manager/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/427", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/427/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/427/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/427/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/427", "id": 637300990, "node_id": "MDU6SXNzdWU2MzczMDA5OTA=", "number": 427, "title": "cffi.FFIError when gmp.dll available on Windows", "user": {"login": "twangboy", "id": 9383935, "node_id": "MDQ6VXNlcjkzODM5MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9383935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twangboy", "html_url": "https://github.com/twangboy", "followers_url": "https://api.github.com/users/twangboy/followers", "following_url": "https://api.github.com/users/twangboy/following{/other_user}", "gists_url": "https://api.github.com/users/twangboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/twangboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twangboy/subscriptions", "organizations_url": "https://api.github.com/users/twangboy/orgs", "repos_url": "https://api.github.com/users/twangboy/repos", "events_url": "https://api.github.com/users/twangboy/events{/privacy}", "received_events_url": "https://api.github.com/users/twangboy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-11T20:29:02Z", "updated_at": "2020-06-22T21:51:40Z", "closed_at": "2020-06-22T21:51:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to fix an issue we're seeing with Salt (https://github.com/saltstack/salt/issues/56597). We only see this stack trace if the `gmp.dll` file is present on the system in a location in the path.\r\n\r\nI uninstalled pycryptodomex and built pycryptodome from source following the instructions here:\r\nhttps://www.pycryptodome.org/en/latest/src/installation.html#windows-from-sources-python-3-5-and-newer\r\n\r\nI ran the test as in the instructions (`> python -m Cryptodome.SelfTest`) and noticed the following message:\r\n\r\n```\r\nSkipping GMP tests (ctypes.util.find_library() did not manage to locate a library called 'gmp')\r\n```\r\n\r\nSo I dropped the dll ([gmp.zip](https://github.com/Legrandin/pycryptodome/files/4767143/gmp.zip)) in the C:\\Windows directory and ran again... I now get the same error I'm seeing in Salt when I launch the SelfTest:\r\n\r\n```\r\nC:\\dev\\salt>python -m Cryptodome.SelfTest\r\nTraceback (most recent call last):\r\n  File \"C:\\Python37\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"C:\\Python37\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Python37\\lib\\site-packages\\Cryptodome\\SelfTest\\__main__.py\", line 38, in <module>\r\n    SelfTest.run(stream=sys.stdout, verbosity=1, config=config)\r\n  File \"C:\\Python37\\lib\\site-packages\\Cryptodome\\SelfTest\\__init__.py\", line 61, in run\r\n    tests = get_tests(config=config)\r\n  File \"C:\\Python37\\lib\\site-packages\\Cryptodome\\SelfTest\\__init__.py\", line 90, in get_tests\r\n    from Cryptodome.SelfTest import Math;   tests += Math.get_tests(config=config)\r\n  File \"C:\\Python37\\lib\\site-packages\\Cryptodome\\SelfTest\\Math\\__init__.py\", line 41, in get_tests\r\n    tests += test_Numbers.get_tests(config=config)\r\n  File \"C:\\Python37\\lib\\site-packages\\Cryptodome\\SelfTest\\Math\\test_Numbers.py\", line 744, in get_tests\r\n    from Cryptodome.Math._IntegerGMP import IntegerGMP\r\n  File \"C:\\Python37\\lib\\site-packages\\Cryptodome\\Math\\_IntegerGMP.py\", line 95, in <module>\r\n    lib = load_lib(\"gmp\", gmp_defs)\r\n  File \"C:\\Python37\\lib\\site-packages\\Cryptodome\\Util\\_raw_api.py\", line 102, in load_lib\r\n    ffi.cdef(cdecl)\r\n  File \"C:\\Python37\\lib\\site-packages\\cffi\\api.py\", line 112, in cdef\r\n    self._cdef(csource, override=override, packed=packed, pack=pack)\r\n  File \"C:\\Python37\\lib\\site-packages\\cffi\\api.py\", line 126, in _cdef\r\n    self._parser.parse(csource, override=override, **options)\r\n  File \"C:\\Python37\\lib\\site-packages\\cffi\\cparser.py\", line 347, in parse\r\n    self._internal_parse(csource)\r\n  File \"C:\\Python37\\lib\\site-packages\\cffi\\cparser.py\", line 387, in _internal_parse\r\n    decl.type, name=decl.name, partial_length_ok=True)\r\n  File \"C:\\Python37\\lib\\site-packages\\cffi\\cparser.py\", line 619, in _get_type_and_quals\r\n    tp = self._get_struct_union_enum_type('struct', type, name)\r\n  File \"C:\\Python37\\lib\\site-packages\\cffi\\cparser.py\", line 751, in _get_struct_union_enum_type\r\n    self._declare('anonymous %s' % tp.forcename, tp)\r\n  File \"C:\\Python37\\lib\\site-packages\\cffi\\cparser.py\", line 526, in _declare\r\n    \"try cdef(xx, override=True))\" % (name,))\r\ncffi.FFIError: multiple declarations of anonymous MPZ (for interactive usage, try cdef(xx, override=True))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/426", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/426/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/426/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/426", "id": 637215117, "node_id": "MDU6SXNzdWU2MzcyMTUxMTc=", "number": 426, "title": "Shamir Shared Secret implementation does not interoperate with ssss", "user": {"login": "yaben222", "id": 66796600, "node_id": "MDQ6VXNlcjY2Nzk2NjAw", "avatar_url": "https://avatars0.githubusercontent.com/u/66796600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaben222", "html_url": "https://github.com/yaben222", "followers_url": "https://api.github.com/users/yaben222/followers", "following_url": "https://api.github.com/users/yaben222/following{/other_user}", "gists_url": "https://api.github.com/users/yaben222/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaben222/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaben222/subscriptions", "organizations_url": "https://api.github.com/users/yaben222/orgs", "repos_url": "https://api.github.com/users/yaben222/repos", "events_url": "https://api.github.com/users/yaben222/events{/privacy}", "received_events_url": "https://api.github.com/users/yaben222/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-06-11T17:53:53Z", "updated_at": "2020-06-24T21:27:00Z", "closed_at": "2020-06-24T21:27:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a small program which generates shared secrets with PyCryptoDome and I tested reconstructing the secret with ssss. It fails as the reconstructed secret is off by one bit.\r\n\r\nSecret: 6907314a1df0c1d6c43f52924d8f1771\r\n\r\nShares (number = 4 threshold = 2):\r\n1-0d08948a1b9ba503e8c512cec70c9d15\r\n2-a1187aca1126087c9dcbd22b588803b9\r\n3-c517df0a174d6ca9b1319277d20b89dd\r\n4-f939a64a045d528277d653e067813e66\r\n\r\nReconstructed secrets with ssss-combine -x -t 2 -s 128 -D\r\n\r\n```\r\nWith shares 1&2: 6907314a1df0c1d6c43f52924d8f1773 (last digit error)\r\nWith shares 3&4: 6907314a1df0c1d6c43f52924d8f177d (idem)\r\nWith shares 2&4: 6907314a1df0c1d6c43f52924d8f1779 (idem)\r\nGood one:           6907314a1df0c1d6c43f52924d8f1771\r\n```\r\n\r\nAny idea of what could be wrong ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/424", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/424/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/424/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/424", "id": 631043874, "node_id": "MDU6SXNzdWU2MzEwNDM4NzQ=", "number": 424, "title": "Ciphertext with incorrect length", "user": {"login": "tchauvel", "id": 29858427, "node_id": "MDQ6VXNlcjI5ODU4NDI3", "avatar_url": "https://avatars0.githubusercontent.com/u/29858427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tchauvel", "html_url": "https://github.com/tchauvel", "followers_url": "https://api.github.com/users/tchauvel/followers", "following_url": "https://api.github.com/users/tchauvel/following{/other_user}", "gists_url": "https://api.github.com/users/tchauvel/gists{/gist_id}", "starred_url": "https://api.github.com/users/tchauvel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tchauvel/subscriptions", "organizations_url": "https://api.github.com/users/tchauvel/orgs", "repos_url": "https://api.github.com/users/tchauvel/repos", "events_url": "https://api.github.com/users/tchauvel/events{/privacy}", "received_events_url": "https://api.github.com/users/tchauvel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-04T18:11:16Z", "updated_at": "2020-06-22T21:03:25Z", "closed_at": "2020-06-22T21:03:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI trying to run 2 separate code and I'm getting that error during the decrypting phase: \r\n\r\n**Encryption:** \r\n\r\n`from Crypto.PublicKey import RSA\r\nfrom Crypto.Cipher import PKCS1_OAEP\r\nimport base64\r\nimport binascii\r\n\r\n\r\nf = open('C:\\\\Users\\\\Documents\\\\keys\\\\public.pem', 'rb')\r\npublickey = RSA.importKey(f.read())\r\n\r\n\r\n\r\nmsg = b'Text to Encrypt'\r\nencryptor = PKCS1_OAEP.new(publickey)\r\nencrypted = encryptor.encrypt(msg)\r\n\r\nencryptedtext = binascii.hexlify(encrypted)\r\nencryptedstring = encryptedtext.decode(\"utf-8\")\r\n\r\n\r\nret_dict = {}\r\nret_dict[\"encryptedtext\"] = encryptedstring\r\nret_dict[\"returncode\"] = 0 \r\nreturn ret_dict`\r\n\r\n**Decryption code:** \r\n\r\n`from Crypto.PublicKey import RSA\r\nfrom Crypto.Cipher import PKCS1_OAEP\r\nimport base64\r\nimport binascii\r\n\r\nf1 = open('C:\\\\Users\\\\Documents\\\\keys\\\\private.pem', 'rb')\r\nprivatekey = RSA.importKey(f1.read())\r\n\r\nencrypted = d[\"encryptedtext\"]\r\ndecode_data = base64.b64decode(encrypted)\r\n\r\ndecryptor = PKCS1_OAEP.new(privatekey)\r\ndecrypted = decryptor.decrypt(encrypted)\r\n\r\nprint('Decrypted:', decrypted)\r\ndecryptedtext = base64.b64encode(decrypted)\r\n\r\nret_dict = {}\r\nret_dict[\"encryptedtext\"] = decryptedtext\r\nret_dict[\"returncode\"] = 0 # set to 1 to output on the FAILURE output\r\nreturn ret_dict\r\n`\r\n\r\nI can only save my ciphertext as a string and use it in the decryption code. \r\n\r\nFor that exemple the keys are: \r\n\r\n**Public PEM:** \r\n\r\n`-----BEGIN PUBLIC KEY-----\r\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCovr+APx7w0zsC2gg4bbLYUCDu\r\nndx4zcPvsnOMChlcFVUtUunU2CzeSf++pVn8KedZy6nEidrI90nASlVaCPH8xuGm\r\nmzvx2EZ5pnqiy4vWRg1/BYBQgyEg+ot1wuqp642DHxTg1knyhgAyOtkwcOisD97b\r\nistwkderBnL5TRXhOwIDAQAB\r\n-----END PUBLIC KEY-----`\r\n\r\n**Private PEM:**\r\n\r\n`-----BEGIN RSA PRIVATE KEY-----\r\nMIICXQIBAAKBgQCovr+APx7w0zsC2gg4bbLYUCDundx4zcPvsnOMChlcFVUtUunU\r\n2CzeSf++pVn8KedZy6nEidrI90nASlVaCPH8xuGmmzvx2EZ5pnqiy4vWRg1/BYBQ\r\ngyEg+ot1wuqp642DHxTg1knyhgAyOtkwcOisD97bistwkderBnL5TRXhOwIDAQAB\r\nAoGAKctU0wbPOwaWTxaBgrho23q9LVycBq+wH+YrCDxYG56NAjTPBZClTEk3tpht\r\nuS8Hxg3TdoJOVggplB7VFP+yL2p8rQmEZCCOso2KxKZALxZAcVKOKr28D+Ug/gr6\r\nnJjEPP0CcW+Uu1jeA7a1KWk4DrwwHR/H55udgOZOdc115QECQQDN7Jsy9wBbkx5y\r\n3hV221Y4f4Pdryp4Jkxr//Q7ESSZWejTJuiI4iymDCdigni3w3O94ijJ/VkvM598\r\n1TaVR45RAkEA0cehc9q+sEKCwJYVM03geM6WTEnPban+DFKt4UtVUrFuHgMw68c8\r\n5Di7qWO2G8me9MPmnGN8pQ1ThVYoOTLXywJBALA/PmZUef3m4Ty3T++2swkQOrDW\r\nZ6cGQIp/O24Csix+g4OV3Ziq3EQSSvNJcED4DGwM0ZRwPpDjwjF524nRAMECQQCu\r\nHW6BFU7uRtX1eNwxz/J+8qDGwwB6efyVR85wTzGLSB8oo+dn2t9MYVZJGqyc1bSs\r\nXSi8Jsrex3fKFJ+gEfYPAkBqYmSg+52DzwWuYkkjlx8OAwoQdArNKDHp2ancRGu8\r\nDjI9ped8ub5o7f4cDvATDBLVXPt0qRw3wA3slsVBMVZS\r\n-----END RSA PRIVATE KEY-----`\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/422", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/422/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/422/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/422", "id": 627563491, "node_id": "MDU6SXNzdWU2Mjc1NjM0OTE=", "number": 422, "title": "encrypt file using opeenssl/gpg/something that pycryptodome can decrypt", "user": {"login": "jpmorris", "id": 985548, "node_id": "MDQ6VXNlcjk4NTU0OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/985548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpmorris", "html_url": "https://github.com/jpmorris", "followers_url": "https://api.github.com/users/jpmorris/followers", "following_url": "https://api.github.com/users/jpmorris/following{/other_user}", "gists_url": "https://api.github.com/users/jpmorris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpmorris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpmorris/subscriptions", "organizations_url": "https://api.github.com/users/jpmorris/orgs", "repos_url": "https://api.github.com/users/jpmorris/repos", "events_url": "https://api.github.com/users/jpmorris/events{/privacy}", "received_events_url": "https://api.github.com/users/jpmorris/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-29T21:48:14Z", "updated_at": "2020-06-04T18:35:13Z", "closed_at": "2020-06-04T18:35:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am decrypting files via:\r\n```\r\ndef decrypt(file_name):\r\n    password = bytes(os.getenv('KEY'), 'ascii')\r\n    file_in = open(file_name, \"rb\")\r\n    iv = file_in.read(16)\r\n    chipered_data = file_in.read()\r\n    file_in.close()\r\n    cipher = AES.new(password, AES.MODE_CFB, iv=iv)\r\n    data = cipher.decrypt(ciphered_data)\r\n    return data\r\n```\r\nBecause of workflow requirements, I would like to find a way to encrypt/decrypt (mostly encrypt) via the command line using standard tools that pycroptodome can decrypt.  I am trying to use CFB for it's strength (vs CBC), it's lack of padding requirements, and it's possible comparability with openssl. I would be happy to switch if I knew there was a compatibility.  Is there a way to encrypt a file with openssl/gpg/something else that pycrptodome can read?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/421", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/421/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/421/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/421", "id": 624974599, "node_id": "MDU6SXNzdWU2MjQ5NzQ1OTk=", "number": 421, "title": "Padding violates PKCS#1 v1.5 standard when you encrypt with the private key", "user": {"login": "tszynalski", "id": 868003, "node_id": "MDQ6VXNlcjg2ODAwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/868003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tszynalski", "html_url": "https://github.com/tszynalski", "followers_url": "https://api.github.com/users/tszynalski/followers", "following_url": "https://api.github.com/users/tszynalski/following{/other_user}", "gists_url": "https://api.github.com/users/tszynalski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tszynalski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tszynalski/subscriptions", "organizations_url": "https://api.github.com/users/tszynalski/orgs", "repos_url": "https://api.github.com/users/tszynalski/repos", "events_url": "https://api.github.com/users/tszynalski/events{/privacy}", "received_events_url": "https://api.github.com/users/tszynalski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-26T15:28:58Z", "updated_at": "2020-05-27T21:23:42Z", "closed_at": "2020-05-26T20:47:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to section 8.1 of [RFC2313](https://tools.ietf.org/html/rfc2313#section-8.1), randomized padding (block type 02) should be applied only when you encrypt with the public key. When you encrypt with the private key, block type 00 or 01 should be applied (all bytes 00 or FF, respectively).\r\n\r\nI'm reporting this, because I just wasted a day trying to find out why messages encrypted with Cryptodome are not decrypted properly by a third-party API (yes, I know, they shouldn't be using PKCS#1 v1.5, but it's not up to me). Really nasty problem to debug.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/420", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/420/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/420/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/420/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/420", "id": 624405148, "node_id": "MDU6SXNzdWU2MjQ0MDUxNDg=", "number": 420, "title": "Possible Bug in AES.MODE_CFB buffer update?", "user": {"login": "arunanshub", "id": 48434243, "node_id": "MDQ6VXNlcjQ4NDM0MjQz", "avatar_url": "https://avatars0.githubusercontent.com/u/48434243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arunanshub", "html_url": "https://github.com/arunanshub", "followers_url": "https://api.github.com/users/arunanshub/followers", "following_url": "https://api.github.com/users/arunanshub/following{/other_user}", "gists_url": "https://api.github.com/users/arunanshub/gists{/gist_id}", "starred_url": "https://api.github.com/users/arunanshub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arunanshub/subscriptions", "organizations_url": "https://api.github.com/users/arunanshub/orgs", "repos_url": "https://api.github.com/users/arunanshub/repos", "events_url": "https://api.github.com/users/arunanshub/events{/privacy}", "received_events_url": "https://api.github.com/users/arunanshub/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-25T17:03:48Z", "updated_at": "2020-06-24T21:27:26Z", "closed_at": "2020-06-24T21:27:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is the code to demonstrate that:\r\n```python\r\nfrom Crypto.Cipher import AES\r\nimport os\r\n\r\nk, n = os.urandom(32), os.urandom(16)\r\nbuf = bytearray(10)\r\n\r\nx = AES.new(k, AES.MODE_CFB, n)\r\n# update the buffer here\r\nx.encrypt(buf, buf)\r\n\r\nx = AES.new(k, AES.MODE_CFB, n)\r\n# update the buffer: decrypt\r\nx.decrypt(buf, buf)\r\n```\r\n\r\nThe `buf` must be a bytearray of Null, but that is not the case.\r\n\r\n![Screenshot_20200525-223323](https://user-images.githubusercontent.com/48434243/82832077-c34d4600-9ed7-11ea-998f-884e98af69fa.png)\r\n\r\nAlthough, the non-buffer decryption works normally.\r\n\r\n```python\r\nk, n = os.urandom(32), os.urandom(16)\r\nbuf = bytearray(10)\r\n\r\nx = AES.new(k, AES.MODE_CFB, n)\r\n# update the buffer here\r\nx.encrypt(buf, buf)\r\n\r\nx = AES.new(k, AES.MODE_CFB, n)\r\n# update the buffer: decrypt\r\nx.decrypt(buf)  # returns Null byte of length 10\r\n```\r\n\r\n![Screenshot_20200525-230410~2](https://user-images.githubusercontent.com/48434243/82833665-4a042200-9edc-11ea-8629-1bb19b1a70d2.png)\r\n\r\n**The bug seems to be in the `decrypt` method's buffer operation.**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/419", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/419/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/419/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/419", "id": 621184668, "node_id": "MDU6SXNzdWU2MjExODQ2Njg=", "number": 419, "title": "import_key says RSA key format not supported", "user": {"login": "jsahil730", "id": 49490887, "node_id": "MDQ6VXNlcjQ5NDkwODg3", "avatar_url": "https://avatars1.githubusercontent.com/u/49490887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsahil730", "html_url": "https://github.com/jsahil730", "followers_url": "https://api.github.com/users/jsahil730/followers", "following_url": "https://api.github.com/users/jsahil730/following{/other_user}", "gists_url": "https://api.github.com/users/jsahil730/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsahil730/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsahil730/subscriptions", "organizations_url": "https://api.github.com/users/jsahil730/orgs", "repos_url": "https://api.github.com/users/jsahil730/repos", "events_url": "https://api.github.com/users/jsahil730/events{/privacy}", "received_events_url": "https://api.github.com/users/jsahil730/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-05-19T18:13:34Z", "updated_at": "2020-05-21T21:04:15Z", "closed_at": "2020-05-21T10:10:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Traceback (most recent call last):\r\n  File \"CERTainly not.py\", line 5, in <module>\r\n    r = RSA.import_key(f.read())\r\n  File \"/usr/local/lib/python3.6/dist-packages/Crypto/PublicKey/RSA.py\", line 783, in import_key\r\n    return _import_keyDER(extern_key, passphrase)\r\n  File \"/usr/local/lib/python3.6/dist-packages/Crypto/PublicKey/RSA.py\", line 682, in _import_keyDER\r\n    raise ValueError(\"RSA key format is not supported\")\r\nValueError: RSA key format is not supported\r\n\r\nI am getting this error with a certain DER public key certificate, present in the attached zip\r\n[2048b-rsa.zip](https://github.com/Legrandin/pycryptodome/files/4652368/2048b-rsa.zip)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/418", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/418/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/418/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/418", "id": 617843770, "node_id": "MDU6SXNzdWU2MTc4NDM3NzA=", "number": 418, "title": "RSA construct NotImplementedError", "user": {"login": "akram09", "id": 31860745, "node_id": "MDQ6VXNlcjMxODYwNzQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/31860745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akram09", "html_url": "https://github.com/akram09", "followers_url": "https://api.github.com/users/akram09/followers", "following_url": "https://api.github.com/users/akram09/following{/other_user}", "gists_url": "https://api.github.com/users/akram09/gists{/gist_id}", "starred_url": "https://api.github.com/users/akram09/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akram09/subscriptions", "organizations_url": "https://api.github.com/users/akram09/orgs", "repos_url": "https://api.github.com/users/akram09/repos", "events_url": "https://api.github.com/users/akram09/events{/privacy}", "received_events_url": "https://api.github.com/users/akram09/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-14T00:44:38Z", "updated_at": "2020-05-26T15:54:29Z", "closed_at": "2020-05-26T15:54:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to create an Rsa Private Key from the attribute e,n,d,p,q but I'm getting notImplementedError Am I doing something wrong, or this functionality is not implemented?\r\n\r\n### Here is the Traceback\r\nkey = RSA.construct((modulus, e, D,p,q)).exportKey()\r\n  File \"/usr/lib/python3.8/site-packages/Crypto/PublicKey/RSA.py\", line 517, in construct\r\n    setattr(input_comps, comp, Integer(value))\r\n  File \"/usr/lib/python3.8/site-packages/Crypto/Math/_IntegerGMP.py\", line 169, in __init__\r\n    raise NotImplementedError\r\nNotImplementedError\r\n\r\nmodulus is 4096 bit with p,q 2048 bit \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/415", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/415/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/415/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/415/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/415", "id": 614942682, "node_id": "MDU6SXNzdWU2MTQ5NDI2ODI=", "number": 415, "title": "Is it possible to get the order and base point of an ECC  curve or key?", "user": {"login": "rehanrishi21", "id": 11916307, "node_id": "MDQ6VXNlcjExOTE2MzA3", "avatar_url": "https://avatars0.githubusercontent.com/u/11916307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rehanrishi21", "html_url": "https://github.com/rehanrishi21", "followers_url": "https://api.github.com/users/rehanrishi21/followers", "following_url": "https://api.github.com/users/rehanrishi21/following{/other_user}", "gists_url": "https://api.github.com/users/rehanrishi21/gists{/gist_id}", "starred_url": "https://api.github.com/users/rehanrishi21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rehanrishi21/subscriptions", "organizations_url": "https://api.github.com/users/rehanrishi21/orgs", "repos_url": "https://api.github.com/users/rehanrishi21/repos", "events_url": "https://api.github.com/users/rehanrishi21/events{/privacy}", "received_events_url": "https://api.github.com/users/rehanrishi21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-08T19:35:32Z", "updated_at": "2020-05-08T19:38:12Z", "closed_at": "2020-05-08T19:37:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "For a key ```key = ECC.generate(curve='P-256')``` is there any property that stores the Generator point and the order of the curve?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/414", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/414/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/414/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/414", "id": 614868347, "node_id": "MDU6SXNzdWU2MTQ4NjgzNDc=", "number": 414, "title": "Support DSA signatures of SHA-HMAC output objects", "user": {"login": "koolfy", "id": 706595, "node_id": "MDQ6VXNlcjcwNjU5NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/706595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koolfy", "html_url": "https://github.com/koolfy", "followers_url": "https://api.github.com/users/koolfy/followers", "following_url": "https://api.github.com/users/koolfy/following{/other_user}", "gists_url": "https://api.github.com/users/koolfy/gists{/gist_id}", "starred_url": "https://api.github.com/users/koolfy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koolfy/subscriptions", "organizations_url": "https://api.github.com/users/koolfy/orgs", "repos_url": "https://api.github.com/users/koolfy/repos", "events_url": "https://api.github.com/users/koolfy/events{/privacy}", "received_events_url": "https://api.github.com/users/koolfy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-08T17:09:34Z", "updated_at": "2020-06-14T21:28:56Z", "closed_at": "2020-05-26T20:48:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\nI've been working at a ridiculous slow pace on porting the python OTRv3-ish implementation over at pure-python-otr from pycrypto to your great library.\r\n\r\nI've hit a roadlock recently with DSA signatures, as I'm required to sign the output of a HMAC-sha construct. However, your current code does not allow for that, sadly.\r\nI understand and am completely behind the idea if having OIDs to check we're not doing cryptocrap accidentally, but I am seeing here:\r\nhttps://github.com/Legrandin/pycryptodome/blob/6fb4ca4c73d7e80f336c183dd8ed906d3c4320a2/lib/Crypto/Hash/HMAC.py#L46\r\nthat HMAC objects do not have any kind of OIDs, which is actually a shame as elsewhere you do sort of associate them with one:\r\nhttps://github.com/Legrandin/pycryptodome/blob/41300af203a1a0b24df83b1060e5068d0f9076cf/lib/Crypto/IO/_PBES.py#L57\r\nThere, the OID of SHA256HMAC() is \"1.2.840.113549.2.9\"\r\n\r\nHowever, the validation for DSA signatures is as follow:\r\nhttps://github.com/Legrandin/pycryptodome/blob/master/lib/Crypto/Signature/DSS.py#L279\r\n>     def _valid_hash(self, msg_hash):\r\n>         \"\"\"Verify that SHA-1, SHA-2 or SHA-3 are used\"\"\"\r\n>         return (msg_hash.oid == \"1.3.14.3.2.26\" or\r\n>                 msg_hash.oid.startswith(\"2.16.840.1.101.3.4.2.\"))\r\nThus, I of course hit the error:\r\n> AttributeError: 'HMAC' object has no attribute 'oid'\r\n(on top of the OID not meeting this criteria, even if it was set as a HMAC object attribute)\r\n\r\nSigning HMAC outputs appears to be impossible in the current state of the library, and as I discuss it here: https://github.com/python-otr/pure-python-otr/issues/68#issuecomment-558408373 it's leaving me stuck with pycrypto, which is a maintenance nightmare for distributions downstream :(\r\n\r\nI do understand that fixing this would require a bit of a rework, but I think DSA signature of HMAC outputs is a legitimate usecase, if not for OTR, for other people who might need such a construct in the future.\r\n\r\nIf I can be of any assistance in helping out with the effort, please let me know, if I trusted myself with such a rework I would have attempted a pull request, but I would hate to f* something up :/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/413", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/413/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/413/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/413/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/413", "id": 611625132, "node_id": "MDU6SXNzdWU2MTE2MjUxMzI=", "number": 413, "title": "Undocumented magic number in AES CTR mode overflow check", "user": {"login": "Dentosal", "id": 2204863, "node_id": "MDQ6VXNlcjIyMDQ4NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2204863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dentosal", "html_url": "https://github.com/Dentosal", "followers_url": "https://api.github.com/users/Dentosal/followers", "following_url": "https://api.github.com/users/Dentosal/following{/other_user}", "gists_url": "https://api.github.com/users/Dentosal/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dentosal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dentosal/subscriptions", "organizations_url": "https://api.github.com/users/Dentosal/orgs", "repos_url": "https://api.github.com/users/Dentosal/repos", "events_url": "https://api.github.com/users/Dentosal/events{/privacy}", "received_events_url": "https://api.github.com/users/Dentosal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T06:05:32Z", "updated_at": "2020-05-04T08:44:41Z", "closed_at": "2020-05-04T08:44:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "In [`lib/Crypto/Cipher/_mode_ctr.py`, line 205](https://github.com/Legrandin/pycryptodome/blob/6fb4ca4c73d7e80f336c183dd8ed906d3c4320a2/lib/Crypto/Cipher/_mode_ctr.py#L205) there is code checking for counter overflows. However, the number `0x60002` seems arbitrary and I was not able to determine why the specific number was chosen. The overflow check was added in d61f253c54f59422551760b39b88965b71af280b by @Legrandin . I'd like to understand this code, and I would appreciate any help.\r\n\r\n```python\r\nif result:\r\n    if result == 0x60002:\r\n        raise OverflowError(\"The counter has wrapped around in\"\r\n                            \" CTR mode\")\r\n    raise ValueError(\"Error %X while encrypting in CTR mode\" % result)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/412", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/412/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/412/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/412", "id": 611129828, "node_id": "MDU6SXNzdWU2MTExMjk4Mjg=", "number": 412, "title": "Not able to install pycryptodome in Mac OS X", "user": {"login": "iqramali", "id": 35267920, "node_id": "MDQ6VXNlcjM1MjY3OTIw", "avatar_url": "https://avatars0.githubusercontent.com/u/35267920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iqramali", "html_url": "https://github.com/iqramali", "followers_url": "https://api.github.com/users/iqramali/followers", "following_url": "https://api.github.com/users/iqramali/following{/other_user}", "gists_url": "https://api.github.com/users/iqramali/gists{/gist_id}", "starred_url": "https://api.github.com/users/iqramali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iqramali/subscriptions", "organizations_url": "https://api.github.com/users/iqramali/orgs", "repos_url": "https://api.github.com/users/iqramali/repos", "events_url": "https://api.github.com/users/iqramali/events{/privacy}", "received_events_url": "https://api.github.com/users/iqramali/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-02T07:52:52Z", "updated_at": "2020-05-02T16:42:41Z", "closed_at": "2020-05-02T16:42:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I installed `pycryptodome` in OS X and still python3 not able to find the module Crypto. Can someone tell me what package I need to install in order to use `pycryptodome` in OS X? Followed the instructions mentioned in this [pycryptodome page](https://pycryptodome.readthedocs.io/en/latest/src/installation.html#windows-from-sources-python-2-x-python-3-2) \r\n\r\n```pip list | grep crypto\r\n$pycryptodome          3.9.7\r\n$pycryptodomex         3.9.7\r\n```\r\nHere is the output from install\r\n\r\n```\r\n$pip install pycryptodome\r\n$Requirement already satisfied: pycryptodome in /usr/local/lib/python3.7/site-packages (3.9.7)\r\n```\r\n\r\n```\r\n$python3 -m Crypto.SelfTest\r\n$/usr/local/opt/python/bin/python3.7: Error while finding module specification for 'Crypto.SelfTest' (ModuleNotFoundError: No module named 'Crypto')\r\n```\r\n\r\nEDIT:\r\nI've added more details about my host environment.\r\n```\r\nDarwin xx-MacBook-Pro.local 19.0.0 Darwin Kernel Version 19.0.0: Wed Sep 25 20:18:50 PDT 2019; root:xnu-6153.11.26~2/RELEASE_X86_64 x86_64\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/411", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/411/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/411/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/411/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/411", "id": 611129332, "node_id": "MDU6SXNzdWU2MTExMjkzMzI=", "number": 411, "title": "Not able to install on Mac OS X pycryptodome ", "user": {"login": "iqali-hw", "id": 48913418, "node_id": "MDQ6VXNlcjQ4OTEzNDE4", "avatar_url": "https://avatars3.githubusercontent.com/u/48913418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iqali-hw", "html_url": "https://github.com/iqali-hw", "followers_url": "https://api.github.com/users/iqali-hw/followers", "following_url": "https://api.github.com/users/iqali-hw/following{/other_user}", "gists_url": "https://api.github.com/users/iqali-hw/gists{/gist_id}", "starred_url": "https://api.github.com/users/iqali-hw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iqali-hw/subscriptions", "organizations_url": "https://api.github.com/users/iqali-hw/orgs", "repos_url": "https://api.github.com/users/iqali-hw/repos", "events_url": "https://api.github.com/users/iqali-hw/events{/privacy}", "received_events_url": "https://api.github.com/users/iqali-hw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-02T07:49:14Z", "updated_at": "2020-05-02T07:50:03Z", "closed_at": "2020-05-02T07:49:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/409", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/409/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/409/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/409", "id": 607030779, "node_id": "MDU6SXNzdWU2MDcwMzA3Nzk=", "number": 409, "title": "importKey error with a specific public key", "user": {"login": "arashyousefi", "id": 13101165, "node_id": "MDQ6VXNlcjEzMTAxMTY1", "avatar_url": "https://avatars3.githubusercontent.com/u/13101165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arashyousefi", "html_url": "https://github.com/arashyousefi", "followers_url": "https://api.github.com/users/arashyousefi/followers", "following_url": "https://api.github.com/users/arashyousefi/following{/other_user}", "gists_url": "https://api.github.com/users/arashyousefi/gists{/gist_id}", "starred_url": "https://api.github.com/users/arashyousefi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arashyousefi/subscriptions", "organizations_url": "https://api.github.com/users/arashyousefi/orgs", "repos_url": "https://api.github.com/users/arashyousefi/repos", "events_url": "https://api.github.com/users/arashyousefi/events{/privacy}", "received_events_url": "https://api.github.com/users/arashyousefi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-26T14:51:04Z", "updated_at": "2020-04-26T17:34:51Z", "closed_at": "2020-04-26T17:29:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there\r\n\r\nI'm having trouble importing a specific public key. I've checked the key [here](https://8gwifi.org/PemParserFunctions.jsp) and it looked ok but I can't find why `ValueError: RSA key format is not supported` error is thrown.\r\n\r\nhere is the key:\r\n```\r\n-----BEGIN CERTIFICATE-----\r\nMIIE6DCCBI6gAwIBAgIQDfR8wIrrv/kGeuWLz1SwjjAKBggqhkjOPQQDAjBvMQsw\r\nCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28x\r\nGTAXBgNVBAoTEENsb3VkRmxhcmUsIEluYy4xIDAeBgNVBAMTF0Nsb3VkRmxhcmUg\r\nSW5jIEVDQyBDQS0yMB4XDTIwMDIxNDAwMDAwMFoXDTIwMTAwOTEyMDAwMFowbTEL\r\nMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1TYW4gRnJhbmNpc2Nv\r\nMRkwFwYDVQQKExBDbG91ZGZsYXJlLCBJbmMuMR4wHAYDVQQDExVzbmkuY2xvdWRm\r\nbGFyZXNzbC5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQrz1AvwdNPXYCm\r\n8a3snq4/nHE0GwyA/Ogr+L72UP8B2eEPEhIqfOnXqNBs5EhwqdbxMEtx3WrrDqnB\r\n4p3d+UXno4IDDDCCAwgwHwYDVR0jBBgwFoAUPnQtH89FdQR+P8Cihz5MQ4NRE8Yw\r\nHQYDVR0OBBYEFNo43wQROUsO4/7GvIs/zxDCWYk0MEAGA1UdEQQ5MDeCFXNuaS5j\r\nbG91ZGZsYXJlc3NsLmNvbYINa2F2ZW5lZ2FyLmNvbYIPKi5rYXZlbmVnYXIuY29t\r\nMA4GA1UdDwEB/wQEAwIHgDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIw\r\neQYDVR0fBHIwcDA2oDSgMoYwaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0Nsb3Vk\r\nRmxhcmVJbmNFQ0NDQTIuY3JsMDagNKAyhjBodHRwOi8vY3JsNC5kaWdpY2VydC5j\r\nb20vQ2xvdWRGbGFyZUluY0VDQ0NBMi5jcmwwTAYDVR0gBEUwQzA3BglghkgBhv1s\r\nAQEwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cuZGlnaWNlcnQuY29tL0NQUzAI\r\nBgZngQwBAgIwdgYIKwYBBQUHAQEEajBoMCQGCCsGAQUFBzABhhhodHRwOi8vb2Nz\r\ncC5kaWdpY2VydC5jb20wQAYIKwYBBQUHMAKGNGh0dHA6Ly9jYWNlcnRzLmRpZ2lj\r\nZXJ0LmNvbS9DbG91ZEZsYXJlSW5jRUNDQ0EtMi5jcnQwDAYDVR0TAQH/BAIwADCC\r\nAQQGCisGAQQB1nkCBAIEgfUEgfIA8AB3ALvZ37wfinG1k5Qjl6qSe0c4V5UKq1Lo\r\nGpCWZDaOHtGFAAABcEEbV+UAAAQDAEgwRgIhAN8Gp0GZeJ0DRMFg1hAIalzpFUQV\r\nZ9U8QOTGt8LOQQ5KAiEAvVqQh7KioxDc2NgzZdrVz60eudmAsI2TMoei1U0Oo20A\r\ndQDwlaRZ8gDRgkAQLS+TiI6tS/4dR+OZ4dA0prCoqo6ycwAAAXBBG1gWAAAEAwBG\r\nMEQCIDx3yFwWOHxweYrEyhFdOqfTXonKAgSMsu5TJezxqfopAiBraGHtOWC0U4Df\r\neBRlthr6roI8WdrKhoTZhtbUsARzDzAKBggqhkjOPQQDAgNIADBFAiEA1vHevIQc\r\niI2TFlCefc8KfOM9E5pwFM0BfVkmWt8Aj5ACIENc7E+GCaMjKd8sOsV5EE/q2mBs\r\n+c97Sk3hyGNSwVJr\r\n-----END CERTIFICATE-----\r\n```\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/406", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/406/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/406/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/406", "id": 602255304, "node_id": "MDU6SXNzdWU2MDIyNTUzMDQ=", "number": 406, "title": "Missing malloc.h", "user": {"login": "goodsireric", "id": 17260278, "node_id": "MDQ6VXNlcjE3MjYwMjc4", "avatar_url": "https://avatars3.githubusercontent.com/u/17260278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goodsireric", "html_url": "https://github.com/goodsireric", "followers_url": "https://api.github.com/users/goodsireric/followers", "following_url": "https://api.github.com/users/goodsireric/following{/other_user}", "gists_url": "https://api.github.com/users/goodsireric/gists{/gist_id}", "starred_url": "https://api.github.com/users/goodsireric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goodsireric/subscriptions", "organizations_url": "https://api.github.com/users/goodsireric/orgs", "repos_url": "https://api.github.com/users/goodsireric/repos", "events_url": "https://api.github.com/users/goodsireric/events{/privacy}", "received_events_url": "https://api.github.com/users/goodsireric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-17T21:56:35Z", "updated_at": "2020-04-17T23:36:03Z", "closed_at": "2020-04-17T23:36:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there dependencies that are needed which are missing from my system?\r\nUsing python 3.8, so this issue may be different from issue #45 \r\n\r\n`    creating build\\temp.win-amd64-3.8\\Release\\src\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.24.28314\\bin\\HostX86\\x64\\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -DLTC_NO_ASM -Isrc/ \"-Ic:\\program files (x86)\\python38\\include\" \"-Ic:\\program files (x86)\\python38\\include\" \"-IC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.24.28314\\include\" \"-IC:\\Program Files (x86)\\Windows Kits\\8.1\\include\\\\shared\" \"-IC:\\Program Files (x86)\\Windows Kits\\8.1\\include\\\\um\" \"-IC:\\Program Files (x86)\\Windows Kits\\8.1\\include\\\\winrt\" \"-IC:\\Program Files (x86)\\Windows Kits\\8.1\\include\\\\cppwinrt\" /Tcsrc/MD2.c /Fobuild\\temp.win-amd64-3.8\\Release\\src/MD2.obj\r\n    MD2.c\r\n    C:\\Users\\Eric\\AppData\\Local\\Temp\\pip-install-q85zxpux\\pycryptodome\\src\\pycrypto_common.h(43): fatal error C1083: Cannot open include file: 'malloc.h': No such file or directory\r\n    error: command 'C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.24.28314\\\\bin\\\\HostX86\\\\x64\\\\cl.exe' failed with exit status 2\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: 'c:\\program files (x86)\\python38\\python3.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'C:\\\\Users\\\\Eric\\\\AppData\\\\Local\\\\Temp\\\\pip-install-q85zxpux\\\\pycryptodome\\\\setup.py'\"'\"'; __file__='\"'\"'C:\\\\Users\\\\Eric\\\\AppData\\\\Local\\\\Temp\\\\pip-install-q85zxpux\\\\pycryptodome\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record 'C:\\Users\\Eric\\AppData\\Local\\Temp\\pip-record-ls0o_552\\install-record.txt' --single-version-externally-managed --user --prefix= --compile --install-headers 'C:\\Users\\Eric\\AppData\\Roaming\\Python\\Python38\\Include\\pycryptodome' Check the logs for full command output.`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/405", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/405/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/405/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/405", "id": 599682747, "node_id": "MDU6SXNzdWU1OTk2ODI3NDc=", "number": 405, "title": "Wrong code comment for ASN.1 ECDSA signature encoding (?)", "user": {"login": "sebastien-rosset", "id": 16657278, "node_id": "MDQ6VXNlcjE2NjU3Mjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/16657278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebastien-rosset", "html_url": "https://github.com/sebastien-rosset", "followers_url": "https://api.github.com/users/sebastien-rosset/followers", "following_url": "https://api.github.com/users/sebastien-rosset/following{/other_user}", "gists_url": "https://api.github.com/users/sebastien-rosset/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebastien-rosset/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebastien-rosset/subscriptions", "organizations_url": "https://api.github.com/users/sebastien-rosset/orgs", "repos_url": "https://api.github.com/users/sebastien-rosset/repos", "events_url": "https://api.github.com/users/sebastien-rosset/events{/privacy}", "received_events_url": "https://api.github.com/users/sebastien-rosset/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-14T15:59:57Z", "updated_at": "2020-04-18T14:35:41Z", "closed_at": "2020-04-18T14:35:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [code comments in DSS.py#L111](https://github.com/Legrandin/pycryptodome/blob/649d981b84eeb1c1a7edb96ba796aad079a0de31/lib/Crypto/Signature/DSS.py#L111) state the ASN.1 encoding of the (r, s) signature parameters are a sequence of OCTET STRING, but I think it is actually a sequence of INTEGER.\r\n\r\nRFC 3279 states ECDSA signatures should be DER-encoded as shown below.\r\n```\r\nEcdsa-Sig-Value  ::=  SEQUENCE  {\r\n           r     INTEGER,\r\n           s     INTEGER \r\n}\r\n```\r\nAlso, while the default is raw binary, it would be worth mentioning that 'der' encoding is the encoding specified in RFC 3279 section 2.2.3 ECDSA Signature Algorithm, RFC 5480.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/404", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/404/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/404/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/404", "id": 595297900, "node_id": "MDU6SXNzdWU1OTUyOTc5MDA=", "number": 404, "title": "ValueError: RSA key format is not supported", "user": {"login": "BosnaZmaj", "id": 10079461, "node_id": "MDQ6VXNlcjEwMDc5NDYx", "avatar_url": "https://avatars3.githubusercontent.com/u/10079461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BosnaZmaj", "html_url": "https://github.com/BosnaZmaj", "followers_url": "https://api.github.com/users/BosnaZmaj/followers", "following_url": "https://api.github.com/users/BosnaZmaj/following{/other_user}", "gists_url": "https://api.github.com/users/BosnaZmaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/BosnaZmaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BosnaZmaj/subscriptions", "organizations_url": "https://api.github.com/users/BosnaZmaj/orgs", "repos_url": "https://api.github.com/users/BosnaZmaj/repos", "events_url": "https://api.github.com/users/BosnaZmaj/events{/privacy}", "received_events_url": "https://api.github.com/users/BosnaZmaj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-06T17:35:36Z", "updated_at": "2020-04-10T19:40:18Z", "closed_at": "2020-04-10T19:40:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to import an key \"public.pem\" with key= RSA.importKey(f.read()) and get this error\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/401", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/401/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/401/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/401", "id": 593446675, "node_id": "MDU6SXNzdWU1OTM0NDY2NzU=", "number": 401, "title": "Byte string produced by AES cipher isn't usable", "user": {"login": "0100101001010000", "id": 7516045, "node_id": "MDQ6VXNlcjc1MTYwNDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7516045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0100101001010000", "html_url": "https://github.com/0100101001010000", "followers_url": "https://api.github.com/users/0100101001010000/followers", "following_url": "https://api.github.com/users/0100101001010000/following{/other_user}", "gists_url": "https://api.github.com/users/0100101001010000/gists{/gist_id}", "starred_url": "https://api.github.com/users/0100101001010000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0100101001010000/subscriptions", "organizations_url": "https://api.github.com/users/0100101001010000/orgs", "repos_url": "https://api.github.com/users/0100101001010000/repos", "events_url": "https://api.github.com/users/0100101001010000/events{/privacy}", "received_events_url": "https://api.github.com/users/0100101001010000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-03T15:03:45Z", "updated_at": "2020-04-03T20:01:58Z", "closed_at": "2020-04-03T20:01:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm trying to use the encrypted data that comes out of the cipher encryption and pass it to a REST service, unfortunately that data isn't readable and returns the following decode error:\r\n\r\n    UnicodeDecodeError: 'utf-8' codec can't decode byte 0x99 in position 0: invalid start byte\r\n\r\nFor the sake of simplicity I'm using the [Encrypt Data with RSA](https://pycryptodome.readthedocs.io/en/latest/src/examples.html#encrypt-data-with-rsa) example from the Pycryptodome website, and just after the *Encrypt the data with the AES session key* step, I then try to pass it to my REST service:\r\n\r\nOption 1:\r\n```python\r\n    [...]\r\n    cipher_aes = AES.new(session_key, AES.MODE_EAX)\r\n    ciphertext, tag = cipher_aes.encrypt_and_digest(document)\r\n    file_out = open(\"test_encrypted_document_upload.bin\", \"wb\")\r\n    [file_out.write(x) for x in (enc_session_key, cipher_aes.nonce, tag, ciphertext)]\r\n\r\n   key = str(uuid.uuid4())\r\n   document = FileStorage(open('./test_encrypted_document_upload.bin'))\r\n\r\n    doc_creation = app.test_client().post('/create_encrypted_document', data=dict(\r\n        key=key,\r\n        document=document\r\n    ))\r\n    [...]\r\n```\r\n\r\nOption 2:\r\n```python\r\n    [...]\r\n    cipher_aes = AES.new(session_key, AES.MODE_EAX)\r\n    ciphertext, tag = cipher_aes.encrypt_and_digest(document)\r\n    encrypted_string = enc_session_key\r\n    encrypted_string += cipher_aes.nonce\r\n    encrypted_string += tag\r\n    encrypted_string += ciphertext\r\n\r\n    key = str(uuid.uuid4())\r\n    doc_creation = app.test_client().post('/create_document', json={\r\n        'key': key,\r\n        'document': encrypted_string\r\n    })\r\n    [...]\r\n```\r\n\r\nIn both cases I get the same error, however if I pass in an empty byte string then that accepts it without an issue, which pushed me to believe that it was an issue with what the cipher produced. \r\nSo copied the string that was produced and tried playing around with it in the python terminal and as soon as I try to touch it I get that error.\r\n\r\nIs this expected behavior?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/399", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/399/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/399/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/399", "id": 591804955, "node_id": "MDU6SXNzdWU1OTE4MDQ5NTU=", "number": 399, "title": "CTR encryption with pre-defined nonce and counter", "user": {"login": "JohnDingeling", "id": 26843764, "node_id": "MDQ6VXNlcjI2ODQzNzY0", "avatar_url": "https://avatars0.githubusercontent.com/u/26843764?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnDingeling", "html_url": "https://github.com/JohnDingeling", "followers_url": "https://api.github.com/users/JohnDingeling/followers", "following_url": "https://api.github.com/users/JohnDingeling/following{/other_user}", "gists_url": "https://api.github.com/users/JohnDingeling/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnDingeling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnDingeling/subscriptions", "organizations_url": "https://api.github.com/users/JohnDingeling/orgs", "repos_url": "https://api.github.com/users/JohnDingeling/repos", "events_url": "https://api.github.com/users/JohnDingeling/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnDingeling/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-04-01T10:25:42Z", "updated_at": "2020-04-07T15:22:58Z", "closed_at": "2020-04-07T15:22:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "CTR encryption with pre-defined nonce and counter\r\n\r\nI have to write a python script, which shall reproduce a AES CTR encryption from an embedded device i.e. the python script shall produce the exact same cipher text for the same given plain text, same key and initialization vector (IV, consisting of nonce and counter). However, I am not able to achieve this with the pycryptodome library and start asking myself, whether this particular use case can be done at all with pycryptodome. I would really appreciate if you could help me by either confirming that this cannot be done with pycryptodome or (even better), tell how ot use the pycryptodome API in a way, that my use case works out.\r\n\r\nI have certain restrictions regarding the IV which are coming from the embedded device (block size is 128 bit/16 bytes, thus key and IV have 128 bit length):\r\n- the nonce part of the IV has to consist of 12 byte, 8 bytes random number + 4 bytes fixed zeros, e.g. 0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x00,0x00,0x00\r\n- the counter part of the IV has to start with following four bytes: 0x00,0x00,0x00,0x09\r\nSo the IV as it is used on the embedded device looks like this as a byte stream: 0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09.\r\nThe embedded device uses little-endian storage of bytes in memory. What I can monitor on the embedded device is, that the IV, i.e. the counter part of it, is incremented after each encrypted AES block (=16 bytes) by 1, so the IV evolves for each block as follows:\r\n08070605040302010000000001000009\r\n08070605040302010000000002000009\r\n08070605040302010000000003000009\r\n08070605040302010000000004000009\r\n08070605040302010000000005000009\r\n08070605040302010000000006000009\r\n0807060504030201000000000700000\r\n...\r\nFor simplicity while testing  I set the AES key just to 16 bytes of zeros (0x00).\r\nI did set up the pycryptodome objects as follows:\r\n\r\naes_nonce = bytearray([0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x00,0x00,0x00])\r\nmyIv = Crypto.Util.Counter.new(32, prefix=aes_nonce, little_endian=True, initial_value=0x09000000) #12 bytes of nonce + 4 bytes of counter\r\n\r\naes_key = bytearray([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]) #16 bytes of 0x00 just for testing purposes\r\nplaintext = bytearray([0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10])\r\nencryptor = Crypto.Cipher.AES.new(aesKeyWordSwapped, AES.MODE_CTR, counter=myIv1)\r\ncipher_text = encryptor.encrypt(plaintext)\r\n\r\nThe problem though is, that I always get a different cipher text on the embedded device and in the python script for the same input, even in my tests with only one 16 bytes block of given input plain text. I tried all sorts of endianess variations for the input parameters of the Crypto.Util.Counter object but it wouldn' help. It is quite hard to debug as there is no way to see how the nonce and counter part of the IV are put together and how exactly the counter is incremented internally in the pycryptodome library.\r\n\r\nWith the plain text, IV and key set up as defined above I get following cipher texts:\r\nEmbedded device:\t017f2178f8381c08d576d89d9061f96e\r\nPython script:\t\t0a7a8dd96086e5d5ce46aba9db526703\r\n\t\t\t\t\t\r\nAny hints or help would be very much appreciated!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/396", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/396/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/396/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/396/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/396", "id": 587852303, "node_id": "MDU6SXNzdWU1ODc4NTIzMDM=", "number": 396, "title": "Little mistake on counter_be.png", "user": {"login": "JohnDingeling", "id": 26843764, "node_id": "MDQ6VXNlcjI2ODQzNzY0", "avatar_url": "https://avatars0.githubusercontent.com/u/26843764?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnDingeling", "html_url": "https://github.com/JohnDingeling", "followers_url": "https://api.github.com/users/JohnDingeling/followers", "following_url": "https://api.github.com/users/JohnDingeling/following{/other_user}", "gists_url": "https://api.github.com/users/JohnDingeling/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnDingeling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnDingeling/subscriptions", "organizations_url": "https://api.github.com/users/JohnDingeling/orgs", "repos_url": "https://api.github.com/users/JohnDingeling/repos", "events_url": "https://api.github.com/users/JohnDingeling/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnDingeling/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-25T17:08:08Z", "updated_at": "2020-04-18T14:50:49Z", "closed_at": "2020-04-18T14:50:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI think I found a little mistake on https://github.com/Legrandin/pycryptodome/blob/master/Doc/src/util/counter_be.png:\r\n\r\nThe green counter block on this figure is not incremented in the blocks from left to write. I think it should show an incremented counter value in big endian byte order (compare https://github.com/Legrandin/pycryptodome/blob/master/Doc/src/util/counter_le.png)\r\n\r\nBest regards", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/395", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/395/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/395/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/395/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/395", "id": 587628713, "node_id": "MDU6SXNzdWU1ODc2Mjg3MTM=", "number": 395, "title": "Hello, when I signed with pycryptodome 3.9.7, I also checked the success when I made a mistake", "user": {"login": "YXinAndy", "id": 47964538, "node_id": "MDQ6VXNlcjQ3OTY0NTM4", "avatar_url": "https://avatars2.githubusercontent.com/u/47964538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YXinAndy", "html_url": "https://github.com/YXinAndy", "followers_url": "https://api.github.com/users/YXinAndy/followers", "following_url": "https://api.github.com/users/YXinAndy/following{/other_user}", "gists_url": "https://api.github.com/users/YXinAndy/gists{/gist_id}", "starred_url": "https://api.github.com/users/YXinAndy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YXinAndy/subscriptions", "organizations_url": "https://api.github.com/users/YXinAndy/orgs", "repos_url": "https://api.github.com/users/YXinAndy/repos", "events_url": "https://api.github.com/users/YXinAndy/events{/privacy}", "received_events_url": "https://api.github.com/users/YXinAndy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-25T11:27:34Z", "updated_at": "2020-03-27T13:19:55Z", "closed_at": "2020-03-26T05:53:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "from Crypto.PublicKey import RSA\r\nfrom Crypto.Signature import PKCS1_v1_5\r\nfrom Crypto.Hash import SHA256, MD5\r\nimport base64\r\n\r\n\r\ndef RSA_sign(data):\r\n    privateKey = '''MIIEowIBAAKCAQEA08uOAJPiSyGK2kgWhgapEdPMXV1NiLDCZVtoNRsRygfiIh4Z7pDnJsY31K/ZPz1793Wi8wXJcwN4YK61ES6a1IBZ+/DT0ipXwpPyjrz1lSkEBC8j9LmayRT3HXvfZyV7Lgb6n3gc+MW+SZ8RAdvEnrSySl/nnjl4uOY0yWEhYQXHTqjPJKQ4D6v2N0tj6eIPYR78TFlrNx1oWN5XYlgo+ttAyWgQFe4oTcwRW57/oP2IfSBQwMq7e2E+/zLLr1GyETG22nzfrabpwT7YwFtIdp5d+8pcxur7EsO7CwRbjZcL6n4oblaXe4iEj2HFeweR7hZBxkHd5u/mnSce6FP3TQIDAQABAoIBAAVzrPEY3W9fqqpZxrKmgz2hPRZ+K1vEaQyg4LrVOoz/zPNh4PsCIeEeoxtHd4koNQO2tH4a/QeH5FZgyOprT7L+ptJUba9wRZgNpOXFuXCggKj26a8IBBL/BiltIeAO1+/kYBkwx1YkCPTuMkrg9Fu9fQVrGJQ7GH9x9ZPley17I5P4cuMPu1HXUzLk23z1lMxYU3FpwwUNUJw+XuWYCyo/GWdimWp9cOuiJWa9gfZAhQVXkOsk1DTuLxL0vcu+xVfmqijLD69e41rmGjkbQVsgAfd8lBHcKm2u4JmYuM29OlUAAnfK+7zsJF7hqqgch868Eb2AmYDHud4QvIzDWiECgYEA+rgfY6nB46RZNhNFgq4BVJzP+f/clYeCe7NPx22y5ceqn5wt3030EfmW9LUJ8t2vmAzyQ/h2vAZ/xgeRGRN8AFectzt2N9imx5zVaextLOGwZ03VxvlH5vesfj2wvaqxfUB9hsM/aR0Jld+b7wCQeJFPawYO8zV/o8ryuZcZ2RUCgYEA2EGNsMBxXvRn/UMfd6UHdlbhBfr3r3k6dqc6n74tRBEBo/yD+HgG7G9cQf+FUC0ADPzp4A+JXDYmNsieF+cq9qsqKIYbEa/jCgvpL9IJWjI82+WQf5TY59FyPmY9jW1wPqhu4bx5IVVB4osLQcxhkCQxcjTXkDF6yP+jOw4rQ1kCgYALambDeu9BFjKZq7b2hEW7PIibsXKxvEHMsBVp1yzWGYlDSzErgbkjOGIPMk8Jp95e5fgB8EY3uXQH6EBLDAARY+vWy/ZOBKdTX2i4MfOmn4AQtBKPxLnpYk2QUe7CNAtw0Ibmo+03NANDt7K55ySs2LDtBpGXsU/mfU8f9ClRIQKBgE7GalfFckbVnv/JsK/DpNk9wpCMICeCcIKCXj+MZi7SRxe2R1h+WH9N/XxpGOXgzpDsnEErR60YaIkyQSyR37ulFCFY4Ilr2bdyKUprJ0781+B+WkmvLegcCpKiaa+X+vhIIMQIBNPYm7xrS/l2+t8n3/8rMo7rB0Aqpwo/GhFZAoGBANR6PphQzV/jDgXy5FGOxQoXKBSHi8Cni0lHE10EjYW0xO+FQkQWf5jLXVsScsrzbuB3s2rcQ2XOw7qI7MtC4bs7aBTapnINa2lgj9MmFZB2uo5FmGFZ5gr17/do8S9h5CCgxX+9OXpGuNrfiiuo5Z7jF9bp+l5Z8XK1VR9leAvF'''\r\n\r\n    private_keyBytes = base64.b64decode(privateKey)\r\n    priKey = RSA.importKey(private_keyBytes)\r\n    signer = PKCS1_v1_5.new(priKey)\r\n    hash_obj = SHA256.new(data.encode('utf-8'))\r\n    signature = base64.b64encode(signer.sign(hash_obj))\r\n    return signature\r\n\r\n\r\ndef verify_sign(signature, data):\r\n    print(signature)\r\n    publicKey = \"\"\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA08uOAJPiSyGK2kgWhgapEdPMXV1NiLDCZVtoNRsRygfiIh4Z7pDnJsY31K/ZPz1793Wi8wXJcwN4YK61ES6a1IBZ+/DT0ipXwpPyjrz1lSkEBC8j9LmayRT3HXvfZyV7Lgb6n3gc+MW+SZ8RAdvEnrSySl/nnjl4uOY0yWEhYQXHTqjPJKQ4D6v2N0tj6eIPYR78TFlrNx1oWN5XYlgo+ttAyWgQFe4oTcwRW57/oP2IfSBQwMq7e2E+/zLLr1GyETG22nzfrabpwT7YwFtIdp5d+8pcxur7EsO7CwRbjZcL6n4oblaXe4iEj2HFeweR7hZBxkHd5u/mnSce6FP3TQIDAQAB\"\"\"\r\n    public_keyBytes = base64.b64decode(publicKey)\r\n    pubKey = RSA.importKey(public_keyBytes)\r\n    verifier = PKCS1_v1_5.new(pubKey)\r\n    h = SHA256.new(data.encode('utf-8'))\r\n    return verifier.verify(h, base64.b64decode(signature))\r\n\r\n\r\nsign = RSA_sign('alipay_root_cert_sn=6bc29aa3b4d406c43483ffea81e08d22&app_cert_sn=50fa7bc5dc305a4fbdbe166689ddc827&app_id=2014072300007148&biz_content={\"button\":[{\"actionParam\":\"ZFB_HFCZ\",\"actionType\":\"out\",\"name\":\"\u8bdd\u8d39\u5145\u503c\"},{\"name\":\"\u67e5\u8be2\",\"subButton\":[{\"actionParam\":\"ZFB_YECX\",\"actionType\":\"out\",\"name\":\"\u4f59\u989d\u67e5\u8be2\"},{\"actionParam\":\"ZFB_LLCX\",\"actionType\":\"out\",\"name\":\"\u6d41\u91cf\u67e5\u8be2\"},{\"actionParam\":\"ZFB_HFCX\",\"actionType\":\"out\",\"name\":\"\u8bdd\u8d39\u67e5\u8be2\"}]},{\"actionParam\":\"http://m.alipay.com\",\"actionType\":\"link\",\"name\":\"\u6700\u65b0\u4f18\u60e0\"}]}&charset=GBK&method=alipay.mobile.public.menu.add&sign_type=RSA2')\r\n\r\nprint(verify_sign(sign.decode() + 'rtesggds', 'alipay_root_cert_sn=6bc29aa3b4d406c43483ffea81e08d22&app_cert_sn=50fa7bc5dc305a4fbdbe166689ddc827&app_id=2014072300007148&biz_content={\"button\":[{\"actionParam\":\"ZFB_HFCZ\",\"actionType\":\"out\",\"name\":\"\u8bdd\u8d39\u5145\u503c\"},{\"name\":\"\u67e5\u8be2\",\"subButton\":[{\"actionParam\":\"ZFB_YECX\",\"actionType\":\"out\",\"name\":\"\u4f59\u989d\u67e5\u8be2\"},{\"actionParam\":\"ZFB_LLCX\",\"actionType\":\"out\",\"name\":\"\u6d41\u91cf\u67e5\u8be2\"},{\"actionParam\":\"ZFB_HFCX\",\"actionType\":\"out\",\"name\":\"\u8bdd\u8d39\u67e5\u8be2\"}]},{\"actionParam\":\"http://m.alipay.com\",\"actionType\":\"link\",\"name\":\"\u6700\u65b0\u4f18\u60e0\"}]}&charset=GBK&method=alipay.mobile.public.menu.add&sign_type=RSA2'))\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/394", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/394/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/394/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/394/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/394", "id": 586117992, "node_id": "MDU6SXNzdWU1ODYxMTc5OTI=", "number": 394, "title": "Illegal instruction in Math/_IntegerGMP", "user": {"login": "mc3", "id": 340116, "node_id": "MDQ6VXNlcjM0MDExNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/340116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mc3", "html_url": "https://github.com/mc3", "followers_url": "https://api.github.com/users/mc3/followers", "following_url": "https://api.github.com/users/mc3/following{/other_user}", "gists_url": "https://api.github.com/users/mc3/gists{/gist_id}", "starred_url": "https://api.github.com/users/mc3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mc3/subscriptions", "organizations_url": "https://api.github.com/users/mc3/orgs", "repos_url": "https://api.github.com/users/mc3/repos", "events_url": "https://api.github.com/users/mc3/events{/privacy}", "received_events_url": "https://api.github.com/users/mc3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2020-03-23T10:56:27Z", "updated_at": "2020-05-04T11:01:34Z", "closed_at": "2020-04-03T14:15:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "In initialization of dnspython, pycryptodome  3.9.7 gets a signal 4 in Math/_IntegerGMO with gmp-6.2.0.\r\nReverting to gmp-6.1.2 fixes the problem.\r\nPlatform: FreeBSD 12.1-RELEASE-p3\r\nVersions:\r\npycryptodome  3.9.7\r\ndnspython    1.16.0\r\npython37-3.7.6\r\ngmp-6.2.0\r\n\r\nbacktrace attached\r\n[3201.txt](https://github.com/Legrandin/pycryptodome/files/4368775/3201.txt)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/393", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/393/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/393/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/393", "id": 585901166, "node_id": "MDU6SXNzdWU1ODU5MDExNjY=", "number": 393, "title": "AES Incorrect Password Error Not Raising", "user": {"login": "KeerthiNaathan", "id": 55060041, "node_id": "MDQ6VXNlcjU1MDYwMDQx", "avatar_url": "https://avatars2.githubusercontent.com/u/55060041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KeerthiNaathan", "html_url": "https://github.com/KeerthiNaathan", "followers_url": "https://api.github.com/users/KeerthiNaathan/followers", "following_url": "https://api.github.com/users/KeerthiNaathan/following{/other_user}", "gists_url": "https://api.github.com/users/KeerthiNaathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/KeerthiNaathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KeerthiNaathan/subscriptions", "organizations_url": "https://api.github.com/users/KeerthiNaathan/orgs", "repos_url": "https://api.github.com/users/KeerthiNaathan/repos", "events_url": "https://api.github.com/users/KeerthiNaathan/events{/privacy}", "received_events_url": "https://api.github.com/users/KeerthiNaathan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-23T03:26:33Z", "updated_at": "2020-03-25T23:28:09Z", "closed_at": "2020-03-25T23:28:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "in AES Mode  - CFB, OFB, CTR  when I enter the password it is not raising the error, instead, it gives random data.\r\n\r\nI check the document, examples and tried , it not raising errors\r\n\r\nSource-code:\r\n`class CTR:\r\n    def encrypt(self, data, password):\r\n        cipher = AES.new(password, AES.MODE_CTR)\r\n        e_data = cipher.encrypt(data)\r\n        return {\r\n            \"encrypted_data\": e_data,\r\n            \"nonce\": cipher.nonce,\r\n        }\r\n\r\n    def decrypt(self, data, password):\r\n        try:\r\n            cipher = AES.new(password, AES.MODE_CTR, nonce=data['nonce'])\r\n            ue_data = cipher.decrypt(data['encrypted_data'])\r\n            return ue_data\r\n        except (ValueError, KeyError) as e:\r\n            print(e)\r\n            return False\r\n`\r\nResults: \r\n{'encryption': {'encrypted_data': b'\\xbc\\xca~\\xe0\\x81\\x85\\xf9R\\xc7\\xfcA?', 'nonce': b'[\\x1c\\x82\\xc8J\\xc8dn'}, 'mode': 'CTR'}\r\noutput: b'\\xf8\\x94\\x15,0q\\xf0\\x1e\\xb1A\\x0c\\x1a'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/392", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/392/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/392/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/392/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/392", "id": 583414439, "node_id": "MDU6SXNzdWU1ODM0MTQ0Mzk=", "number": 392, "title": "RSA Invalid Condition", "user": {"login": "RapedTrap", "id": 48660643, "node_id": "MDQ6VXNlcjQ4NjYwNjQz", "avatar_url": "https://avatars3.githubusercontent.com/u/48660643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RapedTrap", "html_url": "https://github.com/RapedTrap", "followers_url": "https://api.github.com/users/RapedTrap/followers", "following_url": "https://api.github.com/users/RapedTrap/following{/other_user}", "gists_url": "https://api.github.com/users/RapedTrap/gists{/gist_id}", "starred_url": "https://api.github.com/users/RapedTrap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RapedTrap/subscriptions", "organizations_url": "https://api.github.com/users/RapedTrap/orgs", "repos_url": "https://api.github.com/users/RapedTrap/repos", "events_url": "https://api.github.com/users/RapedTrap/events{/privacy}", "received_events_url": "https://api.github.com/users/RapedTrap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-18T02:17:02Z", "updated_at": "2020-04-17T07:56:14Z", "closed_at": "2020-03-27T18:31:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://stackoverflow.com/questions/60460193/how-to-solve-problem-with-invalid-rsa-condition", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/389", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/389/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/389/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/389", "id": 574731537, "node_id": "MDU6SXNzdWU1NzQ3MzE1Mzc=", "number": 389, "title": "See this error ", "user": {"login": "pawarashish564", "id": 29516182, "node_id": "MDQ6VXNlcjI5NTE2MTgy", "avatar_url": "https://avatars3.githubusercontent.com/u/29516182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawarashish564", "html_url": "https://github.com/pawarashish564", "followers_url": "https://api.github.com/users/pawarashish564/followers", "following_url": "https://api.github.com/users/pawarashish564/following{/other_user}", "gists_url": "https://api.github.com/users/pawarashish564/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawarashish564/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawarashish564/subscriptions", "organizations_url": "https://api.github.com/users/pawarashish564/orgs", "repos_url": "https://api.github.com/users/pawarashish564/repos", "events_url": "https://api.github.com/users/pawarashish564/events{/privacy}", "received_events_url": "https://api.github.com/users/pawarashish564/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-03T15:03:56Z", "updated_at": "2020-06-22T21:09:09Z", "closed_at": "2020-06-22T21:09:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://stackoverflow.com/questions/60139976/right-way-to-decrypt-rsa-session-key @nicois Please help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/388", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/388/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/388/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/388", "id": 571711288, "node_id": "MDU6SXNzdWU1NzE3MTEyODg=", "number": 388, "title": "RSA Signature Verification - Interoperability with Node.js Crypto", "user": {"login": "aaclayton", "id": 2468703, "node_id": "MDQ6VXNlcjI0Njg3MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2468703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaclayton", "html_url": "https://github.com/aaclayton", "followers_url": "https://api.github.com/users/aaclayton/followers", "following_url": "https://api.github.com/users/aaclayton/following{/other_user}", "gists_url": "https://api.github.com/users/aaclayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaclayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaclayton/subscriptions", "organizations_url": "https://api.github.com/users/aaclayton/orgs", "repos_url": "https://api.github.com/users/aaclayton/repos", "events_url": "https://api.github.com/users/aaclayton/events{/privacy}", "received_events_url": "https://api.github.com/users/aaclayton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-26T22:55:21Z", "updated_at": "2020-02-27T19:05:10Z", "closed_at": "2020-02-27T19:05:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Situation:** I'm working on a project which needs RSA signature verification between Python and Node.js services. I'm hoping to use `pycryptodomex` in Python 3.8 and the built-in `crypto` package in Node.js `12.16.x`to sign and verify using an RSA keypair. In general, the Python process is responsible for signing while the Node.js process is responsible for verifying.\r\n\r\n**Problem:** I am able to sign in Python and verify in Python. I am also able to sign in Node.js and verify in Node.js - but I am not able to sign in Python and verify in Node.js.\r\n\r\n**Disclaimer:** This issue has the flavor of a support request - which I apologize for. I ran into trouble implementing what I expected to be fairly standard behavior across both platforms. If you're able to help me understand how to achieve interoperability between these libraries I would be happy to translate my learning into a documentation PR which shares this knowledge with other pycryptodome users (if you feel that would be valuable).\r\n\r\n## Setup\r\n\r\nAssume that both Node and Python services share the following globals: `PUBLIC_KEY` and `PRIVATE_KEY` in ascii string format which contain the keypair.\r\n\r\n## Python Implementation\r\n\r\nSee: https://www.pycryptodome.org/en/latest/src/signature/signature.html\r\n\r\n```python\r\nimport base64\r\nfrom Cryptodome.PublicKey import RSA\r\nfrom Cryptodome.Signature import pss\r\nfrom Cryptodome.Hash import SHA256\r\n\r\ndef sign_python(message):\r\n    \"\"\" Sign a message using a private key and return an string with the signature.\r\n    \"\"\"\r\n    private_key = RSA.import_key(PRIVATE_KEY)\r\n    signer = pss.new(private_key)\r\n    hashed = SHA256.new(message.encode())\r\n    signature = signer.sign(hashed)\r\n    sig_str = base64.b64encode(signature).decode(\"ascii\")\r\n    return sig_str\r\n    \r\ndef verify_python(message, sig_str):\r\n    \"\"\" Verify a message using a public key and return whether the signature is valid.\r\n    \"\"\"\r\n    public_key = RSA.import_key(PUBLIC_KEY)\r\n    verifier = pss.new(public_key)\r\n    hashed = SHA256.new(message.encode())\r\n    signature = base64.b64decode(sig_str)\r\n    verifier.verify(hashed, signature)\r\n    return True\r\n\r\n# Example usage\r\nmessage = \"Some test message\"\r\nsig_str = sign_python(message)\r\nverify_python(message, sig_str) // True\r\n```\r\n\r\n## Node.js Implementation\r\n\r\nSee: https://nodejs.org/api/crypto.html#crypto_class_sign and https://nodejs.org/api/crypto.html#crypto_class_verify\r\n\r\n```js\r\nconst crypto = require(\"crypto\");\r\n\r\n/**\r\n * Sign a message using a private key and return an string with the signature.\r\n */\r\nfunction signJS(message) {\r\n    const privateKey = crypto.createPrivateKey(PRIVATE_KEY);\r\n    const signer = crypto.createSign(\"SHA256\")\r\n    signer.update(message);\r\n    signer.end();\r\n    const signature = signer.sign(privateKey, \"base64\");\r\n    return signature;  \r\n}\r\n\r\n/**\r\n * Verify a message using a public key and return whether the signature is valid.\r\n */\r\nfunction verifyJS(message, signature) {\r\n    const publicKey = crypto.createPublicKey(PUBLIC_KEY);\r\n    const verifier = crypto.createVerify(\"SHA256\");\r\n    verifier.write(message);\r\n    verifier.end();\r\n    const valid = verifier.verify(publicKey, signature, \"base64\");\r\n    return valid;\r\n}\r\n\r\n// Example Usage\r\nconst message = \"Some test message\";\r\nconst sig_str = signJS(message);\r\nverifyJS(message, sig_str); // true\r\n```\r\n\r\n## Interoperability\r\n\r\nI'm not a cryptography expert - but I had expected these approaches to be interoperable - allowing me to sign content in one service and verify it in the other. I am, however, finding this not to be the case. Signatures generated in Python are not verified in Node.js (and vice-versa).\r\n\r\nI'm confident this gap is due to me missing a configuration or parameter which does not share the same default value across libraries. I have some theories - but was not able to find an approach which worked through trial-and-error:\r\n\r\n**Node.js**\r\n\r\n* `sign.sign(privateKey)` supports configuring the `padding` parameter where the default behavior is  `crypto.constants.RSA_PKCS1_PADDING`. I suspect this may be the wrong choice or incompatible with the default behavior in Python. (https://nodejs.org/api/crypto.html#crypto_class_sign)\r\n* The node signature also supports specifying a `saltLength` where the default behavior is to set `crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN` but another option is `crypto.constants.RSA_PSS_SALTLEN_DIGEST` which sets the salt length to the digest size.\r\n\r\n**Pycryptodome**\r\n\r\n* `Crypto.Signature.pss.new(rsa_key, **kwargs)` accepts an optional argument for `salt_bytes` where the default is `hlen` which is the size of the digest. This seems to suggest that I should use `RSA_PSS_SALTLEN_DIGEST` on the Node.js side. Is that correct?\r\n* I don't find anywhere in the `pss` documentation that describes configuration for the `padding` parameter. Is there a default value or configuration of that which would align behavior with Node.js?\r\n\r\n\r\nThank you very much for the helpful library and for any advice that you may have.\r\nAndrew", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/387", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/387/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/387/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/387/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/387", "id": 570876837, "node_id": "MDU6SXNzdWU1NzA4NzY4Mzc=", "number": 387, "title": "How to encrypt string with armored GPG key?", "user": {"login": "alex-yobota", "id": 55692845, "node_id": "MDQ6VXNlcjU1NjkyODQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/55692845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-yobota", "html_url": "https://github.com/alex-yobota", "followers_url": "https://api.github.com/users/alex-yobota/followers", "following_url": "https://api.github.com/users/alex-yobota/following{/other_user}", "gists_url": "https://api.github.com/users/alex-yobota/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-yobota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-yobota/subscriptions", "organizations_url": "https://api.github.com/users/alex-yobota/orgs", "repos_url": "https://api.github.com/users/alex-yobota/repos", "events_url": "https://api.github.com/users/alex-yobota/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-yobota/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-25T22:25:59Z", "updated_at": "2020-02-26T21:28:54Z", "closed_at": "2020-02-26T21:28:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I did try posting this to the google group as the docs suggest, but I received a 'delivery failed' notification.\r\n\r\nI have an armored (ASCII)  PGP public key, of the format:\r\n\r\n\r\n```\r\n-----BEGIN PGP PUBLIC KEY BLOCK-----\r\n\r\nKEY\r\n-----END PGP PUBLIC KEY BLOCK-----\r\n```\r\n\r\n\r\nand I would like to use it to PGP encrypt a string.\r\n\r\n\r\nI am repeatedly getting the error that the format of the public key is\r\nincorrect, when I run RSA.importkey. I have tried stripping the\r\n---BEGIN/END PUBLIC KEY BLOCK--- lines, as well as base64 decoding the\r\nkey, but neither has helped.\r\n\r\n\r\nAm I going about this the wrong way?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/384", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/384/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/384/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/384/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/384", "id": 568709432, "node_id": "MDU6SXNzdWU1Njg3MDk0MzI=", "number": 384, "title": "installation error with 64-bit Python3.8 on AIX", "user": {"login": "wudiwin728", "id": 17403528, "node_id": "MDQ6VXNlcjE3NDAzNTI4", "avatar_url": "https://avatars0.githubusercontent.com/u/17403528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wudiwin728", "html_url": "https://github.com/wudiwin728", "followers_url": "https://api.github.com/users/wudiwin728/followers", "following_url": "https://api.github.com/users/wudiwin728/following{/other_user}", "gists_url": "https://api.github.com/users/wudiwin728/gists{/gist_id}", "starred_url": "https://api.github.com/users/wudiwin728/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wudiwin728/subscriptions", "organizations_url": "https://api.github.com/users/wudiwin728/orgs", "repos_url": "https://api.github.com/users/wudiwin728/repos", "events_url": "https://api.github.com/users/wudiwin728/events{/privacy}", "received_events_url": "https://api.github.com/users/wudiwin728/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T03:14:23Z", "updated_at": "2020-02-22T13:00:06Z", "closed_at": "2020-02-22T13:00:06Z", "author_association": "NONE", "active_lock_reason": null, "body": " copying lib/Cryptodome/SelfTest/Signature/test_vectors/wycheproof/rsa_signature_test.json -> build/lib.AIX.7200.1543.64-3.8/Cryptodome/SelfTest/Signature/test_vectors/wycheproof\r\n    running build_ext\r\n    building 'Cryptodome.Hash._MD2' extension\r\n    creating build/temp.AIX.7200.1543.64-3.8\r\n    creating build/temp.AIX.7200.1543.64-3.8/src\r\n    xlc_r -DNDEBUG -O -I/opt/include -O2 -qmaxmem=-1 -qarch=pwr5 -q64 -I/opt/include -O2 -qmaxmem=-1 -qarch=pwr5 -q64 -DHAVE_STDINT_H -DPYCRYPTO_BIG_ENDIAN -DSYS_BITS=64 -DLTC_NO_ASM -DHAVE_POSIX_MEMALIGN -Isrc/ -I/opt/include/python3.8 -c src/MD2.c -o build/temp.AIX.7200.1543.64-3.8/src/MD2.o\r\n    /opt/lib/python3.8/config-3.8/ld_so_aix xlc_r -bI:/opt/lib/python3.8/config-3.8/python.exp build/temp.AIX.7200.1543.64-3.8/src/MD2.o -o build/lib.AIX.7200.1543.64-3.8/Cryptodome/Hash/_MD2.so\r\n    ld: 0711-736 ERROR: Input file build/temp.AIX.7200.1543.64-3.8/src/MD2.o:\r\n        XCOFF64 object files are not allowed in 32-bit mode.\r\n    error: command '/opt/lib/python3.8/config-3.8/ld_so_aix' failed with exit status 8\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: /opt/bin/python3.8 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-r2xpp_3q/pycryptodomex/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-r2xpp_3q/pycryptodomex/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record /tmp/pip-record-vmuyayqg/install-record.txt --single-version-externally-managed --compile Check the logs for full command output.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/382", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/382/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/382/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/382/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/382", "id": 568186912, "node_id": "MDU6SXNzdWU1NjgxODY5MTI=", "number": 382, "title": "How can I encrypt large files using RSA_4096 key", "user": {"login": "HigashidaTomoyuki", "id": 42333678, "node_id": "MDQ6VXNlcjQyMzMzNjc4", "avatar_url": "https://avatars0.githubusercontent.com/u/42333678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HigashidaTomoyuki", "html_url": "https://github.com/HigashidaTomoyuki", "followers_url": "https://api.github.com/users/HigashidaTomoyuki/followers", "following_url": "https://api.github.com/users/HigashidaTomoyuki/following{/other_user}", "gists_url": "https://api.github.com/users/HigashidaTomoyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/HigashidaTomoyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HigashidaTomoyuki/subscriptions", "organizations_url": "https://api.github.com/users/HigashidaTomoyuki/orgs", "repos_url": "https://api.github.com/users/HigashidaTomoyuki/repos", "events_url": "https://api.github.com/users/HigashidaTomoyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/HigashidaTomoyuki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-20T10:07:26Z", "updated_at": "2020-02-20T11:29:42Z", "closed_at": "2020-02-20T11:29:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ran the following python code, but can't encrypt.\r\nWhat I want to encrypt is 1MB flac. The key wants to use local RSA_4096.\r\n\r\n```\r\nfrom Crypto.Cipher import PKCS1_OAEP\r\nfrom Crypto.PublicKey import RSA\r\n\r\nwith open('./key/publickey.pem', 'rb') as f:\r\n    key = RSA.importKey(f.read())\r\ncipher = PKCS1_OAEP.new(key)\r\n\r\nwith open(\"./data/original.flac\", \"rb\")as f:\r\n    flac = f.read()\r\n\r\nencrypted = cipher.encrypt(flac)\r\n\r\nwith open('./data/encrypted.flac', 'wb') as f:\r\n    f.write(encrypted)\r\n```\r\n\r\nThe error message is as follows.\r\n```\r\nValueError: Plaintext is too long.\r\n```\r\n\r\nHow can I encrypt large files?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/381", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/381/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/381/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/381/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/381", "id": 567683960, "node_id": "MDU6SXNzdWU1Njc2ODM5NjA=", "number": 381, "title": "macOS notarization not yet possible", "user": {"login": "BoboTiG", "id": 2033598, "node_id": "MDQ6VXNlcjIwMzM1OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2033598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoboTiG", "html_url": "https://github.com/BoboTiG", "followers_url": "https://api.github.com/users/BoboTiG/followers", "following_url": "https://api.github.com/users/BoboTiG/following{/other_user}", "gists_url": "https://api.github.com/users/BoboTiG/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoboTiG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoboTiG/subscriptions", "organizations_url": "https://api.github.com/users/BoboTiG/orgs", "repos_url": "https://api.github.com/users/BoboTiG/repos", "events_url": "https://api.github.com/users/BoboTiG/events{/privacy}", "received_events_url": "https://api.github.com/users/BoboTiG/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-19T16:35:34Z", "updated_at": "2020-02-21T09:52:42Z", "closed_at": "2020-02-21T09:52:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nI hope I am at the good place for that issue.\r\n\r\nI am trying to make an application using PyCrpytodomex to be compliant on macOS (the famous \"notarization\"). Before Feb 2020, all went good. But now that Apple uses an enforced security, all applications must be signed and notarized.\r\n\r\nI am hitting a \"blocker\" because it seems that compiled files of this project are using an SDK older than 10.9, and I got plenty of errors from the notarization report:\r\n```json\r\n{\r\n    \"severity\": \"error\",\r\n    \"code\": null,\r\n    \"path\": \"nuxeo-drive-4.4.2.dmg/Nuxeo Drive.app/Contents/MacOS/Cryptodome/Hash/_SHA256.cpython-37m-darwin.so\",\r\n    \"message\": \"The binary uses an SDK older than the 10.9 SDK.\",\r\n    \"docUrl\": null,\r\n    \"architecture\": \"i386\"\r\n},\r\n{\r\n    \"severity\": \"error\",\r\n    \"code\": null,\r\n    \"path\": \"nuxeo-drive-4.4.2.dmg/Nuxeo Drive.app/Contents/MacOS/Cryptodome/Hash/_SHA256.cpython-37m-darwin.so\",\r\n    \"message\": \"The binary uses an SDK older than the 10.9 SDK.\",\r\n    \"docUrl\": null,\r\n    \"architecture\": \"x86_64\"\r\n},\r\n```\r\n\r\nAccording to Apple (https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/resolving_common_notarization_issues#3087723), using 10.10 should be OK for retro-compatibilty too.\r\n\r\nDo you are aware of that issue? And do you think you could do something about it?\r\n\r\nThanks for your attention :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/379", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/379/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/379/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/379/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/379", "id": 566244242, "node_id": "MDU6SXNzdWU1NjYyNDQyNDI=", "number": 379, "title": "Very slow import on cygwin", "user": {"login": "joaoe", "id": 461983, "node_id": "MDQ6VXNlcjQ2MTk4Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/461983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joaoe", "html_url": "https://github.com/joaoe", "followers_url": "https://api.github.com/users/joaoe/followers", "following_url": "https://api.github.com/users/joaoe/following{/other_user}", "gists_url": "https://api.github.com/users/joaoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/joaoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joaoe/subscriptions", "organizations_url": "https://api.github.com/users/joaoe/orgs", "repos_url": "https://api.github.com/users/joaoe/repos", "events_url": "https://api.github.com/users/joaoe/events{/privacy}", "received_events_url": "https://api.github.com/users/joaoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-17T11:43:03Z", "updated_at": "2020-06-22T21:02:17Z", "closed_at": "2020-06-22T21:02:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi.\r\nMy code\r\n```\r\n$ time python3 -c \"from Crypto.Cipher import AES\"\r\nreal    0m2.983s\r\nuser    0m0.367s\r\nsys     0m2.109s\r\n```\r\nThe machine I'm running this is not exactly very powerful.\r\nThe culprit: in `_raw_api.py` there is an invocation of `platform.architecture()`. Despite that being part of Python's stdlib, that function creates a subprocess to run `file /.../path/python.exe`. Subprocesses on Windows/Cygwin are unfortunately slow to start up.\r\nBy just caching the result of that function call, this happens:\r\n```\r\n$ time python3 -c \"from Crypto.Cipher import AES\"\r\nreal    0m0.573s\r\nuser    0m0.093s\r\nsys     0m0.421s\r\n```\r\n`platform.architecture` could be a bit smarter and avoid the subprocess for the current python executable, but changing the stdlib is another story.\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/377", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/377/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/377/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/377", "id": 562351563, "node_id": "MDU6SXNzdWU1NjIzNTE1NjM=", "number": 377, "title": "pycryptodome package for my board", "user": {"login": "shubham101096", "id": 42842288, "node_id": "MDQ6VXNlcjQyODQyMjg4", "avatar_url": "https://avatars2.githubusercontent.com/u/42842288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shubham101096", "html_url": "https://github.com/shubham101096", "followers_url": "https://api.github.com/users/shubham101096/followers", "following_url": "https://api.github.com/users/shubham101096/following{/other_user}", "gists_url": "https://api.github.com/users/shubham101096/gists{/gist_id}", "starred_url": "https://api.github.com/users/shubham101096/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shubham101096/subscriptions", "organizations_url": "https://api.github.com/users/shubham101096/orgs", "repos_url": "https://api.github.com/users/shubham101096/repos", "events_url": "https://api.github.com/users/shubham101096/events{/privacy}", "received_events_url": "https://api.github.com/users/shubham101096/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-10T06:26:22Z", "updated_at": "2020-02-10T11:26:21Z", "closed_at": "2020-02-10T11:26:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI need the pycryptodome package for the following architecture of my target board. The target board does not have internet access so I cannot directly install pycryptodome on it. I need a method to compile it on my ubuntu 64 bit pc and then transfer it on my board. Following describes the toolchain I am using and the architecture of the target board. I cant find a .whl file or anything else for this architecture. Please help me out.\r\n\r\nPPC_e5500_CC_BASE_DIR   := /opt/fsl-qoriq/2.0/sysroots/x86_64-fslsdk-linux\r\nifeq (${TARGET_CPU}, PPC_e5500)\r\nifeq (${TARGET_CPU_BIT},)\r\n$(info TARGET_CPU_BIT must be 32BIT/64BIT)\r\n$(warning TARGET_CPU_BIT not specified, assuming 32BIT)\r\nTARGET_CPU_BIT          = 32BIT\r\nendif\r\nTARGET_ARCH             = powerpc\r\nCOMPILER_TYPE           = gcc\r\nifeq (${TARGET_CPU_BIT}, 32BIT)\r\n#TARGET_CPU_BIT          = 32BIT\r\nCROSS_COMPILE_PATH      = ${PPC_e5500_CC_BASE_DIR}/usr/bin/powerpc-fsl-linux:${PPC_e5500_CC_BASE_DIR}/usr/bin\r\nCROSS_COMPILE           = powerpc-fsl-linux-\r\nHOST                    = powerpc-fsl-linux\r\nCC_SYSROOT              = ${PPC_e5500_CC_BASE_DIR}/../ppce5500-fsl-linux\r\nCOMMON_CFLAGS          += -m32 -mhard-float -mcpu=e5500\r\nCOMMON_CFLAGS          += --sysroot=${CC_SYSROOT}\r\n\r\nRegards\r\nShubham Mishra", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/375", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/375/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/375/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/375", "id": 561607136, "node_id": "MDU6SXNzdWU1NjE2MDcxMzY=", "number": 375, "title": "AES encryption and decryption do not match", "user": {"login": "20063209", "id": 58626546, "node_id": "MDQ6VXNlcjU4NjI2NTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/58626546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/20063209", "html_url": "https://github.com/20063209", "followers_url": "https://api.github.com/users/20063209/followers", "following_url": "https://api.github.com/users/20063209/following{/other_user}", "gists_url": "https://api.github.com/users/20063209/gists{/gist_id}", "starred_url": "https://api.github.com/users/20063209/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/20063209/subscriptions", "organizations_url": "https://api.github.com/users/20063209/orgs", "repos_url": "https://api.github.com/users/20063209/repos", "events_url": "https://api.github.com/users/20063209/events{/privacy}", "received_events_url": "https://api.github.com/users/20063209/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-07T12:24:36Z", "updated_at": "2020-02-18T06:01:43Z", "closed_at": "2020-02-18T06:01:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is my code:\r\n```\r\ndef encrypt(password,data):\r\n    print(password)\r\n    header = b\"default\"\r\n    nonce = get_random_bytes(16) \r\n    key = hashlib.sha256(password.encode()).hexdigest() \r\n    print(key)\r\n    cipher = AES.new(bytes(key,\"UTF-8\"), AES.MODE_SIV,nonce=nonce) \r\n    cipher.update(header) \r\n    ciphertext, tag = cipher.encrypt_and_digest(bytes(data,'UTF-8')) \r\n    json_k = [ 'nonce', 'header', 'ciphertext', 'tag' ] \r\n    json_v = [ b64encode(x).decode('utf-8') for x in (nonce, header, ciphertext, tag )] \r\n    result = json.dumps(dict(zip(json_k, json_v))) \r\n    print(result)\r\n    return result\r\n\r\ndef decrypt(ct,pw):\r\n    print(ct)\r\n    print(pw)\r\n    try:\r\n        key = hashlib.sha256(pw.encode()).hexdigest() \r\n        print(key)\r\n        b = json.dumps(ct)\r\n        c = json.loads(b)\r\n        json_k = [ 'nonce', 'header', 'ciphertext', 'tag' ]\r\n        jv = {int(k):b64decode(c[k]) for k in json_k}\r\n        cipher = AES.new(bytes(key,'Utf-8'), AES.MODE_SIV, nonce=jv['nonce'])\r\n        cipher.update(jv['header'])\r\n        plaintext = cipher.decrypt_and_verify(jv['ciphertext'], jv['tag'])\r\n        realplaintext = str(plaintext,\"utf-8\")\r\n        print(realplaintext)\r\n    except ValueError:\r\n        print(\"Incorrect decryption\")\r\n```\r\n\r\nwhen I encrypt with password '123' the output is :\r\n\r\n```{\"nonce\": \"+6zun102uBXSLs/XtfWtLw==\", \"header\": \"ZGVmYXVsdA==\", \"ciphertext\": \"vSw=\", \"tag\": \"Q1yNU1a04sXWD4xQE+wNrA==\"}```\r\n\r\nhowever, when i decrypt with key '123', the output is `incorrect decryption`; i've checked, the hash is correct\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/374", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/374/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/374/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/374", "id": 558493186, "node_id": "MDU6SXNzdWU1NTg0OTMxODY=", "number": 374, "title": "[FEATURE] Incorporate Ulam's Spiral for faster generation of primes", "user": {"login": "prabhatsoni99", "id": 43891076, "node_id": "MDQ6VXNlcjQzODkxMDc2", "avatar_url": "https://avatars3.githubusercontent.com/u/43891076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prabhatsoni99", "html_url": "https://github.com/prabhatsoni99", "followers_url": "https://api.github.com/users/prabhatsoni99/followers", "following_url": "https://api.github.com/users/prabhatsoni99/following{/other_user}", "gists_url": "https://api.github.com/users/prabhatsoni99/gists{/gist_id}", "starred_url": "https://api.github.com/users/prabhatsoni99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prabhatsoni99/subscriptions", "organizations_url": "https://api.github.com/users/prabhatsoni99/orgs", "repos_url": "https://api.github.com/users/prabhatsoni99/repos", "events_url": "https://api.github.com/users/prabhatsoni99/events{/privacy}", "received_events_url": "https://api.github.com/users/prabhatsoni99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-01T06:12:52Z", "updated_at": "2020-02-06T08:15:37Z", "closed_at": "2020-02-05T22:13:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Ulam's spiral is a pattern in mathematics. We know of a particular equation whose `y` value has approx 20X more chance of being a prime number (a high density distribution of numbers):  \r\n`y = x^2 + x + 3399714628553118047`  \r\n  \r\nWhat are the thoughts on incorporating this to generate primes faster?\r\n  \r\nResources for Ulam's Spiral:  \r\nhttps://en.wikipedia.org/wiki/Ulam_spiral  \r\nhttps://www.youtube.com/watch?v=iFuR97YcSLM  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/373", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/373/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/373/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/373/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/373", "id": 557528159, "node_id": "MDU6SXNzdWU1NTc1MjgxNTk=", "number": 373, "title": "Type error in RSA.exportKey using python 3.6.8", "user": {"login": "KwisatzHaderach", "id": 2510105, "node_id": "MDQ6VXNlcjI1MTAxMDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2510105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KwisatzHaderach", "html_url": "https://github.com/KwisatzHaderach", "followers_url": "https://api.github.com/users/KwisatzHaderach/followers", "following_url": "https://api.github.com/users/KwisatzHaderach/following{/other_user}", "gists_url": "https://api.github.com/users/KwisatzHaderach/gists{/gist_id}", "starred_url": "https://api.github.com/users/KwisatzHaderach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KwisatzHaderach/subscriptions", "organizations_url": "https://api.github.com/users/KwisatzHaderach/orgs", "repos_url": "https://api.github.com/users/KwisatzHaderach/repos", "events_url": "https://api.github.com/users/KwisatzHaderach/events{/privacy}", "received_events_url": "https://api.github.com/users/KwisatzHaderach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-30T14:25:01Z", "updated_at": "2020-04-16T06:54:21Z", "closed_at": "2020-04-16T06:54:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using this code:\r\n\r\nfrom Crypto.PublicKey import RSA\r\nssh_key = RSA.generate(bits=2048, randfunc=os.urandom)\r\nssh_key.publickey().exportKey('OpenSSH')\r\n\r\nI'm getting TypeError in Crypto/PublicKey/RSA.py:315:\r\n>   keystring = ''.join([ struct.pack(\">I\",len(kp))+kp for kp in keyparts])\r\nE   TypeError: can't concat str to bytes", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/372", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/372/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/372/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/372", "id": 557090603, "node_id": "MDU6SXNzdWU1NTcwOTA2MDM=", "number": 372, "title": "Memory leak and retain cycle in Blake2b", "user": {"login": "sammichaels", "id": 6963239, "node_id": "MDQ6VXNlcjY5NjMyMzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6963239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sammichaels", "html_url": "https://github.com/sammichaels", "followers_url": "https://api.github.com/users/sammichaels/followers", "following_url": "https://api.github.com/users/sammichaels/following{/other_user}", "gists_url": "https://api.github.com/users/sammichaels/gists{/gist_id}", "starred_url": "https://api.github.com/users/sammichaels/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sammichaels/subscriptions", "organizations_url": "https://api.github.com/users/sammichaels/orgs", "repos_url": "https://api.github.com/users/sammichaels/repos", "events_url": "https://api.github.com/users/sammichaels/events{/privacy}", "received_events_url": "https://api.github.com/users/sammichaels/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1290271601, "node_id": "MDU6TGFiZWwxMjkwMjcxNjAx", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/fix_available", "name": "fix_available", "color": "c2e0c6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-29T20:14:06Z", "updated_at": "2020-02-02T21:47:34Z", "closed_at": "2020-02-02T21:47:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "There appears to be a memory leak using Blake2b when using a memoryview object (it may be present elsewhere but I haven't tested).  This is on both macOS and Windows using 3.9.4.\r\n\r\n```\r\n>>> from Cryptodome.Hash import BLAKE2b\r\n>>> import gc\r\n>>> import sys\r\n>>> m = memoryview(b'123')\r\n>>> sys.getrefcount(m)\r\n2\r\n>>> h = BLAKE2b.new(data=m, digest_bits=256).digest()\r\n```\r\n\r\nAt this point the BLAKE2b instance is deallocated and `h` holds bytes.  `m` should have no references from within the code (the two references are python itself).  But releasing the memoryview fails and you can see the reference count has increased, despite the BLAKE2b instance being deallocated.\r\n\r\n```\r\n>>> m.release()\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\nBufferError: memoryview has 1 exported buffer\r\n>>> sys.getrefcount(m)\r\n3\r\n>>> gc.get_referrers(m)[0]['BLAKE2b']\r\n<module 'Cryptodome.Hash.BLAKE2b' from '/redacted/Cryptodome/Hash/BLAKE2b.py'>\r\n```\r\n\r\nI discovered excessive memory usage when parsing and hashing files.  A memoryview is a significant performance improvement because I'm passing around many slices of the data in addition to hashing it.  The memoryview in the code originates from:\r\n\r\n```\r\n>>> from pathlib import Path\r\n>>> file = Path('/path/to/file')\r\n>>> data = memoryview(file.read_bytes())\r\n```\r\n\r\nThe memory usage grows with the size of each file.  Each iteration the usage doubles until python  throws a MemoryError.\r\n\r\nUsing the built in blake2b from hashlib and using it in the exact same manner does not have the retain cycle, allows me to release the memoryview, and deallocates the file bytes as expected.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/371", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/371/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/371/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/371/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/371", "id": 556666501, "node_id": "MDU6SXNzdWU1NTY2NjY1MDE=", "number": 371, "title": "Crypto (+ Cryptodome) usage issue [ ValueError: invalid literal for int() with base 10: '' ]", "user": {"login": "sunandosamaddar", "id": 44464454, "node_id": "MDQ6VXNlcjQ0NDY0NDU0", "avatar_url": "https://avatars3.githubusercontent.com/u/44464454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunandosamaddar", "html_url": "https://github.com/sunandosamaddar", "followers_url": "https://api.github.com/users/sunandosamaddar/followers", "following_url": "https://api.github.com/users/sunandosamaddar/following{/other_user}", "gists_url": "https://api.github.com/users/sunandosamaddar/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunandosamaddar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunandosamaddar/subscriptions", "organizations_url": "https://api.github.com/users/sunandosamaddar/orgs", "repos_url": "https://api.github.com/users/sunandosamaddar/repos", "events_url": "https://api.github.com/users/sunandosamaddar/events{/privacy}", "received_events_url": "https://api.github.com/users/sunandosamaddar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-29T06:33:33Z", "updated_at": "2020-06-27T15:25:37Z", "closed_at": "2020-06-27T15:25:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm trying to create cookie signatures in my web app with both `Crypto` and `Cryptodome` (using one at a time) package in a Python 2.7 venv, but there seems to be some problem I'm not sure how to handle. This is my first experience with this package.\r\n\r\n**Traceback**\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/platform/google_appengine/google/appengine/runtime/wsgi.py\", line 240, in Handle\r\n    handler = _config_handle.add_wsgi_middleware(self._LoadHandler())\r\n  File \"/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/platform/google_appengine/google/appengine/runtime/wsgi.py\", line 311, in _LoadHandler\r\n    handler, path, err = LoadObject(self._handler)\r\n  File \"/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/platform/google_appengine/google/appengine/runtime/wsgi.py\", line 85, in LoadObject\r\n    obj = __import__(path[0])\r\n  File \"/Users/sunandosamaddar/google_drive/py/webapp2_apps/hellowebapp2/main.py\", line 4, in <module>\r\n    from Cryptodome.Hash import SHA256\r\n  File \"/Users/sunandosamaddar/google_drive/py/webapp2_apps/hellowebapp2/server/lib/Cryptodome/Hash/SHA256.py\", line 23, in <module>\r\n    from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,\r\n  File \"/Users/sunandosamaddar/google_drive/py/webapp2_apps/hellowebapp2/server/lib/Cryptodome/Util/_raw_api.py\", line 165, in <module>\r\n    import ctypes\r\n  File \"/Users/sunandosamaddar/opt/miniconda3/envs/py27/lib/python2.7/ctypes/__init__.py\", line 29, in <module>\r\n    if int(_os.uname()[2].split('.')[0]) < 8:\r\nValueError: invalid literal for int() with base 10: ''\r\n```\r\n\r\n**Code**\r\n```\r\nkey = RSA.generate(2048)\r\nkey = key.export_key(passphrase=*****, pkcs=8, protection=\"scryptAndAES128-CBC\")\r\nh = SHA256.new(\r\n    security.generate_random_string(length=32, pool='ASCII_PRINTABLE'))\r\nsignature = pkcs1_15.new(key).sign(h)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/367", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/367/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/367/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/367", "id": 555127463, "node_id": "MDU6SXNzdWU1NTUxMjc0NjM=", "number": 367, "title": "Installing Pycryptodome without SelfTest?", "user": {"login": "pakal", "id": 330629, "node_id": "MDQ6VXNlcjMzMDYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/330629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pakal", "html_url": "https://github.com/pakal", "followers_url": "https://api.github.com/users/pakal/followers", "following_url": "https://api.github.com/users/pakal/following{/other_user}", "gists_url": "https://api.github.com/users/pakal/gists{/gist_id}", "starred_url": "https://api.github.com/users/pakal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pakal/subscriptions", "organizations_url": "https://api.github.com/users/pakal/orgs", "repos_url": "https://api.github.com/users/pakal/repos", "events_url": "https://api.github.com/users/pakal/events{/privacy}", "received_events_url": "https://api.github.com/users/pakal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-25T19:30:48Z", "updated_at": "2020-02-20T18:59:35Z", "closed_at": "2020-02-20T18:59:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using Pycryptodome on Android, and selftest data fixtures make the final APK quite big, would it be possible add the optional to install it in minimal mode, without SelfTest?\r\n\r\nI have no idea if setuptools \"extras\" system can handle this natively, but I guess customizing the setup.py config on the fly could do it (no idea about wheels, yet).\r\n\r\nIf it's impossible I'll have to look at hooking into the python-4-android toolchain, but this looks even harder  ^^'\r\n\r\nbest regards,\r\nPascal", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/366", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/366/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/366/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/366", "id": 555094673, "node_id": "MDU6SXNzdWU1NTUwOTQ2NzM=", "number": 366, "title": "def derive(self) function is not working when I used mode_SIV", "user": {"login": "20063209", "id": 58626546, "node_id": "MDQ6VXNlcjU4NjI2NTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/58626546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/20063209", "html_url": "https://github.com/20063209", "followers_url": "https://api.github.com/users/20063209/followers", "following_url": "https://api.github.com/users/20063209/following{/other_user}", "gists_url": "https://api.github.com/users/20063209/gists{/gist_id}", "starred_url": "https://api.github.com/users/20063209/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/20063209/subscriptions", "organizations_url": "https://api.github.com/users/20063209/orgs", "repos_url": "https://api.github.com/users/20063209/repos", "events_url": "https://api.github.com/users/20063209/events{/privacy}", "received_events_url": "https://api.github.com/users/20063209/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-25T14:57:33Z", "updated_at": "2020-02-01T06:40:36Z", "closed_at": "2020-02-01T06:40:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is my code\r\n`password = str(input(\"> \"))\r\nheader = b\"header\"\r\ndata = \"hi\"\r\nnonce = get_random_bytes(16)\r\nkey = hashlib.sha256(password.encode()).hexdigest()\r\ncipher = AES.new(bytes(key,\"UTF-8\"), AES.MODE_SIV,nonce=nonce)\r\ncipher.update(header)\r\nciphertext, tag = cipher.encrypt_and_digest(data)\r\njson_k = [ 'nonce', 'header', 'ciphertext', 'tag' ]\r\njson_v = [ b64encode(x).decode('utf-8') for x in (nonce, header, ciphertext, tag )]\r\nresult = json.dumps(dict(zip(json_k, json_v)))\r\nprint(ciphertext)`\r\nThis is the error message:\r\n`Traceback (most recent call last):\r\n  File \"/Users/myusername/Desktop/script.py\", line 17, in <module>\r\n    ciphertext, tag = cipher.encrypt_and_digest(data)\r\n  File \"/Users/myusername/Library/Python/3.8/lib/python/site-packages/Cryptodome/Cipher/_mode_siv.py\", line 304, in encrypt_and_digest\r\n    self._mac_tag = self._kdf.derive()\r\n  File \"/Users/myusername/Library/Python/3.8/lib/python/site-packages/Cryptodome/Protocol/KDF.py\", line 266, in derive\r\n    padded = (self._last_string + b'\\x80' + b'\\x00' * 15)[:16]\r\nTypeError: can only concatenate str (not \"bytes\") to str`\r\nI tried to solve the problem by myself but it did not work\r\nthis is the code in KDF.py before I tried to solve the problem\r\n`def derive(self):\r\n        \"\"\"\"Derive a secret from the vector of components.\r\n\r\n        :Return: a byte string, as long as the block length of the cipher.\r\n        \"\"\"\r\n\r\n        if len(self._last_string) >= 16:\r\n            # xorend\r\n            final = self._last_string[:-16] + strxor(self._last_string[-16:], self._cache)\r\n        else:\r\n            # zero-pad & xor\r\n            padded = (self._last_string + b'\\x80' + b'\\x00' * 15)[:16]\r\n            final = strxor(padded, self._double(self._cache))\r\n        mac = CMAC.new(self._key,\r\n                       msg=final,\r\n                       ciphermod=self._ciphermod,\r\n                       cipher_params=self._cipher_params)\r\n        return mac.digest()`\r\nthis is the code in KDF.py after I tried to solve the problem\r\n`def derive(self):\r\n        \"\"\"\"Derive a secret from the vector of components.\r\n\r\n        :Return: a byte string, as long as the block length of the cipher.\r\n        \"\"\"\r\n\r\n        if len(self._last_string) >= 16:\r\n            # xorend\r\n            final = self._last_string[:-16] + strxor(self._last_string[-16:], self._cache)\r\n        else:\r\n            # zero-pad & xor\r\n            padded = (self._last_string + str(b'\\x80') + str(b'\\x00') * 15)[:16]\r\n            final = strxor(bytes(padded,\"UTF-8\"), self._double(self._cache))\r\n        mac = CMAC.new(self._key,\r\n                       msg=final,\r\n                       ciphermod=self._ciphermod,\r\n                       cipher_params=self._cipher_params)\r\n        return mac.digest()`\r\nHowever the error message says there is an invalid syntax at line`mac = CMAC.new(self._key,`\r\nThe arrow was pointing at the m in mac\r\nplease fix this as soon as you can", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/365", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/365/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/365/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/365", "id": 551793996, "node_id": "MDU6SXNzdWU1NTE3OTM5OTY=", "number": 365, "title": "Trying to serialize RSA Public keys raises a PicklingError", "user": {"login": "alehuo", "id": 7612995, "node_id": "MDQ6VXNlcjc2MTI5OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7612995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alehuo", "html_url": "https://github.com/alehuo", "followers_url": "https://api.github.com/users/alehuo/followers", "following_url": "https://api.github.com/users/alehuo/following{/other_user}", "gists_url": "https://api.github.com/users/alehuo/gists{/gist_id}", "starred_url": "https://api.github.com/users/alehuo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alehuo/subscriptions", "organizations_url": "https://api.github.com/users/alehuo/orgs", "repos_url": "https://api.github.com/users/alehuo/repos", "events_url": "https://api.github.com/users/alehuo/events{/privacy}", "received_events_url": "https://api.github.com/users/alehuo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-01-18T16:50:00Z", "updated_at": "2020-01-27T23:49:38Z", "closed_at": "2020-01-22T13:58:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI'm using the PYOIDC library which is used to handle OpenID Connect authorization workflow. It includes a special session state which stores RSA keys. By default, the library uses Python's native dictionary object to store the keys, but it's not persistent. Trying to serialzie the session state raises a PicklingException:\r\n\r\n```\r\napp  |     state = obj.__getstate__()\r\napp  |   File \"/usr/local/lib/python3.6/site-packages/Cryptodome/PublicKey/RSA.py\", line 204, in __getstate__\r\napp  |     raise PicklingError\r\napp  | _pickle.PicklingError\r\n```\r\n\r\nCan you share some insight on why is the public key not serializable?\r\n\r\nTo my knowledge public keys are just plain bytearrays or Base64 encoded strings - in which case they could be serialized just fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/361", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/361/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/361/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/361/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/361", "id": 551218915, "node_id": "MDU6SXNzdWU1NTEyMTg5MTU=", "number": 361, "title": "RSA CRT Coeffecient is calculated as pInv mod q rather than qInv mod p", "user": {"login": "acabey", "id": 15933310, "node_id": "MDQ6VXNlcjE1OTMzMzEw", "avatar_url": "https://avatars1.githubusercontent.com/u/15933310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acabey", "html_url": "https://github.com/acabey", "followers_url": "https://api.github.com/users/acabey/followers", "following_url": "https://api.github.com/users/acabey/following{/other_user}", "gists_url": "https://api.github.com/users/acabey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acabey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acabey/subscriptions", "organizations_url": "https://api.github.com/users/acabey/orgs", "repos_url": "https://api.github.com/users/acabey/repos", "events_url": "https://api.github.com/users/acabey/events{/privacy}", "received_events_url": "https://api.github.com/users/acabey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-17T06:08:09Z", "updated_at": "2020-01-17T17:41:11Z", "closed_at": "2020-01-17T17:41:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "My understanding of the mathematics behind RSA is too limited to understand if this is a real issue or not, but I happened to run into this problem while using this library to convert a non-standard RSA key storage implementation to standard PKCS / PEM.\r\n\r\nIt seems that most RSA implementations (see openssl [rsa_sp800_56b_gen.c:236](https://github.com/openssl/openssl/blob/651101e18d66b2ae89851ce8906299e9d2a871e0/crypto/rsa/rsa_sp800_56b_gen.c) and [rsa_sp800_56b_check.c:62](https://github.com/openssl/openssl/blob/79c44b4e3044aee9dc9618850d4f1ce067757b4b/crypto/rsa/rsa_sp800_56b_check.c)) / RSA reference material (see [PKCS#1 spec:page 56](https://tools.ietf.org/html/rfc8017), [reference 1](https://www.di-mgt.com.au/crt_rsa.html), [reference 2](https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Using_the_Chinese_remainder_algorithm)) calculate the Chinese Remainder Theorem (CRT) coefficient, represented as the variable `u` in pycryptodome, as `q^-1 mod p` or `q.inverse(p)`, but pycryptodome calculates it as `p^-1 mod q` or `p.inverse(q)` (see [RSA.py:467](https://github.com/Legrandin/pycryptodome/blob/cc46c9f516ac6e7e5a629d60ed282917025926f1/lib/Crypto/PublicKey/RSA.py)).\r\n\r\nIt was my understanding that p and q are effectively interchangeable in any calculation you use them; however, `p^-1 mod q` clearly yields a different result than `q^-1 mod p`.  I did fork the repo and implement this change, but given that it should be logically identical to the original implementation, I cannot think up a new test that would fail on older versions. Additionally, I do not know if this change would for whatever reason break backwards compatibility.\r\n\r\nShould this change be breaking? Backwards compatible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/360", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/360/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/360/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/360", "id": 551176812, "node_id": "MDU6SXNzdWU1NTExNzY4MTI=", "number": 360, "title": "TypeError at /paytm/payment/ Object type <class 'str'> cannot be passed to C code", "user": {"login": "karthik344", "id": 51691229, "node_id": "MDQ6VXNlcjUxNjkxMjI5", "avatar_url": "https://avatars1.githubusercontent.com/u/51691229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karthik344", "html_url": "https://github.com/karthik344", "followers_url": "https://api.github.com/users/karthik344/followers", "following_url": "https://api.github.com/users/karthik344/following{/other_user}", "gists_url": "https://api.github.com/users/karthik344/gists{/gist_id}", "starred_url": "https://api.github.com/users/karthik344/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karthik344/subscriptions", "organizations_url": "https://api.github.com/users/karthik344/orgs", "repos_url": "https://api.github.com/users/karthik344/repos", "events_url": "https://api.github.com/users/karthik344/events{/privacy}", "received_events_url": "https://api.github.com/users/karthik344/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-17T03:26:02Z", "updated_at": "2020-01-17T11:06:19Z", "closed_at": "2020-01-17T11:06:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "import base64\r\nimport string\r\nimport random\r\nimport hashlib\r\n\r\nfrom Crypto.Cipher import AES\r\n\r\n\r\nIV = \"@@@@&&&&####$$$$\"\r\nBLOCK_SIZE = 16\r\n\r\n\r\ndef generate_checksum(param_dict, merchant_key, salt=None):\r\n    params_string = __get_param_string__(param_dict)\r\n    salt = salt if salt else __id_generator__(4)\r\n    final_string = '%s|%s' % (params_string, salt)\r\n\r\n    hasher = hashlib.sha256(final_string.encode())\r\n    hash_string = hasher.hexdigest()\r\n\r\n    hash_string += salt\r\n\r\n    return __encode__(hash_string, IV, merchant_key)\r\n\r\n\r\ndef generate_checksum_by_str(param_str, merchant_key, salt=None):\r\n    params_string = param_str\r\n    salt = salt if salt else __id_generator__(4)\r\n    final_string = '%s|%s' % (params_string, salt)\r\n\r\n    hasher = hashlib.sha256(final_string.encode())\r\n    hash_string = hasher.hexdigest()\r\n\r\n    hash_string += salt\r\n\r\n    return __encode__(hash_string, IV, merchant_key)\r\n\r\n\r\ndef verify_checksum(param_dict, merchant_key, checksum):\r\n    # Remove checksum\r\n    if 'CHECKSUMHASH' in param_dict:\r\n        param_dict.pop('CHECKSUMHASH')\r\n\r\n    # Get salt\r\n    paytm_hash = __decode__(checksum, IV, merchant_key)\r\n    salt = paytm_hash[-4:]\r\n    calculated_checksum = generate_checksum(param_dict, merchant_key, salt=salt)\r\n    return calculated_checksum == checksum\r\n\r\ndef verify_checksum_by_str(param_str, merchant_key, checksum):\r\n    # Remove checksum\r\n    #if 'CHECKSUMHASH' in param_dict:\r\n        #param_dict.pop('CHECKSUMHASH')\r\n\r\n    # Get salt\r\n    paytm_hash = __decode__(checksum, IV, merchant_key)\r\n    salt = paytm_hash[-4:]\r\n    calculated_checksum = generate_checksum_by_str(param_str, merchant_key, salt=salt)\r\n    return calculated_checksum == checksum\r\n\r\n\r\n\r\ndef __id_generator__(size=6, chars=string.ascii_uppercase + string.digits + string.ascii_lowercase):\r\n    return ''.join(random.choice(chars) for _ in range(size))\r\n\r\n\r\ndef __get_param_string__(params):\r\n    params_string = []\r\n    for key in sorted(params.keys()):\r\n        value = params[key]\r\n        params_string.append('' if value == 'null' else str(value))\r\n    return '|'.join(params_string)\r\n\r\n\r\n__pad__ = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)\r\n__unpad__ = lambda s: s[0:-ord(s[-1])]\r\n\r\n\r\ndef __encode__(to_encode, iv, key):\r\n    # Pad\r\n    to_encode = __pad__(to_encode)\r\n    # Encrypt\r\n    c = AES.new(key, AES.MODE_CBC, iv)\r\n    to_encode = c.encrypt(to_encode)\r\n    # Encode\r\n    to_encode = base64.b64encode(to_encode)\r\n    return to_encode\r\n\r\n\r\ndef __decode__(to_decode, iv, key):\r\n    # Decode\r\n    to_decode = base64.b64decode(to_decode)\r\n    # Decrypt\r\n    c = AES.new(key, AES.MODE_CBC, iv)\r\n    to_decode = c.decrypt(to_decode)\r\n    # remove pad\r\n    return __unpad__(to_decode)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    params = {\r\n        \"MID\": \"bKMfNxPPf_QdZppa\",\r\n        \"ORDER_ID\": \"1\",\r\n        \"CUST_ID\": \"1\",\r\n        \"TXN_AMOUNT\": \"100\",\r\n        \"CHANNEL_ID\": \"WEB\",\r\n        \"INDUSTRY_TYPE_ID\": \"Retail\",\r\n        \"WEBSITE\": \"WEB_STAGING\"\r\n    }\r\n...........................................................................................................................................................................................\r\nmy views page\r\n\r\nfrom django.shortcuts import render\r\nfrom django.http import HttpResponse\r\nfrom django.utils.translation import get_language\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.conf import settings\r\n\r\nfrom . import Checksum\r\n\r\n\r\nfrom .models import PaytmHistory\r\n# Create your views here.\r\n\r\n# @login_required\r\ndef home(request):\r\n    return HttpResponse(\"<html><a href='\"+ settings.HOST_URL +\"/paytm/payment'>PayNow</html>\")\r\n\r\n\r\ndef payment(request):\r\n    MERCHANT_KEY = settings.PAYTM_MERCHANT_KEY\r\n    MERCHANT_ID = settings.PAYTM_MERCHANT_ID\r\n    get_lang = \"/\" + get_language() if get_language() else ''\r\n    CALLBACK_URL = settings.HOST_URL + get_lang + settings.PAYTM_CALLBACK_URL\r\n    # Generating unique temporary ids\r\n    order_id = Checksum.__id_generator__()\r\n\r\n    bill_amount = 100\r\n    if bill_amount:\r\n        data_dict = {\r\n                    'MID':MERCHANT_ID,\r\n                    'ORDER_ID':order_id,\r\n                    'TXN_AMOUNT': bill_amount,\r\n                    'CUST_ID':'harish@pickrr.com',\r\n                    'INDUSTRY_TYPE_ID':'Retail',\r\n                    'WEBSITE': settings.PAYTM_WEBSITE,\r\n                    'CHANNEL_ID':'WEB',\r\n                    #'CALLBACK_URL':CALLBACK_URL,\r\n                }\r\n        param_dict = data_dict\r\n        param_dict['CHECKSUMHASH'] = Checksum.generate_checksum(data_dict, MERCHANT_KEY)\r\n        return render(request,\"payment.html\",{'paytmdict':param_dict})\r\n    return HttpResponse(\"Bill Amount Could not find. ?bill_amount=10\")\r\n\r\n\r\n@csrf_exempt\r\ndef response(request):\r\n    if request.method == \"POST\":\r\n        MERCHANT_KEY = settings.PAYTM_MERCHANT_KEY\r\n        data_dict = {}\r\n        for key in request.POST:\r\n            data_dict[key] = request.POST[key]\r\n        verify = Checksum.verify_checksum(data_dict, MERCHANT_KEY, data_dict['CHECKSUMHASH'])\r\n        if verify:\r\n            PaytmHistory.objects.create(user=request.user, **data_dict)\r\n            return render(request,\"response.html\",{\"paytm\":data_dict})\r\n        else:\r\n            return HttpResponse(\"checksum verify failed\")\r\n    return HttpResponse(status=200)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/359", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/359/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/359/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/359/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/359", "id": 549721653, "node_id": "MDU6SXNzdWU1NDk3MjE2NTM=", "number": 359, "title": "AES_CBC decrypt IV malfunction", "user": {"login": "Surya361", "id": 5567611, "node_id": "MDQ6VXNlcjU1Njc2MTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5567611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Surya361", "html_url": "https://github.com/Surya361", "followers_url": "https://api.github.com/users/Surya361/followers", "following_url": "https://api.github.com/users/Surya361/following{/other_user}", "gists_url": "https://api.github.com/users/Surya361/gists{/gist_id}", "starred_url": "https://api.github.com/users/Surya361/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Surya361/subscriptions", "organizations_url": "https://api.github.com/users/Surya361/orgs", "repos_url": "https://api.github.com/users/Surya361/repos", "events_url": "https://api.github.com/users/Surya361/events{/privacy}", "received_events_url": "https://api.github.com/users/Surya361/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-14T17:46:28Z", "updated_at": "2020-06-22T21:13:17Z", "closed_at": "2020-06-22T21:13:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "import os\r\nfrom Crypto.Cipher import AES\r\nKey = os.urandom(16)\r\nIv = os.urandom(16)\r\nencryption_suite = AES.new(Key, AES.MODE_CBC, Iv)\r\nprint(encryption_suite.decrypt(encryption_suite.encrypt(\"a\"*32)))\r\n\r\nThe above code prints a garbage first block \r\n$ python3 /tmp/bug.py\r\nb'\\xbd/>\\x02\\xb6\\xa7\\xb2\\x02\\xf0A\\xe2\\xe4l\\x8eL/aaaaaaaaaaaaaaaa'\r\n\r\ni believe its because decrypt call is assuming the Initialization vector is not present and creating a new one resulting in a garbage first block\r\n\r\nimport os\r\nfrom Crypto.Cipher import AES\r\nKey = os.urandom(16)\r\nIv = os.urandom(16)\r\nencryption_suite = AES.new(Key, AES.MODE_CBC, Iv)\r\ndecryption_suite =  AES.new(Key, AES.MODE_CBC, Iv)\r\nprint(decryption_suite.decrypt(encryption_suite.encrypt(\"a\"*32)))\r\n\r\nThe second code prints the plain text properly\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/358", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/358/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/358/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/358", "id": 549043456, "node_id": "MDU6SXNzdWU1NDkwNDM0NTY=", "number": 358, "title": "AES encryption/decryption", "user": {"login": "CapSparkle", "id": 25351821, "node_id": "MDQ6VXNlcjI1MzUxODIx", "avatar_url": "https://avatars3.githubusercontent.com/u/25351821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CapSparkle", "html_url": "https://github.com/CapSparkle", "followers_url": "https://api.github.com/users/CapSparkle/followers", "following_url": "https://api.github.com/users/CapSparkle/following{/other_user}", "gists_url": "https://api.github.com/users/CapSparkle/gists{/gist_id}", "starred_url": "https://api.github.com/users/CapSparkle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CapSparkle/subscriptions", "organizations_url": "https://api.github.com/users/CapSparkle/orgs", "repos_url": "https://api.github.com/users/CapSparkle/repos", "events_url": "https://api.github.com/users/CapSparkle/events{/privacy}", "received_events_url": "https://api.github.com/users/CapSparkle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-13T16:29:54Z", "updated_at": "2020-01-14T08:13:10Z", "closed_at": "2020-01-14T08:13:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please, explain me how i can be.\r\nAs you can see: \r\nplain != decrypt(encrypt(plain))\r\n\r\n![Boem8kV7Pzo](https://user-images.githubusercontent.com/25351821/72273238-943ae400-365c-11ea-85ed-c73bc7d9dad1.jpg)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/357", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/357/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/357/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/357", "id": 546070895, "node_id": "MDU6SXNzdWU1NDYwNzA4OTU=", "number": 357, "title": "Re-Run readthedocs build (#355)", "user": {"login": "Legorooj", "id": 50370070, "node_id": "MDQ6VXNlcjUwMzcwMDcw", "avatar_url": "https://avatars2.githubusercontent.com/u/50370070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Legorooj", "html_url": "https://github.com/Legorooj", "followers_url": "https://api.github.com/users/Legorooj/followers", "following_url": "https://api.github.com/users/Legorooj/following{/other_user}", "gists_url": "https://api.github.com/users/Legorooj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Legorooj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Legorooj/subscriptions", "organizations_url": "https://api.github.com/users/Legorooj/orgs", "repos_url": "https://api.github.com/users/Legorooj/repos", "events_url": "https://api.github.com/users/Legorooj/events{/privacy}", "received_events_url": "https://api.github.com/users/Legorooj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-07T04:23:08Z", "updated_at": "2020-02-02T21:48:29Z", "closed_at": "2020-02-02T21:48:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After the issue #355 and the *__merged__* pull-request #356 updating the docs, the changes have yet to be mirrored online at https://pycryptodome.readthedocs.io. This will only take the readthedocs account holder a second or two to initialize.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/355", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/355/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/355/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/355", "id": 543303451, "node_id": "MDU6SXNzdWU1NDMzMDM0NTE=", "number": 355, "title": "Typo Bug in the docs", "user": {"login": "Legorooj", "id": 50370070, "node_id": "MDQ6VXNlcjUwMzcwMDcw", "avatar_url": "https://avatars2.githubusercontent.com/u/50370070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Legorooj", "html_url": "https://github.com/Legorooj", "followers_url": "https://api.github.com/users/Legorooj/followers", "following_url": "https://api.github.com/users/Legorooj/following{/other_user}", "gists_url": "https://api.github.com/users/Legorooj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Legorooj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Legorooj/subscriptions", "organizations_url": "https://api.github.com/users/Legorooj/orgs", "repos_url": "https://api.github.com/users/Legorooj/repos", "events_url": "https://api.github.com/users/Legorooj/events{/privacy}", "received_events_url": "https://api.github.com/users/Legorooj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 609545399, "node_id": "MDU6TGFiZWw2MDk1NDUzOTk=", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/documentation", "name": "documentation", "color": "fbca04", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-29T01:43:15Z", "updated_at": "2020-01-02T09:06:18Z", "closed_at": "2020-01-02T09:06:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The documention says about `PBKDF2`:\r\n## For example, if you need to derive two AES256 keys:\r\n```\r\nfrom Crypto.Protocol.KDF import PBKDF2\r\nfrom Crypto.Hash import SHA512\r\nfrom Crypto.Random import get_random_bytes\r\n\r\npassword = b'my super secret'\r\nsalt = get_random_bytes(16)\r\nkeys = PBKDF2(password, salt, 32, count=1000000, hmac_hash_module=SHA512)\r\nkey1 = keys[:32]\r\nkey2 = keys[32:]\r\n```\r\nThe length of the key you are generating is `32` bytes, therefore `key1 = keys[:32], key2 = keys[32:]` are equal to `X*32` and `''`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/354", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/354/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/354/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/354", "id": 542119785, "node_id": "MDU6SXNzdWU1NDIxMTk3ODU=", "number": 354, "title": "target does not support header", "user": {"login": "0xFF1E071F", "id": 55749371, "node_id": "MDQ6VXNlcjU1NzQ5Mzcx", "avatar_url": "https://avatars1.githubusercontent.com/u/55749371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0xFF1E071F", "html_url": "https://github.com/0xFF1E071F", "followers_url": "https://api.github.com/users/0xFF1E071F/followers", "following_url": "https://api.github.com/users/0xFF1E071F/following{/other_user}", "gists_url": "https://api.github.com/users/0xFF1E071F/gists{/gist_id}", "starred_url": "https://api.github.com/users/0xFF1E071F/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0xFF1E071F/subscriptions", "organizations_url": "https://api.github.com/users/0xFF1E071F/orgs", "repos_url": "https://api.github.com/users/0xFF1E071F/repos", "events_url": "https://api.github.com/users/0xFF1E071F/events{/privacy}", "received_events_url": "https://api.github.com/users/0xFF1E071F/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-24T12:50:35Z", "updated_at": "2019-12-27T07:34:31Z", "closed_at": "2019-12-27T07:34:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Even though i have gcc-libs installed setup complains about these header files:\r\n```\r\nTesting support for clang\r\nTarget does not support clang\r\nTesting support for gcc\r\nTarget does support gcc\r\nTesting support for stdint.h header\r\nTarget does support stdint.h header\r\nTesting support for 128-bit integer\r\nTarget does support 128-bit integer\r\nTesting support for cpuid.h header\r\nTarget does support cpuid.h header\r\nTesting support for intrin.h header\r\nTarget does not support intrin.h header\r\nTesting support for posix_memalign\r\nTarget does support posix_memalign\r\nTesting support for SSE2(intrin.h)\r\nTarget does not support SSE2(intrin.h)\r\nTesting support for SSE2(x86intrin.h)\r\nTarget does support SSE2(x86intrin.h)\r\nTesting support for AESNI intrinsics\r\nTarget does support AESNI intrinsics\r\nCompiling support for AESNI instructions\r\nTesting support for CLMUL intrinsics\r\nTarget does support CLMUL intrinsics\r\nCompiling support for CLMUL instructions\r\nrunning build\r\nrunning build_py\r\ncreating build/lib.linux-x86_64-3.8\r\ncreating build/lib.linux-x86_64-3.8/Crypto\r\ncopying lib/Crypto/__init__.py -> build/lib.linux-x86_64-3.8/Crypto\r\n\r\n```\r\nBTW, i can successfully install pycryptodome on my system. i want to ask if this is a problem or not?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/353", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/353/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/353/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/353", "id": 541621302, "node_id": "MDU6SXNzdWU1NDE2MjEzMDI=", "number": 353, "title": "Bug with AES-CTR nonce sizes", "user": {"login": "Legorooj", "id": 50370070, "node_id": "MDQ6VXNlcjUwMzcwMDcw", "avatar_url": "https://avatars2.githubusercontent.com/u/50370070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Legorooj", "html_url": "https://github.com/Legorooj", "followers_url": "https://api.github.com/users/Legorooj/followers", "following_url": "https://api.github.com/users/Legorooj/following{/other_user}", "gists_url": "https://api.github.com/users/Legorooj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Legorooj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Legorooj/subscriptions", "organizations_url": "https://api.github.com/users/Legorooj/orgs", "repos_url": "https://api.github.com/users/Legorooj/repos", "events_url": "https://api.github.com/users/Legorooj/events{/privacy}", "received_events_url": "https://api.github.com/users/Legorooj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-12-23T07:33:43Z", "updated_at": "2020-01-19T06:19:56Z", "closed_at": "2019-12-23T08:11:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Unlike what your documentation says, your code doesn't accept the example nonce `b'legoroojlegorooj'`. When I run the below code, I get the error that is shown below that;\r\n```python\r\nNONCE = b'legoroojlegorooj'\r\naes = AES.new(KEY, AES.MODE_CTR, nonce=NONCE)\r\n```\r\n```\r\nValueError: Nonce is too long\r\n```\r\nThis is a bit of a nuisance for me, because I'm speedtesting this lib against some other crypto library's.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/352", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/352/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/352/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/352", "id": 536467441, "node_id": "MDU6SXNzdWU1MzY0Njc0NDE=", "number": 352, "title": "Typo in _PBES.py#L59", "user": {"login": "RockBomber", "id": 865905, "node_id": "MDQ6VXNlcjg2NTkwNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/865905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RockBomber", "html_url": "https://github.com/RockBomber", "followers_url": "https://api.github.com/users/RockBomber/followers", "following_url": "https://api.github.com/users/RockBomber/following{/other_user}", "gists_url": "https://api.github.com/users/RockBomber/gists{/gist_id}", "starred_url": "https://api.github.com/users/RockBomber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RockBomber/subscriptions", "organizations_url": "https://api.github.com/users/RockBomber/orgs", "repos_url": "https://api.github.com/users/RockBomber/repos", "events_url": "https://api.github.com/users/RockBomber/events{/privacy}", "received_events_url": "https://api.github.com/users/RockBomber/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-11T16:05:23Z", "updated_at": "2020-01-02T09:04:09Z", "closed_at": "2020-01-02T09:04:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/Legrandin/pycryptodome/blob/57c5ba7e3adee31207abc291f8815ab614ea9113/lib/Crypto/IO/_PBES.py#L59\r\n\r\nI think it's must be _OID_HMAC_SHA512 for  oid \"1.2.840.113549.2.11\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/350", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/350/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/350/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/350", "id": 527101122, "node_id": "MDU6SXNzdWU1MjcxMDExMjI=", "number": 350, "title": "Unexpected padding when length is a multiple of 16", "user": {"login": "pietjanssen", "id": 5436256, "node_id": "MDQ6VXNlcjU0MzYyNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5436256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietjanssen", "html_url": "https://github.com/pietjanssen", "followers_url": "https://api.github.com/users/pietjanssen/followers", "following_url": "https://api.github.com/users/pietjanssen/following{/other_user}", "gists_url": "https://api.github.com/users/pietjanssen/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietjanssen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietjanssen/subscriptions", "organizations_url": "https://api.github.com/users/pietjanssen/orgs", "repos_url": "https://api.github.com/users/pietjanssen/repos", "events_url": "https://api.github.com/users/pietjanssen/events{/privacy}", "received_events_url": "https://api.github.com/users/pietjanssen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-22T10:02:38Z", "updated_at": "2019-11-25T12:58:44Z", "closed_at": "2019-11-22T22:01:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "For my program I am encrypting a random length of data ~(10 to 256 bytes) using ECB and CBC.\r\n( I know ECB is not recommended, but I am only using it for scientific purposes)\r\n\r\nFor these mode of operations, you need to pad the data to a multiple of 16 bytes, but for some reason whenever I encrypt data that has a length of 16 itself, it will get a padding of 16 bytes too.\r\n\r\nFor example:\r\n```python\r\ndata = b'12340006WE1CV020'\r\ndata = pad(data, AES.block_size)\r\n\r\n# Data becomes b'12340006WE1CV020\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10' \r\n# New data length is 32 even though the data was already a multiple of 16.\r\n```\r\n\r\nI fixed it by changing the padding_len in the pad function to\r\n**padding_len = (block_size-len(data_to_pad))%block_size**\r\n```python\r\ndef pad(data_to_pad, block_size, style='pkcs7'):\r\n    ...\r\n    ...\r\n    padding_len = block_size-len(data_to_pad)%block_size\r\n    if style == 'pkcs7':\r\n        padding = bchr(padding_len)*padding_len\r\n    elif style == 'x923':\r\n        padding = bchr(0)*(padding_len-1) + bchr(padding_len)\r\n    elif style == 'iso7816':\r\n        padding = bchr(128) + bchr(0)*(padding_len-1)\r\n    else:\r\n        raise ValueError(\"Unknown padding style\")\r\n    return data_to_pad + padding\r\n```\r\n\r\nOr is there a reason why the data still gets a padding of 16, even though it doesn't need it? Is it for extra obscurity of the data by padding every message?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/347", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/347/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/347/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/347", "id": 524383915, "node_id": "MDU6SXNzdWU1MjQzODM5MTU=", "number": 347, "title": "Given a private key with primes that differ by a large order of magnitude, RSA decryption effectively stalls", "user": {"login": "mjpieters", "id": 46775, "node_id": "MDQ6VXNlcjQ2Nzc1", "avatar_url": "https://avatars3.githubusercontent.com/u/46775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjpieters", "html_url": "https://github.com/mjpieters", "followers_url": "https://api.github.com/users/mjpieters/followers", "following_url": "https://api.github.com/users/mjpieters/following{/other_user}", "gists_url": "https://api.github.com/users/mjpieters/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjpieters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjpieters/subscriptions", "organizations_url": "https://api.github.com/users/mjpieters/orgs", "repos_url": "https://api.github.com/users/mjpieters/repos", "events_url": "https://api.github.com/users/mjpieters/events{/privacy}", "received_events_url": "https://api.github.com/users/mjpieters/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1290271601, "node_id": "MDU6TGFiZWwxMjkwMjcxNjAx", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/fix_available", "name": "fix_available", "color": "c2e0c6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-18T13:56:33Z", "updated_at": "2019-11-18T18:43:04Z", "closed_at": "2019-11-18T18:43:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "The author of [this Stack Overflow question](https://stackoverflow.com/q/58913299/100297) tried to experiment with weak private keys by using a very, very small value for one of the primes in the key. In the following private key, *q* has been set to **5**:\r\n\r\n```none\r\n-----BEGIN RSA PRIVATE KEY-----\r\nMIIFJAIBAAKCAQEAzdoCzKqtgJs+n66H89khIqgqg4LxAq56FkU0wP9TgcStI0R8\r\nlswVoAep0bC+2Hs1gwwZJBPH1UHn9NcmYHcxUCboemEZGCdfw+3jBGd7EPJx02Av\r\n0QVSHmKTyOh9e/Cc1z+lyI4042T3Tm2Q6xFQOtunzSKrgViN2zMD2sCar7lBM6Kd\r\n5ckBiHs/etgT+mZAW7QkSNb/jOz3Uuhw4z7vey5YewtekfVpGcdkI/XsyVc7TSqk\r\niBLd8bNyE0XebAp27yB7/RoUf2yPQ0jrIk4IRk7ecWESSgeDswa28a7Np8OGPGtu\r\nZ2ev4SQOQEbbXFEofIjDcxJZvhvVPiNeVI9WIwIDAQABAoIBAQCRUVIHAbllJjLz\r\nSKMY9Zl6sC4y+mdn3Gi7YZrek/oNJenD3j+ShMgCjOZiug8MuKdyHg9+QUIhvidT\r\n1+TaCWRHXPAvVG4B3lBKLgLEKfkRLm93jlnmVYc/HZmOWItQYokvoVlIJEiALqQw\r\noKn2B+bg/6eM6bWBCu6f/q3xHP6v0ziM890O4vNK630VgrlRXCKBM/S/2jPVXIOZ\r\nHhYMyXHUcUc56MpkgSAmeEF6HjKzGZP3fOvH7VAlphp/ZVduYrf+eRD0zOOjgK0y\r\nDQvqaVCJS0WlBg3ozNBs7yFYdzpSY3XwuTZ0yrG4+I16ISTbt6W8V4Y1rPXfF7u8\r\nSsn3KXWpAoIBACkrmiju74AfDIZWGzDFBqCICICzyc1WGGrapCaZdxn0IqCnTB4o\r\n0SABiF0jWV5/CrPPODpqWyqmx/3EoUZ+PRAHyBh50dGheY2V+jQUsjaW45Cs1l0B\r\nEGx6HY6U5eWWhcSmVFtPpC16l9x8UC8DdnIr7lw6Ik0RtfijzZImhVZYQD2G7GEo\r\nM4GyP+VeamVHpni9oNteMxwvZKoufPo/yX8JROVorIOXe2uORzpkYo6rC9w7uoGd\r\nX5a9fTcN+UjO5JY5smXSBBl8HKcOlW1CznR2LH0Tag7OTYo0iv0i9e5aTgwVfHsU\r\nvMagz6Z0kkWp1OW08+PQeFk4xD+grHdP3gcCAQUCggEAFc6DjDTq5MkNYEZRhqaF\r\nmRgUsN8J/9ofetGuaseUv0mB4ehbOApUoohNS1AC8TuHVrBmzwIwocnPWooBBo6t\r\nF0WX5eb4jPnjoWwUJ+vibWnExYfWz1JV+a9A4pnZn5734a5cNjVb977cmyu5aP2D\r\ninvceDtOmdXMthNFOqlurMp31F8X62pYxdS9ZWd6IYUvFvsSLb+agM5VmpKfHgoV\r\nV1V4ia7E2bqt481ryvELBxhwYsm8QxUxYW2i2jtrk/YKO8v5w1bXVwxXPOFLoqDl\r\nK+jALcvPvGHnzlGAYQ5Yh1SLzHjBA4x7ZRYehsNuCronCziqijuM021u/WjEkTnb\r\nlwIBAQKCAQAg766HJYxmfz04ROKNamuzoAbNXKFxEa0iSINSFF9H9oIaH3AYIKdM\r\nzgaw6RRLmNVcpcaVIeKIhWzLA7Q4ZP2mbKATlKfa55RxRMgpqigrq+lAikUXNA0j\r\nlORyELfq3tFqHqniphzxLt/jlqaMAsUoIyUWlOg9p8TG6XFBuGqrecz+BYnnU1xn\r\nwcy3fruEOVH6MU18S1wWjFCIJTDIMweY1Dcd7VbPrGK8cdKVHRulVaMWli7OF3+r\r\nysqScZQ6Px1E+vUeQZzhMBbsC6q9zwuQXon9qSGlcdehw6JkG/fx4dgJqsn8EJcF\r\nTXLrkHUEh92EkMMcpsatxwNmGiOSpks5\r\n-----END RSA PRIVATE KEY-----\r\n```\r\n\r\nThe first prime (*p*) is a 617-digit value:\r\n\r\n```sh\r\n$ openssl rsa -in private.key -text -noout | sed '/prime1:/,/prime2:/!d;/prime2:/q'\r\nprime1:\r\n    29:2b:9a:28:ee:ef:80:1f:0c:86:56:1b:30:c5:06:\r\n    a0:88:08:80:b3:c9:cd:56:18:6a:da:a4:26:99:77:\r\n    19:f4:22:a0:a7:4c:1e:28:d1:20:01:88:5d:23:59:\r\n    5e:7f:0a:b3:cf:38:3a:6a:5b:2a:a6:c7:fd:c4:a1:\r\n    46:7e:3d:10:07:c8:18:79:d1:d1:a1:79:8d:95:fa:\r\n    34:14:b2:36:96:e3:90:ac:d6:5d:01:10:6c:7a:1d:\r\n    8e:94:e5:e5:96:85:c4:a6:54:5b:4f:a4:2d:7a:97:\r\n    dc:7c:50:2f:03:76:72:2b:ee:5c:3a:22:4d:11:b5:\r\n    f8:a3:cd:92:26:85:56:58:40:3d:86:ec:61:28:33:\r\n    81:b2:3f:e5:5e:6a:65:47:a6:78:bd:a0:db:5e:33:\r\n    1c:2f:64:aa:2e:7c:fa:3f:c9:7f:09:44:e5:68:ac:\r\n    83:97:7b:6b:8e:47:3a:64:62:8e:ab:0b:dc:3b:ba:\r\n    81:9d:5f:96:bd:7d:37:0d:f9:48:ce:e4:96:39:b2:\r\n    65:d2:04:19:7c:1c:a7:0e:95:6d:42:ce:74:76:2c:\r\n    7d:13:6a:0e:ce:4d:8a:34:8a:fd:22:f5:ee:5a:4e:\r\n    0c:15:7c:7b:14:bc:c6:a0:cf:a6:74:92:45:a9:d4:\r\n    e5:b4:f3:e3:d0:78:59:38:c4:3f:a0:ac:77:4f:de:\r\n    07\r\nprime2: 5 (0x5)\r\n```\r\n\r\nWhile this is otherwise a terrible idea, this key triggers a catastrophically slow `while` loop in the  PyCryptodome implementation of step 3 of the RSA decryption algorithm:\r\n\r\nhttps://github.com/Legrandin/pycryptodome/blob/efdb4065fc80262dbe65cdd0d02eac82d521f258/lib/Crypto/PublicKey/RSA.py#L158-L165\r\n\r\nBecause `q` is so small but `p` is a 617-digit prime number, `m1` is a 616-digit integer, and `m2` is *3*, and so `h` is a negative 616-digit integer. The `while h < 0: h += self._q` loop is going to take a very, very, very long time (`abs(h // self._q)` is itself a 615 digit number). This is going to *very long time*. Adding a small `IntegerGMP(5)` value to a 616-digit `IntegerGMP()` value 1 million times already takes nearly 6 seconds on my aging MacBook Pro:\r\n\r\n```\r\ntimeit(\"a + b\", \"from Crypto.Math._IntegerGMP import IntegerGMP as H; a = H(-529888206800322351142280698970509553244088870105926093960960600839997948364537263924658051221855219286822834908160253952313431263065035892252247530580840707934254014192645042780064071400938165792458671917549294961637063901428635522475550885330295366860440266592481901428697979715456902249133738633092402578072834537512045684962133176512203248846326955899359525113708331947304401283815041620003402445741404924361709787545141518988924507726836779489762118740731196007268258996956015186886831392340919980371282865371496239488099989353283964607756716132847721450221986689589881754517900556993453537792486255692015472770); b = H(5)\")\r\n5.970772444999966\r\n```\r\n\r\n10 ^ 609 times that time results in a runtime that takes 607 digits just to express the number of *centuries* we'd have to wait.\r\n\r\nThe `while h < 0: h += h` loop could trivially be replaced with a modulus operation, however; Python's `%` operator produces the remainder [with the same sign as the divisor](https://stackoverflow.com/questions/3883004/the-modulo-operation-on-negative-numbers-in-python). So when I replace the `while h < 0:` loop with a modulus operation the result is almost instantaneous:\r\n\r\n```python\r\nif h < 0:\r\n    h = h % self._q   # or h %= self._q\r\n```\r\n\r\nThe cost of a single `%` operation is about the same as addition (timeit takes 6.428032868000173 seconds for a million repeats on the same aging laptop), but it only has to be executed once. The time taken when *q* is a large prime with comparable magnitude barely increases.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/346", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/346/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/346/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/346", "id": 524363965, "node_id": "MDU6SXNzdWU1MjQzNjM5NjU=", "number": 346, "title": "RSA Private key with exponent2: 1 fails to load", "user": {"login": "mjpieters", "id": 46775, "node_id": "MDQ6VXNlcjQ2Nzc1", "avatar_url": "https://avatars3.githubusercontent.com/u/46775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjpieters", "html_url": "https://github.com/mjpieters", "followers_url": "https://api.github.com/users/mjpieters/followers", "following_url": "https://api.github.com/users/mjpieters/following{/other_user}", "gists_url": "https://api.github.com/users/mjpieters/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjpieters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjpieters/subscriptions", "organizations_url": "https://api.github.com/users/mjpieters/orgs", "repos_url": "https://api.github.com/users/mjpieters/repos", "events_url": "https://api.github.com/users/mjpieters/events{/privacy}", "received_events_url": "https://api.github.com/users/mjpieters/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-18T13:21:04Z", "updated_at": "2019-11-18T15:22:44Z", "closed_at": "2019-11-18T15:22:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following private key (from [this Stack Overflow question](https://stackoverflow.com/q/58913299/100297)) can't be loaded with PyCryptodome:\r\n\r\n```none\r\n-----BEGIN RSA PRIVATE KEY-----\r\nMIIFJAIBAAKCAQEAzdoCzKqtgJs+n66H89khIqgqg4LxAq56FkU0wP9TgcStI0R8\r\nlswVoAep0bC+2Hs1gwwZJBPH1UHn9NcmYHcxUCboemEZGCdfw+3jBGd7EPJx02Av\r\n0QVSHmKTyOh9e/Cc1z+lyI4042T3Tm2Q6xFQOtunzSKrgViN2zMD2sCar7lBM6Kd\r\n5ckBiHs/etgT+mZAW7QkSNb/jOz3Uuhw4z7vey5YewtekfVpGcdkI/XsyVc7TSqk\r\niBLd8bNyE0XebAp27yB7/RoUf2yPQ0jrIk4IRk7ecWESSgeDswa28a7Np8OGPGtu\r\nZ2ev4SQOQEbbXFEofIjDcxJZvhvVPiNeVI9WIwIDAQABAoIBAQCRUVIHAbllJjLz\r\nSKMY9Zl6sC4y+mdn3Gi7YZrek/oNJenD3j+ShMgCjOZiug8MuKdyHg9+QUIhvidT\r\n1+TaCWRHXPAvVG4B3lBKLgLEKfkRLm93jlnmVYc/HZmOWItQYokvoVlIJEiALqQw\r\noKn2B+bg/6eM6bWBCu6f/q3xHP6v0ziM890O4vNK630VgrlRXCKBM/S/2jPVXIOZ\r\nHhYMyXHUcUc56MpkgSAmeEF6HjKzGZP3fOvH7VAlphp/ZVduYrf+eRD0zOOjgK0y\r\nDQvqaVCJS0WlBg3ozNBs7yFYdzpSY3XwuTZ0yrG4+I16ISTbt6W8V4Y1rPXfF7u8\r\nSsn3KXWpAoIBACkrmiju74AfDIZWGzDFBqCICICzyc1WGGrapCaZdxn0IqCnTB4o\r\n0SABiF0jWV5/CrPPODpqWyqmx/3EoUZ+PRAHyBh50dGheY2V+jQUsjaW45Cs1l0B\r\nEGx6HY6U5eWWhcSmVFtPpC16l9x8UC8DdnIr7lw6Ik0RtfijzZImhVZYQD2G7GEo\r\nM4GyP+VeamVHpni9oNteMxwvZKoufPo/yX8JROVorIOXe2uORzpkYo6rC9w7uoGd\r\nX5a9fTcN+UjO5JY5smXSBBl8HKcOlW1CznR2LH0Tag7OTYo0iv0i9e5aTgwVfHsU\r\nvMagz6Z0kkWp1OW08+PQeFk4xD+grHdP3gcCAQUCggEAFc6DjDTq5MkNYEZRhqaF\r\nmRgUsN8J/9ofetGuaseUv0mB4ehbOApUoohNS1AC8TuHVrBmzwIwocnPWooBBo6t\r\nF0WX5eb4jPnjoWwUJ+vibWnExYfWz1JV+a9A4pnZn5734a5cNjVb977cmyu5aP2D\r\ninvceDtOmdXMthNFOqlurMp31F8X62pYxdS9ZWd6IYUvFvsSLb+agM5VmpKfHgoV\r\nV1V4ia7E2bqt481ryvELBxhwYsm8QxUxYW2i2jtrk/YKO8v5w1bXVwxXPOFLoqDl\r\nK+jALcvPvGHnzlGAYQ5Yh1SLzHjBA4x7ZRYehsNuCronCziqijuM021u/WjEkTnb\r\nlwIBAQKCAQAg766HJYxmfz04ROKNamuzoAbNXKFxEa0iSINSFF9H9oIaH3AYIKdM\r\nzgaw6RRLmNVcpcaVIeKIhWzLA7Q4ZP2mbKATlKfa55RxRMgpqigrq+lAikUXNA0j\r\nlORyELfq3tFqHqniphzxLt/jlqaMAsUoIyUWlOg9p8TG6XFBuGqrecz+BYnnU1xn\r\nwcy3fruEOVH6MU18S1wWjFCIJTDIMweY1Dcd7VbPrGK8cdKVHRulVaMWli7OF3+r\r\nysqScZQ6Px1E+vUeQZzhMBbsC6q9zwuQXon9qSGlcdehw6JkG/fx4dgJqsn8EJcF\r\nTXLrkHUEh92EkMMcpsatxwNmGiOSpks5\r\n-----END RSA PRIVATE KEY-----\r\n```\r\n\r\nThis key has been 'weakened' by the author, to see what happens when one of the primes is not large; *q* is set to 5. (This issue is not about how terrible an idea that is).\r\n\r\nPyCryptodome doesn't like the `u = 1` value in it (`u` is `exponent2:`):\r\n\r\n```sh\r\n$ openssl rsa -in private.key -text -noout\r\n# ... lines omitted ...\r\nexponent2: 1 (0x1)\r\n```\r\n\r\nHowever, openssl deems the key valid:\r\n\r\n```sh\r\n$ openssl rsa -in private.key -check -noout\r\nRSA key ok\r\n```\r\n\r\nand so other projects (like `cryptography`) have no issues loading it. Should the following lines:\r\n\r\nhttps://github.com/Legrandin/pycryptodome/blob/efdb4065fc80262dbe65cdd0d02eac82d521f258/lib/Crypto/PublicKey/RSA.py#L606-L607\r\n\r\nbe altered to use `if u < 1 or u >= q:` (or use `if not (1 <= u < q):)`, instead?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/345", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/345/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/345/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/345", "id": 524336233, "node_id": "MDU6SXNzdWU1MjQzMzYyMzM=", "number": 345, "title": "Function call to PKCS1_OAEP decrypt hangs indefinitely", "user": {"login": "VanDaeleInformationSecurity", "id": 48909460, "node_id": "MDQ6VXNlcjQ4OTA5NDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/48909460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VanDaeleInformationSecurity", "html_url": "https://github.com/VanDaeleInformationSecurity", "followers_url": "https://api.github.com/users/VanDaeleInformationSecurity/followers", "following_url": "https://api.github.com/users/VanDaeleInformationSecurity/following{/other_user}", "gists_url": "https://api.github.com/users/VanDaeleInformationSecurity/gists{/gist_id}", "starred_url": "https://api.github.com/users/VanDaeleInformationSecurity/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VanDaeleInformationSecurity/subscriptions", "organizations_url": "https://api.github.com/users/VanDaeleInformationSecurity/orgs", "repos_url": "https://api.github.com/users/VanDaeleInformationSecurity/repos", "events_url": "https://api.github.com/users/VanDaeleInformationSecurity/events{/privacy}", "received_events_url": "https://api.github.com/users/VanDaeleInformationSecurity/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-18T12:27:38Z", "updated_at": "2019-11-18T15:39:53Z", "closed_at": "2019-11-18T15:39:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear,\r\n\r\nI have recently encountered a bug in pycryptodome where a call to decrypt hangs indefinitely.\r\n\r\nWhen using the following piece of code:\r\n\r\n```\r\nfrom Crypto.PublicKey import RSA\r\nfrom Crypto.Cipher import PKCS1_OAEP\r\nimport Crypto.Util\r\nfrom base64 import *\r\n\r\ndef encryptMsg(rsakey, message):\r\n    cipher = PKCS1_OAEP.new(rsakey)\r\n    ct = cipher.encrypt(message)\r\n    return ct\r\n\r\ndef decryptMsg(rsakey, message):\r\n    cipher = PKCS1_OAEP.new(rsakey)\r\n    pt = cipher.decrypt(message)\r\n    return pt\r\n\r\nkey = RSA.importKey(open('private.key').read())\r\ntestpk = key.publickey()\r\nmessage = b64encode(encryptMsg(testpk, b\"test message\"))\r\nprint(message)\r\nprint(decryptMsg(key, b64decode(message)))\r\n```\r\n\r\nOn this private key:\r\n```\r\n-----BEGIN RSA PRIVATE KEY-----\r\nMIIFJAIBAAKCAQEAzdoCzKqtgJs+n66H89khIqgqg4LxAq56FkU0wP9TgcStI0R8\r\nlswVoAep0bC+2Hs1gwwZJBPH1UHn9NcmYHcxUCboemEZGCdfw+3jBGd7EPJx02Av\r\n0QVSHmKTyOh9e/Cc1z+lyI4042T3Tm2Q6xFQOtunzSKrgViN2zMD2sCar7lBM6Kd\r\n5ckBiHs/etgT+mZAW7QkSNb/jOz3Uuhw4z7vey5YewtekfVpGcdkI/XsyVc7TSqk\r\niBLd8bNyE0XebAp27yB7/RoUf2yPQ0jrIk4IRk7ecWESSgeDswa28a7Np8OGPGtu\r\nZ2ev4SQOQEbbXFEofIjDcxJZvhvVPiNeVI9WIwIDAQABAoIBAQCRUVIHAbllJjLz\r\nSKMY9Zl6sC4y+mdn3Gi7YZrek/oNJenD3j+ShMgCjOZiug8MuKdyHg9+QUIhvidT\r\n1+TaCWRHXPAvVG4B3lBKLgLEKfkRLm93jlnmVYc/HZmOWItQYokvoVlIJEiALqQw\r\noKn2B+bg/6eM6bWBCu6f/q3xHP6v0ziM890O4vNK630VgrlRXCKBM/S/2jPVXIOZ\r\nHhYMyXHUcUc56MpkgSAmeEF6HjKzGZP3fOvH7VAlphp/ZVduYrf+eRD0zOOjgK0y\r\nDQvqaVCJS0WlBg3ozNBs7yFYdzpSY3XwuTZ0yrG4+I16ISTbt6W8V4Y1rPXfF7u8\r\nSsn3KXWpAoIBACkrmiju74AfDIZWGzDFBqCICICzyc1WGGrapCaZdxn0IqCnTB4o\r\n0SABiF0jWV5/CrPPODpqWyqmx/3EoUZ+PRAHyBh50dGheY2V+jQUsjaW45Cs1l0B\r\nEGx6HY6U5eWWhcSmVFtPpC16l9x8UC8DdnIr7lw6Ik0RtfijzZImhVZYQD2G7GEo\r\nM4GyP+VeamVHpni9oNteMxwvZKoufPo/yX8JROVorIOXe2uORzpkYo6rC9w7uoGd\r\nX5a9fTcN+UjO5JY5smXSBBl8HKcOlW1CznR2LH0Tag7OTYo0iv0i9e5aTgwVfHsU\r\nvMagz6Z0kkWp1OW08+PQeFk4xD+grHdP3gcCAQUCggEAFc6DjDTq5MkNYEZRhqaF\r\nmRgUsN8J/9ofetGuaseUv0mB4ehbOApUoohNS1AC8TuHVrBmzwIwocnPWooBBo6t\r\nF0WX5eb4jPnjoWwUJ+vibWnExYfWz1JV+a9A4pnZn5734a5cNjVb977cmyu5aP2D\r\ninvceDtOmdXMthNFOqlurMp31F8X62pYxdS9ZWd6IYUvFvsSLb+agM5VmpKfHgoV\r\nV1V4ia7E2bqt481ryvELBxhwYsm8QxUxYW2i2jtrk/YKO8v5w1bXVwxXPOFLoqDl\r\nK+jALcvPvGHnzlGAYQ5Yh1SLzHjBA4x7ZRYehsNuCronCziqijuM021u/WjEkTnb\r\nlwIBAQKCAQAg766HJYxmfz04ROKNamuzoAbNXKFxEa0iSINSFF9H9oIaH3AYIKdM\r\nzgaw6RRLmNVcpcaVIeKIhWzLA7Q4ZP2mbKATlKfa55RxRMgpqigrq+lAikUXNA0j\r\nlORyELfq3tFqHqniphzxLt/jlqaMAsUoIyUWlOg9p8TG6XFBuGqrecz+BYnnU1xn\r\nwcy3fruEOVH6MU18S1wWjFCIJTDIMweY1Dcd7VbPrGK8cdKVHRulVaMWli7OF3+r\r\nysqScZQ6Px1E+vUeQZzhMBbsC6q9zwuQXon9qSGlcdehw6JkG/fx4dgJqsn8EJcF\r\nTXLrkHUEh92EkMMcpsatxwNmGiOSpks5\r\n-----END RSA PRIVATE KEY-----\r\n```\r\nMy call to decrypt seems to hang indefinitely. Stackoverflow thread for reference: https://stackoverflow.com/questions/58913299/function-call-to-decrypt-message-hangs-indefinitely\r\n\r\nKind regards,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/344", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/344/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/344/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/344", "id": 523856147, "node_id": "MDU6SXNzdWU1MjM4NTYxNDc=", "number": 344, "title": "Install without PIP", "user": {"login": "andrewcollier-com-au", "id": 55337870, "node_id": "MDQ6VXNlcjU1MzM3ODcw", "avatar_url": "https://avatars2.githubusercontent.com/u/55337870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewcollier-com-au", "html_url": "https://github.com/andrewcollier-com-au", "followers_url": "https://api.github.com/users/andrewcollier-com-au/followers", "following_url": "https://api.github.com/users/andrewcollier-com-au/following{/other_user}", "gists_url": "https://api.github.com/users/andrewcollier-com-au/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewcollier-com-au/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewcollier-com-au/subscriptions", "organizations_url": "https://api.github.com/users/andrewcollier-com-au/orgs", "repos_url": "https://api.github.com/users/andrewcollier-com-au/repos", "events_url": "https://api.github.com/users/andrewcollier-com-au/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewcollier-com-au/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-11-16T15:09:22Z", "updated_at": "2020-04-08T16:08:29Z", "closed_at": "2020-04-08T16:08:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "how can i install this without using pip? im sure everyone in the python world uses pip but Darwin is being an ass plus it restricts the ability for my code to be portable. any advice on how to get past the \"\r\nTraceback (most recent call last):\r\n  File \"/Users/andrew/Documents/GitHub/Libre/pycryptodome/setup.py\", line 455, in <module>\r\n    with open(os.path.join(\"lib\", package_root, \"__init__.py\")) as init_root:\r\nFileNotFoundError: [Errno 2] No such file or directory: 'lib/Crypto/__init__.py'\r\n\"\r\nerror when running as setup.py as sudo \r\n\r\nThanks for your help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/342", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/342/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/342/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/342", "id": 523599298, "node_id": "MDU6SXNzdWU1MjM1OTkyOTg=", "number": 342, "title": "Encrypt a large file AES-128-CBC ValueError: Padding is incorrect.", "user": {"login": "louishot", "id": 5671033, "node_id": "MDQ6VXNlcjU2NzEwMzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5671033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/louishot", "html_url": "https://github.com/louishot", "followers_url": "https://api.github.com/users/louishot/followers", "following_url": "https://api.github.com/users/louishot/following{/other_user}", "gists_url": "https://api.github.com/users/louishot/gists{/gist_id}", "starred_url": "https://api.github.com/users/louishot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/louishot/subscriptions", "organizations_url": "https://api.github.com/users/louishot/orgs", "repos_url": "https://api.github.com/users/louishot/repos", "events_url": "https://api.github.com/users/louishot/events{/privacy}", "received_events_url": "https://api.github.com/users/louishot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-11-15T17:34:17Z", "updated_at": "2020-05-07T20:08:12Z", "closed_at": "2020-05-07T20:08:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI'm try to use Encrypt a large file but try to decrypt this file got a error!\r\n\r\nI tried to encrypt & decrypt a 11 byte txt file, it working perfectly, but tried a 50mb file get the error\r\n\r\n```\r\n    text = unpad(cryptor.decrypt(data),16)\r\n  File \"C:\\Python\\Python38-32\\lib\\site-packages\\Crypto\\Util\\Padding.py\", line 90, in unpad\r\n    raise ValueError(\"Padding is incorrect.\")\r\nValueError: Padding is incorrect.\r\n```\r\n```\r\n\r\nimport os\r\nimport hashlib\r\nimport binascii\r\nfrom Crypto.Cipher import AES\r\n\r\nfrom Crypto.Util.Padding import pad, unpad\r\n\r\n\r\ndef aes_decode(data, key):\r\n    cryptor = AES.new(key, AES.MODE_CBC, key)\r\n    text = unpad(cryptor.decrypt(data),16)\r\n    return text\r\n    #return text.rstrip(b'\\0')  # .decode(\"utf-8\")\r\n\r\n\r\ndef aes_encode(data, key):\r\n    cryptor = AES.new(key, AES.MODE_CBC, key)\r\n    text = cryptor.encrypt(pad(data,16))\r\n    return text\r\n\r\n\r\n\r\ndef encrypt_by_aes(file_path,new_file_path,password):\r\n    aes_pass = password\r\n    aes_key = hashlib.md5(aes_pass.encode('utf-8')).hexdigest()\r\n    print(aes_key)\r\n    aes_key = binascii.unhexlify(aes_key)\r\n\r\n\r\n    if os.path.exists(new_file_path):\r\n        os.remove(new_file_path)\r\n\r\n    file = open(file_path, 'rb')\r\n    file_size = os.path.getsize(file_path)\r\n    CHUNK_SIZE = 16*1024*1024\r\n\r\n    while file.tell() < file_size:\r\n        data = file.read(CHUNK_SIZE)\r\n        if data:\r\n            with open(new_file_path, 'ab') as f:\r\n                f.write(aes_encode(data, aes_key))\r\n        else:\r\n            break\r\n    print(\"encode %s OK!\" % file_path)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ndef decrypt_by_aes(file_path,new_file_path,password):\r\n    aes_pass = password\r\n    aes_key = hashlib.md5(aes_pass.encode('utf-8')).hexdigest()\r\n    print(aes_key)\r\n    aes_key = binascii.unhexlify(aes_key)\r\n\r\n\r\n    if os.path.exists(new_file_path):\r\n        os.remove(new_file_path)\r\n\r\n    file = open(file_path, 'rb')\r\n    file_size = os.path.getsize(file_path)\r\n    CHUNK_SIZE = 16*1024*1024\r\n\r\n    while file.tell() < file_size:\r\n        data = file.read(CHUNK_SIZE)\r\n        if data:\r\n            with open(new_file_path, 'ab') as f:\r\n                f.write(aes_decode(data, aes_key))\r\n        else:\r\n            break\r\n    print(\"encode %s OK!\" % file_path)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nencrypt_by_aes('LICENSE.txt','LICENSE_.txt','123')\r\ndecrypt_by_aes('LICENSE_.txt','LICENSE__.txt','123')\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/340", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/340/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/340/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/340/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/340", "id": 521730204, "node_id": "MDU6SXNzdWU1MjE3MzAyMDQ=", "number": 340, "title": "key_to_english does not raise error when feeding with invalid data (length must be a multiple of 8)", "user": {"login": "vstoykovbg", "id": 8617698, "node_id": "MDQ6VXNlcjg2MTc2OTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/8617698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vstoykovbg", "html_url": "https://github.com/vstoykovbg", "followers_url": "https://api.github.com/users/vstoykovbg/followers", "following_url": "https://api.github.com/users/vstoykovbg/following{/other_user}", "gists_url": "https://api.github.com/users/vstoykovbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/vstoykovbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vstoykovbg/subscriptions", "organizations_url": "https://api.github.com/users/vstoykovbg/orgs", "repos_url": "https://api.github.com/users/vstoykovbg/repos", "events_url": "https://api.github.com/users/vstoykovbg/events{/privacy}", "received_events_url": "https://api.github.com/users/vstoykovbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1290271601, "node_id": "MDU6TGFiZWwxMjkwMjcxNjAx", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/fix_available", "name": "fix_available", "color": "c2e0c6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-12T18:40:41Z", "updated_at": "2019-11-18T21:19:40Z", "closed_at": "2019-11-18T21:19:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Most users do not read the documentation thoroughly. \r\n\r\nThis is why functions should be idiot-proof.\r\n\r\nI just stumbled upon this bug. Tried to feed `key_to_english` with invalid data and was wondering why the reverse function (`english_to_key`) complain about parity error.\r\n\r\nHere is my code I wrote because I did not RTFM before coding. (I just glanced it.)\r\n```\r\n#!/usr/bin/python3\r\n\r\nimport os\r\nimport binascii\r\nfrom Cryptodome.Util import RFC1751\r\n\r\n#key = os.urandom(16) # Generate 16 random bytes (128 bits)\r\nkey = \"Test hehe\".encode(\"utf8\")\r\n\r\nprint (\"Hex Key:\\t\",binascii.hexlify(key))\r\n\r\ny = RFC1751.key_to_english(key)\r\nprint (\"Plain text key:\\t\",y)\r\n\r\nkey = RFC1751.english_to_key(y)\r\nprint (\"\\n\\nReverse:\\t\",binascii.hexlify(key))\r\n```\r\n\r\n```\r\n$ ./crypto-magic-test-cryptodome.py\r\nHex Key:\t b'546573742068656865'\r\nPlain text key:\t BEAK NET SITE TIN FREE LUND CHAT A A A A A\r\nTraceback (most recent call last):\r\n  File \"./crypto-magic-test-cryptodome.py\", line 15, in <module>\r\n    key = RFC1751.english_to_key(y)\r\n  File \"/usr/lib/python3/dist-packages/Cryptodome/Util/RFC1751.py\", line 116, in english_to_key\r\n    raise ValueError(\"Parity error in resulting key\")\r\nValueError: Parity error in resulting key\r\n```\r\n\r\nTested it with `Crypto.Util`, the same bug is present. https://github.com/dlitz/pycrypto/issues/295", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/339", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/339/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/339/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/339", "id": 521622357, "node_id": "MDU6SXNzdWU1MjE2MjIzNTc=", "number": 339, "title": "Alternative public-key ciphers to RSA?", "user": {"login": "pakal", "id": 330629, "node_id": "MDQ6VXNlcjMzMDYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/330629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pakal", "html_url": "https://github.com/pakal", "followers_url": "https://api.github.com/users/pakal/followers", "following_url": "https://api.github.com/users/pakal/following{/other_user}", "gists_url": "https://api.github.com/users/pakal/gists{/gist_id}", "starred_url": "https://api.github.com/users/pakal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pakal/subscriptions", "organizations_url": "https://api.github.com/users/pakal/orgs", "repos_url": "https://api.github.com/users/pakal/repos", "events_url": "https://api.github.com/users/pakal/events{/privacy}", "received_events_url": "https://api.github.com/users/pakal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-12T15:30:53Z", "updated_at": "2019-11-16T10:27:08Z", "closed_at": "2019-11-15T22:19:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI would like, for the hybrid encryption system of the Witness Angel (https://github.com/WitnessAngel), to protect the symmetric keys used with several layers of encryption, using different kinds of public key systems (based on different mathematical problems), not just RSA.\r\n\r\nI've seen in the repo a (legacy) ElGamal public key system, but without public methods to encrypt/decrypt actual byte strings. And I can't seem to find \"common\" public key encryption systems, in Python and in other languages. Lots of different public key types exist, but all seem to be used only for signing or for key exchange.\r\n\r\nWhat other public key encryptions would be available in Pycryptodome ? (Or in other libraries ?)\r\nIf possible having implementations in several languages (in case Java programs need to decrypt containers) ?\r\n\r\n(Related ticket: https://github.com/Legrandin/pycryptodome/issues/139)\r\n\r\nthanks in advance,\r\nregards,\r\nPascal\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/338", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/338/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/338/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/338/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/338", "id": 519210522, "node_id": "MDU6SXNzdWU1MTkyMTA1MjI=", "number": 338, "title": "Building 'Cryptodome.Hash._ghash_clmul' extension fails on SLES 11.", "user": {"login": "dumol", "id": 1620933, "node_id": "MDQ6VXNlcjE2MjA5MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1620933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dumol", "html_url": "https://github.com/dumol", "followers_url": "https://api.github.com/users/dumol/followers", "following_url": "https://api.github.com/users/dumol/following{/other_user}", "gists_url": "https://api.github.com/users/dumol/gists{/gist_id}", "starred_url": "https://api.github.com/users/dumol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dumol/subscriptions", "organizations_url": "https://api.github.com/users/dumol/orgs", "repos_url": "https://api.github.com/users/dumol/repos", "events_url": "https://api.github.com/users/dumol/events{/privacy}", "received_events_url": "https://api.github.com/users/dumol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-07T11:33:05Z", "updated_at": "2019-11-11T10:49:15Z", "closed_at": "2019-11-10T15:56:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi again,\r\n\r\nThis is a problem I've had with PyCryptodome 3.6.6 as well, but failed to report it. Have used your wheel in the meantime with no issues.\r\n\r\nI'm retesting with 3.9.1 now and still see the same issue (I think), despite the seemingly related fix in https://github.com/Legrandin/pycryptodome/issues/232.\r\n\r\nHere's how things look on my side (SUSE Linux Enterprise Server 11.4 with GCC 4.3.4):\r\n\r\n```\r\n    building 'Cryptodome.Hash._ghash_clmul' extension\r\n    gcc -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -fPIC -DHAVE_STDINT_H -DPYCRYPTO_LITTLE_ENDIAN -DSYS_BITS=64 -DLTC_NO_ASM -DHAVE_UINT128 -DHAVE_CPUID_H -DHAVE_POSIX_MEMALIGN -Isrc/ -I/srv/buildslave/runtime/build-sles11-x64/slave/python-package-sles-11/build/build/python2.7-lnx-x64/include/python2.7 -c src/ghash_clmul.c -o build/temp.linux-x86_64-2.7/src/ghash_clmul.o -mpclmul -mssse3 -O3\r\n    src/ghash_clmul.c:41:2: error: #error Either intrin.h or x86intrin.h header files must be available\r\n    src/ghash_clmul.c: In function 'swap':\r\n    src/ghash_clmul.c:179: warning: implicit declaration of function '_mm_shuffle_epi8'\r\n    src/ghash_clmul.c:179: error: incompatible types in return\r\n    error: command 'gcc' failed with exit status 1\r\n```\r\n\r\nJust wanted to let you know\u2026 It's no big deal to keep using your wheel on this platform. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/337", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/337/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/337/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/337", "id": 516886697, "node_id": "MDU6SXNzdWU1MTY4ODY2OTc=", "number": 337, "title": "Bug in stub file for verify method", "user": {"login": "SHxKM", "id": 6573474, "node_id": "MDQ6VXNlcjY1NzM0NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6573474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SHxKM", "html_url": "https://github.com/SHxKM", "followers_url": "https://api.github.com/users/SHxKM/followers", "following_url": "https://api.github.com/users/SHxKM/following{/other_user}", "gists_url": "https://api.github.com/users/SHxKM/gists{/gist_id}", "starred_url": "https://api.github.com/users/SHxKM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SHxKM/subscriptions", "organizations_url": "https://api.github.com/users/SHxKM/orgs", "repos_url": "https://api.github.com/users/SHxKM/repos", "events_url": "https://api.github.com/users/SHxKM/events{/privacy}", "received_events_url": "https://api.github.com/users/SHxKM/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-03T20:49:42Z", "updated_at": "2019-11-10T15:56:36Z", "closed_at": "2019-11-10T15:56:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "The stub file for Crypto pkcs1_15.pyi has the following definition for `verify`: \r\n\r\n``` \r\ndef verify(self, msg_hash: ModuleType, signature: bytes) -> None: ...\r\n```\r\n\r\nAs explained [here](https://github.com/microsoft/pyright/issues/320#issuecomment-549166570), this doesn\u2019t make sense nor does it line up with the docs. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/335", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/335/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/335/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/335", "id": 515173063, "node_id": "MDU6SXNzdWU1MTUxNzMwNjM=", "number": 335, "title": "Wrong type hint?", "user": {"login": "zkonge", "id": 9334467, "node_id": "MDQ6VXNlcjkzMzQ0Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/9334467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkonge", "html_url": "https://github.com/zkonge", "followers_url": "https://api.github.com/users/zkonge/followers", "following_url": "https://api.github.com/users/zkonge/following{/other_user}", "gists_url": "https://api.github.com/users/zkonge/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkonge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkonge/subscriptions", "organizations_url": "https://api.github.com/users/zkonge/orgs", "repos_url": "https://api.github.com/users/zkonge/repos", "events_url": "https://api.github.com/users/zkonge/events{/privacy}", "received_events_url": "https://api.github.com/users/zkonge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-31T05:21:45Z", "updated_at": "2019-11-01T21:05:00Z", "closed_at": "2019-11-01T21:05:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For example:\r\n\r\nhttps://github.com/Legrandin/pycryptodome/blob/9484d7f1b379981a65868d189a83508afd6023b7/lib/Crypto/Cipher/ChaCha20_Poly1305.pyi#L25\r\n\r\nhttps://github.com/Legrandin/pycryptodome/blob/9484d7f1b379981a65868d189a83508afd6023b7/lib/Crypto/Cipher/ChaCha20_Poly1305.py#L305\r\n\r\nIt should be `key` instead of `__key`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/332", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/332/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/332/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/332", "id": 512051274, "node_id": "MDU6SXNzdWU1MTIwNTEyNzQ=", "number": 332, "title": "NotImplementedError", "user": {"login": "daedalus", "id": 115175, "node_id": "MDQ6VXNlcjExNTE3NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/115175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daedalus", "html_url": "https://github.com/daedalus", "followers_url": "https://api.github.com/users/daedalus/followers", "following_url": "https://api.github.com/users/daedalus/following{/other_user}", "gists_url": "https://api.github.com/users/daedalus/gists{/gist_id}", "starred_url": "https://api.github.com/users/daedalus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daedalus/subscriptions", "organizations_url": "https://api.github.com/users/daedalus/orgs", "repos_url": "https://api.github.com/users/daedalus/repos", "events_url": "https://api.github.com/users/daedalus/events{/privacy}", "received_events_url": "https://api.github.com/users/daedalus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-24T16:25:00Z", "updated_at": "2019-11-01T21:13:50Z", "closed_at": "2019-11-01T21:13:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi \r\nI'm getting these errror trying to construct a pem from the numerical parameters:\r\n\r\nwith python 3.7\r\n    key = RSA.construct(args)\r\n  File \"/usr/local/lib/python3.7/dist-packages/Crypto/PublicKey/RSA.py\", line 513, in construct\r\n    setattr(input_comps, comp, Integer(value))\r\n  File \"/usr/local/lib/python3.7/dist-packages/Crypto/Math/_IntegerGMP.py\", line 169, in __init__\r\n    raise NotImplementedError\r\nNotImplementedError\r\n\r\nwith python 2.7\r\n    key = RSA.construct(args)\r\n  File \"/usr/local/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py\", line 516, in construct\r\n    setattr(input_comps, comp, Integer(value))\r\n  File \"/usr/local/lib/python2.7/dist-packages/Crypto/Math/_Numbers_gmp.py\", line 197, in __init__\r\n    _gmp.mpz_init_set(self._mpz_p, value._mpz_p)\r\nAttributeError: 'mpz' object has no attribute '_mpz_p'\r\n\r\nI have installed gmpy and gmpy2 python libs.\r\nCan you point me in the right direction to solve this.\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/330", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/330/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/330/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/330/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/330", "id": 509870407, "node_id": "MDU6SXNzdWU1MDk4NzA0MDc=", "number": 330, "title": "ModuleNotFoundException on both Mac OS and Windows 10", "user": {"login": "SeakyLuo", "id": 25042708, "node_id": "MDQ6VXNlcjI1MDQyNzA4", "avatar_url": "https://avatars3.githubusercontent.com/u/25042708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SeakyLuo", "html_url": "https://github.com/SeakyLuo", "followers_url": "https://api.github.com/users/SeakyLuo/followers", "following_url": "https://api.github.com/users/SeakyLuo/following{/other_user}", "gists_url": "https://api.github.com/users/SeakyLuo/gists{/gist_id}", "starred_url": "https://api.github.com/users/SeakyLuo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SeakyLuo/subscriptions", "organizations_url": "https://api.github.com/users/SeakyLuo/orgs", "repos_url": "https://api.github.com/users/SeakyLuo/repos", "events_url": "https://api.github.com/users/SeakyLuo/events{/privacy}", "received_events_url": "https://api.github.com/users/SeakyLuo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-21T10:22:05Z", "updated_at": "2019-10-22T01:34:02Z", "closed_at": "2019-10-22T01:34:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using python 3.8 and installed the package using `pip install pycryptome`. The installation was successful but when I started idle and ran `import Crypto`, I still got that exception. \r\n\r\nI am using Mac Os Mojave and the latest version of Windows 10.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/328", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/328/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/328/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/328", "id": 506300811, "node_id": "MDU6SXNzdWU1MDYzMDA4MTE=", "number": 328, "title": "Importing RSA is slow (~150ms)", "user": {"login": "paravoid", "id": 1330796, "node_id": "MDQ6VXNlcjEzMzA3OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1330796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paravoid", "html_url": "https://github.com/paravoid", "followers_url": "https://api.github.com/users/paravoid/followers", "following_url": "https://api.github.com/users/paravoid/following{/other_user}", "gists_url": "https://api.github.com/users/paravoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/paravoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paravoid/subscriptions", "organizations_url": "https://api.github.com/users/paravoid/orgs", "repos_url": "https://api.github.com/users/paravoid/repos", "events_url": "https://api.github.com/users/paravoid/events{/privacy}", "received_events_url": "https://api.github.com/users/paravoid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700761, "node_id": "MDU6TGFiZWw5NjcwMDc2MQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-13T09:58:41Z", "updated_at": "2019-11-02T21:26:03Z", "closed_at": "2019-11-02T21:26:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "In a clean venv, with Python 3.7, and with just pycrypto (2.6.1) and pycryptodomex (3.9.0) installed and warm caches:\r\n```\r\n$ time python3 -c \"from Crypto.PublicKey import RSA\"\r\n\r\nreal    0m0,036s\r\nuser    0m0,032s\r\nsys     0m0,004s\r\n\r\n$ time python3 -c \"from Cryptodome.PublicKey import RSA\"\r\n\r\nreal    0m0,169s\r\nuser    0m0,117s\r\nsys     0m0,059s\r\n```\r\n\r\n130-150ms overhead is pretty significant and especially for e.g. a CLI program. I only started investigating it because it was noticeable on my shell.\r\n\r\nI also tried installing cffi (which I noticed changes some of the code paths), but it did not make a difference. cProfile has been unhelpful, but perhaps someone more familiar with the codebase could make more sense of this. Thanks for all of your efforts!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/323", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/323/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/323/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/323", "id": 495076819, "node_id": "MDU6SXNzdWU0OTUwNzY4MTk=", "number": 323, "title": "Sign message with static nonce?", "user": {"login": "766F6964", "id": 34845270, "node_id": "MDQ6VXNlcjM0ODQ1Mjcw", "avatar_url": "https://avatars3.githubusercontent.com/u/34845270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/766F6964", "html_url": "https://github.com/766F6964", "followers_url": "https://api.github.com/users/766F6964/followers", "following_url": "https://api.github.com/users/766F6964/following{/other_user}", "gists_url": "https://api.github.com/users/766F6964/gists{/gist_id}", "starred_url": "https://api.github.com/users/766F6964/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/766F6964/subscriptions", "organizations_url": "https://api.github.com/users/766F6964/orgs", "repos_url": "https://api.github.com/users/766F6964/repos", "events_url": "https://api.github.com/users/766F6964/events{/privacy}", "received_events_url": "https://api.github.com/users/766F6964/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-18T08:42:34Z", "updated_at": "2019-09-19T11:36:51Z", "closed_at": "2019-09-19T11:36:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "To demonstrate a crypto attack/weakness I need to sign two messages with the same (static) nonce.\r\nThe documentation tells me there are two different modes one can supply during signing: `fips-186-3` and `deterministic-rfc6979`.\r\nFurthermore one can supply a _randomfunc_ during signing. To quote from the docs:\r\n```\r\nA function that returns random byte strings, of a given length. \r\nIf omitted, the internal RNG is used. Only applicable for the \u2018fips-186-3\u2019 mode.\r\n```\r\nFor `fips-186-3` we can use our own random function, it seems.\r\nSo my idea was to use this to generate a static nonce:\r\n```python\r\ndef bad_nonce(length):\r\n    return \"1337\"\r\n\r\nverifier = DSS.new(key, 'fips-186-3', randfunc=bad_nonce)\r\nmsg_hash = SHA256.new(message)\r\n```\r\nThis results in an exception during signing:\r\n```\r\n  File \"/usr/lib/python3.7/site-packages/Crypto/Signature/DSS.py\", line 100, in sign\r\n    nonce = self._compute_nonce(msg_hash)\r\n  File \"/usr/lib/python3.7/site-packages/Crypto/Signature/DSS.py\", line 290, in _compute_nonce\r\n    randfunc=self._randfunc)\r\n  File \"/usr/lib/python3.7/site-packages/Crypto/Math/_IntegerBase.py\", line 389, in random_range\r\n    randfunc=randfunc\r\n  File \"/usr/lib/python3.7/site-packages/Crypto/Math/_IntegerBase.py\", line 341, in random\r\n    msb &= (1 << significant_bits_msb) - 1\r\nTypeError: unsupported operand type(s) for &=: 'str' and 'int'\r\n```\r\nHow can I sign two messages with the same nonce?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/322", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/322/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/322/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/322/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/322", "id": 488202490, "node_id": "MDU6SXNzdWU0ODgyMDI0OTA=", "number": 322, "title": "Observing segmentation fault with DES cipher usage", "user": {"login": "ICKGeek", "id": 52481367, "node_id": "MDQ6VXNlcjUyNDgxMzY3", "avatar_url": "https://avatars1.githubusercontent.com/u/52481367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ICKGeek", "html_url": "https://github.com/ICKGeek", "followers_url": "https://api.github.com/users/ICKGeek/followers", "following_url": "https://api.github.com/users/ICKGeek/following{/other_user}", "gists_url": "https://api.github.com/users/ICKGeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ICKGeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ICKGeek/subscriptions", "organizations_url": "https://api.github.com/users/ICKGeek/orgs", "repos_url": "https://api.github.com/users/ICKGeek/repos", "events_url": "https://api.github.com/users/ICKGeek/events{/privacy}", "received_events_url": "https://api.github.com/users/ICKGeek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-09-02T13:54:34Z", "updated_at": "2019-11-10T15:57:59Z", "closed_at": "2019-11-10T15:57:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Team,\r\n\r\nI am noticing \"Segmentation fault\" with DES usage. Below is the sample code that is causing the segmentation fault.\r\n\r\nEnvironment:  \"CentOS release 6.4 (R3.1.0)\", Python 3.6.2, Pycryptodomex 3.8.2\r\n\r\n```\r\nfrom Cryptodome.Cipher import DES\r\ndesKey = b'`\\xf8\\xdc\\x15\\xfd\\x0f\\xc5\\xd3'\r\niv = b'\\xd3\\x13\\r\\xe9\\xa0B\\x86r'\r\ndesObj = DES.new(desKey, DES.MODE_CBC, iv)\r\n```\r\n\r\nHere is the callstack from gdb\r\n\r\n```\r\n#0  deskey (key=<value optimized out>, edf=0, keyout=0x8977d38) at src/libtom/tomcrypt_des.c:1378\r\n        i = 16\r\n        j = 24\r\n        l = <value optimized out>\r\n        m = 4291625888\r\n        n = 31\r\n        kn = {12569674, 14354280, 8731611, 5625446, 3634917, 1871084, 14376384, 8977621, 5825533, 2877105, 9819407, 12274947, 6491111, 9323286, 12187813, 13984708, 13474894, 4565589, 6482654, 7578844, 3996962, 2725263, 14822779, 947367, 15590933, 7227877, 4693914, 8571355, 8302835, 13080337, 10083125, 11375194}\r\n        pc1m = \"\\001\\001\\000\\001\\000\\001\\001\\000\\001\\001\\000\\001\\000\\001\\001\\001\\000\\000\\000\\001\\000\\000\\001\\001\\001\\000\\000\\001\\001\\000\\001\\000\\000\\000\\000\\000\\000\\001\\001\\001\\001\\001\\000\\000\\000\\000\\001\\001\\000\\001\\001\\000\\001\\001\\001\"\r\n        pcr = \"\\001\\001\\000\\001\\000\\001\\001\\000\\001\\001\\000\\001\\000\\001\\001\\001\\000\\000\\000\\001\\000\\000\\001\\001\\001\\000\\000\\001\\001\\000\\001\\000\\000\\000\\000\\000\\000\\001\\001\\001\\001\\001\\000\\000\\000\\000\\001\\001\\000\\001\\001\\000\\001\\001\\001\"\r\n#1  0x056e9742 in des_setup (key=0xf264f9b0 \"`\\370\\334\\025\\375\\017\\305\\323\", key_len=8, pResult=0x892c72c) at src/libtom/tomcrypt_des.c:1542\r\nNo locals.\r\n#2  block_init (key=0xf264f9b0 \"`\\370\\334\\025\\375\\017\\305\\323\", key_len=8, pResult=0x892c72c) at src/DES.c:54\r\nNo locals.\r\n#3  DES_start_operation (key=0xf264f9b0 \"`\\370\\334\\025\\375\\017\\305\\323\", key_len=8, pResult=0x892c72c) at src/block_common.c:119\r\n        block_base = 0x8977d28\r\n```\r\n\r\nCan someone help me with resolving this issue? Thanks in advance...\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/321", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/321/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/321/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/321/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/321", "id": 486987109, "node_id": "MDU6SXNzdWU0ODY5ODcxMDk=", "number": 321, "title": "AES Cipher digest raises a TypeError (Python 3.7)", "user": {"login": "matngo", "id": 43992017, "node_id": "MDQ6VXNlcjQzOTkyMDE3", "avatar_url": "https://avatars3.githubusercontent.com/u/43992017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matngo", "html_url": "https://github.com/matngo", "followers_url": "https://api.github.com/users/matngo/followers", "following_url": "https://api.github.com/users/matngo/following{/other_user}", "gists_url": "https://api.github.com/users/matngo/gists{/gist_id}", "starred_url": "https://api.github.com/users/matngo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matngo/subscriptions", "organizations_url": "https://api.github.com/users/matngo/orgs", "repos_url": "https://api.github.com/users/matngo/repos", "events_url": "https://api.github.com/users/matngo/events{/privacy}", "received_events_url": "https://api.github.com/users/matngo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-29T14:18:06Z", "updated_at": "2019-08-30T07:38:58Z", "closed_at": "2019-08-30T07:38:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThe following code snippet: \r\n\r\n```python\r\nfrom Crypto.Cipher import AES\r\nfrom Crypto.Random import get_random_bytes\r\ndata = b\"123\"\r\nkey = get_random_bytes(16)\r\ncipher = AES.new(key, AES.MODE_EAX)\r\nciphertext, tag = cipher.encrypt_and_digest(data)\r\n```\r\n\r\nraises the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test_crypto.py\", line 7, in <module>\r\n    ciphertext, tag = cipher.encrypt_and_digest(data)\r\n  File \".../Crypto/Cipher/_mode_eax.py\", line 346, in encrypt_and_digest\r\n    return self.encrypt(plaintext, output=output), self.digest()\r\n  File \".../Crypto/Cipher/_mode_eax.py\", line 261, in digest\r\n    tag = strxor(tag, self._omac[i].digest())\r\n  File \".../site-packages/Crypto/Hash/CMAC.py\", line 210, in digest\r\n    pt = strxor(strxor(self._last_ct, partial), self._k2)\r\nTypeError: argument 2 must be bytes, not bytearray\r\n```\r\n\r\nwith python 3.7.2 but works with python 3.6.7 ; with pycryptodome>3.7\r\n\r\nChanging following snippet: \r\n\r\nhttps://github.com/Legrandin/pycryptodome/blob/c8bd2affb53d72aa41b6793608a7c4c35807d34d/lib/Crypto/Hash/CMAC.py#L210\r\n\r\nto\r\n\r\n```python\r\n pt = strxor(strxor(self._last_ct, bytes(partial)), self._k2)\r\n```\r\n\r\nseems to solve the issue for me.\r\n\r\nThanks!\r\nMathias \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/318", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/318/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/318/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/318", "id": 485153885, "node_id": "MDU6SXNzdWU0ODUxNTM4ODU=", "number": 318, "title": "AttributeError: 'EccPoint' object has no attribute '_mpz_p'", "user": {"login": "LuminousXLB", "id": 23524048, "node_id": "MDQ6VXNlcjIzNTI0MDQ4", "avatar_url": "https://avatars1.githubusercontent.com/u/23524048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuminousXLB", "html_url": "https://github.com/LuminousXLB", "followers_url": "https://api.github.com/users/LuminousXLB/followers", "following_url": "https://api.github.com/users/LuminousXLB/following{/other_user}", "gists_url": "https://api.github.com/users/LuminousXLB/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuminousXLB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuminousXLB/subscriptions", "organizations_url": "https://api.github.com/users/LuminousXLB/orgs", "repos_url": "https://api.github.com/users/LuminousXLB/repos", "events_url": "https://api.github.com/users/LuminousXLB/events{/privacy}", "received_events_url": "https://api.github.com/users/LuminousXLB/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-26T09:59:48Z", "updated_at": "2019-08-27T03:51:16Z", "closed_at": "2019-08-27T03:51:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's what I did\r\n\r\n```console\r\n$ cat test.py\r\nfrom Crypto.PublicKey import ECC\r\n\r\nif __name__ == \"__main__\":\r\n    ka = ECC.generate(curve='p256')\r\n    kb = ECC.generate(curve='p256')\r\n\r\n    print(ka.d*kb.pointQ)\r\n$ python3 test.py\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 7, in <module>\r\n    print(ka.d*kb.pointQ)\r\n  File \"/home/ncl/.local/lib/python3.6/site-packages/Crypto/Math/_IntegerGMP.py\", line 311, in __mul__\r\n    term = IntegerGMP(term)\r\n  File \"/home/ncl/.local/lib/python3.6/site-packages/Crypto/Math/_IntegerGMP.py\", line 167, in __init__\r\n    _gmp.mpz_init_set(self._mpz_p, value._mpz_p)\r\nAttributeError: 'EccPoint' object has no attribute '_mpz_p'\r\n$ pip3 freeze | grep crypto\r\nasn1crypto==0.24.0\r\ncryptography==2.1.4\r\npycrypto==2.6.1\r\npycryptodome==3.8.2\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/317", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/317/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/317/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/317/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/317", "id": 484954835, "node_id": "MDU6SXNzdWU0ODQ5NTQ4MzU=", "number": 317, "title": "Randfunc argument of DSA.generate() not entirely propagated", "user": {"login": "pakal", "id": 330629, "node_id": "MDQ6VXNlcjMzMDYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/330629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pakal", "html_url": "https://github.com/pakal", "followers_url": "https://api.github.com/users/pakal/followers", "following_url": "https://api.github.com/users/pakal/following{/other_user}", "gists_url": "https://api.github.com/users/pakal/gists{/gist_id}", "starred_url": "https://api.github.com/users/pakal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pakal/subscriptions", "organizations_url": "https://api.github.com/users/pakal/orgs", "repos_url": "https://api.github.com/users/pakal/repos", "events_url": "https://api.github.com/users/pakal/events{/privacy}", "received_events_url": "https://api.github.com/users/pakal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-25T17:23:41Z", "updated_at": "2019-08-29T07:29:31Z", "closed_at": "2019-08-27T19:54:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThe randfunc argument of DSA.generate() is used to generate domain, but not passed as argument in \"Integer.random(exact_bits=N + 64)\", is that intentional?\r\n\r\nIf not I can issue a tiny PR to include it, so that DSA.generate() entirely depends on the provided randfunc.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/316", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/316/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/316/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/316", "id": 481819879, "node_id": "MDU6SXNzdWU0ODE4MTk4Nzk=", "number": 316, "title": "Legacy DSA signing fails", "user": {"login": "Daeinar", "id": 1496810, "node_id": "MDQ6VXNlcjE0OTY4MTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1496810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Daeinar", "html_url": "https://github.com/Daeinar", "followers_url": "https://api.github.com/users/Daeinar/followers", "following_url": "https://api.github.com/users/Daeinar/following{/other_user}", "gists_url": "https://api.github.com/users/Daeinar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Daeinar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Daeinar/subscriptions", "organizations_url": "https://api.github.com/users/Daeinar/orgs", "repos_url": "https://api.github.com/users/Daeinar/repos", "events_url": "https://api.github.com/users/Daeinar/events{/privacy}", "received_events_url": "https://api.github.com/users/Daeinar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-16T23:33:59Z", "updated_at": "2019-08-27T07:50:57Z", "closed_at": "2019-08-27T07:49:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following example `dsa.py`:\r\n\r\n```dsa.py\r\nfrom Crypto.PublicKey import DSA\r\nfrom Crypto.Signature import DSS\r\n\r\nif __name__ == '__main__':\r\n    key = DSA.generate(1024)\r\n    dsa = DSS.new(key,'fips-186-3')\r\n```\r\n\r\nRunning `python3 dsa.py` it crashes with the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"dsal.py\", line 6, in <module>\r\n    dsa = DSS.new(key,'fips-186-3')\r\n  File \"/usr/local/lib/python3.7/site-packages/Crypto/Signature/DSS.py\", line 406, in new\r\n    print(key)\r\n  File \"/usr/local/lib/python3.7/site-packages/Crypto/PublicKey/DSA.py\", line 193, in __repr__\r\n    attrs.append(\"p(%d)\" % (self.size()+1,))\r\n  File \"/usr/local/lib/python3.7/site-packages/Crypto/PublicKey/DSA.py\", line 356, in size\r\n    raise NotImplementedError\r\nNotImplementedError\r\n```\r\n\r\nThis can be traced back to: https://github.com/Legrandin/pycryptodome/blob/master/lib/Crypto/PublicKey/DSA.py#L356\r\n\r\nIs legacy DSA deprecated? The [official documentation](https://www.pycryptodome.org/en/latest/src/signature/dsa.html#module-Crypto.Signature.DSS) suggests that it should be still supported via `Crypto.Signature.DSS`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/315", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/315/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/315/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/315/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/315", "id": 478815969, "node_id": "MDU6SXNzdWU0Nzg4MTU5Njk=", "number": 315, "title": "RSA Example is not working [!]", "user": {"login": "bcba25", "id": 19326191, "node_id": "MDQ6VXNlcjE5MzI2MTkx", "avatar_url": "https://avatars0.githubusercontent.com/u/19326191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcba25", "html_url": "https://github.com/bcba25", "followers_url": "https://api.github.com/users/bcba25/followers", "following_url": "https://api.github.com/users/bcba25/following{/other_user}", "gists_url": "https://api.github.com/users/bcba25/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcba25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcba25/subscriptions", "organizations_url": "https://api.github.com/users/bcba25/orgs", "repos_url": "https://api.github.com/users/bcba25/repos", "events_url": "https://api.github.com/users/bcba25/events{/privacy}", "received_events_url": "https://api.github.com/users/bcba25/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-09T06:17:32Z", "updated_at": "2019-08-27T20:08:22Z", "closed_at": "2019-08-27T20:08:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfile_out = open(str(file) + \".bin\", mode)\r\n\r\n    recipient_key = RSA.import_key(open(\"receiver.pem\").read())\r\n    session_key = get_random_bytes(16)\r\n\r\n    \r\n    cipher_rsa = PKCS1_OAEP.new(recipient_key)\r\n    enc_session_key = cipher_rsa.encrypt(session_key)\r\n\r\n    \r\n    cipher_aes = AES.new(session_key, AES.MODE_EAX)\r\n    #data = cipher_aes.encrypt(data)\r\n    **ciphertext, tag = cipher_aes.encrypt_and_digest(data)**\r\n\r\n    [ file_out.write(x) for x in (cipher_aes.nonce, tag, ciphertext) ]\r\n```\r\nReceiving error:\r\nTypeError: argument 2 must be bytes, not bytearray\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/313", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/313/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/313/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/313/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/313", "id": 478004845, "node_id": "MDU6SXNzdWU0NzgwMDQ4NDU=", "number": 313, "title": "No support for IV in AES.MODE_CTR... why?", "user": {"login": "cwebber", "id": 55698, "node_id": "MDQ6VXNlcjU1Njk4", "avatar_url": "https://avatars2.githubusercontent.com/u/55698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwebber", "html_url": "https://github.com/cwebber", "followers_url": "https://api.github.com/users/cwebber/followers", "following_url": "https://api.github.com/users/cwebber/following{/other_user}", "gists_url": "https://api.github.com/users/cwebber/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwebber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwebber/subscriptions", "organizations_url": "https://api.github.com/users/cwebber/orgs", "repos_url": "https://api.github.com/users/cwebber/repos", "events_url": "https://api.github.com/users/cwebber/events{/privacy}", "received_events_url": "https://api.github.com/users/cwebber/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-07T15:41:22Z", "updated_at": "2019-08-07T16:39:31Z", "closed_at": "2019-08-07T16:39:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "In other applications in other languages, I'm passing in an initialization vector for aes+ctr... however pycryptodome doesn't allow this.  I can't figure out why.\r\n\r\nIt seems pretty well understood from other searches I can find online that support for an IV in aes+ctr is [expected](https://crypto.stackexchange.com/a/1570)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/312", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/312/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/312/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/312", "id": 476174751, "node_id": "MDU6SXNzdWU0NzYxNzQ3NTE=", "number": 312, "title": "AttributeError: 'EccPoint' object has no attribute '_point_get'", "user": {"login": "jiep", "id": 414463, "node_id": "MDQ6VXNlcjQxNDQ2Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/414463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiep", "html_url": "https://github.com/jiep", "followers_url": "https://api.github.com/users/jiep/followers", "following_url": "https://api.github.com/users/jiep/following{/other_user}", "gists_url": "https://api.github.com/users/jiep/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiep/subscriptions", "organizations_url": "https://api.github.com/users/jiep/orgs", "repos_url": "https://api.github.com/users/jiep/repos", "events_url": "https://api.github.com/users/jiep/events{/privacy}", "received_events_url": "https://api.github.com/users/jiep/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1290271601, "node_id": "MDU6TGFiZWwxMjkwMjcxNjAx", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/fix_available", "name": "fix_available", "color": "c2e0c6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-02T13:16:38Z", "updated_at": "2019-08-27T20:08:03Z", "closed_at": "2019-08-27T20:08:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Step to reproduce\r\n\r\n```\r\nroot@35ca8302c755:/# python -V\r\nPython 3.7.4\r\nroot@35ca8302c755:/# pip install pycryptodome\r\nCollecting pycryptodome\r\n  Downloading https://files.pythonhosted.org/packages/4b/43/b6df7cd1354cc03c80cb972d5930b1adc209c717e9141883ca9026314eda/pycryptodome-3.8.2-cp37-cp37m-manylinux1_x86_64.whl (9.6MB)\r\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9.6MB 2.3MB/s\r\nInstalling collected packages: pycryptodome\r\nSuccessfully installed pycryptodome-3.8.2\r\nroot@35ca8302c755:/# python\r\nPython 3.7.4 (default, Jul 13 2019, 14:04:11)\r\n[GCC 8.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from Crypto.PublicKey import ECC\r\n>>> key = ECC.generate(curve='P-256')\r\n>>> T = -key.pointQ\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/Crypto/PublicKey/ECC.py\", line 304, in __neg__\r\n    result = _ec_lib.ec_ws_neg(np._point_get())\r\nAttributeError: 'EccPoint' object has no attribute '_point_get'\r\n```\r\n\r\nIn version `3.7.3` it seems to work properly:\r\n\r\n```\r\nroot@35ca8302c755:/# python -V\r\nPython 3.7.4\r\nroot@35ca8302c755:/# pip install pycryptodome==3.7.3\r\nCollecting pycryptodome==3.7.3\r\n  Using cached https://files.pythonhosted.org/packages/9e/55/038b18574705a86548e0008e4ea88a80393a370068e8a67c28becf2f4865/pycryptodome-3.7.3-cp37-cp37m-manylinux1_x86_64.whl\r\nInstalling collected packages: pycryptodome\r\nSuccessfully installed pycryptodome-3.7.3\r\nroot@35ca8302c755:/# python\r\nPython 3.7.4 (default, Jul 13 2019, 14:04:11)\r\n[GCC 8.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from Crypto.PublicKey import ECC\r\n>>> key = ECC.generate(curve='P-256')\r\n>>> T = -key.pointQ\r\n>>> T\r\n<Crypto.PublicKey.ECC.EccPoint object at 0x7fcb2aba1fd0>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/311", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/311/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/311/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/311", "id": 475663101, "node_id": "MDU6SXNzdWU0NzU2NjMxMDE=", "number": 311, "title": "RSA key format is not supported", "user": {"login": "shaaaarpy", "id": 23281566, "node_id": "MDQ6VXNlcjIzMjgxNTY2", "avatar_url": "https://avatars3.githubusercontent.com/u/23281566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shaaaarpy", "html_url": "https://github.com/shaaaarpy", "followers_url": "https://api.github.com/users/shaaaarpy/followers", "following_url": "https://api.github.com/users/shaaaarpy/following{/other_user}", "gists_url": "https://api.github.com/users/shaaaarpy/gists{/gist_id}", "starred_url": "https://api.github.com/users/shaaaarpy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shaaaarpy/subscriptions", "organizations_url": "https://api.github.com/users/shaaaarpy/orgs", "repos_url": "https://api.github.com/users/shaaaarpy/repos", "events_url": "https://api.github.com/users/shaaaarpy/events{/privacy}", "received_events_url": "https://api.github.com/users/shaaaarpy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-01T12:47:27Z", "updated_at": "2019-08-01T13:15:50Z", "closed_at": "2019-08-01T13:15:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/308", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/308/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/308/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/308", "id": 470712213, "node_id": "MDU6SXNzdWU0NzA3MTIyMTM=", "number": 308, "title": "Observing \"Segmentation fault\" in AES Encrypt in pycryptodome usage", "user": {"login": "ICKGeek", "id": 52481367, "node_id": "MDQ6VXNlcjUyNDgxMzY3", "avatar_url": "https://avatars1.githubusercontent.com/u/52481367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ICKGeek", "html_url": "https://github.com/ICKGeek", "followers_url": "https://api.github.com/users/ICKGeek/followers", "following_url": "https://api.github.com/users/ICKGeek/following{/other_user}", "gists_url": "https://api.github.com/users/ICKGeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ICKGeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ICKGeek/subscriptions", "organizations_url": "https://api.github.com/users/ICKGeek/orgs", "repos_url": "https://api.github.com/users/ICKGeek/repos", "events_url": "https://api.github.com/users/ICKGeek/events{/privacy}", "received_events_url": "https://api.github.com/users/ICKGeek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-07-20T20:35:12Z", "updated_at": "2019-11-12T20:08:48Z", "closed_at": "2019-11-12T12:28:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Team,\r\n\r\nI am using pysnmp package which uses pycryptodome for encryption. I am observing \"Segmentation fault\" when AES encryption is attempted. Below is the call stack for it.\r\nAny suggestion on what could be going wrong? FYI, I am running this on \"CentOS release 6.4 (R3.1.0)\"\r\n\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.  \r\n0xf651dfb5 in AESNI_encrypt (bb=0x87f3ab8, in=0xf625f328 \"\", out=0x87af5e0 \"\", data_len=16) at src/AESNI.c:156\r\n156     src/AESNI.c: No such file or directory.\r\n        in src/AESNI.c\r\nMissing separate debuginfos, use: debuginfo-install bzip2-libs-1.0.5-7.SCLC6_4.R3.0.2.i686 glibc-2.12-1.192.SCLC6_4.R3.0.1.i686 iveopenssl-1.0.2n-2.SCLC6_4.R3.0.2.i686 python36-libs-3.6\r\n.2-2.SCLC6_4.R3.0.2.i686 xz-libs-4.999.9-0.3.beta.20091007git.SCLC6_4.R3.0.2.i686\r\n(gdb) bt\r\n#0  0xf651dfb5 in AESNI_encrypt (bb=0x87f3ab8, in=0xf625f328 \"\", out=0x87af5e0 \"\", data_len=16) at src/AESNI.c:156\r\n#1  0xf69e4969 in CFB_start_operation (cipher=0x87f3ab8, iv=0xf625f328 \"\", iv_len=16, segment_len=16, pResult=0x879a4f4) at src/raw_cfb.c:97\r\n#2  0xf690744f in ffi_call_SYSV () at src/x86/sysv.S:61\r\n#3  0xf6907280 in ffi_call (cif=0xf6265188, fn=0xf69e4820 <CFB_start_operation>, rvalue=0xf62651e8, avalue=0xf62651d0) at src/x86/ffi.c:213\r\n#4  0xf669adca in cdata_call (cd=0xf645f038, args=0xf644be3c, kwds=0x0) at c/_cffi_backend.c:3025\r\n#5  0xf74d1a34 in _PyObject_FastCallDict () from /usr/lib/libpython3.6m.so.1.0\r\n#6  0xf74d2467 in _PyObject_FastCallKeywords () from /usr/lib/libpython3.6m.so.1.0\r\n#7  0xf75966e1 in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#8  0xf759c060 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.6m.so.1.0\r\n#9  0xf7594f9c in PyEval_EvalFrameEx () from /usr/lib/libpython3.6m.so.1.0\r\n#10 0xf759508c in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#11 0xf7596461 in _PyFunction_FastCallDict () from /usr/lib/libpython3.6m.so.1.0\r\n#12 0xf74d1b50 in _PyObject_FastCallDict () from /usr/lib/libpython3.6m.so.1.0\r\n#13 0xf74d260c in _PyObject_Call_Prepend () from /usr/lib/libpython3.6m.so.1.0\r\n#14 0xf74e972a in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#15 0xf74d26ba in PyObject_Call () from /usr/lib/libpython3.6m.so.1.0\r\n#16 0xf75389ce in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#17 0xf7535744 in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#18 0xf74d1a34 in _PyObject_FastCallDict () from /usr/lib/libpython3.6m.so.1.0\r\n#19 0xf74d2467 in _PyObject_FastCallKeywords () from /usr/lib/libpython3.6m.so.1.0\r\n#20 0xf75966e1 in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#21 0xf759c060 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.6m.so.1.0\r\n#22 0xf7594f9c in PyEval_EvalFrameEx () from /usr/lib/libpython3.6m.so.1.0\r\n#23 0xf75960bc in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#24 0xf759699f in PyEval_EvalCodeEx () from /usr/lib/libpython3.6m.so.1.0\r\n#25 0xf750142c in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#26 0xf74d26ba in PyObject_Call () from /usr/lib/libpython3.6m.so.1.0\r\n#27 0xf759bc84 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.6m.so.1.0\r\n#28 0xf7594f9c in PyEval_EvalFrameEx () from /usr/lib/libpython3.6m.so.1.0\r\n#29 0xf75960bc in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#30 0xf759699f in PyEval_EvalCodeEx () from /usr/lib/libpython3.6m.so.1.0\r\n#31 0xf750142c in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#32 0xf74d26ba in PyObject_Call () from /usr/lib/libpython3.6m.so.1.0\r\n#33 0xf759bc84 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.6m.so.1.0\r\n#34 0xf7594f9c in PyEval_EvalFrameEx () from /usr/lib/libpython3.6m.so.1.0\r\n#35 0xf75960bc in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#36 0xf7596542 in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n#37 0xf7596752 in ?? () from /usr/lib/libpython3.6m.so.1.0\r\n```\r\n\r\nThanks in advance...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/306", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/306/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/306/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/306", "id": 469666597, "node_id": "MDU6SXNzdWU0Njk2NjY1OTc=", "number": 306, "title": "SelfTest", "user": {"login": "1271", "id": 1452243, "node_id": "MDQ6VXNlcjE0NTIyNDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1452243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1271", "html_url": "https://github.com/1271", "followers_url": "https://api.github.com/users/1271/followers", "following_url": "https://api.github.com/users/1271/following{/other_user}", "gists_url": "https://api.github.com/users/1271/gists{/gist_id}", "starred_url": "https://api.github.com/users/1271/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1271/subscriptions", "organizations_url": "https://api.github.com/users/1271/orgs", "repos_url": "https://api.github.com/users/1271/repos", "events_url": "https://api.github.com/users/1271/events{/privacy}", "received_events_url": "https://api.github.com/users/1271/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-18T09:32:49Z", "updated_at": "2020-04-16T06:37:23Z", "closed_at": "2019-07-18T12:15:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/Legrandin/pycryptodome/tree/master/lib/Crypto/SelfTest\r\n\r\nHi. Just wondering.\r\nIs there a real need to publish a directory on the pip site?\r\nSelfTest is 70% of the package size.\r\nIt looks weird to me.\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/305", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/305/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/305/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/305", "id": 464994466, "node_id": "MDU6SXNzdWU0NjQ5OTQ0NjY=", "number": 305, "title": "How to fix pycryptodome install error ? #Termux #Pip #pycryptodome #install #error", "user": {"login": "Raveesha24", "id": 39665016, "node_id": "MDQ6VXNlcjM5NjY1MDE2", "avatar_url": "https://avatars1.githubusercontent.com/u/39665016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Raveesha24", "html_url": "https://github.com/Raveesha24", "followers_url": "https://api.github.com/users/Raveesha24/followers", "following_url": "https://api.github.com/users/Raveesha24/following{/other_user}", "gists_url": "https://api.github.com/users/Raveesha24/gists{/gist_id}", "starred_url": "https://api.github.com/users/Raveesha24/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Raveesha24/subscriptions", "organizations_url": "https://api.github.com/users/Raveesha24/orgs", "repos_url": "https://api.github.com/users/Raveesha24/repos", "events_url": "https://api.github.com/users/Raveesha24/events{/privacy}", "received_events_url": "https://api.github.com/users/Raveesha24/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-07T21:18:12Z", "updated_at": "2019-07-25T12:58:54Z", "closed_at": "2019-07-25T12:58:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running setup.py install for pycryptodome -- error [Termux]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/303", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/303/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/303/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/303", "id": 463548875, "node_id": "MDU6SXNzdWU0NjM1NDg4NzU=", "number": 303, "title": "Compiling pycryptodome package without OCB support", "user": {"login": "ICKGeek", "id": 52481367, "node_id": "MDQ6VXNlcjUyNDgxMzY3", "avatar_url": "https://avatars1.githubusercontent.com/u/52481367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ICKGeek", "html_url": "https://github.com/ICKGeek", "followers_url": "https://api.github.com/users/ICKGeek/followers", "following_url": "https://api.github.com/users/ICKGeek/following{/other_user}", "gists_url": "https://api.github.com/users/ICKGeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ICKGeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ICKGeek/subscriptions", "organizations_url": "https://api.github.com/users/ICKGeek/orgs", "repos_url": "https://api.github.com/users/ICKGeek/repos", "events_url": "https://api.github.com/users/ICKGeek/events{/privacy}", "received_events_url": "https://api.github.com/users/ICKGeek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-03T05:18:18Z", "updated_at": "2019-07-10T18:24:16Z", "closed_at": "2019-07-08T10:34:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Team,\r\n\r\nWe want to use pycryptodome package without OCB cipher mode support. Is there anyway I can compile this package without this support. The reason for this is, we want to use this package without OCB license terms.\r\n\r\nFYI, we are planning to use this pycryptodome package in our product which is not open source\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/302", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/302/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/302/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/302", "id": 458188050, "node_id": "MDU6SXNzdWU0NTgxODgwNTA=", "number": 302, "title": "Docs inconsitency", "user": {"login": "Zwork101", "id": 25652654, "node_id": "MDQ6VXNlcjI1NjUyNjU0", "avatar_url": "https://avatars1.githubusercontent.com/u/25652654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zwork101", "html_url": "https://github.com/Zwork101", "followers_url": "https://api.github.com/users/Zwork101/followers", "following_url": "https://api.github.com/users/Zwork101/following{/other_user}", "gists_url": "https://api.github.com/users/Zwork101/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zwork101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zwork101/subscriptions", "organizations_url": "https://api.github.com/users/Zwork101/orgs", "repos_url": "https://api.github.com/users/Zwork101/repos", "events_url": "https://api.github.com/users/Zwork101/events{/privacy}", "received_events_url": "https://api.github.com/users/Zwork101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-19T19:28:53Z", "updated_at": "2019-06-19T21:40:02Z", "closed_at": "2019-06-19T21:40:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the docs, AES support keys with byte lengths 32, 48, and 64. https://github.com/Legrandin/pycryptodome/blob/master/Doc/src/cipher/aes.rst\r\n\r\nHowever, the actual requirements are \r\n```py\r\n# Size of a key (in bytes)\r\nkey_size = (16, 24, 32)\r\n```\r\nhttps://github.com/Legrandin/pycryptodome/blob/95ccce7ae82d3a36f1a8652dd2c645222d0128dd/lib/Crypto/Cipher/AES.py#L250\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/301", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/301/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/301/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/301/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/301", "id": 457451451, "node_id": "MDU6SXNzdWU0NTc0NTE0NTE=", "number": 301, "title": "Unable to extend to Brainpool DP", "user": {"login": "l1980", "id": 51956937, "node_id": "MDQ6VXNlcjUxOTU2OTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/51956937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l1980", "html_url": "https://github.com/l1980", "followers_url": "https://api.github.com/users/l1980/followers", "following_url": "https://api.github.com/users/l1980/following{/other_user}", "gists_url": "https://api.github.com/users/l1980/gists{/gist_id}", "starred_url": "https://api.github.com/users/l1980/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l1980/subscriptions", "organizations_url": "https://api.github.com/users/l1980/orgs", "repos_url": "https://api.github.com/users/l1980/repos", "events_url": "https://api.github.com/users/l1980/events{/privacy}", "received_events_url": "https://api.github.com/users/l1980/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-18T12:28:50Z", "updated_at": "2019-06-18T14:41:17Z", "closed_at": "2019-06-18T14:41:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "While working to extend the supported domain paramters to Brainpool curves, during the initialization of generator G ECCPoint I surprisingly have that \"The EC point does not belong to the curve\". WTF ??\r\n\r\n\r\n[__init__.txt](https://github.com/Legrandin/pycryptodome/files/3301446/__init__.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/300", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/300/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/300/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/300", "id": 455300167, "node_id": "MDU6SXNzdWU0NTUzMDAxNjc=", "number": 300, "title": "python37 AES-CMAC TypeError: argument 2 must be bytes, not bytearray", "user": {"login": "mx472756841", "id": 12297227, "node_id": "MDQ6VXNlcjEyMjk3MjI3", "avatar_url": "https://avatars3.githubusercontent.com/u/12297227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mx472756841", "html_url": "https://github.com/mx472756841", "followers_url": "https://api.github.com/users/mx472756841/followers", "following_url": "https://api.github.com/users/mx472756841/following{/other_user}", "gists_url": "https://api.github.com/users/mx472756841/gists{/gist_id}", "starred_url": "https://api.github.com/users/mx472756841/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mx472756841/subscriptions", "organizations_url": "https://api.github.com/users/mx472756841/orgs", "repos_url": "https://api.github.com/users/mx472756841/repos", "events_url": "https://api.github.com/users/mx472756841/events{/privacy}", "received_events_url": "https://api.github.com/users/mx472756841/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-12T16:05:09Z", "updated_at": "2019-07-08T10:04:56Z", "closed_at": "2019-06-12T16:09:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n![image](https://user-images.githubusercontent.com/12297227/59367425-a1ae8980-8d6e-11e9-9ab4-f14ba6fbf5ff.png)\r\n\r\n\r\n```python\r\nfrom Crypto.Cipher import AES\r\nfrom Crypto.Hash import CMAC\r\n\r\nsession_key = b\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"\r\ndata = b'\\x00\\x00'\r\ncmac = CMAC.new(key, data, ciphermod=AES)\r\ncmac.hexdigest()\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/298", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/298/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/298/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/298", "id": 455127235, "node_id": "MDU6SXNzdWU0NTUxMjcyMzU=", "number": 298, "title": "PBKDF2 is unusable with hmac_hash_module=BLAKE2b", "user": {"login": "ulidtko", "id": 365338, "node_id": "MDQ6VXNlcjM2NTMzOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/365338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ulidtko", "html_url": "https://github.com/ulidtko", "followers_url": "https://api.github.com/users/ulidtko/followers", "following_url": "https://api.github.com/users/ulidtko/following{/other_user}", "gists_url": "https://api.github.com/users/ulidtko/gists{/gist_id}", "starred_url": "https://api.github.com/users/ulidtko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ulidtko/subscriptions", "organizations_url": "https://api.github.com/users/ulidtko/orgs", "repos_url": "https://api.github.com/users/ulidtko/repos", "events_url": "https://api.github.com/users/ulidtko/events{/privacy}", "received_events_url": "https://api.github.com/users/ulidtko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-12T10:12:27Z", "updated_at": "2019-06-23T12:34:37Z", "closed_at": "2019-06-23T12:34:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nLet's say I want to use PBKDF2, exactly for key derivation -- but with some other hash function besides SHA1 or SHA256; let's pick BLAKE2b. Crypto.SE has [no problem with that][\u2022], and the docs seem to suggest that's easily possible, via the `hmac_hash_module` parameter.\r\n\r\nHowever this doesn't work:\r\n```py3\r\nfrom Cryptodome.Hash import BLAKE2b\r\nfrom Cryptodome.Protocol.KDF import PBKDF2\r\n\r\nPBKDF2(password=b\"example\", salt=b\"salt\", dkLen=64, count=2**15,\r\n     hmac_hash_module=BLAKE2b)\r\n```\r\n\r\n> AttributeError: module 'Cryptodome.Hash.BLAKE2b' has no attribute 'digest_size'\r\n\r\nWelp. Can I monkey-patch this little pity perhaps?..\r\n```py3\r\n>>> BLAKE2b.digest_size = 64\r\n>>> PBKDF2(password=b\"example\", salt=b\"salt\", dkLen=64, count=2**15, hmac_hash_module=BLAKE2b)\r\nTraceback (most recent call last):\r\n  File \"/home/ulidtko/.local/lib/python3.6/site-packages/Cryptodome/Hash/HMAC.py\", line 71, in __init__\r\n    if len(key) <= digestmod.block_size:\r\nAttributeError: module 'Cryptodome.Hash.BLAKE2b' has no attribute 'block_size'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n    [...]\r\n    raise ValueError(\"Hash type incompatible to HMAC\")\r\nValueError: Hash type incompatible to HMAC\r\n```\r\nOkay, `BLAKE2b.BLAKE2b_Hash` *class* does have `block_size` attribute, but the *module* does not. Let's push the monkey-patching a bit further:\r\n```py3\r\n>>> BLAKE2b.block_size = 64\r\n>>> PBKDF2(password=b\"example\", salt=b\"salt\", dkLen=64, count=2**15, hmac_hash_module=BLAKE2b)\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/code.py\", line 91, in runcode\r\n    exec(code, self.locals)\r\n  File \"<console>\", line 1, in <module>\r\n  File \"/home/ulidtko/.local/lib/python3.6/site-packages/Cryptodome/Protocol/KDF.py\", line 151, in PBKDF2\r\n    s = [ prf(password, salt + struct.pack(\">I\", i)) ] * 2\r\n  File \"/home/ulidtko/.local/lib/python3.6/site-packages/Cryptodome/Protocol/KDF.py\", line 142, in <lambda>\r\n    prf = lambda p,s: HMAC.new(p, s, hmac_hash_module).digest()\r\n  File \"/home/ulidtko/.local/lib/python3.6/site-packages/Cryptodome/Hash/HMAC.py\", line 213, in new\r\n    return HMAC(key, msg, digestmod)\r\n  File \"/home/ulidtko/.local/lib/python3.6/site-packages/Cryptodome/Hash/HMAC.py\", line 86, in __init__\r\n    self._inner = digestmod.new(key_0_ipad)\r\nTypeError: new() takes 0 positional arguments but 1 was given\r\n```\r\nDarn. So now, we have that `BLAKE2b_Hash.new()` accepts the initial `data` through named kwargs-only, but `Hash.HMAC` passes that through a positional argument. It gets uncomfortable, but I can patch that in as well. It **still** doesn't work:\r\n```py3\r\n  [...]\r\n  File \"/home/ulidtko/.local/lib/python3.6/site-packages/Cryptodome/Hash/HMAC.py\", line 143, in digest\r\n    frozen_outer_hash = self._outer.copy()\r\nAttributeError: 'BLAKE2b_Hash' object has no attribute 'copy'\r\n```\r\n\r\nDisappointing. Seems like the `hmac_hash_module` parameter doesn't really work with anything else but SHA1 and SHA256. At the very least, the docs should've been clear about this.\r\n\r\nP.S: there's also this suspicion that I'm supposed to wrap the BLAKE2b hash function *in a Cryptodome.Hash.HMAC* instance; however, that gives `TypeError: new() takes 0 positional arguments but 1 was given` just as above; and even if it didn't, `hmac_hash_module` doesn't accept *instances*, only modules.\r\n\r\nDoes this count as an API bug?.. How can I achieve this rather trivial function composition?\r\n\r\n[\u2022]: https://crypto.stackexchange.com/a/52657/11033", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/297", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/297/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/297/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/297", "id": 454119703, "node_id": "MDU6SXNzdWU0NTQxMTk3MDM=", "number": 297, "title": "raise ValueError(\"Triple DES key degenerates to single DES\")", "user": {"login": "leileigong", "id": 12391734, "node_id": "MDQ6VXNlcjEyMzkxNzM0", "avatar_url": "https://avatars0.githubusercontent.com/u/12391734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leileigong", "html_url": "https://github.com/leileigong", "followers_url": "https://api.github.com/users/leileigong/followers", "following_url": "https://api.github.com/users/leileigong/following{/other_user}", "gists_url": "https://api.github.com/users/leileigong/gists{/gist_id}", "starred_url": "https://api.github.com/users/leileigong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leileigong/subscriptions", "organizations_url": "https://api.github.com/users/leileigong/orgs", "repos_url": "https://api.github.com/users/leileigong/repos", "events_url": "https://api.github.com/users/leileigong/events{/privacy}", "received_events_url": "https://api.github.com/users/leileigong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-10T11:13:52Z", "updated_at": "2019-06-10T16:00:51Z", "closed_at": "2019-06-10T16:00:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "when i create an 3DES instance, i got error `ValueError: Triple DES key degenerates to single DES`\r\n\r\nHere is my code :\r\n`cipher = DES3.new(MDK, DES3.MODE_ECB)`\r\n\r\n`MDK` is 00000000000000000000000000000000 ( 0x00 of 16 bytes.)\r\n\r\nI find some code in 3DES.py.\r\n```\r\n    if key_out[:8] == key_out[8:16] or key_out[-16:-8] == key_out[-8:]:\r\n        raise ValueError(\"Triple DES key degenerates to single DES\")\r\n```\r\n\r\nSo I could use if the key is degenerated?\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/295", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/295/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/295/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/295/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/295", "id": 452452984, "node_id": "MDU6SXNzdWU0NTI0NTI5ODQ=", "number": 295, "title": "What about moving from load_pycryptodome_raw_lib to pyx ?", "user": {"login": "misl6", "id": 8177736, "node_id": "MDQ6VXNlcjgxNzc3MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/8177736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/misl6", "html_url": "https://github.com/misl6", "followers_url": "https://api.github.com/users/misl6/followers", "following_url": "https://api.github.com/users/misl6/following{/other_user}", "gists_url": "https://api.github.com/users/misl6/gists{/gist_id}", "starred_url": "https://api.github.com/users/misl6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/misl6/subscriptions", "organizations_url": "https://api.github.com/users/misl6/orgs", "repos_url": "https://api.github.com/users/misl6/repos", "events_url": "https://api.github.com/users/misl6/events{/privacy}", "received_events_url": "https://api.github.com/users/misl6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-05T11:35:19Z", "updated_at": "2019-07-25T12:59:19Z", "closed_at": "2019-07-25T12:59:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Considering that could solve a lot of issues, what about moving to a `pyx` solution for calling the \"c api\" instead of the custom `load_pycryptodome_raw_lib` ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/294", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/294/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/294/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/294/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/294", "id": 450743892, "node_id": "MDU6SXNzdWU0NTA3NDM4OTI=", "number": 294, "title": "Error during RSA signature: 'RsaKey' object has no attribute 'x'", "user": {"login": "SukkoPera", "id": 1316870, "node_id": "MDQ6VXNlcjEzMTY4NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1316870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SukkoPera", "html_url": "https://github.com/SukkoPera", "followers_url": "https://api.github.com/users/SukkoPera/followers", "following_url": "https://api.github.com/users/SukkoPera/following{/other_user}", "gists_url": "https://api.github.com/users/SukkoPera/gists{/gist_id}", "starred_url": "https://api.github.com/users/SukkoPera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SukkoPera/subscriptions", "organizations_url": "https://api.github.com/users/SukkoPera/orgs", "repos_url": "https://api.github.com/users/SukkoPera/repos", "events_url": "https://api.github.com/users/SukkoPera/events{/privacy}", "received_events_url": "https://api.github.com/users/SukkoPera/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-31T11:05:33Z", "updated_at": "2019-05-31T11:12:30Z", "closed_at": "2019-05-31T11:12:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using Pycryptodome 3.8.2, I'm trying to sign something with RSA. Key was generated with OpenSSL and is in PEM format.\r\n\r\n```\r\nfrom Crypto.PublicKey import RSA\r\nfrom Crypto.Hash import SHA256\r\nfrom Crypto.Signature import DSS\r\n\r\nPRIVKEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\r\n<snip>\r\n-----END RSA PRIVATE KEY-----\r\n\"\"\"\r\n\r\nmessage = \"fhhfuiohgsduiohgriohguiowrhgiorghiowerfejkdpfo\"\r\nkey = RSA.importKey (PRIVKEY)\r\nh = SHA256.new (message)\r\nsigner = DSS.new (key, 'fips-186-3')\r\nsignature = signer.sign (h)\r\n```\r\n\r\nThis fails with:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test_sig.py\", line 50, in <module>\r\n    signer = DSS.new (key, 'fips-186-3')\r\n  File \"C:\\Python27\\lib\\site-packages\\Crypto\\Signature\\DSS.py\", line 396, in new\r\n    private_key = getattr(key, private_key_attr)\r\nAttributeError: 'RsaKey' object has no attribute 'x'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/293", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/293/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/293/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/293", "id": 450514075, "node_id": "MDU6SXNzdWU0NTA1MTQwNzU=", "number": 293, "title": "Version 3.8.2 of pycryptodomex on pypi.org is missing windows wheels", "user": {"login": "TonyBeswick", "id": 10818552, "node_id": "MDQ6VXNlcjEwODE4NTUy", "avatar_url": "https://avatars1.githubusercontent.com/u/10818552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TonyBeswick", "html_url": "https://github.com/TonyBeswick", "followers_url": "https://api.github.com/users/TonyBeswick/followers", "following_url": "https://api.github.com/users/TonyBeswick/following{/other_user}", "gists_url": "https://api.github.com/users/TonyBeswick/gists{/gist_id}", "starred_url": "https://api.github.com/users/TonyBeswick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TonyBeswick/subscriptions", "organizations_url": "https://api.github.com/users/TonyBeswick/orgs", "repos_url": "https://api.github.com/users/TonyBeswick/repos", "events_url": "https://api.github.com/users/TonyBeswick/events{/privacy}", "received_events_url": "https://api.github.com/users/TonyBeswick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-30T21:26:37Z", "updated_at": "2019-06-03T21:24:34Z", "closed_at": "2019-05-31T05:57:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version 3.8.2 of pycryptodomex on pypi.org is missing windows wheels: \r\nhttps://pypi.org/project/pycryptodomex/3.8.2/#files\r\n\r\nVersion 3.8.1 has them: https://pypi.org/project/pycryptodomex/3.8.1/#files\r\n\r\nAlso pycryptodome 3.8.2 has them: https://pypi.org/project/pycryptodome/3.8.2/#files\r\n\r\nThis causes the following error when trying to install pycrytodomex on windows without a compiler:\r\n\r\n`distutils.errors.DistutilsPlatformError: Microsoft Visual C++ 9.0 is required. Get it from http://aka.ms/vcpython27`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/292", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/292/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/292/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/292", "id": 449657942, "node_id": "MDU6SXNzdWU0NDk2NTc5NDI=", "number": 292, "title": "Problem in documentation for Triple DES", "user": {"login": "jachymb", "id": 1655105, "node_id": "MDQ6VXNlcjE2NTUxMDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1655105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachymb", "html_url": "https://github.com/jachymb", "followers_url": "https://api.github.com/users/jachymb/followers", "following_url": "https://api.github.com/users/jachymb/following{/other_user}", "gists_url": "https://api.github.com/users/jachymb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachymb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachymb/subscriptions", "organizations_url": "https://api.github.com/users/jachymb/orgs", "repos_url": "https://api.github.com/users/jachymb/repos", "events_url": "https://api.github.com/users/jachymb/events{/privacy}", "received_events_url": "https://api.github.com/users/jachymb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 609545399, "node_id": "MDU6TGFiZWw2MDk1NDUzOTk=", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/documentation", "name": "documentation", "color": "fbca04", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-29T08:07:36Z", "updated_at": "2019-05-30T19:58:00Z", "closed_at": "2019-05-30T19:58:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is the following example in documentation for DES3 https://pycryptodome.readthedocs.io/en/latest/src/cipher/des3.html\r\n\r\n    >>> from Crypto.Cipher import DES3\r\n    >>> from Crypto.Random import get_random_bytes\r\n    >>>\r\n    >>> # Avoid Option 3\r\n    >>> while True:\r\n    >>>     try:\r\n    >>>         key = DES3.adjust_key_parity(get_random_bytes(24))\r\n    >>>         break\r\n    >>>     except ValueError:\r\n    >>>         pass\r\n    >>>\r\n    >>> cipher = DES3.new(key, DES3.MODE_CFB)\r\n    >>> plaintext = b'We are no longer the knights who say ni!'\r\n    >>> msg = cipher.nonce + cipher.encrypt(plaintext)\r\n\r\nHowever when I run this, I get the following error:\r\n\r\n    Traceback (most recent call last):\r\n      File \"<stdin>\", line 1, in <module>\r\n    AttributeError: 'CfbMode' object has no attribute 'nonce'\r\n\r\nPerhaps the documentation is outdated? I am using version `pycryptodome==3.8.1`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/291", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/291/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/291/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/291", "id": 448120863, "node_id": "MDU6SXNzdWU0NDgxMjA4NjM=", "number": 291, "title": "mont_mult_* calling square_w_32 violates type-based alias rules", "user": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-24T11:28:37Z", "updated_at": "2019-05-30T11:50:41Z", "closed_at": "2019-05-30T11:22:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "On 32bit platforms at least it seems that we have\r\n\r\nsize_t inline square_w(uint64_t *t, const uint64_t *a, size_t words)\r\n{   \r\n    return square_w_32((uint32_t*)t, (const uint32_t*)a, words*2)/2;\r\n}\r\n\r\nand square_w_32 reading/writing to t via uint32_t.  That violates type-based alias rules\r\nfor example at the caller mont_mult_p256 which does\r\n\r\n    if (a == b) {\r\n        square_w(t, a, 4U);\r\n    } else {\r\n        product(t, a, b, 4U);\r\n    }   \r\n        \r\n    t[(2*4U +1)-1] = 0; \r\n\r\n\r\n    for (i=0; i<(2*4U +1); i++) {\r\n        t32[2*i] = (uint32_t)t[i];\r\n        t32[2*i+1] = (uint32_t)(t[i] >> 32);\r\n    }\r\n\r\nand in this loop reads back values via uint64_t types (t is uint64_t[]).  This causes\r\nGCC to happily optimize the first read (from t[0]) to zero because it can see\r\nthe memset to zero in square_w bypassing the stores via uint32_t.\r\n\r\nUsing the uint64_t scratchpad for uint32_t values is OK but store and load types\r\nhave to match.\r\n\r\nA way out is to use -fno-strict-aliasing or declaring aliasing types via\r\ntypedef uint32_t aliasing_uint32_t __attribute__((may_alias));\r\nand using aliasing_uint32_t * for the types in the affected functions.\r\n\r\nThere may be more issues in the code base like addmul32 and friends.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/290", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/290/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/290/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/290", "id": 445889210, "node_id": "MDU6SXNzdWU0NDU4ODkyMTA=", "number": 290, "title": "ImportError: cannot import name DSS", "user": {"login": "cahmel", "id": 50686802, "node_id": "MDQ6VXNlcjUwNjg2ODAy", "avatar_url": "https://avatars3.githubusercontent.com/u/50686802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cahmel", "html_url": "https://github.com/cahmel", "followers_url": "https://api.github.com/users/cahmel/followers", "following_url": "https://api.github.com/users/cahmel/following{/other_user}", "gists_url": "https://api.github.com/users/cahmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/cahmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cahmel/subscriptions", "organizations_url": "https://api.github.com/users/cahmel/orgs", "repos_url": "https://api.github.com/users/cahmel/repos", "events_url": "https://api.github.com/users/cahmel/events{/privacy}", "received_events_url": "https://api.github.com/users/cahmel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-20T01:24:27Z", "updated_at": "2019-05-28T08:34:32Z", "closed_at": "2019-05-28T08:34:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running on Python 2.7 in Linux and I am trying to use DSS but it gives me error. Fyi, I am running one of the examples given in the documentation.\r\n\r\nAny advise on this?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/289", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/289/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/289/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/289/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/289", "id": 444357405, "node_id": "MDU6SXNzdWU0NDQzNTc0MDU=", "number": 289, "title": "random encoding types", "user": {"login": "lukehinds", "id": 7058938, "node_id": "MDQ6VXNlcjcwNTg5Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7058938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukehinds", "html_url": "https://github.com/lukehinds", "followers_url": "https://api.github.com/users/lukehinds/followers", "following_url": "https://api.github.com/users/lukehinds/following{/other_user}", "gists_url": "https://api.github.com/users/lukehinds/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukehinds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukehinds/subscriptions", "organizations_url": "https://api.github.com/users/lukehinds/orgs", "repos_url": "https://api.github.com/users/lukehinds/repos", "events_url": "https://api.github.com/users/lukehinds/events{/privacy}", "received_events_url": "https://api.github.com/users/lukehinds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-15T10:23:06Z", "updated_at": "2019-05-15T10:35:01Z", "closed_at": "2019-05-15T10:35:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am porting a project from python 2 to python 3 (Python 3.6.8) that uses pycryptodome. As str, unicodes and bytes are handled differently in Python 3 I am needing to do some decoding and encoding on certain objects.\r\n\r\nIn order to do so I need to know the encoding type, so I used the `chardet` library and found its quite sporadic in it's selection:\r\n\r\n```\r\nimport chardet\r\nimport random\r\nimport string\r\nfrom Cryptodome.Protocol import KDF\r\n\r\ndef randomString(stringLength=10):\r\n    \"\"\"Generate a random string of fixed length \"\"\"\r\n    letters = string.ascii_lowercase\r\n    return ''.join(random.choice(letters) for i in range(stringLength))\r\n\r\nfor i in range(20):\r\n    key = KDF.PBKDF2(randomString(10), randomString(30), dkLen=32, count=2000)\r\n    encoding = chardet.detect(key)['encoding']\r\n    print('key: ', key)\r\n    print('encoding: ', encoding)\r\n```\r\n\r\nResult:\r\n\r\n```\r\nkey:  b'd\\x00T\\xd95\\x0f\\x88\\xfb\\xa7\\xaf\\x9cW\\xa1\\xeb\\x01 \\xf9\\xc66\\x8f\\xed\\x9e#\\x13?{\\xfb\\xb1\\xc9H\\xe5\\xf3'\r\nencoding:  Windows-1253\r\nkey:  b'\\x15\\xa7\\x9b#\\xdd\\xe8\\xa7\\x8c\\x02\\xba\\xd7\\x13\\xb1bp\\xfee\\x05\\x90\\x83\\x0f\\xec3V3\\x95@\\xcf\\n@\\xd4\\x8e'\r\nencoding:  Windows-1253\r\nkey:  b'\\xea\\xd7\\x0e\\xae\\xb8\\xcb\\xdc\\x84\\x851p\\x11iT6\\x9c|\\xa76\\xa4N{\\x93\\x1bH\\xc1\\xfe%\\xbc\\xf0\\xca\\xd5'\r\nencoding:  None\r\nkey:  b'%\\xfaW-q\\xc9\\x87\\xe3\\x86\\xe9\\x915\\xec1\\x9d\\x06ZF\\xe0\\xcb\\xcf\\x7f\\nf\\x03+\\xc3\\x98\\x8e\\x95\\xd4\\x08'\r\nencoding:  KOI8-R\r\nkey:  b'\\xef\\xbcP=0\\x95\\x15\\x02\\xd2\\x85e\\xb8\\x93\\xb3\\x1eJ1\\xb2>\\x0cJS\\xa8\\x8dWL\\x01X\\xa0\\xf9I\\xea'\r\nencoding:  IBM855\r\nkey:  b't\\x8e?\\x0e6\\xe1\\xa9b\\x88\\xdcmo\\r\\x8f^B%X\\xf2\\xa7\\x89\\x88\\xdf\\x8a\\rJ\\xb4t\\x0b\\x19F\\xfa'\r\nencoding:  None\r\nkey:  b'\\xa4l\\x1fS\\x13\\x9c\\\\\\x93X\\xd6\\x97\\xf8Ci\\x17\\x16\\xf5VKRIcQ\\xd8D.\\x00\\x10+g\\x1b\\xc1'\r\nencoding:  None\r\nkey:  b'\\xfc\\x11\\xe4}O\\x90\\xcaF\\xf8\\x15\\x9e\\x87\\x9c5\\x99\\xe3T\\xb3GA\\xd6\\x01#\\xf8\\xe1\\r\\xa9\\xfe#\\xe7\\xe4_'\r\nencoding:  windows-1255\r\nkey:  b\"{Y\\xad\\xbf\\xb2'\\x98u)\\x19\\xbf?{\\xd4\\xbfDsN:u\\xfa\\x85\\x81\\xd1H\\x91\\xaa\\xf5\\xec<\\xae\\x02\"\r\nencoding:  Windows-1252\r\nkey:  b'\\r\\xf5\\x0cS\\x8b\\x95\\xf2lIz\\x1c\\xbco\\x85\\xe9\\xaa\\xb6\\xb9R\\x90\\x82\\x02k\\xf0]\\x08J\\xf2\\xe2\\xaa\\xcf\\x86'\r\nencoding:  windows-1251\r\nkey:  b'\\xda\\xbe0R+j\\xe5\\xd4\\x068r\\t\\xbdr\\xfa\\xdcjf22\\x05\\x8eOn\\xba\\xe3\\x04\\x01\\xfa \\x96r'\r\nencoding:  IBM855\r\nkey:  b'\\xc5\\x16\\xdb\\x05%\\xdf\\x9a\\x1f!\\x02;\\x04\\xe86@\\xc7\\xd0\\xf4\\xee\\xf7V\\xe4\\xd2i\\x0bW\\xdf\\xdb!\\x16\\xc9\\xee'\r\nencoding:  MacCyrillic\r\nkey:  b'\\x94\\rOg?\\r\\xc5\\x8cQ\\x14\\xb1\\x86n\\xd4k\\xfc[-\\xc1u\\x8b\\xde\\xb8rFu2~\\x1cB\\x96\\x04'\r\nencoding:  None\r\nkey:  b' l\\xdd\\x8dhs\\xe31\\x96\\xc5\\xe3\\x7fs\\xbb3\\x92\\xa2\\xfe-\\xf2\\xe8\\xc2l\\x0e*\\xca\\x8d\\xa8\\x00\\xa1lo'\r\nencoding:  MacCyrillic\r\nkey:  b'&\\x0c|zl\\xc158~\\x8d1\\x80%\\x8e\\xf4~\\r\\x0f\\xbbi\\x9d\\x06.\\x07?s\\x00\\xb7\\x17\\xe2\\xecB'\r\nencoding:  IBM866\r\nkey:  b\"K\\xba\\xb2\\xc9\\x12\\t\\xbe\\x16!\\x8fdT\\x08\\xf8'\\rP\\xee{\\xc1u\\x98Y3\\xbf\\xcf\\xac\\x9a\\x01\\x97\\xa9\\x9c\"\r\nencoding:  None\r\nkey:  b'\\x83\\x1d\\x84Bj\\x15iD\\x1eG\\x11\\xae\\xa7h\\x18\\x8f\\xeb\\xdb\\xc94\\xc7\\xa5\\x82\\x01y4m\\xa6\\x8cnF\\x1b'\r\nencoding:  None\r\nkey:  b'tCi\\xfaz#\\x1e\\xafU\\x0e\\xf9UT\\xec\\xc8\\xfa\\xe5\"\\xf9oF\\xb2\\xde\\x12^\\xfb\\x97b\\xa9\\xd6YW'\r\nencoding:  None\r\nkey:  b')ge\\xd7E\\x88\\x84-WaV\\x18pjQ\\xe3\\x02\\xf2V\\x14\\x9c\\xd7\\x97/\\xb0\\xe6\\x8ak8\\x98\\x0f\\xd7'\r\nencoding:  Windows-1254\r\nkey:  b'\\xecM=O\\xcc\\xe5\\x86\\x9c\\x94\\x8c\\xe9\\x03x\\x02\\xec\\xd5`\\xfd]\\x86(\\xfa7\\x18\\xc7{}n\\xea\\xd9X('\r\nencoding:  Windows-1253\r\n\r\n```\r\n\r\nI can't work out why there is a lot of variation there, this might even be a python 'thing' or chardet reading incorrectly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/288", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/288/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/288/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/288", "id": 444104323, "node_id": "MDU6SXNzdWU0NDQxMDQzMjM=", "number": 288, "title": "RSA.import_key() fails to import PEM encrypted w/ AES256-CBC", "user": {"login": "skotchandsoda", "id": 969725, "node_id": "MDQ6VXNlcjk2OTcyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/969725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skotchandsoda", "html_url": "https://github.com/skotchandsoda", "followers_url": "https://api.github.com/users/skotchandsoda/followers", "following_url": "https://api.github.com/users/skotchandsoda/following{/other_user}", "gists_url": "https://api.github.com/users/skotchandsoda/gists{/gist_id}", "starred_url": "https://api.github.com/users/skotchandsoda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skotchandsoda/subscriptions", "organizations_url": "https://api.github.com/users/skotchandsoda/orgs", "repos_url": "https://api.github.com/users/skotchandsoda/repos", "events_url": "https://api.github.com/users/skotchandsoda/events{/privacy}", "received_events_url": "https://api.github.com/users/skotchandsoda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700761, "node_id": "MDU6TGFiZWw5NjcwMDc2MQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-14T20:15:24Z", "updated_at": "2019-08-27T20:08:42Z", "closed_at": "2019-08-27T20:08:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "The changelog for 3.8.1 (9389dad20c81928e51151ddb984d5721a7cb09d2) suggests that PEM-encoded private keys encrypted with AES256-CBC are supported for import.\r\n\r\nBut I cannot import a private key generated with the openssl command-line tool as follows:\r\n```\r\nopenssl genrsa -aes256 2048 > private-key\r\n```\r\n\r\nWhen I try to import that key:\r\n```\r\n$ python3\r\n>>> from Cryptodome.PublicKey import RSA\r\n>>> privkey_contents = open('private-key', 'rb').read()\r\n>>> privkey = RSA.import_key(privkey_contents, 'password')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/ssc/.local/lib/python3.6/site-packages/Cryptodome/PublicKey/RSA.py\", line 733, in import_key\r\n    (der, marker, enc_flag) = PEM.decode(tostr(extern_key), passphrase)\r\n  File \"/home/ssc/.local/lib/python3.6/site-packages/Cryptodome/IO/PEM.py\", line 170, in decode\r\n    raise ValueError(\"Unsupport PEM encryption algorithm (%s).\" % algo)\r\nValueError: Unsupport PEM encryption algorithm (AES-256-CBC).\r\n>>> \r\n```\r\n\r\nIt looks like import support for PEMs with AES192-CBC and AES256-GCM were added here: ec00dd5b118c58750186ec8a7719283f5e6c16b9\r\n\r\nDid I misunderstand the changelog?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/286", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/286/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/286/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/286", "id": 440468503, "node_id": "MDU6SXNzdWU0NDA0Njg1MDM=", "number": 286, "title": "PyInstaller issues with pycryptodome 3.8.1: Cannot load native module 'Cryptodome.PublicKey._ec_ws'", "user": {"login": "SomberNight", "id": 29142493, "node_id": "MDQ6VXNlcjI5MTQyNDkz", "avatar_url": "https://avatars2.githubusercontent.com/u/29142493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomberNight", "html_url": "https://github.com/SomberNight", "followers_url": "https://api.github.com/users/SomberNight/followers", "following_url": "https://api.github.com/users/SomberNight/following{/other_user}", "gists_url": "https://api.github.com/users/SomberNight/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomberNight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions", "organizations_url": "https://api.github.com/users/SomberNight/orgs", "repos_url": "https://api.github.com/users/SomberNight/repos", "events_url": "https://api.github.com/users/SomberNight/events{/privacy}", "received_events_url": "https://api.github.com/users/SomberNight/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1290271601, "node_id": "MDU6TGFiZWwxMjkwMjcxNjAx", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/fix_available", "name": "fix_available", "color": "c2e0c6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-05T17:23:11Z", "updated_at": "2019-08-27T07:53:42Z", "closed_at": "2019-08-27T07:53:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Windows binary built with pyinstaller 3.4 raises when packaging pycryptodomex 3.8.1.\r\nIssue not present with pycryptodomex 3.7.3.\r\n\r\n```\r\n> .\\electrum-3.3.4-189-gb11cb11d-dirty.exe\r\nTraceback (most recent call last):\r\n  File \"site-packages\\dns\\dnssec.py\", line 482, in <module>\r\nModuleNotFoundError: No module named 'Crypto'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"run_electrum\", line 79, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"c:\\python3\\lib\\site-packages\\PyInstaller\\loader\\pyimod03_importers.py\", line 627, in exec_module\r\n  File \"electrum\\__init__.py\", line 3, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"c:\\python3\\lib\\site-packages\\PyInstaller\\loader\\pyimod03_importers.py\", line 627, in exec_module\r\n  File \"electrum\\wallet.py\", line 63, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"c:\\python3\\lib\\site-packages\\PyInstaller\\loader\\pyimod03_importers.py\", line 627, in exec_module\r\n  File \"electrum\\contacts.py\", line 29, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"c:\\python3\\lib\\site-packages\\PyInstaller\\loader\\pyimod03_importers.py\", line 627, in exec_module\r\n  File \"electrum\\dnssec.py\", line 42, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"c:\\python3\\lib\\site-packages\\PyInstaller\\loader\\pyimod03_importers.py\", line 627, in exec_module\r\n  File \"site-packages\\dns\\dnssec.py\", line 489, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"c:\\python3\\lib\\site-packages\\PyInstaller\\loader\\pyimod03_importers.py\", line 627, in exec_module\r\n  File \"site-packages\\Cryptodome\\Signature\\DSS.py\", line 42, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"c:\\python3\\lib\\site-packages\\PyInstaller\\loader\\pyimod03_importers.py\", line 627, in exec_module\r\n  File \"site-packages\\Cryptodome\\PublicKey\\ECC.py\", line 90, in <module>\r\n  File \"site-packages\\Cryptodome\\Util\\_raw_api.py\", line 300, in load_pycryptodome_raw_lib\r\nOSError: Cannot load native module 'Cryptodome.PublicKey._ec_ws': Trying '_ec_ws.cp36-win32.pyd': Failed to load dynlib/dll 'C:\\\\Users\\\\User\\\\AppData\\\\Local\\\\Temp\\\\_MEI234602\\\\Cryptodome\\\\Util\\\\..\\\\PublicKey\\\\_ec_ws.cp36-win32.pyd'. Most probably this dynlib/dll was not found when the application was frozen., Trying '_ec_ws.pyd': Failed to load dynlib/dll 'C:\\\\Users\\\\User\\\\AppData\\\\Local\\\\Temp\\\\_MEI234602\\\\Cryptodome\\\\Util\\\\..\\\\PublicKey\\\\_ec_ws.pyd'. Most probably this dynlib/dll was not found when the application was frozen.\r\n[15332] Failed to execute script run_electrum\r\n```\r\n\r\nMaybe hook needs updating?\r\nhttps://github.com/pyinstaller/pyinstaller/blob/06f7da789f41a21dd697478ca317c858bc6be9e4/PyInstaller/hooks/hook-Cryptodome.py#L28-L34", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/285", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/285/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/285/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/285/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/285", "id": 439502271, "node_id": "MDU6SXNzdWU0Mzk1MDIyNzE=", "number": 285, "title": "the block size of MD2 must be 16 according to rfc 1319", "user": {"login": "jllin3029", "id": 29177807, "node_id": "MDQ6VXNlcjI5MTc3ODA3", "avatar_url": "https://avatars3.githubusercontent.com/u/29177807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jllin3029", "html_url": "https://github.com/jllin3029", "followers_url": "https://api.github.com/users/jllin3029/followers", "following_url": "https://api.github.com/users/jllin3029/following{/other_user}", "gists_url": "https://api.github.com/users/jllin3029/gists{/gist_id}", "starred_url": "https://api.github.com/users/jllin3029/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jllin3029/subscriptions", "organizations_url": "https://api.github.com/users/jllin3029/orgs", "repos_url": "https://api.github.com/users/jllin3029/repos", "events_url": "https://api.github.com/users/jllin3029/events{/privacy}", "received_events_url": "https://api.github.com/users/jllin3029/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96700759, "node_id": "MDU6TGFiZWw5NjcwMDc1OQ==", "url": "https://api.github.com/repos/Legrandin/pycryptodome/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-02T09:35:15Z", "updated_at": "2019-08-27T20:06:22Z", "closed_at": "2019-08-27T20:06:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "The block size of MD2 must be 16 according to rfc 1319, not 64.\r\nNeed modify block_size from 64 to 16 in MD2.py.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/284", "repository_url": "https://api.github.com/repos/Legrandin/pycryptodome", "labels_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/284/labels{/name}", "comments_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/284/comments", "events_url": "https://api.github.com/repos/Legrandin/pycryptodome/issues/284/events", "html_url": "https://github.com/Legrandin/pycryptodome/issues/284", "id": 437645438, "node_id": "MDU6SXNzdWU0Mzc2NDU0Mzg=", "number": 284, "title": "PKCS1_v1_5 and pkcs1_15 got different result", "user": {"login": "atlantis414", "id": 5257804, "node_id": "MDQ6VXNlcjUyNTc4MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5257804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atlantis414", "html_url": "https://github.com/atlantis414", "followers_url": "https://api.github.com/users/atlantis414/followers", "following_url": "https://api.github.com/users/atlantis414/following{/other_user}", "gists_url": "https://api.github.com/users/atlantis414/gists{/gist_id}", "starred_url": "https://api.github.com/users/atlantis414/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atlantis414/subscriptions", "organizations_url": "https://api.github.com/users/atlantis414/orgs", "repos_url": "https://api.github.com/users/atlantis414/repos", "events_url": "https://api.github.com/users/atlantis414/events{/privacy}", "received_events_url": "https://api.github.com/users/atlantis414/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-26T12:17:22Z", "updated_at": "2020-05-10T15:12:54Z", "closed_at": "2019-04-27T07:33:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "ubuntu 16.04 x64 \r\npycryptodome 3.7.2\r\n`\r\nimport base64\r\n\r\nfrom Crypto.Hash import SHA, SHA1, MD5\r\nfrom Crypto.PublicKey import RSA\r\nfrom Crypto.Signature import pkcs1_15, PKCS1_v1_5\r\n\r\n'https://www.pycryptodome.org/en/latest/index.html'\r\n\r\nPrivateKey = '''MIICXAIBAAKBgQCt7neb4kMvhZ8SjeMptfJliD7dChNddpow7i3DJ9KMQ6iFMYez\r\nmbrpJqJLZhXWlMj+Tf0fVhTnEB6636N/RPsjB1vUvXUwl6bAxsIai6vqZNBVJQPT\r\nihDOgP46zuJMHf4+o0Yrbobut7WSfFdZvkV+peiojlSBoNS0I4mmrUEHOQIDAQAB\r\nAoGAGrQ4LPjKM+uiBqk+LVNAChKnBCzd2EWzWrvWztW4X8yrfPejzBFYPx+tX0In\r\nLDDfwxuaN0tyHh+9eBeJ9KpUnEUu7WHNizi6nq7eM9iR3qB75/9fQpPIodP7r2CO\r\niq0Tj1QgwypEJiRWmfRorc5JU8OUugxcYhmrQ/JPQgCXLXkCQQDC42BPAGxxYWZx\r\nfynmtlkkMLaZn0ytTnS09OjYvpR+Q6VKOiykL66RasIE5ddCBrDsifQsgnSWdo4H\r\nFd6XGsALAkEA5HjL7yuefO5n+66k9Z5SJYoVOb3uo+Pxxf5YauvqnrSIkFsjgLp3\r\nCqSeN8VPoIxMqGm0gdDebc/vufXImWbMSwJAW8ZTfiCG8MWbRmtJwhmw1LgT5Tf9\r\nFcfScby7QgZNS0BzwAaxKwhBPr11bHUH71HTUzCLycINQSXHMFL+JU41jQJBAJtU\r\nNPHp6dpuC2vlFGmYtain9D5JjtEFy/4cKeinc99qRd4+2ChQnVYzDQ5FqxkvyX5G\r\nP15yroZh9E2teDAy33kCQADrSg3Zyuhfh2UFKbmKXdZiLm2t4g1mVumqZFTdLze8\r\nYmOgxjhI72+pldu1v6ttQu4lvKurD7E2xbnenUZsLMA='''\r\n\r\nPublicKey = '''MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCt7neb4kMvhZ8SjeMptfJliD7d\r\nChNddpow7i3DJ9KMQ6iFMYezmbrpJqJLZhXWlMj+Tf0fVhTnEB6636N/RPsjB1vU\r\nvXUwl6bAxsIai6vqZNBVJQPTihDOgP46zuJMHf4+o0Yrbobut7WSfFdZvkV+peio\r\njlSBoNS0I4mmrUEHOQIDAQAB'''\r\n\r\ndef RSA_Sign(message, privatekey):\r\n    privatekey = base64.b64decode(privatekey)\r\n    # rsakey = RSA.importKey(open('master-privatekey.pem').read())\r\n    rsakey = RSA.importKey(privatekey)\r\n    signer = PKCS1_v1_5.new(rsakey)\r\n    hash = SHA1.new(message.encode('utf-8'))\r\n    signature = base64.b64encode(signer.sign(hash))\r\n    return signature\r\n\r\ndef RSA_Verify(message, publickey, signature):\r\n    publickey = base64.b64decode(PublicKey)\r\n    # rsakey = RSA.importKey(open('master-publickey.pem', 'r').read())\r\n    rsakey = RSA.importKey(publickey)\r\n    hash = SHA1.new(message.encode('utf-8'))\r\n    verifier = PKCS1_v1_5.new(rsakey)\r\n    ret = verifier.verify(hash, base64.b64decode(signature))\r\n    return ret\r\n\r\nif __name__ == '__main__':\r\n    message = 'To be signed'\r\n    signature = RSA_Sign(message, PrivateKey)\r\n    print(signature)\r\n    ret = RSA_Verify(message, PublicKey, signature)\r\n    print(ret)\r\n`\r\n\r\nUse PKCS1_v1_5 to get results true\r\nUse Pkcs1_15 to get results None\r\nCan't these two classes be replaced with each other?\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}]}