{"total_count": 272, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/getsentry/sentry-python/issues/789", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/789/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/789/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/789/events", "html_url": "https://github.com/getsentry/sentry-python/issues/789", "id": 679264029, "node_id": "MDU6SXNzdWU2NzkyNjQwMjk=", "number": 789, "title": "Python/Django -exceptions reported in error log", "user": {"login": "sdnall", "id": 226296, "node_id": "MDQ6VXNlcjIyNjI5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/226296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdnall", "html_url": "https://github.com/sdnall", "followers_url": "https://api.github.com/users/sdnall/followers", "following_url": "https://api.github.com/users/sdnall/following{/other_user}", "gists_url": "https://api.github.com/users/sdnall/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdnall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdnall/subscriptions", "organizations_url": "https://api.github.com/users/sdnall/orgs", "repos_url": "https://api.github.com/users/sdnall/repos", "events_url": "https://api.github.com/users/sdnall/events{/privacy}", "received_events_url": "https://api.github.com/users/sdnall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1167050501, "node_id": "MDU6TGFiZWwxMTY3MDUwNTAx", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/needs-information", "name": "needs-information", "color": "e4e669", "default": false, "description": ""}, {"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-08-14T16:20:27Z", "updated_at": "2020-08-15T10:06:48Z", "closed_at": "2020-08-15T10:06:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWe've been using sentry for quite a while and it's been amazing. Thank you for providing such a useful tool!\r\n\r\nThe team I work with has started a new project, and we recently noticed what appears to be some sentry-specific error log output. We were wondering if this was something to be expected or not. We haven't noticed it on any of our previous projects running older versions of Python.\r\n\r\n### Details\r\nThese exceptions (captured below) occur when touching wsgi.py (reload), but do not seem to happen when restarting the entire web server.\r\n\r\nThese errors don't seem to affect requests/responses, but it _seems_ like it has lead to some undesired behavior with reporting exceptions/bugs in our code (no email notifications received).\r\n\r\nI enabled debug output via sentry_sdk.init in case that could possibly be useful.\r\n\r\n### Environment Info\r\n```\r\nOS: Ubuntu 20.04 LTS\r\nWeb server: Apache/2.4.41\r\nWSGI: mod_wsgi 4.7.0\r\nPython: 3.8.2\r\n```\r\n\r\n```\r\nDjango==3.0.7\r\nsentry_sdk==0.16.3\r\n```\r\n\r\n```python\r\nsentry_sdk.init(\r\n        dsn=\"our_dsn\",\r\n        integrations=[DjangoIntegration()],\r\n        send_default_pii=True,\r\n        debug=True,\r\n)\r\n```\r\n\r\n### Error Output\r\n```\r\n[Fri Aug 14 11:40:19.522117 2020] [wsgi:error] [pid 84917:tid 140085233822784]  [sentry] DEBUG: atexit: got shutdown signal\r\n[Fri Aug 14 11:40:19.522193 2020] [wsgi:error] [pid 84916:tid 140085233822784]  [sentry] DEBUG: atexit: got shutdown signal\r\n[Fri Aug 14 11:40:19.522371 2020] [wsgi:error] [pid 84916:tid 140085233822784]  [sentry] DEBUG: atexit: shutting down client\r\n[Fri Aug 14 11:40:19.522520 2020] [wsgi:error] [pid 84916:tid 140085233822784]  [sentry] DEBUG: Flushing HTTP transport\r\n[Fri Aug 14 11:40:19.522660 2020] [wsgi:error] [pid 84916:tid 140085233822784]  [sentry] DEBUG: background worker got flush request\r\n[Fri Aug 14 11:40:19.522797 2020] [wsgi:error] [pid 84916:tid 140085233822784]  [sentry] DEBUG: background worker flushed\r\n[Fri Aug 14 11:40:19.522801 2020] [wsgi:error] [pid 84917:tid 140085233822784]  [sentry] DEBUG: atexit: shutting down client\r\n[Fri Aug 14 11:40:19.522929 2020] [wsgi:error] [pid 84916:tid 140085233822784]  [sentry] DEBUG: Killing HTTP transport\r\n[Fri Aug 14 11:40:19.523053 2020] [wsgi:error] [pid 84916:tid 140085233822784]  [sentry] DEBUG: background worker got kill request\r\n[Fri Aug 14 11:40:19.523182 2020] [wsgi:error] [pid 84916:tid 140085233822784]  [sentry] DEBUG: Killing HTTP transport\r\n[Fri Aug 14 11:40:19.523187 2020] [wsgi:error] [pid 84917:tid 140085233822784]  [sentry] DEBUG: Flushing HTTP transport\r\n[Fri Aug 14 11:40:19.523298 2020] [wsgi:error] [pid 84916:tid 140085233822784]  [sentry] DEBUG: background worker got kill request\r\n[Fri Aug 14 11:40:19.523444 2020] [wsgi:error] [pid 84917:tid 140085233822784]  [sentry] DEBUG: background worker got flush request\r\n[Fri Aug 14 11:40:19.523628 2020] [wsgi:error] [pid 84917:tid 140085233822784]  [sentry] DEBUG: background worker flushed\r\n[Fri Aug 14 11:40:19.523790 2020] [wsgi:error] [pid 84917:tid 140085233822784]  [sentry] DEBUG: Killing HTTP transport\r\n[Fri Aug 14 11:40:19.523964 2020] [wsgi:error] [pid 84917:tid 140085233822784]  [sentry] DEBUG: background worker got kill request\r\nException ignored in: <function BaseEventLoop.__del__ at 0x7f6815b3bdc0>\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/asyncio/base_events.py\", line 654, in __del__\r\nNameError: name 'ResourceWarning' is not defined\r\nException in thread raven-sentry.BackgroundWorker:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/queue.py\", line 170, in get\r\n  File \"/usr/lib/python3.8/threading.py\", line 311, in invoke_excepthook\r\nUnboundLocalError: local variable 'self' referenced before assignment\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/srv/web/django_apps/.virtualenvs/emgv_intranet/lib/python3.8/site-packages/sentry_sdk/integrations/threading.py\", line 67, in run\r\n  File \"/usr/lib/python3.8/threading.py\", line 870, in run\r\n  File \"/srv/web/django_apps/.virtualenvs/emgv_intranet/lib/python3.8/site-packages/sentry_sdk/worker.py\", line 132, in _target\r\n  File \"/usr/lib/python3.8/queue.py\", line 182, in get\r\n  File \"/usr/lib/python3.8/threading.py\", line 250, in __exit__\r\nRuntimeError: release unlocked lock\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\r\n  File \"/srv/web/django_apps/.virtualenvs/emgv_intranet/lib/python3.8/site-packages/sentry_sdk/integrations/threading.py\", line 68, in run\r\nNameError: name 'Exception' is not defined\r\nException ignored in: <function Transport.__del__ at 0x7f6814f57820>\r\nTraceback (most recent call last):\r\n  File \"/srv/web/django_apps/.virtualenvs/emgv_intranet/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 97, in __del__\r\nNameError: name 'Exception' is not defined\r\nException ignored in: <function BaseEventLoop.__del__ at 0x7f6815b3bdc0>\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/asyncio/base_events.py\", line 654, in __del__\r\nNameError: name 'ResourceWarning' is not defined\r\ndouble free or corruption (out)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/780", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/780/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/780/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/780/events", "html_url": "https://github.com/getsentry/sentry-python/issues/780", "id": 676739524, "node_id": "MDU6SXNzdWU2NzY3Mzk1MjQ=", "number": 780, "title": "Sets are not breadth-limited", "user": {"login": "vmarkovtsev", "id": 2793551, "node_id": "MDQ6VXNlcjI3OTM1NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2793551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmarkovtsev", "html_url": "https://github.com/vmarkovtsev", "followers_url": "https://api.github.com/users/vmarkovtsev/followers", "following_url": "https://api.github.com/users/vmarkovtsev/following{/other_user}", "gists_url": "https://api.github.com/users/vmarkovtsev/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmarkovtsev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmarkovtsev/subscriptions", "organizations_url": "https://api.github.com/users/vmarkovtsev/orgs", "repos_url": "https://api.github.com/users/vmarkovtsev/repos", "events_url": "https://api.github.com/users/vmarkovtsev/events{/privacy}", "received_events_url": "https://api.github.com/users/vmarkovtsev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-11T09:52:47Z", "updated_at": "2020-08-12T13:16:49Z", "closed_at": "2020-08-12T11:52:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've got huge repr-s of sets that are included in the stack trace variables without truncation. As I see in `serializer.py`, `Mapping` and `Sequence` are limited to 10 items, but `typing.Set` is not handled yet.\r\n\r\n![image](https://user-images.githubusercontent.com/2793551/90019532-d5f14300-dcae-11ea-9011-2d7e6a13d477.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/771", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/771/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/771/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/771/events", "html_url": "https://github.com/getsentry/sentry-python/issues/771", "id": 668384792, "node_id": "MDU6SXNzdWU2NjgzODQ3OTI=", "number": 771, "title": "Support for mTLS", "user": {"login": "chhetripradeep", "id": 30620077, "node_id": "MDQ6VXNlcjMwNjIwMDc3", "avatar_url": "https://avatars1.githubusercontent.com/u/30620077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chhetripradeep", "html_url": "https://github.com/chhetripradeep", "followers_url": "https://api.github.com/users/chhetripradeep/followers", "following_url": "https://api.github.com/users/chhetripradeep/following{/other_user}", "gists_url": "https://api.github.com/users/chhetripradeep/gists{/gist_id}", "starred_url": "https://api.github.com/users/chhetripradeep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chhetripradeep/subscriptions", "organizations_url": "https://api.github.com/users/chhetripradeep/orgs", "repos_url": "https://api.github.com/users/chhetripradeep/repos", "events_url": "https://api.github.com/users/chhetripradeep/events{/privacy}", "received_events_url": "https://api.github.com/users/chhetripradeep/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-30T05:29:09Z", "updated_at": "2020-07-30T07:28:28Z", "closed_at": "2020-07-30T07:28:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am not sure if this feature is already there but i would like to see mTLS(https://en.wikipedia.org/wiki/Mutual_authentication) support in sentry-sdk. I would be interested in trying to contribute it if the feature isn't available already.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/769", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/769/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/769/events", "html_url": "https://github.com/getsentry/sentry-python/issues/769", "id": 666854296, "node_id": "MDU6SXNzdWU2NjY4NTQyOTY=", "number": 769, "title": "Capturing user in Flask", "user": {"login": "kam193", "id": 8472271, "node_id": "MDQ6VXNlcjg0NzIyNzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8472271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kam193", "html_url": "https://github.com/kam193", "followers_url": "https://api.github.com/users/kam193/followers", "following_url": "https://api.github.com/users/kam193/following{/other_user}", "gists_url": "https://api.github.com/users/kam193/gists{/gist_id}", "starred_url": "https://api.github.com/users/kam193/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kam193/subscriptions", "organizations_url": "https://api.github.com/users/kam193/orgs", "repos_url": "https://api.github.com/users/kam193/repos", "events_url": "https://api.github.com/users/kam193/events{/privacy}", "received_events_url": "https://api.github.com/users/kam193/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-28T08:01:46Z", "updated_at": "2020-07-28T10:18:35Z", "closed_at": "2020-07-28T10:18:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "tl;dr: What is the recommended way to capture user in Flask, in case when there is no `flask-login`?\r\n\r\nFirst try is to configure scope, so maybe decorate view with `push_scope`? Nope - it looks nice, but it is not enough if you want to have user info during e.g. error handling, which could be outside view method.\r\n\r\nSo we have `configure_scope`, what tell us the [Sentry doc](https://docs.sentry.io/platforms/python/#capturing-the-user)? Great, but only before #758 - before this PR, `FlaskIntegration` cleared the scope on every app context change (so typically for every request). Now information set global can be shared during requests - not the best option for user info.\r\n\r\nAnd the last try, we have `before_send` hook, what is currently probably the only way to capture user. Ok, but it's like totally different use as designed for it (stripping sensitive data), and this way is undocumented neither in general Sentry doc, nor in Flask-specific page (as an option for capturing user).\r\n\r\nI think we should have a recommended way for capturing user in Flask: by scope (similar like other platforms), hook (which works now) or a special one (like new hook in FlaskIntegration instead of hard coded support for `flask-login` only). ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/764", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/764/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/764/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/764/events", "html_url": "https://github.com/getsentry/sentry-python/issues/764", "id": 663859289, "node_id": "MDU6SXNzdWU2NjM4NTkyODk=", "number": 764, "title": "AWS Lambda under Python 3.8 is currently broken", "user": {"login": "untitaker", "id": 837573, "node_id": "MDQ6VXNlcjgzNzU3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/untitaker", "html_url": "https://github.com/untitaker", "followers_url": "https://api.github.com/users/untitaker/followers", "following_url": "https://api.github.com/users/untitaker/following{/other_user}", "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions", "organizations_url": "https://api.github.com/users/untitaker/orgs", "repos_url": "https://api.github.com/users/untitaker/repos", "events_url": "https://api.github.com/users/untitaker/events{/privacy}", "received_events_url": "https://api.github.com/users/untitaker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-07-22T15:39:32Z", "updated_at": "2020-08-01T20:10:48Z", "closed_at": "2020-08-01T19:39:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It seems they have done some updates on the runtime that broke our integration.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/757", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/757/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/757/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/757/events", "html_url": "https://github.com/getsentry/sentry-python/issues/757", "id": 653291313, "node_id": "MDU6SXNzdWU2NTMyOTEzMTM=", "number": 757, "title": "iter_default_integrations() missing 1 required positional argument: 'with_auto_enabling_integrations'", "user": {"login": "koreno", "id": 180551, "node_id": "MDQ6VXNlcjE4MDU1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/180551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koreno", "html_url": "https://github.com/koreno", "followers_url": "https://api.github.com/users/koreno/followers", "following_url": "https://api.github.com/users/koreno/following{/other_user}", "gists_url": "https://api.github.com/users/koreno/gists{/gist_id}", "starred_url": "https://api.github.com/users/koreno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koreno/subscriptions", "organizations_url": "https://api.github.com/users/koreno/orgs", "repos_url": "https://api.github.com/users/koreno/repos", "events_url": "https://api.github.com/users/koreno/events{/privacy}", "received_events_url": "https://api.github.com/users/koreno/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-08T13:19:09Z", "updated_at": "2020-07-11T16:50:41Z", "closed_at": "2020-07-08T13:56:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nTypeError: iter_default_integrations() missing 1 required positional argument: 'with_auto_enabling_integrations'\r\n```\r\nThis iterator used to be parameter-less. It appear it should still be that way, and that it should use the outer `with_auto_enabling_integrations` variable.\r\n\r\nhttps://github.com/getsentry/sentry-python/blob/bf48bd0681c68239ee651224b59b9d8aee78f514/sentry_sdk/integrations/__init__.py#L28\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/728", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/728/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/728/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/728/events", "html_url": "https://github.com/getsentry/sentry-python/issues/728", "id": 643265698, "node_id": "MDU6SXNzdWU2NDMyNjU2OTg=", "number": 728, "title": "Initialize sentry instance (or a distributed tracing transaction/span) with external/pre-existing trace_id", "user": {"login": "dirkdevriendt", "id": 1027400, "node_id": "MDQ6VXNlcjEwMjc0MDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1027400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dirkdevriendt", "html_url": "https://github.com/dirkdevriendt", "followers_url": "https://api.github.com/users/dirkdevriendt/followers", "following_url": "https://api.github.com/users/dirkdevriendt/following{/other_user}", "gists_url": "https://api.github.com/users/dirkdevriendt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dirkdevriendt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dirkdevriendt/subscriptions", "organizations_url": "https://api.github.com/users/dirkdevriendt/orgs", "repos_url": "https://api.github.com/users/dirkdevriendt/repos", "events_url": "https://api.github.com/users/dirkdevriendt/events{/privacy}", "received_events_url": "https://api.github.com/users/dirkdevriendt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-22T18:06:38Z", "updated_at": "2020-06-30T16:15:50Z", "closed_at": "2020-06-30T16:15:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I might be missing something, but I would think that, in a microservices solution, we need to have a way of linking together transactions and spans with an overarching trace_id and I can't find any documentation on how to do that.\r\n\r\nIn our case we pass this common trace_id on in different ways (HTTP headers, message properties etc) and when initializing a sentry instance, I would like to pass this trace_id to sentry so sentry can add its own transaction/span magic but still match up the frontend, backend and messaging processes.\r\n\r\nIs there a way to do that or could it be added to the API?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/721", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/721/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/721/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/721/events", "html_url": "https://github.com/getsentry/sentry-python/issues/721", "id": 640175001, "node_id": "MDU6SXNzdWU2NDAxNzUwMDE=", "number": 721, "title": "Filtering events via before_send just moves spam from Sentry to log file", "user": {"login": "TheSHEEEP", "id": 1766205, "node_id": "MDQ6VXNlcjE3NjYyMDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1766205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheSHEEEP", "html_url": "https://github.com/TheSHEEEP", "followers_url": "https://api.github.com/users/TheSHEEEP/followers", "following_url": "https://api.github.com/users/TheSHEEEP/following{/other_user}", "gists_url": "https://api.github.com/users/TheSHEEEP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheSHEEEP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheSHEEEP/subscriptions", "organizations_url": "https://api.github.com/users/TheSHEEEP/orgs", "repos_url": "https://api.github.com/users/TheSHEEEP/repos", "events_url": "https://api.github.com/users/TheSHEEEP/events{/privacy}", "received_events_url": "https://api.github.com/users/TheSHEEEP/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-17T06:23:39Z", "updated_at": "2020-08-12T17:07:17Z", "closed_at": "2020-08-12T17:07:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using a before_send function to not spam our sentry server with tons of reports we don't need.\r\n\r\nHowever, due to this line...\r\nhttps://github.com/getsentry/sentry-python/blob/master/sentry_sdk/client.py#L207\r\n\r\nThe filtered events still end up blowing up our log file(s) on the server significantly. \r\nThis logging should either be debug or not log anything at all.\r\n\r\nAfter all, the point of the before_send is to prevent spam, not just move spam to a different place.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/720", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/720/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/720/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/720/events", "html_url": "https://github.com/getsentry/sentry-python/issues/720", "id": 639313111, "node_id": "MDU6SXNzdWU2MzkzMTMxMTE=", "number": 720, "title": "sanic can't show request.header content", "user": {"login": "jiamo", "id": 732751, "node_id": "MDQ6VXNlcjczMjc1MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/732751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiamo", "html_url": "https://github.com/jiamo", "followers_url": "https://api.github.com/users/jiamo/followers", "following_url": "https://api.github.com/users/jiamo/following{/other_user}", "gists_url": "https://api.github.com/users/jiamo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiamo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiamo/subscriptions", "organizations_url": "https://api.github.com/users/jiamo/orgs", "repos_url": "https://api.github.com/users/jiamo/repos", "events_url": "https://api.github.com/users/jiamo/events{/privacy}", "received_events_url": "https://api.github.com/users/jiamo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-16T02:03:12Z", "updated_at": "2020-06-16T15:13:15Z", "closed_at": "2020-06-16T15:13:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "After \r\n\r\n```\r\nsentry_sdk.init(\r\n    dsn=user_config['SENTRY_DSN'],\r\n    integrations=[SanicIntegration()],\r\n)\r\n```\r\n\r\nand `capture_exception(exception)`\r\n\r\nBut the browser can't see the `request.header` (which is a dict value)\r\n\r\n`request body` can be show but in such warning like \r\n\r\n \r\n![image](https://user-images.githubusercontent.com/732751/84723519-57329f00-afb8-11ea-913f-6d021ab2cfd6.png)\r\n\r\nThe first **discared value** is a part of request.header\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/718", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/718/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/718/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/718/events", "html_url": "https://github.com/getsentry/sentry-python/issues/718", "id": 635882501, "node_id": "MDU6SXNzdWU2MzU4ODI1MDE=", "number": 718, "title": "Celery Integration breaks celery_once", "user": {"login": "jdavisp3", "id": 43582, "node_id": "MDQ6VXNlcjQzNTgy", "avatar_url": "https://avatars3.githubusercontent.com/u/43582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdavisp3", "html_url": "https://github.com/jdavisp3", "followers_url": "https://api.github.com/users/jdavisp3/followers", "following_url": "https://api.github.com/users/jdavisp3/following{/other_user}", "gists_url": "https://api.github.com/users/jdavisp3/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdavisp3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdavisp3/subscriptions", "organizations_url": "https://api.github.com/users/jdavisp3/orgs", "repos_url": "https://api.github.com/users/jdavisp3/repos", "events_url": "https://api.github.com/users/jdavisp3/events{/privacy}", "received_events_url": "https://api.github.com/users/jdavisp3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-10T02:38:51Z", "updated_at": "2020-06-10T10:17:59Z", "closed_at": "2020-06-10T03:18:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "The Celery integration appears to conflict with https://github.com/cameronmaske/celery-once.\r\n\r\nIn particular, the use of the `keys` https://github.com/cameronmaske/celery-once#keys option will cause a `KeyError` when the task attempts to run.\r\n\r\nSomehow the issue seems to be that the argument signature of task functions is different when the integration is installed.\r\n\r\nWhen [this code](https://github.com/cameronmaske/celery-once/blob/08fb3aa8797719109d5ba9c4897c6e0a6ae8eff4/celery_once/tasks.py#L110-L111) runs it fails to find a correctly-specified argument in the call arguments.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/714", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/714/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/714/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/714/events", "html_url": "https://github.com/getsentry/sentry-python/issues/714", "id": 631253799, "node_id": "MDU6SXNzdWU2MzEyNTM3OTk=", "number": 714, "title": "CeleryIntegration: ModuleNotFoundError(\"No module named 'future'\")", "user": {"login": "ohelal", "id": 1462946, "node_id": "MDQ6VXNlcjE0NjI5NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1462946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohelal", "html_url": "https://github.com/ohelal", "followers_url": "https://api.github.com/users/ohelal/followers", "following_url": "https://api.github.com/users/ohelal/following{/other_user}", "gists_url": "https://api.github.com/users/ohelal/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohelal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohelal/subscriptions", "organizations_url": "https://api.github.com/users/ohelal/orgs", "repos_url": "https://api.github.com/users/ohelal/repos", "events_url": "https://api.github.com/users/ohelal/events{/privacy}", "received_events_url": "https://api.github.com/users/ohelal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-05T01:54:43Z", "updated_at": "2020-06-05T10:00:05Z", "closed_at": "2020-06-05T06:22:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I'm getting this error after adding the Celery Integration as described in the docs (https://docs.sentry.io/platforms/python/celery/):\r\n\r\n```\r\nKeyError: 'backend'\r\n  File \"kombu/utils/objects.py\", line 42, in __get__\r\n    return obj.__dict__[self.__name__]\r\n\r\nModuleNotFoundError: No module named 'future'\r\n  File \"celery/worker/worker.py\", line 208, in start\r\n    self.blueprint.start(self)\r\n  File \"celery/bootsteps.py\", line 115, in start\r\n    self.on_start()\r\n  File \"celery/apps/worker.py\", line 139, in on_start\r\n    self.emit_banner()\r\n  File \"celery/apps/worker.py\", line 154, in emit_banner\r\n    ' \\n', self.startup_info(artlines=not use_image))),\r\n  File \"celery/apps/worker.py\", line 217, in startup_info\r\n    results=self.app.backend.as_uri(),\r\n  File \"kombu/utils/objects.py\", line 44, in __get__\r\n    value = obj.__dict__[self.__name__] = self.__get(obj)\r\n  File \"celery/app/base.py\", line 1232, in backend\r\n    return self._get_backend()\r\n  File \"celery/app/base.py\", line 949, in _get_backend\r\n    self.loader)\r\n  File \"celery/app/backends.py\", line 74, in by_url\r\n    return by_name(backend, loader), url\r\n  File \"celery/app/backends.py\", line 54, in by_name\r\n    cls = symbol_by_name(backend, aliases)\r\n  File \"kombu/utils/imports.py\", line 57, in symbol_by_name\r\n    module = imp(module_name, package=package, **kwargs)\r\n  File \"__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"celery/backends/base.py\", line 10, in <module>\r\n    from future.utils import raise_with_traceback\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/712", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/712/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/712/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/712/events", "html_url": "https://github.com/getsentry/sentry-python/issues/712", "id": 629572502, "node_id": "MDU6SXNzdWU2Mjk1NzI1MDI=", "number": 712, "title": "Django selective logging?", "user": {"login": "joshuakoh1", "id": 40602863, "node_id": "MDQ6VXNlcjQwNjAyODYz", "avatar_url": "https://avatars3.githubusercontent.com/u/40602863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshuakoh1", "html_url": "https://github.com/joshuakoh1", "followers_url": "https://api.github.com/users/joshuakoh1/followers", "following_url": "https://api.github.com/users/joshuakoh1/following{/other_user}", "gists_url": "https://api.github.com/users/joshuakoh1/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshuakoh1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshuakoh1/subscriptions", "organizations_url": "https://api.github.com/users/joshuakoh1/orgs", "repos_url": "https://api.github.com/users/joshuakoh1/repos", "events_url": "https://api.github.com/users/joshuakoh1/events{/privacy}", "received_events_url": "https://api.github.com/users/joshuakoh1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T23:09:48Z", "updated_at": "2020-06-17T08:09:20Z", "closed_at": "2020-06-17T08:09:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Came across this example but it was for raven https://stackoverflow.com/a/19290044\r\n\r\nHow do I use it with the new sentry client? Am I supposed to install raven as well? The docs say it's depreciated but I couldn't find the replacement.\r\n\r\n```\r\nLOGGING = {\r\n    'version': 1,\r\n    'disable_existing_loggers': False,\r\n    'filters': {\r\n        'require_debug_false': {\r\n            '()': 'django.utils.log.RequireDebugFalse'\r\n        }\r\n    },\r\n    'formatters': {\r\n        'verbose': {\r\n            'format': '[contactor] %(levelname)s %(asctime)s %(message)s'\r\n        },\r\n    },\r\n    'handlers': {\r\n        # Send all messages to console\r\n        'console': {\r\n            'level': 'DEBUG',\r\n            'class': 'logging.StreamHandler',\r\n        },\r\n        # Send info messages to syslog\r\n        'syslog':{\r\n            'level':'INFO',\r\n            'class': 'logging.handlers.SysLogHandler',\r\n            'facility': SysLogHandler.LOG_LOCAL2,\r\n            'address': '/dev/log',\r\n            'formatter': 'verbose',\r\n        },\r\n        # Warning messages are sent to admin emails\r\n        'mail_admins': {\r\n            'level': 'WARNING',\r\n            'filters': ['require_debug_false'],\r\n            'class': 'django.utils.log.AdminEmailHandler',\r\n        },\r\n        # critical errors are logged to sentry\r\n        'sentry': {\r\n            'level': 'ERROR',\r\n            'filters': ['require_debug_false'],\r\n            'class': 'raven.contrib.django.handlers.SentryHandler',\r\n        },\r\n    },\r\n    'loggers': {\r\n        # This is the \"catch all\" logger\r\n        '': {\r\n            'handlers': ['console', 'syslog', 'mail_admins', 'sentry'],\r\n            'level': 'DEBUG',\r\n            'propagate': False,\r\n        },\r\n    }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/709", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/709/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/709/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/709/events", "html_url": "https://github.com/getsentry/sentry-python/issues/709", "id": 625967295, "node_id": "MDU6SXNzdWU2MjU5NjcyOTU=", "number": 709, "title": "using sentry-python with flask application factory init_app", "user": {"login": "tedglee", "id": 56084098, "node_id": "MDQ6VXNlcjU2MDg0MDk4", "avatar_url": "https://avatars0.githubusercontent.com/u/56084098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedglee", "html_url": "https://github.com/tedglee", "followers_url": "https://api.github.com/users/tedglee/followers", "following_url": "https://api.github.com/users/tedglee/following{/other_user}", "gists_url": "https://api.github.com/users/tedglee/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedglee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedglee/subscriptions", "organizations_url": "https://api.github.com/users/tedglee/orgs", "repos_url": "https://api.github.com/users/tedglee/repos", "events_url": "https://api.github.com/users/tedglee/events{/privacy}", "received_events_url": "https://api.github.com/users/tedglee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-27T19:22:12Z", "updated_at": "2020-05-27T19:57:19Z", "closed_at": "2020-05-27T19:57:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI use factories in my flask app and initialize sentry with init_app:\r\n\r\n\r\n```\r\nfrom raven.contrib.flask import Sentry\r\nsentry = Sentry(dsn='YOUR_DSN_HERE')\r\n\r\ndef create_app():\r\n    app = Flask(__name__)\r\n    sentry.init_app(app)\r\n    ...\r\n    return app\r\n```\r\n\r\n\r\nI'd like to migrate from raven to sentry-python, but it doesn't seem to support init_app.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/705", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/705/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/705/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/705/events", "html_url": "https://github.com/getsentry/sentry-python/issues/705", "id": 625262713, "node_id": "MDU6SXNzdWU2MjUyNjI3MTM=", "number": 705, "title": "Allow setting ca_certs from environment variable", "user": {"login": "dacameron", "id": 6159196, "node_id": "MDQ6VXNlcjYxNTkxOTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/6159196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dacameron", "html_url": "https://github.com/dacameron", "followers_url": "https://api.github.com/users/dacameron/followers", "following_url": "https://api.github.com/users/dacameron/following{/other_user}", "gists_url": "https://api.github.com/users/dacameron/gists{/gist_id}", "starred_url": "https://api.github.com/users/dacameron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dacameron/subscriptions", "organizations_url": "https://api.github.com/users/dacameron/orgs", "repos_url": "https://api.github.com/users/dacameron/repos", "events_url": "https://api.github.com/users/dacameron/events{/privacy}", "received_events_url": "https://api.github.com/users/dacameron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-26T23:26:22Z", "updated_at": "2020-06-17T08:12:42Z", "closed_at": "2020-06-17T08:12:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nto get sentry sdk working in my environment we have to specify the ca_certs option. To allow developers to easily use sentry without having to specify the ca_certs option in their code could it be specified via an environment variable similar to the way release, environment and dsn work at the moment.\r\n\r\nI am happy to make the change as the code is trivial. Is this something you would accept?\r\n\r\nThanks, David.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/704", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/704/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/704/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/704/events", "html_url": "https://github.com/getsentry/sentry-python/issues/704", "id": 625237876, "node_id": "MDU6SXNzdWU2MjUyMzc4NzY=", "number": 704, "title": "Convert django app to ASGI", "user": {"login": "alper", "id": 72429, "node_id": "MDQ6VXNlcjcyNDI5", "avatar_url": "https://avatars3.githubusercontent.com/u/72429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alper", "html_url": "https://github.com/alper", "followers_url": "https://api.github.com/users/alper/followers", "following_url": "https://api.github.com/users/alper/following{/other_user}", "gists_url": "https://api.github.com/users/alper/gists{/gist_id}", "starred_url": "https://api.github.com/users/alper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alper/subscriptions", "organizations_url": "https://api.github.com/users/alper/orgs", "repos_url": "https://api.github.com/users/alper/repos", "events_url": "https://api.github.com/users/alper/events{/privacy}", "received_events_url": "https://api.github.com/users/alper/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-26T22:23:37Z", "updated_at": "2020-06-17T08:59:16Z", "closed_at": "2020-06-17T08:59:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I converted my app to ASGI but then the Sentry integration stopped working like here:\r\n\r\n`TypeError: sentry_patched_load_middleware() got an unexpected keyword argument 'is_async'`\r\n\r\nIf I comment out the Sentry integration `uvicorn` runs th eapp just fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/700", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/700/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/700/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/700/events", "html_url": "https://github.com/getsentry/sentry-python/issues/700", "id": 623083787, "node_id": "MDU6SXNzdWU2MjMwODM3ODc=", "number": 700, "title": "SentryAsgiMiddleware requires missing scope key \"method\" on websocket events", "user": {"login": "raphaelm", "id": 64280, "node_id": "MDQ6VXNlcjY0Mjgw", "avatar_url": "https://avatars2.githubusercontent.com/u/64280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raphaelm", "html_url": "https://github.com/raphaelm", "followers_url": "https://api.github.com/users/raphaelm/followers", "following_url": "https://api.github.com/users/raphaelm/following{/other_user}", "gists_url": "https://api.github.com/users/raphaelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/raphaelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raphaelm/subscriptions", "organizations_url": "https://api.github.com/users/raphaelm/orgs", "repos_url": "https://api.github.com/users/raphaelm/repos", "events_url": "https://api.github.com/users/raphaelm/events{/privacy}", "received_events_url": "https://api.github.com/users/raphaelm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-22T09:35:27Z", "updated_at": "2020-06-03T13:04:54Z", "closed_at": "2020-06-03T13:04:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using ``SentryAsgiMiddleware``, Sentry fails for us because it does not find a ``method`` key on the scope object of Websocket connections:\r\n\r\n```\r\nserver_1  | 2020-05-22 11:29:00,758 ERROR 140587441231616 sentry_sdk.errors hub Internal error in sentry_sdk\r\nserver_1  | Traceback (most recent call last):\r\nserver_1  |   File \"/usr/local/lib/python3.8/site-packages/sentry_sdk/scope.py\", line 326, in apply_to_event\r\nserver_1  |     new_event = event_processor(event, hint)\r\nserver_1  |   File \"/usr/local/lib/python3.8/site-packages/sentry_sdk/integrations/asgi.py\", line 126, in event_processor\r\nserver_1  |     request_info[\"method\"] = asgi_scope[\"method\"]\r\nserver_1  | KeyError: 'method'\r\n```\r\n\r\nThe ASGI spec does not mandate such a ``method`` key:\r\nhttps://asgi.readthedocs.io/en/latest/specs/www.html#id1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/699", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/699/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/699/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/699/events", "html_url": "https://github.com/getsentry/sentry-python/issues/699", "id": 621965926, "node_id": "MDU6SXNzdWU2MjE5NjU5MjY=", "number": 699, "title": "sentry_sdk.init does not accept \"out\" as DSN", "user": {"login": "mdaniel", "id": 22526, "node_id": "MDQ6VXNlcjIyNTI2", "avatar_url": "https://avatars1.githubusercontent.com/u/22526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdaniel", "html_url": "https://github.com/mdaniel", "followers_url": "https://api.github.com/users/mdaniel/followers", "following_url": "https://api.github.com/users/mdaniel/following{/other_user}", "gists_url": "https://api.github.com/users/mdaniel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdaniel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdaniel/subscriptions", "organizations_url": "https://api.github.com/users/mdaniel/orgs", "repos_url": "https://api.github.com/users/mdaniel/repos", "events_url": "https://api.github.com/users/mdaniel/events{/privacy}", "received_events_url": "https://api.github.com/users/mdaniel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T17:46:39Z", "updated_at": "2020-05-20T17:51:41Z", "closed_at": "2020-05-20T17:51:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "The sentry-java SDK accepts [`out://1?compression=false`](https://github.com/getsentry/sentry-java/blob/v1.7.30/sentry/src/main/java/io/sentry/DefaultSentryClientFactory.java#L357-L359) as a DSN, enabling one to use Sentry in a variety of setups where one would want to see the events, but without triggering the real notification\r\n\r\nIt appears `sentry_sdk` does not accept that:\r\n\r\n```python\r\n>>> import sentry_sdk\r\n>>> sentry_sdk.init(dsn=\"out://1?compression=false\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/proj/venv/lib/python3.7/site-packages/sentry_sdk/hub.py\", line 106, in _init\r\n    client = Client(*args, **kwargs)  # type: ignore\r\n  File \"/proj/venv/lib/python3.7/site-packages/sentry_sdk/client.py\", line 85, in __init__\r\n    self._init_impl()\r\n  File \"/proj/venv/lib/python3.7/site-packages/sentry_sdk/client.py\", line 116, in _init_impl\r\n    self.transport = make_transport(self.options)\r\n  File \"/proj/venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 374, in make_transport\r\n    return transport_cls(options)\r\n  File \"/proj/venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 126, in __init__\r\n    Transport.__init__(self, options)\r\n  File \"/proj/venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 54, in __init__\r\n    self.parsed_dsn = Dsn(options[\"dsn\"])\r\n  File \"/proj/venv/lib/python3.7/site-packages/sentry_sdk/utils.py\", line 114, in __init__\r\n    raise BadDsn(\"Unsupported scheme %r\" % parts.scheme)\r\nsentry_sdk.utils.BadDsn: Unsupported scheme 'out'\r\n```\r\n---\r\nsentry-sdk                0.14.4\r\nPython 3.7.7", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/698", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/698/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/698/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/698/events", "html_url": "https://github.com/getsentry/sentry-python/issues/698", "id": 621316829, "node_id": "MDU6SXNzdWU2MjEzMTY4Mjk=", "number": 698, "title": "server_name not logged properly", "user": {"login": "caleb15", "id": 46505081, "node_id": "MDQ6VXNlcjQ2NTA1MDgx", "avatar_url": "https://avatars1.githubusercontent.com/u/46505081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caleb15", "html_url": "https://github.com/caleb15", "followers_url": "https://api.github.com/users/caleb15/followers", "following_url": "https://api.github.com/users/caleb15/following{/other_user}", "gists_url": "https://api.github.com/users/caleb15/gists{/gist_id}", "starred_url": "https://api.github.com/users/caleb15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caleb15/subscriptions", "organizations_url": "https://api.github.com/users/caleb15/orgs", "repos_url": "https://api.github.com/users/caleb15/repos", "events_url": "https://api.github.com/users/caleb15/events{/privacy}", "received_events_url": "https://api.github.com/users/caleb15/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-19T22:11:08Z", "updated_at": "2020-05-26T16:03:12Z", "closed_at": "2020-05-20T17:44:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "In our cloud-hosted sentry UI events from our celery server consistently show up with \r\n`server_name: celery-8c78c4545-n987w`\r\n\r\nThe server name should be celery0.\r\n\r\n```\r\ncaleb@celery0.cloud51:~$ hostname\r\ncelery0\r\n\r\ncaleb@celery0.cloud51:~$ python3\r\nPython 3.6.9 (default, Apr 18 2020, 01:56:04) \r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import socket\r\n>>> socket.gethostname()\r\n'celery0'\r\n```\r\n\r\nWe initialize our sentry config like so:\r\n```python\r\ndef init_sentry_sdk(sentry_config):\r\n    sentry_sdk.init(\r\n        dsn=sentry_config['dsn'],\r\n        integrations=[\r\n            sentry_logging_integration,\r\n            DjangoIntegration(),\r\n            CeleryIntegration()\r\n        ],\r\n        send_default_pii=True,\r\n        release=sentry_config['release'],\r\n    )\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/696", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/696/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/696/events", "html_url": "https://github.com/getsentry/sentry-python/issues/696", "id": 620553691, "node_id": "MDU6SXNzdWU2MjA1NTM2OTE=", "number": 696, "title": "Create a v1.0.0 and start enforcing semver", "user": {"login": "fclairamb", "id": 1743394, "node_id": "MDQ6VXNlcjE3NDMzOTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1743394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fclairamb", "html_url": "https://github.com/fclairamb", "followers_url": "https://api.github.com/users/fclairamb/followers", "following_url": "https://api.github.com/users/fclairamb/following{/other_user}", "gists_url": "https://api.github.com/users/fclairamb/gists{/gist_id}", "starred_url": "https://api.github.com/users/fclairamb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fclairamb/subscriptions", "organizations_url": "https://api.github.com/users/fclairamb/orgs", "repos_url": "https://api.github.com/users/fclairamb/repos", "events_url": "https://api.github.com/users/fclairamb/events{/privacy}", "received_events_url": "https://api.github.com/users/fclairamb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-18T22:52:28Z", "updated_at": "2020-05-23T21:41:56Z", "closed_at": "2020-05-23T14:32:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThank you for your amazing work.\r\n\r\nCan you please release a version v1.x.x? This would help people like [us](https://github.com/habx/) who are using [dependabot](https://dependabot.com/) massively and are using automatic minor version merges.\r\n\r\nYour JS SDK is in version 5, your python SDK API has been really stable for years, so there's no reason to delay this v1.\r\n\r\nThank you !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/694", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/694/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/694/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/694/events", "html_url": "https://github.com/getsentry/sentry-python/issues/694", "id": 619978974, "node_id": "MDU6SXNzdWU2MTk5Nzg5NzQ=", "number": 694, "title": "Silent async breakage on Python 3.6", "user": {"login": "marco-neumann-by", "id": 57095103, "node_id": "MDQ6VXNlcjU3MDk1MTAz", "avatar_url": "https://avatars0.githubusercontent.com/u/57095103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marco-neumann-by", "html_url": "https://github.com/marco-neumann-by", "followers_url": "https://api.github.com/users/marco-neumann-by/followers", "following_url": "https://api.github.com/users/marco-neumann-by/following{/other_user}", "gists_url": "https://api.github.com/users/marco-neumann-by/gists{/gist_id}", "starred_url": "https://api.github.com/users/marco-neumann-by/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marco-neumann-by/subscriptions", "organizations_url": "https://api.github.com/users/marco-neumann-by/orgs", "repos_url": "https://api.github.com/users/marco-neumann-by/repos", "events_url": "https://api.github.com/users/marco-neumann-by/events{/privacy}", "received_events_url": "https://api.github.com/users/marco-neumann-by/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-18T07:36:29Z", "updated_at": "2020-06-03T13:04:54Z", "closed_at": "2020-06-03T13:04:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Abstract\r\n`aiocontextvars` is required on Python 3.6 to make async integrations work (e.g. ASGI), but this is only obvious from reading the source code.\r\n\r\n# Technical Background\r\n[Here](https://github.com/getsentry/sentry-python/blob/f399cae617290c0acdff6382d983dd6e5d242d78/sentry_sdk/utils.py#L760-L766) the `aiocontextvars` is optionally used under Python 3.6 to setup async-aware context vars. Without the package, async integrations just silently break (e.g. the ASGI integration misses a bunch of metadata, likely because under some conditions the current Hub/client is not found).\r\n\r\n# Potential Solutions\r\n- **log message:** emit a message indicating the missing requirement (maybe only if the `debug=True` flag is set)\r\n- **warning:** same as previous point, but as a Python warning (not logging)\r\n- **optional requirement:** add an optional requirement (like `async`) that under Python 3.6 requires `aiocontextvars` [here](https://github.com/getsentry/sentry-python/blob/f399cae617290c0acdff6382d983dd6e5d242d78/setup.py#L27-L40).\r\n- **docs:** add a note to [the integration docs](https://docs.sentry.io/platforms/python/asgi/)\r\n\r\n# Refs\r\n#289, #293", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/693", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/693/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/693/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/693/events", "html_url": "https://github.com/getsentry/sentry-python/issues/693", "id": 619655818, "node_id": "MDU6SXNzdWU2MTk2NTU4MTg=", "number": 693, "title": "Duplicate issues with no differences", "user": {"login": "WhyNotHugo", "id": 730811, "node_id": "MDQ6VXNlcjczMDgxMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/730811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WhyNotHugo", "html_url": "https://github.com/WhyNotHugo", "followers_url": "https://api.github.com/users/WhyNotHugo/followers", "following_url": "https://api.github.com/users/WhyNotHugo/following{/other_user}", "gists_url": "https://api.github.com/users/WhyNotHugo/gists{/gist_id}", "starred_url": "https://api.github.com/users/WhyNotHugo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WhyNotHugo/subscriptions", "organizations_url": "https://api.github.com/users/WhyNotHugo/orgs", "repos_url": "https://api.github.com/users/WhyNotHugo/repos", "events_url": "https://api.github.com/users/WhyNotHugo/events{/privacy}", "received_events_url": "https://api.github.com/users/WhyNotHugo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-17T09:37:50Z", "updated_at": "2020-06-03T13:45:24Z", "closed_at": "2020-06-03T13:45:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "These last weeks I've been getting an overflow of issues which are exactly the same (eg: same line, same error).\r\n\r\nIf I click on \"Similar Issues\", they're listed there. If I click `Diff`, the diff is empty (eg: no differences!?).\r\n\r\nHere are some example:\r\nhttps://sentry.io/organizations/hobarrera/issues/1670442219/?project=124552\r\nhttps://sentry.io/organizations/hobarrera/issues/1513060802/?project=124552\r\nhttps://sentry.io/organizations/hobarrera/issues/1663437698/?project=124552\r\nhttps://sentry.io/organizations/hobarrera/issues/1670442303/?project=124552\r\n\r\nSample Diff:\r\n\r\n![2020-05-17T11:36:35,632281993+02:00](https://user-images.githubusercontent.com/730811/82140931-aeffae00-9832-11ea-9ce6-0d1c50efd831.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/683", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/683/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/683/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/683/events", "html_url": "https://github.com/getsentry/sentry-python/issues/683", "id": 613980135, "node_id": "MDU6SXNzdWU2MTM5ODAxMzU=", "number": 683, "title": "Setting transaction name in pyramid", "user": {"login": "ergo", "id": 33021, "node_id": "MDQ6VXNlcjMzMDIx", "avatar_url": "https://avatars3.githubusercontent.com/u/33021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ergo", "html_url": "https://github.com/ergo", "followers_url": "https://api.github.com/users/ergo/followers", "following_url": "https://api.github.com/users/ergo/following{/other_user}", "gists_url": "https://api.github.com/users/ergo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ergo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ergo/subscriptions", "organizations_url": "https://api.github.com/users/ergo/orgs", "repos_url": "https://api.github.com/users/ergo/repos", "events_url": "https://api.github.com/users/ergo/events{/privacy}", "received_events_url": "https://api.github.com/users/ergo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-07T11:24:56Z", "updated_at": "2020-05-20T09:30:32Z", "closed_at": "2020-05-20T09:30:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi is it possible to set transaction name when using PyramidIntegration?\r\nI tried setting `scope.transaction = \"mycustomname\"` but it seems that integration itself does:\r\n\r\n        try:\r\n            if integration.transaction_style == \"route_name\":\r\n                event[\"transaction\"] = request.matched_route.name\r\n            elif integration.transaction_style == \"route_pattern\":\r\n                event[\"transaction\"] = request.matched_route.pattern\r\n        except Exception:\r\n            pass\r\n\r\nAnd I suspect that overwrites anything I've set up earlier?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/682", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/682/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/682/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/682/events", "html_url": "https://github.com/getsentry/sentry-python/issues/682", "id": 612039020, "node_id": "MDU6SXNzdWU2MTIwMzkwMjA=", "number": 682, "title": "Problem with typing", "user": {"login": "rafagan", "id": 2295481, "node_id": "MDQ6VXNlcjIyOTU0ODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/2295481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafagan", "html_url": "https://github.com/rafagan", "followers_url": "https://api.github.com/users/rafagan/followers", "following_url": "https://api.github.com/users/rafagan/following{/other_user}", "gists_url": "https://api.github.com/users/rafagan/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafagan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafagan/subscriptions", "organizations_url": "https://api.github.com/users/rafagan/orgs", "repos_url": "https://api.github.com/users/rafagan/repos", "events_url": "https://api.github.com/users/rafagan/events{/privacy}", "received_events_url": "https://api.github.com/users/rafagan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T17:23:38Z", "updated_at": "2020-05-23T14:57:30Z", "closed_at": "2020-05-23T14:57:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some error is occurring with sentry for python (using python 3.8)\r\n\r\n```\r\n[ERROR] AttributeError: type object 'Callable' has no attribute '_abc_registry'\r\nTraceback (most recent call last):\r\n  File \"/var/task/handler.py\", line 609, in lambda_handler\r\n    return LambdaHandler.lambda_handler(event, context)\r\n  File \"/var/task/handler.py\", line 240, in lambda_handler\r\n    handler = cls()\r\n  File \"/var/task/handler.py\", line 134, in __init__\r\n    self.app_module = importlib.import_module(self.settings.APP_MODULE)\r\n  File \"/var/lang/lib/python3.8/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/var/task/src/main.py\", line 6, in <module>\r\n    import sentry_sdk\r\n  File \"/var/task/sentry_sdk/__init__.py\", line 1, in <module>\r\n    from sentry_sdk.hub import Hub, init\r\n  File \"/var/task/sentry_sdk/hub.py\", line 8, in <module>\r\n    from sentry_sdk._compat import with_metaclass\r\n  File \"/var/task/sentry_sdk/_compat.py\", line 3, in <module>\r\n    from sentry_sdk._types import MYPY\r\n  File \"/var/task/sentry_sdk/_types.py\", line 2, in <module>\r\n    from typing import TYPE_CHECKING as MYPY\r\n  File \"/var/task/typing.py\", line 1357, in <module>\r\n    class Callable(extra=collections_abc.Callable, metaclass=CallableMeta):\r\n  File \"/var/task/typing.py\", line 1005, in __new__\r\n    self._abc_registry = extra._abc_registry\r\n\r\n```\r\nAny hint?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/679", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/679/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/679/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/679/events", "html_url": "https://github.com/getsentry/sentry-python/issues/679", "id": 605572982, "node_id": "MDU6SXNzdWU2MDU1NzI5ODI=", "number": 679, "title": "Missing request.sentry.id in Django", "user": {"login": "jaap3", "id": 48517, "node_id": "MDQ6VXNlcjQ4NTE3", "avatar_url": "https://avatars1.githubusercontent.com/u/48517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaap3", "html_url": "https://github.com/jaap3", "followers_url": "https://api.github.com/users/jaap3/followers", "following_url": "https://api.github.com/users/jaap3/following{/other_user}", "gists_url": "https://api.github.com/users/jaap3/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaap3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaap3/subscriptions", "organizations_url": "https://api.github.com/users/jaap3/orgs", "repos_url": "https://api.github.com/users/jaap3/repos", "events_url": "https://api.github.com/users/jaap3/events{/privacy}", "received_events_url": "https://api.github.com/users/jaap3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-23T14:12:36Z", "updated_at": "2020-04-23T17:53:16Z", "closed_at": "2020-04-23T17:53:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "We migrated from `raven` to `sentry-sdk` a while ago. Today we noticed that we don't actually show the Sentry error id on error pages anymore, as we did before. \r\n\r\nFrom my quick analysis It seems that the `sentry` object is no longer added to the `request`. Was this feature removed/never ported to sentry-sdk or am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/675", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/675/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/675/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/675/events", "html_url": "https://github.com/getsentry/sentry-python/issues/675", "id": 604375538, "node_id": "MDU6SXNzdWU2MDQzNzU1Mzg=", "number": 675, "title": "sentry_sdk.capture_exception has incomplete type annotation", "user": {"login": "elhawk", "id": 264704, "node_id": "MDQ6VXNlcjI2NDcwNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/264704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elhawk", "html_url": "https://github.com/elhawk", "followers_url": "https://api.github.com/users/elhawk/followers", "following_url": "https://api.github.com/users/elhawk/following{/other_user}", "gists_url": "https://api.github.com/users/elhawk/gists{/gist_id}", "starred_url": "https://api.github.com/users/elhawk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elhawk/subscriptions", "organizations_url": "https://api.github.com/users/elhawk/orgs", "repos_url": "https://api.github.com/users/elhawk/repos", "events_url": "https://api.github.com/users/elhawk/events{/privacy}", "received_events_url": "https://api.github.com/users/elhawk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 968428654, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTQ=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/help%20wanted", "name": "help wanted", "color": "008672", "default": true, "description": "Extra attention is needed"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-22T00:55:50Z", "updated_at": "2020-07-07T19:57:43Z", "closed_at": "2020-07-07T08:38:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "When porting from raven to sentry_sdk, I ported a call to `capture_exception` passing an `ExcInfo` tuple.  This caused mypy to fail.  Looking at the code, \r\n\r\n`sentry_sdk.capture_exception` takes `error=None,  # type: Optional[BaseException]`, but then it passes directly to `hub.capture_exception` which has the type `# type: Optional[Union[BaseException, ExcInfo]]`, where `ExcInfo` maps to the tuple.\r\n\r\nI have worked around this with a `# type: ignore`, but I think the type on `sentry_sdk.capture_exception` should be expanded to match `hub.capture_exception`. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/670", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/670/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/670/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/670/events", "html_url": "https://github.com/getsentry/sentry-python/issues/670", "id": 600834948, "node_id": "MDU6SXNzdWU2MDA4MzQ5NDg=", "number": 670, "title": "aiohttp integration ability to use contextvars in logger ", "user": {"login": "H--o-l", "id": 10905922, "node_id": "MDQ6VXNlcjEwOTA1OTIy", "avatar_url": "https://avatars1.githubusercontent.com/u/10905922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/H--o-l", "html_url": "https://github.com/H--o-l", "followers_url": "https://api.github.com/users/H--o-l/followers", "following_url": "https://api.github.com/users/H--o-l/following{/other_user}", "gists_url": "https://api.github.com/users/H--o-l/gists{/gist_id}", "starred_url": "https://api.github.com/users/H--o-l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/H--o-l/subscriptions", "organizations_url": "https://api.github.com/users/H--o-l/orgs", "repos_url": "https://api.github.com/users/H--o-l/repos", "events_url": "https://api.github.com/users/H--o-l/events{/privacy}", "received_events_url": "https://api.github.com/users/H--o-l/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-16T08:10:08Z", "updated_at": "2020-04-20T19:37:09Z", "closed_at": "2020-04-20T19:37:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nI was looking to add a custom [logging filter](https://docs.python.org/3/library/logging.html#logging.Filter) to my aiohttp server during exception that are catched [here](https://github.com/aio-libs/aiohttp/blob/16a49c143fc0abab75163fb78738fff3d3e17f49/aiohttp/web_protocol.py#L387).\r\n\r\nIt's useful and easy to do, but, it occurs that, in my custom logging filter, I can't find [contextvars](https://docs.python.org/3/library/contextvars.html) that I have created in my request handler task.\r\n\r\nTwo things caused this problem:\r\n- [aiohttp handled requests in a sub-Task, and catched exceptions in the parent Task](https://github.com/aio-libs/aiohttp/blob/6a5ab96bd9cb404b4abfd5160fe8f34a29d941e5/aiohttp/web_protocol.py#L415-L416).\r\n  \u2192 This was fixed in https://github.com/aio-libs/aiohttp/commit/9997cae (because users asked to be able to access `contextvars` -- like us). It was even [backported to aiohttp version 3.7](https://github.com/aio-libs/aiohttp/commit/29eccad84e8200b5c90856c8732da0fdbbcef904).\r\n- [Sentry-aiohttp integration handles requests in a sub-Task too](https://github.com/getsentry/sentry-python/blob/cd646579d04e2fad6a8994304314ac52fec2f83c/sentry_sdk/integrations/aiohttp.py#L113).\r\n\r\nPython documentation on Tasks [here](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task). One important thing is that they reset *contextvars*.\r\n\r\nTo summarize:\r\n```\r\n   aiohttp                               logging exception\r\n      +                                        ^\r\n      |                                        |\r\n      | asyncio.create_task(handle_request())  | contextvars didn't go up again\r\n      |                                        | (it's fixed now)\r\n      |                                        |\r\n      v                                        |\r\n   Sentry                                      |\r\n      +                                        |\r\n      |                                        |\r\n      | asyncio.create_task(handle_request())  | contextvars don't go up\r\n      |                                        |\r\n      v                                        |\r\nI set contextvars        +---------------------+\r\n\r\n                                   Exception\r\n```\r\n\r\nAs long as the issue is not fixed in Sentry, I still can't use `contextvars` to log custom data using the standard Python `logging` library.\r\nThe only solution is to disable Sentry, then logging works OK with contextvars.\r\n\r\nAny idea how to fix this in Sentry-aiohttp code?\r\nI'd be happy to open a PR, but I'm not familiar enough with Sentry code, or Python in general, thus I need some help at least.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/665", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/665/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/665/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/665/events", "html_url": "https://github.com/getsentry/sentry-python/issues/665", "id": 593350890, "node_id": "MDU6SXNzdWU1OTMzNTA4OTA=", "number": 665, "title": "Strange error", "user": {"login": "RDIL", "id": 34555510, "node_id": "MDQ6VXNlcjM0NTU1NTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/34555510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RDIL", "html_url": "https://github.com/RDIL", "followers_url": "https://api.github.com/users/RDIL/followers", "following_url": "https://api.github.com/users/RDIL/following{/other_user}", "gists_url": "https://api.github.com/users/RDIL/gists{/gist_id}", "starred_url": "https://api.github.com/users/RDIL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RDIL/subscriptions", "organizations_url": "https://api.github.com/users/RDIL/orgs", "repos_url": "https://api.github.com/users/RDIL/repos", "events_url": "https://api.github.com/users/RDIL/events{/privacy}", "received_events_url": "https://api.github.com/users/RDIL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-04-03T12:34:40Z", "updated_at": "2020-04-08T14:51:39Z", "closed_at": "2020-04-08T13:22:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sentry has reported this error to me, but I think this error is the result of sentry-sdk itself failing to report another error!\r\n\r\nStack (yes sorry its cut off):\r\n```python\r\n    return self.request_encode_body(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 719, in urlopen\r\n    retries = retries.increment(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/util/retry.py\", line 400, in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/packages/six.py\", line 734, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 665, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 421, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 3, in raise_from\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 416, in _make_request\r\n    httplib_response = conn.getresponse()\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/integrations/stdlib.py\", line 102, in getresponse\r\n    rv = real_getresponse(self, *args, **kwargs)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1322, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 303, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 272, in _read_status\r\n    raise RemoteDisconnected(\"Remote end closed connection without\"\r\nurllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\r\n2020-04-03 06:15:06,961: Sending event, type:null level:error event_id:1e1b73402bf5435dbb9270782cd9c753 project:1799955 host:sentry.io\r\n2020-04-03 06:25:06,340: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)'))': /api/1799955/store/\r\n2020-04-03 06:25:07,140: Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)'))': /api/1799955/store/\r\n2020-04-03 06:30:07,103: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)'))': /api/1799955/store/\r\n2020-04-03 06:39:52,314: Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)'))': /api/1799955/store/\r\n2020-04-03 06:44:51,994: Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)'))': /api/1799955/store/\r\n2020-04-03 07:04:52,103: Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 665, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connection.py\", line 386, in connect\r\n    self.sock = ssl_wrap_socket(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/util/ssl_.py\", line 370, in ssl_wrap_socket\r\n    return context.wrap_socket(sock, server_hostname=server_hostname)\r\n  File \"/usr/lib/python3.8/ssl.py\", line 500, in wrap_socket\r\n    return self.sslsocket_class._create(\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1040, in _create\r\n    self.do_handshake()\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1309, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLEOFError: EOF occurred in violation of protocol (_ssl.c:1108)\r\n**NO MATCH**\r\nDuring handling of the above exception, another exception occurred:\r\n**NO MATCH**\r\nTraceback (most recent call last):\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 215, in _send_event\r\n    self._send_request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 163, in _send_request\r\n    response = self._pool.request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/request.py\", line 79, in request\r\n    return self.request_encode_body(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 747, in urlopen\r\n    return self.urlopen(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 747, in urlopen\r\n    return self.urlopen(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 747, in urlopen\r\n    return self.urlopen(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 719, in urlopen\r\n    retries = retries.increment(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='sentry.io', port=443): Max retries exceeded with url: /api/1799955/store/ (Caused by SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)')))\r\n2020-04-03 07:10:05,243: Sending event, type:null level:error event_id:10c7f22e0ee24002a41a4876fcff2c91 project:1799955 host:sentry.io\r\n2020-04-03 07:19:52,067: Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)'))': /api/1799955/store/\r\n2020-04-03 07:24:51,071: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)'))': /api/1799955/store/\r\n2020-04-03 07:34:51,204: Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)'))': /api/1799955/store/\r\n2020-04-03 07:59:51,108: Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 665, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connection.py\", line 386, in connect\r\n    self.sock = ssl_wrap_socket(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/util/ssl_.py\", line 370, in ssl_wrap_socket\r\n    return context.wrap_socket(sock, server_hostname=server_hostname)\r\n  File \"/usr/lib/python3.8/ssl.py\", line 500, in wrap_socket\r\n    return self.sslsocket_class._create(\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1040, in _create\r\n    self.do_handshake()\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1309, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLEOFError: EOF occurred in violation of protocol (_ssl.c:1108)\r\n**NO MATCH**\r\nDuring handling of the above exception, another exception occurred:\r\n**NO MATCH**\r\nTraceback (most recent call last):\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 215, in _send_event\r\n    self._send_request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 163, in _send_request\r\n    response = self._pool.request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/request.py\", line 79, in request\r\n    return self.request_encode_body(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 747, in urlopen\r\n    return self.urlopen(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 747, in urlopen\r\n    return self.urlopen(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 747, in urlopen\r\n    return self.urlopen(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 719, in urlopen\r\n    retries = retries.increment(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='sentry.io', port=443): Max retries exceeded with url: /api/1799955/store/ (Caused by SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)')))\r\n2020-04-03 07:59:51,131: Sending event, type:null level:error event_id:97a7e51264ed43848b3ee88a373211b9 project:1799955 host:sentry.io\r\n2020-04-03 08:20:06,178: Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 665, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 421, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 3, in raise_from\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 416, in _make_request\r\n    httplib_response = conn.getresponse()\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/integrations/stdlib.py\", line 102, in getresponse\r\n    rv = real_getresponse(self, *args, **kwargs)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1322, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 303, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 272, in _read_status\r\n    raise RemoteDisconnected(\"Remote end closed connection without\"\r\nhttp.client.RemoteDisconnected: Remote end closed connection without response\r\n**NO MATCH**\r\nDuring handling of the above exception, another exception occurred:\r\n**NO MATCH**\r\nTraceback (most recent call last):\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 215, in _send_event\r\n    self._send_request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 163, in _send_request\r\n    response = self._pool.request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/request.py\", line 79, in request\r\n    return self.request_encode_body(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 719, in urlopen\r\n    retries = retries.increment(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/util/retry.py\", line 400, in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/packages/six.py\", line 734, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 665, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 421, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 3, in raise_from\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 416, in _make_request\r\n    httplib_response = conn.getresponse()\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/integrations/stdlib.py\", line 102, in getresponse\r\n    rv = real_getresponse(self, *args, **kwargs)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1322, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 303, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 272, in _read_status\r\n    raise RemoteDisconnected(\"Remote end closed connection without\"\r\nurllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\r\n2020-04-03 08:25:06,138: Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 665, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connection.py\", line 386, in connect\r\n    self.sock = ssl_wrap_socket(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/util/ssl_.py\", line 370, in ssl_wrap_socket\r\n    return context.wrap_socket(sock, server_hostname=server_hostname)\r\n  File \"/usr/lib/python3.8/ssl.py\", line 500, in wrap_socket\r\n    return self.sslsocket_class._create(\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1040, in _create\r\n    self.do_handshake()\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1309, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLEOFError: EOF occurred in violation of protocol (_ssl.c:1108)\r\n**NO MATCH**\r\nDuring handling of the above exception, another exception occurred:\r\n**NO MATCH**\r\nTraceback (most recent call last):\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 215, in _send_event\r\n    self._send_request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/sentry_sdk/transport.py\", line 163, in _send_request\r\n    response = self._pool.request(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/request.py\", line 79, in request\r\n    return self.request_encode_body(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 747, in urlopen\r\n    return self.urlopen(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 747, in urlopen\r\n    return self.urlopen(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 747, in urlopen\r\n    return self.urlopen(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/connectionpool.py\", line 719, in urlopen\r\n    retries = retries.increment(\r\n  File \"/home/jumbocakeyumyum/backend/lib/python3.8/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='sentry.io', port=443): Max retries exceeded with url: /api/1799955/store/ (Caused by SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1108)')))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/663", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/663/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/663/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/663/events", "html_url": "https://github.com/getsentry/sentry-python/issues/663", "id": 591379558, "node_id": "MDU6SXNzdWU1OTEzNzk1NTg=", "number": 663, "title": "setup.py is broken on latest release", "user": {"login": "dodumosu", "id": 1408662, "node_id": "MDQ6VXNlcjE0MDg2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1408662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dodumosu", "html_url": "https://github.com/dodumosu", "followers_url": "https://api.github.com/users/dodumosu/followers", "following_url": "https://api.github.com/users/dodumosu/following{/other_user}", "gists_url": "https://api.github.com/users/dodumosu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dodumosu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dodumosu/subscriptions", "organizations_url": "https://api.github.com/users/dodumosu/orgs", "repos_url": "https://api.github.com/users/dodumosu/repos", "events_url": "https://api.github.com/users/dodumosu/events{/privacy}", "received_events_url": "https://api.github.com/users/dodumosu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-31T19:50:52Z", "updated_at": "2020-03-31T19:54:45Z", "closed_at": "2020-03-31T19:54:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "the `extras_require` portion of `setup.py` for `rq` just contains the string \"0.6\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/661", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/661/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/661/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/661/events", "html_url": "https://github.com/getsentry/sentry-python/issues/661", "id": 590539697, "node_id": "MDU6SXNzdWU1OTA1Mzk2OTc=", "number": 661, "title": "DjangoIntegration conflict with MiddlewareMixin & TemplateView", "user": {"login": "cachance7", "id": 1068829, "node_id": "MDQ6VXNlcjEwNjg4Mjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1068829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cachance7", "html_url": "https://github.com/cachance7", "followers_url": "https://api.github.com/users/cachance7/followers", "following_url": "https://api.github.com/users/cachance7/following{/other_user}", "gists_url": "https://api.github.com/users/cachance7/gists{/gist_id}", "starred_url": "https://api.github.com/users/cachance7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cachance7/subscriptions", "organizations_url": "https://api.github.com/users/cachance7/orgs", "repos_url": "https://api.github.com/users/cachance7/repos", "events_url": "https://api.github.com/users/cachance7/events{/privacy}", "received_events_url": "https://api.github.com/users/cachance7/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1167050501, "node_id": "MDU6TGFiZWwxMTY3MDUwNTAx", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/needs-information", "name": "needs-information", "color": "e4e669", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-30T19:35:58Z", "updated_at": "2020-08-01T20:11:03Z", "closed_at": "2020-08-01T19:39:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "django version: 3.0\r\nsentry-sdk version: 0.14.3\r\n\r\nMy project has a middleware using Django's `django.utils.deprecation.MiddlewareMixin`. Visiting a view which subclasses `django.views.generic.TemplateView` while Sentry is active results in the following exception:\r\n```\r\nAttributeError: 'function' object has no attribute '__self__'\r\n  File \"django/core/handlers/exception.py\", line 47, in inner\r\n    response = get_response(request)\r\n  File \"django/core/handlers/base.py\", line 196, in _get_response\r\n    middleware_method.__self__.__class__.__name__,\r\n```\r\n\r\nThe following classes & url config should be sufficient to demonstrate the problem:\r\n\r\n```\r\nfrom django.utils.deprecation import MiddlewareMixin\r\nfrom django.views.generic import TemplateView\r\n\r\n# ...in myapp.middleware.py\r\nclass DemonstratesConflictMiddleware(MiddlewareMixin):\r\n    def process_template_response(self, request, response):\r\n        return response\r\n\r\n# ...in myapp.views.py\r\nclass DemonstratesConflictView(TemplateView): \r\n    template_name = \"index.html\"\r\n\r\n\r\n# ...in urls.py\r\nimport myapp.views\r\nurlpatterns += [\r\n    path('/', myapp.views.DemonstratesConflictView.as_view(), name='throws-exception'),\r\n]\r\n\r\n# ... in settings.py\r\n\r\nMIDDLEWARE += ['myapp.middleware.DemonstratesConflictMiddleware']\r\n\r\nsentry_sdk.init(\r\n    dsn=\"OMITTED\",\r\n    integrations=[DjangoIntegration()],\r\n)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/660", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/660/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/660/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/660/events", "html_url": "https://github.com/getsentry/sentry-python/issues/660", "id": 587871745, "node_id": "MDU6SXNzdWU1ODc4NzE3NDU=", "number": 660, "title": "Disable sentry for local development", "user": {"login": "rain01", "id": 2623979, "node_id": "MDQ6VXNlcjI2MjM5Nzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2623979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rain01", "html_url": "https://github.com/rain01", "followers_url": "https://api.github.com/users/rain01/followers", "following_url": "https://api.github.com/users/rain01/following{/other_user}", "gists_url": "https://api.github.com/users/rain01/gists{/gist_id}", "starred_url": "https://api.github.com/users/rain01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rain01/subscriptions", "organizations_url": "https://api.github.com/users/rain01/orgs", "repos_url": "https://api.github.com/users/rain01/repos", "events_url": "https://api.github.com/users/rain01/events{/privacy}", "received_events_url": "https://api.github.com/users/rain01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-25T17:39:01Z", "updated_at": "2020-03-31T17:56:00Z", "closed_at": "2020-03-31T17:56:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a Django setup where we `init()` sentry in the main settings file but I have not found a simple way of disabling sentry for local development.\r\n\r\nWith Raven I was able to just overwrite logging params in local settings file that overwrites main settings file but I no I find myself just editing the main settings file to comment out the sentry `init`.\r\n\r\nIs there a better way to disable sentry init without touching the settings file?\r\n\r\nI also checked the community forums for an answer to this but it seems there are less answers than here and couldn't find anything about it in docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/659", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/659/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/659/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/659/events", "html_url": "https://github.com/getsentry/sentry-python/issues/659", "id": 587862736, "node_id": "MDU6SXNzdWU1ODc4NjI3MzY=", "number": 659, "title": "Disable sending errors on local", "user": {"login": "rain01", "id": 2623979, "node_id": "MDQ6VXNlcjI2MjM5Nzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2623979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rain01", "html_url": "https://github.com/rain01", "followers_url": "https://api.github.com/users/rain01/followers", "following_url": "https://api.github.com/users/rain01/following{/other_user}", "gists_url": "https://api.github.com/users/rain01/gists{/gist_id}", "starred_url": "https://api.github.com/users/rain01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rain01/subscriptions", "organizations_url": "https://api.github.com/users/rain01/orgs", "repos_url": "https://api.github.com/users/rain01/repos", "events_url": "https://api.github.com/users/rain01/events{/privacy}", "received_events_url": "https://api.github.com/users/rain01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-25T17:24:26Z", "updated_at": "2020-03-31T17:56:03Z", "closed_at": "2020-03-31T17:56:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a Django setup where we `init()` sentry in the main settings file but I have not found a simple way of disabling sentry for local development.\r\n\r\nWith Raven I was able to just overwrite logging params in local settings file that overwrites main settings file but I no I find myself just editing the main settings file to comment out the sentry `init`.\r\n\r\nIs there a better way to disable sentry init without touching the settings file?\r\n\r\nI also checked the community forums for an answer to this but it seems there are less answers than here and couldn't find anything about it in docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/655", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/655/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/655/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/655/events", "html_url": "https://github.com/getsentry/sentry-python/issues/655", "id": 585800967, "node_id": "MDU6SXNzdWU1ODU4MDA5Njc=", "number": 655, "title": "There is error when connection is lost between client and server", "user": {"login": "ansizov", "id": 5453808, "node_id": "MDQ6VXNlcjU0NTM4MDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5453808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ansizov", "html_url": "https://github.com/ansizov", "followers_url": "https://api.github.com/users/ansizov/followers", "following_url": "https://api.github.com/users/ansizov/following{/other_user}", "gists_url": "https://api.github.com/users/ansizov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ansizov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ansizov/subscriptions", "organizations_url": "https://api.github.com/users/ansizov/orgs", "repos_url": "https://api.github.com/users/ansizov/repos", "events_url": "https://api.github.com/users/ansizov/events{/privacy}", "received_events_url": "https://api.github.com/users/ansizov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-22T20:06:53Z", "updated_at": "2020-03-25T12:39:18Z", "closed_at": "2020-03-25T12:39:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the same problem.  If set invalid DSN, sentry client tries to send one event while shutdown timeout does not end.\r\n\r\n```python\r\nimport logging\r\nimport sentry_sdk\r\nfrom sentry_sdk.integrations.logging import LoggingIntegration\r\n\r\nDSN = 'https://xxx@mysite.com/123'\r\n\r\nsentry_sdk.init(\r\n    dsn=DSN,\r\n    integrations=[LoggingIntegration(\r\n        level=logging.INFO,\r\n        event_level=logging.INFO\r\n    )],\r\n    shutdown_timeout=5,\r\n    debug=True\r\n)\r\n\r\nlogging.error('some error')\r\n```\r\n\r\nExecute `python cli.py 2>&1 | tee log`\r\n\r\n```\r\n [sentry] DEBUG: Setting up integrations (with default = True)\r\n [sentry] DEBUG: Setting up previously not enabled integration logging\r\n [sentry] DEBUG: Setting up previously not enabled integration stdlib\r\n [sentry] DEBUG: Setting up previously not enabled integration excepthook\r\n [sentry] DEBUG: Setting up previously not enabled integration dedupe\r\n [sentry] DEBUG: Setting up previously not enabled integration atexit\r\n [sentry] DEBUG: Setting up previously not enabled integration modules\r\n [sentry] DEBUG: Setting up previously not enabled integration argv\r\n [sentry] DEBUG: Setting up previously not enabled integration threading\r\n [sentry] DEBUG: Enabling integration logging\r\n [sentry] DEBUG: Enabling integration stdlib\r\n [sentry] DEBUG: Enabling integration excepthook\r\n [sentry] DEBUG: Enabling integration dedupe\r\n [sentry] DEBUG: Enabling integration atexit\r\n [sentry] DEBUG: Enabling integration modules\r\n [sentry] DEBUG: Enabling integration argv\r\n [sentry] DEBUG: Enabling integration threading\r\nERROR:root:some error\r\n [sentry] DEBUG: atexit: got shutdown signal\r\nDEBUG:sentry_sdk.errors:atexit: got shutdown signal\r\n [sentry] DEBUG: Sending event, type:null level:error event_id:45c1a32d722d49558f6b0259cb63a129 project:123 host:mysite.com\r\nDEBUG:sentry_sdk.errors:Sending event, type:null level:error event_id:45c1a32d722d49558f6b0259cb63a129 project:123 host:mysite.com\r\n [sentry] DEBUG: atexit: shutting down client\r\nDEBUG:sentry_sdk.errors:atexit: shutting down client\r\n [sentry] DEBUG: Flushing HTTP transport\r\nDEBUG:sentry_sdk.errors:Flushing HTTP transport\r\n [sentry] DEBUG: background worker got flush request\r\nDEBUG:sentry_sdk.errors:background worker got flush request\r\n [sentry] DEBUG: 0 event(s) pending on flush\r\nDEBUG:sentry_sdk.errors:0 event(s) pending on flush\r\nSentry is attempting to send 0 pending error messages\r\nWaiting up to 5 seconds\r\nPress Ctrl-C to quit\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7e2a8f10>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c3a73d0>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c3a7a10>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\n [sentry] ERROR: Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 84, in create_connection\r\n    raise err\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7cedc2d0>: Failed to establish a new connection: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 217, in _send_event\r\n    headers={\"Content-Type\": \"application/json\", \"Content-Encoding\": \"gzip\"},\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 164, in _send_request\r\n    \"POST\", str(self._auth.store_api_url), body=body, headers=headers\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 80, in request\r\n    method, url, fields=fields, headers=headers, **urlopen_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='mysite.com', port=443): Max retries exceeded with url: /api/123/store/ (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7cedc2d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\nERROR:sentry_sdk.errors:Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 84, in create_connection\r\n    raise err\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7cedc2d0>: Failed to establish a new connection: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 217, in _send_event\r\n    headers={\"Content-Type\": \"application/json\", \"Content-Encoding\": \"gzip\"},\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 164, in _send_request\r\n    \"POST\", str(self._auth.store_api_url), body=body, headers=headers\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 80, in request\r\n    method, url, fields=fields, headers=headers, **urlopen_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='mysite.com', port=443): Max retries exceeded with url: /api/123/store/ (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7cedc2d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\n [sentry] DEBUG: Sending event, type:null level:warning event_id:0c03c8eac9e94cf7a81b1010b43a2568 project:123 host:mysite.com\r\nDEBUG:sentry_sdk.errors:Sending event, type:null level:warning event_id:0c03c8eac9e94cf7a81b1010b43a2568 project:123 host:mysite.com\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7cc017d0>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c15d090>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c15d6d0>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\n [sentry] ERROR: Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 84, in create_connection\r\n    raise err\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c15dd10>: Failed to establish a new connection: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 217, in _send_event\r\n    headers={\"Content-Type\": \"application/json\", \"Content-Encoding\": \"gzip\"},\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 164, in _send_request\r\n    \"POST\", str(self._auth.store_api_url), body=body, headers=headers\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 80, in request\r\n    method, url, fields=fields, headers=headers, **urlopen_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='mysite.com', port=443): Max retries exceeded with url: /api/123/store/ (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c15dd10>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\nERROR:sentry_sdk.errors:Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 84, in create_connection\r\n    raise err\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c15dd10>: Failed to establish a new connection: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 217, in _send_event\r\n    headers={\"Content-Type\": \"application/json\", \"Content-Encoding\": \"gzip\"},\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 164, in _send_request\r\n    \"POST\", str(self._auth.store_api_url), body=body, headers=headers\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 80, in request\r\n    method, url, fields=fields, headers=headers, **urlopen_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='mysite.com', port=443): Max retries exceeded with url: /api/123/store/ (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c15dd10>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\n [sentry] DEBUG: Sending event, type:null level:warning event_id:7a1e295e227c4e498ed69390b90979d4 project:123 host:mysite.com\r\nDEBUG:sentry_sdk.errors:Sending event, type:null level:warning event_id:7a1e295e227c4e498ed69390b90979d4 project:123 host:mysite.com\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c15d150>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c16b550>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c16bc50>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\n [sentry] ERROR: Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 84, in create_connection\r\n    raise err\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c176350>: Failed to establish a new connection: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 217, in _send_event\r\n    headers={\"Content-Type\": \"application/json\", \"Content-Encoding\": \"gzip\"},\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 164, in _send_request\r\n    \"POST\", str(self._auth.store_api_url), body=body, headers=headers\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 80, in request\r\n    method, url, fields=fields, headers=headers, **urlopen_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='mysite.com', port=443): Max retries exceeded with url: /api/123/store/ (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c176350>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\nERROR:sentry_sdk.errors:Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 84, in create_connection\r\n    raise err\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c176350>: Failed to establish a new connection: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 217, in _send_event\r\n    headers={\"Content-Type\": \"application/json\", \"Content-Encoding\": \"gzip\"},\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 164, in _send_request\r\n    \"POST\", str(self._auth.store_api_url), body=body, headers=headers\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 80, in request\r\n    method, url, fields=fields, headers=headers, **urlopen_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='mysite.com', port=443): Max retries exceeded with url: /api/123/store/ (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c176350>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\n [sentry] DEBUG: Sending event, type:null level:warning event_id:1cca83a5f860481e8a43119342b2e14b project:123 host:mysite.com\r\nDEBUG:sentry_sdk.errors:Sending event, type:null level:warning event_id:1cca83a5f860481e8a43119342b2e14b project:123 host:mysite.com\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c176510>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c15d150>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c15d350>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\n [sentry] ERROR: Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 84, in create_connection\r\n    raise err\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c155ed0>: Failed to establish a new connection: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 217, in _send_event\r\n    headers={\"Content-Type\": \"application/json\", \"Content-Encoding\": \"gzip\"},\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 164, in _send_request\r\n    \"POST\", str(self._auth.store_api_url), body=body, headers=headers\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 80, in request\r\n    method, url, fields=fields, headers=headers, **urlopen_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='mysite.com', port=443): Max retries exceeded with url: /api/123/store/ (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c155ed0>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\nERROR:sentry_sdk.errors:Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 84, in create_connection\r\n    raise err\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c155ed0>: Failed to establish a new connection: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 217, in _send_event\r\n    headers={\"Content-Type\": \"application/json\", \"Content-Encoding\": \"gzip\"},\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 164, in _send_request\r\n    \"POST\", str(self._auth.store_api_url), body=body, headers=headers\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 80, in request\r\n    method, url, fields=fields, headers=headers, **urlopen_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='mysite.com', port=443): Max retries exceeded with url: /api/123/store/ (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c155ed0>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\n [sentry] DEBUG: Sending event, type:null level:warning event_id:f046af0775f8455aa45b0e88e2a73d71 project:123 host:mysite.com\r\nDEBUG:sentry_sdk.errors:Sending event, type:null level:warning event_id:f046af0775f8455aa45b0e88e2a73d71 project:123 host:mysite.com\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7cc017d0>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c176350>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\nWARNING:urllib3.connectionpool:Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c15d450>: Failed to establish a new connection: [Errno 111] Connection refused')': /api/123/store/\r\n [sentry] ERROR: Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 84, in create_connection\r\n    raise err\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c16b910>: Failed to establish a new connection: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 217, in _send_event\r\n    headers={\"Content-Type\": \"application/json\", \"Content-Encoding\": \"gzip\"},\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 164, in _send_request\r\n    \"POST\", str(self._auth.store_api_url), body=body, headers=headers\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 80, in request\r\n    method, url, fields=fields, headers=headers, **urlopen_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='mysite.com', port=443): Max retries exceeded with url: /api/123/store/ (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c16b910>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\nERROR:sentry_sdk.errors:Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 84, in create_connection\r\n    raise err\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c16b910>: Failed to establish a new connection: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 296, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 217, in _send_event\r\n    headers={\"Content-Type\": \"application/json\", \"Content-Encoding\": \"gzip\"},\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/sentry_sdk/transport.py\", line 164, in _send_request\r\n    \"POST\", str(self._auth.store_api_url), body=body, headers=headers\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 80, in request\r\n    method, url, fields=fields, headers=headers, **urlopen_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/request.py\", line 171, in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/poolmanager.py\", line 330, in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 760, in urlopen\r\n    **response_kw\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 720, in urlopen\r\n    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n  File \"/tmp/sentry/.venv/lib/python3.7/site-packages/urllib3/util/retry.py\", line 436, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='mysite.com', port=443): Max retries exceeded with url: /api/123/store/ (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f2c7c16b910>: Failed to establish a new connection: [Errno 111] Connection refused'))\r\n [sentry] DEBUG: Sending event, type:null level:warning event_id:1a3e309ec6ab48e69f97306f6ea632dd project:123 host:mysite.com\r\nDEBUG:sentry_sdk.errors:Sending event, type:null level:warning event_id:1a3e309ec6ab48e69f97306f6ea632dd project:123 host:mysite.com\r\n [sentry] DEBUG: background worker flushed\r\nDEBUG:sentry_sdk.errors:background worker flushed\r\n [sentry] DEBUG: Killing HTTP transport\r\nDEBUG:sentry_sdk.errors:Killing HTTP transport\r\n [sentry] DEBUG: background worker got kill request\r\nDEBUG:sentry_sdk.errors:background worker got kill request\r\n```\r\n\r\n- python3.7\r\n- sentry-sdk==0.14.3\r\n- urllib3==1.25.8\r\n\r\n_Originally posted by @ansizov in https://github.com/getsentry/sentry-python/issues/399#issuecomment-602259010_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/654", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/654/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/654/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/654/events", "html_url": "https://github.com/getsentry/sentry-python/issues/654", "id": 585775130, "node_id": "MDU6SXNzdWU1ODU3NzUxMzA=", "number": 654, "title": "How to capture an easily serialisable exception event?", "user": {"login": "alexmojaki", "id": 3627481, "node_id": "MDQ6VXNlcjM2Mjc0ODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3627481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexmojaki", "html_url": "https://github.com/alexmojaki", "followers_url": "https://api.github.com/users/alexmojaki/followers", "following_url": "https://api.github.com/users/alexmojaki/following{/other_user}", "gists_url": "https://api.github.com/users/alexmojaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexmojaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexmojaki/subscriptions", "organizations_url": "https://api.github.com/users/alexmojaki/orgs", "repos_url": "https://api.github.com/users/alexmojaki/repos", "events_url": "https://api.github.com/users/alexmojaki/events{/privacy}", "received_events_url": "https://api.github.com/users/alexmojaki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-22T17:54:34Z", "updated_at": "2020-03-24T10:52:31Z", "closed_at": "2020-03-24T10:52:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using Sentry to monitor a Python worker process that is running under some restrictions. For example it can't open files or connect to the internet. For this reason I can't use `sentry_sdk.capture_exception` directly.\r\n\r\nWhat I can do is put an object on a `multiprocessing.Queue` to send it to the parent process which can talk to the Sentry server. So I tried doing something like this:\r\n\r\n```python\r\nfrom sentry_sdk.utils import event_from_exception\r\n\r\ntry:\r\n    # failing code\r\nexcept Exception:\r\n    exc_info = sys.exc_info()\r\n    sentry_event = event_from_exception(exc_info)\r\n    queue.put(sentry_event)\r\n```\r\n\r\nand then in the parent process `sentry_sdk.capture_event(sentry_event)`.\r\n\r\nHowever it turns out that `sentry_event` still contains some raw Python objects (local variables) which cannot be pickled so putting it on the queue fails.\r\n\r\nIs there a way to obtain an event where the data has already been extracted and it can easily be serialised, e.g. as JSON?\r\n\r\nI've also asked about this here: https://stackoverflow.com/questions/60801638/how-to-capture-an-easily-serialisable-exception-event-with-sentry", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/648", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/648/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/648/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/648/events", "html_url": "https://github.com/getsentry/sentry-python/issues/648", "id": 582024219, "node_id": "MDU6SXNzdWU1ODIwMjQyMTk=", "number": 648, "title": "sentry marks library-handled exception as \"handled\" but the error is not \"user handled\" as documenation suggests", "user": {"login": "josh-m-sharpe", "id": 39473, "node_id": "MDQ6VXNlcjM5NDcz", "avatar_url": "https://avatars3.githubusercontent.com/u/39473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh-m-sharpe", "html_url": "https://github.com/josh-m-sharpe", "followers_url": "https://api.github.com/users/josh-m-sharpe/followers", "following_url": "https://api.github.com/users/josh-m-sharpe/following{/other_user}", "gists_url": "https://api.github.com/users/josh-m-sharpe/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh-m-sharpe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh-m-sharpe/subscriptions", "organizations_url": "https://api.github.com/users/josh-m-sharpe/orgs", "repos_url": "https://api.github.com/users/josh-m-sharpe/repos", "events_url": "https://api.github.com/users/josh-m-sharpe/events{/privacy}", "received_events_url": "https://api.github.com/users/josh-m-sharpe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-16T05:57:39Z", "updated_at": "2020-03-16T06:01:30Z", "closed_at": "2020-03-16T06:01:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a similar issue to this: https://github.com/getsentry/sentry-python/issues/564 but didn't want to hijack that issue:\r\n\r\n<img width=\"742\" alt=\"Screen Shot 2020-03-16 at 11 25 54 AM\" src=\"https://user-images.githubusercontent.com/39473/76727052-f0170b80-6778-11ea-9738-1632132c698d.png\">\r\n\r\nThis looks to me like a **library** has handled the exception with `try...catch` and sentry is marking it as handled.  The [documentation](https://docs.sentry.io/development/sdk-dev/event-payloads/exception/#exception-mechanism) suggests that handled means the issue has been handled by the **user**.  This is not the case here.\r\n\r\n**Should library-handled exceptions like this be marked handled=no ?**\r\n\r\nSide question:  [The Angular Docs](https://docs.sentry.io/platforms/javascript/angular/) suggest that @sentry/browser catches all exceptions from the application but that you can also add a custom error handler.  I have added a custom error handler, but for the error above, it doesn't appear as if it was executed. (It seems to work fine for other errors.).  Is that somehow related to the fact that it has been marked \"handled\" and then somehow popped out of the Angular error handler to a higher level handler? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/641", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/641/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/641/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/641/events", "html_url": "https://github.com/getsentry/sentry-python/issues/641", "id": 576458358, "node_id": "MDU6SXNzdWU1NzY0NTgzNTg=", "number": 641, "title": "Invalid HTTP_HOST header", "user": {"login": "discover59", "id": 16558427, "node_id": "MDQ6VXNlcjE2NTU4NDI3", "avatar_url": "https://avatars2.githubusercontent.com/u/16558427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/discover59", "html_url": "https://github.com/discover59", "followers_url": "https://api.github.com/users/discover59/followers", "following_url": "https://api.github.com/users/discover59/following{/other_user}", "gists_url": "https://api.github.com/users/discover59/gists{/gist_id}", "starred_url": "https://api.github.com/users/discover59/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/discover59/subscriptions", "organizations_url": "https://api.github.com/users/discover59/orgs", "repos_url": "https://api.github.com/users/discover59/repos", "events_url": "https://api.github.com/users/discover59/events{/privacy}", "received_events_url": "https://api.github.com/users/discover59/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428653, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTM=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}, {"id": 968428658, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTg=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": "This will not be worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2020-03-05T18:46:05Z", "updated_at": "2020-05-21T10:17:51Z", "closed_at": "2020-05-13T11:21:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I used raven package in Django before and it worked well so far.\r\nRecently I replaced it with latest sentry-python and getting weird error notifications continuously.\r\n\r\n```\r\nInvalid HTTP_HOST header: 'server_ip'. You may need to add 'server_ip' to ALLOWED_HOSTS.\r\n```\r\n\r\nI added server domain, 127.0.0.1 and localhost in allowed hosts.\r\n\r\nI think there is no direct request to server IP instead of the domain.\r\n\r\nAny help to fix the issue is appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/640", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/640/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/640/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/640/events", "html_url": "https://github.com/getsentry/sentry-python/issues/640", "id": 574893082, "node_id": "MDU6SXNzdWU1NzQ4OTMwODI=", "number": 640, "title": "Why does Sentry recommend me to use aiohttp integration in my sanic app", "user": {"login": "wei-hai-pai", "id": 35832146, "node_id": "MDQ6VXNlcjM1ODMyMTQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/35832146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wei-hai-pai", "html_url": "https://github.com/wei-hai-pai", "followers_url": "https://api.github.com/users/wei-hai-pai/followers", "following_url": "https://api.github.com/users/wei-hai-pai/following{/other_user}", "gists_url": "https://api.github.com/users/wei-hai-pai/gists{/gist_id}", "starred_url": "https://api.github.com/users/wei-hai-pai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wei-hai-pai/subscriptions", "organizations_url": "https://api.github.com/users/wei-hai-pai/orgs", "repos_url": "https://api.github.com/users/wei-hai-pai/repos", "events_url": "https://api.github.com/users/wei-hai-pai/events{/privacy}", "received_events_url": "https://api.github.com/users/wei-hai-pai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-03T19:34:34Z", "updated_at": "2020-03-03T20:09:57Z", "closed_at": "2020-03-03T20:09:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an application using Sanic framework and I am using **SanicIntegration** to initiate Sentry, however, Sentry recommended me to use **aiohttp** integration. Why is that and should I use **aiohttp** integration to initiate Sentry? What's the diff or benefit from aiohttp integration?\r\n\r\n\r\nThis is how I initiate Sentry in the codebase\r\n\r\n```\r\nsentry_sdk.init(\r\n            dsn=app.config[\"SENTRY_DSN\"],\r\n            environment=app.config[\"REALM\"],\r\n            integrations=[SanicIntegration()]\r\n        )\r\n```\r\n\r\n<img width=\"638\" alt=\"Screen Shot 2020-03-03 at 11 30 58 AM\" src=\"https://user-images.githubusercontent.com/35832146/75812279-cc000700-5d42-11ea-880e-65b781e4bbb9.png\">\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/639", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/639/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/639/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/639/events", "html_url": "https://github.com/getsentry/sentry-python/issues/639", "id": 574758594, "node_id": "MDU6SXNzdWU1NzQ3NTg1OTQ=", "number": 639, "title": "Sentry does not play along with Paramiko's SSHException", "user": {"login": "Lilja", "id": 6134511, "node_id": "MDQ6VXNlcjYxMzQ1MTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6134511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lilja", "html_url": "https://github.com/Lilja", "followers_url": "https://api.github.com/users/Lilja/followers", "following_url": "https://api.github.com/users/Lilja/following{/other_user}", "gists_url": "https://api.github.com/users/Lilja/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lilja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lilja/subscriptions", "organizations_url": "https://api.github.com/users/Lilja/orgs", "repos_url": "https://api.github.com/users/Lilja/repos", "events_url": "https://api.github.com/users/Lilja/events{/privacy}", "received_events_url": "https://api.github.com/users/Lilja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-03T15:43:44Z", "updated_at": "2020-03-04T09:49:18Z", "closed_at": "2020-03-04T09:49:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nWe're using [paramiko]() for one of our projects. We sometimes get an exception that the library is throwing: `paramiko.ssh_exception.SSHException`. \r\n\r\nBasically, sentry is publishing each line of the traceback as individual errors.\r\n\r\n![image](https://user-images.githubusercontent.com/6134511/75791068-5446d200-5d6c-11ea-8de9-7ccdcd861ba1.png)\r\n\r\nI've read [this](https://stackoverflow.com/questions/58110732/pysftp-paramiko-exceptions-leaking-into-stderr) stack overflow over and over, trying to figure out what is wrong and I've got a working example.\r\n\r\n```python\r\nlilja in ~/c/u/customs-readjob-setup on new-lambda-handler \u03bb cat paramiko_test.py\r\n#!/usr/bin/env python\r\nimport sys\r\nimport socket\r\nimport paramiko\r\nimport logging\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nimport sentry_sdk\r\n\r\nsentry_sdk.init(dsn=\"\")\r\n\r\n_sys_stderr = sys.stderr\r\n\r\nhost = \"\"\r\nusername = \"\"\r\npassword = \"\"\r\nport = \"\"\r\n\r\nclass StdOut(object):\r\n    def __init__(self, stream, _type):\r\n        self.txtctrl = stream\r\n        self.type = _type\r\n    def write(self, string):\r\n        self.txtctrl.write(f\"{self.type} -> {string}\")\r\n\r\n    def flush(self):\r\n        self.txtctrl.flush()\r\n\r\nsys.stdout = StdOut(sys.stdout, \"out\")\r\nsys.stderr = StdOut(sys.stderr, \"err\")\r\n\r\ntry:\r\n    logger.info(f\"Logging in to {host} as {username}\")\r\n    transport = paramiko.Transport((host, port))\r\n    transport.banner_timeout = 500\r\n    transport.auth_timeout = 500\r\n    transport.connect(None, username=username, password=password)\r\n    k = paramiko.SFTPClient.from_transport(transport)\r\nexcept paramiko.ssh_exception.BadAuthenticationType as e:\r\n    print(f\"Bad authentication type. {e!r}\")\r\n    exit(1)\r\nexcept (socket.error, socket.gaierror, paramiko.ssh_exception.SSHException) as e:\r\n    if \"Error reading SSH protocol banner\" in str(e):\r\n        print(\r\n            \"Error reading ssh protocol banner. This might be a temporary error, \"\r\n            + \"or the server is a FTP(not SFTP) server.\"\r\n        )\r\n        exit(1)\r\n    raise\r\n```\r\n\r\nOutput: \r\n```\r\nerr -> Exception: Error reading SSH protocol banner\r\nerr -> Traceback (most recent call last):\r\nerr ->   File \"/Users/lilja/code/umbrella/customs-readjob-setup/.venv/lib/python3.8/site-packages/paramiko/transport.py\", line 2211, in _check_banner\r\nerr ->     buf = self.packetizer.readline(timeout)\r\nerr ->   File \"/Users/lilja/code/umbrella/customs-readjob-setup/.venv/lib/python3.8/site-packages/paramiko/packet.py\", line 380, in readline\r\nerr ->     buf += self._read_timeout(timeout)\r\nerr ->   File \"/Users/lilja/code/umbrella/customs-readjob-setup/.venv/lib/python3.8/site-packages/paramiko/packet.py\", line 622, in _read_timeout\r\nerr ->     raise socket.timeout()\r\nerr -> socket.timeout\r\nerr ->\r\nerr -> During handling of the above exception, another exception occurred:\r\nerr ->\r\nerr -> Traceback (most recent call last):\r\nerr ->   File \"/Users/lilja/code/umbrella/customs-readjob-setup/.venv/lib/python3.8/site-packages/paramiko/transport.py\", line 2039, in run\r\nerr ->     self._check_banner()\r\nerr ->   File \"/Users/lilja/code/umbrella/customs-readjob-setup/.venv/lib/python3.8/site-packages/paramiko/transport.py\", line 2215, in _check_banner\r\nerr ->     raise SSHException(\r\nerr -> paramiko.ssh_exception.SSHException: Error reading SSH protocol banner\r\nerr ->\r\nout -> Error reading ssh protocol banner. This might be a temporary error, or the server is a FTP(not SFTP) server.out ->\r\nerr -> Sentry is attempting to send 18 pending error messages\r\nerr -> Waiting up to 2 seconds\r\nerr -> Press Ctrl-C to quit\r\n```\r\nNotice how sentry wants to send **18** error messages! I think that might be a bit much.\r\n\r\nAccording to the stack overflow post, the reason is because `paramiko.Transport` is doing its work in a thread, which is posting its errors to stderr. The proposed solution is to pipe errors to stdout.\r\n\r\n```python\r\ntry:\r\n    logger.info(f\"Logging in to {host} as {username}\")\r\n    sys.stderr = sys.stdout\r\n    transport = paramiko.Transport((host, port))\r\n    transport.banner_timeout = 500\r\n    transport.auth_timeout = 500\r\n    transport.connect(None, username=username, password=password)\r\n    k = paramiko.SFTPClient.from_transport(transport)\r\nexcept paramiko.ssh_exception.BadAuthenticationType as e:\r\n    print(f\"Bad authentication type. {e!r}\")\r\n    exit(1)\r\nexcept (socket.error, socket.gaierror, paramiko.ssh_exception.SSHException) as e:\r\n    if \"Error reading SSH protocol banner\" in str(e):\r\n        print(\r\n            \"Error reading ssh protocol banner. This might be a temporary error, \"\r\n            + \"or the server is a FTP(not SFTP) server.\"\r\n        )\r\n        exit(1)\r\n    raise\r\nfinally:\r\n    sys.stderr = _sys_stderr\r\n```\r\n\r\nWhich brings the output:\r\n```\r\nout -> Exception: Error reading SSH protocol banner\r\nout -> Traceback (most recent call last):\r\nout ->   File \"/Users/lilja/code/umbrella/customs-readjob-setup/.venv/lib/python3.8/site-packages/paramiko/transport.py\", line 2211, in _check_banner\r\nout ->     buf = self.packetizer.readline(timeout)\r\nout ->   File \"/Users/lilja/code/umbrella/customs-readjob-setup/.venv/lib/python3.8/site-packages/paramiko/packet.py\", line 380, in readline\r\nout ->     buf += self._read_timeout(timeout)\r\nout ->   File \"/Users/lilja/code/umbrella/customs-readjob-setup/.venv/lib/python3.8/site-packages/paramiko/packet.py\", line 622, in _read_timeout\r\nout ->     raise socket.timeout()\r\nout -> socket.timeout\r\nout ->\r\nout -> During handling of the above exception, another exception occurred:\r\nout ->\r\nout -> Traceback (most recent call last):\r\nout ->   File \"/Users/lilja/code/umbrella/customs-readjob-setup/.venv/lib/python3.8/site-packages/paramiko/transport.py\", line 2039, in run\r\nout ->     self._check_banner()\r\nout ->   File \"/Users/lilja/code/umbrella/customs-readjob-setup/.venv/lib/python3.8/site-packages/paramiko/transport.py\", line 2215, in _check_banner\r\nout ->     raise SSHException(\r\nout -> paramiko.ssh_exception.SSHException: Error reading SSH protocol banner\r\nout ->\r\nout -> Error reading ssh protocol banner. This might be a temporary error, or the server is a FTP(not SFTP) server.out ->\r\nSentry is attempting to send 18 pending error messages\r\nWaiting up to 2 seconds\r\nPress Ctrl-C to quit\r\n```\r\n\r\nExactly the same output. \r\n\r\nWhy is sentry sending so many events, supposedly splitted by each newline? \r\n\r\nThe core issue in this paramiko example is that we're trying to connect to an FTP, instead of an SFTP. The FTP is a windows filezilla server, which when attempting connect send the response ` 500 Syntax error, command unrecognized` because paramiko only supports SFTP connections. We've patched this internally but still are dealing with the logs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/635", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/635/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/635/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/635/events", "html_url": "https://github.com/getsentry/sentry-python/issues/635", "id": 571136456, "node_id": "MDU6SXNzdWU1NzExMzY0NTY=", "number": 635, "title": "Request for Bugfix version release", "user": {"login": "Ivo-Donchev", "id": 12683214, "node_id": "MDQ6VXNlcjEyNjgzMjE0", "avatar_url": "https://avatars2.githubusercontent.com/u/12683214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ivo-Donchev", "html_url": "https://github.com/Ivo-Donchev", "followers_url": "https://api.github.com/users/Ivo-Donchev/followers", "following_url": "https://api.github.com/users/Ivo-Donchev/following{/other_user}", "gists_url": "https://api.github.com/users/Ivo-Donchev/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ivo-Donchev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ivo-Donchev/subscriptions", "organizations_url": "https://api.github.com/users/Ivo-Donchev/orgs", "repos_url": "https://api.github.com/users/Ivo-Donchev/repos", "events_url": "https://api.github.com/users/Ivo-Donchev/events{/privacy}", "received_events_url": "https://api.github.com/users/Ivo-Donchev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-26T07:58:02Z", "updated_at": "2020-03-03T15:39:58Z", "closed_at": "2020-02-28T11:41:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWe're trying to upgrade the python client for Sentry by replacing raven with `sentry-sdk` in the production Django application that we're working on.\r\n\r\nBut unfortunatelly we're facing this error - https://github.com/getsentry/sentry-python/issues/597\r\n\r\nI saw it was fixed here - https://github.com/getsentry/sentry-python/pull/598 and tried to install the latest code (from latest master) and it wortked :tada: \r\n\r\nThe fix is from **Jan 22** but the last release(`0.14.1`) is from **Jan 21**.\r\n\r\nCan you guys release a bugfix version please :pray: ? \r\n\r\nThanks,\r\nIvo Donchev", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/634", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/634/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/634/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/634/events", "html_url": "https://github.com/getsentry/sentry-python/issues/634", "id": 570933027, "node_id": "MDU6SXNzdWU1NzA5MzMwMjc=", "number": 634, "title": "Sanic does not actually do async error handlers!!!", "user": {"login": "autumnjolitz", "id": 270476, "node_id": "MDQ6VXNlcjI3MDQ3Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/270476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/autumnjolitz", "html_url": "https://github.com/autumnjolitz", "followers_url": "https://api.github.com/users/autumnjolitz/followers", "following_url": "https://api.github.com/users/autumnjolitz/following{/other_user}", "gists_url": "https://api.github.com/users/autumnjolitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/autumnjolitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/autumnjolitz/subscriptions", "organizations_url": "https://api.github.com/users/autumnjolitz/orgs", "repos_url": "https://api.github.com/users/autumnjolitz/repos", "events_url": "https://api.github.com/users/autumnjolitz/events{/privacy}", "received_events_url": "https://api.github.com/users/autumnjolitz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1167050501, "node_id": "MDU6TGFiZWwxMTY3MDUwNTAx", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/needs-information", "name": "needs-information", "color": "e4e669", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-25T23:53:31Z", "updated_at": "2020-06-17T08:10:20Z", "closed_at": "2020-06-17T08:10:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "These lines of code are broken whenever Sanic throws an application exception that is handled by the `@app.exception(ExceptionType)` functions.\r\n\r\nhttps://github.com/getsentry/sentry-python/blob/bf48bd0681c68239ee651224b59b9d8aee78f514/sentry_sdk/integrations/sanic.py#L112-L140\r\n\r\nThis is because `server.py` is actually synchronous: \r\nhttps://github.com/huge-success/sanic/blob/16961fab9ddfd6d54f4f005c92bda1201de01ceb/sanic/server.py#L576-L579\r\n\r\nIt's an incomplete implementation and is an open issue in https://github.com/huge-success/sanic/issues/1785\r\n\r\nThis means that whenever any `app.exception(` fires, like `@app.exception(PayloadTooLarge)`, the exception handler fails to send a response to the client because the synchronous `server.py:: write_error` function cannot handle a coroutine, resulting in broken user code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/630", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/630/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/630/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/630/events", "html_url": "https://github.com/getsentry/sentry-python/issues/630", "id": 567381126, "node_id": "MDU6SXNzdWU1NjczODExMjY=", "number": 630, "title": "Unable to use python AIOHTTP integration with gunicorn + eventlet, claims aiocontextvars is not installed", "user": {"login": "TheSHEEEP", "id": 1766205, "node_id": "MDQ6VXNlcjE3NjYyMDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1766205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheSHEEEP", "html_url": "https://github.com/TheSHEEEP", "followers_url": "https://api.github.com/users/TheSHEEEP/followers", "following_url": "https://api.github.com/users/TheSHEEEP/following{/other_user}", "gists_url": "https://api.github.com/users/TheSHEEEP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheSHEEEP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheSHEEEP/subscriptions", "organizations_url": "https://api.github.com/users/TheSHEEEP/orgs", "repos_url": "https://api.github.com/users/TheSHEEEP/repos", "events_url": "https://api.github.com/users/TheSHEEEP/events{/privacy}", "received_events_url": "https://api.github.com/users/TheSHEEEP/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-19T07:53:07Z", "updated_at": "2020-06-03T13:04:54Z", "closed_at": "2020-06-03T13:04:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is the output trying to run the gunicorn service:\r\n\r\n> [2020-02-19 07:40:53 +0000] [28258] [INFO] Starting gunicorn 20.0.4\r\n> [2020-02-19 07:40:53 +0000] [28258] [INFO] Listening at: unix:/var/www/service.sock (28258)\r\n> [2020-02-19 07:40:53 +0000] [28258] [INFO] Using worker: eventlet\r\n> [2020-02-19 07:40:53 +0000] [28261] [INFO] Booting worker with pid: 28261\r\n>  [sentry] DEBUG: Setting up integrations (with default = True)\r\n>  [sentry] DEBUG: Setting up previously not enabled integration flask\r\n>  [sentry] DEBUG: Setting up previously not enabled integration aiohttp\r\n> [2020-02-19 07:40:53 +0000] [28261] [ERROR] Exception in worker process\r\n> Traceback (most recent call last):\r\n>   File \"/usr/local/lib/python3.6/dist-packages/gunicorn/arbiter.py\", line 583, in spawn_worker\r\n>     worker.init_process()\r\n>   File \"/usr/local/lib/python3.6/dist-packages/gunicorn/workers/geventlet.py\", line 99, in init_process\r\n>     super().init_process()\r\n>   File \"/usr/local/lib/python3.6/dist-packages/gunicorn/workers/base.py\", line 119, in init_process\r\n>     self.load_wsgi()\r\n>   File \"/usr/local/lib/python3.6/dist-packages/gunicorn/workers/base.py\", line 144, in load_wsgi\r\n>     self.wsgi = self.app.wsgi()\r\n>   File \"/usr/local/lib/python3.6/dist-packages/gunicorn/app/base.py\", line 67, in wsgi\r\n>     self.callable = self.load()\r\n>   File \"/usr/local/lib/python3.6/dist-packages/gunicorn/app/wsgiapp.py\", line 49, in load\r\n>     return self.load_wsgiapp()\r\n>   File \"/usr/local/lib/python3.6/dist-packages/gunicorn/app/wsgiapp.py\", line 39, in load_wsgiapp\r\n>     return util.import_app(self.app_uri)\r\n>   File \"/usr/local/lib/python3.6/dist-packages/gunicorn/util.py\", line 358, in import_app\r\n>     mod = importlib.import_module(module)\r\n>   File \"/usr/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n>     return _bootstrap._gcd_import(name[level:], package, level)\r\n>   File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\n>   File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n>   File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n>   File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n>   File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n>   File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n>   File \"/home/titan/Titan/webapp/titanembeds/app.py\", line 43, in <module>\r\n>     debug = True\r\n>   File \"/usr/local/lib/python3.6/dist-packages/sentry_sdk/hub.py\", line 80, in _init\r\n>     client = Client(*args, **kwargs)  # type: ignore\r\n>   File \"/usr/local/lib/python3.6/dist-packages/sentry_sdk/client.py\", line 80, in __init__\r\n>     self._init_impl()\r\n>   File \"/usr/local/lib/python3.6/dist-packages/sentry_sdk/client.py\", line 108, in _init_impl\r\n>     with_defaults=self.options[\"default_integrations\"],\r\n>   File \"/usr/local/lib/python3.6/dist-packages/sentry_sdk/integrations/__init__.py\", line 82, in setup_integrations\r\n>     type(integration).setup_once()\r\n>   File \"/usr/local/lib/python3.6/dist-packages/sentry_sdk/integrations/aiohttp.py\", line 50, in setup_once\r\n>     \"The aiohttp integration for Sentry requires Python 3.7+ \"\r\n> RuntimeError: The aiohttp integration for Sentry requires Python 3.7+  or aiocontextvars package\r\n\r\nI have read in other issues that gevent (and therefore I guess eventlet, too?) interferes with the aiocontextvars package somehow.\r\nAm I simply out of luck in this case if I cannot switch to Python 3.7?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/623", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/623/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/623/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/623/events", "html_url": "https://github.com/getsentry/sentry-python/issues/623", "id": 566120221, "node_id": "MDU6SXNzdWU1NjYxMjAyMjE=", "number": 623, "title": "SSLError processing loop", "user": {"login": "vanzi", "id": 416521, "node_id": "MDQ6VXNlcjQxNjUyMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/416521?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vanzi", "html_url": "https://github.com/vanzi", "followers_url": "https://api.github.com/users/vanzi/followers", "following_url": "https://api.github.com/users/vanzi/following{/other_user}", "gists_url": "https://api.github.com/users/vanzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vanzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vanzi/subscriptions", "organizations_url": "https://api.github.com/users/vanzi/orgs", "repos_url": "https://api.github.com/users/vanzi/repos", "events_url": "https://api.github.com/users/vanzi/events{/privacy}", "received_events_url": "https://api.github.com/users/vanzi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-17T08:01:52Z", "updated_at": "2020-02-17T08:28:02Z", "closed_at": "2020-02-17T08:27:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "We've had a problem with an expired SSL cert on our Senty instance over the weekend and it seems to have caused the sentry-sdk to enter some sort of retries loop which caused major CPU and memory usage (e.g. 1 process used 10GB memory over 3 hours).\r\n\r\nLogs showed hundreds of thousands of retries one after another, like this:\r\n\r\n    Feb 15 01:39:34 worker-1 r-worker-1-4cbe4c8e[106416] WARNING 2020-02-15T01:39:34.380505 connectionpool Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1056)'))': /api/5/store/  \r\n    Feb 15 01:39:34 worker-1 r-worker-1-4cbe4c8e[106416] WARNING 2020-02-15T01:39:34.460969 connectionpool Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1056)'))': /api/5/store/  \r\n    Feb 15 01:39:34 worker-1 r-worker-1-4cbe4c8e[106416] WARNING 2020-02-15T01:39:34.503272 connectionpool Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1056)'))': /api/5/store/  \r\n\r\nThis was on sentry-sdk==0.13.2 so not the current one, but I did not see any mention of this issue in the change log.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/617", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/617/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/617/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/617/events", "html_url": "https://github.com/getsentry/sentry-python/issues/617", "id": 562558437, "node_id": "MDU6SXNzdWU1NjI1NTg0Mzc=", "number": 617, "title": "Flask integration not capturing exceptions", "user": {"login": "alexmojaki", "id": 3627481, "node_id": "MDQ6VXNlcjM2Mjc0ODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3627481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexmojaki", "html_url": "https://github.com/alexmojaki", "followers_url": "https://api.github.com/users/alexmojaki/followers", "following_url": "https://api.github.com/users/alexmojaki/following{/other_user}", "gists_url": "https://api.github.com/users/alexmojaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexmojaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexmojaki/subscriptions", "organizations_url": "https://api.github.com/users/alexmojaki/orgs", "repos_url": "https://api.github.com/users/alexmojaki/repos", "events_url": "https://api.github.com/users/alexmojaki/events{/privacy}", "received_events_url": "https://api.github.com/users/alexmojaki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-10T13:24:52Z", "updated_at": "2020-02-10T13:27:22Z", "closed_at": "2020-02-10T13:27:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "No matter what I do, exceptions are not appearing in the project.\r\n\r\nRun this script from the docs, substituting a DSN:\r\n\r\n```python\r\nimport sentry_sdk\r\nimport flask\r\nfrom sentry_sdk.integrations.flask import FlaskIntegration\r\n\r\nprint(flask.__version__)\r\nsentry_sdk.init(\r\n    dsn=\"https://actual_dsn_here@sentry.io/some_number\",\r\n    integrations=[FlaskIntegration()]\r\n)\r\n\r\napp = flask.Flask(__name__)\r\n\r\n\r\n@app.route('/')\r\ndef trigger_error():\r\n    division_by_zero = 1 / 0\r\n\r\n\r\napp.run()\r\n```\r\n\r\nThe logs show the exception when visiting the index:\r\n\r\n```\r\n1.1.1\r\n * Serving Flask app \"scratch_540\" (lazy loading)\r\n * Environment: production\r\n   WARNING: This is a development server. Do not use it in a production deployment.\r\n   Use a production WSGI server instead.\r\n * Debug mode: off\r\nINFO:werkzeug: * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\r\nERROR:scratch_540:Exception on / [GET]\r\nTraceback (most recent call last):\r\n  File \"/home/alex/.cache/pypoetry/virtualenvs/stanbic-trader-solutions-py3.7/lib/python3.7/site-packages/flask/app.py\", line 2446, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/home/alex/.cache/pypoetry/virtualenvs/stanbic-trader-solutions-py3.7/lib/python3.7/site-packages/flask/app.py\", line 1951, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/home/alex/.cache/pypoetry/virtualenvs/stanbic-trader-solutions-py3.7/lib/python3.7/site-packages/flask/app.py\", line 1820, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/home/alex/.cache/pypoetry/virtualenvs/stanbic-trader-solutions-py3.7/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/home/alex/.cache/pypoetry/virtualenvs/stanbic-trader-solutions-py3.7/lib/python3.7/site-packages/flask/app.py\", line 1949, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/home/alex/.cache/pypoetry/virtualenvs/stanbic-trader-solutions-py3.7/lib/python3.7/site-packages/flask/app.py\", line 1935, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/home/alex/.PyCharm2019.3/config/scratches/scratch_540.py\", line 16, in trigger_error\r\n    division_by_zero = 1 / 0\r\nZeroDivisionError: division by zero\r\nINFO:werkzeug:127.0.0.1 - - [10/Feb/2020 15:07:23] \"GET / HTTP/1.1\" 500 -\r\n```\r\n\r\nI think the exception is supposed to be caught here:\r\n\r\nhttps://github.com/getsentry/sentry-python/blob/c06a0c6470ac22204f056fbf01a79090626c435d/sentry_sdk/integrations/wsgi.py#L118-L126\r\n\r\nbut that code runs without raising an exception at that level, because Flask already caught my exception here: https://github.com/pallets/flask/blob/2c66746a37e52a784b0cf6361cdaef765080538a/src/flask/app.py#L1939-L1945\r\n\r\nIn fact `wsgi._capture_exception` isn't called at all.\r\n\r\nI'm running the latest versions:\r\n\r\n- sentry-sdk==0.14.1\r\n- Flask==1.1.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/613", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/613/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/613/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/613/events", "html_url": "https://github.com/getsentry/sentry-python/issues/613", "id": 557563134, "node_id": "MDU6SXNzdWU1NTc1NjMxMzQ=", "number": 613, "title": "Sentry doesn't capture  billiard.exceptions.TimeLimitExceeded from Celery", "user": {"login": "maxmalysh", "id": 6844656, "node_id": "MDQ6VXNlcjY4NDQ2NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6844656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxmalysh", "html_url": "https://github.com/maxmalysh", "followers_url": "https://api.github.com/users/maxmalysh/followers", "following_url": "https://api.github.com/users/maxmalysh/following{/other_user}", "gists_url": "https://api.github.com/users/maxmalysh/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxmalysh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxmalysh/subscriptions", "organizations_url": "https://api.github.com/users/maxmalysh/orgs", "repos_url": "https://api.github.com/users/maxmalysh/repos", "events_url": "https://api.github.com/users/maxmalysh/events{/privacy}", "received_events_url": "https://api.github.com/users/maxmalysh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-30T15:18:28Z", "updated_at": "2020-01-30T16:12:46Z", "closed_at": "2020-01-30T16:12:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've noticed that sentry-sdk doesn't capture `billiard.exceptions.TimeLimitExceeded` when a task fails. \r\n\r\nI've tried Celery 3.1.26 and 4.4. Sentry-sdk is 0.14.1.\r\n\r\nExample:\r\n```\r\n# tasks.py\r\nfrom time import sleep\r\nfrom celery import shared_task\r\n\r\n@shared_task(time_limit=2)\r\ndef test_time_limit():\r\n    sleep(5)\r\n```\r\nLogs:\r\n```\r\n[2020-01-30 15:07:59,614: ERROR/MainProcess] Task handler raised error: TimeLimitExceeded(2,)\r\nTraceback (most recent call last):\r\n  File \"/Users/mmalysh/Development/my-website/venv/lib/python3.6/site-packages/billiard/pool.py\", line 684, in on_hard_timeout\r\n    raise TimeLimitExceeded(job._timeout)\r\nbilliard.exceptions.TimeLimitExceeded: TimeLimitExceeded(2,)\r\n[2020-01-30 15:07:59,627: ERROR/MainProcess] Hard time limit (2s) exceeded for api.tasks.test_foobar[e4f46f20-2311-4417-9ade-53e735430c65]\r\n```\r\n\r\nWe didn't have this problem with `raven`. All other exceptions are reported properly. For example, this exception is reported as expected:\r\n```\r\n@shared_task\r\ndef test_bazqux():\r\n    raise Exception('BUY BITCOIN!')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/611", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/611/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/611/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/611/events", "html_url": "https://github.com/getsentry/sentry-python/issues/611", "id": 556538913, "node_id": "MDU6SXNzdWU1NTY1Mzg5MTM=", "number": 611, "title": "DeprecationWarning in sqlalchemy integration", "user": {"login": "mcclurem", "id": 236281, "node_id": "MDQ6VXNlcjIzNjI4MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/236281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcclurem", "html_url": "https://github.com/mcclurem", "followers_url": "https://api.github.com/users/mcclurem/followers", "following_url": "https://api.github.com/users/mcclurem/following{/other_user}", "gists_url": "https://api.github.com/users/mcclurem/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcclurem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcclurem/subscriptions", "organizations_url": "https://api.github.com/users/mcclurem/orgs", "repos_url": "https://api.github.com/users/mcclurem/repos", "events_url": "https://api.github.com/users/mcclurem/events{/privacy}", "received_events_url": "https://api.github.com/users/mcclurem/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-28T23:05:08Z", "updated_at": "2020-01-29T18:41:14Z", "closed_at": "2020-01-29T18:41:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "At integrations/sqlalchemy.py line 28 - integration is listening for dbapi_error, this was deprecated in sqlalchemy a long time ago and should be replaced with handle_error event", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/610", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/610/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/610/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/610/events", "html_url": "https://github.com/getsentry/sentry-python/issues/610", "id": 555277572, "node_id": "MDU6SXNzdWU1NTUyNzc1NzI=", "number": 610, "title": "Scoped sentry_sdk.init for per-package logging", "user": {"login": "lsorber", "id": 4543654, "node_id": "MDQ6VXNlcjQ1NDM2NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4543654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsorber", "html_url": "https://github.com/lsorber", "followers_url": "https://api.github.com/users/lsorber/followers", "following_url": "https://api.github.com/users/lsorber/following{/other_user}", "gists_url": "https://api.github.com/users/lsorber/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsorber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsorber/subscriptions", "organizations_url": "https://api.github.com/users/lsorber/orgs", "repos_url": "https://api.github.com/users/lsorber/repos", "events_url": "https://api.github.com/users/lsorber/events{/privacy}", "received_events_url": "https://api.github.com/users/lsorber/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-01-26T19:44:18Z", "updated_at": "2020-02-04T15:03:48Z", "closed_at": "2020-01-29T09:34:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like `sentry_sdk.init` integrations are generally attached in a global way. For example, the `LoggingIntegration` wraps `logging.Logger.callHandlers` [1], and `ExcepthookIntegration` wraps `sys.excepthook` [2].\r\n\r\nLet's say you have multiple Sentry projects (Project A, Project B, Project C) that each correspond to one Python package (Package A, Package B, Package C). All packages could be used independently, so it makes sense to instrument all of them individually with `sentry_sdk.init`. However, if Package C depends on Package A and B, then it would seem that Project C will receive _all_ error notifications even though some of the errors might actually be caused by Packages A and B. Ideally, I'd like to be able to do a scoped `sentry_sdk.init` on the three packages so that errors from different packages are routed to their corresponding Sentry project, regardless of their interdependencies.\r\n\r\nIs such a use case supported, or are there any plans to support this use case in the future?\r\n\r\nPotentially relevant issue: https://github.com/getsentry/sentry-python/issues/198.\r\n\r\n[1] https://github.com/getsentry/sentry-python/blob/master/sentry_sdk/integrations/logging.py#L72\r\n[2] https://github.com/getsentry/sentry-python/blob/master/sentry_sdk/integrations/excepthook.py#L46", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/597", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/597/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/597/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/597/events", "html_url": "https://github.com/getsentry/sentry-python/issues/597", "id": 553457324, "node_id": "MDU6SXNzdWU1NTM0NTczMjQ=", "number": 597, "title": "DjangoIntegration breaks Django Channels after reinitialization", "user": {"login": "svenstucki", "id": 692141, "node_id": "MDQ6VXNlcjY5MjE0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/692141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svenstucki", "html_url": "https://github.com/svenstucki", "followers_url": "https://api.github.com/users/svenstucki/followers", "following_url": "https://api.github.com/users/svenstucki/following{/other_user}", "gists_url": "https://api.github.com/users/svenstucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/svenstucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svenstucki/subscriptions", "organizations_url": "https://api.github.com/users/svenstucki/orgs", "repos_url": "https://api.github.com/users/svenstucki/repos", "events_url": "https://api.github.com/users/svenstucki/events{/privacy}", "received_events_url": "https://api.github.com/users/svenstucki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-22T10:46:14Z", "updated_at": "2020-01-22T17:00:14Z", "closed_at": "2020-01-22T17:00:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "After initializing Sentry, I'm using `sentry_sdk.init()` to disable error reporting in some cases. However, when using Django Channels and the Django integration, this breaks something in the Daphne webserver. After this second call to `init`, any request leads to the following error:\r\n\r\n ```\r\nTraceback (most recent call last):\r\n  File \"<virtual env>/daphne/http_protocol.py\", line 180, in process\r\n    \"server\": self.server_addr,\r\nTypeError: __call__() missing 1 required positional argument: 'send'\r\n\r\nHTTP GET / 500 [0.01, 127.0.0.1:51170]\r\n```\r\n\r\nYou can find a minimal example with that behaviour in [this repo](https://github.com/svenstucki/sentry-problem).\r\n\r\nThe problem seems to be that the second call is missing the `DjangoIntegration`, it goes away when passing a new instance.\r\n\r\nThis might seem like a weird use of the SDK, but there does not seem to be another way to disable error reporting after `init` was called. This approach was suggested [here](https://stackoverflow.com/a/52781369/182689) as a workaround, since it removes the DSN. It should definitely not break the application though or at least be documented.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/595", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/595/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/595/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/595/events", "html_url": "https://github.com/getsentry/sentry-python/issues/595", "id": 552211472, "node_id": "MDU6SXNzdWU1NTIyMTE0NzI=", "number": 595, "title": "Number limit on extra items set by set_extra()?", "user": {"login": "laggardkernel", "id": 12206611, "node_id": "MDQ6VXNlcjEyMjA2NjEx", "avatar_url": "https://avatars3.githubusercontent.com/u/12206611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laggardkernel", "html_url": "https://github.com/laggardkernel", "followers_url": "https://api.github.com/users/laggardkernel/followers", "following_url": "https://api.github.com/users/laggardkernel/following{/other_user}", "gists_url": "https://api.github.com/users/laggardkernel/gists{/gist_id}", "starred_url": "https://api.github.com/users/laggardkernel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laggardkernel/subscriptions", "organizations_url": "https://api.github.com/users/laggardkernel/orgs", "repos_url": "https://api.github.com/users/laggardkernel/repos", "events_url": "https://api.github.com/users/laggardkernel/events{/privacy}", "received_events_url": "https://api.github.com/users/laggardkernel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-20T10:33:16Z", "updated_at": "2020-01-21T17:09:48Z", "closed_at": "2020-01-21T17:09:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any limit on the number of extra info set by `set_extra`? With the following test, I can only see 10 items under the \"ADDITIONAL DATA\" section on the monitor page.\r\n\r\n```python\r\n            with push_scope() as scope:\r\n                for _ in range(100):\r\n                    scope.set_extra(_, _)\r\n                capture_exception(e)\r\n\r\n```\r\n\r\nSentry is running in docker, with version \"Sentry 10.1.0.dev0 (2232401f0acc359baeaf186ee3e125c71cb38cdd)\".\r\n\r\nsentry-sdk, 0.14.0.\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/591", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/591/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/591/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/591/events", "html_url": "https://github.com/getsentry/sentry-python/issues/591", "id": 548692850, "node_id": "MDU6SXNzdWU1NDg2OTI4NTA=", "number": 591, "title": "RuntimeError: There is no current event loop in thread 'raven-sentry.BackgroundWorker'", "user": {"login": "lcannon", "id": 4850712, "node_id": "MDQ6VXNlcjQ4NTA3MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4850712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcannon", "html_url": "https://github.com/lcannon", "followers_url": "https://api.github.com/users/lcannon/followers", "following_url": "https://api.github.com/users/lcannon/following{/other_user}", "gists_url": "https://api.github.com/users/lcannon/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcannon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcannon/subscriptions", "organizations_url": "https://api.github.com/users/lcannon/orgs", "repos_url": "https://api.github.com/users/lcannon/repos", "events_url": "https://api.github.com/users/lcannon/events{/privacy}", "received_events_url": "https://api.github.com/users/lcannon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-01-13T04:12:09Z", "updated_at": "2020-01-29T18:43:29Z", "closed_at": "2020-01-29T18:43:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently we've noticed that we're not getting sentry errors logged from our Django application. I can see the following traceback in our kubernetes logs on GCP:\r\n\r\n```\r\n  File \"/usr/local/lib/python3.6/threading.py\", line 916, in _bootstrap_inner\r\n    self.run()\r\n  File \"/srv/venv/lib/python3.6/site-packages/sentry_sdk/integrations/threading.py\", line 63, in run\r\n    hub = parent_hub or Hub.current\r\n  File \"/srv/venv/lib/python3.6/site-packages/sentry_sdk/hub.py\", line 112, in current\r\n    rv = _local.get(None)\r\n  File \"/srv/venv/lib/python3.6/site-packages/aiocontextvars/var.py\", line 33, in get\r\n    ctx: Context = Context.current()\r\n  File \"/srv/venv/lib/python3.6/site-packages/aiocontextvars/context.py\", line 26, in current\r\n    local = Task.current_task() or _thread_local\r\n  File \"/usr/local/lib/python3.6/asyncio/events.py\", line 694, in get_event_loop\r\n    return get_event_loop_policy().get_event_loop()\r\n  File \"/usr/local/lib/python3.6/asyncio/events.py\", line 602, in get_event_loop\r\n    % threading.current_thread().name)\r\nRuntimeError: There is no current event loop in thread 'raven-sentry.BackgroundWorker'.\r\n\"  \r\n```\r\n\r\nUnfortunately, since it's been broken for a while, I'm having trouble isolating exactly what changed to cause this to happen. We're using a fairly standard django application running Django 2.2.4 on uwsgi 2.0.18, with threading enabled, running inside a python:3.6.9-slim-stretch image.\r\n\r\nWe're using the same versions of the above to run containers with celery, which are working properly. I'm a bit stumped as to what the problem could be.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/590", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/590/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/590/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/590/events", "html_url": "https://github.com/getsentry/sentry-python/issues/590", "id": 548652046, "node_id": "MDU6SXNzdWU1NDg2NTIwNDY=", "number": 590, "title": "Sentry django integration not catching all 500", "user": {"login": "Jihadik", "id": 11528067, "node_id": "MDQ6VXNlcjExNTI4MDY3", "avatar_url": "https://avatars1.githubusercontent.com/u/11528067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jihadik", "html_url": "https://github.com/Jihadik", "followers_url": "https://api.github.com/users/Jihadik/followers", "following_url": "https://api.github.com/users/Jihadik/following{/other_user}", "gists_url": "https://api.github.com/users/Jihadik/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jihadik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jihadik/subscriptions", "organizations_url": "https://api.github.com/users/Jihadik/orgs", "repos_url": "https://api.github.com/users/Jihadik/repos", "events_url": "https://api.github.com/users/Jihadik/events{/privacy}", "received_events_url": "https://api.github.com/users/Jihadik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-13T00:22:34Z", "updated_at": "2020-02-25T09:30:32Z", "closed_at": "2020-02-25T09:30:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "In continuation of [this thread](https://forum.sentry.io/t/sentry-not-picking-up-all-500-errors/2099/8):\r\n\r\nThere were a couple of exceptions in DRF serializers which were not caught by Sentry. It looks like a known issue.\r\n1. How to resolve the issue quickly? Write my own middleware? Any examples?\r\n2. How to resolve the issue in the long term, so other users won't hit it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/586", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/586/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/586/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/586/events", "html_url": "https://github.com/getsentry/sentry-python/issues/586", "id": 544986855, "node_id": "MDU6SXNzdWU1NDQ5ODY4NTU=", "number": 586, "title": "Memory leak introduced in 0.12.3", "user": {"login": "mikmatko", "id": 20861891, "node_id": "MDQ6VXNlcjIwODYxODkx", "avatar_url": "https://avatars0.githubusercontent.com/u/20861891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikmatko", "html_url": "https://github.com/mikmatko", "followers_url": "https://api.github.com/users/mikmatko/followers", "following_url": "https://api.github.com/users/mikmatko/following{/other_user}", "gists_url": "https://api.github.com/users/mikmatko/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikmatko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikmatko/subscriptions", "organizations_url": "https://api.github.com/users/mikmatko/orgs", "repos_url": "https://api.github.com/users/mikmatko/repos", "events_url": "https://api.github.com/users/mikmatko/events{/privacy}", "received_events_url": "https://api.github.com/users/mikmatko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1167050501, "node_id": "MDU6TGFiZWwxMTY3MDUwNTAx", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/needs-information", "name": "needs-information", "color": "e4e669", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-01-03T13:09:32Z", "updated_at": "2020-01-17T14:11:39Z", "closed_at": "2020-01-17T13:41:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear maintainers,\r\n\r\nI recently noticed that my application containers started going out of memory fairly quickly. Upon investigation, I found that recent upgrade of sentry-sdk was causing this.\r\n\r\nTested with a few versions of sentry-sdk using Python 3.7.6:\r\nsentry-sdk==0.12.2 -> memory usage stays at ~70 MiB, does not raise\r\n\r\nsentry-sdk==0.12.3\r\nsentry-sdk==0.13.5\r\nsentry-sdk @ master\r\n-> memory usage starts from ~70MiB and raises steadily until reaching memory limit and crashes container.\r\n\r\nPlease see if you can reproduce this behaviour. If not, I'll try to put up a minimal reproducible example, but this should be fairly simple to see. My application does not do anything special really, just receives some millions of messages over MQ and out of those, some few thousands end up getting logged to Sentry due to exceptions occurring. This is using pretty much the default Sentry config, no integrations.\r\n\r\nThanks for your help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/585", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/585/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/585/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/585/events", "html_url": "https://github.com/getsentry/sentry-python/issues/585", "id": 544870835, "node_id": "MDU6SXNzdWU1NDQ4NzA4MzU=", "number": 585, "title": "TypeError when using sentry-sdk>=0.11.0 in Django", "user": {"login": "40huo", "id": 13835420, "node_id": "MDQ6VXNlcjEzODM1NDIw", "avatar_url": "https://avatars3.githubusercontent.com/u/13835420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/40huo", "html_url": "https://github.com/40huo", "followers_url": "https://api.github.com/users/40huo/followers", "following_url": "https://api.github.com/users/40huo/following{/other_user}", "gists_url": "https://api.github.com/users/40huo/gists{/gist_id}", "starred_url": "https://api.github.com/users/40huo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/40huo/subscriptions", "organizations_url": "https://api.github.com/users/40huo/orgs", "repos_url": "https://api.github.com/users/40huo/repos", "events_url": "https://api.github.com/users/40huo/events{/privacy}", "received_events_url": "https://api.github.com/users/40huo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-03T06:42:19Z", "updated_at": "2020-01-14T10:20:31Z", "closed_at": "2020-01-14T10:20:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I used sentry-sdk==0.10.1, everything was ok. But when I upgraded sentry-sdk to 0.11.0 and higher, there's a TypeError.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/apscheduler/executors/base_py3.py\", line 29, in run_coroutine_job\r\n    retval = await job.func(*job.args, **job.kwargs)\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/backend/scheduler.py\", line 96, in refresh_task\r\n    req = await fetch_resource_list(loop=loop)\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/backend/scheduler.py\", line 27, in fetch_resource_list\r\n    req = await loop.run_in_executor(executor, send_req, \"get\", reverse(viewname=\"resource-list\"))\r\n  File \"/usr/lib/python3.8/concurrent/futures/thread.py\", line 57, in run\r\n    result = self.fn(*self.args, **self.kwargs)\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/utils/http_req.py\", line 37, in send_req\r\n    return client.get(url=abs_url, headers=headers)\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/requests/sessions.py\", line 546, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/rest_framework/test.py\", line 115, in request\r\n    return super().request(method, url, *args, **kwargs)\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/requests/sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/requests/sessions.py\", line 646, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/rest_framework/test.py\", line 93, in send\r\n    wsgi_response = self.app(environ, start_response)\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/sentry_sdk/integrations/django/__init__.py\", line 101, in sentry_patched_wsgi_handler\r\n    return SentryWsgiMiddleware(lambda *a, **kw: old_app(self, *a, **kw))(\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/sentry_sdk/integrations/wsgi.py\", line 106, in __call__\r\n    reraise(*_capture_exception(hub))\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/sentry_sdk/_compat.py\", line 54, in reraise\r\n    raise value\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/sentry_sdk/integrations/wsgi.py\", line 101, in __call__\r\n    rv = self.app(\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/sentry_sdk/integrations/django/__init__.py\", line 101, in <lambda>\r\n    return SentryWsgiMiddleware(lambda *a, **kw: old_app(self, *a, **kw))(\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/django/core/handlers/wsgi.py\", line 142, in __call__\r\n    start_response(status, response_headers)\r\n  File \"/var/www/pixiu.40huo.cn/pixiu/venv/lib/python3.8/site-packages/sentry_sdk/integrations/wsgi.py\", line 121, in _sentry_start_response\r\n    return old_start_response(status, response_headers, exc_info)\r\nTypeError: start_response() takes 2 positional arguments but 3 were given\r\n```\r\nThe related code https://github.com/40huo/pixiu/blob/develop/backend/scheduler.py .\r\n\r\nPlus, I use gunicorn[gevent] starting wsgi.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/582", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/582/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/582/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/582/events", "html_url": "https://github.com/getsentry/sentry-python/issues/582", "id": 542734811, "node_id": "MDU6SXNzdWU1NDI3MzQ4MTE=", "number": 582, "title": "AwsLambdaIntegration and Scope?", "user": {"login": "flyinbutrs", "id": 1248221, "node_id": "MDQ6VXNlcjEyNDgyMjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1248221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flyinbutrs", "html_url": "https://github.com/flyinbutrs", "followers_url": "https://api.github.com/users/flyinbutrs/followers", "following_url": "https://api.github.com/users/flyinbutrs/following{/other_user}", "gists_url": "https://api.github.com/users/flyinbutrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/flyinbutrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flyinbutrs/subscriptions", "organizations_url": "https://api.github.com/users/flyinbutrs/orgs", "repos_url": "https://api.github.com/users/flyinbutrs/repos", "events_url": "https://api.github.com/users/flyinbutrs/events{/privacy}", "received_events_url": "https://api.github.com/users/flyinbutrs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-27T04:01:12Z", "updated_at": "2019-12-27T09:50:40Z", "closed_at": "2019-12-27T09:50:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using this SDK with the `AwsLambdaIntegration`, the SDK is performing some sort of magic to create scope on the lambda handlers. The question is, with that, is there a global method to add tags to the current scope, or do I need to create a new scope? The documentation isn't exactly clear. It seems like I should be able to do it without creating a separate scope, but I'm not sure how.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/581", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/581/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/581/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/581/events", "html_url": "https://github.com/getsentry/sentry-python/issues/581", "id": 542450917, "node_id": "MDU6SXNzdWU1NDI0NTA5MTc=", "number": 581, "title": "Ignoring KeyboardInterrupt", "user": {"login": "bsergean", "id": 11857745, "node_id": "MDQ6VXNlcjExODU3NzQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/11857745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bsergean", "html_url": "https://github.com/bsergean", "followers_url": "https://api.github.com/users/bsergean/followers", "following_url": "https://api.github.com/users/bsergean/following{/other_user}", "gists_url": "https://api.github.com/users/bsergean/gists{/gist_id}", "starred_url": "https://api.github.com/users/bsergean/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bsergean/subscriptions", "organizations_url": "https://api.github.com/users/bsergean/orgs", "repos_url": "https://api.github.com/users/bsergean/repos", "events_url": "https://api.github.com/users/bsergean/events{/privacy}", "received_events_url": "https://api.github.com/users/bsergean/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-26T06:32:37Z", "updated_at": "2020-01-07T08:33:11Z", "closed_at": "2020-01-07T06:17:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nIs there a standard way to ignore Ctrl-C ? We have a project that has many such errors and they are not that interesting. Should we just override the SIGINT signal handler the default way, which will make sentry ignore the exception ?\r\n\r\nThanks !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/577", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/577/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/577/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/577/events", "html_url": "https://github.com/getsentry/sentry-python/issues/577", "id": 537557548, "node_id": "MDU6SXNzdWU1Mzc1NTc1NDg=", "number": 577, "title": "Ability to re-enable loggers in logging integration", "user": {"login": "EvertEt", "id": 9197891, "node_id": "MDQ6VXNlcjkxOTc4OTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/9197891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EvertEt", "html_url": "https://github.com/EvertEt", "followers_url": "https://api.github.com/users/EvertEt/followers", "following_url": "https://api.github.com/users/EvertEt/following{/other_user}", "gists_url": "https://api.github.com/users/EvertEt/gists{/gist_id}", "starred_url": "https://api.github.com/users/EvertEt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EvertEt/subscriptions", "organizations_url": "https://api.github.com/users/EvertEt/orgs", "repos_url": "https://api.github.com/users/EvertEt/repos", "events_url": "https://api.github.com/users/EvertEt/events{/privacy}", "received_events_url": "https://api.github.com/users/EvertEt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-13T13:44:03Z", "updated_at": "2019-12-14T22:12:53Z", "closed_at": "2019-12-14T22:12:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "We can disable loggers using `ignore_logger` but we cannot re-enable them.\r\n\r\nThe use case I have is the following code\r\n```python\r\ntry:\r\n    blob_service.get_blob_to_path(storage_container, blob, local_path)\r\nexcept AzureMissingResourceHttpError:\r\n    logging.debug(...)\r\n```\r\nRunning this code and running into a `AzureMissingResourceHttpError` error shows up in sentry because `get_blob_to_path` logs an error into its own logger (`azure.storage.common.storageclient`).\r\n\r\nSince I found no clean way to filter this in before_send (I thought about setting a flag that we're handling the error ourselves), I would like to disable and re-enable the logger around this call.\r\n\r\nWould this be possible (open to a PR?) or is there a better solution?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/575", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/575/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/575/events", "html_url": "https://github.com/getsentry/sentry-python/issues/575", "id": 536617758, "node_id": "MDU6SXNzdWU1MzY2MTc3NTg=", "number": 575, "title": "Help with SDK installation (pipenv, python 3.7, and flask)", "user": {"login": "MarcFord", "id": 898637, "node_id": "MDQ6VXNlcjg5ODYzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/898637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarcFord", "html_url": "https://github.com/MarcFord", "followers_url": "https://api.github.com/users/MarcFord/followers", "following_url": "https://api.github.com/users/MarcFord/following{/other_user}", "gists_url": "https://api.github.com/users/MarcFord/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarcFord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarcFord/subscriptions", "organizations_url": "https://api.github.com/users/MarcFord/orgs", "repos_url": "https://api.github.com/users/MarcFord/repos", "events_url": "https://api.github.com/users/MarcFord/events{/privacy}", "received_events_url": "https://api.github.com/users/MarcFord/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-11T21:15:24Z", "updated_at": "2019-12-11T21:40:23Z", "closed_at": "2019-12-11T21:40:13Z", "author_association": "NONE", "active_lock_reason": null, "body": " I use pipenv for dependency management  and installed the sentry sdk with\r\n```pipenv install  'sentry-sdk[flask]==0.13.5'```\r\nI end up with the following problems when I build my docker image:\r\n```\r\nInstalling dependencies from Pipfile.lock (7b5e0c)\u2026\r\nIgnoring blinker: markers 'extra == \"flask\"' don't match your environment\r\nIgnoring configparser: markers 'python_version < \"3\"' don't match your environment\r\nIgnoring contextlib2: markers 'python_version < \"3\"' don't match your environment\r\nIgnoring enum34: markers 'python_version < \"3\"' don't match your environment\r\nIgnoring flask: markers 'extra == \"flask\"' don't match your environment\r\nIgnoring funcsigs: markers 'python_version < \"3.3\"' don't match your environment\r\nIgnoring functools32: markers 'python_version < \"3\"' don't match your environment\r\nIgnoring futures: markers 'python_version < \"3.2\"' don't match your environment\r\nIgnoring ipaddress: markers 'python_version < \"3\"' don't match your environment\r\nIgnoring mock: markers 'python_version < \"3.0\"' don't match your environment\r\nIgnoring pathlib2: markers 'python_version < \"3\"' don't match your environment\r\nIgnoring scandir: markers 'python_version < \"3.5\"' don't match your environment\r\nIgnoring typing: markers 'python_version < \"3.5\"' don't match your environment\r\n```\r\nAnyone know how I might be able to fix this?\r\n\r\n**Additional Details:**\r\n\r\n**Contents of Pipfile**\r\n```toml\r\n[[source]]\r\nurl = \"https://pypi.org/simple\"\r\nverify_ssl = true\r\nname = \"pypi\"\r\n\r\n[dev-packages]\r\nbandit = \"*\"\r\nblack = \"==19.3b0\"\r\ncoverage = \"*\"\r\nfaker = \"*\"\r\n\"flake8\" = \"*\"\r\nisort = \"*\"\r\nmock = \"*\"\r\npre-commit = \"*\"\r\npytest = \"*\"\r\npytest-cov = \"*\"\r\npytest-flask = \"*\"\r\nradon = \"*\"\r\nvulture = \"*\"\r\npytest-mock = \"*\"\r\n\r\n[packages]\r\nalembic = \"*\"\r\n\"aniso8601\" = \"*\"\r\natomicwrites = \"*\"\r\nattrs = \"*\"\r\nbcrypt = \"*\"\r\ncachetools = \"*\"\r\ncertifi = \"*\"\r\ncffi = \"*\"\r\nchardet = \"*\"\r\nclick = \"*\"\r\ncryptography = \"*\"\r\nflasgger = \"*\"\r\nFlask = \"*\"\r\nFlask-Bcrypt = \"*\"\r\nFlask-JWT-Extended = \"*\"\r\nflask-marshmallow = \"*\"\r\nFlask-Migrate = \"*\"\r\nFlask-RESTful = \"*\"\r\nflask-restful-swagger = \"*\"\r\nFlask-SQLAlchemy = \"*\"\r\ngevent = \"*\"\r\ngoogle-api-core = \"*\"\r\ngoogle-auth = \"*\"\r\ngoogle-cloud-core = \"*\"\r\ngoogle-cloud-logging = \"*\"\r\ngoogleapis-common-protos = \"*\"\r\ngreenlet = \"*\"\r\ngrpcio = \"*\"\r\ngunicorn = \"*\"\r\nidna = \"*\"\r\nimportlib-metadata = \"*\"\r\nitsdangerous = \"*\"\r\n\"Jinja2\" = \"*\"\r\nMako = \"*\"\r\nMarkupSafe = \"*\"\r\nmarshmallow = \"*\"\r\nmarshmallow-sqlalchemy = \"*\"\r\nmore-itertools = \"*\"\r\npluggy = \"*\"\r\nprotobuf = \"*\"\r\n\"psycopg2\" = \"*\"\r\npy = \"*\"\r\n\"pyasn1\" = \"*\"\r\n\"pyasn1-modules\" = \"*\"\r\npycparser = \"*\"\r\nPyJWT = \"*\"\r\npyparsing = \"*\"\r\npython-dateutil = \"*\"\r\npython-dotenv = \"*\"\r\npython-editor = \"*\"\r\npytz = \"*\"\r\nrequests = \"*\"\r\nrsa = \"*\"\r\nsendgrid = \"*\"\r\nsix = \"*\"\r\nSQLAlchemy = \"*\"\r\nSQLAlchemy-Utils = \"*\"\r\n\"urllib3\" = \"*\"\r\nwcwidth = \"*\"\r\nWerkzeug = \"*\"\r\nzipp = \"*\"\r\napispec = \"*\"\r\ngoogle-cloud-pubsub = \"*\"\r\npytest-mock = \"*\"\r\nsentry-sdk = {version = \"==0.13.5\", extras = [\"flask\"]}\r\n\r\n[requires]\r\npython_version = \"3.7\"\r\n\r\n[pipenv]\r\nallow_prereleases = true\r\n\r\n```\r\n\r\n\r\n**Contents of `Pipfile.lock`**\r\n\r\n```json\r\n{\r\n    \"_meta\": {\r\n        \"hash\": {\r\n            \"sha256\": \"8fe6fb84fb3bc61ad8de730d781598b0124556b9ead2093263c4d88c907b5e0c\"\r\n        },\r\n        \"pipfile-spec\": 6,\r\n        \"requires\": {\r\n            \"python_version\": \"3.7\"\r\n        },\r\n        \"sources\": [\r\n            {\r\n                \"name\": \"pypi\",\r\n                \"url\": \"https://pypi.org/simple\",\r\n                \"verify_ssl\": true\r\n            }\r\n        ]\r\n    },\r\n    \"default\": {\r\n        \"alembic\": {\r\n            \"hashes\": [\r\n                \"sha256:49277bb7242192bbb9eac58fed4fe02ec6c3a2a4b4345d2171197459266482b2\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.3.1\"\r\n        },\r\n        \"aniso8601\": {\r\n            \"hashes\": [\r\n                \"sha256:529dcb1f5f26ee0df6c0a1ee84b7b27197c3c50fc3a6321d66c544689237d072\",\r\n                \"sha256:c033f63d028b9a58e3ab0c2c7d0532ab4bfa7452bfc788fbfe3ddabd327b181a\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==8.0.0\"\r\n        },\r\n        \"apispec\": {\r\n            \"hashes\": [\r\n                \"sha256:cf8e1f3b56949710f8cf23797b7f40215e9dae8bac583789a3f2c13dc56349fa\",\r\n                \"sha256:fe5cf5fc89b1c4a73acd5af3a10ede02b31ec116f215ed02271cb905d3172367\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==3.1.0\"\r\n        },\r\n        \"atomicwrites\": {\r\n            \"hashes\": [\r\n                \"sha256:03472c30eb2c5d1ba9227e4c2ca66ab8287fbfbbda3888aa93dc2e28fc6811b4\",\r\n                \"sha256:75a9445bac02d8d058d5e1fe689654ba5a6556a1dfd8ce6ec55a0ed79866cfa6\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.3.0\"\r\n        },\r\n        \"attrs\": {\r\n            \"hashes\": [\r\n                \"sha256:08a96c641c3a74e44eb59afb61a24f2cb9f4d7188748e76ba4bb5edfa3cb7d1c\",\r\n                \"sha256:f7b7ce16570fe9965acd6d30101a28f62fb4a7f9e926b3bbc9b61f8b04247e72\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==19.3.0\"\r\n        },\r\n        \"bcrypt\": {\r\n            \"hashes\": [\r\n                \"sha256:0258f143f3de96b7c14f762c770f5fc56ccd72f8a1857a451c1cd9a655d9ac89\",\r\n                \"sha256:0b0069c752ec14172c5f78208f1863d7ad6755a6fae6fe76ec2c80d13be41e42\",\r\n                \"sha256:19a4b72a6ae5bb467fea018b825f0a7d917789bcfe893e53f15c92805d187294\",\r\n                \"sha256:5432dd7b34107ae8ed6c10a71b4397f1c853bd39a4d6ffa7e35f40584cffd161\",\r\n                \"sha256:6305557019906466fc42dbc53b46da004e72fd7a551c044a827e572c82191752\",\r\n                \"sha256:69361315039878c0680be456640f8705d76cb4a3a3fe1e057e0f261b74be4b31\",\r\n                \"sha256:6fe49a60b25b584e2f4ef175b29d3a83ba63b3a4df1b4c0605b826668d1b6be5\",\r\n                \"sha256:74a015102e877d0ccd02cdeaa18b32aa7273746914a6c5d0456dd442cb65b99c\",\r\n                \"sha256:763669a367869786bb4c8fcf731f4175775a5b43f070f50f46f0b59da45375d0\",\r\n                \"sha256:8b10acde4e1919d6015e1df86d4c217d3b5b01bb7744c36113ea43d529e1c3de\",\r\n                \"sha256:9fe92406c857409b70a38729dbdf6578caf9228de0aef5bc44f859ffe971a39e\",\r\n                \"sha256:a190f2a5dbbdbff4b74e3103cef44344bc30e61255beb27310e2aec407766052\",\r\n                \"sha256:a595c12c618119255c90deb4b046e1ca3bcfad64667c43d1166f2b04bc72db09\",\r\n                \"sha256:c9457fa5c121e94a58d6505cadca8bed1c64444b83b3204928a866ca2e599105\",\r\n                \"sha256:cb93f6b2ab0f6853550b74e051d297c27a638719753eb9ff66d1e4072be67133\",\r\n                \"sha256:ce4e4f0deb51d38b1611a27f330426154f2980e66582dc5f438aad38b5f24fc1\",\r\n                \"sha256:d7bdc26475679dd073ba0ed2766445bb5b20ca4793ca0db32b399dccc6bc84b7\",\r\n                \"sha256:ff032765bb8716d9387fd5376d987a937254b0619eff0972779515b5c98820bc\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==3.1.7\"\r\n        },\r\n        \"blinker\": {\r\n            \"hashes\": [\r\n                \"sha256:471aee25f3992bd325afa3772f1063dbdbbca947a041b8b89466dc00d606f8b6\"\r\n            ],\r\n            \"markers\": \"extra == 'flask'\",\r\n            \"version\": \"==1.4\"\r\n        },\r\n        \"cachetools\": {\r\n            \"hashes\": [\r\n                \"sha256:428266a1c0d36dc5aca63a2d7c5942e88c2c898d72139fca0e97fdd2380517ae\",\r\n                \"sha256:8ea2d3ce97850f31e4a08b0e2b5e6c34997d7216a9d2c98e0f3978630d4da69a\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==3.1.1\"\r\n        },\r\n        \"certifi\": {\r\n            \"hashes\": [\r\n                \"sha256:017c25db2a153ce562900032d5bc68e9f191e44e9a0f762f373977de9df1fbb3\",\r\n                \"sha256:25b64c7da4cd7479594d035c08c2d809eb4aab3a26e5a990ea98cc450c320f1f\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2019.11.28\"\r\n        },\r\n        \"cffi\": {\r\n            \"hashes\": [\r\n                \"sha256:0b49274afc941c626b605fb59b59c3485c17dc776dc3cc7cc14aca74cc19cc42\",\r\n                \"sha256:0e3ea92942cb1168e38c05c1d56b0527ce31f1a370f6117f1d490b8dcd6b3a04\",\r\n                \"sha256:135f69aecbf4517d5b3d6429207b2dff49c876be724ac0c8bf8e1ea99df3d7e5\",\r\n                \"sha256:19db0cdd6e516f13329cba4903368bff9bb5a9331d3410b1b448daaadc495e54\",\r\n                \"sha256:2781e9ad0e9d47173c0093321bb5435a9dfae0ed6a762aabafa13108f5f7b2ba\",\r\n                \"sha256:291f7c42e21d72144bb1c1b2e825ec60f46d0a7468f5346841860454c7aa8f57\",\r\n                \"sha256:2c5e309ec482556397cb21ede0350c5e82f0eb2621de04b2633588d118da4396\",\r\n                \"sha256:2e9c80a8c3344a92cb04661115898a9129c074f7ab82011ef4b612f645939f12\",\r\n                \"sha256:32a262e2b90ffcfdd97c7a5e24a6012a43c61f1f5a57789ad80af1d26c6acd97\",\r\n                \"sha256:3c9fff570f13480b201e9ab69453108f6d98244a7f495e91b6c654a47486ba43\",\r\n                \"sha256:415bdc7ca8c1c634a6d7163d43fb0ea885a07e9618a64bda407e04b04333b7db\",\r\n                \"sha256:42194f54c11abc8583417a7cf4eaff544ce0de8187abaf5d29029c91b1725ad3\",\r\n                \"sha256:4424e42199e86b21fc4db83bd76909a6fc2a2aefb352cb5414833c030f6ed71b\",\r\n                \"sha256:4a43c91840bda5f55249413037b7a9b79c90b1184ed504883b72c4df70778579\",\r\n                \"sha256:599a1e8ff057ac530c9ad1778293c665cb81a791421f46922d80a86473c13346\",\r\n                \"sha256:5c4fae4e9cdd18c82ba3a134be256e98dc0596af1e7285a3d2602c97dcfa5159\",\r\n                \"sha256:5ecfa867dea6fabe2a58f03ac9186ea64da1386af2159196da51c4904e11d652\",\r\n                \"sha256:62f2578358d3a92e4ab2d830cd1c2049c9c0d0e6d3c58322993cc341bdeac22e\",\r\n                \"sha256:6471a82d5abea994e38d2c2abc77164b4f7fbaaf80261cb98394d5793f11b12a\",\r\n                \"sha256:6d4f18483d040e18546108eb13b1dfa1000a089bcf8529e30346116ea6240506\",\r\n                \"sha256:71a608532ab3bd26223c8d841dde43f3516aa5d2bf37b50ac410bb5e99053e8f\",\r\n                \"sha256:74a1d8c85fb6ff0b30fbfa8ad0ac23cd601a138f7509dc617ebc65ef305bb98d\",\r\n                \"sha256:7b93a885bb13073afb0aa73ad82059a4c41f4b7d8eb8368980448b52d4c7dc2c\",\r\n                \"sha256:7d4751da932caaec419d514eaa4215eaf14b612cff66398dd51129ac22680b20\",\r\n                \"sha256:7f627141a26b551bdebbc4855c1157feeef18241b4b8366ed22a5c7d672ef858\",\r\n                \"sha256:8169cf44dd8f9071b2b9248c35fc35e8677451c52f795daa2bb4643f32a540bc\",\r\n                \"sha256:aa00d66c0fab27373ae44ae26a66a9e43ff2a678bf63a9c7c1a9a4d61172827a\",\r\n                \"sha256:ccb032fda0873254380aa2bfad2582aedc2959186cce61e3a17abc1a55ff89c3\",\r\n                \"sha256:d754f39e0d1603b5b24a7f8484b22d2904fa551fe865fd0d4c3332f078d20d4e\",\r\n                \"sha256:d75c461e20e29afc0aee7172a0950157c704ff0dd51613506bd7d82b718e7410\",\r\n                \"sha256:dcd65317dd15bc0451f3e01c80da2216a31916bdcffd6221ca1202d96584aa25\",\r\n                \"sha256:e570d3ab32e2c2861c4ebe6ffcad6a8abf9347432a37608fe1fbd157b3f0036b\",\r\n                \"sha256:fd43a88e045cf992ed09fa724b5315b790525f2676883a6ea64e3263bae6549d\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.13.2\"\r\n        },\r\n        \"chardet\": {\r\n            \"hashes\": [\r\n                \"sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\",\r\n                \"sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==3.0.4\"\r\n        },\r\n        \"click\": {\r\n            \"hashes\": [\r\n                \"sha256:2335065e6395b9e67ca716de5f7526736bfa6ceead690adf616d925bdc622b13\",\r\n                \"sha256:5b94b49521f6456670fdb30cd82a4eca9412788a93fa6dd6df72c94d5a8ff2d7\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==7.0\"\r\n        },\r\n        \"cryptography\": {\r\n            \"hashes\": [\r\n                \"sha256:02079a6addc7b5140ba0825f542c0869ff4df9a69c360e339ecead5baefa843c\",\r\n                \"sha256:1df22371fbf2004c6f64e927668734070a8953362cd8370ddd336774d6743595\",\r\n                \"sha256:369d2346db5934345787451504853ad9d342d7f721ae82d098083e1f49a582ad\",\r\n                \"sha256:3cda1f0ed8747339bbdf71b9f38ca74c7b592f24f65cdb3ab3765e4b02871651\",\r\n                \"sha256:44ff04138935882fef7c686878e1c8fd80a723161ad6a98da31e14b7553170c2\",\r\n                \"sha256:4b1030728872c59687badcca1e225a9103440e467c17d6d1730ab3d2d64bfeff\",\r\n                \"sha256:58363dbd966afb4f89b3b11dfb8ff200058fbc3b947507675c19ceb46104b48d\",\r\n                \"sha256:6ec280fb24d27e3d97aa731e16207d58bd8ae94ef6eab97249a2afe4ba643d42\",\r\n                \"sha256:7270a6c29199adc1297776937a05b59720e8a782531f1f122f2eb8467f9aab4d\",\r\n                \"sha256:73fd30c57fa2d0a1d7a49c561c40c2f79c7d6c374cc7750e9ac7c99176f6428e\",\r\n                \"sha256:7f09806ed4fbea8f51585231ba742b58cbcfbfe823ea197d8c89a5e433c7e912\",\r\n                \"sha256:90df0cc93e1f8d2fba8365fb59a858f51a11a394d64dbf3ef844f783844cc793\",\r\n                \"sha256:971221ed40f058f5662a604bd1ae6e4521d84e6cad0b7b170564cc34169c8f13\",\r\n                \"sha256:a518c153a2b5ed6b8cc03f7ae79d5ffad7315ad4569b2d5333a13c38d64bd8d7\",\r\n                \"sha256:b0de590a8b0979649ebeef8bb9f54394d3a41f66c5584fff4220901739b6b2f0\",\r\n                \"sha256:b43f53f29816ba1db8525f006fa6f49292e9b029554b3eb56a189a70f2a40879\",\r\n                \"sha256:d31402aad60ed889c7e57934a03477b572a03af7794fa8fb1780f21ea8f6551f\",\r\n                \"sha256:de96157ec73458a7f14e3d26f17f8128c959084931e8997b9e655a39c8fde9f9\",\r\n                \"sha256:df6b4dca2e11865e6cfbfb708e800efb18370f5a46fd601d3755bc7f85b3a8a2\",\r\n                \"sha256:ecadccc7ba52193963c0475ac9f6fa28ac01e01349a2ca48509667ef41ffd2cf\",\r\n                \"sha256:fb81c17e0ebe3358486cd8cc3ad78adbae58af12fc2bf2bc0bb84e8090fa5ce8\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.8\"\r\n        },\r\n        \"flasgger\": {\r\n            \"hashes\": [\r\n                \"sha256:b0132458794972a5322dfa2b432c7d8e5f65e6829d350ae65cf80bcc14726fd9\",\r\n                \"sha256:e48591698ed8eda24c49b76027f4cdc94761950c96d507ddc274f83519623590\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.9.4.dev2\"\r\n        },\r\n        \"flask\": {\r\n            \"hashes\": [\r\n                \"sha256:13f9f196f330c7c2c5d7a5cf91af894110ca0215ac051b5844701f2bfd934d52\",\r\n                \"sha256:45eb5a6fd193d6cf7e0cf5d8a5b31f83d5faae0293695626f539a823e93b13f6\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"markers\": \"extra == 'flask'\",\r\n            \"version\": \"==1.1.1\"\r\n        },\r\n        \"flask-bcrypt\": {\r\n            \"hashes\": [\r\n                \"sha256:d71c8585b2ee1c62024392ebdbc447438564e2c8c02b4e57b56a4cafd8d13c5f\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.7.1\"\r\n        },\r\n        \"flask-jwt-extended\": {\r\n            \"hashes\": [\r\n                \"sha256:0aa8ee6fa7eb3be9314e39dd199ac8e19389a95371f9d54e155c7aa635e319dd\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==3.24.1\"\r\n        },\r\n        \"flask-marshmallow\": {\r\n            \"hashes\": [\r\n                \"sha256:4f507f883838b397638a3a36c7d36ee146b255a49db952f5d9de3f6f4522e8a8\",\r\n                \"sha256:69e99e3a123393894884a032ae2d11e6bdf4519a505819b66cec7eda32057741\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.10.1\"\r\n        },\r\n        \"flask-migrate\": {\r\n            \"hashes\": [\r\n                \"sha256:6fb038be63d4c60727d5dfa5f581a6189af5b4e2925bc378697b4f0a40cfb4e1\",\r\n                \"sha256:a96ff1875a49a40bd3e8ac04fce73fdb0870b9211e6168608cbafa4eb839d502\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.5.2\"\r\n        },\r\n        \"flask-restful\": {\r\n            \"hashes\": [\r\n                \"sha256:ecd620c5cc29f663627f99e04f17d1f16d095c83dc1d618426e2ad68b03092f8\",\r\n                \"sha256:f8240ec12349afe8df1db168ea7c336c4e5b0271a36982bff7394f93275f2ca9\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.3.7\"\r\n        },\r\n        \"flask-restful-swagger\": {\r\n            \"hashes\": [\r\n                \"sha256:78d39e6c03549c02d1cd1e1b1ead32124396e3bafd9af2adbdfefeb25072c6dc\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.20.1\"\r\n        },\r\n        \"flask-sqlalchemy\": {\r\n            \"hashes\": [\r\n                \"sha256:0078d8663330dc05a74bc72b3b6ddc441b9a744e2f56fe60af1a5bfc81334327\",\r\n                \"sha256:6974785d913666587949f7c2946f7001e4fa2cb2d19f4e69ead02e4b8f50b33d\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.4.1\"\r\n        },\r\n        \"gevent\": {\r\n            \"hashes\": [\r\n                \"sha256:1900f284d5a0486f71f8cb87bc4cda9c6117121fcbf5a4075d2a5380dccb47f6\",\r\n                \"sha256:206c6ddba2391af77cac8f1512556631f0da7bba3f63d2dd90e82a76d6be7922\",\r\n                \"sha256:2658cf03ff58e5cf82995687a45fd4668ed1e3c9fa498c804ad033b87307d9b1\",\r\n                \"sha256:45f7c22d68a1025ea027f0788dac8c481d0929de409ec9f81299bf48da0fcee7\",\r\n                \"sha256:4bb0a53c56041727c7c3e08f2c40af3b5ac6668b8a7a1f34b52488492a6cbd2f\",\r\n                \"sha256:7024bc3bcd2dc53c84a9c7f8b9dc9d3e970b13e80597b4c8cca32aed4a015c23\",\r\n                \"sha256:8d07e77ae14f9b29eb6bf5414b41d72ffd19b6b2cf88a2fb22d8b9eef847c2d7\",\r\n                \"sha256:95d83077d78d6232a59b40310a85bd786257e379c129f95aed2ac4676f57d022\",\r\n                \"sha256:9c6de6aa9365929d6747b6bf376aaf880553b1ca08c61fc8eef4ed4e31a7e34a\",\r\n                \"sha256:a250e1dc58fb2947491a53f039e48d4f36d921e534f751fe3917783b9d764c02\",\r\n                \"sha256:b45eb451132963b33bb05d84c7549c763f94eea6425cf43b7c22038cc03c245d\",\r\n                \"sha256:c515c4581aee2553f66ae6336b54372f4229a159b3a76d1ccb4e53147569f38f\",\r\n                \"sha256:c9e2520985e2cfde4c6858a541c5a731152c62c333ed843fb070691f819eb2d0\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.5a2\"\r\n        },\r\n        \"google-api-core\": {\r\n            \"extras\": [\r\n                \"grpc\"\r\n            ],\r\n            \"hashes\": [\r\n                \"sha256:b95895a9398026bc0500cf9b4a3f82c3f72c3f9150b26ff53af40c74e91c264a\",\r\n                \"sha256:df8adc4b97f5ab4328a0e745bee77877cf4a7d4601cb1cd5959d2bbf8fba57aa\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.14.3\"\r\n        },\r\n        \"google-auth\": {\r\n            \"hashes\": [\r\n                \"sha256:17c5b7bf7b9f4c188beba5590d170c1546f31f99c1919621422a6a0011323d97\",\r\n                \"sha256:44fd26d86e9a04fbb21064a0295288044cb2b920d305501b5f8d546452f246bd\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.8.1\"\r\n        },\r\n        \"google-cloud-core\": {\r\n            \"hashes\": [\r\n                \"sha256:49036087c1170c3fad026e45189f17092b8c584a9accb2d73d1854f494e223ae\",\r\n                \"sha256:63c93d989d92a782efe8d9606ea2ad37673361ab0c3e7f965a5640d30ff14f20\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.1.0\"\r\n        },\r\n        \"google-cloud-logging\": {\r\n            \"hashes\": [\r\n                \"sha256:3c12d4421df8e4e77b5e029b1341ae80d180cfda0f9cbef417f36438630cc35f\",\r\n                \"sha256:d094abf3a98462235d16f171691a9325155ae9357f683b5367dfce663162a1f6\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.14.0\"\r\n        },\r\n        \"google-cloud-pubsub\": {\r\n            \"hashes\": [\r\n                \"sha256:bdead87e40eba93043c6704578e946cf2794366312f936da0a2b3754234dde29\",\r\n                \"sha256:dc084349ff3fb6a58968b278e743ef9ce99ed1a72cb80576ed1d88f7fa62f808\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.1.0\"\r\n        },\r\n        \"googleapis-common-protos\": {\r\n            \"extras\": [\r\n                \"grpc\"\r\n            ],\r\n            \"hashes\": [\r\n                \"sha256:e61b8ed5e36b976b487c6e7b15f31bb10c7a0ca7bd5c0e837f4afab64b53a0c6\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.6.0\"\r\n        },\r\n        \"greenlet\": {\r\n            \"hashes\": [\r\n                \"sha256:000546ad01e6389e98626c1367be58efa613fa82a1be98b0c6fc24b563acc6d0\",\r\n                \"sha256:0d48200bc50cbf498716712129eef819b1729339e34c3ae71656964dac907c28\",\r\n                \"sha256:23d12eacffa9d0f290c0fe0c4e81ba6d5f3a5b7ac3c30a5eaf0126bf4deda5c8\",\r\n                \"sha256:37c9ba82bd82eb6a23c2e5acc03055c0e45697253b2393c9a50cef76a3985304\",\r\n                \"sha256:51503524dd6f152ab4ad1fbd168fc6c30b5795e8c70be4410a64940b3abb55c0\",\r\n                \"sha256:8041e2de00e745c0e05a502d6e6db310db7faa7c979b3a5877123548a4c0b214\",\r\n                \"sha256:81fcd96a275209ef117e9ec91f75c731fa18dcfd9ffaa1c0adbdaa3616a86043\",\r\n                \"sha256:853da4f9563d982e4121fed8c92eea1a4594a2299037b3034c3c898cb8e933d6\",\r\n                \"sha256:8b4572c334593d449113f9dc8d19b93b7b271bdbe90ba7509eb178923327b625\",\r\n                \"sha256:9416443e219356e3c31f1f918a91badf2e37acf297e2fa13d24d1cc2380f8fbc\",\r\n                \"sha256:9854f612e1b59ec66804931df5add3b2d5ef0067748ea29dc60f0efdcda9a638\",\r\n                \"sha256:99a26afdb82ea83a265137a398f570402aa1f2b5dfb4ac3300c026931817b163\",\r\n                \"sha256:a19bf883b3384957e4a4a13e6bd1ae3d85ae87f4beb5957e35b0be287f12f4e4\",\r\n                \"sha256:a9f145660588187ff835c55a7d2ddf6abfc570c2651c276d3d4be8a2766db490\",\r\n                \"sha256:ac57fcdcfb0b73bb3203b58a14501abb7e5ff9ea5e2edfa06bb03035f0cff248\",\r\n                \"sha256:bcb530089ff24f6458a81ac3fa699e8c00194208a724b644ecc68422e1111939\",\r\n                \"sha256:beeabe25c3b704f7d56b573f7d2ff88fc99f0138e43480cecdfcaa3b87fe4f87\",\r\n                \"sha256:d634a7ea1fc3380ff96f9e44d8d22f38418c1c381d5fac680b272d7d90883720\",\r\n                \"sha256:d97b0661e1aead761f0ded3b769044bb00ed5d33e1ec865e891a8b128bf7c656\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.4.15\"\r\n        },\r\n        \"grpc-google-iam-v1\": {\r\n            \"hashes\": [\r\n                \"sha256:0bfb5b56f648f457021a91c0df0db4934b6e0c300bd0f2de2333383fe958aa72\"\r\n            ],\r\n            \"version\": \"==0.12.3\"\r\n        },\r\n        \"grpcio\": {\r\n            \"hashes\": [\r\n                \"sha256:053977d5eb3e62fb7c7d0a710cc81185ab7878bf02a6e4dfffab328033653617\",\r\n                \"sha256:0d2df8066c122a67b81693b92e9cc81c8dd0be74503c76cedb38774b23d9b3a7\",\r\n                \"sha256:0e770d837751826bef9199420dd87637c6163142e5babbcfec3165125047ebc5\",\r\n                \"sha256:0fd6363bec8b0ddf1cdc732e7378f47477c4b95c8f10885069f5ea8c46984faa\",\r\n                \"sha256:1d4ab4032926c541521b278012901f0f92204601765d8341eee497180211038d\",\r\n                \"sha256:1df9dcbdbe39729594c39f94fd6e848a5f5eec59358145e0f7fed744745afe79\",\r\n                \"sha256:2a6f5f14322354ef5cb7592d02f375d0f22c87648cea8772c28b686f566f5657\",\r\n                \"sha256:3e5ce29633eebd88a5b0b3cc3e4871535f0a324bd28eefa3e12f596794a3ffa3\",\r\n                \"sha256:4cabf813b2bd9df0e8b27845ecb50c213f802755e390ec29093951e3435d5f9d\",\r\n                \"sha256:5771e7bf4199f42b446a2411f1991ffc2cfac8be27a822234fbb7b32d6de5eba\",\r\n                \"sha256:5b7a659872d6ba7788bc99d5f370fd635fc10326a4090cdbc2425ad584004f00\",\r\n                \"sha256:5d0339a22e1eb4c0f6937adf048de6843cef7cf90f79d4c138dbbec86b3babc7\",\r\n                \"sha256:5d1031fff4f6506aee2ec66c55c2bd54f81f9ba6074aa2d4e6f6b8ce67478be3\",\r\n                \"sha256:5dcd16993146c98519aee490ef69aebc42d479d20e01742c6333f057a7a879d2\",\r\n                \"sha256:64b346c35eedb465a52866faa78918b4625d13faa733ffbebe3d0fd99d92ba63\",\r\n                \"sha256:6a0cf0f32d1560b90d75adfb5e5f2efad675d1c77a70f0ffa238993546f8a3b8\",\r\n                \"sha256:6d78ec15ce5e18ee4818e5616a6ee5b5c0c1e649622ae6a1ea17f818ecfe901b\",\r\n                \"sha256:774aace5a9b8f821a2396dd3be36c2c3b6741462c6125489ee3edb3f2d67dad1\",\r\n                \"sha256:83030f27df3a5b32ed93d3ee5534b66c39029a1b88b50468f6b2967d4c5cdba9\",\r\n                \"sha256:88211566670bb3a15c47bdae7a4677ea59d393a6dfed8b0dcfb86241bbf60b5f\",\r\n                \"sha256:8c96843e815844b04aca55e8ee1beef7c027ce2b334395e69a1a71d3667df548\",\r\n                \"sha256:8cf0b916cfad2c33a2afeab8111b13d78c17ef8e3b59367f2ce8a59302a1f87d\",\r\n                \"sha256:910c2b0b7c3f1ce4e9ae4da323c3d546100a3dd1a8022672c49e13d2918b8326\",\r\n                \"sha256:97d4c91c2541e00af78a01efd06c79ce787b4702e95da287af1ab1a96a41e758\",\r\n                \"sha256:989e83bb44478d0e4a7d30ec4f31359d55517ee801ced7ac8d4179a156ee26d2\",\r\n                \"sha256:a912bc1d51a6b8475ab26aa041c5e6d3103cbbd1cd66fba3294f4c3ba5accaba\",\r\n                \"sha256:aae62d51eff117e0a158cdca6b0e54e533e41d511140f7dc60e66967b16467a0\",\r\n                \"sha256:adfb2fe5194ebfbfc54cb2dafa8361d5d8f70fd70c1ecbf44ca67a65efed924d\",\r\n                \"sha256:b94384b52d437163d9b8152743980402b7f00d95cf2be89f25d9ec0a0dfaa013\",\r\n                \"sha256:bab1853c72e3215279d455b0e14aa250e7bac3ff344dc9c2640131951fa5d959\",\r\n                \"sha256:c4b3f7623a9c0ed5fa782b4241fc0baef782145326cf0797fcc47a0f05bc78e6\",\r\n                \"sha256:c6cdba2853aafd3f1ab4cfd6d34a5808444a7f0554960e06a2acaeecffa5bfec\",\r\n                \"sha256:c8e66f5c936d554e2e0deeebdfebec1e449c5010b8ccae3d0521a78aa092a2b3\",\r\n                \"sha256:ccccd37c75a9f5728687d32acb9aca488d8e4e5a1d02bacfde9205e45829b11b\",\r\n                \"sha256:d0e2fa3d51db5f2b1670ac31759db3ec48c520c9809e534c28a1cfd9145bfc6b\",\r\n                \"sha256:df413f10c40eb1bb4c0204d7b1f2baa18e33002f65789c8e026d729edd40d723\",\r\n                \"sha256:e2623b70cefb45c5216c3ee0839df1d36afe57db04d2dafea4811695d0019159\",\r\n                \"sha256:e2e3ad31b471a654c39e62e6cb0b89079f4b72084b563d52fbcaf3a93d57bf33\",\r\n                \"sha256:ee768fddf1684ad69fb5040c871ca3dd55b71253e7560bbf4f790b6c889668ca\",\r\n                \"sha256:ef0717a3e7c07edfa38a444355b8f0a40c05de9abcce1f4da4541689a94500ea\",\r\n                \"sha256:f0683c453ff157c8c487b84b4745d10b649842ea2d557baa10de8c6c78004620\",\r\n                \"sha256:fcf79998553ec51ab1d14e4233947b9c6be045be18821cea4d0d09342eb08275\",\r\n                \"sha256:ff4100ba4d18fe0093c943000935961f9ad896bd407b43fb8fd6713371e4aadf\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.26.0rc1\"\r\n        },\r\n        \"gunicorn\": {\r\n            \"hashes\": [\r\n                \"sha256:1904bb2b8a43658807108d59c3f3d56c2b6121a701161de0ddf9ad140073c626\",\r\n                \"sha256:cd4a810dd51bf497552cf3f863b575dabd73d6ad6a91075b65936b151cbf4f9c\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==20.0.4\"\r\n        },\r\n        \"idna\": {\r\n            \"hashes\": [\r\n                \"sha256:c357b3f628cf53ae2c4c05627ecc484553142ca23264e593d327bcde5e9c3407\",\r\n                \"sha256:ea8b7f6188e6fa117537c3df7da9fc686d485087abf6ac197f9c46432f7e4a3c\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.8\"\r\n        },\r\n        \"importlib-metadata\": {\r\n            \"hashes\": [\r\n                \"sha256:073a852570f92da5f744a3472af1b61e28e9f78ccf0c9117658dc32b15de7b45\",\r\n                \"sha256:d95141fbfa7ef2ec65cfd945e2af7e5a6ddbd7c8d9a25e66ff3be8e3daf9f60f\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.3.0\"\r\n        },\r\n        \"itsdangerous\": {\r\n            \"hashes\": [\r\n                \"sha256:321b033d07f2a4136d3ec762eac9f16a10ccd60f53c0c91af90217ace7ba1f19\",\r\n                \"sha256:b12271b2047cb23eeb98c8b5622e2e5c5e9abd9784a153e9d8ef9cb4dd09d749\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.1.0\"\r\n        },\r\n        \"jinja2\": {\r\n            \"hashes\": [\r\n                \"sha256:74320bb91f31270f9551d46522e33af46a80c3d619f4a4bf42b3164d30b5911f\",\r\n                \"sha256:9fe95f19286cfefaa917656583d020be14e7859c6b0252588391e47db34527de\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.10.3\"\r\n        },\r\n        \"jsonschema\": {\r\n            \"hashes\": [\r\n                \"sha256:4e5b3cf8216f577bee9ce139cbe72eca3ea4f292ec60928ff24758ce626cd163\",\r\n                \"sha256:c8a85b28d377cc7737e46e2d9f2b4f44ee3c0e1deac6bf46ddefc7187d30797a\"\r\n            ],\r\n            \"version\": \"==3.2.0\"\r\n        },\r\n        \"mako\": {\r\n            \"hashes\": [\r\n                \"sha256:a36919599a9b7dc5d86a7a8988f23a9a3a3d083070023bab23d64f7f1d1e0a4b\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.1.0\"\r\n        },\r\n        \"markupsafe\": {\r\n            \"hashes\": [\r\n                \"sha256:00bc623926325b26bb9605ae9eae8a215691f33cae5df11ca5424f06f2d1f473\",\r\n                \"sha256:09027a7803a62ca78792ad89403b1b7a73a01c8cb65909cd876f7fcebd79b161\",\r\n                \"sha256:09c4b7f37d6c648cb13f9230d847adf22f8171b1ccc4d5682398e77f40309235\",\r\n                \"sha256:1027c282dad077d0bae18be6794e6b6b8c91d58ed8a8d89a89d59693b9131db5\",\r\n                \"sha256:24982cc2533820871eba85ba648cd53d8623687ff11cbb805be4ff7b4c971aff\",\r\n                \"sha256:29872e92839765e546828bb7754a68c418d927cd064fd4708fab9fe9c8bb116b\",\r\n                \"sha256:43a55c2930bbc139570ac2452adf3d70cdbb3cfe5912c71cdce1c2c6bbd9c5d1\",\r\n                \"sha256:46c99d2de99945ec5cb54f23c8cd5689f6d7177305ebff350a58ce5f8de1669e\",\r\n                \"sha256:500d4957e52ddc3351cabf489e79c91c17f6e0899158447047588650b5e69183\",\r\n                \"sha256:535f6fc4d397c1563d08b88e485c3496cf5784e927af890fb3c3aac7f933ec66\",\r\n                \"sha256:62fe6c95e3ec8a7fad637b7f3d372c15ec1caa01ab47926cfdf7a75b40e0eac1\",\r\n                \"sha256:6dd73240d2af64df90aa7c4e7481e23825ea70af4b4922f8ede5b9e35f78a3b1\",\r\n                \"sha256:717ba8fe3ae9cc0006d7c451f0bb265ee07739daf76355d06366154ee68d221e\",\r\n                \"sha256:79855e1c5b8da654cf486b830bd42c06e8780cea587384cf6545b7d9ac013a0b\",\r\n                \"sha256:7c1699dfe0cf8ff607dbdcc1e9b9af1755371f92a68f706051cc8c37d447c905\",\r\n                \"sha256:88e5fcfb52ee7b911e8bb6d6aa2fd21fbecc674eadd44118a9cc3863f938e735\",\r\n                \"sha256:8defac2f2ccd6805ebf65f5eeb132adcf2ab57aa11fdf4c0dd5169a004710e7d\",\r\n                \"sha256:98c7086708b163d425c67c7a91bad6e466bb99d797aa64f965e9d25c12111a5e\",\r\n                \"sha256:9add70b36c5666a2ed02b43b335fe19002ee5235efd4b8a89bfcf9005bebac0d\",\r\n                \"sha256:9bf40443012702a1d2070043cb6291650a0841ece432556f784f004937f0f32c\",\r\n                \"sha256:ade5e387d2ad0d7ebf59146cc00c8044acbd863725f887353a10df825fc8ae21\",\r\n                \"sha256:b00c1de48212e4cc9603895652c5c410df699856a2853135b3967591e4beebc2\",\r\n                \"sha256:b1282f8c00509d99fef04d8ba936b156d419be841854fe901d8ae224c59f0be5\",\r\n                \"sha256:b2051432115498d3562c084a49bba65d97cf251f5a331c64a12ee7e04dacc51b\",\r\n                \"sha256:ba59edeaa2fc6114428f1637ffff42da1e311e29382d81b339c1817d37ec93c6\",\r\n                \"sha256:c8716a48d94b06bb3b2524c2b77e055fb313aeb4ea620c8dd03a105574ba704f\",\r\n                \"sha256:cd5df75523866410809ca100dc9681e301e3c27567cf498077e8551b6d20e42f\",\r\n                \"sha256:e249096428b3ae81b08327a63a485ad0878de3fb939049038579ac0ef61e17e7\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.1.1\"\r\n        },\r\n        \"marshmallow\": {\r\n            \"hashes\": [\r\n                \"sha256:0ba81b6da4ae69eb229b74b3c741ff13fe04fb899824377b1aff5aaa1a9fd46e\",\r\n                \"sha256:3e53dd9e9358977a3929e45cdbe4a671f9eff53a7d6a23f33ed3eab8c1890d8f\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==3.3.0\"\r\n        },\r\n        \"marshmallow-sqlalchemy\": {\r\n            \"hashes\": [\r\n                \"sha256:0d72beaf777f8b420c4dc94684252ae0e0a79556ccc4128129d2588f9ff72888\",\r\n                \"sha256:93fd8fad2b33d92a1ae58328eeb0f39ed174858d82f9e7084a174df7b41fd3a4\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.21.0\"\r\n        },\r\n        \"mistune\": {\r\n            \"hashes\": [\r\n                \"sha256:5c1e41f26d8d5fbbdc9ca5da0c8c7b8c0b988471fe93df3204418ab47e34d050\",\r\n                \"sha256:69b88119b4243f69fd8d0e6daf9cb3b15a10584d25b33dbacf4eccce3de76092\"\r\n            ],\r\n            \"version\": \"==2.0.0a1\"\r\n        },\r\n        \"more-itertools\": {\r\n            \"hashes\": [\r\n                \"sha256:b84b238cce0d9adad5ed87e745778d20a3f8487d0f0cb8b8a586816c7496458d\",\r\n                \"sha256:c833ef592a0324bcc6a60e48440da07645063c453880c9477ceb22490aec1564\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==8.0.2\"\r\n        },\r\n        \"packaging\": {\r\n            \"hashes\": [\r\n                \"sha256:28b924174df7a2fa32c1953825ff29c61e2f5e082343165438812f00d3a7fc47\",\r\n                \"sha256:d9551545c6d761f3def1677baf08ab2a3ca17c56879e70fecba2fc4dde4ed108\"\r\n            ],\r\n            \"version\": \"==19.2\"\r\n        },\r\n        \"pluggy\": {\r\n            \"hashes\": [\r\n                \"sha256:15b2acde666561e1298d71b523007ed7364de07029219b604cf808bfa1c765b0\",\r\n                \"sha256:966c145cd83c96502c3c3868f50408687b38434af77734af1e9ca461a4081d2d\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.13.1\"\r\n        },\r\n        \"protobuf\": {\r\n            \"hashes\": [\r\n                \"sha256:0265379852b9e1f76af6d3d3fe4b3c383a595cc937594bda8565cf69a96baabd\",\r\n                \"sha256:29bd1ed46b2536ad8959401a2f02d2d7b5a309f8e97518e4f92ca6c5ba74dbed\",\r\n                \"sha256:3175d45698edb9a07c1a78a1a4850e674ce8988f20596580158b1d0921d0f057\",\r\n                \"sha256:34a7270940f86da7a28be466ac541c89b6dbf144a6348b9cf7ac6f56b71006ce\",\r\n                \"sha256:38cbc830a4a5ba9956763b0f37090bfd14dd74e72762be6225de2ceac55f4d03\",\r\n                \"sha256:665194f5ad386511ac8d8a0bd57b9ab37b8dd2cd71969458777318e774b9cd46\",\r\n                \"sha256:839bad7d115c77cdff29b488fae6a3ab503ce9a4192bd4c42302a6ea8e5d0f33\",\r\n                \"sha256:934a9869a7f3b0d84eca460e386fba1f7ba2a0c1a120a2648bc41fadf50efd1c\",\r\n                \"sha256:aecdf12ef6dc7fd91713a6da93a86c2f2a8fe54840a3b1670853a2b7402e77c9\",\r\n                \"sha256:c4e90bc27c0691c76e09b5dc506133451e52caee1472b8b3c741b7c912ce43ef\",\r\n                \"sha256:c65d135ea2d85d40309e268106dab02d3bea723db2db21c23ecad4163ced210b\",\r\n                \"sha256:c98dea04a1ff41a70aff2489610f280004831798cb36a068013eed04c698903d\",\r\n                \"sha256:d9049aa194378a426f0b2c784e2054565bf6f754d20fcafdee7102a6250556e8\",\r\n                \"sha256:e028fee51c96de4e81924484c77111dfdea14010ecfc906ea5b252209b0c4de6\",\r\n                \"sha256:e84ad26fb50091b1ea676403c0dd2bd47663099454aa6d88000b1dafecab0941\",\r\n                \"sha256:e88a924b591b06d0191620e9c8aa75297b3111066bb09d49a24bae1054a10c13\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==3.11.1\"\r\n        },\r\n        \"psycopg2\": {\r\n            \"hashes\": [\r\n                \"sha256:4212ca404c4445dc5746c0d68db27d2cbfb87b523fe233dc84ecd24062e35677\",\r\n                \"sha256:47fc642bf6f427805daf52d6e52619fe0637648fe27017062d898f3bf891419d\",\r\n                \"sha256:72772181d9bad1fa349792a1e7384dde56742c14af2b9986013eb94a240f005b\",\r\n                \"sha256:8396be6e5ff844282d4d49b81631772f80dabae5658d432202faf101f5283b7c\",\r\n                \"sha256:893c11064b347b24ecdd277a094413e1954f8a4e8cdaf7ffbe7ca3db87c103f0\",\r\n                \"sha256:92a07dfd4d7c325dd177548c4134052d4842222833576c8391aab6f74038fc3f\",\r\n                \"sha256:965c4c93e33e6984d8031f74e51227bd755376a9df6993774fd5b6fb3288b1f4\",\r\n                \"sha256:9ab75e0b2820880ae24b7136c4d230383e07db014456a476d096591172569c38\",\r\n                \"sha256:b0845e3bdd4aa18dc2f9b6fb78fbd3d9d371ad167fd6d1b7ad01c0a6cdad4fc6\",\r\n                \"sha256:dca2d7203f0dfce8ea4b3efd668f8ea65cd2b35112638e488a4c12594015f67b\",\r\n                \"sha256:ed686e5926929887e2c7ae0a700e32c6129abb798b4ad2b846e933de21508151\",\r\n                \"sha256:ef6df7e14698e79c59c7ee7cf94cd62e5b869db369ed4b1b8f7b729ea825712a\",\r\n                \"sha256:f898e5cc0a662a9e12bde6f931263a1bbd350cfb18e1d5336a12927851825bb6\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.8.4\"\r\n        },\r\n        \"py\": {\r\n            \"hashes\": [\r\n                \"sha256:64f65755aee5b381cea27766a3a147c3f15b9b6b9ac88676de66ba2ae36793fa\",\r\n                \"sha256:dc639b046a6e2cff5bbe40194ad65936d6ba360b52b3c3fe1d08a82dd50b5e53\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.8.0\"\r\n        },\r\n        \"pyasn1\": {\r\n            \"hashes\": [\r\n                \"sha256:39c7e2ec30515947ff4e87fb6f456dfc6e84857d34be479c9d4a4ba4bf46aa5d\",\r\n                \"sha256:aef77c9fb94a3ac588e87841208bdec464471d9871bd5050a287cc9a475cd0ba\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.4.8\"\r\n        },\r\n        \"pyasn1-modules\": {\r\n            \"hashes\": [\r\n                \"sha256:0c35a52e00b672f832e5846826f1fb7507907f7d52fba6faa9e3c4cbe874fe4b\",\r\n                \"sha256:b6ada4f840fe51abf5a6bd545b45bf537bea62221fa0dde2e8a553ed9f06a4e3\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.2.7\"\r\n        },\r\n        \"pycparser\": {\r\n            \"hashes\": [\r\n                \"sha256:a988718abfad80b6b157acce7bf130a30876d27603738ac39f140993246b25b3\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.19\"\r\n        },\r\n        \"pyjwt\": {\r\n            \"hashes\": [\r\n                \"sha256:5c6eca3c2940464d106b99ba83b00c6add741c9becaec087fb7ccdefea71350e\",\r\n                \"sha256:8d59a976fb773f3e6a39c85636357c4f0e242707394cadadd9814f5cbaa20e96\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.7.1\"\r\n        },\r\n        \"pyparsing\": {\r\n            \"hashes\": [\r\n                \"sha256:20f995ecd72f2a1f4bf6b072b63b22e2eb457836601e76d6e5dfcd75436acc1f\",\r\n                \"sha256:4ca62001be367f01bd3e92ecbb79070272a9d4964dce6a48a82ff0b8bc7e683a\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.4.5\"\r\n        },\r\n        \"pyrsistent\": {\r\n            \"hashes\": [\r\n                \"sha256:f3b280d030afb652f79d67c5586157c5c1355c9a58dfc7940566e28d28f3df1b\"\r\n            ],\r\n            \"version\": \"==0.15.6\"\r\n        },\r\n        \"pytest\": {\r\n            \"hashes\": [\r\n                \"sha256:63344a2e3bce2e4d522fd62b4fdebb647c019f1f9e4ca075debbd13219db4418\",\r\n                \"sha256:f67403f33b2b1d25a6756184077394167fe5e2f9d8bdaab30707d19ccec35427\"\r\n            ],\r\n            \"version\": \"==5.3.1\"\r\n        },\r\n        \"pytest-mock\": {\r\n            \"hashes\": [\r\n                \"sha256:67e414b3caef7bff6fc6bd83b22b5bc39147e4493f483c2679bc9d4dc485a94d\",\r\n                \"sha256:e24a911ec96773022ebcc7030059b57cd3480b56d4f5d19b7c370ec635e6aed5\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.13.0\"\r\n        },\r\n        \"python-dateutil\": {\r\n            \"hashes\": [\r\n                \"sha256:73ebfe9dbf22e832286dafa60473e4cd239f8592f699aa5adaf10050e6e1823c\",\r\n                \"sha256:75bb3f31ea686f1197762692a9ee6a7550b59fc6ca3a1f4b5d7e32fb98e2da2a\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.8.1\"\r\n        },\r\n        \"python-dotenv\": {\r\n            \"hashes\": [\r\n                \"sha256:debd928b49dbc2bf68040566f55cdb3252458036464806f4094487244e2a4093\",\r\n                \"sha256:f157d71d5fec9d4bd5f51c82746b6344dffa680ee85217c123f4a0c8117c4544\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.10.3\"\r\n        },\r\n        \"python-editor\": {\r\n            \"hashes\": [\r\n                \"sha256:1bf6e860a8ad52a14c3ee1252d5dc25b2030618ed80c022598f00176adc8367d\",\r\n                \"sha256:51fda6bcc5ddbbb7063b2af7509e43bd84bfc32a4ff71349ec7847713882327b\",\r\n                \"sha256:5f98b069316ea1c2ed3f67e7f5df6c0d8f10b689964a4a811ff64f0106819ec8\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.0.4\"\r\n        },\r\n        \"python-http-client\": {\r\n            \"hashes\": [\r\n                \"sha256:01f58f1871612fdce6a4545df7c867a6d1457695652a7ca48d5c22e5bf57628d\",\r\n                \"sha256:c2776054245db376ea26c859b80e9280b1a470b96ed998d60d35951f89bbbe79\",\r\n                \"sha256:e455ae0dfd5819ac483f7fecf08ab8693048d9dc47a0a6fe0d4aebf86d9d1d17\"\r\n            ],\r\n            \"version\": \"==3.2.1\"\r\n        },\r\n        \"pytz\": {\r\n            \"hashes\": [\r\n                \"sha256:1c557d7d0e871de1f5ccd5833f60fb2550652da6be2693c1e02300743d21500d\",\r\n                \"sha256:b02c06db6cf09c12dd25137e563b31700d3b80fcc4ad23abb7a315f2789819be\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2019.3\"\r\n        },\r\n        \"pyyaml\": {\r\n            \"hashes\": [\r\n                \"sha256:0e7f69397d53155e55d10ff68fdfb2cf630a35e6daf65cf0bdeaf04f127c09dc\",\r\n                \"sha256:2e9f0b7c5914367b0916c3c104a024bb68f269a486b9d04a2e8ac6f6597b7803\",\r\n                \"sha256:35ace9b4147848cafac3db142795ee42deebe9d0dad885ce643928e88daebdcc\",\r\n                \"sha256:38a4f0d114101c58c0f3a88aeaa44d63efd588845c5a2df5290b73db8f246d15\",\r\n                \"sha256:483eb6a33b671408c8529106df3707270bfacb2447bf8ad856a4b4f57f6e3075\",\r\n                \"sha256:4b6be5edb9f6bb73680f5bf4ee08ff25416d1400fbd4535fe0069b2994da07cd\",\r\n                \"sha256:7f38e35c00e160db592091751d385cd7b3046d6d51f578b29943225178257b31\",\r\n                \"sha256:8100c896ecb361794d8bfdb9c11fce618c7cf83d624d73d5ab38aef3bc82d43f\",\r\n                \"sha256:c0ee8eca2c582d29c3c2ec6e2c4f703d1b7f1fb10bc72317355a746057e7346c\",\r\n                \"sha256:e4c015484ff0ff197564917b4b4246ca03f411b9bd7f16e02a2f586eb48b6d04\",\r\n                \"sha256:ebc4ed52dcc93eeebeae5cf5deb2ae4347b3a81c3fa12b0b8c976544829396a4\"\r\n            ],\r\n            \"version\": \"==5.2\"\r\n        },\r\n        \"requests\": {\r\n            \"hashes\": [\r\n                \"sha256:11e007a8a2aa0323f5a921e9e6a2d7e4e67d9877e85773fba9ba6419025cbeb4\",\r\n                \"sha256:9cf5292fcd0f598c671cfc1e0d7d1a7f13bb8085e9a590f48c010551dc6c4b31\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.22.0\"\r\n        },\r\n        \"rsa\": {\r\n            \"hashes\": [\r\n                \"sha256:14ba45700ff1ec9eeb206a2ce76b32814958a98e372006c8fb76ba820211be66\",\r\n                \"sha256:1a836406405730121ae9823e19c6e806c62bbad73f890574fff50efa4122c487\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==4.0\"\r\n        },\r\n        \"sendgrid\": {\r\n            \"hashes\": [\r\n                \"sha256:a9999878aad90e32d7b62464454adc70bcef40085c729355ea58717bb0ea0dbd\",\r\n                \"sha256:cb0b21a83a54bc99d9befda1ea7b4f15fe8db362a152458e58abc5ce23d6d828\",\r\n                \"sha256:f04fee009c750b47ab984f3c4a735facacc7fba902052d597f7e60b601e56bcc\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==6.1.0\"\r\n        },\r\n        \"sentry-sdk\": {\r\n            \"extras\": [\r\n                \"flask\"\r\n            ],\r\n            \"hashes\": [\r\n                \"sha256:05285942901d38c7ce2498aba50d8e87b361fc603281a5902dda98f3f8c5e145\",\r\n                \"sha256:c6b919623e488134a728f16326c6f0bcdab7e3f59e7f4c472a90eea4d6d8fe82\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.13.5\"\r\n        },\r\n        \"six\": {\r\n            \"hashes\": [\r\n                \"sha256:1f1b7d42e254082a9db6279deae68afb421ceba6158efa6131de7b3003ee93fd\",\r\n                \"sha256:30f610279e8b2578cab6db20741130331735c781b56053c59c4076da27f06b66\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.13.0\"\r\n        },\r\n        \"sqlalchemy\": {\r\n            \"hashes\": [\r\n                \"sha256:afa5541e9dea8ad0014251bc9d56171ca3d8b130c9627c6cb3681cff30be3f8a\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.3.11\"\r\n        },\r\n        \"sqlalchemy-utils\": {\r\n            \"hashes\": [\r\n                \"sha256:db030c8f00526bfb7a9c659bfaf75deaa7b0002e89e3f84784e24e09a43473f2\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.36.0\"\r\n        },\r\n        \"urllib3\": {\r\n            \"hashes\": [\r\n                \"sha256:a8a318824cc77d1fd4b2bec2ded92646630d7fe8619497b142c84a9e6f5a7293\",\r\n                \"sha256:f3c5fd51747d450d4dcf6f923c81f78f811aab8205fda64b0aba34a4e48b0745\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.25.7\"\r\n        },\r\n        \"wcwidth\": {\r\n            \"hashes\": [\r\n                \"sha256:3df37372226d6e63e1b1e1eda15c594bca98a22d33a23832a90998faa96bc65e\",\r\n                \"sha256:f4ebe71925af7b40a864553f761ed559b43544f8f71746c2d756c7fe788ade7c\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.1.7\"\r\n        },\r\n        \"werkzeug\": {\r\n            \"hashes\": [\r\n                \"sha256:7280924747b5733b246fe23972186c6b348f9ae29724135a6dfc1e53cea433e7\",\r\n                \"sha256:e5f4a1f98b52b18a93da705a7458e55afb26f32bff83ff5d19189f92462d65c4\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.16.0\"\r\n        },\r\n        \"zipp\": {\r\n            \"hashes\": [\r\n                \"sha256:3718b1cbcd963c7d4c5511a8240812904164b7f381b647143a89d3b98f9bcd8e\",\r\n                \"sha256:f06903e9f1f43b12d371004b4ac7b06ab39a44adc747266928ae6debfa7b3335\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.6.0\"\r\n        }\r\n    },\r\n    \"develop\": {\r\n        \"appdirs\": {\r\n            \"hashes\": [\r\n                \"sha256:9e5896d1372858f8dd3344faf4e5014d21849c756c8d5701f78f8a103b372d92\",\r\n                \"sha256:d8b24664561d0d34ddfaec54636d502d7cea6e29c3eaf68f3df6180863e2166e\"\r\n            ],\r\n            \"version\": \"==1.4.3\"\r\n        },\r\n        \"aspy.yaml\": {\r\n            \"hashes\": [\r\n                \"sha256:463372c043f70160a9ec950c3f1e4c3a82db5fca01d334b6bc89c7164d744bdc\",\r\n                \"sha256:e7c742382eff2caed61f87a39d13f99109088e5e93f04d76eb8d4b28aa143f45\"\r\n            ],\r\n            \"version\": \"==1.3.0\"\r\n        },\r\n        \"attrs\": {\r\n            \"hashes\": [\r\n                \"sha256:08a96c641c3a74e44eb59afb61a24f2cb9f4d7188748e76ba4bb5edfa3cb7d1c\",\r\n                \"sha256:f7b7ce16570fe9965acd6d30101a28f62fb4a7f9e926b3bbc9b61f8b04247e72\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==19.3.0\"\r\n        },\r\n        \"bandit\": {\r\n            \"hashes\": [\r\n                \"sha256:336620e220cf2d3115877685e264477ff9d9abaeb0afe3dc7264f55fa17a3952\",\r\n                \"sha256:41e75315853507aa145d62a78a2a6c5e3240fe14ee7c601459d0df9418196065\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.6.2\"\r\n        },\r\n        \"black\": {\r\n            \"hashes\": [\r\n                \"sha256:09a9dcb7c46ed496a9850b76e4e825d6049ecd38b611f1224857a79bd985a8cf\",\r\n                \"sha256:68950ffd4d9169716bcb8719a56c07a2f4485354fec061cdd5910aa07369731c\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==19.3b0\"\r\n        },\r\n        \"cfgv\": {\r\n            \"hashes\": [\r\n                \"sha256:edb387943b665bf9c434f717bf630fa78aecd53d5900d2e05da6ad6048553144\",\r\n                \"sha256:fbd93c9ab0a523bf7daec408f3be2ed99a980e20b2d19b50fc184ca6b820d289\"\r\n            ],\r\n            \"version\": \"==2.0.1\"\r\n        },\r\n        \"click\": {\r\n            \"hashes\": [\r\n                \"sha256:2335065e6395b9e67ca716de5f7526736bfa6ceead690adf616d925bdc622b13\",\r\n                \"sha256:5b94b49521f6456670fdb30cd82a4eca9412788a93fa6dd6df72c94d5a8ff2d7\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==7.0\"\r\n        },\r\n        \"colorama\": {\r\n            \"hashes\": [\r\n                \"sha256:7d73d2a99753107a36ac6b455ee49046802e59d9d076ef8e47b61499fa29afff\",\r\n                \"sha256:e96da0d330793e2cb9485e9ddfd918d456036c7149416295932478192f4436a1\"\r\n            ],\r\n            \"version\": \"==0.4.3\"\r\n        },\r\n        \"coverage\": {\r\n            \"hashes\": [\r\n                \"sha256:018e74df50a58fd2aaa7efeb301d1599d8fd3cc5c92388506e45a2bd0154c003\",\r\n                \"sha256:0e08415f35cc57b6eb93fb31ec48a2a169ab838e12ac22106cf9baee4938e46d\",\r\n                \"sha256:1f9c1d9692339a7ec5cf3ba4475fb648675f438db3413b3d98e2c9ed30ac956c\",\r\n                \"sha256:2643ec874d3aa30a65a36e42042424ce08f80a948e1c942d3d787489ae318a64\",\r\n                \"sha256:28a19392a6c4616a76e059a03118c8cca28af46d9e72032590ce329e6b30ac40\",\r\n                \"sha256:32c6be8ba90aa885a4900a0187de44f51730c0660c45de3b943c40f1547d47c2\",\r\n                \"sha256:4a8b839c3a5579502ffecd4519533d406ad2bec1488724cee4b2c79dd6cbea79\",\r\n                \"sha256:5061a8c4bba83b7613077d6cfa8e81381c80f134dc7f02853c3235b38f76b8a6\",\r\n                \"sha256:54770fe39bb4718b5a07665e1f4c676382d6927299ab736149618f0d37d72e85\",\r\n                \"sha256:5a237fa332721721545e88fbed42e79acbe9c77be8310c167ec5449df44dac7c\",\r\n                \"sha256:607ed848b1373b161629d0c8228d90dd47ecb342f1f800dc41ebd0bce2432e24\",\r\n                \"sha256:65929e8d15999450d09117114ee185948bc77637e868daff5f5ab47219e1e7b6\",\r\n                \"sha256:67a0f5c50503a6226e28fb7ee3c3aa1a104681460d5123eeb80e6afb65ba46a5\",\r\n                \"sha256:6a70362452ea9c09efe1a7faa365f6603f4a0ef54306a6e5a46e6e32913536fc\",\r\n                \"sha256:6cf4502b0087f06906059a718e02b231a9f611ae34794a955baa2e443d5064ad\",\r\n                \"sha256:73f596fcd93d76579b4aefa53b7cf5df90d953a8fd94ebfc9b36d0ba47db4236\",\r\n                \"sha256:77c90b0a221e6355c771f1b9a6ed45c384f9dff00836823a732f5fe4224cb43a\",\r\n                \"sha256:8524e47b78fc7eea96a25717e779c5e6657536515dd57dfd1110aff34dc747b6\",\r\n                \"sha256:85b8db2e8c7e9bdf44e4b5859be2cbeaf73e54cf7cecd6c6705f010110581840\",\r\n                \"sha256:90389fea98570dc1f155ceae40972fcf798954467c69d810e385b170c34205cd\",\r\n                \"sha256:9e48182563c7861c47593a4b931a6d57e4e499027913e5fdc61efc0d368e804a\",\r\n                \"sha256:a5a5f3a9167a5316d675932e455925e136b1e33d15ce48692b94af746736260e\",\r\n                \"sha256:a7f3be4952f25a0cb8c275cdf064c3ba1765e370f337b015e84a00bb6244c86b\",\r\n                \"sha256:b2de4918d6d4aea7fe2b6ef778190f60ff4355248045d7b1fbb35922e0ceb39e\",\r\n                \"sha256:b72f1b6f27cf67b74370cc9df6b7f47546669861aad660587a7c6f2a01728840\",\r\n                \"sha256:b9b8189f6f8c4a2a09142d95a11f91dff2cac30c9c0b5ab61e3e0a785e960b94\",\r\n                \"sha256:bd31b194b42e0de4c29fd2c56ad0c493639bcb792c48b694b18568f65f0c2c6d\",\r\n                \"sha256:be732dcc0e9ca31a15ab5ba116ed7af9b5a046d035a00555ad593f4ddfeb7a00\",\r\n                \"sha256:bf4131b04dc2bf35e091b2c759d9e741876a235427c001c6d20147cf29797691\",\r\n                \"sha256:d3021b26f86118c447afccbd53b443dc25b4848f9ae49ffb4b9588cb5110d360\",\r\n                \"sha256:d500eb1db73cd5cfe28755c790fcb4e3c653b70d30d0ddf79fde3cc603d3789f\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==5.0b2\"\r\n        },\r\n        \"entrypoints\": {\r\n            \"hashes\": [\r\n                \"sha256:589f874b313739ad35be6e0cd7efde2a4e9b6fea91edcc34e58ecbb8dbe56d19\",\r\n                \"sha256:c70dd71abe5a8c85e55e12c19bd91ccfeec11a6e99044204511f9ed547d48451\"\r\n            ],\r\n            \"version\": \"==0.3\"\r\n        },\r\n        \"faker\": {\r\n            \"hashes\": [\r\n                \"sha256:202ad3b2ec16ae7c51c02904fb838831f8d2899e61bf18db1e91a5a582feab11\",\r\n                \"sha256:92c84a10bec81217d9cb554ee12b3838c8986ce0b5d45f72f769da22e4bb5432\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==3.0.0\"\r\n        },\r\n        \"flake8\": {\r\n            \"hashes\": [\r\n                \"sha256:45681a117ecc81e870cbf1262835ae4af5e7a8b08e40b944a8a6e6b895914cfb\",\r\n                \"sha256:49356e766643ad15072a789a20915d3c91dc89fd313ccd71802303fd67e4deca\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==3.7.9\"\r\n        },\r\n        \"flake8-polyfill\": {\r\n            \"hashes\": [\r\n                \"sha256:12be6a34ee3ab795b19ca73505e7b55826d5f6ad7230d31b18e106400169b9e9\",\r\n                \"sha256:e44b087597f6da52ec6393a709e7108b2905317d0c0b744cdca6208e670d8eda\"\r\n            ],\r\n            \"version\": \"==1.0.2\"\r\n        },\r\n        \"flask\": {\r\n            \"hashes\": [\r\n                \"sha256:13f9f196f330c7c2c5d7a5cf91af894110ca0215ac051b5844701f2bfd934d52\",\r\n                \"sha256:45eb5a6fd193d6cf7e0cf5d8a5b31f83d5faae0293695626f539a823e93b13f6\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"markers\": \"extra == 'flask'\",\r\n            \"version\": \"==1.1.1\"\r\n        },\r\n        \"future\": {\r\n            \"hashes\": [\r\n                \"sha256:b1bead90b70cf6ec3f0710ae53a525360fa360d306a86583adc6bf83a4db537d\"\r\n            ],\r\n            \"version\": \"==0.18.2\"\r\n        },\r\n        \"gitdb2\": {\r\n            \"hashes\": [\r\n                \"sha256:1b6df1433567a51a4a9c1a5a0de977aa351a405cc56d7d35f3388bad1f630350\",\r\n                \"sha256:96bbb507d765a7f51eb802554a9cfe194a174582f772e0d89f4e87288c288b7b\"\r\n            ],\r\n            \"version\": \"==2.0.6\"\r\n        },\r\n        \"gitpython\": {\r\n            \"hashes\": [\r\n                \"sha256:9c2398ffc3dcb3c40b27324b316f08a4f93ad646d5a6328cafbb871aa79f5e42\",\r\n                \"sha256:c155c6a2653593ccb300462f6ef533583a913e17857cfef8fc617c246b6dc245\"\r\n            ],\r\n            \"version\": \"==3.0.5\"\r\n        },\r\n        \"identify\": {\r\n            \"hashes\": [\r\n                \"sha256:7782115794ec28b011702815d9f5e532244560cd2bf0789c4f09381d43befd90\",\r\n                \"sha256:9e7521e9abeaede4d2d1092a106e418c65ddf6b3182b43930bcb3c8cfb974488\"\r\n            ],\r\n            \"version\": \"==1.4.8\"\r\n        },\r\n        \"importlib-metadata\": {\r\n            \"hashes\": [\r\n                \"sha256:073a852570f92da5f744a3472af1b61e28e9f78ccf0c9117658dc32b15de7b45\",\r\n                \"sha256:d95141fbfa7ef2ec65cfd945e2af7e5a6ddbd7c8d9a25e66ff3be8e3daf9f60f\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.3.0\"\r\n        },\r\n        \"isort\": {\r\n            \"hashes\": [\r\n                \"sha256:54da7e92468955c4fceacd0c86bd0ec997b0e1ee80d97f67c35a78b719dccab1\",\r\n                \"sha256:6e811fcb295968434526407adb8796944f1988c5b65e8139058f2014cbe100fd\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==4.3.21\"\r\n        },\r\n        \"itsdangerous\": {\r\n            \"hashes\": [\r\n                \"sha256:321b033d07f2a4136d3ec762eac9f16a10ccd60f53c0c91af90217ace7ba1f19\",\r\n                \"sha256:b12271b2047cb23eeb98c8b5622e2e5c5e9abd9784a153e9d8ef9cb4dd09d749\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.1.0\"\r\n        },\r\n        \"jinja2\": {\r\n            \"hashes\": [\r\n                \"sha256:74320bb91f31270f9551d46522e33af46a80c3d619f4a4bf42b3164d30b5911f\",\r\n                \"sha256:9fe95f19286cfefaa917656583d020be14e7859c6b0252588391e47db34527de\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.10.3\"\r\n        },\r\n        \"mando\": {\r\n            \"hashes\": [\r\n                \"sha256:4ce09faec7e5192ffc3c57830e26acba0fd6cd11e1ee81af0d4df0657463bd1c\",\r\n                \"sha256:79feb19dc0f097daa64a1243db578e7674909b75f88ac2220f1c065c10a0d960\"\r\n            ],\r\n            \"version\": \"==0.6.4\"\r\n        },\r\n        \"markupsafe\": {\r\n            \"hashes\": [\r\n                \"sha256:00bc623926325b26bb9605ae9eae8a215691f33cae5df11ca5424f06f2d1f473\",\r\n                \"sha256:09027a7803a62ca78792ad89403b1b7a73a01c8cb65909cd876f7fcebd79b161\",\r\n                \"sha256:09c4b7f37d6c648cb13f9230d847adf22f8171b1ccc4d5682398e77f40309235\",\r\n                \"sha256:1027c282dad077d0bae18be6794e6b6b8c91d58ed8a8d89a89d59693b9131db5\",\r\n                \"sha256:24982cc2533820871eba85ba648cd53d8623687ff11cbb805be4ff7b4c971aff\",\r\n                \"sha256:29872e92839765e546828bb7754a68c418d927cd064fd4708fab9fe9c8bb116b\",\r\n                \"sha256:43a55c2930bbc139570ac2452adf3d70cdbb3cfe5912c71cdce1c2c6bbd9c5d1\",\r\n                \"sha256:46c99d2de99945ec5cb54f23c8cd5689f6d7177305ebff350a58ce5f8de1669e\",\r\n                \"sha256:500d4957e52ddc3351cabf489e79c91c17f6e0899158447047588650b5e69183\",\r\n                \"sha256:535f6fc4d397c1563d08b88e485c3496cf5784e927af890fb3c3aac7f933ec66\",\r\n                \"sha256:62fe6c95e3ec8a7fad637b7f3d372c15ec1caa01ab47926cfdf7a75b40e0eac1\",\r\n                \"sha256:6dd73240d2af64df90aa7c4e7481e23825ea70af4b4922f8ede5b9e35f78a3b1\",\r\n                \"sha256:717ba8fe3ae9cc0006d7c451f0bb265ee07739daf76355d06366154ee68d221e\",\r\n                \"sha256:79855e1c5b8da654cf486b830bd42c06e8780cea587384cf6545b7d9ac013a0b\",\r\n                \"sha256:7c1699dfe0cf8ff607dbdcc1e9b9af1755371f92a68f706051cc8c37d447c905\",\r\n                \"sha256:88e5fcfb52ee7b911e8bb6d6aa2fd21fbecc674eadd44118a9cc3863f938e735\",\r\n                \"sha256:8defac2f2ccd6805ebf65f5eeb132adcf2ab57aa11fdf4c0dd5169a004710e7d\",\r\n                \"sha256:98c7086708b163d425c67c7a91bad6e466bb99d797aa64f965e9d25c12111a5e\",\r\n                \"sha256:9add70b36c5666a2ed02b43b335fe19002ee5235efd4b8a89bfcf9005bebac0d\",\r\n                \"sha256:9bf40443012702a1d2070043cb6291650a0841ece432556f784f004937f0f32c\",\r\n                \"sha256:ade5e387d2ad0d7ebf59146cc00c8044acbd863725f887353a10df825fc8ae21\",\r\n                \"sha256:b00c1de48212e4cc9603895652c5c410df699856a2853135b3967591e4beebc2\",\r\n                \"sha256:b1282f8c00509d99fef04d8ba936b156d419be841854fe901d8ae224c59f0be5\",\r\n                \"sha256:b2051432115498d3562c084a49bba65d97cf251f5a331c64a12ee7e04dacc51b\",\r\n                \"sha256:ba59edeaa2fc6114428f1637ffff42da1e311e29382d81b339c1817d37ec93c6\",\r\n                \"sha256:c8716a48d94b06bb3b2524c2b77e055fb313aeb4ea620c8dd03a105574ba704f\",\r\n                \"sha256:cd5df75523866410809ca100dc9681e301e3c27567cf498077e8551b6d20e42f\",\r\n                \"sha256:e249096428b3ae81b08327a63a485ad0878de3fb939049038579ac0ef61e17e7\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.1.1\"\r\n        },\r\n        \"mccabe\": {\r\n            \"hashes\": [\r\n                \"sha256:ab8a6258860da4b6677da4bd2fe5dc2c659cff31b3ee4f7f5d64e79735b80d42\",\r\n                \"sha256:dd8d182285a0fe56bace7f45b5e7d1a6ebcbf524e8f3bd87eb0f125271b8831f\"\r\n            ],\r\n            \"version\": \"==0.6.1\"\r\n        },\r\n        \"mock\": {\r\n            \"hashes\": [\r\n                \"sha256:83657d894c90d5681d62155c82bda9c1187827525880eda8ff5df4ec813437c3\",\r\n                \"sha256:d157e52d4e5b938c550f39eb2fd15610db062441a9c2747d3dbfa9298211d0f8\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==3.0.5\"\r\n        },\r\n        \"more-itertools\": {\r\n            \"hashes\": [\r\n                \"sha256:b84b238cce0d9adad5ed87e745778d20a3f8487d0f0cb8b8a586816c7496458d\",\r\n                \"sha256:c833ef592a0324bcc6a60e48440da07645063c453880c9477ceb22490aec1564\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==8.0.2\"\r\n        },\r\n        \"nodeenv\": {\r\n            \"hashes\": [\r\n                \"sha256:ad8259494cf1c9034539f6cced78a1da4840a4b157e23640bc4a0c0546b0cb7a\"\r\n            ],\r\n            \"version\": \"==1.3.3\"\r\n        },\r\n        \"packaging\": {\r\n            \"hashes\": [\r\n                \"sha256:28b924174df7a2fa32c1953825ff29c61e2f5e082343165438812f00d3a7fc47\",\r\n                \"sha256:d9551545c6d761f3def1677baf08ab2a3ca17c56879e70fecba2fc4dde4ed108\"\r\n            ],\r\n            \"version\": \"==19.2\"\r\n        },\r\n        \"pbr\": {\r\n            \"hashes\": [\r\n                \"sha256:139d2625547dbfa5fb0b81daebb39601c478c21956dc57e2e07b74450a8c506b\",\r\n                \"sha256:61aa52a0f18b71c5cc58232d2cf8f8d09cd67fcad60b742a60124cb8d6951488\"\r\n            ],\r\n            \"version\": \"==5.4.4\"\r\n        },\r\n        \"pluggy\": {\r\n            \"hashes\": [\r\n                \"sha256:15b2acde666561e1298d71b523007ed7364de07029219b604cf808bfa1c765b0\",\r\n                \"sha256:966c145cd83c96502c3c3868f50408687b38434af77734af1e9ca461a4081d2d\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.13.1\"\r\n        },\r\n        \"pre-commit\": {\r\n            \"hashes\": [\r\n                \"sha256:9f152687127ec90642a2cc3e4d9e1e6240c4eb153615cb02aa1ad41d331cbb6e\",\r\n                \"sha256:c2e4810d2d3102d354947907514a78c5d30424d299dc0fe48f5aa049826e9b50\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.20.0\"\r\n        },\r\n        \"py\": {\r\n            \"hashes\": [\r\n                \"sha256:64f65755aee5b381cea27766a3a147c3f15b9b6b9ac88676de66ba2ae36793fa\",\r\n                \"sha256:dc639b046a6e2cff5bbe40194ad65936d6ba360b52b3c3fe1d08a82dd50b5e53\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.8.0\"\r\n        },\r\n        \"pycodestyle\": {\r\n            \"hashes\": [\r\n                \"sha256:95a2219d12372f05704562a14ec30bc76b05a5b297b21a5dfe3f6fac3491ae56\",\r\n                \"sha256:e40a936c9a450ad81df37f549d676d127b1b66000a6c500caa2b085bc0ca976c\"\r\n            ],\r\n            \"version\": \"==2.5.0\"\r\n        },\r\n        \"pyflakes\": {\r\n            \"hashes\": [\r\n                \"sha256:17dbeb2e3f4d772725c777fabc446d5634d1038f234e77343108ce445ea69ce0\",\r\n                \"sha256:d976835886f8c5b31d47970ed689944a0262b5f3afa00a5a7b4dc81e5449f8a2\"\r\n            ],\r\n            \"version\": \"==2.1.1\"\r\n        },\r\n        \"pyparsing\": {\r\n            \"hashes\": [\r\n                \"sha256:20f995ecd72f2a1f4bf6b072b63b22e2eb457836601e76d6e5dfcd75436acc1f\",\r\n                \"sha256:4ca62001be367f01bd3e92ecbb79070272a9d4964dce6a48a82ff0b8bc7e683a\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.4.5\"\r\n        },\r\n        \"pytest\": {\r\n            \"hashes\": [\r\n                \"sha256:63344a2e3bce2e4d522fd62b4fdebb647c019f1f9e4ca075debbd13219db4418\",\r\n                \"sha256:f67403f33b2b1d25a6756184077394167fe5e2f9d8bdaab30707d19ccec35427\"\r\n            ],\r\n            \"version\": \"==5.3.1\"\r\n        },\r\n        \"pytest-cov\": {\r\n            \"hashes\": [\r\n                \"sha256:cc6742d8bac45070217169f5f72ceee1e0e55b0221f54bcf24845972d3a47f2b\",\r\n                \"sha256:cdbdef4f870408ebdbfeb44e63e07eb18bb4619fae852f6e760645fa36172626\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.8.1\"\r\n        },\r\n        \"pytest-flask\": {\r\n            \"hashes\": [\r\n                \"sha256:283730b469604ecb94caac28df99a40b7c785b828dd8d3323596718b51dfaeb2\",\r\n                \"sha256:d874781b622210d8c5d8061cdb091cb059fcb12203125110bd8e6f9256ccbf49\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.15.0\"\r\n        },\r\n        \"pytest-mock\": {\r\n            \"hashes\": [\r\n                \"sha256:67e414b3caef7bff6fc6bd83b22b5bc39147e4493f483c2679bc9d4dc485a94d\",\r\n                \"sha256:e24a911ec96773022ebcc7030059b57cd3480b56d4f5d19b7c370ec635e6aed5\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.13.0\"\r\n        },\r\n        \"python-dateutil\": {\r\n            \"hashes\": [\r\n                \"sha256:73ebfe9dbf22e832286dafa60473e4cd239f8592f699aa5adaf10050e6e1823c\",\r\n                \"sha256:75bb3f31ea686f1197762692a9ee6a7550b59fc6ca3a1f4b5d7e32fb98e2da2a\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==2.8.1\"\r\n        },\r\n        \"pyyaml\": {\r\n            \"hashes\": [\r\n                \"sha256:0e7f69397d53155e55d10ff68fdfb2cf630a35e6daf65cf0bdeaf04f127c09dc\",\r\n                \"sha256:2e9f0b7c5914367b0916c3c104a024bb68f269a486b9d04a2e8ac6f6597b7803\",\r\n                \"sha256:35ace9b4147848cafac3db142795ee42deebe9d0dad885ce643928e88daebdcc\",\r\n                \"sha256:38a4f0d114101c58c0f3a88aeaa44d63efd588845c5a2df5290b73db8f246d15\",\r\n                \"sha256:483eb6a33b671408c8529106df3707270bfacb2447bf8ad856a4b4f57f6e3075\",\r\n                \"sha256:4b6be5edb9f6bb73680f5bf4ee08ff25416d1400fbd4535fe0069b2994da07cd\",\r\n                \"sha256:7f38e35c00e160db592091751d385cd7b3046d6d51f578b29943225178257b31\",\r\n                \"sha256:8100c896ecb361794d8bfdb9c11fce618c7cf83d624d73d5ab38aef3bc82d43f\",\r\n                \"sha256:c0ee8eca2c582d29c3c2ec6e2c4f703d1b7f1fb10bc72317355a746057e7346c\",\r\n                \"sha256:e4c015484ff0ff197564917b4b4246ca03f411b9bd7f16e02a2f586eb48b6d04\",\r\n                \"sha256:ebc4ed52dcc93eeebeae5cf5deb2ae4347b3a81c3fa12b0b8c976544829396a4\"\r\n            ],\r\n            \"version\": \"==5.2\"\r\n        },\r\n        \"radon\": {\r\n            \"hashes\": [\r\n                \"sha256:20f799949e42e6899bc9304539de222d3bdaeec276f38fbd4034859ccd548b46\",\r\n                \"sha256:32ac2f86bfacbddade5c79f0e927e97f90a5cda5b86f880511dd849c4a0096e3\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==4.0.0\"\r\n        },\r\n        \"six\": {\r\n            \"hashes\": [\r\n                \"sha256:1f1b7d42e254082a9db6279deae68afb421ceba6158efa6131de7b3003ee93fd\",\r\n                \"sha256:30f610279e8b2578cab6db20741130331735c781b56053c59c4076da27f06b66\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.13.0\"\r\n        },\r\n        \"smmap2\": {\r\n            \"hashes\": [\r\n                \"sha256:0555a7bf4df71d1ef4218e4807bbf9b201f910174e6e08af2e138d4e517b4dde\",\r\n                \"sha256:29a9ffa0497e7f2be94ca0ed1ca1aa3cd4cf25a1f6b4f5f87f74b46ed91d609a\"\r\n            ],\r\n            \"version\": \"==2.0.5\"\r\n        },\r\n        \"stevedore\": {\r\n            \"hashes\": [\r\n                \"sha256:01d9f4beecf0fbd070ddb18e5efb10567801ba7ef3ddab0074f54e3cd4e91730\",\r\n                \"sha256:e0739f9739a681c7a1fda76a102b65295e96a144ccdb552f2ae03c5f0abe8a14\"\r\n            ],\r\n            \"version\": \"==1.31.0\"\r\n        },\r\n        \"text-unidecode\": {\r\n            \"hashes\": [\r\n                \"sha256:1311f10e8b895935241623731c2ba64f4c455287888b18189350b67134a822e8\",\r\n                \"sha256:bad6603bb14d279193107714b288be206cac565dfa49aa5b105294dd5c4aab93\"\r\n            ],\r\n            \"version\": \"==1.3\"\r\n        },\r\n        \"toml\": {\r\n            \"hashes\": [\r\n                \"sha256:229f81c57791a41d65e399fc06bf0848bab550a9dfd5ed66df18ce5f05e73d5c\",\r\n                \"sha256:235682dd292d5899d361a811df37e04a8828a5b1da3115886b73cf81ebc9100e\"\r\n            ],\r\n            \"version\": \"==0.10.0\"\r\n        },\r\n        \"virtualenv\": {\r\n            \"hashes\": [\r\n                \"sha256:116655188441670978117d0ebb6451eb6a7526f9ae0796cc0dee6bd7356909b0\",\r\n                \"sha256:b57776b44f91511866594e477dd10e76a6eb44439cdd7f06dcd30ba4c5bd854f\"\r\n            ],\r\n            \"version\": \"==16.7.8\"\r\n        },\r\n        \"vulture\": {\r\n            \"hashes\": [\r\n                \"sha256:c200a01ec47c05d75c5feffe096aeb85a4d3f0e18563be125fae72c13b584ea5\",\r\n                \"sha256:d303d4778b44aebd4de76080138b9dd9b1c9c50b94bb9aaa5508f1abd7d94220\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.2\"\r\n        },\r\n        \"wcwidth\": {\r\n            \"hashes\": [\r\n                \"sha256:3df37372226d6e63e1b1e1eda15c594bca98a22d33a23832a90998faa96bc65e\",\r\n                \"sha256:f4ebe71925af7b40a864553f761ed559b43544f8f71746c2d756c7fe788ade7c\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.1.7\"\r\n        },\r\n        \"werkzeug\": {\r\n            \"hashes\": [\r\n                \"sha256:7280924747b5733b246fe23972186c6b348f9ae29724135a6dfc1e53cea433e7\",\r\n                \"sha256:e5f4a1f98b52b18a93da705a7458e55afb26f32bff83ff5d19189f92462d65c4\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.16.0\"\r\n        },\r\n        \"zipp\": {\r\n            \"hashes\": [\r\n                \"sha256:3718b1cbcd963c7d4c5511a8240812904164b7f381b647143a89d3b98f9bcd8e\",\r\n                \"sha256:f06903e9f1f43b12d371004b4ac7b06ab39a44adc747266928ae6debfa7b3335\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==0.6.0\"\r\n        }\r\n    }\r\n}\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/567", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/567/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/567/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/567/events", "html_url": "https://github.com/getsentry/sentry-python/issues/567", "id": 528239957, "node_id": "MDU6SXNzdWU1MjgyMzk5NTc=", "number": 567, "title": "sentry-sdk skipes None parameters in request", "user": {"login": "syurchenko", "id": 1917493, "node_id": "MDQ6VXNlcjE5MTc0OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1917493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syurchenko", "html_url": "https://github.com/syurchenko", "followers_url": "https://api.github.com/users/syurchenko/followers", "following_url": "https://api.github.com/users/syurchenko/following{/other_user}", "gists_url": "https://api.github.com/users/syurchenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/syurchenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syurchenko/subscriptions", "organizations_url": "https://api.github.com/users/syurchenko/orgs", "repos_url": "https://api.github.com/users/syurchenko/repos", "events_url": "https://api.github.com/users/syurchenko/events{/privacy}", "received_events_url": "https://api.github.com/users/syurchenko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-25T17:45:59Z", "updated_at": "2019-11-26T15:25:33Z", "closed_at": "2019-11-26T15:25:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In my django app I have view which accepts 3 parameters in POST request: login, password, device_id.\r\nIf code in view crashes somewhere while processing I see only 2 parameters in sentry (body&curl).\r\nBug is caused to serialisation issue with None values.\r\nExample curl without bug (device_id is not None):\r\n\r\n`curl -v -X POST -H \"Accept: application/json\" --data \"{\\\"username\\\":\\\"000\\\",\\\"password\\\":\\\"qwerty\\\",\\\"device_id\\\":\\\"iphone\\\"}\" \"http://my_host/api/auth/login/\"` \r\n\r\nin sentry I see:\r\n`{\r\ndevice_id: iphone, \r\npassword: [Filtered], \r\nusername: 000\r\n}`\r\n\r\nExample curl with bug (device_id is None):\r\n`curl -v -X POST -H \"Accept: application/json\" --data \"{\\\"username\\\":\\\"000\\\",\\\"password\\\":\\\"qwerty\\\",\\\"device_id\\\":null}\" \"http://my_host/api/auth/login/\"`\r\n\r\nMy code has crashed. \r\nIn sentry I see:\r\n\r\n`{\r\npassword: [Filtered], \r\nusername: 000\r\n}`\r\n\r\nbut I actually have sent **3 parameters in body**!\r\n\r\nExpected behaviour in sentry:\r\n`{\r\ndevice_id: None,\r\npassword: [Filtered], \r\nusername: 000\r\n}`\r\n\r\n[Merge request 566](https://github.com/getsentry/sentry-python/pull/566)\r\n\r\nSeveral tests fail in my MR because None values appeared in assertion statements, but MR fixes problem with body parameters.\r\nSo I have a question to contributors: should I fix all tests to add None values or I did something wrong in my MR and None values are expected to be skiped for some reasons.\r\nAs I see in failed tests many None values are really useless but in my case they are necessary. Also there is no separation in serialisation code between this cases (serialising of body params and some others).\r\nI need your advice to complete my MR.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/561", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/561/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/561/events", "html_url": "https://github.com/getsentry/sentry-python/issues/561", "id": 526241160, "node_id": "MDU6SXNzdWU1MjYyNDExNjA=", "number": 561, "title": "Cannot push user scope using 0.13.2 and Flask", "user": {"login": "Seluj78", "id": 4641317, "node_id": "MDQ6VXNlcjQ2NDEzMTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4641317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Seluj78", "html_url": "https://github.com/Seluj78", "followers_url": "https://api.github.com/users/Seluj78/followers", "following_url": "https://api.github.com/users/Seluj78/following{/other_user}", "gists_url": "https://api.github.com/users/Seluj78/gists{/gist_id}", "starred_url": "https://api.github.com/users/Seluj78/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Seluj78/subscriptions", "organizations_url": "https://api.github.com/users/Seluj78/orgs", "repos_url": "https://api.github.com/users/Seluj78/repos", "events_url": "https://api.github.com/users/Seluj78/events{/privacy}", "received_events_url": "https://api.github.com/users/Seluj78/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-20T22:02:42Z", "updated_at": "2019-11-20T22:19:50Z", "closed_at": "2019-11-20T22:19:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's my decorator that I use to set the scope when necessary\r\n\r\n```python\r\ndef sentry_configure_scope(func):\r\n    \"\"\"\r\n    This decorator will set the user scope for sentry\r\n    \"\"\"\r\n\r\n    @wraps(func)\r\n    def decorated_function(*args, **kwargs):\r\n        if session['token']:\r\n            with configure_scope() as scope:\r\n                token = session['token']\r\n                claims = decode(token, verify=False)\r\n                u = {\r\n                    \"id\": claims['identity']['client_id'],\r\n                    \"username\": \"\" + claims['identity']['first_name'] + \" \" + claims['identity']['last_name'],\r\n                    \"email\": claims['identity']['email']\r\n                }\r\n                scope.set_user(u)\r\n        return func(*args, **kwargs)\r\n\r\n    return decorated_function\r\n```\r\n\r\nI've checked using the pycharm debugger and it seems that the `scope._user` is correctly set with the dict but once on sentry.io, the user scope is nowhere to be found...\r\nAny guess ? (only tested on local, maybe that's it ?)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/560", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/560/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/560/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/560/events", "html_url": "https://github.com/getsentry/sentry-python/issues/560", "id": 525676240, "node_id": "MDU6SXNzdWU1MjU2NzYyNDA=", "number": 560, "title": "aiohttp4.0.0a1 integration error", "user": {"login": "Fogapod", "id": 22667809, "node_id": "MDQ6VXNlcjIyNjY3ODA5", "avatar_url": "https://avatars0.githubusercontent.com/u/22667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fogapod", "html_url": "https://github.com/Fogapod", "followers_url": "https://api.github.com/users/Fogapod/followers", "following_url": "https://api.github.com/users/Fogapod/following{/other_user}", "gists_url": "https://api.github.com/users/Fogapod/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fogapod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fogapod/subscriptions", "organizations_url": "https://api.github.com/users/Fogapod/orgs", "repos_url": "https://api.github.com/users/Fogapod/repos", "events_url": "https://api.github.com/users/Fogapod/events{/privacy}", "received_events_url": "https://api.github.com/users/Fogapod/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-20T09:23:10Z", "updated_at": "2019-11-25T17:21:35Z", "closed_at": "2019-11-25T17:21:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running `aiohttp==4.0.0a1` and `sentry-sdk==0.13.2` on python 3.8.\r\nEach request causes the folowing exception:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/aiohttp/web_protocol.py\", line 414, in _handle_request\r\n    resp = await self._request_handler(request)\r\n  File \"/usr/local/lib/python3.8/site-packages/sentry_sdk/integrations/aiohttp.py\", line 92, in sentry_app_handle\r\n    return await asyncio.get_event_loop().create_task(inner())\r\n  File \"/usr/local/lib/python3.8/site-packages/sentry_sdk/integrations/aiohttp.py\", line 66, in inner\r\n    weak_request = weakref.ref(request)\r\nTypeError: cannot create weak reference to 'Request' object\r\n```\r\nWas something changed in aiohttp that prevents current integration from working?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/558", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/558/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/558/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/558/events", "html_url": "https://github.com/getsentry/sentry-python/issues/558", "id": 524161472, "node_id": "MDU6SXNzdWU1MjQxNjE0NzI=", "number": 558, "title": "Question: Scrub sensitive variables in client side", "user": {"login": "Odelya", "id": 2112014, "node_id": "MDQ6VXNlcjIxMTIwMTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2112014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Odelya", "html_url": "https://github.com/Odelya", "followers_url": "https://api.github.com/users/Odelya/followers", "following_url": "https://api.github.com/users/Odelya/following{/other_user}", "gists_url": "https://api.github.com/users/Odelya/gists{/gist_id}", "starred_url": "https://api.github.com/users/Odelya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Odelya/subscriptions", "organizations_url": "https://api.github.com/users/Odelya/orgs", "repos_url": "https://api.github.com/users/Odelya/repos", "events_url": "https://api.github.com/users/Odelya/events{/privacy}", "received_events_url": "https://api.github.com/users/Odelya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-18T06:25:01Z", "updated_at": "2019-11-18T20:12:24Z", "closed_at": "2019-11-18T20:12:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to scrub sensitive variables in client side.\r\n\r\n```\r\nsentry_sdk.init(\r\n    dsn=settings.get('SENTRY_DSN', \"\"),\r\n    before_breadcrumb=truncate_breadcrumb_message,\r\n    with_locals=False,\r\n    integrations=[FlaskIntegration()],\r\n    before_send=sanitize_sentry_event,\r\n)\r\n\r\ndef sanitize_sentry_event(event, hint):\r\n    pass\r\n\r\ndef truncate_breadcrumb_message(crumb, hint):\r\n    pass\r\n\r\ndef raise_execption(password):\r\n    auth = 5\r\n    raise Exception()\r\n```\r\n\r\nI am not sure how to scrub the local variables sent to Sentry in the methods `sanitize_sentry_event` and `truncate_breadcrumb_message` can you please help?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/556", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/556/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/556/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/556/events", "html_url": "https://github.com/getsentry/sentry-python/issues/556", "id": 523469248, "node_id": "MDU6SXNzdWU1MjM0NjkyNDg=", "number": 556, "title": "TypeError using SentryAsgiMiddleware with FastAPI/Starlette app", "user": {"login": "Stigjb", "id": 418181, "node_id": "MDQ6VXNlcjQxODE4MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/418181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stigjb", "html_url": "https://github.com/Stigjb", "followers_url": "https://api.github.com/users/Stigjb/followers", "following_url": "https://api.github.com/users/Stigjb/following{/other_user}", "gists_url": "https://api.github.com/users/Stigjb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stigjb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stigjb/subscriptions", "organizations_url": "https://api.github.com/users/Stigjb/orgs", "repos_url": "https://api.github.com/users/Stigjb/repos", "events_url": "https://api.github.com/users/Stigjb/events{/privacy}", "received_events_url": "https://api.github.com/users/Stigjb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-15T13:27:13Z", "updated_at": "2019-11-25T10:06:13Z", "closed_at": "2019-11-19T08:09:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I cannot get `SentryAsgiMiddleware` to work with our FastAPI app. We tried to follow the example in the [Sentry docs](https://docs.sentry.io/platforms/python/asgi/), so the app module basically looks like this:\r\n\r\n```python\r\nfrom fastapi import FastAPI\r\nfrom sentry_sdk.integrations.asgi import SentryAsgiMiddleware\r\n...\r\napp = FastAPI()\r\n\r\n@app.post()\r\n...\r\n\r\napp = SentryAsgiMiddleware(app)\r\n```\r\n\r\nThis gives an error on all requests, see the following stack trace:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/usr/local/lib/python3.7/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/uvicorn/middleware/asgi2.py\", line 7, in __call__\r\n    await instance(receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/sentry_sdk/integrations/asgi.py\", line 54, in run_asgi2\r\n    scope, lambda: self.app(scope)(receive, send)\r\n  File \"/usr/local/lib/python3.7/site-packages/sentry_sdk/integrations/asgi.py\", line 93, in _run_app\r\n    raise exc from None\r\n  File \"/usr/local/lib/python3.7/site-packages/sentry_sdk/integrations/asgi.py\", line 90, in _run_app\r\n    return await callback()\r\n  File \"/usr/local/lib/python3.7/site-packages/sentry_sdk/integrations/asgi.py\", line 54, in <lambda>\r\n    scope, lambda: self.app(scope)(receive, send)\r\nTypeError: __call__() missing 2 required positional arguments: 'receive' and 'send'\r\n```\r\n\r\nLibrary versions:\r\n\r\n- python==3.7.5\r\n- sentry-sdk==0.13.2\r\n- uvicorn==0.10.8\r\n- fastapi==0.42.0\r\n- starlette==0.12.9", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/555", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/555/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/555/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/555/events", "html_url": "https://github.com/getsentry/sentry-python/issues/555", "id": 523405725, "node_id": "MDU6SXNzdWU1MjM0MDU3MjU=", "number": 555, "title": "[celery integration] before_send function executed twice", "user": {"login": "gerazenobi", "id": 7520283, "node_id": "MDQ6VXNlcjc1MjAyODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7520283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gerazenobi", "html_url": "https://github.com/gerazenobi", "followers_url": "https://api.github.com/users/gerazenobi/followers", "following_url": "https://api.github.com/users/gerazenobi/following{/other_user}", "gists_url": "https://api.github.com/users/gerazenobi/gists{/gist_id}", "starred_url": "https://api.github.com/users/gerazenobi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gerazenobi/subscriptions", "organizations_url": "https://api.github.com/users/gerazenobi/orgs", "repos_url": "https://api.github.com/users/gerazenobi/repos", "events_url": "https://api.github.com/users/gerazenobi/events{/privacy}", "received_events_url": "https://api.github.com/users/gerazenobi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-15T11:04:18Z", "updated_at": "2019-11-15T13:00:29Z", "closed_at": "2019-11-15T12:58:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Doing a simple test with sentry and celery integration I see the function `before_send`\r\ngets executed twice when an exception is raised while the `on_failure` celery task mechanism gets executed correctly once.\r\n\r\nSetup:\r\n```python\r\n    # within my make_celery() function to create the celery app\r\n\r\n    def before_send(event, hint):\r\n        print('before_send celery integration')\r\n        return event\r\n\r\n    sentry_sdk.init(dsn=url, integrations=[CeleryIntegration(), SqlalchemyIntegration()], before_send=before_send)\r\n```\r\n`on_failure` celery callback handler\r\n```python\r\ndef on_failure(task, exc, task_id, args, _, exception_info, **__):\r\n    logger.error(\"on_failure error print\")\r\n```\r\n celery task:\r\n```python\r\n@celery.task(bind=True, name=\"test_sentry_integration\", on_failure=on_failure, ignore_result=True)\r\ndef test_sentry_integration(_, message):\r\n    raise Exception(message)\r\n```\r\noutput:\r\n```\r\n[2019-11-15 11:02:13,148: WARNING/ForkPoolWorker-1] test the sdk\r\n[2019-11-15 11:02:13,152: WARNING/ForkPoolWorker-1] before_send celery integration\r\n2019-11-15 11:02:13,159::comfortmanager.common.tasks::ERROR::on_failure error print\r\n[2019-11-15 11:02:13,161: WARNING/ForkPoolWorker-1] before_send celery integration\r\n[2019-11-15 11:02:13,161: ERROR/ForkPoolWorker-1] Task test_sentry_integration[2f5848b3-1e12-4a0d-92e2-0b4dec63e7c8] raised unexpected: Exception('test the sdk',)\r\n```\r\n\r\nVersions:\r\n```\r\ncelery 4.3.0\r\nsentry-sdk 0.13.2\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/553", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/553/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/553/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/553/events", "html_url": "https://github.com/getsentry/sentry-python/issues/553", "id": 523373342, "node_id": "MDU6SXNzdWU1MjMzNzMzNDI=", "number": 553, "title": "Why is tornado.application logger ignored?", "user": {"login": "blacelle", "id": 2117911, "node_id": "MDQ6VXNlcjIxMTc5MTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2117911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blacelle", "html_url": "https://github.com/blacelle", "followers_url": "https://api.github.com/users/blacelle/followers", "following_url": "https://api.github.com/users/blacelle/following{/other_user}", "gists_url": "https://api.github.com/users/blacelle/gists{/gist_id}", "starred_url": "https://api.github.com/users/blacelle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blacelle/subscriptions", "organizations_url": "https://api.github.com/users/blacelle/orgs", "repos_url": "https://api.github.com/users/blacelle/repos", "events_url": "https://api.github.com/users/blacelle/events{/privacy}", "received_events_url": "https://api.github.com/users/blacelle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2019-11-15T10:01:51Z", "updated_at": "2019-11-17T15:56:01Z", "closed_at": "2019-11-17T15:55:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears Sentry do not report any logs from tornado.application logger\r\n\r\nhttps://github.com/getsentry/sentry-python/blob/master/sentry_sdk/integrations/tornado.py#L53\r\n    ignore_logger(\"tornado.application\")\r\n\r\nHowever, it seems the default logger used by Tornado to report unhandled exceptions:\r\n\r\nhttps://github.com/tornadoweb/tornado/blob/682ff8dec2d095b339b62d875252be932ae4a5f2/tornado/web.py#L1762\r\n\r\n    def log_exception(\r\n        self,\r\n        typ: \"Optional[Type[BaseException]]\",\r\n        value: Optional[BaseException],\r\n        tb: Optional[TracebackType],\r\n    ) -> None:\r\n        \"\"\"Override to customize logging of uncaught exceptions.\r\n        By default logs instances of `HTTPError` as warnings without\r\n        stack traces (on the ``tornado.general`` logger), and all\r\n        other exceptions as errors with stack traces (on the\r\n        ``tornado.application`` logger).\r\n        .. versionadded:: 3.1\r\n        \"\"\"\r\n        if isinstance(value, HTTPError):\r\n            if value.log_message:\r\n                format = \"%d %s: \" + value.log_message\r\n                args = [value.status_code, self._request_summary()] + list(value.args)\r\n                gen_log.warning(format, *args)\r\n        else:\r\n            app_log.error(  # type: ignore\r\n                \"Uncaught exception %s\\n%r\",\r\n                self._request_summary(),\r\n                self.request,\r\n                exc_info=(typ, value, tb),\r\n            )\r\n\r\nHow are we supposed to propagate uncaught exceptions in a Tornado based application to Sentry with Tornado integration?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/550", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/550/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/550/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/550/events", "html_url": "https://github.com/getsentry/sentry-python/issues/550", "id": 520180113, "node_id": "MDU6SXNzdWU1MjAxODAxMTM=", "number": 550, "title": "Bytes Objects serialized as list of integers in Python 3", "user": {"login": "xvillaneau", "id": 11230858, "node_id": "MDQ6VXNlcjExMjMwODU4", "avatar_url": "https://avatars2.githubusercontent.com/u/11230858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xvillaneau", "html_url": "https://github.com/xvillaneau", "followers_url": "https://api.github.com/users/xvillaneau/followers", "following_url": "https://api.github.com/users/xvillaneau/following{/other_user}", "gists_url": "https://api.github.com/users/xvillaneau/gists{/gist_id}", "starred_url": "https://api.github.com/users/xvillaneau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xvillaneau/subscriptions", "organizations_url": "https://api.github.com/users/xvillaneau/orgs", "repos_url": "https://api.github.com/users/xvillaneau/repos", "events_url": "https://api.github.com/users/xvillaneau/events{/privacy}", "received_events_url": "https://api.github.com/users/xvillaneau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-08T18:56:46Z", "updated_at": "2019-11-11T20:33:12Z", "closed_at": "2019-11-11T20:33:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using `sentry_sdk` version 0.13.0 in Python 3.7.3, strings encoded as `bytes` objects are serialized as lists of integers:\r\n\r\n```\r\n>>> from sentry_sdk.serializer import serialize\r\n>>> serialize(b'123abc')\r\n[49, 50, 51, 97, 98, 99]\r\n>>> serialize(b'123abc', should_repr_strings=True)\r\n['49', '50', '51', '97', '98', '99']\r\n```\r\n\r\nThis doesn't seem like the expected behavior, instead it could be:\r\n```\r\n>>> serialize(b'123abc')\r\n'123abc'\r\n>>> serialize(b'123abc', should_repr_strings=True)\r\n\"b'123abc'\"\r\n```\r\n\r\nI was able to reproduce the issue with Python 3.7.3, 3.6.7, 3.5.6 and 3.4.10. The serialization seems to behave properly with Python 2.7.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/549", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/549/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/549/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/549/events", "html_url": "https://github.com/getsentry/sentry-python/issues/549", "id": 520036409, "node_id": "MDU6SXNzdWU1MjAwMzY0MDk=", "number": 549, "title": "Final event before lambda shut down is not sent", "user": {"login": "SimonsUnikaNamn", "id": 1564038, "node_id": "MDQ6VXNlcjE1NjQwMzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1564038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonsUnikaNamn", "html_url": "https://github.com/SimonsUnikaNamn", "followers_url": "https://api.github.com/users/SimonsUnikaNamn/followers", "following_url": "https://api.github.com/users/SimonsUnikaNamn/following{/other_user}", "gists_url": "https://api.github.com/users/SimonsUnikaNamn/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonsUnikaNamn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonsUnikaNamn/subscriptions", "organizations_url": "https://api.github.com/users/SimonsUnikaNamn/orgs", "repos_url": "https://api.github.com/users/SimonsUnikaNamn/repos", "events_url": "https://api.github.com/users/SimonsUnikaNamn/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonsUnikaNamn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-08T14:12:56Z", "updated_at": "2019-11-21T11:08:34Z", "closed_at": "2019-11-21T11:08:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "My code kinda looks like this\r\n\r\n```\r\ndef before_send(event, hint):\r\n    log.info(\"Before Sending the Event, {} and Hint : {}\".format(repr(event), repr(hint)))\r\n    return event\r\n\r\n\r\nsentry_sdk.init(integrations=[AwsLambdaIntegration()], debug=True, before_send=before_send)\r\n\r\n\r\ndef get_terrain_async(event, context):\r\n    # THIS IS SENT TO SENTRY\r\n    capture_exception(Exception(\"SEND ME AND EXCEPTION\"))\r\n    log.info(\"event: {}\".format(json.dumps(event)))\r\n    try:\r\n        generate()\r\n\r\n        return {\r\n            \"statusCode\": 204,\r\n            \"body\": \"{}\",\r\n            \"headers\": {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\"},\r\n        }\r\n\r\n    except Exception as e:\r\n        # THIS IS NEVER SENT\r\n        capture_exception(e)\r\n        return return_error(e, order_id)\r\n\r\n\r\ndef return_error(e, order_id):\r\n    log.error(repr(e))\r\n    return {\r\n        \"statusCode\": 500,\r\n        \"body\": json.dumps({\"error\": repr(e)}),\r\n        \"headers\": {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\"},\r\n    }\r\n```\r\n\r\nAnd I can see in my log that before_send event is called for the last event but never ends up in my sentry events.\r\n\r\nIs there something about the lambda being killed before the event is passed to sentry?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/539", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/539/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/539/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/539/events", "html_url": "https://github.com/getsentry/sentry-python/issues/539", "id": 511009142, "node_id": "MDU6SXNzdWU1MTEwMDkxNDI=", "number": 539, "title": "0.12.0 breaks Django function-based middleware", "user": {"login": "schinckel", "id": 23411, "node_id": "MDQ6VXNlcjIzNDEx", "avatar_url": "https://avatars1.githubusercontent.com/u/23411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schinckel", "html_url": "https://github.com/schinckel", "followers_url": "https://api.github.com/users/schinckel/followers", "following_url": "https://api.github.com/users/schinckel/following{/other_user}", "gists_url": "https://api.github.com/users/schinckel/gists{/gist_id}", "starred_url": "https://api.github.com/users/schinckel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schinckel/subscriptions", "organizations_url": "https://api.github.com/users/schinckel/orgs", "repos_url": "https://api.github.com/users/schinckel/repos", "events_url": "https://api.github.com/users/schinckel/events{/privacy}", "received_events_url": "https://api.github.com/users/schinckel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-23T00:59:05Z", "updated_at": "2019-10-24T11:18:54Z", "closed_at": "2019-10-24T11:18:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Similar to #504, but a different stack trace:\r\n\r\n    AttributeError: 'method-wrapper' object has no attribute '__module__'\r\n      File \"django/core/handlers/exception.py\", line 41, in inner\r\n        response = get_response(request)\r\n      File \"functools.py\", line 33, in update_wrapper\r\n        setattr(wrapper, attr, getattr(wrapped, attr))\r\n\r\nAccording to sentry (kind-of neat how I get this in this case...), the `get_response` object at that point in time is `<sentry_sdk.integrations.django.middleware.AuditMiddleware object at 0x7f37d64d4450>`.\r\n\r\nThis problem only occurs in 0.12.0 and newer, and with Django 1.11.x", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/538", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/538/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/538/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/538/events", "html_url": "https://github.com/getsentry/sentry-python/issues/538", "id": 510582414, "node_id": "MDU6SXNzdWU1MTA1ODI0MTQ=", "number": 538, "title": "Problem with sending data with exceptions on Sentry", "user": {"login": "kurama-cube", "id": 56872009, "node_id": "MDQ6VXNlcjU2ODcyMDA5", "avatar_url": "https://avatars2.githubusercontent.com/u/56872009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurama-cube", "html_url": "https://github.com/kurama-cube", "followers_url": "https://api.github.com/users/kurama-cube/followers", "following_url": "https://api.github.com/users/kurama-cube/following{/other_user}", "gists_url": "https://api.github.com/users/kurama-cube/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurama-cube/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurama-cube/subscriptions", "organizations_url": "https://api.github.com/users/kurama-cube/orgs", "repos_url": "https://api.github.com/users/kurama-cube/repos", "events_url": "https://api.github.com/users/kurama-cube/events{/privacy}", "received_events_url": "https://api.github.com/users/kurama-cube/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-22T11:06:19Z", "updated_at": "2019-10-22T11:23:40Z", "closed_at": "2019-10-22T11:23:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there.\r\nI have a problem with python Sentry SDK\r\nWhen I want to capture an exception with the capture_exception method,  I set a context with set_context and pass all the extra data to it as a dict and in the sentry web panel, I can't find fields which have None values or in some exceptions, some fields are missing, Sentry will remove these fields. how can I send a JSON object with an exception?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/536", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/536/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/536/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/536/events", "html_url": "https://github.com/getsentry/sentry-python/issues/536", "id": 509446891, "node_id": "MDU6SXNzdWU1MDk0NDY4OTE=", "number": 536, "title": "upgrade minimal required version of urllib3", "user": {"login": "ruzhnikov", "id": 986210, "node_id": "MDQ6VXNlcjk4NjIxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/986210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruzhnikov", "html_url": "https://github.com/ruzhnikov", "followers_url": "https://api.github.com/users/ruzhnikov/followers", "following_url": "https://api.github.com/users/ruzhnikov/following{/other_user}", "gists_url": "https://api.github.com/users/ruzhnikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruzhnikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruzhnikov/subscriptions", "organizations_url": "https://api.github.com/users/ruzhnikov/orgs", "repos_url": "https://api.github.com/users/ruzhnikov/repos", "events_url": "https://api.github.com/users/ruzhnikov/events{/privacy}", "received_events_url": "https://api.github.com/users/ruzhnikov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-19T12:54:37Z", "updated_at": "2019-10-19T13:28:13Z", "closed_at": "2019-10-19T13:27:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's needed to upgrade minimal required version of urllib3 at least to 1.10, because on version 1.9.1 it doesn't work(see below).\r\n\r\nI tested on Debian 8 with python 3.4. By default, from DEB packages version urllib3-1.9.1 installed. So, I tried to init sentry and capture exception:\r\n```\r\n$ python3 -m pip show urllib3\r\nName: urllib3\r\nVersion: 1.9.1\r\nSummary: HTTP library with thread-safe connection pooling, file post, and more.\r\nHome-page: http://urllib3.readthedocs.org/\r\nAuthor: Andrey Petrov\r\nAuthor-email: andrey.petrov@shazow.net\r\nLicense: MIT\r\nLocation: /usr/lib/python3/dist-packages\r\nRequires: \r\nRequired-by: sentry-sdk\r\n\r\n$ python3\r\nPython 3.4.2 (default, Sep 14 2019, 00:52:38) \r\n[GCC 4.9.2] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> \r\n>>> \r\n>>> \r\n>>> import sentry_sdk\r\n>>> \r\n>>> \r\n>>> sentry_sdk.init(dsn=\"https://{}@{}/{}\".format(sentry_token, sentry_server, sentry_project), debug=True)\r\n [sentry] DEBUG: Setting up integrations (with default = True)\r\n [sentry] DEBUG: Setting up previously not enabled integration modules\r\n [sentry] DEBUG: Setting up previously not enabled integration dedupe\r\n [sentry] DEBUG: Setting up previously not enabled integration argv\r\n [sentry] DEBUG: Setting up previously not enabled integration excepthook\r\n [sentry] DEBUG: Setting up previously not enabled integration stdlib\r\n [sentry] DEBUG: Setting up previously not enabled integration threading\r\n [sentry] DEBUG: Setting up previously not enabled integration atexit\r\n [sentry] DEBUG: Setting up previously not enabled integration logging\r\n [sentry] DEBUG: Enabling integration modules\r\n [sentry] DEBUG: Enabling integration dedupe\r\n [sentry] DEBUG: Enabling integration argv\r\n [sentry] DEBUG: Enabling integration excepthook\r\n [sentry] DEBUG: Enabling integration stdlib\r\n [sentry] DEBUG: Enabling integration threading\r\n [sentry] DEBUG: Enabling integration atexit\r\n [sentry] DEBUG: Enabling integration logging\r\n<sentry_sdk.hub._InitGuard object at 0x7f2be72fca58>\r\n>>> sentry_sdk.capture_exception(Exception(\"123\"))\r\n'b8117d5f256b46cd93f9d54a651609c1'\r\n [sentry] DEBUG: Sending event, type:null level:error event_id:b8117d5f256b46cd93f9d54a651609c1 project:20 host:....\r\n>>>  [sentry] ERROR: Internal error in sentry_sdk\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.4/dist-packages/sentry_sdk/utils.py\", line 50, in capture_internal_exceptions\r\n    yield\r\n  File \"/usr/local/lib/python3.4/dist-packages/sentry_sdk/transport.py\", line 208, in send_event_wrapper\r\n    self._send_event(event)\r\n  File \"/usr/local/lib/python3.4/dist-packages/sentry_sdk/transport.py\", line 143, in _send_event\r\n    \"Content-Encoding\": \"gzip\",\r\n  File \"/usr/lib/python3/dist-packages/urllib3/request.py\", line 72, in request\r\n    **urlopen_kw)\r\n  File \"/usr/lib/python3/dist-packages/urllib3/request.py\", line 135, in request_encode_body\r\n    **urlopen_kw)\r\nTypeError: urlopen() got multiple values for keyword argument 'body'\r\n```\r\nOk, doesn't work. Let's try to use next version of urllib3:\r\n```\r\n$ python3 -m pip install --upgrade --user urllib3==1.10\r\nCollecting urllib3==1.10\r\n...\r\nInstalling collected packages: urllib3\r\nSuccessfully installed urllib3-1.10\r\n\r\n$ python3 -m pip show urllib3\r\nName: urllib3\r\nVersion: 1.10\r\nSummary: HTTP library with thread-safe connection pooling, file post, and more.\r\nHome-page: http://urllib3.readthedocs.org/\r\nAuthor: Andrey Petrov\r\nAuthor-email: andrey.petrov@shazow.net\r\nLicense: MIT\r\nLocation: /user/.local/lib/python3.4/site-packages\r\nRequires: \r\nRequired-by: sentry-sdk\r\n\r\n$ python3\r\nPython 3.4.2 (default, Sep 14 2019, 00:52:38) \r\n[GCC 4.9.2] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import sentry_sdk\r\n>>> sentry_sdk.init(dsn=\"https://{}@{}/{}\".format(sentry_token, sentry_server, sentry_project), debug=True)\r\n [sentry] DEBUG: Setting up integrations (with default = True)\r\n [sentry] DEBUG: Setting up previously not enabled integration excepthook\r\n [sentry] DEBUG: Setting up previously not enabled integration threading\r\n [sentry] DEBUG: Setting up previously not enabled integration dedupe\r\n [sentry] DEBUG: Setting up previously not enabled integration logging\r\n [sentry] DEBUG: Setting up previously not enabled integration stdlib\r\n [sentry] DEBUG: Setting up previously not enabled integration modules\r\n [sentry] DEBUG: Setting up previously not enabled integration argv\r\n [sentry] DEBUG: Setting up previously not enabled integration atexit\r\n [sentry] DEBUG: Enabling integration excepthook\r\n [sentry] DEBUG: Enabling integration threading\r\n [sentry] DEBUG: Enabling integration dedupe\r\n [sentry] DEBUG: Enabling integration logging\r\n [sentry] DEBUG: Enabling integration stdlib\r\n [sentry] DEBUG: Enabling integration modules\r\n [sentry] DEBUG: Enabling integration argv\r\n [sentry] DEBUG: Enabling integration atexit\r\n<sentry_sdk.hub._InitGuard object at 0x7f699d1d0a90>\r\n>>> \r\n>>> \r\n>>> sentry_sdk.capture_exception(Exception(\"123\"))\r\n'7d0ad529c76947ecb787fa1f3aa6ca58'\r\n [sentry] DEBUG: Sending event, type:null level:error event_id:7d0ad529c76947ecb787fa1f3aa6ca58 project:20 host:.....\r\n>>> \r\n```\r\n\r\nWorks perfectly! Please, do changes in your setup.py file. I spent on this bug almost all my work day)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/534", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/534/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/534/events", "html_url": "https://github.com/getsentry/sentry-python/issues/534", "id": 508441244, "node_id": "MDU6SXNzdWU1MDg0NDEyNDQ=", "number": 534, "title": "How do I send a manual exception in python?", "user": {"login": "abkiran", "id": 12979788, "node_id": "MDQ6VXNlcjEyOTc5Nzg4", "avatar_url": "https://avatars0.githubusercontent.com/u/12979788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abkiran", "html_url": "https://github.com/abkiran", "followers_url": "https://api.github.com/users/abkiran/followers", "following_url": "https://api.github.com/users/abkiran/following{/other_user}", "gists_url": "https://api.github.com/users/abkiran/gists{/gist_id}", "starred_url": "https://api.github.com/users/abkiran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abkiran/subscriptions", "organizations_url": "https://api.github.com/users/abkiran/orgs", "repos_url": "https://api.github.com/users/abkiran/repos", "events_url": "https://api.github.com/users/abkiran/events{/privacy}", "received_events_url": "https://api.github.com/users/abkiran/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-17T12:28:05Z", "updated_at": "2019-10-17T20:06:32Z", "closed_at": "2019-10-17T20:06:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I'm using a try-catch block, when it fails in the try, I want manual send the exception info using sentry. \r\n\r\nExactly like this in Java\r\nhttps://docs.sentry.io/clients/java/usage/\r\n\r\n```\r\ntry {\r\n            unsafeMethod();\r\n        } catch (Exception e) {\r\n            // This sends an exception event to Sentry.\r\n            sentry.sendException(e);\r\n        }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/528", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/528/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/528/events", "html_url": "https://github.com/getsentry/sentry-python/issues/528", "id": 505518680, "node_id": "MDU6SXNzdWU1MDU1MTg2ODA=", "number": 528, "title": "Invalid project in DSN 2019", "user": {"login": "chicks-net", "id": 1099609, "node_id": "MDQ6VXNlcjEwOTk2MDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1099609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chicks-net", "html_url": "https://github.com/chicks-net", "followers_url": "https://api.github.com/users/chicks-net/followers", "following_url": "https://api.github.com/users/chicks-net/following{/other_user}", "gists_url": "https://api.github.com/users/chicks-net/gists{/gist_id}", "starred_url": "https://api.github.com/users/chicks-net/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chicks-net/subscriptions", "organizations_url": "https://api.github.com/users/chicks-net/orgs", "repos_url": "https://api.github.com/users/chicks-net/repos", "events_url": "https://api.github.com/users/chicks-net/events{/privacy}", "received_events_url": "https://api.github.com/users/chicks-net/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-10T21:23:12Z", "updated_at": "2019-10-10T21:49:52Z", "closed_at": "2019-10-10T21:32:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to run the sample code to get started with Sentry in Python, but even with just calling `init()` I get `sentry_sdk.utils.BadDsn: Invalid project in DSN ('Internal')`.  In looking at the code it seems this field is expected to be numeric, but with Sentry 8.21 I have named non-numeric projects.  I also get this error when I try a non-Internal project: `sentry_sdk.utils.BadDsn: Invalid project in DSN ('Firefly')`.  So how can I find the numeric project ID or get sentry-python to accept a non-numeric one?\r\n\r\nThis is not the same issue as #87 since my URL in `/manage/settings/` has no slash on the end.\r\n\r\nVersions:\r\n* sentry-sdk 0.12.3\r\n* python 3.6.8\r\n* pipenv 2018.11.26\r\n* Sentry 8.21", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/525", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/525/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/525/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/525/events", "html_url": "https://github.com/getsentry/sentry-python/issues/525", "id": 502842792, "node_id": "MDU6SXNzdWU1MDI4NDI3OTI=", "number": 525, "title": "SuspiciousOperation being ignored and still showing up", "user": {"login": "kingbuzzman", "id": 329820, "node_id": "MDQ6VXNlcjMyOTgyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/329820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kingbuzzman", "html_url": "https://github.com/kingbuzzman", "followers_url": "https://api.github.com/users/kingbuzzman/followers", "following_url": "https://api.github.com/users/kingbuzzman/following{/other_user}", "gists_url": "https://api.github.com/users/kingbuzzman/gists{/gist_id}", "starred_url": "https://api.github.com/users/kingbuzzman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kingbuzzman/subscriptions", "organizations_url": "https://api.github.com/users/kingbuzzman/orgs", "repos_url": "https://api.github.com/users/kingbuzzman/repos", "events_url": "https://api.github.com/users/kingbuzzman/events{/privacy}", "received_events_url": "https://api.github.com/users/kingbuzzman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1167050501, "node_id": "MDU6TGFiZWwxMTY3MDUwNTAx", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/needs-information", "name": "needs-information", "color": "e4e669", "default": false, "description": ""}, {"id": 968428657, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTc=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-04T21:01:34Z", "updated_at": "2019-10-17T19:04:14Z", "closed_at": "2019-10-17T19:04:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using sentry-sdk==0.11.2\r\n\r\n```\r\nignore_errors = [\r\n     ....\r\n    'django.security.SuspiciousOperation',\r\n    'django.core.exceptions.SuspiciousOperation',\r\n    'rest_framework.exceptions.NotAuthenticated',\r\n]\r\n\r\nsentry_sdk.init(\r\n    dsn=os.getenv('SENTRY_DSN'),\r\n    environment=ENVIRONMENT,\r\n    release=os.getenv('SENTRY_RELEASE'),\r\n    integrations=[DjangoIntegration()],\r\n    ignore_errors=ignore_errors,\r\n    before_send=before_send\r\n)\r\n```\r\n\r\nHow to reproduce:\r\n\r\nmodify `.../site-packages/django/contrib/sessions/middleware.py` ~line 59\r\n\r\n```\r\n                        try:\r\n                            request.session.save()\r\n                        except UpdateError:\r\n```\r\n\r\nto \r\n\r\n```\r\n                        try:\r\n                            raise UpdateError\r\n                            request.session.save()\r\n                        except UpdateError:\r\n```\r\n\r\nand log in.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/520", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/520/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/520/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/520/events", "html_url": "https://github.com/getsentry/sentry-python/issues/520", "id": 501194499, "node_id": "MDU6SXNzdWU1MDExOTQ0OTk=", "number": 520, "title": "`start_span` in `hub.py` isn't thread safe", "user": {"login": "lobsterkatie", "id": 14812505, "node_id": "MDQ6VXNlcjE0ODEyNTA1", "avatar_url": "https://avatars0.githubusercontent.com/u/14812505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lobsterkatie", "html_url": "https://github.com/lobsterkatie", "followers_url": "https://api.github.com/users/lobsterkatie/followers", "following_url": "https://api.github.com/users/lobsterkatie/following{/other_user}", "gists_url": "https://api.github.com/users/lobsterkatie/gists{/gist_id}", "starred_url": "https://api.github.com/users/lobsterkatie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lobsterkatie/subscriptions", "organizations_url": "https://api.github.com/users/lobsterkatie/orgs", "repos_url": "https://api.github.com/users/lobsterkatie/repos", "events_url": "https://api.github.com/users/lobsterkatie/events{/privacy}", "received_events_url": "https://api.github.com/users/lobsterkatie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-01T23:24:02Z", "updated_at": "2019-10-09T06:42:34Z", "closed_at": "2019-10-09T06:42:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A customer reports:\r\n\r\n>Sometimes getting error:\r\n>`'NoneType' object has no attribute 'new_span'`\r\n>which is coming from the Sentry library.\r\n>\r\n>I believe the method `start_span` in `hub.py` isn't thread safe because `scope.span` can be set to `None` between the call\r\n>`if scope.span is not None:`\r\n>and\r\n>`span = scope.span.new_span(**kwargs)`\r\n\r\nUsing `sentry.python 0.12.2` in a Turbogears application\r\nConfig:\r\n```python\r\nsentry_logging = LoggingIntegration(event_level=logging.CRITICAL)\r\nsentry_sdk.init(\r\n    'https://**********@sentry.io/******',\r\n    integrations=[sentry_logging], \r\n    attach_stacktrace=True\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/515", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/515/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/515/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/515/events", "html_url": "https://github.com/getsentry/sentry-python/issues/515", "id": 498547113, "node_id": "MDU6SXNzdWU0OTg1NDcxMTM=", "number": 515, "title": "running Gunicorn with Django Channels2 installed in library got RuntimeError  ", "user": {"login": "DrChai", "id": 1713574, "node_id": "MDQ6VXNlcjE3MTM1NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1713574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrChai", "html_url": "https://github.com/DrChai", "followers_url": "https://api.github.com/users/DrChai/followers", "following_url": "https://api.github.com/users/DrChai/following{/other_user}", "gists_url": "https://api.github.com/users/DrChai/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrChai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrChai/subscriptions", "organizations_url": "https://api.github.com/users/DrChai/orgs", "repos_url": "https://api.github.com/users/DrChai/repos", "events_url": "https://api.github.com/users/DrChai/events{/privacy}", "received_events_url": "https://api.github.com/users/DrChai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-09-25T22:03:52Z", "updated_at": "2019-10-02T13:52:54Z", "closed_at": "2019-10-02T13:47:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have one Django project that is running behind Gunicorn(wsgi) and Channels2(asgi) for handling HTTP and WebSocket separately. \r\nRunning Gunicorn would raise a [RuntimeError](https://github.com/getsentry/sentry-python/blob/534757568767dca79f623309cf5c529fc505e81e/sentry_sdk/integrations/django/__init__.py#L285https://github.com/getsentry/sentry-python/blob/534757568767dca79f623309cf5c529fc505e81e/sentry_sdk/integrations/django/__init__.py#L285): \r\n` RuntimeError(\r\n            \"We detected that you are using Django channels 2.0. To get proper \"\r\n            \"instrumentation for ASGI requests, the Sentry SDK requires \"\r\n            \"Python 3.7+ or the aiocontextvars package from PyPI.\"\r\n        )`\r\nEither upgrading to py3.7 or Installing `aiocontextvars` would not solve the problem.\r\nIt looks that `_patch_channels()` https://github.com/getsentry/sentry-python/blob/534757568767dca79f623309cf5c529fc505e81e/sentry_sdk/integrations/django/__init__.py#L276 will be called anyway during initialization, and `HAS_REAL_CONTEXTVARS` is False because of gevent is installed\r\nRelated libraries and versions:\r\n[packages]\r\n\r\nDjango==2.2.3\r\nchannels==2.3.0\r\naiocontextvars==0.2.2\r\ngevent==1.4.0\r\ngunicorn==19.9.0\r\n\r\n[requires]\r\npython_version = \"3.6\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/512", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/512/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/512/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/512/events", "html_url": "https://github.com/getsentry/sentry-python/issues/512", "id": 497626305, "node_id": "MDU6SXNzdWU0OTc2MjYzMDU=", "number": 512, "title": "Error while formatting traced unicode-encoded sql query", "user": {"login": "min0ru", "id": 1928457, "node_id": "MDQ6VXNlcjE5Mjg0NTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1928457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/min0ru", "html_url": "https://github.com/min0ru", "followers_url": "https://api.github.com/users/min0ru/followers", "following_url": "https://api.github.com/users/min0ru/following{/other_user}", "gists_url": "https://api.github.com/users/min0ru/gists{/gist_id}", "starred_url": "https://api.github.com/users/min0ru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/min0ru/subscriptions", "organizations_url": "https://api.github.com/users/min0ru/orgs", "repos_url": "https://api.github.com/users/min0ru/repos", "events_url": "https://api.github.com/users/min0ru/events{/privacy}", "received_events_url": "https://api.github.com/users/min0ru/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-24T11:25:08Z", "updated_at": "2019-10-02T13:52:38Z", "closed_at": "2019-10-02T13:48:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using raw sql query views in our Django 1.9 project. That queries could be unicode objects with unicode symbols in it. Database that is used with project is Oracle Database Standard 12.2.\r\n\r\nThere is problem with sentry_sdk sql tracer when we are using DjangoIntegration module with our project. It causes our code to fail with error:\r\n\r\n(part of related python exception trace)\r\n  File \"/srv/app/local/lib/python2.7/site-packages/sentry_sdk/integrations/django/__init__.py\", line 393, in execute\r\n    hub, self.cursor, sql, params, paramstyle=\"format\", executemany=False\r\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\r\n    return self.gen.next()\r\n  File \"/srv/app/local/lib/python2.7/site-packages/sentry_sdk/tracing.py\", line 363, in record_sql_queries\r\n    query = _format_sql(cursor, query)\r\n  File \"/srv/app/local/lib/python2.7/site-packages/sentry_sdk/tracing.py\", line 344, in _format_sql\r\n    return real_sql or str(sql)\r\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 134-141: ordinal not in range(128)\r\n\r\nProblem is that _format_sql tries to convert unicode object (sql = u'select foo from bar;') into str object.\r\n\r\nThis simple code inside _format_sql function fixed problem for me:\r\n\r\n>     if isinstance(sql, unicode):\r\n>         sql = sql.encode('utf-8')\r\n\r\nBut maybe that is not best fix for that problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/508", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/508/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/508/events", "html_url": "https://github.com/getsentry/sentry-python/issues/508", "id": 497029066, "node_id": "MDU6SXNzdWU0OTcwMjkwNjY=", "number": 508, "title": "Aiohttp integration ignore X-Forwarded-For and X-Real-IP.", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-23T11:00:50Z", "updated_at": "2019-09-24T13:13:01Z", "closed_at": "2019-09-24T13:13:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "In dashboard  `X-Forwarded-For` and `X-Real-IP `is empty. Why?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/507", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/507/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/507/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/507/events", "html_url": "https://github.com/getsentry/sentry-python/issues/507", "id": 496488547, "node_id": "MDU6SXNzdWU0OTY0ODg1NDc=", "number": 507, "title": "Memory leak when using celery and django with bulk queries", "user": {"login": "MickVermeulen", "id": 22911950, "node_id": "MDQ6VXNlcjIyOTExOTUw", "avatar_url": "https://avatars1.githubusercontent.com/u/22911950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MickVermeulen", "html_url": "https://github.com/MickVermeulen", "followers_url": "https://api.github.com/users/MickVermeulen/followers", "following_url": "https://api.github.com/users/MickVermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/MickVermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/MickVermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MickVermeulen/subscriptions", "organizations_url": "https://api.github.com/users/MickVermeulen/orgs", "repos_url": "https://api.github.com/users/MickVermeulen/repos", "events_url": "https://api.github.com/users/MickVermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/MickVermeulen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-20T18:26:24Z", "updated_at": "2019-09-20T18:51:22Z", "closed_at": "2019-09-20T18:51:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! Recently I discovered that our celery server kept running out of memory in production. We have a Celery server that fetches ~1.000.000 products from a feed and then bulk-upserts them in batches of 15.000 into our database. As you can imagine, these bulk upsert queries are massive SQL queries: about 15MB each.\r\n\r\nFor some reason, Django logs these queries, which are then kept in memory by Sentry. This meant that after a run of 1.000.000 products, 1000MB of memory would be used. I know for certain that this leak was caused by Sentry, I used heapy to find the SQL queries in memory and discovered that the massive strings were owned by a Sentry instance.\r\n\r\nFor now, we have Sentry turned off on our Celery servers and now all memory issues are resolved. Of course, this is not ideal. Sadly, I haven't been able to pinpoint where the memory leak originates from.\r\n\r\nSome more info regarding our setup:\r\n- We are running Django with `Debug=False`\r\n- `conn_max_age` is not defined\r\n- Both `gc.collect()` and `django.db.reset_queries()` do not resolve the issue\r\n\r\n(Part of) our venv:\r\n```\r\ndjango==2.1.3\r\ndjango-elasticsearch-dsl==0.5.1\r\nelasticsearch-dsl==6.1.0\r\npsycopg2-binary==2.7.5\r\ngunicorn==19.9.0\r\ncelery==4.3.0\r\ndjango-celery-beat==1.5.0\r\ndjango-postgres-extra==1.22\r\n```\r\n\r\nWe use `django-postgres-extra` for the bulk-upsert operations.\r\n\r\nI hope we can resolve this issue such that we can run Sentry again in production!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/505", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/505/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/505/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/505/events", "html_url": "https://github.com/getsentry/sentry-python/issues/505", "id": 496364459, "node_id": "MDU6SXNzdWU0OTYzNjQ0NTk=", "number": 505, "title": "lifespan protocol not implemented?", "user": {"login": "Trim21", "id": 13553903, "node_id": "MDQ6VXNlcjEzNTUzOTAz", "avatar_url": "https://avatars1.githubusercontent.com/u/13553903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Trim21", "html_url": "https://github.com/Trim21", "followers_url": "https://api.github.com/users/Trim21/followers", "following_url": "https://api.github.com/users/Trim21/following{/other_user}", "gists_url": "https://api.github.com/users/Trim21/gists{/gist_id}", "starred_url": "https://api.github.com/users/Trim21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Trim21/subscriptions", "organizations_url": "https://api.github.com/users/Trim21/orgs", "repos_url": "https://api.github.com/users/Trim21/repos", "events_url": "https://api.github.com/users/Trim21/events{/privacy}", "received_events_url": "https://api.github.com/users/Trim21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-09-20T13:50:32Z", "updated_at": "2019-09-27T12:54:04Z", "closed_at": "2019-09-22T10:22:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Offical spec https://asgi.readthedocs.io/en/latest/specs/lifespan.html\r\n\r\nI'm using uvicorn and fastapi. I originally using [encode/sentry-asgi](https://github.com/encode/sentry-asgi) and these days I found that there is a AsgiMiddleware in sentry-sdk. So i try to start using `sentry_sdk.integrations.asgi.SentryAsgiMiddleware` But I got\r\n\r\n```bash\r\nINFO: ASGI 'lifespan' protocol appears unsupported.\r\n```\r\nI got this error in asyncio debug mode:\r\n```\r\nWARNING: Executing <Task pending coro=<Server.serve() running at C:\\Users\\Trim21\\.venv\\www\\lib\\site-packages\\uvicorn\\main.py:322> wait_for=<Future pending cb=[<TaskWakeupMethWrapper object at 0x0000019878C3C468>()] created at C:\\Users\\Trim21\\AppData\\Local\\Programs\\Python\\Python37\\lib\\asyncio\\base_events.py:391> cb=[_run_until_complete_cb() at C:\\Users\\Trim21\\AppData\\Local\\Programs\\Python\\Python37\\lib\\asyncio\\base_events.py:153] created at C:\\Users\\Trim21\\AppData\\Local\\Programs\\Python\\Python37\\lib\\asyncio\\base_events.py:558> took 1.265 seconds\r\nERROR: Exception in 'lifespan' protocol\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Trim21\\.venv\\www\\lib\\site-packages\\uvicorn\\lifespan\\on.py\", line 44, in main\r\n    await app(scope, self.receive, self.send)\r\n  File \"C:\\Users\\Trim21\\.venv\\www\\lib\\site-packages\\starlette\\applications.py\", line 133, in __call__\r\n    await self.error_middleware(scope, receive, send)\r\n  File \"C:\\Users\\Trim21\\.venv\\www\\lib\\site-packages\\starlette\\middleware\\errors.py\", line 142, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"C:\\Users\\Trim21\\.venv\\www\\lib\\site-packages\\starlette\\middleware\\base.py\", line 21, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"C:\\Users\\Trim21\\.venv\\www\\lib\\site-packages\\starlette\\middleware\\base.py\", line 21, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \".\\app\\middlewares\\log.py\", line 12, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"C:\\Users\\Trim21\\.venv\\www\\lib\\site-packages\\sentry_sdk\\integrations\\asgi.py\", line 71, in _run_app\r\n    span = Span.continue_from_headers(dict(scope[\"headers\"]))\r\nKeyError: 'headers'\r\n```\r\n\r\nIt's not a http event so there is no `headers` key in scope\r\n\r\nenv:\r\n```\r\nuvicorn version: 0.8.6\r\nfastapi version: 0.38.1\r\npython version: 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]\r\nsentry-sdk version: 0.12.1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/504", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/504/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/504/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/504/events", "html_url": "https://github.com/getsentry/sentry-python/issues/504", "id": 496228413, "node_id": "MDU6SXNzdWU0OTYyMjg0MTM=", "number": 504, "title": "Integration support for Django 1.4 broken in version 0.12.0", "user": {"login": "champ", "id": 289748, "node_id": "MDQ6VXNlcjI4OTc0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/289748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/champ", "html_url": "https://github.com/champ", "followers_url": "https://api.github.com/users/champ/followers", "following_url": "https://api.github.com/users/champ/following{/other_user}", "gists_url": "https://api.github.com/users/champ/gists{/gist_id}", "starred_url": "https://api.github.com/users/champ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/champ/subscriptions", "organizations_url": "https://api.github.com/users/champ/orgs", "repos_url": "https://api.github.com/users/champ/repos", "events_url": "https://api.github.com/users/champ/events{/privacy}", "received_events_url": "https://api.github.com/users/champ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-20T08:49:57Z", "updated_at": "2019-10-23T00:56:20Z", "closed_at": "2019-10-02T13:53:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nSupport for Django versions 1.4. and 1.5 (at least) using the Django integration was broken in version 0.12.0 .\r\nExample output when using Django `manage.py` in Django 1.4:\r\n```\r\nFile \"/usr/local/lib/python2.7/site-packages/sentry_sdk/hub.py\", line 84, in _init\r\n    client = Client(*args, **kwargs)  # type: ignore\r\n  File \"/usr/local/lib/python2.7/site-packages/sentry_sdk/client.py\", line 80, in __init__\r\n    self._init_impl()\r\n  File \"/usr/local/lib/python2.7/site-packages/sentry_sdk/client.py\", line 108, in _init_impl\r\n    with_defaults=self.options[\"default_integrations\"],\r\n  File \"/usr/local/lib/python2.7/site-packages/sentry_sdk/integrations/__init__.py\", line 82, in setup_integrations\r\n    type(integration).setup_once()\r\n  File \"/usr/local/lib/python2.7/site-packages/sentry_sdk/integrations/django/__init__.py\", line 216, in setup_once\r\n    patch_django_middlewares()\r\n  File \"/usr/local/lib/python2.7/site-packages/sentry_sdk/integrations/django/middleware.py\", line 27, in patch_django_middlewares\r\n    old_import_string = getattr(base, import_string_name)\r\nAttributeError: 'module' object has no attribute 'import_by_path'\r\n```\r\nCompatibilitiy can easily be fixed detecting versions prior to Django 1.6 and using `django.core.handlers.base.import_module` instead of `django.core.handlers.base.import_by_path` (used for Django versions prior to 1.7).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/501", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/501/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/501/events", "html_url": "https://github.com/getsentry/sentry-python/issues/501", "id": 494218211, "node_id": "MDU6SXNzdWU0OTQyMTgyMTE=", "number": 501, "title": "Create custom tags doesn't work ", "user": {"login": "ivancarrancho", "id": 13756563, "node_id": "MDQ6VXNlcjEzNzU2NTYz", "avatar_url": "https://avatars1.githubusercontent.com/u/13756563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivancarrancho", "html_url": "https://github.com/ivancarrancho", "followers_url": "https://api.github.com/users/ivancarrancho/followers", "following_url": "https://api.github.com/users/ivancarrancho/following{/other_user}", "gists_url": "https://api.github.com/users/ivancarrancho/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivancarrancho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivancarrancho/subscriptions", "organizations_url": "https://api.github.com/users/ivancarrancho/orgs", "repos_url": "https://api.github.com/users/ivancarrancho/repos", "events_url": "https://api.github.com/users/ivancarrancho/events{/privacy}", "received_events_url": "https://api.github.com/users/ivancarrancho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-16T18:53:23Z", "updated_at": "2019-09-16T22:56:51Z", "closed_at": "2019-09-16T22:56:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, i'm trying to log a new custom tag with the name `project` but in the slack notification just appear the original tags (like logger),\r\n\r\nIn sentry if I put:\r\n![Sentry](https://user-images.githubusercontent.com/13756563/64977788-b3c22b80-d879-11e9-9f8a-48a91420e8d6.png)\r\n\r\n![Slack___capek-dev___Capek___1_nuevo_elemento](https://user-images.githubusercontent.com/13756563/64984881-5504ae00-d889-11e9-8a77-a638feb9d451.png)\r\n\r\n* _doesn't work ^_\r\n\r\nbut if use  a `logger` tag:\r\n![Sentry](https://user-images.githubusercontent.com/13756563/64977825-c3417480-d879-11e9-97ec-c02afce1ca0b.png)\r\n\r\n![Slack___capek-dev___Capek](https://user-images.githubusercontent.com/13756563/64984423-75803880-d888-11e9-9551-4724c742abba.png)\r\n\r\n\r\n* _`logger` is a custom tag, works fine! ^_\r\n\r\n##\u00a0creating a custom tag\r\n\r\n*Mode 1*\r\ni'm working on python with flask and try to create the custom tag on that way:\r\n![Untitled-1_\u2014_renovacion-urbana-full-stack](https://user-images.githubusercontent.com/13756563/64977539-372f4d00-d879-11e9-9430-59c87f0b3dba.png)\r\n\r\n*Mode 2*\r\n![Untitled-1_\u2014_renovacion-urbana-full-stack](https://user-images.githubusercontent.com/13756563/64977524-30083f00-d879-11e9-8d1e-c5cf025d2963.png)\r\n\r\nneither of these cases work for me, what i'm doing bad?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/495", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/495/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/495/events", "html_url": "https://github.com/getsentry/sentry-python/issues/495", "id": 488795049, "node_id": "MDU6SXNzdWU0ODg3OTUwNDk=", "number": 495, "title": "Apparent memory leak with Django integration", "user": {"login": "agronick", "id": 2042303, "node_id": "MDQ6VXNlcjIwNDIzMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2042303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agronick", "html_url": "https://github.com/agronick", "followers_url": "https://api.github.com/users/agronick/followers", "following_url": "https://api.github.com/users/agronick/following{/other_user}", "gists_url": "https://api.github.com/users/agronick/gists{/gist_id}", "starred_url": "https://api.github.com/users/agronick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agronick/subscriptions", "organizations_url": "https://api.github.com/users/agronick/orgs", "repos_url": "https://api.github.com/users/agronick/repos", "events_url": "https://api.github.com/users/agronick/events{/privacy}", "received_events_url": "https://api.github.com/users/agronick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1167050501, "node_id": "MDU6TGFiZWwxMTY3MDUwNTAx", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/needs-information", "name": "needs-information", "color": "e4e669", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2019-09-03T20:00:45Z", "updated_at": "2019-11-19T09:45:27Z", "closed_at": "2019-11-19T09:45:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a Django Channels application that steadily increases with memory over time. I have mem_top installed and some of my largest objects are lists of `_make_event_processor()` functions. This list is added through  `add_event_processor()` in `Scope`. I can place a print function to print the size of the list in `add_event_processor()` and it just gets larger and larger. I don't see the list being made smaller ever. There appears to be one global scope that never has it's list made smaller or dereferenced. \r\n\r\nI came up with the following monkey patch to try to fix it. I think this mokey patch implements what was supposed to be the intended behavior. That is, having `sentry_patched_get_response()` use a `with` statement in `hub.configure_scope()` to get a clean scope with an empty `_event_processors` list.\r\n\r\n```\r\ndef patch_broken_scope():\r\n    from contextlib import contextmanager\r\n\r\n    orig_configure_scope = sentry_sdk.hub.Hub.configure_scope\r\n\r\n    @contextmanager\r\n    def config_scope_patch(*args, **kwargs):\r\n        as_content = orig_configure_scope(*args, **kwargs)\r\n        scope = as_content.__enter__()\r\n        scope._event_processors = []\r\n        try:\r\n            yield scope\r\n        finally:\r\n            as_content.__exit__(None, None, None)\r\n\r\n    sentry_sdk.hub.Hub.configure_scope = config_scope_patch\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/493", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/493/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/493/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/493/events", "html_url": "https://github.com/getsentry/sentry-python/issues/493", "id": 488151285, "node_id": "MDU6SXNzdWU0ODgxNTEyODU=", "number": 493, "title": "last_event_id is not cleared after request finish with Flask integration", "user": {"login": "kamilglod", "id": 8168459, "node_id": "MDQ6VXNlcjgxNjg0NTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/8168459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamilglod", "html_url": "https://github.com/kamilglod", "followers_url": "https://api.github.com/users/kamilglod/followers", "following_url": "https://api.github.com/users/kamilglod/following{/other_user}", "gists_url": "https://api.github.com/users/kamilglod/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamilglod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamilglod/subscriptions", "organizations_url": "https://api.github.com/users/kamilglod/orgs", "repos_url": "https://api.github.com/users/kamilglod/repos", "events_url": "https://api.github.com/users/kamilglod/events{/privacy}", "received_events_url": "https://api.github.com/users/kamilglod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-02T11:51:54Z", "updated_at": "2019-09-02T15:07:32Z", "closed_at": "2019-09-02T15:07:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was expecting that `last_event_id` for Flask integration will be assigned to `flask.g` or will have other implementation working in the same way that for another successful request `last_event_id` will be `None`.\r\n \r\nCurrently after `capture_exception`, `last_event_id` returns the same value regardless of there are any error during the request. Is this an expected behaviour or it is a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/491", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/491/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/491/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/491/events", "html_url": "https://github.com/getsentry/sentry-python/issues/491", "id": 487013043, "node_id": "MDU6SXNzdWU0ODcwMTMwNDM=", "number": 491, "title": "Apache Spark integration", "user": {"login": "harpaj", "id": 5003144, "node_id": "MDQ6VXNlcjUwMDMxNDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/5003144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harpaj", "html_url": "https://github.com/harpaj", "followers_url": "https://api.github.com/users/harpaj/followers", "following_url": "https://api.github.com/users/harpaj/following{/other_user}", "gists_url": "https://api.github.com/users/harpaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/harpaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harpaj/subscriptions", "organizations_url": "https://api.github.com/users/harpaj/orgs", "repos_url": "https://api.github.com/users/harpaj/repos", "events_url": "https://api.github.com/users/harpaj/events{/privacy}", "received_events_url": "https://api.github.com/users/harpaj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428653, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTM=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}, {"id": 1089711264, "node_id": "MDU6TGFiZWwxMDg5NzExMjY0", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/new-integration", "name": "new-integration", "color": "28ed12", "default": false, "description": "Integrating with a new framework or library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-29T15:00:31Z", "updated_at": "2019-10-17T22:23:35Z", "closed_at": "2019-10-17T21:57:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the recently released integration for Apache Beam and the general push of [Sentry for Data Pipelines](https://sentry.io/for/data/) - is there an integration of Sentry with Apache Spark (especially with PySpark) planned?\r\n\r\nhttps://github.com/apache/spark/pull/20151 explicitly mentions that one reason for creating that PR was to make a Sentry integration easier. However, I didn't manage to even find some example code for using Sentry to capture Spark errors, and so far I failed when trying to build an integration using the feature introduced by the PR myself.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/488", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/488/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/488/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/488/events", "html_url": "https://github.com/getsentry/sentry-python/issues/488", "id": 486604222, "node_id": "MDU6SXNzdWU0ODY2MDQyMjI=", "number": 488, "title": "Sentry SDK log user information", "user": {"login": "braunsonm", "id": 5280764, "node_id": "MDQ6VXNlcjUyODA3NjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5280764?v=4", "gravatar_id": "", "url": "https://api.github.com/users/braunsonm", "html_url": "https://github.com/braunsonm", "followers_url": "https://api.github.com/users/braunsonm/followers", "following_url": "https://api.github.com/users/braunsonm/following{/other_user}", "gists_url": "https://api.github.com/users/braunsonm/gists{/gist_id}", "starred_url": "https://api.github.com/users/braunsonm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/braunsonm/subscriptions", "organizations_url": "https://api.github.com/users/braunsonm/orgs", "repos_url": "https://api.github.com/users/braunsonm/repos", "events_url": "https://api.github.com/users/braunsonm/events{/privacy}", "received_events_url": "https://api.github.com/users/braunsonm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-28T20:54:52Z", "updated_at": "2019-08-28T20:56:31Z", "closed_at": "2019-08-28T20:56:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "For the Django integration, the SDK should log what user was logged in and their IP. Right now it seems to just log the IP, but the IP is not correct.\r\n\r\nThe IP that sentry logs is the IP that the server is hosts from, if I log the REMOTE_ADDR from Django I can see it has the correct client IP.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/487", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/487/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/487/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/487/events", "html_url": "https://github.com/getsentry/sentry-python/issues/487", "id": 486546547, "node_id": "MDU6SXNzdWU0ODY1NDY1NDc=", "number": 487, "title": "#434 breaks on threads where `run` is not a method", "user": {"login": "bfontaine", "id": 1334295, "node_id": "MDQ6VXNlcjEzMzQyOTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1334295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bfontaine", "html_url": "https://github.com/bfontaine", "followers_url": "https://api.github.com/users/bfontaine/followers", "following_url": "https://api.github.com/users/bfontaine/following{/other_user}", "gists_url": "https://api.github.com/users/bfontaine/gists{/gist_id}", "starred_url": "https://api.github.com/users/bfontaine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bfontaine/subscriptions", "organizations_url": "https://api.github.com/users/bfontaine/orgs", "repos_url": "https://api.github.com/users/bfontaine/repos", "events_url": "https://api.github.com/users/bfontaine/events{/privacy}", "received_events_url": "https://api.github.com/users/bfontaine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-28T18:41:39Z", "updated_at": "2019-10-02T13:53:53Z", "closed_at": "2019-10-02T13:53:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "The patching code added in #434 breaks if the `run` attribute on a thread is not a method.\r\n\r\nI\u2019m using `sentry-sdk==0.11.1` with Python 3.7.4.\r\n\r\nPut the following code in `demo.py`:\r\n```python3\r\nimport sentry_sdk\r\nfrom sentry_sdk.integrations.threading import ThreadingIntegration\r\n\r\nsentry_sdk.init(default_integrations=False, integrations=[ThreadingIntegration()])\r\n\r\nfrom threading import Thread\r\n\r\nclass MyThread(Thread):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.run = lambda: print(\"hello\")\r\n\r\nt = MyThread()\r\nt.start()\r\nt.join()\r\n```\r\n\r\nRun `python3 demo.py`:\r\n```\r\nTraceback (most recent call last):\r\n  File \"demo.py\", line 18, in <module>\r\n    t.start()\r\n  File \"/myapp/venv/lib/python3.7/site-packages/sentry_sdk/integrations/threading.py\", line 41, in sentry_start\r\n    self.run = _wrap_run(hub_, self.run.__func__)\r\nAttributeError: 'function' object has no attribute '__func__'\r\n```\r\n\r\nRemove Sentry:\r\n```python3\r\nfrom threading import Thread\r\n\r\nclass MyThread(Thread):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.run = lambda: print(\"hello\")\r\n\r\nt = MyThread()\r\nt.start()\r\nt.join()\r\n```\r\nRun it again: `python3 demo.py`\r\n```\r\nhello\r\n```\r\n\r\nIt runs fine.\r\n\r\n----\r\nThe issue is that the patching code relies on `self.run.__func__` but [that attribute is only defined on **methods**, not on **functions**](https://docs.python.org/3/library/inspect.html#types-and-members).\r\n\r\nYou can see that with this code:\r\n```pycon\r\n>>> class A():\r\n...     def f(self):\r\n...             pass\r\n...     def set_f(self):\r\n...             self.f = lambda _: 42\r\n...\r\n>>> a = A()\r\n>>> a.f.__func__\r\n<function A.f at 0x106dfaef0>\r\n>>> a.set_f()\r\n>>> a.f.__func__\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: 'function' object has no attribute '__func__'\r\n```\r\n\r\nAccording to [the Python docs](https://docs.python.org/3/library/inspect.html#inspect.ismethoddescriptor), one can call `inspect.ismethod` on an object to check if it\u2019s a method and so if it has a `___func__` attribute (you could even use `hasattr`).\r\n\r\nI haven\u2019t tested it, but I believe something like this would do the job:\r\n```python3\r\nrun_function = self.run.__func__ if inspect.ismethod(self.run) else self.run\r\nself.run = _wrap_run(hub_, run_function)\r\n```\r\n\r\nNote that this `self.run` assigment code (already in the patch) transforms `self.run` in a function rather than a method if it were one before, meaning that in my example code `MyThread().run.__func__` is defined only if I don\u2019t use Sentry (or at least its `Thread` integration).\r\n\r\n-----\r\n\r\nWhat do you think? I can move forward and make a pull-request with a test and a fix if the solution above suits you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/485", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/485/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/485/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/485/events", "html_url": "https://github.com/getsentry/sentry-python/issues/485", "id": 485803474, "node_id": "MDU6SXNzdWU0ODU4MDM0NzQ=", "number": 485, "title": "redis integration creates incomplete/empty breadcrumbs", "user": {"login": "Birne94", "id": 617722, "node_id": "MDQ6VXNlcjYxNzcyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/617722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Birne94", "html_url": "https://github.com/Birne94", "followers_url": "https://api.github.com/users/Birne94/followers", "following_url": "https://api.github.com/users/Birne94/following{/other_user}", "gists_url": "https://api.github.com/users/Birne94/gists{/gist_id}", "starred_url": "https://api.github.com/users/Birne94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Birne94/subscriptions", "organizations_url": "https://api.github.com/users/Birne94/orgs", "repos_url": "https://api.github.com/users/Birne94/repos", "events_url": "https://api.github.com/users/Birne94/events{/privacy}", "received_events_url": "https://api.github.com/users/Birne94/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-27T13:15:04Z", "updated_at": "2019-09-02T20:16:12Z", "closed_at": "2019-09-02T20:16:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using the [redis integration](https://docs.sentry.io/platforms/python/redis/) (sentry-sdk 0.11.1), we are not seeing the executed query in the breadcrumbs. Instead, some of the entries are empty, some only contain the accessed key (commands executed are `SET`, `EVALSHA` and `SET` again):\r\n\r\n<img width=\"803\" alt=\"Screen Shot 2019-08-27 at 15 07 59\" src=\"https://user-images.githubusercontent.com/617722/63773997-9f26ef00-c8dc-11e9-836b-b2c9d8608440.png\">\r\n\r\nThe event data contains the following entries:\r\n\r\n```yml\r\n{\r\n    \"breadcrumbs\": {\r\n        \"values\": [\r\n            {\r\n                \"category\": \"redis\",\r\n                \"timestamp\": 1566910541.535,\r\n                \"type\": \"redis\",\r\n                \"data\": {\r\n                    \"redis.key\": \"<my-key>:0dec1124-2216-42d9-9e20-f0535ed70e04\"\r\n                },\r\n                \"level\": \"info\"\r\n            },\r\n            {\r\n                \"category\": \"redis\",\r\n                \"timestamp\": 1566910541.588,\r\n                \"type\": \"redis\",\r\n                \"level\": \"info\"\r\n            },\r\n            {\r\n                \"category\": \"redis\",\r\n                \"timestamp\": 1566910541.607,\r\n                \"type\": \"redis\",\r\n                \"data\": {\r\n                    \"redis.key\": \"<my-key>:0dec1124-2216-42d9-9e20-f0535ed70e04\"\r\n                },\r\n                \"level\": \"info\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/483", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/483/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/483/events", "html_url": "https://github.com/getsentry/sentry-python/issues/483", "id": 485510916, "node_id": "MDU6SXNzdWU0ODU1MTA5MTY=", "number": 483, "title": "Integration for websockets based servers", "user": {"login": "bsergean", "id": 11857745, "node_id": "MDQ6VXNlcjExODU3NzQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/11857745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bsergean", "html_url": "https://github.com/bsergean", "followers_url": "https://api.github.com/users/bsergean/followers", "following_url": "https://api.github.com/users/bsergean/following{/other_user}", "gists_url": "https://api.github.com/users/bsergean/gists{/gist_id}", "starred_url": "https://api.github.com/users/bsergean/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bsergean/subscriptions", "organizations_url": "https://api.github.com/users/bsergean/orgs", "repos_url": "https://api.github.com/users/bsergean/repos", "events_url": "https://api.github.com/users/bsergean/events{/privacy}", "received_events_url": "https://api.github.com/users/bsergean/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428653, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTM=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}, {"id": 968428654, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTQ=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/help%20wanted", "name": "help wanted", "color": "008672", "default": true, "description": "Extra attention is needed"}, {"id": 1089711264, "node_id": "MDU6TGFiZWwxMDg5NzExMjY0", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/new-integration", "name": "new-integration", "color": "28ed12", "default": false, "description": "Integrating with a new framework or library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-08-27T00:00:40Z", "updated_at": "2019-12-26T06:30:54Z", "closed_at": "2019-12-26T06:30:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the awesome [websockets](https://websockets.readthedocs.io/en/stable/) library for my [messaging thing](https://github.com/machinezone/cobra) and I wonder what kind of default integrations could be made.\r\n\r\nI know that you guys support ASGI / Starlette, and those seem to be compatible with websocket servers, so I'm curious about the kind of goodness you can add there.\r\n\r\n(Essentially one problem I have now is that I'm getting some weird crashes in zlib for some clients, and I'd like to get some basic info about the connection that died (like getting the http headers that were used to connect for example, like the User-Agent).\r\n\r\nThanks for any input !\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/481", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/481/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/481/events", "html_url": "https://github.com/getsentry/sentry-python/issues/481", "id": 485264352, "node_id": "MDU6SXNzdWU0ODUyNjQzNTI=", "number": 481, "title": "Django mechanism should not log PermissionDenied", "user": {"login": "WhyNotHugo", "id": 730811, "node_id": "MDQ6VXNlcjczMDgxMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/730811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WhyNotHugo", "html_url": "https://github.com/WhyNotHugo", "followers_url": "https://api.github.com/users/WhyNotHugo/followers", "following_url": "https://api.github.com/users/WhyNotHugo/following{/other_user}", "gists_url": "https://api.github.com/users/WhyNotHugo/gists{/gist_id}", "starred_url": "https://api.github.com/users/WhyNotHugo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WhyNotHugo/subscriptions", "organizations_url": "https://api.github.com/users/WhyNotHugo/orgs", "repos_url": "https://api.github.com/users/WhyNotHugo/repos", "events_url": "https://api.github.com/users/WhyNotHugo/events{/privacy}", "received_events_url": "https://api.github.com/users/WhyNotHugo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1167050501, "node_id": "MDU6TGFiZWwxMTY3MDUwNTAx", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/needs-information", "name": "needs-information", "color": "e4e669", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-26T14:23:37Z", "updated_at": "2020-06-17T08:56:38Z", "closed_at": "2020-06-17T08:54:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Raising `PermissionDenied` in django is a shortcut to returning 403.\r\n\r\nThis shouldn't be logged by default, since it's normal behaviour. It [does](https://sentry.io/organizations/hobarrera/issues/1163570899/?project=124552&referrer=RegressionActivityEmail) get logged however.\r\n\r\nAlso, my event has no `logger`, so I'm not even sure how to manually ignore it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/480", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/480/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/480/events", "html_url": "https://github.com/getsentry/sentry-python/issues/480", "id": 484806988, "node_id": "MDU6SXNzdWU0ODQ4MDY5ODg=", "number": 480, "title": "logger.exception does not send error to sentry with new sdk django integration", "user": {"login": "darahsten", "id": 7501274, "node_id": "MDQ6VXNlcjc1MDEyNzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/7501274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darahsten", "html_url": "https://github.com/darahsten", "followers_url": "https://api.github.com/users/darahsten/followers", "following_url": "https://api.github.com/users/darahsten/following{/other_user}", "gists_url": "https://api.github.com/users/darahsten/gists{/gist_id}", "starred_url": "https://api.github.com/users/darahsten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darahsten/subscriptions", "organizations_url": "https://api.github.com/users/darahsten/orgs", "repos_url": "https://api.github.com/users/darahsten/repos", "events_url": "https://api.github.com/users/darahsten/events{/privacy}", "received_events_url": "https://api.github.com/users/darahsten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-24T11:20:09Z", "updated_at": "2019-08-27T12:02:25Z", "closed_at": "2019-08-27T12:02:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "When sentry is configured with the new sdk in the default format in this format.\r\n```import sentry_sdk\r\nfrom sentry_sdk.integrations.django import DjangoIntegration\r\nsentry_sdk.init(\r\n  dsn=\"https://<key>@sentry.io/<project>\",\r\n  integrations=[DjangoIntegration()]\r\n)\r\n```\r\n\r\nlogs are not sent when `logger.exception` is called. The only way to get logs to captured by\r\nsentry is to use `capture_exception` or to do customised logging as suggested in the post [https://github.com/getsentry/sentry-python/issues/365](Issue) #Not tested it my self.\r\n\r\nThis implies that one has to replace all instances of `logger.exception` with `capture_exception` or `capture_message` if one wants to do an upgrade to the new sentry_dsn format.\r\n\r\nI have made a minimal project demonstrating this [https://github.com/darahsten/sentry_nologger_demo](url).\r\n\r\nYou can see the discussion [https://stackoverflow.com/questions/57274935/configuring-sentry-handler-for-django-with-new-sentry-sdk-without-raven/57294650#57294650](url)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/473", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/473/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/473/events", "html_url": "https://github.com/getsentry/sentry-python/issues/473", "id": 482086849, "node_id": "MDU6SXNzdWU0ODIwODY4NDk=", "number": 473, "title": "Event reporting within child process does not work without time.sleep", "user": {"login": "vzts", "id": 27868171, "node_id": "MDQ6VXNlcjI3ODY4MTcx", "avatar_url": "https://avatars3.githubusercontent.com/u/27868171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vzts", "html_url": "https://github.com/vzts", "followers_url": "https://api.github.com/users/vzts/followers", "following_url": "https://api.github.com/users/vzts/following{/other_user}", "gists_url": "https://api.github.com/users/vzts/gists{/gist_id}", "starred_url": "https://api.github.com/users/vzts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vzts/subscriptions", "organizations_url": "https://api.github.com/users/vzts/orgs", "repos_url": "https://api.github.com/users/vzts/repos", "events_url": "https://api.github.com/users/vzts/events{/privacy}", "received_events_url": "https://api.github.com/users/vzts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-19T03:26:25Z", "updated_at": "2019-08-19T11:23:38Z", "closed_at": "2019-08-19T08:09:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport sentry_sdk\r\nfrom multiprocessing import Process\r\nfrom time import sleep\r\n\r\n\r\ndef child_process():\r\n    try:\r\n        test_child = 1 / 0\r\n    except Exception as e:\r\n        sentry_sdk.capture_exception(e)\r\n        sleep(1)  # I have to give this sleep\r\n\r\n\r\nsentry_sdk.init(\r\n    '...',\r\n    debug=True\r\n)\r\nproc = Process(target=child_process)\r\nproc.start()\r\nproc.join()\r\n```\r\nWithout giving sleep, the event reporting is not correctly triggered. Why is this? Is it because the worker thread is a daemon thread? (but I have tried to comment [`self._thread.setDaemon(True)`](https://github.com/getsentry/sentry-python/blob/master/sentry_sdk/worker.py#L66) out, but it still shows the same symptom)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/472", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/472/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/472/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/472/events", "html_url": "https://github.com/getsentry/sentry-python/issues/472", "id": 481940261, "node_id": "MDU6SXNzdWU0ODE5NDAyNjE=", "number": 472, "title": "AssertionError Need to set transaction when entering span!", "user": {"login": "aveeday", "id": 1748693, "node_id": "MDQ6VXNlcjE3NDg2OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1748693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aveeday", "html_url": "https://github.com/aveeday", "followers_url": "https://api.github.com/users/aveeday/followers", "following_url": "https://api.github.com/users/aveeday/following{/other_user}", "gists_url": "https://api.github.com/users/aveeday/gists{/gist_id}", "starred_url": "https://api.github.com/users/aveeday/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aveeday/subscriptions", "organizations_url": "https://api.github.com/users/aveeday/orgs", "repos_url": "https://api.github.com/users/aveeday/repos", "events_url": "https://api.github.com/users/aveeday/events{/privacy}", "received_events_url": "https://api.github.com/users/aveeday/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-18T00:51:17Z", "updated_at": "2019-08-21T21:41:08Z", "closed_at": "2019-08-21T21:41:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "After upgrading from sentry-sdk 0.10.2 to sentry-sdk-0.11.0 I received many errors with next text:\r\n```\r\nAssertionError\r\nNeed to set transaction when entering span!\r\n```\r\nSometimes some requests leads to that error, but after repeating the same ones they work without error\r\n\r\nasgiref                  3.1.2\r\nchannels                 2.2.0     \r\nchannels-redis           2.4.0\r\nDjango                   2.2.4\r\ndjangorestframework      3.9.1\r\npsycopg2-binary          2.8.3\r\nredis                    2.10.6\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/471", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/471/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/471/events", "html_url": "https://github.com/getsentry/sentry-python/issues/471", "id": 481664385, "node_id": "MDU6SXNzdWU0ODE2NjQzODU=", "number": 471, "title": "Celery - Queue object has no attribute  'all_tasks_done'", "user": {"login": "oji", "id": 1176268, "node_id": "MDQ6VXNlcjExNzYyNjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1176268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oji", "html_url": "https://github.com/oji", "followers_url": "https://api.github.com/users/oji/followers", "following_url": "https://api.github.com/users/oji/following{/other_user}", "gists_url": "https://api.github.com/users/oji/gists{/gist_id}", "starred_url": "https://api.github.com/users/oji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oji/subscriptions", "organizations_url": "https://api.github.com/users/oji/orgs", "repos_url": "https://api.github.com/users/oji/repos", "events_url": "https://api.github.com/users/oji/events{/privacy}", "received_events_url": "https://api.github.com/users/oji/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-16T15:30:00Z", "updated_at": "2019-08-28T07:38:42Z", "closed_at": "2019-08-28T07:38:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all, \r\n\r\nI'm integrating Sentry on a project in python that uses Celery. I'm getting this error when shutting down the worker: \r\n\r\n```\r\nError in atexit._run_exitfuncs:\r\nTraceback (most recent call last):\r\n  File \"/Users/jibanez/API/.conda/envs/cimrender/lib/python3.6/site-packages/sentry_sdk/worker.py\", line 84, in flush\r\n    self._wait_flush(timeout, callback)\r\n  File \"/Users/jibanez/API/.conda/envs/cimrender/lib/python3.6/site-packages/sentry_sdk/worker.py\", line 90, in _wait_flush\r\n    if not self._timed_queue_join(initial_timeout):\r\n  File \"/Users/jibanez/API/.conda/envs/cimrender/lib/python3.6/site-packages/sentry_sdk/worker.py\", line 48, in _timed_queue_join\r\n    queue.all_tasks_done.acquire()  # type: ignore\r\nAttributeError: 'Queue' object has no attribute 'all_tasks_done'\r\n```\r\n\r\nI'm using: \r\n- Python 3.6\r\n- Celery 4.3.0\r\n- OSX Mojave\r\n\r\nAny thoughts? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/469", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/469/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/469/events", "html_url": "https://github.com/getsentry/sentry-python/issues/469", "id": 480566434, "node_id": "MDU6SXNzdWU0ODA1NjY0MzQ=", "number": 469, "title": "Recursive serializer stackoverflow error when serializing an object that logs on iteration", "user": {"login": "alexmick", "id": 926312, "node_id": "MDQ6VXNlcjkyNjMxMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/926312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexmick", "html_url": "https://github.com/alexmick", "followers_url": "https://api.github.com/users/alexmick/followers", "following_url": "https://api.github.com/users/alexmick/following{/other_user}", "gists_url": "https://api.github.com/users/alexmick/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexmick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexmick/subscriptions", "organizations_url": "https://api.github.com/users/alexmick/orgs", "repos_url": "https://api.github.com/users/alexmick/repos", "events_url": "https://api.github.com/users/alexmick/events{/privacy}", "received_events_url": "https://api.github.com/users/alexmick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-14T09:09:02Z", "updated_at": "2019-08-14T14:10:43Z", "closed_at": "2019-08-14T14:10:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently having a problem with the SDKs integrated serialisation of local variables for sending with events.\r\nI have in my local variables, an object that is a `Mapping` but that sometimes raises an event when keys are accessed. This is a normal behavior, since keys are lazy loaded and my code handles these correctly. However, when an event occurs and this variable is serialized for sending to sentry, the sdk iterates over all my keys and causes an infinite recursion.\r\n\r\nMinimal code te reproduce :\r\n```python\r\nimport logging\r\nfrom collections.abc import Sequence\r\nimport sentry_sdk\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass MyGenerator(Sequence):\r\n    def __init__(self):\r\n        self.values = [1, 2, 3]\r\n        Sequence.__init__(self)\r\n    \r\n    def __iter__(self):\r\n        for value in self.values:\r\n            yield value\r\n        logger.error(f\"No values left\", exc_info=True)\r\n\r\n    def __len__(self):\r\n        \"\"\"List length\"\"\"\r\n        return len(self.values)\r\n        \r\n    def __getitem__(self, ii):\r\n        \"\"\"Get a list item\"\"\"\r\n        return self.values[ii]\r\n    \r\n\r\nif __name__ == \"__main__\":\r\n    sentry_sdk.init(\r\n        dsn=\"[DSN]\"\r\n    )\r\n\r\n    gen = MyGenerator()\r\n\r\n    logger.error(\"Testing\", exc_info=True)\r\n```\r\n\r\nThe only quick solution I found is to set `with_locals=False` on the sdk but it's a pity to lack all this functionality because of this case.\r\nOn the other hand, I'm not sure how the SDK could anticipate such problems, here's what I'm thinking:\r\n* The SDK could check how deep in recursion it is when serializing and stop when it notices it's handling a log that was generated while handling an other log.\r\n* In the same way that exceptions that occur when deserializing trigger `<failed to serialize, use init(debug=True) to see error logs>`, all logs could be disregarded\r\n* In some cases it could be problematic that sentry iterates over those variables altogether (for example, emptying a generator when it should still have values available) and for those maybe a `serialize_ignore_classes=[MyDangerousClass]` on the SDK init could avoid interference with such classes.\r\n\r\nHappy to open a PR to follow-up on this when a proper solution is found !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/459", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/459/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/459/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/459/events", "html_url": "https://github.com/getsentry/sentry-python/issues/459", "id": 478649908, "node_id": "MDU6SXNzdWU0Nzg2NDk5MDg=", "number": 459, "title": "Use unparsed query for descriptions from Django ORM", "user": {"login": "dcramer", "id": 23610, "node_id": "MDQ6VXNlcjIzNjEw", "avatar_url": "https://avatars0.githubusercontent.com/u/23610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcramer", "html_url": "https://github.com/dcramer", "followers_url": "https://api.github.com/users/dcramer/followers", "following_url": "https://api.github.com/users/dcramer/following{/other_user}", "gists_url": "https://api.github.com/users/dcramer/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcramer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcramer/subscriptions", "organizations_url": "https://api.github.com/users/dcramer/orgs", "repos_url": "https://api.github.com/users/dcramer/repos", "events_url": "https://api.github.com/users/dcramer/events{/privacy}", "received_events_url": "https://api.github.com/users/dcramer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428653, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTM=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-08T19:32:44Z", "updated_at": "2019-08-14T14:33:00Z", "closed_at": "2019-08-14T14:32:59Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "By using the parsed query we inject params which might be sensitive or PII (which then means we'd have to strip the whole description). Right now we dont have scrubbing on spans, but if it did it would make a bunch of them fairly useless.\r\n\r\nI think we should either:\r\n\r\n- Change the description to be 100% unparsed (so placeholder variables)\r\n- Change the description to be [statement type] [tables] (SELECT table1, table2)\r\n\r\nWe can still keep parameters in the context and apply data scrubbing logic there.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/442", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/442/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/442/events", "html_url": "https://github.com/getsentry/sentry-python/issues/442", "id": 473120475, "node_id": "MDU6SXNzdWU0NzMxMjA0NzU=", "number": 442, "title": "sentry-sdk is being suppressed by Honeycomb beeline (Django)", "user": {"login": "fitzoh", "id": 131809, "node_id": "MDQ6VXNlcjEzMTgwOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/131809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fitzoh", "html_url": "https://github.com/fitzoh", "followers_url": "https://api.github.com/users/fitzoh/followers", "following_url": "https://api.github.com/users/fitzoh/following{/other_user}", "gists_url": "https://api.github.com/users/fitzoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fitzoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fitzoh/subscriptions", "organizations_url": "https://api.github.com/users/fitzoh/orgs", "repos_url": "https://api.github.com/users/fitzoh/repos", "events_url": "https://api.github.com/users/fitzoh/events{/privacy}", "received_events_url": "https://api.github.com/users/fitzoh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-26T00:11:43Z", "updated_at": "2019-08-05T08:03:23Z", "closed_at": "2019-07-31T01:05:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "In a similar vein to #438 , it looks like the honeycomb.io agent ([beeline-python](https://github.com/honeycombio/beeline-python) ([beeline issue](https://github.com/honeycombio/beeline-python/issues/71))) is preventing sentry from reporting.\r\n\r\nDetails:\r\nI'm activating sentry in the top of settings.py ([docs](https://docs.sentry.io/platforms/python/django/))\r\n```\r\nsentry_sdk.init(\r\n    dsn=dsn,\r\n    environment=env,\r\n    integrations=[DjangoIntegration()],\r\n)\r\n```\r\n\r\nbeeline is being initialized in the gunicorn config file ([docs](https://docs.honeycomb.io/getting-data-in/python/beeline/#gunicorn))\r\n```\r\ndef post_worker_init(worker):\r\n    beeline.init(\r\n        writekey=honeycomb_key,\r\n        dataset=dataset,\r\n        service_name=service\r\n    )\r\n```\r\n\r\n\r\nI can manually send events via `capture_message` and friends, but automatic error reporting doesn't work unless honeycomb is removed.\r\n\r\n\r\nPartially redacted requirements.txt\r\n```\r\nDjango~=2.1.9\r\ndjangorestframework~=3.9.1\r\ngunicorn~=19.9.0\r\nsentry-sdk~=0.10.2\r\nhoneycomb-beeline~=2.6.1\r\nlibhoney~=1.8.0\r\nstatsd~=3.3.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/441", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/441/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/441/events", "html_url": "https://github.com/getsentry/sentry-python/issues/441", "id": 472130091, "node_id": "MDU6SXNzdWU0NzIxMzAwOTE=", "number": 441, "title": "logging breadcrumb collection time is incorrect", "user": {"login": "karliy", "id": 28345280, "node_id": "MDQ6VXNlcjI4MzQ1Mjgw", "avatar_url": "https://avatars1.githubusercontent.com/u/28345280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karliy", "html_url": "https://github.com/karliy", "followers_url": "https://api.github.com/users/karliy/followers", "following_url": "https://api.github.com/users/karliy/following{/other_user}", "gists_url": "https://api.github.com/users/karliy/gists{/gist_id}", "starred_url": "https://api.github.com/users/karliy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karliy/subscriptions", "organizations_url": "https://api.github.com/users/karliy/orgs", "repos_url": "https://api.github.com/users/karliy/repos", "events_url": "https://api.github.com/users/karliy/events{/privacy}", "received_events_url": "https://api.github.com/users/karliy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-24T07:46:14Z", "updated_at": "2019-08-14T14:32:07Z", "closed_at": "2019-08-10T13:17:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n![sentry](https://user-images.githubusercontent.com/28345280/61774444-71f0a800-ae29-11e9-8074-f3c88154b432.png)\r\n\r\nI found the breadcrumbs timestamp converted to the local time zone\r\ndatetime.datetime.fromtimestamp(record.created)\r\n\r\n> ```python\r\n> # /sentry_sdk/integrations/logging.py:90\r\n> def _breadcrumb_from_record(record):\r\n>     # type: (LogRecord) -> Dict[str, Any]\r\n>     return {\r\n>         \"ty\": \"log\",\r\n>         \"level\": _logging_to_event_level(record.levelname),\r\n>         \"category\": record.name,\r\n>         \"message\": record.message,\r\n>         \"timestamp\": datetime.datetime.fromtimestamp(record.created),\r\n>         \"data\": _extra_from_record(record),\r\n>     }\r\n> ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/438", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/438/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/438/events", "html_url": "https://github.com/getsentry/sentry-python/issues/438", "id": 469286680, "node_id": "MDU6SXNzdWU0NjkyODY2ODA=", "number": 438, "title": "sentry-sdk is being suppressed by the Elastic APM", "user": {"login": "msamoylov", "id": 106813, "node_id": "MDQ6VXNlcjEwNjgxMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/106813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msamoylov", "html_url": "https://github.com/msamoylov", "followers_url": "https://api.github.com/users/msamoylov/followers", "following_url": "https://api.github.com/users/msamoylov/following{/other_user}", "gists_url": "https://api.github.com/users/msamoylov/gists{/gist_id}", "starred_url": "https://api.github.com/users/msamoylov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msamoylov/subscriptions", "organizations_url": "https://api.github.com/users/msamoylov/orgs", "repos_url": "https://api.github.com/users/msamoylov/repos", "events_url": "https://api.github.com/users/msamoylov/events{/privacy}", "received_events_url": "https://api.github.com/users/msamoylov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-07-17T15:25:54Z", "updated_at": "2019-12-20T11:57:18Z", "closed_at": "2019-12-20T11:53:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have both sentry-sdk and [apm-agent-python](https://github.com/elastic/apm-agent-python) installed. For some reason our [Django configuration](https://docs.sentry.io/platforms/python/django/) has stopped capturing any view errors, but Celery is still fully covered.\r\n\r\nAny ideas how to fix that? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/436", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/436/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/436/events", "html_url": "https://github.com/getsentry/sentry-python/issues/436", "id": 468969028, "node_id": "MDU6SXNzdWU0Njg5NjkwMjg=", "number": 436, "title": "Problem with Popen arguments passed as map", "user": {"login": "lorinkoz", "id": 3628106, "node_id": "MDQ6VXNlcjM2MjgxMDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3628106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorinkoz", "html_url": "https://github.com/lorinkoz", "followers_url": "https://api.github.com/users/lorinkoz/followers", "following_url": "https://api.github.com/users/lorinkoz/following{/other_user}", "gists_url": "https://api.github.com/users/lorinkoz/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorinkoz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorinkoz/subscriptions", "organizations_url": "https://api.github.com/users/lorinkoz/orgs", "repos_url": "https://api.github.com/users/lorinkoz/repos", "events_url": "https://api.github.com/users/lorinkoz/events{/privacy}", "received_events_url": "https://api.github.com/users/lorinkoz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-17T03:38:02Z", "updated_at": "2019-08-07T07:36:55Z", "closed_at": "2019-08-07T07:36:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Greetings!\r\n\r\nI am having an issue when using the package `sorl.thumbnail` on a Django project. That package produces thumbnails from images using system installed programs (called engines.)\r\n\r\nWhen `sorl.thumbnail` makes a `Popen` call here:\r\n\r\nhttps://github.com/jazzband/sorl-thumbnail/blob/22ccd9781462a820f963f57018ad3dcef85053ed/sorl/thumbnail/engines/convert_engine.py#L57\r\n\r\nThe arguments that are received in your patched `Popen` are not being interpreted correctly. This is the suspect of the problem:\r\n\r\nhttps://github.com/getsentry/sentry-python/blob/2c0a2ea96882adf69742bd7e79e588564ff5b85c/sentry_sdk/integrations/stdlib.py#L143\r\n\r\nArguments are handled in such a way that the original `popen` crashes when trying to access `args[0]`, as the `args` parameter is interpreted (or actually becomes) an empty list.\r\n\r\nIn my opinion, the problem arises because in `sorl.thumbnail` the arguments to `Popen` are passed to a `map` function first, so that a `map` object is what gets passed as arguments. I am not sure what's the effect of a `map` object being received in your `*a` of the patched `Popen`.\r\n\r\nHere's the relevant part of the traceback I am getting:\r\n\r\n```\r\nFile \"/mnt/d/Proyectos/ginseng/.venv/lib/python3.6/site-packages/sorl/thumbnail/base.py\", line 131, in get_thumbnail\r\n    thumbnail)\r\n  File \"/mnt/d/Proyectos/ginseng/.venv/lib/python3.6/site-packages/sorl/thumbnail/base.py\", line 164, in _create_thumbnail\r\n    default.engine.write(image, options, thumbnail)\r\n  File \"/mnt/d/Proyectos/ginseng/.venv/lib/python3.6/site-packages/sorl/thumbnail/engines/convert_engine.py\", line 57, in write\r\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\r\n  File \"/mnt/d/Proyectos/ginseng/.venv/lib/python3.6/site-packages/sentry_sdk/integrations/stdlib.py\", line 165, in sentry_patched_popen_init\r\n    return old_popen_init(self, *a, **kw)\r\n  File \"/usr/lib/python3.6/subprocess.py\", line 729, in __init__\r\n    restore_signals, start_new_session)\r\n  File \"/usr/lib/python3.6/subprocess.py\", line 1248, in _execute_child\r\n    executable = args[0]\r\nIndexError: list index out of range\r\n```\r\n\r\nIf I remove the Sentry integration altogether from the Django project, `sorl.thumbnail` is able to effectively call `Popen` with the \"mapped\" arguments, and everything works.\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/430", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/430/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/430/events", "html_url": "https://github.com/getsentry/sentry-python/issues/430", "id": 467596311, "node_id": "MDU6SXNzdWU0Njc1OTYzMTE=", "number": 430, "title": "Accumulating memory usage with 0.10.x", "user": {"login": "reupen", "id": 12693549, "node_id": "MDQ6VXNlcjEyNjkzNTQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/12693549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reupen", "html_url": "https://github.com/reupen", "followers_url": "https://api.github.com/users/reupen/followers", "following_url": "https://api.github.com/users/reupen/following{/other_user}", "gists_url": "https://api.github.com/users/reupen/gists{/gist_id}", "starred_url": "https://api.github.com/users/reupen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reupen/subscriptions", "organizations_url": "https://api.github.com/users/reupen/orgs", "repos_url": "https://api.github.com/users/reupen/repos", "events_url": "https://api.github.com/users/reupen/events{/privacy}", "received_events_url": "https://api.github.com/users/reupen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-12T20:52:47Z", "updated_at": "2019-07-15T18:42:09Z", "closed_at": "2019-07-15T15:12:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following on from a discussion in #419, I am seeing increased memory usage over time with version 0.10.x.\r\n\r\nIn particular, I was hitting out-of-memory conditions with a long-running Celery task that uses the Django ORM.\r\n\r\nI used [`tracemalloc`](https://docs.python.org/3/library/tracemalloc.html) to take snapshots at the beginning and end of the task.\r\n\r\nUnder 0.10.1, here are the top 20 differences between the snapshots taken at the end and start of the task (with it running for four minutes):\r\n\r\n```\r\n/venv/lib/python3.7/site-packages/sentry_sdk/utils.py:746: size=33.6 MiB (+33.6 MiB), count=67076 (+67076), average=525 B\r\n/venv/lib/python3.7/site-packages/django/db/models/query.py:199: size=11.4 MiB (+11.3 MiB), count=73026 (+72307), average=164 B\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/compiler.py:472: size=10.7 MiB (+10.7 MiB), count=66784 (+66784), average=168 B\r\n/venv/lib/python3.7/site-packages/django/db/models/query.py:192: size=10.8 MiB (+10.7 MiB), count=67265 (+66702), average=168 B\r\n/venv/lib/python3.7/site-packages/sentry_sdk/tracing.py:123: size=9453 KiB (+9453 KiB), count=67215 (+67215), average=144 B\r\n/venv/lib/python3.7/site-packages/django/db/models/lookups.py:159: size=8197 KiB (+8197 KiB), count=131148 (+131148), average=64 B\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/query.py:307: size=6432 KiB (+6107 KiB), count=3093 (+2840), average=2129 B\r\n/venv/lib/python3.7/site-packages/django/db/models/lookups.py:19: size=4957 KiB (+4948 KiB), count=71804 (+71636), average=71 B\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/query.py:2197: size=4868 KiB (+4863 KiB), count=69230 (+69166), average=72 B\r\n/venv/lib/python3.7/site-packages/django/db/models/expressions.py:159: size=4815 KiB (+4782 KiB), count=68264 (+67877), average=72 B\r\n/venv/lib/python3.7/site-packages/sentry_sdk/hub.py:406: size=4710 KiB (+4710 KiB), count=66977 (+66977), average=72 B\r\n/venv/lib/python3.7/site-packages/sentry_sdk/tracing.py:89: size=4254 KiB (+4254 KiB), count=67019 (+67018), average=65 B\r\n/venv/lib/python3.7/site-packages/sentry_sdk/utils.py:753: size=3669 KiB (+3669 KiB), count=67072 (+67072), average=56 B\r\n/venv/lib/python3.7/site-packages/sentry_sdk/utils.py:194: size=2620 KiB (+2620 KiB), count=67069 (+67069), average=40 B\r\n/venv/lib/python3.7/site-packages/sentry_sdk/tracing.py:99: size=2618 KiB (+2618 KiB), count=67019 (+67018), average=40 B\r\n/venv/lib/python3.7/site-packages/sentry_sdk/tracing.py:186: size=2618 KiB (+2618 KiB), count=67018 (+67018), average=40 B\r\n/usr/lib/python3.7/uuid.py:204: size=2521 KiB (+2521 KiB), count=46067 (+46066), average=56 B\r\n/venv/lib/python3.7/site-packages/sentry_sdk/utils.py:736: size=2097 KiB (+2097 KiB), count=67068 (+67068), average=32 B\r\n/venv/lib/python3.7/site-packages/sentry_sdk/utils.py:723: size=2096 KiB (+2096 KiB), count=67067 (+67067), average=32 B\r\n/venv/lib/python3.7/site-packages/django/db/utils.py:96: size=1738 KiB (+1738 KiB), count=26978 (+26978), average=66 B\r\n```\r\n\r\nUnder 0.9.5, it looks like this:\r\n\r\n```\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/query.py:307: size=6432 KiB (+6107 KiB), count=3086 (+2833), average=2134 B\r\n/usr/lib/python3.7/uuid.py:204: size=2511 KiB (+2511 KiB), count=45919 (+45918), average=56 B\r\n/venv/lib/python3.7/site-packages/django/db/utils.py:96: size=1738 KiB (+1738 KiB), count=26976 (+26976), average=66 B\r\n/venv/lib/python3.7/site-packages/django/db/models/base.py:411: size=1696 KiB (+1696 KiB), count=11438 (+11438), average=152 B\r\n/venv/lib/python3.7/site-packages/psycopg2/extras.py:678: size=1256 KiB (+1256 KiB), count=22969 (+22967), average=56 B\r\n/usr/lib/python3.7/uuid.py:161: size=987 KiB (+987 KiB), count=22966 (+22966), average=44 B\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/datastructures.py:46: size=984 KiB (+886 KiB), count=13368 (+12044), average=75 B\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/query.py:310: size=882 KiB (+840 KiB), count=6025 (+5661), average=150 B\r\n/venv/lib/python3.7/site-packages/django/db/models/query.py:1231: size=870 KiB (+818 KiB), count=9018 (+8493), average=99 B\r\n/venv/lib/python3.7/site-packages/django/db/models/base.py:408: size=750 KiB (+750 KiB), count=7837 (+7837), average=98 B\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/datastructures.py:116: size=754 KiB (+732 KiB), count=8880 (+8509), average=87 B\r\n/venv/lib/python3.7/site-packages/django/db/models/query.py:199: size=747 KiB (+664 KiB), count=6387 (+5668), average=120 B\r\n/venv/lib/python3.7/site-packages/django/db/models/query.py:190: size=717 KiB (+664 KiB), count=6143 (+5666), average=119 B\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/query.py:337: size=702 KiB (+663 KiB), count=5999 (+5661), average=120 B\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/query.py:354: size=652 KiB (+620 KiB), count=2980 (+2832), average=224 B\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/query.py:311: size=645 KiB (+620 KiB), count=2950 (+2832), average=224 B\r\n/venv/lib/python3.7/site-packages/django/db/models/sql/query.py:309: size=618 KiB (+580 KiB), count=3844 (+3537), average=165 B\r\n/venv/lib/python3.7/site-packages/django/utils/deconstruct.py:17: size=762 KiB (+517 KiB), count=8924 (+4472), average=87 B\r\n/venv/lib/python3.7/site-packages/django/db/models/fields/related.py:664: size=555 KiB (+494 KiB), count=9637 (+8572), average=59 B\r\n/venv/lib/python3.7/site-packages/django/db/models/base.py:513: size=479 KiB (+479 KiB), count=7142 (+7142), average=69 B\r\n```\r\n\r\nDjango is on version 2.2.2, Python on 3.7.3.\r\n\r\nAre all the executed SQL statements being kept in memory?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/423", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/423/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/423/events", "html_url": "https://github.com/getsentry/sentry-python/issues/423", "id": 466619919, "node_id": "MDU6SXNzdWU0NjY2MTk5MTk=", "number": 423, "title": "Exception: raise OSError(\"handle is closed\")", "user": {"login": "GuangTianLi", "id": 24431425, "node_id": "MDQ6VXNlcjI0NDMxNDI1", "avatar_url": "https://avatars0.githubusercontent.com/u/24431425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuangTianLi", "html_url": "https://github.com/GuangTianLi", "followers_url": "https://api.github.com/users/GuangTianLi/followers", "following_url": "https://api.github.com/users/GuangTianLi/following{/other_user}", "gists_url": "https://api.github.com/users/GuangTianLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuangTianLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuangTianLi/subscriptions", "organizations_url": "https://api.github.com/users/GuangTianLi/orgs", "repos_url": "https://api.github.com/users/GuangTianLi/repos", "events_url": "https://api.github.com/users/GuangTianLi/events{/privacy}", "received_events_url": "https://api.github.com/users/GuangTianLi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 968428654, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTQ=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/help%20wanted", "name": "help wanted", "color": "008672", "default": true, "description": "Extra attention is needed"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-11T02:12:26Z", "updated_at": "2020-03-10T20:57:55Z", "closed_at": "2019-08-06T09:44:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I initialized sentry_sdk and used concurrent.futures.process.ProcessPoolExecutor, the exception will be raised after python exit.\r\n\r\n```\r\nfrom concurrent.futures.process import ProcessPoolExecutor\r\n\r\nimport sentry_sdk\r\n\r\nsentry_sdk.init(dsn=\"\")\r\n\r\n\r\ndef test():\r\n    ...\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    with ProcessPoolExecutor(max_workers=4) as worker:\r\n        worker.submit(test)\r\n```\r\n\r\nThe exception:\r\n```\r\nError in atexit._run_exitfuncs:\r\nTraceback (most recent call last):\r\n  File \"/Users/tony.li/miniconda3/lib/python3.7/concurrent/futures/process.py\", line 101, in _python_exit\r\n    thread_wakeup.wakeup()\r\n  File \"/Users/tony.li/miniconda3/lib/python3.7/concurrent/futures/process.py\", line 89, in wakeup\r\n    self._writer.send_bytes(b\"\")\r\n  File \"/Users/tony.li/miniconda3/lib/python3.7/multiprocessing/connection.py\", line 183, in send_bytes\r\n    self._check_closed()\r\n  File \"/Users/tony.li/miniconda3/lib/python3.7/multiprocessing/connection.py\", line 136, in _check_closed\r\n    raise OSError(\"handle is closed\")\r\nOSError: handle is closed\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/422", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/422/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/422/events", "html_url": "https://github.com/getsentry/sentry-python/issues/422", "id": 466544530, "node_id": "MDU6SXNzdWU0NjY1NDQ1MzA=", "number": 422, "title": "Sentry capturing excepted error", "user": {"login": "TheTechmo", "id": 16531607, "node_id": "MDQ6VXNlcjE2NTMxNjA3", "avatar_url": "https://avatars1.githubusercontent.com/u/16531607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheTechmo", "html_url": "https://github.com/TheTechmo", "followers_url": "https://api.github.com/users/TheTechmo/followers", "following_url": "https://api.github.com/users/TheTechmo/following{/other_user}", "gists_url": "https://api.github.com/users/TheTechmo/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheTechmo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheTechmo/subscriptions", "organizations_url": "https://api.github.com/users/TheTechmo/orgs", "repos_url": "https://api.github.com/users/TheTechmo/repos", "events_url": "https://api.github.com/users/TheTechmo/events{/privacy}", "received_events_url": "https://api.github.com/users/TheTechmo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-10T22:01:55Z", "updated_at": "2019-07-10T22:07:58Z", "closed_at": "2019-07-10T22:07:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "My application is raising BadArgument and it's getting caught by a try except but sentry is still capturing it.\r\n\r\n```\r\noptions = [cls.from_name, cls.from_id, cls.from_emoji]\r\nfor getter in options:\r\n\tobj = await getter(arg)\r\n\tif obj:\r\n\t\treturn obj\r\n\traise commands.BadArgument() # <-------\r\n\r\n@classmethod\r\nasync def get_all(cls):\r\n\tall_ = []\r\n```\r\n\r\nThen one level up...\r\n\r\n```\r\n            ret = await instance.convert(ctx, argument)\r\n            return ret\r\n        else:\r\n            method = getattr(converter, 'convert', None)\r\n            if method is not None and inspect.ismethod(method):\r\n                ret = await method(ctx, argument) # <------\r\n                return ret\r\n    elif isinstance(converter, converters.Converter):\r\n        ret = await converter.convert(ctx, argument)\r\n        return ret\r\nexcept CommandError: # <------\r\n```\r\n\r\nBadArgument is a child of CommandError.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/sentry-python/issues/421", "repository_url": "https://api.github.com/repos/getsentry/sentry-python", "labels_url": "https://api.github.com/repos/getsentry/sentry-python/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/sentry-python/issues/421/comments", "events_url": "https://api.github.com/repos/getsentry/sentry-python/issues/421/events", "html_url": "https://github.com/getsentry/sentry-python/issues/421", "id": 466413485, "node_id": "MDU6SXNzdWU0NjY0MTM0ODU=", "number": 421, "title": "Enforce functools.wraps on all monkeypatches", "user": {"login": "mumumumu", "id": 1393482, "node_id": "MDQ6VXNlcjEzOTM0ODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1393482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mumumumu", "html_url": "https://github.com/mumumumu", "followers_url": "https://api.github.com/users/mumumumu/followers", "following_url": "https://api.github.com/users/mumumumu/following{/other_user}", "gists_url": "https://api.github.com/users/mumumumu/gists{/gist_id}", "starred_url": "https://api.github.com/users/mumumumu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mumumumu/subscriptions", "organizations_url": "https://api.github.com/users/mumumumu/orgs", "repos_url": "https://api.github.com/users/mumumumu/repos", "events_url": "https://api.github.com/users/mumumumu/events{/privacy}", "received_events_url": "https://api.github.com/users/mumumumu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 968428651, "node_id": "MDU6TGFiZWw5Njg0Mjg2NTE=", "url": "https://api.github.com/repos/getsentry/sentry-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-10T16:46:03Z", "updated_at": "2019-07-15T15:12:31Z", "closed_at": "2019-07-15T15:12:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using [`celery-once`](https://github.com/cameronmaske/celery-once) to make sure some tasks are only run one at a time. The lock is acquired in `apply_async` and released in `after_return`. \r\n\r\nWhen I use the `CeleryIntegration` I'm not seeing any of the locks being released after the task has finished running. I'm not very familiar with the inner workings of celery, but any ideas what's going on?\r\n", "performed_via_github_app": null, "score": 1.0}]}