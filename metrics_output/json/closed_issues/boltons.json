{"total_count": 82, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/mahmoud/boltons/issues/263", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/263/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/263/events", "html_url": "https://github.com/mahmoud/boltons/issues/263", "id": 670052746, "node_id": "MDU6SXNzdWU2NzAwNTI3NDY=", "number": 263, "title": "reduce iterutils memory usage by deferring import of socket and hashlib", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-31T17:44:09Z", "updated_at": "2020-08-04T07:31:44Z", "closed_at": "2020-08-04T07:31:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "GUIDerator is the only usage of socket (gethostname) and hashlib (sha1)\r\n\r\nsocket adds 3.6MB on first import, hashlib adds 11.3MB (on python 3.6)\r\n\r\neasy fix to defer import and reduce memory footprint if GUIDerator is not used", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/257", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/257/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/257/events", "html_url": "https://github.com/mahmoud/boltons/issues/257", "id": 618245487, "node_id": "MDU6SXNzdWU2MTgyNDU0ODc=", "number": 257, "title": "Over-stripping of ANSI formatting.", "user": {"login": "kdeldycke", "id": 159718, "node_id": "MDQ6VXNlcjE1OTcxOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/159718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdeldycke", "html_url": "https://github.com/kdeldycke", "followers_url": "https://api.github.com/users/kdeldycke/followers", "following_url": "https://api.github.com/users/kdeldycke/following{/other_user}", "gists_url": "https://api.github.com/users/kdeldycke/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdeldycke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdeldycke/subscriptions", "organizations_url": "https://api.github.com/users/kdeldycke/orgs", "repos_url": "https://api.github.com/users/kdeldycke/repos", "events_url": "https://api.github.com/users/kdeldycke/events{/privacy}", "received_events_url": "https://api.github.com/users/kdeldycke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-14T13:46:26Z", "updated_at": "2020-06-22T22:12:45Z", "closed_at": "2020-06-22T22:12:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I just stumble upon a case of `strip_ansi()` method being overzealous in stripping formatting escape sequences:\r\n\r\n```python\r\n>>> from boltons.strutils import strip_ansi\r\n>>> table\r\n('\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\\n'\r\n '\u2502 Package name   \u2502 ID      \u2502 Manager   \u2502 Latest version   \u2502\\n'\r\n '\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\\n'\r\n '\u2502 \\x1b[1msed\\x1b[0m            \u2502 \\x1b[1msed\\x1b[0m     \u2502 pip3      \u2502 '\r\n '0.3.1            \u2502\\n'\r\n '\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n'\r\n '\u2502 SED-cli        \u2502 SED-cli \u2502 pip3      \u2502 0.0.1            \u2502\\n'\r\n '\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b')\r\n>>> print(table)\r\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\r\n\u2502 Package name   \u2502 ID      \u2502 Manager   \u2502 Latest version   \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502 sed            \u2502 sed     \u2502 pip3      \u2502 0.3.1            \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 SED-cli        \u2502 SED-cli \u2502 pip3      \u2502 0.0.1            \u2502\r\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\r\n>>> strip_ansi(table)\r\n('\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\\n'\r\n '\u2502 Package name   \u2502 ID      \u2502 Manager   \u2502 Latest version   \u2502\\n'\r\n '\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\\n'\r\n '\u2502 sed            \u2502 sed')\r\n>>> print(strip_ansi(table))\r\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\r\n\u2502 Package name   \u2502 ID      \u2502 Manager   \u2502 Latest version   \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502 sed            \u2502 sed\r\n>>> \r\n```\r\n\r\nThis is rendered as such in a console. You can see how some substrings are highlighted in the table:\r\n\r\n<img width=\"565\" alt=\"Screen Shot 2020-05-14 at 15 50 40\" src=\"https://user-images.githubusercontent.com/159718/81942730-cce2ce00-95fa-11ea-9114-02c68206d69a.png\">\r\n\r\nHere I expect the result of `strip_ansi(table)` to returns:\r\n```\r\n('\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\\n'\r\n '\u2502 Package name   \u2502 ID      \u2502 Manager   \u2502 Latest version   \u2502\\n'\r\n '\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\\n'\r\n '\u2502 sed            \u2502 sed     \u2502 pip3      \u2502 0.3.1            \u2502\\n'\r\n '\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n'\r\n '\u2502 SED-cli        \u2502 SED-cli \u2502 pip3      \u2502 0.0.1            \u2502\\n'\r\n '\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b')\r\n```\r\n\r\nI can try fixing that with a PR but I need to have a confirmation my proposed output is the intended one.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/254", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/254/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/254/events", "html_url": "https://github.com/mahmoud/boltons/issues/254", "id": 604667201, "node_id": "MDU6SXNzdWU2MDQ2NjcyMDE=", "number": 254, "title": "feature request: apply multiple functions to a single argument", "user": {"login": "antoine-gallix", "id": 7696611, "node_id": "MDQ6VXNlcjc2OTY2MTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7696611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoine-gallix", "html_url": "https://github.com/antoine-gallix", "followers_url": "https://api.github.com/users/antoine-gallix/followers", "following_url": "https://api.github.com/users/antoine-gallix/following{/other_user}", "gists_url": "https://api.github.com/users/antoine-gallix/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoine-gallix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoine-gallix/subscriptions", "organizations_url": "https://api.github.com/users/antoine-gallix/orgs", "repos_url": "https://api.github.com/users/antoine-gallix/repos", "events_url": "https://api.github.com/users/antoine-gallix/events{/privacy}", "received_events_url": "https://api.github.com/users/antoine-gallix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-22T11:06:25Z", "updated_at": "2020-04-27T18:17:18Z", "closed_at": "2020-04-27T18:17:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've just stumbled across a new use case. I'm parsing the same string with multiple parsers until I get a result. For that I would have combined two iterators I expected to find in `boltons.iterutils` but one does not exist.\r\n\r\nIt would be like a `map` but instead of applying a function to elements of a collection, producing a collection of results, it would apply a collection of functions to the same argument, also producing a sequence of results.\r\n\r\n```python\r\nlist(reverse_map([add_two,times_three,is_odd],5))\r\n>>> [7,15,True]\r\n```\r\n\r\nWith my use case I would do:\r\n\r\n```python\r\ntoken=next(first(reverse_map([parse_token_1,parse_token_2,parse_token_3]),input_string))\r\n```\r\n\r\nWould that be interesting to have in `boltons`?\r\n\r\nEven though, unless I oversee edge cases, would only be:\r\n\r\n```python\r\ndef reverse_map(functions, *args, **kwargs):\r\n    for function in functions:\r\n        yield (function(*args, **kwargs))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/252", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/252/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/252/events", "html_url": "https://github.com/mahmoud/boltons/issues/252", "id": 602880525, "node_id": "MDU6SXNzdWU2MDI4ODA1MjU=", "number": 252, "title": "setutils.IndexedSet has symmetric difference()", "user": {"login": "spaghEddieDoyle", "id": 58013020, "node_id": "MDQ6VXNlcjU4MDEzMDIw", "avatar_url": "https://avatars2.githubusercontent.com/u/58013020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spaghEddieDoyle", "html_url": "https://github.com/spaghEddieDoyle", "followers_url": "https://api.github.com/users/spaghEddieDoyle/followers", "following_url": "https://api.github.com/users/spaghEddieDoyle/following{/other_user}", "gists_url": "https://api.github.com/users/spaghEddieDoyle/gists{/gist_id}", "starred_url": "https://api.github.com/users/spaghEddieDoyle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spaghEddieDoyle/subscriptions", "organizations_url": "https://api.github.com/users/spaghEddieDoyle/orgs", "repos_url": "https://api.github.com/users/spaghEddieDoyle/repos", "events_url": "https://api.github.com/users/spaghEddieDoyle/events{/privacy}", "received_events_url": "https://api.github.com/users/spaghEddieDoyle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-20T01:37:39Z", "updated_at": "2020-06-22T06:04:42Z", "closed_at": "2020-04-21T09:03:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n>>> set('abc') - set('bcd')\r\n{'a'}\r\n>>> IndexedSet('abc') - set('bcd')\r\nIndexedSet(['a'])\r\n>>> set('abc') - IndexedSet('bcd')\r\nIndexedSet(['d'])\r\n```\r\nI would expect this to be due to `__sub__ = __rsub__ = difference` in the source code. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/251", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/251/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/251/events", "html_url": "https://github.com/mahmoud/boltons/issues/251", "id": 601526736, "node_id": "MDU6SXNzdWU2MDE1MjY3MzY=", "number": 251, "title": "parse_url throws exception when the password has a #, / or ? in it", "user": {"login": "bradmurray", "id": 930321, "node_id": "MDQ6VXNlcjkzMDMyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/930321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradmurray", "html_url": "https://github.com/bradmurray", "followers_url": "https://api.github.com/users/bradmurray/followers", "following_url": "https://api.github.com/users/bradmurray/following{/other_user}", "gists_url": "https://api.github.com/users/bradmurray/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradmurray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradmurray/subscriptions", "organizations_url": "https://api.github.com/users/bradmurray/orgs", "repos_url": "https://api.github.com/users/bradmurray/repos", "events_url": "https://api.github.com/users/bradmurray/events{/privacy}", "received_events_url": "https://api.github.com/users/bradmurray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-16T22:01:06Z", "updated_at": "2020-04-17T00:18:14Z", "closed_at": "2020-04-17T00:18:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "parse_url(\"sftp://username:password#1@ftp.myserver.com:1234/\") returns an error because it splits the password at the # character.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/249", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/249/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/249/events", "html_url": "https://github.com/mahmoud/boltons/issues/249", "id": 595334244, "node_id": "MDU6SXNzdWU1OTUzMzQyNDQ=", "number": 249, "title": "Add support for text mode in boltons.fileutils.atomic_save", "user": {"login": "mykter", "id": 1424497, "node_id": "MDQ6VXNlcjE0MjQ0OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1424497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mykter", "html_url": "https://github.com/mykter", "followers_url": "https://api.github.com/users/mykter/followers", "following_url": "https://api.github.com/users/mykter/following{/other_user}", "gists_url": "https://api.github.com/users/mykter/gists{/gist_id}", "starred_url": "https://api.github.com/users/mykter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mykter/subscriptions", "organizations_url": "https://api.github.com/users/mykter/orgs", "repos_url": "https://api.github.com/users/mykter/repos", "events_url": "https://api.github.com/users/mykter/events{/privacy}", "received_events_url": "https://api.github.com/users/mykter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-06T18:31:23Z", "updated_at": "2020-04-07T15:25:06Z", "closed_at": "2020-04-07T15:25:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "To allow atomic_save to be used as a straight-foward replacement for `open`, it would be nice if it supported a text mode, akin to `open(path, \"w\")`.\r\n#131 describes a workaround for some situations, but it means atomic_save can't be a drop-in replacement. For example, it can't be easily used with `json.dump`, for which:\r\n\r\n> The json module always produces str objects, not bytes objects. Therefore, fp.write() must support str input.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/243", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/243/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/243/events", "html_url": "https://github.com/mahmoud/boltons/issues/243", "id": 583684057, "node_id": "MDU6SXNzdWU1ODM2ODQwNTc=", "number": 243, "title": "Unused argument in NetstringSocket", "user": {"login": "ikamensh", "id": 23004004, "node_id": "MDQ6VXNlcjIzMDA0MDA0", "avatar_url": "https://avatars0.githubusercontent.com/u/23004004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ikamensh", "html_url": "https://github.com/ikamensh", "followers_url": "https://api.github.com/users/ikamensh/followers", "following_url": "https://api.github.com/users/ikamensh/following{/other_user}", "gists_url": "https://api.github.com/users/ikamensh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ikamensh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ikamensh/subscriptions", "organizations_url": "https://api.github.com/users/ikamensh/orgs", "repos_url": "https://api.github.com/users/ikamensh/repos", "events_url": "https://api.github.com/users/ikamensh/events{/privacy}", "received_events_url": "https://api.github.com/users/ikamensh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-18T12:12:35Z", "updated_at": "2020-03-29T12:03:24Z", "closed_at": "2020-03-29T12:03:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following line is incorrect and can be confusing:\r\nhttps://github.com/mahmoud/boltons/blob/9c99fd6e4a345803a43003284cd2aed8a772eb01/boltons/socketutils.py#L640\r\n\r\nThe value of `maxsize` is never used by this method.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/242", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/242/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/242/events", "html_url": "https://github.com/mahmoud/boltons/issues/242", "id": 580785537, "node_id": "MDU6SXNzdWU1ODA3ODU1Mzc=", "number": 242, "title": "funcutils.wraps() not working with partials", "user": {"login": "aulemahal", "id": 20629530, "node_id": "MDQ6VXNlcjIwNjI5NTMw", "avatar_url": "https://avatars0.githubusercontent.com/u/20629530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aulemahal", "html_url": "https://github.com/aulemahal", "followers_url": "https://api.github.com/users/aulemahal/followers", "following_url": "https://api.github.com/users/aulemahal/following{/other_user}", "gists_url": "https://api.github.com/users/aulemahal/gists{/gist_id}", "starred_url": "https://api.github.com/users/aulemahal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aulemahal/subscriptions", "organizations_url": "https://api.github.com/users/aulemahal/orgs", "repos_url": "https://api.github.com/users/aulemahal/repos", "events_url": "https://api.github.com/users/aulemahal/events{/privacy}", "received_events_url": "https://api.github.com/users/aulemahal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-13T18:59:15Z", "updated_at": "2020-03-30T01:48:41Z", "closed_at": "2020-03-30T01:48:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nWith boltons 20.0.0 (on Linux), I get errors when trying to wrap partials. My goal is to fix the docstring and signature of the wrapped partial, so it acts as a normal function, with an option to \"hide\" the given arguments with \"injected\".\r\n\r\nExamples:\r\n```\r\nfrom functools import partial\r\nfrom boltons.funcutils import wraps\r\n\r\ndef func(a, b=1, c=1):\r\n    \"\"\"Docstring\"\"\"\r\n    return (a, b, c)\r\n\r\nnewf = wraps(func)(partial(func, b=2))\r\nnewf(1)\r\n# Expected (1, 2, 1)\r\n# Got : TypeError : func() got multiple values for argument 'b'\r\n```\r\n\r\nAfter inspection, I believe this is due to `partial` modifying the signature of `func` by changing `b` and  all subsequent  args to \"keyword-only\". Which `wraps` doesn't see as it builds the new function from `func` directly.\r\n\r\n```\r\nfrom inspect import signature\r\n\r\nsignature(partial(func, b=2)) # <Signature (a, *, b=2, c=1)>\r\nsignature(newf, follow_wrapped) # <Signature (a, b=1, c=1)>\r\n``` \r\n\r\nSo. First of all, is this a bug of `boltons.funcutils.wraps` or is this just not in the scope of what it is supposed to do?\r\nI could use `functools.update_wrapper` but I really wanted to \"inject\" the new keywords, make them disappear from the signature. Also, using `help()` on a \"updated\" partial doesn't work, while it does on  `wraps(func)(partial(func))`.\r\n\r\nI quickly modified `wraps` and was able to obtain the wanted behaviour by passing the partial func directly and using that one to create the underlying `FunctionBuilder` instance. It works since the arguments are the same, just with modified properties and defaults, but it kinda doesn't make sense since `wraps` is supposed to be a decorator. Thus a solution I see is to move the code from `wraps` to a new  `update_wrapper`. Example:\r\n\r\n```\r\ndef update_wrapper(wrapper, wrapped, build_from=None, injected=None, expected=None, **kw):\r\n     ... same code as `wraps` but:\r\n     fb = FunctionBuilder.from_func(build_from or wrapped)\r\n     ... and it returns \"fully_wrapped\"\r\n\r\ndef wraps(func, injected=None, expected=None, **kw):\r\n    def wrapper_wrapper(wrapper_func):\r\n        return update_wrapper(wrapper_func, func, injected=injected, expected=expected, **kw)\r\n    return wrapper_wrapper\r\n```\r\n\r\nWhat do you think?\r\n(If needed or wanted, I have time to suggest a PR on this)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/241", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/241/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/241/events", "html_url": "https://github.com/mahmoud/boltons/issues/241", "id": 577231463, "node_id": "MDU6SXNzdWU1NzcyMzE0NjM=", "number": 241, "title": "singularize(\"senses\") == \"sens\"", "user": {"login": "orn688", "id": 15459200, "node_id": "MDQ6VXNlcjE1NDU5MjAw", "avatar_url": "https://avatars2.githubusercontent.com/u/15459200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orn688", "html_url": "https://github.com/orn688", "followers_url": "https://api.github.com/users/orn688/followers", "following_url": "https://api.github.com/users/orn688/following{/other_user}", "gists_url": "https://api.github.com/users/orn688/gists{/gist_id}", "starred_url": "https://api.github.com/users/orn688/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orn688/subscriptions", "organizations_url": "https://api.github.com/users/orn688/orgs", "repos_url": "https://api.github.com/users/orn688/repos", "events_url": "https://api.github.com/users/orn688/events{/privacy}", "received_events_url": "https://api.github.com/users/orn688/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-06T23:43:11Z", "updated_at": "2020-03-23T16:40:58Z", "closed_at": "2020-03-23T16:40:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`strutils.singularize(\"senses\") == \"sens\"`, but the correct singular is \"sense\". That's caused by this condition in `singularize`:\r\n\r\n```python\r\nelif word.endswith('es') and word[-3] == 's':\r\n    singular = word[:-2]\r\n```\r\n\r\nI think \"sense\" might be irregular, because there are other very similar words for which `singularize()` works correctly, e.g. `singularize(\"lenses\") == \"lens\"`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/240", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/240/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/240/events", "html_url": "https://github.com/mahmoud/boltons/issues/240", "id": 562625717, "node_id": "MDU6SXNzdWU1NjI2MjU3MTc=", "number": 240, "title": "Why IndexedSet not update the index of items?", "user": {"login": "Urahara", "id": 1462548, "node_id": "MDQ6VXNlcjE0NjI1NDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1462548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urahara", "html_url": "https://github.com/Urahara", "followers_url": "https://api.github.com/users/Urahara/followers", "following_url": "https://api.github.com/users/Urahara/following{/other_user}", "gists_url": "https://api.github.com/users/Urahara/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urahara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urahara/subscriptions", "organizations_url": "https://api.github.com/users/Urahara/orgs", "repos_url": "https://api.github.com/users/Urahara/repos", "events_url": "https://api.github.com/users/Urahara/events{/privacy}", "received_events_url": "https://api.github.com/users/Urahara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-02-10T15:10:33Z", "updated_at": "2020-03-31T01:41:23Z", "closed_at": "2020-03-30T02:27:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the motivation of not updating the current index of items when they are removed? It's this a bug? Because i starting using IndexedSet to pop items from a list that i have and i start get index of range errors.\r\n\r\nhttps://github.com/mahmoud/boltons/blob/bf8a65942cd8078dba7dc45543ae0923fe2fabbc/boltons/setutils.py#L201-L209", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/239", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/239/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/239/events", "html_url": "https://github.com/mahmoud/boltons/issues/239", "id": 560522076, "node_id": "MDU6SXNzdWU1NjA1MjIwNzY=", "number": 239, "title": "Signature not updated by wraps()", "user": {"login": "aulemahal", "id": 20629530, "node_id": "MDQ6VXNlcjIwNjI5NTMw", "avatar_url": "https://avatars0.githubusercontent.com/u/20629530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aulemahal", "html_url": "https://github.com/aulemahal", "followers_url": "https://api.github.com/users/aulemahal/followers", "following_url": "https://api.github.com/users/aulemahal/following{/other_user}", "gists_url": "https://api.github.com/users/aulemahal/gists{/gist_id}", "starred_url": "https://api.github.com/users/aulemahal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aulemahal/subscriptions", "organizations_url": "https://api.github.com/users/aulemahal/orgs", "repos_url": "https://api.github.com/users/aulemahal/repos", "events_url": "https://api.github.com/users/aulemahal/events{/privacy}", "received_events_url": "https://api.github.com/users/aulemahal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-05T17:30:12Z", "updated_at": "2020-02-05T18:04:03Z", "closed_at": "2020-02-05T18:02:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\nIt might be that I don't understand what wraps() is doing but I expected different results:\r\n\r\nI did:\r\n```\r\nfrom inspect import signature\r\nfrom boltons.funcutils import wraps\r\n\r\ndef func(a, b=1, c=1):\r\n    print(a, b, c)\r\n\r\nnewf = wraps(func, injected=['b'])(lambda a, c=1: func(a, b=4, c=c)) \r\n\r\nsignature(newf)\r\n```\r\nIt returned:\r\n```\r\n<Signature (a, b=1, c=1)>\r\n```\r\nI expected:\r\n```\r\n<Signature (a, c=1)>\r\n```\r\n\r\nIs this a bug, or do I not understand  `wraps()`?\r\n\r\nI am using boltons 20.0.0 on Python 3.7.3, conda-forge on ArchLinux.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/237", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/237/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/237/events", "html_url": "https://github.com/mahmoud/boltons/issues/237", "id": 558248657, "node_id": "MDU6SXNzdWU1NTgyNDg2NTc=", "number": 237, "title": "Deprecation warning due to invalid escape sequences in Python 3.8", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-31T16:56:36Z", "updated_at": "2020-01-31T19:54:30Z", "closed_at": "2020-01-31T19:54:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using raw strings or escaping them will fix this issue.\r\n\r\n```\r\nfind . -iname '*.py'  | xargs -P 4 -I{} python3.8 -Wall -m py_compile {}\r\n\r\n./boltons/urlutils.py:396: DeprecationWarning: invalid escape sequence \\_\r\n  \"\"\"The URL is one of the most ubiquitous data structures in the\r\n./boltons/ecoutils.py:377: DeprecationWarning: invalid escape sequence \\s\r\n  ret = re.sub('\\n\\s*', ' ', ret)\r\n./boltons/formatutils.py:56: DeprecationWarning: invalid escape sequence \\[\r\n  '({[:!.\\[}])')  # anon positional format arg\r\n./misc/linkify_changelog.py:9: DeprecationWarning: invalid escape sequence \\d\r\n  _issues_re = re.compile('#(\\d+)')\r\n./misc/linkify_changelog.py:10: DeprecationWarning: invalid escape sequence \\w\r\n  _member_re = re.compile('((\\w+utils)\\.[a-zA-Z0-9_.]+)')\r\n./tests/conftest.py:5: DeprecationWarning: invalid escape sequence \\d\r\n  _VERSION_MARKER = re.compile('_py(?P<major_version>\\d)(?P<minor_version>\\d)?')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/236", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/236/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/236/events", "html_url": "https://github.com/mahmoud/boltons/issues/236", "id": 558247846, "node_id": "MDU6SXNzdWU1NTgyNDc4NDY=", "number": 236, "title": "Importing ABC directly from collections has been removed in Python 3.8", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-31T16:55:00Z", "updated_at": "2020-01-31T19:55:57Z", "closed_at": "2020-01-31T19:55:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Similar to https://github.com/mahmoud/boltons/issues/165 . I will make a PR.\r\n\r\nhttps://github.com/mahmoud/boltons/blob/eefa5ee60461fc16463385f8fcc546a0c1233465/tests/test_dictutils.py#L94\r\n\r\nhttps://github.com/mahmoud/boltons/blob/eefa5ee60461fc16463385f8fcc546a0c1233465/misc/table_html_app.py#L91", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/235", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/235/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/235/events", "html_url": "https://github.com/mahmoud/boltons/issues/235", "id": 555705385, "node_id": "MDU6SXNzdWU1NTU3MDUzODU=", "number": 235, "title": "seekable not implemented on SpooledStringIO & SpooledBytesIO", "user": {"login": "induane", "id": 2320029, "node_id": "MDQ6VXNlcjIzMjAwMjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2320029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/induane", "html_url": "https://github.com/induane", "followers_url": "https://api.github.com/users/induane/followers", "following_url": "https://api.github.com/users/induane/following{/other_user}", "gists_url": "https://api.github.com/users/induane/gists{/gist_id}", "starred_url": "https://api.github.com/users/induane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/induane/subscriptions", "organizations_url": "https://api.github.com/users/induane/orgs", "repos_url": "https://api.github.com/users/induane/repos", "events_url": "https://api.github.com/users/induane/events{/privacy}", "received_events_url": "https://api.github.com/users/induane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-27T16:57:17Z", "updated_at": "2020-01-30T18:09:32Z", "closed_at": "2020-01-30T18:09:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some libraries expect that a file like object should support a \"seekable\" method which returns a boolean and these crash when used with SpooledStringIO and SpooledBytesIO\r\n\r\nSee:\r\nhttps://docs.python.org/2/library/io.html#io.IOBase.seekable\r\nhttps://docs.python.org/3/library/io.html#io.IOBase.seekable\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/232", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/232/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/232/events", "html_url": "https://github.com/mahmoud/boltons/issues/232", "id": 544166372, "node_id": "MDU6SXNzdWU1NDQxNjYzNzI=", "number": 232, "title": "Fix simple typo: compatiblity -> compatibility", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-31T11:28:35Z", "updated_at": "2020-01-06T22:54:16Z", "closed_at": "2020-01-06T22:54:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in boltons/strutils.py.\nShould read `compatibility` rather than `compatiblity`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/231", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/231/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/231/events", "html_url": "https://github.com/mahmoud/boltons/issues/231", "id": 543985844, "node_id": "MDU6SXNzdWU1NDM5ODU4NDQ=", "number": 231, "title": "iterutils.chunked and chunked_iter raise TypeError for bytes objects", "user": {"login": "craigholm", "id": 1476786, "node_id": "MDQ6VXNlcjE0NzY3ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1476786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/craigholm", "html_url": "https://github.com/craigholm", "followers_url": "https://api.github.com/users/craigholm/followers", "following_url": "https://api.github.com/users/craigholm/following{/other_user}", "gists_url": "https://api.github.com/users/craigholm/gists{/gist_id}", "starred_url": "https://api.github.com/users/craigholm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/craigholm/subscriptions", "organizations_url": "https://api.github.com/users/craigholm/orgs", "repos_url": "https://api.github.com/users/craigholm/repos", "events_url": "https://api.github.com/users/craigholm/events{/privacy}", "received_events_url": "https://api.github.com/users/craigholm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-30T19:26:53Z", "updated_at": "2020-01-07T06:29:22Z", "closed_at": "2020-01-07T06:29:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "```>>> from boltons.iterutils import chunked\r\n>>> chunked('abc123', 3)\r\n['abc', '123']\r\n>>> chunked(b'abc123', 3)\r\nTraceback (most recent call last):\r\n  File \"<pyshell#13>\", line 1, in <module>\r\n    chunked(b'abc123', 3)\r\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\boltons\\iterutils.py\", line 197, in chunked\r\n    return list(chunk_iter)\r\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\boltons\\iterutils.py\", line 242, in chunked_iter\r\n    yield postprocess(cur_chunk)\r\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\boltons\\iterutils.py\", line 233, in <lambda>\r\n    postprocess = lambda chk, _sep=type(src)(): _sep.join(chk)\r\nTypeError: sequence item 0: expected a bytes-like object, int found\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/229", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/229/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/229/events", "html_url": "https://github.com/mahmoud/boltons/issues/229", "id": 520337587, "node_id": "MDU6SXNzdWU1MjAzMzc1ODc=", "number": 229, "title": "Avoid use of __file__", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-09T05:29:21Z", "updated_at": "2019-11-14T08:56:03Z", "closed_at": "2019-11-14T08:55:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears the use of `__file__` here is unnecessary. See indygreg/PyOxidizer#69 for more info about why, but the tl;dr version is `__file__` is an optional attribute and should not be relied upon.\r\n\r\nThere appears to be only a single use, needed only for the doctest\r\n```py\r\nboltons/fileutils.py:_CUR_DIR = os.path.dirname(os.path.abspath(__file__))\r\nboltons/fileutils.py:    >>> filenames = sorted(iter_find_files(_CUR_DIR, '*.py'))\r\nboltons/fileutils.py:    >>> filenames = iter_find_files(_CUR_DIR, '*.py', ignored='.#*')\r\n```\r\n\r\nIt could be moved into the doctest's, or alternative doctest which dont need it could achieve the same result.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/227", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/227/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/227/events", "html_url": "https://github.com/mahmoud/boltons/issues/227", "id": 513689541, "node_id": "MDU6SXNzdWU1MTM2ODk1NDE=", "number": 227, "title": "`iterutils.get_path` casts strings to ints", "user": {"login": "HunterMcGushion", "id": 11300915, "node_id": "MDQ6VXNlcjExMzAwOTE1", "avatar_url": "https://avatars2.githubusercontent.com/u/11300915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HunterMcGushion", "html_url": "https://github.com/HunterMcGushion", "followers_url": "https://api.github.com/users/HunterMcGushion/followers", "following_url": "https://api.github.com/users/HunterMcGushion/following{/other_user}", "gists_url": "https://api.github.com/users/HunterMcGushion/gists{/gist_id}", "starred_url": "https://api.github.com/users/HunterMcGushion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HunterMcGushion/subscriptions", "organizations_url": "https://api.github.com/users/HunterMcGushion/orgs", "repos_url": "https://api.github.com/users/HunterMcGushion/repos", "events_url": "https://api.github.com/users/HunterMcGushion/events{/privacy}", "received_events_url": "https://api.github.com/users/HunterMcGushion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-29T04:41:23Z", "updated_at": "2019-10-29T07:10:16Z", "closed_at": "2019-10-29T07:10:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, thank you for all your hard work on this excellent library! Also, thank you for making it so easy to include individual modules in projects. `iterutils` has been tremendously useful in my repo, [HyperparameterHunter](https://github.com/HunterMcGushion/hyperparameter_hunter). \r\n\r\nI came across some unexpected behavior in `iterutils.get_path`, where string path elements would be cast to ints. In most cases, this is probably a feature; however, it led to buggy behavior in some admittedly very-edge cases involving deeply nested structures including dicts that could have either string or int keys. It also seems that this type-casting may exist to support the undocumented ability of `get_path` to receive a dotted string `path`, rather than a tuple.\r\n\r\nHere\u2019s a snippet to illustrate what seems like inconsistent behavior to me:\r\n\r\n```python\r\nassert get_path({0: \"foo\", \"0\": \"bar\"}, (0,)) == \"foo\"\r\nassert get_path({0: \"foo\", \"0\": \"bar\"}, (\"0\",)) == \"bar\"\r\n# Above, we see that `get_path` does correctly differentiate between str/int keys\r\n\r\nget_path({0: \"foo\", \"some_other_key\": \"bar\"}, (\"0\",))  # -> \"foo\"\r\n# This returns \"foo\", but I was expecting `PathAccessError` given first two examples\r\n```\r\n\r\nIn my case, I wasn\u2019t interested in supporting `path` as a string input, so I just removed the try/except block that performed the type casting. If you want to retain support for non-tuple `path` inputs, then conditional type-casting only if `cur` is a list/tuple or if the original input `path` was a string might also do the trick.\r\n\r\nAgain, I do understand that this is probably a useful feature in some cases and that my case is pretty uncommon, but I think it may be helpful to at least document this behavior. \r\n\r\nIf you\u2019re interested in implementing something like my \u201cfix\u201d that removes support for string `path` inputs, I\u2019d be happy to submit a PR, along with some updated tests I put together. Otherwise, if you want to keep everything as-is, I completely understand, so feel free to close this issue. Either way, thank you for your amazing work, and thanks for your time!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/224", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/224/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/224/events", "html_url": "https://github.com/mahmoud/boltons/issues/224", "id": 498726203, "node_id": "MDU6SXNzdWU0OTg3MjYyMDM=", "number": 224, "title": "update the tox to inlcude python 3.6?", "user": {"login": "simkimsia", "id": 245021, "node_id": "MDQ6VXNlcjI0NTAyMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/245021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simkimsia", "html_url": "https://github.com/simkimsia", "followers_url": "https://api.github.com/users/simkimsia/followers", "following_url": "https://api.github.com/users/simkimsia/following{/other_user}", "gists_url": "https://api.github.com/users/simkimsia/gists{/gist_id}", "starred_url": "https://api.github.com/users/simkimsia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simkimsia/subscriptions", "organizations_url": "https://api.github.com/users/simkimsia/orgs", "repos_url": "https://api.github.com/users/simkimsia/repos", "events_url": "https://api.github.com/users/simkimsia/events{/privacy}", "received_events_url": "https://api.github.com/users/simkimsia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-26T08:06:03Z", "updated_at": "2019-10-19T22:39:13Z", "closed_at": "2019-10-19T22:39:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi there, i discover this library via a SO question and answer. can't believe i have never heard of this library before.\r\n\r\nbecause i am using py 3.6.6 can your tox include that as well?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/219", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/219/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/219/events", "html_url": "https://github.com/mahmoud/boltons/issues/219", "id": 476620051, "node_id": "MDU6SXNzdWU0NzY2MjAwNTE=", "number": 219, "title": "PyPy (PyPy2) breakage on Travis CI", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-05T01:36:17Z", "updated_at": "2019-10-19T22:40:56Z", "closed_at": "2019-10-19T22:40:56Z", "author_association": "OWNER", "active_lock_reason": null, "body": "From #218:\r\n\r\n> As far as PyPy goes, I'm guessing the new [Travis CI Linux] distro brought a new PyPy, too. That particular error is making itself look like a PyPy bug, but locally, on pypy Python 2.7.13 (7.0.0+dfsg-1~ppa1~ubuntu16.04, Feb 07 2019, 20:56:09), everything's green. So I'll have to handle this out of band, too.\r\n>\r\n> PyPy issue tracked here: https://bitbucket.org/pypy/pypy/issues/3049/systemerror-in-rsocket__setblocking-travis", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/216", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/216/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/216/events", "html_url": "https://github.com/mahmoud/boltons/issues/216", "id": 462198766, "node_id": "MDU6SXNzdWU0NjIxOTg3NjY=", "number": 216, "title": "Functions for comparing lists", "user": {"login": "ponderpanda", "id": 52332400, "node_id": "MDQ6VXNlcjUyMzMyNDAw", "avatar_url": "https://avatars1.githubusercontent.com/u/52332400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ponderpanda", "html_url": "https://github.com/ponderpanda", "followers_url": "https://api.github.com/users/ponderpanda/followers", "following_url": "https://api.github.com/users/ponderpanda/following{/other_user}", "gists_url": "https://api.github.com/users/ponderpanda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ponderpanda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ponderpanda/subscriptions", "organizations_url": "https://api.github.com/users/ponderpanda/orgs", "repos_url": "https://api.github.com/users/ponderpanda/repos", "events_url": "https://api.github.com/users/ponderpanda/events{/privacy}", "received_events_url": "https://api.github.com/users/ponderpanda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-28T20:37:17Z", "updated_at": "2020-06-25T05:30:33Z", "closed_at": "2020-06-25T05:30:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some functions for comparing lists that are similar to the set module but for a group instead of a single instance. An example is list_intersection(a,b) that compares two lists and returns the elements that are in both of them. They are very fast when there is more than one item (a = [1]) being compared so if a or b are close to equal in size or one is above about 500 elements it's faster than the set module tests which are implemented in C if you need the results in a list. It is a pure python module. I created a github account and uploaded for your review. I've never found a similar library and the other methods are thousands of times slower for reasonable data sets. I've used it for comparing directories with millions of files among other things. \r\n\r\nhttps://github.com/ponderpanda/listex", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/209", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/209/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/209/events", "html_url": "https://github.com/mahmoud/boltons/issues/209", "id": 439041636, "node_id": "MDU6SXNzdWU0MzkwNDE2MzY=", "number": 209, "title": "dictutils.OrderedMultiDict.sorted() drops all but the most recently inserted values for each key", "user": {"login": "mosbasik", "id": 5025277, "node_id": "MDQ6VXNlcjUwMjUyNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5025277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mosbasik", "html_url": "https://github.com/mosbasik", "followers_url": "https://api.github.com/users/mosbasik/followers", "following_url": "https://api.github.com/users/mosbasik/following{/other_user}", "gists_url": "https://api.github.com/users/mosbasik/gists{/gist_id}", "starred_url": "https://api.github.com/users/mosbasik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mosbasik/subscriptions", "organizations_url": "https://api.github.com/users/mosbasik/orgs", "repos_url": "https://api.github.com/users/mosbasik/repos", "events_url": "https://api.github.com/users/mosbasik/events{/privacy}", "received_events_url": "https://api.github.com/users/mosbasik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-01T01:33:39Z", "updated_at": "2019-05-02T20:41:08Z", "closed_at": "2019-05-02T16:51:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Summary\r\n\r\nRunning `sorted()` on an instance of `dictutils.OrderedMultiDict` returns an `OMD` that only contains the most recently inserted values.  This seems like unexpected behavior.\r\n\r\n## Example\r\n```python\r\nfrom boltons import dictutils\r\n\r\nomd = dictutils.OrderedMultiDict()\r\nomd.add('a', 'apple'  )\r\nomd.add('a', 'apricot')\r\nomd.add('b', 'banana' )\r\n\r\nassert len(omd.items(multi=True)) == 3, 'Expect 3 items before sorting.'\r\nomd = omd.sorted()\r\nassert len(omd.items(multi=True)) == 3, 'Expect 3 items after sorting.'  # fails\r\n```\r\n\r\n## Cause\r\n\r\n[`dictutils.py`, line 486](https://github.com/mahmoud/boltons/blob/master/boltons/dictutils.py#L486) calls `self.iteritems()` without specifying `multi=True`.\r\n\r\n## Workaround\r\n\r\nIn the meantime, the desired result can be achieved by using the same approach used to implement `sorted()`:\r\n\r\n```python\r\ndictutils.OrderedMultiDict(sorted(my_ordered_multi_dict.iteritems(multi=True)))\r\n```\r\n\r\n## Environment\r\n\r\npython 2.7.16\r\nboltons 18.0.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/207", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/207/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/207/events", "html_url": "https://github.com/mahmoud/boltons/issues/207", "id": 424603888, "node_id": "MDU6SXNzdWU0MjQ2MDM4ODg=", "number": 207, "title": "Flatten is returning dictionary keys", "user": {"login": "mattzque", "id": 36882671, "node_id": "MDQ6VXNlcjM2ODgyNjcx", "avatar_url": "https://avatars0.githubusercontent.com/u/36882671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattzque", "html_url": "https://github.com/mattzque", "followers_url": "https://api.github.com/users/mattzque/followers", "following_url": "https://api.github.com/users/mattzque/following{/other_user}", "gists_url": "https://api.github.com/users/mattzque/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattzque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattzque/subscriptions", "organizations_url": "https://api.github.com/users/mattzque/orgs", "repos_url": "https://api.github.com/users/mattzque/repos", "events_url": "https://api.github.com/users/mattzque/events{/privacy}", "received_events_url": "https://api.github.com/users/mattzque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-24T11:49:15Z", "updated_at": "2019-03-24T18:17:02Z", "closed_at": "2019-03-24T18:17:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think `iterutils.flatten` would be more useful if it wouldn't do that:\r\n\r\n```\r\n>>> from boltons.iterutils import flatten\r\n>>> flatten([[{'a': 1}], [{'b': 2}]])\r\n['a', 'b']\r\n```\r\n\r\nMore useful would be:\r\n```\r\n>>> from boltons.iterutils import flatten\r\n>>> flatten([[{'a': 1}], [{'b': 2}]])\r\n[{'a': 1}, {'b': 2}]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/204", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/204/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/204/events", "html_url": "https://github.com/mahmoud/boltons/issues/204", "id": 409716887, "node_id": "MDU6SXNzdWU0MDk3MTY4ODc=", "number": 204, "title": "Priority queue does not support float priorities", "user": {"login": "bogdan-kulynych", "id": 1592918, "node_id": "MDQ6VXNlcjE1OTI5MTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1592918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bogdan-kulynych", "html_url": "https://github.com/bogdan-kulynych", "followers_url": "https://api.github.com/users/bogdan-kulynych/followers", "following_url": "https://api.github.com/users/bogdan-kulynych/following{/other_user}", "gists_url": "https://api.github.com/users/bogdan-kulynych/gists{/gist_id}", "starred_url": "https://api.github.com/users/bogdan-kulynych/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bogdan-kulynych/subscriptions", "organizations_url": "https://api.github.com/users/bogdan-kulynych/orgs", "repos_url": "https://api.github.com/users/bogdan-kulynych/repos", "events_url": "https://api.github.com/users/bogdan-kulynych/events{/privacy}", "received_events_url": "https://api.github.com/users/bogdan-kulynych/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-13T09:52:59Z", "updated_at": "2019-02-14T17:50:41Z", "closed_at": "2019-02-14T17:50:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Through a lot of painful debugging in a larger codebase, I found that both of boltons priority queue implementations treat a float priority `p` as if it were `int(p)`.\r\n\r\n```\r\nIn [1]: from boltons.queueutils import PriorityQueue\r\n\r\nIn [2]: items = [('a', 0.8), ('b', 0.9), ('c', 0.6), ('d', 1.8), ('e', 1.9), ('f', 1.6)]\r\n\r\nIn [3]: q = PriorityQueue()\r\n\r\nIn [4]: for i, p in items: q.add(i, p)\r\n\r\nIn [5]: for i in range(6): print(q.pop())\r\nd\r\ne\r\nf\r\na\r\nb\r\nc\r\n```\r\n\r\nSee the behavior that personally I would expect in this situation, exhibited by a depq package for double-ended priority queues:\r\n```\r\nIn [6]: from depq import DEPQ\r\n\r\nIn [7]: q = DEPQ(items)\r\n\r\nIn [8]: for i in range(6): print(q.popfirst())\r\n('e', 1.9)\r\n('d', 1.8)\r\n('f', 1.6)\r\n('b', 0.9)\r\n('a', 0.8)\r\n('c', 0.6)\r\n```\r\n\r\nI believe the current behavior should be explicitly documented. It's not clear that the priorities would be treated as if they were floored neither from the current docs nor from a brief look at the source.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/194", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/194/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/194/events", "html_url": "https://github.com/mahmoud/boltons/issues/194", "id": 399382366, "node_id": "MDU6SXNzdWUzOTkzODIzNjY=", "number": 194, "title": "wraps loses coroutinefunction-ness.", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-15T14:56:42Z", "updated_at": "2019-02-10T19:00:03Z", "closed_at": "2019-02-10T19:00:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was thinking to replace wrapt with boltons in prometheus_async but I ran into a blocker:\r\n\r\n```python\r\nimport asyncio\r\n\r\nfrom boltons.funcutils import wraps\r\n\r\n\r\ndef delayed(func):\r\n    @wraps(func)\r\n    async def wrapped(*args, **kw):\r\n        await asyncio.sleep(1.0)\r\n        return await func(*args, **kw)\r\n\r\n    return wrapped\r\n\r\n\r\nasync def f():\r\n    await asyncio.sleep(0.1)\r\n\r\n\r\nf2 = delayed(f)\r\n\r\nprint(\"f\", asyncio.iscoroutinefunction(f))\r\nprint(\"f2\", asyncio.iscoroutinefunction(f2))\r\n```\r\n\r\nprints:\r\n\r\n```\r\nf True\r\nf2 False\r\n```\r\n\r\nAt least on some versions of Python this is a problem, because the asyncio debug mode explodes.\r\n\r\nwrapt and current versions of decorator.py handle it correctly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/191", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/191/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/191/events", "html_url": "https://github.com/mahmoud/boltons/issues/191", "id": 387395504, "node_id": "MDU6SXNzdWUzODczOTU1MDQ=", "number": 191, "title": "boltons.funcutils.wraps crashes on some docstrings.", "user": {"login": "FrozenBob", "id": 30644137, "node_id": "MDQ6VXNlcjMwNjQ0MTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/30644137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FrozenBob", "html_url": "https://github.com/FrozenBob", "followers_url": "https://api.github.com/users/FrozenBob/followers", "following_url": "https://api.github.com/users/FrozenBob/following{/other_user}", "gists_url": "https://api.github.com/users/FrozenBob/gists{/gist_id}", "starred_url": "https://api.github.com/users/FrozenBob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FrozenBob/subscriptions", "organizations_url": "https://api.github.com/users/FrozenBob/orgs", "repos_url": "https://api.github.com/users/FrozenBob/repos", "events_url": "https://api.github.com/users/FrozenBob/events{/privacy}", "received_events_url": "https://api.github.com/users/FrozenBob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-04T17:22:34Z", "updated_at": "2018-12-10T19:53:50Z", "closed_at": "2018-12-10T19:52:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following example crashes with an IndentationError on boltons 18.0.1:\r\n\r\n```\r\nimport boltons.funcutils\r\n\r\ndef deco(f):\r\n  @boltons.funcutils.wraps(f)\r\n  def inner(*args, **kwargs):\r\n    return f(*args, **kwargs)\r\n  return inner\r\n\r\n@deco\r\ndef f():\r\n  '''\r\n  This docstring includes an example interactive session transcript.\r\n  \r\n  >>> \"\"\"\r\n  ... Have some pizza.\r\n  ... \"\"\"\r\n  '''\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"python\", line 9, in <module>\r\n  File \"python\", line 4, in deco\r\n  File \"<boltons.funcutils.FunctionBuilder-0>\", line 6\r\n    ... Have some pizza.\r\n                       ^\r\nIndentationError: unindent does not match any outer indentation level\r\n```\r\n\r\nboltons.funcutils.wraps attempts to string-format the inner function's docstring into the generated wrapper source code, but it does so incorrectly. There doesn't seem to be a point to including the docstring in the generated source anyway, since the docstring gets overwritten by a `__doc__` assignment immediately.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/188", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/188/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/188/events", "html_url": "https://github.com/mahmoud/boltons/issues/188", "id": 380383566, "node_id": "MDU6SXNzdWUzODAzODM1NjY=", "number": 188, "title": "boltons.strutils.singularize(\"chances\") returns \"chanc\"", "user": {"login": "orn688", "id": 15459200, "node_id": "MDQ6VXNlcjE1NDU5MjAw", "avatar_url": "https://avatars2.githubusercontent.com/u/15459200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orn688", "html_url": "https://github.com/orn688", "followers_url": "https://api.github.com/users/orn688/followers", "following_url": "https://api.github.com/users/orn688/following{/other_user}", "gists_url": "https://api.github.com/users/orn688/gists{/gist_id}", "starred_url": "https://api.github.com/users/orn688/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orn688/subscriptions", "organizations_url": "https://api.github.com/users/orn688/orgs", "repos_url": "https://api.github.com/users/orn688/repos", "events_url": "https://api.github.com/users/orn688/events{/privacy}", "received_events_url": "https://api.github.com/users/orn688/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-13T19:21:32Z", "updated_at": "2018-12-10T17:54:21Z", "closed_at": "2018-12-10T17:48:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "To reproduce:\r\n```py\r\nfrom boltons.strutils import singularize\r\nsingularize(\"chances\")  # \"chanc\"\r\n```\r\n\r\nLooking at the `strutils.py` code, it's pretty clear why this happens: `singularize` truncates the last two characters of plural words that end in \"es\", but not in \"ies\". It seems to me that most plurals ending in \"es\" should have just the \"s\" truncated, but I haven't though super carefully about that. There are definitely a lot of common words that break with this, though (\"names\", \"codes\", and \"races\", to name a few).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/182", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/182/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/182/events", "html_url": "https://github.com/mahmoud/boltons/issues/182", "id": 369878306, "node_id": "MDU6SXNzdWUzNjk4NzgzMDY=", "number": 182, "title": "Represent the URL when str(url)", "user": {"login": "bustawin", "id": 4247265, "node_id": "MDQ6VXNlcjQyNDcyNjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4247265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bustawin", "html_url": "https://github.com/bustawin", "followers_url": "https://api.github.com/users/bustawin/followers", "following_url": "https://api.github.com/users/bustawin/following{/other_user}", "gists_url": "https://api.github.com/users/bustawin/gists{/gist_id}", "starred_url": "https://api.github.com/users/bustawin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bustawin/subscriptions", "organizations_url": "https://api.github.com/users/bustawin/orgs", "repos_url": "https://api.github.com/users/bustawin/repos", "events_url": "https://api.github.com/users/bustawin/events{/privacy}", "received_events_url": "https://api.github.com/users/bustawin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-14T07:58:25Z", "updated_at": "2018-12-23T02:58:04Z", "closed_at": "2018-12-23T02:58:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "When working with `boltons.urlutils.URL`, it would be nice for `str(url)` to generate a string version of the URL, the same way it does when executing `url.to_text()`.\r\n\r\nAs of now it returns `URL('...')`, which is what you would expect when executing `repr()` but not `str()` (as per python docs, str should return a nice human representation whereas repr a formal python expression).\r\n\r\nA part from making URL more intuitive and pythonic to use, this small change would allow it to nicely integrate with other libraries like [requests](https://github.com/requests/requests), which [automatically performs `str()`](https://github.com/requests/requests/pull/766) to non-string passed-in objects, so this would work:\r\n```python\r\nurl = boltons.urlutils.URL('http://foo.com')\r\nresponse = requests.get(url)\r\n```\r\nWhich is just extra nice and useful :-)\r\n\r\nAnyway, it is just a small enhancement in an already amazing library. Congratulations for it!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/179", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/179/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/179/events", "html_url": "https://github.com/mahmoud/boltons/issues/179", "id": 368995348, "node_id": "MDU6SXNzdWUzNjg5OTUzNDg=", "number": 179, "title": "Python 3.7 dict changes dictutils OrderedMultiDict behavior", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-11T07:53:17Z", "updated_at": "2018-12-11T05:55:42Z", "closed_at": "2018-12-11T05:55:27Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The OMD takes an ambitious and not often recommended path: it inherits from a builtin, the `dict`. Generally builtins are pretty stable but as #174 revealed, `dict()` behavior seems to have changed in 3.8 nightly.\r\n\r\nQuoting myself from the other thread:\r\n\r\n> As for the `dict` change, there are several changes, but the one from the [changelog](https://docs.python.org/dev/whatsnew/changelog.html#changelog) that seems closest is this: [Creating dict from OrderedDict doesn't preserve order](https://bugs.python.org/issue34320).\r\n\r\nSo, is this a Python regression? Also, how to compensate, simply change the OMD API going forward, or something else?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/175", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/175/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/175/events", "html_url": "https://github.com/mahmoud/boltons/issues/175", "id": 368557841, "node_id": "MDU6SXNzdWUzNjg1NTc4NDE=", "number": 175, "title": "Three tests fail when run against CPython nightly 3.8.0a0", "user": {"login": "cclauss", "id": 3709715, "node_id": "MDQ6VXNlcjM3MDk3MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cclauss", "html_url": "https://github.com/cclauss", "followers_url": "https://api.github.com/users/cclauss/followers", "following_url": "https://api.github.com/users/cclauss/following{/other_user}", "gists_url": "https://api.github.com/users/cclauss/gists{/gist_id}", "starred_url": "https://api.github.com/users/cclauss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cclauss/subscriptions", "organizations_url": "https://api.github.com/users/cclauss/orgs", "repos_url": "https://api.github.com/users/cclauss/repos", "events_url": "https://api.github.com/users/cclauss/events{/privacy}", "received_events_url": "https://api.github.com/users/cclauss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-10T08:51:50Z", "updated_at": "2018-12-11T05:57:32Z", "closed_at": "2018-12-11T05:57:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://travis-ci.org/mahmoud/boltons/jobs/439532864#L527", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/172", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/172/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/172/events", "html_url": "https://github.com/mahmoud/boltons/issues/172", "id": 368521099, "node_id": "MDU6SXNzdWUzNjg1MjEwOTk=", "number": 172, "title": "Python 3 compatibility issues", "user": {"login": "cclauss", "id": 3709715, "node_id": "MDQ6VXNlcjM3MDk3MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cclauss", "html_url": "https://github.com/cclauss", "followers_url": "https://api.github.com/users/cclauss/followers", "following_url": "https://api.github.com/users/cclauss/following{/other_user}", "gists_url": "https://api.github.com/users/cclauss/gists{/gist_id}", "starred_url": "https://api.github.com/users/cclauss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cclauss/subscriptions", "organizations_url": "https://api.github.com/users/cclauss/orgs", "repos_url": "https://api.github.com/users/cclauss/repos", "events_url": "https://api.github.com/users/cclauss/events{/privacy}", "received_events_url": "https://api.github.com/users/cclauss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-10T07:04:56Z", "updated_at": "2018-10-11T06:34:35Z", "closed_at": "2018-10-11T06:34:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[flake8](http://flake8.pycqa.org) testing of https://github.com/mahmoud/boltons on Python 3.7.0\r\n\r\n$ __flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics__\r\n```\r\n./misc/table_html_app.py:85:32: F821 undefined name 'basestring'\r\n        if isinstance(context, basestring):  # already serialized\r\n                               ^\r\n./misc/table_html_app.py:96:29: F821 undefined name 'unicode'\r\n            return Response(unicode(context), mimetype=\"text/plain\")\r\n                            ^\r\n./misc/table_html_app.py:118:25: F821 undefined name 'unicode'\r\n        return Response(unicode(context), mimetype=\"text/plain\")\r\n                        ^\r\n./misc/bench_omd.py:43:68: E999 SyntaxError: invalid syntax\r\n    print '(installing werkzeug is recommended for full comparison)'\r\n                                                                   ^\r\n./misc/linkify_changelog.py:47:13: E999 SyntaxError: invalid syntax\r\n    print ret\r\n            ^\r\n./tests/test_ioutils.py:29:17: F821 undefined name 'unicode'\r\n    text_type = unicode\r\n                ^\r\n./boltons/statsutils.py:302:16: F821 undefined name 'mean'\r\n        return mean(self._get_pow_diffs(2))\r\n               ^\r\n./boltons/statsutils.py:324:19: F821 undefined name 'median'\r\n        x = float(median(sorted_vals))  # programmatically defined below\r\n                  ^\r\n./boltons/statsutils.py:325:16: F821 undefined name 'median'\r\n        return median([abs(x - v) for v in sorted_vals])\r\n               ^\r\n./boltons/formatutils.py:312:16: F821 undefined name 'unicode'\r\n        return unicode(self.get_value())\r\n               ^\r\n./boltons/tableutils.py:29:41: F821 undefined name 'unicode'\r\n    string_types, integer_types = (str, unicode), (int, long)\r\n                                        ^\r\n./boltons/tableutils.py:29:57: F821 undefined name 'long'\r\n    string_types, integer_types = (str, unicode), (int, long)\r\n                                                        ^\r\n./boltons/ioutils.py:28:17: F821 undefined name 'unicode'\r\n    text_type = unicode\r\n                ^\r\n./boltons/tbutils.py:31:12: F821 undefined name 'unicode'\r\n    text = unicode\r\n           ^\r\n./boltons/tbutils.py:604:17: F821 undefined name 'unicode'\r\n        value = unicode(value)\r\n                ^\r\n2     E999 SyntaxError: invalid syntax\r\n13    F821 undefined name 'unicode'\r\n15\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/171", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/171/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/171/events", "html_url": "https://github.com/mahmoud/boltons/issues/171", "id": 363777626, "node_id": "MDU6SXNzdWUzNjM3Nzc2MjY=", "number": 171, "title": "Question about iterutils.chunk/chunk_iter.", "user": {"login": "GollyJer", "id": 689204, "node_id": "MDQ6VXNlcjY4OTIwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/689204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GollyJer", "html_url": "https://github.com/GollyJer", "followers_url": "https://api.github.com/users/GollyJer/followers", "following_url": "https://api.github.com/users/GollyJer/following{/other_user}", "gists_url": "https://api.github.com/users/GollyJer/gists{/gist_id}", "starred_url": "https://api.github.com/users/GollyJer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GollyJer/subscriptions", "organizations_url": "https://api.github.com/users/GollyJer/orgs", "repos_url": "https://api.github.com/users/GollyJer/repos", "events_url": "https://api.github.com/users/GollyJer/events{/privacy}", "received_events_url": "https://api.github.com/users/GollyJer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-25T21:41:53Z", "updated_at": "2020-02-04T04:27:51Z", "closed_at": "2020-02-04T04:27:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just stumbled upon **boltons** while looking at improving my own `chunked_iterable` code.\r\n\r\nI'm pretty new to truly understanding the inner workings of Python and this seems like an interesting research case.\r\n\r\nMine looks like this.\r\n```python\r\ndef chunked_iterable(iterable, chunk_size):\r\n    it = iter(iterable)\r\n    while True:\r\n        chunk = tuple(islice(it, chunk_size))\r\n        if not chunk:\r\n            break\r\n        yield chunk\r\n```\r\n\r\nI noticed in your implementation of `chunked_iter` you return a list.\r\n[https://github.com/mahmoud/boltons/blob/master/boltons/iterutils.py#L232](https://github.com/mahmoud/boltons/blob/master/boltons/iterutils.py#L232)\r\n```python\r\ncur_chunk = list(itertools.islice(src_iter, size))\r\n```\r\n\r\nThen in the `chunk` function the description specifies \r\n> Returns a _list_ of count chunks\r\n\r\nI may be misreading something, but isn't it already a list? \r\nMay there be a speed benefit to using `tuple` in `chunked_iter`?\r\nMaybe the need for a list is the postprocessing of a string?\r\n\r\nThanks for any feedback and thanks for the awesome package!\r\n\r\nJeremy", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/169", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/169/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/169/events", "html_url": "https://github.com/mahmoud/boltons/issues/169", "id": 358023639, "node_id": "MDU6SXNzdWUzNTgwMjM2Mzk=", "number": 169, "title": "[ecoutils] PendingDeprecationWarning: dist() and linux_distribution() functions are deprecated in Python 3.5", "user": {"login": "villlem", "id": 5243281, "node_id": "MDQ6VXNlcjUyNDMyODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5243281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villlem", "html_url": "https://github.com/villlem", "followers_url": "https://api.github.com/users/villlem/followers", "following_url": "https://api.github.com/users/villlem/following{/other_user}", "gists_url": "https://api.github.com/users/villlem/gists{/gist_id}", "starred_url": "https://api.github.com/users/villlem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villlem/subscriptions", "organizations_url": "https://api.github.com/users/villlem/orgs", "repos_url": "https://api.github.com/users/villlem/repos", "events_url": "https://api.github.com/users/villlem/events{/privacy}", "received_events_url": "https://api.github.com/users/villlem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-07T11:06:10Z", "updated_at": "2019-02-11T06:48:58Z", "closed_at": "2019-02-11T06:48:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Function `ecoutils.get_profile` generates warning since its uses deprecated `platform.linux_distribution()`. \r\n\r\nIt would be better to use some replacement like `distro` package (see https://docs.python.org/3.7/library/platform.html#platform.linux_distribution).\r\n\r\nIt prevents us to simply use `-W error` to find out problems when we update requirements of our project.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/168", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/168/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/168/events", "html_url": "https://github.com/mahmoud/boltons/issues/168", "id": 357453604, "node_id": "MDU6SXNzdWUzNTc0NTM2MDQ=", "number": 168, "title": "An immutable bit-string or bit-array object.", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-06T00:43:02Z", "updated_at": "2019-02-11T06:50:56Z", "closed_at": "2019-02-11T06:50:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://gist.github.com/kurtbrose/9d22a0ef0cc5660243bc3ac8dd00cfa1\r\n\r\nthis is something I've wanted from time to time; basically makes it easy to convert among int, list-of-bools, and '0110' string representations of bit arrays\r\n\r\non PyPI there's some pre-existing work of coursE:\r\n\r\nbitarray:  https://pypi.org/project/bitarray/ -- but this adds a binary dependency\r\n\r\nbitstring: https://pypi.org/project/bitstring/ -- but it seems to be more focused on packed files / binary structures  (this can probably do the same thing as the example, but you have to dig through a larger API and it is a bigger dependency)\r\n\r\n99% of the time I've needed this I couldn't care at all about performance, and I end up doing some little ad-hoc 8 line thing over and over", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/167", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/167/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/167/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/167/events", "html_url": "https://github.com/mahmoud/boltons/issues/167", "id": 355437547, "node_id": "MDU6SXNzdWUzNTU0Mzc1NDc=", "number": 167, "title": "eject arguments (opposite of inject) in wraps", "user": {"login": "piccolbo", "id": 905563, "node_id": "MDQ6VXNlcjkwNTU2Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/905563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piccolbo", "html_url": "https://github.com/piccolbo", "followers_url": "https://api.github.com/users/piccolbo/followers", "following_url": "https://api.github.com/users/piccolbo/following{/other_user}", "gists_url": "https://api.github.com/users/piccolbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/piccolbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piccolbo/subscriptions", "organizations_url": "https://api.github.com/users/piccolbo/orgs", "repos_url": "https://api.github.com/users/piccolbo/repos", "events_url": "https://api.github.com/users/piccolbo/events{/privacy}", "received_events_url": "https://api.github.com/users/piccolbo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-30T06:08:39Z", "updated_at": "2019-02-11T06:45:23Z", "closed_at": "2019-02-11T06:43:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am a little surprised that one can remove but not add arguments in `wraps`. One may think that the wrapped function has no way to use a new argument that it doesn't know about, but here is a use case. I have a bunch of plotting primitives that take arguments x,y,  and many others, and I want to write a polar coordinates decorators. I need to remove (inject) x and y and replace them with (add) r and t. Then in the decorator body I can compute x and y from r and t and pass them to the decorated function. Makes sense? (of course the name `eject` is a joke. But without renaming `inject`, it's hard to come up with a good name that pairs with the other. Extract?) Thanks\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/165", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/165/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/165/events", "html_url": "https://github.com/mahmoud/boltons/issues/165", "id": 355028322, "node_id": "MDU6SXNzdWUzNTUwMjgzMjI=", "number": 165, "title": "DeprecationWarnings", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-29T07:15:48Z", "updated_at": "2019-02-11T06:49:55Z", "closed_at": "2019-02-11T06:49:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently importing boltons on Python 3.7 gives DeprecationWarnings:\r\n\r\n```\r\n  /Users/hynek/.virtualenvs/registries/lib/python3.7/site-packages/boltons/dictutils.py:41: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import KeysView, ValuesView, ItemsView\r\n  /Users/hynek/.virtualenvs/registries/lib/python3.7/site-packages/boltons/iterutils.py:22: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import Mapping, Sequence, Set, ItemsView\r\n```\r\n\r\nThere might be more, these are the once I saw. :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/163", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/163/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/163/events", "html_url": "https://github.com/mahmoud/boltons/issues/163", "id": 336701961, "node_id": "MDU6SXNzdWUzMzY3MDE5NjE=", "number": 163, "title": "new iterutils.set_path function", "user": {"login": "agdespopoulos", "id": 5320838, "node_id": "MDQ6VXNlcjUzMjA4Mzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5320838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agdespopoulos", "html_url": "https://github.com/agdespopoulos", "followers_url": "https://api.github.com/users/agdespopoulos/followers", "following_url": "https://api.github.com/users/agdespopoulos/following{/other_user}", "gists_url": "https://api.github.com/users/agdespopoulos/gists{/gist_id}", "starred_url": "https://api.github.com/users/agdespopoulos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agdespopoulos/subscriptions", "organizations_url": "https://api.github.com/users/agdespopoulos/orgs", "repos_url": "https://api.github.com/users/agdespopoulos/repos", "events_url": "https://api.github.com/users/agdespopoulos/events{/privacy}", "received_events_url": "https://api.github.com/users/agdespopoulos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-28T16:56:31Z", "updated_at": "2019-02-11T08:13:49Z", "closed_at": "2019-02-11T08:13:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Like `get_path`, but for setting. I needed it myself so I wrote a simple version. If this is something you think you'd like added, I can flesh it out with more error handling, documentation, tests, etc.\r\n\r\n```python\r\ndef set_path(root, path, value):\r\n    \"\"\"\r\n    Sets a value inside a nested object via a tuple representing the lookup\r\n    path.\r\n    \"\"\"\r\n    cur = root\r\n    for seg in path[:-1]:\r\n        cur = cur[seg]\r\n    cur[path[-1]] = value\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/156", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/156/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/156/events", "html_url": "https://github.com/mahmoud/boltons/issues/156", "id": 319955538, "node_id": "MDU6SXNzdWUzMTk5NTU1Mzg=", "number": 156, "title": "License file in pypi archive", "user": {"login": "toddrme2178", "id": 4181796, "node_id": "MDQ6VXNlcjQxODE3OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4181796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddrme2178", "html_url": "https://github.com/toddrme2178", "followers_url": "https://api.github.com/users/toddrme2178/followers", "following_url": "https://api.github.com/users/toddrme2178/following{/other_user}", "gists_url": "https://api.github.com/users/toddrme2178/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddrme2178/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddrme2178/subscriptions", "organizations_url": "https://api.github.com/users/toddrme2178/orgs", "repos_url": "https://api.github.com/users/toddrme2178/repos", "events_url": "https://api.github.com/users/toddrme2178/events{/privacy}", "received_events_url": "https://api.github.com/users/toddrme2178/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-03T14:53:12Z", "updated_at": "2018-07-01T23:41:07Z", "closed_at": "2018-07-01T23:41:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The pypi source archive isn't including the `LICENSE` file. Would it be possible to add it? It is very helpful when packaging this for Linux distributions. Thank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/155", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/155/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/155/events", "html_url": "https://github.com/mahmoud/boltons/issues/155", "id": 317386473, "node_id": "MDU6SXNzdWUzMTczODY0NzM=", "number": 155, "title": "LRU and LRI yield key errors when max_size reached.", "user": {"login": "induane", "id": 2320029, "node_id": "MDQ6VXNlcjIzMjAwMjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2320029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/induane", "html_url": "https://github.com/induane", "followers_url": "https://api.github.com/users/induane/followers", "following_url": "https://api.github.com/users/induane/following{/other_user}", "gists_url": "https://api.github.com/users/induane/gists{/gist_id}", "starred_url": "https://api.github.com/users/induane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/induane/subscriptions", "organizations_url": "https://api.github.com/users/induane/orgs", "repos_url": "https://api.github.com/users/induane/repos", "events_url": "https://api.github.com/users/induane/events{/privacy}", "received_events_url": "https://api.github.com/users/induane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-24T20:39:44Z", "updated_at": "2018-05-07T18:44:51Z", "closed_at": "2018-05-07T18:44:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've created a testcase for the behavior at pull request #154 \r\n\r\nWhen the max size is reached, attempting to set a new key yields a KeyError. I'm not sure why exactly - the error comes from calling ``del self[old]`` - somewhere up the chain this triggers the problem. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/151", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/151/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/151/events", "html_url": "https://github.com/mahmoud/boltons/issues/151", "id": 301494374, "node_id": "MDU6SXNzdWUzMDE0OTQzNzQ=", "number": 151, "title": "tableutils DataTable compatibility", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-01T17:35:15Z", "updated_at": "2018-03-02T07:27:24Z", "closed_at": "2018-03-02T07:27:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "it would be nice if there was an option for tableutils.Table.to_html() to return a table with a `thead` and `tbody` in order to work with DataTable", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/147", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/147/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/147/events", "html_url": "https://github.com/mahmoud/boltons/issues/147", "id": 274350851, "node_id": "MDU6SXNzdWUyNzQzNTA4NTE=", "number": 147, "title": "deepget (deepget is to get as deepcopy is to copy)", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-16T00:13:24Z", "updated_at": "2019-02-11T07:32:21Z", "closed_at": "2019-02-11T07:32:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I feel like I've seen this code done shittily so many times.  I'm not super stoked about this approach, but at least it is less bad.\r\n\r\n```python\r\n_GETATTR = object()\r\n_GETITEM = object()\r\n\r\nclass _Path(object):\r\n   @classmethod\r\n   def _register(cls, parent, operation, key):\r\n        self = cls()\r\n        _ALL_PATH_PATHS[self] = _ALL_PATH_PATHS[parent] + ( (operation, key), )\r\n        return self\r\n    def __getattribute__(self, key):\r\n        return _Path._register(self, _GETATTR, key)\r\n    def __getitem__(self, key):\r\n        return _Path._register(self, _GETITEM, key)\r\n\r\nPATH = _Path()\r\n_ALL_PATHS = weakkeydict({PATH: ()})\r\n\r\ndef deepget(obj, path, default=None):\r\n    path_items = _ALL_PATH_PATHS[path]\r\n    cur = obj\r\n    for op, key in path_items:\r\n        if op is _GETATTR:  # special logic\r\n            cur = getattr(cur, key, default=default)\r\n       \t\tif thing is default:\r\n            \tbreak\r\n       elif op is _GETITEM:  # special logic\r\n            try:\r\n                cur = cur[key]\r\n            except KeyError:\r\n                cur = default\r\n                break\r\n    return cur\r\n```\r\ninstead of try / except KeyError, AttributeError, IndexError you use this thingie\r\n\r\n```python\r\nresult = deepget(someobject, PATH.a.b.c[1]['dog'])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/145", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/145/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/145/events", "html_url": "https://github.com/mahmoud/boltons/issues/145", "id": 272739131, "node_id": "MDU6SXNzdWUyNzI3MzkxMzE=", "number": 145, "title": "Cannot iterate SpooledBytesIO or SpooledStringIO", "user": {"login": "induane", "id": 2320029, "node_id": "MDQ6VXNlcjIzMjAwMjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2320029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/induane", "html_url": "https://github.com/induane", "followers_url": "https://api.github.com/users/induane/followers", "following_url": "https://api.github.com/users/induane/following{/other_user}", "gists_url": "https://api.github.com/users/induane/gists{/gist_id}", "starred_url": "https://api.github.com/users/induane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/induane/subscriptions", "organizations_url": "https://api.github.com/users/induane/orgs", "repos_url": "https://api.github.com/users/induane/repos", "events_url": "https://api.github.com/users/induane/events{/privacy}", "received_events_url": "https://api.github.com/users/induane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-09T21:58:42Z", "updated_at": "2017-11-10T15:07:25Z", "closed_at": "2017-11-10T15:07:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Line iteration of SpooledBytesIO and SpooledStringIO yields only the first line of the file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/140", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/140/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/140/events", "html_url": "https://github.com/mahmoud/boltons/issues/140", "id": 256574919, "node_id": "MDU6SXNzdWUyNTY1NzQ5MTk=", "number": 140, "title": "setutils.IndexedSet bug", "user": {"login": "samegek", "id": 14978256, "node_id": "MDQ6VXNlcjE0OTc4MjU2", "avatar_url": "https://avatars1.githubusercontent.com/u/14978256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samegek", "html_url": "https://github.com/samegek", "followers_url": "https://api.github.com/users/samegek/followers", "following_url": "https://api.github.com/users/samegek/following{/other_user}", "gists_url": "https://api.github.com/users/samegek/gists{/gist_id}", "starred_url": "https://api.github.com/users/samegek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samegek/subscriptions", "organizations_url": "https://api.github.com/users/samegek/orgs", "repos_url": "https://api.github.com/users/samegek/repos", "events_url": "https://api.github.com/users/samegek/events{/privacy}", "received_events_url": "https://api.github.com/users/samegek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-11T03:52:26Z", "updated_at": "2017-12-17T00:30:16Z", "closed_at": "2017-12-17T00:30:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "x = IndexedSet([1,2,3]) | {1,2,3,0,4}\r\nx == IndexedSet([1,2,3,0,4]) # true\r\n\r\nit is wrong! the correct answer is {1,2,3,0,4}, it is a set not IndexedSet!\r\nbecause set is unordered, so  operateing with IndexedSet and  set will only get unorded set!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/133", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/133/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/133/events", "html_url": "https://github.com/mahmoud/boltons/issues/133", "id": 241123140, "node_id": "MDU6SXNzdWUyNDExMjMxNDA=", "number": 133, "title": "`boltons.funcutils.wraps` breaks with Python 3 function annotations", "user": {"login": "rowillia", "id": 808798, "node_id": "MDQ6VXNlcjgwODc5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/808798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rowillia", "html_url": "https://github.com/rowillia", "followers_url": "https://api.github.com/users/rowillia/followers", "following_url": "https://api.github.com/users/rowillia/following{/other_user}", "gists_url": "https://api.github.com/users/rowillia/gists{/gist_id}", "starred_url": "https://api.github.com/users/rowillia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rowillia/subscriptions", "organizations_url": "https://api.github.com/users/rowillia/orgs", "repos_url": "https://api.github.com/users/rowillia/repos", "events_url": "https://api.github.com/users/rowillia/events{/privacy}", "received_events_url": "https://api.github.com/users/rowillia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-07-07T00:22:57Z", "updated_at": "2019-02-13T04:17:05Z", "closed_at": "2019-02-13T04:17:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tested with `boltons==17.1.0`\r\n\r\nRepro: Executing the following script fails\r\n```python\r\nfrom boltons.funcutils import wraps\r\nfrom typing import Optional\r\n\r\ndef wrap_it(f):\r\n    @wraps(f)\r\n    def wrapper(self, *args, **kwargs):\r\n        f(*args, **kwargs)\r\n    return wrapper\r\n\r\n@wrap_it\r\ndef foo(x: Optional[int]) -> Optional[int]:\r\n    return x\r\n```\r\n\r\nResults in\r\n```bash\r\nrwilliams at rwilliams-mbp114 in ~/src/oss/boltons (master\u25cf) (venv)\r\n$ python ../../test_wraps_with_annotations.py\r\nTraceback (most recent call last):\r\n  File \"../../test_wraps_with_annotations.py\", line 11, in <module>\r\n    def foo(x: Optional[int]) -> Optional[int]:\r\n  File \"../../test_wraps_with_annotations.py\", line 5, in wrap_it\r\n    @wraps(f)\r\n  File \"/Users/rwilliams/src/oss/boltons/boltons/funcutils.py\", line 307, in wrapper_wrapper\r\n    fully_wrapped = fb.get_func(execdict, with_dict=update_dict)\r\n  File \"/Users/rwilliams/src/oss/boltons/boltons/funcutils.py\", line 526, in get_func\r\n    self._compile(src, execdict)\r\n  File \"/Users/rwilliams/src/oss/boltons/boltons/funcutils.py\", line 590, in _compile\r\n    exec(code, execdict)\r\n  File \"<boltons.funcutils.FunctionBuilder-0>\", line 1, in <module>\r\nNameError: name 'Union' is not defined\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/131", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/131/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/131/events", "html_url": "https://github.com/mahmoud/boltons/issues/131", "id": 239783308, "node_id": "MDU6SXNzdWUyMzk3ODMzMDg=", "number": 131, "title": "boltons.fileutils.atomic_save does not allow to save string into the file", "user": {"login": "courteouselk", "id": 1206263, "node_id": "MDQ6VXNlcjEyMDYyNjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1206263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/courteouselk", "html_url": "https://github.com/courteouselk", "followers_url": "https://api.github.com/users/courteouselk/followers", "following_url": "https://api.github.com/users/courteouselk/following{/other_user}", "gists_url": "https://api.github.com/users/courteouselk/gists{/gist_id}", "starred_url": "https://api.github.com/users/courteouselk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/courteouselk/subscriptions", "organizations_url": "https://api.github.com/users/courteouselk/orgs", "repos_url": "https://api.github.com/users/courteouselk/repos", "events_url": "https://api.github.com/users/courteouselk/events{/privacy}", "received_events_url": "https://api.github.com/users/courteouselk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-30T13:44:34Z", "updated_at": "2017-06-30T16:52:02Z", "closed_at": "2017-06-30T16:52:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I try to do:\r\n\r\n````python\r\nfrom boltons.fileutils import atomic_save\r\n\r\nwith atomic_save('test.txt') as f:\r\n    f.write('test')\r\n````\r\n\r\n.. then I get an error:\r\n\r\n> TypeError: a bytes-like object is required, not 'str'.\r\n\r\nWhat am I doing wrong?  I am using it exactly as decribed in this [answer](https://stackoverflow.com/a/35240362/1542569) at stackoverflow.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/127", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/127/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/127/events", "html_url": "https://github.com/mahmoud/boltons/issues/127", "id": 234970667, "node_id": "MDU6SXNzdWUyMzQ5NzA2Njc=", "number": 127, "title": "Remove dublicates from list of dicts", "user": {"login": "carlbordum", "id": 16287077, "node_id": "MDQ6VXNlcjE2Mjg3MDc3", "avatar_url": "https://avatars0.githubusercontent.com/u/16287077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlbordum", "html_url": "https://github.com/carlbordum", "followers_url": "https://api.github.com/users/carlbordum/followers", "following_url": "https://api.github.com/users/carlbordum/following{/other_user}", "gists_url": "https://api.github.com/users/carlbordum/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlbordum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlbordum/subscriptions", "organizations_url": "https://api.github.com/users/carlbordum/orgs", "repos_url": "https://api.github.com/users/carlbordum/repos", "events_url": "https://api.github.com/users/carlbordum/events{/privacy}", "received_events_url": "https://api.github.com/users/carlbordum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-06-10T01:32:09Z", "updated_at": "2017-12-17T00:31:27Z", "closed_at": "2017-12-17T00:31:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "A method, function or perhaps even a frozendict could help achieve this in a clean way.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/123", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/123/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/123/events", "html_url": "https://github.com/mahmoud/boltons/issues/123", "id": 221576190, "node_id": "MDU6SXNzdWUyMjE1NzYxOTA=", "number": 123, "title": "funcutils.wraps() with injected keyword does not work for keyword-only arguments.", "user": {"login": "xlorepdarkhelm", "id": 881707, "node_id": "MDQ6VXNlcjg4MTcwNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/881707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xlorepdarkhelm", "html_url": "https://github.com/xlorepdarkhelm", "followers_url": "https://api.github.com/users/xlorepdarkhelm/followers", "following_url": "https://api.github.com/users/xlorepdarkhelm/following{/other_user}", "gists_url": "https://api.github.com/users/xlorepdarkhelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/xlorepdarkhelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xlorepdarkhelm/subscriptions", "organizations_url": "https://api.github.com/users/xlorepdarkhelm/orgs", "repos_url": "https://api.github.com/users/xlorepdarkhelm/repos", "events_url": "https://api.github.com/users/xlorepdarkhelm/events{/privacy}", "received_events_url": "https://api.github.com/users/xlorepdarkhelm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-04-13T14:14:41Z", "updated_at": "2017-04-25T21:11:44Z", "closed_at": "2017-04-14T06:58:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following decorator:\r\n\r\n```\r\ndef inject_loop(func):\r\n      sig = inspect.signature(func)\r\n      loop_param = sig.parameters['loop'].replace(default=None)\r\n      sig = sig.replace(parameters=[loop_param])\r\n\r\n      def add_loop(\r\n          args: typing.Tuple[typing.Any, ...],\r\n          kwargs: typing.Dict[str, typing.Any]\r\n      ) -> collections.OrderedDict:\r\n          bargs = sig.bind(*args, **kwargs)\r\n          bargs.apply_defaults()\r\n          if bargs.arguments['loop'] is None:\r\n              bargs.arguments['loop'] = asyncio.get_event_loop()\r\n\r\n          return bargs.arguments\r\n\r\n      if inspect.isasyncgenfunction(func):\r\n          async def async_gen_loop_wrapper(*args, **kwargs):\r\n              async for elem in func(**add_loop(args, kwargs)):\r\n>>                yield elem\r\n          ret = async_gen_loop_wrapper\r\n\r\n      elif inspect.iscoroutinefunction(func):\r\n          async def async_loop_wrapper(*args, **kwargs):\r\n              return await func(**add_loop(args, kwargs))\r\n          ret = async_loop_wrapper\r\n\r\n      elif inspect.isgeneratorfunction(func):\r\n          def gen_loop_wrapper(*args, **kwargs):\r\n              yield from func(**add_loop(args, kwargs))\r\n          ret = gen_loop_wrapper\r\n\r\n      else:\r\n          def func_loop_wrapper(*args, **kwargs):\r\n              return func(**add_loop(args, kwargs))\r\n          ret = func_loop_wrapper\r\n\r\n      return boltons.funcutils.wraps(func, injected=['loop'])(ret)\r\n```\r\n\r\nThe following code fails:\r\n\r\n```\r\n@inject_loop\r\ndef example(*, loop):  # loop is a keyword-only argument\r\n    return loop\r\n```\r\n\r\nwith the following stacktrace:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n.../python3.6/site-packages/boltons/funcutils.py in remove_arg(self, arg_name)\r\n    565         try:\r\n--> 566             self.args.remove(arg_name)\r\n    567         except ValueError:\r\n\r\nValueError: list.remove(x): x not in list\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nMissingArgument                           Traceback (most recent call last)\r\n<ipython-input-3-6ef3f4f5dc19> in <module>()\r\n----> 1 @lib.inject_loop\r\n      2 def example(*, loop):\r\n      3     return loop\r\n\r\n... in inject_loop(func)\r\n    169         ret = func_loop_wrapper\r\n    170\r\n--> 171     return boltons.funcutils.wraps(func, injected=['loop'])(ret)\r\n    172\r\n    173\r\n\r\n.../python3.6/site-packages/boltons/funcutils.py in wraps(func, injected, **kw)\r\n    295     for arg in injected:\r\n    296         try:\r\n--> 297             fb.remove_arg(arg)\r\n    298         except MissingArgument:\r\n    299             if inject_to_varkw and fb.varkw is not None:\r\n\r\n.../python3.6/site-packages/boltons/funcutils.py in remove_arg(self, arg_name)\r\n    569                                   % (arg_name, self.name, self.args))\r\n    570             exc.arg_name = arg_name\r\n--> 571             raise exc\r\n    572         d_dict.pop(arg_name, None)\r\n    573         self.defaults = tuple([d_dict[a] for a in self.args if a in d_dict])\r\n\r\nMissingArgument: arg 'loop' not found in example argument list: []\r\n```\r\n\r\nHowever, it works if I do this:\r\n\r\n```\r\n@inject_loop\r\ndef example(loop):  # Not a keyword-only argument\r\n    return loop\r\n```\r\n\r\nI believe the solution should also check the kwonly args when attempting to mark a parameter as \"injected\", so that keyword only arguments can be listed in the `injected` parameter to `wraps()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/122", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/122/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/122/events", "html_url": "https://github.com/mahmoud/boltons/issues/122", "id": 215967098, "node_id": "MDU6SXNzdWUyMTU5NjcwOTg=", "number": 122, "title": "strip() that works with iterables", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-03-22T06:36:07Z", "updated_at": "2020-06-25T05:29:46Z", "closed_at": "2020-06-25T05:29:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like strip / rstrip / lstrip that works with arbitrary iterables:\r\n\r\n```python\r\ndef iter_lstrip(li, it): \r\n    pos = 0\r\n    while li[pos] == it:\r\n        pos += 1\r\n        if pos == len(li):\r\n            return []\r\n    return li[pos:]\r\n\r\n\r\ndef iter_rstrip(li, it):\r\n    return list(reversed(iter_lstrip(list(reversed(li)), it)))\r\n\r\n\r\ndef iter_strip(li, it):\r\n    return iter_lstrip(iter_rstrip(li, it), it)\r\n```\r\n\r\n```python\r\niter_strip([0,0,0,1,2,3,4,0,0], 0)\r\n# [1,2,3,4]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/118", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/118/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/118/events", "html_url": "https://github.com/mahmoud/boltons/issues/118", "id": 203209425, "node_id": "MDU6SXNzdWUyMDMyMDk0MjU=", "number": 118, "title": "Add flatten function?", "user": {"login": "BrenBarn", "id": 1439047, "node_id": "MDQ6VXNlcjE0MzkwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1439047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrenBarn", "html_url": "https://github.com/BrenBarn", "followers_url": "https://api.github.com/users/BrenBarn/followers", "following_url": "https://api.github.com/users/BrenBarn/following{/other_user}", "gists_url": "https://api.github.com/users/BrenBarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrenBarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrenBarn/subscriptions", "organizations_url": "https://api.github.com/users/BrenBarn/orgs", "repos_url": "https://api.github.com/users/BrenBarn/repos", "events_url": "https://api.github.com/users/BrenBarn/events{/privacy}", "received_events_url": "https://api.github.com/users/BrenBarn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-25T20:11:06Z", "updated_at": "2018-10-11T06:24:19Z", "closed_at": "2018-10-11T06:24:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "One of the most commonly requested list/iterable-wrangling functions is a recipe to flatten an arbitrarily nested sequence of sequences (or of iterables).  This seems like the sort of thing that would be a good fit for boltons, perhaps in iterutils.  Some implementations:\r\n\r\n* http://code.activestate.com/recipes/578092-flattening-an-arbitrarily-deep-list-or-any-iterato/\r\n* http://stackoverflow.com/questions/2158395/flatten-an-irregular-list-of-lists-in-python\r\n* http://stackoverflow.com/questions/10823877/what-is-the-fastest-way-to-flatten-arbitrarily-nested-lists-in-python", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/115", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/115/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/115/events", "html_url": "https://github.com/mahmoud/boltons/issues/115", "id": 201775621, "node_id": "MDU6SXNzdWUyMDE3NzU2MjE=", "number": 115, "title": "funcutils.wraps doesn't add __wrapped__", "user": {"login": "BrenBarn", "id": 1439047, "node_id": "MDQ6VXNlcjE0MzkwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1439047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrenBarn", "html_url": "https://github.com/BrenBarn", "followers_url": "https://api.github.com/users/BrenBarn/followers", "following_url": "https://api.github.com/users/BrenBarn/following{/other_user}", "gists_url": "https://api.github.com/users/BrenBarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrenBarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrenBarn/subscriptions", "organizations_url": "https://api.github.com/users/BrenBarn/orgs", "repos_url": "https://api.github.com/users/BrenBarn/repos", "events_url": "https://api.github.com/users/BrenBarn/events{/privacy}", "received_events_url": "https://api.github.com/users/BrenBarn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-19T06:31:41Z", "updated_at": "2017-01-23T02:46:44Z", "closed_at": "2017-01-23T02:46:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if funcutils.wraps included the original function in a `__wrapped__` attribute, as functools.wraps does since Python 3.2.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/112", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/112/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/112/events", "html_url": "https://github.com/mahmoud/boltons/issues/112", "id": 200972674, "node_id": "MDU6SXNzdWUyMDA5NzI2NzQ=", "number": 112, "title": "tbutils ExceptionInfo and TracebackInfo to_dict() result not JSON serializable", "user": {"login": "doron-cohen", "id": 4966182, "node_id": "MDQ6VXNlcjQ5NjYxODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4966182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doron-cohen", "html_url": "https://github.com/doron-cohen", "followers_url": "https://api.github.com/users/doron-cohen/followers", "following_url": "https://api.github.com/users/doron-cohen/following{/other_user}", "gists_url": "https://api.github.com/users/doron-cohen/gists{/gist_id}", "starred_url": "https://api.github.com/users/doron-cohen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doron-cohen/subscriptions", "organizations_url": "https://api.github.com/users/doron-cohen/orgs", "repos_url": "https://api.github.com/users/doron-cohen/repos", "events_url": "https://api.github.com/users/doron-cohen/events{/privacy}", "received_events_url": "https://api.github.com/users/doron-cohen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-16T09:49:32Z", "updated_at": "2017-01-22T05:48:29Z", "closed_at": "2017-01-22T05:48:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wanted to use tbutils to serialize whatever exceptions thrown at me and store them in a DB but `to_dict()` result is not JSON serializable which is kind of weird.\r\n\r\nWhen I looked it up it seems that it's because `line` field in each `CallPoint` object is not of a native `str` type (although it says it is in the [docs](http://boltons.readthedocs.io/en/latest/tbutils.html#boltons.tbutils.Callpoint)). It is of type `boltons.tbutils._DeferredLine`.\r\n\r\nI wrote a JSON serializer that handles that, but if there is no special reason for that I suggest returning a native string. Or at least update the documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/109", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/109/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/109/events", "html_url": "https://github.com/mahmoud/boltons/issues/109", "id": 200574970, "node_id": "MDU6SXNzdWUyMDA1NzQ5NzA=", "number": 109, "title": "'cachedproperty' decorator replace original's method docstring", "user": {"login": "kdeldycke", "id": 159718, "node_id": "MDQ6VXNlcjE1OTcxOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/159718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdeldycke", "html_url": "https://github.com/kdeldycke", "followers_url": "https://api.github.com/users/kdeldycke/followers", "following_url": "https://api.github.com/users/kdeldycke/following{/other_user}", "gists_url": "https://api.github.com/users/kdeldycke/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdeldycke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdeldycke/subscriptions", "organizations_url": "https://api.github.com/users/kdeldycke/orgs", "repos_url": "https://api.github.com/users/kdeldycke/repos", "events_url": "https://api.github.com/users/kdeldycke/events{/privacy}", "received_events_url": "https://api.github.com/users/kdeldycke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-01-13T08:39:32Z", "updated_at": "2017-01-15T01:52:43Z", "closed_at": "2017-01-14T22:28:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using ``cachedproperty`` a lot as a decorator but the latter seems to replace the original method's docstring by its own.\r\n\r\nSee for instance that code: https://github.com/kdeldycke/maildir-deduplicate/blob/v2.0.1/maildir_deduplicate/mail.py#L59-L68 . It is rendered by Sphinx with the decorator's docstring instead of the one from the decorated method. See: https://maildir-deduplicate.readthedocs.io/en/stable/maildir_deduplicate.html#maildir_deduplicate.mail.Mail.message", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/100", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/100/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/100/events", "html_url": "https://github.com/mahmoud/boltons/issues/100", "id": 185393241, "node_id": "MDU6SXNzdWUxODUzOTMyNDE=", "number": 100, "title": "Tag for 16.5.0 missing from repository", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-26T13:28:03Z", "updated_at": "2016-10-28T04:59:08Z", "closed_at": "2016-10-26T15:51:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\n\nThe latest boltons release on PyPI is [16.5.0](https://pypi.org/project/boltons/16.5.0/), but this tag is missing from the repository.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/89", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/89/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/89/events", "html_url": "https://github.com/mahmoud/boltons/issues/89", "id": 173467555, "node_id": "MDU6SXNzdWUxNzM0Njc1NTU=", "number": 89, "title": "consider combining efforts with unstdlib", "user": {"login": "ericfrederich", "id": 1167238, "node_id": "MDQ6VXNlcjExNjcyMzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1167238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericfrederich", "html_url": "https://github.com/ericfrederich", "followers_url": "https://api.github.com/users/ericfrederich/followers", "following_url": "https://api.github.com/users/ericfrederich/following{/other_user}", "gists_url": "https://api.github.com/users/ericfrederich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericfrederich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericfrederich/subscriptions", "organizations_url": "https://api.github.com/users/ericfrederich/orgs", "repos_url": "https://api.github.com/users/ericfrederich/repos", "events_url": "https://api.github.com/users/ericfrederich/events{/privacy}", "received_events_url": "https://api.github.com/users/ericfrederich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-26T14:33:06Z", "updated_at": "2020-04-16T21:24:36Z", "closed_at": "2020-04-16T21:24:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[unstdlib](https://github.com/shazow/unstdlib.py) seems to have similar goals as this project.\n\nThere are some things in there which I like to use such as [listify](https://github.com/shazow/unstdlib.py/blob/master/unstdlib/standard/list_.py)\n\nI an always use both of these projects, but would be nice to combine efforts\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/88", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/88/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/88/events", "html_url": "https://github.com/mahmoud/boltons/issues/88", "id": 171857471, "node_id": "MDU6SXNzdWUxNzE4NTc0NzE=", "number": 88, "title": "Clarification of project allegance", "user": {"login": "fish2000", "id": 378969, "node_id": "MDQ6VXNlcjM3ODk2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/378969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fish2000", "html_url": "https://github.com/fish2000", "followers_url": "https://api.github.com/users/fish2000/followers", "following_url": "https://api.github.com/users/fish2000/following{/other_user}", "gists_url": "https://api.github.com/users/fish2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/fish2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fish2000/subscriptions", "organizations_url": "https://api.github.com/users/fish2000/orgs", "repos_url": "https://api.github.com/users/fish2000/repos", "events_url": "https://api.github.com/users/fish2000/events{/privacy}", "received_events_url": "https://api.github.com/users/fish2000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-18T09:30:28Z", "updated_at": "2016-08-18T17:20:15Z", "closed_at": "2016-08-18T17:20:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "While the `boltons` project laudably disavows upfront any association with Michael Bolton, it is nonetheless silent on the matter of whether or not it has anything to do with [Ramsay Bolton](http://awoiaf.westeros.org/index.php/Ramsay_Snow) \u2013 which I would argue is a more pressingly pertinent disclosure.\n\n![ramsay-bolton-face-sadistic-typical](https://cloud.githubusercontent.com/assets/378969/17768913/4c84d904-6504-11e6-9be1-c1ccb5dd15f9.jpg)\n\nIf at all possible, an explicit note in README.md about whether or not this project is at all related to Ramsay Bolton, one way or the other, would no doubt be appreciated by any and all users of this otherwise robust and circumspectly complete Python utility package. Thank you!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/87", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/87/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/87/events", "html_url": "https://github.com/mahmoud/boltons/issues/87", "id": 171224704, "node_id": "MDU6SXNzdWUxNzEyMjQ3MDQ=", "number": 87, "title": "remap enter to skip some items", "user": {"login": "grundic", "id": 207278, "node_id": "MDQ6VXNlcjIwNzI3OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/207278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grundic", "html_url": "https://github.com/grundic", "followers_url": "https://api.github.com/users/grundic/followers", "following_url": "https://api.github.com/users/grundic/following{/other_user}", "gists_url": "https://api.github.com/users/grundic/gists{/gist_id}", "starred_url": "https://api.github.com/users/grundic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grundic/subscriptions", "organizations_url": "https://api.github.com/users/grundic/orgs", "repos_url": "https://api.github.com/users/grundic/repos", "events_url": "https://api.github.com/users/grundic/events{/privacy}", "received_events_url": "https://api.github.com/users/grundic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-15T17:58:09Z", "updated_at": "2016-08-16T13:05:46Z", "closed_at": "2016-08-16T13:05:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "During iteration through data I would like to skip some items.\nAs described in [docs](http://boltons.readthedocs.io/en/latest/iterutils.html#boltons.iterutils.remap), it should be possible to skip visiting some elements if return `False` as a second value from return. But even with such a trivial example I've got an error:\n\n``` python\nremap({'foo': 'bar'}, enter=lambda p, k, v: ({}, False))\n>>> TypeError: expected remappable root, not: {'foo': 'bar'}\n```\n\nAm I doing something wrong or it's a bug?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/86", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/86/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/86/events", "html_url": "https://github.com/mahmoud/boltons/issues/86", "id": 168767773, "node_id": "MDU6SXNzdWUxNjg3Njc3NzM=", "number": 86, "title": "decorate classmethods", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-01T23:46:03Z", "updated_at": "2016-08-03T09:49:03Z", "closed_at": "2016-08-03T09:11:15Z", "author_association": "OWNER", "active_lock_reason": null, "body": "@hynek wants em: https://hynek.me/articles/decorators/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/83", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/83/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/83/events", "html_url": "https://github.com/mahmoud/boltons/issues/83", "id": 163697704, "node_id": "MDU6SXNzdWUxNjM2OTc3MDQ=", "number": 83, "title": "Make it possible to use single cache for different methods", "user": {"login": "grundic", "id": 207278, "node_id": "MDQ6VXNlcjIwNzI3OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/207278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grundic", "html_url": "https://github.com/grundic", "followers_url": "https://api.github.com/users/grundic/followers", "following_url": "https://api.github.com/users/grundic/following{/other_user}", "gists_url": "https://api.github.com/users/grundic/gists{/gist_id}", "starred_url": "https://api.github.com/users/grundic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grundic/subscriptions", "organizations_url": "https://api.github.com/users/grundic/orgs", "repos_url": "https://api.github.com/users/grundic/repos", "events_url": "https://api.github.com/users/grundic/events{/privacy}", "received_events_url": "https://api.github.com/users/grundic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-07-04T15:23:52Z", "updated_at": "2016-07-25T09:37:45Z", "closed_at": "2016-07-19T07:24:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to implement cache separation of different methods with same signature for `cachedmethod` decorator? Here is small example with use of `boltons` and `cachetools`:\n\n``` python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport operator\nfrom boltons import cacheutils\nimport cachetools\n\n\nclass BoltonsCalculator(object):\n    def __init__(self):\n        self.cache = cacheutils.LRU()\n\n    @cacheutils.cachedmethod('cache')\n    def square(self, number):\n        print(\"Calculating square of {}\".format(number))\n        return number * number\n\n    @cacheutils.cachedmethod('cache')\n    def cube(self, number):\n        print(\"Calculating cube of {}\".format(number))\n        return number * number * number\n\n\nclass CachetoolsCalculator(object):\n    def __init__(self):\n        self.cache = cachetools.LRUCache(128)\n\n    @cachetools.cachedmethod(operator.attrgetter('cache'))\n    def square(self, number):\n        print(\"Calculating square of {}\".format(number))\n        return number * number\n\n    @cachetools.cachedmethod(operator.attrgetter('cache'))\n    def cube(self, number):\n        print(\"Calculating cube of {}\".format(number))\n        return number * number * number\n\n\nif __name__ == '__main__':\n    boltons_calc = BoltonsCalculator()\n    print(boltons_calc.square(2))\n    print(boltons_calc.square(2))\n    print(boltons_calc.cube(2))\n\n    print('-' * 80)\n\n    cachetools_calc = CachetoolsCalculator()\n    print(cachetools_calc.square(2))\n    print(cachetools_calc.square(2))\n    print(cachetools_calc.cube(2))\n\n```\n\nHere is output:\n\n``` bash\nCalculating square of 2\n4\n4\n4 <== I expect to get 8 here\n--------------------------------------------------------------------------------\nCalculating square of 2\n4\n4\nCalculating cube of 2\n8\n\nProcess finished with exit code 0\n\n```\n\nAs you can see, third print gives us _4_, though I expect to get _8_.\nMaybe [this](https://github.com/tkem/cachetools/blob/master/cachetools/__init__.py#L89) could help you better understand how this is implemented in `cachetools`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/80", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/80/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/80/events", "html_url": "https://github.com/mahmoud/boltons/issues/80", "id": 158922713, "node_id": "MDU6SXNzdWUxNTg5MjI3MTM=", "number": 80, "title": "Make it possible to reconstruct parsed tracebacks?", "user": {"login": "d33tah", "id": 295322, "node_id": "MDQ6VXNlcjI5NTMyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d33tah", "html_url": "https://github.com/d33tah", "followers_url": "https://api.github.com/users/d33tah/followers", "following_url": "https://api.github.com/users/d33tah/following{/other_user}", "gists_url": "https://api.github.com/users/d33tah/gists{/gist_id}", "starred_url": "https://api.github.com/users/d33tah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d33tah/subscriptions", "organizations_url": "https://api.github.com/users/d33tah/orgs", "repos_url": "https://api.github.com/users/d33tah/repos", "events_url": "https://api.github.com/users/d33tah/events{/privacy}", "received_events_url": "https://api.github.com/users/d33tah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-06-07T13:27:30Z", "updated_at": "2016-06-09T22:48:15Z", "closed_at": "2016-06-09T22:40:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current ParsedException class isn't compatible with \"traceback\" module:\n\n```\n[15:25:23]>>> traceback.print_tb(tb)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python2.7/traceback.py\", line 61, in print_tb\n    f = tb.tb_frame\nAttributeError: 'ParsedException' object has no attribute 'tb_frame'\n```\n\nPerhaps it would be a good idea to make it possible to recontruct tracebacks back to strings after manipulation?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/73", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/73/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/73/events", "html_url": "https://github.com/mahmoud/boltons/issues/73", "id": 154019914, "node_id": "MDU6SXNzdWUxNTQwMTk5MTQ=", "number": 73, "title": "socketutils failures on Windows", "user": {"login": "kalefranz", "id": 1418419, "node_id": "MDQ6VXNlcjE0MTg0MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1418419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kalefranz", "html_url": "https://github.com/kalefranz", "followers_url": "https://api.github.com/users/kalefranz/followers", "following_url": "https://api.github.com/users/kalefranz/following{/other_user}", "gists_url": "https://api.github.com/users/kalefranz/gists{/gist_id}", "starred_url": "https://api.github.com/users/kalefranz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kalefranz/subscriptions", "organizations_url": "https://api.github.com/users/kalefranz/orgs", "repos_url": "https://api.github.com/users/kalefranz/repos", "events_url": "https://api.github.com/users/kalefranz/events{/privacy}", "received_events_url": "https://api.github.com/users/kalefranz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-05-10T14:26:19Z", "updated_at": "2016-05-23T17:53:45Z", "closed_at": "2016-05-23T17:53:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Another follow-on from #71 \n\nThe `tests\\test_socketutils.py` file has 9 failures on Windows python 2.7 and 3.4, and 2 failures on Windows python 3.5.\n\npython 2.7: https://ci.appveyor.com/project/conda-forge/staged-recipes/build/1.0.2072/job/8e0vidh6my09nlrt\npython 3.4: https://ci.appveyor.com/project/conda-forge/staged-recipes/build/1.0.2072/job/4tw9568trk76v9mp\npython 3.5: https://ci.appveyor.com/project/conda-forge/staged-recipes/build/1.0.2072/job/uy77xdh8x8qlwgxg\n\nAgain, I'll dig in on a PR at some point if somebody else doesn't beat me to it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/72", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/72/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/72/events", "html_url": "https://github.com/mahmoud/boltons/issues/72", "id": 154019317, "node_id": "MDU6SXNzdWUxNTQwMTkzMTc=", "number": 72, "title": "fileutils error on Windows", "user": {"login": "kalefranz", "id": 1418419, "node_id": "MDQ6VXNlcjE0MTg0MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1418419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kalefranz", "html_url": "https://github.com/kalefranz", "followers_url": "https://api.github.com/users/kalefranz/followers", "following_url": "https://api.github.com/users/kalefranz/following{/other_user}", "gists_url": "https://api.github.com/users/kalefranz/gists{/gist_id}", "starred_url": "https://api.github.com/users/kalefranz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kalefranz/subscriptions", "organizations_url": "https://api.github.com/users/kalefranz/orgs", "repos_url": "https://api.github.com/users/kalefranz/repos", "events_url": "https://api.github.com/users/kalefranz/events{/privacy}", "received_events_url": "https://api.github.com/users/kalefranz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-05-10T14:23:47Z", "updated_at": "2016-05-10T17:06:58Z", "closed_at": "2016-05-10T17:06:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A follow-on from https://github.com/mahmoud/boltons/issues/71\n\npython 2.7, 3.4, and 3.5--both 32-bit and 64-bit--have a test failure in the fileutils.\n\n```\n_________________ [doctest] boltons.fileutils.iter_find_files _________________\n462             search. Yielded paths will include this as a prefix. \n463         patterns (str or list): A single pattern or list of \n464             glob-formatted patterns to find under *directory*. \n465         ignored (str or list): A single pattern or list of \n466             glob-formatted patterns to ignore.\n467  \n468     For example, finding Python files in the current directory: \n469  \n470     >>> filenames = sorted(iter_find_files(_CUR_DIR, '*.py')) \n471     >>> filenames[-1].split('/')[-1] \nExpected:\n    'typeutils.py'\nGot:\n    'C:\\\\Miniconda-x64\\\\conda-bld\\\\work\\\\boltons\\\\typeutils.py' \n\nC:\\Miniconda-x64\\conda-bld\\work\\boltons\\fileutils.py:471: DocTestFailure \n```\n\nLooks like a simple fix to use `os.path.basename` there instead of `.split('/')`.\n\nI'll work on a PR at some point if somebody else doesn't beat me to it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/71", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/71/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/71/events", "html_url": "https://github.com/mahmoud/boltons/issues/71", "id": 154017362, "node_id": "MDU6SXNzdWUxNTQwMTczNjI=", "number": 71, "title": "socketutils error in master on OSX", "user": {"login": "kalefranz", "id": 1418419, "node_id": "MDQ6VXNlcjE0MTg0MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1418419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kalefranz", "html_url": "https://github.com/kalefranz", "followers_url": "https://api.github.com/users/kalefranz/followers", "following_url": "https://api.github.com/users/kalefranz/following{/other_user}", "gists_url": "https://api.github.com/users/kalefranz/gists{/gist_id}", "starred_url": "https://api.github.com/users/kalefranz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kalefranz/subscriptions", "organizations_url": "https://api.github.com/users/kalefranz/orgs", "repos_url": "https://api.github.com/users/kalefranz/repos", "events_url": "https://api.github.com/users/kalefranz/events{/privacy}", "received_events_url": "https://api.github.com/users/kalefranz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-05-10T14:15:31Z", "updated_at": "2016-05-23T17:55:20Z", "closed_at": "2016-05-23T17:55:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm working on building conda packages for boltons through conda-forge.  The in-progress PR is https://github.com/conda-forge/staged-recipes/pull/560\n\nLinux packages build just fine (and it looks like those are what's covered in your .travis.yml).  There is one error on OS X and a few on Windows.  I'll file the Windows ticket separately.\n\nThe OS X error is in `tests/test_socketutils.py:test_client_disconnecting` and the full error output is [here](https://travis-ci.org/conda-forge/staged-recipes/jobs/129146756#L615)\n\n```\n__________________________ test_client_disconnecting ___________________________\n    def test_client_disconnecting():\n        def get_bs_pair():\n            x, y = socket.socketpair()\n            bx, by = BufferedSocket(x), BufferedSocket(y)\n\n            # sanity check\n            by.sendall(b'123')\n            bx.recv_size(3) == b'123'\n\n            return bx, by\n\n        bx, by = get_bs_pair()\n        assert bx.fileno() > 0\n\n        bx.close()\n        assert bx.getrecvbuffer() == b''\n\n        try:\n            bx.recv(1)\n        except socket.error:\n            pass\n        else:\n            assert False, 'expected socket.error on closed recv'\n\n        assert bx.fileno() == -1\n\n        by.buffer(b'123')\n        assert by.getsendbuffer()\n        try:\n            by.flush()\n        except socket.error:\n            assert by.getsendbuffer() == b'123'\n        else:\n            assert False, 'expected socket.error broken pipe'\n\n>       by.shutdown(socket.SHUT_RDWR)\n../work/tests/test_socketutils.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nself = <boltons.socketutils.BufferedSocket object at 0x102d1bd10>, how = 2\n    def shutdown(self, how):\n        \"\"\"Convenience method which passes through to the wrapped socket's\n            :meth:`~socket.shutdown`. Semantics vary by platform, so no\n            special internal handling is done with the buffers. This\n            method exists to facilitate the most common usage, wherein a\n            full ``shutdown`` is followed by a\n            :meth:`~BufferedSocket.close`. Developers requiring more\n            support, please open `an issue`_.\n\n            .. _an issue: https://github.com/mahmoud/boltons/issues\n            \"\"\"\n        with self._recv_lock:\n            with self._send_lock:\n>               self.sock.shutdown(how)\nE               error: [Errno 57] Socket is not connected\n../work/boltons/socketutils.py:559: error\n```\n\nWanted to file the issue to start. At some point I'll dig in on a PR if somebody else doesn't get to it first.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/70", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/70/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/70/events", "html_url": "https://github.com/mahmoud/boltons/issues/70", "id": 153436427, "node_id": "MDU6SXNzdWUxNTM0MzY0Mjc=", "number": 70, "title": "Add possibility to use cacheutils's decorator on class methods", "user": {"login": "grundic", "id": 207278, "node_id": "MDQ6VXNlcjIwNzI3OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/207278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grundic", "html_url": "https://github.com/grundic", "followers_url": "https://api.github.com/users/grundic/followers", "following_url": "https://api.github.com/users/grundic/following{/other_user}", "gists_url": "https://api.github.com/users/grundic/gists{/gist_id}", "starred_url": "https://api.github.com/users/grundic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grundic/subscriptions", "organizations_url": "https://api.github.com/users/grundic/orgs", "repos_url": "https://api.github.com/users/grundic/repos", "events_url": "https://api.github.com/users/grundic/events{/privacy}", "received_events_url": "https://api.github.com/users/grundic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-05-06T11:57:35Z", "updated_at": "2016-05-17T17:47:07Z", "closed_at": "2016-05-17T09:31:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, great module first of all!\nRight now I have to use [cachetools](https://github.com/tkem/cachetools) module, which provides `cachedmethod` decorator for using with class/instance methods.\n\nWould it be possible to implement same for `cached` decorator so it would be possible to run something like:\n\n``` python\nclass Example(object):\n    def __init__(self):\n        self._cache = LRU()\n\n    @cached(operator.attrgetter('_cache'))\n    def heavy_func(self):\n        print('Called')\n        return 100500\n\ninstance = Example()\nfor _ in range(20):\n    instance.heavy_func()  # should print `Called` just once\n```\n\nIdeally I would prefer single decorator for generic functions and for class methods, but if it's not possible it could be implemented with two different ones.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/67", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/67/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/67/events", "html_url": "https://github.com/mahmoud/boltons/issues/67", "id": 140412180, "node_id": "MDU6SXNzdWUxNDA0MTIxODA=", "number": 67, "title": "Python 3.5 support", "user": {"login": "dszmaj", "id": 3924928, "node_id": "MDQ6VXNlcjM5MjQ5Mjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3924928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dszmaj", "html_url": "https://github.com/dszmaj", "followers_url": "https://api.github.com/users/dszmaj/followers", "following_url": "https://api.github.com/users/dszmaj/following{/other_user}", "gists_url": "https://api.github.com/users/dszmaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/dszmaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dszmaj/subscriptions", "organizations_url": "https://api.github.com/users/dszmaj/orgs", "repos_url": "https://api.github.com/users/dszmaj/repos", "events_url": "https://api.github.com/users/dszmaj/events{/privacy}", "received_events_url": "https://api.github.com/users/dszmaj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-03-12T19:59:41Z", "updated_at": "2016-03-13T02:27:38Z", "closed_at": "2016-03-12T20:28:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\n\nthanks for very useful package :)\n\nHave you considered Python 3.5 support? Should I expect some unpredicted behaviour?\n\nBest  #regards,\nDominik Szmaj\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/66", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/66/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/66/events", "html_url": "https://github.com/mahmoud/boltons/issues/66", "id": 139226689, "node_id": "MDU6SXNzdWUxMzkyMjY2ODk=", "number": 66, "title": "Cached property", "user": {"login": "kdeldycke", "id": 159718, "node_id": "MDQ6VXNlcjE1OTcxOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/159718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdeldycke", "html_url": "https://github.com/kdeldycke", "followers_url": "https://api.github.com/users/kdeldycke/followers", "following_url": "https://api.github.com/users/kdeldycke/following{/other_user}", "gists_url": "https://api.github.com/users/kdeldycke/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdeldycke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdeldycke/subscriptions", "organizations_url": "https://api.github.com/users/kdeldycke/orgs", "repos_url": "https://api.github.com/users/kdeldycke/repos", "events_url": "https://api.github.com/users/kdeldycke/events{/privacy}", "received_events_url": "https://api.github.com/users/kdeldycke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-03-08T09:41:55Z", "updated_at": "2016-05-17T17:46:14Z", "closed_at": "2016-05-17T12:41:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm currently using [`cached-property`](https://pypi.python.org/pypi/cached-property) alongside `boltons` and I feel like `cached-property` features can be emulated with `boltons.cacheutils`.\n\nIs this under the scope of `boltons`? Should we add some utils to support this feature in `boltons`?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/60", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/60/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/60/events", "html_url": "https://github.com/mahmoud/boltons/issues/60", "id": 135752958, "node_id": "MDU6SXNzdWUxMzU3NTI5NTg=", "number": 60, "title": "os.rename called in fileutils breaks on Windows if directory exists", "user": {"login": "davidovich", "id": 1440370, "node_id": "MDQ6VXNlcjE0NDAzNzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1440370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidovich", "html_url": "https://github.com/davidovich", "followers_url": "https://api.github.com/users/davidovich/followers", "following_url": "https://api.github.com/users/davidovich/following{/other_user}", "gists_url": "https://api.github.com/users/davidovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidovich/subscriptions", "organizations_url": "https://api.github.com/users/davidovich/orgs", "repos_url": "https://api.github.com/users/davidovich/repos", "events_url": "https://api.github.com/users/davidovich/events{/privacy}", "received_events_url": "https://api.github.com/users/davidovich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-02-23T14:34:31Z", "updated_at": "2016-02-25T09:47:56Z", "closed_at": "2016-02-25T09:47:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "This was seen in the pip-tools code that is vendoring the AtomicSaver code from boltons.\n\nhttps://github.com/nvie/pip-tools/pull/322\n\nin essence, the os.rename cannot be implemented atomically on Windows, but the current code breaks if exercised. (see the issue in pip-tools). \n\nI will make a PR here as suggested by https://github.com/nvie\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/55", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/55/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/55/events", "html_url": "https://github.com/mahmoud/boltons/issues/55", "id": 128019954, "node_id": "MDU6SXNzdWUxMjgwMTk5NTQ=", "number": 55, "title": "Adding entry to LRU cache fails with KeyError", "user": {"login": "mt", "id": 3988, "node_id": "MDQ6VXNlcjM5ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mt", "html_url": "https://github.com/mt", "followers_url": "https://api.github.com/users/mt/followers", "following_url": "https://api.github.com/users/mt/following{/other_user}", "gists_url": "https://api.github.com/users/mt/gists{/gist_id}", "starred_url": "https://api.github.com/users/mt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mt/subscriptions", "organizations_url": "https://api.github.com/users/mt/orgs", "repos_url": "https://api.github.com/users/mt/repos", "events_url": "https://api.github.com/users/mt/events{/privacy}", "received_events_url": "https://api.github.com/users/mt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-01-21T21:09:28Z", "updated_at": "2016-01-22T15:12:53Z", "closed_at": "2016-01-22T15:12:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "For certain sequences of key insertions, a KeyError is produced in the LRU\n\nFor example: \n\n``` python\ndef produce_key_error():\n    from boltons.cacheutils import LRU\n    cache = LRU(max_size=3)\n\n    keys = ['A', 'A', 'B', 'A', 'C', 'B', 'D', 'E']\n    for k in keys:\n        cache[k] = 'HIT'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/52", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/52/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/52/events", "html_url": "https://github.com/mahmoud/boltons/issues/52", "id": 117425860, "node_id": "MDU6SXNzdWUxMTc0MjU4NjA=", "number": 52, "title": "`LRU` thread safety fails after `max_size` insertions", "user": {"login": "msambarino", "id": 4351140, "node_id": "MDQ6VXNlcjQzNTExNDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4351140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msambarino", "html_url": "https://github.com/msambarino", "followers_url": "https://api.github.com/users/msambarino/followers", "following_url": "https://api.github.com/users/msambarino/following{/other_user}", "gists_url": "https://api.github.com/users/msambarino/gists{/gist_id}", "starred_url": "https://api.github.com/users/msambarino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msambarino/subscriptions", "organizations_url": "https://api.github.com/users/msambarino/orgs", "repos_url": "https://api.github.com/users/msambarino/repos", "events_url": "https://api.github.com/users/msambarino/events{/privacy}", "received_events_url": "https://api.github.com/users/msambarino/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-11-17T19:05:16Z", "updated_at": "2015-11-19T12:27:17Z", "closed_at": "2015-11-19T06:47:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, i've come across an error when using `LRU` in a multi-threaded app, heres an example:\n\n``` python\nfrom boltons.cacheutils import LRU\nimport threading\nimport time\n\ncache = LRU(max_size = 2)\n\ndef fill_cache():\n    for i in xrange(5):\n        cache[i] = i\n        print(cache)\n        time.sleep(0.1)\n\nt1 = threading.Thread(target=fill_cache)\nt2 = threading.Thread(target=fill_cache)\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n```\n\n``` python\nLRU(max_size=2, on_miss=None, values={0: 0})\nLRU(max_size=2, on_miss=None, values={0: 0})\nLRU(max_size=2, on_miss=None, values={0: 0, 1: 1})\nLRU(max_size=2, on_miss=None, values={1: 1})\nLRU(max_size=2, on_miss=None, values={1: 1, 2: 2})\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\n    self.run()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 763, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"lrutest.py\", line 9, in fill_cache\n    cache[i] = i\n  File \"/Users/mauri/.virtualenvs/lrutest/lib/python2.7/site-packages/boltons/cacheutils.py\", line 149, in __setitem__\n    del self.link_map[oldkey]\nKeyError: 0\n\nLRU(max_size=2, on_miss=None, values={2: 2, 3: 3})\nException in thread Thread-2:\nTraceback (most recent call last):\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\n    self.run()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 763, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"lrutest.py\", line 9, in fill_cache\n    cache[i] = i\n  File \"/Users/mauri/.virtualenvs/lrutest/lib/python2.7/site-packages/boltons/cacheutils.py\", line 149, in __setitem__\n    del self.link_map[oldkey]\nKeyError: 1\n```\n\nIn case it helps, im using python **2.7.10** and boltons **15.1.0**\n\nps: Thanks for an awesome library!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/50", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/50/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/50/events", "html_url": "https://github.com/mahmoud/boltons/issues/50", "id": 110499714, "node_id": "MDU6SXNzdWUxMTA0OTk3MTQ=", "number": 50, "title": "Return a pair from boltons.iterutils.bucketize", "user": {"login": "dan-passaro", "id": 7405774, "node_id": "MDQ6VXNlcjc0MDU3NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7405774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dan-passaro", "html_url": "https://github.com/dan-passaro", "followers_url": "https://api.github.com/users/dan-passaro/followers", "following_url": "https://api.github.com/users/dan-passaro/following{/other_user}", "gists_url": "https://api.github.com/users/dan-passaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/dan-passaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dan-passaro/subscriptions", "organizations_url": "https://api.github.com/users/dan-passaro/orgs", "repos_url": "https://api.github.com/users/dan-passaro/repos", "events_url": "https://api.github.com/users/dan-passaro/events{/privacy}", "received_events_url": "https://api.github.com/users/dan-passaro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-08T17:06:18Z", "updated_at": "2015-10-08T21:12:50Z", "closed_at": "2015-10-08T17:07:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "**EDIT**: nevermind, just read the docs for `partition`. Derp\n\nHey there,\n\nReading the docs of this lib and wondering why not return a pair from `bucketize`?\n\nCurrent behavior:\n\n```\n>>> bucketize(range(5))\n{False: [0], True: [1, 2, 3, 4]}\n>>> is_odd = lambda x: x % 2 == 1\n>>> bucketize(range(5), is_odd)\n{False: [0, 2, 4], True: [1, 3]}\n```\n\nInstead:\n\n```\n>>> bucketize(range(5))\n{False: [0], True: [1, 2, 3, 4]}\n>>> is_odd = lambda x: x % 2 == 1\n>>> bucketize(range(5), is_odd)\n([0, 2, 4], [1, 3])\n```\n\nI feel this will make client code more straightforward.\n\n```\n>>> groups = bucektize(range(5), is_odd)\n>>> even_nums = groups[False]\n>>> odd_nums = groups[True]\n```\n\nvs.\n\n```\n>>> even_nums, odd_nums = bucketize(range(5), is_odd)\n```\n\nThoughts?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/45", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/45/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/45/events", "html_url": "https://github.com/mahmoud/boltons/issues/45", "id": 98158372, "node_id": "MDU6SXNzdWU5ODE1ODM3Mg==", "number": 45, "title": "PermissionError with AtomicSaver on Windows", "user": {"login": "stlehmann", "id": 4641542, "node_id": "MDQ6VXNlcjQ2NDE1NDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4641542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlehmann", "html_url": "https://github.com/stlehmann", "followers_url": "https://api.github.com/users/stlehmann/followers", "following_url": "https://api.github.com/users/stlehmann/following{/other_user}", "gists_url": "https://api.github.com/users/stlehmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlehmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlehmann/subscriptions", "organizations_url": "https://api.github.com/users/stlehmann/orgs", "repos_url": "https://api.github.com/users/stlehmann/repos", "events_url": "https://api.github.com/users/stlehmann/events{/privacy}", "received_events_url": "https://api.github.com/users/stlehmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2015-07-30T12:31:24Z", "updated_at": "2015-07-31T10:15:53Z", "closed_at": "2015-07-31T09:59:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I try this little code on Windows 7:\n\n``` python\nfrom boltons.fileutils import AtomicSaver\nwith AtomicSaver('foo.txt') as f:\n    f.write('whatever')\n```\n\nI get the following Exception:\n\n``` bash\nTraceback (most recent call last):\n  File \"C:\\Python34\\lib\\site-packages\\boltons\\fileutils.py\", line 272, in setup\n    overwrite=self.overwrite_part)\n  File \"C:\\Python34\\lib\\site-packages\\boltons\\fileutils.py\", line 194, in _atomic_rename\n    os.rename(path, new_path)\nPermissionError: [WinError 32] Der Prozess kann nicht auf die Datei zugreifen, da sie von einem ande\nren Prozess verwendet wird: 'C:\\\\Windows\\\\System32\\\\tmphia0tzzm' -> 'foo.txt.part'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Python34\\lib\\site-packages\\boltons\\fileutils.py\", line 281, in __enter__\n    self.setup()\n  File \"C:\\Python34\\lib\\site-packages\\boltons\\fileutils.py\", line 274, in setup\n    os.unlink(tmp_part_path)\nPermissionError: [WinError 32] Der Prozess kann nicht auf die Datei zugreifen, da sie von einem ande\nren Prozess verwendet wird: 'C:\\\\Windows\\\\System32\\\\tmphia0tzzm'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/41", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/41/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/41/events", "html_url": "https://github.com/mahmoud/boltons/issues/41", "id": 79950324, "node_id": "MDU6SXNzdWU3OTk1MDMyNA==", "number": 41, "title": "Plural of index", "user": {"login": "pts", "id": 379746, "node_id": "MDQ6VXNlcjM3OTc0Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/379746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pts", "html_url": "https://github.com/pts", "followers_url": "https://api.github.com/users/pts/followers", "following_url": "https://api.github.com/users/pts/following{/other_user}", "gists_url": "https://api.github.com/users/pts/gists{/gist_id}", "starred_url": "https://api.github.com/users/pts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pts/subscriptions", "organizations_url": "https://api.github.com/users/pts/orgs", "repos_url": "https://api.github.com/users/pts/repos", "events_url": "https://api.github.com/users/pts/events{/privacy}", "received_events_url": "https://api.github.com/users/pts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-23T20:51:21Z", "updated_at": "2015-05-23T21:30:16Z", "closed_at": "2015-05-23T21:30:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "In strutils, the plural of index should be either indexes or indicies, but not indeces.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/35", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/35/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/35/events", "html_url": "https://github.com/mahmoud/boltons/issues/35", "id": 70958005, "node_id": "MDU6SXNzdWU3MDk1ODAwNQ==", "number": 35, "title": "Encoding unicode within nested structures (like from json.loads)", "user": {"login": "AXGKl", "id": 9989548, "node_id": "MDQ6VXNlcjk5ODk1NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/9989548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AXGKl", "html_url": "https://github.com/AXGKl", "followers_url": "https://api.github.com/users/AXGKl/followers", "following_url": "https://api.github.com/users/AXGKl/following{/other_user}", "gists_url": "https://api.github.com/users/AXGKl/gists{/gist_id}", "starred_url": "https://api.github.com/users/AXGKl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AXGKl/subscriptions", "organizations_url": "https://api.github.com/users/AXGKl/orgs", "repos_url": "https://api.github.com/users/AXGKl/repos", "events_url": "https://api.github.com/users/AXGKl/events{/privacy}", "received_events_url": "https://api.github.com/users/AXGKl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-04-25T19:35:02Z", "updated_at": "2015-05-04T12:47:02Z", "closed_at": "2015-04-29T07:04:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nthis little iteration would be nice to always have at hand when deserializing json. \n\nhttp://stackoverflow.com/a/13105359/4583360\n\nMany people like myself prefer to work with bytes and not with unicode but the json lib spits out unicode strings w/o an option to change.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/30", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/30/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/30/events", "html_url": "https://github.com/mahmoud/boltons/issues/30", "id": 69393317, "node_id": "MDU6SXNzdWU2OTM5MzMxNw==", "number": 30, "title": "ParsedException.from_string produces wrong result when a frame is missing source (such as from eval)", "user": {"login": "asottile", "id": 1810591, "node_id": "MDQ6VXNlcjE4MTA1OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1810591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asottile", "html_url": "https://github.com/asottile", "followers_url": "https://api.github.com/users/asottile/followers", "following_url": "https://api.github.com/users/asottile/following{/other_user}", "gists_url": "https://api.github.com/users/asottile/gists{/gist_id}", "starred_url": "https://api.github.com/users/asottile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asottile/subscriptions", "organizations_url": "https://api.github.com/users/asottile/orgs", "repos_url": "https://api.github.com/users/asottile/repos", "events_url": "https://api.github.com/users/asottile/events{/privacy}", "received_events_url": "https://api.github.com/users/asottile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-19T06:49:42Z", "updated_at": "2015-04-19T08:51:37Z", "closed_at": "2015-04-19T08:51:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Take this (modified from the original) trace:\n\n```\nTraceback (most recent call last):\n  File \"<string>\", line 2, in _some_function\n  File \"myfile.py\", line 3, in some_other_function\n    return foo(bar, baz)\nMyException: ExceptionValue\n```\n\nParsedException gives me an incorrect result:\n\n```\n>>> ParsedException.from_string(x)\nParsedException(u'    return foo(bar, baz)', u'', frames=[{'source_line': u'File \"myfile.py\", line 3, in some_other_function', 'filepath': u'<string>', 'lineno': u'2', 'funcname': u'_some_function'}])\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/28", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/28/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/28/events", "html_url": "https://github.com/mahmoud/boltons/issues/28", "id": 68057740, "node_id": "MDU6SXNzdWU2ODA1Nzc0MA==", "number": 28, "title": "Insert line of text into exception", "user": {"login": "toddrjen", "id": 2272878, "node_id": "MDQ6VXNlcjIyNzI4Nzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/2272878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddrjen", "html_url": "https://github.com/toddrjen", "followers_url": "https://api.github.com/users/toddrjen/followers", "following_url": "https://api.github.com/users/toddrjen/following{/other_user}", "gists_url": "https://api.github.com/users/toddrjen/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddrjen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddrjen/subscriptions", "organizations_url": "https://api.github.com/users/toddrjen/orgs", "repos_url": "https://api.github.com/users/toddrjen/repos", "events_url": "https://api.github.com/users/toddrjen/events{/privacy}", "received_events_url": "https://api.github.com/users/toddrjen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-13T09:50:20Z", "updated_at": "2015-04-14T07:51:28Z", "closed_at": "2015-04-14T07:51:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "One thing I often need to do is to insert an additional line of text into the exception message when handling an exception.  My main use-case for is in loops, particularly in unit tests, where I want to insert additional context information (such as the loop index) to make it easier to track down the source of the exception.  \n\nI also considered the idea of being able to alter the existing message, but I concluded that this is bad programming practice, hence the proposal to only append.\n\nSo something like this:\n\n``` Python\nfor i, item in enumerate(mylist):\n    try:\n        myfunc(item)\n    except BaseException:\n        AppendMsg('Exception for item %s: %s' % (i, item))\n        raise\n```\n\nI would be willing to implement this myself, but I want to verify that it would be acceptable before working on it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/24", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/24/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/24/events", "html_url": "https://github.com/mahmoud/boltons/issues/24", "id": 67813572, "node_id": "MDU6SXNzdWU2NzgxMzU3Mg==", "number": 24, "title": "Thread pool", "user": {"login": "ssundarraj", "id": 4509724, "node_id": "MDQ6VXNlcjQ1MDk3MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4509724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssundarraj", "html_url": "https://github.com/ssundarraj", "followers_url": "https://api.github.com/users/ssundarraj/followers", "following_url": "https://api.github.com/users/ssundarraj/following{/other_user}", "gists_url": "https://api.github.com/users/ssundarraj/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssundarraj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssundarraj/subscriptions", "organizations_url": "https://api.github.com/users/ssundarraj/orgs", "repos_url": "https://api.github.com/users/ssundarraj/repos", "events_url": "https://api.github.com/users/ssundarraj/events{/privacy}", "received_events_url": "https://api.github.com/users/ssundarraj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-04-11T17:47:54Z", "updated_at": "2015-06-17T06:13:15Z", "closed_at": "2015-06-17T06:13:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I have a small [thread pool library](http://github.com/srirams6/py-threadpool). I've noticed that the existing python thread pool implementations are not well maintained and/or have insufficient documentation. \n\nWould merging this with boltons be entertained?\n\nThanks,\nSriram\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/23", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/23/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/23/events", "html_url": "https://github.com/mahmoud/boltons/issues/23", "id": 67801109, "node_id": "MDU6SXNzdWU2NzgwMTEwOQ==", "number": 23, "title": "Add \"one\" function", "user": {"login": "mgaitan", "id": 2355719, "node_id": "MDQ6VXNlcjIzNTU3MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2355719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgaitan", "html_url": "https://github.com/mgaitan", "followers_url": "https://api.github.com/users/mgaitan/followers", "following_url": "https://api.github.com/users/mgaitan/following{/other_user}", "gists_url": "https://api.github.com/users/mgaitan/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgaitan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgaitan/subscriptions", "organizations_url": "https://api.github.com/users/mgaitan/orgs", "repos_url": "https://api.github.com/users/mgaitan/repos", "events_url": "https://api.github.com/users/mgaitan/events{/privacy}", "received_events_url": "https://api.github.com/users/mgaitan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-11T15:53:22Z", "updated_at": "2015-04-11T19:49:30Z", "closed_at": "2015-04-11T19:49:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a tiny package called `one` with just one \"missing\" function _\" to check if there is a unique value that evaluates to True in an iterable\"_. \n\nhttps://github.com/mgaitan/one\n\nI propose to merge it in the boltons's  `iterutils` module. I can send a PR if you like it\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/21", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/21/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/21/events", "html_url": "https://github.com/mahmoud/boltons/issues/21", "id": 67749440, "node_id": "MDU6SXNzdWU2Nzc0OTQ0MA==", "number": 21, "title": "`LRU` fails after `max_size` insertions", "user": {"login": "duerrp", "id": 2012334, "node_id": "MDQ6VXNlcjIwMTIzMzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2012334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duerrp", "html_url": "https://github.com/duerrp", "followers_url": "https://api.github.com/users/duerrp/followers", "following_url": "https://api.github.com/users/duerrp/following{/other_user}", "gists_url": "https://api.github.com/users/duerrp/gists{/gist_id}", "starred_url": "https://api.github.com/users/duerrp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duerrp/subscriptions", "organizations_url": "https://api.github.com/users/duerrp/orgs", "repos_url": "https://api.github.com/users/duerrp/repos", "events_url": "https://api.github.com/users/duerrp/events{/privacy}", "received_events_url": "https://api.github.com/users/duerrp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-11T07:31:39Z", "updated_at": "2015-04-11T08:58:19Z", "closed_at": "2015-04-11T08:56:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nhere's an example:\n\n```\nfrom boltons.cacheutils import LRU\ncache = LRU(max_size = 2)\nfor i in xrange(4):\n    cache[i] = i\n    print(cache)\n```\n\n```\nLRU(max_size=None, on_miss=2, values={0: 0})\nLRU(max_size=None, on_miss=2, values={0: 0, 1: 1})\nLRU(max_size=None, on_miss=2, values={1: 1, 2: 2})\nTraceback (most recent call last):\n  File \"test_lru.py\", line 9, in <module>\n    cache[i] = i\n  File \"/usr/local/lib/python2.7/dist-packages/boltons/cacheutils.py\", line 140, in __setitem__\n    del self.link_map[oldkey]\nKeyError: None\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/20", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/20/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/20/events", "html_url": "https://github.com/mahmoud/boltons/issues/20", "id": 67747542, "node_id": "MDU6SXNzdWU2Nzc0NzU0Mg==", "number": 20, "title": "`LRU.__repr__` bug", "user": {"login": "duerrp", "id": 2012334, "node_id": "MDQ6VXNlcjIwMTIzMzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2012334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duerrp", "html_url": "https://github.com/duerrp", "followers_url": "https://api.github.com/users/duerrp/followers", "following_url": "https://api.github.com/users/duerrp/following{/other_user}", "gists_url": "https://api.github.com/users/duerrp/gists{/gist_id}", "starred_url": "https://api.github.com/users/duerrp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duerrp/subscriptions", "organizations_url": "https://api.github.com/users/duerrp/orgs", "repos_url": "https://api.github.com/users/duerrp/repos", "events_url": "https://api.github.com/users/duerrp/events{/privacy}", "received_events_url": "https://api.github.com/users/duerrp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-04-11T07:12:56Z", "updated_at": "2015-04-11T08:20:02Z", "closed_at": "2015-04-11T08:20:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nThanks for fixing `cached`, now it works great. I've been playing with LRU and there's another small problem:\n\n```\ndef __repr__(self):\n        cn = self.__class__.__name__\n        val_map = super(LRU, self).__repr__()\n        return ('%s(max_size=%r, on_miss=%r, values=%s)'\n                % (cn, self.on_miss, self.max_size, val_map))\n```\n\nhas `max_size` and `on_miss` reversed.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/12", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/12/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/12/events", "html_url": "https://github.com/mahmoud/boltons/issues/12", "id": 67624918, "node_id": "MDU6SXNzdWU2NzYyNDkxOA==", "number": 12, "title": "`cached` not returning function", "user": {"login": "duerrp", "id": 2012334, "node_id": "MDQ6VXNlcjIwMTIzMzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2012334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duerrp", "html_url": "https://github.com/duerrp", "followers_url": "https://api.github.com/users/duerrp/followers", "following_url": "https://api.github.com/users/duerrp/following{/other_user}", "gists_url": "https://api.github.com/users/duerrp/gists{/gist_id}", "starred_url": "https://api.github.com/users/duerrp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duerrp/subscriptions", "organizations_url": "https://api.github.com/users/duerrp/orgs", "repos_url": "https://api.github.com/users/duerrp/repos", "events_url": "https://api.github.com/users/duerrp/events{/privacy}", "received_events_url": "https://api.github.com/users/duerrp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-10T15:53:21Z", "updated_at": "2015-04-10T16:22:36Z", "closed_at": "2015-04-10T16:22:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \n\ngreat collections of utilities! Unless I misunderstand something though, the cached decorator is missing a `return` (and a unit test). As is, it returns `None`, rendering it useless... Creating the `CachedFunction` directly works as intended...\n\nThx for sharing your code!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/9", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/9/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/9/events", "html_url": "https://github.com/mahmoud/boltons/issues/9", "id": 67497506, "node_id": "MDU6SXNzdWU2NzQ5NzUwNg==", "number": 9, "title": "Link to the docs?", "user": {"login": "aboutaaron", "id": 856628, "node_id": "MDQ6VXNlcjg1NjYyOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/856628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aboutaaron", "html_url": "https://github.com/aboutaaron", "followers_url": "https://api.github.com/users/aboutaaron/followers", "following_url": "https://api.github.com/users/aboutaaron/following{/other_user}", "gists_url": "https://api.github.com/users/aboutaaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/aboutaaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aboutaaron/subscriptions", "organizations_url": "https://api.github.com/users/aboutaaron/orgs", "repos_url": "https://api.github.com/users/aboutaaron/repos", "events_url": "https://api.github.com/users/aboutaaron/events{/privacy}", "received_events_url": "https://api.github.com/users/aboutaaron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-10T03:06:57Z", "updated_at": "2015-04-10T03:32:36Z", "closed_at": "2015-04-10T03:07:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey! This library seems awesome. It'd be nice if you linked directly to the docs in the README so folks won't have to guess where to learn about the libraries. Thanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/7", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/7/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/7/events", "html_url": "https://github.com/mahmoud/boltons/issues/7", "id": 67479034, "node_id": "MDU6SXNzdWU2NzQ3OTAzNA==", "number": 7, "title": "Python versions to support.", "user": {"login": "zkanda", "id": 5354184, "node_id": "MDQ6VXNlcjUzNTQxODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5354184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkanda", "html_url": "https://github.com/zkanda", "followers_url": "https://api.github.com/users/zkanda/followers", "following_url": "https://api.github.com/users/zkanda/following{/other_user}", "gists_url": "https://api.github.com/users/zkanda/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkanda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkanda/subscriptions", "organizations_url": "https://api.github.com/users/zkanda/orgs", "repos_url": "https://api.github.com/users/zkanda/repos", "events_url": "https://api.github.com/users/zkanda/events{/privacy}", "received_events_url": "https://api.github.com/users/zkanda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-10T00:29:18Z", "updated_at": "2015-04-11T08:20:04Z", "closed_at": "2015-04-11T08:20:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/boltons/issues/6", "repository_url": "https://api.github.com/repos/mahmoud/boltons", "labels_url": "https://api.github.com/repos/mahmoud/boltons/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/boltons/issues/6/comments", "events_url": "https://api.github.com/repos/mahmoud/boltons/issues/6/events", "html_url": "https://github.com/mahmoud/boltons/issues/6", "id": 67478930, "node_id": "MDU6SXNzdWU2NzQ3ODkzMA==", "number": 6, "title": "Setup a CI with Travis?", "user": {"login": "zkanda", "id": 5354184, "node_id": "MDQ6VXNlcjUzNTQxODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5354184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkanda", "html_url": "https://github.com/zkanda", "followers_url": "https://api.github.com/users/zkanda/followers", "following_url": "https://api.github.com/users/zkanda/following{/other_user}", "gists_url": "https://api.github.com/users/zkanda/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkanda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkanda/subscriptions", "organizations_url": "https://api.github.com/users/zkanda/orgs", "repos_url": "https://api.github.com/users/zkanda/repos", "events_url": "https://api.github.com/users/zkanda/events{/privacy}", "received_events_url": "https://api.github.com/users/zkanda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-10T00:28:13Z", "updated_at": "2015-04-10T05:24:31Z", "closed_at": "2015-04-10T05:24:31Z", "author_association": "NONE", "active_lock_reason": null, "body": ":)\n", "performed_via_github_app": null, "score": 1.0}]}