{"total_count": 239, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/351", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/351/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/351/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/351", "id": 679765250, "node_id": "MDU6SXNzdWU2Nzk3NjUyNTA=", "number": 351, "title": "creating and verifying multiple tokens at multiple locations", "user": {"login": "bbbart", "id": 3244673, "node_id": "MDQ6VXNlcjMyNDQ2NzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3244673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbbart", "html_url": "https://github.com/bbbart", "followers_url": "https://api.github.com/users/bbbart/followers", "following_url": "https://api.github.com/users/bbbart/following{/other_user}", "gists_url": "https://api.github.com/users/bbbart/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbbart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbbart/subscriptions", "organizations_url": "https://api.github.com/users/bbbart/orgs", "repos_url": "https://api.github.com/users/bbbart/repos", "events_url": "https://api.github.com/users/bbbart/events{/privacy}", "received_events_url": "https://api.github.com/users/bbbart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-16T14:34:29Z", "updated_at": "2020-08-16T20:17:50Z", "closed_at": "2020-08-16T20:17:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I interpret http://www.redotheweb.com/2015/11/09/api-security.html correctly, my frontend and backend communication should use tokens in storage/headers and in cookies at the same time. One is to protect against XSS and the other to protect against CSFR.\r\n\r\nI figured that creating two (different) tokens and passing them both to the client in different locations upon authentication is no problem, but according to the docs, `JWT_TOKEN_LOCATION` accepts a list, but is the extension is happy with *any* location providing a valid token, not requiring *all* configured locations to have a valid token.\r\n\r\nAm I right? And if so, is this something that still can be forced somehow?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/349", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/349/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/349/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/349", "id": 665691761, "node_id": "MDU6SXNzdWU2NjU2OTE3NjE=", "number": 349, "title": "Change default error messages in responses", "user": {"login": "muhammad-amhan", "id": 32804263, "node_id": "MDQ6VXNlcjMyODA0MjYz", "avatar_url": "https://avatars3.githubusercontent.com/u/32804263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muhammad-amhan", "html_url": "https://github.com/muhammad-amhan", "followers_url": "https://api.github.com/users/muhammad-amhan/followers", "following_url": "https://api.github.com/users/muhammad-amhan/following{/other_user}", "gists_url": "https://api.github.com/users/muhammad-amhan/gists{/gist_id}", "starred_url": "https://api.github.com/users/muhammad-amhan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muhammad-amhan/subscriptions", "organizations_url": "https://api.github.com/users/muhammad-amhan/orgs", "repos_url": "https://api.github.com/users/muhammad-amhan/repos", "events_url": "https://api.github.com/users/muhammad-amhan/events{/privacy}", "received_events_url": "https://api.github.com/users/muhammad-amhan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-26T01:55:12Z", "updated_at": "2020-07-27T16:14:07Z", "closed_at": "2020-07-26T01:57:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, so this is my first time using this library with Flask instead of re-inventing the wheel. I'm still discovering the features it provides, and it's pretty cool so far. What I couldn't find on the documentation is a way to customize/change the default error messages such as:\r\n\r\n`\r\n{\r\n  \"msg\": \"Missing Authorization Header\"\r\n}\r\n`\r\n\r\nI'd very much like to change the key and value, is that by any chance possible? Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/348", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/348/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/348/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/348/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/348", "id": 664686754, "node_id": "MDU6SXNzdWU2NjQ2ODY3NTQ=", "number": 348, "title": "[Question] JWT Cookies CSRF Protection", "user": {"login": "ngetahun", "id": 9084637, "node_id": "MDQ6VXNlcjkwODQ2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/9084637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngetahun", "html_url": "https://github.com/ngetahun", "followers_url": "https://api.github.com/users/ngetahun/followers", "following_url": "https://api.github.com/users/ngetahun/following{/other_user}", "gists_url": "https://api.github.com/users/ngetahun/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngetahun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngetahun/subscriptions", "organizations_url": "https://api.github.com/users/ngetahun/orgs", "repos_url": "https://api.github.com/users/ngetahun/repos", "events_url": "https://api.github.com/users/ngetahun/events{/privacy}", "received_events_url": "https://api.github.com/users/ngetahun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-23T18:38:05Z", "updated_at": "2020-07-30T21:13:11Z", "closed_at": "2020-07-30T21:13:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @vimalloc,\r\nBefore I get into my problem I want to say that it's an awesome and comprehensive library you've made here, thanks :).\r\n\r\nMy issue right now is JWT in Cookies and the CSRF protection. I have a flask api server which communicates with a vue.js client over RESTful APIs. I have enabled JWT CSRF protection for keys in the cookie. The problem is with double submit and javascript not being able to access `Secure` cookies. As far as I know, it's not possible to access Secure Cookies via `document.cookie`. On the other hand, it might be a configuration problem from my side. Here's what my JWT configuration looks like:\r\n\r\n``` \r\n    JWT_TOKEN_LOCATION = [\"cookies\"]\r\n    JWT_COOKIE_SECURE  = True\r\n    JWT_COOKIE_CSRF_PROTECT = True\r\n    JWT_CSRF_IN_COOKIES = True\r\n    JWT_ACCESS_COOKIE_PATH = \"/api/v1/\"\r\n    JWT_ACCESS_TOKEN_EXPIRES = 86400\r\n    JWT_REFRESH_TOKEN_EXPIRES = 2592000\r\n    JWT_REFRESH_COOKIE_PATH = \"/api/v1/user/token/refresh\"\r\n    JWT_ACCESS_CSRF_HEADER_NAME = \"X-CSRF-ACCESS-TOKEN\"\r\n    JWT_REFRESH_CSRF_HEADER_NAME = \"X-CSRF-REFRESH-TOKEN\"\r\n    JWT_BLACKLIST_ENABLED = True\r\n    JWT_BLACKLIST_TOKEN_CHECKS = (\"access\", \"refresh\")\r\n```\r\n\r\nAny help would be appreciated \ud83d\ude4f ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/346", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/346/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/346/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/346", "id": 658028198, "node_id": "MDU6SXNzdWU2NTgwMjgxOTg=", "number": 346, "title": "How to expose jwks url", "user": {"login": "thuitaw", "id": 588112, "node_id": "MDQ6VXNlcjU4ODExMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/588112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thuitaw", "html_url": "https://github.com/thuitaw", "followers_url": "https://api.github.com/users/thuitaw/followers", "following_url": "https://api.github.com/users/thuitaw/following{/other_user}", "gists_url": "https://api.github.com/users/thuitaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/thuitaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thuitaw/subscriptions", "organizations_url": "https://api.github.com/users/thuitaw/orgs", "repos_url": "https://api.github.com/users/thuitaw/repos", "events_url": "https://api.github.com/users/thuitaw/events{/privacy}", "received_events_url": "https://api.github.com/users/thuitaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-16T09:35:16Z", "updated_at": "2020-07-17T19:18:50Z", "closed_at": "2020-07-17T19:18:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Flask JWT extended supports asymmetric key signing algorithms. See here. https://flask-jwt-extended.readthedocs.io/en/stable/options/\r\nA lot of applications expose a jwks url which can be used to validate a jwt token.  https://auth0.com/docs/tokens/concepts/jwks\r\nIs there any way to expose this endpoint via flask-jwt-extended?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/345", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/345/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/345/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/345", "id": 657828883, "node_id": "MDU6SXNzdWU2NTc4Mjg4ODM=", "number": 345, "title": "How to send an access token to the server properly", "user": {"login": "Huy-Ngo", "id": 19296926, "node_id": "MDQ6VXNlcjE5Mjk2OTI2", "avatar_url": "https://avatars3.githubusercontent.com/u/19296926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Huy-Ngo", "html_url": "https://github.com/Huy-Ngo", "followers_url": "https://api.github.com/users/Huy-Ngo/followers", "following_url": "https://api.github.com/users/Huy-Ngo/following{/other_user}", "gists_url": "https://api.github.com/users/Huy-Ngo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Huy-Ngo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Huy-Ngo/subscriptions", "organizations_url": "https://api.github.com/users/Huy-Ngo/orgs", "repos_url": "https://api.github.com/users/Huy-Ngo/repos", "events_url": "https://api.github.com/users/Huy-Ngo/events{/privacy}", "received_events_url": "https://api.github.com/users/Huy-Ngo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T04:06:36Z", "updated_at": "2020-07-16T04:16:57Z", "closed_at": "2020-07-16T04:16:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am currently working on a project with Flask and I'm struggling with JWT token part.\r\n\r\nMy code look something like this\r\n\r\n```py\r\n# blueprints.py\r\n@bp.route('/auth', methods=['GET', 'POST'])\r\ndef auth():\r\n    if request.method == 'POST':\r\n        resp = requests.post('http://server-domain/api/auth').json()\r\n        user = resp['user']\r\n        token = resp['token']\r\n        response = redirect(url_for('.profile', user=user, token=token))\r\n        set_access_cookies(response, token)\r\n        return response\r\n    return render_template('views/auth.html')\r\n\r\n@jwt_required\r\n@bp.route('/profile/<user>/<token>')\r\ndef profile(user, token):  # I pass token here as a workaround, ignore it\r\n   print(get_raw_jwt())  # print {}\r\n    ...\r\n```\r\n\r\n(Note that both these are hosted on the same server and same domain)\r\n\r\nApparently the profile view cannot read the access token in cookie at all. If I remove the workaround there, there will be a message saying the cookie is missing. (I checked the browser cookie and `set_access_cookie` works well)\r\n\r\nI suppose this is because the token is set as Http-Only and thus can't be read in script? The token can't be read in the blueprint and therefore can't be sent to the API.\r\n\r\n_____\r\n\r\nI took a look at [JWT in Cookies](https://flask-jwt-extended.readthedocs.io/en/stable/tokens_in_cookies/) in the doc, which handled this at API level. However, I use [Flask-RESTful](https://flask-restful.readthedocs.io/en/latest/quickstart.html#resourceful-routing) for my API, where the responses are dict, rather than jsonified object:\r\n\r\n```py\r\nclass User(Resource):\r\n    @jwt_required\r\n    def get(self):\r\n        user = get_jwt_identity()\r\n        ...\r\n        return {'username': ..., 'some other info': ...}, 200\r\n```\r\n\r\nAnd so I can't put the token in the API response.\r\n\r\nBecause I have implemented the API in Flask-RESTful, I don't think it is a good idea to remove all the code for this. Is there some way that I can send the token cookie to the API via views in blueprints? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/343", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/343/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/343/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/343", "id": 650829985, "node_id": "MDU6SXNzdWU2NTA4Mjk5ODU=", "number": 343, "title": "How to Achieve unique access token user  in REST API using JWT extended ? ", "user": {"login": "raunaksingh321", "id": 59247704, "node_id": "MDQ6VXNlcjU5MjQ3NzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/59247704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raunaksingh321", "html_url": "https://github.com/raunaksingh321", "followers_url": "https://api.github.com/users/raunaksingh321/followers", "following_url": "https://api.github.com/users/raunaksingh321/following{/other_user}", "gists_url": "https://api.github.com/users/raunaksingh321/gists{/gist_id}", "starred_url": "https://api.github.com/users/raunaksingh321/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raunaksingh321/subscriptions", "organizations_url": "https://api.github.com/users/raunaksingh321/orgs", "repos_url": "https://api.github.com/users/raunaksingh321/repos", "events_url": "https://api.github.com/users/raunaksingh321/events{/privacy}", "received_events_url": "https://api.github.com/users/raunaksingh321/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-04T05:19:37Z", "updated_at": "2020-07-07T05:35:09Z", "closed_at": "2020-07-07T05:35:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am a new to python and trying to build a flask app which will be used as REST Api .\r\n\r\nI am stuck on situation where I want only unique user to send access token  means suppose user X login and generated the token .\r\nThen if he passed the token to person Y on different machine ,while the token is active then Y can easily access our REST API .\r\n\r\nWill csrf_token_cookie or session cookie will be helpful in these cases ?\r\n\r\nHow to achieve this ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/342", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/342/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/342/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/342", "id": 646236020, "node_id": "MDU6SXNzdWU2NDYyMzYwMjA=", "number": 342, "title": "Incompatibility with Nuxt out-of-the-box", "user": {"login": "ThiNepo", "id": 11523871, "node_id": "MDQ6VXNlcjExNTIzODcx", "avatar_url": "https://avatars1.githubusercontent.com/u/11523871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiNepo", "html_url": "https://github.com/ThiNepo", "followers_url": "https://api.github.com/users/ThiNepo/followers", "following_url": "https://api.github.com/users/ThiNepo/following{/other_user}", "gists_url": "https://api.github.com/users/ThiNepo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiNepo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiNepo/subscriptions", "organizations_url": "https://api.github.com/users/ThiNepo/orgs", "repos_url": "https://api.github.com/users/ThiNepo/repos", "events_url": "https://api.github.com/users/ThiNepo/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiNepo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1", "html_url": "https://github.com/vimalloc/flask-jwt-extended/milestone/1", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1/labels", "id": 4853756, "node_id": "MDk6TWlsZXN0b25lNDg1Mzc1Ng==", "number": 1, "title": "4.0.0", "description": "The next major version of Flask-JWT-Extended.\r\n\r\nThis will primarily be removal of python2, removing of depreciation warnings, clean up some API warts, and add type hints. ", "creator": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 6, "state": "open", "created_at": "2019-11-18T00:22:34Z", "updated_at": "2020-06-26T15:33:42Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2020-06-26T12:41:43Z", "updated_at": "2020-06-26T18:18:03Z", "closed_at": "2020-06-26T15:33:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nI was implementing a **Nuxt** frontend using **flask-jwt-extended** at the backend. **Nuxt** has automatic Token management, login, refresh, and so on. \r\n\r\nThe problem comes when Nuxt was trying to refresh the token, after some debugging, I discovered that Nuxt sends Content-Type **application/json;charset=UTF-8**, but  **flask-jwt-extended** expect it plain 'application/json' without anything else. Could you please change it to include 'application/json'?\r\n\r\nI think that **_decode_jwt_from_json** function should change:\r\n\r\nOld\r\n```\r\ndef _decode_jwt_from_json(request_type):\r\n    if request.content_type != 'application/json':\r\n        raise NoAuthorizationError('Invalid content-type. Must be application/json.')\r\n```\r\n\r\nNew\r\n```\r\ndef _decode_jwt_from_json(request_type):\r\n    if (request.content_type is None) or (request.content_type and 'application/json' not in request.content_type):\r\n        raise NoAuthorizationError('Invalid content-type. Must be application/json.')\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/341", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/341/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/341/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/341/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/341", "id": 646063555, "node_id": "MDU6SXNzdWU2NDYwNjM1NTU=", "number": 341, "title": "Differentiate between an access token and refresh token", "user": {"login": "icyphox", "id": 17672379, "node_id": "MDQ6VXNlcjE3NjcyMzc5", "avatar_url": "https://avatars3.githubusercontent.com/u/17672379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icyphox", "html_url": "https://github.com/icyphox", "followers_url": "https://api.github.com/users/icyphox/followers", "following_url": "https://api.github.com/users/icyphox/following{/other_user}", "gists_url": "https://api.github.com/users/icyphox/gists{/gist_id}", "starred_url": "https://api.github.com/users/icyphox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icyphox/subscriptions", "organizations_url": "https://api.github.com/users/icyphox/orgs", "repos_url": "https://api.github.com/users/icyphox/repos", "events_url": "https://api.github.com/users/icyphox/events{/privacy}", "received_events_url": "https://api.github.com/users/icyphox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-26T07:19:55Z", "updated_at": "2020-06-26T14:20:18Z", "closed_at": "2020-06-26T14:20:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, is there a way for me to differentiate between an access token and refresh token just by the token that's sent in the request? Once a token is revoked / blacklisted, there's nothing stopping the client from sending the refresh token in place of the access token (it has a longer lifetime)\u2014this poses a security threat. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/340", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/340/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/340/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/340/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/340", "id": 645633991, "node_id": "MDU6SXNzdWU2NDU2MzM5OTE=", "number": 340, "title": "is there a way to auto change the JWT_HEADER_TYPE base ", "user": {"login": "roxic8", "id": 33887987, "node_id": "MDQ6VXNlcjMzODg3OTg3", "avatar_url": "https://avatars2.githubusercontent.com/u/33887987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxic8", "html_url": "https://github.com/roxic8", "followers_url": "https://api.github.com/users/roxic8/followers", "following_url": "https://api.github.com/users/roxic8/following{/other_user}", "gists_url": "https://api.github.com/users/roxic8/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxic8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxic8/subscriptions", "organizations_url": "https://api.github.com/users/roxic8/orgs", "repos_url": "https://api.github.com/users/roxic8/repos", "events_url": "https://api.github.com/users/roxic8/events{/privacy}", "received_events_url": "https://api.github.com/users/roxic8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-25T14:59:16Z", "updated_at": "2020-06-27T02:25:56Z", "closed_at": "2020-06-27T02:25:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "i have this kind of endpoint **api/admin/user** \r\ni want to change the **header_type** to site_admin instead of Bearer.\r\nbut if the requested endpoint/api is not admin it will set to the default the Bearer", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/339", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/339/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/339/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/339", "id": 644322858, "node_id": "MDU6SXNzdWU2NDQzMjI4NTg=", "number": 339, "title": "Docs could use a list of ways to use JWT in a header.", "user": {"login": "stonecharioteer", "id": 11478411, "node_id": "MDQ6VXNlcjExNDc4NDEx", "avatar_url": "https://avatars3.githubusercontent.com/u/11478411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stonecharioteer", "html_url": "https://github.com/stonecharioteer", "followers_url": "https://api.github.com/users/stonecharioteer/followers", "following_url": "https://api.github.com/users/stonecharioteer/following{/other_user}", "gists_url": "https://api.github.com/users/stonecharioteer/gists{/gist_id}", "starred_url": "https://api.github.com/users/stonecharioteer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stonecharioteer/subscriptions", "organizations_url": "https://api.github.com/users/stonecharioteer/orgs", "repos_url": "https://api.github.com/users/stonecharioteer/repos", "events_url": "https://api.github.com/users/stonecharioteer/events{/privacy}", "received_events_url": "https://api.github.com/users/stonecharioteer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-24T05:11:22Z", "updated_at": "2020-06-26T14:23:16Z", "closed_at": "2020-06-26T14:23:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is not clear from the docs how to pass the refresh token. As you have a list of pages for cookies and json body requests, there could be a page for the header body as well. I know you've documented how to send a curl request with the header containing the access token, but how do I send a refresh token?\n\nIf someone could let me know here, I will gladly send a PR with an updated curl command in the Refresh Tokens page. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/332", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/332/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/332/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/332", "id": 638587522, "node_id": "MDU6SXNzdWU2Mzg1ODc1MjI=", "number": 332, "title": "RSA with multiple providers?", "user": {"login": "rith87", "id": 749109, "node_id": "MDQ6VXNlcjc0OTEwOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/749109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rith87", "html_url": "https://github.com/rith87", "followers_url": "https://api.github.com/users/rith87/followers", "following_url": "https://api.github.com/users/rith87/following{/other_user}", "gists_url": "https://api.github.com/users/rith87/gists{/gist_id}", "starred_url": "https://api.github.com/users/rith87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rith87/subscriptions", "organizations_url": "https://api.github.com/users/rith87/orgs", "repos_url": "https://api.github.com/users/rith87/repos", "events_url": "https://api.github.com/users/rith87/events{/privacy}", "received_events_url": "https://api.github.com/users/rith87/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-15T06:39:33Z", "updated_at": "2020-07-25T04:46:04Z", "closed_at": "2020-07-25T04:46:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "First off, thanks for the awesome library! The jwt_optional feature was pretty clutch.\r\n\r\nI was thinking about making a PR to handle the case where a developer is using this library to handle JWT from multiple OIDC providers (e.g. Google, Salesforce, etc). This scenario isn't supported today since the JWT_PUBLIC_KEY only expects a single public key. Or is there some other way to accomplish this that I'm missing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/329", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/329/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/329/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/329/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/329", "id": 637087833, "node_id": "MDU6SXNzdWU2MzcwODc4MzM=", "number": 329, "title": "Flask JWT Extended Missing Authorization Custom Response?", "user": {"login": "abhishtagatya", "id": 23010136, "node_id": "MDQ6VXNlcjIzMDEwMTM2", "avatar_url": "https://avatars3.githubusercontent.com/u/23010136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhishtagatya", "html_url": "https://github.com/abhishtagatya", "followers_url": "https://api.github.com/users/abhishtagatya/followers", "following_url": "https://api.github.com/users/abhishtagatya/following{/other_user}", "gists_url": "https://api.github.com/users/abhishtagatya/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhishtagatya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhishtagatya/subscriptions", "organizations_url": "https://api.github.com/users/abhishtagatya/orgs", "repos_url": "https://api.github.com/users/abhishtagatya/repos", "events_url": "https://api.github.com/users/abhishtagatya/events{/privacy}", "received_events_url": "https://api.github.com/users/abhishtagatya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-11T15:00:15Z", "updated_at": "2020-06-11T15:34:52Z", "closed_at": "2020-06-11T15:34:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, I was wondering how I can change the message given when authorization bearer token is empty:\r\n\r\n`{\r\n    \"msg\": \"Missing Authorization Header\"\r\n}`\r\n\r\nwith something custom like :\r\n\r\n```json\r\n{\r\n    \"meta\": {\r\n        \"message\": \"Unauthorized : Invalid Authorization Token\",\r\n        \"code\": 401\r\n    }\r\n}\r\n```\r\nIs it possible? Thanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/328", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/328/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/328/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/328", "id": 630495789, "node_id": "MDU6SXNzdWU2MzA0OTU3ODk=", "number": 328, "title": "Use request context instead of app context.", "user": {"login": "torotil", "id": 182122, "node_id": "MDQ6VXNlcjE4MjEyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/182122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/torotil", "html_url": "https://github.com/torotil", "followers_url": "https://api.github.com/users/torotil/followers", "following_url": "https://api.github.com/users/torotil/following{/other_user}", "gists_url": "https://api.github.com/users/torotil/gists{/gist_id}", "starred_url": "https://api.github.com/users/torotil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/torotil/subscriptions", "organizations_url": "https://api.github.com/users/torotil/orgs", "repos_url": "https://api.github.com/users/torotil/repos", "events_url": "https://api.github.com/users/torotil/events{/privacy}", "received_events_url": "https://api.github.com/users/torotil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1", "html_url": "https://github.com/vimalloc/flask-jwt-extended/milestone/1", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1/labels", "id": 4853756, "node_id": "MDk6TWlsZXN0b25lNDg1Mzc1Ng==", "number": 1, "title": "4.0.0", "description": "The next major version of Flask-JWT-Extended.\r\n\r\nThis will primarily be removal of python2, removing of depreciation warnings, clean up some API warts, and add type hints. ", "creator": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 6, "state": "open", "created_at": "2019-11-18T00:22:34Z", "updated_at": "2020-06-26T15:33:42Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-06-04T04:11:16Z", "updated_at": "2020-06-06T17:21:22Z", "closed_at": "2020-06-06T17:21:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "flask-jwt-extended uses the app context to store the `current_user` for no good reason*. This is rather unexpected. The major version bump could be used to change this to the request context instead.\r\n\r\n*The reason for using the app context given in #176 was:\r\n\r\n> \u2026 the only reason I used the application context when creating this extension was because all the documentation and other extensions I looked at did the same thing.\r\n\r\nflask-security-too uses the request context for its `current_user` implementation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/326", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/326/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/326/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/326", "id": 628212978, "node_id": "MDU6SXNzdWU2MjgyMTI5Nzg=", "number": 326, "title": "Revoke all tokens by admin", "user": {"login": "robalvsan", "id": 10865429, "node_id": "MDQ6VXNlcjEwODY1NDI5", "avatar_url": "https://avatars0.githubusercontent.com/u/10865429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robalvsan", "html_url": "https://github.com/robalvsan", "followers_url": "https://api.github.com/users/robalvsan/followers", "following_url": "https://api.github.com/users/robalvsan/following{/other_user}", "gists_url": "https://api.github.com/users/robalvsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/robalvsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robalvsan/subscriptions", "organizations_url": "https://api.github.com/users/robalvsan/orgs", "repos_url": "https://api.github.com/users/robalvsan/repos", "events_url": "https://api.github.com/users/robalvsan/events{/privacy}", "received_events_url": "https://api.github.com/users/robalvsan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-01T07:20:07Z", "updated_at": "2020-06-07T18:54:31Z", "closed_at": "2020-06-07T18:54:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "How it will be the most appropriated procedure to revoke all the tokens a server has already stored, by the admin of the application.\r\n\r\nAccording to the documentation (https://flask-jwt-extended.readthedocs.io/en/latest/blacklist_and_token_revoking/) it seems to be only the possibility of revoking the token by the user itself, but what if the admin of the application, wants to revoke a user's token or even all user's tokens?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/324", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/324/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/324/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/324", "id": 606527539, "node_id": "MDU6SXNzdWU2MDY1Mjc1Mzk=", "number": 324, "title": "Where does the token data store on the server?", "user": {"login": "ahmadazizi", "id": 10188878, "node_id": "MDQ6VXNlcjEwMTg4ODc4", "avatar_url": "https://avatars2.githubusercontent.com/u/10188878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmadazizi", "html_url": "https://github.com/ahmadazizi", "followers_url": "https://api.github.com/users/ahmadazizi/followers", "following_url": "https://api.github.com/users/ahmadazizi/following{/other_user}", "gists_url": "https://api.github.com/users/ahmadazizi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmadazizi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmadazizi/subscriptions", "organizations_url": "https://api.github.com/users/ahmadazizi/orgs", "repos_url": "https://api.github.com/users/ahmadazizi/repos", "events_url": "https://api.github.com/users/ahmadazizi/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmadazizi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-24T19:17:00Z", "updated_at": "2020-05-04T16:31:45Z", "closed_at": "2020-05-04T14:34:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a token has been created(or blacklisted etc), there should be a mechanism to store the token data on the server to be working consistant upon multiple requests.\r\nIt look likes the flask-jwt-extended handles this in the background. How does this mechanism work in flask-jwt-extended?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/323", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/323/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/323/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/323", "id": 605496382, "node_id": "MDU6SXNzdWU2MDU0OTYzODI=", "number": 323, "title": "Statement properly written?", "user": {"login": "ticksmas", "id": 7633082, "node_id": "MDQ6VXNlcjc2MzMwODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7633082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ticksmas", "html_url": "https://github.com/ticksmas", "followers_url": "https://api.github.com/users/ticksmas/followers", "following_url": "https://api.github.com/users/ticksmas/following{/other_user}", "gists_url": "https://api.github.com/users/ticksmas/gists{/gist_id}", "starred_url": "https://api.github.com/users/ticksmas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ticksmas/subscriptions", "organizations_url": "https://api.github.com/users/ticksmas/orgs", "repos_url": "https://api.github.com/users/ticksmas/repos", "events_url": "https://api.github.com/users/ticksmas/events{/privacy}", "received_events_url": "https://api.github.com/users/ticksmas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T12:34:59Z", "updated_at": "2020-04-23T12:58:09Z", "closed_at": "2020-04-23T12:58:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/vimalloc/flask-jwt-extended/blob/bf1a521b444536a5baea086899636406122acbc5/flask_jwt_extended/tokens.py#L60\r\n\r\nAt this line, since `fresh` is a boolean variable, should `isinstance` work in any situation here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/322", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/322/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/322/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/322/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/322", "id": 602834465, "node_id": "MDU6SXNzdWU2MDI4MzQ0NjU=", "number": 322, "title": "JWT Multiple session invalidation", "user": {"login": "kmani314", "id": 34562820, "node_id": "MDQ6VXNlcjM0NTYyODIw", "avatar_url": "https://avatars1.githubusercontent.com/u/34562820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmani314", "html_url": "https://github.com/kmani314", "followers_url": "https://api.github.com/users/kmani314/followers", "following_url": "https://api.github.com/users/kmani314/following{/other_user}", "gists_url": "https://api.github.com/users/kmani314/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmani314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmani314/subscriptions", "organizations_url": "https://api.github.com/users/kmani314/orgs", "repos_url": "https://api.github.com/users/kmani314/repos", "events_url": "https://api.github.com/users/kmani314/events{/privacy}", "received_events_url": "https://api.github.com/users/kmani314/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-19T22:13:55Z", "updated_at": "2020-05-06T01:56:33Z", "closed_at": "2020-05-06T01:56:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a canonical way to force a log out across multiple sessions when using a token blacklist? I want to implement this for a SPA that has password reset, which would force logout of other active sessions. I can think of a way that stores the last time the password was reset in a column and checks the IAT in token_blacklist_loader so that tokens issued before the password reset would be treated as blacklisted without having to explicitly store them, but this seems to defeat the purpose of JWT because it requires an extra database hit. Is there a better way? Sorry if this is not really pertinent to the library, but I thought that you guys would having something to say about it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/320", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/320/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/320/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/320/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/320", "id": 599566408, "node_id": "MDU6SXNzdWU1OTk1NjY0MDg=", "number": 320, "title": "What is the best way of reseting password with flask_jwt_extended?", "user": {"login": "wajeehulhassanvii", "id": 5463819, "node_id": "MDQ6VXNlcjU0NjM4MTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5463819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wajeehulhassanvii", "html_url": "https://github.com/wajeehulhassanvii", "followers_url": "https://api.github.com/users/wajeehulhassanvii/followers", "following_url": "https://api.github.com/users/wajeehulhassanvii/following{/other_user}", "gists_url": "https://api.github.com/users/wajeehulhassanvii/gists{/gist_id}", "starred_url": "https://api.github.com/users/wajeehulhassanvii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wajeehulhassanvii/subscriptions", "organizations_url": "https://api.github.com/users/wajeehulhassanvii/orgs", "repos_url": "https://api.github.com/users/wajeehulhassanvii/repos", "events_url": "https://api.github.com/users/wajeehulhassanvii/events{/privacy}", "received_events_url": "https://api.github.com/users/wajeehulhassanvii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-14T13:18:32Z", "updated_at": "2020-04-14T13:48:11Z", "closed_at": "2020-04-14T13:48:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I saw a comment on stackoverflow that currently Flask_jwt_extended does not allow password reset, is it true? \r\nI was developing my application using flask_jwt_extended and now I will be implementing password reset. Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/319", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/319/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/319/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/319/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/319", "id": 597217049, "node_id": "MDU6SXNzdWU1OTcyMTcwNDk=", "number": 319, "title": "Get api call is working without CSRF token in Double submit verification ", "user": {"login": "PadiAditya", "id": 34194704, "node_id": "MDQ6VXNlcjM0MTk0NzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/34194704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PadiAditya", "html_url": "https://github.com/PadiAditya", "followers_url": "https://api.github.com/users/PadiAditya/followers", "following_url": "https://api.github.com/users/PadiAditya/following{/other_user}", "gists_url": "https://api.github.com/users/PadiAditya/gists{/gist_id}", "starred_url": "https://api.github.com/users/PadiAditya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PadiAditya/subscriptions", "organizations_url": "https://api.github.com/users/PadiAditya/orgs", "repos_url": "https://api.github.com/users/PadiAditya/repos", "events_url": "https://api.github.com/users/PadiAditya/events{/privacy}", "received_events_url": "https://api.github.com/users/PadiAditya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-09T11:29:40Z", "updated_at": "2020-04-10T06:09:21Z", "closed_at": "2020-04-10T06:09:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "When we use jwt in cookies, i am storing an access token cookie in cookies and csrf token is sent as user response but without passing the csrf token in header get api call is working", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/318", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/318/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/318/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/318", "id": 571198267, "node_id": "MDU6SXNzdWU1NzExOTgyNjc=", "number": 318, "title": "Validate token without authoration headers", "user": {"login": "pjshu", "id": 47631325, "node_id": "MDQ6VXNlcjQ3NjMxMzI1", "avatar_url": "https://avatars2.githubusercontent.com/u/47631325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjshu", "html_url": "https://github.com/pjshu", "followers_url": "https://api.github.com/users/pjshu/followers", "following_url": "https://api.github.com/users/pjshu/following{/other_user}", "gists_url": "https://api.github.com/users/pjshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjshu/subscriptions", "organizations_url": "https://api.github.com/users/pjshu/orgs", "repos_url": "https://api.github.com/users/pjshu/repos", "events_url": "https://api.github.com/users/pjshu/events{/privacy}", "received_events_url": "https://api.github.com/users/pjshu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-26T09:42:17Z", "updated_at": "2020-02-27T02:20:53Z", "closed_at": "2020-02-27T02:20:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,thank you to create this wonderful library\r\n\r\ni want generator token to validate email like this:\r\n\r\n```python\r\n@app.route('/register', methods=[\"GET\", \"POST\"])\r\ndef register_view():\r\n    if request.method == 'POST':\r\n        email = request.form.get('email')\r\n        user = create_new_user()\r\n        send_email(\r\n            to=form.email.data,\r\n            content=url_for('admin.auth_email_view', token=create_token(identity=user.id))\r\n        )\r\n        user.update(form.data)\r\n        return generate_res()\r\n    return {}\r\n\r\n\r\n@app.route('/auth/register/<string:token>')\r\ndef auth_email_view(token):\r\n    confirm_token(token)\r\n    identify = get_jwt_identity()\r\n    user = User.query_by_id(identify)\r\n    if user:\r\n        return {'status': 'success'}\r\n    return {'status': 'failed'}\r\n```\r\n\r\njust use confirm_token without http headers to validate token,\r\nIs there any way to do this?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/317", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/317/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/317/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/317/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/317", "id": 567546032, "node_id": "MDU6SXNzdWU1Njc1NDYwMzI=", "number": 317, "title": "How do I add more to the payload?", "user": {"login": "gumatias", "id": 681278, "node_id": "MDQ6VXNlcjY4MTI3OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/681278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gumatias", "html_url": "https://github.com/gumatias", "followers_url": "https://api.github.com/users/gumatias/followers", "following_url": "https://api.github.com/users/gumatias/following{/other_user}", "gists_url": "https://api.github.com/users/gumatias/gists{/gist_id}", "starred_url": "https://api.github.com/users/gumatias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gumatias/subscriptions", "organizations_url": "https://api.github.com/users/gumatias/orgs", "repos_url": "https://api.github.com/users/gumatias/repos", "events_url": "https://api.github.com/users/gumatias/events{/privacy}", "received_events_url": "https://api.github.com/users/gumatias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-19T12:46:54Z", "updated_at": "2020-06-02T02:55:25Z", "closed_at": "2020-06-02T02:55:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I need to add more things to the payload, for instance:\r\n\r\n```\r\n{\r\n  aud: environmentId,\r\n  sub: 'user-123',\r\n  user: {\r\n    email: 'joe.doe@example.com',\r\n    name: 'Joe Doe'\r\n  },\r\n  auth: {\r\n    'collaboration': {\r\n      '*': {\r\n        'role': 'writer'\r\n      }\r\n   }\r\n}\r\n```\r\n\r\nHow do I accomplish that? I'm only seeing options to add use claims and set a few other preconfigured properties, but not add new ones such as `auth` or `aud` in my example above. \r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/316", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/316/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/316/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/316", "id": 564922862, "node_id": "MDU6SXNzdWU1NjQ5MjI4NjI=", "number": 316, "title": "get_raw_jwt returning None", "user": {"login": "sarangdharmapurikar1", "id": 12419965, "node_id": "MDQ6VXNlcjEyNDE5OTY1", "avatar_url": "https://avatars2.githubusercontent.com/u/12419965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarangdharmapurikar1", "html_url": "https://github.com/sarangdharmapurikar1", "followers_url": "https://api.github.com/users/sarangdharmapurikar1/followers", "following_url": "https://api.github.com/users/sarangdharmapurikar1/following{/other_user}", "gists_url": "https://api.github.com/users/sarangdharmapurikar1/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarangdharmapurikar1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarangdharmapurikar1/subscriptions", "organizations_url": "https://api.github.com/users/sarangdharmapurikar1/orgs", "repos_url": "https://api.github.com/users/sarangdharmapurikar1/repos", "events_url": "https://api.github.com/users/sarangdharmapurikar1/events{/privacy}", "received_events_url": "https://api.github.com/users/sarangdharmapurikar1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-13T20:10:09Z", "updated_at": "2020-02-22T00:14:07Z", "closed_at": "2020-02-22T00:14:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! \r\nI have a simple function\r\n\r\n```\r\n@app.route('/logmein', methods=['GET', 'POST'])\r\n#@jwt_required\r\ndef logmein():  \r\n  if verbose:\r\n       app.logger.info(\"Inside logmein\")\r\n        token = request.headers['Authorization']\r\n        app.logger.info(\"Token with bearer: \" + token)\r\n        raw_jwt = get_raw_jwt()\r\n        app.logger.info(\"Raw JWT: \" + json.dumps(raw_jwt, indent=4))\r\n        verify_jwt_in_request()\r\n        verify_fresh_jwt_in_request()\r\n```\r\n\r\n\r\n\r\nBut even when I have a valid token, the get_raw_jwt is returning {}. I verified the token is valid by going to jwt.io and cut-pasting my token to decode it. It decodes fine. Here's the output of my def:\r\n\r\n```\r\nNFO:flask.app:Inside logmein\r\nINFO:flask.app:Token with bearer: Bearer eyJ...<removed the remaining token for privacy>\r\nINFO:flask.app:Raw JWT: {}\r\n```\r\n\r\nHow can I debug this? Also,  verify_jwt_in_request() etc return no exceptions or anything? \r\nI have PROPAGATE_EXCEPTIONS = True in my app config.\r\n\r\nAppreciate help!\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/315", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/315/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/315/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/315/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/315", "id": 563340752, "node_id": "MDU6SXNzdWU1NjMzNDA3NTI=", "number": 315, "title": "LDAP + JWT Question", "user": {"login": "joehoeller", "id": 5199900, "node_id": "MDQ6VXNlcjUxOTk5MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5199900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joehoeller", "html_url": "https://github.com/joehoeller", "followers_url": "https://api.github.com/users/joehoeller/followers", "following_url": "https://api.github.com/users/joehoeller/following{/other_user}", "gists_url": "https://api.github.com/users/joehoeller/gists{/gist_id}", "starred_url": "https://api.github.com/users/joehoeller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joehoeller/subscriptions", "organizations_url": "https://api.github.com/users/joehoeller/orgs", "repos_url": "https://api.github.com/users/joehoeller/repos", "events_url": "https://api.github.com/users/joehoeller/events{/privacy}", "received_events_url": "https://api.github.com/users/joehoeller/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-11T16:53:15Z", "updated_at": "2020-02-11T21:03:40Z", "closed_at": "2020-02-11T21:03:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Do you have any resources on how to generate a JWT token to send (RESTfully) to a front end GUI, upon successful login with LDAP with Flask-JWT-Extended?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/313", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/313/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/313/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/313/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/313", "id": 555370723, "node_id": "MDU6SXNzdWU1NTUzNzA3MjM=", "number": 313, "title": "Setting JWT_DECODE_AUDIENCE to None triggers invalid audience", "user": {"login": "lunarray", "id": 2076533, "node_id": "MDQ6VXNlcjIwNzY1MzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2076533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunarray", "html_url": "https://github.com/lunarray", "followers_url": "https://api.github.com/users/lunarray/followers", "following_url": "https://api.github.com/users/lunarray/following{/other_user}", "gists_url": "https://api.github.com/users/lunarray/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunarray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunarray/subscriptions", "organizations_url": "https://api.github.com/users/lunarray/orgs", "repos_url": "https://api.github.com/users/lunarray/repos", "events_url": "https://api.github.com/users/lunarray/events{/privacy}", "received_events_url": "https://api.github.com/users/lunarray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-27T05:55:22Z", "updated_at": "2020-01-27T06:17:58Z", "closed_at": "2020-01-27T06:17:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I am finding an issue where setting JWT_DECODE_AUDIENCE to None will still trigger audience check in jwt.decode because the PyJWT options still sets 'verify_aud' to True by default.\r\n\r\nInside the code 4.0.0-dev/flask_jwt_extended/tokens.py I found this:\r\n```\r\n    options = {}\r\n    if allow_expired:\r\n        options[\"verify_exp\"] = False\r\n```\r\nI think if we set it to:\r\n```\r\n    options = {}\r\n    if allow_expired:\r\n        options[\"verify_exp\"] = False\r\n    if audience is None:\r\n        options[\"verify_aud\"] = False\r\n```\r\nThis error would not trigger. \r\n\r\nBut is this intentional? I mean 'aud' claims is supposed to be optional.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/312", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/312/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/312/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/312", "id": 555069023, "node_id": "MDU6SXNzdWU1NTUwNjkwMjM=", "number": 312, "title": "@jwt.user_identity_loader not found", "user": {"login": "jocelindegni", "id": 43604595, "node_id": "MDQ6VXNlcjQzNjA0NTk1", "avatar_url": "https://avatars0.githubusercontent.com/u/43604595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jocelindegni", "html_url": "https://github.com/jocelindegni", "followers_url": "https://api.github.com/users/jocelindegni/followers", "following_url": "https://api.github.com/users/jocelindegni/following{/other_user}", "gists_url": "https://api.github.com/users/jocelindegni/gists{/gist_id}", "starred_url": "https://api.github.com/users/jocelindegni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jocelindegni/subscriptions", "organizations_url": "https://api.github.com/users/jocelindegni/orgs", "repos_url": "https://api.github.com/users/jocelindegni/repos", "events_url": "https://api.github.com/users/jocelindegni/events{/privacy}", "received_events_url": "https://api.github.com/users/jocelindegni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-25T10:27:27Z", "updated_at": "2020-01-25T22:45:43Z", "closed_at": "2020-01-25T22:45:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/311", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/311/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/311/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/311", "id": 555059136, "node_id": "MDU6SXNzdWU1NTUwNTkxMzY=", "number": 311, "title": "get_jwt_identity return None for protected endpoint", "user": {"login": "sunthree74", "id": 23506819, "node_id": "MDQ6VXNlcjIzNTA2ODE5", "avatar_url": "https://avatars2.githubusercontent.com/u/23506819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunthree74", "html_url": "https://github.com/sunthree74", "followers_url": "https://api.github.com/users/sunthree74/followers", "following_url": "https://api.github.com/users/sunthree74/following{/other_user}", "gists_url": "https://api.github.com/users/sunthree74/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunthree74/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunthree74/subscriptions", "organizations_url": "https://api.github.com/users/sunthree74/orgs", "repos_url": "https://api.github.com/users/sunthree74/repos", "events_url": "https://api.github.com/users/sunthree74/events{/privacy}", "received_events_url": "https://api.github.com/users/sunthree74/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-25T08:27:52Z", "updated_at": "2020-01-25T08:49:14Z", "closed_at": "2020-01-25T08:49:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "This library is awesome but i had a question, why the get_jet_identity function returning None ?\r\n\r\n```\r\n@jwt.required\r\n    def post(self):\r\n        try:\r\n            \r\n            return response.ok(jwt.getIdentity(), \"\")\r\n        except Exception as e:\r\n            return response.badRequest('', '{}'.format(e))\r\n\r\n\r\ndef required(fn):\r\n    @wraps(fn)\r\n    def wrapper(*args, **kwargs):\r\n        try:\r\n            decode()\r\n        except Exception as e:\r\n            return response.unAuthorized('', 'Unauthorized!')\r\n        return fn(*args, **kwargs)\r\n\r\n    return wrapper\r\n\r\ndef decode():\r\n    authorization = request.headers.get('Authorization')\r\n    string = authorization.split(' ')\r\n    decoded = decode_token(string[1])\r\n    return decoded\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/310", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/310/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/310/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/310", "id": 554245783, "node_id": "MDU6SXNzdWU1NTQyNDU3ODM=", "number": 310, "title": "If the default user loader is called but not defined by the user, raise an exception", "user": {"login": "cal97g", "id": 1664656, "node_id": "MDQ6VXNlcjE2NjQ2NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1664656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cal97g", "html_url": "https://github.com/cal97g", "followers_url": "https://api.github.com/users/cal97g/followers", "following_url": "https://api.github.com/users/cal97g/following{/other_user}", "gists_url": "https://api.github.com/users/cal97g/gists{/gist_id}", "starred_url": "https://api.github.com/users/cal97g/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cal97g/subscriptions", "organizations_url": "https://api.github.com/users/cal97g/orgs", "repos_url": "https://api.github.com/users/cal97g/repos", "events_url": "https://api.github.com/users/cal97g/events{/privacy}", "received_events_url": "https://api.github.com/users/cal97g/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1", "html_url": "https://github.com/vimalloc/flask-jwt-extended/milestone/1", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1/labels", "id": 4853756, "node_id": "MDk6TWlsZXN0b25lNDg1Mzc1Ng==", "number": 1, "title": "4.0.0", "description": "The next major version of Flask-JWT-Extended.\r\n\r\nThis will primarily be removal of python2, removing of depreciation warnings, clean up some API warts, and add type hints. ", "creator": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 6, "state": "open", "created_at": "2019-11-18T00:22:34Z", "updated_at": "2020-06-26T15:33:42Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2020-01-23T15:54:36Z", "updated_at": "2020-02-22T00:15:33Z", "closed_at": "2020-02-22T00:15:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have just spent a lot of time debugging an issue where the extension did not register the user loader with JWTManager.\r\n\r\nTherefore my routes could not identify which user was trying to use them / were not able to retrieve any information about them; even with @jwt_required decorator.\r\n\r\nBy returning `None` we are hiding the real issue from users. Where we try to use a feature we have not enabled we should raise an exception - something like `NotImplementedError(\"You have not registered this loader, please ensure it is registered with the extension\").`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/309", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/309/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/309/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/309/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/309", "id": 552524404, "node_id": "MDU6SXNzdWU1NTI1MjQ0MDQ=", "number": 309, "title": "Failure of POST request to a Flask Restful API using Jwt Extended keep getting 403 and 401", "user": {"login": "yehonadav", "id": 35917238, "node_id": "MDQ6VXNlcjM1OTE3MjM4", "avatar_url": "https://avatars0.githubusercontent.com/u/35917238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yehonadav", "html_url": "https://github.com/yehonadav", "followers_url": "https://api.github.com/users/yehonadav/followers", "following_url": "https://api.github.com/users/yehonadav/following{/other_user}", "gists_url": "https://api.github.com/users/yehonadav/gists{/gist_id}", "starred_url": "https://api.github.com/users/yehonadav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yehonadav/subscriptions", "organizations_url": "https://api.github.com/users/yehonadav/orgs", "repos_url": "https://api.github.com/users/yehonadav/repos", "events_url": "https://api.github.com/users/yehonadav/events{/privacy}", "received_events_url": "https://api.github.com/users/yehonadav/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-20T21:54:30Z", "updated_at": "2020-01-22T19:07:02Z", "closed_at": "2020-01-22T19:06:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "while using verify_jwt_in_request()\r\nthis seems to be quite a pickle, i've seen #174 and #253 but even after removing flask-cors and implementing the workaround to get the entire post body this function fails, even on a simple flask development server and python requests:\r\n\r\nFlask Traceback (most recent call last):\r\n  File \"C:\\myproject\\auth.py\", line 26, in user_token\r\n    verify_jwt_in_request()\r\n  File \"C:\\myproject\\venv\\lib\\site-packages\\flask_jwt_extended\\view_decorators.py\", line 32, in verify_jwt_in_request\r\n    jwt_data, jwt_header = _decode_jwt_from_request(request_type='access')\r\n  File \"C:\\myproject\\venv\\lib\\site-packages\\flask_jwt_extended\\view_decorators.py\", line 293, in _decode_jwt_from_request\r\n    encoded_token, csrf_token = get_encoded_token_function()\r\n  File \"C:\\myproject\\venv\\lib\\site-packages\\flask_jwt_extended\\view_decorators.py\", line 277, in <lambda>\r\n    lambda: _decode_jwt_from_cookies(request_type))\r\n  File \"C:\\myproject\\venv\\lib\\site-packages\\flask_jwt_extended\\view_decorators.py\", line 232, in _decode_jwt_from_cookies\r\n    raise CSRFError(\"Missing CSRF token\")\r\nflask_jwt_extended.exceptions.CSRFError: Missing CSRF token\r\n\r\nmy requests.post code:\r\n\r\nr = requests.post(\r\n  url+JWT_ACCESS_COOKIE_PATH+'edit_user',\r\n   json={'first_name':'name'},\r\n  // {'access_token_cookie': 'ey...', 'csrf_access_token': '48...', 'csrf_refresh_token': '3e...'}\r\n  cookies=user['cookies'],  \r\n)\r\nmy response:\r\nrequests.exceptions.HTTPError: 403 Client Error: Forbidden for url\r\n\r\nrunning on python 3.6 with:\r\nFlask==1.1.1\r\nFlask-Cors==3.0.8\r\nFlask-JWT-Extended==3.24.1\r\nPyJWT==1.7.1\r\nrequests==2.22.0\r\nsix==1.13.0\r\nWerkzeug==0.16.0\r\n\r\nflask_jwt_extended.exceptions.CSRFError: Missing CSRF token\r\nis weird because im definitely seeing csrf_access_token before calling verify_jwt_in_request:\r\n\r\n@app.route(JWT_ACCESS_COOKIE_PATH+'edit_user', methods=['POST'])\r\ndef edit_user():\r\n    request.date\r\n    request.form\r\n    print(request.cookies)\r\n    verify_jwt_in_request()\r\n\r\nnot sure what im doing wrong as i follow the documentation steps and got everything else working properly", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/308", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/308/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/308/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/308", "id": 551238125, "node_id": "MDU6SXNzdWU1NTEyMzgxMjU=", "number": 308, "title": "Got Internal server error 500 instead of 401", "user": {"login": "vvksahoo", "id": 56999733, "node_id": "MDQ6VXNlcjU2OTk5NzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/56999733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvksahoo", "html_url": "https://github.com/vvksahoo", "followers_url": "https://api.github.com/users/vvksahoo/followers", "following_url": "https://api.github.com/users/vvksahoo/following{/other_user}", "gists_url": "https://api.github.com/users/vvksahoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvksahoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvksahoo/subscriptions", "organizations_url": "https://api.github.com/users/vvksahoo/orgs", "repos_url": "https://api.github.com/users/vvksahoo/repos", "events_url": "https://api.github.com/users/vvksahoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vvksahoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-17T06:56:15Z", "updated_at": "2020-06-02T02:54:20Z", "closed_at": "2020-06-02T02:54:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi , i am using flask-jwt-extended for jwt authentication .  I want to validate auth token at middleware of my application . \r\n\r\n```\r\nfrom flask_jwt_extended import verify_jwt_in_request\r\n# middleware\r\n@app.before_request\r\ndef before_request_callback():\r\n    \"\"\"\r\n        This is callback will run before each and every endpoint .\r\n        Auth layer is defined here .\r\n    :return:\r\n    \"\"\"\r\n    # Checking jwt-authentication for every request \r\n        verify_jwt_in_request()\r\n```\r\nIn my local if i will hit my api with auth token , its working fine . If i will remove some characters from token it will show 'Invalid-token' which is correct . When deployed on kubernets for the same case getting 500 'internal server error' with 'jwt.exceptions.ExpiredSignatureError: Signature has expired' this error .Please suggest here .\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/306", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/306/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/306/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/306", "id": 544067193, "node_id": "MDU6SXNzdWU1NDQwNjcxOTM=", "number": 306, "title": "No longer store user claims in a nested dictionary", "user": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1", "html_url": "https://github.com/vimalloc/flask-jwt-extended/milestone/1", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1/labels", "id": 4853756, "node_id": "MDk6TWlsZXN0b25lNDg1Mzc1Ng==", "number": 1, "title": "4.0.0", "description": "The next major version of Flask-JWT-Extended.\r\n\r\nThis will primarily be removal of python2, removing of depreciation warnings, clean up some API warts, and add type hints. ", "creator": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 6, "state": "open", "created_at": "2019-11-18T00:22:34Z", "updated_at": "2020-06-26T15:33:42Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2019-12-31T02:21:25Z", "updated_at": "2019-12-31T16:16:23Z", "closed_at": "2019-12-31T16:16:23Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently, an encoded jwt with user claims looks something like:\r\n\r\n```python\r\n{\r\n    \"sub\": \"username\",\r\n    \"user_claims\": {\r\n        \"custom_key\": \"custom_value\"\r\n    }\r\n}\r\n```\r\n\r\nIn the 4.0.0, I propose changing this to remove the nested dictionary, something like:\r\n\r\n```python\r\n{\r\n    \"sub\": \"username\",\r\n    \"custom_key\": \"custom_value\"\r\n}\r\n```\r\n\r\nThis would make it significantly easier to do things like modify/override reserved claims (`iss`, `exp`, etc) as needed, without requiring new code in this extension.\r\n\r\nAs part of this, I also propose merging claims from the `create_access_token` `user_claims` argument and `@jwt.user_claims_loader` callback function, instead of having the `user_claims` argument case the callback function to be ignored. I think that would be the more expected behavior.\r\n\r\nThoughts? Concerns?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/305", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/305/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/305/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/305", "id": 543694525, "node_id": "MDU6SXNzdWU1NDM2OTQ1MjU=", "number": 305, "title": "Issue with @jwt_required - Signature verification failed", "user": {"login": "rodrigorodrigues", "id": 398965, "node_id": "MDQ6VXNlcjM5ODk2NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/398965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodrigorodrigues", "html_url": "https://github.com/rodrigorodrigues", "followers_url": "https://api.github.com/users/rodrigorodrigues/followers", "following_url": "https://api.github.com/users/rodrigorodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/rodrigorodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodrigorodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodrigorodrigues/subscriptions", "organizations_url": "https://api.github.com/users/rodrigorodrigues/orgs", "repos_url": "https://api.github.com/users/rodrigorodrigues/repos", "events_url": "https://api.github.com/users/rodrigorodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/rodrigorodrigues/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-30T02:51:37Z", "updated_at": "2019-12-30T20:47:21Z", "closed_at": "2019-12-30T20:47:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to validate a JWT using `@jwt_required` but always getting error `422 - UNPROCESSABLE ENTITY - {\r\n    \"msg\": \"Signature verification failed\"\r\n}`.\r\n\r\nI thought the issue was with some missing claims then I changed my JWT to be as close as possible for the example from the creation token but still same error.\r\n\r\nDoes anyone have any clue on how to solve that please?\r\n\r\nFollowing piece of my code for better understanding.\r\n\r\n.env\r\n\r\n\tJWT_SECRET_KEY = 'secret-key'\r\n\r\n\tJWT_DECODE_ALGORITHMS = ['HS512', 'RS256']\r\n\r\n\tJWT_IDENTITY_CLAIM = 'sub'\r\n\r\n\tJWT_USER_CLAIMS = 'authorities'\r\n\r\n\tPROPAGATE_EXCEPTIONS = True\r\n\r\napp.py\r\n\r\n\tfrom flask import Flask, jsonify\r\n\tfrom flask_jwt_extended import JWTManager\r\n\r\n\r\n\tapp = Flask(__name__)\r\n\tapp.config['MONGODB_SETTINGS'] = {\r\n\t    'host': 'mongodb://localhost/docker'\r\n\t}\r\n\tapp.config.from_envvar('ENV_FILE_LOCATION')\r\n\tjwt = JWTManager(app)\r\n\r\n\r\n\tif __name__ == \"__main__\":\r\n\t    initialize_db(app)\r\n\r\n\t    api = Api(app)\r\n\r\n\t    initialize_routes(api)\r\n\r\n\t    run_simple(hostname=\"localhost\", port=app.config['SERVER_PORT'], application=dispatcher)\r\n\r\n\t    app.run(debug=True, host='0.0.0.0', port=app.config['SERVER_PORT'])\r\n\r\nJWT decoded\r\n\r\n\t{\r\n\t  \"typ\": \"JWT\",\r\n\t  \"alg\": \"HS512\"\r\n\t}\r\n\r\n\t{\r\n\t  \"sub\": \"admin@gmail.com\",\r\n\t  \"auth\": \"ROLE_ADMIN\",\r\n\t  \"name\": \"admin@gmail.com\",\r\n\t  \"type\": \"access\",\r\n\t  \"fresh\": true,\r\n\t  \"authorities\": [\r\n\t    \"ROLE_ADMIN\"\r\n\t  ],\r\n\t  \"jti\": \"129e90bc-0023-47a6-afbd-eb95461cfa46\",\r\n\t  \"exp\": 1577759781,\r\n\t  \"iat\": 1577673381,\r\n\t  \"nbf\": 1577673381\r\n\t}\r\n\r\nResource\r\n\r\n\tclass ProductsApi(Resource):\r\n\t    @jwt_required\r\n\t    def get(self):\r\n\t\tquery = Products.objects()\r\n\t\tmovies = Products.objects().to_json()\r\n\t\treturn Response(movies, mimetype=\"application/json\", status=200)\r\n\r\nPS: I'm newbie in Python sorry if my question is stupid ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/304", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/304/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/304/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/304", "id": 539695051, "node_id": "MDU6SXNzdWU1Mzk2OTUwNTE=", "number": 304, "title": "Blacklist a token assigned to a deleted database user", "user": {"login": "engmsilva", "id": 9066022, "node_id": "MDQ6VXNlcjkwNjYwMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/9066022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/engmsilva", "html_url": "https://github.com/engmsilva", "followers_url": "https://api.github.com/users/engmsilva/followers", "following_url": "https://api.github.com/users/engmsilva/following{/other_user}", "gists_url": "https://api.github.com/users/engmsilva/gists{/gist_id}", "starred_url": "https://api.github.com/users/engmsilva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/engmsilva/subscriptions", "organizations_url": "https://api.github.com/users/engmsilva/orgs", "repos_url": "https://api.github.com/users/engmsilva/repos", "events_url": "https://api.github.com/users/engmsilva/events{/privacy}", "received_events_url": "https://api.github.com/users/engmsilva/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-18T13:53:44Z", "updated_at": "2020-01-05T05:28:54Z", "closed_at": "2020-01-05T05:28:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the best way to invalidate an active user token that has been deleted from the database?\r\n\r\nThe fastest and not very smart way would be to put an active user check on all routes, but I think that would not be the best practice.\r\n\r\nAny way to list all active token to which the deleted user belongs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/303", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/303/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/303/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/303", "id": 538895280, "node_id": "MDU6SXNzdWU1Mzg4OTUyODA=", "number": 303, "title": "A token_in_blacklist_callback must be provided via the '@token_in_blacklist_loader' if JWT_BLACKLIST_ENABLED is True", "user": {"login": "omelnik", "id": 32174556, "node_id": "MDQ6VXNlcjMyMTc0NTU2", "avatar_url": "https://avatars0.githubusercontent.com/u/32174556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omelnik", "html_url": "https://github.com/omelnik", "followers_url": "https://api.github.com/users/omelnik/followers", "following_url": "https://api.github.com/users/omelnik/following{/other_user}", "gists_url": "https://api.github.com/users/omelnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/omelnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omelnik/subscriptions", "organizations_url": "https://api.github.com/users/omelnik/orgs", "repos_url": "https://api.github.com/users/omelnik/repos", "events_url": "https://api.github.com/users/omelnik/events{/privacy}", "received_events_url": "https://api.github.com/users/omelnik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-17T07:46:23Z", "updated_at": "2019-12-17T20:42:03Z", "closed_at": "2019-12-17T20:41:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I started getting this error  `A token_in_blacklist_callback must be provided via the '@token_in_blacklist_loader' if JWT_BLACKLIST_ENABLED is True`  and Im not able to resolve it. \r\n\r\n# app/__init__.py\r\n```\r\nimport os\r\nfrom flask import Flask\r\nfrom flask_cors import CORS\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_bcrypt import Bcrypt\r\nfrom flask_jwt_extended import JWTManager\r\n\r\napp = Flask(__name__)\r\n\r\n# Enabling CORS\r\nCORS(app)\r\n\r\n# app configuration\r\napp_settings = os.getenv(\"APP_SETTINGS\", \"app.config.DevelopmentConfig\")\r\napp.config.from_object(app_settings)\r\n\r\n# Initialize Flask Sql Alchemy\r\ndb = SQLAlchemy(app)\r\n\r\n# Initialize Bcrypt\r\nbcrypt = Bcrypt(app)\r\n\r\n# Initialize JWTManager\r\njwt = JWTManager(app)\r\n\r\nfrom app.auth.views import auth\r\napp.register_blueprint(auth)\r\n\r\nfrom app.resources.user import users\r\napp.register_blueprint(users)\r\n```\r\n\r\n# app/config.py\r\n\r\n```\r\nimport os\r\n\r\nbasedir = os.path.abspath(os.path.dirname(__file__))\r\npostgres_local_base = \"postgresql://localhost/db\"\r\n\r\n\r\nclass Config(object):\r\n    DEBUG = False\r\n    TESTING = False\r\n    CSRF_ENABLED = True\r\n    SECRET_KEY = os.getenv(\"SECRET_KEY\", \"secret\")\r\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\r\n    BCRYPT_LOG_ROUNDS = 12\r\n    PROPAGATE_EXCEPTIONS = True\r\n    JWT_BLACKLIST_ENABLED = True\r\n    JWT_BLACKLIST_TOKEN_CHECKS = ['access', 'refresh']\r\n\r\n\r\nclass DevelopmentConfig(Config):\r\n    DEVELOPMENT = True\r\n    DEBUG = True\r\n    BCRYPT_LOG_ROUNDS = 4\r\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"DATABASE_URL\", postgres_local_base)\r\n\r\n\r\nclass ProductionConfig(Config):\r\n    DEBUG = False\r\n\r\n\r\nclass StagingConfig(Config):\r\n    DEVELOPMENT = True\r\n    DEBUG = True\r\n\r\n\r\nclass TestingConfig(Config):\r\n    TESTING = True\r\n    BCRYPT_LOG_ROUNDS = 4\r\n    DEBUG = True\r\n```\r\n\r\nAnd I created a separate file where I added all Flask-JWT-Extended callbacks:\r\n# [app/auth/jwt_helper.py](url)\r\n```\r\nfrom flask import jsonify\r\n\r\nfrom app import jwt\r\nfrom app.auth.blacklist_helper import is_token_revoked\r\n\r\n\r\n@jwt.token_in_blacklist_loader\r\ndef check_if_token_revoked(decrypted_token):\r\n    return is_token_revoked(decrypted_token)\r\n\r\n\r\n@jwt.expired_token_loader\r\ndef expired_token_callback():\r\n    return jsonify({\r\n        'description': 'The token has expired',\r\n        'error': 'token_expired'\r\n    }), 401\r\n\r\n\r\n@jwt.invalid_token_loader\r\ndef invalid_token_callback(error):\r\n    return jsonify({\r\n        'description': 'Signature verification failed',\r\n        'error': 'invalid_token'\r\n    }), 401\r\n\r\n\r\n@jwt.unauthorized_loader\r\ndef missing_token_callback(error):\r\n    return jsonify({\r\n        'description': 'Request does not contain an access token',\r\n        'error': 'authorization_required'\r\n    }), 401\r\n\r\n\r\n@jwt.needs_fresh_token_loader\r\ndef token_not_fresh_callback():\r\n    return jsonify({\r\n        'description': 'The token is not fresh',\r\n        'error': 'fresh_token_required'\r\n    }), 401\r\n\r\n\r\n@jwt.revoked_token_loader\r\ndef revoked_token_callback():\r\n    return jsonify({\r\n        'description': 'The token has been revoked',\r\n        'error': 'token_revoked'\r\n    }), 401\r\n```\r\n\r\nHere's my API what Im calling:\r\n\r\n# app/resources/user.py\r\n```\r\nclass User(MethodView):\r\n    \"\"\"This method return a user by their id\"\"\"\r\n\r\n    @jwt_required\r\n    def get(self, user_id):\r\n        user = UserModel.find_user_by_id(user_id=user_id)\r\n        print(get_raw_jwt())\r\n        if user:\r\n            return user.json()\r\n        return {'message': 'User not not'}, 404\r\n\r\n# Add Rules for the API endpoints\r\nusers.add_url_rule('/api/users/<int:user_id>', view_func=User.as_view(\"user\"))\r\n```\r\nPlease advice what Im doing wrong. Thank you in advance.\r\n<img width=\"1170\" alt=\"Screen Shot 2019-12-16 at 11 47 36 PM\" src=\"https://user-images.githubusercontent.com/32174556/70975303-821a5580-205e-11ea-8bd1-f87d409e2f0b.png\">\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/302", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/302/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/302/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/302", "id": 538047481, "node_id": "MDU6SXNzdWU1MzgwNDc0ODE=", "number": 302, "title": "get_jwt_identity return => \"msg\": \"Missing Authorization Header\"", "user": {"login": "engmsilva", "id": 9066022, "node_id": "MDQ6VXNlcjkwNjYwMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/9066022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/engmsilva", "html_url": "https://github.com/engmsilva", "followers_url": "https://api.github.com/users/engmsilva/followers", "following_url": "https://api.github.com/users/engmsilva/following{/other_user}", "gists_url": "https://api.github.com/users/engmsilva/gists{/gist_id}", "starred_url": "https://api.github.com/users/engmsilva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/engmsilva/subscriptions", "organizations_url": "https://api.github.com/users/engmsilva/orgs", "repos_url": "https://api.github.com/users/engmsilva/repos", "events_url": "https://api.github.com/users/engmsilva/events{/privacy}", "received_events_url": "https://api.github.com/users/engmsilva/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-15T12:56:46Z", "updated_at": "2019-12-15T16:08:30Z", "closed_at": "2019-12-15T16:08:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can retrieve the token identity value when sent by the postman header.\r\n\r\nHowever when I use string query is returning the error message:\r\n\r\n`api/protected?jwt=<access_token>`\r\n\r\n```\r\n{\r\n\u00a0\u00a0 \"msg\": \"Missing Authorization Header\"\r\n}\r\n```\r\n\r\nMy recovery code looks like this:\r\n```\r\nclass User_Confirm(Resource):\r\n    @jwt_required\r\n    def get(cls):       \r\n        user_id = get_jwt_identity()\r\n        return print(user_id)\r\n```\r\n\r\nI'm using flask_restful to do routing.\r\n\r\n Is there anything else that should be parameterized?\r\n\r\n```\r\naniso8601==8.0.0\r\nblinker==1.4\r\nClick==7.0\r\nFlask==1.1.1\r\nFlask-Cors==3.0.8\r\nFlask-JWT-Extended==3.24.1\r\nFlask-Mail==0.9.0\r\nFlask-RESTful==0.3.7\r\nFlask-SQLAlchemy==2.4.1\r\nitsdangerous==1.1.0\r\nJinja2==2.10.3\r\nMarkupSafe==1.1.1\r\npsycopg2-binary==2.8.4\r\nPyJWT==1.7.1\r\npython-dotenv==0.10.3\r\npytz==2019.3\r\nsix==1.13.0\r\nSQLAlchemy==1.3.11\r\nWerkzeug==0.16.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/301", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/301/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/301/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/301/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/301", "id": 527209986, "node_id": "MDU6SXNzdWU1MjcyMDk5ODY=", "number": 301, "title": "Missing authorization header when deployed", "user": {"login": "Seluj78", "id": 4641317, "node_id": "MDQ6VXNlcjQ2NDEzMTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4641317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Seluj78", "html_url": "https://github.com/Seluj78", "followers_url": "https://api.github.com/users/Seluj78/followers", "following_url": "https://api.github.com/users/Seluj78/following{/other_user}", "gists_url": "https://api.github.com/users/Seluj78/gists{/gist_id}", "starred_url": "https://api.github.com/users/Seluj78/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Seluj78/subscriptions", "organizations_url": "https://api.github.com/users/Seluj78/orgs", "repos_url": "https://api.github.com/users/Seluj78/repos", "events_url": "https://api.github.com/users/Seluj78/events{/privacy}", "received_events_url": "https://api.github.com/users/Seluj78/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-11-22T13:57:06Z", "updated_at": "2019-11-22T14:32:07Z", "closed_at": "2019-11-22T14:26:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI love your extension, but I'm having a problem. I've deployed my app on my staging server and I get the `Missing Authorization Header` error when I do a request on any protected route even though it is there (Tried many things and even in postman). Any guess why that would be ?\r\n\r\n<img width=\"1676\" alt=\"Screenshot 2019-11-22 at 14 56 52\" src=\"https://user-images.githubusercontent.com/4641317/69431586-572b3300-0d38-11ea-85dc-16465b687981.png\">\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/300", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/300/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/300/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/300", "id": 524077339, "node_id": "MDU6SXNzdWU1MjQwNzczMzk=", "number": 300, "title": "Remove depreciation warnings", "user": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1", "html_url": "https://github.com/vimalloc/flask-jwt-extended/milestone/1", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1/labels", "id": 4853756, "node_id": "MDk6TWlsZXN0b25lNDg1Mzc1Ng==", "number": 1, "title": "4.0.0", "description": "The next major version of Flask-JWT-Extended.\r\n\r\nThis will primarily be removal of python2, removing of depreciation warnings, clean up some API warts, and add type hints. ", "creator": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 6, "state": "open", "created_at": "2019-11-18T00:22:34Z", "updated_at": "2020-06-26T15:33:42Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2019-11-18T00:44:14Z", "updated_at": "2019-11-18T00:44:48Z", "closed_at": "2019-11-18T00:44:48Z", "author_association": "OWNER", "active_lock_reason": null, "body": "They should now be errors in the 3.0.0 release.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/297", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/297/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/297/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/297", "id": 524075406, "node_id": "MDU6SXNzdWU1MjQwNzU0MDY=", "number": 297, "title": "Allow passing arguments to jwt_required", "user": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1", "html_url": "https://github.com/vimalloc/flask-jwt-extended/milestone/1", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/milestones/1/labels", "id": 4853756, "node_id": "MDk6TWlsZXN0b25lNDg1Mzc1Ng==", "number": 1, "title": "4.0.0", "description": "The next major version of Flask-JWT-Extended.\r\n\r\nThis will primarily be removal of python2, removing of depreciation warnings, clean up some API warts, and add type hints. ", "creator": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 6, "state": "open", "created_at": "2019-11-18T00:22:34Z", "updated_at": "2020-06-26T15:33:42Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2019-11-18T00:32:59Z", "updated_at": "2020-06-02T03:04:33Z", "closed_at": "2020-06-02T03:04:33Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This would allow us to clean up the API usage a bit, IMO. Still need to finalize how the API should look, but I think something like this would allow for an easier interface to consume, and make it easier to add options in the future as needed.\r\n\r\n`@jwt_required(fresh=False, optional=False, refresh=False)`\r\n\r\nI'm still unsure if having every option as part of `jwt_required` or still having separate `jwt_optional`, `fresh_jwt_required`, etc would be better. I think having everything be an option for `jwt_required` might be cleaner in the long run, but it is a more severe breaking change. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/295", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/295/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/295/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/295/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/295", "id": 523666415, "node_id": "MDU6SXNzdWU1MjM2NjY0MTU=", "number": 295, "title": "After logout and unset cookies the \"token/refresh\" path is still available", "user": {"login": "saasforge", "id": 53321779, "node_id": "MDQ6VXNlcjUzMzIxNzc5", "avatar_url": "https://avatars1.githubusercontent.com/u/53321779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saasforge", "html_url": "https://github.com/saasforge", "followers_url": "https://api.github.com/users/saasforge/followers", "following_url": "https://api.github.com/users/saasforge/following{/other_user}", "gists_url": "https://api.github.com/users/saasforge/gists{/gist_id}", "starred_url": "https://api.github.com/users/saasforge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saasforge/subscriptions", "organizations_url": "https://api.github.com/users/saasforge/orgs", "repos_url": "https://api.github.com/users/saasforge/repos", "events_url": "https://api.github.com/users/saasforge/events{/privacy}", "received_events_url": "https://api.github.com/users/saasforge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-15T20:13:28Z", "updated_at": "2019-11-15T22:20:18Z", "closed_at": "2019-11-15T22:20:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "My configuration:\r\n\r\n```\r\n    app.config['JWT_COOKIE_SECURE'] = False \r\n    app.config['JWT_COOKIE_CSRF_PROTECT'] = False\r\n\r\n    app.config['JWT_TOKEN_LOCATION'] = ['cookies']\r\n    app.config['JWT_ACCESS_COOKIE_PATH'] = '/app'\r\n    app.config['JWT_REFRESH_COOKIE_PATH'] = '/api/auth'\r\n```\r\n\r\n\r\nThe code:\r\n\r\n```\r\n@jwt_api.route('/api/auth/logout')\r\ndef post(self):\r\n        response = jsonify({'result': True})\r\n        unset_jwt_cookies(response)\r\n        return make_response(response, 200)\r\n\r\n# Not available after logout\r\n@test_blueprint.route('/app/api/jwttest', methods=['GET'])\r\n@jwt_required\r\ndef get_test():\r\n    return jsonify({'message': 'Protected works', 'result': True})\r\n\r\n# Available after logout\r\n@jwt_api.route('/api/auth/token/refresh')        \r\n@jwt_refresh_token_required\r\ndef post(self):\r\n        email = get_jwt_identity()\r\n        access_token = create_access_token(identity = email)\r\n        response = jsonify({'result': True})\r\n        set_access_cookies(response, access_token)\r\n        return make_response(response, 200)\r\n```\r\n\r\nMaybe app settings are wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/289", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/289/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/289/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/289/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/289", "id": 518941339, "node_id": "MDU6SXNzdWU1MTg5NDEzMzk=", "number": 289, "title": "Missing an auto-refresh example", "user": {"login": "beasteers", "id": 6741720, "node_id": "MDQ6VXNlcjY3NDE3MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/6741720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beasteers", "html_url": "https://github.com/beasteers", "followers_url": "https://api.github.com/users/beasteers/followers", "following_url": "https://api.github.com/users/beasteers/following{/other_user}", "gists_url": "https://api.github.com/users/beasteers/gists{/gist_id}", "starred_url": "https://api.github.com/users/beasteers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beasteers/subscriptions", "organizations_url": "https://api.github.com/users/beasteers/orgs", "repos_url": "https://api.github.com/users/beasteers/repos", "events_url": "https://api.github.com/users/beasteers/events{/privacy}", "received_events_url": "https://api.github.com/users/beasteers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-06T23:14:53Z", "updated_at": "2019-12-17T01:24:43Z", "closed_at": "2019-12-17T01:24:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "What I can't find in the docs is how to automatically refresh the token (w/ cookies) when the access token expires - and to refresh it entirely within the backend (the frontend/user does not have to take any action to parse/refresh the token). \r\n\r\nThe closest I am is this, but if someone's token expires as they're sending a POST request for example, it won't work because you can't reconstruct a POST request with `url_for`\r\n\r\n```python\r\n@expired_token_loader\r\ndef maybe_refresh_token():\r\n    return redirect(url_for(\r\n        'refresh_token', # refreshes like in the docs, redirects back to `next`\r\n        next=url_for(request.endpoint, **request.view_args) # original request\r\n    ))\r\n```\r\n\r\nThe other thought is to do something like:\r\n\r\n```python\r\n@auth.before_app_request\r\ndef maybe_refresh_token():\r\n    try:\r\n        verify_jwt_in_request()\r\n    except ...:\r\n        _refresh_token()\r\n```\r\n\r\nBut that won't update the current request object.\r\n\r\nIt would be nice if there were a helper/decorator that will work regardless of the request and would be able to update the cookie before `jwt_required` is run.\r\n\r\nMaybe I'm just missing something and the answer is obvious?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/288", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/288/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/288/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/288", "id": 517690527, "node_id": "MDU6SXNzdWU1MTc2OTA1Mjc=", "number": 288, "title": "This code does not catch any error that might happen inside an custom expired token handler function", "user": {"login": "RonsenbergVI", "id": 14303619, "node_id": "MDQ6VXNlcjE0MzAzNjE5", "avatar_url": "https://avatars3.githubusercontent.com/u/14303619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RonsenbergVI", "html_url": "https://github.com/RonsenbergVI", "followers_url": "https://api.github.com/users/RonsenbergVI/followers", "following_url": "https://api.github.com/users/RonsenbergVI/following{/other_user}", "gists_url": "https://api.github.com/users/RonsenbergVI/gists{/gist_id}", "starred_url": "https://api.github.com/users/RonsenbergVI/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RonsenbergVI/subscriptions", "organizations_url": "https://api.github.com/users/RonsenbergVI/orgs", "repos_url": "https://api.github.com/users/RonsenbergVI/repos", "events_url": "https://api.github.com/users/RonsenbergVI/events{/privacy}", "received_events_url": "https://api.github.com/users/RonsenbergVI/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-05T10:40:36Z", "updated_at": "2019-11-05T16:58:24Z", "closed_at": "2019-11-05T16:58:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "        @app.errorhandler(ExpiredSignatureError)\r\n        def handle_expired_error(e):\r\n            try:\r\n                token = ctx_stack.top.expired_jwt\r\n                return self._expired_token_callback(token)\r\n            except TypeError:\r\n                msg = (\r\n                    \"jwt.expired_token_loader callback now takes the expired token \"\r\n                    \"as an additional parameter. Example: expired_callback(token)\"\r\n                )\r\n                warn(msg, DeprecationWarning)\r\n                return self._expired_token_callback()", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/287", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/287/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/287/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/287", "id": 515999214, "node_id": "MDU6SXNzdWU1MTU5OTkyMTQ=", "number": 287, "title": "Incomplete docs", "user": {"login": "LucaTabone", "id": 4339435, "node_id": "MDQ6VXNlcjQzMzk0MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4339435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LucaTabone", "html_url": "https://github.com/LucaTabone", "followers_url": "https://api.github.com/users/LucaTabone/followers", "following_url": "https://api.github.com/users/LucaTabone/following{/other_user}", "gists_url": "https://api.github.com/users/LucaTabone/gists{/gist_id}", "starred_url": "https://api.github.com/users/LucaTabone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LucaTabone/subscriptions", "organizations_url": "https://api.github.com/users/LucaTabone/orgs", "repos_url": "https://api.github.com/users/LucaTabone/repos", "events_url": "https://api.github.com/users/LucaTabone/events{/privacy}", "received_events_url": "https://api.github.com/users/LucaTabone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-01T09:20:44Z", "updated_at": "2019-11-01T13:42:55Z", "closed_at": "2019-11-01T13:09:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys :),\r\n\r\nI love the work you have done with this package. Thank You!\r\nUnfortunately the doc-page https://flask-jwt-extended.readthedocs.io/en/stable/blacklist_and_token_revoking.html is not available.\r\nCould you have a look into this issue?\r\n\r\nBest regards from Berlin,\r\nLuca", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/286", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/286/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/286/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/286", "id": 515643568, "node_id": "MDU6SXNzdWU1MTU2NDM1Njg=", "number": 286, "title": "jwt_optional borks on expired token", "user": {"login": "ajbraus", "id": 997531, "node_id": "MDQ6VXNlcjk5NzUzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/997531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajbraus", "html_url": "https://github.com/ajbraus", "followers_url": "https://api.github.com/users/ajbraus/followers", "following_url": "https://api.github.com/users/ajbraus/following{/other_user}", "gists_url": "https://api.github.com/users/ajbraus/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajbraus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajbraus/subscriptions", "organizations_url": "https://api.github.com/users/ajbraus/orgs", "repos_url": "https://api.github.com/users/ajbraus/repos", "events_url": "https://api.github.com/users/ajbraus/events{/privacy}", "received_events_url": "https://api.github.com/users/ajbraus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-31T18:12:45Z", "updated_at": "2019-11-05T17:02:32Z", "closed_at": "2019-11-05T17:02:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, great library but I'm wondering about the logic of making `jwt_optional` not work when a token is expired. \r\n\r\nImagine I want people to see the same page one way if they are logged in, and another way if they are not. Why not let me visit the end point, expose the JWT token, and then have the get_jwt_identity return `None` if the token is expired?\r\n\r\nPerhaps I'm just doing things all backwards. A good example of how you would make an endpoint truly optional if you are logged (not optional except if a token is expired) would be very useful.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/283", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/283/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/283/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/283", "id": 511944233, "node_id": "MDU6SXNzdWU1MTE5NDQyMzM=", "number": 283, "title": "Gitter vs Slack vs Discord", "user": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1636117211, "node_id": "MDU6TGFiZWwxNjM2MTE3MjEx", "url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/labels/Meta", "name": "Meta", "color": "e298c3", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-24T13:26:32Z", "updated_at": "2020-03-11T22:59:32Z", "closed_at": "2019-10-28T20:21:36Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I've been having a lot of issues with the mobile and desktop clients for Gitter for a while now. I'm thinking about moving the support channel over to Slack or Discord instead. I don't want to go back to IRC just because of the amount of infrastructure I need to manage there, IE push notifications, bouncers, searchability, etc. \r\n\r\nI'm wondering if anyone has strong opinions about gitter vs slack vs discord (vs ????) before I start making changes?\r\n\r\nThanks! :+1:", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/282", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/282/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/282/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/282", "id": 511862531, "node_id": "MDU6SXNzdWU1MTE4NjI1MzE=", "number": 282, "title": "Passing empty token results in IndexError", "user": {"login": "cal97g", "id": 1664656, "node_id": "MDQ6VXNlcjE2NjQ2NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1664656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cal97g", "html_url": "https://github.com/cal97g", "followers_url": "https://api.github.com/users/cal97g/followers", "following_url": "https://api.github.com/users/cal97g/following{/other_user}", "gists_url": "https://api.github.com/users/cal97g/gists{/gist_id}", "starred_url": "https://api.github.com/users/cal97g/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cal97g/subscriptions", "organizations_url": "https://api.github.com/users/cal97g/orgs", "repos_url": "https://api.github.com/users/cal97g/repos", "events_url": "https://api.github.com/users/cal97g/events{/privacy}", "received_events_url": "https://api.github.com/users/cal97g/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-24T10:45:13Z", "updated_at": "2019-10-24T16:01:43Z", "closed_at": "2019-10-24T15:53:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n[2019-10-24 11:39:00 +0100] [22] [ERROR] Error handling request XXXXXXXXXXX\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 135, in handle\r\n    self.handle_request(listener, req, client, addr)\r\n  File \"/usr/local/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 176, in handle_request\r\n    respiter = self.wsgi(environ, resp.start_response)\r\n  File \"/usr/local/lib/python3.7/site-packages/sentry_sdk/integrations/flask.py\", line 69, in sentry_patched_wsgi_app\r\n    environ, start_response\r\n  File \"/usr/local/lib/python3.7/site-packages/sentry_sdk/integrations/wsgi.py\", line 106, in __call__\r\n    reraise(*_capture_exception(hub))\r\n  File \"/usr/local/lib/python3.7/site-packages/sentry_sdk/_compat.py\", line 54, in reraise\r\n    raise value\r\n  File \"/usr/local/lib/python3.7/site-packages/sentry_sdk/integrations/wsgi.py\", line 103, in __call__\r\n    functools.partial(_sentry_start_response, start_response, span),\r\n  File \"/usr/local/lib/python3.7/site-packages/sentry_sdk/integrations/flask.py\", line 68, in <lambda>\r\n    return SentryWsgiMiddleware(lambda *a, **kw: old_app(self, *a, **kw))(\r\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 2463, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 2449, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/usr/local/lib/python3.7/site-packages/flask_cors/extension.py\", line 161, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1866, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 2446, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1951, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/usr/local/lib/python3.7/site-packages/flask_cors/extension.py\", line 161, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1820, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1949, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1935, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/usr/local/lib/python3.7/site-packages/flask_jwt_extended/view_decorators.py\", line 103, in wrapper\r\n    verify_jwt_in_request()\r\n  File \"/usr/local/lib/python3.7/site-packages/flask_jwt_extended/view_decorators.py\", line 32, in verify_jwt_in_request\r\n    jwt_data = _decode_jwt_from_request(request_type='access')\r\n  File \"/usr/local/lib/python3.7/site-packages/flask_jwt_extended/view_decorators.py\", line 288, in _decode_jwt_from_request\r\n    encoded_token, csrf_token = get_encoded_token_function()\r\n  File \"/usr/local/lib/python3.7/site-packages/flask_jwt_extended/view_decorators.py\", line 204, in _decode_jwt_from_headers\r\n    encoded_token = parts[1]\r\nIndexError: list index out of range\r\n```\r\n\r\nWhen you pass the following header:\r\n```\r\n{\"Authorization\": \"Bearer \"}\r\n```\r\n\r\nIt should result in some sort of 401 or 400, not produce a 500.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/281", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/281/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/281/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/281/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/281", "id": 509003529, "node_id": "MDU6SXNzdWU1MDkwMDM1Mjk=", "number": 281, "title": "How to call @admin_required like @jwt_required", "user": {"login": "tatdatpham", "id": 3429970, "node_id": "MDQ6VXNlcjM0Mjk5NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3429970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatdatpham", "html_url": "https://github.com/tatdatpham", "followers_url": "https://api.github.com/users/tatdatpham/followers", "following_url": "https://api.github.com/users/tatdatpham/following{/other_user}", "gists_url": "https://api.github.com/users/tatdatpham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatdatpham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatdatpham/subscriptions", "organizations_url": "https://api.github.com/users/tatdatpham/orgs", "repos_url": "https://api.github.com/users/tatdatpham/repos", "events_url": "https://api.github.com/users/tatdatpham/events{/privacy}", "received_events_url": "https://api.github.com/users/tatdatpham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T10:47:46Z", "updated_at": "2019-10-18T14:33:34Z", "closed_at": "2019-10-18T14:33:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I followed in this docs [custom_decorators](https://flask-jwt-extended.readthedocs.io/en/latest/custom_decorators.html)\r\nI have question. How to call @admin_required decorator in another file, namespace ... like @jwt_required\r\n\r\nLook like this\r\n```\r\nfrom flask_jwt_extended import (jwt_required admin_required)\r\n````\r\n\r\nThank!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/280", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/280/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/280/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/280/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/280", "id": 508303217, "node_id": "MDU6SXNzdWU1MDgzMDMyMTc=", "number": 280, "title": "flask_restplus and setting cookies", "user": {"login": "psdon", "id": 31410348, "node_id": "MDQ6VXNlcjMxNDEwMzQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/31410348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psdon", "html_url": "https://github.com/psdon", "followers_url": "https://api.github.com/users/psdon/followers", "following_url": "https://api.github.com/users/psdon/following{/other_user}", "gists_url": "https://api.github.com/users/psdon/gists{/gist_id}", "starred_url": "https://api.github.com/users/psdon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psdon/subscriptions", "organizations_url": "https://api.github.com/users/psdon/orgs", "repos_url": "https://api.github.com/users/psdon/repos", "events_url": "https://api.github.com/users/psdon/events{/privacy}", "received_events_url": "https://api.github.com/users/psdon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-17T07:59:22Z", "updated_at": "2019-10-17T14:52:17Z", "closed_at": "2019-10-17T14:52:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `Flask_RESTPlus` and I'm trying to set JWT cookies but looks like `flask_restplus` don't allow to return a `jsonify object` and I can't set the cookies in the response.\r\n\r\n```\r\n@api.route('/sign-in')\r\nclass SignInResource(Resource):\r\n\r\n    def post(self):\r\n        username_or_email = request.json.get('username_or_email', None)\r\n        password = request.json.get('password', None)\r\n\r\n        if username_or_email != \"test\" and password != test:\r\n            return {\"error\": \"bad credentials\"}\r\n\r\n        access_token = create_access_token(identity=user.id)\r\n        refresh_token = create_refresh_token(identity=user.id)\r\n\r\n        ret = {'sign_in': True}\r\n        resp = jsonify(ret)\r\n        set_access_cookies(resp, access_token)\r\n        set_refresh_cookies(resp, refresh_token)\r\n        return resp, 200  # DONT ALLOW return JSONIFY Object\r\n```\r\n\r\nIs there a workaround for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/279", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/279/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/279/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/279/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/279", "id": 507808246, "node_id": "MDU6SXNzdWU1MDc4MDgyNDY=", "number": 279, "title": "JWT in headers + CSRF in cookie", "user": {"login": "Korhm", "id": 18255886, "node_id": "MDQ6VXNlcjE4MjU1ODg2", "avatar_url": "https://avatars2.githubusercontent.com/u/18255886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Korhm", "html_url": "https://github.com/Korhm", "followers_url": "https://api.github.com/users/Korhm/followers", "following_url": "https://api.github.com/users/Korhm/following{/other_user}", "gists_url": "https://api.github.com/users/Korhm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Korhm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Korhm/subscriptions", "organizations_url": "https://api.github.com/users/Korhm/orgs", "repos_url": "https://api.github.com/users/Korhm/repos", "events_url": "https://api.github.com/users/Korhm/events{/privacy}", "received_events_url": "https://api.github.com/users/Korhm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-16T12:06:27Z", "updated_at": "2019-10-16T12:43:09Z", "closed_at": "2019-10-16T12:43:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI would like to put JWT in headers and CSRF in cookie, but this seems not possible reading the document.\r\nBy this way, my frontend will be able to get some information from user_claims, and I will avoid to store this in a cookie\r\n\r\nCurrently, I have to add this kind of information on /login response. \r\n\r\nIs there a way to achieve it ? If not, why ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/278", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/278/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/278/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/278", "id": 507062892, "node_id": "MDU6SXNzdWU1MDcwNjI4OTI=", "number": 278, "title": "Throwing Exception when debug = False", "user": {"login": "psdon", "id": 31410348, "node_id": "MDQ6VXNlcjMxNDEwMzQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/31410348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psdon", "html_url": "https://github.com/psdon", "followers_url": "https://api.github.com/users/psdon/followers", "following_url": "https://api.github.com/users/psdon/following{/other_user}", "gists_url": "https://api.github.com/users/psdon/gists{/gist_id}", "starred_url": "https://api.github.com/users/psdon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psdon/subscriptions", "organizations_url": "https://api.github.com/users/psdon/orgs", "repos_url": "https://api.github.com/users/psdon/repos", "events_url": "https://api.github.com/users/psdon/events{/privacy}", "received_events_url": "https://api.github.com/users/psdon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-15T07:36:02Z", "updated_at": "2019-10-15T07:52:54Z", "closed_at": "2019-10-15T07:52:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Everything works fine when `debug = True`, like if I don't include an Authorization header in the request, it will return:\r\n```\r\n{\r\n\"msg\": \"Missing Authorization Header\"\r\n} \r\n```\r\n\r\nBut when I setup the production server and set the `debug = False`, instead it will return:\r\n```\r\n{\r\n\"message\": \"Internal Server Error\"\r\n}\r\n```\r\n\r\nAnd in my Python error logs, it throws an exception \r\n```\r\nraise NoAuthorizationError(errors[0])\r\nflask_jwt_extended.exceptions.NoAuthorizationError: Missing Authorization Header\r\n```\r\nLooks like it does not handle exceptions in Production server.\r\n\r\n**WORK AROUND**\r\nSet in your production config file:\r\n`PROPAGATE_EXCEPTIONS = True`\r\n\r\n---\r\n_I'm not sure if this is a bug since there's nothing indicated in the documentation, or if I just missed it. Hope this helps._", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/277", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/277/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/277/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/277", "id": 499938437, "node_id": "MDU6SXNzdWU0OTk5Mzg0Mzc=", "number": 277, "title": "KeyError: 'JWT_ACCESS_COOKIE_NAME'", "user": {"login": "johaven", "id": 5459596, "node_id": "MDQ6VXNlcjU0NTk1OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/5459596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johaven", "html_url": "https://github.com/johaven", "followers_url": "https://api.github.com/users/johaven/followers", "following_url": "https://api.github.com/users/johaven/following{/other_user}", "gists_url": "https://api.github.com/users/johaven/gists{/gist_id}", "starred_url": "https://api.github.com/users/johaven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johaven/subscriptions", "organizations_url": "https://api.github.com/users/johaven/orgs", "repos_url": "https://api.github.com/users/johaven/repos", "events_url": "https://api.github.com/users/johaven/events{/privacy}", "received_events_url": "https://api.github.com/users/johaven/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-29T16:21:48Z", "updated_at": "2019-10-10T04:08:09Z", "closed_at": "2019-10-10T04:08:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since the last versions i regulary got this error.\r\nI don't understand why. This parameter has a default value.\r\nI use Python 3.7 and Flask 1.1.1, the error seems to appear with 3.22.0 and 3.23.0 versions.\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/venv/lib/python3.7/site-packages/flask/app.py\", line 2463, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/venv/lib/python3.7/site-packages/flask/app.py\", line 2449, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/venv/lib/python3.7/site-packages/flask/app.py\", line 1866, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/venv/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/venv/lib/python3.7/site-packages/flask/app.py\", line 2446, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/venv/lib/python3.7/site-packages/flask/app.py\", line 1951, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/venv/lib/python3.7/site-packages/flask/app.py\", line 1820, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/venv/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/venv/lib/python3.7/site-packages/flask/app.py\", line 1947, in full_dispatch_request\r\n    rv = self.preprocess_request()\r\n  File \"/venv/lib/python3.7/site-packages/flask/app.py\", line 2241, in preprocess_request\r\n    rv = func()\r\n  File \"/venv/lib/python3.7/site-packages/flask_jwt_extended/view_decorators.py\", line 103, in wrapper\r\n    verify_jwt_in_request()\r\n  File \"/venv/lib/python3.7/site-packages/flask_jwt_extended/view_decorators.py\", line 32, in verify_jwt_in_request\r\n    jwt_data = _decode_jwt_from_request(request_type='access')\r\n  File \"/venv/lib/python3.7/site-packages/flask_jwt_extended/view_decorators.py\", line 288, in _decode_jwt_from_request\r\n    encoded_token, csrf_token = get_encoded_token_function()\r\n  File \"/venv/lib/python3.7/site-packages/flask_jwt_extended/view_decorators.py\", line 273, in <lambda>\r\n    lambda: _decode_jwt_from_cookies(request_type))\r\n  File \"/venv/lib/python3.7/site-packages/flask_jwt_extended/view_decorators.py\", line 211, in _decode_jwt_from_cookies\r\n    cookie_key = config.access_cookie_name\r\n  File \"/venv/lib/python3.7/site-packages/flask_jwt_extended/config.py\", line 98, in access_cookie_name\r\n    return current_app.config['JWT_ACCESS_COOKIE_NAME']\r\nKeyError: 'JWT_ACCESS_COOKIE_NAME'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/274", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/274/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/274/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/274/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/274", "id": 496966579, "node_id": "MDU6SXNzdWU0OTY5NjY1Nzk=", "number": 274, "title": "IndexError: list index out of range / \"msg\": \"Missing Authorization Header\"", "user": {"login": "PatrickJose00", "id": 50057574, "node_id": "MDQ6VXNlcjUwMDU3NTc0", "avatar_url": "https://avatars1.githubusercontent.com/u/50057574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PatrickJose00", "html_url": "https://github.com/PatrickJose00", "followers_url": "https://api.github.com/users/PatrickJose00/followers", "following_url": "https://api.github.com/users/PatrickJose00/following{/other_user}", "gists_url": "https://api.github.com/users/PatrickJose00/gists{/gist_id}", "starred_url": "https://api.github.com/users/PatrickJose00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PatrickJose00/subscriptions", "organizations_url": "https://api.github.com/users/PatrickJose00/orgs", "repos_url": "https://api.github.com/users/PatrickJose00/repos", "events_url": "https://api.github.com/users/PatrickJose00/events{/privacy}", "received_events_url": "https://api.github.com/users/PatrickJose00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-23T08:45:29Z", "updated_at": "2019-09-23T13:01:23Z", "closed_at": "2019-09-23T13:00:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhen i do this `\"curl -H \"Authorization: Bearer $ACCESS\" http://localhost:5000/index\"`\r\n\r\ni get the error `\"IndexError: list index out of range\"`\r\n\r\nif i try to access it via my broswer : http://127.0.0.1:5000/index\r\ni get this error: `\"msg\": \"Missing Authorization Header\"`\r\n\r\nI did get my token and export it\r\n\r\nMy code:\r\n```\r\n\r\n@app.route('/index', methods=['GET'])\r\n@jwt_required\r\n@ldap.login_required\r\ndef index():\r\n    current_user = get_jwt_identity()\r\n    return jsonify(logged_in_as=current_user), 200\r\n```\r\n\r\n\r\n\r\n```\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    if g.user:\r\n        return redirect(url_for('index'))\r\n    if request.method == 'POST':\r\n        user = request.form['user']\r\n        passwd = request.form['passwd']\r\n        test = ldap.bind_user(user, passwd)\r\n        if test is None or passwd == '':\r\n            return 'Invalid credentials'\r\n        else:\r\n            session['user_id'] = request.form['user']\r\n            return redirect('/index')\r\n    access_token = create_access_token(identity=g.user)\r\n    return jsonify(access_token=access_token), 200\r\n```\r\n\r\nDo you know what might be the problem here?\r\nThanks for you time", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/273", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/273/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/273/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/273", "id": 496420629, "node_id": "MDU6SXNzdWU0OTY0MjA2Mjk=", "number": 273, "title": "LDAP Authentication with JWT extended", "user": {"login": "PatrickJose00", "id": 50057574, "node_id": "MDQ6VXNlcjUwMDU3NTc0", "avatar_url": "https://avatars1.githubusercontent.com/u/50057574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PatrickJose00", "html_url": "https://github.com/PatrickJose00", "followers_url": "https://api.github.com/users/PatrickJose00/followers", "following_url": "https://api.github.com/users/PatrickJose00/following{/other_user}", "gists_url": "https://api.github.com/users/PatrickJose00/gists{/gist_id}", "starred_url": "https://api.github.com/users/PatrickJose00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PatrickJose00/subscriptions", "organizations_url": "https://api.github.com/users/PatrickJose00/orgs", "repos_url": "https://api.github.com/users/PatrickJose00/repos", "events_url": "https://api.github.com/users/PatrickJose00/events{/privacy}", "received_events_url": "https://api.github.com/users/PatrickJose00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-20T15:38:32Z", "updated_at": "2020-02-10T19:52:40Z", "closed_at": "2019-09-20T15:55:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nsorry i am new to python, and i am trying to make a login function that uses tokens with JWT and uses a LDAP directory.\r\nThis is my code but it's not working:\r\n\r\n```\r\napp.secret_key = 'GoodNewsEveryone'\r\napp.config['LDAP_BASE_DN'] = 'dc=planetexpress,dc=com'\r\napp.config['LDAP_USERNAME'] = 'CN=Hermes Conrad,ou=people,dc=planetexpress,dc=com'\r\napp.config['LDAP_PASSWORD'] = 'hermes'\r\napp.config['LDAP_USE_SSL'] = True\r\napp.config['LDAP_OPENLDAP'] = True\r\napp.config['LDAP_USER_OBJECT_FILTER'] = '(&(objectclass=inetOrgPerson)(uid=%s))'\r\napp.config['JWT_SECRET_KEY'] = 'super-secret'  # Change this!\r\n```\r\n\r\n\r\n```\r\ndap = LDAP(app)\r\njwt = JWTManager(app)\r\n\r\n\r\n@app.route('/ldap')\r\n@ldap.login_required\r\ndef ldap_protected():\r\n\r\n    return 'Success!'\r\n\r\n\r\n@app.before_request\r\ndef before_request():\r\n    g.user = None\r\n    if 'user_id' in session:\r\n        # This is where you'd query your database to get the user info.\r\n        g.user = {}\r\n        # Create a global with the LDAP groups the user is a member of.\r\n\r\n\r\n@app.route('/')\r\n@ldap.login_required\r\ndef index():\r\n    return 'Successfully logged in! '\r\n```\r\n```\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    if g.user:\r\n        return redirect(url_for('index'))\r\n    if request.method == 'POST':\r\n        username = request.json.get('username', None)\r\n        password = request.json.get('password', None)\r\n\r\n        if not username:\r\n            return jsonify({\"msg\": \"Missing username parameter\"}), 400\r\n        if not password:\r\n            return jsonify({\"msg\": \"Missing password parameter\"}), 400\r\n        else:\r\n            session['user_id'] = request.form['user']\r\n            return redirect('/')\r\n    access_token = create_access_token(identity=g.user)\r\n    return jsonify(access_token=access_token), 200\r\n```\r\n\r\nBefore i try to implemented the jwt i could log in with the uses on my ldap, but now i can't\r\nAny help\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/272", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/272/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/272/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/272", "id": 496374248, "node_id": "MDU6SXNzdWU0OTYzNzQyNDg=", "number": 272, "title": "LDAP auth", "user": {"login": "PatrickJose00", "id": 50057574, "node_id": "MDQ6VXNlcjUwMDU3NTc0", "avatar_url": "https://avatars1.githubusercontent.com/u/50057574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PatrickJose00", "html_url": "https://github.com/PatrickJose00", "followers_url": "https://api.github.com/users/PatrickJose00/followers", "following_url": "https://api.github.com/users/PatrickJose00/following{/other_user}", "gists_url": "https://api.github.com/users/PatrickJose00/gists{/gist_id}", "starred_url": "https://api.github.com/users/PatrickJose00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PatrickJose00/subscriptions", "organizations_url": "https://api.github.com/users/PatrickJose00/orgs", "repos_url": "https://api.github.com/users/PatrickJose00/repos", "events_url": "https://api.github.com/users/PatrickJose00/events{/privacy}", "received_events_url": "https://api.github.com/users/PatrickJose00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-20T14:09:03Z", "updated_at": "2019-09-20T14:36:50Z", "closed_at": "2019-09-20T14:36:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, i'am new to python and flask.\r\nI am trying to get jwt  verifications on my login function.\r\ncan you help me on that, my code already does ldpa login via a local docker that i have mounted, and it works, now i just need extra security on this login function.\r\n\r\n```\r\napp.secret_key = 'GoodNewsEveryone'\r\napp.config['LDAP_BASE_DN'] = 'dc=planetexpress,dc=com'\r\napp.config['LDAP_USERNAME'] = 'CN=Hermes Conrad,ou=people,dc=planetexpress,dc=com'\r\napp.config['LDAP_PASSWORD'] = 'hermes'\r\napp.config['LDAP_USE_SSL'] = True\r\napp.config['LDAP_OPENLDAP'] = True\r\napp.config['LDAP_USER_OBJECT_FILTER'] = '(&(objectclass=inetOrgPerson)(uid=%s))'\r\napp.config['JWT_SECRET_KEY'] = 'super-secret'  # Change this!\r\n\r\n```\r\n\r\n```\r\ndap = LDAP(app)\r\njwt = JWTManager(app)\r\n```\r\n\r\n```\r\n@app.route('/')\r\n@ldap.login_required\r\ndef index():\r\n    return 'Successfully logged in! \r\n```\r\n\r\n\r\n```\r\n@app.route('/login',` methods=['GET', 'POST'])\r\ndef login():\r\n    if g.user:\r\n        return redirect(url_for('index'))\r\n    if request.method == 'POST':\r\n        user = request.form['user']\r\n        passwd = request.form['passwd']\r\n        test = ldap.bind_user(user, passwd)\r\n        if test is None or passwd == '':\r\n            return 'Invalid credentials'\r\n        else:\r\n            session['user_id'] = request.form['user']\r\n            return redirect('/')\r\n    return  \"\"\"<form action=\"\" method=\"post\">\r\n                user: <input name=\"user\"><br>\r\n                password:<input type=\"password\" name=\"passwd\"><br>\r\n                <input type=\"submit\" value=\"Submit\"></form>\"\"\"\r\n\r\n```\r\n\r\n```\r\n@app.route('/logout')\r\ndef logout():\r\n    session.pop('user_id', None)\r\n    return redirect(url_for('index'))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/271", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/271/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/271/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/271", "id": 494818326, "node_id": "MDU6SXNzdWU0OTQ4MTgzMjY=", "number": 271, "title": "FEATURE: Add custom fields in JWT header", "user": {"login": "iamajay", "id": 13699254, "node_id": "MDQ6VXNlcjEzNjk5MjU0", "avatar_url": "https://avatars3.githubusercontent.com/u/13699254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamajay", "html_url": "https://github.com/iamajay", "followers_url": "https://api.github.com/users/iamajay/followers", "following_url": "https://api.github.com/users/iamajay/following{/other_user}", "gists_url": "https://api.github.com/users/iamajay/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamajay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamajay/subscriptions", "organizations_url": "https://api.github.com/users/iamajay/orgs", "repos_url": "https://api.github.com/users/iamajay/repos", "events_url": "https://api.github.com/users/iamajay/events{/privacy}", "received_events_url": "https://api.github.com/users/iamajay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-17T19:49:27Z", "updated_at": "2019-10-04T14:53:47Z", "closed_at": "2019-10-04T14:53:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, I am using flask-jwt-extended in my production app but recently have come across with a blocker for adding a custom field in the header of jwt, I searched the code and implementation of this repo and found out according to current implementation it is not possible to do so. So I am suggesting that we can add this feature as well. Just like [https://pyjwt.readthedocs.io/en/latest/usage.html#specifying-additional-headers](url) which is provided in pyjwt library. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/268", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/268/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/268/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/268", "id": 481527976, "node_id": "MDU6SXNzdWU0ODE1Mjc5NzY=", "number": 268, "title": "Problems using the UserLoaderCallback  ", "user": {"login": "durchgedreht", "id": 4490840, "node_id": "MDQ6VXNlcjQ0OTA4NDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4490840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durchgedreht", "html_url": "https://github.com/durchgedreht", "followers_url": "https://api.github.com/users/durchgedreht/followers", "following_url": "https://api.github.com/users/durchgedreht/following{/other_user}", "gists_url": "https://api.github.com/users/durchgedreht/gists{/gist_id}", "starred_url": "https://api.github.com/users/durchgedreht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durchgedreht/subscriptions", "organizations_url": "https://api.github.com/users/durchgedreht/orgs", "repos_url": "https://api.github.com/users/durchgedreht/repos", "events_url": "https://api.github.com/users/durchgedreht/events{/privacy}", "received_events_url": "https://api.github.com/users/durchgedreht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-16T09:38:35Z", "updated_at": "2019-10-10T04:10:15Z", "closed_at": "2019-10-10T04:10:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm using Superset and am a bit tied to the config and securitymanager configuration points/classes. So no plain Flask app build from scratch. Token reading and verification works, also additional claims etc. Only issue is the user_loader_callback that simply is not executed at all. My CustomSecurityManager is instantiated ok, init method is called, jwt is instantiated ok and I can debug jwt_manager as it's there (in Wewrkzeug debugger). So I guess it's 'simply' a loader attachment issue. \r\n\r\nAny help is appreciated.\r\nThanks!\r\n\r\n`\r\nclass CustomSecurityManager(SupersetSecurityManager):\r\n    authdbview = CustomAuthDBView\r\n    jwt = JWTManager()\r\n\r\n    def __init__(self, appbuilder):\r\n        jwt = JWTManager(appbuilder.app)\r\n        super(CustomSecurityManager, self).__init__(appbuilder)\r\n\r\n\r\n    @jwt.user_loader_callback_loader\r\n    def user_loader_callback(identity):\r\n\r\n        user = self.appbuilder.sm.find_user_by_username(identity)\r\n\r\n        return UserObject(\r\n            username=identity,\r\n            foo='bar'\r\n        )\r\n`\r\n\r\n\r\nThe Flask Trace looks like follows:\r\n\r\n<img width=\"819\" alt=\"Screenshot 2019-08-16 at 11 30 44\" src=\"https://user-images.githubusercontent.com/4490840/63158510-af57e800-c019-11e9-9ac3-5f77dd70808c.png\">\r\nValueError: invalid literal for int() with base 10: 'demo@foobar.com'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/267", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/267/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/267/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/267", "id": 480309357, "node_id": "MDU6SXNzdWU0ODAzMDkzNTc=", "number": 267, "title": "Site: broken link", "user": {"login": "Andrei-Pozolotin", "id": 1622151, "node_id": "MDQ6VXNlcjE2MjIxNTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1622151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andrei-Pozolotin", "html_url": "https://github.com/Andrei-Pozolotin", "followers_url": "https://api.github.com/users/Andrei-Pozolotin/followers", "following_url": "https://api.github.com/users/Andrei-Pozolotin/following{/other_user}", "gists_url": "https://api.github.com/users/Andrei-Pozolotin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andrei-Pozolotin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andrei-Pozolotin/subscriptions", "organizations_url": "https://api.github.com/users/Andrei-Pozolotin/orgs", "repos_url": "https://api.github.com/users/Andrei-Pozolotin/repos", "events_url": "https://api.github.com/users/Andrei-Pozolotin/events{/privacy}", "received_events_url": "https://api.github.com/users/Andrei-Pozolotin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-13T18:45:09Z", "updated_at": "2019-10-27T21:00:10Z", "closed_at": "2019-10-27T17:34:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "1. here on site:\r\nhttps://flask-jwt-extended.readthedocs.io/en/latest/installation\r\n\r\n2. click on `Stable`:\r\n```\r\nThe latest stable version is Stable.\r\n```\r\n\r\n3. comes back with error:\r\nhttps://flask-jwt-extended.readthedocs.io/en/latest/stable/installation\r\n```\r\nPage Not Found\r\nThe page you requested does not exist. You may have followed a bad link, or the page may have been moved or removed.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/266", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/266/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/266/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/266", "id": 479444051, "node_id": "MDU6SXNzdWU0Nzk0NDQwNTE=", "number": 266, "title": "Set 'iss' claims in encode jwt", "user": {"login": "zbclove", "id": 18378259, "node_id": "MDQ6VXNlcjE4Mzc4MjU5", "avatar_url": "https://avatars2.githubusercontent.com/u/18378259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbclove", "html_url": "https://github.com/zbclove", "followers_url": "https://api.github.com/users/zbclove/followers", "following_url": "https://api.github.com/users/zbclove/following{/other_user}", "gists_url": "https://api.github.com/users/zbclove/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbclove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbclove/subscriptions", "organizations_url": "https://api.github.com/users/zbclove/orgs", "repos_url": "https://api.github.com/users/zbclove/repos", "events_url": "https://api.github.com/users/zbclove/events{/privacy}", "received_events_url": "https://api.github.com/users/zbclove/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-12T02:16:45Z", "updated_at": "2019-09-26T06:29:55Z", "closed_at": "2019-09-26T06:29:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm building an application deployed in k8s with istio.\r\nEnd-user authentication with Istio requires 'iss' field in claims ,<https://tools.ietf.org/html/rfc7519#section-4.1.1> but I can't find out how to set it.\r\nIstio proxy document: < https://github.com/istio/proxy/tree/master/src/envoy/http/jwt_auth >\r\nIs there any way to set custom claims? Or should I use flask-jwt-simple instead of flask-jwt-extended?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/265", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/265/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/265/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/265", "id": 478230516, "node_id": "MDU6SXNzdWU0NzgyMzA1MTY=", "number": 265, "title": "Flask-restplus errorhandler workaround possibly not working in python3.7", "user": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-08T03:22:22Z", "updated_at": "2019-10-10T04:11:36Z", "closed_at": "2019-10-10T04:11:36Z", "author_association": "OWNER", "active_lock_reason": null, "body": "@engmsaleh I want to continue the conversation here to keep the other issue easier to navigate. If you could provide a complete *minimal* and verifiable example here that shows the issue you are seeing, as well as the versions of all packages you are using, that could be very helpful in digging further into this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/264", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/264/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/264/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/264", "id": 476148114, "node_id": "MDU6SXNzdWU0NzYxNDgxMTQ=", "number": 264, "title": "Getting a \"Missing claim: identity\" message when using RS256 with jti present", "user": {"login": "durchgedreht", "id": 4490840, "node_id": "MDQ6VXNlcjQ0OTA4NDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4490840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durchgedreht", "html_url": "https://github.com/durchgedreht", "followers_url": "https://api.github.com/users/durchgedreht/followers", "following_url": "https://api.github.com/users/durchgedreht/following{/other_user}", "gists_url": "https://api.github.com/users/durchgedreht/gists{/gist_id}", "starred_url": "https://api.github.com/users/durchgedreht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durchgedreht/subscriptions", "organizations_url": "https://api.github.com/users/durchgedreht/orgs", "repos_url": "https://api.github.com/users/durchgedreht/repos", "events_url": "https://api.github.com/users/durchgedreht/events{/privacy}", "received_events_url": "https://api.github.com/users/durchgedreht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-02T12:09:47Z", "updated_at": "2020-06-26T13:49:42Z", "closed_at": "2019-08-03T14:48:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI was following the tutorial for creating and consuming JWT tokens using jwt_extended:\r\nhttps://codeburst.io/jwt-authorization-in-flask-c63c1acf4eeb\r\nhttps://github.com/oleg-agapov/flask-jwt-auth\r\n(Kudos for these docs - they worked perfectly and gave a quick intro!)\r\n\r\nI now modified the code to adapt our use-case: We want to use SSO from Laravelle Framework to Flask. So tokens are generated from Laravelle and used by jwt_extended only using HTTP header with bearer token. HS256 works, but we need to use RS256 (given requirement). The changes work so far, but I always get a \"Missing claim: identity\" message.\r\n\r\nThe token has jti set and also in https://jwt.io/#debugger-io?... I can verify it's there. Also decoding works as I just fixed the audience claim and now have the JTI issue. My decrypted JWT payload in dev looks like follows \r\n `{\r\n  \"aud\": \"1\",\r\n  \"jti\": \"c08997d33657aaeffb77968f724db7aa878c025006b69e56cf4ec04df49562870992a76cb33d42e6\",\r\n  \"iat\": 1564745708,\r\n  \"nbf\": 1564745708,\r\n  \"exp\": 1596368108,\r\n  \"sub\": \"1\",\r\n  \"scopes\": [],\r\n  \"user\": {\r\n    \"id\": 1,\r\n    \"account_id\": 1,\r\n    \"creator_id\": null,\r\n    \"login\": \"admin@email.com\",\r\n    \"status\": \"created\",\r\n    \"archived_at\": null,\r\n    \"created_at\": \"2019-07-24 09:52:55\",\r\n    \"updated_at\": \"2019-08-02 11:19:35\"\r\n  }\r\n}` \r\n\r\nAny hint would be appreciated. Although not optimal a workaround like declaring the claim optional would do it for now. THX.\r\n\r\nEnvironment Infos:\r\nOsX 10.14\r\nvenv Python 3.6.5\r\nPackage            Version\r\n------------------ -------\r\naniso8601          7.0.0  \r\nasn1crypto         0.24.0 \r\ncffi               1.12.3 \r\nClick              7.0    \r\ncryptography       2.7    \r\nFlask              1.1.1  \r\nFlask-JWT-Extended 3.20.0 \r\nFlask-RESTful      0.3.7  \r\nFlask-SQLAlchemy   2.4.0  \r\nitsdangerous       1.1.0  \r\nJinja2             2.10.1 \r\nMarkupSafe         1.1.1  \r\npasslib            1.7.1  \r\npip                19.2.1 \r\npyasn1             0.4.6  \r\npycparser          2.19   \r\nPyJWT              1.7.1  \r\npytz               2019.1 \r\nrsa                4.0    \r\nsetuptools         41.0.1 \r\nsix                1.12.0 \r\nSQLAlchemy         1.3.6  \r\nWerkzeug           0.15.5 \r\nwheel              0.33.4 \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/262", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/262/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/262/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/262/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/262", "id": 471830412, "node_id": "MDU6SXNzdWU0NzE4MzA0MTI=", "number": 262, "title": "Flask has a min version requirement", "user": {"login": "smarlowucf", "id": 8006658, "node_id": "MDQ6VXNlcjgwMDY2NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8006658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarlowucf", "html_url": "https://github.com/smarlowucf", "followers_url": "https://api.github.com/users/smarlowucf/followers", "following_url": "https://api.github.com/users/smarlowucf/following{/other_user}", "gists_url": "https://api.github.com/users/smarlowucf/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarlowucf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarlowucf/subscriptions", "organizations_url": "https://api.github.com/users/smarlowucf/orgs", "repos_url": "https://api.github.com/users/smarlowucf/repos", "events_url": "https://api.github.com/users/smarlowucf/events{/privacy}", "received_events_url": "https://api.github.com/users/smarlowucf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-23T17:30:31Z", "updated_at": "2019-07-23T17:49:32Z", "closed_at": "2019-07-23T17:49:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This package uses [get_json](https://github.com/pallets/flask/pull/2358) which is only available starting in flask>=1.0.\r\n\r\nIt would be helpful for the requirement to be updated to reflect this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/261", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/261/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/261/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/261", "id": 470429626, "node_id": "MDU6SXNzdWU0NzA0Mjk2MjY=", "number": 261, "title": "Move awy from flask-sphinx-themes", "user": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-19T16:43:38Z", "updated_at": "2019-08-03T15:06:44Z", "closed_at": "2019-08-03T15:06:44Z", "author_association": "OWNER", "active_lock_reason": null, "body": "We should switch to pallets-sphinx-themes per https://github.com/pallets/flask-sphinx-themes/commit/3d562d0f6869f4a1845f8c68cdbcd0139d1e0bbf", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/259", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/259/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/259/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/259", "id": 465977465, "node_id": "MDU6SXNzdWU0NjU5Nzc0NjU=", "number": 259, "title": "How to use the JWT of another application?", "user": {"login": "Jonyorker", "id": 23500563, "node_id": "MDQ6VXNlcjIzNTAwNTYz", "avatar_url": "https://avatars0.githubusercontent.com/u/23500563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jonyorker", "html_url": "https://github.com/Jonyorker", "followers_url": "https://api.github.com/users/Jonyorker/followers", "following_url": "https://api.github.com/users/Jonyorker/following{/other_user}", "gists_url": "https://api.github.com/users/Jonyorker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jonyorker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jonyorker/subscriptions", "organizations_url": "https://api.github.com/users/Jonyorker/orgs", "repos_url": "https://api.github.com/users/Jonyorker/repos", "events_url": "https://api.github.com/users/Jonyorker/events{/privacy}", "received_events_url": "https://api.github.com/users/Jonyorker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-09T20:47:08Z", "updated_at": "2019-08-03T15:21:48Z", "closed_at": "2019-08-03T15:21:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am building a API for a project that uses thingsboard.io.\r\n\r\nTheir JWT has an ISS value, and from what I understand, the ISS values must match in order to decode.\r\n\r\nIs it possible to set the ISS in the flask app to match that of our front end?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/255", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/255/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/255/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/255", "id": 462779002, "node_id": "MDU6SXNzdWU0NjI3NzkwMDI=", "number": 255, "title": "Ordering of JWT_TOKEN_LOCATION", "user": {"login": "stephendwolff", "id": 25349, "node_id": "MDQ6VXNlcjI1MzQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/25349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephendwolff", "html_url": "https://github.com/stephendwolff", "followers_url": "https://api.github.com/users/stephendwolff/followers", "following_url": "https://api.github.com/users/stephendwolff/following{/other_user}", "gists_url": "https://api.github.com/users/stephendwolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephendwolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephendwolff/subscriptions", "organizations_url": "https://api.github.com/users/stephendwolff/orgs", "repos_url": "https://api.github.com/users/stephendwolff/repos", "events_url": "https://api.github.com/users/stephendwolff/events{/privacy}", "received_events_url": "https://api.github.com/users/stephendwolff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-01T15:29:36Z", "updated_at": "2019-07-03T15:28:27Z", "closed_at": "2019-07-03T15:28:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The JWT_TOKEN_LOCATION is a flexible addition to getting JWTs to work in various scenarios, however i'm working with an iOS developer where we have an API connection (via the header tag), and we are also using cookies for an in-app browser connection.\r\n\r\nCookies are checked first - in _decode_jwt_from_request ([https://github.com/vimalloc/flask-jwt-extended/blob/854bc2ed5dfa8a6e5ec6e7de25a2c1a5a18bff44/flask_jwt_extended/view_decorators.py#L247](url) - rather than respecting the order of the JWT_TOKEN_LOCATION list (or set).\r\n\r\nIf i work on a PR, is there anything i should be aware of? Is this a crazy idea?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/253", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/253/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/253/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/253", "id": 459214206, "node_id": "MDU6SXNzdWU0NTkyMTQyMDY=", "number": 253, "title": "nginx + uwsgi + flask + flask-jwt-extended issue when posting larger bodies/files", "user": {"login": "Panaetius", "id": 664486, "node_id": "MDQ6VXNlcjY2NDQ4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/664486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Panaetius", "html_url": "https://github.com/Panaetius", "followers_url": "https://api.github.com/users/Panaetius/followers", "following_url": "https://api.github.com/users/Panaetius/following{/other_user}", "gists_url": "https://api.github.com/users/Panaetius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Panaetius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Panaetius/subscriptions", "organizations_url": "https://api.github.com/users/Panaetius/orgs", "repos_url": "https://api.github.com/users/Panaetius/repos", "events_url": "https://api.github.com/users/Panaetius/events{/privacy}", "received_events_url": "https://api.github.com/users/Panaetius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-21T14:03:04Z", "updated_at": "2019-07-09T01:27:37Z", "closed_at": "2019-07-09T01:27:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I ran into an issue when running a flaks app with flask-jwt-extended in nginx with wsgi.\r\n\r\nI'll try to be as verbose an exhaustive as possible so people might find this post in the future, as it cost me ~3 days to figure all the parts that lead to this issue.\r\n\r\nThis issue happens when sending a large POST request to an endpoint that requires JWT authorization but when the corresponding token is expired. \r\n\r\nThe ultimate symptom of this is that nginx will return the correct 401 status code, but without sending the `{\"msg\": \"The token expired\"}` body, which would, for instance, cause an XmlHTttpRequest in javascript to fail with a `Network Error` instead of actually getting a response with the 401 status code, making it impossible to automatically react to expired tokens in the client by logging out/refreshing the token etc.\r\n\r\nIn the nginx log this is shown by the (not very helpful) error message:\r\n```16#16: *35 readv() failed (104: Connection reset by peer) while reading upstream, client: 172.18.0.1, server: , request: \"POST /Audiofile.create HTTP/1.1\", upstream: \"uwsgi://unix:///tmp/uwsgi.sock:\", host: \"localhost:8081\", referrer: \"http://localhost:8080/\"```\r\n\r\nWhat's causing this/steps that happen to cause this:\r\n\r\n-  User send a POST request to a jwt protected endpoint in flask with a POST body (or file) larger than the uwsgi `buffer-size` (max of 64kb)\r\n- nginx receives the request and passes it on to uwsgi in chunks/buffered. The first chunk contains all the request headers and some initial data from the POST body, but not all. The connection is kept open to continue sending the rest of the data\r\n- uwsgi receives the first chunk and passes it to flask\r\n- flask passes this first chunk to the flask-jwt-extended handler that reads the headers and determines the token is invalid/missing/revoked/etc.\r\n- flask-jwt-extended return a Status of 401 with a body of `{\"msg\": \"token is invalid\"}` (Or corresponding message) to uwsgi, **without consuming the rest of the post body that nginx is still waiting to send**\r\n- uwsgi opens a connection to nginx with the response body\r\n- nginx receives the response, but as it still has a connection for the request open that hasn't finished, it concludes that uwsgi crashed or isn't reacting, leading to the `Connection reset by peer` error seen above. nginx only send the status code but doesn't read the response body from uwsgi\r\n- the client receives the empty response from nginx, which causes most clients (Postman, XmlHttpRequest) to fail.\r\n\r\n\r\nThere is an easy workaround that I found which is to force uwsgi to consume the whole POST body before passing a request to flask, this can be done by setting `post-buffering` as mentioned here: https://uwsgi-docs.readthedocs.io/en/latest/ThingsToKnow.html \r\nBut this might not work in all scenarios, as it may break things. From the uwsgi docs: \"enabling it breaks websockets, chunked input, upload progress, iceast streaming and so on.\"\r\n\r\nAnother way to fix this is to change the flask-jwt-extended handlers to consume the post body. This is as simple as calling `request.form` on a separate line (forcing flask to access the body) before returning the 401 response.\r\n\r\nA workaround using this would be:\r\n\r\n```\r\nfrom flask_jwt_extended import JWTManager\r\nfrom flask import request, Flask\r\nfrom flask_jwt_extended.default_callbacks import (\r\n    default_revoked_token_callback,\r\n    default_expired_token_callback,\r\n    default_invalid_token_callback,\r\n    default_unauthorized_callback\r\n)\r\n\r\napp = Flask(__name__)\r\njwt = JWTManager(app)\r\n\r\n# fix handling of large post bodies when running in flask/uwsgi by using custom handlers that consume\r\n# the post body. See: https://stackoverflow.com/questions/3970495/nginx-connection-reset-response-from-uwsgi-lost\r\n\r\n\r\n@jwt.expired_token_loader\r\ndef expired_token_callback(expired_token):\r\n    request.form\r\n    return default_expired_token_callback(expired_token)\r\n\r\n\r\n@jwt.invalid_token_loader\r\ndef invalid_token_callback(error_string):\r\n    request.form\r\n    return default_invalid_token_callback(error_string)\r\n\r\n\r\n@jwt.unauthorized_loader\r\ndef unauthorized_token_callback(error_string):\r\n    request.form\r\n    return default_unauthorized_callback(error_string)\r\n\r\n\r\n@jwt.revoked_token_loader\r\ndef revoked_token_callback():\r\n    request.form\r\n    return default_revoked_token_callback()\r\n\r\n```\r\n\r\nAnother solution I saw is passing `Expire: 100-continue` headers with the POST request, but this is not suppoerted in all clients and not recommended.\r\n\r\nThere might be a way for nginx to  successfully deal with the prematurely terminated connection, but I haven't found a solution that works, though there are several stackoverflow answer that suggest solutions. But as I said, none of them work.\r\n\r\nAnd easy way to reproduce this issue would be to use the https://github.com/tiangolo/uwsgi-nginx-flask-docker docker image and to host a flask app there with a jwt-protected POST endpoint and a file upload, and uploading a file larger than ~1mb.\r\n\r\nThis post is mostly as a post-mortem in case someone runs into the same issue, though it might be nice to add the fix mentioned above to flask-jwt-extended, just to prevent it from happening and saving users the hassle of solving it.\r\n\r\nThis might also be the cause of #174", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/252", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/252/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/252/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/252", "id": 457801990, "node_id": "MDU6SXNzdWU0NTc4MDE5OTA=", "number": 252, "title": "Will be added cuttent_user like in flask-login?", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-19T04:35:45Z", "updated_at": "2019-06-19T04:46:40Z", "closed_at": "2019-06-19T04:38:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/251", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/251/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/251/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/251", "id": 457768980, "node_id": "MDU6SXNzdWU0NTc3Njg5ODA=", "number": 251, "title": "flask_jwt_extended.exceptions.NoAuthorizationError: Missing Authorization Header", "user": {"login": "wisp888", "id": 3608165, "node_id": "MDQ6VXNlcjM2MDgxNjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3608165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wisp888", "html_url": "https://github.com/wisp888", "followers_url": "https://api.github.com/users/wisp888/followers", "following_url": "https://api.github.com/users/wisp888/following{/other_user}", "gists_url": "https://api.github.com/users/wisp888/gists{/gist_id}", "starred_url": "https://api.github.com/users/wisp888/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wisp888/subscriptions", "organizations_url": "https://api.github.com/users/wisp888/orgs", "repos_url": "https://api.github.com/users/wisp888/repos", "events_url": "https://api.github.com/users/wisp888/events{/privacy}", "received_events_url": "https://api.github.com/users/wisp888/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-19T01:54:24Z", "updated_at": "2019-06-19T03:31:44Z", "closed_at": "2019-06-19T03:31:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom flask import Flask\r\nfrom flask_jwt_extended import JWTManager, jwt_required\r\nfrom flask_restful import Api, Resource\r\n\r\napp = Flask(__name__)\r\napp.config['PROPAGATE_EXCEPTIONS'] = True\r\n\r\napi = Api(app)\r\njwt = JWTManager(app)\r\n\r\n\r\nclass SomeRoute(Resource):\r\n    @jwt_required\r\n    def post(self):\r\n        return {'message':'success'}, 200\r\n\r\n\r\napi.add_resource(SomeRoute, '/some_route', endpoint='some_route')\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=False)\r\n```\r\npost the url without token or token expired\r\nuse flask_restful  no problem!\r\n\r\nbut use flask_restplus it will raise exception\r\n\r\n```\r\nfrom flask import Flask\r\nfrom flask_jwt_extended import JWTManager, jwt_required\r\nfrom flask_restplus import Api, Resource\r\n\r\napp = Flask(__name__)\r\napp.config['PROPAGATE_EXCEPTIONS'] = True\r\n\r\napi = Api(app)\r\njwt = JWTManager(app)\r\n\r\n\r\nclass SomeRoute(Resource):\r\n    @jwt_required\r\n    def post(self):\r\n        return {'message':'success'}, 200\r\n\r\n\r\napi.add_resource(SomeRoute, '/some_route', endpoint='some_route')\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=False)\r\n```\r\nit will return\r\n```\r\n.......\r\n    raise NoAuthorizationError(errors[0])\r\nflask_jwt_extended.exceptions.NoAuthorizationError: Missing Authorization Header\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/250", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/250/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/250/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/250", "id": 456551207, "node_id": "MDU6SXNzdWU0NTY1NTEyMDc=", "number": 250, "title": "create_access_token() ", "user": {"login": "maei1337", "id": 38084991, "node_id": "MDQ6VXNlcjM4MDg0OTkx", "avatar_url": "https://avatars0.githubusercontent.com/u/38084991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maei1337", "html_url": "https://github.com/maei1337", "followers_url": "https://api.github.com/users/maei1337/followers", "following_url": "https://api.github.com/users/maei1337/following{/other_user}", "gists_url": "https://api.github.com/users/maei1337/gists{/gist_id}", "starred_url": "https://api.github.com/users/maei1337/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maei1337/subscriptions", "organizations_url": "https://api.github.com/users/maei1337/orgs", "repos_url": "https://api.github.com/users/maei1337/repos", "events_url": "https://api.github.com/users/maei1337/events{/privacy}", "received_events_url": "https://api.github.com/users/maei1337/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-15T16:02:52Z", "updated_at": "2019-07-09T01:25:21Z", "closed_at": "2019-07-09T01:25:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi all,\r\n\r\nits really confusing i changed nothing in the code, but create_access_token() doesnt work anymore. refresh token works fine.\r\n\r\nany suggestions? just changed from macos to windows 10...but the code is deployed in a docker container, so dont know what is happening. on my old mac lap the docker and the create_access_token works fine...\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/249", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/249/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/249/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/249", "id": 447950882, "node_id": "MDU6SXNzdWU0NDc5NTA4ODI=", "number": 249, "title": "config JWT_DECODE_LEEWAY cannot used", "user": {"login": "libaibuaidufu", "id": 32195121, "node_id": "MDQ6VXNlcjMyMTk1MTIx", "avatar_url": "https://avatars3.githubusercontent.com/u/32195121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libaibuaidufu", "html_url": "https://github.com/libaibuaidufu", "followers_url": "https://api.github.com/users/libaibuaidufu/followers", "following_url": "https://api.github.com/users/libaibuaidufu/following{/other_user}", "gists_url": "https://api.github.com/users/libaibuaidufu/gists{/gist_id}", "starred_url": "https://api.github.com/users/libaibuaidufu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libaibuaidufu/subscriptions", "organizations_url": "https://api.github.com/users/libaibuaidufu/orgs", "repos_url": "https://api.github.com/users/libaibuaidufu/repos", "events_url": "https://api.github.com/users/libaibuaidufu/events{/privacy}", "received_events_url": "https://api.github.com/users/libaibuaidufu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-24T02:27:33Z", "updated_at": "2019-05-24T02:45:03Z", "closed_at": "2019-05-24T02:45:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "config this :\r\n`app.config[\"JWT_DECODE_LEEWAY\"] = 20`\r\ncannot used ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/247", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/247/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/247/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/247", "id": 445747726, "node_id": "MDU6SXNzdWU0NDU3NDc3MjY=", "number": 247, "title": "missing CRFS Tokens", "user": {"login": "jasonkolodziej", "id": 42076058, "node_id": "MDQ6VXNlcjQyMDc2MDU4", "avatar_url": "https://avatars2.githubusercontent.com/u/42076058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonkolodziej", "html_url": "https://github.com/jasonkolodziej", "followers_url": "https://api.github.com/users/jasonkolodziej/followers", "following_url": "https://api.github.com/users/jasonkolodziej/following{/other_user}", "gists_url": "https://api.github.com/users/jasonkolodziej/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonkolodziej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonkolodziej/subscriptions", "organizations_url": "https://api.github.com/users/jasonkolodziej/orgs", "repos_url": "https://api.github.com/users/jasonkolodziej/repos", "events_url": "https://api.github.com/users/jasonkolodziej/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonkolodziej/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-18T19:40:48Z", "updated_at": "2019-12-17T01:22:35Z", "closed_at": "2019-05-19T16:26:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "from `examples/csrf_protection_with_cookies.py`\r\n...\r\n```\r\n@app.route('/token/refresh', methods=['POST'])\r\n@jwt_refresh_token_required\r\ndef refresh():\r\n    # Create the new access token\r\n    current_user = get_jwt_identity()\r\n    access_token = create_access_token(identity=current_user)\r\n\r\n    # Set the access JWT and CSRF double submit protection cookies\r\n    # in this response\r\n    resp = jsonify({'refresh': True})\r\n    set_access_cookies(resp, access_token)\r\n    return resp, 200\r\n```\r\nWhen using Postman, I try placing a POST request on \"localhost:5000/token/refresh\" and I receive an error saying\r\n\r\n>{\"msg\":\"Missing CSRF token in headers\"}\r\n\r\nI am fairly new to messing with JWT could someone please correct my actions and perhaps an explanation?\r\n\r\n\r\nI would greatly appreciate it (^:", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/246", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/246/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/246/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/246", "id": 443177972, "node_id": "MDU6SXNzdWU0NDMxNzc5NzI=", "number": 246, "title": "Malformed token raises an uncaught ValueError", "user": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-05-13T02:14:44Z", "updated_at": "2019-08-03T15:36:42Z", "closed_at": "2019-08-03T15:36:42Z", "author_association": "OWNER", "active_lock_reason": null, "body": "See https://stackoverflow.com/q/55917908/272689", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/245", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/245/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/245/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/245", "id": 443039352, "node_id": "MDU6SXNzdWU0NDMwMzkzNTI=", "number": 245, "title": "Valid way to raise exception in callbacks", "user": {"login": "michaeltoohig", "id": 34083701, "node_id": "MDQ6VXNlcjM0MDgzNzAx", "avatar_url": "https://avatars3.githubusercontent.com/u/34083701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaeltoohig", "html_url": "https://github.com/michaeltoohig", "followers_url": "https://api.github.com/users/michaeltoohig/followers", "following_url": "https://api.github.com/users/michaeltoohig/following{/other_user}", "gists_url": "https://api.github.com/users/michaeltoohig/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaeltoohig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaeltoohig/subscriptions", "organizations_url": "https://api.github.com/users/michaeltoohig/orgs", "repos_url": "https://api.github.com/users/michaeltoohig/repos", "events_url": "https://api.github.com/users/michaeltoohig/events{/privacy}", "received_events_url": "https://api.github.com/users/michaeltoohig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-11T21:50:13Z", "updated_at": "2019-05-19T16:27:15Z", "closed_at": "2019-05-19T16:27:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way I can raise an exception in invalid_token_loader and others? I use some exceptions to return messages via flask error handlers.\r\n\r\nI could just rewrite my exception response in the callback but I was hoping to avoid doing that.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/243", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/243/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/243/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/243", "id": 441895010, "node_id": "MDU6SXNzdWU0NDE4OTUwMTA=", "number": 243, "title": "Default cookie expiration way too long", "user": {"login": "allen-cook", "id": 205003, "node_id": "MDQ6VXNlcjIwNTAwMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/205003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allen-cook", "html_url": "https://github.com/allen-cook", "followers_url": "https://api.github.com/users/allen-cook/followers", "following_url": "https://api.github.com/users/allen-cook/following{/other_user}", "gists_url": "https://api.github.com/users/allen-cook/gists{/gist_id}", "starred_url": "https://api.github.com/users/allen-cook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allen-cook/subscriptions", "organizations_url": "https://api.github.com/users/allen-cook/orgs", "repos_url": "https://api.github.com/users/allen-cook/repos", "events_url": "https://api.github.com/users/allen-cook/events{/privacy}", "received_events_url": "https://api.github.com/users/allen-cook/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-08T19:31:34Z", "updated_at": "2019-05-10T21:56:29Z", "closed_at": "2019-05-10T21:56:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When you set \r\n`JWT_SESSION_COOKIE = False` to enable permanent cookies, the expiration date set by default is way too long and the browser will sometimes treat it as invalid and set the cookie as a session cookie anyway.\r\n\r\nExpiration dates on permanent cookies typically need to be before 2038 since it's specified in a UNIX epoch format.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/240", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/240/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/240/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/240", "id": 438069067, "node_id": "MDU6SXNzdWU0MzgwNjkwNjc=", "number": 240, "title": "Use gunicorn multiple workers and use different secret_key value will have different result", "user": {"login": "uddmorningsun", "id": 19144683, "node_id": "MDQ6VXNlcjE5MTQ0Njgz", "avatar_url": "https://avatars1.githubusercontent.com/u/19144683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uddmorningsun", "html_url": "https://github.com/uddmorningsun", "followers_url": "https://api.github.com/users/uddmorningsun/followers", "following_url": "https://api.github.com/users/uddmorningsun/following{/other_user}", "gists_url": "https://api.github.com/users/uddmorningsun/gists{/gist_id}", "starred_url": "https://api.github.com/users/uddmorningsun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uddmorningsun/subscriptions", "organizations_url": "https://api.github.com/users/uddmorningsun/orgs", "repos_url": "https://api.github.com/users/uddmorningsun/repos", "events_url": "https://api.github.com/users/uddmorningsun/events{/privacy}", "received_events_url": "https://api.github.com/users/uddmorningsun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-28T15:33:11Z", "updated_at": "2019-05-05T15:24:18Z", "closed_at": "2019-05-01T17:56:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks your great efforts for flask using JWT easily! I meet issues about `gunicorn` and `flask_jwt_extended`:\r\n\r\n```\r\n(python35) [yancy@asus tmp]$ cat /etc/redhat-release \r\nCentOS Linux release 7.4.1708 (Core) \r\n\r\n(python35) [yancy@asus tmp]$ pip freeze |grep -i jwt\r\nFlask-JWT-Extended==3.18.0\r\nPyJWT==1.4.2\r\n(python35) [yancy@asus tmp]$ pip freeze |grep -i gunicorn\r\ngunicorn==19.9.0\r\n(python35) [yancy@asus tmp]$ flask  --version\r\nFlask 1.0.2\r\nPython 3.5.6 |Anaconda, Inc.| (default, Aug 26 2018, 21:41:56) \r\n[GCC 7.3.0]\r\n```\r\n```\r\n(python35) [yancy@asus tmp]$ cat nuist.py \r\n# coding: utf-8\r\n\r\nimport datetime, os\r\nfrom flask import Flask, request, jsonify\r\nfrom flask_jwt_extended import JWTManager, jwt_required, create_access_token, get_jwt_identity\r\n\r\napp = Flask(__name__)\r\n\r\n####################\r\n# app.secret_key = os.urandom(40)\r\napp.secret_key = 'fixed_value'\r\n####################\r\n\r\napp.config.update({'JWT_ACCESS_TOKEN_EXPIRES': datetime.timedelta(days=1)})\r\njwt = JWTManager(app)\r\n\r\n@app.route('/login', methods=['POST'])\r\ndef login():\r\n    username = request.json.get('username', None)\r\n    password = request.json.get('password', None)\r\n    if not (username and password):\r\n        return jsonify({\"msg\": \"Missing parameter\"}), 422\r\n    access_token = create_access_token(identity=username)\r\n    return jsonify(access_token=access_token), 200\r\n\r\n@app.route('/protected', methods=['GET'])\r\n@jwt_required\r\ndef protected():\r\n    current_user = get_jwt_identity()\r\n    return jsonify(logged_in_as=current_user), 200\r\n```\r\n* Set `secret_key=os.urandom(40)` :\r\n1. Start flask app `gunicorn --worker-class sync --workers 1 --timeout 120 nuist:app --bind :5000 --reload --log-level debug`, everything is ok(That's say, everytime request is ok using got token)\r\n2. Start flask app `gunicorn --worker-class sync --workers 2 --timeout 120 nuist:app --bind :5000 --reload --log-level debug`, parts of request will fail (That's say, try multiple times using got token).\r\n\r\nAbout second case, if gunicorn workers `>` 1(I have tested 2-5), above issues will be reported. If a flask app errorhandle `DecodeError('Signature verification failed')` error when user want to login in, this will always lead to user login unsuccessfully. \r\n\r\n```\r\n(python35) [yancy@asus tmp]$ http --body GET 127.0.0.1:5000/protected \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTY1NTA0NTYsImlhdCI6MTU1NjQ2NDA1NiwianRpIjoiODM4ZjBiMGQtMjRjNy00MTVmLWI4OGUtNGZiNTEzZWUyMWY0IiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoidGVzdCIsIm5iZiI6MTU1NjQ2NDA1NiwiZnJlc2giOmZhbHNlfQ.builYWDJnDAwe1BkV9lYrphvKSQp19oCYSoHlpjO0_w\"\r\n{\r\n    \"msg\": \"Signature verification failed\"\r\n}\r\n```\r\n\r\n* Set `secret_key='hardcode_value'`:\r\n1. `gunicorn --worker-class sync --workers 1 --timeout 120 nuist:app --bind :5000 --reload --log-level debug`, everything is ok(everytime request is also ok).\r\n\r\n2. `gunicorn --worker-class sync --workers 2 --timeout 120 nuist:app --bind :5000 --reload --log-level debug`, everything is ok(everytime request is also ok)\r\n\r\nSince `secret_key` should be changed in production env. So, have any good ideas, thanks again great efforts !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/239", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/239/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/239/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/239", "id": 429458962, "node_id": "MDU6SXNzdWU0Mjk0NTg5NjI=", "number": 239, "title": "Request: Best practices to secure your application using flask-jwt-extended", "user": {"login": "kwagdy", "id": 15840617, "node_id": "MDQ6VXNlcjE1ODQwNjE3", "avatar_url": "https://avatars2.githubusercontent.com/u/15840617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwagdy", "html_url": "https://github.com/kwagdy", "followers_url": "https://api.github.com/users/kwagdy/followers", "following_url": "https://api.github.com/users/kwagdy/following{/other_user}", "gists_url": "https://api.github.com/users/kwagdy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwagdy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwagdy/subscriptions", "organizations_url": "https://api.github.com/users/kwagdy/orgs", "repos_url": "https://api.github.com/users/kwagdy/repos", "events_url": "https://api.github.com/users/kwagdy/events{/privacy}", "received_events_url": "https://api.github.com/users/kwagdy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-04T20:03:22Z", "updated_at": "2019-10-10T04:14:21Z", "closed_at": "2019-10-10T04:14:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is not an issue but rather a request. Can we work on a guide, step-by-step example, further documentation for a prod scenario (or a few!) on securing the application using flask-jwt-extended? On the top of my mind this could include a quick step by step guide of basic prod-grade setup with a few explanation of different kinds of attacks and how they can be mitigated using the different functions, decorators, configurations.\r\n\r\nThe reason behind this is that one can find lots of resources on JWT, access token & refresh token, yet they are quite scattered and information doesn't seem to be consolidated in a clear way specially for new to JWT folks who wants the best of both worlds, user experience & security.\r\n\r\nI have already went through a few articles (_see below_), but I still find the entire topic daunting to some extent with major worries about different _\"what if\"_ scenarios.\r\n\r\n**Some of the articles I went through about the topic:**\r\n_(in no particular order)_ \r\n[JWT (JSON Web Token) automatic prolongation of expiration](https://stackoverflow.com/questions/26739167/jwt-json-web-token-automatic-prolongation-of-expiration?rq=1)\r\n[How is a refresh token more secure than a long lived JWT?](https://stackoverflow.com/questions/48508257/how-is-a-refresh-token-more-secure-than-a-long-lived-jwt)\r\n[what's the point of refresh token?](https://stackoverflow.com/questions/10703532/whats-the-point-of-refresh-token?noredirect=1&lq=1)\r\n[Why Does OAuth v2 Have Both Access and Refresh Tokens?](https://stackoverflow.com/questions/3487991/why-does-oauth-v2-have-both-access-and-refresh-tokens)\r\n[How to securely keep my users signed in with refresh tokens?](https://stackoverflow.com/questions/32903312/how-to-securely-keep-my-users-signed-in-with-refresh-tokens?noredirect=1&lq=1)\r\n[Is a Refresh Token really necessary when using JWT token authentication?](https://stackoverflow.com/questions/32060478/is-a-refresh-token-really-necessary-when-using-jwt-token-authentication)\r\n[Your API-Centric Web App Is Probably Not Safe Against XSS and CSRF](http://www.redotheweb.com/2015/11/09/api-security.html)\r\n[Refresh token should provide a new refresh token as well?](https://github.com/vimalloc/flask-jwt-extended/issues/9)\r\n[What Happens If Your JWT Is Stolen?](https://developer.okta.com/blog/2018/06/20/what-happens-if-your-jwt-is-stolen)\r\n[How secure are expiring tokens and refresh tokens?](https://security.stackexchange.com/questions/87119/how-secure-are-expiring-tokens-and-refresh-tokens)\r\n[How does a refresh token help? [duplicate]](https://security.stackexchange.com/questions/113273/how-does-a-refresh-token-help)\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/238", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/238/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/238/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/238", "id": 427177831, "node_id": "MDU6SXNzdWU0MjcxNzc4MzE=", "number": 238, "title": "Exception error related to PyJWT version", "user": {"login": "abathur", "id": 2548365, "node_id": "MDQ6VXNlcjI1NDgzNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2548365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abathur", "html_url": "https://github.com/abathur", "followers_url": "https://api.github.com/users/abathur/followers", "following_url": "https://api.github.com/users/abathur/following{/other_user}", "gists_url": "https://api.github.com/users/abathur/gists{/gist_id}", "starred_url": "https://api.github.com/users/abathur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abathur/subscriptions", "organizations_url": "https://api.github.com/users/abathur/orgs", "repos_url": "https://api.github.com/users/abathur/repos", "events_url": "https://api.github.com/users/abathur/events{/privacy}", "received_events_url": "https://api.github.com/users/abathur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-29T21:05:17Z", "updated_at": "2019-04-10T04:38:16Z", "closed_at": "2019-04-10T04:38:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not sure if this needs action, but I wanted to report it since it took us a few minutes to figure out and the note might spare someone else. We have a test/preview environment  and recently pushed an update there that moved to a newer version of Flask-JWT-Extended (I'm not certain what this system was running before), and also added an error handler for `InvalidSignatureError`. We started seeing the following error:\r\n```\r\n@api.errorhandler(jwt_exception.InvalidSignatureError)\r\nAttributeError: module 'jwt.exceptions' has no attribute 'InvalidSignatureError'\r\n```\r\n\r\nThe ultimate issue was a difference between the installed versions of PyJWT; it's running fine in my dev environment with `PyJWT==1.6.4`, and the trouble environment had `PyJWT==1.5.3`. \r\n\r\nI wondered when I bumped into this if any of the other hard-to-reproduce issues that have been reported might also come down to PyJWT version differences.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/237", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/237/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/237/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/237", "id": 424591656, "node_id": "MDU6SXNzdWU0MjQ1OTE2NTY=", "number": 237, "title": "Setting custom claims with parameters", "user": {"login": "kwagdy", "id": 15840617, "node_id": "MDQ6VXNlcjE1ODQwNjE3", "avatar_url": "https://avatars2.githubusercontent.com/u/15840617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwagdy", "html_url": "https://github.com/kwagdy", "followers_url": "https://api.github.com/users/kwagdy/followers", "following_url": "https://api.github.com/users/kwagdy/following{/other_user}", "gists_url": "https://api.github.com/users/kwagdy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwagdy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwagdy/subscriptions", "organizations_url": "https://api.github.com/users/kwagdy/orgs", "repos_url": "https://api.github.com/users/kwagdy/repos", "events_url": "https://api.github.com/users/kwagdy/events{/privacy}", "received_events_url": "https://api.github.com/users/kwagdy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-24T09:16:24Z", "updated_at": "2019-03-26T20:58:34Z", "closed_at": "2019-03-26T20:58:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the example from docs [Custom Decorators](https://flask-jwt-extended.readthedocs.io/en/latest/custom_decorators.html) to set custom claims: \r\n```\r\n@jwt.user_claims_loader\r\ndef add_claims_to_access_token(identity):\r\n    if identity == 'admin':\r\n        return {'roles': 'admin'}\r\n    else:\r\n        return {'roles': 'pesant'}\r\n@app.route('/login', methods=['POST'])\r\ndef login():\r\n    username = request.json.get('username', None)\r\n    access_token = create_access_token(username)\r\n    return jsonify(access_token=access_token)\r\n```\r\n\r\nIn the function definition it is mentioned that\r\n> user_claims_loader(callback)[source] This decorator sets the callback function for adding custom claims to an access token when create_access_token() is called\r\n\r\nIf I understand correctly, every time _create_access_token_ is called the user_claims_loader call back function will be called to set the required custom claims. What if we need to pass a few claims other than the user identity? If only 'identity' can be passed to _add_claims_to_access_token_ then those parameters are assumed to be already part of the _identity_ object? \r\n\r\nAlso in the above example `create_access_token(username)` sends **username**, yet in the `add_claims_to_access_token` a test was done for an identity state being **admin** or not!? Am I missing something or was this a typo?\r\n\r\nThe question here is where it is possible to add custom claims by passing those claims to the _user_claims_loader_ callback function, rather than passing the user (_or as stated above username_) token. If the properties are already part of the user, why add them to the custom claims as well? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/236", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/236/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/236/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/236", "id": 424459316, "node_id": "MDU6SXNzdWU0MjQ0NTkzMTY=", "number": 236, "title": "How to redirect to login when getting \"Signature verification failed\"?", "user": {"login": "kwagdy", "id": 15840617, "node_id": "MDQ6VXNlcjE1ODQwNjE3", "avatar_url": "https://avatars2.githubusercontent.com/u/15840617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwagdy", "html_url": "https://github.com/kwagdy", "followers_url": "https://api.github.com/users/kwagdy/followers", "following_url": "https://api.github.com/users/kwagdy/following{/other_user}", "gists_url": "https://api.github.com/users/kwagdy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwagdy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwagdy/subscriptions", "organizations_url": "https://api.github.com/users/kwagdy/orgs", "repos_url": "https://api.github.com/users/kwagdy/repos", "events_url": "https://api.github.com/users/kwagdy/events{/privacy}", "received_events_url": "https://api.github.com/users/kwagdy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-23T03:45:35Z", "updated_at": "2019-03-26T20:54:37Z", "closed_at": "2019-03-26T20:54:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "When testing tampering with access token, the page shows the error \"msg\": \"Signature verification failed\"\r\nWe'd like to redirect the user to login page instead, we tried using the below decorators as described in the [Changing Default Behaviors docs](https://flask-jwt-extended.readthedocs.io/en/latest/changing_default_behavior.html):\r\n@jwt.**invalid_token_loader** _...raises: \"TypeError: invalid_token_callback() takes 0 positional arguments but 1 was given\"_\r\n@jwt.**expired_token_loader**\r\n@jwt.**handle_expired_error**\r\n@jwt.**claims_verification_failed_loader**\r\n\r\nBut non worked\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/235", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/235/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/235/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/235", "id": 422487057, "node_id": "MDU6SXNzdWU0MjI0ODcwNTc=", "number": 235, "title": "flask_jwt_extended.exceptions.JWTDecodeError: Missing claim: fresh", "user": {"login": "sraghavan-eqix", "id": 47008714, "node_id": "MDQ6VXNlcjQ3MDA4NzE0", "avatar_url": "https://avatars2.githubusercontent.com/u/47008714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sraghavan-eqix", "html_url": "https://github.com/sraghavan-eqix", "followers_url": "https://api.github.com/users/sraghavan-eqix/followers", "following_url": "https://api.github.com/users/sraghavan-eqix/following{/other_user}", "gists_url": "https://api.github.com/users/sraghavan-eqix/gists{/gist_id}", "starred_url": "https://api.github.com/users/sraghavan-eqix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sraghavan-eqix/subscriptions", "organizations_url": "https://api.github.com/users/sraghavan-eqix/orgs", "repos_url": "https://api.github.com/users/sraghavan-eqix/repos", "events_url": "https://api.github.com/users/sraghavan-eqix/events{/privacy}", "received_events_url": "https://api.github.com/users/sraghavan-eqix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-19T00:07:48Z", "updated_at": "2019-05-19T16:28:20Z", "closed_at": "2019-05-19T16:28:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "File \"/home/demo/.local/lib/python3.5/site-packages/Flask_JWT_Extended-3.7.2-py3.5.egg/flask_jwt_extended/tokens.py\", line 126, in decode_jwt\r\n    raise JWTDecodeError(\"Missing claim: fresh\")\r\nflask_jwt_extended.exceptions.JWTDecodeError: Missing claim: fresh\r\n\r\nGetting the above error while hitting an API in flask\r\n\r\nThis is my requirements.txt for running setup.py in Python\r\naniso8601==4.0.1\r\nClick==7.0\r\nFlask==1.0.2\r\nflask-restplus==0.12.1\r\nFlask-SQLAlchemy==2.1\r\ngunicorn==19.9.0\r\nitsdangerous==1.1.0\r\nJinja2==2.10\r\njsonschema==2.6.0\r\nMarkupSafe==1.1.0\r\npsycopg2==2.7.6.1\r\npytz==2018.7\r\nsix==1.11.0\r\nSQLAlchemy==1.2.14\r\nWerkzeug==0.14.1\r\nPyYAML==3.13\r\nrequests==2.21.0\r\nrequests-oauthlib==1.2.0\r\nrsa==4.0\r\nkubernetes==8.0.1\r\ngrpcio>=1.19.0\r\ngrpcio-tools==1.19.0\r\nprotobuf==3.7.0\r\nsupermutes==0.2.5\r\nboto3==1.0.0\r\nbotocore==1.0.0\r\ngoogle-auth==1.6.3\r\npyhelm==0.0.9\r\nhelm-charts==1.0.15\r\ncertifi>=2017.4.17\r\nlogger==1.4\r\nFlask-JWT-Extended==3.7.2\r\njwt==0.6.1\r\nPyJWT==1.6.1\r\nFlask-JWT==0.2.0\r\n\r\nGet the same error even if below are removed from requirements.txt\r\njwt==0.6.1\r\nPyJWT==1.6.1\r\nFlask-JWT==0.2.0\r\n\r\nMethod or API:\r\n @jwt_required\r\n    @app.errorhandler(400)\r\n    def post(self):", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/234", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/234/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/234/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/234", "id": 420658131, "node_id": "MDU6SXNzdWU0MjA2NTgxMzE=", "number": 234, "title": "AttributeError: 'AppContext' object has no attribute 'expired_jwt'", "user": {"login": "philippeboyd", "id": 3239656, "node_id": "MDQ6VXNlcjMyMzk2NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3239656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philippeboyd", "html_url": "https://github.com/philippeboyd", "followers_url": "https://api.github.com/users/philippeboyd/followers", "following_url": "https://api.github.com/users/philippeboyd/following{/other_user}", "gists_url": "https://api.github.com/users/philippeboyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/philippeboyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philippeboyd/subscriptions", "organizations_url": "https://api.github.com/users/philippeboyd/orgs", "repos_url": "https://api.github.com/users/philippeboyd/repos", "events_url": "https://api.github.com/users/philippeboyd/events{/privacy}", "received_events_url": "https://api.github.com/users/philippeboyd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-03-13T18:37:08Z", "updated_at": "2019-04-10T04:45:08Z", "closed_at": "2019-04-10T04:45:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "After updating from 3.15 to 3.16 or greater, an expired token will throw the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/user/path/to/venv/lib/python3.7/site-packages/flask/app.py\", line 2309, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/Users/user/path/to/venv/lib/python3.7/site-packages/flask/app.py\", line 2295, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/Users/user/path/to/venv/lib/python3.7/site-packages/flask_cors/extension.py\", line 161, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/Users/user/path/to/venv/lib/python3.7/site-packages/flask/app.py\", line 1741, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/Users/user/path/to/venv/lib/python3.7/site-packages/flask/_compat.py\", line 35, in reraise\r\n    raise value\r\n  File \"/Users/user/path/to/venv/lib/python3.7/site-packages/flask/app.py\", line 2292, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/Users/user/path/to/venv/lib/python3.7/site-packages/flask/app.py\", line 1815, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/Users/user/path/to/venv/lib/python3.7/site-packages/flask_cors/extension.py\", line 161, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/Users/user/path/to/venv/lib/python3.7/site-packages/flask/app.py\", line 1719, in handle_user_exception\r\n    return handler(e)\r\n  File \"/Users/user/path/to/venv/lib/python3.7/site-packages/flask_jwt_extended/jwt_manager.py\", line 99, in handle_expired_error\r\n    token = ctx_stack.top.expired_jwt\r\nAttributeError: 'AppContext' object has no attribute 'expired_jwt'\r\n```\r\n\r\n```python\r\n        @app.errorhandler(ExpiredSignatureError)\r\n        def handle_expired_error(e):\r\n            try:\r\n                token = ctx_stack.top.expired_jwt #<--- explodes here\r\n                return self._expired_token_callback(token)\r\n            except TypeError:\r\n                msg = (\r\n                    \"jwt.expired_token_loader callback now takes the expired token \"\r\n                    \"as an additional paramter. Example: expired_callback(token)\"\r\n                )\r\n                warn(msg, DeprecationWarning)\r\n                return self._expired_token_callback()\r\n\r\n```\r\n\r\nI do not have a custom `expired_token_loader` so I'm using the default one (`default_expired_token_callback`)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/231", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/231/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/231/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/231", "id": 414358355, "node_id": "MDU6SXNzdWU0MTQzNTgzNTU=", "number": 231, "title": "get_jwt_identity() returning None", "user": {"login": "jcald1", "id": 5595867, "node_id": "MDQ6VXNlcjU1OTU4Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5595867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcald1", "html_url": "https://github.com/jcald1", "followers_url": "https://api.github.com/users/jcald1/followers", "following_url": "https://api.github.com/users/jcald1/following{/other_user}", "gists_url": "https://api.github.com/users/jcald1/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcald1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcald1/subscriptions", "organizations_url": "https://api.github.com/users/jcald1/orgs", "repos_url": "https://api.github.com/users/jcald1/repos", "events_url": "https://api.github.com/users/jcald1/events{/privacy}", "received_events_url": "https://api.github.com/users/jcald1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-02-25T23:33:17Z", "updated_at": "2019-05-28T05:19:52Z", "closed_at": "2019-05-19T16:27:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using Flask-JWT-Extended to protect my Flask API.  After the Login, in the protected route (add-user), I call get_jwt_identity(), but it's returning None, so I'm not able to get the identity.\r\n\r\n    @flask_app.route('/<api_version>/login', methods=['POST'])\r\n    def login(api_version):\r\n        print(f'login', request.form)\r\n        response = None\r\n        try:\r\n            username = request.form['username']\r\n            password = request.form['password']\r\n    \r\n            if not username:\r\n                return jsonify({\"msg\": \"Missing username parameter\"}), 400\r\n            if not password:\r\n                return jsonify({\"msg\": \"Missing password parameter\"}), 400\r\n    \r\n            user = User.get_with_password(username, password)\r\n    \r\n            if (not user):\r\n                e1 = Unauthorized(\r\n                    'Invalid username or password.  Please try again.')\r\n                e1.status = 401\r\n                raise e1\r\n    \r\n            \"\"\" flask_login.login_user(user, remember=True) \"\"\"\r\n            access_token = create_access_token(identity=username)\r\n            response = json.dumps({\"token\": access_token}, cls=CustomJSONEncoder)\r\n        except Exception as e:\r\n            errMsg = f'Error Logging in user {username if username else \"\"}: {e}'\r\n            status = e.status if hasattr(e, 'status') else 500\r\n            print(f'{errMsg}')\r\n            traceback.print_exc()\r\n            return Response(\r\n                json.dumps({\"message\": errMsg, \"status\": status, \"stack\": traceback.format_exc() }), status=status, mimetype='application/json')\r\n            \r\n    \r\n        resp = Response(response, status=200, mimetype='application/json')\r\n        return resp\r\n\r\n    @flask_app.route('/<api_version>/add-user', methods=['POST'])\r\n    @jwt_required\r\n    def add_user(api_version):\r\n        print(f'add-user', request)\r\n        response = None\r\n        username = None\r\n        password = None\r\n        allow_admin = None\r\n        try:\r\n            data = request.get_json()\r\n            print(f'add-user data', data)\r\n    \r\n            if 'username' in data:\r\n                username = data['username']\r\n            else:\r\n                return jsonify({\"msg\": \"Missing username parameter\"}), 400\r\n            if 'password' in data:\r\n                password = data['password']\r\n            else:\r\n                return jsonify({\"msg\": \"Missing password parameter\"}), 400\r\n            if 'allow_admin' in data:\r\n                allow_admin = data['allow_admin']\r\n    \r\n            \"\"\" user = User.get_with_password(username, password)\"\"\"\r\n            user = get_jwt_identity()\r\n            print('user',user)\r\n    \r\n            if (not user):\r\n                e1 = Unauthorized(\r\n                    'Invalid username or password.  Please try again.')\r\n                e1.status = 401\r\n                raise e1\r\n    \r\n            response = json.dumps({\"user\": user}, cls=CustomJSONEncoder)\r\n        except Exception as e:\r\n            errMsg = f'Error Adding User {username}: {e}'\r\n            status = e.status if hasattr(e, 'status') else 500\r\n            print(f'{errMsg}')\r\n            traceback.print_exc()\r\n            return Response(\r\n                json.dumps({\"message\": errMsg, \"status\": status, \"stack\": traceback.format_exc() }), status=status, mimetype='application/json')\r\n            \r\n    \r\n        resp = Response(response, status=200, mimetype='application/json')\r\n        return resp\r\n\r\nUser.py\r\n```\r\nclass User():\r\n    @classmethod\r\n    def get_with_password(cls, username, password):\r\n        print(f'User get_with_password {username} with password')\r\n        user_db = account.get_account(username)\r\n        print(f'User returned from DB: {user_db}')\r\n\r\n        user = User()\r\n        if not user_db or not len(user_db) or (not 'password' in user_db):\r\n            return None\r\n        user.username = username\r\n        user.id = username\r\n\r\n        if bcrypt.check_password_hash(user_db['password'], password):\r\n\r\n            user.role = user_db['role']\r\n            #user.is_authenticated = True\r\n            print(\r\n                f'loginUser returning {vars(user)} ')\r\n            return user\r\n        return None\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/230", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/230/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/230/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/230", "id": 413548406, "node_id": "MDU6SXNzdWU0MTM1NDg0MDY=", "number": 230, "title": "JWT token and concurrent sessions", "user": {"login": "ctippur", "id": 2225047, "node_id": "MDQ6VXNlcjIyMjUwNDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2225047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctippur", "html_url": "https://github.com/ctippur", "followers_url": "https://api.github.com/users/ctippur/followers", "following_url": "https://api.github.com/users/ctippur/following{/other_user}", "gists_url": "https://api.github.com/users/ctippur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctippur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctippur/subscriptions", "organizations_url": "https://api.github.com/users/ctippur/orgs", "repos_url": "https://api.github.com/users/ctippur/repos", "events_url": "https://api.github.com/users/ctippur/events{/privacy}", "received_events_url": "https://api.github.com/users/ctippur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-02-22T19:36:36Z", "updated_at": "2019-07-26T19:38:54Z", "closed_at": "2019-05-19T16:28:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am seeing some weirdness around JWT token usage.\r\nIf the same user credentials are used to generate tokens from different locations, one of the user gets a 500 internal server error.\r\n\r\nI see the below entries in the logs. Wondering if this is a known behavior? Is there anyway to mitigate it?\r\n\r\nFile \"/var/task/flask_jwt_extended/config.py\", line 58, in jwt_in_cookies\r\nreturn 'cookies' in self.token_location\r\nFile \"/var/task/flask_jwt_extended/config.py\", line 44, in token_location\r\nlocations = current_app.config['JWT_TOKEN_LOCATION']\r\nKeyError: 'JWT_TOKEN_LOCATION'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/227", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/227/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/227/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/227", "id": 405820598, "node_id": "MDU6SXNzdWU0MDU4MjA1OTg=", "number": 227, "title": "CHANGELOG?", "user": {"login": "decaz", "id": 31096, "node_id": "MDQ6VXNlcjMxMDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/31096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decaz", "html_url": "https://github.com/decaz", "followers_url": "https://api.github.com/users/decaz/followers", "following_url": "https://api.github.com/users/decaz/following{/other_user}", "gists_url": "https://api.github.com/users/decaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/decaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decaz/subscriptions", "organizations_url": "https://api.github.com/users/decaz/orgs", "repos_url": "https://api.github.com/users/decaz/repos", "events_url": "https://api.github.com/users/decaz/events{/privacy}", "received_events_url": "https://api.github.com/users/decaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-01T18:28:37Z", "updated_at": "2019-02-03T17:01:24Z", "closed_at": "2019-02-03T17:01:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be very nice to see what had been changed since the last version to be aware of possible breaking changes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/225", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/225/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/225/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/225", "id": 403554085, "node_id": "MDU6SXNzdWU0MDM1NTQwODU=", "number": 225, "title": "Add possibility to use an int value in the JWT_ACCESS_TOKEN_EXPIRES and JWT_REFRESH_TOKEN_EXPIRES configs", "user": {"login": "evangilo", "id": 3819494, "node_id": "MDQ6VXNlcjM4MTk0OTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3819494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evangilo", "html_url": "https://github.com/evangilo", "followers_url": "https://api.github.com/users/evangilo/followers", "following_url": "https://api.github.com/users/evangilo/following{/other_user}", "gists_url": "https://api.github.com/users/evangilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/evangilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evangilo/subscriptions", "organizations_url": "https://api.github.com/users/evangilo/orgs", "repos_url": "https://api.github.com/users/evangilo/repos", "events_url": "https://api.github.com/users/evangilo/events{/privacy}", "received_events_url": "https://api.github.com/users/evangilo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-27T14:00:40Z", "updated_at": "2019-02-02T00:41:16Z", "closed_at": "2019-02-01T15:57:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/224", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/224/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/224/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/224", "id": 401516229, "node_id": "MDU6SXNzdWU0MDE1MTYyMjk=", "number": 224, "title": "Multiple values JWT_ACCESS_COOKIE_PATH", "user": {"login": "msmicker", "id": 15576857, "node_id": "MDQ6VXNlcjE1NTc2ODU3", "avatar_url": "https://avatars3.githubusercontent.com/u/15576857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msmicker", "html_url": "https://github.com/msmicker", "followers_url": "https://api.github.com/users/msmicker/followers", "following_url": "https://api.github.com/users/msmicker/following{/other_user}", "gists_url": "https://api.github.com/users/msmicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/msmicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msmicker/subscriptions", "organizations_url": "https://api.github.com/users/msmicker/orgs", "repos_url": "https://api.github.com/users/msmicker/repos", "events_url": "https://api.github.com/users/msmicker/events{/privacy}", "received_events_url": "https://api.github.com/users/msmicker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-21T21:29:03Z", "updated_at": "2019-02-03T17:53:58Z", "closed_at": "2019-02-03T17:53:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am looking into updating a project from Flask-JWT and want to use cookies in flask jwt extended. I serve my API by reverse proxy through nginx under /api/. For my flask routes they are following a v1, v2 etc - e.g. as served from my python app they are /v1 /v2, but from nginx they are /api/v1 /api/v2. How might I handle multiple paths with this config? e.g. I'd like /v1, /v2\r\n\r\nJWT_ACCESS_COOKIE_PATH\r\n\r\nI tried passing an array but I get strange behavior.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/220", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/220/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/220/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/220", "id": 398674209, "node_id": "MDU6SXNzdWUzOTg2NzQyMDk=", "number": 220, "title": "Decode token that has expired", "user": {"login": "danny305", "id": 31376682, "node_id": "MDQ6VXNlcjMxMzc2Njgy", "avatar_url": "https://avatars2.githubusercontent.com/u/31376682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danny305", "html_url": "https://github.com/danny305", "followers_url": "https://api.github.com/users/danny305/followers", "following_url": "https://api.github.com/users/danny305/following{/other_user}", "gists_url": "https://api.github.com/users/danny305/gists{/gist_id}", "starred_url": "https://api.github.com/users/danny305/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danny305/subscriptions", "organizations_url": "https://api.github.com/users/danny305/orgs", "repos_url": "https://api.github.com/users/danny305/repos", "events_url": "https://api.github.com/users/danny305/events{/privacy}", "received_events_url": "https://api.github.com/users/danny305/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-13T16:30:26Z", "updated_at": "2019-01-28T17:21:31Z", "closed_at": "2019-01-20T18:48:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to be able to decode and grab the claims (and identity) from either an access token or refresh token that has expired so that information could be utilized. Something like jwt.decode(token, verify_exp=False) would be useful. \r\n\r\nWe discussed this: https://stackoverflow.com/questions/54106546/flask-jwt-extended-current-user-identity-none-when-creating-non-fresh-access-t \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/219", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/219/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/219/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/219", "id": 396246096, "node_id": "MDU6SXNzdWUzOTYyNDYwOTY=", "number": 219, "title": "Allow JWT_DECODE_AUDIENCE to be an array", "user": {"login": "styk-tv", "id": 838921, "node_id": "MDQ6VXNlcjgzODkyMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/838921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/styk-tv", "html_url": "https://github.com/styk-tv", "followers_url": "https://api.github.com/users/styk-tv/followers", "following_url": "https://api.github.com/users/styk-tv/following{/other_user}", "gists_url": "https://api.github.com/users/styk-tv/gists{/gist_id}", "starred_url": "https://api.github.com/users/styk-tv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/styk-tv/subscriptions", "organizations_url": "https://api.github.com/users/styk-tv/orgs", "repos_url": "https://api.github.com/users/styk-tv/repos", "events_url": "https://api.github.com/users/styk-tv/events{/privacy}", "received_events_url": "https://api.github.com/users/styk-tv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-06T10:26:50Z", "updated_at": "2019-01-14T11:41:42Z", "closed_at": "2019-01-13T18:44:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi. I have spent much time with your library and I use it a lot including for verification of outside OIDC issued tokens. I would like to propose JWT_DECODE_AUDIENCE to be an array so token verify would allow verification from multiple audiences.\r\n\r\nScenarios. Identity Clients accessing API:\r\n\r\n- CLI tool could be one consumer (direct grant)\r\n- Web client could be second consumer (implicit flow)\r\n- Web developer running on localhost could be third consumer (client has different redirects)\r\n\r\nAll issued by same provider, all valid. Only difference is each client has a different AUDience. It seems an  a common practice to allow multiple audiences to be allowed to be verified in api. https://github.com/auth0/node-jsonwebtoken/issues/4\r\n\r\nSo if I could do JWT_DECODE_AUDIENCE = ['ai.mysoft.web','ai.mysoft.cli','ai.mysoft.localhost'] that would be great. Does that make sense?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/217", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/217/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/217/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/217", "id": 394965319, "node_id": "MDU6SXNzdWUzOTQ5NjUzMTk=", "number": 217, "title": "\"Expected a string value\" while implementing redis_blacklist.py", "user": {"login": "sham-hq", "id": 6418169, "node_id": "MDQ6VXNlcjY0MTgxNjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6418169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sham-hq", "html_url": "https://github.com/sham-hq", "followers_url": "https://api.github.com/users/sham-hq/followers", "following_url": "https://api.github.com/users/sham-hq/following{/other_user}", "gists_url": "https://api.github.com/users/sham-hq/gists{/gist_id}", "starred_url": "https://api.github.com/users/sham-hq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sham-hq/subscriptions", "organizations_url": "https://api.github.com/users/sham-hq/orgs", "repos_url": "https://api.github.com/users/sham-hq/repos", "events_url": "https://api.github.com/users/sham-hq/events{/privacy}", "received_events_url": "https://api.github.com/users/sham-hq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-31T11:14:23Z", "updated_at": "2019-01-01T07:43:55Z", "closed_at": "2019-01-01T06:34:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I am trying to implement redis_blacklist.py and added all the code there. But getting below error. I am not able to figure out what is going wrong here. My application environment is:\r\nFlask: 1.0.2\r\nFlask-JWT-Extended: 3.14.0\r\nPython: 3.6\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask\\app.py\", line 2309, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask\\app.py\", line 2295, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask\\app.py\", line 1741, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\r\n    raise value\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask\\app.py\", line 2292, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask\\app.py\", line 1815, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask\\app.py\", line 1718, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\r\n    raise value\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask\\app.py\", line 1813, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask\\app.py\", line 1799, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"D:\\python_scripts\\qr_code_generate_app\\qr_generate_controller.py\", line 86, in authLogin\r\n    access_token = create_access_token(identity=username)\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask_jwt_extended\\utils.py\", line 134, in create_access_token\r\n    return jwt_manager._create_access_token(identity, fresh, expires_delta)\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask_jwt_extended\\jwt_manager.py\", line 459, in _create_access_token\r\n    json_encoder=config.json_encoder\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask_jwt_extended\\tokens.py\", line 77, in encode_access_token\r\n    json_encoder=json_encoder)\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\flask_jwt_extended\\tokens.py\", line 31, in _encode_jwt\r\n    json_encoder=json_encoder).decode('utf-8')\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\jwt\\api_jwt.py\", line 65, in encode\r\n    json_payload, key, algorithm, headers, json_encoder\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\jwt\\api_jws.py\", line 113, in encode\r\n    key = alg_obj.prepare_key(key)\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\jwt\\algorithms.py\", line 140, in prepare_key\r\n    key = force_bytes(key)\r\n  File \"D:\\python_scripts\\scrap_cric\\venv\\lib\\site-packages\\jwt\\utils.py\", line 30, in force_bytes\r\n    raise TypeError('Expected a string value')\r\nTypeError: Expected a string value\r\n```\r\n\r\nPlease help. Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/214", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/214/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/214/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/214", "id": 393087773, "node_id": "MDU6SXNzdWUzOTMwODc3NzM=", "number": 214, "title": "relax datetime.timedelta check on JWT_*_TOKEN_EXPIRES envs?", "user": {"login": "abathur", "id": 2548365, "node_id": "MDQ6VXNlcjI1NDgzNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2548365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abathur", "html_url": "https://github.com/abathur", "followers_url": "https://api.github.com/users/abathur/followers", "following_url": "https://api.github.com/users/abathur/following{/other_user}", "gists_url": "https://api.github.com/users/abathur/gists{/gist_id}", "starred_url": "https://api.github.com/users/abathur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abathur/subscriptions", "organizations_url": "https://api.github.com/users/abathur/orgs", "repos_url": "https://api.github.com/users/abathur/repos", "events_url": "https://api.github.com/users/abathur/events{/privacy}", "received_events_url": "https://api.github.com/users/abathur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-20T15:13:04Z", "updated_at": "2019-03-02T04:57:22Z", "closed_at": "2019-03-02T04:57:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried using a [dateutil.relativedelta](https://dateutil.readthedocs.io/en/stable/relativedelta.html) object for the value of JWT_ACCESS_TOKEN_EXPIRES, but the identity checks in config.py prevent it. It's not urgent for us to actually use relativedelta here, but I wanted to go ahead and see if the check could be relaxed.\r\n\r\nFor reference, the current JWT_*_TOKEN_EXPIRES validity checks look like:\r\n\r\n    delta = current_app.config['JWT_ACCESS_TOKEN_EXPIRES']\r\n    if not isinstance(delta, datetime.timedelta) and delta is not False:\r\n        err = 'JWT_ACCESS_TOKEN_EXPIRES must be a datetime.timedelta or False'\r\n        raise RuntimeError(err)\r\n    return delta\r\n\r\nIt _seems_ like both of the checks could just try to add the value to a datetime object. Something along the lines of:\r\n\r\n    delta = current_app.config['JWT_ACCESS_TOKEN_EXPIRES']\r\n    if delta != False:\r\n        try:\r\n            delta + datetime.datetime.now()\r\n        except TypeError as e:\r\n            err = 'must be able to add JWT_ACCESS_TOKEN_EXPIRES to datetime.datetime'\r\n            raise RuntimeError(err) from e\r\n    return delta\r\n\r\nThis would produce tracebacks like:\r\n\r\n    Traceback (most recent call last):\r\n      File \"<console>\", line 2, in <module>\r\n    TypeError: unsupported operand type(s) for +: 'int' and 'datetime.datetime'\r\n\r\n    The above exception was the direct cause of the following exception:\r\n\r\n    Traceback (most recent call last):\r\n      File \"<console>\", line 5, in <module>\r\n    RuntimeError: must be able to add JWT_ACCESS_TOKEN_EXPIRES to datetime.datetime", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/210", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/210/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/210/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/210", "id": 386470110, "node_id": "MDU6SXNzdWUzODY0NzAxMTA=", "number": 210, "title": "Decode expired token", "user": {"login": "djk2", "id": 2472090, "node_id": "MDQ6VXNlcjI0NzIwOTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2472090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djk2", "html_url": "https://github.com/djk2", "followers_url": "https://api.github.com/users/djk2/followers", "following_url": "https://api.github.com/users/djk2/following{/other_user}", "gists_url": "https://api.github.com/users/djk2/gists{/gist_id}", "starred_url": "https://api.github.com/users/djk2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djk2/subscriptions", "organizations_url": "https://api.github.com/users/djk2/orgs", "repos_url": "https://api.github.com/users/djk2/repos", "events_url": "https://api.github.com/users/djk2/events{/privacy}", "received_events_url": "https://api.github.com/users/djk2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-01T15:53:56Z", "updated_at": "2018-12-02T17:01:53Z", "closed_at": "2018-12-02T17:01:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey everyone. \r\n\r\nI have a problem with a manage 'black list'. \r\nI using Redis as a key value store. \r\n\r\n1. After login, I add user token to list. \r\n`key_store.setex(access_jti, app.config['JWT_ACCESS_TOKEN_EXPIRES'], 'true')`\r\n\r\n2. After when the token was expired and user 'click' on `logout` button I call end point and I try remove token from key store like that:\r\n`\r\ntoken = decode_token(encoded_token)\r\nkey_store.delete(token)\r\n` \r\nbut I can't decod `encoded_token` because I get exception `jwt.exceptions.ExpiredSignatureError: Signature has expired`\r\n\r\nConclusion is: I will never remove this token from store because this token was expired. \r\n\r\nAnybody can help me?\r\nHow decode a expired token?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/209", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/209/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/209/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/209", "id": 386455704, "node_id": "MDU6SXNzdWUzODY0NTU3MDQ=", "number": 209, "title": "jwt_refresh_token_required incorrectly failing valid request in specific environment", "user": {"login": "wittlesouth", "id": 25817565, "node_id": "MDQ6VXNlcjI1ODE3NTY1", "avatar_url": "https://avatars1.githubusercontent.com/u/25817565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wittlesouth", "html_url": "https://github.com/wittlesouth", "followers_url": "https://api.github.com/users/wittlesouth/followers", "following_url": "https://api.github.com/users/wittlesouth/following{/other_user}", "gists_url": "https://api.github.com/users/wittlesouth/gists{/gist_id}", "starred_url": "https://api.github.com/users/wittlesouth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wittlesouth/subscriptions", "organizations_url": "https://api.github.com/users/wittlesouth/orgs", "repos_url": "https://api.github.com/users/wittlesouth/repos", "events_url": "https://api.github.com/users/wittlesouth/events{/privacy}", "received_events_url": "https://api.github.com/users/wittlesouth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-01T12:52:24Z", "updated_at": "2019-01-03T17:41:35Z", "closed_at": "2019-01-03T17:41:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure I like the title of the issue I created, because it already suggest this isn't really a but, but it is accurate.\r\n\r\nI have a Flask app that eposes a small set of REST APIs, and the project I'm building them in has a set of unit tests. The test process is to start an instance of the API server in a Kubernetes container, then run a set of tests that make requests to the APIs. In my local environment, the tests run from an OS X shell, and make http requests to the server running in a minikube container. In my Jenkins environment, the tests run from one container, and make http requests to the server in another container.\r\n\r\nThe issue is that the tests all pass in my local environment, but any test that runs against a flask-jwt-extended endpoint in my Jenkins environment fail due to missing access token errors from the flask-jwt-extended decorators. \r\n\r\nHere is the request handler method and decorator for the first test that fails with this symptom.\r\n\r\n```\r\n# The /login enpoint with the GET verb is intended to be used by client apps\r\n# to reload the user's application data when needed (e.g. after an application\r\n# refresh, or browser restart)\r\n@jwt_refresh_token_required\r\ndef search():\r\n    \"\"\"Handles GET verb for /login endpoint\"\"\"\r\n    return jsonify(hydrate(g.user)), 200\r\n```\r\n\r\nI have before_request and after_request logging enabled with the following code:\r\n\r\n```\r\n@FAPP.before_request\r\ndef before_request():\r\n    \"\"\"Method to do work before the request\"\"\"\r\n    # Ensure there is a database session available for the request\r\n    g.db_session = DBSESSION()\r\n\r\n    # Log request headers & body if FLASK_DEBUG > 1\r\n    if 'FLASK_DEBUG' in os.environ and int(os.environ['FLASK_DEBUG']) >= 2:\r\n        LOGGER.debug('Starting request for path %s', request.url)\r\n        LOGGER.debug('Request Headers: %s', request.headers)\r\n        LOGGER.debug('Request Body: %s', request.get_data())\r\n        LOGGER.debug('Request Cookies: ' + str(request.cookies))\r\n\r\n```\r\n\r\nand\r\n\r\n```\r\n@FAPP.after_request\r\ndef after_request(resp):\r\n    \"\"\"Method to do work after the request\"\"\"\r\n    # Log request headers & body if FLASK_DEBUG > 1\r\n    if 'FLASK_DEBUG' in os.environ and int(os.environ['FLASK_DEBUG']) >= 2:\r\n        LOGGER.debug('Response Headers: %s', resp.headers)\r\n        LOGGER.debug('Response Body: %s', resp.get_data())\r\n\r\n```\r\n\r\nHere is a snippet of the logs from the server in the Jenkins test that is failing\r\n\r\n\r\n```\r\n[2018-12-01 11:59:52,854] DEBUG in server: Starting request for path http://rftw-jenkins-test-server.wittlesouth:8280/api/v1/login\r\n[2018-12-01 11:59:52,854] DEBUG in server: Request Headers: Accept: */*\r\nX-Csrf-Token: 510f5491-8e2c-4c49-add9-b7bcf21de353\r\nCookie: refresh_token_cookie=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYmYiOjE1NDM2NjU1OTIsImV4cCI6MTU0NjI1NzU5MiwiaWRlbnRpdHkiOiI4ZjkyNGQ4OC0zNzUyLTQzYzYtODhiOC1mNjA0Yzc4MzAyZGMiLCJ0eXBlIjoicmVmcmVzaCIsImp0aSI6IjJjZjYxMTY1LTkxYzQtNDJmYS1iYTk1LWU0Njc0YjY1N2Y1MiIsImNzcmYiOiI1MTBmNTQ5MS04ZTJjLTRjNDktYWRkOS1iN2JjZjIxZGUzNTMiLCJpYXQiOjE1NDM2NjU1OTJ9.Zmaw-Zar1psqzVbGyKnttbQZW9zwbIuOytEkrKpNuYU; access_token_cookie=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYmYiOjE1NDM2NjU1OTIsImV4cCI6MTU0MzY2NzM5MiwidHlwZSI6ImFjY2VzcyIsImp0aSI6ImViMWFmNTA5LTRjOWUtNGQ1MS04Yzg1LWRlMzJmODNlOGU0NCIsImNzcmYiOiJmZjYyOTMyNC02OWI5LTQ0MGMtYTM5ZC1kMWQwNDdiMzFkNzMiLCJmcmVzaCI6ZmFsc2UsImlkZW50aXR5IjoiOGY5MjRkODgtMzc1Mi00M2M2LTg4YjgtZjYwNGM3ODMwMmRjIiwiaWF0IjoxNTQzNjY1NTkyfQ.p1_RVP0rhnzcRvhVxqjtMMa7wpCeM7Ymcvii5A3HN2w; csrf_refresh_token=510f5491-8e2c-4c49-add9-b7bcf21de353; csrf_access_token=ff629324-69b9-440c-a39d-d1d047b31d73\r\nHost: rftw-jenkins-test-server.wittlesouth:8280\r\nUser-Agent: python-requests/2.20.1\r\nConnection: keep-alive\r\nAccept-Encoding: gzip, deflate\r\n\r\n\r\n[2018-12-01 11:59:52,854] DEBUG in server: Request Body: b''\r\n[2018-12-01 11:59:52,854] DEBUG in server: Request Cookies: {'csrf_refresh_token': '510f5491-8e2c-4c49-add9-b7bcf21de353', 'refresh_token_cookie': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYmYiOjE1NDM2NjU1OTIsImV4cCI6MTU0NjI1NzU5MiwiaWRlbnRpdHkiOiI4ZjkyNGQ4OC0zNzUyLTQzYzYtODhiOC1mNjA0Yzc4MzAyZGMiLCJ0eXBlIjoicmVmcmVzaCIsImp0aSI6IjJjZjYxMTY1LTkxYzQtNDJmYS1iYTk1LWU0Njc0YjY1N2Y1MiIsImNzcmYiOiI1MTBmNTQ5MS04ZTJjLTRjNDktYWRkOS1iN2JjZjIxZGUzNTMiLCJpYXQiOjE1NDM2NjU1OTJ9.Zmaw-Zar1psqzVbGyKnttbQZW9zwbIuOytEkrKpNuYU', 'access_token_cookie': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYmYiOjE1NDM2NjU1OTIsImV4cCI6MTU0MzY2NzM5MiwidHlwZSI6ImFjY2VzcyIsImp0aSI6ImViMWFmNTA5LTRjOWUtNGQ1MS04Yzg1LWRlMzJmODNlOGU0NCIsImNzcmYiOiJmZjYyOTMyNC02OWI5LTQ0MGMtYTM5ZC1kMWQwNDdiMzFkNzMiLCJmcmVzaCI6ZmFsc2UsImlkZW50aXR5IjoiOGY5MjRkODgtMzc1Mi00M2M2LTg4YjgtZjYwNGM3ODMwMmRjIiwiaWF0IjoxNTQzNjY1NTkyfQ.p1_RVP0rhnzcRvhVxqjtMMa7wpCeM7Ymcvii5A3HN2w', 'csrf_access_token': 'ff629324-69b9-440c-a39d-d1d047b31d73'}\r\n[2018-12-01 11:59:52,855] DEBUG in server: Response Headers: Content-Type: application/problem+json\r\nContent-Length: 119\r\n\r\n\r\n[2018-12-01 11:59:52,855] DEBUG in server: Response Body: b'{\\n  \"detail\": \"No authorization token provided\",\\n  \"status\": 401,\\n  \"title\": \"Unauthorized\",\\n  \"type\": \"about:blank\"\\n}\\n'\r\n10.47.0.13 - - [01/Dec/2018 11:59:52] \"GET /api/v1/login HTTP/1.1\" 401 -\r\n```\r\n\r\nThe behavior above seems to indicate that for some reason Flask-JWT-Extended doesn't seem to be detecting the refresh_token_cookie.\r\n\r\nHere is the section of the server code where I set the flask JWT configuration.\r\n\r\n```\r\nFAPP.config['JWT_TOKEN_LOCATION'] = ['cookies']\r\nif 'RFTW' in os.environ and os.environ['RFTW'] == 'PROD':\r\n    FAPP.config['JWT_COOKIE_SECURE'] = True\r\nelse:\r\n    FAPP.config['JWT_COOKIE_SECURE'] = False\r\nFAPP.config['JWT_ACCESS_COOKIE_PATH'] = '/'\r\nFAPP.config['JWT_ACCESS_TOKEN_EXPIRES'] = datetime.timedelta(minutes=30)\r\nFAPP.config['JWT_REFRESH_COOKIE_PATH'] = os.environ['API_PATH']\r\nFAPP.config['JWT_REFRESH_TOKEN_EXPIRES'] = datetime.timedelta(days=30)\r\nFAPP.config['JWT_SESSION_COOKIE'] = False\r\nFAPP.config['JWT_COOKIE_CSRF_PROTECT'] = True\r\nFAPP.config['JWT_CSRF_METHODS'] = ['POST', 'PUT', 'PATCH', 'DELETE', 'GET']\r\n```\r\n\r\nThe container specs for the server container are not identical for the local environment vs. the Jenkins environment, but base image and python-related packages installed are the same. Here are the key parts of the local test server container spec for each.\r\n\r\nLocal test environment (where the server application works correctly):\r\n\r\n```\r\nFROM ubuntu:16.04\r\nLABEL maintainer=\"eric@wittlesouth.com\" project=\"ourlifestories.net\"\r\nRUN apt-get update -y\r\nRUN apt-get install -y python3-pip python3-dev build-essential mysql-client libmysqlclient-dev curl sudo\r\nADD requirements.txt /\r\nRUN pip3 install -r /requirements.txt\r\nCMD [\"bash\", \"-c\", \"${SERVER_COMMAND}\"]\r\n```\r\n\r\nJenkins test environment (where the above issue happens):\r\n\r\n```\r\nFROM ubuntu:16.04\r\nLABEL maintainer=\"eric@wittlesouth.com\" project=\"Roadmaps FTW\"\r\nRUN apt-get update -y\r\nRUN apt-get install -y python3-pip python3-dev build-essential mysql-client libmysqlclient-dev curl sudo\r\n# Below doesn't seem to work to get time correct on server\r\n# RUN sudo echo \"America/New_York\" > /etc/timezone\r\n# RUN sudo dpkg-reconfigure -f noninteractive tzdata\r\nADD requirements.txt /\r\nRUN pip3 install -r /requirements.txt\r\nRUN mkdir /app\r\nADD src /app/\r\nCMD [\"bash\", \"-c\", \"${SERVER_COMMAND}\"]\r\n```\r\n\r\nWhile it appears there is something in the way the Jenkins environment is set up is the problem, I have another project that uses Flask-JWT extended in the same manner, in the same environment, and that project passes all tests without showing any sign of this problem.\r\n\r\nI hate filing this, because the fact that the same source works in one location but not another in project one, and the same testing strategy works in both environments on another project points to a problem in the configuration of the Jenkins environment where I'm having this issue. However, after many days of trying to figure it out, I'm out of ideas. Based on everything I can tell, the sample above shows a valid request with tokens, and I believe the 401 error is coming from the @jwt_refresh_token_required decorator, and I'm looking for help as to what to look for next.\r\n\r\nPlease help with my future sanity and suggest what I could look for next to find the root cause?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/208", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/208/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/208/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/208", "id": 386219880, "node_id": "MDU6SXNzdWUzODYyMTk4ODA=", "number": 208, "title": "Validating Google OIDC ID tokens", "user": {"login": "acrossen", "id": 5323238, "node_id": "MDQ6VXNlcjUzMjMyMzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5323238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acrossen", "html_url": "https://github.com/acrossen", "followers_url": "https://api.github.com/users/acrossen/followers", "following_url": "https://api.github.com/users/acrossen/following{/other_user}", "gists_url": "https://api.github.com/users/acrossen/gists{/gist_id}", "starred_url": "https://api.github.com/users/acrossen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acrossen/subscriptions", "organizations_url": "https://api.github.com/users/acrossen/orgs", "repos_url": "https://api.github.com/users/acrossen/repos", "events_url": "https://api.github.com/users/acrossen/events{/privacy}", "received_events_url": "https://api.github.com/users/acrossen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-30T14:54:31Z", "updated_at": "2018-12-07T00:37:17Z", "closed_at": "2018-12-07T00:24:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm attempting to craft an auth system for my SPA that uses Google as the auth provider, and flask-jwt to validate tokens on the client. From the Flask back-end, I make the Google ID token (which is a JWT) available to my JS front-end, which gets used in the UI as well as being sent along in an Auth header to API calls protected with @jwt_required.\r\n\r\nI successfully integrated flask-jwt-simple to do this, but since the Extended module is more sophisticated I'd like to migrate to that for its callbacks, etc. In so doing, I'm running into a couple roadblocks. I know the extended module is more opinionated, but I wondered whether making a couple things (at least that I've discovered so far) configurable would make my use case viable:\r\n\r\n- Supporting audience verification like [flask-jwt-simple](https://github.com/vimalloc/flask-jwt-simple/blob/master/flask_jwt_simple/utils.py#L44). Google ID tokens have an audience and the simple module verifies them optionally via the JWT_DECODE_AUDIENCE config element. Not supporting audience at all causes PyJWT to fail validation when the token has an audience.\r\n- Making the [type claim](https://github.com/vimalloc/flask-jwt-extended/blob/master/flask_jwt_extended/tokens.py#L136) optional via a config element.\r\n\r\nI believe this would do the trick and make the validation process configurable to resemble that of its simple counterpart. \r\n\r\nThoughts? Thanks for a great module.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/207", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/207/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/207/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/207", "id": 384766913, "node_id": "MDU6SXNzdWUzODQ3NjY5MTM=", "number": 207, "title": "Deprecation warning", "user": {"login": "MandelaK", "id": 44587521, "node_id": "MDQ6VXNlcjQ0NTg3NTIx", "avatar_url": "https://avatars0.githubusercontent.com/u/44587521?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MandelaK", "html_url": "https://github.com/MandelaK", "followers_url": "https://api.github.com/users/MandelaK/followers", "following_url": "https://api.github.com/users/MandelaK/following{/other_user}", "gists_url": "https://api.github.com/users/MandelaK/gists{/gist_id}", "starred_url": "https://api.github.com/users/MandelaK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MandelaK/subscriptions", "organizations_url": "https://api.github.com/users/MandelaK/orgs", "repos_url": "https://api.github.com/users/MandelaK/repos", "events_url": "https://api.github.com/users/MandelaK/events{/privacy}", "received_events_url": "https://api.github.com/users/MandelaK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-27T12:13:53Z", "updated_at": "2018-11-29T05:59:06Z", "closed_at": "2018-11-29T05:59:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I get a deprecation error from pytest and I am not sure what it could mean. I am a beginner and was using your library to secure endpoints for an api I am designing ... could you please add more color to what the reason could be? If you need more information I am happy to provide. \r\n\r\nI ran 38 tests and got 92 deprecation warnings that look like/lib/python3.6/site-packages.\r\n\r\n`../../jwt/api_jws.py:119: DeprecationWarning: The verify parameter is deprecated. Please use options instead.`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/206", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/206/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/206/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/206", "id": 382626604, "node_id": "MDU6SXNzdWUzODI2MjY2MDQ=", "number": 206, "title": "Make it possible to override the current user", "user": {"login": "libre-man", "id": 12597247, "node_id": "MDQ6VXNlcjEyNTk3MjQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/12597247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libre-man", "html_url": "https://github.com/libre-man", "followers_url": "https://api.github.com/users/libre-man/followers", "following_url": "https://api.github.com/users/libre-man/following{/other_user}", "gists_url": "https://api.github.com/users/libre-man/gists{/gist_id}", "starred_url": "https://api.github.com/users/libre-man/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libre-man/subscriptions", "organizations_url": "https://api.github.com/users/libre-man/orgs", "repos_url": "https://api.github.com/users/libre-man/repos", "events_url": "https://api.github.com/users/libre-man/events{/privacy}", "received_events_url": "https://api.github.com/users/libre-man/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-20T11:46:32Z", "updated_at": "2019-01-20T19:32:04Z", "closed_at": "2019-01-20T19:32:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes it is useful to override the current user for an application. It seems this isn't possible, except for manually changing the `_app_ctx_stack`. It would be really nice if there was a special method to do this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/205", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/205/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/205/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/205", "id": 381887506, "node_id": "MDU6SXNzdWUzODE4ODc1MDY=", "number": 205, "title": "get_jwt_identity() doesn't return None after sending one request with a token and then another without a token using @jwt_optional decorator.", "user": {"login": "ddehueck", "id": 5186669, "node_id": "MDQ6VXNlcjUxODY2Njk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5186669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ddehueck", "html_url": "https://github.com/ddehueck", "followers_url": "https://api.github.com/users/ddehueck/followers", "following_url": "https://api.github.com/users/ddehueck/following{/other_user}", "gists_url": "https://api.github.com/users/ddehueck/gists{/gist_id}", "starred_url": "https://api.github.com/users/ddehueck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ddehueck/subscriptions", "organizations_url": "https://api.github.com/users/ddehueck/orgs", "repos_url": "https://api.github.com/users/ddehueck/repos", "events_url": "https://api.github.com/users/ddehueck/events{/privacy}", "received_events_url": "https://api.github.com/users/ddehueck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-11-17T18:22:27Z", "updated_at": "2018-11-17T19:59:10Z", "closed_at": "2018-11-17T19:44:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I send one request **without** a token in the Authorization header and get_jwt_identity() returns None like it's supposed to.\r\n\r\nThen I send another request. This time, **with** a token in the Authorization header and get_jwt_identity() returns the username/identity like it's supposed to.\r\n\r\nThe next time I send a request **without** a token get_jwt_identity() returns the username even though there was no token in the headers. How is this possible?\r\n\r\n_Appears to only happen with the jwt_optional decorator as the jwt_required decorator catches no token in header always._\r\n\r\n**How to replicate:**\r\n\r\n_Project Structure:_\r\n```\r\n\u251c\u2500\u2500 appdir\r\n\u2502   \u251c\u2500\u2500 __init__.py\r\n\u2502   \u2514\u2500\u2500 subapp\r\n\u2502       \u251c\u2500\u2500 __init__.py\r\n\u2502       \u2514\u2500\u2500 routes.py\r\n\u2514\u2500\u2500 manage.py\r\n```\r\n\r\n_File where get_jwt_identity() is called - **subapp.routes.py**:_\r\n\r\n```\r\nfrom appdir import api\r\nfrom flask import request\r\nfrom flask_restful import Resource\r\nfrom flask_jwt_extended import (\r\n    jwt_optional, create_access_token,\r\n    get_jwt_identity\r\n)\r\n\r\n\r\nclass UserLogin(Resource):\r\n\r\n    def post(self):\r\n        username = request.json.get('username', None)\r\n        password = request.json.get('password', None)\r\n        if not username:\r\n            return {\"msg\": \"Missing username parameter\"}, 400\r\n        if not password:\r\n            return {\"msg\": \"Missing password parameter\"}, 400\r\n\r\n        if username != 'test' or password != 'test':\r\n            return {\"msg\": \"Bad username or password\"}, 401\r\n\r\n        access_token = create_access_token(identity=username)\r\n        return {\"access_token\": access_token}, 200\r\n\r\n\r\nclass ViewData(Resource):\r\n\r\n    @jwt_optional\r\n    def get(self):\r\n        current_user = get_jwt_identity()\r\n        if current_user:\r\n            return {\"logged_in_as\": current_user}, 200\r\n        else:\r\n            return {\"logged_in_as\": 'anonymous user'}, 200\r\n\r\n\r\napi.add_resource(ViewData, '/')\r\napi.add_resource(UserLogin, '/login')\r\n```\r\n\r\n**subapp.__init__.py**:\r\n\r\n```\r\nfrom flask import Blueprint\r\n\r\nbp = Blueprint('subapp', __name__)\r\n\r\nfrom appdir.subapp import routes\r\n```\r\n\r\n**appdir.__init__.py**:\r\n\r\n```\r\nfrom flask import Flask, Blueprint\r\nfrom flask_restful import Api\r\nfrom flask_jwt_extended import JWTManager\r\n\r\napp = Flask(__name__)\r\n\r\napi_bp = Blueprint('api', __name__)\r\napi = Api(api_bp)\r\n\r\njwt = JWTManager()\r\n\r\n\r\ndef create_app():\r\n    app = Flask(__name__)\r\n    app.config['JWT_SECRET_KEY'] = 'super-secret'  # Change this!\r\n    jwt.init_app(app)\r\n\r\n    # Register blueprints from modules here!\r\n    app.register_blueprint(api_bp)\r\n\r\n    from appdir.subapp import bp as subapp_bp\r\n    app.register_blueprint(subapp_bp)\r\n\r\n    return app\r\n```\r\n\r\n**manage.py**:\r\n\r\n```\r\nfrom flask_script import Manager\r\nfrom appdir import create_app\r\n\r\napp = create_app()\r\nmanager = Manager(app)\r\n\r\n\r\n@manager.command\r\ndef run():\r\n    app.run()\r\n\r\n\r\n@manager.command\r\ndef test():\r\n    pass\r\n\r\n\r\nif __name__ == '__main__':\r\n    manager.run()\r\n```\r\n\r\n**Then**:\r\n\r\n1. Run `python manage.py run`\r\n2. Make a POST request to `/login` with username/password \"test\"\r\n3. Make GET request to `/` **without** an Authorization header. Should return `{\"logged_in_as\": anonymous_user}`\r\n4. Make GET request to `/`  **with** an Authorization header. Should return `{\"logged_in_as\": \"test\"}`\r\n5. Make GET request to `/` **without** an Authorization header. Should return `{\"logged_in_as\": \"test\"}` which shouldn't happen.\r\n\r\nWhat's going on here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/204", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/204/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/204/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/204", "id": 378157280, "node_id": "MDU6SXNzdWUzNzgxNTcyODA=", "number": 204, "title": "ImportError: cannot import name 'ExpiredSignatureError'", "user": {"login": "pingisheng", "id": 44428245, "node_id": "MDQ6VXNlcjQ0NDI4MjQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/44428245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pingisheng", "html_url": "https://github.com/pingisheng", "followers_url": "https://api.github.com/users/pingisheng/followers", "following_url": "https://api.github.com/users/pingisheng/following{/other_user}", "gists_url": "https://api.github.com/users/pingisheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/pingisheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pingisheng/subscriptions", "organizations_url": "https://api.github.com/users/pingisheng/orgs", "repos_url": "https://api.github.com/users/pingisheng/repos", "events_url": "https://api.github.com/users/pingisheng/events{/privacy}", "received_events_url": "https://api.github.com/users/pingisheng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2018-11-07T06:22:33Z", "updated_at": "2020-03-26T09:44:47Z", "closed_at": "2018-11-07T15:51:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I got a  traceback\r\n   from flask_jwt_extended import jwt_required\r\n  File \"D:\\Program Files\\Python\\Python36\\lib\\site-packages\\flask_jwt_extended\\__init__.py\", line 1, in <module>\r\n    from .jwt_manager import JWTManager\r\n  File \"D:\\Program Files\\Python\\Python36\\lib\\site-packages\\flask_jwt_extended\\jwt_manager.py\", line 3, in <module>\r\n    from jwt import ExpiredSignatureError, InvalidTokenError\r\nImportError: cannot import name 'ExpiredSignatureError'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/203", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/203/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/203/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/203", "id": 377337939, "node_id": "MDU6SXNzdWUzNzczMzc5Mzk=", "number": 203, "title": "examples_redis_blacklist.py", "user": {"login": "pingisheng", "id": 44428245, "node_id": "MDQ6VXNlcjQ0NDI4MjQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/44428245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pingisheng", "html_url": "https://github.com/pingisheng", "followers_url": "https://api.github.com/users/pingisheng/followers", "following_url": "https://api.github.com/users/pingisheng/following{/other_user}", "gists_url": "https://api.github.com/users/pingisheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/pingisheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pingisheng/subscriptions", "organizations_url": "https://api.github.com/users/pingisheng/orgs", "repos_url": "https://api.github.com/users/pingisheng/repos", "events_url": "https://api.github.com/users/pingisheng/events{/privacy}", "received_events_url": "https://api.github.com/users/pingisheng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-05T10:31:57Z", "updated_at": "2019-01-20T19:31:57Z", "closed_at": "2019-01-20T19:31:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "In https://github.com/vimalloc/flask-jwt-extended/blob/master/examples/redis_blacklist.py\r\nline 64 :     return entry == 'true'\r\n Here is a something wrong , because redis return result is not str", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/202", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/202/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/202/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/202", "id": 377049169, "node_id": "MDU6SXNzdWUzNzcwNDkxNjk=", "number": 202, "title": "Passing token in header at login", "user": {"login": "matteli", "id": 717134, "node_id": "MDQ6VXNlcjcxNzEzNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/717134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matteli", "html_url": "https://github.com/matteli", "followers_url": "https://api.github.com/users/matteli/followers", "following_url": "https://api.github.com/users/matteli/following{/other_user}", "gists_url": "https://api.github.com/users/matteli/gists{/gist_id}", "starred_url": "https://api.github.com/users/matteli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matteli/subscriptions", "organizations_url": "https://api.github.com/users/matteli/orgs", "repos_url": "https://api.github.com/users/matteli/repos", "events_url": "https://api.github.com/users/matteli/events{/privacy}", "received_events_url": "https://api.github.com/users/matteli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-03T12:12:22Z", "updated_at": "2019-01-03T17:42:00Z", "closed_at": "2019-01-03T17:42:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Several fronted framework take the token at login only if present in the headers.\r\n\r\nPerhaps, you can present this option in the basic usage doc with : \r\n\r\n```python\r\n@app.route('/login', methods=['POST'])\r\ndef login():\r\n    if not request.is_json:\r\n        return jsonify({\"msg\": \"Missing JSON in request\"}), 400\r\n    username = request.json.get('username', None)\r\n    password = request.json.get('password', None)\r\n    if not username:\r\n        return jsonify({\"msg\": \"Missing username parameter\"}), 400\r\n    if not password:\r\n        return jsonify({\"msg\": \"Missing password parameter\"}), 400\r\n    if username != 'test' or password != 'test':\r\n        return jsonify({\"msg\": \"Bad username or password\"}), 401\r\n    access_token = create_access_token(identity=username)\r\n    return jsonify(access_token=access_token),  200, {'Authorization': 'Bearer ' + access_token}\r\n```\r\n\r\nThanks for your work\r\n\r\nMatt", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/201", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/201/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/201/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/201", "id": 374579303, "node_id": "MDU6SXNzdWUzNzQ1NzkzMDM=", "number": 201, "title": "Lots of crashes since upgrading from 3.5.0 to 3.13.1", "user": {"login": "mark-anders", "id": 1393014, "node_id": "MDQ6VXNlcjEzOTMwMTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1393014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-anders", "html_url": "https://github.com/mark-anders", "followers_url": "https://api.github.com/users/mark-anders/followers", "following_url": "https://api.github.com/users/mark-anders/following{/other_user}", "gists_url": "https://api.github.com/users/mark-anders/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-anders/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-anders/subscriptions", "organizations_url": "https://api.github.com/users/mark-anders/orgs", "repos_url": "https://api.github.com/users/mark-anders/repos", "events_url": "https://api.github.com/users/mark-anders/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-anders/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-26T23:30:43Z", "updated_at": "2018-10-29T13:50:53Z", "closed_at": "2018-10-29T13:50:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think this might be the same thing as #86, but since I'm using different packages, I thought I'd report it anyway. \r\n\r\nI'm using Flask-RESTful for some of my API work and I'm getting 500 returned for things like `ExpiredSignatureError`. I just got this when using with a react admin app I've written:\r\n\r\n```\r\ncs_1        | Traceback (most recent call last):\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1813, in full_dispatch_request\r\ncs_1        |     rv = self.dispatch_request()\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1799, in dispatch_request\r\ncs_1        |     return self.view_functions[rule.endpoint](**req.view_args)\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/flask_restful/__init__.py\", line 480, in wrapper\r\ncs_1        |     resp = resource(*args, **kwargs)\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/flask/views.py\", line 88, in view\r\ncs_1        |     return self.dispatch_request(*args, **kwargs)\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/flask_restful/__init__.py\", line 595, in dispatch_request\r\ncs_1        |     resp = meth(*args, **kwargs)\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/flask_jwt_extended/view_decorators.py\", line 102, in wrapper\r\ncs_1        |     verify_jwt_in_request()\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/flask_jwt_extended/view_decorators.py\", line 31, in verify_jwt_in_request\r\ncs_1        |     jwt_data = _decode_jwt_from_request(request_type='access')\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/flask_jwt_extended/view_decorators.py\", line 265, in _decode_jwt_from_request\r\ncs_1        |     decoded_token = decode_function()\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/flask_jwt_extended/view_decorators.py\", line 194, in _decode_jwt_from_headers\r\ncs_1        |     return decode_token(encoded_token)\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/flask_jwt_extended/utils.py\", line 77, in decode_token\r\ncs_1        |     encoded_token, verify=False, algorithms=config.algorithm\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/jwt/api_jwt.py\", line 85, in decode\r\ncs_1        |     payload, _, _, _ = self._load(jwt)\r\ncs_1        |   File \"/usr/local/lib/python2.7/site-packages/jwt/api_jws.py\", line 184, in _load\r\ncs_1        |     raise DecodeError('Not enough segments')\r\ncs_1        | DecodeError: Not enough segments\r\n```\r\n\r\nAs a test, I downgraded back to 3.5.0, which I had been using for a while, and am not seeing the issues.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/200", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/200/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/200/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/200", "id": 370778630, "node_id": "MDU6SXNzdWUzNzA3Nzg2MzA=", "number": 200, "title": "JWT_CSRF_IN_COOKIES not honored in when @jwt_required used", "user": {"login": "jdsjr", "id": 16107620, "node_id": "MDQ6VXNlcjE2MTA3NjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/16107620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdsjr", "html_url": "https://github.com/jdsjr", "followers_url": "https://api.github.com/users/jdsjr/followers", "following_url": "https://api.github.com/users/jdsjr/following{/other_user}", "gists_url": "https://api.github.com/users/jdsjr/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdsjr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdsjr/subscriptions", "organizations_url": "https://api.github.com/users/jdsjr/orgs", "repos_url": "https://api.github.com/users/jdsjr/repos", "events_url": "https://api.github.com/users/jdsjr/events{/privacy}", "received_events_url": "https://api.github.com/users/jdsjr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-16T20:08:15Z", "updated_at": "2018-10-16T20:12:25Z", "closed_at": "2018-10-16T20:12:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have JWT_TOKEN_LOCATION set to 'cookies' and JWT_CSRF_IN_COOKIES set to True. I can see both being sent to my server (in the cookies) on a post to a @jwt_required method.  However, I end up getting a \"flask_jwt_extended.exceptions.CSRFError: Missing CSRF token in headers\" exception.  It appears that the decorator is still looking for the CSRF token in the header instead of in the cookie.  That doesn't seem right to me.  Can you take a look?  \r\n\r\nStack Trace:\r\n\r\nTraceback (most recent call last):\r\nFile \"/var/task/flask/app.py\", line 1813, in full_dispatch_request\r\nrv = self.dispatch_request()\r\nFile \"/var/task/flask/app.py\", line 1799, in dispatch_request\r\nreturn self.view_functions[rule.endpoint](**req.view_args)\r\nFile \"/var/task/flask_restplus/api.py\", line 325, in wrapper\r\nresp = resource(*args, **kwargs)\r\nFile \"/var/task/flask/views.py\", line 88, in view\r\nreturn self.dispatch_request(*args, **kwargs)\r\nFile \"/var/task/flask_restplus/resource.py\", line 44, in dispatch_request\r\nresp = meth(*args, **kwargs)\r\nFile \"/var/task/flask_jwt_extended/view_decorators.py\", line 102, in wrapper\r\nverify_jwt_in_request()\r\nFile \"/var/task/flask_jwt_extended/view_decorators.py\", line 31, in verify_jwt_in_request\r\njwt_data = _decode_jwt_from_request(request_type='access')\r\nFile \"/var/task/flask_jwt_extended/view_decorators.py\", line 265, in _decode_jwt_from_request\r\ndecoded_token = decode_function()\r\nFile \"/var/task/flask_jwt_extended/view_decorators.py\", line 251, in <lambda>\r\ndecode_functions.append(lambda: _decode_jwt_from_cookies(request_type))\r\nFile \"/var/task/flask_jwt_extended/view_decorators.py\", line 212, in _decode_jwt_from_cookies\r\nraise CSRFError(\"Missing CSRF token in headers\")\r\nflask_jwt_extended.exceptions.CSRFError: Missing CSRF token in headers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/199", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/199/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/199/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/199", "id": 367740383, "node_id": "MDU6SXNzdWUzNjc3NDAzODM=", "number": 199, "title": "Question: Can I make sanic-jwt-extend based on flask-jwt-extended code?", "user": {"login": "NovemberOscar", "id": 20695897, "node_id": "MDQ6VXNlcjIwNjk1ODk3", "avatar_url": "https://avatars0.githubusercontent.com/u/20695897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NovemberOscar", "html_url": "https://github.com/NovemberOscar", "followers_url": "https://api.github.com/users/NovemberOscar/followers", "following_url": "https://api.github.com/users/NovemberOscar/following{/other_user}", "gists_url": "https://api.github.com/users/NovemberOscar/gists{/gist_id}", "starred_url": "https://api.github.com/users/NovemberOscar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NovemberOscar/subscriptions", "organizations_url": "https://api.github.com/users/NovemberOscar/orgs", "repos_url": "https://api.github.com/users/NovemberOscar/repos", "events_url": "https://api.github.com/users/NovemberOscar/events{/privacy}", "received_events_url": "https://api.github.com/users/NovemberOscar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-08T11:09:13Z", "updated_at": "2018-10-09T01:13:47Z", "closed_at": "2018-10-09T01:13:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "most of Sanic's auth extensions are not are not as good as flask-jwt-extended. Can I clone your repository and modify it to Sanic extension?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/198", "repository_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended", "labels_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/198/comments", "events_url": "https://api.github.com/repos/vimalloc/flask-jwt-extended/issues/198/events", "html_url": "https://github.com/vimalloc/flask-jwt-extended/issues/198", "id": 366475849, "node_id": "MDU6SXNzdWUzNjY0NzU4NDk=", "number": 198, "title": "Unit testing a protected end point ", "user": {"login": "samjtozer", "id": 30438964, "node_id": "MDQ6VXNlcjMwNDM4OTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/30438964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samjtozer", "html_url": "https://github.com/samjtozer", "followers_url": "https://api.github.com/users/samjtozer/followers", "following_url": "https://api.github.com/users/samjtozer/following{/other_user}", "gists_url": "https://api.github.com/users/samjtozer/gists{/gist_id}", "starred_url": "https://api.github.com/users/samjtozer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samjtozer/subscriptions", "organizations_url": "https://api.github.com/users/samjtozer/orgs", "repos_url": "https://api.github.com/users/samjtozer/repos", "events_url": "https://api.github.com/users/samjtozer/events{/privacy}", "received_events_url": "https://api.github.com/users/samjtozer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-03T18:46:02Z", "updated_at": "2018-10-03T19:46:22Z", "closed_at": "2018-10-03T19:46:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}]}