{"total_count": 193, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/dfm/emcee/issues/353", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/353/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/353/events", "html_url": "https://github.com/dfm/emcee/issues/353", "id": 679864845, "node_id": "MDU6SXNzdWU2Nzk4NjQ4NDU=", "number": 353, "title": "long double tests fail on ppc64el", "user": {"login": "mwhudson", "id": 672022, "node_id": "MDQ6VXNlcjY3MjAyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/672022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwhudson", "html_url": "https://github.com/mwhudson", "followers_url": "https://api.github.com/users/mwhudson/followers", "following_url": "https://api.github.com/users/mwhudson/following{/other_user}", "gists_url": "https://api.github.com/users/mwhudson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwhudson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwhudson/subscriptions", "organizations_url": "https://api.github.com/users/mwhudson/orgs", "repos_url": "https://api.github.com/users/mwhudson/repos", "events_url": "https://api.github.com/users/mwhudson/events{/privacy}", "received_events_url": "https://api.github.com/users/mwhudson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-17T00:52:15Z", "updated_at": "2020-08-20T15:06:56Z", "closed_at": "2020-08-20T15:06:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "**General information:**\r\n\r\n- emcee version: 3.0.2\r\n- platform: ppc64el\r\n- installation method (pip/conda/source/other?): Ubuntu/Debian package\r\n\r\n**Problem description:**\r\n\r\nVersion 3.0.2 of emcee is not migrating to the release pocket of Ubuntu because tests are failing on ppc64el: https://autopkgtest.ubuntu.com/packages/e/emcee/groovy/ppc64el\r\n\r\n### Expected behavior\r\n\r\ntests pass\r\n\r\n### Actual behavior: \r\n\r\ntest_longdouble_actually_needed[TempHDFBackend] and test_longdouble_preserved[TempHDFBackend] fail:\r\n\r\n```\r\n_______________ test_longdouble_actually_needed[TempHDFBackend] ________________\r\n\r\ncls = <class 'emcee.backends.hdf.TempHDFBackend'>\r\n\r\n    @pytest.mark.parametrize(\"cls\", [emcee.backends.Backend,\r\n                                     emcee.backends.TempHDFBackend])\r\n    def test_longdouble_actually_needed(cls):\r\n    \r\n        mjd = np.longdouble(58000.)\r\n        sigma = 100*np.finfo(np.longdouble).eps*mjd\r\n    \r\n        def log_prob(x):\r\n            assert x.dtype == np.longdouble\r\n            return -0.5 * np.sum(((x-mjd)/sigma) ** 2)\r\n    \r\n        ndim, nwalkers = 1, 20\r\n        steps = 1000\r\n        p0 = sigma*np.random.randn(nwalkers, ndim).astype(np.longdouble) + mjd\r\n        assert not all(p0 == mjd)\r\n    \r\n        with cls(dtype=np.longdouble) as backend:\r\n            sampler = emcee.EnsembleSampler(nwalkers,\r\n                                            ndim,\r\n                                            log_prob,\r\n                                            backend=backend)\r\n            sampler.run_mcmc(p0, steps)\r\n    \r\n            samples = sampler.get_chain().reshape((-1,))\r\n>           assert samples.dtype == np.longdouble\r\nE           AssertionError: assert dtype('<f8') == <class 'numpy.float128'>\r\nE            +  where dtype('<f8') = array([ 5.80000000e+04, -4.60105223e-27,  5.80000000e+04, ...,\\n       -6.24580733e-26,  5.80000000e+04, -7.38930048e-27]).dtype\r\nE            +  and   <class 'numpy.float128'> = np.longdouble\r\n```\r\n\r\n(the other failure is similar)\r\n\r\n### What have you tried so far?\r\n\r\nGoogling and getting a headache :)\r\n\r\nI know that \"long double\" on PowerPC / POWER is a strange pair-of-64-bit-doubles type so I'm not surprised that it's on POWER that I see the problem. I also see from searching that hd5/h5py/numpy have a history of problems in this area (e.g. https://github.com/h5py/h5py/issues/817) so I'm not sure what the resolution should be. Skipping these tests on ppc64el for now (maybe in an Ubuntu specific patch) might make sense -- it's not like the failure of these new tests indicates any kind of regression.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/346", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/346/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/346/events", "html_url": "https://github.com/dfm/emcee/issues/346", "id": 644279542, "node_id": "MDU6SXNzdWU2NDQyNzk1NDI=", "number": 346, "title": "Redundant / Non Unique Samples?", "user": {"login": "douglasquincyadams", "id": 1057114, "node_id": "MDQ6VXNlcjEwNTcxMTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1057114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/douglasquincyadams", "html_url": "https://github.com/douglasquincyadams", "followers_url": "https://api.github.com/users/douglasquincyadams/followers", "following_url": "https://api.github.com/users/douglasquincyadams/following{/other_user}", "gists_url": "https://api.github.com/users/douglasquincyadams/gists{/gist_id}", "starred_url": "https://api.github.com/users/douglasquincyadams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/douglasquincyadams/subscriptions", "organizations_url": "https://api.github.com/users/douglasquincyadams/orgs", "repos_url": "https://api.github.com/users/douglasquincyadams/repos", "events_url": "https://api.github.com/users/douglasquincyadams/events{/privacy}", "received_events_url": "https://api.github.com/users/douglasquincyadams/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-24T03:00:29Z", "updated_at": "2020-06-24T20:38:29Z", "closed_at": "2020-06-24T15:31:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 3.0.2\r\n- platform: ubuntu 16.04\r\n(linux                         4.4.0-112-generic GNU/Linux)\r\n\r\n- installation method (pip/conda/source/other?): pip\r\n- numpy version: 1.19.0\r\n\r\n**Problem description:**\r\nIt is probably my own implementation mistake, but I seem to get redundant samples when running the basic example provided at:\r\nhttps://emcee.readthedocs.io/en/stable/tutorials/parallel/\r\n\r\n### Expected behavior:\r\n\r\nExpected to get 3200 unique samples running the example.\r\n\r\n### Actual behavior:\r\n\r\nGot 3200 samples, but only 1835 were unique. \r\n\r\n### What have you tried so far?:\r\n\r\nAt first I thought it was something to do with creating multiprocessing pool elements with the same seeds, so i removed all the parallelization and got the same problem. \r\nI Tried resetting the numpy seed.\r\nI Tried removing multiprocessing. \r\nI manually inspected the samples to makes sure they are not close but different (initially suspected a rounding error). \r\nIs it a rounding error I can't see with print?\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\n\r\n#Copy and paste the code from this example:\r\n# https://emcee.readthedocs.io/en/stable/tutorials/parallel/\r\n#-------------------------------------------------------------------------------\r\n\r\nimport numpy as np\r\nimport emcee\r\nimport time\r\n\r\ndef log_prob(theta):\r\n    np.random.seed()\r\n    t = time.time() + np.random.uniform(0.005, 0.008)*.01\r\n    while True:\r\n        if time.time() >= t:\r\n            break\r\n    return -0.5 * np.sum(theta ** 2)\r\n\r\nnp.random.seed(42)\r\ninitial = np.random.randn(32, 5)\r\nnwalkers, ndim = initial.shape\r\nnsteps = 100\r\nsampler = emcee.EnsembleSampler(nwalkers, ndim, log_prob)\r\nstart = time.time()\r\nsampler.run_mcmc(initial, nsteps, progress=True)\r\nend = time.time()\r\nserial_time = end - start\r\nprint(\"Serial took {0:.1f} seconds\".format(serial_time))\r\n\r\n#-------------------------------------------------------------------------------\r\n#ADD UNIQUENESS CHECKING CODE:\r\nimport collections\r\n\r\ndef numpyarray_to_tuplelist(numpyarray):\r\n    return list( tuple(i) for i in numpyarray.tolist() )\r\n\r\ndef create_repeat_dict(iterable):\r\n    IterableAsTupleList = numpyarray_to_tuplelist(iterable)\r\n    return [(k,v) for (k,v) in collections.Counter(IterableAsTupleList).items() if v > 1]\r\n\r\n#check that the walkers start in unique locations:\r\ninitialrepeats = create_repeat_dict(initial)\r\nprint ('len(initialrepeats)', len(initialrepeats))\r\n\r\n#check the chain for repeats:\r\nsamples = sampler.chain.reshape((-1, ndim))\r\nuniquesamples = list(set(numpyarray_to_tuplelist(samples) ))\r\nsamplesrepeats = create_repeat_dict(samples)\r\nprint ('len(samples)', len(samples))\r\nprint ('len(samplesrepeats)', len(samplesrepeats))\r\nprint ('len(uniquesamples)', len(uniquesamples))\r\n\r\n#double check our results by checking the flat chain:\r\nsamples_flat = sampler.get_chain(flat=True)\r\nuniquesamples_flat = list(set(numpyarray_to_tuplelist(samples_flat) ))\r\nsamplesrepeats_flat = create_repeat_dict(samples_flat)\r\nprint ('len(samples_flat)', len(samples_flat))\r\nprint ('len(uniquesamples_flat)', len(uniquesamples_flat))\r\nprint ('len(samplesrepeats_flat)', len(samplesrepeats_flat))\r\n\r\n#Print out the first repeat, from the original numpy array :\r\nfirstrepeat = samplesrepeats_flat[0]\r\nprint ('firstrepeat', firstrepeat)\r\nfor index, tuplesample in enumerate( numpyarray_to_tuplelist(samples_flat) ):\r\n    if tuplesample == firstrepeat[0]:\r\n        print ('samples_flat[',index,']:', samples_flat[index])\r\n        print ('tuplesample', tuplesample)\r\n\r\n\r\n\r\n\r\n```\r\n\r\n\r\nOutput:\r\n\r\n```\r\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100/100 [00:00<00:00, 135.12it/s]\r\nSerial took 0.7 seconds\r\nlen(initialrepeats) 0\r\nlen(samples) 3200\r\nlen(samplesrepeats) 780\r\nlen(uniquesamples) 1835\r\nlen(samples_flat) 3200\r\nlen(uniquesamples_flat) 1835\r\nlen(samplesrepeats_flat) 780\r\nfirstrepeat ((-0.03355553088079799, -0.17913867606454476, 0.428156489622846, 2.2395317760607423, 0.019385254591680612), 2)\r\nsamples_flat[ 0 ]: [-0.03355553 -0.17913868  0.42815649  2.23953178  0.01938525]\r\ntuplesample (-0.03355553088079799, -0.17913867606454476, 0.428156489622846, 2.2395317760607423, 0.019385254591680612)\r\nsamples_flat[ 32 ]: [-0.03355553 -0.17913868  0.42815649  2.23953178  0.01938525]\r\ntuplesample (-0.03355553088079799, -0.17913867606454476, 0.428156489622846, 2.2395317760607423, 0.019385254591680612)\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/344", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/344/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/344/events", "html_url": "https://github.com/dfm/emcee/issues/344", "id": 621185177, "node_id": "MDU6SXNzdWU2MjExODUxNzc=", "number": 344, "title": "Broken link for autocorr time", "user": {"login": "cfhammill", "id": 7467038, "node_id": "MDQ6VXNlcjc0NjcwMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7467038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cfhammill", "html_url": "https://github.com/cfhammill", "followers_url": "https://api.github.com/users/cfhammill/followers", "following_url": "https://api.github.com/users/cfhammill/following{/other_user}", "gists_url": "https://api.github.com/users/cfhammill/gists{/gist_id}", "starred_url": "https://api.github.com/users/cfhammill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cfhammill/subscriptions", "organizations_url": "https://api.github.com/users/cfhammill/orgs", "repos_url": "https://api.github.com/users/cfhammill/repos", "events_url": "https://api.github.com/users/cfhammill/events{/privacy}", "received_events_url": "https://api.github.com/users/cfhammill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-19T18:14:25Z", "updated_at": "2020-08-18T15:55:29Z", "closed_at": "2020-08-18T15:55:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The link at https://github.com/dfm/emcee/blob/e13edcb37174fa620bd7d4b8327dd36fe6385096/src/emcee/autocorr.py#L51\r\n\r\nappears to be broken.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/343", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/343/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/343/events", "html_url": "https://github.com/dfm/emcee/issues/343", "id": 617680085, "node_id": "MDU6SXNzdWU2MTc2ODAwODU=", "number": 343, "title": "MPIPool import error from emcee.utils", "user": {"login": "bikashd18", "id": 65308491, "node_id": "MDQ6VXNlcjY1MzA4NDkx", "avatar_url": "https://avatars3.githubusercontent.com/u/65308491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bikashd18", "html_url": "https://github.com/bikashd18", "followers_url": "https://api.github.com/users/bikashd18/followers", "following_url": "https://api.github.com/users/bikashd18/following{/other_user}", "gists_url": "https://api.github.com/users/bikashd18/gists{/gist_id}", "starred_url": "https://api.github.com/users/bikashd18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bikashd18/subscriptions", "organizations_url": "https://api.github.com/users/bikashd18/orgs", "repos_url": "https://api.github.com/users/bikashd18/repos", "events_url": "https://api.github.com/users/bikashd18/events{/privacy}", "received_events_url": "https://api.github.com/users/bikashd18/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-13T18:58:18Z", "updated_at": "2020-05-14T11:55:43Z", "closed_at": "2020-05-14T11:55:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to run the emcee package for the MCMC algorithm in parallel mode using MPIPool. The line \"from emcee.utils import MPIPool\" is working on the python 2 environment but not in the python 3 environment. In python 3 environment it is showing an error: no module MPIPool exit. Can anyone please suggest me any idea to overcome this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/340", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/340/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/340/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/340/events", "html_url": "https://github.com/dfm/emcee/issues/340", "id": 594586113, "node_id": "MDU6SXNzdWU1OTQ1ODYxMTM=", "number": 340, "title": "save a side-product obtained in log_likelihood", "user": {"login": "wenbinlu", "id": 8940964, "node_id": "MDQ6VXNlcjg5NDA5NjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8940964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wenbinlu", "html_url": "https://github.com/wenbinlu", "followers_url": "https://api.github.com/users/wenbinlu/followers", "following_url": "https://api.github.com/users/wenbinlu/following{/other_user}", "gists_url": "https://api.github.com/users/wenbinlu/gists{/gist_id}", "starred_url": "https://api.github.com/users/wenbinlu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wenbinlu/subscriptions", "organizations_url": "https://api.github.com/users/wenbinlu/orgs", "repos_url": "https://api.github.com/users/wenbinlu/repos", "events_url": "https://api.github.com/users/wenbinlu/events{/privacy}", "received_events_url": "https://api.github.com/users/wenbinlu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-05T18:25:05Z", "updated_at": "2020-04-05T22:33:15Z", "closed_at": "2020-04-05T22:33:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 3.0.2\r\n- platform: MacOS\r\n- installation method (pip/conda/source/other?): conda\r\n\r\n**Problem description:**\r\n\r\nThe likelihood for parameter p_vector is given by the function \"log_prob\". At the same time, I would like to save another variable A obtained by my function \"log_prob\" when a set of parameters p_vector is accepted. I don't want to save A when p_vector is not accepted.\r\n\r\nAn inefficient way of doing this is that I obtain the full samples of p_vector first, and then calculate A for each of the sample separately. However, this would cost twice of the time (since I had obtained A for each sample during the emcee run but it was discarded).\r\n\r\n### What have you tried so far?:\r\n\r\nI added an extra element to my parameter array p_vector (so its dimension becomes ndim + 1). The final likelihood does not depend on this extra element. Each time when executing log_prob, I'm passing the wanted value A to the last element of p_vector by p_vector[-1] = A. I was hoping that emcee would save all this value p_vector[-1] in the final \"###.h5\" file. However, since p_vector is not a global variable (and it is not passed to log_prob by its reference), my A value is lost.\r\n\r\nA sketch of the code is:\r\n\r\n\r\nA = 0.   # initialize to an arbitrary value\r\npvec0 = np.array([p0, p1, p2, ..., A])    # initial position of a Ndim+1 vector\r\nradius = 0.03\r\npvec_init = np.zeros((Nwalkers, Ndim+1))\r\nfor i in range(Nwalkers):\r\n    pvec_init[i] = pvec0 + np.random.rand(Ndim+1)*radius\r\n\r\ndef log_prob(pvec):\r\n      ## calculate the probability \"P\" ##\r\n      ## at the same time I got \"A\" for this pvec ##\r\n      pvec[-1] = A\r\n      return log(P)\r\n\r\nfpath = './test.h5'\r\nbackend = emcee.backends.HDFBackend(fpath)\r\nbackend.reset(Nwalkers, Ndim+1)\r\nsampler = emcee.EnsembleSampler(Nwalkers, Ndim+1, ln_prob, backend=backend)\r\nNruns = 30\r\nsampler.run_mcmc(pvec_init, Nruns)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/336", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/336/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/336/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/336/events", "html_url": "https://github.com/dfm/emcee/issues/336", "id": 574255597, "node_id": "MDU6SXNzdWU1NzQyNTU1OTc=", "number": 336, "title": "Problem using \"backends\"", "user": {"login": "mdzrod", "id": 44872457, "node_id": "MDQ6VXNlcjQ0ODcyNDU3", "avatar_url": "https://avatars1.githubusercontent.com/u/44872457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdzrod", "html_url": "https://github.com/mdzrod", "followers_url": "https://api.github.com/users/mdzrod/followers", "following_url": "https://api.github.com/users/mdzrod/following{/other_user}", "gists_url": "https://api.github.com/users/mdzrod/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdzrod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdzrod/subscriptions", "organizations_url": "https://api.github.com/users/mdzrod/orgs", "repos_url": "https://api.github.com/users/mdzrod/repos", "events_url": "https://api.github.com/users/mdzrod/events{/privacy}", "received_events_url": "https://api.github.com/users/mdzrod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-03-02T21:20:52Z", "updated_at": "2020-03-14T19:22:23Z", "closed_at": "2020-03-14T19:22:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 3\r\n- platform: Linux\r\n- installation method (pip/conda/source/other?): pip\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior: Save chains using emcee.backends.HDFBackend(filenamesave) and load later.\r\n\r\n### Actual behavior:  Not loading. \"AttributeError: You must run the sampler with 'store == True' before accessing the results\" Even when I'm following exactly the tutorial over at https://emcee.readthedocs.io/en/stable/tutorials/monitor/\r\n\r\n\r\n### What have you tried so far?:\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\nScript 1: Save Chains\r\n\r\n```python\r\nimport emcee\r\n\r\nndim, nwalkers = 2, 10\r\nnsteps, nburn = 10000, 5000\r\nnp.random.seed(0)\r\nfilename= 'filename.h5'\r\nbackend = emcee.backends.HDFBackend(filename)\r\nbackend.reset(nwalkers, ndim)\r\n\r\nsampler = emcee.EnsembleSampler(nwalkers,ndim,lnprob, backend=backend, args=[XX])\r\n```\r\n\r\nAfter I'm done with the code I just save it. Now, let me load it in another script:\r\n\r\nScript 2 (separate): Load chains to make plots.\r\n\r\n```python\r\nimport emcee\r\nimport h5py\r\n\r\nreader = emcee.backends.HDFBackend('filename.h5', read_only=True)\r\n\r\ntau = reader.get_autocorr_time()\r\nburnin = int(2 * np.max(tau))\r\nthin = int(0.5 * np.min(tau))\r\nsamples = reader.get_chain(discard=burnin, flat=True, thin=thin)\r\n\r\nOutput: AttributeError: You must run the sampler with 'store == True' before accessing the results\r\n\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/330", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/330/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/330/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/330/events", "html_url": "https://github.com/dfm/emcee/issues/330", "id": 522971331, "node_id": "MDU6SXNzdWU1MjI5NzEzMzE=", "number": 330, "title": "Updates for JOSS review", "user": {"login": "dfm", "id": 350282, "node_id": "MDQ6VXNlcjM1MDI4Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/350282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfm", "html_url": "https://github.com/dfm", "followers_url": "https://api.github.com/users/dfm/followers", "following_url": "https://api.github.com/users/dfm/following{/other_user}", "gists_url": "https://api.github.com/users/dfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfm/subscriptions", "organizations_url": "https://api.github.com/users/dfm/orgs", "repos_url": "https://api.github.com/users/dfm/repos", "events_url": "https://api.github.com/users/dfm/events{/privacy}", "received_events_url": "https://api.github.com/users/dfm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-14T16:32:36Z", "updated_at": "2019-11-14T18:11:34Z", "closed_at": "2019-11-14T18:11:34Z", "author_association": "OWNER", "active_lock_reason": null, "body": "@mattpitkin recommends (ref: openjournals/joss-reviews#1864):\r\n\r\n- minor point: in the \"What about shorter chains?\" section it's worth noting that the example requires having autograd installed.\r\n- slightly bigger point: could an example be added that shows using a different Move. Maybe something where the walk move, or differential evolution, given shorter autocorrelation times than the stretch move?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/323", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/323/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/323/events", "html_url": "https://github.com/dfm/emcee/issues/323", "id": 516306116, "node_id": "MDU6SXNzdWU1MTYzMDYxMTY=", "number": 323, "title": "[3.0.1] Test failures in test_sampler.py", "user": {"login": "olebole", "id": 397223, "node_id": "MDQ6VXNlcjM5NzIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/397223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olebole", "html_url": "https://github.com/olebole", "followers_url": "https://api.github.com/users/olebole/followers", "following_url": "https://api.github.com/users/olebole/following{/other_user}", "gists_url": "https://api.github.com/users/olebole/gists{/gist_id}", "starred_url": "https://api.github.com/users/olebole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olebole/subscriptions", "organizations_url": "https://api.github.com/users/olebole/orgs", "repos_url": "https://api.github.com/users/olebole/repos", "events_url": "https://api.github.com/users/olebole/events{/privacy}", "received_events_url": "https://api.github.com/users/olebole/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2805191, "node_id": "MDU6TGFiZWwyODA1MTkx", "url": "https://api.github.com/repos/dfm/emcee/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-01T19:30:55Z", "updated_at": "2019-11-14T02:11:44Z", "closed_at": "2019-11-14T02:11:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**General information:**\r\n\r\n- emcee version: 3.0.1\r\n- platform: Debian unstable/testing\r\n- installation method (pip/conda/source/other?): pip source\r\n\r\n**Problem description:**\r\n\r\nDuring packaging the new version for Debian, I get the following test errors:\r\n```\r\n_____________________________ test_errors[Backend] _____________________________\r\n\r\nbackend = <class 'emcee.backends.backend.Backend'>, nwalkers = 32, ndim = 3\r\nnsteps = 5, seed = 1234\r\n\r\n    @pytest.mark.parametrize(\"backend\", all_backends)\r\n    def test_errors(backend, nwalkers=32, ndim=3, nsteps=5, seed=1234):\r\n[\u2026]\r\n    \r\n            # Ensure that a warning is logged if the inital coords don't allow\r\n            # the chain to explore all of parameter space, and that one is not\r\n            # if we explicitly disable it, or the initial coords can.\r\n            with pytest.warns(RuntimeWarning) as recorded_warnings:\r\n>               sampler.run_mcmc(np.ones((nwalkers, ndim)), nsteps)\r\n\r\nemcee/tests/unit/test_sampler.py:120: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nemcee/ensemble.py:381: in run_mcmc\r\n    for results in self.sample(initial_state, iterations=nsteps, **kwargs):\r\nemcee/ensemble.py:247: in sample\r\n    np.atleast_2d(np.cov(state.coords, rowvar=False))\r\nemcee/ensemble.py:558: in _scaled_cond\r\n    return np.linalg.cond(c.astype(float))\r\n/usr/lib/python3/dist-packages/numpy/linalg/linalg.py:1716: in cond\r\n    s = svd(x, compute_uv=False)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\na = array([[nan, nan, nan],\r\n       [nan, nan, nan],\r\n       [nan, nan, nan]])\r\nfull_matrices = True, compute_uv = False\r\n\r\n    @array_function_dispatch(_svd_dispatcher)\r\n    def svd(a, full_matrices=True, compute_uv=True):\r\n      \"\"\"[\u2026]\"\"\"\r\n        a, wrap = _makearray(a)\r\n        _assertRankAtLeast2(a)\r\n        t, result_t = _commonType(a)\r\n    \r\n        extobj = get_linalg_error_extobj(_raise_linalgerror_svd_nonconvergence)\r\n    \r\n        m, n = a.shape[-2:]\r\n        if compute_uv\r\n            [\u2026]\r\n        else:\r\n            if m < n:\r\n                gufunc = _umath_linalg.svd_m\r\n            else:\r\n                gufunc = _umath_linalg.svd_n\r\n    \r\n    \r\n            signature = 'D->d' if isComplexType(t) else 'd->d'\r\n>           s = gufunc(a, signature=signature, extobj=extobj)\r\nE           ValueError: On entry to DLASCL parameter number 5 had an illegal value\r\n/usr/lib/python3/dist-packages/numpy/linalg/linalg.py:1624: ValueError\r\n```\r\nand the same for `TempHDFBackend`.\r\nNumpy version is 1.16.5, Python 3.7.5, x86_64.\r\nThis is a regression; 3.0.0 does not show this failure in the same build environment.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/321", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/321/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/321/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/321/events", "html_url": "https://github.com/dfm/emcee/issues/321", "id": 514173403, "node_id": "MDU6SXNzdWU1MTQxNzM0MDM=", "number": 321, "title": "emcee won't run from source", "user": {"login": "tlatorre-uchicago", "id": 5834059, "node_id": "MDQ6VXNlcjU4MzQwNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5834059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlatorre-uchicago", "html_url": "https://github.com/tlatorre-uchicago", "followers_url": "https://api.github.com/users/tlatorre-uchicago/followers", "following_url": "https://api.github.com/users/tlatorre-uchicago/following{/other_user}", "gists_url": "https://api.github.com/users/tlatorre-uchicago/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlatorre-uchicago/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlatorre-uchicago/subscriptions", "organizations_url": "https://api.github.com/users/tlatorre-uchicago/orgs", "repos_url": "https://api.github.com/users/tlatorre-uchicago/repos", "events_url": "https://api.github.com/users/tlatorre-uchicago/events{/privacy}", "received_events_url": "https://api.github.com/users/tlatorre-uchicago/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-29T19:38:23Z", "updated_at": "2019-11-03T12:24:25Z", "closed_at": "2019-11-03T12:24:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**General information:**\r\n\r\n- emcee version: master\r\n- platform: Linux\r\n- installation method (pip/conda/source/other?): source\r\n\r\n**Problem description:**\r\n\r\nWhen trying to install emcee from source it seems that the emcee_version.py file never gets created, and so I'm getting an ImportError.\r\n\r\n### Expected behavior:\r\n\r\n```python\r\n>>> import emcee\r\n```\r\n\r\n### Actual behavior:\r\n\r\n```python\r\n>>> import emcee\r\nImportError: No module named emcee_version\r\n```\r\n\r\n### What have you tried so far?:\r\n\r\nI grepped through the code base looking for an emcee_version.py file and noticed that it's in the .gitignore, so I guess it's a file which isn't stored in the git repository.\r\n\r\nI bisected the problem to 13595f7c04f6e0711cc34567e398576e375043bc which is where the emcee_version.py file was introduced.\r\n\r\n### Minimal example:\r\n\r\n```bash\r\n$ git clone https://github.com/dfm/emcee\r\n$ cd emcee\r\n$ python setup.py install\r\n$ cd ~\r\n```\r\nand then try to import it:\r\n\r\n```python\r\n>>> import emcee\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/316", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/316/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/316/events", "html_url": "https://github.com/dfm/emcee/issues/316", "id": 508711893, "node_id": "MDU6SXNzdWU1MDg3MTE4OTM=", "number": 316, "title": "Submitting a JOSS paper", "user": {"login": "dfm", "id": 350282, "node_id": "MDQ6VXNlcjM1MDI4Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/350282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfm", "html_url": "https://github.com/dfm", "followers_url": "https://api.github.com/users/dfm/followers", "following_url": "https://api.github.com/users/dfm/following{/other_user}", "gists_url": "https://api.github.com/users/dfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfm/subscriptions", "organizations_url": "https://api.github.com/users/dfm/orgs", "repos_url": "https://api.github.com/users/dfm/repos", "events_url": "https://api.github.com/users/dfm/events{/privacy}", "received_events_url": "https://api.github.com/users/dfm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 34, "created_at": "2019-10-17T20:46:07Z", "updated_at": "2019-11-19T21:29:08Z", "closed_at": "2019-11-17T22:54:54Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I've just pushed a draft of a paper for submission to [JOSS](https://joss.theoj.org) in parallel with the release of version 3.0. I'd like to invite members of the community to join as an author on this paper if you're are interested. Please reply to this thread with your full name, affiliation, and (optionally) ORCID in [the format needed by JOSS](https://joss.readthedocs.io/en/latest/submitting.html#example-paper-and-bibliography) if you would like to join as an author. Pull requests or comments about the manuscript are also welcome! For example, my info is:\r\n\r\n```\r\nname: Daniel Foreman-Mackey\r\norcid: 0000-0003-0872-7098\r\naffiliation: Center for Computational Astrophysics, Flatiron Institute\r\n```\r\n\r\nI'd like to submit this on 28 Oct 2019 so let me know if you're interested in joining, but need more time to decide.\r\n\r\nPinging committers with at least 10 lines (but others are also welcome if you feel that you have contributed!):\r\n\r\n- @farr \r\n- @manodeep \r\n- @davidwhogg \r\n- @jeremysanders \r\n- @eteq \r\n- @joezuntz \r\n- @pkgw \r\n- @andyfaff \r\n- @bencebeky \r\n- @dstndstn \r\n- @drphilmarshall \r\n- @willvousden \r\n- @terhardt \r\n- @Christopher-Bradshaw \r\n- @ipashchenko \r\n- @OriolAbril \r\n- @ericdill \r\n- @mindriot101 \r\n- @nkern \r\n- @migueldvb\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/313", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/313/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/313/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/313/events", "html_url": "https://github.com/dfm/emcee/issues/313", "id": 502951708, "node_id": "MDU6SXNzdWU1MDI5NTE3MDg=", "number": 313, "title": "How can emcee be run deterministically?", "user": {"login": "aarchiba", "id": 136867, "node_id": "MDQ6VXNlcjEzNjg2Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/136867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aarchiba", "html_url": "https://github.com/aarchiba", "followers_url": "https://api.github.com/users/aarchiba/followers", "following_url": "https://api.github.com/users/aarchiba/following{/other_user}", "gists_url": "https://api.github.com/users/aarchiba/gists{/gist_id}", "starred_url": "https://api.github.com/users/aarchiba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aarchiba/subscriptions", "organizations_url": "https://api.github.com/users/aarchiba/orgs", "repos_url": "https://api.github.com/users/aarchiba/repos", "events_url": "https://api.github.com/users/aarchiba/events{/privacy}", "received_events_url": "https://api.github.com/users/aarchiba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-05T11:29:03Z", "updated_at": "2019-11-02T11:06:56Z", "closed_at": "2019-10-28T15:49:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I want to be able to run emcee multiple times and get exactly the same answer. How can this be accomplished? It does not seem to be sufficient to use random.seed(0), or numpy.random.seed(0), or to capture numpy.random.mtrand.RandomState(0) and assign it to the sampler, or in fact all three.\r\n\r\nThis is relevant, among others, for making sure that our example notebook doesn't change when rerun, so that it can be checked in to version control without endless merge conflicts.\r\n\r\nA quick test in raw emcee; this passes, mystifyingly, sometimes but not always:\r\n```python\r\ndef test_raw_emcee():\r\n    r = []\r\n    for i in range(2):\r\n        random.seed(0)\r\n        numpy.random.seed(0)\r\n        s = numpy.random.mtrand.RandomState(0)\r\n\r\n        def log_prob(x, ivar):\r\n            return -0.5 * np.sum(ivar * x ** 2)\r\n\r\n        ndim, nwalkers = 5, 100\r\n        ivar = 1. / np.random.rand(ndim)\r\n        # r.append(ivar[0])\r\n        p0 = np.random.randn(nwalkers, ndim)\r\n        #r.append(p0[0, 0])\r\n\r\n        sampler = emcee.EnsembleSampler(nwalkers, ndim, log_prob, args=[ivar])\r\n        sampler.random_state = s\r\n        sampler.run_mcmc(p0, 100)\r\n\r\n        samples = sampler.chain.reshape((-1, ndim))\r\n        r.append(samples[0, 0])\r\n    assert r[0] == r[1]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/312", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/312/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/312/events", "html_url": "https://github.com/dfm/emcee/issues/312", "id": 501532075, "node_id": "MDU6SXNzdWU1MDE1MzIwNzU=", "number": 312, "title": "emcee 3.0 breaks extended-precision coordinates", "user": {"login": "aarchiba", "id": 136867, "node_id": "MDQ6VXNlcjEzNjg2Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/136867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aarchiba", "html_url": "https://github.com/aarchiba", "followers_url": "https://api.github.com/users/aarchiba/followers", "following_url": "https://api.github.com/users/aarchiba/following{/other_user}", "gists_url": "https://api.github.com/users/aarchiba/gists{/gist_id}", "starred_url": "https://api.github.com/users/aarchiba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aarchiba/subscriptions", "organizations_url": "https://api.github.com/users/aarchiba/orgs", "repos_url": "https://api.github.com/users/aarchiba/repos", "events_url": "https://api.github.com/users/aarchiba/events{/privacy}", "received_events_url": "https://api.github.com/users/aarchiba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2805190, "node_id": "MDU6TGFiZWwyODA1MTkw", "url": "https://api.github.com/repos/dfm/emcee/labels/Feature%20Request", "name": "Feature Request", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-10-02T14:37:54Z", "updated_at": "2019-10-28T15:50:07Z", "closed_at": "2019-10-28T15:50:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We are working with variables of type np.longdouble (hardware 80-bit floating-point, stored in np.float96 or np.float128 depending on platform), and the switch from emcee 2.2 to emcee 3.0 breaks using these as walker coordinates. Specifically, np.linalg is not capable of doing linear algebra on these extended-precision values, but scipy.linalg is, and sample() calls np.linalg.det on a covariance matrix constructed from these coordinates.\r\n\r\nOne option would be to try to import linalg from scipy, and fall back to numpy if this is not available; this would have a higher chance of using faster system BLAS packages too, and it's reasonable to fail to work if no high-precision implementation is available (we require scipy anyway). \r\n\r\nIf the determinant is an approximate value, for example it is applied to a covariance matrix for a small sample, then it might be harmless and simple to just apply .astype(float) to the covariance matrix. Of course determinants can be numerically precarious, but the determinant call is checking for approximate linear dependence, so it's probably just fine to approximate. \r\n\r\nWe are using this in PINT ( https://github.com/nanograv/PINT ) which works with time spans of decades that can be measured to the nanosecond, so we really do need the extended precision, though often by the time we are down to the quantities of real interest the need for precision is less.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/309", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/309/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/309/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/309/events", "html_url": "https://github.com/dfm/emcee/issues/309", "id": 494733465, "node_id": "MDU6SXNzdWU0OTQ3MzM0NjU=", "number": 309, "title": "emcee problem", "user": {"login": "Saladino93", "id": 23438226, "node_id": "MDQ6VXNlcjIzNDM4MjI2", "avatar_url": "https://avatars2.githubusercontent.com/u/23438226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Saladino93", "html_url": "https://github.com/Saladino93", "followers_url": "https://api.github.com/users/Saladino93/followers", "following_url": "https://api.github.com/users/Saladino93/following{/other_user}", "gists_url": "https://api.github.com/users/Saladino93/gists{/gist_id}", "starred_url": "https://api.github.com/users/Saladino93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Saladino93/subscriptions", "organizations_url": "https://api.github.com/users/Saladino93/orgs", "repos_url": "https://api.github.com/users/Saladino93/repos", "events_url": "https://api.github.com/users/Saladino93/events{/privacy}", "received_events_url": "https://api.github.com/users/Saladino93/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-17T16:41:51Z", "updated_at": "2019-09-17T17:13:56Z", "closed_at": "2019-09-17T17:12:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version:emcee-3.0rc2\r\n- platform:NERSC\r\n- installation method (pip/conda/source/other?):pip\r\n\r\n**Problem description:**\r\n\r\nI am doing a cosmological analysis that involves calculating the expected theory from camb, starting from camb.CAMBparams() and related functions.\r\n\r\nThen I use the theory in the likelihood and everything then is sampled with emcee. \r\n\r\nI am using 64 walkers, and MPI code is very similar to the one from the docs. The number of cpus is 32 (as I understood it can not be more for this case).\r\n\r\n### Expected behavior: Likelihood call takes around 9s. So if I want to do 2000 steps per walker I should get 5 hours. Then probably there is walkers updating (in pairs), so this also should take time.\r\n\r\n### Actual behavior: expected time from progress bar is around 12h!! It was 16h in the beginning but then I managed to save some time.\r\n\r\n### What have you tried so far?: change some variables to global, cutting a few pieces, changing some parts in the code that saved from minutes to a couple of hours in the total run.\r\n\r\n### Minimal example:\r\n\r\n``\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\nimport emcee\r\n\r\n.....\r\n\r\n\r\n    pars = camb.CAMBparams()\r\n    pars.set_dark_energy(w = cosmo['w0'], wa = cosmo['wa'], dark_energy_model = 'ppf')\r\n    pars.set_cosmology(H0 = cosmo['H0'], cosmomc_theta = None, ombh2 = cosmo['ombh2'],\r\n                   omch2 = cosmo['omch2'],  mnu = cosmo['mnu'], tau = cosmo['tau'], nnu = cosmo['nnu'], num_massive_neutrinos = 3)\r\n    pars.NonLinear = model.NonLinear_both\r\n    pars.InitPower.set_params(ns = cosmo['ns'], As = cosmo['As'])\r\n\r\n    results = camb.get_results(pars)\r\n\r\n    nz = 1000\r\n    kmax = 1\r\n    zmin = 0.\r\n\r\n    chistar = results.conformal_time(0)- results.tau_maxvis\r\n    chis = np.linspace(0, chistar, nz)\r\n    zs=results.redshift_at_comoving_radial_distance(chis)\r\n    dchis = (chis[2:]-chis[:-2])/2\r\n    chis = chis[1:-1]\r\n    zs = zs[1:-1]\r\n    Hzs = np.array([results.hubble_parameter(z) for z in zs])\r\n\r\n    PK = camb.get_matter_power_interpolator(pars, nonlinear = True, hubble_units = False, k_hunit = False, kmax = kmax, var1 = 'delta_nonu', var2 = 'delta_nonu', zmax = zs[-1])\r\n.....\r\n```\r\n\r\n(then there is also some code to calculated projected ps, but this is very fast. this is the bottleneck part of the code, as I check it. I also save the results using the backend feature (I hope this is not the problem)).\r\n\r\nDoes anyone has some experience of using emcee with camb? Or do you need more code?\r\n\r\nMy goal is to have a total sampling time around the time given by the likelihood calls.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/308", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/308/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/308/events", "html_url": "https://github.com/dfm/emcee/issues/308", "id": 492870801, "node_id": "MDU6SXNzdWU0OTI4NzA4MDE=", "number": 308, "title": "FutureWarning from autocorr", "user": {"login": "Alexis-Prel", "id": 55247473, "node_id": "MDQ6VXNlcjU1MjQ3NDcz", "avatar_url": "https://avatars1.githubusercontent.com/u/55247473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexis-Prel", "html_url": "https://github.com/Alexis-Prel", "followers_url": "https://api.github.com/users/Alexis-Prel/followers", "following_url": "https://api.github.com/users/Alexis-Prel/following{/other_user}", "gists_url": "https://api.github.com/users/Alexis-Prel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexis-Prel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexis-Prel/subscriptions", "organizations_url": "https://api.github.com/users/Alexis-Prel/orgs", "repos_url": "https://api.github.com/users/Alexis-Prel/repos", "events_url": "https://api.github.com/users/Alexis-Prel/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexis-Prel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-12T15:14:39Z", "updated_at": "2019-09-13T11:28:19Z", "closed_at": "2019-09-13T11:27:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 2.x\r\n- platform: Linux\r\n- installation method (pip/conda/source/other?): source\r\n\r\n**Problem description:**\r\nCalls to `emcee.autocorr.integrated_time` produce a  `FutureWarning`. \r\n\r\n### Expected behavior:\r\nNo warning.\r\n\r\n### Actual behavior:\r\nThe following warning message:\r\n> path/to/emcee/autocorr.py:41: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\r\n\r\n### What have you tried so far?:\r\nChanging `[m]` to `[tuple(m)]` in `emcee.autocorr.py` at lines `41`, `43` and `105` suppresses the warning. **Could someone confirm that this will not change `integrated_time`'s output?**\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\nimport numpy as np\r\nimport emcee\r\n\r\nts = np.random.random((25600, 2))\r\nemcee.autocorr.integrated_time(ts, axis=0)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/306", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/306/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/306/events", "html_url": "https://github.com/dfm/emcee/issues/306", "id": 490821414, "node_id": "MDU6SXNzdWU0OTA4MjE0MTQ=", "number": 306, "title": "Add check that `initial_state` allows full exploration of parameter space", "user": {"login": "Christopher-Bradshaw", "id": 3906618, "node_id": "MDQ6VXNlcjM5MDY2MTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3906618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Christopher-Bradshaw", "html_url": "https://github.com/Christopher-Bradshaw", "followers_url": "https://api.github.com/users/Christopher-Bradshaw/followers", "following_url": "https://api.github.com/users/Christopher-Bradshaw/following{/other_user}", "gists_url": "https://api.github.com/users/Christopher-Bradshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Christopher-Bradshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Christopher-Bradshaw/subscriptions", "organizations_url": "https://api.github.com/users/Christopher-Bradshaw/orgs", "repos_url": "https://api.github.com/users/Christopher-Bradshaw/repos", "events_url": "https://api.github.com/users/Christopher-Bradshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Christopher-Bradshaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-09-08T23:13:41Z", "updated_at": "2019-10-28T15:45:40Z", "closed_at": "2019-10-28T15:45:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When running the ensemble sampler, I occasionally accidentally initialize all walkers to have the same initial position in some of the dimensions. This is entirely my fault! But, it would be easy (I think) to add a check that the initial state allows the sampler to explore all of parameter space, rather than have me find out my mistake after running my chains for a while.\r\n\r\nIf you think this would be a useful thing to have, I'm happy to make the change and submit a PR, but wanted to check it was something you'd be interested in/I haven't missed some reason why you might not want this.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/305", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/305/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/305/events", "html_url": "https://github.com/dfm/emcee/issues/305", "id": 487606764, "node_id": "MDU6SXNzdWU0ODc2MDY3NjQ=", "number": 305, "title": "`sampler.sample` cannot be used to resume chains", "user": {"login": "gboehl", "id": 9336863, "node_id": "MDQ6VXNlcjkzMzY4NjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/9336863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gboehl", "html_url": "https://github.com/gboehl", "followers_url": "https://api.github.com/users/gboehl/followers", "following_url": "https://api.github.com/users/gboehl/following{/other_user}", "gists_url": "https://api.github.com/users/gboehl/gists{/gist_id}", "starred_url": "https://api.github.com/users/gboehl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gboehl/subscriptions", "organizations_url": "https://api.github.com/users/gboehl/orgs", "repos_url": "https://api.github.com/users/gboehl/repos", "events_url": "https://api.github.com/users/gboehl/events{/privacy}", "received_events_url": "https://api.github.com/users/gboehl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-30T18:03:21Z", "updated_at": "2019-09-11T20:41:45Z", "closed_at": "2019-09-11T20:41:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n**General information:**\r\n\r\n- emcee version: 3.0.rc2\r\n- platform: Linux 5.2.8, Python 3.7.4\r\n- installation method (pip/conda/source/other?): add path to local repo\r\n\r\n**Problem description:**\r\nI'm integrating emcee into one of my packages. It is important that chains can be resumed. This works well if using `sampler.run_mcmc(None, n)`, but fails with iterating over `sampler.sample(None, n)`.\r\n\r\n### Actual behavior:\r\n`ValueError: incompatible input dimensions`\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\nimport emcee\r\nimport numpy as np\r\n\r\ndef log_prob(theta):\r\n    log_prior = -0.5 *  np.sum((theta-1.0)**2 / 100.0)\r\n    log_prob = -0.5 * np.sum(theta**2) + log_prior\r\n    return log_prob, log_prior\r\n\r\ncoords = np.random.randn(32, 5)\r\nnwalkers, ndim = coords.shape\r\n\r\nfilename = \"tutorial.h5\"\r\nbackend = emcee.backends.HDFBackend(filename)\r\n\r\nsampler = emcee.EnsembleSampler(nwalkers, ndim, log_prob, backend=backend)\r\n\r\nmax_n = 1000\r\n\r\nsampler.run_mcmc(coords, max_n, progress=True)\r\n\r\nnew_sampler = emcee.EnsembleSampler(nwalkers, ndim, log_prob, backend=backend)\r\n\r\nnew_sampler.run_mcmc(None, max_n, progress=True)    # works :)\r\n\r\nfor _ in new_sampler.sample(None, iterations=max_n, progress=True):  # does not work :(\r\n    continue\r\n```\r\nMany thanks for this great package!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/303", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/303/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/303/events", "html_url": "https://github.com/dfm/emcee/issues/303", "id": 474334038, "node_id": "MDU6SXNzdWU0NzQzMzQwMzg=", "number": 303, "title": "Problems with progress and backend", "user": {"login": "mmarianav", "id": 7842875, "node_id": "MDQ6VXNlcjc4NDI4NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7842875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmarianav", "html_url": "https://github.com/mmarianav", "followers_url": "https://api.github.com/users/mmarianav/followers", "following_url": "https://api.github.com/users/mmarianav/following{/other_user}", "gists_url": "https://api.github.com/users/mmarianav/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmarianav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmarianav/subscriptions", "organizations_url": "https://api.github.com/users/mmarianav/orgs", "repos_url": "https://api.github.com/users/mmarianav/repos", "events_url": "https://api.github.com/users/mmarianav/events{/privacy}", "received_events_url": "https://api.github.com/users/mmarianav/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-30T02:05:11Z", "updated_at": "2019-07-30T02:09:49Z", "closed_at": "2019-07-30T02:09:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/302", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/302/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/302/events", "html_url": "https://github.com/dfm/emcee/issues/302", "id": 471087543, "node_id": "MDU6SXNzdWU0NzEwODc1NDM=", "number": 302, "title": "Pls delete, misread API", "user": {"login": "yves-weissenberger", "id": 9501913, "node_id": "MDQ6VXNlcjk1MDE5MTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/9501913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yves-weissenberger", "html_url": "https://github.com/yves-weissenberger", "followers_url": "https://api.github.com/users/yves-weissenberger/followers", "following_url": "https://api.github.com/users/yves-weissenberger/following{/other_user}", "gists_url": "https://api.github.com/users/yves-weissenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/yves-weissenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yves-weissenberger/subscriptions", "organizations_url": "https://api.github.com/users/yves-weissenberger/orgs", "repos_url": "https://api.github.com/users/yves-weissenberger/repos", "events_url": "https://api.github.com/users/yves-weissenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/yves-weissenberger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-22T13:12:37Z", "updated_at": "2019-08-08T10:51:18Z", "closed_at": "2019-08-08T10:51:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry just read API properly, doesn't make sense. Please delete :)\r\nThanks for updated version! Looks great! \ud83d\udc4d ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/301", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/301/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/301/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/301/events", "html_url": "https://github.com/dfm/emcee/issues/301", "id": 454387347, "node_id": "MDU6SXNzdWU0NTQzODczNDc=", "number": 301, "title": "No change in acceptance fraction when changing the 'a' parameter (emcee 3.0)", "user": {"login": "kmarr", "id": 22734294, "node_id": "MDQ6VXNlcjIyNzM0Mjk0", "avatar_url": "https://avatars1.githubusercontent.com/u/22734294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmarr", "html_url": "https://github.com/kmarr", "followers_url": "https://api.github.com/users/kmarr/followers", "following_url": "https://api.github.com/users/kmarr/following{/other_user}", "gists_url": "https://api.github.com/users/kmarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmarr/subscriptions", "organizations_url": "https://api.github.com/users/kmarr/orgs", "repos_url": "https://api.github.com/users/kmarr/repos", "events_url": "https://api.github.com/users/kmarr/events{/privacy}", "received_events_url": "https://api.github.com/users/kmarr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-10T21:44:06Z", "updated_at": "2019-06-10T22:08:28Z", "closed_at": "2019-06-10T22:08:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version:  3.0rc2\r\n- platform:  Ubuntu 18.10\r\n- installation method (pip/conda/source/other?):  source\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior: \r\nThe acceptance fraction should change when using different 'a' parameters. \r\n\r\n### Actual behavior: \r\nThe acceptance fraction stays the same no matter what value is used for 'a'.\r\n\r\n### What have you tried so far?: \r\nIn version 3.0rc2, a range of values for 'a', from 1.0 to 50.0, none of which change the acceptance fraction. In version 2.2.1, this does work, so I have reverted back to that version for now.\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\n# Slightly modifying example code from the emcee website (https://emcee.readthedocs.io/en/latest/tutorials/quickstart/)\r\n\r\nimport numpy as np\r\nimport emcee\r\nprint(emcee.__version__)\r\n\r\ndef log_prob(x, mu, cov):\r\n    diff = x - mu\r\n    return -0.5*np.dot(diff, np.linalg.solve(cov,diff))\r\n\r\na_parameter=2.0\r\n\r\nndim = 5\r\n\r\nnp.random.seed(42)\r\nmeans = np.random.rand(ndim)\r\n\r\ncov = 0.5 - np.random.rand(ndim ** 2).reshape((ndim, ndim))\r\ncov = np.triu(cov)\r\ncov += cov.T - np.diag(cov.diagonal())\r\ncov = np.dot(cov,cov)\r\n\r\nnwalkers = 32\r\np0 = np.random.rand(nwalkers, ndim)\r\n\r\nsampler = emcee.EnsembleSampler(nwalkers, ndim, log_prob, args=[means, cov], a=a_parameter)\r\n\r\nlog_prob(p0[0], means, cov)\r\n\r\nstate = sampler.run_mcmc(p0, 100)\r\n\r\naf = np.mean(sampler.acceptance_fraction)\r\nprint(af)\r\n\r\n\r\n# emcee 3.0rc2 output\r\n# 3.0rc2\r\n# 0.5484375 <-- Does not change when using different a_parameter, or when rerunning code\r\n\r\n#emcee 2.2.1 output\r\n# 2.2.1\r\n# 0.5440625 <-- Changes when using different a_parameter, and changes by statistical fluctuations when rerunning\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/300", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/300/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/300/events", "html_url": "https://github.com/dfm/emcee/issues/300", "id": 450728550, "node_id": "MDU6SXNzdWU0NTA3Mjg1NTA=", "number": 300, "title": "Potential bug in run_mcmc of the 2.2.x branch", "user": {"login": "AlexisPrel", "id": 8863762, "node_id": "MDQ6VXNlcjg4NjM3NjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8863762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexisPrel", "html_url": "https://github.com/AlexisPrel", "followers_url": "https://api.github.com/users/AlexisPrel/followers", "following_url": "https://api.github.com/users/AlexisPrel/following{/other_user}", "gists_url": "https://api.github.com/users/AlexisPrel/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexisPrel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexisPrel/subscriptions", "organizations_url": "https://api.github.com/users/AlexisPrel/orgs", "repos_url": "https://api.github.com/users/AlexisPrel/repos", "events_url": "https://api.github.com/users/AlexisPrel/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexisPrel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2805191, "node_id": "MDU6TGFiZWwyODA1MTkx", "url": "https://api.github.com/repos/dfm/emcee/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}, {"id": 1643188630, "node_id": "MDU6TGFiZWwxNjQzMTg4NjMw", "url": "https://api.github.com/repos/dfm/emcee/labels/Legacy", "name": "Legacy", "color": "fef2c0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-31T10:26:05Z", "updated_at": "2019-11-04T16:23:17Z", "closed_at": "2019-11-04T16:23:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 2.2.x\r\n\r\n**Problem description:**\r\nReading the [code for the Sampler class](https://github.com/dfm/emcee/blob/v2.2.x/emcee/sampler.py) of version 2.2.x, I think I found a mistake at line **167** in `sampler.py`: \r\n\r\nShouldn't `rstate0` be replaced with `lnprob0` ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/299", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/299/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/299/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/299/events", "html_url": "https://github.com/dfm/emcee/issues/299", "id": 450249570, "node_id": "MDU6SXNzdWU0NTAyNDk1NzA=", "number": 299, "title": "ValueError: algorithm must be 'MT19937' when creating sampler", "user": {"login": "iipr", "id": 17690149, "node_id": "MDQ6VXNlcjE3NjkwMTQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/17690149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iipr", "html_url": "https://github.com/iipr", "followers_url": "https://api.github.com/users/iipr/followers", "following_url": "https://api.github.com/users/iipr/following{/other_user}", "gists_url": "https://api.github.com/users/iipr/gists{/gist_id}", "starred_url": "https://api.github.com/users/iipr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iipr/subscriptions", "organizations_url": "https://api.github.com/users/iipr/orgs", "repos_url": "https://api.github.com/users/iipr/repos", "events_url": "https://api.github.com/users/iipr/events{/privacy}", "received_events_url": "https://api.github.com/users/iipr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2805191, "node_id": "MDU6TGFiZWwyODA1MTkx", "url": "https://api.github.com/repos/dfm/emcee/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "dfm", "id": 350282, "node_id": "MDQ6VXNlcjM1MDI4Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/350282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfm", "html_url": "https://github.com/dfm", "followers_url": "https://api.github.com/users/dfm/followers", "following_url": "https://api.github.com/users/dfm/following{/other_user}", "gists_url": "https://api.github.com/users/dfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfm/subscriptions", "organizations_url": "https://api.github.com/users/dfm/orgs", "repos_url": "https://api.github.com/users/dfm/repos", "events_url": "https://api.github.com/users/dfm/events{/privacy}", "received_events_url": "https://api.github.com/users/dfm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dfm", "id": 350282, "node_id": "MDQ6VXNlcjM1MDI4Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/350282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfm", "html_url": "https://github.com/dfm", "followers_url": "https://api.github.com/users/dfm/followers", "following_url": "https://api.github.com/users/dfm/following{/other_user}", "gists_url": "https://api.github.com/users/dfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfm/subscriptions", "organizations_url": "https://api.github.com/users/dfm/orgs", "repos_url": "https://api.github.com/users/dfm/repos", "events_url": "https://api.github.com/users/dfm/events{/privacy}", "received_events_url": "https://api.github.com/users/dfm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 17, "created_at": "2019-05-30T10:57:37Z", "updated_at": "2019-11-24T16:09:52Z", "closed_at": "2019-11-24T16:09:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "**General information:**\r\n\r\n- emcee version: v3.0rc2\r\n- platform: Ubuntu 18.04.1 LTS\r\n- installation method (pip/conda/source/other?): pip install emcee==3.0rc2\r\n\r\n**Problem description:**\r\nRunning `emcee.EnsembleSampler()` throws error.\r\n\r\n### Expected behavior:\r\nNo error, creating the sampler correctly.\r\n\r\n### Actual behavior:\r\n`ValueError: algorithm must be 'MT19937'`\r\n\r\n### What have you tried so far?:\r\nThe error is coming from `emcee/ensemble.py`, line 133. I tried printing `state` variable, and it seems like the first element of this list, which should be `'MT19937'` is in reality `b'MT19937'`. So it seems like it is a bytes string. As a quick fix I tried setting `state[0] = 'MT19937'` just before the call to `set_state` and it seems to work fine, although this solution is obviously no good.\r\n\r\n### Minimal example:\r\n\r\n```python\r\nimport emcee\r\n# File with posterior class:\r\nimport posterior as pos\r\nposterior = pos.posterior()\r\nfilename = 'test.chains'\r\nname = '000'\r\nndim = 3\r\nnwalkers = 10\r\nmax_n = 10000\r\n\r\nbackend = emcee.backends.HDFBackend(filename, name=name) \r\nsampler = emcee.EnsembleSampler(nwalkers, ndim, log_prob_fn=posterior.lnpos, \r\n                                args=[[ns_range[0], ns_range[1]],[]], backend=backend)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/298", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/298/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/298/events", "html_url": "https://github.com/dfm/emcee/issues/298", "id": 441788750, "node_id": "MDU6SXNzdWU0NDE3ODg3NTA=", "number": 298, "title": "RuntimeWarning: invalid value encountered in double_scalars", "user": {"login": "huhell", "id": 47666722, "node_id": "MDQ6VXNlcjQ3NjY2NzIy", "avatar_url": "https://avatars3.githubusercontent.com/u/47666722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huhell", "html_url": "https://github.com/huhell", "followers_url": "https://api.github.com/users/huhell/followers", "following_url": "https://api.github.com/users/huhell/following{/other_user}", "gists_url": "https://api.github.com/users/huhell/gists{/gist_id}", "starred_url": "https://api.github.com/users/huhell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huhell/subscriptions", "organizations_url": "https://api.github.com/users/huhell/orgs", "repos_url": "https://api.github.com/users/huhell/repos", "events_url": "https://api.github.com/users/huhell/events{/privacy}", "received_events_url": "https://api.github.com/users/huhell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-08T15:15:00Z", "updated_at": "2019-10-28T17:32:01Z", "closed_at": "2019-10-28T17:32:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 2.2.1\r\n- platform: Ubuntu LTS 18.04\r\n- installation method (pip/conda/source/other?): pip\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior:\r\nNo error\r\n\r\n### Actual behavior:\r\nI get a RuntimeWarning: invalid value encountered in double_scalars in the red_blue.py script at line 97: lnpdiff = f + nlp - state.log_prob[j]. The same error appears from the old ensemble.py script at the line: lnpdiff = (self.dim - 1.) * np.log(zz) + newlnprob - lnprob0 (Issue 269, now closed)\r\n\r\n### What have you tried so far?:\r\nI have tried both versions of the code, and I can't figure out why I get that error. For an Ensemble with a lower amount of steps I do not get that error, only when the chain gets longer.\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\nimport emcee\r\n\r\n\r\n\r\n# sample code goes here...\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/297", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/297/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/297/events", "html_url": "https://github.com/dfm/emcee/issues/297", "id": 435883198, "node_id": "MDU6SXNzdWU0MzU4ODMxOTg=", "number": 297, "title": "What is the meaning of the `acf /= 4*n` line in the autocorr_func_1d() function in the v3 docs?", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-22T20:40:59Z", "updated_at": "2019-08-17T15:20:58Z", "closed_at": "2019-08-17T15:20:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the autocorrelation section of the `latest` docs (https://emcee.readthedocs.io/en/latest/tutorials/autocorr/) there is a `autocorr_func_1d()` function defined where the line\r\n\r\n    acf /= 4*n\r\n\r\nis included.\r\n\r\nWhat is the meaning of this line? I could not find it in the `integrated_time()` function in the [master branch](https://github.com/dfm/emcee/blob/8e7320319780361667d1f622bd07b95ab6b7a8c9/emcee/autocorr.py#L49), and I can't understand what it is supposed to do there.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/294", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/294/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/294/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/294/events", "html_url": "https://github.com/dfm/emcee/issues/294", "id": 414251258, "node_id": "MDU6SXNzdWU0MTQyNTEyNTg=", "number": 294, "title": "AttributeError Failures", "user": {"login": "lhogarth", "id": 46385495, "node_id": "MDQ6VXNlcjQ2Mzg1NDk1", "avatar_url": "https://avatars0.githubusercontent.com/u/46385495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lhogarth", "html_url": "https://github.com/lhogarth", "followers_url": "https://api.github.com/users/lhogarth/followers", "following_url": "https://api.github.com/users/lhogarth/following{/other_user}", "gists_url": "https://api.github.com/users/lhogarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/lhogarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lhogarth/subscriptions", "organizations_url": "https://api.github.com/users/lhogarth/orgs", "repos_url": "https://api.github.com/users/lhogarth/repos", "events_url": "https://api.github.com/users/lhogarth/events{/privacy}", "received_events_url": "https://api.github.com/users/lhogarth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-25T18:47:36Z", "updated_at": "2019-11-08T08:15:43Z", "closed_at": "2019-02-25T20:42:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "**General information:**\r\n\r\n- emcee version: 2.2.1\r\n- platform: Linux (Ubuntu), Python 3.6 environment\r\n- installation method (pip/conda/source/other?): conda\r\n\r\n**Problem description:**\r\n\r\n**### Expected behaviour:**\r\n\r\nI want to output the chains for my MCMC code using _sampler.get_chain()_ for an _EnsembleSampler_ object.\r\n\r\n**### Actual behaviour:**\r\n\r\nThe code breaks with an AttributeError at sampler.get_chain().\r\n\r\n### What have you tried so far?:\r\n\r\nI have tried upgrading all the dependencies for emcee and running tests.py in the source directory. There was an AttributeError in every test in tests.py (details below). I don't understand what is causing these failures but they would appear to be linked to the original problem. Any help would be much appreciated!\r\n\r\nBest wishes,\r\n\r\nLucy Hogarth\r\n\r\n\r\n**### Minimal example:**\r\n\r\n''''Snippet to show original AttributeError with .get_chain()''''\r\n\r\n_import emcee\r\n.....\r\nsampler = emcee.EnsembleSampler(nwalkers, ndim, lnprob, args=(obspars,rad,fdata,priorarr),threads=cpus2use) # Setup the sampler\r\n\r\n### Run the samples, while outputing a progress bar to the screen, and writing progress to the file.\r\nwidth = 30\r\nfor i, result in enumerate(sampler.sample(pos, iterations=nsteps)):\r\n    position = result[0]\r\n    n = int((width+1) * float(i) / nsteps)\r\n    sys.stdout.write(\"\\r[{0}{1}]\".format('#' * n, ' ' * (width - n)))\r\n    f = open(chainname, \"a\")\r\n    for k in range(position.shape[0]):\r\n        f.write(\"{0:4d} {1:s}\\n\".format(k, \" \".join(map(str, position[k]))))\r\n    f.close()\r\nsys.stdout.write(\"\\n\")         \r\nt1=time.time()\r\nprint(\"It took\",t1-t0,\"seconds\")\r\n\r\n#output chains\r\nfig, axes = plt.subplots(3, figsize=(10, 7), sharex=True)\r\nsamples = sampler.get_chain()_\r\n\r\n...\r\n\r\n**Error:**\r\n\r\nTraceback (most recent call last):\r\n  File \"KinMSpy_MCMC.py\", line 213, in <module>\r\n    samples = sampler.get_chain()\r\nAttributeError: 'EnsembleSampler' object has no attribute 'get_chain'\r\n\r\n#############################################################\r\n\r\n**Results from test.py:**\r\n\r\npy.test -v tests.py\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.6.7, pytest-4.0.1, py-1.7.0, pluggy-0.8.0 -- /home/lhogarth/miniconda2/envs/py36/bin/python\r\ncachedir: .pytest_cache\r\nrootdir: /home/lhogarth/miniconda2/envs/py36/lib/python3.6/site-packages/emcee, inifile:\r\nplugins: remotedata-0.3.1, openfiles-0.3.1, doctestplus-0.2.0, arraydiff-0.2\r\ncollected 8 items                                                              \r\n\r\ntests.py::Tests::test_mh FAILED                                          [ 12%]\r\ntests.py::Tests::test_ensemble FAILED                                    [ 25%]\r\ntests.py::Tests::test_nan_lnprob FAILED                                  [ 37%]\r\ntests.py::Tests::test_inf_nan_params FAILED                              [ 50%]\r\ntests.py::Tests::test_parallel FAILED                                    [ 62%]\r\ntests.py::Tests::test_pt_sampler FAILED                                  [ 75%]\r\ntests.py::Tests::test_blobs FAILED                                       [ 87%]\r\ntests.py::Tests::test_run_mcmc_resume FAILED                             [100%]\r\n\r\n=================================== FAILURES ===================================\r\n________________________________ Tests.test_mh _________________________________\r\n\r\nself = <emcee.tests.Tests object at 0x7f5994157ef0>\r\n\r\n    def test_mh(self):\r\n>       self.sampler = MHSampler(self.cov, self.ndim, lnprob_gaussian,\r\n                                 args=[self.icov])\r\nE       AttributeError: 'Tests' object has no attribute 'cov'\r\n\r\ntests.py:165: AttributeError\r\n_____________________________ Tests.test_ensemble ______________________________\r\n\r\nself = <emcee.tests.Tests object at 0x7f599405e9e8>\r\n\r\n    def test_ensemble(self):\r\n>       self.sampler = EnsembleSampler(self.nwalkers, self.ndim,\r\n                                       lnprob_gaussian, args=[self.icov])\r\nE       AttributeError: 'Tests' object has no attribute 'nwalkers'\r\n\r\ntests.py:170: AttributeError\r\n____________________________ Tests.test_nan_lnprob _____________________________\r\n\r\nself = <emcee.tests.Tests object at 0x7f5994073358>\r\n\r\n    def test_nan_lnprob(self):\r\n>       self.sampler = EnsembleSampler(self.nwalkers, self.ndim,\r\n                                       lnprob_gaussian_nan,\r\n                                       args=[self.icov])\r\nE       AttributeError: 'Tests' object has no attribute 'nwalkers'\r\n\r\ntests.py:175: AttributeError\r\n__________________________ Tests.test_inf_nan_params ___________________________\r\n\r\nself = <emcee.tests.Tests object at 0x7f59940cf550>\r\n\r\n    def test_inf_nan_params(self):\r\n>       self.sampler = EnsembleSampler(self.nwalkers, self.ndim,\r\n                                       lnprob_gaussian, args=[self.icov])\r\nE       AttributeError: 'Tests' object has no attribute 'nwalkers'\r\n\r\ntests.py:192: AttributeError\r\n_____________________________ Tests.test_parallel ______________________________\r\n\r\nself = <emcee.tests.Tests object at 0x7f59940335c0>\r\n\r\n    def test_parallel(self):\r\n>       self.sampler = EnsembleSampler(self.nwalkers, self.ndim,\r\n                                       lnprob_gaussian, args=[self.icov],\r\n                                       threads=2)\r\nE       AttributeError: 'Tests' object has no attribute 'nwalkers'\r\n\r\ntests.py:236: AttributeError\r\n____________________________ Tests.test_pt_sampler _____________________________\r\n\r\nself = <emcee.tests.Tests object at 0x7f599409ef60>\r\n\r\n    def test_pt_sampler(self):\r\n        cutoff = 10.0\r\n>       self.sampler = PTSampler(self.ntemp, self.nwalkers, self.ndim,\r\n                                 LogLikeGaussian(self.icov),\r\n                                 LogPriorGaussian(self.icov, cutoff=cutoff))\r\nE       AttributeError: 'Tests' object has no attribute 'ntemp'\r\n\r\ntests.py:243: AttributeError\r\n_______________________________ Tests.test_blobs _______________________________\r\n\r\nself = <emcee.tests.Tests object at 0x7f59940a60f0>\r\n\r\n    def test_blobs(self):\r\n        lnprobfn = lambda p: (-0.5 * np.sum(p ** 2), np.random.rand())\r\n>       self.sampler = EnsembleSampler(self.nwalkers, self.ndim, lnprobfn)\r\nE       AttributeError: 'Tests' object has no attribute 'nwalkers'\r\n\r\ntests.py:252: AttributeError\r\n__________________________ Tests.test_run_mcmc_resume __________________________\r\n\r\nself = <emcee.tests.Tests object at 0x7f59940a9160>\r\n\r\n    def test_run_mcmc_resume(self):\r\n    \r\n>       self.sampler = s = EnsembleSampler(self.nwalkers, self.ndim,\r\n                                           lnprob_gaussian, args=[self.icov])\r\nE       AttributeError: 'Tests' object has no attribute 'nwalkers'\r\n\r\ntests.py:267: AttributeError\r\n=========================== 8 failed in 0.12 seconds ===========================\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/293", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/293/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/293/events", "html_url": "https://github.com/dfm/emcee/issues/293", "id": 409883104, "node_id": "MDU6SXNzdWU0MDk4ODMxMDQ=", "number": 293, "title": "Test  test_nan_lnprob failing ", "user": {"login": "sergiopasra", "id": 890104, "node_id": "MDQ6VXNlcjg5MDEwNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/890104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergiopasra", "html_url": "https://github.com/sergiopasra", "followers_url": "https://api.github.com/users/sergiopasra/followers", "following_url": "https://api.github.com/users/sergiopasra/following{/other_user}", "gists_url": "https://api.github.com/users/sergiopasra/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergiopasra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergiopasra/subscriptions", "organizations_url": "https://api.github.com/users/sergiopasra/orgs", "repos_url": "https://api.github.com/users/sergiopasra/repos", "events_url": "https://api.github.com/users/sergiopasra/events{/privacy}", "received_events_url": "https://api.github.com/users/sergiopasra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-13T16:13:29Z", "updated_at": "2019-10-02T14:57:28Z", "closed_at": "2019-10-02T14:57:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 2.2.1\r\n- platform: x86_64\r\n- installation method (pip/conda/source/other?): source\r\n\r\n**Problem description:**\r\nI'm building emcee with **python 3.7** and **numpy 1.16.1** in the Fedora build system\r\n\r\nhttps://koji.fedoraproject.org/koji/taskinfo?taskID=32454853\r\n\r\n### Expected behavior:\r\nThe tests run OK after installation\r\n\r\n### Actual behavior:\r\n\r\nERROR: emcee.tests.Tests.test_nan_lnprob\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.7/site-packages/nose/case.py\", line 197, in runTest\r\n    self.test(*self.arg)\r\n  File \"/builddir/build/BUILDROOT/python-emcee-2.2.1-12.fc30.x86_64/usr/lib/python3.7/site-packages/emcee/tests.py\", line 184, in test_nan_lnprob\r\n    self.check_sampler(p0=p0)\r\n  File \"/builddir/build/BUILDROOT/python-emcee-2.2.1-12.fc30.x86_64/usr/lib/python3.7/site-packages/emcee/tests.py\", line 112, in check_sampler\r\n    for i in self.sampler.sample(p0, iterations=N):\r\n  File \"/builddir/build/BUILDROOT/python-emcee-2.2.1-12.fc30.x86_64/usr/lib/python3.7/site-packages/emcee/ensemble.py\", line 198, in sample\r\n    lnprob, blobs = self._get_lnprob(p)\r\n  File \"/builddir/build/BUILDROOT/python-emcee-2.2.1-12.fc30.x86_64/usr/lib/python3.7/site-packages/emcee/ensemble.py\", line 364, in _get_lnprob\r\n    if np.any(np.isinf(p)):\r\nTypeError: ufunc 'isinf' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/292", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/292/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/292/events", "html_url": "https://github.com/dfm/emcee/issues/292", "id": 408287260, "node_id": "MDU6SXNzdWU0MDgyODcyNjA=", "number": 292, "title": "Plotting issue", "user": {"login": "mohit93725", "id": 41841860, "node_id": "MDQ6VXNlcjQxODQxODYw", "avatar_url": "https://avatars3.githubusercontent.com/u/41841860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mohit93725", "html_url": "https://github.com/mohit93725", "followers_url": "https://api.github.com/users/mohit93725/followers", "following_url": "https://api.github.com/users/mohit93725/following{/other_user}", "gists_url": "https://api.github.com/users/mohit93725/gists{/gist_id}", "starred_url": "https://api.github.com/users/mohit93725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mohit93725/subscriptions", "organizations_url": "https://api.github.com/users/mohit93725/orgs", "repos_url": "https://api.github.com/users/mohit93725/repos", "events_url": "https://api.github.com/users/mohit93725/events{/privacy}", "received_events_url": "https://api.github.com/users/mohit93725/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-08T19:14:45Z", "updated_at": "2019-11-24T16:11:14Z", "closed_at": "2019-11-24T16:11:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hii everyone,\r\nI want to know how to add colours in the contour plots and how to find out the value of minimized chi square of the best fit model parameters.\r\nThankyou", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/291", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/291/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/291/events", "html_url": "https://github.com/dfm/emcee/issues/291", "id": 406999883, "node_id": "MDU6SXNzdWU0MDY5OTk4ODM=", "number": 291, "title": "Feature Request: Progress Bar", "user": {"login": "Jwink3101", "id": 3073584, "node_id": "MDQ6VXNlcjMwNzM1ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3073584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jwink3101", "html_url": "https://github.com/Jwink3101", "followers_url": "https://api.github.com/users/Jwink3101/followers", "following_url": "https://api.github.com/users/Jwink3101/following{/other_user}", "gists_url": "https://api.github.com/users/Jwink3101/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jwink3101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jwink3101/subscriptions", "organizations_url": "https://api.github.com/users/Jwink3101/orgs", "repos_url": "https://api.github.com/users/Jwink3101/repos", "events_url": "https://api.github.com/users/Jwink3101/events{/privacy}", "received_events_url": "https://api.github.com/users/Jwink3101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-05T22:19:20Z", "updated_at": "2019-02-05T22:26:52Z", "closed_at": "2019-02-05T22:26:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is just a minor feature request. When running long simulation chains, it is very helpful to have a progress bar display. There are many out there (tqdm is probably the best) but you could easily include a few-line example one.\r\n\r\nI think this would be an easy addition that would make running a little bit nicer.\r\n\r\nIf there is interest, I will implement one and issue a pull-request but I do not want to do the work if there isn't interest", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/290", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/290/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/290/events", "html_url": "https://github.com/dfm/emcee/issues/290", "id": 406805190, "node_id": "MDU6SXNzdWU0MDY4MDUxOTA=", "number": 290, "title": "simultaneously fit various data sets with different parameters", "user": {"login": "mohit93725", "id": 41841860, "node_id": "MDQ6VXNlcjQxODQxODYw", "avatar_url": "https://avatars3.githubusercontent.com/u/41841860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mohit93725", "html_url": "https://github.com/mohit93725", "followers_url": "https://api.github.com/users/mohit93725/followers", "following_url": "https://api.github.com/users/mohit93725/following{/other_user}", "gists_url": "https://api.github.com/users/mohit93725/gists{/gist_id}", "starred_url": "https://api.github.com/users/mohit93725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mohit93725/subscriptions", "organizations_url": "https://api.github.com/users/mohit93725/orgs", "repos_url": "https://api.github.com/users/mohit93725/repos", "events_url": "https://api.github.com/users/mohit93725/events{/privacy}", "received_events_url": "https://api.github.com/users/mohit93725/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-05T14:21:56Z", "updated_at": "2019-11-24T16:10:47Z", "closed_at": "2019-11-24T16:10:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone,\r\nI am trying to use various data sets for different equations which shares some parameters. I want to know how to use emcee to do that.\r\nThankyou", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/289", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/289/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/289/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/289/events", "html_url": "https://github.com/dfm/emcee/issues/289", "id": 402424983, "node_id": "MDU6SXNzdWU0MDI0MjQ5ODM=", "number": 289, "title": "sampler.lnprobability is transposed in emcee3?", "user": {"login": "adrn", "id": 583379, "node_id": "MDQ6VXNlcjU4MzM3OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/583379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrn", "html_url": "https://github.com/adrn", "followers_url": "https://api.github.com/users/adrn/followers", "following_url": "https://api.github.com/users/adrn/following{/other_user}", "gists_url": "https://api.github.com/users/adrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrn/subscriptions", "organizations_url": "https://api.github.com/users/adrn/orgs", "repos_url": "https://api.github.com/users/adrn/repos", "events_url": "https://api.github.com/users/adrn/events{/privacy}", "received_events_url": "https://api.github.com/users/adrn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-23T20:53:00Z", "updated_at": "2019-09-18T13:51:08Z", "closed_at": "2019-09-18T13:50:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "tl;dr it looks like `sampler.lnprobability` is transposed in emcee 3 from what I would expect from emcee 2.\r\n\r\nSample code (copy pasta'd from the old docs):\r\n```python\r\nimport numpy as np\r\nimport emcee\r\n\r\ndef lnprob(x, ivar):\r\n    return -0.5 * np.sum(ivar * x ** 2)\r\n\r\nndim, nwalkers = 10, 100\r\nivar = 1. / np.random.rand(ndim)\r\np0 = [np.random.rand(ndim) for i in range(nwalkers)]\r\n\r\nsampler = emcee.EnsembleSampler(nwalkers, ndim, lnprob, args=[ivar])\r\n_ = sampler.run_mcmc(p0, 1000)\r\n\r\nprint(emcee.__version__)\r\nprint(sampler.chain.shape, sampler.lnprobability.shape)\r\n```\r\n\r\n## Output from emcee 2.2.1\r\n```\r\n2.2.1\r\n(100, 1000, 10) (100, 1000)\r\n```\r\n\r\n## Output from emcee 3.0rc2\r\n```\r\n3.0rc2\r\n(100, 1000, 10) (1000, 100)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/288", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/288/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/288/events", "html_url": "https://github.com/dfm/emcee/issues/288", "id": 401912150, "node_id": "MDU6SXNzdWU0MDE5MTIxNTA=", "number": 288, "title": "Tests return deprecation warnings", "user": {"login": "jacaseyclyde", "id": 7811666, "node_id": "MDQ6VXNlcjc4MTE2NjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/7811666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacaseyclyde", "html_url": "https://github.com/jacaseyclyde", "followers_url": "https://api.github.com/users/jacaseyclyde/followers", "following_url": "https://api.github.com/users/jacaseyclyde/following{/other_user}", "gists_url": "https://api.github.com/users/jacaseyclyde/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacaseyclyde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacaseyclyde/subscriptions", "organizations_url": "https://api.github.com/users/jacaseyclyde/orgs", "repos_url": "https://api.github.com/users/jacaseyclyde/repos", "events_url": "https://api.github.com/users/jacaseyclyde/events{/privacy}", "received_events_url": "https://api.github.com/users/jacaseyclyde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-22T19:13:27Z", "updated_at": "2019-09-18T13:50:32Z", "closed_at": "2019-09-18T13:50:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 3.0rc2\r\n- platform: linux\r\n- installation method (pip/conda/source/other?): source\r\n\r\n**Problem description:**\r\nThe unit/integration tests return several deprecation warnings. Worth noting that this is not a major issue, but it does give momentary pause when seeing the tests completed with lots of warnings. Package is still usable overall though.\r\n\r\n### Expected behavior:\r\nTests should return no deprecation warnings\r\n\r\n### Actual behavior:\r\nTests return deprecation warnings (many duplicated).\r\n\r\n### What have you tried so far?:\r\nRunning tests.\r\nUninstall/reinstall emcee (from source).\r\nUninstall/delete local repo/clone/reinstall (in that order).\r\n\r\n### Minimal example:\r\n\r\n(from terminal/console/your flavor of command prompt name)\r\n```\r\npy.test -v tests\r\n```\r\noutput (duplicate warnings/actual test results removed for brevity; all tests did pass):\r\n```\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.6.7, pytest-3.8.2, py-1.6.0, pluggy-0.7.1 -- /home/jacaseyclyde/src/MCOrbit/venv/bin/python3\r\ncachedir: .pytest_cache\r\nrootdir: /home/jacaseyclyde/src/emcee, inifile:\r\ncollected 79 items                                                             \r\n\r\n...\r\n\r\n=============================== warnings summary ===============================\r\n/home/jacaseyclyde/src/emcee/emcee/moves/mh.py:31: DeprecationWarning: invalid escape sequence \\l\r\n  \"\"\"\r\n\r\n/home/jacaseyclyde/src/emcee/emcee/moves/de.py:26: DeprecationWarning: invalid escape sequence \\s\r\n  \"\"\"\r\n\r\n/home/jacaseyclyde/src/emcee/emcee/utils.py:25: DeprecationWarning: 'chain' is deprecated. Use 'get_chain()' instead.\r\n  deprecation_warning(msg)\r\n/home/jacaseyclyde/src/emcee/emcee/utils.py:25: DeprecationWarning: 'lnprobability' is deprecated. Use 'get_log_prob()' instead.\r\n  deprecation_warning(msg)\r\n\r\n/home/jacaseyclyde/src/emcee/emcee/ensemble.py:259: DeprecationWarning: The 'thin' argument is deprecated. Use 'thin_by' instead.\r\n  deprecation_warning(\"The 'thin' argument is deprecated. \"\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n=================== 79 passed, 30 warnings in 134.61 seconds ===================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/287", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/287/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/287/events", "html_url": "https://github.com/dfm/emcee/issues/287", "id": 401867954, "node_id": "MDU6SXNzdWU0MDE4Njc5NTQ=", "number": 287, "title": "TypeError: cannot serialize '_io.TextIOWrapper' object with Python3", "user": {"login": "3fon3fonov", "id": 44244057, "node_id": "MDQ6VXNlcjQ0MjQ0MDU3", "avatar_url": "https://avatars1.githubusercontent.com/u/44244057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3fon3fonov", "html_url": "https://github.com/3fon3fonov", "followers_url": "https://api.github.com/users/3fon3fonov/followers", "following_url": "https://api.github.com/users/3fon3fonov/following{/other_user}", "gists_url": "https://api.github.com/users/3fon3fonov/gists{/gist_id}", "starred_url": "https://api.github.com/users/3fon3fonov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3fon3fonov/subscriptions", "organizations_url": "https://api.github.com/users/3fon3fonov/orgs", "repos_url": "https://api.github.com/users/3fon3fonov/repos", "events_url": "https://api.github.com/users/3fon3fonov/events{/privacy}", "received_events_url": "https://api.github.com/users/3fon3fonov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-22T17:15:34Z", "updated_at": "2019-02-06T23:16:45Z", "closed_at": "2019-02-06T23:16:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear Dan and all,\r\n\r\nI am posting here because I hope for some wisdom!\r\n\r\nMy RV fitting GUI code is here:\r\nhttps://github.com/3fon3fonov/trifon\r\n\r\n\r\nWhen I call emcee with Python3 using multiprocessing I am getting:\r\nTypeError: cannot serialize '_io.TextIOWrapper' object.\r\n\r\n(No Problems with Py2 or Py3 with only one thread)\r\n\r\nI read a lot on the stack-overflow about the problem and it seems quite clear that \r\nsome part of the object I am passing to the emcee is not  picklable.  \r\n\r\nIs there any hope to easily identify where exactly is the problem? \r\nDoes anybody ever, faced a similar problem?\r\n\r\nI guess the most important is my lnprob function:\r\n\r\n```\r\ndef lnprob(p,copied_obj,prior):\r\n\r\n    newparams=copied_obj.generate_newparams_for_mcmc(p)\r\n    copied_obj.overwrite_params(newparams)\r\n    if not (copied_obj.verify_params_with_bounds()):\r\n        return -np.inf \r\n    else:         \r\n        flag=copied_obj.fitting(fileinput=False, filename='Kep_input', minimize_loglik=True, amoeba_starts=0, outputfiles=[0,0,0],return_flag=True)\r\n        if (flag==1):   \r\n            return pr.choose_prior(p,prior)+copied_obj.fit_results.loglik\r\n        else:\r\n            return -np.inf\r\n```\r\n\r\nAnd then:\r\n\r\n`    sampler = CustomSampler(nwalkers, ndim, lnprob, args=[copied_obj,prior], threads = threads)`\r\n\r\nthe object is in RV_mod.py, class signal_fit()\r\n\r\nCurrently I am refurbishing the entire RV_mod.py to make it more flexible for the GUI,\r\nso any timely hints on how to avoid the \"TextIOWrapper\" error with emcee/Py3/multiproc. will be highly appreciated! \r\n\r\n\r\n- emcee version: 2.2.1\r\n- platform: Any linux I tried with Python3\r\n- installation method (pip/conda/source/other?): pip\r\n\r\n\r\nAll the best,\r\nTrifon\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/282", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/282/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/282/events", "html_url": "https://github.com/dfm/emcee/issues/282", "id": 383107035, "node_id": "MDU6SXNzdWUzODMxMDcwMzU=", "number": 282, "title": "Broken link on the RTD page", "user": {"login": "tmcclintock", "id": 10226392, "node_id": "MDQ6VXNlcjEwMjI2Mzky", "avatar_url": "https://avatars2.githubusercontent.com/u/10226392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmcclintock", "html_url": "https://github.com/tmcclintock", "followers_url": "https://api.github.com/users/tmcclintock/followers", "following_url": "https://api.github.com/users/tmcclintock/following{/other_user}", "gists_url": "https://api.github.com/users/tmcclintock/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmcclintock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmcclintock/subscriptions", "organizations_url": "https://api.github.com/users/tmcclintock/orgs", "repos_url": "https://api.github.com/users/tmcclintock/repos", "events_url": "https://api.github.com/users/tmcclintock/events{/privacy}", "received_events_url": "https://api.github.com/users/tmcclintock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-21T12:59:04Z", "updated_at": "2018-11-24T13:53:01Z", "closed_at": "2018-11-24T13:53:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the [RTD page](https://emcee.readthedocs.io/en/stable/) there are supposed to be two links to the quickstart documentation. One is in the sentence \"A more complete example is available in the [quickstart documentation](https://emcee.readthedocs.io/en/stable/user/quickstart).\" and the other is the [Quickstart link](https://emcee.readthedocs.io/en/stable/user/quickstart.html). The former link is missing a .html and goes to the maze page.\r\n\r\nI tried to fix this myself, but the current [docs/index.rst](https://github.com/dfm/emcee/blob/master/docs/index.rst) seems to be inconsistent with the RTD page (e.g. the former has a section heading \"How to use this guide\" while the RTD page as it labeled \"User Guide\"), so I'm not sure where RTD is building from.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/279", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/279/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/279/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/279/events", "html_url": "https://github.com/dfm/emcee/issues/279", "id": 365156773, "node_id": "MDU6SXNzdWUzNjUxNTY3NzM=", "number": 279, "title": "Added support for emcee in arviz", "user": {"login": "ColCarroll", "id": 2295568, "node_id": "MDQ6VXNlcjIyOTU1Njg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2295568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ColCarroll", "html_url": "https://github.com/ColCarroll", "followers_url": "https://api.github.com/users/ColCarroll/followers", "following_url": "https://api.github.com/users/ColCarroll/following{/other_user}", "gists_url": "https://api.github.com/users/ColCarroll/gists{/gist_id}", "starred_url": "https://api.github.com/users/ColCarroll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ColCarroll/subscriptions", "organizations_url": "https://api.github.com/users/ColCarroll/orgs", "repos_url": "https://api.github.com/users/ColCarroll/repos", "events_url": "https://api.github.com/users/ColCarroll/events{/privacy}", "received_events_url": "https://api.github.com/users/ColCarroll/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-09-29T18:42:35Z", "updated_at": "2019-08-06T18:28:42Z", "closed_at": "2019-03-29T13:02:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Wanted to let you know we have added support for emcee to the arviz library - see https://github.com/arviz-devs/arviz/pull/302 for a description of the change. \r\n\r\nRoughly, the plan is for arviz to replace plotting and diagnostics for pymc3 (so we do not have to rewrite it for pymc4), by converting data to a common data format (netCDF/xarray datasets), and then implementing all the plots and diagnostics on that object. emcee is the third library to have support (pymc3 and pystan), after hearing so many astronomers saying nice things about it at a conference.\r\n\r\nIn addition to the plots you can see in the pull request above, you can also calculate things like the effective sample size and the gelman rubin statistic. The `summary` function below shows a number of these.\r\n\r\nSome questions I had -\r\n-  we store `sample_stats` from pystan and pymc3. Is there a way to access whether a sample was accepted at a per-draw basis in `emcee`? \r\n- Are there particular diagnostics or plots you would like to see?\r\n\r\n```python\r\nimport arviz as az\r\nfrom arviz.tests import helpers\r\n\r\nsampler = helpers.emcee_linear_model(None, 500, 10)  # this is the sampler from http://dfm.io/emcee/current/user/line/\r\n\r\n# This converter turns the data into a netCDF object that can be serialized and shared\r\ndata = az.from_emcee(sampler, var_names=['ln(f)', 'b', 'm'])\r\n\r\n# all arviz functions should work with this object\r\naz.summary(data).to_dataframe()\r\n```\r\n\r\n<table border=\"1\" class=\"dataframe\">\r\n  <thead>\r\n    <tr style=\"text-align: right;\">\r\n      <th></th>\r\n      <th>ln(f)</th>\r\n      <th>b</th>\r\n      <th>m</th>\r\n    </tr>\r\n    <tr>\r\n      <th>metric</th>\r\n      <th></th>\r\n      <th></th>\r\n      <th></th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th>mean</th>\r\n      <td>-0.901523</td>\r\n      <td>4.186736</td>\r\n      <td>-0.493168</td>\r\n    </tr>\r\n    <tr>\r\n      <th>standard deviation</th>\r\n      <td>0.083640</td>\r\n      <td>0.387793</td>\r\n      <td>0.146651</td>\r\n    </tr>\r\n    <tr>\r\n      <th>mc error</th>\r\n      <td>0.002052</td>\r\n      <td>0.008238</td>\r\n      <td>0.003727</td>\r\n    </tr>\r\n    <tr>\r\n      <th>hpd 3.00%</th>\r\n      <td>-1.061138</td>\r\n      <td>3.448212</td>\r\n      <td>-0.759357</td>\r\n    </tr>\r\n    <tr>\r\n      <th>hpd 97.00%</th>\r\n      <td>-0.742526</td>\r\n      <td>4.923531</td>\r\n      <td>-0.201992</td>\r\n    </tr>\r\n    <tr>\r\n      <th>effective samples</th>\r\n      <td>1429.248983</td>\r\n      <td>1408.863122</td>\r\n      <td>1287.373414</td>\r\n    </tr>\r\n    <tr>\r\n      <th>gelman-rubin statistic</th>\r\n      <td>1.030000</td>\r\n      <td>1.030000</td>\r\n      <td>1.040000</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/278", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/278/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/278/events", "html_url": "https://github.com/dfm/emcee/issues/278", "id": 360654928, "node_id": "MDU6SXNzdWUzNjA2NTQ5Mjg=", "number": 278, "title": "Parameter full_output missing from autocorr()", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-16T16:28:54Z", "updated_at": "2018-09-27T13:48:26Z", "closed_at": "2018-09-27T13:48:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the master branch the `autocorr()` function mentions a `full_output` parameter that is not there.\r\n\r\nhttps://github.com/dfm/emcee/blob/f9f2f5e5fd494eb50474d5d4471996424a1c44d4/emcee/autocorr.py#L72", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/277", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/277/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/277/events", "html_url": "https://github.com/dfm/emcee/issues/277", "id": 360358873, "node_id": "MDU6SXNzdWUzNjAzNTg4NzM=", "number": 277, "title": "[0.3rc1] Tests missing in pypi tarball", "user": {"login": "olebole", "id": 397223, "node_id": "MDQ6VXNlcjM5NzIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/397223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olebole", "html_url": "https://github.com/olebole", "followers_url": "https://api.github.com/users/olebole/followers", "following_url": "https://api.github.com/users/olebole/following{/other_user}", "gists_url": "https://api.github.com/users/olebole/gists{/gist_id}", "starred_url": "https://api.github.com/users/olebole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olebole/subscriptions", "organizations_url": "https://api.github.com/users/olebole/orgs", "repos_url": "https://api.github.com/users/olebole/repos", "events_url": "https://api.github.com/users/olebole/events{/privacy}", "received_events_url": "https://api.github.com/users/olebole/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2805190, "node_id": "MDU6TGFiZWwyODA1MTkw", "url": "https://api.github.com/repos/dfm/emcee/labels/Feature%20Request", "name": "Feature Request", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-14T15:47:07Z", "updated_at": "2019-11-03T14:06:10Z", "closed_at": "2019-11-03T12:24:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am the Debian maintainer of the [emcee package](https://tracker.debian.org/pkg/emcee), and I am currently checking the latest RC for an update. I use the source package from Pypi to create the Debian package.\r\n\r\nTo ensure that everything works, we usually try to run the tests both at package build time, and as CI on the installed package whenever one of the dependencies changes.\r\n\r\nIn version 3.0, the tests were moved from `emcee/tests` to `tests/` in the package root in the github repository; however they are not included in the Pypi package, so that I can't run the tests anymore.\r\n\r\nWould it be possible to to add the `tests` subdir to the pypi package as well?\r\n\r\nThanks!\r\n\r\nBest regards\r\n\r\nOle", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/276", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/276/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/276/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/276/events", "html_url": "https://github.com/dfm/emcee/issues/276", "id": 355818830, "node_id": "MDU6SXNzdWUzNTU4MTg4MzA=", "number": 276, "title": "run_mcmc overwrites initial state array", "user": {"login": "adrn", "id": 583379, "node_id": "MDQ6VXNlcjU4MzM3OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/583379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrn", "html_url": "https://github.com/adrn", "followers_url": "https://api.github.com/users/adrn/followers", "following_url": "https://api.github.com/users/adrn/following{/other_user}", "gists_url": "https://api.github.com/users/adrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrn/subscriptions", "organizations_url": "https://api.github.com/users/adrn/orgs", "repos_url": "https://api.github.com/users/adrn/repos", "events_url": "https://api.github.com/users/adrn/events{/privacy}", "received_events_url": "https://api.github.com/users/adrn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2805191, "node_id": "MDU6TGFiZWwyODA1MTkx", "url": "https://api.github.com/repos/dfm/emcee/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "dfm", "id": 350282, "node_id": "MDQ6VXNlcjM1MDI4Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/350282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfm", "html_url": "https://github.com/dfm", "followers_url": "https://api.github.com/users/dfm/followers", "following_url": "https://api.github.com/users/dfm/following{/other_user}", "gists_url": "https://api.github.com/users/dfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfm/subscriptions", "organizations_url": "https://api.github.com/users/dfm/orgs", "repos_url": "https://api.github.com/users/dfm/repos", "events_url": "https://api.github.com/users/dfm/events{/privacy}", "received_events_url": "https://api.github.com/users/dfm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dfm", "id": 350282, "node_id": "MDQ6VXNlcjM1MDI4Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/350282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfm", "html_url": "https://github.com/dfm", "followers_url": "https://api.github.com/users/dfm/followers", "following_url": "https://api.github.com/users/dfm/following{/other_user}", "gists_url": "https://api.github.com/users/dfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfm/subscriptions", "organizations_url": "https://api.github.com/users/dfm/orgs", "repos_url": "https://api.github.com/users/dfm/repos", "events_url": "https://api.github.com/users/dfm/events{/privacy}", "received_events_url": "https://api.github.com/users/dfm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-08-31T02:37:10Z", "updated_at": "2018-09-27T13:48:46Z", "closed_at": "2018-09-27T13:48:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**General information:**\r\n\r\n- emcee version: 3.0rc1\r\n- platform: Mac OS X\r\n- installation method (pip/conda/source/other?): source\r\n\r\n**Problem description:**\r\n\r\n`sampler.run_mcmc(p0)` updates in-place the values in `p0`\r\n\r\nExample:\r\n\r\n```python\r\nimport numpy as np\r\nimport emcee\r\nrnd = np.random.seed(42)\r\n\r\ndef ll(x):\r\n    return -0.5 * np.sum(x**2)\r\n\r\nnwalkers = 64\r\np0 = np.random.normal(size=(nwalkers, 1))\r\nprint(p0[:4])\r\nprint()\r\n\r\nsampler = emcee.EnsembleSampler(nwalkers, 1, ll)\r\n_ = sampler.run_mcmc(p0, 100)\r\nprint(p0[:4])\r\n```\r\n\r\nOutputs:\r\n```\r\n[[ 0.49671415]\r\n [-0.1382643 ]\r\n [ 0.64768854]\r\n [ 1.52302986]]\r\n\r\n[[-0.95042763]\r\n [-1.45356148]\r\n [-0.42794939]\r\n [ 1.24097786]]\r\n```\r\n\r\nDo you recommend doing\r\n```python\r\n_ = sampler.run_mcmc(p0.copy(), 100)\r\n```\r\ninstead when passing in arrays, or is this a bug?\r\n\r\n<3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/275", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/275/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/275/events", "html_url": "https://github.com/dfm/emcee/issues/275", "id": 350578906, "node_id": "MDU6SXNzdWUzNTA1Nzg5MDY=", "number": 275, "title": "Confused by definition of DEMove()", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2805191, "node_id": "MDU6TGFiZWwyODA1MTkx", "url": "https://api.github.com/repos/dfm/emcee/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-14T20:08:41Z", "updated_at": "2018-09-27T14:05:54Z", "closed_at": "2018-09-27T14:05:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "(Sorry for flooding the repo with questions, please let me know if this is not the place for this)\r\n\r\nI'm trying to understand the new [`DEMove()` class](https://emcee.readthedocs.io/en/latest/user/moves/#emcee.moves.DEMove) based on the [Nelson et al. (2014)](http://adsabs.harvard.edu/abs/2014ApJS..210...11N\r\n) article, which in turn is based on the [Ter Braak (2006)](https://link.springer.com/article/10.1007/s11222-006-8769-1) article. I'm following the definition of the displacement vector, and I can see the following:\r\n\r\n* Braak: `x_p = x_i + gamma_0 * Delta(x) + N` ; Eq (2)\r\n* Nelson: `x_p = x_i + gamma_0 * (1 + N) * Delta(x)` ; Eq (10)\r\n* emcee: `x_p = x_i + (1 + gamma_0 * N) * Delta(x)` ; [L49](https://github.com/dfm/emcee/blob/8a473d577a767254e378e04e153b829dfbee1916/emcee/moves/de.py#L49)\r\n\r\n(where `N` is a draw from a Gaussian) None of these three definitions match as far as I cant tell, which clearly means I'm not understanding something obvious here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/274", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/274/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/274/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/274/events", "html_url": "https://github.com/dfm/emcee/issues/274", "id": 350506110, "node_id": "MDU6SXNzdWUzNTA1MDYxMTA=", "number": 274, "title": "Update sampler \"on the fly\"?", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 719014526, "node_id": "MDU6TGFiZWw3MTkwMTQ1MjY=", "url": "https://api.github.com/repos/dfm/emcee/labels/Question", "name": "Question", "color": "bfd4f2", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-14T16:34:55Z", "updated_at": "2018-09-14T21:08:45Z", "closed_at": "2018-09-14T21:08:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [Nelson et al. (2014)](http://adsabs.harvard.edu/abs/2014ApJS..210...11N) article (the source for the the [DEMove() class](https://emcee.readthedocs.io/en/latest/user/moves/#emcee.moves.DEMove)) discusses a strategy to achieve reasonable acceptance ratios:\r\n\r\n> Since values of \u03b3 close to 1 can be useful for multimodal posterior distributions, it can be advantageous to occasionally choose \u03b3 near unity. However, most trial states should use a smaller value of \u03b3 to achieve a desirable acceptance ratio. Therefore, we arbitrarily set \u03b3 to 1 every 100 generations.\r\n> The value of \u03b3 can be updated after every generation throughout a RUN DMC simulation. We aim for an acceptance fraction of 0.25. If too few states are being accepted (<0.2), \u03b3 is scaled by 0.9 in the hope that smaller jumps will lead to a higher acceptance fraction. If the acceptance fraction exceeds 0.31, then \u03b3 is scaled by 1.1 to allow for larger jumps (...) In DEMCMC, this procedure references information from only one previous generation of states, so our algorithm is still Markov for each generation. \r\n\r\nThis involves updating the sampler mid-run. Can this be done with `emcee`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/273", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/273/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/273/events", "html_url": "https://github.com/dfm/emcee/issues/273", "id": 350158455, "node_id": "MDU6SXNzdWUzNTAxNTg0NTU=", "number": 273, "title": "Does emcee reuse likelihood values for a repeated parameters vector?", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-08-13T19:19:50Z", "updated_at": "2018-08-14T15:08:29Z", "closed_at": "2018-08-14T15:08:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is not an issue, rather a question.\r\n\r\nMy likelihood is particularly costly to obtain. Since the sampler necessarily visits the same point in parameter space more than once it would be very convenient if the sampler, instead of processing the full likelihood every time, took the value from the stored array of values.\r\n\r\nDoes `emcee` do this already? If not, is there a specific reason for not doing it, or it just isn't implemented?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/272", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/272/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/272/events", "html_url": "https://github.com/dfm/emcee/issues/272", "id": 350094979, "node_id": "MDU6SXNzdWUzNTAwOTQ5Nzk=", "number": 272, "title": "Shape of new trace is off in integrated_time()?", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-13T16:09:05Z", "updated_at": "2018-08-13T17:08:12Z", "closed_at": "2018-08-13T17:08:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 3.0rc1\r\n- platform: Ubuntu 16.04\r\n- installation method (pip/conda/source/other?): source\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior:\r\nThe latest release candidate returns a `sampler.chain` object of shape `(nwalkers, nsteps, ndim)`,  but the `autocorr.integrated_time()` [function](https://github.com/dfm/emcee/blob/c8854c429981c8951580aff77361db5e02b2f735/emcee/autocorr.py#L49) expects an object of shape `(nsteps, nwalkers, ndim)`\r\n\r\nDan mentioned [here](https://github.com/dfm/emcee/issues/265#issuecomment-408220792) that the shape of the chain was changed in the new release, but I'm not understanding this disagreement.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/271", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/271/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/271/events", "html_url": "https://github.com/dfm/emcee/issues/271", "id": 349282678, "node_id": "MDU6SXNzdWUzNDkyODI2Nzg=", "number": 271, "title": "FloatingPointError: invalid value encountered in true_divide", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-09T20:42:30Z", "updated_at": "2018-08-10T01:48:27Z", "closed_at": "2018-08-10T01:48:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: [master branch, 9th of Aug](https://github.com/dfm/emcee/tree/2b171ae704758a3ffff5bb6d3b95b8ad843433c1)\r\n- platform: Ubuntu 16.04\r\n- installation method (pip/conda/source/other?): source\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior:\r\nObtain the autocorrelation with `sampler.get_autocorr_time(tol=0)`\r\n\r\n### Actual behavior:\r\nResults in `FloatingPointError: invalid value encountered in true_divide` if `acf[0]` is zero.\r\n\r\n### What have you tried so far?:\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\nimport emcee\r\n\r\n# sample code goes here...\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/269", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/269/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/269/events", "html_url": "https://github.com/dfm/emcee/issues/269", "id": 348780483, "node_id": "MDU6SXNzdWUzNDg3ODA0ODM=", "number": 269, "title": "FloatingPointError: invalid value encountered in subtract", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-08T15:36:11Z", "updated_at": "2018-08-12T17:06:25Z", "closed_at": "2018-08-12T17:06:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 2.2.1 (numpy 1.14.5, Python 2.7.15)\r\n- platform: elementary OS Loki (based on Ubuntu 16.04) 64 bit\r\n- installation method (pip/conda/source/other?): conda\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior:\r\nNot this error.\r\n\r\n### Actual behavior:\r\nI get a `FloatingPointError: invalid value encountered in subtract` in [this line](https://github.com/dfm/emcee/blob/67c8f79928716a0c65e1e59f96fb845600ea9c2a/emcee/ensemble.py#L335) of the old `ensemple.py`. It arises from `newlnprob - lnprob0` where these arrays look like:\r\n\r\n```\r\n> newlnprob\r\narray([-4948.91638591,           -inf, -4672.16752718, -4973.36611267,\r\n                 -inf, -4847.46764344, -4803.06307637,           -inf,\r\n                 -inf, -4805.5986002 , -4677.69154104, -4733.59151249,\r\n       -4831.54153719, -4797.05214905, -4842.05819292, -4728.12722244,\r\n                 -inf, -4923.49027218, -4879.18207818,           -inf,\r\n       -4790.03177514, -4802.55740805, -4872.55457856,           -inf,\r\n       -4773.87951696])\r\n> lnprob0\r\narray([-4964.73310394,           -inf, -4711.26571368, -4970.54669421,\r\n                 -inf, -4820.70787686, -4835.9471765 ,           -inf,\r\n       -4931.87203438, -4754.92616193, -4761.74519579, -4873.98569949,\r\n       -4836.12453068, -4796.68892564, -4987.50754428, -4714.68606488,\r\n                 -inf, -4769.82785569, -4943.65543064, -4756.48557144,\r\n       -4811.02015636, -4873.93479207, -4966.71378152, -4923.9794561 ,\r\n       -4808.14407535])\r\n```\r\n\r\n### What have you tried so far?:\r\nIf I just copy/paste these arrays into a new file:\r\n\r\n```\r\nimport numpy as np\r\n\r\nnewlnprob = np.array([-4948.91638591,           -np.inf, -4672.16752718, -4973.36611267,\r\n                 -np.inf, -4847.46764344, -4803.06307637,           -np.inf,\r\n                 -np.inf, -4805.5986002 , -4677.69154104, -4733.59151249,\r\n       -4831.54153719, -4797.05214905, -4842.05819292, -4728.12722244,\r\n                 -np.inf, -4923.49027218, -4879.18207818,           -np.inf,\r\n       -4790.03177514, -4802.55740805, -4872.55457856,           -np.inf,\r\n       -4773.87951696])\r\nlnprob0 = np.array([-4964.73310394,           -np.inf, -4711.26571368, -4970.54669421,\r\n                 -np.inf, -4820.70787686, -4835.9471765 ,           -np.inf,\r\n       -4931.87203438, -4754.92616193, -4761.74519579, -4873.98569949,\r\n       -4836.12453068, -4796.68892564, -4987.50754428, -4714.68606488,\r\n                 -np.inf, -4769.82785569, -4943.65543064, -4756.48557144,\r\n       -4811.02015636, -4873.93479207, -4966.71378152, -4923.9794561 ,\r\n       -4808.14407535])\r\n\r\nprint(newlnprob - lnprob0)\r\n [  15.81671803           nan   39.0981865    -2.81941846           nan\r\n  -26.75976658   32.88410013           nan          -inf  -50.67243827\r\n   84.05365475  140.394187      4.58299349   -0.36322341  145.44935136\r\n  -13.44115756           nan -153.66241649   64.47335246          -inf\r\n   20.98838122   71.37738402   94.15920296          -inf   34.26455839]\r\n```\r\n\r\nI no longer get the error. If I mask the `-inf` elements in `newlnprob` with `np.nan`  the error no longer appears.\r\n\r\nThis **only** happens if I use the `emcee.utils.sample_ball()` function. If I generate my own sample ball, I do not run into this error.\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\nimport emcee\r\n\r\n# sample code goes here...\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/267", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/267/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/267/events", "html_url": "https://github.com/dfm/emcee/issues/267", "id": 347208014, "node_id": "MDU6SXNzdWUzNDcyMDgwMTQ=", "number": 267, "title": "Is the integrated autocorrelation time off by a factor 2?", "user": {"login": "lciti", "id": 14928209, "node_id": "MDQ6VXNlcjE0OTI4MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/14928209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lciti", "html_url": "https://github.com/lciti", "followers_url": "https://api.github.com/users/lciti/followers", "following_url": "https://api.github.com/users/lciti/following{/other_user}", "gists_url": "https://api.github.com/users/lciti/gists{/gist_id}", "starred_url": "https://api.github.com/users/lciti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lciti/subscriptions", "organizations_url": "https://api.github.com/users/lciti/orgs", "repos_url": "https://api.github.com/users/lciti/repos", "events_url": "https://api.github.com/users/lciti/events{/privacy}", "received_events_url": "https://api.github.com/users/lciti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-02T23:24:22Z", "updated_at": "2019-03-28T12:59:56Z", "closed_at": "2018-08-02T23:32:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 06aa307 (current)\r\n\r\n**Problem description:**\r\nAccording to eq 3.16 of [Sokal's document](http://www.stat.unc.edu/faculty/cji/Sokal.pdf), which is given as reference in `emcee/emcee/autocorr.py`, the integrated autocorrelation time should be computed as:\r\n![\\tau = \\frac12 \\sum_{t=-M}^{M} \\hat\\rho(t)](https://user-images.githubusercontent.com/14928209/43616120-de56cdec-96b2-11e8-8d99-9d1fc23f474a.png)\r\n\r\nUnless I am missing something, owing to the symmetry of \u03c1(t), one can code this expression as:\r\n`taus = np.cumsum(f) - 0.5`\r\nwhile the current implementation is: \r\n`taus = 2.0*np.cumsum(f) - 1.0`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/266", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/266/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/266/events", "html_url": "https://github.com/dfm/emcee/issues/266", "id": 346638452, "node_id": "MDU6SXNzdWUzNDY2Mzg0NTI=", "number": 266, "title": "Discrete parameters in emcee", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-01T14:59:20Z", "updated_at": "2018-08-01T16:24:06Z", "closed_at": "2018-08-01T16:24:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm having an issue sampling with `emcee` for a mix of discrete and continuous parameters. I currently follow a strategy very similar to that described in #150 by @lfloeer.\r\n\r\nThe thing is, I [opened a question](https://stats.stackexchange.com/questions/360076/discrete-and-continuos-parameters-in-mcmc-sampler) at *stats.stackexchange.com* about this yesterday, and I was advised that this approach was incorrect. I pointed the above issue to Eric (the *stats* user who responded this) and now he is also interested in why/how this works.\r\n\r\nIn my case, what I do is to \"push\" the sampled values for the discrete parameters to the closest \"valid\" value that parameter is allowed to have, before passing it to the likelihood (this is described in some more detail in the *stats* question linked above).\r\n\r\nIs this a proper approach for handling discrete parameters?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/265", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/265/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/265/events", "html_url": "https://github.com/dfm/emcee/issues/265", "id": 344941380, "node_id": "MDU6SXNzdWUzNDQ5NDEzODA=", "number": 265, "title": "Obtaining different values with autocorr.integrated_time()", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-26T17:44:56Z", "updated_at": "2018-07-26T20:30:37Z", "closed_at": "2018-07-26T20:30:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 2.2.1\r\n- platform: Ubuntu 16.04 64 bit\r\n- installation method (pip/conda/source/other?): conda\r\n\r\n**Problem description:**\r\n\r\nI'm getting different results when using `autocorr.integrated_time()` on an `emcee` trace for multiple parameters.\r\n\r\n### Expected behavior:\r\n\r\nThe same values should be returned with both methods.\r\n\r\n### Actual behavior:\r\n\r\nValues are not equal.\r\n\r\n### What have you tried so far?:\r\n\r\n### Minimal example:\r\n\r\nMy code is too large to post a complete working example here, but I believe the issue can be understood either way.\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\nimport emcee\r\n\r\n# Define sampler\r\nsampler = emcee.EnsembleSampler(...)\r\n# I'm using ndim=6\r\nemcee_trace = sampler.chain.reshape(-1, ndim).T\r\n# emcee_trace.shape = (6, nwalkers*nsteps)\r\n\r\n# Checking autocorrelation with two methods.\r\n# I use c=5 otherwise it fails with my actual data:\r\nm1 = emcee.autocorr.integrated_time(emcee_trace.T, c=5)\r\nm2 = [emcee.autocorr.integrated_time(_, c=5) for _ in emcee_trace]\r\n\r\n# m1\r\narray([ 630.31740613, 1427.70336924,  684.47860593, 1043.86558911,\r\n        613.30684834,  356.69468562])\r\n# m2\r\n[851.2933101013339, 1427.7033692352315, 1034.205460451514, 1142.0326324415114,\r\n821.0257568805758, 577.6751150976922]\r\n```\r\n\r\nI find it strange that the second value is exactly equal in both cases, but none other. Shouldn't they all be equal?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/264", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/264/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/264/events", "html_url": "https://github.com/dfm/emcee/issues/264", "id": 343878955, "node_id": "MDU6SXNzdWUzNDM4Nzg5NTU=", "number": 264, "title": "Add a docstring for `State`/add to docs", "user": {"login": "eteq", "id": 346587, "node_id": "MDQ6VXNlcjM0NjU4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/346587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eteq", "html_url": "https://github.com/eteq", "followers_url": "https://api.github.com/users/eteq/followers", "following_url": "https://api.github.com/users/eteq/following{/other_user}", "gists_url": "https://api.github.com/users/eteq/gists{/gist_id}", "starred_url": "https://api.github.com/users/eteq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eteq/subscriptions", "organizations_url": "https://api.github.com/users/eteq/orgs", "repos_url": "https://api.github.com/users/eteq/repos", "events_url": "https://api.github.com/users/eteq/events{/privacy}", "received_events_url": "https://api.github.com/users/eteq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-24T04:18:42Z", "updated_at": "2018-08-08T07:43:46Z", "closed_at": "2018-08-08T07:43:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think this is pretty trivial (and might be able to get around to it myself), but want to make sure there's not some reason to avoid this (like `State` is still in flux).\r\n\r\nSince `State` is now potentially important as the return (and possible input) of `sample`/`run_mcmc`, it probably makes sense to have it documented and get an ``autoclass`` somewhere in the docs, right?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/260", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/260/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/260/events", "html_url": "https://github.com/dfm/emcee/issues/260", "id": 342815522, "node_id": "MDU6SXNzdWUzNDI4MTU1MjI=", "number": 260, "title": "Trying to run emcee for a fixed amount of time: MemoryError for large nsteps", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-19T17:11:09Z", "updated_at": "2018-08-05T13:32:44Z", "closed_at": "2018-08-03T20:02:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 2.2.1\r\n- platform: elementary OS 0.4.1 64 bit (based on Ubuntu 16.04)\r\n- installation method (pip/conda/source/other?): conda\r\n\r\n**Problem description:**\r\n\r\nNot really a problem, perhaps a feature request? I'm attempting to set up `emcee` so that instead of running for `nsteps`, it runs for a **given amount of time**. This is a more reasonable approach for me when I have to run my code in a cluster and I have a maximum allocated time I want to take advantage of.\r\n\r\nI tried setting a very large number for `nsteps` (so that `emcee` would run for and \"infinite\" amount of time) and then run the sampler inside a `for` checking if the maximum time has been elapsed. When it has, I break out.\r\n\r\n### Expected behavior:\r\n\r\nI would expect to be able to set a value like `nsteps=1000000000` to approximate an \"infinite\" chain, and then set it loose as described above.\r\n\r\n### Actual behavior:\r\n\r\nI get a `MemoryError` for `nwalkers=200` and `nsteps>100000`.\r\n\r\n### What have you tried so far?:\r\n\r\nStarted with a very large value for `nsteps` and reduced it until it worked.\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\nimport emcee\r\nimport time as t\r\n\r\nmax_secs = 3600.\r\nnsteps = 100000\r\n\r\nnwalkers, ndim, nburn = 200, 6, 500\r\nsampler = emcee.EnsembleSampler(nwalkers, ndim, log_posterior)\r\n\r\n# Burn-in\r\ns = t.time()\r\nstarting_guesses = random_population()\r\npos, prob, state = sampler.sample(starting_guesses, iterations=nburn)\r\nelapsed = t.time() - s\r\n\r\ns = t.time()\r\nfor i, result in enumerate(sampler.sample(pos, lnprob0=prob, rstate0=state, iterations=nsteps)):\r\n    elapsed += t.time() - s\r\n    if elapsed >= max_secs:\r\n        break\r\n    s = t.time()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/259", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/259/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/259/events", "html_url": "https://github.com/dfm/emcee/issues/259", "id": 339987826, "node_id": "MDU6SXNzdWUzMzk5ODc4MjY=", "number": 259, "title": "Threaded Processes not Killed After Sampling", "user": {"login": "spencerscott917", "id": 30123474, "node_id": "MDQ6VXNlcjMwMTIzNDc0", "avatar_url": "https://avatars0.githubusercontent.com/u/30123474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spencerscott917", "html_url": "https://github.com/spencerscott917", "followers_url": "https://api.github.com/users/spencerscott917/followers", "following_url": "https://api.github.com/users/spencerscott917/following{/other_user}", "gists_url": "https://api.github.com/users/spencerscott917/gists{/gist_id}", "starred_url": "https://api.github.com/users/spencerscott917/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spencerscott917/subscriptions", "organizations_url": "https://api.github.com/users/spencerscott917/orgs", "repos_url": "https://api.github.com/users/spencerscott917/repos", "events_url": "https://api.github.com/users/spencerscott917/events{/privacy}", "received_events_url": "https://api.github.com/users/spencerscott917/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-10T20:06:11Z", "updated_at": "2018-07-10T20:44:25Z", "closed_at": "2018-07-10T20:44:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 2.2.1\r\n- platform: Linux\r\n- installation method (pip/conda/source/other?): conda\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior:\r\nAfter multithreaded sampler finishes running, python processes used to be killed\r\n\r\n### Actual behavior:\r\nAfter multithreaded sampler finished running, processes are left open\r\n\r\n### What have you tried so far?:\r\nI have consulted the documentation and searched GitHub for similar issues or fixes.\r\n\r\n### Minimal example:\r\n\r\nHere is how I am implementing an emcee sampler within my code. When there are multiple threads, it starts new python processes as expected, but the processes are never killed when the sampler \r\n\r\n```python\r\nimport emcee\r\n\r\nsampler = emcee.EnsembleSampler(nwalkers, ndim, lnprob, threads=nthreads)\r\npos, prob, state = sampler.run_mcmc(p0, 1000) # p0 contains the initial walker positions\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/258", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/258/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/258/events", "html_url": "https://github.com/dfm/emcee/issues/258", "id": 335359781, "node_id": "MDU6SXNzdWUzMzUzNTk3ODE=", "number": 258, "title": "Make a new release", "user": {"login": "MaxNoe", "id": 5488440, "node_id": "MDQ6VXNlcjU0ODg0NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5488440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaxNoe", "html_url": "https://github.com/MaxNoe", "followers_url": "https://api.github.com/users/MaxNoe/followers", "following_url": "https://api.github.com/users/MaxNoe/following{/other_user}", "gists_url": "https://api.github.com/users/MaxNoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaxNoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaxNoe/subscriptions", "organizations_url": "https://api.github.com/users/MaxNoe/orgs", "repos_url": "https://api.github.com/users/MaxNoe/repos", "events_url": "https://api.github.com/users/MaxNoe/events{/privacy}", "received_events_url": "https://api.github.com/users/MaxNoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-25T11:05:42Z", "updated_at": "2018-06-25T15:22:41Z", "closed_at": "2018-06-25T13:41:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As we have an upcoming publication using 3.0dev, it would be great to have a fixed version we can cite.\r\n\r\nCould you release a 3.0-rc1 or similar? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/256", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/256/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/256/events", "html_url": "https://github.com/dfm/emcee/issues/256", "id": 328105056, "node_id": "MDU6SXNzdWUzMjgxMDUwNTY=", "number": 256, "title": "v3.0.0dev0 blobs failing when different shapes", "user": {"login": "steven-murray", "id": 1272030, "node_id": "MDQ6VXNlcjEyNzIwMzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1272030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steven-murray", "html_url": "https://github.com/steven-murray", "followers_url": "https://api.github.com/users/steven-murray/followers", "following_url": "https://api.github.com/users/steven-murray/following{/other_user}", "gists_url": "https://api.github.com/users/steven-murray/gists{/gist_id}", "starred_url": "https://api.github.com/users/steven-murray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steven-murray/subscriptions", "organizations_url": "https://api.github.com/users/steven-murray/orgs", "repos_url": "https://api.github.com/users/steven-murray/repos", "events_url": "https://api.github.com/users/steven-murray/events{/privacy}", "received_events_url": "https://api.github.com/users/steven-murray/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2805191, "node_id": "MDU6TGFiZWwyODA1MTkx", "url": "https://api.github.com/repos/dfm/emcee/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-05-31T11:43:16Z", "updated_at": "2020-07-11T20:57:57Z", "closed_at": "2018-06-18T17:40:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: v3.0.0dev0\r\n- platform: any\r\n- installation method (pip/conda/source/other?): any\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior:\r\nI expect that returning blobs of various shapes should work.\r\n\r\n### Actual behavior:\r\nAn error is raised: ``ValueError: setting an array element with a sequence.``\r\n\r\n### What have you tried so far?:\r\nWhen passing ``blobs_dtype`` with shapes for each returned blob, it works fine.\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\nimport emcee\r\n\r\nimport numpy as np\r\ndef lnl(p):\r\n    return p[0], 1.0, np.array([1,2,3])\r\nsampler = emcee.EnsembleSampler(\r\n    nwalkers = 10,\r\n    ndim = 2,\r\n    log_prob_fn = lnl\r\n)\r\n\r\np0 = np.random.normal(size=(10,2))\r\nfor sample in sampler.sample(p0, iterations=10):\r\n    continue\r\n```\r\nThe offending line is L394 of ``ensemble.py``: ``dt = np.atleast_1d(blob[0]).dtype``. This will work as intended (I think), if it is instead: ``dt = [(np.atleast_1d(b).dtype, np.atleast_1d(b).shape) for b in blob[0]]``, though there might need to be a check for 1-dimensional arrays.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/255", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/255/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/255/events", "html_url": "https://github.com/dfm/emcee/issues/255", "id": 319196868, "node_id": "MDU6SXNzdWUzMTkxOTY4Njg=", "number": 255, "title": "Exception while calling your likelihood function", "user": {"login": "svretina", "id": 38790623, "node_id": "MDQ6VXNlcjM4NzkwNjIz", "avatar_url": "https://avatars2.githubusercontent.com/u/38790623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svretina", "html_url": "https://github.com/svretina", "followers_url": "https://api.github.com/users/svretina/followers", "following_url": "https://api.github.com/users/svretina/following{/other_user}", "gists_url": "https://api.github.com/users/svretina/gists{/gist_id}", "starred_url": "https://api.github.com/users/svretina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svretina/subscriptions", "organizations_url": "https://api.github.com/users/svretina/orgs", "repos_url": "https://api.github.com/users/svretina/repos", "events_url": "https://api.github.com/users/svretina/events{/privacy}", "received_events_url": "https://api.github.com/users/svretina/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-01T13:25:50Z", "updated_at": "2018-05-02T23:17:12Z", "closed_at": "2018-05-02T23:17:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: Latest\r\n- platform: Fedora27\r\n- installation method (pip/conda/source/other?): pip3\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior:\r\nto fit  my observational data to my model: d_l = (1+z) \\int_0^z c/(H_0 * \\sqrt(\\Omega_m*(1+z)^3+\\Omega_\\Lambda))\r\n### Actual behavior:\r\n```\r\n[stamatis@astro Astrophysics]$ ./emcee_fit.py \r\n===========================================start==============================\r\nemcee: Exception while calling your likelihood function:\r\n  params: [ 0.65500658  0.11251524]\r\nemcee: Exception while calling your likelihood function:\r\nemcee: Exception while calling your likelihood function:\r\n  params: [ 0.42544128  0.25286235]\r\n  params: [ 0.46441115  0.17217373]\r\nemcee: Exception while calling your likelihood function:\r\n  params: [ 0.84313632  0.71857167]\r\n  args: (array([ 0.028488  ,  0.050043  ,  0.052926  ,  0.070086  ,  0.062668  ,\r\n        0.087589  ,  0.078577  ,  0.017227  ,  0.042233  ,  0.045295  ,\r\n        0.03648   ,  0.019599  ,  0.100915  ,  0.027342  ,  0.074605  ,\r\n        0.026489  ,  0.049922  ,  0.030604  ,  0.01634564,  0.0154363 ,\r\n        0.030529  ,  0.024525  ,  0.023953  ,  0.026038  ,  0.048948  ,\r\n        0.024314  ,  0.015166  ,  0.03572   ,  0.048818  ,  0.02198001,\r\n        0.1244    ,  0.036     ,  0.016321  ,  0.01673   ,  0.0275    ,\r\n        0.021793  ,  0.01645   ,  0.023208  ,  0.036457  ,  0.019264  ,\r\n        0.017605  ,  0.031528  ,  0.023536  ,  0.016743  ,  0.05371   ,\r\n        0.016991  ,  0.027865  ,  0.017173  ,  0.029955  ,  0.016559  ,\r\n```\r\n### What have you tried so far?:\r\nI tried to work around the definition of my model and the likelihood function but couldnt find what's wrong. For a different problem I defined everything in the same philosophy and it worked. I am new in mcmc methods and trying to learn this package. Sorry, if I am asking something too obvious.\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```#!/usr/bin/python3\r\n\r\nimport numpy as np \r\nimport matplotlib.pyplot as plt \r\nimport emcee\r\nfrom scipy.linalg.lapack import dgtsv,cgtsv\r\nfrom scipy.interpolate import interp1d\r\nfrom scipy.integrate import  simps\r\nimport os\r\nimport scipy.fftpack\r\nfrom scipy import stats\r\nfrom scipy import signal\r\nimport corner\r\nimport scipy.constants as const\r\n\r\n\r\n\r\nH0 = 70.022\r\nz,mu_obs,sigma_obs = np.loadtxt(\"Union21.txt\",usecols=(1,2,3),unpack=True,dtype=np.float64)\r\n\r\ndl_obs = np.exp(mu_obs/5-5)\r\nsigma_dl_obs = (1./5.)*np.exp(mu_obs/5.-5.)*sigma_obs\r\n\r\n# MCMC\r\nx = z\r\ny = dl_obs\r\nyerr = sigma_dl_obs\r\n\r\n\r\ndef func(z,Omega_m,Omega_lambda):\r\n        z_vec = np.linspace(0,z,1000)\r\n        f = const.c/(H0*np.sqrt(Omega_m*(1+z_vec)**3+Omega_lambda))\r\n        model = (1+z)*simps(f,x=z_vec)\r\n        return model\r\n\r\n\r\n\r\n\r\nndim, nwalkers = 2 , 1000\r\n\r\n\r\ndef lnlike(theta, x, y, yerr):\r\n        Omega_m,Omega_lambda  = theta\r\n        model = func(x,Omega_m,Omega_lambda)\r\n        inv_sigma2 = 1.0/(yerr**2 )\r\n        lnp1 = -0.5*(np.sum((y-model)**2*inv_sigma2 - np.log(inv_sigma2)))\r\n        return lnp1 \r\n\r\n\r\ndef lnprior(theta):\r\n\tOmega_m,Omega_lambda  = theta\r\n\tif 0 <= Omega_m <= 1 and  0 <= Omega_lambda <= 1:\r\n\t\treturn 0.0\r\n\treturn -np.inf\r\n\r\n\r\ndef lnprob(theta, x, y, yerr):\r\n        lp = lnprior(theta)\r\n        if not np.isfinite(lp):\r\n                return -np.inf\r\n        return lp + lnlike(theta, x, y, yerr)    \r\n\r\n\r\npos = [ np.array([ np.random.uniform(0,1) ,  np.random.uniform(0,1)]) for i in range(nwalkers)]\r\n\r\n\r\nsampler = emcee.EnsembleSampler(nwalkers, ndim, lnprob, args=(x, y, yerr),threads=4)\r\nfile1 = open('cosmological_parameters.txt', 'w')\r\n\r\nprint ('===========================================start==============================')\r\n\r\niiter=1\r\nfor result in sampler.run_mcmc(pos, 2000):\r\n\tpos = result[0]\r\n\tfor i in range(len(pos)):\r\n\t\tfile1.write(str('%s %s %s\\n') % (pos[i][0],pos[i][1]))\r\n\tos.system(\"clear\")\r\n\tprint (\"######  STATUS  ######\")\r\n\tprint (\"iteration : \" , iiter)\r\n\tprint (\"######################\")\r\n\tiiter=iiter+1\r\n\r\n\r\nfile1.close()\r\n\r\nprint(\"Loading results\")\r\n\r\nOmega_m,Omega_lambda = np.loadtxt(\"cosmological_parameters.txt\",delimiter=\" \",unpack=True)\r\nburn = 10000\r\nOmega_m = Omega_m[burn:]\r\nOmega_lambda = Omega_lambda[burn:]\r\n\r\nprint(\"Computing estimators\")\r\n\r\nN = int(np.sqrt(len(Omega_lambda)))\r\nn = len(Omega_lambda)\r\n\r\ndata = np.vstack([Omega_m, Omega_lambda])\r\ndata = np.reshape(data,(n,2))\r\nprint(data.shape)\r\nfigure = corner.corner(data, bins=300,labels=[r\"$\\Omega_m$\", r\"$\\Omega_{/Lambda}$\"],\r\n                       quantiles=[0.16, 0.5, 0.84],\r\n                       show_titles=True, title_kwargs={\"fontsize\": 12})\r\n\r\n\r\nplt.show()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/253", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/253/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/253/events", "html_url": "https://github.com/dfm/emcee/issues/253", "id": 291998090, "node_id": "MDU6SXNzdWUyOTE5OTgwOTA=", "number": 253, "title": "thinning of chains", "user": {"login": "fbeutler", "id": 10950512, "node_id": "MDQ6VXNlcjEwOTUwNTEy", "avatar_url": "https://avatars0.githubusercontent.com/u/10950512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fbeutler", "html_url": "https://github.com/fbeutler", "followers_url": "https://api.github.com/users/fbeutler/followers", "following_url": "https://api.github.com/users/fbeutler/following{/other_user}", "gists_url": "https://api.github.com/users/fbeutler/gists{/gist_id}", "starred_url": "https://api.github.com/users/fbeutler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fbeutler/subscriptions", "organizations_url": "https://api.github.com/users/fbeutler/orgs", "repos_url": "https://api.github.com/users/fbeutler/repos", "events_url": "https://api.github.com/users/fbeutler/events{/privacy}", "received_events_url": "https://api.github.com/users/fbeutler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-26T18:57:17Z", "updated_at": "2018-01-26T21:50:51Z", "closed_at": "2018-01-26T21:50:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version:\r\n\r\n>>> import emcee\r\n>>> print(emcee.__version__)\r\n2.2.1\r\n\r\n- platform:\r\n\r\nMAC\r\n\r\n- installation method (pip/conda/source/other?):\r\n\r\npip\r\n\r\n**Problem description:**\r\n\r\nI am using the thin parameter set to 100 and I think this parameter only keeps ever 100 row in the chain, right? Emcee seems to store the multiplicity of each chain by writing the same chain row multiple times. This multiplicity seems to be lost after thinning?\r\n\r\n### Expected behavior:\r\n\r\nI would expect that adjacent rows stay the same for some time since that is how emcee seems to store multiplicity.\r\n\r\n### Actual behavior:\r\n\r\nI cannot see adjacent rows stay the same.\r\n\r\n### What have you tried so far?:\r\n\r\n### Minimal example:\r\n\r\n<!-- In this section, you should include or link to a code snippet that demonstrates this issue. -->\r\n\r\n```python\r\nimport emcee\r\n\r\n# sample code goes here...\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/252", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/252/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/252/events", "html_url": "https://github.com/dfm/emcee/issues/252", "id": 288608235, "node_id": "MDU6SXNzdWUyODg2MDgyMzU=", "number": 252, "title": "emcee 3.0.0.dev0: new HDFBackend feature increasingly slows down the computation", "user": {"login": "MNGuenther", "id": 11521683, "node_id": "MDQ6VXNlcjExNTIxNjgz", "avatar_url": "https://avatars0.githubusercontent.com/u/11521683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MNGuenther", "html_url": "https://github.com/MNGuenther", "followers_url": "https://api.github.com/users/MNGuenther/followers", "following_url": "https://api.github.com/users/MNGuenther/following{/other_user}", "gists_url": "https://api.github.com/users/MNGuenther/gists{/gist_id}", "starred_url": "https://api.github.com/users/MNGuenther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MNGuenther/subscriptions", "organizations_url": "https://api.github.com/users/MNGuenther/orgs", "repos_url": "https://api.github.com/users/MNGuenther/repos", "events_url": "https://api.github.com/users/MNGuenther/events{/privacy}", "received_events_url": "https://api.github.com/users/MNGuenther/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-15T14:16:20Z", "updated_at": "2018-06-07T16:20:29Z", "closed_at": "2018-06-07T16:18:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**General information:**\r\n\r\n- emcee version: 3.0.0.dev0\r\n- platform: OSX\r\n- installation method (pip/conda/source/other?): git clone\r\n\r\n**Problem description:**\r\n\r\nnew HDFBackend feature increasingly slows down the computation with increasing number of performed steps\r\n\r\n### Expected behavior:\r\nconstistent iterations-per-second rates throughout\r\n\r\n### Actual behavior:\r\nafter running a few thousand steps, i.e. with increasing filesize of the '.h5' file, the computation speed increasingly slows down. Likely because it generates a lot of overhead to open the .h5 file and write into it.\r\n\r\n### What have you tried so far?:\r\nbypass the issue by running emcee in chunks, and saving .h5 files in small chunks of e.g. 1000 steps. However, this somewhat means loosing the simplicity/functionality of the whole backend feature, especially when reading in and evaluating all the individual .h5 files.\r\n\r\n### Minimal example:\r\nperformed steps | average speed | size of .h5\r\n~100 | 3.00s/it | 10 MB\r\n~10000 | average 20.00s/it | 1GB\r\n~20000 | average 33.00s/it | 2GB\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/250", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/250/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/250/events", "html_url": "https://github.com/dfm/emcee/issues/250", "id": 280187446, "node_id": "MDU6SXNzdWUyODAxODc0NDY=", "number": 250, "title": "Quite deprecation", "user": {"login": "laszukdawid", "id": 11457963, "node_id": "MDQ6VXNlcjExNDU3OTYz", "avatar_url": "https://avatars1.githubusercontent.com/u/11457963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laszukdawid", "html_url": "https://github.com/laszukdawid", "followers_url": "https://api.github.com/users/laszukdawid/followers", "following_url": "https://api.github.com/users/laszukdawid/following{/other_user}", "gists_url": "https://api.github.com/users/laszukdawid/gists{/gist_id}", "starred_url": "https://api.github.com/users/laszukdawid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laszukdawid/subscriptions", "organizations_url": "https://api.github.com/users/laszukdawid/orgs", "repos_url": "https://api.github.com/users/laszukdawid/repos", "events_url": "https://api.github.com/users/laszukdawid/events{/privacy}", "received_events_url": "https://api.github.com/users/laszukdawid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 742467361, "node_id": "MDU6TGFiZWw3NDI0NjczNjE=", "url": "https://api.github.com/repos/dfm/emcee/labels/Wontfix", "name": "Wontfix", "color": "b2520e", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-07T16:12:05Z", "updated_at": "2017-12-07T22:12:28Z", "closed_at": "2017-12-07T22:12:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "**General information:**\r\n\r\n- emcee version: 2.2.1\r\n- platform: Ubuntu 16.04\r\n- installation method (pip/conda/source/other?): conda/pip\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior:\r\nLoud deprecation warning on deprecated fields.\r\n\r\n### Actual behavior:\r\nNo warning appears when executing sampler with non None \"threads\" argument.\r\nhttps://github.com/dfm/emcee/blob/master/emcee/ensemble.py#L65\r\nhttps://github.com/dfm/emcee/blob/master/emcee/utils.py\r\n\r\n### What have you tried so far?:\r\nRunning.\r\n\r\n### Minimal example:\r\n\r\nDoesn't evoke warning:\r\n```python\r\nfrom emcee import EnsembleSampler\r\nsampler = EnsembleSampler(50, 5, lambda x: 0, threads=8)\r\n\r\n```\r\n\r\nDoes evoke warning:\r\n```python\r\nfrom emcee import EnsembleSampler\r\nimport warnings\r\nwarnings.simplefilter('always', DeprecationWarning)\r\nsampler = EnsembleSampler(50, 5, lambda x: 0, threads=8)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/249", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/249/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/249/events", "html_url": "https://github.com/dfm/emcee/issues/249", "id": 280123831, "node_id": "MDU6SXNzdWUyODAxMjM4MzE=", "number": 249, "title": "[Doc] Sampler: \"store\" vs \"storechain\"", "user": {"login": "laszukdawid", "id": 11457963, "node_id": "MDQ6VXNlcjExNDU3OTYz", "avatar_url": "https://avatars1.githubusercontent.com/u/11457963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laszukdawid", "html_url": "https://github.com/laszukdawid", "followers_url": "https://api.github.com/users/laszukdawid/followers", "following_url": "https://api.github.com/users/laszukdawid/following{/other_user}", "gists_url": "https://api.github.com/users/laszukdawid/gists{/gist_id}", "starred_url": "https://api.github.com/users/laszukdawid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laszukdawid/subscriptions", "organizations_url": "https://api.github.com/users/laszukdawid/orgs", "repos_url": "https://api.github.com/users/laszukdawid/repos", "events_url": "https://api.github.com/users/laszukdawid/events{/privacy}", "received_events_url": "https://api.github.com/users/laszukdawid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2951888, "node_id": "MDU6TGFiZWwyOTUxODg4", "url": "https://api.github.com/repos/dfm/emcee/labels/Documentation", "name": "Documentation", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-07T13:08:58Z", "updated_at": "2017-12-10T21:27:29Z", "closed_at": "2017-12-10T21:27:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nFill in the information below before opening an issue.\r\nIf you have a question, please consider emailing the mailing list:\r\n    https://groups.google.com/forum/#!forum/emcee-users\r\n-->\r\n\r\n**General information:**\r\n\r\n- emcee version: 2.2.1\r\n- platform: \r\n- installation method (pip/conda/source/other?):\r\n\r\n**Problem description:**\r\n\r\n### Expected behavior:\r\nSome of the API documentation is out of date. For example (below), sampler EnsembleSampler used to have attribute \"storechain\" and now it's \"store\".\r\n\r\n### Actual behavior:\r\nUp to date documentation.\r\n\r\n### What have you tried so far?:\r\nFiguring out where the build is made for the documentation, as files in this repo seems to be updated.\r\n\r\n### Minimal example:\r\nhttp://emcee.readthedocs.io/en/stable/user/advanced.html#incrementally-saving-progress\r\nhttp://dfm.io/emcee/current/api/#emcee.EnsembleSampler.chain\r\nhttp://emcee.readthedocs.io/en/stable/_modules/emcee/ensemble.html?highlight=storechain", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/248", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/248/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/248/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/248/events", "html_url": "https://github.com/dfm/emcee/issues/248", "id": 279302650, "node_id": "MDU6SXNzdWUyNzkzMDI2NTA=", "number": 248, "title": "Incorrect docstring", "user": {"login": "willvousden", "id": 152388, "node_id": "MDQ6VXNlcjE1MjM4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/152388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willvousden", "html_url": "https://github.com/willvousden", "followers_url": "https://api.github.com/users/willvousden/followers", "following_url": "https://api.github.com/users/willvousden/following{/other_user}", "gists_url": "https://api.github.com/users/willvousden/gists{/gist_id}", "starred_url": "https://api.github.com/users/willvousden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willvousden/subscriptions", "organizations_url": "https://api.github.com/users/willvousden/orgs", "repos_url": "https://api.github.com/users/willvousden/repos", "events_url": "https://api.github.com/users/willvousden/events{/privacy}", "received_events_url": "https://api.github.com/users/willvousden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-05T09:26:51Z", "updated_at": "2017-12-05T22:31:05Z", "closed_at": "2017-12-05T22:31:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/dfm/emcee/blob/194f99eee7b2f0987f972ab58fd1bfc56181db0d/emcee/autocorr.py#L63\r\n\r\nI think this should read 50 :) Or the default value is wrong!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/246", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/246/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/246/events", "html_url": "https://github.com/dfm/emcee/issues/246", "id": 275532119, "node_id": "MDU6SXNzdWUyNzU1MzIxMTk=", "number": 246, "title": "Link for full source code for linear fit example broken", "user": {"login": "charlesll", "id": 6821569, "node_id": "MDQ6VXNlcjY4MjE1Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6821569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlesll", "html_url": "https://github.com/charlesll", "followers_url": "https://api.github.com/users/charlesll/followers", "following_url": "https://api.github.com/users/charlesll/following{/other_user}", "gists_url": "https://api.github.com/users/charlesll/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlesll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlesll/subscriptions", "organizations_url": "https://api.github.com/users/charlesll/orgs", "repos_url": "https://api.github.com/users/charlesll/repos", "events_url": "https://api.github.com/users/charlesll/events{/privacy}", "received_events_url": "https://api.github.com/users/charlesll/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2951888, "node_id": "MDU6TGFiZWwyOTUxODg4", "url": "https://api.github.com/repos/dfm/emcee/labels/Documentation", "name": "Documentation", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-20T23:17:14Z", "updated_at": "2017-11-23T15:11:30Z", "closed_at": "2017-11-23T15:11:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "This issue concerns the documentation of emcee. \r\n\r\nThe example for fitting a line (http://emcee.readthedocs.io/en/stable/user/line/) contains a link to the full source code, right below the first paragraph. The link is:\r\n\r\nhttps://github.com/dfm/emcee/blob/master/examples/line.py\r\n\r\nThis link is broken. It seems that the examples have been moved out of Github?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/243", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/243/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/243/events", "html_url": "https://github.com/dfm/emcee/issues/243", "id": 272399757, "node_id": "MDU6SXNzdWUyNzIzOTk3NTc=", "number": 243, "title": "Mistake in ptsampler?", "user": {"login": "andyfaff", "id": 702934, "node_id": "MDQ6VXNlcjcwMjkzNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/702934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyfaff", "html_url": "https://github.com/andyfaff", "followers_url": "https://api.github.com/users/andyfaff/followers", "following_url": "https://api.github.com/users/andyfaff/following{/other_user}", "gists_url": "https://api.github.com/users/andyfaff/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyfaff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyfaff/subscriptions", "organizations_url": "https://api.github.com/users/andyfaff/orgs", "repos_url": "https://api.github.com/users/andyfaff/repos", "events_url": "https://api.github.com/users/andyfaff/events{/privacy}", "received_events_url": "https://api.github.com/users/andyfaff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-09T00:32:16Z", "updated_at": "2017-11-16T20:21:21Z", "closed_at": "2017-11-16T20:21:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Take the following line:\r\n\r\nhttps://github.com/dfm/emcee/blob/9ac474762f321494e09eea8ee31433dc09c24823/emcee/ptsampler.py#L6\r\n\r\nshould it be:\r\n```\r\ntry:\r\n    from ptemcee import PTSampler\r\n```\r\n?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/240", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/240/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/240/events", "html_url": "https://github.com/dfm/emcee/issues/240", "id": 271670315, "node_id": "MDU6SXNzdWUyNzE2NzAzMTU=", "number": 240, "title": "truth size", "user": {"login": "gaby7646", "id": 16844104, "node_id": "MDQ6VXNlcjE2ODQ0MTA0", "avatar_url": "https://avatars2.githubusercontent.com/u/16844104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaby7646", "html_url": "https://github.com/gaby7646", "followers_url": "https://api.github.com/users/gaby7646/followers", "following_url": "https://api.github.com/users/gaby7646/following{/other_user}", "gists_url": "https://api.github.com/users/gaby7646/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaby7646/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaby7646/subscriptions", "organizations_url": "https://api.github.com/users/gaby7646/orgs", "repos_url": "https://api.github.com/users/gaby7646/repos", "events_url": "https://api.github.com/users/gaby7646/events{/privacy}", "received_events_url": "https://api.github.com/users/gaby7646/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 719014526, "node_id": "MDU6TGFiZWw3MTkwMTQ1MjY=", "url": "https://api.github.com/repos/dfm/emcee/labels/Question", "name": "Question", "color": "bfd4f2", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-07T00:35:53Z", "updated_at": "2017-11-07T16:14:39Z", "closed_at": "2017-11-07T16:14:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I added the truth values to my plots, but it looks bigger that I want. Is there an option to change the size of the points?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/239", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/239/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/239/events", "html_url": "https://github.com/dfm/emcee/issues/239", "id": 270837638, "node_id": "MDU6SXNzdWUyNzA4Mzc2Mzg=", "number": 239, "title": "Progress bar doesn't seem to be working?", "user": {"login": "jacaseyclyde", "id": 7811666, "node_id": "MDQ6VXNlcjc4MTE2NjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/7811666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacaseyclyde", "html_url": "https://github.com/jacaseyclyde", "followers_url": "https://api.github.com/users/jacaseyclyde/followers", "following_url": "https://api.github.com/users/jacaseyclyde/following{/other_user}", "gists_url": "https://api.github.com/users/jacaseyclyde/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacaseyclyde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacaseyclyde/subscriptions", "organizations_url": "https://api.github.com/users/jacaseyclyde/orgs", "repos_url": "https://api.github.com/users/jacaseyclyde/repos", "events_url": "https://api.github.com/users/jacaseyclyde/events{/privacy}", "received_events_url": "https://api.github.com/users/jacaseyclyde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-02T23:15:10Z", "updated_at": "2017-11-03T19:29:36Z", "closed_at": "2017-11-03T06:36:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "As the title says, the progress bar doesn't seem to be working for me (using emcee 3.0.0.dev0). I'm primarily following the method in the monitor tutorial (aka adding `progress=True` flag), except I'm using my own data. Running directly in a python terminal, tried using both 2.7 and 3.5.\r\n\r\nFor more context, here's my implementation below. Not sure if I'm just missing something or this is a bug.\r\n\r\n    ndim = 5\r\n    nwalkers = 1000\r\n    \r\n    n_max = 10000\r\n    priors = np.array([[0.,0.,0,.1,.5],[2 * np.pi, 2 * np.pi, 2 * np.pi, 2, .999]])\r\n    prange = np.ndarray.tolist(priors.T)\r\n    \r\n    filename = 'chain.h5'\r\n    backend = emcee.backends.HDFBackend(filename)\r\n    backend.reset(nwalkers, ndim)\r\n\r\n    sampler = emcee.EnsembleSampler(nwalkers, ndim, lnProb, args=[data,cov], backend=backend)\r\n\r\n    print(\"Running MCMC\")\r\n    old_tau = np.inf\r\n    for sample in sampler.sample(pos, iterations=n_max, progress=True):\r\n        if sample.iteration % 100:\r\n            continue\r\n    \r\n        #check convergence\r\n        tau = sampler.get_autocorr_time(tol=0)\r\n        converged = np.all(tau * 100 < sampler.iteration)\r\n        converged &= np.all(np.abs(old_tau - tau) / tau < 0.01)\r\n        if converged:\r\n            break\r\n        old_tau = tau", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/238", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/238/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/238/events", "html_url": "https://github.com/dfm/emcee/issues/238", "id": 267530474, "node_id": "MDU6SXNzdWUyNjc1MzA0NzQ=", "number": 238, "title": "In master `EnsembleSampler.sample` is only yielding every `thin` steps.", "user": {"login": "andyfaff", "id": 702934, "node_id": "MDQ6VXNlcjcwMjkzNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/702934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyfaff", "html_url": "https://github.com/andyfaff", "followers_url": "https://api.github.com/users/andyfaff/followers", "following_url": "https://api.github.com/users/andyfaff/following{/other_user}", "gists_url": "https://api.github.com/users/andyfaff/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyfaff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyfaff/subscriptions", "organizations_url": "https://api.github.com/users/andyfaff/orgs", "repos_url": "https://api.github.com/users/andyfaff/repos", "events_url": "https://api.github.com/users/andyfaff/events{/privacy}", "received_events_url": "https://api.github.com/users/andyfaff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 719014526, "node_id": "MDU6TGFiZWw3MTkwMTQ1MjY=", "url": "https://api.github.com/repos/dfm/emcee/labels/Question", "name": "Question", "color": "bfd4f2", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-10-23T03:20:19Z", "updated_at": "2017-11-09T00:29:23Z", "closed_at": "2017-11-09T00:29:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On [L289 in ensemble.py](https://github.com/dfm/emcee/blob/master/emcee/ensemble.py#L289) `EnsembleSampler.sample` only yields (and stores) position every `thin` steps. The previous behaviour (e.g. 93d464581aa3fdb071e035502dadc9f792cc3b66) was to yield position at *every* step and store every `thin` steps.\r\nIs this a mistake, or on purpose?  I like the original behaviour of yielding every step, it makes it easier to follow progress with long running simulations as one knows precisely how many steps have been run. It also makes it easier to checkpoint.  For example:\r\n\r\n```\r\nfor results in sampler.sample(pos0, 99, thin=100):\r\n    pass\r\n```\r\n\r\nAt the end `results` will be `None` because the number of steps never reached 100 and there are 99 wasted steps because the last position was never stored and it wasn't yielded to the user.  Even if `EnsembleSampler` doesn't store a step (because it never reached `thin`), if it returned the position at every step the user wouldn't have wasted those steps for nothing. \r\nWith the current behaviour iteration progress is also degraded. For example, in a simulation with 500 steps and `thin=100` you only know to the nearest 1/5 how many steps you have done. Yielding every step enables fine grain counting. There are many circumstances where one wouldn't want to use a tqdm progress bar. Fine grain is important if each step takes a long time. One has to be able to predict this to request a total Wall time on a supercomputer.\r\n\r\nThe docstring in both the former and current code is ambiguous. On the one hand it says `At each iteration, this generator yields:`, indicating there is a yield every iteration. On the other hand it says `If you only want to store and yield every ``thin`` samples in the chain, set thin to an integer greater than 1.`\r\n\r\nI propose the following:\r\n\r\n```\r\nthin (Optional[int]): If you only want to store every ``thin`` samples in the chain, set thin to an integer greater than 1.\r\n```\r\n\r\nand revert L238-245 in ensemble.py to yield every iteration. It also keeps backcompat.\r\n\r\nI'm willing to write a PR for this.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/237", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/237/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/237/events", "html_url": "https://github.com/dfm/emcee/issues/237", "id": 266580889, "node_id": "MDU6SXNzdWUyNjY1ODA4ODk=", "number": 237, "title": "Possible bug in StretchMove.get_proposal", "user": {"login": "jmatta1", "id": 5047947, "node_id": "MDQ6VXNlcjUwNDc5NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5047947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmatta1", "html_url": "https://github.com/jmatta1", "followers_url": "https://api.github.com/users/jmatta1/followers", "following_url": "https://api.github.com/users/jmatta1/following{/other_user}", "gists_url": "https://api.github.com/users/jmatta1/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmatta1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmatta1/subscriptions", "organizations_url": "https://api.github.com/users/jmatta1/orgs", "repos_url": "https://api.github.com/users/jmatta1/repos", "events_url": "https://api.github.com/users/jmatta1/events{/privacy}", "received_events_url": "https://api.github.com/users/jmatta1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-18T17:41:56Z", "updated_at": "2017-10-18T17:50:40Z", "closed_at": "2017-10-18T17:44:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was digging through the code when I noticed a small sign difference in published versions of the stretch move proposal algorithm and how it was implemented in StretchMove.get_proposal\r\n\r\nGoodman and Weare and Foreman-Mackey *et al.* both state that the proposed position is:\r\nY = X_j + Z * (X_k - X_j), where Y is the proposed new point, Z is the random scaling factor, X_j is the position of the walker drawn from the complementary ensemble, and X_k is the position of the walker to be updated. \r\n\r\nHowever, if I am reading things right, line 33 of emcee/moves/stretch.py says: Y = X_j - Z * (X_k - X_j). The result being: rather than trying to jump from X_j directly **away** from X_k you are jumping from X_j directly **towards** X_k.\r\n\r\nI suspect that it doesn't matter, but I thought I would bring it up just in case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/235", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/235/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/235/events", "html_url": "https://github.com/dfm/emcee/issues/235", "id": 265121228, "node_id": "MDU6SXNzdWUyNjUxMjEyMjg=", "number": 235, "title": "Crash in simple example due to internal variable promotion to array...error in sampler?", "user": {"login": "mb2448", "id": 1314227, "node_id": "MDQ6VXNlcjEzMTQyMjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1314227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mb2448", "html_url": "https://github.com/mb2448", "followers_url": "https://api.github.com/users/mb2448/followers", "following_url": "https://api.github.com/users/mb2448/following{/other_user}", "gists_url": "https://api.github.com/users/mb2448/gists{/gist_id}", "starred_url": "https://api.github.com/users/mb2448/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mb2448/subscriptions", "organizations_url": "https://api.github.com/users/mb2448/orgs", "repos_url": "https://api.github.com/users/mb2448/repos", "events_url": "https://api.github.com/users/mb2448/events{/privacy}", "received_events_url": "https://api.github.com/users/mb2448/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 719014526, "node_id": "MDU6TGFiZWw3MTkwMTQ1MjY=", "url": "https://api.github.com/repos/dfm/emcee/labels/Question", "name": "Question", "color": "bfd4f2", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-12T23:20:20Z", "updated_at": "2017-10-17T18:11:41Z", "closed_at": "2017-10-17T18:11:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI was playing around with a simple \"teaching\" example of measuring the mean value of a uniform Poisson background.  Here the uncertainties depend on the mean, unlike a Gaussian distribution.\r\n\r\nThe example invariably crashes after a few iterations in the sampler.  This is due to some kind of promotion of the sampler's internal \"theta\" variable into a vector, causing a size mismatch error when evaluating the log-likelihood.  I think this may have to do with using a scalar model function for \"time-series\" data.\r\n\r\nI've attached the code below.  If you uncomment the two lines after the `print` statement in `lnprob`, it will drop you straight into the point before the crash.  I tried to debug it myself for a while with no luck!  Is this a bug in the sampler, or is something else going on?  Can emcee be used with simple scalar models such as these?  \r\n\r\nThanks in advance--I've enjoyed using emcee many years now.\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport ipdb\r\nimport emcee\r\n\r\ndef model(meanval):\r\n    return meanval\r\n\r\ndef lnprior(theta):\r\n    if theta > 0:\r\n        return 0.0\r\n    else:\r\n        return -np.inf\r\n\r\ndef lnlike(theta, data):\r\n    mod = model(theta)\r\n    #ln(lambda^k e^-lambda /k!)\r\n    #stirling's approx to the factorial\r\n    stirling = np.sum(data*(np.log(mod)-np.log(data)-1.0)-mod)\r\n    return stirling\r\n\r\ndef lnprob(theta, data):\r\n    print theta\r\n    #if np.abs(theta-72.614)<0.005:\r\n    #    ipdb.set_trace()\r\n    lp = lnprior(theta)\r\n    if not np.isfinite(lp):\r\n        return -np.inf\r\n    else:\r\n        return lp + lnlike(theta, data)\r\n\r\nif __name__ == \"__main__\":\r\n    np.random.seed(42)\r\n    true_bgd = 70.5\r\n    n_points = 50\r\n    fake_data = np.random.poisson(true_bgd, size = n_points)\r\n\r\n    ndim, nwalkers = 1, 200\r\n    initguess = np.median(fake_data)\r\n    initpos   = np.random.normal(loc = initguess, scale = 2, size = n_points)\r\n    sampler = emcee.EnsembleSampler(nwalkers, ndim,\r\n                                    lnprob, args = [fake_data])\r\n    sampler.run_mcmc(initpos, 100)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/232", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/232/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/232/events", "html_url": "https://github.com/dfm/emcee/issues/232", "id": 260038688, "node_id": "MDU6SXNzdWUyNjAwMzg2ODg=", "number": 232, "title": "Wrong log-prior defined in the docs?", "user": {"login": "Gabriel-p", "id": 6054951, "node_id": "MDQ6VXNlcjYwNTQ5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6054951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gabriel-p", "html_url": "https://github.com/Gabriel-p", "followers_url": "https://api.github.com/users/Gabriel-p/followers", "following_url": "https://api.github.com/users/Gabriel-p/following{/other_user}", "gists_url": "https://api.github.com/users/Gabriel-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gabriel-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gabriel-p/subscriptions", "organizations_url": "https://api.github.com/users/Gabriel-p/orgs", "repos_url": "https://api.github.com/users/Gabriel-p/repos", "events_url": "https://api.github.com/users/Gabriel-p/events{/privacy}", "received_events_url": "https://api.github.com/users/Gabriel-p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-23T21:08:00Z", "updated_at": "2017-09-24T00:28:04Z", "closed_at": "2017-09-24T00:28:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the docs the log-prior is [defined as](http://dfm.io/emcee/current/user/line/#marginalization-uncertainty-estimation):\r\n\r\n```\r\ndef lnprior(theta):\r\n    m, b, lnf = theta\r\n    if -5.0 < m < 0.5 and 0.0 < b < 10.0 and -10.0 < lnf < 1.0:\r\n        return 0.0\r\n    return -np.inf\r\n```\r\nThis will always return either zero or -inf. This can't be right, right?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/229", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/229/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/229/events", "html_url": "https://github.com/dfm/emcee/issues/229", "id": 255567084, "node_id": "MDU6SXNzdWUyNTU1NjcwODQ=", "number": 229, "title": "pickling the output of emcee.EnsembleSampler", "user": {"login": "pilchat", "id": 10604771, "node_id": "MDQ6VXNlcjEwNjA0Nzcx", "avatar_url": "https://avatars0.githubusercontent.com/u/10604771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pilchat", "html_url": "https://github.com/pilchat", "followers_url": "https://api.github.com/users/pilchat/followers", "following_url": "https://api.github.com/users/pilchat/following{/other_user}", "gists_url": "https://api.github.com/users/pilchat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pilchat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pilchat/subscriptions", "organizations_url": "https://api.github.com/users/pilchat/orgs", "repos_url": "https://api.github.com/users/pilchat/repos", "events_url": "https://api.github.com/users/pilchat/events{/privacy}", "received_events_url": "https://api.github.com/users/pilchat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 719014526, "node_id": "MDU6TGFiZWw3MTkwMTQ1MjY=", "url": "https://api.github.com/repos/dfm/emcee/labels/Question", "name": "Question", "color": "bfd4f2", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-06T11:13:24Z", "updated_at": "2017-11-06T20:50:13Z", "closed_at": "2017-11-06T20:50:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am running a simple code both in my machine and in a cluster. At the end of the code, I want to save the output of emcee.EnsembleSampler using pickle.dump.\r\n\r\nIn my machine(8 cores) everything goes fine. In the cluster, pickle.dump complains because:\r\n\r\nTypeError: can't pickle mpi4py.MPI.Intracomm objects\r\n\r\nIn my PC and in the cluster I am using the same versions of emcee (2.2.1) and of mpi4py (1.3.1). Is it possible that emcee implicitly uses mpi4py2.0.0 (which is available in the cluster, not in my PC)? How can I check this?\r\n\r\nIn alternative, I can use mpi4py2.0.0, but then pickle.dump complains in my PC too. What do you suggest to save the output of emcee.EnsembleSampler and make it loadable later on?\r\n\r\nThanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/228", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/228/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/228/events", "html_url": "https://github.com/dfm/emcee/issues/228", "id": 254558051, "node_id": "MDU6SXNzdWUyNTQ1NTgwNTE=", "number": 228, "title": "import emcee causes an MPI hard crash on login nodes", "user": {"login": "dpole", "id": 4341327, "node_id": "MDQ6VXNlcjQzNDEzMjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4341327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpole", "html_url": "https://github.com/dpole", "followers_url": "https://api.github.com/users/dpole/followers", "following_url": "https://api.github.com/users/dpole/following{/other_user}", "gists_url": "https://api.github.com/users/dpole/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpole/subscriptions", "organizations_url": "https://api.github.com/users/dpole/orgs", "repos_url": "https://api.github.com/users/dpole/repos", "events_url": "https://api.github.com/users/dpole/events{/privacy}", "received_events_url": "https://api.github.com/users/dpole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-01T07:25:18Z", "updated_at": "2017-09-01T08:57:18Z", "closed_at": "2017-09-01T08:55:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "My application uses emcee and runs on a cluster. However, I typically develop on the login nodes and I can't use MPI there, causing a failure as I try to import emcee:\r\n\r\n```\r\nIn [1]: import emcee\r\n[Fri Sep  1 00:10:43 2017] [unknown] Fatal error in PMPI_Init_thread: Other MPI error, error stack:\r\nMPIR_Init_thread(537):\r\nMPID_Init(247).......: channel initialization failed\r\nMPID_Init(636).......:  PMI2 init failed: 1\r\nAborted (core dumped)\r\n```\r\n\r\nIs there a workaround to avoid calling MPI_Init when I am on login nodes?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/226", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/226/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/226/events", "html_url": "https://github.com/dfm/emcee/issues/226", "id": 252788289, "node_id": "MDU6SXNzdWUyNTI3ODgyODk=", "number": 226, "title": "IndexError in EnsembleSampler.sample unless thin is a divisor of samples.", "user": {"login": "andyfaff", "id": 702934, "node_id": "MDQ6VXNlcjcwMjkzNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/702934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyfaff", "html_url": "https://github.com/andyfaff", "followers_url": "https://api.github.com/users/andyfaff/followers", "following_url": "https://api.github.com/users/andyfaff/following{/other_user}", "gists_url": "https://api.github.com/users/andyfaff/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyfaff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyfaff/subscriptions", "organizations_url": "https://api.github.com/users/andyfaff/orgs", "repos_url": "https://api.github.com/users/andyfaff/repos", "events_url": "https://api.github.com/users/andyfaff/events{/privacy}", "received_events_url": "https://api.github.com/users/andyfaff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-25T03:21:15Z", "updated_at": "2017-10-23T02:48:52Z", "closed_at": "2017-10-23T02:48:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In `EnsembleSampler.sample` unless `thin` is a divisor of `iterations` there is an `IndexError` occurring.\r\nThe error is:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-13-757d782a8778> in <module>()\r\n      1 for i in range(65):\r\n----> 2     next(s)\r\n\r\n/Users/anz/miniconda3/envs/dev3/lib/python3.6/site-packages/emcee/ensemble.py in sample(self, p0, lnprob0, rstate0, blobs0, iterations, thin, storechain, mh_proposal)\r\n    277             if storechain and i % thin == 0:\r\n    278                 ind = i0 + int(i / thin)\r\n--> 279                 self._chain[:, ind, :] = p\r\n    280                 self._lnprob[:, ind] = lnprob\r\n    281                 if blobs is not None:\r\n\r\nIndexError: index 32 is out of bounds for axis 1 with size 32\r\n```\r\n\r\nThe code to reproduce is:\r\n\r\n```\r\n# coding: utf-8\r\n\r\n# In[1]:\r\n\r\nimport numpy as np\r\n\r\n# Choose the \"true\" parameters.\r\nm_true = -0.9594\r\nb_true = 4.294\r\nf_true = 0.534\r\n\r\n# Generate some synthetic data from the model.\r\nN = 50\r\nx = np.sort(10*np.random.rand(N))\r\nyerr = 0.1+0.5*np.random.rand(N)\r\ny = m_true*x+b_true\r\ny += np.abs(f_true*y) * np.random.randn(N)\r\ny += yerr * np.random.randn(N)\r\n\r\n\r\n# In[2]:\r\n\r\nA = np.vstack((np.ones_like(x), x)).T\r\nC = np.diag(yerr * yerr)\r\ncov = np.linalg.inv(np.dot(A.T, np.linalg.solve(C, A)))\r\nb_ls, m_ls = np.dot(cov, np.dot(A.T, np.linalg.solve(C, y)))\r\n\r\n\r\n# In[3]:\r\n\r\ndef lnlike(theta, x, y, yerr):\r\n    m, b, lnf = theta\r\n    model = m * x + b\r\n    inv_sigma2 = 1.0/(yerr**2 + model**2*np.exp(2*lnf))\r\n    return -0.5*(np.sum((y-model)**2*inv_sigma2 - np.log(inv_sigma2)))\r\n\r\n\r\n# In[4]:\r\n\r\ndef lnprior(theta):\r\n    m, b, lnf = theta\r\n    if -5.0 < m < 0.5 and 0.0 < b < 10.0 and -10.0 < lnf < 1.0:\r\n        return 0.0\r\n    return -np.inf\r\n\r\n\r\n# In[5]:\r\n\r\ndef lnprob(theta, x, y, yerr):\r\n    lp = lnprior(theta)\r\n    if not np.isfinite(lp):\r\n        return -np.inf\r\n    return lp + lnlike(theta, x, y, yerr)\r\n\r\n\r\n# In[7]:\r\n\r\nimport scipy.optimize as op\r\nnll = lambda *args: -lnlike(*args)\r\nresult = op.minimize(nll, [m_true, b_true, np.log(f_true)], args=(x, y, yerr))\r\nm_ml, b_ml, lnf_ml = result[\"x\"]\r\n\r\n\r\n# In[8]:\r\n\r\nndim, nwalkers = 3, 100\r\npos = [result[\"x\"] + 1e-4*np.random.randn(ndim) for i in range(nwalkers)]\r\n\r\n\r\n# In[9]:\r\n\r\nimport emcee\r\nsampler = emcee.EnsembleSampler(nwalkers, ndim, lnprob, args=(x, y, yerr))\r\n\r\n\r\n# In[12]:\r\n\r\ns = sampler.sample(pos, iterations=65, thin=2)\r\n\r\n\r\n# In[11]:\r\n\r\nsampler.chain.shape\r\n\r\n\r\n# In[13]:\r\n\r\nfor i in range(65):\r\n    next(s)\r\n```\r\n\r\nI think that to fix this [Line 277](https://github.com/dfm/emcee/blob/master/emcee/ensemble.py#L277)\r\nshould read:\r\n`if storechain and (i + 1) % thin == 0:`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/222", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/222/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/222/events", "html_url": "https://github.com/dfm/emcee/issues/222", "id": 247459689, "node_id": "MDU6SXNzdWUyNDc0NTk2ODk=", "number": 222, "title": "Walker positions converging too quickly with Ensemble Sampler", "user": {"login": "rmastand", "id": 20581222, "node_id": "MDQ6VXNlcjIwNTgxMjIy", "avatar_url": "https://avatars3.githubusercontent.com/u/20581222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmastand", "html_url": "https://github.com/rmastand", "followers_url": "https://api.github.com/users/rmastand/followers", "following_url": "https://api.github.com/users/rmastand/following{/other_user}", "gists_url": "https://api.github.com/users/rmastand/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmastand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmastand/subscriptions", "organizations_url": "https://api.github.com/users/rmastand/orgs", "repos_url": "https://api.github.com/users/rmastand/repos", "events_url": "https://api.github.com/users/rmastand/events{/privacy}", "received_events_url": "https://api.github.com/users/rmastand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-02T17:08:40Z", "updated_at": "2017-11-06T20:49:41Z", "closed_at": "2017-11-06T20:49:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've set up an EnsembleSampler() with 100 walkers, 2000 iterations, and thinning by every 10th iteration. However, looking at the resulting traces, I don't think my walkers are fully exploring the parameter space; often, within the first 100 iterations, the walkers converge around what the true value of the parameter is. \r\n\r\nGraphs below:\r\n\r\nTrue parameter values: .6 and .4\r\n<img width=\"821\" alt=\"screen shot 2017-08-02 at 10 06 41 am\" src=\"https://user-images.githubusercontent.com/20581222/28885324-60590bd4-776a-11e7-8f94-1046dd1bfa7d.png\">\r\nTrue parameter values: -.2 and -.8\r\n<img width=\"850\" alt=\"screen shot 2017-08-02 at 10 06 37 am\" src=\"https://user-images.githubusercontent.com/20581222/28885326-605fbc40-776a-11e7-90b8-2e295a138e12.png\">\r\nTrue parameter values: -1. and 1.\r\n<img width=\"841\" alt=\"screen shot 2017-08-02 at 10 06 33 am\" src=\"https://user-images.githubusercontent.com/20581222/28885325-605e8794-776a-11e7-9a5c-165ad6d83eac.png\">\r\n\r\nHow can I get my walkers to better explore the space? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/218", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/218/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/218/events", "html_url": "https://github.com/dfm/emcee/issues/218", "id": 236229821, "node_id": "MDU6SXNzdWUyMzYyMjk4MjE=", "number": 218, "title": "walker positions not changing in Parallel-Tempering Ensemble MCMC", "user": {"login": "tinapeters", "id": 4700954, "node_id": "MDQ6VXNlcjQ3MDA5NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4700954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinapeters", "html_url": "https://github.com/tinapeters", "followers_url": "https://api.github.com/users/tinapeters/followers", "following_url": "https://api.github.com/users/tinapeters/following{/other_user}", "gists_url": "https://api.github.com/users/tinapeters/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinapeters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinapeters/subscriptions", "organizations_url": "https://api.github.com/users/tinapeters/orgs", "repos_url": "https://api.github.com/users/tinapeters/repos", "events_url": "https://api.github.com/users/tinapeters/events{/privacy}", "received_events_url": "https://api.github.com/users/tinapeters/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-06-15T15:30:08Z", "updated_at": "2017-11-06T20:49:31Z", "closed_at": "2017-11-06T20:48:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I construct the sampler object in the usual way: sampler=PTSampler(...) and then iterate over the generator. I am outputting the results of every 10th step to a text file, just for monitoring while testing by doing:\r\n\r\nfor i, result in enumerate(sampler.sample(position0, interations=1000)):\r\n    position_new = result[0]\r\n    lnprob_new = result[1]\r\n    lnlike_new =  result[2]\r\n\r\nThis works fine when I use EnsembleSampler, but with PTSampler the position_new never changes. The lnlike_new and lnprob_new change whenever there is an accept and lnprob_new also changes when there is a temperature swap.\r\n\r\n@farr @dfm ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/217", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/217/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/217/events", "html_url": "https://github.com/dfm/emcee/issues/217", "id": 232852560, "node_id": "MDU6SXNzdWUyMzI4NTI1NjA=", "number": 217, "title": "Discrepancy between line example on webpage and code example.", "user": {"login": "andyfaff", "id": 702934, "node_id": "MDQ6VXNlcjcwMjkzNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/702934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyfaff", "html_url": "https://github.com/andyfaff", "followers_url": "https://api.github.com/users/andyfaff/followers", "following_url": "https://api.github.com/users/andyfaff/following{/other_user}", "gists_url": "https://api.github.com/users/andyfaff/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyfaff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyfaff/subscriptions", "organizations_url": "https://api.github.com/users/andyfaff/orgs", "repos_url": "https://api.github.com/users/andyfaff/repos", "events_url": "https://api.github.com/users/andyfaff/events{/privacy}", "received_events_url": "https://api.github.com/users/andyfaff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-01T11:45:56Z", "updated_at": "2017-10-23T05:06:19Z", "closed_at": "2017-10-23T05:06:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [line example](http://dan.iel.fm/emcee/current/user/line/) is based on the code in\r\nhttps://github.com/dfm/emcee/blob/master/examples/line.py. On [line 73[(https://github.com/dfm/emcee/blob/master/examples/line.py#L73) `chi2` is multiplied by a factor of 2. This factor of two is missing on the webpage `nll = lambda *args: -lnlike(*args)`.\r\nWhilst I think the former makes more sense from considering the log-likelihood equation, when I examine `hess_inv` from the `minimize` output with the factor of two missing, then the covariance matrix matches that obtained from the sampling. If the factor of two is present, then `hess_inv` is ~twice as large as that obtained from the sampling.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/216", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/216/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/216/events", "html_url": "https://github.com/dfm/emcee/issues/216", "id": 221623028, "node_id": "MDU6SXNzdWUyMjE2MjMwMjg=", "number": 216, "title": "Problem with multithreading on Windows", "user": {"login": "kevinea42", "id": 27437375, "node_id": "MDQ6VXNlcjI3NDM3Mzc1", "avatar_url": "https://avatars3.githubusercontent.com/u/27437375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinea42", "html_url": "https://github.com/kevinea42", "followers_url": "https://api.github.com/users/kevinea42/followers", "following_url": "https://api.github.com/users/kevinea42/following{/other_user}", "gists_url": "https://api.github.com/users/kevinea42/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinea42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinea42/subscriptions", "organizations_url": "https://api.github.com/users/kevinea42/orgs", "repos_url": "https://api.github.com/users/kevinea42/repos", "events_url": "https://api.github.com/users/kevinea42/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinea42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-13T16:55:06Z", "updated_at": "2017-04-16T16:35:50Z", "closed_at": "2017-04-16T16:35:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having an issue getting multithreading to work on my Windows 10 machine. Setting the \"threads = x\" parameter in the Ensemble Sampler causes a problem if x >1.  The system seems to spawn new python.exe processes, but they just sit idle. This problem does not occur on my Mac OSX laptop however.  I'm using Anaconda and a Jupyter notebook, running Python 2.7.0 and using Emcee 2.2.1. Any ideas for troubleshooting this? Please forgive me if this is not an appropriate place to post this. Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/215", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/215/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/215/events", "html_url": "https://github.com/dfm/emcee/issues/215", "id": 217892126, "node_id": "MDU6SXNzdWUyMTc4OTIxMjY=", "number": 215, "title": "No join of threads after running an emcee.EnsembleSampler", "user": {"login": "IstrateRoxana", "id": 3973801, "node_id": "MDQ6VXNlcjM5NzM4MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3973801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IstrateRoxana", "html_url": "https://github.com/IstrateRoxana", "followers_url": "https://api.github.com/users/IstrateRoxana/followers", "following_url": "https://api.github.com/users/IstrateRoxana/following{/other_user}", "gists_url": "https://api.github.com/users/IstrateRoxana/gists{/gist_id}", "starred_url": "https://api.github.com/users/IstrateRoxana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IstrateRoxana/subscriptions", "organizations_url": "https://api.github.com/users/IstrateRoxana/orgs", "repos_url": "https://api.github.com/users/IstrateRoxana/repos", "events_url": "https://api.github.com/users/IstrateRoxana/events{/privacy}", "received_events_url": "https://api.github.com/users/IstrateRoxana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-29T14:21:08Z", "updated_at": "2017-03-29T15:05:38Z", "closed_at": "2017-03-29T15:05:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running K times in the same script these two lines:\r\n\r\n```\r\nsampler = emcee.EnsembleSampler(\r\n                self.nwalkers,\r\n                self.ndim,\r\n                model_ln_prob,\r\n                args=(self, x, y),\r\n                threads=10)\r\nsampler.run_mcmc(pos, self.nsamples)\r\n```\r\n\r\nand monitoring with `ps` the number of threads created will result in k * 10 threads. How can I join somehow the threads without having to kill the program and restart?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/209", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/209/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/209/events", "html_url": "https://github.com/dfm/emcee/issues/209", "id": 200544301, "node_id": "MDU6SXNzdWUyMDA1NDQzMDE=", "number": 209, "title": "Autocorrelation time: is taking the mean the right thing to do?", "user": {"login": "fardal", "id": 4519710, "node_id": "MDQ6VXNlcjQ1MTk3MTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4519710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fardal", "html_url": "https://github.com/fardal", "followers_url": "https://api.github.com/users/fardal/followers", "following_url": "https://api.github.com/users/fardal/following{/other_user}", "gists_url": "https://api.github.com/users/fardal/gists{/gist_id}", "starred_url": "https://api.github.com/users/fardal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fardal/subscriptions", "organizations_url": "https://api.github.com/users/fardal/orgs", "repos_url": "https://api.github.com/users/fardal/repos", "events_url": "https://api.github.com/users/fardal/events{/privacy}", "received_events_url": "https://api.github.com/users/fardal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-01-13T04:16:17Z", "updated_at": "2018-02-07T17:03:48Z", "closed_at": "2017-11-06T20:45:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been running some tests of some MCMC variations with emcee, and have been using the autocorrelation time to estimate the speedup.  I was surprised how many steps it took to get a consistent autocorrelation time from EnsembleSampler.acor.  So I tried a different script I had for the autocorrelation time, and got much more stable results.  I am pretty sure the chief reason for the difference is that my routine calculates the autocorrelation function for each walker, then takes the mean.  In contrast emcee first takes the mean of the walkers, and then computes the autocorrelation of this mean chain.  It seems like the latter method is washing out the very fluctuations that the autocorrelation is supposed to measure.\r\n\r\nHere is an example that compares the two approaches, using an autoregressive model where the exact autocorrelation time is known.  Typical results look like this:\r\n\r\n```\r\nTrue autocorr length:  20.0084033613\r\nMean, std, min, max of two methods:\r\nCorr-first approach:  19.7929288976 0.358159093104 18.9992952537 20.8373795818\r\nMean-first approach:  19.685956288 5.69231566791 11.0983690515 48.3939875026\r\n```\r\n\r\nMy own routine for the autocorrelation time has its own drawbacks (not fast, questionable window choice) and I'm not suggesting it as a direct replacement, but it does seem to win easily in terms of precision.  I think theoretically the advantage should be a factor sqrt(Nwalkers), though in practice it seems slightly larger.\r\n\r\nI don't think the autocorrelation or the number of walkers or steps in this example is too unreasonable, compared to what people often run.  The behavior is similar with chains actually generated from EnsembleSampler from the Gaussian posterior function in the intro docs, though in that case we don't know the true value for comparison.\r\n\r\nI saw a note somewhere in the emcee repository that the reason for taking the mean is explained in Goodman and Weare, but I didn't follow the reasoning.  Whatever the motivation is, I wonder if it justifies the much greater variance in the autocorrelation time.  While acor is not the primary thing anyone's interested in, estimating it badly can lead to running the simulation much longer than necessary, or stopping it too soon and thus undersampling the posterior.\r\n\r\n![autocorr](https://cloud.githubusercontent.com/assets/4519710/21918173/915ac3a4-d91c-11e6-8376-f6c8350d8e9b.png)\r\n```\r\n\"\"\"Tests of autocorrelation length.\r\n\"\"\"\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom emcee import ensemble\r\n\r\n\r\ndef autoregressive():\r\n    m_walkers = 64\r\n\r\n    n_steps = 10000\r\n    R1 = 0.9048    # length = 20\r\n\r\n    # n_steps = 10000\r\n    # R1 = 0.8    # length = 9\r\n\r\n    # n_steps = 30000\r\n    # R1 = 0.9355  # length = 30\r\n\r\n    sig_tot = 1.0\r\n    sig1 = sig_tot * np.sqrt(1. -R1**2)\r\n    truelength = (R1**np.abs(np.arange(-1000,1000))).sum()\r\n    # print 'true length: ', truelength\r\n    chain = np.zeros((m_walkers, n_steps))\r\n    chain[:,0] = sig_tot * np.random.normal(size=m_walkers)\r\n    for i in xrange(1,n_steps):\r\n        chain[:,i] = R1 * chain[:,i-1] + sig1 * np.random.normal(size=m_walkers)\r\n    # print 'mean, expected: ', chain.mean(), 0.\r\n    # print 'standard deviation, expected: ', chain.std(), sig_tot\r\n    chain.shape = (m_walkers, n_steps, 1)  # make last index param dimension (1-d here)\r\n    return chain, truelength\r\n\r\n\r\ndef findauto(params):\r\n    ns = params.shape[0]\r\n    mc = params.shape[1]\r\n    nparams = params.shape[2]\r\n    assert nparams == 1\r\n    ncorr = min([400, (ns-10)])\r\n    for k in xrange(nparams):\r\n        chain = params[:,:,k]\r\n        xsig = chain.std()\r\n        chaincorr = np.zeros((ncorr,mc))\r\n        for j in xrange(mc):\r\n            for i in xrange(ncorr):\r\n                nsample = len(chain[i:,j])\r\n                chaincorr[i,j] = (chain[:nsample,j] * chain[i:,j]).mean()\r\n                chainmean_a = chain[:nsample,j].mean()\r\n                chainmean_b = chain[i:,j].mean()\r\n                chaincorr[i,j] -= chainmean_a * chainmean_b\r\n        corr = chaincorr.mean(axis=1)\r\n        corr /= corr[0]\r\n        index = np.arange(ncorr)\r\n        nclust_cum = 2.*corr.cumsum() - 1.\r\n        end = index > 3.*nclust_cum\r\n        if end.any():\r\n            imax = np.where(end)[0][0]\r\n            nclust = nclust_cum[imax-1]\r\n        else:\r\n            imax = -1\r\n            nclust = nclust_cum[-1]\r\n            print 'WARNING: autocorr not converged.'\r\n            \r\n        return nclust  # hack for my test-1-param usage here\r\n\r\n    \r\ndef findautofromemcee(chain):\r\n    m_walkers, n_steps, dim = chain.shape\r\n    def foofn():\r\n        pass\r\n    sampler = ensemble.EnsembleSampler(m_walkers, dim, foofn, a=2.0)\r\n    sampler._chain = chain\r\n    return sampler.acor[0]\r\n\r\n    \r\ndef do():\r\n    ntrial = 100\r\n    # ntrial = 5\r\n    corrfirst = np.zeros(ntrial)\r\n    meanfirst = np.zeros(ntrial)\r\n    for i in xrange(ntrial):\r\n        if i % 10 == 0: print i\r\n        chain, truelength = autoregressive()\r\n        biechain = chain[:,:,0].T[:,:,np.newaxis]\r\n        corrfirst[i] = findauto(biechain)\r\n        meanfirst[i] = findautofromemcee(chain)\r\n    print 'True autocorr length: ', truelength\r\n    print 'Mean, std, min, max of two methods:'\r\n    print 'Corr-first approach: ', corrfirst.mean(), corrfirst.std(), corrfirst.min(), corrfirst.max()\r\n    print 'Mean-first approach: ', meanfirst.mean(), meanfirst.std(), meanfirst.min(), meanfirst.max()\r\n\r\n    a,b,c = plt.hist(meanfirst, histtype='step', color='b', bins=20, label='Mean-first approach')\r\n    a,b,c = plt.hist(corrfirst, histtype='step', color='r', bins=20, label='Corr-first approach')\r\n    ylim = np.array(plt.ylim()); plt.plot(np.ones(2)+truelength, ylim, 'g--')\r\n    plt.legend()\r\n    plt.show()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/207", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/207/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/207/events", "html_url": "https://github.com/dfm/emcee/issues/207", "id": 193384624, "node_id": "MDU6SXNzdWUxOTMzODQ2MjQ=", "number": 207, "title": "Proposal covariance matrix in MH sampler", "user": {"login": "snaqvi1990", "id": 7546459, "node_id": "MDQ6VXNlcjc1NDY0NTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7546459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snaqvi1990", "html_url": "https://github.com/snaqvi1990", "followers_url": "https://api.github.com/users/snaqvi1990/followers", "following_url": "https://api.github.com/users/snaqvi1990/following{/other_user}", "gists_url": "https://api.github.com/users/snaqvi1990/gists{/gist_id}", "starred_url": "https://api.github.com/users/snaqvi1990/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snaqvi1990/subscriptions", "organizations_url": "https://api.github.com/users/snaqvi1990/orgs", "repos_url": "https://api.github.com/users/snaqvi1990/repos", "events_url": "https://api.github.com/users/snaqvi1990/events{/privacy}", "received_events_url": "https://api.github.com/users/snaqvi1990/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-04T23:28:54Z", "updated_at": "2017-11-06T20:44:45Z", "closed_at": "2017-11-06T20:44:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "For various reasons I'm using the Metropolis-Hastings sampler in emcee. I'm passing it a dict of (many) parameters, and also have to pass it a covariance matrix for the proposal distribution, which presumably must be some kind of matrix/array structure. How would the sampler match up the entries of the matrix (which aren't labeled) with the strings of the parameter dict keys? Is it just in the order of the dict.keys()?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/205", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/205/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/205/events", "html_url": "https://github.com/dfm/emcee/issues/205", "id": 192172516, "node_id": "MDU6SXNzdWUxOTIxNzI1MTY=", "number": 205, "title": "Necessary to have separate `logl` and `logp` functions with `PTSampler`?", "user": {"login": "andyfaff", "id": 702934, "node_id": "MDQ6VXNlcjcwMjkzNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/702934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyfaff", "html_url": "https://github.com/andyfaff", "followers_url": "https://api.github.com/users/andyfaff/followers", "following_url": "https://api.github.com/users/andyfaff/following{/other_user}", "gists_url": "https://api.github.com/users/andyfaff/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyfaff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyfaff/subscriptions", "organizations_url": "https://api.github.com/users/andyfaff/orgs", "repos_url": "https://api.github.com/users/andyfaff/repos", "events_url": "https://api.github.com/users/andyfaff/events{/privacy}", "received_events_url": "https://api.github.com/users/andyfaff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-29T02:34:20Z", "updated_at": "2017-11-06T20:35:59Z", "closed_at": "2017-11-06T20:35:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using `EnsembleSampler` one includes both the log-prior and log-likelihood terms into the `lnpostfn` function. However, for `PTSampler` one is supposed to supply `logl` and `logp` functions for the likelihood and prior.\r\nIs it still reasonable to make a function that calculates the log-posterior, supply it as the `logl` positional parameter and use a `logp` function that returns 0? Are there situations when this is reasonable, and situations when it's not reasonable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/203", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/203/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/203/events", "html_url": "https://github.com/dfm/emcee/issues/203", "id": 190846837, "node_id": "MDU6SXNzdWUxOTA4NDY4Mzc=", "number": 203, "title": "Parallel tempering execution ", "user": {"login": "sbruzzone", "id": 12411515, "node_id": "MDQ6VXNlcjEyNDExNTE1", "avatar_url": "https://avatars3.githubusercontent.com/u/12411515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbruzzone", "html_url": "https://github.com/sbruzzone", "followers_url": "https://api.github.com/users/sbruzzone/followers", "following_url": "https://api.github.com/users/sbruzzone/following{/other_user}", "gists_url": "https://api.github.com/users/sbruzzone/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbruzzone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbruzzone/subscriptions", "organizations_url": "https://api.github.com/users/sbruzzone/orgs", "repos_url": "https://api.github.com/users/sbruzzone/repos", "events_url": "https://api.github.com/users/sbruzzone/events{/privacy}", "received_events_url": "https://api.github.com/users/sbruzzone/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 719014526, "node_id": "MDU6TGFiZWw3MTkwMTQ1MjY=", "url": "https://api.github.com/repos/dfm/emcee/labels/Question", "name": "Question", "color": "bfd4f2", "default": false, "description": null}, {"id": 722979850, "node_id": "MDU6TGFiZWw3MjI5Nzk4NTA=", "url": "https://api.github.com/repos/dfm/emcee/labels/Stale", "name": "Stale", "color": "f9d0c4", "default": false, "description": null}, {"id": 742467361, "node_id": "MDU6TGFiZWw3NDI0NjczNjE=", "url": "https://api.github.com/repos/dfm/emcee/labels/Wontfix", "name": "Wontfix", "color": "b2520e", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-21T21:55:32Z", "updated_at": "2017-11-06T20:44:34Z", "closed_at": "2017-11-06T20:44:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is not an issue but rather a question regarding the parallel implementation of the parallel tempering sampler with emcee. (Sorry if this is not the place to ask this stuff)\r\n\r\nLet me explain. I'm currently running a parallel tempered code with emcee using nthreads = 8. \r\nEach thread calls a code in fortran to generate my model data. In each of these calls, the code in fortran is executed on 8 threads where I'm using OMP_NUM_THREADS=8 because that's the optimum set up for that particular fortran code. In this way I'm using the 32 cores available with redundancy. \r\n\r\nThe parallel tempering code executes just fine but after ~100 iterations(~50% of burn-in), the code starts to slow down, from the initial 7 mins for -each- iteration (20 walkers, 5 temps and 10 dimensions) down to 19 mins and growing.  What I see is that as iteration number increase, the code spends more time running on 8 threads and often on a single thread. Not surprised about the 8 threads running, that's actually fine, I'm puzzled about the single thread operations in particular. The plan is to complete 256 burn-in iterations, but my acceptance fraction is zero so far. So that's a red flag I bet.\r\n\r\nI'm using 5 temps because I think my data is noisy and 100 = nwalkers x temps seems legit for 10 dimensions. \r\n\r\nI just want to know if this sort of behaviour is expected. I was planning to run close to 2000 iterations and initially it would take weeks. Now this sort of overheads I'm getting jeopardise my plans.\r\n\r\ncomments/suggestions?\r\nthanks in advance\r\n Sebastian", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/202", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/202/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/202/events", "html_url": "https://github.com/dfm/emcee/issues/202", "id": 186347510, "node_id": "MDU6SXNzdWUxODYzNDc1MTA=", "number": 202, "title": "Which Posterior to consider from PTSampler temperatures output?", "user": {"login": "sultanier", "id": 9977182, "node_id": "MDQ6VXNlcjk5NzcxODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9977182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sultanier", "html_url": "https://github.com/sultanier", "followers_url": "https://api.github.com/users/sultanier/followers", "following_url": "https://api.github.com/users/sultanier/following{/other_user}", "gists_url": "https://api.github.com/users/sultanier/gists{/gist_id}", "starred_url": "https://api.github.com/users/sultanier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sultanier/subscriptions", "organizations_url": "https://api.github.com/users/sultanier/orgs", "repos_url": "https://api.github.com/users/sultanier/repos", "events_url": "https://api.github.com/users/sultanier/events{/privacy}", "received_events_url": "https://api.github.com/users/sultanier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-31T17:35:31Z", "updated_at": "2016-11-01T15:45:22Z", "closed_at": "2016-11-01T15:45:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to ask quick questions about PTSampler: \r\n\r\n1 - When using PTSampler, the ouptut chain has a shape of (ntemps, nwalkers, nsteps, ndim), so for each ntemps we have a chain of a shape (nwalkers, nsteps, ndim) which gives different posterior distribution. Which posterior that I should consider as my result? should I consider all of them such that I plot the whole sample with the shape ==  (ntemps*nwalkers*nsteps, ndim)? OR I should consider the first ntemps as its the highest temperature I believe? \r\n\r\n2 - Is there any need to use run_mcmc after running sampler.sample?\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/201", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/201/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/201/events", "html_url": "https://github.com/dfm/emcee/issues/201", "id": 186151816, "node_id": "MDU6SXNzdWUxODYxNTE4MTY=", "number": 201, "title": "how to define the tiny gaussian balls to start", "user": {"login": "sultanier", "id": 9977182, "node_id": "MDQ6VXNlcjk5NzcxODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9977182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sultanier", "html_url": "https://github.com/sultanier", "followers_url": "https://api.github.com/users/sultanier/followers", "following_url": "https://api.github.com/users/sultanier/following{/other_user}", "gists_url": "https://api.github.com/users/sultanier/gists{/gist_id}", "starred_url": "https://api.github.com/users/sultanier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sultanier/subscriptions", "organizations_url": "https://api.github.com/users/sultanier/orgs", "repos_url": "https://api.github.com/users/sultanier/repos", "events_url": "https://api.github.com/users/sultanier/events{/privacy}", "received_events_url": "https://api.github.com/users/sultanier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-30T18:02:56Z", "updated_at": "2016-10-31T17:26:33Z", "closed_at": "2016-10-31T17:26:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a question here: I have three parameters ranging (-1.0, 2.0), (37.0, 43.0), (0.0,1.0)\nI dont know what is the right separation to use in here some exapmles show: \npos = [result[\"x\"] + 1e-4_np.random.randn(ndim) for i in range(nwalkers)]\nand others use \npos = [result[\"x\"] + 1e-8_np.random.randn(ndim) for i in range(nwalkers)]\n\nso how do I judge this? can I use anything from 1e-4 to 1e-8 or there is a way to select this parameter.\n\nThanks in advance \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/200", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/200/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/200/events", "html_url": "https://github.com/dfm/emcee/issues/200", "id": 185192172, "node_id": "MDU6SXNzdWUxODUxOTIxNzI=", "number": 200, "title": "Unpickling error when using emcee over multiple nodes", "user": {"login": "guillochon", "id": 4998058, "node_id": "MDQ6VXNlcjQ5OTgwNTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/4998058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guillochon", "html_url": "https://github.com/guillochon", "followers_url": "https://api.github.com/users/guillochon/followers", "following_url": "https://api.github.com/users/guillochon/following{/other_user}", "gists_url": "https://api.github.com/users/guillochon/gists{/gist_id}", "starred_url": "https://api.github.com/users/guillochon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guillochon/subscriptions", "organizations_url": "https://api.github.com/users/guillochon/orgs", "repos_url": "https://api.github.com/users/guillochon/repos", "events_url": "https://api.github.com/users/guillochon/events{/privacy}", "received_events_url": "https://api.github.com/users/guillochon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-25T18:08:53Z", "updated_at": "2017-03-22T18:30:16Z", "closed_at": "2017-03-22T18:30:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have been able to get my code that's wrapping emcee functional via MPI, but it appears to only work when the job is running on a single node with multiple CPUs (e.g. my laptop, single node on a cluster). When I attempt to run on multiple nodes, I get an unpickling error:\n\n``` bash\nTraceback (most recent call last):\n  File \"/n/home01/jguilloc/envs/PY34/lib/python3.4/runpy.py\", line 170, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"/n/home01/jguilloc/envs/PY34/lib/python3.4/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/n/home01/jguilloc/envs/PY34/lib/python3.4/site-packages/mosfit-0.1.5-py3.4.egg/mosfit/__main__.py\", line 6, in <module>\n    main.main()\n  File \"/n/home01/jguilloc/envs/PY34/lib/python3.4/site-packages/mosfit-0.1.5-py3.4.egg/mosfit/main.py\", line 269, in main\n    pool.wait()\n  File \"/n/home01/jguilloc/envs/PY34/lib/python3.4/site-packages/emcee-2.2.1-py3.4.egg/emcee/mpi_pool.py\", line 94, in wait\n  File \"MPI/Comm.pyx\", line 1192, in mpi4py.MPI.Comm.recv (src/mpi4py.MPI.c:106889)\n  File \"MPI/msgpickle.pxi\", line 292, in mpi4py.MPI.PyMPI_recv (src/mpi4py.MPI.c:43053)\n  File \"MPI/msgpickle.pxi\", line 143, in mpi4py.MPI.Pickle.load (src/mpi4py.MPI.c:41248)\n_pickle.UnpicklingError: invalid load key, '^H'.\n```\n\nThe code that is invoking emcee is here, I've highlighted the line with the emcee call: https://github.com/guillochon/MOSFiT/blob/master/mosfit/fitter.py#L281-L282.\n\nPart of the trickery to get the current implementation working was to make the model object, which is initialized independently on all nodes, global. I imagine this could be a source of the error, but I'm not sure how to get it working without the global approach.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/199", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/199/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/199/events", "html_url": "https://github.com/dfm/emcee/issues/199", "id": 183218762, "node_id": "MDU6SXNzdWUxODMyMTg3NjI=", "number": 199, "title": "Pool slower than serial, pickling with every call?", "user": {"login": "guillochon", "id": 4998058, "node_id": "MDQ6VXNlcjQ5OTgwNTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/4998058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guillochon", "html_url": "https://github.com/guillochon", "followers_url": "https://api.github.com/users/guillochon/followers", "following_url": "https://api.github.com/users/guillochon/following{/other_user}", "gists_url": "https://api.github.com/users/guillochon/gists{/gist_id}", "starred_url": "https://api.github.com/users/guillochon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guillochon/subscriptions", "organizations_url": "https://api.github.com/users/guillochon/orgs", "repos_url": "https://api.github.com/users/guillochon/repos", "events_url": "https://api.github.com/users/guillochon/events{/privacy}", "received_events_url": "https://api.github.com/users/guillochon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-15T16:34:38Z", "updated_at": "2017-05-06T16:57:38Z", "closed_at": "2016-10-25T18:03:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all, I'm seeing some pretty abysmal performance out of emcee in parallel, the code is even slower than serial on a single computer. I have a feeling this is because my objective function is buried in a class, and emcee pickles the entire class when it maps to the pool. Unfortunately, I don't believe it's easy to separate the objective function from the class, the function calls a variety of methods within the class and therefore the class needs to be distributed to the workers. However, I don't believe the class needs to be distributed _with every call_, which emcee currently seems to be doing.\n\nIs there a way to \"pre-distribute\" the class without having to pass a large set of pickles with every call?\n\nPart of my code where sampler is called is here: https://github.com/guillochon/MOSFiT/blob/master/mosfit/model.py#L359\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/198", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/198/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/198/events", "html_url": "https://github.com/dfm/emcee/issues/198", "id": 183146075, "node_id": "MDU6SXNzdWUxODMxNDYwNzU=", "number": 198, "title": "MHSampler fails to sample uniform posterior likelihood", "user": {"login": "marius311", "id": 1510968, "node_id": "MDQ6VXNlcjE1MTA5Njg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1510968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marius311", "html_url": "https://github.com/marius311", "followers_url": "https://api.github.com/users/marius311/followers", "following_url": "https://api.github.com/users/marius311/following{/other_user}", "gists_url": "https://api.github.com/users/marius311/gists{/gist_id}", "starred_url": "https://api.github.com/users/marius311/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marius311/subscriptions", "organizations_url": "https://api.github.com/users/marius311/orgs", "repos_url": "https://api.github.com/users/marius311/repos", "events_url": "https://api.github.com/users/marius311/events{/privacy}", "received_events_url": "https://api.github.com/users/marius311/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-14T20:43:55Z", "updated_at": "2016-10-15T08:05:20Z", "closed_at": "2016-10-15T08:05:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Perhaps I'm missing something but shouldn't this work? \n\n``` python\nsampler = emcee.MHSampler(eye(1), 1, lambda x,: 0 if -1<x<1 else -inf)\nsampler.run_mcmc([0],100)\n```\n\nThat should get me samples uniformly distributed from -1 to 1, but instead the chain never moves, i.e. \n\n``` python\n> all(sampler.chain==0)\nTrue\n```\n\nI'm using emcee 2.2.1 and Python 3.5.2.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/197", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/197/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/197/events", "html_url": "https://github.com/dfm/emcee/issues/197", "id": 182309493, "node_id": "MDU6SXNzdWUxODIzMDk0OTM=", "number": 197, "title": "PTSampler Pickling Error", "user": {"login": "sultanier", "id": 9977182, "node_id": "MDQ6VXNlcjk5NzcxODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9977182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sultanier", "html_url": "https://github.com/sultanier", "followers_url": "https://api.github.com/users/sultanier/followers", "following_url": "https://api.github.com/users/sultanier/following{/other_user}", "gists_url": "https://api.github.com/users/sultanier/gists{/gist_id}", "starred_url": "https://api.github.com/users/sultanier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sultanier/subscriptions", "organizations_url": "https://api.github.com/users/sultanier/orgs", "repos_url": "https://api.github.com/users/sultanier/repos", "events_url": "https://api.github.com/users/sultanier/events{/privacy}", "received_events_url": "https://api.github.com/users/sultanier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-11T16:19:20Z", "updated_at": "2016-10-11T16:38:08Z", "closed_at": "2016-10-11T16:38:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for this wonderful mcmc tool,\n\nI started to use the PTSampler and it works fine with 1 thread but when I set threads > 1 then I get the following error:\nfor p, lnprob, lnlike in sampler.sample(p0, iterations=6):\n  File \"/home/bartolomeu/sultan/src/emc/local/lib/python2.7/site-packages/emcee/ptsampler.py\", line 325, in sample\n    self.dim))))\n  File \"/usr/lib/python2.7/multiprocessing/pool.py\", line 251, in map\n    return self.map_async(func, iterable, chunksize).get()\n  File \"/usr/lib/python2.7/multiprocessing/pool.py\", line 558, in get\n    raise self._value\ncPickle.PicklingError: Can't pickle <type 'function'>: attribute lookup __builtin__.function failed\n\nIt sounds like I should make my lnlike and lnprior picklable but I dont know how?\n\nmy prior function is:\ndef lnprior(theta):\n    m,b,lnf = theta\n    if min(fesc) < m < max(fesc) and min(A) < b < max(A)  and min(n) < lnf < max(n):\n        return 0.0\n    return -np.inf\n\nand liklihood consists of three different constraints:\n\ndef lnlike(theta):\n    model = fun(theta)\n    model1 =fun1(theta)\n    model2 = fun3(theta)\n    loglike=0.0\n    for i in range(10):\n        chisq = 0.5_((data[i]-model[i])/sigma[i])__2.0\n        prefactor=0.5_np.log(2.0_np.pi_sigma[i]**2.0)\n        loglike -= prefactor + chisq\n        chisq1 = 0.5*((data1[i]-model1[i])/sigma1[i])**2.0\n        prefactor1=0.5_np.log(2.0_np.pi_sigma1[i]__2.0)\n        loglike -= prefactor1 + chisq1\n        chisq2 = 0.5_((data2[i]-model2[i])/sigma2[i])**2.0\n        prefactor2=0.5_np.log(2.0_np.pi*sigma2[i]**2.0)\n        loglike -= prefactor2 + chisq2\n    return loglike\nand then I use:\n\nsampler=PTSampler(ntemps, nwalkers, ndim, lnlike, lnprior,threads=4)\np0 = np.random.uniform(low=[0.16, 39.5, 0.3], high=[0.2, 40., .4], size=(ntemps, nwalkers, ndim))\nfor p, lnprob, lnlike in sampler.sample(p0, iterations=6):\n    pass\n....etc and the pickling error comes in. Any idea?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/196", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/196/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/196/events", "html_url": "https://github.com/dfm/emcee/issues/196", "id": 179191947, "node_id": "MDU6SXNzdWUxNzkxOTE5NDc=", "number": 196, "title": "Multiprocessing issue when writing/reading files at each step", "user": {"login": "thommevans", "id": 1647504, "node_id": "MDQ6VXNlcjE2NDc1MDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1647504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thommevans", "html_url": "https://github.com/thommevans", "followers_url": "https://api.github.com/users/thommevans/followers", "following_url": "https://api.github.com/users/thommevans/following{/other_user}", "gists_url": "https://api.github.com/users/thommevans/gists{/gist_id}", "starred_url": "https://api.github.com/users/thommevans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thommevans/subscriptions", "organizations_url": "https://api.github.com/users/thommevans/orgs", "repos_url": "https://api.github.com/users/thommevans/repos", "events_url": "https://api.github.com/users/thommevans/events{/privacy}", "received_events_url": "https://api.github.com/users/thommevans/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-26T10:28:09Z", "updated_at": "2016-09-27T15:12:13Z", "closed_at": "2016-09-27T15:09:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm needing to use some 3rd party FORTRAN software to evaluate my log likelihood function at each step. Unfortunately, this software requires a plain text file to be written to disk which the FORTRAN software then reads and takes as input to compute the likelihood. In practice, each walker will require a separate input text file to be written at each step. I'd like to run this in multiprocessing mode (threads>1), but unfortunately it crashes. From what I can tell, there's some issue with the input files not being generated as I'd expect for each walker at the log likelihood evaluation. To illustrate the qualitative nature of the issue, I've added a simple hack of the Quickstart example from the emcee website below, followed by the error message I get when it crashes; it's the same issue I'm getting in my more specific application. Any suggestions on what I'm doing wrong, or if this sort of thing is even possible, would be much appreciated. thanks :)\n###### \n\nimport emcee\nimport numpy as np\nimport os, time\ndef lnprob(x, mu, icov):\n    tempfile = '{0}.in'.format( int( (1e6)_time.time() ) ) # generates unique input filename\n    np.savetxt( tempfile, icov ) # write inputs to disk\n    icov_reread = np.loadtxt( tempfile ) # in my application, it's actually a FORTRAN program that reads this input file\n    os.remove( tempfile )\n    diff = x-mu\n    return -np.dot(diff,np.dot(icov_reread,diff))/2.0\nndim = 50\nmeans = np.random.rand(ndim)\ncov = 0.5 - np.random.rand(ndim *_ 2).reshape((ndim, ndim))\ncov = np.triu(cov)\ncov += cov.T - np.diag(cov.diagonal())\ncov = np.dot(cov,cov)\nicov = np.linalg.inv(cov)\nnwalkers = 150\np0 = np.random.rand(ndim \\* nwalkers).reshape((nwalkers, ndim))\nsampler = emcee.EnsembleSampler(nwalkers, ndim, lnprob, args=[means, icov], threads=4)\npos, prob, state = sampler.run_mcmc(p0, 150)\n###### \n\nemcee: Exception while calling your likelihood function:\n  params: [ 0.00416683  0.00121443  0.09297952  0.88577573  0.19752657  0.43616513\n  0.82632147  0.92474106  0.5263543   0.13451031  0.15140635  0.28707279\n  0.83895138  0.13485659  0.67149602  0.0437184   0.52699409  0.30602217\n  0.49810951  0.05429097  0.09616479  0.56352244  0.40038342  0.96128477\n  0.96139381  0.30692886  0.66910766  0.10697474  0.66191896  0.33147187\n  0.46090604  0.22815596  0.97349513  0.0471428   0.8184995   0.85949838\n  0.81470446  0.95773865  0.70743459  0.19343325  0.82486592  0.85985209\n  0.0808939   0.54152892  0.61528055  0.53683463  0.77863934  0.88026515\n  0.97775209  0.36900002]\n  args: [array([ 0.58793961,  0.92810062,  0.17459986,  0.20492939,  0.18346653,\n        0.53892566,  0.57584874,  0.94185575,  0.24163453,  0.41284317,\n        0.48564821,  0.67920761,  0.34323044,  0.2020662 ,  0.04917549,\n        0.83358774,  0.20774804,  0.56789084,  0.21685981,  0.29940764,\n        0.87879338,  0.93357872,  0.55544829,  0.11536287,  0.08379872,\n        0.25626357,  0.65025791,  0.45939602,  0.00942292,  0.91788029,\n        0.80075432,  0.14981844,  0.9870799 ,  0.85341932,  0.62013305,\n        0.69599445,  0.3301484 ,  0.20774183,  0.10103013,  0.59141142,\n        0.83804104,  0.31710734,  0.98339552,  0.56217429,  0.13204708,\n        0.51717227,  0.9444871 ,  0.80968058,  0.71109077,  0.07345402]), array([[  5.8661203 ,   2.63731571,  -2.74252383, ...,   0.35754405,\n          1.63243834,   0.41132016],\n       [  2.63731571,   4.7774109 ,   4.78864275, ...,  -0.99615663,\n          6.5050327 ,  -5.25536002],\n       [ -2.74252383,   4.78864275,  34.84112813, ...,   0.42214212,\n         17.77711414, -25.9003554 ],\n       ..., \n       [  0.35754405,  -0.99615663,   0.42214212, ...,   2.69706443,\n         -2.79463492,   0.27055001],\n       [  1.63243834,   6.5050327 ,  17.77711414, ...,  -2.79463492,\n         17.00835671, -15.69519896],\n       [  0.41132016,  -5.25536002, -25.9003554 , ...,   0.27055001,\n        -15.69519896,  21.18178664]])]\n  kwargs: {}\n  exception:\nTraceback (most recent call last):\n  File \"/home/tevans/.local/lib/python2.7/site-packages/emcee/ensemble.py\", line 519, in **call**\n    return self.f(x, _self.args, *_self.kwargs)\n  File \"/home/tevans/code/pacode/atmo/run/hat-p-18/EmceeMultithreadTest.py\", line 12, in lnprob\n    os.remove( tempfile )\nOSError: [Errno 2] No such file or directory: '1474885596433220.in'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/195", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/195/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/195/events", "html_url": "https://github.com/dfm/emcee/issues/195", "id": 176447378, "node_id": "MDU6SXNzdWUxNzY0NDczNzg=", "number": 195, "title": "AutocorrError, 'The chain is too short to reliably estimate the autocorrelation time'", "user": {"login": "ReddTea", "id": 14165443, "node_id": "MDQ6VXNlcjE0MTY1NDQz", "avatar_url": "https://avatars0.githubusercontent.com/u/14165443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ReddTea", "html_url": "https://github.com/ReddTea", "followers_url": "https://api.github.com/users/ReddTea/followers", "following_url": "https://api.github.com/users/ReddTea/following{/other_user}", "gists_url": "https://api.github.com/users/ReddTea/gists{/gist_id}", "starred_url": "https://api.github.com/users/ReddTea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ReddTea/subscriptions", "organizations_url": "https://api.github.com/users/ReddTea/orgs", "repos_url": "https://api.github.com/users/ReddTea/repos", "events_url": "https://api.github.com/users/ReddTea/events{/privacy}", "received_events_url": "https://api.github.com/users/ReddTea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2016-09-12T18:23:43Z", "updated_at": "2019-11-08T11:44:34Z", "closed_at": "2016-12-03T15:20:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been using emcee without any problems for a while. Recently I tried running my program in Windows10, but I get an error with the autocorr (that I didn't get before).\nUsing the quickstart.py example I get the same problem but I can't figure out whats wrong whatsoever.\nI hope you can help me figuring out whats wrong . This is the log I get running quickstart.py :\n\n``` python\nIn [1]: run quickstart.py\nMean acceptance fraction: 0.191032\n---------------------------------------------------------------------------\nAutocorrError                             Traceback (most recent call last)\nC:\\Users\\anibal\\Documents\\GitHub\\emcee\\examples\\quickstart.py in <module>()\n     58 # Estimate the integrated autocorrelation time for the time series in each\n     59 # parameter.\n---> 60 print(\"Autocorrelation time:\", sampler.get_autocorr_time())\n     61\n     62 # Finally, you can plot the projected histograms of the samples using\n\nC:\\Users\\anibal\\Anaconda2\\lib\\site-packages\\emcee-2.2.1-py2.7.egg\\emcee\\ensemble.pyc in get_autocorr_time(self, low, high, step, c, fast)\n    501         return autocorr.integrated_time(np.mean(self.chain, axis=0), axis=0,\n    502                                         low=low, high=high, step=step, c=c,\n--> 503                                         fast=fast)\n    504\n    505\n\nC:\\Users\\anibal\\Anaconda2\\lib\\site-packages\\emcee-2.2.1-py2.7.egg\\emcee\\autocorr.pyc in integrated_time(x, low, high, step, c, full_output, axis, fast)\n    116             break\n    117\n--> 118     raise AutocorrError(\"The chain is too short to reliably estimate \"\n    119                         \"the autocorrelation time\")\n    120\n\nAutocorrError: The chain is too short to reliably estimate the autocorrelation time\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/193", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/193/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/193/events", "html_url": "https://github.com/dfm/emcee/issues/193", "id": 175427019, "node_id": "MDU6SXNzdWUxNzU0MjcwMTk=", "number": 193, "title": "Using multiprocess instead of multiprocessing", "user": {"login": "adwasser", "id": 4566243, "node_id": "MDQ6VXNlcjQ1NjYyNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4566243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adwasser", "html_url": "https://github.com/adwasser", "followers_url": "https://api.github.com/users/adwasser/followers", "following_url": "https://api.github.com/users/adwasser/following{/other_user}", "gists_url": "https://api.github.com/users/adwasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/adwasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adwasser/subscriptions", "organizations_url": "https://api.github.com/users/adwasser/orgs", "repos_url": "https://api.github.com/users/adwasser/repos", "events_url": "https://api.github.com/users/adwasser/events{/privacy}", "received_events_url": "https://api.github.com/users/adwasser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-07T06:57:29Z", "updated_at": "2016-11-20T01:42:02Z", "closed_at": "2016-11-20T01:42:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to pass in bound methods to the `EnsembleSampler` for my log posterior function.  Python's default serialization module, `pickle`, makes that somewhat frustrating.  My current solution is just to replace `multiprocessing` with the `multiprocess` [module](https://pypi.python.org/pypi/multiprocess) whenever possible, e.g., adwasser/emcee@ea0948a6a2cdcb57e19ab123b321c5f0163faf00\n\nAny thoughts on the feasibility of this as a workaround?  It get done what I need it to, but I'm not sure where it will break things.\n\nThanks!\nAsher \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/190", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/190/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/190/events", "html_url": "https://github.com/dfm/emcee/issues/190", "id": 168357780, "node_id": "MDU6SXNzdWUxNjgzNTc3ODA=", "number": 190, "title": "SLURM srun error", "user": {"login": "vvinuv", "id": 3307229, "node_id": "MDQ6VXNlcjMzMDcyMjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3307229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvinuv", "html_url": "https://github.com/vvinuv", "followers_url": "https://api.github.com/users/vvinuv/followers", "following_url": "https://api.github.com/users/vvinuv/following{/other_user}", "gists_url": "https://api.github.com/users/vvinuv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvinuv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvinuv/subscriptions", "organizations_url": "https://api.github.com/users/vvinuv/orgs", "repos_url": "https://api.github.com/users/vvinuv/repos", "events_url": "https://api.github.com/users/vvinuv/events{/privacy}", "received_events_url": "https://api.github.com/users/vvinuv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-07-29T16:00:36Z", "updated_at": "2016-11-20T01:35:34Z", "closed_at": "2016-11-20T01:35:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Admin\nI was trying to run emcee on a cluster. However, I found a few errors when I run the python code with srun (the SLURM command). My slurm script is following\n# !/bin/bash\n# SBATCH -p debug\n# SBATCH -N 1\n# SBATCH -n 32\n# SBATCH -t 00:30:00\n# SBATCH -o debug_cori.out\n# SBATCH -e debug_cori.err\n\nmodule load gsl\nsrun -n 32 /global/project/projectdirs/des/vinu/software/anaconda_Jul12_2016/bin/python ./test_cori_debug.py\n\nThe python code test_cori_debug.py is following\n\nimport sys\nimport numpy as np\nimport emcee\nimport time\nfrom emcee.utils import MPIPool\n\nvariances=np.array([1,1,1,1]) # true variances\nmeans=np.array([0,0,0,0]) # true means\nlabels=['a','b','c','d'] # parameter labels\n\ndef lnprior(x):\n    # this is the prior on the log-likelihood lnL set to -infinity for forbidden regions\n    if ( -10<x[0]<10 and -10<x[1] < 10 and -10<x[2]<10 and -10<x[3]<10 ):\n        return 0.0\n    return -np.inf\n\ndef lnprob(x):\n    if not np.isfinite( lnprior(x) ):\n        return -np.inf\n    return -0.5 \\* np.sum((x-means)*_2/variances *_ 2)\n# number of dimensions and walkers:\n\nndim = 4\nnwalkers = 8\nchain_length = 1\nnthreads = 1\n\n# the starting point for each walker: each walker should have a different(!) starting point inside the prior, close to the expected max. likelihood region\np0 = np.array([5 -1 + 2*np.random.rand(ndim) for i in range(nwalkers)])\n\n# Initialize the MPI-based pool used for parallelization.\npool = MPIPool(loadbalance=True)\n\nif not pool.is_master():\n    # Wait for instructions from the master process.\n    pool.wait()\n    sys.exit(0)\nsampler = emcee.EnsembleSampler(nwalkers, ndim, lnprob, pool=pool)\nfsample = 'samples_test_cori_debug.txt'\nf = open(fsample, 'w')\nf.close()\nsteps = 1\nfor result in sampler.sample(p0, iterations=chain_length, storechain=False):\n    position = result[0]\n    with open(fsample,'a') as f_handle:\n        np.savetxt(f_handle,position)\n    print steps,'done at',time.strftime(\"%Y%m%d-%H%M%S\")\n    steps+= 1\npool.close()\n\nThe error is\n\nTraceback (most recent call last):\n  File \"./test_cori_debug.py\", line 45, in <module>\n    pool = MPIPool(loadbalance=True)\n  File \"build/bdist.linux-x86_64/egg/emcee/mpi_pool.py\", line 66, in **init**\nValueError: Tried to create an MPI pool, but there was only one MPI process available. Need at least two.\n....etc. \n\nsrun: error: nid00027: tasks 9,15: Exited with exit code 1\nsrun: Terminating job step 2785683.0\nslurmstepd: error: **\\* STEP 2785683.0 ON nid00027 CANCELLED AT 2016-07-29T08:43:20 \n\nI think the error tells that there is only one MPI process available. Do you know why this error happens? Is it possible to fix this error?\nThanks\nVinu\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/187", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/187/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/187/events", "html_url": "https://github.com/dfm/emcee/issues/187", "id": 165610560, "node_id": "MDU6SXNzdWUxNjU2MTA1NjA=", "number": 187, "title": "Function autocorr.integrated_time() missing \"window\" keyword argument", "user": {"login": "turnerm", "id": 6585693, "node_id": "MDQ6VXNlcjY1ODU2OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6585693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/turnerm", "html_url": "https://github.com/turnerm", "followers_url": "https://api.github.com/users/turnerm/followers", "following_url": "https://api.github.com/users/turnerm/following{/other_user}", "gists_url": "https://api.github.com/users/turnerm/gists{/gist_id}", "starred_url": "https://api.github.com/users/turnerm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/turnerm/subscriptions", "organizations_url": "https://api.github.com/users/turnerm/orgs", "repos_url": "https://api.github.com/users/turnerm/repos", "events_url": "https://api.github.com/users/turnerm/events{/privacy}", "received_events_url": "https://api.github.com/users/turnerm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-14T17:02:30Z", "updated_at": "2016-11-20T01:35:42Z", "closed_at": "2016-11-20T01:35:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like when the autocorr.integrated_time() function was updated recently, the \"window\" keyword was removed. However, this function is still called with \"window=50\" as an argument in both ensemble.py and mh.py. \n\nThe keyword error was triggered for me using the example script quickstart.py.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/186", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/186/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/186/events", "html_url": "https://github.com/dfm/emcee/issues/186", "id": 165609549, "node_id": "MDU6SXNzdWUxNjU2MDk1NDk=", "number": 186, "title": "get_autocorr_time breaks from 2.1 to 2.2", "user": {"login": "astronomeralex", "id": 3718991, "node_id": "MDQ6VXNlcjM3MTg5OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3718991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astronomeralex", "html_url": "https://github.com/astronomeralex", "followers_url": "https://api.github.com/users/astronomeralex/followers", "following_url": "https://api.github.com/users/astronomeralex/following{/other_user}", "gists_url": "https://api.github.com/users/astronomeralex/gists{/gist_id}", "starred_url": "https://api.github.com/users/astronomeralex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astronomeralex/subscriptions", "organizations_url": "https://api.github.com/users/astronomeralex/orgs", "repos_url": "https://api.github.com/users/astronomeralex/repos", "events_url": "https://api.github.com/users/astronomeralex/events{/privacy}", "received_events_url": "https://api.github.com/users/astronomeralex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-07-14T16:57:44Z", "updated_at": "2016-07-15T08:13:11Z", "closed_at": "2016-07-15T08:13:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "my code that uses emcee worked perfectly with emcee 2.1.0, but when I upgraded to 2.20, I get this error in the autocorrelation calculation\n\n```\nTraceback (most recent call last):\n  File \"01main.py\", line 220, in <module>\n    dataAvgFluxErr)  \n  File \"/gpfs/home/apm5587/MCSED/dust/src/emcee_functions.py\", line 246, in conductMCMC\n    sampler.get_autocorr_time(), \n  File \"/storage/home/apm5587/.local/lib/python2.7/site-packages/emcee/ensemble.py\", line 489, in get_autocorr_time\n    window=window, fast=fast)\nTypeError: integrated_time() got an unexpected keyword argument 'window'\n```\n\nseems like there were some changes to function keywords that didn't get propagated through the functions that call them?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/185", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/185/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/185/events", "html_url": "https://github.com/dfm/emcee/issues/185", "id": 164955843, "node_id": "MDU6SXNzdWUxNjQ5NTU4NDM=", "number": 185, "title": "VisibleDeprecationWarnings and Errors in downstream projects because PyPi release is old", "user": {"login": "andyfaff", "id": 702934, "node_id": "MDQ6VXNlcjcwMjkzNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/702934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyfaff", "html_url": "https://github.com/andyfaff", "followers_url": "https://api.github.com/users/andyfaff/followers", "following_url": "https://api.github.com/users/andyfaff/following{/other_user}", "gists_url": "https://api.github.com/users/andyfaff/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyfaff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyfaff/subscriptions", "organizations_url": "https://api.github.com/users/andyfaff/orgs", "repos_url": "https://api.github.com/users/andyfaff/repos", "events_url": "https://api.github.com/users/andyfaff/events{/privacy}", "received_events_url": "https://api.github.com/users/andyfaff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-11T22:39:59Z", "updated_at": "2016-07-13T04:36:03Z", "closed_at": "2016-07-13T04:36:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Changes to recent versions of numpy make creating an array with non-ints a `TypeError`, e.g. `np.zeros(num)` doesn't work if num is not an int. Issues relating to these numpy changes were fixed in `ptsampler.py` in August 2014 (https://github.com/dfm/emcee/commit/a4da655815a30011ec189d4d2f93a73d5b4fff98) and also in #175. However, these fixes are not in the current release version on PyPi, which dates from May 2014. This means that one cannot use `PTSampler` with current numpy and the current PyPi release of emcee.\nThis is also causing downstream issues in a project which uses emcee, https://github.com/lmfit/lmfit-py/issues/350. Is there a timeline for the next release of emcee on PyPi because at the moment significant functionality doesn't work and this issue is having knockon effects downstream?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/184", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/184/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/184/events", "html_url": "https://github.com/dfm/emcee/issues/184", "id": 161342480, "node_id": "MDU6SXNzdWUxNjEzNDI0ODA=", "number": 184, "title": "Using emcee with a shared multiprocessing array ", "user": {"login": "catherinezucker", "id": 18339657, "node_id": "MDQ6VXNlcjE4MzM5NjU3", "avatar_url": "https://avatars2.githubusercontent.com/u/18339657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catherinezucker", "html_url": "https://github.com/catherinezucker", "followers_url": "https://api.github.com/users/catherinezucker/followers", "following_url": "https://api.github.com/users/catherinezucker/following{/other_user}", "gists_url": "https://api.github.com/users/catherinezucker/gists{/gist_id}", "starred_url": "https://api.github.com/users/catherinezucker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catherinezucker/subscriptions", "organizations_url": "https://api.github.com/users/catherinezucker/orgs", "repos_url": "https://api.github.com/users/catherinezucker/repos", "events_url": "https://api.github.com/users/catherinezucker/events{/privacy}", "received_events_url": "https://api.github.com/users/catherinezucker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 719014526, "node_id": "MDU6TGFiZWw3MTkwMTQ1MjY=", "url": "https://api.github.com/repos/dfm/emcee/labels/Question", "name": "Question", "color": "bfd4f2", "default": false, "description": null}, {"id": 722979850, "node_id": "MDU6TGFiZWw3MjI5Nzk4NTA=", "url": "https://api.github.com/repos/dfm/emcee/labels/Stale", "name": "Stale", "color": "f9d0c4", "default": false, "description": null}, {"id": 742467361, "node_id": "MDU6TGFiZWw3NDI0NjczNjE=", "url": "https://api.github.com/repos/dfm/emcee/labels/Wontfix", "name": "Wontfix", "color": "b2520e", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-21T03:31:53Z", "updated_at": "2017-11-06T21:11:31Z", "closed_at": "2017-11-06T21:11:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to force emcee to work on a shared multiprocessing array without significantly modifying any of the internal code? I'm running into the issue of trying to parallelize a PTSampler process that accepts a 25+ GB array as a likelihood argument. This array is read-only and never needs to be modified by any of the child processes. I understand that within the python multiprocessing module the Pipe pickles an object it receives and passes those bytes to the partner process which then unpickles it. However, a 25+ GB array is too large to be passed (and even if it was, is a huge performance bottleneck for the code), so I get the following error: \n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nerror                                     Traceback (most recent call last)\n<ipython-input-2-5341c9a8e13c> in <module>()\n      1 # run the sampler and time how long it takes\n----> 2 get_ipython().magic('time sampler.run_mcmc(starting_positions, nsteps)')\n      3 print('Sampler Done')\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/site-packages/IPython/core/interactiveshell.py in magic(self, arg_s)\n   2161         magic_name, _, magic_arg_s = arg_s.partition(' ')\n   2162         magic_name = magic_name.lstrip(prefilter.ESC_MAGIC)\n-> 2163         return self.run_line_magic(magic_name, magic_arg_s)\n   2164 \n   2165     #-------------------------------------------------------------------------\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/site-packages/IPython/core/interactiveshell.py in run_line_magic(self, magic_name, line)\n   2082                 kwargs['local_ns'] = sys._getframe(stack_depth).f_locals\n   2083             with self.builtin_trap:\n-> 2084                 result = fn(_args,_*kwargs)\n   2085             return result\n   2086 \n\n<decorator-gen-60> in time(self, line, cell, local_ns)\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/site-packages/IPython/core/magic.py in <lambda>(f, _a, *_k)\n    191     # but it's overkill for just that one bit of state.\n    192     def magic_deco(arg):\n--> 193         call = lambda f, _a, *_k: f(_a, *_k)\n    194 \n    195         if callable(arg):\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/site-packages/IPython/core/magics/execution.py in time(self, line, cell, local_ns)\n   1171         if mode=='eval':\n   1172             st = clock2()\n-> 1173             out = eval(code, glob, local_ns)\n   1174             end = clock2()\n   1175         else:\n\n<timed eval> in <module>()\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/site-packages/emcee/sampler.py in run_mcmc(self, pos0, N, rstate0, lnprob0, *_kwargs)\n    155         \"\"\"\n    156         for results in self.sample(pos0, lnprob0, rstate0, iterations=N,\n--> 157                                    *_kwargs):\n    158             pass\n    159         return results\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/site-packages/emcee/ptsampler.py in sample(self, p0, lnprob0, lnlike0, iterations, thin, storechain)\n    257                 results = list(map(fn, p.reshape((-1, self.dim))))\n    258             else:\n--> 259                 results = list(self.pool.map(fn, p.reshape((-1, self.dim))))\n    260 \n    261             logls = np.array([r[0] for r in results]).reshape((self.ntemps,\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/multiprocessing/pool.py in map(self, func, iterable, chunksize)\n    258         in a list that is returned.\n    259         '''\n--> 260         return self._map_async(func, iterable, mapstar, chunksize).get()\n    261 \n    262     def starmap(self, func, iterable, chunksize=None):\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/multiprocessing/pool.py in get(self, timeout)\n    606             return self._value\n    607         else:\n--> 608             raise self._value\n    609 \n    610     def _set(self, i, obj):\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/multiprocessing/pool.py in _handle_tasks(taskqueue, put, outqueue, pool, cache)\n    383                         break\n    384                     try:\n--> 385                         put(task)\n    386                     except Exception as e:\n    387                         job, ind = task[:2]\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/multiprocessing/connection.py in send(self, obj)\n    204         self._check_closed()\n    205         self._check_writable()\n--> 206         self._send_bytes(ForkingPickler.dumps(obj))\n    207 \n    208     def recv_bytes(self, maxlength=None):\n\n/n/home12/czucker/envs/PYTHON3/lib/python3.4/multiprocessing/connection.py in _send_bytes(self, buf)\n    401        # For wire compatibility with 3.2 and lower\n--> 402         header = struct.pack(\"!i\", n)\n    403         if n > 16384:\n    404            # The payload is large so Nagle's algorithm won't be triggered\n\nerror: 'i' format requires -2147483648 <= number <= 2147483647`\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nMy solution was to make a shared multiprocessing array for the 25+ GB array (following [this example](https://books.google.com/books?id=bIZaBAAAQBAJ&pg=PA253&lpg=PA253&dq=pool.map+shared+multiprocessing+array&source=bl&ots=ehckbxcy2w&sig=lq3PBr9oqH_44jPqurRjlqVGL5c&hl=en&sa=X&ved=0ahUKEwjExfjq_bfNAhUBWj4KHXz_Bq84ChDoAQg8MAU#v=onepage&q=pool.map%20shared%20multiprocessing%20array&f=false)) before sending it to PTSampler as a likelihood argument. I'm just using the threads=nthreads argument under PTSampler to indicate I want it to multiprocess. However, I'm stuck with the same error as above: it keeps trying to pickle this giant array despite supposedly passing it as a shared memory array. Do you have any ideas how to easily resolve this issue using the existing emcee framework? Any help would be greatly appreciated!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/183", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/183/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/183/events", "html_url": "https://github.com/dfm/emcee/issues/183", "id": 161012243, "node_id": "MDU6SXNzdWUxNjEwMTIyNDM=", "number": 183, "title": "How to monitor progress and stop mcmc if certain variance in the parameter is reached", "user": {"login": "abhisheksubu92", "id": 16844514, "node_id": "MDQ6VXNlcjE2ODQ0NTE0", "avatar_url": "https://avatars0.githubusercontent.com/u/16844514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhisheksubu92", "html_url": "https://github.com/abhisheksubu92", "followers_url": "https://api.github.com/users/abhisheksubu92/followers", "following_url": "https://api.github.com/users/abhisheksubu92/following{/other_user}", "gists_url": "https://api.github.com/users/abhisheksubu92/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhisheksubu92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhisheksubu92/subscriptions", "organizations_url": "https://api.github.com/users/abhisheksubu92/orgs", "repos_url": "https://api.github.com/users/abhisheksubu92/repos", "events_url": "https://api.github.com/users/abhisheksubu92/events{/privacy}", "received_events_url": "https://api.github.com/users/abhisheksubu92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-06-18T07:38:40Z", "updated_at": "2017-11-06T20:36:13Z", "closed_at": "2017-11-06T20:36:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "While running  mcmc it is a practice to check the convergence by plotting the auto correlation time or using the Gelman-Rubin metric. How can one check these in emcee? Thanking in advance\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/182", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/182/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/182/events", "html_url": "https://github.com/dfm/emcee/issues/182", "id": 159483268, "node_id": "MDU6SXNzdWUxNTk0ODMyNjg=", "number": 182, "title": "Add test for thinning with non multiples of \"iterations\"", "user": {"login": "dfm", "id": 350282, "node_id": "MDQ6VXNlcjM1MDI4Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/350282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfm", "html_url": "https://github.com/dfm", "followers_url": "https://api.github.com/users/dfm/followers", "following_url": "https://api.github.com/users/dfm/following{/other_user}", "gists_url": "https://api.github.com/users/dfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfm/subscriptions", "organizations_url": "https://api.github.com/users/dfm/orgs", "repos_url": "https://api.github.com/users/dfm/repos", "events_url": "https://api.github.com/users/dfm/events{/privacy}", "received_events_url": "https://api.github.com/users/dfm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-06-09T19:00:44Z", "updated_at": "2017-10-20T16:20:22Z", "closed_at": "2017-10-20T16:20:22Z", "author_association": "OWNER", "active_lock_reason": null, "body": "```\nline 279, in sample\n    self._chain[:, ind, :] = p\nIndexError: index 19 is out of bounds for axis 1 with size 19\n```\n\nIs one error.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/181", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/181/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/181/events", "html_url": "https://github.com/dfm/emcee/issues/181", "id": 156544003, "node_id": "MDU6SXNzdWUxNTY1NDQwMDM=", "number": 181, "title": "emcee documentation - Incrementally saving progress error", "user": {"login": "TimothyADavis", "id": 15347748, "node_id": "MDQ6VXNlcjE1MzQ3NzQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/15347748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimothyADavis", "html_url": "https://github.com/TimothyADavis", "followers_url": "https://api.github.com/users/TimothyADavis/followers", "following_url": "https://api.github.com/users/TimothyADavis/following{/other_user}", "gists_url": "https://api.github.com/users/TimothyADavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimothyADavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimothyADavis/subscriptions", "organizations_url": "https://api.github.com/users/TimothyADavis/orgs", "repos_url": "https://api.github.com/users/TimothyADavis/repos", "events_url": "https://api.github.com/users/TimothyADavis/events{/privacy}", "received_events_url": "https://api.github.com/users/TimothyADavis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-24T15:53:15Z", "updated_at": "2017-11-06T20:43:57Z", "closed_at": "2017-11-06T20:43:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nIn the current documentation the suggestion for saving the progress of a chain as it goes does not work (at least on my system- Python 3.5.1, numpy 1.10.4). It raises an error: \n\n> TypeError: sequence item 0: expected str instance, numpy.float64 found\n\nI suggest a change of:\n`f.write(\"{0:4d} {1:s}\\n\".format(k, \" \".join(position[k])))`\n\nto\n\n`f.write(\"{0:4d} {1:s}\\n\".format(k, \" \".join(map(str, position[k]))))`\n\nwhich then works as intended for me.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/179", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/179/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/179/events", "html_url": "https://github.com/dfm/emcee/issues/179", "id": 156019926, "node_id": "MDU6SXNzdWUxNTYwMTk5MjY=", "number": 179, "title": "2.0.0 and 2.1.1 tags", "user": {"login": "ericdill", "id": 6223243, "node_id": "MDQ6VXNlcjYyMjMyNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6223243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericdill", "html_url": "https://github.com/ericdill", "followers_url": "https://api.github.com/users/ericdill/followers", "following_url": "https://api.github.com/users/ericdill/following{/other_user}", "gists_url": "https://api.github.com/users/ericdill/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericdill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericdill/subscriptions", "organizations_url": "https://api.github.com/users/ericdill/orgs", "repos_url": "https://api.github.com/users/ericdill/repos", "events_url": "https://api.github.com/users/ericdill/events{/privacy}", "received_events_url": "https://api.github.com/users/ericdill/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2805190, "node_id": "MDU6TGFiZWwyODA1MTkw", "url": "https://api.github.com/repos/dfm/emcee/labels/Feature%20Request", "name": "Feature Request", "color": "02e10c", "default": false, "description": null}, {"id": 719014526, "node_id": "MDU6TGFiZWw3MTkwMTQ1MjY=", "url": "https://api.github.com/repos/dfm/emcee/labels/Question", "name": "Question", "color": "bfd4f2", "default": false, "description": null}, {"id": 742467361, "node_id": "MDU6TGFiZWw3NDI0NjczNjE=", "url": "https://api.github.com/repos/dfm/emcee/labels/Wontfix", "name": "Wontfix", "color": "b2520e", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-20T18:09:14Z", "updated_at": "2017-11-06T20:42:31Z", "closed_at": "2017-11-06T20:42:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Releases 2.0.0 and 2.1.0 are on pypi but the tags that correspond to those releases are not on github.  Would it be possible to get those tags on github too?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/174", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/174/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/174/events", "html_url": "https://github.com/dfm/emcee/issues/174", "id": 148523015, "node_id": "MDU6SXNzdWUxNDg1MjMwMTU=", "number": 174, "title": "PTsampler has issues with current numpy master", "user": {"login": "andyfaff", "id": 702934, "node_id": "MDQ6VXNlcjcwMjkzNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/702934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyfaff", "html_url": "https://github.com/andyfaff", "followers_url": "https://api.github.com/users/andyfaff/followers", "following_url": "https://api.github.com/users/andyfaff/following{/other_user}", "gists_url": "https://api.github.com/users/andyfaff/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyfaff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyfaff/subscriptions", "organizations_url": "https://api.github.com/users/andyfaff/orgs", "repos_url": "https://api.github.com/users/andyfaff/repos", "events_url": "https://api.github.com/users/andyfaff/events{/privacy}", "received_events_url": "https://api.github.com/users/andyfaff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-04-15T00:47:55Z", "updated_at": "2016-04-19T11:58:16Z", "closed_at": "2016-04-19T11:58:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a problem with float division in `PTsampler` with numpy master:\n\n```\n>>> import numpy as np\n>>> np.version.git_revision\n'6ab89b8c66f68dfac9fde6eab843990a732a9a27'\n```\n\nHere is a shortish script that reproduces the problem:\n\n```\nimport numpy as np\n\n# Choose the \"true\" parameters.\nm_true = -0.9594\nb_true = 4.294\nf_true = 0.534\n\n# Generate some synthetic data from the model.\nN = 50\nx = np.sort(10*np.random.rand(N))\nyerr = 0.1+0.5*np.random.rand(N)\ny = m_true*x+b_true\ny += np.abs(f_true*y) * np.random.randn(N)\ny += yerr * np.random.randn(N)\n\nA = np.vstack((np.ones_like(x), x)).T\nC = np.diag(yerr * yerr)\ncov = np.linalg.inv(np.dot(A.T, np.linalg.solve(C, A)))\nb_ls, m_ls = np.dot(cov, np.dot(A.T, np.linalg.solve(C, y)))\n\ndef lnlike(theta, x, y, yerr):\n    m, b, lnf = theta\n    model = m * x + b\n    inv_sigma2 = 1.0/(yerr**2 + model**2*np.exp(2*lnf))\n    return -0.5*(np.sum((y-model)**2*inv_sigma2 - np.log(inv_sigma2)))\n\nimport scipy.optimize as op\nnll = lambda *args: -lnlike(*args)\nresult = op.minimize(nll, [m_true, b_true, np.log(f_true)], args=(x, y, yerr))\nm_ml, b_ml, lnf_ml = result[\"x\"]\n\ndef lnprior(theta):\n    m, b, lnf = theta\n    if -5.0 < m < 0.5 and 0.0 < b < 10.0 and -10.0 < lnf < 1.0:\n        return 0.0\n    return -np.inf\n\nntemp, ndim, nwalkers = 4, 3, 100\npos = (1 + np.random.randn(ntemp, nwalkers, ndim) * 1.e-4) * result.x\n\nimport emcee\nsampler = emcee.PTSampler(ntemp, nwalkers, ndim, lnlike, lnprior, loglargs=(x, y, yerr))\n\nsampler.run_mcmc(pos, 500)\n```\n\nThe result from this is:\n\n```\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-235-218685ff1644> in <module>()\n     48 sampler = emcee.PTSampler(ntemp, nwalkers, ndim, lnlike, lnprior, loglargs=(x, y, yerr))\n     49 \n---> 50 sampler.run_mcmc(pos, 500)\n\n/Users/anz/miniconda3/envs/dev3/lib/python3.4/site-packages/emcee/sampler.py in run_mcmc(self, pos0, N, rstate0, lnprob0, **kwargs)\n    155         \"\"\"\n    156         for results in self.sample(pos0, lnprob0, rstate0, iterations=N,\n--> 157                                    **kwargs):\n    158             pass\n    159         return results\n\n/Users/anz/miniconda3/envs/dev3/lib/python3.4/site-packages/emcee/ptsampler.py in sample(self, p0, lnprob0, lnlike0, iterations, thin, storechain)\n    276                 isave = 0\n    277                 self._chain = np.zeros((self.ntemps, self.nwalkers, nsave,\n--> 278                                         self.dim))\n    279                 self._lnprob = np.zeros((self.ntemps, self.nwalkers, nsave))\n    280                 self._lnlikelihood = np.zeros((self.ntemps, self.nwalkers,\n\nTypeError: 'float' object cannot be interpreted as an integer\n```\n\nTHe problem is on line 274 in `ptsampler.py`. This is float division rather than int division. The line should read:\n\n```\n       nsave = iterations // thin\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/171", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/171/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/171/events", "html_url": "https://github.com/dfm/emcee/issues/171", "id": 112381353, "node_id": "MDU6SXNzdWUxMTIzODEzNTM=", "number": 171, "title": "Autocorrelation Times", "user": {"login": "aimalz", "id": 8606810, "node_id": "MDQ6VXNlcjg2MDY4MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8606810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aimalz", "html_url": "https://github.com/aimalz", "followers_url": "https://api.github.com/users/aimalz/followers", "following_url": "https://api.github.com/users/aimalz/following{/other_user}", "gists_url": "https://api.github.com/users/aimalz/gists{/gist_id}", "starred_url": "https://api.github.com/users/aimalz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aimalz/subscriptions", "organizations_url": "https://api.github.com/users/aimalz/orgs", "repos_url": "https://api.github.com/users/aimalz/repos", "events_url": "https://api.github.com/users/aimalz/events{/privacy}", "received_events_url": "https://api.github.com/users/aimalz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2015-10-20T14:29:11Z", "updated_at": "2017-11-06T20:39:50Z", "closed_at": "2017-11-06T20:39:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "When the thinning factor of sampler.run_mcmc() is greater than the window size of get_autocorr_time(), nonsensical autocorrelation times < 1 are produced.  Perhaps an error message is in order for when users specify such a condition?  (Or there may be a bug in the autocorrelation time function. . .)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/168", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/168/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/168/events", "html_url": "https://github.com/dfm/emcee/issues/168", "id": 110265185, "node_id": "MDU6SXNzdWUxMTAyNjUxODU=", "number": 168, "title": "Replace triangle by corner in the docs and examples", "user": {"login": "anntzer", "id": 1322974, "node_id": "MDQ6VXNlcjEzMjI5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1322974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anntzer", "html_url": "https://github.com/anntzer", "followers_url": "https://api.github.com/users/anntzer/followers", "following_url": "https://api.github.com/users/anntzer/following{/other_user}", "gists_url": "https://api.github.com/users/anntzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/anntzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anntzer/subscriptions", "organizations_url": "https://api.github.com/users/anntzer/orgs", "repos_url": "https://api.github.com/users/anntzer/repos", "events_url": "https://api.github.com/users/anntzer/events{/privacy}", "received_events_url": "https://api.github.com/users/anntzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-07T16:29:40Z", "updated_at": "2017-11-06T20:42:42Z", "closed_at": "2017-11-06T20:42:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "All's in the title.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/166", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/166/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/166/events", "html_url": "https://github.com/dfm/emcee/issues/166", "id": 107829427, "node_id": "MDU6SXNzdWUxMDc4Mjk0Mjc=", "number": 166, "title": "Multiprocessing Error", "user": {"login": "astromark", "id": 14793088, "node_id": "MDQ6VXNlcjE0NzkzMDg4", "avatar_url": "https://avatars0.githubusercontent.com/u/14793088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astromark", "html_url": "https://github.com/astromark", "followers_url": "https://api.github.com/users/astromark/followers", "following_url": "https://api.github.com/users/astromark/following{/other_user}", "gists_url": "https://api.github.com/users/astromark/gists{/gist_id}", "starred_url": "https://api.github.com/users/astromark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astromark/subscriptions", "organizations_url": "https://api.github.com/users/astromark/orgs", "repos_url": "https://api.github.com/users/astromark/repos", "events_url": "https://api.github.com/users/astromark/events{/privacy}", "received_events_url": "https://api.github.com/users/astromark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-09-23T00:20:45Z", "updated_at": "2015-10-26T18:10:28Z", "closed_at": "2015-10-26T18:10:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI'm having an issue getting multiprocessing to work. I include the full error message below. Basically it's telling me that the function cannot be pickled. I thought it was a problem with the function at first but I get the same error message even if I just adapt the simple examples from the webpage to have threads >1. As you will notice, I'm running this in casa. I suspect this is the problem. Has anyone tried to run multiprocessing in casa before?\n\n``` python\nException in thread Thread-3:\nTraceback (most recent call last):\n  File \"/home/mboot/alma/casa-release-4.4.0-el6/lib/python2.7/threading.py\", line 808, in __bootstrap_inner\n    self.run()\n  File \"/home/mboot/alma/casa-release-4.4.0-el6/lib/python2.7/threading.py\", line 761, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/home/mboot/alma/casa-release-4.4.0-el6/lib/python2.7/multiprocessing/pool.py\", line 342, in _handle_tasks\n    put(task)\nPicklingError: Can't pickle <type 'function'>: attribute lookup __builtin__.function failed\n\n\n\n\n^C\n^C---------------------------------------------------------------------------\nKeyboardInterrupt                         Traceback (most recent call last)\n\n/home/mboot/alma/casa-release-4.4.0-el6/lib/python2.7/casapy.py in <module>()\n----> 1 \n      2 \n      3 \n      4 \n      5 \n\n/home/mboot/.local/lib/python2.7/site-packages/emcee/sampler.pyc in run_mcmc(self, pos0, N, rstate0, lnprob0, **kwargs)\n    155         \"\"\"\n    156         for results in self.sample(pos0, lnprob0, rstate0, iterations=N,\n--> 157                                    **kwargs):\n    158             pass\n    159         return results\n\n/home/mboot/.local/lib/python2.7/site-packages/emcee/ensemble.pyc in sample(self, p0, lnprob0, rstate0, blobs0, iterations, thin, storechain, mh_proposal)\n    196         blobs = blobs0\n    197         if lnprob is None:\n--> 198             lnprob, blobs = self._get_lnprob(p)\n    199 \n    200         # Check to make sure that the probability function didn't return\n\n\n/home/mboot/.local/lib/python2.7/site-packages/emcee/ensemble.pyc in _get_lnprob(self, pos)\n    380 \n    381         # Run the log-probability calculations (optionally in parallel).\n\n--> 382         results = list(M(self.lnprobfn, [p[i] for i in range(len(p))]))\n    383 \n    384         try:\n\n/home/mboot/.local/lib/python2.7/site-packages/emcee/interruptible_pool.pyc in map(self, func, iterable, chunksize)\n     96                 pass\n     97             except KeyboardInterrupt:\n---> 98                 self.terminate()\n     99                 self.join()\n    100                 raise\n\n/home/mboot/alma/casa-release-4.4.0-el6/lib/python2.7/multiprocessing/pool.pyc in terminate(self)\n    450         self._state = TERMINATE\n    451         self._worker_handler._state = TERMINATE\n--> 452         self._terminate()\n    453 \n    454     def join(self):\n\n/home/mboot/alma/casa-release-4.4.0-el6/lib/python2.7/multiprocessing/util.pyc in __call__(self, wr)\n    199             sub_debug('finalizer calling %s with args %s and kwargs %s',\n    200                      self._callback, self._args, self._kwargs)\n--> 201             res = self._callback(*self._args, **self._kwargs)\n    202             self._weakref = self._callback = self._args = \\\n    203                             self._kwargs = self._key = None\n\n/home/mboot/alma/casa-release-4.4.0-el6/lib/python2.7/multiprocessing/pool.pyc in _terminate_pool(cls, taskqueue, inqueue, outqueue, pool, worker_handler, task_handler, result_handler, cache)\n    480 \n    481         debug('helping task handler/workers to finish')\n--> 482         cls._help_stuff_finish(inqueue, task_handler, len(pool))\n    483 \n    484         assert result_handler.is_alive() or len(cache) == 0\n\n/home/mboot/alma/casa-release-4.4.0-el6/lib/python2.7/multiprocessing/pool.pyc in _help_stuff_finish(inqueue, task_handler, size)\n    465         # task_handler may be blocked trying to put items on inqueue\n\n    466         debug('removing tasks from inqueue until task handler finished')\n--> 467         inqueue._rlock.acquire()\n    468         while task_handler.is_alive() and inqueue._reader.poll():\n    469             inqueue._reader.recv()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/165", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/165/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/165/events", "html_url": "https://github.com/dfm/emcee/issues/165", "id": 107456761, "node_id": "MDU6SXNzdWUxMDc0NTY3NjE=", "number": 165, "title": "How does parallelisation occur?", "user": {"login": "andyfaff", "id": 702934, "node_id": "MDQ6VXNlcjcwMjkzNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/702934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyfaff", "html_url": "https://github.com/andyfaff", "followers_url": "https://api.github.com/users/andyfaff/followers", "following_url": "https://api.github.com/users/andyfaff/following{/other_user}", "gists_url": "https://api.github.com/users/andyfaff/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyfaff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyfaff/subscriptions", "organizations_url": "https://api.github.com/users/andyfaff/orgs", "repos_url": "https://api.github.com/users/andyfaff/repos", "events_url": "https://api.github.com/users/andyfaff/events{/privacy}", "received_events_url": "https://api.github.com/users/andyfaff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-21T07:14:53Z", "updated_at": "2015-09-21T13:25:22Z", "closed_at": "2015-09-21T13:25:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was wondering how the parallelisation was implemented inside emcee.   For a computer with `N` cores does the parallelisation split the `M` walkers into `M / N` calculations to be distributed to each processor, on a single step?\n-OR-\nDoes the parallelisation distribute across steps as well?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfm/emcee/issues/163", "repository_url": "https://api.github.com/repos/dfm/emcee", "labels_url": "https://api.github.com/repos/dfm/emcee/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/dfm/emcee/issues/163/comments", "events_url": "https://api.github.com/repos/dfm/emcee/issues/163/events", "html_url": "https://github.com/dfm/emcee/issues/163", "id": 103306975, "node_id": "MDU6SXNzdWUxMDMzMDY5NzU=", "number": 163, "title": "Progress bar while sampling", "user": {"login": "thommevans", "id": 1647504, "node_id": "MDQ6VXNlcjE2NDc1MDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1647504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thommevans", "html_url": "https://github.com/thommevans", "followers_url": "https://api.github.com/users/thommevans/followers", "following_url": "https://api.github.com/users/thommevans/following{/other_user}", "gists_url": "https://api.github.com/users/thommevans/gists{/gist_id}", "starred_url": "https://api.github.com/users/thommevans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thommevans/subscriptions", "organizations_url": "https://api.github.com/users/thommevans/orgs", "repos_url": "https://api.github.com/users/thommevans/repos", "events_url": "https://api.github.com/users/thommevans/events{/privacy}", "received_events_url": "https://api.github.com/users/thommevans/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-08-26T16:07:16Z", "updated_at": "2016-11-17T16:42:31Z", "closed_at": "2016-09-26T09:19:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to display a progress bar while sampling, to show what fraction of the total steps have been taken as a function of time? e.g. pymc has a nice routine for doing this.\n", "performed_via_github_app": null, "score": 1.0}]}