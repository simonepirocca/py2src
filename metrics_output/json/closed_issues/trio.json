{"total_count": 357, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/python-trio/trio/issues/1689", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1689/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1689/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1689/events", "html_url": "https://github.com/python-trio/trio/issues/1689", "id": 683590723, "node_id": "MDU6SXNzdWU2ODM1OTA3MjM=", "number": 1689, "title": "receive_some on a ReceiveStream splits the header from content on a HTTP response ?", "user": {"login": "bitlogik", "id": 32455462, "node_id": "MDQ6VXNlcjMyNDU1NDYy", "avatar_url": "https://avatars2.githubusercontent.com/u/32455462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitlogik", "html_url": "https://github.com/bitlogik", "followers_url": "https://api.github.com/users/bitlogik/followers", "following_url": "https://api.github.com/users/bitlogik/following{/other_user}", "gists_url": "https://api.github.com/users/bitlogik/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitlogik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitlogik/subscriptions", "organizations_url": "https://api.github.com/users/bitlogik/orgs", "repos_url": "https://api.github.com/users/bitlogik/repos", "events_url": "https://api.github.com/users/bitlogik/events{/privacy}", "received_events_url": "https://api.github.com/users/bitlogik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-21T14:11:35Z", "updated_at": "2020-08-21T21:50:27Z", "closed_at": "2020-08-21T21:50:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using trio 0.13.0.\r\nI spent some time, because `await stream.receive_some()` only returns the HTTP header data.\r\n\r\n```\r\nstream = await trio.open_tcp_stream(backend_addr.hostname, backend_addr.port)\r\nif backend_addr.use_ssl:\r\n    ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\r\n    ssl_context.load_default_certs()\r\n    stream = trio.SSLStream(stream, ssl_context, server_hostname=backend_addr.hostname)\r\nreq = b\"GET %s HTTP/1.1\\r\\nHost: %s \\r\\n\\r\\n\" % (target, backend_addr.hostname.encode(\"idna\"))\r\nawait stream.send_all(req)\r\nrep = await stream.receive_some()\r\nrep2 = await stream.receive_some()\r\nprint(req.decode(\"utf8\"))\r\nprint(rep.decode(\"utf8\"))\r\nprint(rep2.decode(\"utf8\"))\r\n```\r\n\r\ngives out :\r\n```\r\n> GET /redir/foo/bar?a=1&b=2 HTTP/1.1\r\nHost: example.com\r\n\r\n> HTTP/1.1 200 OK\r\ncontent-type: text/html;charset=utf-8\r\ncontent-length: 1071\r\ndate: Fri, 21 Aug 2020 13:48:19 GMT\r\nserver: mysrv\r\n\r\n> <!doctype html>\\n<html lang=\"en\">\\n\\n<head>...</body>\\n\\n</html>\r\n\r\n```\r\n\r\nwith `rep = await stream.receive_some(4096)`, this is the same result. trio behaves like it reads internally the stream and separates the header from the content and receive header and content in 2 chunks. It is normal or expected? Is it related to an underlying HTTP server mechanism? I seek for that, and I feel this is a trio related behavior.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1667", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1667/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1667/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1667/events", "html_url": "https://github.com/python-trio/trio/issues/1667", "id": 657129714, "node_id": "MDU6SXNzdWU2NTcxMjk3MTQ=", "number": 1667, "title": "CI: sketchy Komodia LSP link stopped working", "user": {"login": "oremanj", "id": 4316136, "node_id": "MDQ6VXNlcjQzMTYxMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4316136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oremanj", "html_url": "https://github.com/oremanj", "followers_url": "https://api.github.com/users/oremanj/followers", "following_url": "https://api.github.com/users/oremanj/following{/other_user}", "gists_url": "https://api.github.com/users/oremanj/gists{/gist_id}", "starred_url": "https://api.github.com/users/oremanj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oremanj/subscriptions", "organizations_url": "https://api.github.com/users/oremanj/orgs", "repos_url": "https://api.github.com/users/oremanj/repos", "events_url": "https://api.github.com/users/oremanj/events{/privacy}", "received_events_url": "https://api.github.com/users/oremanj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 523925659, "node_id": "MDU6TGFiZWw1MjM5MjU2NTk=", "url": "https://api.github.com/repos/python-trio/trio/labels/Windows", "name": "Windows", "color": "dddddd", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-15T07:31:09Z", "updated_at": "2020-07-22T06:40:10Z", "closed_at": "2020-07-22T06:40:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See #1666. I wonder if they noticed an uptick in the frequency of it being downloaded...\r\n\r\nI have the installer binary, but no good place to host it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1659", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1659/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1659/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1659/events", "html_url": "https://github.com/python-trio/trio/issues/1659", "id": 650724856, "node_id": "MDU6SXNzdWU2NTA3MjQ4NTY=", "number": 1659, "title": "IOCP polling doesn't work with Astrill VPN LSP", "user": {"login": "NewUserHa", "id": 32261870, "node_id": "MDQ6VXNlcjMyMjYxODcw", "avatar_url": "https://avatars3.githubusercontent.com/u/32261870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NewUserHa", "html_url": "https://github.com/NewUserHa", "followers_url": "https://api.github.com/users/NewUserHa/followers", "following_url": "https://api.github.com/users/NewUserHa/following{/other_user}", "gists_url": "https://api.github.com/users/NewUserHa/gists{/gist_id}", "starred_url": "https://api.github.com/users/NewUserHa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NewUserHa/subscriptions", "organizations_url": "https://api.github.com/users/NewUserHa/orgs", "repos_url": "https://api.github.com/users/NewUserHa/repos", "events_url": "https://api.github.com/users/NewUserHa/events{/privacy}", "received_events_url": "https://api.github.com/users/NewUserHa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 523925659, "node_id": "MDU6TGFiZWw1MjM5MjU2NTk=", "url": "https://api.github.com/repos/python-trio/trio/labels/Windows", "name": "Windows", "color": "dddddd", "default": false, "description": null}, {"id": 1347507399, "node_id": "MDU6TGFiZWwxMzQ3NTA3Mzk5", "url": "https://api.github.com/repos/python-trio/trio/labels/low-level", "name": "low-level", "color": "f8ffb2", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2020-07-03T18:31:26Z", "updated_at": "2020-07-19T18:22:59Z", "closed_at": "2020-07-05T18:40:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "trio 0.16\r\nwin10 1803\r\n```\r\n  File \"c:/Users/c/Desktop/test2.py\", line 37, in <module>\r\n    trio.run(parent)\r\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\trio\\_core\\_run.py\", line 1879, in run\r\n    runner = setup_runner(\r\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\trio\\_core\\_run.py\", line 1781, in setup_runner\r\n    io_manager = TheIOManager()\r\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\trio\\_core\\_io_windows.py\", line 349, in __init__\r\n    base_handle = _get_base_socket(s, which=WSAIoctls.SIO_BASE_HANDLE)\r\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\trio\\_core\\_io_windows.py\", line 202, in _get_base_socket\r\n    raise_winerror(code)\r\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\trio\\_core\\_windows_cffi.py\", line 321, in raise_winerror\r\n    raise OSError(0, msg, filename, winerror, filename2)\r\nOSError: [WinError 10014] The system detected an invalid pointer address in attempting to use a pointer argument in a call\r\n```\r\nboth `echo-server.py` and `echo-client.py` in last of `https://trio.readthedocs.io/en/stable/tutorial.html` will cause this", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1647", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1647/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1647/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1647/events", "html_url": "https://github.com/python-trio/trio/issues/1647", "id": 645941945, "node_id": "MDU6SXNzdWU2NDU5NDE5NDU=", "number": 1647, "title": "Trio not working on Windows Subsystem for Linux verison 1", "user": {"login": "NotoriousRebel", "id": 36310667, "node_id": "MDQ6VXNlcjM2MzEwNjY3", "avatar_url": "https://avatars0.githubusercontent.com/u/36310667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NotoriousRebel", "html_url": "https://github.com/NotoriousRebel", "followers_url": "https://api.github.com/users/NotoriousRebel/followers", "following_url": "https://api.github.com/users/NotoriousRebel/following{/other_user}", "gists_url": "https://api.github.com/users/NotoriousRebel/gists{/gist_id}", "starred_url": "https://api.github.com/users/NotoriousRebel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NotoriousRebel/subscriptions", "organizations_url": "https://api.github.com/users/NotoriousRebel/orgs", "repos_url": "https://api.github.com/users/NotoriousRebel/repos", "events_url": "https://api.github.com/users/NotoriousRebel/events{/privacy}", "received_events_url": "https://api.github.com/users/NotoriousRebel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-26T01:17:22Z", "updated_at": "2020-06-26T02:05:50Z", "closed_at": "2020-06-26T02:05:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I installed pyppeteer which uses trio and get this error :( \r\n\r\nattrib() got an unexpected keyword argument 'eq'\r\n\r\nFull traceback:\r\n\r\n``` % python3.7 screen.py\r\n/usr/local/lib/python3.7/dist-packages/trio/_core/_multierror.py:472: RuntimeWarning: You seem to already have a custom sys.excepthook handler installed. I'll skip installing Trio's custom handler, but this means MultiErrors will not show full tracebacks.\r\n  category=RuntimeWarning\r\nTraceback (most recent call last):\r\n  File \"screen.py\", line 2, in <module>\r\n    from pyppeteer import launch\r\n  File \"/usr/local/lib/python3.7/dist-packages/pyppeteer/__init__.py\", line 30, in <module>\r\n    from pyppeteer.launcher import connect, launch, executablePath  # noqa: E402\r\n  File \"/usr/local/lib/python3.7/dist-packages/pyppeteer/launcher.py\", line 25, in <module>\r\n    from pyppeteer.browser import Browser\r\n  File \"/usr/local/lib/python3.7/dist-packages/pyppeteer/browser.py\", line 11, in <module>\r\n    from pyee import EventEmitter\r\n  File \"/usr/local/lib/python3.7/dist-packages/pyee/__init__.py\", line 59, in <module>\r\n    from pyee._trio import TrioEventEmitter  # noqa\r\n  File \"/usr/local/lib/python3.7/dist-packages/pyee/_trio.py\", line 4, in <module>\r\n    import trio\r\n  File \"/usr/local/lib/python3.7/dist-packages/trio/__init__.py\", line 18, in <module>\r\n    from ._core import (\r\n  File \"/usr/local/lib/python3.7/dist-packages/trio/_core/__init__.py\", line 19, in <module>\r\n    from ._run import (\r\n  File \"/usr/local/lib/python3.7/dist-packages/trio/_core/_run.py\", line 22, in <module>\r\n    from outcome import Error, Value, capture\r\n  File \"/usr/local/lib/python3.7/dist-packages/outcome/__init__.py\", line 11, in <module>\r\n    from ._async import Error, Outcome, Value, acapture, capture\r\n  File \"/usr/local/lib/python3.7/dist-packages/outcome/_async.py\", line 3, in <module>\r\n    from ._sync import Error as ErrorBase\r\n  File \"/usr/local/lib/python3.7/dist-packages/outcome/_sync.py\", line 28, in <module>\r\n    class Outcome(ABC):\r\n  File \"/usr/local/lib/python3.7/dist-packages/outcome/_sync.py\", line 43, in Outcome\r\n    _unwrapped = attr.ib(default=False, eq=False, init=False)\r\nTypeError: attrib() got an unexpected keyword argument 'eq'\r\nError in sys.excepthook:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3/dist-packages/apport_python_hook.py\", line 63, in apport_excepthook\r\n    from apport.fileutils import likely_packaged, get_recent_crashes\r\n  File \"/usr/lib/python3/dist-packages/apport/__init__.py\", line 5, in <module>\r\n    from apport.report import Report\r\n  File \"/usr/lib/python3/dist-packages/apport/report.py\", line 30, in <module>\r\n    import apport.fileutils\r\n  File \"/usr/lib/python3/dist-packages/apport/fileutils.py\", line 23, in <module>\r\n    from apport.packaging_impl import impl as packaging\r\n  File \"/usr/lib/python3/dist-packages/apport/packaging_impl.py\", line 24, in <module>\r\n    import apt\r\n  File \"/usr/lib/python3/dist-packages/apt/__init__.py\", line 23, in <module>\r\n    import apt_pkg\r\nModuleNotFoundError: No module named 'apt_pkg'\r\n\r\nOriginal exception was:\r\nTraceback (most recent call last):\r\n  File \"screen.py\", line 2, in <module>\r\n    from pyppeteer import launch\r\n  File \"/usr/local/lib/python3.7/dist-packages/pyppeteer/__init__.py\", line 30, in <module>\r\n    from pyppeteer.launcher import connect, launch, executablePath  # noqa: E402\r\n  File \"/usr/local/lib/python3.7/dist-packages/pyppeteer/launcher.py\", line 25, in <module>\r\n    from pyppeteer.browser import Browser\r\n  File \"/usr/local/lib/python3.7/dist-packages/pyppeteer/browser.py\", line 11, in <module>\r\n    from pyee import EventEmitter\r\n  File \"/usr/local/lib/python3.7/dist-packages/pyee/__init__.py\", line 59, in <module>\r\n    from pyee._trio import TrioEventEmitter  # noqa\r\n  File \"/usr/local/lib/python3.7/dist-packages/pyee/_trio.py\", line 4, in <module>\r\n    import trio\r\n  File \"/usr/local/lib/python3.7/dist-packages/trio/__init__.py\", line 18, in <module>\r\n    from ._core import (\r\n  File \"/usr/local/lib/python3.7/dist-packages/trio/_core/__init__.py\", line 19, in <module>\r\n    from ._run import (\r\n  File \"/usr/local/lib/python3.7/dist-packages/trio/_core/_run.py\", line 22, in <module>\r\n    from outcome import Error, Value, capture\r\n  File \"/usr/local/lib/python3.7/dist-packages/outcome/__init__.py\", line 11, in <module>\r\n    from ._async import Error, Outcome, Value, acapture, capture\r\n  File \"/usr/local/lib/python3.7/dist-packages/outcome/_async.py\", line 3, in <module>\r\n    from ._sync import Error as ErrorBase\r\n  File \"/usr/local/lib/python3.7/dist-packages/outcome/_sync.py\", line 28, in <module>\r\n    class Outcome(ABC):\r\n  File \"/usr/local/lib/python3.7/dist-packages/outcome/_sync.py\", line 43, in Outcome\r\n    _unwrapped = attr.ib(default=False, eq=False, init=False)\r\nTypeError: attrib() got an unexpected keyword argument 'eq'\r\n```\r\nHere is the code snippet I ran with Python 3.7.5\r\n```python\r\nimport asyncio\r\nfrom pyppeteer import launch\r\n\r\nasync def main():\r\n    browser = await launch()\r\n    page = await browser.newPage()\r\n    await page.goto('https://example.com')\r\n    await page.screenshot({'path': 'example.png'})\r\n    await browser.close()\r\n\r\nasyncio.get_event_loop().run_until_complete(main())\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1642", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1642/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1642/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1642/events", "html_url": "https://github.com/python-trio/trio/issues/1642", "id": 644238286, "node_id": "MDU6SXNzdWU2NDQyMzgyODY=", "number": 1642, "title": "Allow passing a local address and address family to `trio.open_tcp_stream`", "user": {"login": "ntninja", "id": 246386, "node_id": "MDQ6VXNlcjI0NjM4Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/246386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ntninja", "html_url": "https://github.com/ntninja", "followers_url": "https://api.github.com/users/ntninja/followers", "following_url": "https://api.github.com/users/ntninja/following{/other_user}", "gists_url": "https://api.github.com/users/ntninja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ntninja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ntninja/subscriptions", "organizations_url": "https://api.github.com/users/ntninja/orgs", "repos_url": "https://api.github.com/users/ntninja/repos", "events_url": "https://api.github.com/users/ntninja/events{/privacy}", "received_events_url": "https://api.github.com/users/ntninja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-24T00:48:44Z", "updated_at": "2020-06-24T06:35:22Z", "closed_at": "2020-06-24T06:35:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given a DNS-name `trio.open_tcp_stream` currently has no way to limit the TCP\u00a0connection to either IPv4 or IPv6 and has no way to bind the local socket to a specific interface or port. While this is not an issue in general and trio's native happy-eyeballs support is awesome, there are some advanced use cases where being more restrictive can be useful.\r\n\r\nTo that point there is currently [a patch proposed for `httpcore`/`httpx`](https://github.com/encode/httpcore/pull/100) that allows overriding the `local_addr` and `family` parameters globally for a connection pool. It's [missing trio support however](https://github.com/encode/httpcore/pull/100/files#diff-cbeba3dc15f25d038864dee6154cd4fbR146-R147) as trio does not support the require parameters.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1640", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1640/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1640/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1640/events", "html_url": "https://github.com/python-trio/trio/issues/1640", "id": 643100358, "node_id": "MDU6SXNzdWU2NDMxMDAzNTg=", "number": 1640, "title": "move_on_after inside nursery behaves surprisingly", "user": {"login": "RmStorm", "id": 13096654, "node_id": "MDQ6VXNlcjEzMDk2NjU0", "avatar_url": "https://avatars3.githubusercontent.com/u/13096654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RmStorm", "html_url": "https://github.com/RmStorm", "followers_url": "https://api.github.com/users/RmStorm/followers", "following_url": "https://api.github.com/users/RmStorm/following{/other_user}", "gists_url": "https://api.github.com/users/RmStorm/gists{/gist_id}", "starred_url": "https://api.github.com/users/RmStorm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RmStorm/subscriptions", "organizations_url": "https://api.github.com/users/RmStorm/orgs", "repos_url": "https://api.github.com/users/RmStorm/repos", "events_url": "https://api.github.com/users/RmStorm/events{/privacy}", "received_events_url": "https://api.github.com/users/RmStorm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 639585223, "node_id": "MDU6TGFiZWw2Mzk1ODUyMjM=", "url": "https://api.github.com/repos/python-trio/trio/labels/docs", "name": "docs", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-22T14:05:03Z", "updated_at": "2020-07-03T09:38:41Z", "closed_at": "2020-07-03T09:38:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello, I am looking into using trio since [this blogpost](https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/) really has me convinced that there are some missing puzzle pieces in async code and trio might be a solution. While I was playing around with trio I ran into this very surprising behaviour:\r\n```python\r\nimport time\r\nimport trio\r\n\r\n\r\nasync def heartbeat():\r\n    while True:\r\n        start = time.time()\r\n        await trio.sleep(1)\r\n        delay = time.time() - start - 1\r\n        print(f'heartbeat delay = {delay:.3f}s')\r\n\r\n\r\nasync def main():\r\n    async with trio.open_nursery() as nursery:\r\n        with trio.move_on_after(5):\r\n            nursery.start_soon(heartbeat)\r\n        await trio.sleep(2.5)\r\n        print('Start doing a thing')\r\n\r\n\r\nif __name__ == '__main__':\r\n    trio.run(main)\r\n```\r\nThis does not behave as expected and after a little but of troubleshooting the [answer was right in the docs](https://trio.readthedocs.io/en/stable/reference-core.html#child-tasks-and-cancellation)! However, the documentation doesn't negate the surprise. Is there any reasonable way to have this behave as expected? Or is this gotcha unavoidable due to architecture of trio?\r\n\r\nJust to be clear, the heartbeat never dies! The timeout is ignored since the timeout doesn't apply to the `nursery` and therefore it also doesn't apply to the `nursery.start_soon()` even though that function is called inside a timeout block.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1638", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1638/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1638/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1638/events", "html_url": "https://github.com/python-trio/trio/issues/1638", "id": 643020699, "node_id": "MDU6SXNzdWU2NDMwMjA2OTk=", "number": 1638, "title": "to_thread.run_sync() foils meta-class destructors ", "user": {"login": "belm0", "id": 1708631, "node_id": "MDQ6VXNlcjE3MDg2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1708631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belm0", "html_url": "https://github.com/belm0", "followers_url": "https://api.github.com/users/belm0/followers", "following_url": "https://api.github.com/users/belm0/following{/other_user}", "gists_url": "https://api.github.com/users/belm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/belm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belm0/subscriptions", "organizations_url": "https://api.github.com/users/belm0/orgs", "repos_url": "https://api.github.com/users/belm0/repos", "events_url": "https://api.github.com/users/belm0/events{/privacy}", "received_events_url": "https://api.github.com/users/belm0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-22T12:14:25Z", "updated_at": "2020-06-23T06:48:01Z", "closed_at": "2020-06-23T06:48:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Invoking `to_thread.run_sync()` seems to prevent meta-class destructors of completely unrelated classes from being called on shutdown.\r\n\r\n```python\r\nimport trio\r\n\r\nclass deltype(type):\r\n    def __del__(self):\r\n        print(f\"{self.__name__} class deleted\")\r\n\r\nTest = deltype(\"Test\", (object,), {})\r\n\r\nasync def async_main():\r\n    await trio.to_thread.run_sync(lambda: print('hi'))\r\n    await trio.sleep(0)\r\n\r\ntrio.run(async_main)\r\n```\r\n\r\nexpected output:\r\n```\r\nhi\r\nTest class deleted\r\n```\r\n\r\nactual output:\r\n```\r\nhi\r\n```\r\n\r\nif the `run_sync()` is commented out, the meta-class destructor is called as expected:\r\n```\r\nTest class deleted\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1633", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1633/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1633/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1633/events", "html_url": "https://github.com/python-trio/trio/issues/1633", "id": 642794069, "node_id": "MDU6SXNzdWU2NDI3OTQwNjk=", "number": 1633, "title": "Stop using RawGit to serve logo in README", "user": {"login": "pquentin", "id": 42327, "node_id": "MDQ6VXNlcjQyMzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/42327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pquentin", "html_url": "https://github.com/pquentin", "followers_url": "https://api.github.com/users/pquentin/followers", "following_url": "https://api.github.com/users/pquentin/following{/other_user}", "gists_url": "https://api.github.com/users/pquentin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pquentin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pquentin/subscriptions", "organizations_url": "https://api.github.com/users/pquentin/orgs", "repos_url": "https://api.github.com/users/pquentin/repos", "events_url": "https://api.github.com/users/pquentin/events{/privacy}", "received_events_url": "https://api.github.com/users/pquentin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-22T06:25:46Z", "updated_at": "2020-06-22T06:56:58Z", "closed_at": "2020-06-22T06:56:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It's still working, but it looks like the author no longer wants to work on it.\r\n\r\nhttps://rawgit.com/\r\n\r\n> RawGit is now in a sunset phase and will soon shut down. It's been a fun five years, but all things must end.\r\n>\r\n> GitHub repositories that served content through RawGit within the last month will continue to be served until at least October of 2019. URLs for other repositories are no longer being served.\r\n>\r\n> If you're currently using RawGit, please stop using it as soon as you can.\r\nWhat you should use instead\r\n>\r\n> The following free services offer fantastic alternatives to some or all of RawGit's functionality. You may like them even more than RawGit.\r\n> * jsDelivr\r\n> * GitHub Pages\r\n> * CodeSandbox\r\n> * unpkg\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1630", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1630/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1630/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1630/events", "html_url": "https://github.com/python-trio/trio/issues/1630", "id": 642420250, "node_id": "MDU6SXNzdWU2NDI0MjAyNTA=", "number": 1630, "title": "Importing trio inside a pytest test with pytest-qt fails on sys.excepthook.__name__", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1347506531, "node_id": "MDU6TGFiZWwxMzQ3NTA2NTMx", "url": "https://api.github.com/repos/python-trio/trio/labels/exception%20handling", "name": "exception handling", "color": "e833c9", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-20T18:05:02Z", "updated_at": "2020-07-05T04:06:05Z", "closed_at": "2020-07-05T04:06:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A full session is available at the end if you expand it.\r\n\r\nThe short of it seems to be that during tests pytest-qt puts a `functools.partial` in `sys.excepthook` and the direct issue is that the partial doesn't have a `.__name__` attribute like Trio expects.  `getattr()` of course makes a simple solution to the lack of the attribute but does not address general layering of `sys.excepthook`s.\r\n\r\nThe trivial test file triggering the error is:\r\n```python\r\ndef test():\r\n    import trio\r\n```\r\n\r\nThe error is:\r\n```\r\n>   if sys.excepthook.__name__ == \"apport_excepthook\":\r\nE   AttributeError: 'functools.partial' object has no attribute '__name__'\r\n\r\nvenv/lib/python3.8/site-packages/trio/_core/_multierror.py:480: AttributeError\r\n```\r\n\r\nhttps://github.com/python-trio/trio/blob/v0.16.0/trio/_core/_multierror.py#L480\r\n\r\nRelated pytest-qt code:\r\nhttps://github.com/pytest-dev/pytest-qt/blob/ac423edee71f642e1b5537c68317199b10fe572b/src/pytestqt/exceptions.py#L40-L54\r\n```python\r\n    def start(self):\r\n        \"\"\"Start exception capturing by installing a hook into sys.excepthook\r\n        that records exceptions received into ``self.exceptions``.\r\n        \"\"\"\r\n        self.old_hook = sys.excepthook\r\n        sys.excepthook = functools.partial(_except_hook, exceptions=self.exceptions)\r\n\r\n    def finish(self):\r\n        \"\"\"Stop exception capturing, restoring the original hook.\r\n        Can be called multiple times.\r\n        \"\"\"\r\n        if self.old_hook is not None:\r\n            sys.excepthook = self.old_hook\r\n            self.old_hook = None\r\n```\r\n\r\n<details> <summary>Full terminal session</summary>\r\n\r\n```bash\r\naltendky@p1:~/hmm$ python3.8 -m venv venv                                                    \r\n```\r\n\r\n```bash\r\naltendky@p1:~/hmm$ venv/bin/pip install --upgrade pip setuptools wheel trio pytest pyside2\r\nCollecting pip\r\n  Using cached https://files.pythonhosted.org/packages/43/84/23ed6a1796480a6f1a2d38f2802901d078266bda38388954d01d3f2e821d/pip-20.1.1-py2.py3-none-any.whl\r\nCollecting setuptools\r\n  Using cached https://files.pythonhosted.org/packages/e9/93/4860cebd5ad3ff2664ad3c966490ccb46e3b88458b2095145bca11727ca4/setuptools-47.3.1-py3-none-any.whl\r\nCollecting wheel\r\n  Using cached https://files.pythonhosted.org/packages/8c/23/848298cccf8e40f5bbb59009b32848a4c38f4e7f3364297ab3c3e2e2cd14/wheel-0.34.2-py2.py3-none-any.whl\r\nCollecting trio\r\n  Using cached https://files.pythonhosted.org/packages/a4/0e/852cf47866cda25e09b6bc0b0a71f56b095199e493f74982f0da04b3e4f5/trio-0.16.0-py3-none-any.whl\r\nCollecting pytest\r\n  Using cached https://files.pythonhosted.org/packages/9f/f3/0a83558da436a081344aa6c8b85ea5b5f05071214106036ce341b7769b0b/pytest-5.4.3-py3-none-any.whl\r\nCollecting pyside2\r\n  Using cached https://files.pythonhosted.org/packages/24/39/348e72c1607ac12915e1809e9092e09aa239bc48ace41d51253179e635bb/PySide2-5.15.0-5.15.0-cp35.cp36.cp37.cp38-abi3-manylinux1_x86_64.whl\r\nCollecting sortedcontainers (from trio)\r\n  Using cached https://files.pythonhosted.org/packages/23/8c/22a47a4bf8c5289e4ed946d2b0e4df62bca385b9599cc1e46878f2e2529c/sortedcontainers-2.2.2-py2.py3-none-any.whl\r\nCollecting sniffio (from trio)\r\n  Using cached https://files.pythonhosted.org/packages/b3/82/4bd4b7d9c0d1dc0fbfbc2a1e00138e7f3ab85bc239358fe9b78aa2ab586d/sniffio-1.1.0-py3-none-any.whl\r\nCollecting idna (from trio)\r\n  Using cached https://files.pythonhosted.org/packages/89/e3/afebe61c546d18fb1709a61bee788254b40e736cff7271c7de5de2dc4128/idna-2.9-py2.py3-none-any.whl\r\nCollecting attrs>=19.2.0 (from trio)\r\n  Using cached https://files.pythonhosted.org/packages/a2/db/4313ab3be961f7a763066401fb77f7748373b6094076ae2bda2806988af6/attrs-19.3.0-py2.py3-none-any.whl\r\nCollecting async-generator>=1.9 (from trio)\r\n  Using cached https://files.pythonhosted.org/packages/71/52/39d20e03abd0ac9159c162ec24b93fbcaa111e8400308f2465432495ca2b/async_generator-1.10-py3-none-any.whl\r\nCollecting outcome (from trio)\r\n  Using cached https://files.pythonhosted.org/packages/ff/c7/c4ac99243794a6159ae9335bb26b021e104215390e12e95e40d51007c79b/outcome-1.0.1-py2.py3-none-any.whl\r\nCollecting wcwidth (from pytest)\r\n  Using cached https://files.pythonhosted.org/packages/ef/94/a17155b400812f0558093c6fb99f92ba823e24757d5884e3ec60f5e81319/wcwidth-0.2.4-py2.py3-none-any.whl\r\nCollecting more-itertools>=4.0.0 (from pytest)\r\n  Using cached https://files.pythonhosted.org/packages/ef/9b/6c35ec5483710492e21252465160ee508170159f7e0e2d6cd769022f52f6/more_itertools-8.4.0-py3-none-any.whl\r\nCollecting pluggy<1.0,>=0.12 (from pytest)\r\n  Using cached https://files.pythonhosted.org/packages/a0/28/85c7aa31b80d150b772fbe4a229487bc6644da9ccb7e427dd8cc60cb8a62/pluggy-0.13.1-py2.py3-none-any.whl\r\nCollecting packaging (from pytest)\r\n  Using cached https://files.pythonhosted.org/packages/46/19/c5ab91b1b05cfe63cccd5cfc971db9214c6dd6ced54e33c30d5af1d2bc43/packaging-20.4-py2.py3-none-any.whl\r\nCollecting py>=1.5.0 (from pytest)\r\n  Using cached https://files.pythonhosted.org/packages/ae/12/76710702ccf77dab01246ecb55fbe43175131c0738d0be29f3de50d31071/py-1.8.2-py2.py3-none-any.whl\r\nCollecting shiboken2==5.15.0 (from pyside2)\r\n  Using cached https://files.pythonhosted.org/packages/34/09/89ea79363e71233ee39f08c497efd8b34b1dd1e26f1905f18555b3cb1b1a/shiboken2-5.15.0-5.15.0-cp35.cp36.cp37.cp38-abi3-manylinux1_x86_64.whl\r\nCollecting pyparsing>=2.0.2 (from packaging->pytest)\r\n  Using cached https://files.pythonhosted.org/packages/8a/bb/488841f56197b13700afd5658fc279a2025a39e22449b7cf29864669b15d/pyparsing-2.4.7-py2.py3-none-any.whl\r\nCollecting six (from packaging->pytest)\r\n  Using cached https://files.pythonhosted.org/packages/ee/ff/48bde5c0f013094d729fe4b0316ba2a24774b3ff1c52d924a8a4cb04078a/six-1.15.0-py2.py3-none-any.whl\r\nInstalling collected packages: pip, setuptools, wheel, sortedcontainers, sniffio, idna, attrs, async-generator, outcome, trio, wcwidth, more-itertools, pluggy, pyparsing, six, packaging, py, pytest, shiboken2, pyside2\r\n  Found existing installation: pip 19.2.3\r\n    Uninstalling pip-19.2.3:\r\n      Successfully uninstalled pip-19.2.3\r\n  Found existing installation: setuptools 41.2.0\r\n    Uninstalling setuptools-41.2.0:\r\n      Successfully uninstalled setuptools-41.2.0\r\nSuccessfully installed async-generator-1.10 attrs-19.3.0 idna-2.9 more-itertools-8.4.0 outcome-1.0.1 packaging-20.4 pip-20.1.1 pluggy-0.13.1 py-1.8.2 pyparsing-2.4.7 pyside2-5.15.0 pytest-5.4.3 setuptools-47.3.1 shiboken2-5.15.0 six-1.15.0 sniffio-1.1.0 sortedcontainers-2.2.2 trio-0.16.0 wcwidth-0.2.4 wheel-0.34.2\r\n```\r\n\r\n```bash\r\naltendky@p1:~/hmm$ cat test_importtrio.py                                         \r\ndef test():\r\n    import trio\r\n```\r\n\r\n```bash\r\naltendky@p1:~/hmm$ venv/bin/pytest test_importtrio.py                             \r\n================================================= test session starts ==================================================\r\nplatform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.2, pluggy-0.13.1\r\nrootdir: /home/altendky/hmm\r\ncollected 1 item                                                                                                       \r\n\r\ntest_importtrio.py .                                                                                             [100%]\r\n\r\n================================================== 1 passed in 0.06s ===================================================\r\n```\r\n\r\n```bash\r\naltendky@p1:~/hmm$ venv/bin/pip install pytest-qt                                 \r\nCollecting pytest-qt\r\n  Using cached pytest_qt-3.3.0-py2.py3-none-any.whl (35 kB)\r\nRequirement already satisfied: pytest>=3.0.0 in ./venv/lib/python3.8/site-packages (from pytest-qt) (5.4.3)\r\nRequirement already satisfied: attrs>=17.4.0 in ./venv/lib/python3.8/site-packages (from pytest>=3.0.0->pytest-qt) (19.3.0)\r\nRequirement already satisfied: more-itertools>=4.0.0 in ./venv/lib/python3.8/site-packages (from pytest>=3.0.0->pytest-qt) (8.4.0)\r\nRequirement already satisfied: wcwidth in ./venv/lib/python3.8/site-packages (from pytest>=3.0.0->pytest-qt) (0.2.4)\r\nRequirement already satisfied: packaging in ./venv/lib/python3.8/site-packages (from pytest>=3.0.0->pytest-qt) (20.4)\r\nRequirement already satisfied: pluggy<1.0,>=0.12 in ./venv/lib/python3.8/site-packages (from pytest>=3.0.0->pytest-qt) (0.13.1)\r\nRequirement already satisfied: py>=1.5.0 in ./venv/lib/python3.8/site-packages (from pytest>=3.0.0->pytest-qt) (1.8.2)\r\nRequirement already satisfied: six in ./venv/lib/python3.8/site-packages (from packaging->pytest>=3.0.0->pytest-qt) (1.15.0)\r\nRequirement already satisfied: pyparsing>=2.0.2 in ./venv/lib/python3.8/site-packages (from packaging->pytest>=3.0.0->pytest-qt) (2.4.7)\r\nInstalling collected packages: pytest-qt\r\nSuccessfully installed pytest-qt-3.3.0\r\n```\r\n\r\n```bash\r\naltendky@p1:~/hmm$ venv/bin/pytest test_importtrio.py                             \r\n================================================= test session starts ==================================================\r\nplatform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.2, pluggy-0.13.1\r\nPySide2 5.15.0 -- Qt runtime 5.15.0 -- Qt compiled 5.15.0\r\nrootdir: /home/altendky/hmm\r\nplugins: qt-3.3.0\r\ncollected 1 item                                                                                                       \r\n\r\ntest_importtrio.py F                                                                                             [100%]\r\n\r\n======================================================= FAILURES =======================================================\r\n_________________________________________________________ test _________________________________________________________\r\n\r\n    def test():\r\n>       import trio\r\n\r\ntest_importtrio.py:2: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nvenv/lib/python3.8/site-packages/trio/__init__.py:18: in <module>\r\n    from ._core import (\r\nvenv/lib/python3.8/site-packages/trio/_core/__init__.py:18: in <module>\r\n    from ._multierror import MultiError\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n    import sys\r\n    import traceback\r\n    import textwrap\r\n    import warnings\r\n    \r\n    import attr\r\n    \r\n    # python traceback.TracebackException < 3.6.4 does not support unhashable exceptions\r\n    # see https://github.com/python/cpython/pull/4014 for details\r\n    if sys.version_info < (3, 6, 4):\r\n        exc_key = lambda exc: exc\r\n    else:\r\n        exc_key = id\r\n    \r\n    ################################################################\r\n    # MultiError\r\n    ################################################################\r\n    \r\n    \r\n    def _filter_impl(handler, root_exc):\r\n        # We have a tree of MultiError's, like:\r\n        #\r\n        #  MultiError([\r\n        #      ValueError,\r\n        #      MultiError([\r\n        #          KeyError,\r\n        #          ValueError,\r\n        #      ]),\r\n        #  ])\r\n        #\r\n        # or similar.\r\n        #\r\n        # We want to\r\n        # 1) apply the filter to each of the leaf exceptions -- each leaf\r\n        #    might stay the same, be replaced (with the original exception\r\n        #    potentially sticking around as __context__ or __cause__), or\r\n        #    disappear altogether.\r\n        # 2) simplify the resulting tree -- remove empty nodes, and replace\r\n        #    singleton MultiError's with their contents, e.g.:\r\n        #        MultiError([KeyError]) -> KeyError\r\n        #    (This can happen recursively, e.g. if the two ValueErrors above\r\n        #    get caught then we'll just be left with a bare KeyError.)\r\n        # 3) preserve sensible tracebacks\r\n        #\r\n        # It's the tracebacks that are most confusing. As a MultiError\r\n        # propagates through the stack, it accumulates traceback frames, but\r\n        # the exceptions inside it don't. Semantically, the traceback for a\r\n        # leaf exception is the concatenation the tracebacks of all the\r\n        # exceptions you see when traversing the exception tree from the root\r\n        # to that leaf. Our correctness invariant is that this concatenated\r\n        # traceback should be the same before and after.\r\n        #\r\n        # The easy way to do that would be to, at the beginning of this\r\n        # function, \"push\" all tracebacks down to the leafs, so all the\r\n        # MultiErrors have __traceback__=None, and all the leafs have complete\r\n        # tracebacks. But whenever possible, we'd actually prefer to keep\r\n        # tracebacks as high up in the tree as possible, because this lets us\r\n        # keep only a single copy of the common parts of these exception's\r\n        # tracebacks. This is cheaper (in memory + time -- tracebacks are\r\n        # unpleasantly quadratic-ish to work with, and this might matter if\r\n        # you have thousands of exceptions, which can happen e.g. after\r\n        # cancelling a large task pool, and no-one will ever look at their\r\n        # tracebacks!), and more importantly, factoring out redundant parts of\r\n        # the tracebacks makes them more readable if/when users do see them.\r\n        #\r\n        # So instead our strategy is:\r\n        # - first go through and construct the new tree, preserving any\r\n        #   unchanged subtrees\r\n        # - then go through the original tree (!) and push tracebacks down\r\n        #   until either we hit a leaf, or we hit a subtree which was\r\n        #   preserved in the new tree.\r\n    \r\n        # This used to also support async handler functions. But that runs into:\r\n        #   https://bugs.python.org/issue29600\r\n        # which is difficult to fix on our end.\r\n    \r\n        # Filters a subtree, ignoring tracebacks, while keeping a record of\r\n        # which MultiErrors were preserved unchanged\r\n        def filter_tree(exc, preserved):\r\n            if isinstance(exc, MultiError):\r\n                new_exceptions = []\r\n                changed = False\r\n                for child_exc in exc.exceptions:\r\n                    new_child_exc = filter_tree(child_exc, preserved)\r\n                    if new_child_exc is not child_exc:\r\n                        changed = True\r\n                    if new_child_exc is not None:\r\n                        new_exceptions.append(new_child_exc)\r\n                if not new_exceptions:\r\n                    return None\r\n                elif changed:\r\n                    return MultiError(new_exceptions)\r\n                else:\r\n                    preserved.add(id(exc))\r\n                    return exc\r\n            else:\r\n                new_exc = handler(exc)\r\n                # Our version of implicit exception chaining\r\n                if new_exc is not None and new_exc is not exc:\r\n                    new_exc.__context__ = exc\r\n                return new_exc\r\n    \r\n        def push_tb_down(tb, exc, preserved):\r\n            if id(exc) in preserved:\r\n                return\r\n            new_tb = concat_tb(tb, exc.__traceback__)\r\n            if isinstance(exc, MultiError):\r\n                for child_exc in exc.exceptions:\r\n                    push_tb_down(new_tb, child_exc, preserved)\r\n                exc.__traceback__ = None\r\n            else:\r\n                exc.__traceback__ = new_tb\r\n    \r\n        preserved = set()\r\n        new_root_exc = filter_tree(root_exc, preserved)\r\n        push_tb_down(None, root_exc, preserved)\r\n        return new_root_exc\r\n    \r\n    \r\n    # Normally I'm a big fan of (a)contextmanager, but in this case I found it\r\n    # easier to use the raw context manager protocol, because it makes it a lot\r\n    # easier to reason about how we're mutating the traceback as we go. (End\r\n    # result: if the exception gets modified, then the 'raise' here makes this\r\n    # frame show up in the traceback; otherwise, we leave no trace.)\r\n    @attr.s(frozen=True)\r\n    class MultiErrorCatcher:\r\n        _handler = attr.ib()\r\n    \r\n        def __enter__(self):\r\n            pass\r\n    \r\n        def __exit__(self, etype, exc, tb):\r\n            if exc is not None:\r\n                filtered_exc = MultiError.filter(self._handler, exc)\r\n                if filtered_exc is exc:\r\n                    # Let the interpreter re-raise it\r\n                    return False\r\n                if filtered_exc is None:\r\n                    # Swallow the exception\r\n                    return True\r\n                # When we raise filtered_exc, Python will unconditionally blow\r\n                # away its __context__ attribute and replace it with the original\r\n                # exc we caught. So after we raise it, we have to pause it while\r\n                # it's in flight to put the correct __context__ back.\r\n                old_context = filtered_exc.__context__\r\n                try:\r\n                    raise filtered_exc\r\n                finally:\r\n                    _, value, _ = sys.exc_info()\r\n                    assert value is filtered_exc\r\n                    value.__context__ = old_context\r\n    \r\n    \r\n    class MultiError(BaseException):\r\n        \"\"\"An exception that contains other exceptions; also known as an\r\n        \"inception\".\r\n    \r\n        It's main use is to represent the situation when multiple child tasks all\r\n        raise errors \"in parallel\".\r\n    \r\n        Args:\r\n          exceptions (list): The exceptions\r\n    \r\n        Returns:\r\n          If ``len(exceptions) == 1``, returns that exception. This means that a\r\n          call to ``MultiError(...)`` is not guaranteed to return a\r\n          :exc:`MultiError` object!\r\n    \r\n          Otherwise, returns a new :exc:`MultiError` object.\r\n    \r\n        Raises:\r\n          TypeError: if any of the passed in objects are not instances of\r\n              :exc:`BaseException`.\r\n    \r\n        \"\"\"\r\n    \r\n        def __init__(self, exceptions):\r\n            # Avoid recursion when exceptions[0] returned by __new__() happens\r\n            # to be a MultiError and subsequently __init__() is called.\r\n            if hasattr(self, \"exceptions\"):\r\n                # __init__ was already called on this object\r\n                assert len(exceptions) == 1 and exceptions[0] is self\r\n                return\r\n            self.exceptions = exceptions\r\n    \r\n        def __new__(cls, exceptions):\r\n            exceptions = list(exceptions)\r\n            for exc in exceptions:\r\n                if not isinstance(exc, BaseException):\r\n                    raise TypeError(\"Expected an exception object, not {!r}\".format(exc))\r\n            if len(exceptions) == 1:\r\n                # If this lone object happens to itself be a MultiError, then\r\n                # Python will implicitly call our __init__ on it again.  See\r\n                # special handling in __init__.\r\n                return exceptions[0]\r\n            else:\r\n                # The base class __new__() implicitly invokes our __init__, which\r\n                # is what we want.\r\n                #\r\n                # In an earlier version of the code, we didn't define __init__ and\r\n                # simply set the `exceptions` attribute directly on the new object.\r\n                # However, linters expect attributes to be initialized in __init__.\r\n                return BaseException.__new__(cls, exceptions)\r\n    \r\n        def __str__(self):\r\n            return \", \".join(repr(exc) for exc in self.exceptions)\r\n    \r\n        def __repr__(self):\r\n            return \"<MultiError: {}>\".format(self)\r\n    \r\n        @classmethod\r\n        def filter(cls, handler, root_exc):\r\n            \"\"\"Apply the given ``handler`` to all the exceptions in ``root_exc``.\r\n    \r\n            Args:\r\n              handler: A callable that takes an atomic (non-MultiError) exception\r\n                  as input, and returns either a new exception object or None.\r\n              root_exc: An exception, often (though not necessarily) a\r\n                  :exc:`MultiError`.\r\n    \r\n            Returns:\r\n              A new exception object in which each component exception ``exc`` has\r\n              been replaced by the result of running ``handler(exc)`` \u2013 or, if\r\n              ``handler`` returned None for all the inputs, returns None.\r\n    \r\n            \"\"\"\r\n    \r\n            return _filter_impl(handler, root_exc)\r\n    \r\n        @classmethod\r\n        def catch(cls, handler):\r\n            \"\"\"Return a context manager that catches and re-throws exceptions\r\n            after running :meth:`filter` on them.\r\n    \r\n            Args:\r\n              handler: as for :meth:`filter`\r\n    \r\n            \"\"\"\r\n    \r\n            return MultiErrorCatcher(handler)\r\n    \r\n    \r\n    # Clean up exception printing:\r\n    MultiError.__module__ = \"trio\"\r\n    \r\n    ################################################################\r\n    # concat_tb\r\n    ################################################################\r\n    \r\n    # We need to compute a new traceback that is the concatenation of two existing\r\n    # tracebacks. This requires copying the entries in 'head' and then pointing\r\n    # the final tb_next to 'tail'.\r\n    #\r\n    # NB: 'tail' might be None, which requires some special handling in the ctypes\r\n    # version.\r\n    #\r\n    # The complication here is that Python doesn't actually support copying or\r\n    # modifying traceback objects, so we have to get creative...\r\n    #\r\n    # On CPython, we use ctypes. On PyPy, we use \"transparent proxies\".\r\n    #\r\n    # Jinja2 is a useful source of inspiration:\r\n    #   https://github.com/pallets/jinja/blob/master/jinja2/debug.py\r\n    \r\n    try:\r\n        import tputil\r\n    except ImportError:\r\n        have_tproxy = False\r\n    else:\r\n        have_tproxy = True\r\n    \r\n    if have_tproxy:\r\n        # http://doc.pypy.org/en/latest/objspace-proxies.html\r\n        def copy_tb(base_tb, tb_next):\r\n            def controller(operation):\r\n                # Rationale for pragma: I looked fairly carefully and tried a few\r\n                # things, and AFAICT it's not actually possible to get any\r\n                # 'opname' that isn't __getattr__ or __getattribute__. So there's\r\n                # no missing test we could add, and no value in coverage nagging\r\n                # us about adding one.\r\n                if operation.opname in [\r\n                    \"__getattribute__\",\r\n                    \"__getattr__\",\r\n                ]:  # pragma: no cover\r\n                    if operation.args[0] == \"tb_next\":\r\n                        return tb_next\r\n                return operation.delegate()\r\n    \r\n            return tputil.make_proxy(controller, type(base_tb), base_tb)\r\n    \r\n    \r\n    else:\r\n        # ctypes it is\r\n        import ctypes\r\n    \r\n        # How to handle refcounting? I don't want to use ctypes.py_object because\r\n        # I don't understand or trust it, and I don't want to use\r\n        # ctypes.pythonapi.Py_{Inc,Dec}Ref because we might clash with user code\r\n        # that also tries to use them but with different types. So private _ctypes\r\n        # APIs it is!\r\n        import _ctypes\r\n    \r\n        class CTraceback(ctypes.Structure):\r\n            _fields_ = [\r\n                (\"PyObject_HEAD\", ctypes.c_byte * object().__sizeof__()),\r\n                (\"tb_next\", ctypes.c_void_p),\r\n                (\"tb_frame\", ctypes.c_void_p),\r\n                (\"tb_lasti\", ctypes.c_int),\r\n                (\"tb_lineno\", ctypes.c_int),\r\n            ]\r\n    \r\n        def copy_tb(base_tb, tb_next):\r\n            # TracebackType has no public constructor, so allocate one the hard way\r\n            try:\r\n                raise ValueError\r\n            except ValueError as exc:\r\n                new_tb = exc.__traceback__\r\n            c_new_tb = CTraceback.from_address(id(new_tb))\r\n    \r\n            # At the C level, tb_next either pointer to the next traceback or is\r\n            # NULL. c_void_p and the .tb_next accessor both convert NULL to None,\r\n            # but we shouldn't DECREF None just because we assigned to a NULL\r\n            # pointer! Here we know that our new traceback has only 1 frame in it,\r\n            # so we can assume the tb_next field is NULL.\r\n            assert c_new_tb.tb_next is None\r\n            # If tb_next is None, then we want to set c_new_tb.tb_next to NULL,\r\n            # which it already is, so we're done. Otherwise, we have to actually\r\n            # do some work:\r\n            if tb_next is not None:\r\n                _ctypes.Py_INCREF(tb_next)\r\n                c_new_tb.tb_next = id(tb_next)\r\n    \r\n            assert c_new_tb.tb_frame is not None\r\n            _ctypes.Py_INCREF(base_tb.tb_frame)\r\n            old_tb_frame = new_tb.tb_frame\r\n            c_new_tb.tb_frame = id(base_tb.tb_frame)\r\n            _ctypes.Py_DECREF(old_tb_frame)\r\n    \r\n            c_new_tb.tb_lasti = base_tb.tb_lasti\r\n            c_new_tb.tb_lineno = base_tb.tb_lineno\r\n    \r\n            return new_tb\r\n    \r\n    \r\n    def concat_tb(head, tail):\r\n        # We have to use an iterative algorithm here, because in the worst case\r\n        # this might be a RecursionError stack that is by definition too deep to\r\n        # process by recursion!\r\n        head_tbs = []\r\n        pointer = head\r\n        while pointer is not None:\r\n            head_tbs.append(pointer)\r\n            pointer = pointer.tb_next\r\n        current_head = tail\r\n        for head_tb in reversed(head_tbs):\r\n            current_head = copy_tb(head_tb, tb_next=current_head)\r\n        return current_head\r\n    \r\n    \r\n    ################################################################\r\n    # MultiError traceback formatting\r\n    #\r\n    # What follows is terrible, terrible monkey patching of\r\n    # traceback.TracebackException to add support for handling\r\n    # MultiErrors\r\n    ################################################################\r\n    \r\n    traceback_exception_original_init = traceback.TracebackException.__init__\r\n    \r\n    \r\n    def traceback_exception_init(\r\n        self,\r\n        exc_type,\r\n        exc_value,\r\n        exc_traceback,\r\n        *,\r\n        limit=None,\r\n        lookup_lines=True,\r\n        capture_locals=False,\r\n        _seen=None,\r\n    ):\r\n        if _seen is None:\r\n            _seen = set()\r\n    \r\n        # Capture the original exception and its cause and context as TracebackExceptions\r\n        traceback_exception_original_init(\r\n            self,\r\n            exc_type,\r\n            exc_value,\r\n            exc_traceback,\r\n            limit=limit,\r\n            lookup_lines=lookup_lines,\r\n            capture_locals=capture_locals,\r\n            _seen=_seen,\r\n        )\r\n    \r\n        # Capture each of the exceptions in the MultiError along with each of their causes and contexts\r\n        if isinstance(exc_value, MultiError):\r\n            embedded = []\r\n            for exc in exc_value.exceptions:\r\n                if exc_key(exc) not in _seen:\r\n                    embedded.append(\r\n                        traceback.TracebackException.from_exception(\r\n                            exc,\r\n                            limit=limit,\r\n                            lookup_lines=lookup_lines,\r\n                            capture_locals=capture_locals,\r\n                            # copy the set of _seen exceptions so that duplicates\r\n                            # shared between sub-exceptions are not omitted\r\n                            _seen=set(_seen),\r\n                        )\r\n                    )\r\n            self.embedded = embedded\r\n        else:\r\n            self.embedded = []\r\n    \r\n    \r\n    traceback.TracebackException.__init__ = traceback_exception_init\r\n    traceback_exception_original_format = traceback.TracebackException.format\r\n    \r\n    \r\n    def traceback_exception_format(self, *, chain=True):\r\n        yield from traceback_exception_original_format(self, chain=chain)\r\n    \r\n        for i, exc in enumerate(self.embedded):\r\n            yield \"\\nDetails of embedded exception {}:\\n\\n\".format(i + 1)\r\n            yield from (textwrap.indent(line, \" \" * 2) for line in exc.format(chain=chain))\r\n    \r\n    \r\n    traceback.TracebackException.format = traceback_exception_format\r\n    \r\n    \r\n    def trio_excepthook(etype, value, tb):\r\n        for chunk in traceback.format_exception(etype, value, tb):\r\n            sys.stderr.write(chunk)\r\n    \r\n    \r\n    monkeypatched_or_warned = False\r\n    \r\n    if \"IPython\" in sys.modules:\r\n        import IPython\r\n    \r\n        ip = IPython.get_ipython()\r\n        if ip is not None:\r\n            if ip.custom_exceptions != ():\r\n                warnings.warn(\r\n                    \"IPython detected, but you already have a custom exception \"\r\n                    \"handler installed. I'll skip installing Trio's custom \"\r\n                    \"handler, but this means MultiErrors will not show full \"\r\n                    \"tracebacks.\",\r\n                    category=RuntimeWarning,\r\n                )\r\n                monkeypatched_or_warned = True\r\n            else:\r\n    \r\n                def trio_show_traceback(self, etype, value, tb, tb_offset=None):\r\n                    # XX it would be better to integrate with IPython's fancy\r\n                    # exception formatting stuff (and not ignore tb_offset)\r\n                    trio_excepthook(etype, value, tb)\r\n    \r\n                ip.set_custom_exc((MultiError,), trio_show_traceback)\r\n                monkeypatched_or_warned = True\r\n    \r\n    if sys.excepthook is sys.__excepthook__:\r\n        sys.excepthook = trio_excepthook\r\n        monkeypatched_or_warned = True\r\n    \r\n    # Ubuntu's system Python has a sitecustomize.py file that import\r\n    # apport_python_hook and replaces sys.excepthook.\r\n    #\r\n    # The custom hook captures the error for crash reporting, and then calls\r\n    # sys.__excepthook__ to actually print the error.\r\n    #\r\n    # We don't mind it capturing the error for crash reporting, but we want to\r\n    # take over printing the error. So we monkeypatch the apport_python_hook\r\n    # module so that instead of calling sys.__excepthook__, it calls our custom\r\n    # hook.\r\n    #\r\n    # More details: https://github.com/python-trio/trio/issues/1065\r\n>   if sys.excepthook.__name__ == \"apport_excepthook\":\r\nE   AttributeError: 'functools.partial' object has no attribute '__name__'\r\n\r\nvenv/lib/python3.8/site-packages/trio/_core/_multierror.py:480: AttributeError\r\n=============================================== short test summary info ================================================\r\nFAILED test_importtrio.py::test - AttributeError: 'functools.partial' object has no attribute '__name__'\r\n================================================== 1 failed in 0.12s ===================================================\r\n```\r\n\r\n```bash\r\naltendky@p1:~/hmm$ cat test_importtrio_outside.py\r\nimport trio\r\n\r\n\r\ndef test():\r\n    pass\r\n```\r\n\r\n```bash\r\naltendky@p1:~/hmm$ venv/bin/pytest test_importtrio_outside.py\r\n================================================= test session starts ==================================================\r\nplatform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.2, pluggy-0.13.1\r\nPySide2 5.15.0 -- Qt runtime 5.15.0 -- Qt compiled 5.15.0\r\nrootdir: /home/altendky/hmm\r\nplugins: qt-3.3.0\r\ncollected 1 item                                                                                                       \r\n\r\ntest_importtrio_outside.py .                                                                                     [100%]\r\n\r\n================================================== 1 passed in 0.07s ===================================================\r\n```\r\n\r\n</details>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1626", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1626/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1626/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1626/events", "html_url": "https://github.com/python-trio/trio/issues/1626", "id": 640476220, "node_id": "MDU6SXNzdWU2NDA0NzYyMjA=", "number": 1626, "title": "Memory channels and timeout", "user": {"login": "smurfix", "id": 236571, "node_id": "MDQ6VXNlcjIzNjU3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/236571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smurfix", "html_url": "https://github.com/smurfix", "followers_url": "https://api.github.com/users/smurfix/followers", "following_url": "https://api.github.com/users/smurfix/following{/other_user}", "gists_url": "https://api.github.com/users/smurfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/smurfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smurfix/subscriptions", "organizations_url": "https://api.github.com/users/smurfix/orgs", "repos_url": "https://api.github.com/users/smurfix/repos", "events_url": "https://api.github.com/users/smurfix/events{/privacy}", "received_events_url": "https://api.github.com/users/smurfix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-17T14:12:10Z", "updated_at": "2020-06-20T11:32:22Z", "closed_at": "2020-06-20T11:32:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "IMHO, conceptually, sending something to a memory channel which is not full should not take any time.\r\n\r\n```\r\nimport trio\r\nasync def main():\r\n    s,r = trio.open_memory_channel(3)\r\n    with trio.fail_after(0):  # or 0.0000000001\r\n        await s.send(123)\r\ntrio.run(tmain)\r\n```\r\nThis code should not fail.\r\n\r\nI'm doing this with a timeout of 0.01 in my production code. Surprise: I get an error every couple of hours, presumably because Trio runs some other task that takes too long before attempting to add the data to the channel, or maybe because the system is just slow-ish for other reasons.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1621", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1621/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1621/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1621/events", "html_url": "https://github.com/python-trio/trio/issues/1621", "id": 639132562, "node_id": "MDU6SXNzdWU2MzkxMzI1NjI=", "number": 1621, "title": "ResourceWarnings with PYTHONDEVMOVE=1", "user": {"login": "pikeas", "id": 686573, "node_id": "MDQ6VXNlcjY4NjU3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/686573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pikeas", "html_url": "https://github.com/pikeas", "followers_url": "https://api.github.com/users/pikeas/followers", "following_url": "https://api.github.com/users/pikeas/following{/other_user}", "gists_url": "https://api.github.com/users/pikeas/gists{/gist_id}", "starred_url": "https://api.github.com/users/pikeas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pikeas/subscriptions", "organizations_url": "https://api.github.com/users/pikeas/orgs", "repos_url": "https://api.github.com/users/pikeas/repos", "events_url": "https://api.github.com/users/pikeas/events{/privacy}", "received_events_url": "https://api.github.com/users/pikeas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-06-15T20:31:45Z", "updated_at": "2020-06-16T09:21:26Z", "closed_at": "2020-06-16T09:21:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/python-trio/trio/blob/master/docs/source/tutorial.rst#when-things-go-wrong-timeouts-cancellation-and-exceptions-in-concurrent-tasks\r\n\r\n> TODO: maybe a brief discussion of :exc:`KeyboardInterrupt` handling?\r\n\r\nWhat's the Right Way to catch KeyboardInterrupt? Here's trio's channel example:\r\n\r\n```\r\nfrom random import randint\r\nimport trio\r\n\r\nasync def main():\r\n    async with trio.open_nursery() as nursery:\r\n        send_channel, receive_channel = trio.open_memory_channel(0)\r\n        async with send_channel, receive_channel:\r\n            nursery.start_soon(producer, \"producer\", send_channel.clone())\r\n            nursery.start_soon(consumer, \"consumer\", receive_channel.clone())\r\n\r\nasync def producer(name, send_channel):\r\n    async with send_channel:\r\n        for i in range(30):\r\n            await trio.sleep(randint(1, 2))\r\n            await send_channel.send(f\"{i} from {name}\")\r\n\r\nasync def consumer(name, receive_channel):\r\n    async with receive_channel:\r\n        async for value in receive_channel:\r\n            print(f\"consumer {name} got {value=}\")\r\n            await trio.sleep(randint(3, 4))\r\n\r\ntrio.run(main)\r\n```\r\n\r\nHere's what happens when a ctrl-c occurs:\r\n\r\n```\r\nconsumer consumer got value='0 from producer'\r\nconsumer consumer got value='1 from producer'\r\nconsumer consumer got value='2 from producer'\r\n^CTraceback (most recent call last):\r\n  File \"foo.py\", line 28, in <module>\r\n    trio.run(main)\r\n  File \"[...]/lib/python3.8/site-packages/trio/_core/_run.py\", line 1896, in run\r\n    raise runner.main_task_outcome.error\r\n  File \"foo.py\", line 11, in main\r\n    nursery.start_soon(consumer, \"consumer\", receive_channel.clone())\r\n  File \"[...]/lib/python3.8/site-packages/trio/_core/_run.py\", line 741, in __aexit__\r\n    raise combined_error_from_nursery\r\n  File \"[...]lib/python3.8/site-packages/trio/_core/_run.py\", line 1107, in raise_cancel\r\n    raise KeyboardInterrupt\r\nKeyboardInterrupt\r\nsys:1: ResourceWarning: unclosed <socket.socket fd=4, family=AddressFamily.AF_UNIX, type=SocketKind.SOCK_STREAM, proto=0>\r\nsys:1: ResourceWarning: unclosed <socket.socket fd=5, family=AddressFamily.AF_UNIX, type=SocketKind.SOCK_STREAM, proto=0>\r\n```\r\n\r\nI've tried various `try/except` changes, none of which seem to properly close the socket.\r\n\r\nAlso, why does not cloning (`.clone()`) both channels cause an immediate `raise trio.ClosedResourceError`?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1612", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1612/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1612/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1612/events", "html_url": "https://github.com/python-trio/trio/issues/1612", "id": 637927770, "node_id": "MDU6SXNzdWU2Mzc5Mjc3NzA=", "number": 1612, "title": "Support for user-level flat combining", "user": {"login": "catern", "id": 5394722, "node_id": "MDQ6VXNlcjUzOTQ3MjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5394722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catern", "html_url": "https://github.com/catern", "followers_url": "https://api.github.com/users/catern/followers", "following_url": "https://api.github.com/users/catern/following{/other_user}", "gists_url": "https://api.github.com/users/catern/gists{/gist_id}", "starred_url": "https://api.github.com/users/catern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catern/subscriptions", "organizations_url": "https://api.github.com/users/catern/orgs", "repos_url": "https://api.github.com/users/catern/repos", "events_url": "https://api.github.com/users/catern/events{/privacy}", "received_events_url": "https://api.github.com/users/catern/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-06-12T18:17:52Z", "updated_at": "2020-06-26T21:20:09Z", "closed_at": "2020-06-26T07:57:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Flat combining is a name coined by [the paper \"Flat Combining and the Synchronization-Parallelism\r\nTradeoff\"](http://people.csail.mit.edu/shanir/publications/Flat%20Combining%20SPAA%2010.pdf) for a synchronization technique where a single thread *dynamically* takes on the role of handling requests from other threads to perform mutations on a datastructure. This can provide performance improvements, and simplifies implementation of the datastructure - no need for fine-grained concurrency.\r\n\r\nIn trio, threads (tasks) are cheap, so it might seem pointless - just spawn a dedicated thread to service requests to mutate the datastructure. But spawning a thread requires a nursery for that thread, and complicates management for objects. It's much simpler for an object which is concurrently accessed to just pick one of the threads accessing it to perform mutations, as in flat combining.\r\n\r\nI've implemented a lot of flat-combining manually in libraries using trio. It would be nice if there was a built-in way as part of trio to do this. This might combine nicely with support for [kill-safe synchronization abstractions](https://www.cs.utah.edu/plt/publications/pldi04-ff.pdf) which I've also done a lot in trio, painfully manually.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1587", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1587/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1587/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1587/events", "html_url": "https://github.com/python-trio/trio/issues/1587", "id": 635083918, "node_id": "MDU6SXNzdWU2MzUwODM5MTg=", "number": 1587, "title": "Getting rid of the autojump task", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 523592585, "node_id": "MDU6TGFiZWw1MjM1OTI1ODU=", "url": "https://api.github.com/repos/python-trio/trio/labels/design%20discussion", "name": "design discussion", "color": "0052cc", "default": false, "description": null}, {"id": 611722171, "node_id": "MDU6TGFiZWw2MTE3MjIxNzE=", "url": "https://api.github.com/repos/python-trio/trio/labels/pytest-trio%20relevant", "name": "pytest-trio relevant", "color": "c5def5", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-09T03:33:42Z", "updated_at": "2020-06-09T23:50:15Z", "closed_at": "2020-06-09T23:50:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now the autojump clock works internally by spawning a system task that loops on `wait_all_tasks_blocked`.\r\n\r\nDoing this using only existing public APIs is a neat trick, but it has some downsides:\r\n\r\n- If we add a \"chaos scheduler\" mode (#239), then we'll want the autojump clock to keep working even while task execution is being scrambled, which is awkward if the autojump clock uses a task\r\n\r\n- The code in `MockClock` is pretty complex and hard to understand\r\n\r\n- It makes shutdown much trickier. See #1564 where we're faffing around trying to figure out what sequence to tear things down in. You want the clock to be running until the very end, but if it's just some random anonymous task, that doesn't really work... (see also https://github.com/python-trio/trio/pull/1579 for an approach that tries to solve this by jumping through hoop to make it a special task)\r\n\r\n- There's some awkward interaction between the autojump clock using `wait_all_tasks_blocked` and users using `wait_all_tasks_blocked` directly. We have a [big orange warning box about this in the docs](https://trio.readthedocs.io/en/v0.15.1/reference-testing.html#trio.testing.MockClock.autojump_threshold), and it motivates this ugly `tiebreaker` argument to `wait_all_tasks_blocked` that we wouldn't need otherwise.\r\n\r\nSo we should probably make the autojump functionality something that doesn't rely on a task and is a bit more closely integrated with the run loop.\r\n\r\nHow should this work?\r\n\r\nIn general when implementing a feature like the `MockClock`, our first impulse is to try to do it using public APIs, because we want to leave the door open for our users to implement new similar features we haven't thought of and without asking us for permission.\r\n\r\nIn the case of `MockClock`, it's not really clear how much demand there is to write custom autojump functionality, or what it would need... so it's not clear what a \"generic\" API for this would look like.\r\n\r\nI thought about maybe replacing the core support for `wait_all_tasks_blocked` with a mechanism for registering a callback to be invoked after all tasks were blocked, and then using that to implement both `wait_all_tasks_blocked` and `MockClock`. The appealing thing about this is that it would mean the runloop only has to deal with one concept of \"things are idle\", and not deal with the different variants of that. But it's not quite as simple as just a `add_idle_callback(cushion, callback)` type API, because `wait_all_tasks_blocked` needs to be able to cancel a wakeup, `MockClock` needs to adjust the autojump threshold...\r\n\r\nI think the simplest code change would be to straight-up add an `autojump_threshold` attribute to `Runner`, where if it gets exceeded we call `current_clock()._autojump()`. This is so simple that it feels like the right implementation to me. The question is how to expose it.\r\n\r\nOne option would be to have a `trio.lowlevel.set_clock_autojump_threshold`, or something. Or put the `autojump_threshold` on the clock object itself, and document that as a public part of the `trio.abc.Clock` interface. Given that this is such a specialized feature and we have no idea how anyone else would use this though, trying to make a public API feels premature.\r\n\r\nThe other option would be to keep it a private API, that only `MockClock` can use. If we do this then we should also move `MockClock` into `_core` for consistency. I'm not *super* happy with the idea of offering this magic clock that no-one else can replicate, but I guess I'm even less happy with the alternatives, and it's not hard to add a public API later if anyone needs it. So I guess let's do that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1576", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1576/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1576/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1576/events", "html_url": "https://github.com/python-trio/trio/issues/1576", "id": 631249748, "node_id": "MDU6SXNzdWU2MzEyNDk3NDg=", "number": 1576, "title": "SystemError in guest mode when cancelling finished scope", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-05T01:40:19Z", "updated_at": "2020-06-05T19:08:30Z", "closed_at": "2020-06-05T16:55:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Full code at the end but here's the 'interesting' snippet that causes trouble when run in guest mode.  Tests run with Python 3.8.3 in Linux and 08fca2a69592d2c8a0aee24ef26f1a09be495866.\r\n\r\n```python\r\nasync def mine():\r\n    global cscope\r\n    widget = QtWidgets.QWidget()\r\n    with trio.CancelScope() as cscope:\r\n        app.lastWindowClosed.connect(cscope.cancel)\r\n        widget.show()\r\n    return 1\r\n```\r\n\r\nWith just `widget.show()` I get:\r\n```pytb\r\n/home/altendky/repos/trio/trio/_core/_run.py:2161: RuntimeWarning: Trio guest run got abandoned without properly finishing... weird stuff might happen\r\n  warnings.warn(\r\n```\r\n\r\nWith `app.lastWindowClosed.connect(cscope.cancel)` and `widget.show()` I get:\r\n```pytb\r\nStopIteration: 1\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/altendky/repos/trio/trio/_core/_ki.py\", line 159, in wrapper\r\n    locals()\r\nSystemError: <built-in function locals> returned a result with an error set\r\n/home/altendky/repos/trio/trio/_core/_run.py:2161: RuntimeWarning: Trio guest run got abandoned without properly finishing... weird stuff might happen\r\n  warnings.warn(\r\n```\r\n\r\nI've tried to recreate the error without PyQt by just putting the scope cancellation further out but it results in no issues.  I thought maybe PyQt was holding onto a reference to a no longer valid object but `global cscope` didn't avoid the `SystemError`.  The same `SystemError` occurs back to the original commit in #1551, at least there and a few spot checks along the way.\r\n\r\nI just bothered to follow the why-not-pyside2 link https://bugreports.qt.io/projects/PYSIDE/issues/PYSIDE-1313 and at least the `StopIteration` and `SystemError` are similar albeit against a different function call.\r\n\r\nThis isn't any sort of a blocker, just a thing where you have to be careful to disconnect a signal.\r\n\r\nThanks again for guest mode.  Someday I'll do something more than a trivial demo with it.  :]\r\n\r\n<details> <summary>Full example source</summary>\r\n\r\n```python\r\nimport trio\r\nimport sys\r\nfrom outcome import Error\r\nimport traceback\r\n\r\n# Can't use PySide2 currently because of\r\n# https://bugreports.qt.io/projects/PYSIDE/issues/PYSIDE-1313\r\nfrom PyQt5 import QtCore, QtWidgets\r\n\r\nasync def mine():\r\n    global cscope\r\n    widget = QtWidgets.QWidget()\r\n    with trio.CancelScope() as cscope:\r\n        app.lastWindowClosed.connect(cscope.cancel)\r\n        widget.show()\r\n    return 1\r\n\r\napp = QtWidgets.QApplication(sys.argv)\r\n\r\n# This is substantially faster than using a signal... for some reason Qt\r\n# signal dispatch is really slow (and relies on events underneath anyway, so\r\n# this is strictly less work)\r\nREENTER_EVENT = QtCore.QEvent.Type(QtCore.QEvent.registerEventType())\r\n\r\nclass ReenterEvent(QtCore.QEvent):\r\n    pass\r\n\r\nclass Reenter(QtCore.QObject):\r\n    def event(self, event):\r\n        event.fn()\r\n        return False\r\n\r\nreenter = Reenter()\r\n\r\ndef run_sync_soon_threadsafe(fn):\r\n    event = ReenterEvent(REENTER_EVENT)\r\n    event.fn = fn\r\n    app.postEvent(reenter, event)\r\n\r\ndef done_callback(outcome):\r\n    print(f\"Outcome: {outcome}\")\r\n    if isinstance(outcome, Error):\r\n        exc = outcome.error\r\n        traceback.print_exception(type(exc), exc, exc.__traceback__)\r\n    app.quit()\r\n\r\ntrio.lowlevel.start_guest_run(\r\n    mine,\r\n    run_sync_soon_threadsafe=run_sync_soon_threadsafe,\r\n    done_callback=done_callback,\r\n)\r\n\r\napp.exec_()\r\n```\r\n</details>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1573", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1573/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1573/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1573/events", "html_url": "https://github.com/python-trio/trio/issues/1573", "id": 630477442, "node_id": "MDU6SXNzdWU2MzA0Nzc0NDI=", "number": 1573, "title": "Give a better diagnostic if user does trio.to_thread.run_sync(async_fn)", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "guilledk", "id": 7757418, "node_id": "MDQ6VXNlcjc3NTc0MTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7757418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guilledk", "html_url": "https://github.com/guilledk", "followers_url": "https://api.github.com/users/guilledk/followers", "following_url": "https://api.github.com/users/guilledk/following{/other_user}", "gists_url": "https://api.github.com/users/guilledk/gists{/gist_id}", "starred_url": "https://api.github.com/users/guilledk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guilledk/subscriptions", "organizations_url": "https://api.github.com/users/guilledk/orgs", "repos_url": "https://api.github.com/users/guilledk/repos", "events_url": "https://api.github.com/users/guilledk/events{/privacy}", "received_events_url": "https://api.github.com/users/guilledk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "guilledk", "id": 7757418, "node_id": "MDQ6VXNlcjc3NTc0MTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7757418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guilledk", "html_url": "https://github.com/guilledk", "followers_url": "https://api.github.com/users/guilledk/followers", "following_url": "https://api.github.com/users/guilledk/following{/other_user}", "gists_url": "https://api.github.com/users/guilledk/gists{/gist_id}", "starred_url": "https://api.github.com/users/guilledk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guilledk/subscriptions", "organizations_url": "https://api.github.com/users/guilledk/orgs", "repos_url": "https://api.github.com/users/guilledk/repos", "events_url": "https://api.github.com/users/guilledk/events{/privacy}", "received_events_url": "https://api.github.com/users/guilledk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-06-04T03:13:58Z", "updated_at": "2020-06-09T22:56:13Z", "closed_at": "2020-06-09T22:56:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "#1513 fixed the `trio.from_thread` functions to give nice diagnostics here, but skipped `trio.to_thread`.\r\n\r\nHere's a real user who got confused by this: https://gitter.im/python-trio/general?at=5ed860e2b101510b203789ef\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1563", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1563/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1563/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1563/events", "html_url": "https://github.com/python-trio/trio/issues/1563", "id": 627154628, "node_id": "MDU6SXNzdWU2MjcxNTQ2Mjg=", "number": 1563, "title": "Installation fails due to conflicting numpy version", "user": {"login": "NeolithEra", "id": 52778917, "node_id": "MDQ6VXNlcjUyNzc4OTE3", "avatar_url": "https://avatars2.githubusercontent.com/u/52778917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeolithEra", "html_url": "https://github.com/NeolithEra", "followers_url": "https://api.github.com/users/NeolithEra/followers", "following_url": "https://api.github.com/users/NeolithEra/following{/other_user}", "gists_url": "https://api.github.com/users/NeolithEra/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeolithEra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeolithEra/subscriptions", "organizations_url": "https://api.github.com/users/NeolithEra/orgs", "repos_url": "https://api.github.com/users/NeolithEra/repos", "events_url": "https://api.github.com/users/NeolithEra/events{/privacy}", "received_events_url": "https://api.github.com/users/NeolithEra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-29T10:07:15Z", "updated_at": "2020-05-29T10:22:53Z", "closed_at": "2020-05-29T10:22:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, users are unable to run Trios due to dependency conflict with _**numpy**_ package. As shown in the following full dependency graph of Trios, Trios requires _**numpy==1.13.3**_\uff0cwhile tifffile * requires _**numpy>=1.15.1**_.\r\n\r\n\r\nAccording to pip\u2019s \u201cfirst found wins\u201d installation strategy, _**numpy 1.13.3**_ is the actually installed version. However, _**numpy 1.13.3**_ does not satisfy _**numpy>=1.15.1**_.\r\n\r\n### Dependency tree-----------\r\n```\r\ntrios - 2.1\r\n| +- cffi(install version:1.10.0 version range:==1.10.0)\r\n| +- cython(install version:0.26.1 version range:==0.26.1)\r\n| +- numba(install version:0.35.0 version range:==0.35.0)\r\n| +- numpy(install version:1.13.3 version range:==1.13.3)\r\n| +- pillow(install version:7.1.1 version range:*)\r\n| +- scikit-image(install version:0.13.1 version range:==0.13.1)\r\n| | +- astropy(install version:4.0.1.post1 version range:*)\r\n| | +- dask(install version:2.14.0 version range:>=0.5.0)\r\n| | +- imageio(install version:2.8.0 version range:*)\r\n| | | +- numpy(install version:1.13.3 version range:*)\r\n| | | +- pillow(install version:7.1.1 version range:*)\r\n| | +- imread(install version:0.7.4 version range:*)\r\n| | +- matplotlib(install version:3.2.1 version range:>=1.3.1)\r\n| | | +- cycler(install version:0.10.0 version range:>=0.10)\r\n| | | | +- six(install version:1.14.0 version range:*)\r\n| | | +- kiwisolver(install version:1.2.0 version range:>=1.0.1)\r\n| | | +- numpy(install version:1.13.3 version range:>=1.11)\r\n| | | +- pyparsing(install version:3.0.0a1 version range:>=2.0.1)\r\n| | | +- python-dateutil(install version:2.8.1 version range:>=2.1)\r\n| | +- networkx(install version:2.4 version range:>=1.8)\r\n| | | +- decorator(install version:4.4.2 version range:>=4.3.0)\r\n| | +- numpy(install version:1.13.3 version range:>=1.11)\r\n| | +- pillow(install version:7.1.1 version range:>=2.1.0)\r\n| | +- pyside(install version:1.2.4 version range:*)\r\n| | +- pywavelets(install version:1.1.1 version range:>=0.4.0)\r\n| | +- scipy(install version:0.19.1 version range:>=0.17.0)\r\n| | +- simpleitk(install version:1.2.0 version range:*)\r\n| | +- six(install version:1.14.0 version range:>=1.7.3)\r\n| | +- tifffile(install version:2020.2.16 version range:*)\r\n| | | +- imagecodecs(install version:2020.2.18 version range:>=2020.1.31)\r\n| | | | +- numpy(install version:1.18.2 version range:>=1.15)\r\n| | | +- numpy(install version:1.18.2 version range:>=1.15.1)\r\n| +- scikit-learn(install version:0.19.1 version range:==0.19.1)\r\n| +- scipy(install version:0.19.1 version range:==0.19.1)\r\n```\r\n\r\n\r\nThanks for your help.\r\nBest,\r\nNeolith\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1526", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1526/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1526/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1526/events", "html_url": "https://github.com/python-trio/trio/issues/1526", "id": 619419265, "node_id": "MDU6SXNzdWU2MTk0MTkyNjU=", "number": 1526, "title": "trio.open_signal_receiver should give an error if no arguments are passed", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-16T08:56:08Z", "updated_at": "2020-05-16T14:56:59Z", "closed_at": "2020-05-16T14:56:59Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "User confusion spotted in the wild: https://gitter.im/python-trio/general?at=5ebfa9d613878c30b581b9fe\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1500", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1500/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1500/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1500/events", "html_url": "https://github.com/python-trio/trio/issues/1500", "id": 614372808, "node_id": "MDU6SXNzdWU2MTQzNzI4MDg=", "number": 1500, "title": "Remove unused __all__ variables from Trio's modules", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-07T22:02:54Z", "updated_at": "2020-05-13T02:02:23Z", "closed_at": "2020-05-13T02:02:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a minor issue, so let's leave it for someone who hasn't made any PRs yet and wants a simple one to practice one.\r\n\r\nThe issue: lots of Trio's modules have `__all__` variables defined. That's because once upon a time, `trio/__init__.py` used these `__all__` variables to figure out what to re-export as part of the main namespace. But we stopped doing that a long time ago, because it confused static analysis tools. So now the `__all__` variables are vestigial, aren't being updated, and don't actually do anything except clutter up the code, and potentially confuse readers. So we should do a sweep through and delete them all.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1499", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1499/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1499/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1499/events", "html_url": "https://github.com/python-trio/trio/issues/1499", "id": 613914643, "node_id": "MDU6SXNzdWU2MTM5MTQ2NDM=", "number": 1499, "title": "test_getaddrinfo failure", "user": {"login": "PureTryOut", "id": 1565836, "node_id": "MDQ6VXNlcjE1NjU4MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1565836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PureTryOut", "html_url": "https://github.com/PureTryOut", "followers_url": "https://api.github.com/users/PureTryOut/followers", "following_url": "https://api.github.com/users/PureTryOut/following{/other_user}", "gists_url": "https://api.github.com/users/PureTryOut/gists{/gist_id}", "starred_url": "https://api.github.com/users/PureTryOut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PureTryOut/subscriptions", "organizations_url": "https://api.github.com/users/PureTryOut/orgs", "repos_url": "https://api.github.com/users/PureTryOut/repos", "events_url": "https://api.github.com/users/PureTryOut/events{/privacy}", "received_events_url": "https://api.github.com/users/PureTryOut/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-07T09:36:59Z", "updated_at": "2020-05-08T18:46:07Z", "closed_at": "2020-05-08T18:46:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running the tests on Alpine Linux with Python 3.8 and all the newest dependencies as of the time of writing. All tests succeed except for `test_getaddrinfo` in `trio/tests/test_socket.py`:\r\n\r\n```\r\n============================================================= FAILURES ==============================================================\r\n_________________________________________________________ test_getaddrinfo __________________________________________________________\r\n\r\nmonkeygai = <trio.tests.test_socket.MonkeypatchedGAI object at 0x7fcd6388ff10>\r\n\r\n    async def test_getaddrinfo(monkeygai):\r\n        def check(got, expected):\r\n            # win32 returns 0 for the proto field\r\n            def without_proto(gai_tup):\r\n                return gai_tup[:2] + (0,) + gai_tup[3:]\r\n    \r\n            expected2 = [without_proto(gt) for gt in expected]\r\n            assert got == expected or got == expected2\r\n    \r\n        # Simple non-blocking non-error cases, ipv4 and ipv6:\r\n        with assert_checkpoints():\r\n            res = await tsocket.getaddrinfo(\r\n                \"127.0.0.1\", \"12345\", type=tsocket.SOCK_STREAM\r\n            )\r\n    \r\n>       check(res, [\r\n            (tsocket.AF_INET,  # 127.0.0.1 is ipv4\r\n             tsocket.SOCK_STREAM,\r\n             tsocket.IPPROTO_TCP,\r\n             \"\",\r\n             (\"127.0.0.1\", 12345)),\r\n        ])  # yapf: disable\r\n\r\ntrio/tests/test_socket.py:116: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ngot = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '127.0.0.1', ('127.0.0.1', 12345))]\r\nexpected = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 12345))]\r\n\r\n    def check(got, expected):\r\n        # win32 returns 0 for the proto field\r\n        def without_proto(gai_tup):\r\n            return gai_tup[:2] + (0,) + gai_tup[3:]\r\n    \r\n        expected2 = [without_proto(gt) for gt in expected]\r\n>       assert got == expected or got == expected2\r\nE       AssertionError: assert ([(<AddressFam...0.1', 12345))] == [(<AddressFam...0.1', 12345))]\r\nE         At index 0 diff: (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '127.0.0.1', ('127.0.0.1', 12345)) != (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 12345))\r\nE         Use -v to get the full diff or [(<AddressFam...0.1', 12345))] == [(<AddressFam...0.1', 12345))]\r\nE         At index 0 diff: (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '127.0.0.1', ('127.0.0.1', 12345)) != (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 0, '', ('127.0.0.1', 12345))\r\nE         Use -v to get the full diff)\r\n\r\ntrio/tests/test_socket.py:108: AssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1483", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1483/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1483/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1483/events", "html_url": "https://github.com/python-trio/trio/issues/1483", "id": 609912355, "node_id": "MDU6SXNzdWU2MDk5MTIzNTU=", "number": 1483, "title": "Add webscraping tutorial (OR: arbitrary number of returns from nursery)", "user": {"login": "h-vetinari", "id": 33685575, "node_id": "MDQ6VXNlcjMzNjg1NTc1", "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-vetinari", "html_url": "https://github.com/h-vetinari", "followers_url": "https://api.github.com/users/h-vetinari/followers", "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}", "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions", "organizations_url": "https://api.github.com/users/h-vetinari/orgs", "repos_url": "https://api.github.com/users/h-vetinari/repos", "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}", "received_events_url": "https://api.github.com/users/h-vetinari/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 639585223, "node_id": "MDU6TGFiZWw2Mzk1ODUyMjM=", "url": "https://api.github.com/repos/python-trio/trio/labels/docs", "name": "docs", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-04-30T12:27:03Z", "updated_at": "2020-05-14T09:11:47Z", "closed_at": "2020-05-12T09:31:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm new to trio, but it seems to me to be the cleanest approach to async programming in python. :)\r\nSo when I had a little task of grabbing a bunch of things from the web I automatically thought I'd try it, but ran into problems straight away. Even if the solution to my problem ends up being trivial, I'm maybe a good example of someone looking at the tutorial and trying to build their first toy example (the issue title can be adapted accordingly).\r\n\r\nLet's say I have my function:\r\n```python\r\nasync def get_shiny_thing(url)\r\n    some_shiny_thing = await asks.get(url)\r\n    # some processing\r\n    return some_shiny_thing\r\n```\r\n\r\nAll I really want to do is (knowing that the order is indeterminate):\r\n```python\r\nwith trio.open_nursery() as nursery:\r\n    my_treasure = [nursery.start_soon(get_shiny_thing, url) for url in list_of_urls]\r\n```\r\n\r\nThis fails with `RuntimeError: use 'async with open_nursery(...)', not 'with open_nursery(...)'`\r\n\r\nNext step: a wrapper function:\r\n```python\r\nasync def get_treasure(generic_list):\r\n    async with trio.open_nursery() as nursery:\r\n        generic_treasure = [nursery.start_soon(get_shiny_thing, url)\r\n                            for url in generic_list]\r\n    return generic_treasure\r\n```\r\n\r\nBut then - *gasp!* - `my_treasure` is empty:\r\n```\r\n>>> my_treasure = get_treasure(list_of_urls)\r\n>>> my_treasure \r\n[None, None, None, None, None]\r\n```\r\n\r\nI tested that `get_shiny_thing` actually does what it should. Next, I then found [this SO answer](https://stackoverflow.com/a/51568323/2965879) from 2018 by @njsmith, how what I want to do is not really possible (yet?). But the workaround of creating separate functions that update each url (in a dict?) separately and then get passed to `start_soon` seems cumbersome, even if I built a \"function factory\".\r\n\r\nIn short: one of the most generic & popular async examples (a little web scraping) should IMO be one of the things in a tutorial. The tutorial even [notes](https://trio.readthedocs.io/en/stable/tutorial.html#an-echo-client) this absence:\r\n> (Probably a more relevant example these days would be an application that does lots of concurrent HTTP requests, but for that you need an HTTP library such as asks, so we\u2019ll stick with the echo server tradition.)\r\n\r\nIf [hip](https://github.com/python-trio/hip) isn't ready yet, then it's maybe worth considering just doing that example with `asks`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1478", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1478/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1478/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1478/events", "html_url": "https://github.com/python-trio/trio/issues/1478", "id": 608454197, "node_id": "MDU6SXNzdWU2MDg0NTQxOTc=", "number": 1478, "title": "Windows non-IFS LSP build fails with SSL error when downloading .exe file", "user": {"login": "pquentin", "id": 42327, "node_id": "MDQ6VXNlcjQyMzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/42327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pquentin", "html_url": "https://github.com/pquentin", "followers_url": "https://api.github.com/users/pquentin/followers", "following_url": "https://api.github.com/users/pquentin/following{/other_user}", "gists_url": "https://api.github.com/users/pquentin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pquentin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pquentin/subscriptions", "organizations_url": "https://api.github.com/users/pquentin/orgs", "repos_url": "https://api.github.com/users/pquentin/repos", "events_url": "https://api.github.com/users/pquentin/events{/privacy}", "received_events_url": "https://api.github.com/users/pquentin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-28T16:32:05Z", "updated_at": "2020-04-28T18:51:35Z", "closed_at": "2020-04-28T18:51:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It fails at downloading the following .exe:\r\n\r\n```\r\n+ curl -fL --connect-timeout 5 -o lsp-installer.exe http://download.pctools.com/mirror/updates/9.0.0.2308-SDavfree-lite_en.exe\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\n\r\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\ncurl: (60) SSL certificate problem: unable to get local issuer certificate\r\nMore details here: https://curl.haxx.se/docs/sslcerts.html\r\n\r\ncurl failed to verify the legitimacy of the server and therefore could not\r\nestablish a secure connection to it. To learn more about this situation and\r\nhow to fix it, please visit the web page mentioned above.\r\n```\r\n\r\nWhy an SSL error? Well, the above link redirects to https://origin-download.nbu.nortonlifelock.com/mirror/updates/9.0.0.2308-SDavfree-lite_en.exe. Firefox is happy with the DigiCert SSL certificate, though, so I don't know what's going on. And my local curl works too...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1415", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1415/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1415/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1415/events", "html_url": "https://github.com/python-trio/trio/issues/1415", "id": 571826129, "node_id": "MDU6SXNzdWU1NzE4MjYxMjk=", "number": 1415, "title": "Building lazy-object-proxy with 3.9-dev fails in Travis CI", "user": {"login": "pquentin", "id": 42327, "node_id": "MDQ6VXNlcjQyMzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/42327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pquentin", "html_url": "https://github.com/pquentin", "followers_url": "https://api.github.com/users/pquentin/followers", "following_url": "https://api.github.com/users/pquentin/following{/other_user}", "gists_url": "https://api.github.com/users/pquentin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pquentin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pquentin/subscriptions", "organizations_url": "https://api.github.com/users/pquentin/orgs", "repos_url": "https://api.github.com/users/pquentin/repos", "events_url": "https://api.github.com/users/pquentin/events{/privacy}", "received_events_url": "https://api.github.com/users/pquentin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-27T05:10:27Z", "updated_at": "2020-03-10T10:09:22Z", "closed_at": "2020-03-10T10:09:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The [last good build](https://travis-ci.org/python-trio/trio/jobs/654276161) (2020-02-24) looks like this:\r\n\r\n```\r\nCollecting lazy-object-proxy==1.4.3\r\n  Downloading lazy-object-proxy-1.4.3.tar.gz (34 kB)\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... done\r\n    Preparing wheel metadata ... done\r\n```\r\n\r\nThe [first bad build](https://travis-ci.org/python-trio/trio/jobs/655564051) (2020-02-27) looks like this:\r\n\r\n```\r\nCollecting lazy-object-proxy==1.4.3\r\n  Downloading lazy-object-proxy-1.4.3.tar.gz (34 kB)\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... done\r\n    Preparing wheel metadata ... error\r\n    ERROR: Command errored out with exit status 1:\r\n     command: /home/travis/virtualenv/python3.9-dev/bin/python /home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/pip/_vendor/pep517/_in_process.py prepare_metadata_for_build_wheel /tmp/tmp2g4zkkks\r\n         cwd: /tmp/pip-install-lm7n53m0/lazy-object-proxy\r\n    Complete output (42 lines):\r\n    /home/travis/virtualenv/python3.9-dev/bin/python: No module named pip\r\n    Traceback (most recent call last):\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/setuptools/installer.py\", line 128, in fetch_build_egg\r\n        subprocess.check_call(cmd)\r\n      File \"/opt/python/3.9-dev/lib/python3.9/subprocess.py\", line 372, in check_call\r\n        raise CalledProcessError(retcode, cmd)\r\n    subprocess.CalledProcessError: Command '['/home/travis/virtualenv/python3.9-dev/bin/python', '-m', 'pip', '--disable-pip-version-check', 'wheel', '--no-deps', '-w', '/tmp/tmp_gpbjulh', '--quiet', 'setuptools_scm>=3.3.1']' returned non-zero exit status 1.\r\n    \r\n    During handling of the above exception, another exception occurred:\r\n    \r\n    Traceback (most recent call last):\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/pip/_vendor/pep517/_in_process.py\", line 257, in <module>\r\n        main()\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/pip/_vendor/pep517/_in_process.py\", line 240, in main\r\n        json_out['return_val'] = hook(**hook_input['kwargs'])\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/pip/_vendor/pep517/_in_process.py\", line 110, in prepare_metadata_for_build_wheel\r\n        return hook(metadata_directory, config_settings)\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/setuptools/build_meta.py\", line 158, in prepare_metadata_for_build_wheel\r\n        self.run_setup()\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/setuptools/build_meta.py\", line 249, in run_setup\r\n        super(_BuildMetaLegacyBackend,\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/setuptools/build_meta.py\", line 143, in run_setup\r\n        exec(compile(code, __file__, 'exec'), locals())\r\n      File \"setup.py\", line 61, in <module>\r\n        setup(\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/setuptools/__init__.py\", line 143, in setup\r\n        _install_setup_requires(attrs)\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/setuptools/__init__.py\", line 138, in _install_setup_requires\r\n        dist.fetch_build_eggs(dist.setup_requires)\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/setuptools/dist.py\", line 718, in fetch_build_eggs\r\n        resolved_dists = pkg_resources.working_set.resolve(\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/pkg_resources/__init__.py\", line 781, in resolve\r\n        dist = best[req.key] = env.best_match(\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/pkg_resources/__init__.py\", line 1066, in best_match\r\n        return self.obtain(req, installer)\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/pkg_resources/__init__.py\", line 1078, in obtain\r\n        return installer(requirement)\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/setuptools/dist.py\", line 777, in fetch_build_egg\r\n        return fetch_build_egg(self, req)\r\n      File \"/home/travis/virtualenv/python3.9-dev/lib/python3.9/site-packages/setuptools/installer.py\", line 130, in fetch_build_egg\r\n        raise DistutilsError(str(e))\r\n    distutils.errors.DistutilsError: Command '['/home/travis/virtualenv/python3.9-dev/bin/python', '-m', 'pip', '--disable-pip-version-check', 'wheel', '--no-deps', '-w', '/tmp/tmp_gpbjulh', '--quiet', 'setuptools_scm>=3.3.1']' returned non-zero exit status 1.\r\n```\r\n\r\nI guess the interesting line is `/home/travis/virtualenv/python3.9-dev/bin/python: No module named pip`.\r\n\r\nThis may be a virtualenv issue, which continues to see frequent releases after the rewrite: https://virtualenv.pypa.io/en/latest/changelog.html\r\n\r\nAnd this could be related to the previous failure: https://github.com/python-trio/trio/issues/1402. However that one affected all -dev version, while this issue only affects 3.9-dev.\r\n\r\nAlso, the Bionic Travis CPython builder https://travis-ci.com/travis-ci/cpython-builder/builds started failing with an OpenSSL 1.1.1 issue two days ago, so it may take some time to fix.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1411", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1411/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1411/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1411/events", "html_url": "https://github.com/python-trio/trio/issues/1411", "id": 569384868, "node_id": "MDU6SXNzdWU1NjkzODQ4Njg=", "number": 1411, "title": "Implement select()/merge() on ReceiveChannels", "user": {"login": "bergus", "id": 1146478, "node_id": "MDQ6VXNlcjExNDY0Nzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1146478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bergus", "html_url": "https://github.com/bergus", "followers_url": "https://api.github.com/users/bergus/followers", "following_url": "https://api.github.com/users/bergus/following{/other_user}", "gists_url": "https://api.github.com/users/bergus/gists{/gist_id}", "starred_url": "https://api.github.com/users/bergus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bergus/subscriptions", "organizations_url": "https://api.github.com/users/bergus/orgs", "repos_url": "https://api.github.com/users/bergus/repos", "events_url": "https://api.github.com/users/bergus/events{/privacy}", "received_events_url": "https://api.github.com/users/bergus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-22T19:54:30Z", "updated_at": "2020-02-22T21:24:33Z", "closed_at": "2020-02-22T21:19:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to receive values from multiple channels at once, and more importantly, receive only the first value from either of them. I have not found a good way to do that, at least with the libraries exported methods.\r\n\r\nThere's [that `race` function example in the docs](https://trio.readthedocs.io/en/stable/reference-core.html#custom-supervisors), and I can use something similar but it appears to have multiple problems:\r\n\r\n* It doesn't really receive only the first value, it receives any number of values and returns only one of them.\r\n* It's creating an extra memory channel pair and a nursery and a task for every channel on every call, and receiving from one only to send it to the next seems pretty unnecessary (inefficient) to me\r\n* If I use this pattern to merge multiple ReceiveChannels into one, I cannot easily hook into the closing of the merged channel to stop (cancel) receiving from the input channels\r\n* It doesn't tell me from which channel the value was received (ok, that can be easily fixed)\r\n\r\nThis looks like a large hole in the API surface of `trio` to me.\r\n\r\nThere was [some Gitter discussion about this in August 2019](https://gitter.im/python-trio/general?at=5d5c01afbeba830fffce1e9a), but it seems nothing came out of it.\r\n\r\nI think the first problem (multiple receives) can be fixed if I call `cancel` earlier, like [`wait_any` from `trio-util` does it](https://github.com/groove-x/trio-util/blob/1807d69d0e4654ed24d193a90f58b06b1e6f8af3/src/trio_util/_awaitables.py#L10-L25):\r\n```python\r\nasync def select(*channels):\r\n    if not channels:\r\n        raise trio.EndOfChannel\r\n    send_result, receive_result = trio.open_memory_channel(0)\r\n    async with trio.open_nursery() as nursery:\r\n        async def jockey(chan, i):\r\n            val = await chan.receive()\r\n            nursery.cancel_scope.cancel()\r\n            send_result.send_nowait((val, i))\r\n        for i, chan in enumerate(channels):\r\n            nursery.start_soon(jockey, chan, i)\r\n    return await receive_result.receive()\r\n```\r\n\r\nHowever, I would prefer if there was a native way to do that without repeating this helper function in every project. I think it would rather easy to have a `MemoryReceiveChannel` that can receive from multiple producers, by just replacing `this._state` with an array of states and looping over them everywhere the state was used:\r\n```python\r\nasync def select(*receive_channels):\r\n    async with merge(*receive_channels) as any:\r\n        return await any.receive()\r\n\r\ndef merge(*receive_channels):\r\n    states = []\r\n    for chan in receive_channels:\r\n        if isinstance(chan, MemoryReceiveChannel):\r\n            states.extend(chan._states)\r\n        elif isinstance(chan, MemoryMultiReceiveChannel):\r\n            states.append(chan._state)\r\n        else:\r\n            raise ValueError('Not a memory channel')\r\n    return MemoryMultiReceiveChannel(states)\r\n\r\n@attr.s(eq=False)\r\nclass MemoryMultiReceiveChannel(ReceiveChannel):\r\n    _states = attr.ib()\r\n    _closed = attr.ib(default=False)\r\n    _tasks = attr.ib(factory=set)\r\n\r\n    def __attrs_post_init__(self):\r\n        for state in self._states:\r\n            state.open_receive_channels += 1\r\n\r\n    def statistics(self):\r\n        # should probably sum the statistics from all states - sans open_receive_channels?\r\n        pass\r\n\r\n    def __repr__(self):\r\n        return f\"<multiple receive channel at {id(self):#x}, using {len(self._states)} buffers>\"\r\n\r\n    @enable_ki_protection\r\n    def receive_nowait(self):\r\n        if self._closed:\r\n            raise trio.ClosedResourceError\r\n        open_senders = 0\r\n        for state in self._states:\r\n            if state.send_tasks:\r\n                task, value = state.send_tasks.popitem(last=False)\r\n                task.custom_sleep_data._tasks.remove(task)\r\n                trio.hazmat.reschedule(task)\r\n                state.data.append(value)\r\n                # Fall through\r\n            if state.data:\r\n                return state.data.popleft()\r\n            open_senders += state.open_send_channels\r\n            # potential optimisation: remove closed channels from self._states\r\n        if not open_senders:\r\n            raise trio.EndOfChannel\r\n        raise trio.WouldBlock\r\n\r\n    @enable_ki_protection\r\n    async def receive(self):\r\n        await trio.hazmat.checkpoint_if_cancelled()\r\n        try:\r\n            value = self.receive_nowait()\r\n        except trio.WouldBlock:\r\n            pass\r\n        else:\r\n            await trio.hazmat.cancel_shielded_checkpoint()\r\n            return value\r\n\r\n        task = trio.hazmat.current_task()\r\n        self._tasks.add(task)\r\n        for state in self._states:\r\n            state.receive_tasks[task] = None\r\n        task.custom_sleep_data = self\r\n\r\n        def abort_fn(_):\r\n            self._tasks.remove(task)\r\n            for state in self._states:\r\n                del state.receive_tasks[task]\r\n            return trio.hazmat.Abort.SUCCEEDED\r\n\r\n        value = await trio.hazmat.wait_task_rescheduled(abort_fn)\r\n        for state in self._states:\r\n            del state.receive_tasks[task]\r\n        return value\r\n\r\n    @enable_ki_protection\r\n    def clone(self):\r\n        if self._closed:\r\n            raise trio.ClosedResourceError\r\n        return MemoryReceiveChannel._create(self._states)\r\n\r\n    @enable_ki_protection\r\n    async def aclose(self):\r\n        if self._closed:\r\n            await trio.hazmat.checkpoint()\r\n            return\r\n        self._closed = True\r\n        for task in self._tasks:\r\n            trio.hazmat.reschedule(task, Error(trio.ClosedResourceError()))\r\n            del self._state.receive_tasks[task]\r\n        self._tasks.clear()\r\n        for state in self._states:\r\n            state.open_receive_channels -= 1\r\n            if state.open_receive_channels == 0:\r\n                assert not state.receive_tasks\r\n                for task in state.send_tasks:\r\n                    task.custom_sleep_data._tasks.remove(task)\r\n                    trio.hazmat.reschedule(task, Error(trio.BrokenResourceError()))\r\n                state.send_tasks.clear()\r\n                state.data.clear()\r\n        await trio.hazmat.checkpoint()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1402", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1402/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1402/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1402/events", "html_url": "https://github.com/python-trio/trio/issues/1402", "id": 562999138, "node_id": "MDU6SXNzdWU1NjI5OTkxMzg=", "number": 1402, "title": "Travis fails on Linux Python development versions", "user": {"login": "pquentin", "id": 42327, "node_id": "MDQ6VXNlcjQyMzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/42327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pquentin", "html_url": "https://github.com/pquentin", "followers_url": "https://api.github.com/users/pquentin/followers", "following_url": "https://api.github.com/users/pquentin/following{/other_user}", "gists_url": "https://api.github.com/users/pquentin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pquentin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pquentin/subscriptions", "organizations_url": "https://api.github.com/users/pquentin/orgs", "repos_url": "https://api.github.com/users/pquentin/repos", "events_url": "https://api.github.com/users/pquentin/events{/privacy}", "received_events_url": "https://api.github.com/users/pquentin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-11T06:17:25Z", "updated_at": "2020-02-13T06:03:12Z", "closed_at": "2020-02-13T06:03:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See https://travis-ci.org/python-trio/trio/builds/648727502 for an example. The failure occurs before we can do anything about it, it's Travis who's running the failing `pip --version` call.\r\n\r\nI opened https://travis-ci.community/t/python-development-versions-no-longer-include-pip/7180 and wrote to Travis support. Our options:\r\n\r\n * wait for a fix from Travis\r\n * allow failures in those builds for a few days (they're \"only\" dev builds)\r\n * install Python development versions from git\r\n\r\nI'd like to wait for a fix to see if the nightly build is fixed. If it's not fixed, then I'd like to allow failures until next Monday. If it's still an issue next Monday, then we'll figure out what to do.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1395", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1395/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1395/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1395/events", "html_url": "https://github.com/python-trio/trio/issues/1395", "id": 562205546, "node_id": "MDU6SXNzdWU1NjIyMDU1NDY=", "number": 1395, "title": "Opening/Reading character device", "user": {"login": "joernheissler", "id": 865592, "node_id": "MDQ6VXNlcjg2NTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/865592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joernheissler", "html_url": "https://github.com/joernheissler", "followers_url": "https://api.github.com/users/joernheissler/followers", "following_url": "https://api.github.com/users/joernheissler/following{/other_user}", "gists_url": "https://api.github.com/users/joernheissler/gists{/gist_id}", "starred_url": "https://api.github.com/users/joernheissler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joernheissler/subscriptions", "organizations_url": "https://api.github.com/users/joernheissler/orgs", "repos_url": "https://api.github.com/users/joernheissler/repos", "events_url": "https://api.github.com/users/joernheissler/events{/privacy}", "received_events_url": "https://api.github.com/users/joernheissler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-09T16:51:23Z", "updated_at": "2020-05-12T09:20:48Z", "closed_at": "2020-05-12T09:20:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI tried reading `/dev/input/event0` with trio. This character device generates a byte stream of events.\r\nOnly function I could find is `trio.open_file`, but looks like its purpose is actual files.\r\nHow can I open a character device so I'll get some `trio.abc.ReceiveStream`?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1392", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1392/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1392/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1392/events", "html_url": "https://github.com/python-trio/trio/issues/1392", "id": 560650328, "node_id": "MDU6SXNzdWU1NjA2NTAzMjg=", "number": 1392, "title": "Potential memory leak on windows", "user": {"login": "gesslerpd", "id": 11217948, "node_id": "MDQ6VXNlcjExMjE3OTQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/11217948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gesslerpd", "html_url": "https://github.com/gesslerpd", "followers_url": "https://api.github.com/users/gesslerpd/followers", "following_url": "https://api.github.com/users/gesslerpd/following{/other_user}", "gists_url": "https://api.github.com/users/gesslerpd/gists{/gist_id}", "starred_url": "https://api.github.com/users/gesslerpd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gesslerpd/subscriptions", "organizations_url": "https://api.github.com/users/gesslerpd/orgs", "repos_url": "https://api.github.com/users/gesslerpd/repos", "events_url": "https://api.github.com/users/gesslerpd/events{/privacy}", "received_events_url": "https://api.github.com/users/gesslerpd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-02-05T21:51:03Z", "updated_at": "2020-02-10T05:58:11Z", "closed_at": "2020-02-07T02:25:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I was recently running some scripts overnight that failed due to a MemoryError, but was unable to find anything obvious that would be leaking memory in my scripts.\r\n\r\nDuring my investigation process, I have found that the following script increases memory usage by ~1 MB/s while running. If the `await trio.sleep(0)` is replaced by `pass` the process runs at a constant 9.7 MB of memory usage.\r\n\r\n```python\r\nimport trio\r\n\r\nasync def main():\r\n    while True:\r\n        await trio.sleep(0)\r\n\r\nif __name__ == '__main__':\r\n    trio.run(main)\r\n```\r\n\r\n## Version Info\r\n\r\nPython 3.8.1\r\nTrio 0.13.0\r\nWindows 10\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1389", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1389/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1389/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1389/events", "html_url": "https://github.com/python-trio/trio/issues/1389", "id": 559948393, "node_id": "MDU6SXNzdWU1NTk5NDgzOTM=", "number": 1389, "title": "Nursery/cancellation scopes do not allow for completion of `__aexit__` cleanup code with checkpoints", "user": {"login": "gesslerpd", "id": 11217948, "node_id": "MDQ6VXNlcjExMjE3OTQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/11217948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gesslerpd", "html_url": "https://github.com/gesslerpd", "followers_url": "https://api.github.com/users/gesslerpd/followers", "following_url": "https://api.github.com/users/gesslerpd/following{/other_user}", "gists_url": "https://api.github.com/users/gesslerpd/gists{/gist_id}", "starred_url": "https://api.github.com/users/gesslerpd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gesslerpd/subscriptions", "organizations_url": "https://api.github.com/users/gesslerpd/orgs", "repos_url": "https://api.github.com/users/gesslerpd/repos", "events_url": "https://api.github.com/users/gesslerpd/events{/privacy}", "received_events_url": "https://api.github.com/users/gesslerpd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-04T20:03:29Z", "updated_at": "2020-02-04T21:06:27Z", "closed_at": "2020-02-04T21:05:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I am going to try and explain this issue through 3 example scenarios that exist in the `main` function below.\r\n\r\nIn all scenarios, I would expect the `print('exited', i)` to be run to signify completion of some async cleanup code.\r\n\r\nThere are comments above each scenario detailing the results observed in each.\r\n\r\nI am starting to see a pattern with cancellation handling that is preventing the async cleanup code from running somehow. Note that `print('exiting', i)` was run in each failed scenario but code does not run after hitting the first trio checkpoint.\r\n\r\n```python\r\nfrom contextlib import asynccontextmanager\r\n\r\n@asynccontextmanager\r\nasync def test(i):\r\n    print('entering', i)\r\n    await trio.sleep(1)\r\n    print('entered', i)\r\n    try:\r\n        yield\r\n    finally:\r\n        print('exiting', i)\r\n        await trio.sleep(1)\r\n        print('exited', i)\r\n\r\nasync def task():\r\n    async with test(1):\r\n        print('yield')\r\n        await trio.sleep(10)\r\n\r\nasync def main():\r\n    # scenario 1\r\n    # this task exits cleanly, even with KeyboardInterrupt after \"yield\"\r\n    await task()\r\n    \r\n    # scenario 2\r\n    # these tasks do not exit cleanly, with cancellation or KeyboardInterrupt after \"yield\"\r\n    async with trio.open_nursery() as nursery:\r\n        nursery.start_soon(task)\r\n        nursery.start_soon(task)\r\n        await trio.sleep(5)\r\n        nursery.cancel_scope.cancel()\r\n    \r\n    # scenario 3\r\n    # this task does not exit cleanly, with cancellation scope\r\n    # this task exits cleanly, with KeyboardInterrupt after \"yield\"\r\n    with trio.move_on_after(5):\r\n        await task()\r\n\r\nif __name__ == '__main__':\r\n    trio.run(main)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1385", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1385/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1385/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1385/events", "html_url": "https://github.com/python-trio/trio/issues/1385", "id": 559259315, "node_id": "MDU6SXNzdWU1NTkyNTkzMTU=", "number": 1385, "title": "Comunicate a BLE from a graphical interface with qtdesigner", "user": {"login": "Vichooliva", "id": 60617258, "node_id": "MDQ6VXNlcjYwNjE3MjU4", "avatar_url": "https://avatars2.githubusercontent.com/u/60617258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vichooliva", "html_url": "https://github.com/Vichooliva", "followers_url": "https://api.github.com/users/Vichooliva/followers", "following_url": "https://api.github.com/users/Vichooliva/following{/other_user}", "gists_url": "https://api.github.com/users/Vichooliva/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vichooliva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vichooliva/subscriptions", "organizations_url": "https://api.github.com/users/Vichooliva/orgs", "repos_url": "https://api.github.com/users/Vichooliva/repos", "events_url": "https://api.github.com/users/Vichooliva/events{/privacy}", "received_events_url": "https://api.github.com/users/Vichooliva/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-03T18:36:19Z", "updated_at": "2020-02-04T05:30:34Z", "closed_at": "2020-02-04T05:30:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to make a graphical interface that send some instructions when i clicked a button.\r\n\r\nI tried to communicate different classes but the only way that the program lets me to do that is putting the async function inside the `__init__` function like this:\r\n\r\n```\r\nclass funciones_asincronas(QObject):\r\n    def __init__(self):\r\n        async def run(self):\r\n            print(\"iniciando busqueda\")\r\n            devices = await discover()   \r\n            i=0\r\n            direccion=[]\r\n            time.sleep(1)\r\n            print(\"Dispositivos encontrados:\")\r\n            for d in devices:\r\n                if d.name!=\"HMSoft\":\r\n                    i=i\r\n                    print(\"nada\")\r\n                else:\r\n                    await direccion.append(d.address)\r\n                    print(i,\")\",direccion)\r\n                    i+=1              \r\n        loop = asyncio.get_event_loop()\r\n        loop.run_until_complete(run(self))\r\n```\r\n\r\nThe way I call this class is this:\r\n\r\n```\r\n        self.btnReconectar.clicked.connect(funciones_asincronas)\r\n```\r\n\r\nAnd when i put \"pass\" in the `__init__` function, and make the async function outside the `__init_` it sent me the error that the \"run(self)\" from the loop stuff is not defined.\r\n\r\nCan you please help me?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1373", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1373/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1373/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1373/events", "html_url": "https://github.com/python-trio/trio/issues/1373", "id": 553840121, "node_id": "MDU6SXNzdWU1NTM4NDAxMjE=", "number": 1373, "title": "Should `Nursery.start_soon` return the `trio.hazmat.Task` object", "user": {"login": "pipermerriam", "id": 824194, "node_id": "MDQ6VXNlcjgyNDE5NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/824194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pipermerriam", "html_url": "https://github.com/pipermerriam", "followers_url": "https://api.github.com/users/pipermerriam/followers", "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}", "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions", "organizations_url": "https://api.github.com/users/pipermerriam/orgs", "repos_url": "https://api.github.com/users/pipermerriam/repos", "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}", "received_events_url": "https://api.github.com/users/pipermerriam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-22T22:49:07Z", "updated_at": "2020-01-24T03:07:57Z", "closed_at": "2020-01-23T15:57:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "In `asyncio` land a call to `asyncio.ensure_future(my_coro())` returns a `Task` object.  This object is the same object that would be returned if you called `asyncio.current_task()` from within `my_coro()`.\r\n\r\nIn `trio` land, `Nursery.start_soon(my_coro)` doesn't have a return value.  The only way to get the running task that I could figure out was from within the running task by calling `trio.hazmat.current_task()`.  This doesn't allow the *scheduler* to know about the task up-front.\r\n\r\nWas this an intentional design decision?  I dug through issues and didn't find anything.  Looking at the code it seems like a trivial thing to do by adding a single return statement here:\r\n\r\nhttps://github.com/python-trio/trio/blob/ff85406de34e66af06fc31029b3b156d4410bc0a/trio/_core/_run.py#L902", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1340", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1340/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1340/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1340/events", "html_url": "https://github.com/python-trio/trio/issues/1340", "id": 539454975, "node_id": "MDU6SXNzdWU1Mzk0NTQ5NzU=", "number": 1340, "title": "Efficient instrument implementation", "user": {"login": "jtrakk", "id": 43392409, "node_id": "MDQ6VXNlcjQzMzkyNDA5", "avatar_url": "https://avatars1.githubusercontent.com/u/43392409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrakk", "html_url": "https://github.com/jtrakk", "followers_url": "https://api.github.com/users/jtrakk/followers", "following_url": "https://api.github.com/users/jtrakk/following{/other_user}", "gists_url": "https://api.github.com/users/jtrakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrakk/subscriptions", "organizations_url": "https://api.github.com/users/jtrakk/orgs", "repos_url": "https://api.github.com/users/jtrakk/repos", "events_url": "https://api.github.com/users/jtrakk/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrakk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1347507855, "node_id": "MDU6TGFiZWwxMzQ3NTA3ODU1", "url": "https://api.github.com/repos/python-trio/trio/labels/performance", "name": "performance", "color": "1c37a5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-18T05:08:47Z", "updated_at": "2020-08-02T05:06:53Z", "closed_at": "2020-08-02T05:06:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[From this comment](https://trio.discourse.group/t/eliot-the-causal-logging-library-now-supports-trio/167/14): \r\n> It\u2019s true that the current implementation still adds unnecessary overhead for operations you haven\u2019t hooked, but that\u2019s just because we\u2019re lazy and were waiting for someone to complain.\r\n\r\nI'm not sure what's involved here but I wouldn't want a potentially significant improvement to get lost in a comment. :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1329", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1329/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1329/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1329/events", "html_url": "https://github.com/python-trio/trio/issues/1329", "id": 531828691, "node_id": "MDU6SXNzdWU1MzE4Mjg2OTE=", "number": 1329, "title": "Accessing unavailable attributes gives a confusing error", "user": {"login": "pquentin", "id": 42327, "node_id": "MDQ6VXNlcjQyMzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/42327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pquentin", "html_url": "https://github.com/pquentin", "followers_url": "https://api.github.com/users/pquentin/followers", "following_url": "https://api.github.com/users/pquentin/following{/other_user}", "gists_url": "https://api.github.com/users/pquentin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pquentin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pquentin/subscriptions", "organizations_url": "https://api.github.com/users/pquentin/orgs", "repos_url": "https://api.github.com/users/pquentin/repos", "events_url": "https://api.github.com/users/pquentin/events{/privacy}", "received_events_url": "https://api.github.com/users/pquentin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-03T09:02:24Z", "updated_at": "2019-12-04T19:29:53Z", "closed_at": "2019-12-04T19:29:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "When I access a variable that does not exist in Trio, I get this error message:\r\n\r\n```\r\n>>> import trio\r\n>>> trio.stuff\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/quentin/.virtualenvs/connectors-watcher/lib/python3.6/site-packages/trio/_deprecate.py\", line 125, in __getattr__\r\n    raise AttributeError(name)\r\nAttributeError: stuff\r\n```\r\n\r\nAnd Sentry displays it like this:\r\n\r\n![Capture d\u2019e\u0301cran 2019-12-03 a\u0300 08 59 17](https://user-images.githubusercontent.com/42327/70035673-3f12a980-15ab-11ea-8190-cb7e9073ec5d.png)\r\n\r\nWhy is it confusing, you might say? The error is raised from `_deprecate.py` and I thought it was only a deprecation warning, but in fact it did not work at all.\r\n\r\nI would have expected the standard behavior:\r\n\r\n```\r\n>>> import asyncio\r\n>>> asyncio.stuff\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: module 'asyncio' has no attribute 'stuff'\r\n>>>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1324", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1324/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1324/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1324/events", "html_url": "https://github.com/python-trio/trio/issues/1324", "id": 530612702, "node_id": "MDU6SXNzdWU1MzA2MTI3MDI=", "number": 1324, "title": "TrioInternalError in quickstart echo_server_handler test", "user": {"login": "Andrei-Pozolotin", "id": 1622151, "node_id": "MDQ6VXNlcjE2MjIxNTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1622151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andrei-Pozolotin", "html_url": "https://github.com/Andrei-Pozolotin", "followers_url": "https://api.github.com/users/Andrei-Pozolotin/followers", "following_url": "https://api.github.com/users/Andrei-Pozolotin/following{/other_user}", "gists_url": "https://api.github.com/users/Andrei-Pozolotin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andrei-Pozolotin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andrei-Pozolotin/subscriptions", "organizations_url": "https://api.github.com/users/Andrei-Pozolotin/orgs", "repos_url": "https://api.github.com/users/Andrei-Pozolotin/repos", "events_url": "https://api.github.com/users/Andrei-Pozolotin/events{/privacy}", "received_events_url": "https://api.github.com/users/Andrei-Pozolotin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-30T18:11:13Z", "updated_at": "2020-05-12T09:08:44Z", "closed_at": "2020-05-12T09:08:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "see: https://github.com/python-trio/pytest-trio/issues/88", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1315", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1315/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1315/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1315/events", "html_url": "https://github.com/python-trio/trio/issues/1315", "id": 526932917, "node_id": "MDU6SXNzdWU1MjY5MzI5MTc=", "number": 1315, "title": "Process.__repr__ displays stale information", "user": {"login": "dhirschfeld", "id": 881019, "node_id": "MDQ6VXNlcjg4MTAxOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/881019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhirschfeld", "html_url": "https://github.com/dhirschfeld", "followers_url": "https://api.github.com/users/dhirschfeld/followers", "following_url": "https://api.github.com/users/dhirschfeld/following{/other_user}", "gists_url": "https://api.github.com/users/dhirschfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhirschfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhirschfeld/subscriptions", "organizations_url": "https://api.github.com/users/dhirschfeld/orgs", "repos_url": "https://api.github.com/users/dhirschfeld/repos", "events_url": "https://api.github.com/users/dhirschfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/dhirschfeld/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1621470001, "node_id": "MDU6TGFiZWwxNjIxNDcwMDAx", "url": "https://api.github.com/repos/python-trio/trio/labels/subprocesses", "name": "subprocesses", "color": "8464c4", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-22T01:26:08Z", "updated_at": "2020-05-12T20:50:08Z", "closed_at": "2020-05-12T20:50:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As discussed on [gitter](https://gitter.im/python-trio/general?at=5dd737eac4fca14de3c8cf68) `Process.__repr__` doesn't show the latest information:\r\n```python\r\nIn [28]: process = await trio.open_process(['git', 'status'], stdout=subprocess.DEVNULL)\r\n\r\nIn [29]: process\r\nOut[29]: <trio.Process ['git', 'status']: running with PID 9888>\r\n\r\nIn [30]: !powershell -Command { 'ps -Id 9888' }\r\nps : Cannot find a process with the process identifier 9888.\r\nAt line:1 char:1\r\n+ ps -Id 9888\r\n+ ~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (9888:Int32) [Get-Process], ProcessCommandException\r\n    + FullyQualifiedErrorId : NoProcessFoundForGivenId,Microsoft.PowerShell.Commands.GetProcessCommand\r\n\r\n\r\nIn [31]: process\r\nOut[31]: <trio.Process ['git', 'status']: running with PID 9888>\r\n\r\nIn [32]: await process.wait()\r\nOut[32]: 0\r\n\r\nIn [33]: process\r\nOut[33]: <trio.Process ['git', 'status']: exited with status 0>\r\n```\r\n\r\nJust opening this issue in case the situation can be improved by e.g. calling `poll` internally:\r\n>*maybe `__repr__` should automatically call `.poll()` to give up to date info?*\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1309", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1309/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1309/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1309/events", "html_url": "https://github.com/python-trio/trio/issues/1309", "id": 523931964, "node_id": "MDU6SXNzdWU1MjM5MzE5NjQ=", "number": 1309, "title": "Is Trio implemented in pure Python?", "user": {"login": "leafonsword", "id": 1754580, "node_id": "MDQ6VXNlcjE3NTQ1ODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1754580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leafonsword", "html_url": "https://github.com/leafonsword", "followers_url": "https://api.github.com/users/leafonsword/followers", "following_url": "https://api.github.com/users/leafonsword/following{/other_user}", "gists_url": "https://api.github.com/users/leafonsword/gists{/gist_id}", "starred_url": "https://api.github.com/users/leafonsword/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leafonsword/subscriptions", "organizations_url": "https://api.github.com/users/leafonsword/orgs", "repos_url": "https://api.github.com/users/leafonsword/repos", "events_url": "https://api.github.com/users/leafonsword/events{/privacy}", "received_events_url": "https://api.github.com/users/leafonsword/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-17T04:03:49Z", "updated_at": "2019-11-17T04:10:27Z", "closed_at": "2019-11-17T04:10:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Curio is  implemented in pure Python, Asyncio 's some part is  implemented in C, and  is Trio implemented in pure Python?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1308", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1308/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1308/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1308/events", "html_url": "https://github.com/python-trio/trio/issues/1308", "id": 523539029, "node_id": "MDU6SXNzdWU1MjM1MzkwMjk=", "number": 1308, "title": "Path.iterdir/glob/rglob methods do not delegate file system calls to a thread", "user": {"login": "vxgmichel", "id": 7490006, "node_id": "MDQ6VXNlcjc0OTAwMDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7490006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vxgmichel", "html_url": "https://github.com/vxgmichel", "followers_url": "https://api.github.com/users/vxgmichel/followers", "following_url": "https://api.github.com/users/vxgmichel/following{/other_user}", "gists_url": "https://api.github.com/users/vxgmichel/gists{/gist_id}", "starred_url": "https://api.github.com/users/vxgmichel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vxgmichel/subscriptions", "organizations_url": "https://api.github.com/users/vxgmichel/orgs", "repos_url": "https://api.github.com/users/vxgmichel/repos", "events_url": "https://api.github.com/users/vxgmichel/events{/privacy}", "received_events_url": "https://api.github.com/users/vxgmichel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-11-15T15:36:23Z", "updated_at": "2019-12-21T12:37:20Z", "closed_at": "2019-12-20T10:27:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Notice how the actual iteration is not performed in the executor thread:\r\n\r\nhttps://github.com/python-trio/trio/blob/20da9affebaa751ce76dcbe45fa871f0871ac02c/trio/_path.py#L56-L62\r\n\r\nHere's a possible fix:\r\n\r\n```python\r\n def iter_wrapper_factory(cls, meth_name): \r\n     @async_wraps(cls, cls._wraps, meth_name) \r\n     async def wrapper(self, *args, **kwargs): \r\n         meth = getattr(self._wrapped, meth_name) \r\n         func = partial(meth, *args, **kwargs) \r\n         items = await trio.to_thread.run_sync(lambda: list(func())) \r\n         return (rewrap_path(item) for item in items) \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1305", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1305/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1305/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1305/events", "html_url": "https://github.com/python-trio/trio/issues/1305", "id": 523238678, "node_id": "MDU6SXNzdWU1MjMyMzg2Nzg=", "number": 1305, "title": "AssertionError when I exit() semi-inside a nursery", "user": {"login": "jtrakk", "id": 43392409, "node_id": "MDQ6VXNlcjQzMzkyNDA5", "avatar_url": "https://avatars1.githubusercontent.com/u/43392409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrakk", "html_url": "https://github.com/jtrakk", "followers_url": "https://api.github.com/users/jtrakk/followers", "following_url": "https://api.github.com/users/jtrakk/following{/other_user}", "gists_url": "https://api.github.com/users/jtrakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrakk/subscriptions", "organizations_url": "https://api.github.com/users/jtrakk/orgs", "repos_url": "https://api.github.com/users/jtrakk/repos", "events_url": "https://api.github.com/users/jtrakk/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrakk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-15T03:55:29Z", "updated_at": "2020-05-12T09:02:27Z", "closed_at": "2020-05-12T09:02:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Like some of [these](https://github.com/python-trio/trio/issues/1056) maybe I'm supposed to get a `TrioRuleViolatedException`? `AssertionError` doesn't seem right. (An especially interesting perspective on assert [comes from sqlite](https://www.sqlite.org/assert.html)).\r\n\r\n```py\r\nimport sys\r\n\r\n\r\nimport trio\r\n\r\nasync def f():\r\n    print('hello')\r\n\r\n@trio.run\r\nasync def main():\r\n    async with trio.open_nursery():\r\n        ctx = trio.open_nursery()\r\n        n = await ctx.__aenter__()\r\n        n.start_soon(f)\r\n        sys.exit()\r\n\r\n```\r\n```\r\ntrio/_core/_run.py\", line 607, in _nested_child_finished\r\n    assert popped is self\r\nAssertionError\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1293", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1293/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1293/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1293/events", "html_url": "https://github.com/python-trio/trio/issues/1293", "id": 518241810, "node_id": "MDU6SXNzdWU1MTgyNDE4MTA=", "number": 1293, "title": "Intermittent ConnectionResetError in SSL tests on Windows, probably due to openssl 1.1.1 bug", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-06T05:09:35Z", "updated_at": "2019-11-09T03:37:22Z", "closed_at": "2019-11-09T03:37:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Signature:\r\n\r\n```\r\n..\\pyinstall\\python\\tools\\lib\\site-packages\\trio\\tests\\test_ssl.py:94: in ssl_echo_serve_sync\r\n    data = wrapped.recv(4096)\r\n..\\pyinstall\\python\\tools\\lib\\ssl.py:1056: in recv\r\n    return self.read(buflen)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <ssl.SSLSocket fd=1244, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 2560), raddr=('127.0.0.1', 2559)>\r\nlen = 4096, buffer = None\r\n\r\n    def read(self, len=1024, buffer=None):\r\n        \"\"\"Read up to LEN bytes and return them.\r\n        Return zero-length string on EOF.\"\"\"\r\n    \r\n        self._checkClosed()\r\n        if self._sslobj is None:\r\n            raise ValueError(\"Read on closed or unwrapped SSL socket.\")\r\n        try:\r\n            if buffer is not None:\r\n                return self._sslobj.read(len, buffer)\r\n            else:\r\n>               return self._sslobj.read(len)\r\nE               ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\r\n\r\n..\\pyinstall\\python\\tools\\lib\\ssl.py:931: ConnectionResetError\r\n```\r\n\r\nExample: https://dev.azure.com/python-trio/trio/_build/results?buildId=1210&view=logs\r\n\r\nI seem to get this pretty often when testing locally, and now it's showing up on Azure as well...\r\n\r\nI think this must be yet another manifestation of the [famous](https://github.com/python-trio/trio/issues/819) openssl bug (https://github.com/openssl/openssl/issues/7948, https://github.com/openssl/openssl/issues/7948). We've worked around it in Trio itself (#1171), but in this test we're using the stdlib `ssl` module directly in blocking mode in a background thread, as a \"known good\" reference implementation. Of course, it's not so good \u2013 it sends session tickets unconditionally after the handshake. In some of our tests, the client closes the connection after the handshake, before reading the tickets. If you close a socket while there's pending data in the receive buffer, then sometimes that triggers a RST packet to the peer. And then the peer might complain that the connection was reset, like it does here.\r\n\r\nThis would explain why we only started seeing it recently \u2013 this is new behavior in openssl v1.1.1, and that's still percolating out through various distribution channels.\r\n\r\nI'm not sure if the reason we've only seen this on Windows so far is because it's a Windows-only quirk, or because only Windows uses TCP sockets here \u2013 we're using `socketpair`, and on Unix that generally returns Unix-domain sockets, which don't have RST packets. But Windows doesn't have those, so the stdlib emulates `socketpair` using a loopback TCP socket.\r\n\r\nAnyway, I guess we should ... just ignore `ConnectionResetError` here, probably?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1291", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1291/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1291/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1291/events", "html_url": "https://github.com/python-trio/trio/issues/1291", "id": 517409056, "node_id": "MDU6SXNzdWU1MTc0MDkwNTY=", "number": 1291, "title": "How-to guides", "user": {"login": "jtrakk", "id": 43392409, "node_id": "MDQ6VXNlcjQzMzkyNDA5", "avatar_url": "https://avatars1.githubusercontent.com/u/43392409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrakk", "html_url": "https://github.com/jtrakk", "followers_url": "https://api.github.com/users/jtrakk/followers", "following_url": "https://api.github.com/users/jtrakk/following{/other_user}", "gists_url": "https://api.github.com/users/jtrakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrakk/subscriptions", "organizations_url": "https://api.github.com/users/jtrakk/orgs", "repos_url": "https://api.github.com/users/jtrakk/repos", "events_url": "https://api.github.com/users/jtrakk/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrakk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-04T21:18:51Z", "updated_at": "2019-11-05T09:17:21Z", "closed_at": "2019-11-04T22:33:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[\"What nobody tells you about documentation\"](https://www.divio.com/blog/documentation/) distinguishes four types of documentation:\r\n\r\n- tutorials,\r\n- how-to guides,\r\n- explanation,\r\n- reference.\r\n\r\nOf these, Trio docs are weakest on the \"how-to guides\" section. Currently there are a lot of hidden gems in chat, gists, and issues. That may be because Trio's evolving too quickly to have a stable set of how-tos. But as the API settles it would be nice to have vetted answers to common \"how do I ___?\" situations. \r\n\r\nEven before 1.0 it would be nice to display the current status of each how-to so I don't have to keep track of the mental bookmarks I've saved for each task, and ask on chat to makes sure the 2-year-old gist is still the preferred way.\r\n\r\nAlso nice: having recommendations tested in CI so they don't fall out of date. \r\n\r\nThat includes how-tos which may involve third-party libraries, like triopg or asyncssh. \r\n\r\nSome examples include: \"How do I\"...\r\n\r\n- [make line streams](https://github.com/python-trio/trio/issues/796#issuecomment-471428274)\r\n- [crawl the web](https://gist.github.com/njsmith/432663a79266ece1ec9461df0062098d)\r\n- [schedule jobs](https://gist.github.com/njsmith/432663a79266ece1ec9461df0062098d)\r\n- make a Trionic process-pool executor\r\n- interact with a repl, pexpect-style\r\n- and many more...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1287", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1287/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1287/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1287/events", "html_url": "https://github.com/python-trio/trio/issues/1287", "id": 516795707, "node_id": "MDU6SXNzdWU1MTY3OTU3MDc=", "number": 1287, "title": "remove_instrument() should tolerate unregistered instrument?", "user": {"login": "belm0", "id": 1708631, "node_id": "MDQ6VXNlcjE3MDg2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1708631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belm0", "html_url": "https://github.com/belm0", "followers_url": "https://api.github.com/users/belm0/followers", "following_url": "https://api.github.com/users/belm0/following{/other_user}", "gists_url": "https://api.github.com/users/belm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/belm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belm0/subscriptions", "organizations_url": "https://api.github.com/users/belm0/orgs", "repos_url": "https://api.github.com/users/belm0/repos", "events_url": "https://api.github.com/users/belm0/events{/privacy}", "received_events_url": "https://api.github.com/users/belm0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-03T09:16:32Z", "updated_at": "2019-11-05T11:22:37Z", "closed_at": "2019-11-05T11:22:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Since registered instruments can be automatically removed on exception (presumably because an instrument error should not stop the program), it follows that `remove_instrument()` should probably tolerate the given instrument having already been removed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1286", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1286/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1286/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1286/events", "html_url": "https://github.com/python-trio/trio/issues/1286", "id": 516794780, "node_id": "MDU6SXNzdWU1MTY3OTQ3ODA=", "number": 1286, "title": "task calls reschedule on itself at nursery exit", "user": {"login": "belm0", "id": 1708631, "node_id": "MDQ6VXNlcjE3MDg2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1708631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belm0", "html_url": "https://github.com/belm0", "followers_url": "https://api.github.com/users/belm0/followers", "following_url": "https://api.github.com/users/belm0/following{/other_user}", "gists_url": "https://api.github.com/users/belm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/belm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belm0/subscriptions", "organizations_url": "https://api.github.com/users/belm0/orgs", "repos_url": "https://api.github.com/users/belm0/repos", "events_url": "https://api.github.com/users/belm0/events{/privacy}", "received_events_url": "https://api.github.com/users/belm0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-11-03T09:04:07Z", "updated_at": "2019-11-05T00:01:05Z", "closed_at": "2019-11-05T00:01:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Trio version 0.12.1\r\n\r\n```python3\r\nasync def test_nursery_exit():\r\n    class MyInstrument(trio.abc.Instrument):\r\n        def __init__(self):\r\n            self.rescheduled_from_self = False\r\n\r\n        def task_scheduled(self, task):\r\n            rescheduled_from = None\r\n            try:\r\n                rescheduled_from = trio.hazmat.current_task()\r\n            except RuntimeError as e:\r\n                assert str(e) == 'must be called from async context'\r\n            print(f'task_scheduled {task.name} '\r\n                  f'(rescheduled_from={rescheduled_from.name if rescheduled_from else None})')\r\n            if rescheduled_from == task:\r\n                traceback.print_stack()\r\n                self.rescheduled_from_self = True\r\n\r\n    instrument = MyInstrument()\r\n    try:\r\n        trio.hazmat.add_instrument(instrument)\r\n        async with trio.open_nursery():\r\n            pass\r\n        assert not instrument.rescheduled_from_self\r\n    finally:\r\n        trio.hazmat.remove_instrument(instrument)\r\n```\r\n```\r\n>           assert not instrument.rescheduled_from_self\r\nE           assert not True\r\nE            +  where True = <test_instrument.test_nursery_exit.<locals>.MyInstrument object at 0x101f9f438>.rescheduled_from_self\r\n\r\ntest_instrument.py:59: AssertionError\r\n------------------------------- Captured stdout call -------------------------------\r\ntask_scheduled <test 'test_nursery_exit'> (rescheduled_from=<test 'test_nursery_exit'>)\r\n------------------------------- Captured stderr call -------------------------------\r\n...\r\n  File \"/.../python3.7/site-packages/trio/_core/_run.py\", line 1769, in run\r\n    run_impl(runner, async_fn, args)\r\n  File \"/.../python3.7/site-packages/trio/_core/_run.py\", line 1930, in run_impl\r\n    task._attempt_delivery_of_any_pending_cancel()\r\n  File \"/.../python3.7/site-packages/trio/_core/_run.py\", line 1063, in _attempt_delivery_of_any_pending_cancel\r\n    self._attempt_abort(raise_cancel)\r\n  File \"/.../python3.7/site-packages/trio/_core/_run.py\", line 1052, in _attempt_abort\r\n    self._runner.reschedule(self, capture(raise_cancel))\r\n  File \"/.../python3.7/site-packages/trio/_core/_run.py\", line 1224, in reschedule\r\n    self.instrument(\"task_scheduled\", task)\r\n  File \"/.../python3.7/site-packages/trio/_core/_run.py\", line 1609, in instrument\r\n    method(*args)\r\n  File \"test_instrument.py\", line 51, in task_scheduled\r\n    traceback.print_stack()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1283", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1283/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1283/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1283/events", "html_url": "https://github.com/python-trio/trio/issues/1283", "id": 516332587, "node_id": "MDU6SXNzdWU1MTYzMzI1ODc=", "number": 1283, "title": "Unhelpful error message when calling an uncallable object in an async context", "user": {"login": "Badg", "id": 6155386, "node_id": "MDQ6VXNlcjYxNTUzODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/6155386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badg", "html_url": "https://github.com/Badg", "followers_url": "https://api.github.com/users/Badg/followers", "following_url": "https://api.github.com/users/Badg/following{/other_user}", "gists_url": "https://api.github.com/users/Badg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badg/subscriptions", "organizations_url": "https://api.github.com/users/Badg/orgs", "repos_url": "https://api.github.com/users/Badg/repos", "events_url": "https://api.github.com/users/Badg/events{/privacy}", "received_events_url": "https://api.github.com/users/Badg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-01T20:33:32Z", "updated_at": "2019-11-02T20:48:13Z", "closed_at": "2019-11-02T19:36:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've seen #65, but I'm not sure if this is the same. Happy to close if so!\r\n\r\nSo tl;dr here is that I made a silly mistake, and inside trio my silly mistake got converted into a TrioInternalError that swallowed the original problem. Might there be an opportunity for a ``raise TrioInternalError() from exc`` or something? It would be a great quality of life improvement for... what is admittedly a pretty unusual edge case!\r\n\r\n----\r\n\r\nA story: while doing a refactor recently, I found myself in a rather confused headspace, and managed to forget the spelling of ``__aenter__``, foolishly thinking that I could do something like this:\r\n\r\n```python\r\nclass Foo:\r\n    async def __aenter__(self, some_var):\r\n        ...\r\n\r\n...\r\n\r\nasync with foo(bar):\r\n   ...\r\n```\r\n\r\nWhich is, of course, wrong (in case somebody stumbles on this from google or something, you would need to do a __call__ method to make that work, but that's probably the wrong approach; you're better off doing something with ``contextlib.asynccontextmanager`` or similar).\r\n\r\nIt's... perhaps a bit of a silly mistake, but we all make those! When I was done enough with the refactor to start testing it, I just saw a rather unceremonious:\r\n\r\n```\r\npipenv run python -m some_module\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/usr/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"...\", line 114, in <module>\r\n    trio_asyncio.run(main)\r\n  File \".../lib/python3.7/site-packages/trio_asyncio/loop.py\", line 393, in run\r\n    trio.run(_run_task, proc, args)\r\n  File \".../lib/python3.7/site-packages/trio/_core/_run.py\", line 1769, in run\r\n    run_impl(runner, async_fn, args)\r\n  File \".../lib/python3.7/site-packages/trio/_core/_run.py\", line 1918, in run_impl\r\n    runner.task_exited(task, final_outcome)\r\n  File \".../lib/python3.7/site-packages/trio/_core/_run.py\", line 1404, in task_exited\r\n    raise TrioInternalError\r\ntrio.TrioInternalError\r\n```\r\n\r\nPerplexed, I set out doing some machete mode debugging (ie, adding print statements in places I thought could be troublesome), until I finally stumbled back onto my context-managers-that-really-weren't. So I fixed those, whereupon I found... I still got the same error. So then, perplexed again, I looked at the code a second time and realized I'd forgotten to update the calling code:\r\n\r\n```python\r\n# Inside *some other* context manager (I know, it's messy)\r\nasync def __aenter__(self):\r\n    await stack.enter_async_context(foo(bar))\r\n```\r\n\r\nAnd **that** got me back up and running! But it would have been really nice if Trio could have surfaced the original problem -- which was really that I was trying to call something that wasn't callable, inside an __aenter__, in a stack... -- so that I could have fixed it as easily as the silly mistake that it was!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1272", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1272/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1272/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1272/events", "html_url": "https://github.com/python-trio/trio/issues/1272", "id": 513032308, "node_id": "MDU6SXNzdWU1MTMwMzIzMDg=", "number": 1272, "title": "Be more robust against file descriptors/handles disappearing under our feet", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-27T22:34:52Z", "updated_at": "2019-11-21T04:30:04Z", "closed_at": "2019-11-21T04:30:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In [this discussion](https://github.com/python-trio/trio/pull/1269#discussion_r339242694) we discovered that the epoll and Windows backends can get into quite a mess if a file descriptor/socket handle gets closed under our feet without telling us \u2013 deadlocks, loop crashes, etc. Technically this isn't our problem, because the user should have called `notify_closing`. But the experience would be better if we can provide some better error messages and survive, instead of locking.\r\n\r\nHere's an example of one of the nasty cases:\r\n\r\n```python\r\na, b = stdlib_socket.socketpair()\r\nwith a, b, a.dup() as a2:\r\n    a.setblocking(False)\r\n    b.setblocking(False)\r\n    fill_socket(a)\r\n    async with trio.open_nursery() as nursery:\r\n        nursery.start_soon(trio.hazmat.wait_readable, a)\r\n        nursery.start_soon(trio.hazmat.wait_writable, a)\r\n        await wait_all_tasks_blocked()\r\n        a.close()\r\n        nursery.cancel_scope.cancel()\r\n```\r\n\r\nSince we dup'ed `a`, the underlying kernel object survives the call to `a.close()`. So the `wait_readable`/`wait_writable` tasks keep going, and if we manipulated `b` we could even make them wake up as normal. But instead we cancel. Whichever task is cancelled first attempts to modify the underlying primitive to only wait for the other task, but the fd it uses to do this has disappeared under its feet, and things go bad quickly.\r\n\r\nThis case is particularly nasty on the epoll backend, because there it's actually impossible to deregister our interest in `a`: we're going to keep getting events for `a` whether we want them or not. The only way to survive is to close our epoll descriptor and rebuild it. This is possible, but I'm not sure whether it's actually better than crashing... The thing is that we can't really detect these situations reliably. It's possible in this particular test case, but in a more complex program the file descriptor might get reassigned between the call to `close` and the call to `cancel`, in which case the user will silently start notifications sent to the wrong task. So even if we can do some kind of best-effort recovery, we still need to somehow tell users to fix their code, not just pretend that everything is fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1259", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1259/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1259/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1259/events", "html_url": "https://github.com/python-trio/trio/issues/1259", "id": 508639552, "node_id": "MDU6SXNzdWU1MDg2Mzk1NTI=", "number": 1259, "title": "Path should get the `__hash__` from `pathlib.PurePath`", "user": {"login": "georgeaf99", "id": 5133801, "node_id": "MDQ6VXNlcjUxMzM4MDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/5133801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/georgeaf99", "html_url": "https://github.com/georgeaf99", "followers_url": "https://api.github.com/users/georgeaf99/followers", "following_url": "https://api.github.com/users/georgeaf99/following{/other_user}", "gists_url": "https://api.github.com/users/georgeaf99/gists{/gist_id}", "starred_url": "https://api.github.com/users/georgeaf99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/georgeaf99/subscriptions", "organizations_url": "https://api.github.com/users/georgeaf99/orgs", "repos_url": "https://api.github.com/users/georgeaf99/repos", "events_url": "https://api.github.com/users/georgeaf99/events{/privacy}", "received_events_url": "https://api.github.com/users/georgeaf99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-17T18:13:02Z", "updated_at": "2019-10-17T20:32:32Z", "closed_at": "2019-10-17T20:32:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "`trio.Path`s don't exhibit the same hashing behavior as `pathlib.PurePath`\r\n\r\nRepro (`python3.6.5` and `trio (0.11.0)`):\r\n```\r\n>>> from trio import Path\r\n>>> hash(Path(\"foo\"))\r\n8743626168503\r\n>>> hash(Path(\"foo\"))\r\n8743626168510\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1247", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1247/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1247/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1247/events", "html_url": "https://github.com/python-trio/trio/issues/1247", "id": 506304085, "node_id": "MDU6SXNzdWU1MDYzMDQwODU=", "number": 1247, "title": "Possibly add a reentrant lock", "user": {"login": "efficiosoft", "id": 15107268, "node_id": "MDQ6VXNlcjE1MTA3MjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/15107268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/efficiosoft", "html_url": "https://github.com/efficiosoft", "followers_url": "https://api.github.com/users/efficiosoft/followers", "following_url": "https://api.github.com/users/efficiosoft/following{/other_user}", "gists_url": "https://api.github.com/users/efficiosoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/efficiosoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/efficiosoft/subscriptions", "organizations_url": "https://api.github.com/users/efficiosoft/orgs", "repos_url": "https://api.github.com/users/efficiosoft/repos", "events_url": "https://api.github.com/users/efficiosoft/events{/privacy}", "received_events_url": "https://api.github.com/users/efficiosoft/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-10-13T10:28:28Z", "updated_at": "2020-05-12T08:17:47Z", "closed_at": "2020-05-12T08:17:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi trio team,\r\n\r\nFirst, thanks for this great and well-designed library!\r\n\r\nI don't know whether this has already been discussed, but at least googling didn't led me to an existing issue or something.\r\n\r\nIt sometimes comes handy to have reentrant locks like they're offered by `threading`. I know that everything that can be achieved with reentrant locks can also be done without them, but it can make code paths easier and stop people from adding separate `_nolock` methods all over the place.\r\n\r\nI currently use something like this:\r\n\r\n```\r\n@attr.s(cmp=False, hash=False, repr=False)\r\nclass RLock(trio.Lock):\r\n    \"\"\"\r\n    A reentrant Lock. It can be acquired multiple times by the same task. Other than\r\n    that, its API and semantics are identical to those of :class:`trio.Lock`.\r\n    \"\"\"\r\n\r\n    _rcount = attr.ib(default=0, init=False)\r\n\r\n    def acquire_nowait(self):\r\n        if trio.hazmat.current_task() is self._owner:\r\n            self._rcount += 1\r\n            return\r\n        super().acquire_nowait()\r\n\r\n    def release(self):\r\n        if trio.hazmat.current_task() is self._owner:\r\n            if self._rcount:\r\n                self._rcount -= 1\r\n                return\r\n        super().release()\r\n```\r\n\r\nIt works great so far and cancellation semantics should be correct as well, but I'm not entirely sure. Would you like a PR with this?\r\n\r\nAnother approach would be to add a keyword-only `reentrant=False` parameter to the existing `trio.Lock`, the two checks could then be added to the existing `acquire_nowait` and `release` methods with the (tiny) overhead of `if self._rcount` in `release()`.\r\n\r\nWhat do you think, is this something we want in trio?\r\n\r\nBest regards\r\nRobert\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1244", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1244/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1244/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1244/events", "html_url": "https://github.com/python-trio/trio/issues/1244", "id": 504959429, "node_id": "MDU6SXNzdWU1MDQ5NTk0Mjk=", "number": 1244, "title": "In trio.to_thread.run, give a better error message if passed a sync function", "user": {"login": "kantrol", "id": 759303, "node_id": "MDQ6VXNlcjc1OTMwMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/759303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kantrol", "html_url": "https://github.com/kantrol", "followers_url": "https://api.github.com/users/kantrol/followers", "following_url": "https://api.github.com/users/kantrol/following{/other_user}", "gists_url": "https://api.github.com/users/kantrol/gists{/gist_id}", "starred_url": "https://api.github.com/users/kantrol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kantrol/subscriptions", "organizations_url": "https://api.github.com/users/kantrol/orgs", "repos_url": "https://api.github.com/users/kantrol/repos", "events_url": "https://api.github.com/users/kantrol/events{/privacy}", "received_events_url": "https://api.github.com/users/kantrol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}, {"id": 537057261, "node_id": "MDU6TGFiZWw1MzcwNTcyNjE=", "url": "https://api.github.com/repos/python-trio/trio/labels/user%20happiness", "name": "user happiness", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-10T00:14:37Z", "updated_at": "2020-05-21T05:23:48Z", "closed_at": "2020-05-21T05:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I needed to decouple sender and receiver and initialized the channel with ```max_buffer_size>0```. Lost elements are accepted when buffer is full, but ```sendchannel.send_nowait``` throws \r\n\r\n```\r\nTypeError: object NoneType can't be used in 'await' expression\r\n```\r\nI had expected that the channel could be filled up to max_buffer_size. \r\nFor demonstration I made minor changes to the threaded channel example: \r\n\r\n\r\n``` python\r\nimport trio\r\n\r\ndef thread_fn(receive_from_trio, send_to_trio):\r\n    while True:\r\n        # Since we're in a thread, we can't call methods on Trio\r\n        # objects directly -- so we use trio.from_thread to call them.\r\n        try:\r\n            request = trio.from_thread.run(receive_from_trio.receive)\r\n            response = request + 1\r\n            trio.from_thread.run(send_to_trio.send_nowait, response)\r\n        except trio.WouldBlock:\r\n            print('would block')\r\n        except trio.EndOfChannel:\r\n            trio.from_thread.run(send_to_trio.aclose)\r\n            return\r\n\r\nasync def main():\r\n    send_to_thread, receive_from_trio = trio.open_memory_channel(1)\r\n    send_to_trio, receive_from_thread = trio.open_memory_channel(1)\r\n\r\n    async with trio.open_nursery() as nursery:\r\n        # In a background thread, run:\r\n        #   thread_fn(portal, receive_from_trio, send_to_trio)\r\n        nursery.start_soon(\r\n            trio.to_thread.run_sync, thread_fn, receive_from_trio, send_to_trio\r\n        )\r\n\r\n        # prints \"1\"\r\n        await send_to_thread.send(0)\r\n        \r\n        # simulate a slow starting receiver\r\n        await trio.sleep(2)\r\n        print(await receive_from_thread.receive())       \r\n\r\n        # prints \"2\"\r\n        await send_to_thread.send(1)\r\n        print(await receive_from_thread.receive())\r\n\r\n        # When we close the channel, it signals the thread to exit.\r\n        await send_to_thread.aclose()\r\n\r\n        # When we exit the nursery, it waits for the background thread to\r\n        # exit.\r\n\r\n\r\ntrio.run(main)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1241", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1241/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1241/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1241/events", "html_url": "https://github.com/python-trio/trio/issues/1241", "id": 503812347, "node_id": "MDU6SXNzdWU1MDM4MTIzNDc=", "number": 1241, "title": "use pidfd on Linux when available", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1347507399, "node_id": "MDU6TGFiZWwxMzQ3NTA3Mzk5", "url": "https://api.github.com/repos/python-trio/trio/labels/low-level", "name": "low-level", "color": "f8ffb2", "default": false, "description": ""}, {"id": 1621470001, "node_id": "MDU6TGFiZWwxNjIxNDcwMDAx", "url": "https://api.github.com/repos/python-trio/trio/labels/subprocesses", "name": "subprocesses", "color": "8464c4", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-08T04:05:30Z", "updated_at": "2020-04-29T23:57:52Z", "closed_at": "2020-04-29T23:57:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Recent versions of the Linux kernel finally added a much more reasonable way to interact with subprocesses called \"pidfd\". The main advantages are:\r\n\r\n- Using an fd as a handle for interacting with a process avoids a bunch of weird edge cases that pids have, like pids being recycled out from under you so you accidentally kill the wrong process (this isn't an issue for the specific way trio interacts with subprocesses, because we only work with child processes and the relationship between a parent and child is special, but in more general cases it's an issue)\r\n- You can wait for child processes using `epoll`!!!!\r\n- There may be more fancy features coming that are built on top of pidfd, like the ability to automatically kill a child when the last pidfd reference to it is closed.\r\n\r\nProbably the epoll integration is the first thing we care about, since it provides an alternative to the rube goldberg thread-based construction we use now. Of course we'll still have to maintain that indefinitely because of RHEL and friends, but it'll be nice to avoid it when running on a modern system. That also means this isn't like, a huge urgent priority, because the user-visible impact is basically nil. But we'll want it eventually, so might as well have an issue to collect information until we're ready.\r\n\r\nInitial pidfd support landed in kernel 5.1; the epoll integration landed in 5.3. And Ubuntu 19.10 (out next week) will have a 5.3 kernel, so pidfd is starting to actually filter out to users. I believe that in 19.10 there still aren't any glibc wrappers for the new syscalls, so if you want to access them you have to [call `syscall` directly](https://manpages.courier-mta.org/htmlman2/syscall.2.html). We could do that with ctypes or something though \u2013 it's janky but not difficult.\r\n\r\nThe biggest blocker here is that we will definitely need to test the new code, and AFAIK none of the CI services we have access to will ship a pidfd-capable kernel for... a while. They all seem to stick to LTS releases, and sometimes they're slow to upgrade even then... Azure is still on Ubuntu 16.04, though Travis and Github Actions both have 18.04. So probably we won't be able to actually *test* pidfd support until sometime after Ubuntu 20.04 LTS is released in April 2020. (Unfortunately since this is a kernel feature, using docker to pull down a newer release doesn't help, and I'm not aware of any hosted CI services that let you bring-your-own-kernel.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1231", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1231/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1231/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1231/events", "html_url": "https://github.com/python-trio/trio/issues/1231", "id": 502474798, "node_id": "MDU6SXNzdWU1MDI0NzQ3OTg=", "number": 1231, "title": "Flakiness downloading codecov-bash", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-04T07:23:32Z", "updated_at": "2019-11-10T12:47:03Z", "closed_at": "2019-11-10T12:47:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "So this is baffling to me, and I know it has nothing to do with anything we did, but it's super frustrating: for some reason, running `curl https://codecov.io/bash` has recently become *super* flaky and is making our CI runs fail all the time and we gotta do something.\r\n\r\nObservations:\r\n\r\nThe most common failure seems to be a timeout during connect. I've also seen this, which is super weird:\r\n\r\n```\r\n+curl --retry 5 -o codecov.sh https://codecov.io/bash\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:15 --:--:--     0\r\ncurl: (35) gnutls_handshake() failed: Error in the pull function.\r\n```\r\n\r\nAccording to the curl docs, `curl --retry 5` should retry on timeouts but.... I can't tell whether it's actually doing that?\r\n\r\nCodecov as a whole is kind of flaky, so it's tempting to blame this on them. But I'm not sure this is actually their fault... `codecov.io` appears to be hosted by google (based on running `whois` on the IP address), so I'm guessing it's some google CDN or something? (Or maybe it's just some random server running on google cloud with no CDN in front of it, who knows?)\r\n\r\nThe failures seem to all be from Travis, not Azure. And I'm pretty sure Travis is running on Google Cloud servers. Wild supposition: maybe Travis's traffic is considered \"internal\" to Google Cloud and doesn't hit the CDN, while Azure's traffic is \"external\" and does hit the CDN? I have no idea. I guess we could try running traceroute from both Travis and Azure, but that seems like it might be running off down an unproductive rabbit-hole.\r\n\r\n...oh wait, and actually it just failed on azure too, so never mind: https://dev.azure.com/python-trio/trio/_build/results?buildId=1031&view=logs&jobId=872bf439-86bb-5ce5-edcd-c35619d700a0\r\n\r\nso... what the heck can we do about this? the obvious answer is to retry, but curl's `--retry` isn't working. Is that because there's something wrong with `--retry`, or is it because when we hit one of these failures, it's somehow \"sticky\"? Would putting our own retry loop around curl help?\r\n\r\nI guess we could also like, stash a copy of codecov-bash somewhere more reliable, but that seems like it would create all kinds of operational annoyances.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1211", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1211/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1211/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1211/events", "html_url": "https://github.com/python-trio/trio/issues/1211", "id": 493644798, "node_id": "MDU6SXNzdWU0OTM2NDQ3OTg=", "number": 1211, "title": "Did you ever try googling Trio?", "user": {"login": "Tronic", "id": 98187, "node_id": "MDQ6VXNlcjk4MTg3", "avatar_url": "https://avatars1.githubusercontent.com/u/98187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tronic", "html_url": "https://github.com/Tronic", "followers_url": "https://api.github.com/users/Tronic/followers", "following_url": "https://api.github.com/users/Tronic/following{/other_user}", "gists_url": "https://api.github.com/users/Tronic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tronic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tronic/subscriptions", "organizations_url": "https://api.github.com/users/Tronic/orgs", "repos_url": "https://api.github.com/users/Tronic/repos", "events_url": "https://api.github.com/users/Tronic/events{/privacy}", "received_events_url": "https://api.github.com/users/Tronic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-14T17:08:40Z", "updated_at": "2019-09-15T06:51:29Z", "closed_at": "2019-09-15T06:51:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Google is notoriously good at guessing what I meant, and even generic nouns like [requests](https://www.google.com/search?q=requests), [pandas](https://www.google.com/search?q=pandas) and [anaconda](https://www.google.com/search?q=anaconda) get me directly to the Python things instead of the meanings that normal people would assign to such words.\r\n\r\nIt turns out that [trio](https://www.google.com/search?q=trio) as a name is a bit unfortunate. Google finds me restaurants and shopping centres instead of the library. Even when I try to be a bit more specific, such as [trio networking](https://www.google.com/search?q=trio+networking), my favourite project won't even show up on the first page.\r\n\r\nTrio is not alone with this problem, as my [other favourite project](https://www.google.com/search?q=sanic) also seems to suffer of a similar issue:\r\n\r\n![image](https://user-images.githubusercontent.com/98187/64911455-a4809800-d72a-11e9-8259-134d839609be.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1209", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1209/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1209/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1209/events", "html_url": "https://github.com/python-trio/trio/issues/1209", "id": 493498669, "node_id": "MDU6SXNzdWU0OTM0OTg2Njk=", "number": 1209, "title": "What should run_process do if it's cancelled but it can't kill the child process?", "user": {"login": "dj-foxxy", "id": 342879, "node_id": "MDQ6VXNlcjM0Mjg3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/342879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dj-foxxy", "html_url": "https://github.com/dj-foxxy", "followers_url": "https://api.github.com/users/dj-foxxy/followers", "following_url": "https://api.github.com/users/dj-foxxy/following{/other_user}", "gists_url": "https://api.github.com/users/dj-foxxy/gists{/gist_id}", "starred_url": "https://api.github.com/users/dj-foxxy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dj-foxxy/subscriptions", "organizations_url": "https://api.github.com/users/dj-foxxy/orgs", "repos_url": "https://api.github.com/users/dj-foxxy/repos", "events_url": "https://api.github.com/users/dj-foxxy/events{/privacy}", "received_events_url": "https://api.github.com/users/dj-foxxy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1621470001, "node_id": "MDU6TGFiZWwxNjIxNDcwMDAx", "url": "https://api.github.com/repos/python-trio/trio/labels/subprocesses", "name": "subprocesses", "color": "8464c4", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-13T20:13:23Z", "updated_at": "2020-05-16T10:08:00Z", "closed_at": "2020-05-16T10:08:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "The async context manager tries to `SIGKILL` the subprocess, which causes a `PermissionError` if that subprocess is `sudo`\r\n```python\r\nimport trio\r\n\r\n\r\nasync def main():\r\n    with trio.move_on_after(1):\r\n        await trio.run_process(['sleep', '2'])\r\n    print('Cancelled 1')\r\n\r\n    with trio.move_on_after(1):\r\n        await trio.run_process(['sudo', 'sleep', '2'])\r\n    print('Cancelled 2')\r\n\r\n\r\ntrio.run(main)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1191", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1191/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1191/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1191/events", "html_url": "https://github.com/python-trio/trio/issues/1191", "id": 481858539, "node_id": "MDU6SXNzdWU0ODE4NTg1Mzk=", "number": 1191, "title": "TrioInternalError on trio.run(agen.__anext__)", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-17T07:25:49Z", "updated_at": "2019-08-18T04:20:48Z", "closed_at": "2019-08-18T04:20:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Here's a strange crash, discovered by @florimondmanca in https://github.com/encode/httpx/pull/214:\r\n\r\n```python\r\nimport trio\r\nasync def gen():\r\n    yield \"hi\"\r\ntrio.run(gen().__anext__)\r\n```\r\n\r\nResults in:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/tmp/asdf.py\", line 6, in <module>\r\n    trio.run(gen().__anext__)\r\n  File \"/home/njs/.user-python3.7/lib/python3.7/site-packages/trio/_core/_run.py\", line 1769, in run\r\n    run_impl(runner, async_fn, args)\r\n  File \"/home/njs/.user-python3.7/lib/python3.7/site-packages/trio/_core/_run.py\", line 1918, in run_impl\r\n    runner.task_exited(task, final_outcome)\r\n  File \"/home/njs/.user-python3.7/lib/python3.7/site-packages/trio/_core/_run.py\", line 1404, in task_exited\r\n    raise TrioInternalError\r\ntrio.TrioInternalError\r\n```\r\n\r\nPoking around, I see that `init` has set `self.main_task_outcome` before exiting:\r\n\r\n```\r\n(Pdb) p self.main_task_outcome\r\nError(AttributeError(\"'async_generator_asend' object has no attribute 'cr_frame'\"))\r\n```\r\n\r\nSo this is another variant of #550.\r\n\r\nThis is a pretty weird thing to do, so I guess this issue isn't super urgent, but two todo items:\r\n\r\n- The error message is really bad... there are several measures in place here to try to make the error come out, and they all failed. The run loop tries to reveal exceptions from `init`, but  `init` exited successfully. It did this after setting `self.main_task_exited`... but even though `spawn_impl` failed, it didn't fail until after adding the new task to `self.tasks`, so `run` freaked out instead of re-raising `self.main_task_exited`. I guess we should move the `self.tasks` assignment down even further in `spawn_impl`?\r\n\r\n- Also, this probably shouldn't crash! And #550 has another set of reasons to support it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1190", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1190/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1190/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1190/events", "html_url": "https://github.com/python-trio/trio/issues/1190", "id": 481706679, "node_id": "MDU6SXNzdWU0ODE3MDY2Nzk=", "number": 1190, "title": "Mock clock cannot jump into the past, but uses seconds_to_next_deadline which can !", "user": {"login": "touilleMan", "id": 3187637, "node_id": "MDQ6VXNlcjMxODc2Mzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3187637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/touilleMan", "html_url": "https://github.com/touilleMan", "followers_url": "https://api.github.com/users/touilleMan/followers", "following_url": "https://api.github.com/users/touilleMan/following{/other_user}", "gists_url": "https://api.github.com/users/touilleMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/touilleMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/touilleMan/subscriptions", "organizations_url": "https://api.github.com/users/touilleMan/orgs", "repos_url": "https://api.github.com/users/touilleMan/repos", "events_url": "https://api.github.com/users/touilleMan/events{/privacy}", "received_events_url": "https://api.github.com/users/touilleMan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-16T17:20:52Z", "updated_at": "2019-08-20T08:28:21Z", "closed_at": "2019-08-20T08:28:21Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "When using hypothesis with the `mock_clock` fixture, I sometime end up with a `raise ValueError(\"time can't go backwards\")`\r\n\r\nThe thing is we have `MockClock._autojumper` doing this:\r\nhttps://github.com/python-trio/trio/blob/4512ae3ca199f0a99d02f6ff2a6f8e94dd08f1ef/trio/testing/_mock_clock.py#L149-L152\r\n\r\nHowever according to `current_statisticts` documentation:\r\nhttps://github.com/python-trio/trio/blob/4512ae3ca199f0a99d02f6ff2a6f8e94dd08f1ef/trio/_core/_run.py#L1143-L1146\r\n\r\nI guess `_autojumper` should be corrected to do something like this:\r\n```python\r\nstatistics = _core.current_statistics() \r\njump = statistics.seconds_to_next_deadline \r\nif 0 < jump < inf:\r\n     self.jump(jump) \r\n```\r\n\r\nWhat do you think ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1182", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1182/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1182/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1182/events", "html_url": "https://github.com/python-trio/trio/issues/1182", "id": 479389269, "node_id": "MDU6SXNzdWU0NzkzODkyNjk=", "number": 1182, "title": "Discussion: Should Trio never use unbounded dependency pins?", "user": {"login": "jab", "id": 64992, "node_id": "MDQ6VXNlcjY0OTky", "avatar_url": "https://avatars1.githubusercontent.com/u/64992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jab", "html_url": "https://github.com/jab", "followers_url": "https://api.github.com/users/jab/followers", "following_url": "https://api.github.com/users/jab/following{/other_user}", "gists_url": "https://api.github.com/users/jab/gists{/gist_id}", "starred_url": "https://api.github.com/users/jab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jab/subscriptions", "organizations_url": "https://api.github.com/users/jab/orgs", "repos_url": "https://api.github.com/users/jab/repos", "events_url": "https://api.github.com/users/jab/events{/privacy}", "received_events_url": "https://api.github.com/users/jab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-11T16:57:31Z", "updated_at": "2019-08-15T01:34:40Z", "closed_at": "2019-08-15T01:34:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Trio currently sets `install_requires` as follows:\r\nhttps://github.com/python-trio/trio/blob/1de9cae933e7c45b4738d29d504e7f594b7b268a/setup.py#L81-L91\r\n\r\nNote that every one of these dependency declarations specifies no upper bound. (Most have no lower bound either, but let's not focus on that for now.)\r\n\r\nWhen there is no upper bound specified, the following scenario is possible:\r\n1. Trio declares that any version, no matter how new, of dependency D is okay. Let's say the newest version of D is currently 19.1.0.\r\n1. All goes well for a while. Maybe D stays at the same version. Maybe it publishes some *compatible* minor-version-bump updates.\r\n1. At some point in the future, D publishes version 20.0.0, a backwards-incompatible version.\r\n1. All of a sudden, Trio users attempting to `pip install -U trio` get a broken set of dependencies due to (1) above. Users must now wait for a new version of Trio to be published that either makes Trio compatible with D v20 or that pins Trio to `D < 20`, or users must manually declare a `D < 20` transitive dependency pin themselves, none of which is ideal.\r\n\r\nNote that this concern is not just theoretical; I've seen libraries that were working perfectly fine one day become broken the next by the situation above, with no advance warning, and then have to scramble to push out a new release with a correct pin to un-break new installs.\r\n\r\nI believe[1] that a library like Trio's goal for any given dependency is to match the widest range of expected-to-be-compatible versions, not just for versions currently available, but for versions that may come out in the future. To achieve this, each dependency declaration can be given an upper bound like `D < [next major version, not yet released, and assumed to be incompatible until we've confirmed otherwise once it is released, at which point we can publish a new release of Trio with the updated pin]`. Changing from assuming that the next major version of a dependency will be incompatible rather than compatible works much better for semver-compliant dependencies, where that should always be the case. For non-semver-compliant dependencies, the upper bound can be refined based on whatever their versioning strategy is, but in the meantime using this upper bound is probably better than using no upper bound.\r\n\r\nAs for Dependabot, based on https://dependabot.com/docs/config-file/#version_requirement_updates, it looks like `version_requirement_updates=auto` (\"increase versions if an app, widen ranges if a library\") is all that is needed for Dependabot to do the right thing in its PRs. I assume that's the default setting, but it doesn't say. We could add a `.dependabot/config.yml` to ensure this.\r\n\r\nLook forward to hearing if this makes sense. If so, I'm happy to submit a PR that implements this.\r\n\r\nThanks for all the great work on Trio!\r\n\r\n[1] I say \"believe\" rather than \"know\" because I haven't yet found an authoritative doc that tells Python packagers to do this. The closest I've found so far is https://www.python.org/dev/peps/pep-0592/ which contains, \"the obvious solution... will break users who have followed best practices and pinned to a specific version of the project\". If anyone knows of better documentation about this somewhere, please link to it here, and if not, does anyone know what the best way would be to get this documented better?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1175", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1175/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1175/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1175/events", "html_url": "https://github.com/python-trio/trio/issues/1175", "id": 476943287, "node_id": "MDU6SXNzdWU0NzY5NDMyODc=", "number": 1175, "title": "New cancellation logic doesn't handle in-flight shielding changes correctly", "user": {"login": "oremanj", "id": 4316136, "node_id": "MDQ6VXNlcjQzMTYxMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4316136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oremanj", "html_url": "https://github.com/oremanj", "followers_url": "https://api.github.com/users/oremanj/followers", "following_url": "https://api.github.com/users/oremanj/following{/other_user}", "gists_url": "https://api.github.com/users/oremanj/gists{/gist_id}", "starred_url": "https://api.github.com/users/oremanj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oremanj/subscriptions", "organizations_url": "https://api.github.com/users/oremanj/orgs", "repos_url": "https://api.github.com/users/oremanj/repos", "events_url": "https://api.github.com/users/oremanj/events{/privacy}", "received_events_url": "https://api.github.com/users/oremanj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "oremanj", "id": 4316136, "node_id": "MDQ6VXNlcjQzMTYxMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4316136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oremanj", "html_url": "https://github.com/oremanj", "followers_url": "https://api.github.com/users/oremanj/followers", "following_url": "https://api.github.com/users/oremanj/following{/other_user}", "gists_url": "https://api.github.com/users/oremanj/gists{/gist_id}", "starred_url": "https://api.github.com/users/oremanj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oremanj/subscriptions", "organizations_url": "https://api.github.com/users/oremanj/orgs", "repos_url": "https://api.github.com/users/oremanj/repos", "events_url": "https://api.github.com/users/oremanj/events{/privacy}", "received_events_url": "https://api.github.com/users/oremanj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "oremanj", "id": 4316136, "node_id": "MDQ6VXNlcjQzMTYxMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4316136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oremanj", "html_url": "https://github.com/oremanj", "followers_url": "https://api.github.com/users/oremanj/followers", "following_url": "https://api.github.com/users/oremanj/following{/other_user}", "gists_url": "https://api.github.com/users/oremanj/gists{/gist_id}", "starred_url": "https://api.github.com/users/oremanj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oremanj/subscriptions", "organizations_url": "https://api.github.com/users/oremanj/orgs", "repos_url": "https://api.github.com/users/oremanj/repos", "events_url": "https://api.github.com/users/oremanj/events{/privacy}", "received_events_url": "https://api.github.com/users/oremanj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-08-05T16:09:09Z", "updated_at": "2019-08-06T11:31:40Z", "closed_at": "2019-08-06T11:31:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Reproducer:\r\n```python\r\nimport trio\r\n\r\nasync def main():\r\n    with trio.CancelScope() as outer:\r\n        with trio.CancelScope() as inner:\r\n            outer.cancel()\r\n            try:\r\n                await trio.hazmat.checkpoint()\r\n            finally:\r\n                inner.shield = True\r\n    print(outer.cancel_called, inner.cancel_called)\r\n    print(outer.cancelled_caught, inner.cancelled_caught)\r\n\r\ntrio.run(main)\r\n```\r\nPrints:\r\n```\r\nTrue False\r\nFalse True\r\n```\r\nIt shouldn't be possible for a scope that wasn't cancelled to swallow a Cancelled.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1170", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1170/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1170/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1170/events", "html_url": "https://github.com/python-trio/trio/issues/1170", "id": 475532667, "node_id": "MDU6SXNzdWU0NzU1MzI2Njc=", "number": 1170, "title": "Intermittent test failure in test_subprocess.py:test_signals: SIGINT causes startup failure in child Python and unexpected return value", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1621470001, "node_id": "MDU6TGFiZWwxNjIxNDcwMDAx", "url": "https://api.github.com/repos/python-trio/trio/labels/subprocesses", "name": "subprocesses", "color": "8464c4", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-01T07:59:12Z", "updated_at": "2020-03-09T10:26:12Z", "closed_at": "2020-03-09T10:26:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Observed here: https://dev.azure.com/python-trio/trio/_build/results?buildId=827&view=logs&jobId=300ae31b-e5d9-5bcb-b319-aee10d9d83f3\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n_________________________________ test_signals _________________________________\r\n\r\n    async def test_signals():\r\n        async def test_one_signal(send_it, signum):\r\n            with move_on_after(1.0) as scope:\r\n                async with await open_process(SLEEP(3600)) as proc:\r\n                    send_it(proc)\r\n            assert not scope.cancelled_caught\r\n            if posix:\r\n                assert proc.returncode == -signum\r\n            else:\r\n                assert proc.returncode != 0\r\n    \r\n        await test_one_signal(Process.kill, SIGKILL)\r\n        await test_one_signal(Process.terminate, SIGTERM)\r\n        if posix:\r\n>           await test_one_signal(lambda proc: proc.send_signal(SIGINT), SIGINT)\r\n\r\n/t/venv/lib/python3.7/site-packages/trio/tests/test_subprocess.py:366: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nsend_it = <function test_signals.<locals>.<lambda> at 0x7f7e2d578840>\r\nsignum = <Signals.SIGINT: 2>\r\n\r\n    async def test_one_signal(send_it, signum):\r\n        with move_on_after(1.0) as scope:\r\n            async with await open_process(SLEEP(3600)) as proc:\r\n                send_it(proc)\r\n        assert not scope.cancelled_caught\r\n        if posix:\r\n>           assert proc.returncode == -signum\r\nE           assert -6 == -2\r\nE             --6\r\nE             +-2\r\n\r\n/t/venv/lib/python3.7/site-packages/trio/tests/test_subprocess.py:359: AssertionError\r\n----------------------------- Captured stderr call -----------------------------\r\nFatal Python error: init_sys_streams: can't initialize sys standard streams\r\nTraceback (most recent call last):\r\n  File \"/t/venv/lib/python3.7/encodings/latin_1.py\", line 13, in <module>\r\n    class Codec(codecs.Codec):\r\nKeyboardInterrupt\r\n```\r\n\r\nIn this test we're sending SIGINT to a child process, and the child process happens to be Python, and apparently Python's startup logic is flaky if a SIGINT arrives at the wrong time.\r\n\r\nI think the simplest fix would be to make the test use a different signal, one that Python doesn't catch? Maybe SIGKILL + SIGTERM, if we're worried about making sure that `send_signal` isn't accidentally doing the same thing as `kill` or `terminate`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1167", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1167/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1167/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1167/events", "html_url": "https://github.com/python-trio/trio/issues/1167", "id": 475497525, "node_id": "MDU6SXNzdWU0NzU0OTc1MjU=", "number": 1167, "title": "What happened to BlockingTrioPortal?", "user": {"login": "jtrakk", "id": 43392409, "node_id": "MDQ6VXNlcjQzMzkyNDA5", "avatar_url": "https://avatars1.githubusercontent.com/u/43392409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrakk", "html_url": "https://github.com/jtrakk", "followers_url": "https://api.github.com/users/jtrakk/followers", "following_url": "https://api.github.com/users/jtrakk/following{/other_user}", "gists_url": "https://api.github.com/users/jtrakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrakk/subscriptions", "organizations_url": "https://api.github.com/users/jtrakk/orgs", "repos_url": "https://api.github.com/users/jtrakk/repos", "events_url": "https://api.github.com/users/jtrakk/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrakk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-01T06:30:56Z", "updated_at": "2019-08-01T07:52:44Z", "closed_at": "2019-08-01T07:49:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It has disappeared in 0.12.0 but I don't see anything in the changelog. The PR seems to be [this one](https://github.com/python-trio/trio/commit/7f36105f1c0fec193e32813048283838b6e09a1c).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1153", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1153/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1153/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1153/events", "html_url": "https://github.com/python-trio/trio/issues/1153", "id": 472673114, "node_id": "MDU6SXNzdWU0NzI2NzMxMTQ=", "number": 1153, "title": "Dependabot can't resolve your Python dependency files", "user": {"login": "dependabot-preview[bot]", "id": 27856297, "node_id": "MDM6Qm90Mjc4NTYyOTc=", "avatar_url": "https://avatars3.githubusercontent.com/in/2141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dependabot-preview%5Bbot%5D", "html_url": "https://github.com/apps/dependabot-preview", "followers_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/followers", "following_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/repos", "events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-25T05:34:52Z", "updated_at": "2019-07-26T03:53:47Z", "closed_at": "2019-07-26T03:53:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Dependabot can't resolve your Python dependency files.\n\nAs a result, Dependabot couldn't update your dependencies.\n\nThe error Dependabot encountered was:\n\n```\nCould not find a version that satisfies the requirement pyparsing==2.4.1 (from packaging==19.0->sphinx==2.1.2->-r docs-requirements.in (line 2)) (from versions: 1.4.6, 1.4.7, 1.4.8, 1.4.11, 1.5.0, 1.5.1, 1.5.2, 1.5.3, 1.5.4, 1.5.5, 1.5.6, 1.5.7, 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.1.8, 2.1.9, 2.1.10, 2.2.0, 2.2.1, 2.2.2, 2.3.0, 2.3.1, 2.4.0, 2.4.1.1, 2.4.2a1)\nTraceback (most recent call last):\n  File \"/usr/local/.pyenv/versions/3.7.3/bin/pip-compile\", line 10, in <module>\n    sys.exit(cli())\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/click/core.py\", line 764, in __call__\n    return self.main(*args, **kwargs)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/click/core.py\", line 717, in main\n    rv = self.invoke(ctx)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/click/core.py\", line 956, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/click/core.py\", line 555, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/click/decorators.py\", line 17, in new_func\n    return f(get_current_context(), *args, **kwargs)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/scripts/compile.py\", line 350, in cli\n    results = resolver.resolve(max_rounds=max_rounds)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/resolver.py\", line 164, in resolve\n    has_changed, best_matches = self._resolve_one_round()\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/resolver.py\", line 259, in _resolve_one_round\n    their_constraints.extend(self._iter_dependencies(best_match))\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/resolver.py\", line 354, in _iter_dependencies\n    dependencies = self.repository.get_dependencies(ireq)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/repositories/local.py\", line 66, in get_dependencies\n    return self.repository.get_dependencies(ireq)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/repositories/pypi.py\", line 270, in get_dependencies\n    download_dir, ireq, wheel_cache\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/repositories/pypi.py\", line 229, in resolve_reqs\n    results = resolver._resolve_one(reqset, ireq)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip/_internal/resolve.py\", line 294, in _resolve_one\n    abstract_dist = self._get_abstract_dist_for(req_to_install)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip/_internal/resolve.py\", line 242, in _get_abstract_dist_for\n    self.require_hashes\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip/_internal/operations/prepare.py\", line 282, in prepare_linked_requirement\n    req.populate_link(finder, upgrade_allowed, require_hashes)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip/_internal/req/req_install.py\", line 198, in populate_link\n    self.link = finder.find_requirement(self, upgrade)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip/_internal/index.py\", line 792, in find_requirement\n    'No matching distribution found for %s' % req\npip._internal.exceptions.DistributionNotFound: No matching distribution found for pyparsing==2.4.1 (from packaging==19.0->sphinx==2.1.2->-r docs-requirements.in (line 2))\n```\n\nIf you think the above is an error on Dependabot's side please don't hesitate to get in touch - we'll do whatever we can to fix it.\n\nYou can mention @dependabot in the comments below to contact the Dependabot team.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1152", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1152/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1152/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1152/events", "html_url": "https://github.com/python-trio/trio/issues/1152", "id": 472087519, "node_id": "MDU6SXNzdWU0NzIwODc1MTk=", "number": 1152, "title": "Dependabot can't resolve your Python dependency files", "user": {"login": "dependabot-preview[bot]", "id": 27856297, "node_id": "MDM6Qm90Mjc4NTYyOTc=", "avatar_url": "https://avatars3.githubusercontent.com/in/2141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dependabot-preview%5Bbot%5D", "html_url": "https://github.com/apps/dependabot-preview", "followers_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/followers", "following_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/repos", "events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-24T05:36:05Z", "updated_at": "2019-07-25T05:34:03Z", "closed_at": "2019-07-25T05:34:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Dependabot can't resolve your Python dependency files.\n\nAs a result, Dependabot couldn't update your dependencies.\n\nThe error Dependabot encountered was:\n\n```\nCould not find a version that satisfies the requirement pyparsing==2.4.1 (from packaging==19.0->sphinx==2.1.2->-r docs-requirements.in (line 2)) (from versions: 1.4.6, 1.4.7, 1.4.8, 1.4.11, 1.5.0, 1.5.1, 1.5.2, 1.5.3, 1.5.4, 1.5.5, 1.5.6, 1.5.7, 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.1.8, 2.1.9, 2.1.10, 2.2.0, 2.2.1, 2.2.2, 2.3.0, 2.3.1, 2.4.0)\nTraceback (most recent call last):\n  File \"/usr/local/.pyenv/versions/3.7.3/bin/pip-compile\", line 10, in <module>\n    sys.exit(cli())\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/click/core.py\", line 764, in __call__\n    return self.main(*args, **kwargs)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/click/core.py\", line 717, in main\n    rv = self.invoke(ctx)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/click/core.py\", line 956, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/click/core.py\", line 555, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/click/decorators.py\", line 17, in new_func\n    return f(get_current_context(), *args, **kwargs)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/scripts/compile.py\", line 350, in cli\n    results = resolver.resolve(max_rounds=max_rounds)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/resolver.py\", line 164, in resolve\n    has_changed, best_matches = self._resolve_one_round()\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/resolver.py\", line 259, in _resolve_one_round\n    their_constraints.extend(self._iter_dependencies(best_match))\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/resolver.py\", line 354, in _iter_dependencies\n    dependencies = self.repository.get_dependencies(ireq)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/repositories/local.py\", line 66, in get_dependencies\n    return self.repository.get_dependencies(ireq)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/repositories/pypi.py\", line 270, in get_dependencies\n    download_dir, ireq, wheel_cache\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/piptools/repositories/pypi.py\", line 229, in resolve_reqs\n    results = resolver._resolve_one(reqset, ireq)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip/_internal/resolve.py\", line 294, in _resolve_one\n    abstract_dist = self._get_abstract_dist_for(req_to_install)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip/_internal/resolve.py\", line 242, in _get_abstract_dist_for\n    self.require_hashes\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip/_internal/operations/prepare.py\", line 282, in prepare_linked_requirement\n    req.populate_link(finder, upgrade_allowed, require_hashes)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip/_internal/req/req_install.py\", line 198, in populate_link\n    self.link = finder.find_requirement(self, upgrade)\n  File \"/usr/local/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip/_internal/index.py\", line 792, in find_requirement\n    'No matching distribution found for %s' % req\npip._internal.exceptions.DistributionNotFound: No matching distribution found for pyparsing==2.4.1 (from packaging==19.0->sphinx==2.1.2->-r docs-requirements.in (line 2))\n```\n\nIf you think the above is an error on Dependabot's side please don't hesitate to get in touch - we'll do whatever we can to fix it.\n\nYou can mention @dependabot in the comments below to contact the Dependabot team.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1141", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1141/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1141/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1141/events", "html_url": "https://github.com/python-trio/trio/issues/1141", "id": 464942629, "node_id": "MDU6SXNzdWU0NjQ5NDI2Mjk=", "number": 1141, "title": "Run background tasks in a context manager", "user": {"login": "joernheissler", "id": 865592, "node_id": "MDQ6VXNlcjg2NTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/865592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joernheissler", "html_url": "https://github.com/joernheissler", "followers_url": "https://api.github.com/users/joernheissler/followers", "following_url": "https://api.github.com/users/joernheissler/following{/other_user}", "gists_url": "https://api.github.com/users/joernheissler/gists{/gist_id}", "starred_url": "https://api.github.com/users/joernheissler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joernheissler/subscriptions", "organizations_url": "https://api.github.com/users/joernheissler/orgs", "repos_url": "https://api.github.com/users/joernheissler/repos", "events_url": "https://api.github.com/users/joernheissler/events{/privacy}", "received_events_url": "https://api.github.com/users/joernheissler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-07T11:29:03Z", "updated_at": "2020-05-12T08:53:31Z", "closed_at": "2020-05-12T08:53:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nmany network protocols are multiplexed by nature, i.e. multiple logical connections share one physical connection. Examples include http2 (multiple requests in parallel), ssh (e.g. port forwardings), irc (chat with multiple persons).\r\nSome background task is required which reads data from the physical connection and distributes it to the handler of the logical connection.\r\n\r\nI'd like to see an easy way to create code like this:\r\n```python\r\nasync with Http2Client(\"server.example.net\") as http:\r\n    async with trio.open_nursery() as nursery:\r\n        for path in {'/foo', '/bar', '/baz'}:\r\n            nursery.start_soon(http.get, path)  # GET result is unused, for sake of brevity.\r\n```\r\n\r\nThe `Http2Client` context manager would create a nursery and start a background task which reads data from the http server and handles it somehow.\r\nThe `get` method would send a request over the multiplexed connection and wait for the reply. The background task reads a reply from the server and sees e.g. \"It's for the `baz` request\" and then delivers it to the `http.get` foreground task for `baz` which will then return the result to the user.\r\n\r\nAs soon as the body of the context manager finishes, the background job is notified. In above example, it would cleanly shut down the http2 and TLS connections.\r\n\r\nI wrote PoC code to create a simple IRC bot which talks to multiple people and echos everything they say back at them: https://gist.github.com/joernheissler/571f95e974ade2e5610dad9417ef8d49\r\n(Needs python3.8; If you run it, please change the nicks)\r\n\r\nIs that something which trio should have? And how should the API look like?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1132", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1132/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1132/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1132/events", "html_url": "https://github.com/python-trio/trio/issues/1132", "id": 462366534, "node_id": "MDU6SXNzdWU0NjIzNjY1MzQ=", "number": 1132, "title": "Two TrioInternalErrors", "user": {"login": "jtrakk", "id": 43392409, "node_id": "MDQ6VXNlcjQzMzkyNDA5", "avatar_url": "https://avatars1.githubusercontent.com/u/43392409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrakk", "html_url": "https://github.com/jtrakk", "followers_url": "https://api.github.com/users/jtrakk/followers", "following_url": "https://api.github.com/users/jtrakk/following{/other_user}", "gists_url": "https://api.github.com/users/jtrakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrakk/subscriptions", "organizations_url": "https://api.github.com/users/jtrakk/orgs", "repos_url": "https://api.github.com/users/jtrakk/repos", "events_url": "https://api.github.com/users/jtrakk/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrakk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-06-30T04:35:32Z", "updated_at": "2020-05-12T07:46:49Z", "closed_at": "2020-05-12T07:46:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The exception is raised when I try to do the threaded-apply trick followed by another function. For example, `apply mario.testing.atools.wrapped_drop_falsy` followed by `map list`. There's a lot of non-Trio code here, and I don't expect anybody to wade through it all for a diagnosis, but perhaps at least the tracebacks are useful. Anyway, here's what I do to make it fail:\r\n\r\n\r\n```bash\r\ngit clone git@github.com:jtrakk/mario.git\r\ncd mario\r\ngit checkout 805551473e6fdb4f3496233a5eae5283d0e1c143\r\nvirtualenv -p python3.7 venv\r\nvenv/bin/pip install -e '.[dev]'\r\n```\r\n\r\nThere are two different TrioInternalError cases, depending on how i run it. The main code is in [`sync_apply`](https://github.com/jtrakk/mario/blob/thread/src/mario/traversals.py#L122).\r\n\r\n```python-traceback\r\n$ venv/bin/mario   map int apply mario.testing.atools.wrapped_drop_falsy  map list <<<$'1\\n2\\n0\\n3\\n4'\r\nTraceback (most recent call last):\r\n  File \"venv/bin/mario\", line 11, in <module>\r\n    load_entry_point('mario', 'console_scripts', 'mario')()\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/click/core.py\", line 764, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/click/core.py\", line 717, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/click/core.py\", line 1164, in invoke\r\n    return _process_result(rv)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/click/core.py\", line 1102, in _process_result\r\n    **ctx.params)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/click/core.py\", line 555, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/home/user/Documents/mario/src/mario/cli.py\", line 46, in cli_main\r\n    app.main(pairs, **kwargs)\r\n  File \"/home/user/Documents/mario/src/mario/app.py\", line 115, in main\r\n    trio.run(functools.partial(async_main, pairs, **kwargs))\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/trio/_core/_run.py\", line 1430, in run\r\n    run_impl(runner, async_fn, args)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/trio/_core/_run.py\", line 1579, in run_impl\r\n    runner.task_exited(task, final_outcome)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/trio/_core/_run.py\", line 1064, in task_exited\r\n    raise TrioInternalError\r\ntrio.TrioInternalError\r\nException ignored in: <async_generator object sync_apply at 0x7f42e8d84f28>\r\nRuntimeError: async generator ignored GeneratorExit\r\nException ignored in: <function Nursery.__del__ at 0x7f42ea2ab598>\r\nTraceback (most recent call last):\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/trio/_core/_run.py\", line 638, in __del__\r\nAssertionError: \r\n```\r\n\r\n\r\n\r\n\r\n\r\n```python-traceback\r\n$ venv/bin/mario   map int apply 'mario.testing.atools.wrapped_drop_falsy'  apply mario.testing.atools.wrapped_max <<<$'1\\n2\\n0\\n3\\n4'\r\nhello\r\nTraceback (most recent call last):\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/trio/_core/_run.py\", line 1430, in run\r\n    run_impl(runner, async_fn, args)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/trio/_core/_run.py\", line 1579, in run_impl\r\n    runner.task_exited(task, final_outcome)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/trio/_core/_run.py\", line 1051, in task_exited\r\n    self.tasks.remove(task)\r\nKeyError: <Task \"<method-wrapper '__anext__' of async_generator object at 0x7fbb1d3150d0>\" at 0x7fbb1d29fc88>\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"venv/bin/mario\", line 11, in <module>\r\n    load_entry_point('mario', 'console_scripts', 'mario')()\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/click/core.py\", line 764, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/click/core.py\", line 717, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/click/core.py\", line 1164, in invoke\r\n    return _process_result(rv)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/click/core.py\", line 1102, in _process_result\r\n    **ctx.params)\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/click/core.py\", line 555, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/home/user/Documents/mario/src/mario/cli.py\", line 46, in cli_main\r\n    app.main(pairs, **kwargs)\r\n  File \"/home/user/Documents/mario/src/mario/app.py\", line 115, in main\r\n    trio.run(functools.partial(async_main, pairs, **kwargs))\r\n  File \"/home/user/Documents/mario/venv/lib/python3.7/site-packages/trio/_core/_run.py\", line 1436, in run\r\n    ) from exc\r\ntrio.TrioInternalError: internal error in trio - please file a bug!\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1118", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1118/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1118/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1118/events", "html_url": "https://github.com/python-trio/trio/issues/1118", "id": 458538980, "node_id": "MDU6SXNzdWU0NTg1Mzg5ODA=", "number": 1118, "title": "Add CI for FreeBSD (and other BSDs?)", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-20T09:25:42Z", "updated_at": "2020-05-11T11:09:38Z", "closed_at": "2020-05-11T11:09:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See https://cirrus-ci.org/guide/FreeBSD/ for details.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1111", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1111/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1111/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1111/events", "html_url": "https://github.com/python-trio/trio/issues/1111", "id": 456773769, "node_id": "MDU6SXNzdWU0NTY3NzM3Njk=", "number": 1111, "title": "Add a description of 'closes: ...'/'fixes: ...' syntax to the contributing guide", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-17T07:00:29Z", "updated_at": "2019-07-02T12:38:36Z", "closed_at": "2019-07-02T12:38:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Github has a handy feature where if you use the right magic words in your PR description or commit messages, then it will take care of automatically closing the related issue for you: https://help.github.com/en/articles/closing-issues-using-keywords\r\n\r\nClosing the issue by hand is easy enough, but it's a chore and it's easy to forget, so we end up with dangling issues that don't get closed until someone stumbles across them a few months later. So there's nothing mandatory about it, but still, this is a nice feature to know about! And it's useful to everyone who uses github, whether they end up contributing to Trio or not. But it seems like a lot of Trio's new contributors don't know about it, and I've ended up explaining it multiple times. To pick two random examples:\r\n\r\n* https://github.com/python-trio/trio/pull/723#issuecomment-427720343\r\n* https://github.com/python-trio/trio/pull/1097#issuecomment-502556173\r\n\r\nFollowing the principle that anything you do twice should be automated, we should add a paragraph to our contributing docs explaining how to use this feature.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1109", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1109/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1109/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1109/events", "html_url": "https://github.com/python-trio/trio/issues/1109", "id": 455555663, "node_id": "MDU6SXNzdWU0NTU1NTU2NjM=", "number": 1109, "title": "Put process-creation into a thread", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1621470001, "node_id": "MDU6TGFiZWwxNjIxNDcwMDAx", "url": "https://api.github.com/repos/python-trio/trio/labels/subprocesses", "name": "subprocesses", "color": "8464c4", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-06-13T06:23:25Z", "updated_at": "2020-05-06T08:22:49Z", "closed_at": "2020-05-06T08:22:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "[Original title: Is process creation *actually* non-blocking?]\r\n\r\nIn https://github.com/python-trio/trio/issues/1104 I wrote:\r\n\r\n> the actual process startup is synchronous, so you could just as well have a synchronous version\r\n\r\nBut uh... it just occurred to me that I'm actually not sure if this is true! I mean, right now we just use `subprocess.Popen`, which is indeed a synchronous interface. And on Unix, spawning a new process and getting a handle on it is generally super cheap \u2013 it's just `fork`. The `exec` is expensive, but that happens after the child has split off \u2013 the parent doesn't wait for it.\r\n\r\nBut on Windows, you call `CreateProcess`, which I think might block the caller while doing all the disk access to set up the new process? Process creation on Windows are notoriously slow, and I don't know how much of that the parent process has to sit and wait for before `CreateProcess` can return.\r\n\r\nAnd even on Unix, you use `vfork`, in which case the parent process is blocked until the `exec`. And on recent Pythons, `subprocess` uses `posix_spawn`. On Linux this might use `vfork` (I'm not actually sure?). And on macOS it uses a native `posix_spawn` syscall, so who knows what that does. Again, this *might* not be a big deal... maybe the parent gets to go again the instant the child calls `exec`, or sooner, without having to wait for any disk access or anything. But I'm not sure!\r\n\r\nSo... we should figure this out. Because if process creation is slow enough that we need to treat it as a blocking operation, we might need to change the process API to give it an async constructor. (Presumably by making `Process.__init__` private, and adding `await trio.open_process(...)` \u2013 similar to how we handle files.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1094", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1094/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1094/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1094/events", "html_url": "https://github.com/python-trio/trio/issues/1094", "id": 454052248, "node_id": "MDU6SXNzdWU0NTQwNTIyNDg=", "number": 1094, "title": "Use attr.ib(factory=...) more consistently", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-10T08:20:32Z", "updated_at": "2019-06-17T06:45:33Z", "closed_at": "2019-06-17T06:45:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In the old days, if you were using [attrs](https://attrs.readthedocs.io/), if you wanted to set a mutable default for a class attribute, you'd write something like:\r\n\r\n```python\r\nfoo = attr.ib(default=attr.Factory(set))\r\n```\r\n\r\nMore recently, attrs added a nicer way to write this:\r\n\r\n```python\r\nfoo = attr.ib(factory=set)\r\n```\r\n\r\nBut we still have lots of code that uses the old way.\r\n\r\nThis isn't a big problem, but if you're looking for a good first issue to practice contributing with, then replacing some or all of Trio's `default=attr.Factory(...)` with `factory=...` would be a small, simple improvement.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1092", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1092/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1092/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1092/events", "html_url": "https://github.com/python-trio/trio/issues/1092", "id": 453860865, "node_id": "MDU6SXNzdWU0NTM4NjA4NjU=", "number": 1092, "title": "Should the Final and NoPublicConstructor classes inherit from typing.GenericMeta?", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-09T04:14:02Z", "updated_at": "2019-07-02T11:14:29Z", "closed_at": "2019-07-02T11:14:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We have some metaclasses now to enforce restrictions on subclassing and constructors (#1043), and we should be using them more (#1044). One problem we're going to run into:\r\n\r\n```\r\nIn [3]: class Blah(trio.abc.Stream, metaclass=trio._util.Final): \r\n   ...:     pass \r\n   ...:                                                                         \r\nTypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases\r\n```\r\n\r\nThe problem is that:\r\n\r\n- if you subclass any ABC (like `Stream`), then your metaclass must subclass `abc.ABCMeta`\r\n- if subclass any generic class (in the `typing.Generic` sense \u2013 like our channel ABCs), then your metaclass must subclass `typing.GenericMeta`\r\n\r\nFortunately `GenericMeta` subclasses `ABCMeta`, so at least these don't conflict with each other, but it's still a pain.\r\n\r\nI think maybe we can just make `Final` subclass `GenericMeta` and be done with it? It's a little awkward because it means we're dragging in the code for generic and abstract classes even when we don't need it, but in practice I don't *think* this affects much? Both metaclasses are prepared to cope with situations where the generic and abstract features are not actually used. The extra metaclasses probably slow down the initial class creation at import time slightly, but I don't think they affect any common operations on class *instances*.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1089", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1089/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1089/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1089/events", "html_url": "https://github.com/python-trio/trio/issues/1089", "id": 453471879, "node_id": "MDU6SXNzdWU0NTM0NzE4Nzk=", "number": 1089, "title": "trio.wait_any()", "user": {"login": "belm0", "id": 1708631, "node_id": "MDQ6VXNlcjE3MDg2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1708631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belm0", "html_url": "https://github.com/belm0", "followers_url": "https://api.github.com/users/belm0/followers", "following_url": "https://api.github.com/users/belm0/following{/other_user}", "gists_url": "https://api.github.com/users/belm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/belm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belm0/subscriptions", "organizations_url": "https://api.github.com/users/belm0/orgs", "repos_url": "https://api.github.com/users/belm0/repos", "events_url": "https://api.github.com/users/belm0/events{/privacy}", "received_events_url": "https://api.github.com/users/belm0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-06-07T11:44:00Z", "updated_at": "2020-08-01T10:44:08Z", "closed_at": "2020-05-12T07:43:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'm going out on a limb: [wait_any()](https://trio.discourse.group/t/the-case-for-wait-any-and-other-nursery-utils) should be part of the Trio package.\r\n\r\n```python3\r\nasync def wait_any(*functions):\r\n    \"\"\"Wait until any of the given async functions are completed.\r\n\r\n    Equivalent to creating a new nursery and calling `start_soon()` on\r\n    each async function, where the first function to return will cause the\r\n    nursery to be cancelled.\r\n    \"\"\"\r\n    ...\r\n```\r\n\r\nThe bar for utility-like things should be high for Trio.  Points about `wait_any()`:\r\n  * **utility** - it's observed to replace over 50% of open_nursery() uses\r\n  * **simplicity** - it's easy to understand, and there's apparently no way to misuse it (haven't had an issue in 9 months of development by casual programmers)\r\n  * **impact** - it makes code more readable and reduces cognitive load (no nested block, no wondering whether a task or cancel scope is stealthily passed somewhere)\r\n\r\nIt's actually detrimental to Trio to *not* have this available to all programs out of the box.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1081", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1081/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1081/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1081/events", "html_url": "https://github.com/python-trio/trio/issues/1081", "id": 451784512, "node_id": "MDU6SXNzdWU0NTE3ODQ1MTI=", "number": 1081, "title": "Increase sleep time leniency in test_timeouts.py", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-04T03:48:12Z", "updated_at": "2019-06-06T04:00:34Z", "closed_at": "2019-06-06T04:00:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently we allow 20% error, but this run on macos on azure had 40% error: https://dev.azure.com/python-trio/trio/_build/results?buildId=598&view=logs\r\n\r\n(See also: https://github.com/python-trio/trio/issues/200#issuecomment-498509115)\r\n\r\nI guess we should bump the error threshold to 50%, by modifying this line of code:\r\n\r\nhttps://github.com/python-trio/trio/blob/5ba7c569dc897777588f11ab37e51a648b493d74/trio/tests/test_timeouts.py#L35\r\n\r\nto say `1.5` instead of `1.2`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1066", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1066/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1066/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1066/events", "html_url": "https://github.com/python-trio/trio/issues/1066", "id": 449026836, "node_id": "MDU6SXNzdWU0NDkwMjY4MzY=", "number": 1066, "title": "MultiError.exceptions foils linter", "user": {"login": "belm0", "id": 1708631, "node_id": "MDQ6VXNlcjE3MDg2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1708631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belm0", "html_url": "https://github.com/belm0", "followers_url": "https://api.github.com/users/belm0/followers", "following_url": "https://api.github.com/users/belm0/following{/other_user}", "gists_url": "https://api.github.com/users/belm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/belm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belm0/subscriptions", "organizations_url": "https://api.github.com/users/belm0/orgs", "repos_url": "https://api.github.com/users/belm0/repos", "events_url": "https://api.github.com/users/belm0/events{/privacy}", "received_events_url": "https://api.github.com/users/belm0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-28T01:32:15Z", "updated_at": "2019-06-04T03:50:41Z", "closed_at": "2019-06-04T03:50:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Access of `exceptions` on a MultiError instance elicits \"no-member\" error from Pylint.\r\n\r\nI believe it's because MultiError `__new__` is merely mutating the result of `BaseException.__new__(MultiError)`.  I'd address it by making a proper `__init__()` constructor.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1065", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1065/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1065/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1065/events", "html_url": "https://github.com/python-trio/trio/issues/1065", "id": 448832451, "node_id": "MDU6SXNzdWU0NDg4MzI0NTE=", "number": 1065, "title": "trio's excepthook competes with apport's, which is installed by default on Ubuntu", "user": {"login": "mIcHyAmRaNe", "id": 17873513, "node_id": "MDQ6VXNlcjE3ODczNTEz", "avatar_url": "https://avatars0.githubusercontent.com/u/17873513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mIcHyAmRaNe", "html_url": "https://github.com/mIcHyAmRaNe", "followers_url": "https://api.github.com/users/mIcHyAmRaNe/followers", "following_url": "https://api.github.com/users/mIcHyAmRaNe/following{/other_user}", "gists_url": "https://api.github.com/users/mIcHyAmRaNe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mIcHyAmRaNe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mIcHyAmRaNe/subscriptions", "organizations_url": "https://api.github.com/users/mIcHyAmRaNe/orgs", "repos_url": "https://api.github.com/users/mIcHyAmRaNe/repos", "events_url": "https://api.github.com/users/mIcHyAmRaNe/events{/privacy}", "received_events_url": "https://api.github.com/users/mIcHyAmRaNe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1347506531, "node_id": "MDU6TGFiZWwxMzQ3NTA2NTMx", "url": "https://api.github.com/repos/python-trio/trio/labels/exception%20handling", "name": "exception handling", "color": "e833c9", "default": false, "description": ""}, {"id": 537057261, "node_id": "MDU6TGFiZWw1MzcwNTcyNjE=", "url": "https://api.github.com/repos/python-trio/trio/labels/user%20happiness", "name": "user happiness", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-05-27T12:27:19Z", "updated_at": "2020-05-17T15:31:38Z", "closed_at": "2020-05-17T15:31:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Python version**: 3.6.7\r\n**OS**: Elementary OS Juno (based on ubuntu 18.04)\r\n**trio installation**: `pip3 install --user trio`\r\n\r\n**Error**: RuntimeWarning when i import trio \r\n\r\nexample:\r\n```\r\n#!/usr/bin/env python3\r\n# -*- coding: utf-8 -*-\r\n\r\nimport trio\r\n```\r\n$ ./test.py\r\n```\r\n/home/user/.local/lib/python3.6/site-packages/trio/_core/_multierror.py:450: \r\nRuntimeWarning: You seem to already have a custom sys.excepthook handler installed.\r\nI'll skip installing trio's custom handler, but this means MultiErrors will not show full tracebacks.\r\ncategory=RuntimeWarning\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1055", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1055/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1055/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1055/events", "html_url": "https://github.com/python-trio/trio/issues/1055", "id": 445239102, "node_id": "MDU6SXNzdWU0NDUyMzkxMDI=", "number": 1055, "title": "Poking at Trio with .send(None) and...  it told me to report this", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-17T02:40:40Z", "updated_at": "2019-05-17T03:03:59Z", "closed_at": "2019-05-17T03:03:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://repl.it/@altendky/UnhappyGenuineConversions-4\r\n\r\nI was just poking at Trio to see what happened and don't personally consider a failure here a bug.  But, the error told me to report it so here I am, being obedient.  If you close this issue saying that `s.send(None)` is evil and this is an ok way to respond to it, I'm totally fine with that.\r\n\r\n```python3\r\nimport trio\r\n\r\n\r\nasync def main():\r\n    s = trio.sleep(2)\r\n\r\n    async with trio.open_nursery() as nursery:\r\n        s.send(None)\r\n        print('nursery end')\r\n\r\n    print('main end')\r\n \r\n\r\ntrio.run(main)\r\n```\r\n\r\n```python-traceback\r\nPython 3.6.1 (default, Dec 2015, 13:05:11)\r\n[GCC 4.8.2] on linux\r\n\r\n\r\nRepl.it: Installing fresh packages\r\n\r\nCollecting trio==0.11.0 (from -r requirements.txt (line 1))\r\n  Downloading https://files.pythonhosted.org/packages/16/88/b663a136d1083aeda965dfb58206ee6437c7920df7615415c4407169cbee/trio-0.11.0-py3-none-any.whl (289kB)\r\nRequirement already satisfied: idna in /usr/local/lib/python3.6/site-packages (from trio==0.11.0->-r requirements.txt (line 1)) (2.8)\r\nCollecting outcome (from trio==0.11.0->-r requirements.txt (line 1))\r\n  Downloading https://files.pythonhosted.org/packages/b9/3e/88cf8cbc591682e4ef27f61044496ca66733210b57ce01000ffec8b29d88/outcome-1.0.0-py2.py3-none-any.whl\r\nCollecting async-generator>=1.9 (from trio==0.11.0->-r requirements.txt (line 1))\r\n  Downloading https://files.pythonhosted.org/packages/71/52/39d20e03abd0ac9159c162ec24b93fbcaa111e8400308f2465432495ca2b/async_generator-1.10-py3-none-any.whl\r\nCollecting attrs>=18.2.0 (from trio==0.11.0->-r requirements.txt (line 1))\r\n  Downloading https://files.pythonhosted.org/packages/23/96/d828354fa2dbdf216eaa7b7de0db692f12c234f7ef888cc14980ef40d1d2/attrs-19.1.0-py2.py3-none-any.whl\r\nCollecting contextvars>=2.1; python_version < \"3.7\" (from trio==0.11.0->-r requirements.txt (line 1))\r\n  Downloading https://files.pythonhosted.org/packages/83/96/55b82d9f13763be9d672622e1b8106c85acb83edd7cc2fa5bc67cd9877e9/contextvars-2.4.tar.gz\r\nCollecting sniffio (from trio==0.11.0->-r requirements.txt (line 1))\r\n  Downloading https://files.pythonhosted.org/packages/b3/82/4bd4b7d9c0d1dc0fbfbc2a1e00138e7f3ab85bc239358fe9b78aa2ab586d/sniffio-1.1.0-py3-none-any.whl\r\nCollecting sortedcontainers (from trio==0.11.0->-r requirements.txt (line 1))\r\n  Downloading https://files.pythonhosted.org/packages/13/f3/cf85f7c3a2dbd1a515d51e1f1676d971abe41bba6f4ab5443240d9a78e5b/sortedcontainers-2.1.0-py2.py3-none-any.whl\r\nCollecting immutables>=0.9 (from contextvars>=2.1; python_version < \"3.7\"->trio==0.11.0->-r requirements.txt (line 1))\r\n  Downloading https://files.pythonhosted.org/packages/e3/91/bc4b34993ef77aabfd1546a657563576bdd437205fa24d4acaf232707452/immutables-0.9-cp36-cp36m-manylinux1_x86_64.whl (91kB)\r\nBuilding wheels for collected packages: contextvars\r\n  Building wheel for contextvars (setup.py): started\r\n  Building wheel for contextvars (setup.py): finished with status 'done'\r\n  Stored in directory: /home/runner/.cache/pip/wheels/a5/7d/68/1ebae2668bda2228686e3c1cf16f2c2384cea6e9334ad5f6de\r\nSuccessfully built contextvars\r\nInstalling collected packages: attrs, outcome, async-generator, immutables, contextvars, sniffio, sortedcontainers, trio\r\nSuccessfully installed async-generator-1.10 attrs-19.1.0 contextvars-2.4 immutables-0.9 outcome-1.0.0 sniffio-1.1.0 sortedcontainers-2.1.0 trio-0.11.0\r\nnursery end\r\nTraceback (most recent call last):\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/trio/_core/_run.py\", line 1430, in run\r\n    run_impl(runner, async_fn, args)\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/trio/_core/_run.py\", line 1579, in run_impl\r\n    runner.task_exited(task, final_outcome)\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/trio/_core/_run.py\", line 1050, in task_exited\r\n    task._cancel_stack[-1]._remove_task(task)\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/trio/_core/_run.py\", line 347, in _remove_task\r\n    self._tasks.remove(task)\r\nKeyError: <Task '__main__.main' at 0x7fcbea2a7198>\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 14, in <module>\r\n    trio.run(main)\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/trio/_core/_run.py\", line 1436, in run\r\n    ) from exc\r\ntrio.TrioInternalError: internal error in trio - please file a bug!\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1054", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1054/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1054/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1054/events", "html_url": "https://github.com/python-trio/trio/issues/1054", "id": 444919006, "node_id": "MDU6SXNzdWU0NDQ5MTkwMDY=", "number": 1054, "title": "fail_after raises TooSlow when it's cancelled", "user": {"login": "smurfix", "id": 236571, "node_id": "MDQ6VXNlcjIzNjU3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/236571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smurfix", "html_url": "https://github.com/smurfix", "followers_url": "https://api.github.com/users/smurfix/followers", "following_url": "https://api.github.com/users/smurfix/following{/other_user}", "gists_url": "https://api.github.com/users/smurfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/smurfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smurfix/subscriptions", "organizations_url": "https://api.github.com/users/smurfix/orgs", "repos_url": "https://api.github.com/users/smurfix/repos", "events_url": "https://api.github.com/users/smurfix/events{/privacy}", "received_events_url": "https://api.github.com/users/smurfix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-16T12:09:45Z", "updated_at": "2019-05-16T17:19:13Z", "closed_at": "2019-05-16T17:19:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This should not raise `TooSlow`. It wasn't. (Too slow, that is.)\r\n\r\n```\r\nimport trio\r\n\r\nasync def killed(task_status=trio.TASK_STATUS_IGNORED):\r\n    with trio.fail_after(2) as s:\r\n        task_status.started(s)\r\n        await trio.sleep(3)\r\n\r\nasync def test():\r\n    async with trio.open_nursery() as n:\r\n        s = await n.start(killed)\r\n        s.cancel()\r\n\r\ntrio.run(test)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1050", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1050/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1050/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1050/events", "html_url": "https://github.com/python-trio/trio/issues/1050", "id": 443106513, "node_id": "MDU6SXNzdWU0NDMxMDY1MTM=", "number": 1050, "title": "Strange behaviour on FreeBSD", "user": {"login": "novel", "id": 24848, "node_id": "MDQ6VXNlcjI0ODQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/24848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/novel", "html_url": "https://github.com/novel", "followers_url": "https://api.github.com/users/novel/followers", "following_url": "https://api.github.com/users/novel/following{/other_user}", "gists_url": "https://api.github.com/users/novel/gists{/gist_id}", "starred_url": "https://api.github.com/users/novel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/novel/subscriptions", "organizations_url": "https://api.github.com/users/novel/orgs", "repos_url": "https://api.github.com/users/novel/repos", "events_url": "https://api.github.com/users/novel/events{/privacy}", "received_events_url": "https://api.github.com/users/novel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-05-12T13:45:08Z", "updated_at": "2019-05-13T06:25:07Z", "closed_at": "2019-05-13T06:25:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looks like trio cannot poll file descriptors corresponding to devices in `/dev` on FreeBSD. Consider the following example:\r\n\r\n```\r\n#!/usr/bin/env python3.7\r\n\r\nimport asyncio\r\nimport sys\r\n\r\nimport trio\r\n\r\nasync def foo():\r\n    lock = asyncio.Lock()\r\n    async with lock:\r\n        with open(sys.argv[1], 'r') as f:\r\n            await trio.hazmat.wait_readable(f)\r\n    \r\n\r\nasync def main():\r\n    await foo()\r\n\r\nif __name__ == \"__main__\":\r\n    trio.run(main)\r\n```\r\n\r\nI can it use with e.g. text files:\r\n\r\n```\r\n$ ./trio_test.py /tmp/test.txt\r\n$\r\n```\r\n\r\nBut when i try to do it on some `/dev` entities, it fails:\r\n\r\n```\r\n$ ./trio_test.py /dev/random\r\nTraceback (most recent call last):\r\n  File \"./trio_test.py\", line 19, in <module>\r\n    trio.run(main)\r\n  File \"/usr/local/lib/python3.7/site-packages/trio-0.11.0+dev-py3.7.egg/trio/_core/_run.py\", line 1552, in run\r\n    raise runner.main_task_outcome.error\r\n  File \"./trio_test.py\", line 16, in main\r\n    await foo()\r\n  File \"./trio_test.py\", line 12, in foo\r\n    await trio.hazmat.wait_readable(f)\r\n  File \"/usr/local/lib/python3.7/site-packages/trio-0.11.0+dev-py3.7.egg/trio/_core/_io_kqueue.py\", line 131, in wait_readable\r\n    await self._wait_common(fd, select.KQ_FILTER_READ)\r\n  File \"/usr/local/lib/python3.7/site-packages/trio-0.11.0+dev-py3.7.egg/trio/_core/_io_kqueue.py\", line 120, in _wait_common\r\n    self._kqueue.control([event], 0)\r\nOSError: [Errno 19] Operation not supported by device\r\n```\r\n\r\nI tried to replicate this behavior using the C code:\r\n\r\n```#include <sys/event.h>\r\n#include <sys/time.h>\r\n\r\n#include <fcntl.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n\r\nint\r\nmain(int argc, char **argv)\r\n{\r\n   int f, kq, nev, ret = EXIT_FAILURE;\r\n   struct kevent change;\r\n   struct kevent event;\r\n\r\n   if (argc != 2)\r\n       return ret;\r\n\r\n   kq = kqueue();\r\n   if (kq == -1)\r\n       perror(\"kqueue\");\r\n\r\n   f = open(argv[1], O_RDONLY);\r\n   if (f == -1)\r\n       perror(\"open\");\r\n\r\n   EV_SET(&change, f, EVFILT_READ, EV_ADD | EV_ONESHOT, 0, 0, 0);\r\n\r\n   for (;;) {\r\n       nev = kevent(kq, &change, 1, &event, 1, NULL);\r\n       if (nev == -1)\r\n           perror(\"kevent\");\r\n       else if (nev > 0) {\r\n           printf(\"%s ready to read\\n\", argv[1]);\r\n           ret = EXIT_SUCCESS;\r\n           goto cleanup;\r\n       }\r\n   }\r\n\r\ncleanup:\r\n   close(kq);\r\n   close(f);\r\n   return EXIT_SUCCESS;\r\n}\r\n```\r\n\r\nAnd it works fine for both text files and `/dev` entities:\r\n\r\n```\r\n$ ./a.out /dev/random \r\n/dev/random ready to read\r\n$ ./a.out /tmp/test.txt \r\n/tmp/test.txt ready to read\r\n$\r\n```\r\n\r\nPS Forgot provide version information:\r\nFreeBSD 13.0-CURRENT amd64\r\nPython 3.7.3\r\ntrio: today's git version (same behavior observed with 0.11 and Python 3.6)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1045", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1045/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1045/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1045/events", "html_url": "https://github.com/python-trio/trio/issues/1045", "id": 441379302, "node_id": "MDU6SXNzdWU0NDEzNzkzMDI=", "number": 1045, "title": "How to implement custom context manager classes.", "user": {"login": "pipermerriam", "id": 824194, "node_id": "MDQ6VXNlcjgyNDE5NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/824194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pipermerriam", "html_url": "https://github.com/pipermerriam", "followers_url": "https://api.github.com/users/pipermerriam/followers", "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}", "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions", "organizations_url": "https://api.github.com/users/pipermerriam/orgs", "repos_url": "https://api.github.com/users/pipermerriam/repos", "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}", "received_events_url": "https://api.github.com/users/pipermerriam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-07T18:14:03Z", "updated_at": "2019-05-08T05:46:15Z", "closed_at": "2019-05-08T01:00:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to implement something along the lines of the following pattern which seems like it should be allowable under the philosophy of trio but I cannot seems to figure out a clean way to do it.\r\n\r\nI have a class which represents a *server* and I need to expose this API via two mechanisms which build on each other.\r\n\r\nFirst, an `await start(nursery)` and `await stop()` API for manual starting and stopping.\r\n\r\n```python\r\nasync def my_application():\r\n    server = Server()\r\n    async with trio.open_nursery() as nursery:\r\n        await server.start(nursery)\r\n        # ... do some things\r\n        await server.stop()\r\n```\r\n\r\nHowever, the above API is better managed using a context manager since forgetting to call `stop` is probably bad and we might forget to implement proper error handling to ensure stop is called even in cases where exceptions are raised.   To remedy this I want to expose this API using an async context manager.\r\n\r\n```python\r\nasync with Server():  # server starts on the way in\r\n    # server is running in this context....\r\n# server stops once context exits\r\n```\r\n\r\nIn order for the server to be running I need to start the server on the way into the context manager and stop it on the way out.\r\n\r\nThe code below is my best stab at this so far.\r\n\r\n```python\r\nclass Server:\r\n    async def start(self, nursery):\r\n        # This method lets us run the server with the expectation it would be explicitly stoped it later.\r\n        nursery.start_soon(self.run)\r\n\r\n    async def run(self):\r\n        # long running\r\n        while True:\r\n            ...\r\n\r\n    async def stop(self):\r\n        # make the server stop\r\n        ...\r\n\r\n    async def __aenter__(self):\r\n        nursery_manager = trio.open_nursery()\r\n        nursery = await nursery_manager.__aenter__()\r\n        await self.start(nursery)\r\n        self._nursery_manager = nursery_manager\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        try:\r\n            await self.stop()\r\n        finally:\r\n            await self._nursery_manager.__aexit__(exc_type, exc_value, exc_tb)\r\n```\r\n\r\nThis feels wrong.  I don't think I'm supposed to be interacting directly with the nursery manager class.  Any advice?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1044", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1044/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1044/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1044/events", "html_url": "https://github.com/python-trio/trio/issues/1044", "id": 441012390, "node_id": "MDU6SXNzdWU0NDEwMTIzOTA=", "number": 1044, "title": "Now that we have a mechanism for blocking subclassing, where should we use it?", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-05-07T03:45:19Z", "updated_at": "2020-05-12T07:38:20Z", "closed_at": "2020-05-12T07:38:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Followup to #1021 \r\n\r\nPossibly we should use it on... all classes? (Except ABCs.) Possibly not.\r\n\r\n----\r\n\r\n**Edit on 2020-05-07 to add more rationale:** The question here is about whether we should forbid subclassing on Trio classes.\r\n\r\nSubclassing is a controversial topic in general \u2013 some people argue that it's an anti-pattern in general; some think there are situations where it's appropriate. But I think even subclassing advocates mostly agree that subclassing only works well when the base class is *intentionally designed* to be subclassed. In particular, without this, you can easily create fragile coupling between the internals of the base class and the subclass. For example, let's say we have a base class that uses the common trick where one method is implemented using another:\r\n\r\n```python\r\nclass BaseClass:\r\n    def my_op_basic(self, *basic_args):\r\n        ...\r\n\r\n    def my_op_extended(self, *extended_args):\r\n        basic_args = process_extended_args(*extended_args)\r\n        return self.my_op_basic(*basic_args)\r\n```\r\n\r\nIf you make a subclass and want to customize how all the different `my_op` variations work, the obvious  probably just override `my_op_basic`, because that automatically covers both cases:\r\n\r\n```python\r\nclass SubClass(BaseClass):\r\n    def my_op_basic(self, *basic_args):\r\n        # ... custom logic here ...\r\n\r\n    # no override for my_op_extended; base class version is fine\r\n```\r\n\r\nWe test it, and it works great: our custom logic runs on `SubClass.my_op_basic` *and* `SubClass.my_op_extended`, because `BaseClass.my_op_extended` internally invokes `SubClass.my_op_basic`. But then, someone refactors `BaseClass`, and moves the main logic into `my_op_extended`:\r\n\r\n```python\r\nclass BaseClass:  # version 2\r\n    def my_op_basic(self, *basic_args):\r\n        extended_args = process_basic_args(*basic_args)\r\n        return self.my_op_extended(*extended_args)\r\n\r\n    def my_op_extended(self, *extended_args):\r\n        ...\r\n```\r\n\r\nNow, `BaseClass`'s public API hasn't changed at all \u2013 but this internal refactoring is still a breaking change for `SubClass`! Now calls to `SubClass.my_op_basic` will invoke the custom logic, but calls to `SubClass.my_op_extended` won't!\r\n\r\nThe point is: subclasses don't just rely on base class public APIs; they also rely on details of how the base class methods are *implemented*. And then something that *looks* like an innocent refactoring suddenly becomes a breaking change. That can be fine in some cases: if both classes are in the same project, then the tests will probably catch it and you can refactor `SubClass` as well. Or, if the base class was explicitly designed for subclassing so these internal implementation details are documented as part of the public API, then it's not an issue.\r\n\r\nBut for most of the classes that Trio exports as part of its public API, the potential subclassers are Trio's users, and we can't see their code. So if we do an innocent-looking refactoring and it breaks our users code, we have no way to notice that until we ship and their system falls over. And, most of the classes we export aren't carefully designed with subclassing in mind \u2013 that takes a lot of work, and isn't useful in most cases. (The main exception are the classes in `trio.abc`, which *are* explicitly designed with subclassing in mind, and their inter-method dependencies are explicitly documented.)\r\n\r\nWe make promises to our users about API stability. For most of our classes, if users are subclassing them, those promises are currently a lie \u2013 we actually have no idea which of our changes might break user code. Lying is bad. It's better to explicitly disable subclassing and give users a clear error up front, instead of letting them ship code that relies on subclassing and then starts failing in mysterious ways.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1034", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1034/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1034/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1034/events", "html_url": "https://github.com/python-trio/trio/issues/1034", "id": 439569465, "node_id": "MDU6SXNzdWU0Mzk1Njk0NjU=", "number": 1034, "title": "dependabot broken by obscure pip-compile / py37 issues", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-02T12:40:06Z", "updated_at": "2019-05-03T04:37:39Z", "closed_at": "2019-05-03T04:37:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I still don't fully understand what's going on here, but see #1032 for discussion and #1033 for proof that until we have a solution all our dependabot updates are broken. Opening a new issue too better reflect the problem and to improve our chances of finding it later if we have to.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1031", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1031/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1031/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1031/events", "html_url": "https://github.com/python-trio/trio/issues/1031", "id": 437993511, "node_id": "MDU6SXNzdWU0Mzc5OTM1MTE=", "number": 1031, "title": "Add trio documentation to devdocs", "user": {"login": "math2001", "id": 15224242, "node_id": "MDQ6VXNlcjE1MjI0MjQy", "avatar_url": "https://avatars3.githubusercontent.com/u/15224242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/math2001", "html_url": "https://github.com/math2001", "followers_url": "https://api.github.com/users/math2001/followers", "following_url": "https://api.github.com/users/math2001/following{/other_user}", "gists_url": "https://api.github.com/users/math2001/gists{/gist_id}", "starred_url": "https://api.github.com/users/math2001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/math2001/subscriptions", "organizations_url": "https://api.github.com/users/math2001/orgs", "repos_url": "https://api.github.com/users/math2001/repos", "events_url": "https://api.github.com/users/math2001/events{/privacy}", "received_events_url": "https://api.github.com/users/math2001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-27T23:21:22Z", "updated_at": "2019-04-28T09:16:06Z", "closed_at": "2019-04-28T07:35:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Over the past few days, I've been adding (locally) the `trio` documentation to [devdocs](https://devdocs.io), an \"API Documentation Browser\", and testing it out. It makes it much faster to search for functions and methods documentation, here's a quick gif:\r\n\r\n![trio-devdocs](https://user-images.githubusercontent.com/15224242/56855356-0792ad80-6989-11e9-959b-af0c6a06a4e8.gif)\r\n\r\n*Note: the icon is just local. Once merged into devdocs, it'll be the proper one*.\r\n\r\nI figured I'd just make sure it's OK with everyone.\r\n\r\nHere are the pages I've included:\r\n\r\n- Trio\u2019s core functionality\r\n- I/O in trio\r\n- Introspecting and extending Trio with trio.hazmat\r\n- Testing made easier with trio.testing\r\n\r\nAll the other ones don't document any API, so I think people should refer to the real docs.\r\n\r\nI'm not sure what the footer should be though. For each pages, `devdocs` displays a little footer with the copyright infos. For Python for example:\r\n\r\n![image](https://user-images.githubusercontent.com/15224242/56855463-dadf9580-698a-11e9-9d4f-08142991a0d1.png)\r\n\r\nI used this for trio:\r\n\r\n```\r\n\u00a9 2017-2019 Nathaniel J. Smith\r\nLicensed under MIT and Apache2.\r\n```\r\n\r\nIf that's good, then I think everything should be cool, and I can submit my PR :-)\r\n\r\n@njsmith could you close this issue when you think everything's fine?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1030", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1030/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1030/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1030/events", "html_url": "https://github.com/python-trio/trio/issues/1030", "id": 437901879, "node_id": "MDU6SXNzdWU0Mzc5MDE4Nzk=", "number": 1030, "title": "Update readthedocs configuration version", "user": {"login": "tjstum", "id": 2078454, "node_id": "MDQ6VXNlcjIwNzg0NTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2078454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjstum", "html_url": "https://github.com/tjstum", "followers_url": "https://api.github.com/users/tjstum/followers", "following_url": "https://api.github.com/users/tjstum/following{/other_user}", "gists_url": "https://api.github.com/users/tjstum/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjstum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjstum/subscriptions", "organizations_url": "https://api.github.com/users/tjstum/orgs", "repos_url": "https://api.github.com/users/tjstum/repos", "events_url": "https://api.github.com/users/tjstum/events{/privacy}", "received_events_url": "https://api.github.com/users/tjstum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 639585223, "node_id": "MDU6TGFiZWw2Mzk1ODUyMjM=", "url": "https://api.github.com/repos/python-trio/trio/labels/docs", "name": "docs", "color": "fef2c0", "default": false, "description": null}, {"id": 1347511324, "node_id": "MDU6TGFiZWwxMzQ3NTExMzI0", "url": "https://api.github.com/repos/python-trio/trio/labels/project%20meta", "name": "project meta", "color": "e086c5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-27T03:39:05Z", "updated_at": "2019-10-01T16:24:24Z", "closed_at": "2019-10-01T16:24:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "While researching #1026 and #1029, I came across [a warning](https://docs.readthedocs.io/en/latest/config-file/v1.html) that v1 of the readthedocs yaml file, the version that trio uses, \"shouldn't be used.\"\r\n\r\nThe [migration path](https://docs.readthedocs.io/en/latest/config-file/v2.html#migrating-from-v1) looks pretty straightforward: change the spelling of `requirements_file` and `pip_install`\r\n\r\nI'm happy to have a go at it, but I figured I would open an issue and make sure this is what we want and I'm not missing something, since there is discussion about a web interface, and I'm still learning my way around RTD. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1021", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1021/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1021/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1021/events", "html_url": "https://github.com/python-trio/trio/issues/1021", "id": 436498855, "node_id": "MDU6SXNzdWU0MzY0OTg4NTU=", "number": 1021, "title": "Let's get serious about handling private constructors and preventing subclassing", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-24T05:06:44Z", "updated_at": "2019-06-09T05:25:03Z", "closed_at": "2019-06-09T05:24:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In Trio we're pretty careful about our public API, because if it takes off then we want to defend ourselves against [Hyrum's law](http://www.hyrumslaw.com/). And because some of its internal state really is pretty delicate.\r\n\r\nOne consequence: we're kind of protective of some internal classes. For example, nurseries and cancel scopes both originally had no public class at all, because we didn't want to have a public constructor, or allow subclassing. (Even if not everyone shares my opinion that subclassing is a bad idea in general, I think it is at least generally agreed that you shouldn't subclass a type unless that type was intentionally written to enable subclassing, and these types definitely were not.)\r\n\r\nNow, cancel scopes have gained a public constructor, and become a public class. And we want to make nurseries a public class too, to enable type annotations (#778). And I forget where now, but I saw someone post some sample code that subclassed `CancelScope`, and it was scary :-). So, we need to rethink this.\r\n\r\nSo, proposal: Come up with one metaclass/decorator/something that prevents subclassing, and one that prevents subclassing + hides the constructor. Use these for `CancelScope`, `Nursery`, etc. (And maybe everything else too!)\r\n\r\n# Preventing subclassing\r\n\r\nIn 3.6+, this is easy using [PEP 487](https://www.python.org/dev/peps/pep-0487/):\r\n\r\n```python\r\nclass Blah:\r\n    def __init_subclass__(cls):\r\n        raise TypeError(\"subclassing not supported\")\r\n```\r\n\r\nYou could also easily define a `@final` decorator to inject this into a class when it's defined. [PEP 591](https://www.python.org/dev/peps/pep-0591/) proposes to add a similar `@final` decorator, which works statically, rather than dynamically. You could combine the two using something like:\r\n\r\n```python\r\nif TYPE_CHECKING:\r\n    # static version\r\n    from typing import final\r\nelse:\r\n    # runtime version\r\n    from ._util import final\r\n```\r\n\r\nHowever, for now we still need to support Python 3.5, which is a bit trickier. On 3.5 it requires defining a custom metaclass. Something like:\r\n\r\n```python\r\nclass Final(type):\r\n    def __new__(cls, name, bases, cls_namespace):\r\n        for base in bases:\r\n            if isinstance(base, Final):\r\n                raise TypeError(f\"{base.__name__} doesn't support subclassing\")\r\n        return type(name, bases, cls_namespace)\r\n```\r\n\r\nIt's not as easy to inject a metaclass using a decorator (it requires reconstructing the class object), but it's easy to use like:\r\n\r\n```python\r\n@typing.final\r\nclass Nursery(metaclass=Final):\r\n    ...\r\n```\r\n\r\n# No public constructor\r\n\r\nSay we have a normal class:\r\n\r\n```python\r\nclass NormalClass:\r\n    def __init__(self, ...):\r\n        ...\r\n```\r\n\r\nWhen we call `NormalClass(...)`, that invokes `type(NormalClass).__call__(...)` (this is the same as calling any object in python!). Since `type(NormalClass is type`, this does `type.__call__`. And then `type.__call__` implements all the logic we expect: calling `NormalClass.__new__` and `NormalClass.__init__`, etc.\r\n\r\nNow, we want to define a special class, where `SpecialClass(...)` raises an exception, but we can still construct new instances of `SpecialClass` \u2013 maybe via `SpecialClass._create(...)`.\r\n\r\n```python\r\nclass NoPublicConstructor(type):\r\n    def __call__(self, *args, **kwargs):\r\n        raise TypeError(\"no public constructor\")\r\n\r\n    def _create(self, *args, **kwargs):\r\n        return super().__call__(*args, **kwargs)\r\n\r\nclass SpecialClass(metaclass=NoPublicConstructor):\r\n    def __init__(self, ...):\r\n        # the class body looks totally normal\r\n        # you just have to construct it using SpecialClass._create\r\n```\r\n\r\n# Combining them\r\n\r\nOn 3.6+, then it's pretty easy to treat these as orthogonal: you can use a decorator to inject `__init_subclass__`, and then separately use `metaclass=NoPublicConstructor`. And if PEP 591 is accepted then this is probably ideal. So defining a class with both features would look like:\r\n\r\n```python\r\n@final\r\nclass ExtraSpecialClass(metaclass=NoPublicConstructor):\r\n    ...\r\n```\r\n\r\nTo support 3.5, they both have to use a metaclass, and a class can only have one metaclass. In practice, everywhere we want to use `NoPublicConstructor`, we also want to forbid subclassing. So the simplest thing would be to make `NoPublicConstructor` a subclass of `Final` (ironic!). And then you'd use them like:\r\n\r\n```python\r\n# Final class with public constructor\r\n@typing.final  # purely for mypy's benefit\r\nclass FinalClass(metaclass=Final):\r\n    ...\r\n\r\n# Final class with no public constructor\r\n@typing.final  # purely for mypy's benefit\r\nclass ExtraSpecialClass(metaclass=NoPublicConstructor):\r\n    ...\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1017", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1017/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1017/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1017/events", "html_url": "https://github.com/python-trio/trio/issues/1017", "id": 435626930, "node_id": "MDU6SXNzdWU0MzU2MjY5MzA=", "number": 1017, "title": "In trio/*.py, when possible, use public names instead of trio._core.*", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-22T07:13:36Z", "updated_at": "2019-05-01T21:08:43Z", "closed_at": "2019-05-01T21:08:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In this recent forum post, @math2001 was wondering how to implement something like `trio.move_on_after`, so they looked at the source... and saw a reference to `_core.current_time()`, which made them think that it was using spooky private APIs: https://trio.discourse.group/t/how-to-access-the-current-run-s-clock/163\r\n\r\nOf course, that's not the goal. Nothing in the `trio._core.*` API is actually private \u2013 it all gets re-exported from `trio.*`, `trio.hazmat.*`, or `trio.testing.*`, and the whole point of having a `_core` API layer [is to make sure that it *is* possible to implement your own versions of things like `move_on_after`](https://trio.readthedocs.io/en/latest/design.html#a-brief-tour-of-trio-s-internals). But there's no way @math2001 could have known that when they dug into the code :-). And if `move_on_after` had used `trio.current_time()` instead of `_core.current_time()`, then the confusion could have been avoided.\r\n\r\nSo probably we should do a pass through the files in `trio/*.py`, and replace references to `_core.*` with `trio.*` or `trio.hazmat.*` as appropriate. There might be some places where this is difficult or annoying (e.g. when implementing trio itself you can't necessarily replace `from ._core import <names>` with `from trio import <names>`, because of circular import issues), but for files like `trio/_timeouts.py` this would be easy to do.\r\n\r\nMarking \"good first issue\" because it's pretty straightforward. For example, in `trio/_timeouts.py`, it'd be a matter of:\r\n\r\n1. Replacing `from . import _core` with `import trio`\r\n2. Replacing references to `_core.current_time` \u2192 `trio.current_time`, `_core.CancelScope` \u2192 `trio.CancelScope`\r\n\r\nThere are a bunch of files to look through, but for a first issue it'd be fine to just pick one to start with.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1014", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1014/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1014/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1014/events", "html_url": "https://github.com/python-trio/trio/issues/1014", "id": 435515972, "node_id": "MDU6SXNzdWU0MzU1MTU5NzI=", "number": 1014, "title": "CancelScope(shield=True) protects nonmain tasks from KeyboardInterrupt", "user": {"login": "astiob", "id": 515193, "node_id": "MDQ6VXNlcjUxNTE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/515193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astiob", "html_url": "https://github.com/astiob", "followers_url": "https://api.github.com/users/astiob/followers", "following_url": "https://api.github.com/users/astiob/following{/other_user}", "gists_url": "https://api.github.com/users/astiob/gists{/gist_id}", "starred_url": "https://api.github.com/users/astiob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astiob/subscriptions", "organizations_url": "https://api.github.com/users/astiob/orgs", "repos_url": "https://api.github.com/users/astiob/repos", "events_url": "https://api.github.com/users/astiob/events{/privacy}", "received_events_url": "https://api.github.com/users/astiob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-21T14:39:04Z", "updated_at": "2019-04-21T23:54:12Z", "closed_at": "2019-04-21T23:54:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using CPython 3.6.5 and trio 0.11.0 on openSUSE Leap 42.3, the following code keeps running `foo` forever even after multiple keyboard interrupts:\r\n\r\n```python\r\nimport trio\r\n\r\nasync def foo():\r\n    try:\r\n        with trio.CancelScope(shield=True):\r\n            i = 0\r\n            while True:\r\n                i += 1\r\n                if i == 1000:\r\n                    await trio.sleep(0)\r\n                    i = 0\r\n    except BaseException as e:\r\n        print('foo got exception: %r' % e)\r\n        raise\r\n    else:\r\n        print('foo exiting normally')\r\n\r\nasync def main():\r\n    async with trio.open_nursery() as nursery:\r\n        nursery.start_soon(foo)\r\n\r\ntrio.run(main)\r\n```\r\n\r\nFor reference, here\u2019s how it interacts with `@trio.hazmat.enable_ki_protection`:\r\n\r\n* Adding `@trio.hazmat.enable_ki_protection` to `foo` and keeping the shielding changes nothing.\r\n* Adding `@trio.hazmat.enable_ki_protection` and removing shielding makes it get a `Cancelled` exception from `await trio.sleep(0)`.\r\n* Removing both allows it to get `KeyboardInterrupt` anywhere or `Cancelled` from `await trio.sleep(0)`.\r\n\r\nIn my real use-case this is actually _desired_ behaviour as I want a certain task to run to completion, including all async operations it performs, regardless of any keyboard interrupts; but it seems this behaviour is not documented.\r\n\r\nFurthermore, it is inconsistent with the main task (is that the right term?) that is executed by `trio.run`: replacing `trio.run(main)` with `trio.run(foo)` makes `foo` _always_ get `KeyboardInterrupt` regardless of the shielding, either anywhere (without `@trio.hazmat.enable_ki_protection`) or exactly from `await trio.sleep(0)` (with `@trio.hazmat.enable_ki_protection`).\r\n\r\nI tried to search for this and saw #151, but it\u2019s not clear to me whether it says the same thing about the main task (and implies that this is the intended behaviour in descendant tasks) or that shielded scopes never protect against `KeyboardInterrupt` (which is clearly not the case).\r\n\r\nIf this behaviour is intended, it would be good to make it clear in the documentation. All I saw about shielded scopes is that they protect from `Cancelled`. Meanwhile, `@trio.hazmat.enable_ki_protection` didn\u2019t make it clear whether the task would actually get a `KeyboardInterrupt` from `await <checkpoint>` or just allow a `KeyboardInterrupt` to be raised after it yields control back to the event loop, in which case it might get cancelled by its parent nursery but be able to shield itself. (However, even if `@trio.hazmat.enable_ki_protection` is indeed supposed to turn interrupts into cancels, it is still not clear why shielding _alone_ protects me from interrupts.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1009", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1009/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1009/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1009/events", "html_url": "https://github.com/python-trio/trio/issues/1009", "id": 434511076, "node_id": "MDU6SXNzdWU0MzQ1MTEwNzY=", "number": 1009, "title": "return statement in a running nursery doesn't stop the function", "user": {"login": "math2001", "id": 15224242, "node_id": "MDQ6VXNlcjE1MjI0MjQy", "avatar_url": "https://avatars3.githubusercontent.com/u/15224242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/math2001", "html_url": "https://github.com/math2001", "followers_url": "https://api.github.com/users/math2001/followers", "following_url": "https://api.github.com/users/math2001/following{/other_user}", "gists_url": "https://api.github.com/users/math2001/gists{/gist_id}", "starred_url": "https://api.github.com/users/math2001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/math2001/subscriptions", "organizations_url": "https://api.github.com/users/math2001/orgs", "repos_url": "https://api.github.com/users/math2001/repos", "events_url": "https://api.github.com/users/math2001/events{/privacy}", "received_events_url": "https://api.github.com/users/math2001/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 639585223, "node_id": "MDU6TGFiZWw2Mzk1ODUyMjM=", "url": "https://api.github.com/repos/python-trio/trio/labels/docs", "name": "docs", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-17T22:22:33Z", "updated_at": "2019-04-26T00:26:45Z", "closed_at": "2019-04-26T00:26:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Firstly, thank you so much for trio, it's absolutely awesome \u2764\ufe0f \r\n\r\nA return statement in a nursery doesn't exit the function straight away, it still waits for the nursery to be done. So for example:\r\n\r\n```python\r\nasync def main():\r\n    async with trio.open_nursery() as nursery:\r\n        nursery.start_soon(trio.sleep, 5)\r\n        await trio.sleep(1)\r\n        print(\"returning\")\r\n        return # expected to cancel the nursery, but doesn't\r\n\r\n    print(\"I'm never printed\") # that's normal\r\n```\r\n\r\nThis code would exit after 5 seconds, not 1 second. To make it stop at 1 second, we have to cancel it manually (which I thought was going to be done by trio):\r\n\r\n```python\r\nreturn nursery.cancel_scope.cancel()\r\n```\r\n\r\nSo, I'm not sure if this is known, or if it should be changed, or if I'm missing something but I think it should be part of the documentation somewhere in the [nursery section](https://trio.readthedocs.io/en/latest/reference-core.html#tasks-let-you-do-multiple-things-at-once).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1008", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1008/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1008/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1008/events", "html_url": "https://github.com/python-trio/trio/issues/1008", "id": 434229849, "node_id": "MDU6SXNzdWU0MzQyMjk4NDk=", "number": 1008, "title": "Docs on CancelScope contradictory", "user": {"login": "Brandon-Jeffrey-Vibrant-Media", "id": 38462435, "node_id": "MDQ6VXNlcjM4NDYyNDM1", "avatar_url": "https://avatars1.githubusercontent.com/u/38462435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Brandon-Jeffrey-Vibrant-Media", "html_url": "https://github.com/Brandon-Jeffrey-Vibrant-Media", "followers_url": "https://api.github.com/users/Brandon-Jeffrey-Vibrant-Media/followers", "following_url": "https://api.github.com/users/Brandon-Jeffrey-Vibrant-Media/following{/other_user}", "gists_url": "https://api.github.com/users/Brandon-Jeffrey-Vibrant-Media/gists{/gist_id}", "starred_url": "https://api.github.com/users/Brandon-Jeffrey-Vibrant-Media/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Brandon-Jeffrey-Vibrant-Media/subscriptions", "organizations_url": "https://api.github.com/users/Brandon-Jeffrey-Vibrant-Media/orgs", "repos_url": "https://api.github.com/users/Brandon-Jeffrey-Vibrant-Media/repos", "events_url": "https://api.github.com/users/Brandon-Jeffrey-Vibrant-Media/events{/privacy}", "received_events_url": "https://api.github.com/users/Brandon-Jeffrey-Vibrant-Media/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 639585223, "node_id": "MDU6TGFiZWw2Mzk1ODUyMjM=", "url": "https://api.github.com/repos/python-trio/trio/labels/docs", "name": "docs", "color": "fef2c0", "default": false, "description": null}, {"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-17T11:23:05Z", "updated_at": "2019-04-24T02:32:01Z", "closed_at": "2019-04-24T02:32:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "In [https://trio.readthedocs.io/en/latest/reference-core.html](https://trio.readthedocs.io/en/latest/reference-core.html) the documentation on `CancelScope`s is contradictory. In the introduction it says:\r\n\r\n> Cancel scopes are not reusable or reentrant; that is, each cancel scope can be used for at most one with block. (You\u2019ll get a RuntimeError if you violate this rule.)\r\n\r\nIn the section on `cancelled_caught `it says:\r\n\r\n> If the same CancelScope is reused for multiple with blocks, the cancelled_caught attribute applies to the most recent with block. (It is reset to False each time a new with block is entered.)\r\n\r\nThe first firmly states that the conditions described in the second are impossible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1005", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1005/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1005/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1005/events", "html_url": "https://github.com/python-trio/trio/issues/1005", "id": 433312591, "node_id": "MDU6SXNzdWU0MzMzMTI1OTE=", "number": 1005, "title": "TypeError: unhashable type: 'Argh'", "user": {"login": "joernheissler", "id": 865592, "node_id": "MDQ6VXNlcjg2NTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/865592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joernheissler", "html_url": "https://github.com/joernheissler", "followers_url": "https://api.github.com/users/joernheissler/followers", "following_url": "https://api.github.com/users/joernheissler/following{/other_user}", "gists_url": "https://api.github.com/users/joernheissler/gists{/gist_id}", "starred_url": "https://api.github.com/users/joernheissler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joernheissler/subscriptions", "organizations_url": "https://api.github.com/users/joernheissler/orgs", "repos_url": "https://api.github.com/users/joernheissler/repos", "events_url": "https://api.github.com/users/joernheissler/events{/privacy}", "received_events_url": "https://api.github.com/users/joernheissler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-04-15T14:26:25Z", "updated_at": "2019-05-02T20:56:05Z", "closed_at": "2019-05-02T20:56:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python3\r\n#!/usr/bin/env python3.7\r\n\r\nfrom typing import Any\r\nimport trio\r\n\r\nclass Argh(Exception):\r\n    code: int\r\n\r\n    def __init__(self, code: int) -> None:\r\n        super().__init__()\r\n        self.code = code\r\n\r\n    def __eq__(self, other: Any) -> bool:\r\n        if not isinstance(other, Argh):\r\n            return False\r\n\r\n        return self.code == other.code\r\n\r\n    def __repr__(self) -> str:\r\n        return f'Argh(code={self.code})'\r\n\r\n    def __str__(self) -> str:\r\n        return repr(self)\r\n\r\n\r\nasync def die() -> None:\r\n    raise Argh(844)\r\n\r\n\r\nasync def main() -> None:\r\n    async with trio.open_nursery() as nursery:\r\n        nursery.start_soon(die)\r\n\r\n\r\ntrio.run(main)\r\n```\r\n\r\nResults in:\r\n```\r\nTraceback (most recent call last):\r\n  File \"destroy.py\", line 35, in <module>\r\n    trio.run(main)\r\n  File \"/home/joern/.venv/trio/lib/python3.7/site-packages/trio/_core/_run.py\", line 1444, in run\r\n    raise runner.main_task_outcome.error\r\n  File \"destroy.py\", line 32, in main\r\n    nursery.start_soon(die)\r\n  File \"/home/joern/.venv/trio/lib/python3.7/site-packages/trio/_core/_run.py\", line 496, in __aexit__\r\n    combined_error_from_nursery = self._scope._close(new_exc)\r\n  File \"/home/joern/.venv/trio/lib/python3.7/site-packages/trio/_core/_run.py\", line 372, in _close\r\n    exc = MultiError.filter(self._exc_filter, exc)\r\n  File \"/home/joern/.venv/trio/lib/python3.7/site-packages/trio/_core/_multierror.py\", line 209, in filter\r\n    return _filter_impl(handler, root_exc)\r\n  File \"/home/joern/.venv/trio/lib/python3.7/site-packages/trio/_core/_multierror.py\", line 111, in _filter_impl\r\n    push_tb_down(None, root_exc, preserved)\r\n  File \"/home/joern/.venv/trio/lib/python3.7/site-packages/trio/_core/_multierror.py\", line 104, in push_tb_down\r\n    push_tb_down(new_tb, child_exc, preserved)\r\n  File \"/home/joern/.venv/trio/lib/python3.7/site-packages/trio/_core/_multierror.py\", line 99, in push_tb_down\r\n    if exc in preserved:\r\nTypeError: unhashable type: 'Argh'\r\n```\r\n\r\nMy Exception type is not hashable. In the real use case I get even uglier errors like `TrioInternalError`. Making the exception type hashable seems to resolve all issues.\r\n\r\nBut why does trio require hashable exceptions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/1000", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/1000/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/1000/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/1000/events", "html_url": "https://github.com/python-trio/trio/issues/1000", "id": 430782407, "node_id": "MDU6SXNzdWU0MzA3ODI0MDc=", "number": 1000, "title": "[reserved]", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-09T06:05:06Z", "updated_at": "2019-04-09T06:05:11Z", "closed_at": "2019-04-09T06:05:11Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "OK we don't really need any more reserved issues but how could I not.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/991", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/991/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/991/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/991/events", "html_url": "https://github.com/python-trio/trio/issues/991", "id": 429559398, "node_id": "MDU6SXNzdWU0Mjk1NTkzOTg=", "number": 991, "title": "Equivalent of asyncio.call_soon_threadsafe while still having explicit responibility for errors", "user": {"login": "0zeroth", "id": 8716660, "node_id": "MDQ6VXNlcjg3MTY2NjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8716660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0zeroth", "html_url": "https://github.com/0zeroth", "followers_url": "https://api.github.com/users/0zeroth/followers", "following_url": "https://api.github.com/users/0zeroth/following{/other_user}", "gists_url": "https://api.github.com/users/0zeroth/gists{/gist_id}", "starred_url": "https://api.github.com/users/0zeroth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0zeroth/subscriptions", "organizations_url": "https://api.github.com/users/0zeroth/orgs", "repos_url": "https://api.github.com/users/0zeroth/repos", "events_url": "https://api.github.com/users/0zeroth/events{/privacy}", "received_events_url": "https://api.github.com/users/0zeroth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-04-05T02:38:33Z", "updated_at": "2019-05-02T21:02:44Z", "closed_at": "2019-05-02T21:02:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologies for the lack of a reproducible example  - I had trouble faking an API that was as badly behaved as the 3rd party API that I am stuck with! I'm hoping the following description will be sufficient to get some useful help. If not, I can chip a way at trying to reproduce the behaviour.\r\n\r\nThe `stop` function is badly behaved - it consistently causes the `_callback_threadsafe` to be called before it returns. How do we handle this in trio? (a detailed explanation follows)\r\n\r\n```\r\nimport trio\r\n\r\nclass BadApi:\r\n    \"\"\"\r\n    __init__ with a callback that will be called at arbitrary times from arbitrary threads\r\n\r\n    start() must be called first, then AFTER callback('started') has been called,\r\n    further calls can be made\r\n\r\n    request(id, payload) will cause callback('response', id, response_payload) to be called\r\n\r\n    stop() must be called, and then AFTER callback('stoppped') has been called we know all threads\r\n    have been killed. (failing to call stop causes app to hang because threads are not dead)\r\n    \"\"\"\r\n\r\n    def __init__(self, callback): ...\r\n    def start(self): ...\r\n    def stop(self): ...\r\n    def request(self, id, payload): ...\r\n\r\n\r\n\r\nclass TrioApi:\r\n\r\n    def __init__(self):\r\n        self._api = BadApi(self._callback_threadsafe)\r\n        self._started = trio.Event()\r\n        self._stopped = trio.Event()\r\n        self._portal = None\r\n\r\n    async def start(self):\r\n        self._portal = trio.BlockingTrioPortal()\r\n        self._api.start()   # This returns BEFORE _callback_threadsafe executes on another thread\r\n        await self._started.wait()\r\n\r\n    async def stop(self):\r\n        self._api.stop()    # This does not return - we end up stuck in _callback_threadsafe\r\n        await self._stopped.wait()\r\n\r\n    async def request(self, id, payload):\r\n        # See https://github.com/python-trio/trio/issues/467\r\n        #   Add \"one obvious way\" for implementing the common multiplexed request/response pattern\r\n        pass\r\n\r\n    def _callback_threadsafe(self, , *args):\r\n        print('_callback_threadsafe')\r\n        self._portal.run_sync(self._callback, *args)\r\n\r\n    def _callback(self, msg_type, id=None, payload=None):\r\n        print(f'_callback {msg_type}')\r\n        if msg_type == 'started':\r\n            self._started.set()\r\n        elif msg_type == 'stopped':\r\n            self._stopped.set()\r\n        else:\r\n            pass  # Handle the response\r\n\r\n\r\nasync def main():\r\n    api = TrioApi()\r\n    await api.start()\r\n    await trio.sleep(1.)\r\n    await api.stop()\r\n\r\ntrio.run(main)\r\n\r\n# Output (with commentary):\r\n#   _api.start()                     (trio thread)\r\n#   _callback_threadsafe      (api thread)\r\n#   _callback started            (trio thread)\r\n#   _callback_threadsafe      (api thread) <-- here is the point we called stop() - _api.stop() never returned\r\n```\r\n\r\nThe `start` function works as expected. The `_api.start()` function returns, and then at a later time, on another thread our `_callback_threadsafe` function is called and we schedule `_callback` across to the trio thread which sets our event.\r\n\r\nThe `stop` function is badly behaved - it consistently causes the `_callback_threadsafe` to be called before it returns, and will not return until `_callback_threadsafe` returns. So it decides to act synchronously despite being documented otherwise. As far as I can tell, this causes a deadlock because trio is waiting for `Api.stop()` to finish, which is waiting for `BadApi.stop()`, which is waiting for the `_callback` to finish, which is waiting for `BlockingTrioPortal.run_sync` to finish. But `run_sync` cannot finish, because trio never gets the chance to schedule `_callback`.\r\n\r\nHaving the `BlockingTrioPortal` block (the clue is in the name!) is consistent with the trio philosophy of not dropping errors: if we didn't block, how would we know if an error had occured in `_callback`? So, perhaps running the `_callback` is actually a type of task, and should be handed off to a nursery. I tried that: give the `TrioApi` a nursery object, and then use something like (pseudo-code, a little `async` needs to sprinkled into the `TrioApi`):\r\n```\r\nself._portal.run_sync(\r\n    lambda: self._nursery.start_soon(self._callback, *args)\r\n```\r\n\r\nThis did not work for me - and at this point I'm not sure if I've just got some silly mistake, or am going about this completely the wrong way.\r\n\r\nMy intention is palm responsibility for errors onto the nursery. `call_soon` should return immediately, allowing the `_portal.run_sync` to complete. Then the nursery can be configured to handle errors in a sensible way.\r\n\r\nTo sum up: how can we schedule a call on the trio thread in a similar way to `asyncio`s `call_soon_threadsafe`, but staying within the philosophy of `trio`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/982", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/982/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/982/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/982/events", "html_url": "https://github.com/python-trio/trio/issues/982", "id": 423313082, "node_id": "MDU6SXNzdWU0MjMzMTMwODI=", "number": 982, "title": "Steal anyio's create_tcp_server", "user": {"login": "smurfix", "id": 236571, "node_id": "MDQ6VXNlcjIzNjU3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/236571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smurfix", "html_url": "https://github.com/smurfix", "followers_url": "https://api.github.com/users/smurfix/followers", "following_url": "https://api.github.com/users/smurfix/following{/other_user}", "gists_url": "https://api.github.com/users/smurfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/smurfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smurfix/subscriptions", "organizations_url": "https://api.github.com/users/smurfix/orgs", "repos_url": "https://api.github.com/users/smurfix/repos", "events_url": "https://api.github.com/users/smurfix/events{/privacy}", "received_events_url": "https://api.github.com/users/smurfix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-20T15:21:38Z", "updated_at": "2019-05-02T21:08:13Z", "closed_at": "2019-05-02T21:08:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "anyio's TCP server wrapper is used like this:\r\n\r\n```\r\n            async with await anyio.create_tcp_server(**args) as server:\r\n                async for client in server.accept_connections():\r\n                    await do_whatever_with(client)\r\n```\r\n\r\nIMHO this is a more trio-ish interface than `trio.serve_tcp` because you instead of passing what amounts to a callback to something that doesn't return, you have clear flow of control and can start a new thread (or not) on your own, which is a good idea when you need to limit the server's connection rate.\r\n\r\nanyio's implementation isn't as nice as we'd like because it only uses one socket instead of binding to every address the parameters tell it to, but that should be fixable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/980", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/980/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/980/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/980/events", "html_url": "https://github.com/python-trio/trio/issues/980", "id": 422041186, "node_id": "MDU6SXNzdWU0MjIwNDExODY=", "number": 980, "title": "Dependabot can't evaluate your Python dependency files", "user": {"login": "dependabot-preview[bot]", "id": 27856297, "node_id": "MDM6Qm90Mjc4NTYyOTc=", "avatar_url": "https://avatars3.githubusercontent.com/in/2141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dependabot-preview%5Bbot%5D", "html_url": "https://github.com/apps/dependabot-preview", "followers_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/followers", "following_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/repos", "events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-18T05:18:29Z", "updated_at": "2019-03-18T14:25:39Z", "closed_at": "2019-03-18T14:00:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Dependabot can't evaluate your Python dependency files.\n\nAs a result, Dependabot couldn't check whether any of your dependencies are out-of-date.\n\nThe error Dependabot encountered was:\n\n```\nInstallationError(\"Invalid requirement: 'it's possible from extension/configuration modules to get sphinx to'\\nIt looks like a path. File 'it's possible from extension/configuration modules to get sphinx to' does not exist.\",)\n```\n\nYou can mention @dependabot in the comments below to contact the Dependabot team.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/960", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/960/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/960/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/960/events", "html_url": "https://github.com/python-trio/trio/issues/960", "id": 416045449, "node_id": "MDU6SXNzdWU0MTYwNDU0NDk=", "number": 960, "title": "trio.Path.home raises \"AttributeError: _flavour\"", "user": {"login": "zthompson47", "id": 184890, "node_id": "MDQ6VXNlcjE4NDg5MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/184890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zthompson47", "html_url": "https://github.com/zthompson47", "followers_url": "https://api.github.com/users/zthompson47/followers", "following_url": "https://api.github.com/users/zthompson47/following{/other_user}", "gists_url": "https://api.github.com/users/zthompson47/gists{/gist_id}", "starred_url": "https://api.github.com/users/zthompson47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zthompson47/subscriptions", "organizations_url": "https://api.github.com/users/zthompson47/orgs", "repos_url": "https://api.github.com/users/zthompson47/repos", "events_url": "https://api.github.com/users/zthompson47/events{/privacy}", "received_events_url": "https://api.github.com/users/zthompson47/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-01T10:47:34Z", "updated_at": "2019-05-01T05:50:23Z", "closed_at": "2019-05-01T05:50:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I get the following on Mac and Linux:\r\n```\r\n>>> import trio\r\n>>> trio.Path.home()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/Cellar/python/3.7.2_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/pathlib.py\", line 1055, in home\r\n    return cls(cls()._flavour.gethomedir(None))\r\n  File \"/Users/zach/.allotropic/python/default/lib/python3.7/site-packages/trio/_path.py\", line 157, in __getattr__\r\n    raise AttributeError(name)\r\nAttributeError: _flavour\r\n```\r\nAs the traceback states, ``pathlib.Path`` is instantiating itself to dertermine its ``_flavour``, which is a class to delegate filesystem calls to differing Windows and Posix environments.\r\n\r\nI think the explanation is that trio.Path does not override ``__new__``, so it doesn't get a chance to turn into a ``PosixPath`` or ``WindowsPath`` object like ``pathlib.Path`` objects do.  The ``_flavour`` attribute is only available from these system-specific classes, and the ``AsyncAutoWrapperType`` doesn't explicitly wrap these classes to make it an attribute of ``trio.Path``.\r\n\r\nOne workaround is to override ``home`` in ``trio.Path``:\r\n```\r\n    @classmethod\r\n    def home(cls):\r\n        return cls(cls()._wraps()._flavour.gethomedir(None))\r\n```\r\n\r\nThere are other approaches and I'd like to check in with the team here.  Any thoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/936", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/936/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/936/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/936/events", "html_url": "https://github.com/python-trio/trio/issues/936", "id": 411662107, "node_id": "MDU6SXNzdWU0MTE2NjIxMDc=", "number": 936, "title": "Make yapf part of the build process", "user": {"login": "jmfrank63", "id": 3090462, "node_id": "MDQ6VXNlcjMwOTA0NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3090462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmfrank63", "html_url": "https://github.com/jmfrank63", "followers_url": "https://api.github.com/users/jmfrank63/followers", "following_url": "https://api.github.com/users/jmfrank63/following{/other_user}", "gists_url": "https://api.github.com/users/jmfrank63/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmfrank63/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmfrank63/subscriptions", "organizations_url": "https://api.github.com/users/jmfrank63/orgs", "repos_url": "https://api.github.com/users/jmfrank63/repos", "events_url": "https://api.github.com/users/jmfrank63/events{/privacy}", "received_events_url": "https://api.github.com/users/jmfrank63/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-18T22:04:34Z", "updated_at": "2019-03-13T05:30:35Z", "closed_at": "2019-03-13T05:30:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Discussion:\r\nInstead of checking if the source code matches in `check.sh` directly format the code, so developers do not have to care about formatting anymore.\r\n\r\nEspecially since yapf seems to produce different results depending on OS, formatting the code during the build process would give consistent results for everybody and remove the need for manually running yapf.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/935", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/935/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/935/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/935/events", "html_url": "https://github.com/python-trio/trio/issues/935", "id": 411661090, "node_id": "MDU6SXNzdWU0MTE2NjEwOTA=", "number": 935, "title": "Should we make the generated code of #805 part of the build process?", "user": {"login": "jmfrank63", "id": 3090462, "node_id": "MDQ6VXNlcjMwOTA0NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3090462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmfrank63", "html_url": "https://github.com/jmfrank63", "followers_url": "https://api.github.com/users/jmfrank63/followers", "following_url": "https://api.github.com/users/jmfrank63/following{/other_user}", "gists_url": "https://api.github.com/users/jmfrank63/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmfrank63/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmfrank63/subscriptions", "organizations_url": "https://api.github.com/users/jmfrank63/orgs", "repos_url": "https://api.github.com/users/jmfrank63/repos", "events_url": "https://api.github.com/users/jmfrank63/events{/privacy}", "received_events_url": "https://api.github.com/users/jmfrank63/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-18T22:01:19Z", "updated_at": "2019-08-06T18:18:25Z", "closed_at": "2019-07-31T03:44:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Discussion:\r\nImho there is no point in having the generated code in source control. As we have a code generator, the build process should just create the code on the fly.\r\nSince a developer cannot change the code anyway it should not be part of the source.\r\nAdditionally the naming `_generated_*` could be adapted to something more descriptive that does not confuse users when the source file name appears in code completion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/928", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/928/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/928/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/928/events", "html_url": "https://github.com/python-trio/trio/issues/928", "id": 410115638, "node_id": "MDU6SXNzdWU0MTAxMTU2Mzg=", "number": 928, "title": "Drop usage of SO_EXCLUSIVEADDRUSE on Windows", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 523925659, "node_id": "MDU6TGFiZWw1MjM5MjU2NTk=", "url": "https://api.github.com/repos/python-trio/trio/labels/Windows", "name": "Windows", "color": "dddddd", "default": false, "description": null}, {"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}, {"id": 523593177, "node_id": "MDU6TGFiZWw1MjM1OTMxNzc=", "url": "https://api.github.com/repos/python-trio/trio/labels/polish", "name": "polish", "color": "f9d0c4", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-14T04:00:24Z", "updated_at": "2019-07-03T13:41:08Z", "closed_at": "2019-07-03T13:41:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I recently saw a claim that contra the MSDN documentation, using `SO_REUSEADDR` on Windows no longer creates a bizarre security hole. We have a script in `notes-to-self/` that demonstrates that `SO_EXCLUSIVEADDRUSE` doesn't break things the way MSDN claims it does; but I never did do a test about whether it *fixes* things the way MSDN claims it does. So... for all I know, this might be true! In fact, it's possible that both `SO_REUSEADDR` and `SO_EXCLUSIVEADDRUSE` are no-ops these days.  *Is* this true? If so, when did it become true? Which versions of Windows are affected?\r\n\r\nI suspect that the answers won't affect what we do in Trio itself, but it seems worthwhile to know in any case, so at least we know why we do the quirky platform-specific things we do.\r\n\r\nSee #39, #72 for more background.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/917", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/917/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/917/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/917/events", "html_url": "https://github.com/python-trio/trio/issues/917", "id": 408031130, "node_id": "MDU6SXNzdWU0MDgwMzExMzA=", "number": 917, "title": "trio.Path inconsistencies", "user": {"login": "oremanj", "id": 4316136, "node_id": "MDQ6VXNlcjQzMTYxMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4316136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oremanj", "html_url": "https://github.com/oremanj", "followers_url": "https://api.github.com/users/oremanj/followers", "following_url": "https://api.github.com/users/oremanj/following{/other_user}", "gists_url": "https://api.github.com/users/oremanj/gists{/gist_id}", "starred_url": "https://api.github.com/users/oremanj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oremanj/subscriptions", "organizations_url": "https://api.github.com/users/oremanj/orgs", "repos_url": "https://api.github.com/users/oremanj/repos", "events_url": "https://api.github.com/users/oremanj/events{/privacy}", "received_events_url": "https://api.github.com/users/oremanj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 624758117, "node_id": "MDU6TGFiZWw2MjQ3NTgxMTc=", "url": "https://api.github.com/repos/python-trio/trio/labels/good%20first%20issue", "name": "good first issue", "color": "5319e7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-08T07:06:48Z", "updated_at": "2019-05-01T22:48:34Z", "closed_at": "2019-05-01T22:48:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Noticed these doing typing:\r\n* glob() and rglob() probably want the same treatment as iterdir(); currently they return an iterable of unwrapped pathlib.Path objects\r\n* trio.Path.cwd() is synchronous - is that intended? On Linux it doesn't need to hit the disk (it has a dedicated syscall, or can use `readlink /proc/self/cwd`), but I think on some other Unixes it can...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/892", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/892/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/892/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/892/events", "html_url": "https://github.com/python-trio/trio/issues/892", "id": 404266814, "node_id": "MDU6SXNzdWU0MDQyNjY4MTQ=", "number": 892, "title": "Awaiting futures versus starting coroutines (How opinionated is trio?)", "user": {"login": "abetkin", "id": 2223279, "node_id": "MDQ6VXNlcjIyMjMyNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2223279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abetkin", "html_url": "https://github.com/abetkin", "followers_url": "https://api.github.com/users/abetkin/followers", "following_url": "https://api.github.com/users/abetkin/following{/other_user}", "gists_url": "https://api.github.com/users/abetkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/abetkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abetkin/subscriptions", "organizations_url": "https://api.github.com/users/abetkin/orgs", "repos_url": "https://api.github.com/users/abetkin/repos", "events_url": "https://api.github.com/users/abetkin/events{/privacy}", "received_events_url": "https://api.github.com/users/abetkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-01-29T12:25:46Z", "updated_at": "2019-02-06T15:02:42Z", "closed_at": "2019-02-02T11:28:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, @njsmith and trio folks!\r\n\r\nAs I see in trio docs, the main API is letting trio run my async functions for me.\r\nLike this:\r\n\r\n```python\r\nasync def hobby():\r\n    # long-running\r\n    dream = await trio.sleep(a_lot)\r\n    return dream\r\n\r\nasync def someday():\r\n    result = await hobby()\r\n    with trio.open_nursery() as ns:\r\n        counter = 0\r\n        for b in everybody:\r\n            ns.start_soon(boast, b, result, counter)\r\n    print('score', counter)\r\n\r\nasync def boast(someone, something, counter):\r\n    '''\r\n    if `someone` has envy for `something`, please increment the `counter`.\r\n    '''\r\n```\r\n\r\nThis is a valid approach, and probably a good style, since it passes the arguments explicitly\r\nto each coroutine. There is another aproach though.\r\n\r\nPlease, say if I'm wrong, but a task in trio docs usually equals to coroutine, i.e., not yet started or even created. In asyncio, a task is a Future. This aproach tries to use them:\r\n\r\n```python\r\nasync def boast(somebody):\r\n    result = await hobby_task\r\n    if result in somebody.envy_list:\r\n        counter += 1\r\n\r\nhobby_task = asyncio.create_task(hobby())\r\ntasks = [hobby_task] + [\r\n    asyncio.create_task(boast(b))\r\n    for b in everybody\r\n]\r\ncounter = 0\r\n\r\nasync def main():\r\n    await asyncio.gather(*tasks)\r\n    print('score', counter)\r\n```\r\n\r\nThe difference is that we are using global variables: `hobby_task`, `tasks`, and the `counter`. Probably, an antipattern. But imagine we are handling a web request, and it can serve as a natural scope, so globally-scoped tasks are actually scoped by a web request.\r\n\r\nIn many cases, it makes sense to execute async tasks once, and let other async tasks use the result.\r\nIn our example, that task is `hobby()`. Can't do `await hobby()` in every coroutine because it's a lengthy task.\r\n\r\nAlso, you can't cancel the hobby task from another coroutine: not without the additional knowledge, which other coroutines are using it.\r\n\r\nMy question is: can trio be used with this application design? Or does it have parts that can be reused for this?\r\n\r\nBasically, tasks (started coroutines) can be viewed as functional components that form some kind of dependency tree.\r\nTheoretically, the nodes in this tree can do supervision/nursery for the dependent nodes.\r\nAnd the tree knows all the dependencies, so it knows which tasks can be cancelled safely.\r\n\r\n\r\nAlso, do you see any issues with this design? Maybe, you know frameworks that are more suited for it?\r\n\r\nP.S.\r\nThis issue was born from me trying to adapt [apistar](https://github.com/encode/apistar/tree/version-0.5.x) by @tomchristie to the needs of a project at work.\r\n(upstream version is different stuff, have to look at [0.5.x](https://github.com/encode/apistar/tree/version-0.5.x) version for this). It's a dependency injection framework, and it has \"components\" classes backed by async tasks.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/883", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/883/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/883/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/883/events", "html_url": "https://github.com/python-trio/trio/issues/883", "id": 403506518, "node_id": "MDU6SXNzdWU0MDM1MDY1MTg=", "number": 883, "title": "On Windows, should we break up calls to `WriteFile` to reduce usage of non-paged memory?", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-27T02:34:46Z", "updated_at": "2019-01-28T02:45:22Z", "closed_at": "2019-01-28T02:45:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In the initial version of the subprocess code, the Windows pipe `send_all` implementation breaks up large sends into mulitple small sends:\r\n\r\nhttps://github.com/python-trio/trio/blob/360f1fb45e4a3edc2fb4251dd969d0496a68ae60/trio/_windows_pipes.py#L53-L67\r\n\r\nThis loop is obviously a bit tricky, and it also turns out that this trickiness [is hiding a subtle race condition](https://github.com/python-trio/trio/issues/661#issuecomment-457814382). We could fix that, but this also raises the question of whether we could just skip the trickiness altogether.\r\n\r\n@oremanj [says](https://gitter.im/python-trio/general?at=5c4ce9ae54f21a71a1af8967) that his motivation for doing it this way is from reading in #52 about how servers sometimes want to avoid issuing lots of simultaneous `WSARecv` calls because the buffers all get pinned into memory at once. So this wasn't based on some special documentation somewhere about named pipes.\r\n\r\nIn libuv's named pipe code, the only thing it does with large buffers is check that they're not larger than UINT32_MAX, because apparently that's some kind of limit for `WriteFile`. (I am morbidly curious about how they discovered this. [1])\r\n\r\nPoking around in [Windows Internals](https://www.microsoftpressstore.com/articles/article.aspx?p=2201309&seqNum=3) (search for \"buffer management\"), it does sound like in many cases, if you pass an N-byte buffer to `WriteFile`, then you end up with N-bytes of kernel memory pinned for the duration of the call. It also sounds like sufficiently clever drivers can work around this if they want to. I have no idea whether the named pipe drivers or the socket drivers do anything clever here; AFAICT the only way to know is to check the Windows source, which I don't have :-).\r\n\r\nSo if this is a problem, it sounds like it's a very general one: it applies to sending and receiving on sockets or pipes, to reading and writing files, to sync and async code, etc. etc. If we're going to worry about it, we should either worry about it everywhere, or figure out specific cases where it's likely to be hit and worry about it there.\r\n\r\nAs far as I know, no-one worried about this when writing to files, sending on sockets, etc. (We certainly don't.) The only place where I've heard people worry about this is in the context of large servers, with many thousands of socket connections, which are mostly idle, but you have to be ready to receive data on any of them at any time. (Generally \u2013 not always, but generally \u2013 send calls finish up relatively quickly, because someone is probably receiving on the other end; it's receive calls that usually hang around indefinitely.) And the only place I can see people worrying about that is in [a book from 2002](https://www.amazon.com/Network-Programming-Microsoft-Windows-Pro-Developer-dp-B0012G9MPA/dp/B0012G9MPA/), that uses a server with 768 MiB of RAM for its benchmarks. And after squinting at chapters 5 and 6 for a while, I'm pretty sure their benchmarks actually show that server handling 50,000 simultaneous connections in ~400 MB of RAM, *without* using the 0-byte receive trick. Basically it seems like this is ... just not much of an issue in practice.\r\n\r\nNow... it is possible that since Trio is aimed to be friendly and easy to get started with, some of our audience may do things that the old-school OS developers would consider silly, like using multi-megabyte send/receive buffers. But right now we don't have any evidence that this is an issue, or that splitting up sends like this will help anything. (There are a lot of ways to mess up building a giant scalable server.) So I think the conclusion for now is that we shouldn't worry about it.\r\n\r\n-----\r\n\r\n[1] I did dig into this a bit more. It looks like libuv's `UINT32_MAX` check was added by @piscisaureus in https://github.com/libuv/libuv/pull/1843; I'll CC him because he's been [interested](https://github.com/python-trio/trio/issues/52#issuecomment-425009562) in these kinds of questions before :-). I don't see any evidence in the libuv history that this was done in response to a particular issue; it feels like more of a just-in-case kind of thing. (Also, the check is only done for calls that use libuv's scatter/gather path \u2013 if you submit a *single* >4 gibibyte buffer, then libuv passes it straight through to `WriteFile` unchanged.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/882", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/882/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/882/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/882/events", "html_url": "https://github.com/python-trio/trio/issues/882", "id": 403495007, "node_id": "MDU6SXNzdWU0MDM0OTUwMDc=", "number": 882, "title": "Failing to close a CancelScope produces super confusing errors", "user": {"login": "Badg", "id": 6155386, "node_id": "MDQ6VXNlcjYxNTUzODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/6155386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badg", "html_url": "https://github.com/Badg", "followers_url": "https://api.github.com/users/Badg/followers", "following_url": "https://api.github.com/users/Badg/following{/other_user}", "gists_url": "https://api.github.com/users/Badg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badg/subscriptions", "organizations_url": "https://api.github.com/users/Badg/orgs", "repos_url": "https://api.github.com/users/Badg/repos", "events_url": "https://api.github.com/users/Badg/events{/privacy}", "received_events_url": "https://api.github.com/users/Badg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1347506308, "node_id": "MDU6TGFiZWwxMzQ3NTA2MzA4", "url": "https://api.github.com/repos/python-trio/trio/labels/cancellation", "name": "cancellation", "color": "979cfc", "default": false, "description": ""}, {"id": 537057261, "node_id": "MDU6TGFiZWw1MzcwNTcyNjE=", "url": "https://api.github.com/repos/python-trio/trio/labels/user%20happiness", "name": "user happiness", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-01-26T23:25:50Z", "updated_at": "2019-06-04T08:06:52Z", "closed_at": "2019-06-04T08:06:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "(update: this appears to have been due to failing to close the CancelScope; see: https://github.com/python-trio/trio/issues/882#issuecomment-488817573)\r\n\r\nI'm not sure either way if this is ultimately a dupe of #552, so feel free to close if so. I'm also having a hell of a hard time figuring out how to reliably reproduce this, and it may actually be an issue in trio_asyncio?\r\n\r\n## What's the issue?\r\n\r\nDuring teardown, there's a KeyError in ``trio._core._run:CancelScope._remove_task``.\r\n\r\n## Steps to reproduce\r\n\r\nI haven't been able to repro this outside of one specific script, but I've tried a lot of different things. For the sake of brevity, I'll call that script \"voidreader\", since that's what I'm actually calling it and if you can surmise any secret sauce from that name then you deserve to know anyways. Background:\r\n\r\n+ Voidreader is starting from a call to ``trio.run``\r\n+ It runs a [separate logging system in a companion thread](https://github.com/Badg/bescheid/tree/feature/mvp), also running via ``trio.run``, but I'm pretty confident that isn't related, because I still see the error when I comment out the logging system. However, that library does some patching of the stdlib logging module, which... may or may not be relevant?\r\n+ Voidreader starts some async context managers pretty much immediately. One of them runs a Quart server inside of a call to ``aio_as_trio``; there's other uses of it as well\r\n+ Voidreader is also using asks for some stuff, but I don't think that's relevant either\r\n+ Control-C interrupts stop \"just working\" inside voidreader. It takes me several attempts to get it to actually exit, and then I see the traceback included below\r\n\r\nI've tried reproing with stuff like this:\r\n\r\n```python\r\nfrom contextlib import asynccontextmanager\r\nimport asyncio\r\n\r\nfrom trio_asyncio import aio_as_trio\r\nfrom trio_asyncio import trio_as_aio\r\nimport trio\r\nimport trio_asyncio\r\n\r\n\r\n@asynccontextmanager\r\nasync def nested():\r\n    print('fly, you fools!')\r\n    yield\r\n    await aio_as_trio(asyncio.sleep(7))\r\n\r\n\r\nasync def main():\r\n    async with trio_asyncio.open_loop() as loop:\r\n        async with nested():\r\n            await trio.sleep(1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    trio.run(main)\r\n```\r\n\r\nbut to no avail -- **note that control+C still works here, raising a keyboardinterrupt.** My hunch is that this may have something to do with the Quart stuff that's running in an asyncio context.\r\n\r\n## Traceback\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Nick\\venv\\foo\\lib\\site-packages\\trio\\_core\\_run.py\", line 1323, in run\r\n    run_impl(runner, async_fn, args)\r\n  File \"C:\\Users\\Nick\\venv\\foo\\lib\\site-packages\\trio\\_core\\_run.py\", line 1471, in run_impl\r\n    runner.task_exited(task, final_outcome)\r\n  File \"C:\\Users\\Nick\\venv\\foo\\lib\\site-packages\\trio\\_core\\_run.py\", line 943, in task_exited\r\n    task._cancel_stack[-1]._remove_task(task)\r\n  File \"C:\\Users\\Nick\\venv\\foo\\lib\\site-packages\\trio\\_core\\_run.py\", line 203, in _remove_task\r\n    self._tasks.remove(task)\r\nKeyError: <Task '__main__.main' at 0x27f9eaf5b00>\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Python37\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"C:\\Python37\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"d:\\dropbox\\projekte\\foo\\bar\\baz\\__main__.py\", line 36, in <module>\r\n    trio.run(main)\r\n  File \"C:\\Users\\Nick\\venv\\foo\\lib\\site-packages\\trio\\_core\\_run.py\", line 1329, in run\r\n    ) from exc\r\ntrio.TrioInternalError: internal error in trio - please file a bug!\r\nException ignored in: <function Nursery.__del__ at 0x0000027F9CEE0730>\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Nick\\venv\\foo\\lib\\site-packages\\trio\\_core\\_run.py\", line 530, in __del__\r\nAssertionError:\r\nPS C:\\Users\\Nick>\r\n```\r\n\r\n## Expected behavior\r\n\r\nAt the very least, a better traceback -- at one point I thought I was seeing that traceback during *startup*, when ultimately the problem was a recursion issue in my logging patch. While I was trying to repro the trio issue, I stumbled upon the problem in my code, fixed it, and suddenly things ran happily again -- until shutdown, that is, which is where the traceback was originating from anyways. Having more information about surrounding exceptions would have been really helpful early on, to help me isolate which problems were mine vs which problems might be upstream.\r\n\r\nOf course also, I'd expect a cleaner shutdown! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/880", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/880/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/880/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/880/events", "html_url": "https://github.com/python-trio/trio/issues/880", "id": 403394472, "node_id": "MDU6SXNzdWU0MDMzOTQ0NzI=", "number": 880, "title": "Drop support for early python 3.5.x point releases?", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1347511324, "node_id": "MDU6TGFiZWwxMzQ3NTExMzI0", "url": "https://api.github.com/repos/python-trio/trio/labels/project%20meta", "name": "project meta", "color": "e086c5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-26T02:13:12Z", "updated_at": "2020-05-12T07:30:52Z", "closed_at": "2020-05-12T07:30:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We have another issue about when to drop support for 3.5 entirely (#75). This issue is to discuss something narrower: should we drop support for some early 3.5.x releases, while keeping it for later ones?\r\n\r\nPossible advantages:\r\n\r\n* The semantics of `__aiter__` are totally different in 3.5.0 and 3.5.1 versus 3.5.2. We have to carry around [special hacks](https://github.com/python-trio/trio/blob/3bdd3fd0ea7f26484f42502df96e63c9d75953c9/trio/_util.py#L76-L88) to support those old versions.\r\n\r\n  * The hacks themselves are not too terrible to maintain. The biggest issue is that they add more entries to the test matrix, which is extra complexity and getting gradually more difficult (e.g. on Travis we have to fall back to the older `trusty` environment to get access to an old enough Python, and Azure doesn't provide any old 3.5.x's at all.)\r\n\r\n* The typing module also went through a lot of changes over the lifespan of 3.5.x. I haven't looked into the details here, but @oremanj [says](https://gitter.im/python-trio/general?at=5c4ba49a975714406b40f4c0) \"it looks like 3.5.2 was the first version with a typing module that's even kinda usable for async code\". I guess as soon as we start seriously tackling #543 we'll quickly discover the limits!\r\n\r\nPossible disadvantages:\r\n\r\n* It's easier to explain \"we support 3.5 or greater\" than to explain \"we support 3.5 or greater, except for these micro-versions of 3.5, by the way do you even know what micro-version of 3.5 you're using?\"\r\n\r\nWho would be affected?\r\n\r\n* ~~pypy's 3.5 branch claims to emulate 3.5.3. (And I guess we could convince them to bump that higher if necessary? they also have a 3.6 branch that's in pretty solid shape, but who knows when that will actually release.)~~ pypy's on 3.6 now\r\n\r\n* ~~Debian stable [has 3.5.3](https://packages.debian.org/search?keywords=python3)~~ now oldstable has 3.5.3, and stable has 3.7.something.\r\n\r\n* Ubuntu 14.04 \"trusty\" [defaults to 3.4](https://packages.ubuntu.com/trusty/python3), but [has 3.5.2](https://packages.ubuntu.com/xenial/python3.5)\r\n\r\n* Ubuntu 16.04 \"xenial\" has its default python3 as [3.5.2](https://packages.ubuntu.com/xenial/python3.5)\r\n\r\n* Ubuntu 18.04 \"bionic\" defaults to [3.6.7](https://packages.ubuntu.com/bionic-updates/python3)\r\n\r\n* On Redhat/CentOS 6 and 7, AFAICT there's no python 3 in the main distro (is this true?), so people use EPEL or Software collections or whatever. EPEL 7 [has python 3.4 and python 3.6, no 3.5 at all](http://mirror.math.princeton.edu/pub/epel/7/x86_64/Packages/p/). EPEL 6 [doesn't have anything newer than 3.4](http://mirror.twinlakes.net/epel/6/x86_64/Packages/p/). Software collections has a variety of versions, including both 3.5 and 3.6. Their 3.5 is **3.5.1**. (See the `rh-python35-python-3.5.1-11.el6.x86_64.rpm` package on [this list](http://mirror.centos.org/centos/6/sclo/x86_64/rh/rh-python35/), and I also installed it in a container to check.)\r\n\r\nSo it sounds like pretty much everyone who has an officially supported 3.5.anything, has an officially supported 3.5.2+, except that if anyone is using software collections then getting 3.5.2+ requires upgrading to 3.6.\r\n\r\nAnother source of stats is PyPI downloads: https://pypistats.org/packages/trio. The numbers are pretty noisy because we don't have a lot of downloads, and for these purposes I'm much more worried about people trying to run their first program than heavy users, so the download stats may not be super representative anyway. But it looks like right now our downloads are ~5-10% python 3.5, and most of the rest on newer versions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/879", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/879/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/879/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/879/events", "html_url": "https://github.com/python-trio/trio/issues/879", "id": 403093563, "node_id": "MDU6SXNzdWU0MDMwOTM1NjM=", "number": 879, "title": "should we be more aggressive about reaping child processes?", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 523592585, "node_id": "MDU6TGFiZWw1MjM1OTI1ODU=", "url": "https://api.github.com/repos/python-trio/trio/labels/design%20discussion", "name": "design discussion", "color": "0052cc", "default": false, "description": null}, {"id": 1347507399, "node_id": "MDU6TGFiZWwxMzQ3NTA3Mzk5", "url": "https://api.github.com/repos/python-trio/trio/labels/low-level", "name": "low-level", "color": "f8ffb2", "default": false, "description": ""}, {"id": 1621470001, "node_id": "MDU6TGFiZWwxNjIxNDcwMDAx", "url": "https://api.github.com/repos/python-trio/trio/labels/subprocesses", "name": "subprocesses", "color": "8464c4", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-25T10:22:34Z", "updated_at": "2020-05-12T19:52:16Z", "closed_at": "2020-05-12T19:52:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now, I believe that we don't reap child processes until the user calls `.wait` or `.poll`. (or, if that never happens, then until the backstop code in `subprocess` starts trying to reap old processes when a new one is spawned.)\r\n\r\nOf course on Windows this is fine because zombies aren't a thing. But maybe we should reap more aggressively on posix? If we were using `SIGCHLD` like most async libraries do, then we'd be reaping processes as soon as they exit.\r\n\r\nE.g. on Linux, maybe the `wait` logic should be something like:\r\n\r\n```python\r\ndef _thread_wait(token, process):\r\n    process._popen.wait()\r\n    token.call_soon_threadsafe(process._waited.set()\r\n```\r\n\r\n?\r\n\r\n(Note that `Popen.wait` is thread-safe, so this is legal: https://bugs.python.org/issue21291)\r\n\r\nCC: @oremanj", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/878", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/878/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/878/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/878/events", "html_url": "https://github.com/python-trio/trio/issues/878", "id": 403062763, "node_id": "MDU6SXNzdWU0MDMwNjI3NjM=", "number": 878, "title": "Drop the distinction between wait_readable / wait_socket_readable", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1347507399, "node_id": "MDU6TGFiZWwxMzQ3NTA3Mzk5", "url": "https://api.github.com/repos/python-trio/trio/labels/low-level", "name": "low-level", "color": "f8ffb2", "default": false, "description": ""}, {"id": 538689361, "node_id": "MDU6TGFiZWw1Mzg2ODkzNjE=", "url": "https://api.github.com/repos/python-trio/trio/labels/potential%20API%20breaker", "name": "potential API breaker", "color": "b60205", "default": false, "description": null}, {"id": 523633446, "node_id": "MDU6TGFiZWw1MjM2MzM0NDY=", "url": "https://api.github.com/repos/python-trio/trio/labels/todo%20soon", "name": "todo soon", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-25T09:00:18Z", "updated_at": "2019-06-21T20:43:23Z", "closed_at": "2019-06-21T20:43:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As discussed in #400, and specifically [this comment](https://github.com/python-trio/trio/issues/400#issuecomment-357478182), we should drop the distinction between `wait_readable` and `wait_socket_readable` (and similar for `writable`, `notify_close`). Instead, we should just document that on Unix they take file descriptors, and on Windows they take socket handles (not file descriptors).\r\n\r\n(Should they also accept other handles? See also: https://github.com/python-trio/trio/issues/661#issuecomment-457502687)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/871", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/871/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/871/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/871/events", "html_url": "https://github.com/python-trio/trio/issues/871", "id": 401793861, "node_id": "MDU6SXNzdWU0MDE3OTM4NjE=", "number": 871, "title": "Cannot use async generators from coroutines", "user": {"login": "carlopires", "id": 45199, "node_id": "MDQ6VXNlcjQ1MTk5", "avatar_url": "https://avatars3.githubusercontent.com/u/45199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlopires", "html_url": "https://github.com/carlopires", "followers_url": "https://api.github.com/users/carlopires/followers", "following_url": "https://api.github.com/users/carlopires/following{/other_user}", "gists_url": "https://api.github.com/users/carlopires/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlopires/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlopires/subscriptions", "organizations_url": "https://api.github.com/users/carlopires/orgs", "repos_url": "https://api.github.com/users/carlopires/repos", "events_url": "https://api.github.com/users/carlopires/events{/privacy}", "received_events_url": "https://api.github.com/users/carlopires/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-22T14:36:36Z", "updated_at": "2019-01-27T00:32:28Z", "closed_at": "2019-01-27T00:32:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Newbie here. I just started porting some code from eventlet to trio. I'm using python 3.6.2 and trio 0.10.0.\r\n\r\n*test.py*\r\n```python\r\nimport time\r\nimport argparse\r\nimport trio\r\n\r\n\r\nclass Counter():\r\n    def __init__(self):\r\n        self.value = 0\r\n        self.lock = trio._sync.Semaphore(1)\r\n    \r\n    async def inc(self):\r\n        async with self.lock:\r\n            await trio.sleep(1)\r\n            self.value += 1\r\n    \r\n    def get(self):\r\n        return self.value\r\n\r\n\r\nasync def counter(interval=5):\r\n    co = Counter()\r\n    time_start = 0\r\n\r\n    while 1:\r\n        now = time.time()\r\n\r\n        if now - time_start > interval:\r\n            await co.inc()\r\n            time_start = now\r\n\r\n        yield co.get()\r\n        \r\n\r\nasync def test_counter(step, co):\r\n    n = await co.__anext__()\r\n    print(f'step: {step}, counter: {n}')\r\n\r\n\r\nasync def test(steps):\r\n    co_gen = counter()\r\n\r\n    async with trio.open_nursery() as nursery:\r\n        for step in range(steps):\r\n            nursery.start_soon(test_counter, step, co_gen)\r\n        \r\n    print('all done')\r\n\r\nif __name__ == '__main__':\r\n    parser = argparse.ArgumentParser()\r\n    parser.add_argument('steps')\r\n    args = parser.parse_args()\r\n    trio.run(test, int(args.steps))\r\n```\r\nIt works if I run it with no concurrency:\r\n```\r\n$ python3 test.py 1\r\nstep: 0, counter: 1\r\nall done\r\n```\r\nAdding concurrency makes it fail:\r\n```\r\n$ python3 test.py 2\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 55, in <module>\r\n    trio.run(test, int(args.steps))\r\n  File \"/opt/py3/lib/python3.6/site-packages/trio/_core/_run.py\", line 1337, in run\r\n    raise runner.main_task_outcome.error\r\n  File \"test.py\", line 47, in test\r\n    nursery.start_soon(test_counter, step, co_gen)\r\n  File \"/opt/py3/lib/python3.6/site-packages/trio/_core/_run.py\", line 398, in __aexit__\r\n    raise combined_error_from_nursery\r\ntrio.MultiError: AttributeError(\"'NoneType' object has no attribute 'unwrap'\",), StopAsyncIteration()\r\n\r\nDetails of embedded exception 1:\r\n\r\n  Traceback (most recent call last):\r\n    File \"test.py\", line 38, in test_counter\r\n      n = await co.__anext__()\r\n    File \"test.py\", line 31, in counter\r\n      await co.inc()\r\n    File \"test.py\", line 15, in inc\r\n      async with self.lock:\r\n    File \"/opt/py3/lib/python3.6/site-packages/trio/_sync.py\", line 92, in __aenter__\r\n      await self.acquire()\r\n    File \"/opt/py3/lib/python3.6/site-packages/trio/_sync.py\", line 467, in acquire\r\n      await _core.cancel_shielded_checkpoint()\r\n    File \"/opt/py3/lib/python3.6/site-packages/trio/_core/_traps.py\", line 44, in cancel_shielded_checkpoint\r\n      return (await _async_yield(CancelShieldedCheckpoint)).unwrap()\r\n  AttributeError: 'NoneType' object has no attribute 'unwrap'\r\n\r\nDetails of embedded exception 2:\r\n\r\n  Traceback (most recent call last):\r\n    File \"test.py\", line 38, in test_counter\r\n      n = await co.__anext__()\r\n  StopAsyncIteration\r\n```\r\n\r\nI've read some issues related and understood that it seems to be problematic to use async generators from trio tasks. But I'm not sure about what is wrong here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/861", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/861/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/861/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/861/events", "html_url": "https://github.com/python-trio/trio/issues/861", "id": 400195716, "node_id": "MDU6SXNzdWU0MDAxOTU3MTY=", "number": 861, "title": "Add a `.timeout` attribute to `CancelScope`?", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-17T09:59:47Z", "updated_at": "2019-01-27T00:31:43Z", "closed_at": "2019-01-27T00:31:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Now that `CancelScope`s are becoming more exposed to users with #607 / #835, it occurred to me that it might be nice to have a weird magical `.timeout` property on them. The definition would be:\r\n\r\n```python\r\n@property\r\ndef timeout(self):\r\n    return max(0.0, self._deadline - trio.current_time())\r\n\r\n@timeout.setter\r\ndef timeout(self, new_timeout):\r\n    self.deadline = trio.current_time() + new_timeout\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-trio/trio/issues/860", "repository_url": "https://api.github.com/repos/python-trio/trio", "labels_url": "https://api.github.com/repos/python-trio/trio/issues/860/labels{/name}", "comments_url": "https://api.github.com/repos/python-trio/trio/issues/860/comments", "events_url": "https://api.github.com/repos/python-trio/trio/issues/860/events", "html_url": "https://github.com/python-trio/trio/issues/860", "id": 400191347, "node_id": "MDU6SXNzdWU0MDAxOTEzNDc=", "number": 860, "title": "Delay deciding which cancel scope a Cancelled exception belongs to", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-01-17T09:49:28Z", "updated_at": "2019-02-05T07:55:49Z", "closed_at": "2019-02-05T07:55:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now, whenever we create a `Cancelled` exception, we immediately tag it with the cancel scope that's going to catch it.\r\n\r\nThere's another option that's briefly mentioned in #606: we could wait until `CancelScope.__exit__` to decide whether a given `Cancelled` exception \"belongs\" to this scope. The check would be \"on the current task's stack, am I the outermost unshielded scope that's in the cancelled state?\"\r\n\r\nThis can behave differently from what we have now in cases where there are multiple cancelled `CancelScope`s on the stack.\r\n\r\nI'm not entirely sure if this would actually help with #606, because of complications noted there (hello `KeyboardInterrupt`). But it would probably simplify the cancel scope code in general, in particular `_cancel_no_notify`, and the issues described in this comment: https://github.com/python-trio/trio/pull/835#issuecomment-455107324", "performed_via_github_app": null, "score": 1.0}]}