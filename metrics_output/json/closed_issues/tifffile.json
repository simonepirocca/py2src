{"total_count": 20, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/cgohlke/tifffile/issues/23", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/23/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/23/events", "html_url": "https://github.com/cgohlke/tifffile/issues/23", "id": 683160274, "node_id": "MDU6SXNzdWU2ODMxNjAyNzQ=", "number": 23, "title": "NDTiffStorage example file", "user": {"login": "ischoegl", "id": 12603999, "node_id": "MDQ6VXNlcjEyNjAzOTk5", "avatar_url": "https://avatars0.githubusercontent.com/u/12603999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ischoegl", "html_url": "https://github.com/ischoegl", "followers_url": "https://api.github.com/users/ischoegl/followers", "following_url": "https://api.github.com/users/ischoegl/following{/other_user}", "gists_url": "https://api.github.com/users/ischoegl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ischoegl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ischoegl/subscriptions", "organizations_url": "https://api.github.com/users/ischoegl/orgs", "repos_url": "https://api.github.com/users/ischoegl/repos", "events_url": "https://api.github.com/users/ischoegl/events{/privacy}", "received_events_url": "https://api.github.com/users/ischoegl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-08-20T23:45:43Z", "updated_at": "2020-08-21T18:59:54Z", "closed_at": "2020-08-21T17:12:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am following up on the discussion in micro-manager/NDTiffStorage#10, and am providing an example file here. As mentioned there, `tifffile` has no issues reading image data itself, but does not preserve information on axes. The NDTiffStorage format is also not compatible with the `TiffFile.imagej_metadata` attribute, which limits the flexibility of this format.\r\n\r\nSome comments on the file format are provided in micro-manager/NDTiffStorage#11. The file itself was generated using the script `democam.py` from the PR micro-manager/pycro-manager#76. I am not sufficiently familiar with the underpinnings of the TIFF standards, so this is merely an attempt to summarize.\r\n\r\n**PS:** I am also not sure how relevant this issue is, so it's ok to close.\r\n\r\n[democam_MagellanStack.zip](https://github.com/cgohlke/tifffile/files/5105946/democam_MagellanStack.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/22", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/22/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/22/events", "html_url": "https://github.com/cgohlke/tifffile/issues/22", "id": 681982813, "node_id": "MDU6SXNzdWU2ODE5ODI4MTM=", "number": 22, "title": "Reading from .tiff file modifies original content", "user": {"login": "tandronescu", "id": 30327537, "node_id": "MDQ6VXNlcjMwMzI3NTM3", "avatar_url": "https://avatars1.githubusercontent.com/u/30327537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tandronescu", "html_url": "https://github.com/tandronescu", "followers_url": "https://api.github.com/users/tandronescu/followers", "following_url": "https://api.github.com/users/tandronescu/following{/other_user}", "gists_url": "https://api.github.com/users/tandronescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tandronescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tandronescu/subscriptions", "organizations_url": "https://api.github.com/users/tandronescu/orgs", "repos_url": "https://api.github.com/users/tandronescu/repos", "events_url": "https://api.github.com/users/tandronescu/events{/privacy}", "received_events_url": "https://api.github.com/users/tandronescu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-19T16:35:09Z", "updated_at": "2020-08-19T22:07:00Z", "closed_at": "2020-08-19T22:07:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running into an issue where I read from a saved tiff file, and at some point (say 2 or 3 reads) I notice that the contents of the file are no longer correct. E.g. I calculate the mean temperature of the image on the data and it is about 90 degrees the whole way. After running the same analysis code, the temperature will then change to something like 60 degrees.\r\n\r\nHere is the sudo code I am using to read the tifffile:\r\n```\r\ntiffFileHandle = tifffile.TiffFile(filename)\r\nnumTiffPages = len(self.tiffFileHandle.pages)\r\n\r\ni = 0\r\nwhile i < numTiffPages:\r\n    img = tiffFileHandle.pages[i].asarray()\r\n    i++\r\n   process img\r\n```\r\n\r\nAny idea why this happens? I confirmed this issue by making a copy of my original data and comparing results on the backup. This indeed shows an unexpected temperature difference.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/20", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/20/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/20/events", "html_url": "https://github.com/cgohlke/tifffile/issues/20", "id": 677675731, "node_id": "MDU6SXNzdWU2Nzc2NzU3MzE=", "number": 20, "title": "[BUG] Using \"compression\" option crashes \"imwrite\"", "user": {"login": "ggirelli", "id": 1636105, "node_id": "MDQ6VXNlcjE2MzYxMDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1636105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ggirelli", "html_url": "https://github.com/ggirelli", "followers_url": "https://api.github.com/users/ggirelli/followers", "following_url": "https://api.github.com/users/ggirelli/following{/other_user}", "gists_url": "https://api.github.com/users/ggirelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/ggirelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ggirelli/subscriptions", "organizations_url": "https://api.github.com/users/ggirelli/orgs", "repos_url": "https://api.github.com/users/ggirelli/repos", "events_url": "https://api.github.com/users/ggirelli/events{/privacy}", "received_events_url": "https://api.github.com/users/ggirelli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-12T13:01:25Z", "updated_at": "2020-08-13T20:46:28Z", "closed_at": "2020-08-13T20:46:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Great package, have been using it for a long time! I recently upgraded to `2020.7.24` (in Python 3.8.2) and now, when running something like\r\n```python\r\nimport tifffile\r\ntifffile.imwrite(\"test.tiff\", np.zeros((10, 10, 10)), shape=(10, 10, 10), dtype=np.int8, compress=True)\r\n```\r\nI get the following error:\r\n```python\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/home/gire/.local/lib/python3.8/site-packages/tifffile/tifffile.py\", line 778, in imwrite\r\n    return tif.save(data, shape, dtype, **kwargs)\r\n  File \"/home/gire/.local/lib/python3.8/site-packages/tifffile/tifffile.py\", line 2096, in save\r\n    page = next(dataiter).reshape(storedshape[1:])\r\nTypeError: 'numpy.ndarray' object is not an iterator\r\n```\r\nEverything works perfectly when the `shape` argument is not provided, e.g., `tifffile.imwrite(\"test.tiff\", np.zeros((10, 10, 10)), dtype=np.int8, compress=True)`.\r\n\r\nI understand (might be wrong) that `shape` and `dtype` should be provided only when `data=None`, but it I think it would be better to get a more readable error saying not to use them with a `data != None` or something similar :smile: \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/19", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/19/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/19/events", "html_url": "https://github.com/cgohlke/tifffile/issues/19", "id": 671842234, "node_id": "MDU6SXNzdWU2NzE4NDIyMzQ=", "number": 19, "title": "Preserving singlet dimensions when loading ImageJ hyperstack tifs", "user": {"login": "nhthayer", "id": 13004425, "node_id": "MDQ6VXNlcjEzMDA0NDI1", "avatar_url": "https://avatars0.githubusercontent.com/u/13004425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhthayer", "html_url": "https://github.com/nhthayer", "followers_url": "https://api.github.com/users/nhthayer/followers", "following_url": "https://api.github.com/users/nhthayer/following{/other_user}", "gists_url": "https://api.github.com/users/nhthayer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhthayer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhthayer/subscriptions", "organizations_url": "https://api.github.com/users/nhthayer/orgs", "repos_url": "https://api.github.com/users/nhthayer/repos", "events_url": "https://api.github.com/users/nhthayer/events{/privacy}", "received_events_url": "https://api.github.com/users/nhthayer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-03T06:54:13Z", "updated_at": "2020-08-04T00:02:56Z", "closed_at": "2020-08-04T00:02:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Noticed a change in behavior between 2019.5.30 -> 2019.6.18 and wanted to make sure it was intended. Hopefully I'm just missing a new way of preserving dimensions of size 1 when loading ImageJ hyperstack tifs. \r\n\r\n```python\r\n# works on tifffile==2019.5.30\r\n# assert fails on tifffile==2019.6.18\r\nimport numpy as np\r\nimport tifffile\r\na = np.zeros((10, 5, 1, 256, 256), dtype='uint16')\r\nmd = {'frames': 10, 'slices': 5, 'channels': 1}\r\ntifffile.imsave('test.tif', a, imagej=True, metadata=md)\r\nb = tifffile.imread('test.tif')\r\nassert b.shape == a.shape, f'Loaded array has shape {b.shape}, not {a.shape}'\r\n```\r\n\r\nIn the new version, it appears that dimensions of size 1 are not included in the final stack shape, even if they are specified in the imagej metadata:\r\n\r\nhttps://github.com/cgohlke/tifffile/blob/6991c4ba1a1d1936cfad1bb249d1c74de08d449b/tifffile/tifffile.py#L2630-L2648\r\n\r\nIn the older version, the channel dim would be included if it was specified in the metadata:\r\n\r\nhttps://github.com/cgohlke/tifffile/blob/ffbdf61b9c7cc627d17260d2cfd25c053001b0fc/tifffile/tifffile.py#L2526-L2529\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/18", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/18/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/18/events", "html_url": "https://github.com/cgohlke/tifffile/issues/18", "id": 654553276, "node_id": "MDU6SXNzdWU2NTQ1NTMyNzY=", "number": 18, "title": "CI test errors on BIg Endian systems", "user": {"login": "olebole", "id": 397223, "node_id": "MDQ6VXNlcjM5NzIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/397223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olebole", "html_url": "https://github.com/olebole", "followers_url": "https://api.github.com/users/olebole/followers", "following_url": "https://api.github.com/users/olebole/following{/other_user}", "gists_url": "https://api.github.com/users/olebole/gists{/gist_id}", "starred_url": "https://api.github.com/users/olebole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olebole/subscriptions", "organizations_url": "https://api.github.com/users/olebole/orgs", "repos_url": "https://api.github.com/users/olebole/repos", "events_url": "https://api.github.com/users/olebole/events{/privacy}", "received_events_url": "https://api.github.com/users/olebole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-10T06:48:58Z", "updated_at": "2020-07-18T00:30:34Z", "closed_at": "2020-07-18T00:30:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am maintaining the [Debian package of tifffile](https://tracker.debian.org/pkg/tifffile), which is also used in Ubuntu. The Ubuntu distribution runs the CI tests on all their supported platforms, and found a regression on the s390x platform, which is a 64 bit big endian one:\r\n```\r\n=================================== FAILURES ===================================\r\n____________________________ test_issue_valueoffset ____________________________\r\n\r\n    def test_issue_valueoffset():\r\n        \"\"\"Test read TiffTag.valueoffsets.\"\"\"\r\n        unpack = struct.unpack\r\n        data = random_data('uint16', (2, 19, 31))\r\n        software = 'test_tifffile'\r\n        with TempFileName('valueoffset') as fname:\r\n            imwrite(fname, data, software=software, photometric='minisblack')\r\n            with TiffFile(fname, _useframes=True) as tif:\r\n                with open(fname, 'rb') as fh:\r\n                    page = tif.pages[0]\r\n                    # inline value\r\n                    fh.seek(page.tags['ImageLength'].valueoffset)\r\n>                   assert page.imagelength == unpack('H', fh.read(2))[0]\r\nE                   assert 19 == 0\r\nE                     -19\r\nE                     +0\r\n\r\ntest_tifffile.py:638: AssertionError\r\n____________________________ test_func_memmap_fail _____________________________\r\n\r\n    def test_func_memmap_fail():\r\n        \"\"\"Test non-native byteorder can not be memory mapped.\"\"\"\r\n        with TempFileName('memmap_fail') as fname:\r\n            with pytest.raises(ValueError):\r\n>               memmap(fname, shape=(16, 16), dtype='float32', byteorder='>')\r\nE               Failed: DID NOT RAISE <class 'ValueError'>\r\n\r\ntest_tifffile.py:1000: Failed\r\n_________________________ test_func_byteorder_isnative _________________________\r\n\r\n    def test_func_byteorder_isnative():\r\n        \"\"\"Test byteorder_isnative function.\"\"\"\r\n>       assert not byteorder_isnative('>')\r\nE       AssertionError: assert not True\r\nE        +  where True = byteorder_isnative('>')\r\n\r\ntest_tifffile.py:1018: AssertionError\r\n_____________________________ test_func_unpack_rgb _____________________________\r\n\r\n    def test_func_unpack_rgb():\r\n        \"\"\"Test unpack_rgb function.\"\"\"\r\n        data = struct.pack('BBBB', 0x21, 0x08, 0xFF, 0xFF)\r\n>       assert_array_equal(unpack_rgb(data, '<B', (5, 6, 5), False),\r\n                           [1, 1, 1, 31, 63, 31])\r\nE       AssertionError: \r\nE       Arrays are not equal\r\nE       \r\nE       Mismatch: 50%\r\nE       Max absolute difference: 7\r\nE       Max relative difference: 7.\r\nE        x: array([ 4,  8,  8, 31, 63, 31], dtype=uint8)\r\nE        y: array([ 1,  1,  1, 31, 63, 31])\r\n\r\ntest_tifffile.py:1185: AssertionError\r\n======= 4 failed, 1609 passed, 268 skipped, 30 xfailed in 35.44 seconds ========\r\n```\r\nThe test was done with version 2020.06.03, 2020.05.11 was (probably) working.\r\nFull test log [here](https://objectstorage.prodstack4-5.canonical.com/v1/AUTH_77e2ada1e7a84929a74ba3b87153c0ac/autopkgtest-groovy/groovy/s390x/t/tifffile/20200612_195249_ec5f1@/log.gz).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/17", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/17/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/17/events", "html_url": "https://github.com/cgohlke/tifffile/issues/17", "id": 653430005, "node_id": "MDU6SXNzdWU2NTM0MzAwMDU=", "number": 17, "title": "Character encoding", "user": {"login": "damianbrzoza", "id": 23300637, "node_id": "MDQ6VXNlcjIzMzAwNjM3", "avatar_url": "https://avatars1.githubusercontent.com/u/23300637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/damianbrzoza", "html_url": "https://github.com/damianbrzoza", "followers_url": "https://api.github.com/users/damianbrzoza/followers", "following_url": "https://api.github.com/users/damianbrzoza/following{/other_user}", "gists_url": "https://api.github.com/users/damianbrzoza/gists{/gist_id}", "starred_url": "https://api.github.com/users/damianbrzoza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/damianbrzoza/subscriptions", "organizations_url": "https://api.github.com/users/damianbrzoza/orgs", "repos_url": "https://api.github.com/users/damianbrzoza/repos", "events_url": "https://api.github.com/users/damianbrzoza/events{/privacy}", "received_events_url": "https://api.github.com/users/damianbrzoza/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-08T16:22:32Z", "updated_at": "2020-07-09T09:37:15Z", "closed_at": "2020-07-09T09:37:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI am working on images from microscopes and I noticed that biological software not always following strict to TIFF specification (ASCII encoding). Now with forcing ASCII encoding in the output image I lose some valuable data. It's will be great if output's encoding can be change by developer.\r\n\r\nPlease, consider another parameter to the save function.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/16", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/16/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/16/events", "html_url": "https://github.com/cgohlke/tifffile/issues/16", "id": 650820782, "node_id": "MDU6SXNzdWU2NTA4MjA3ODI=", "number": 16, "title": "Writing correct ome.tiff files", "user": {"login": "joaomamede", "id": 46799914, "node_id": "MDQ6VXNlcjQ2Nzk5OTE0", "avatar_url": "https://avatars3.githubusercontent.com/u/46799914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joaomamede", "html_url": "https://github.com/joaomamede", "followers_url": "https://api.github.com/users/joaomamede/followers", "following_url": "https://api.github.com/users/joaomamede/following{/other_user}", "gists_url": "https://api.github.com/users/joaomamede/gists{/gist_id}", "starred_url": "https://api.github.com/users/joaomamede/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joaomamede/subscriptions", "organizations_url": "https://api.github.com/users/joaomamede/orgs", "repos_url": "https://api.github.com/users/joaomamede/repos", "events_url": "https://api.github.com/users/joaomamede/events{/privacy}", "received_events_url": "https://api.github.com/users/joaomamede/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-04T03:47:02Z", "updated_at": "2020-07-05T22:02:54Z", "closed_at": "2020-07-05T22:00:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am basically setting up a deconvolution pipeline (each nd2 file is >1.5TB) of my live cell imaging data.\r\n\r\nI managed to make .ome.tiffs (metadata and tiff files) that are successfully opened in ImageJ, however I still have an error while populating and reading the metadata (that makes a higher parse time and having into account the size of the files I would like to fix this).\r\nThe last example in the code: test4.ome.tiff has ImageJ type hyperstack loading without errors, but then I can't save the ome.xml type metadata into it.\r\n\r\n- If I drag a file into ImageJ I only have on XY frame.\r\nI have this in console:\r\n`[> WARNING] Image ID 'Image:0': missing plane #0.  Using TiffReader to determine the number of planes.\r\n`\r\n - If I use the bioformats plugin then the whole stack is correctly loaded I have T,C,Z in the proper order.\r\nBut I still have this message:\r\n\r\nFirst line outputs when I call bioformats plugin (all other messages happen when I click okay to read it\r\n```\r\n> [WARNING] Image ID 'Image:0': missing plane #0.  Using TiffReader to determine the number of planes.\r\n> [WARN] Image ID 'Image:0': missing plane #0\r\n> [WARN] Image ID 'Image:0': missing plane #1\r\n> [WARN] Image ID 'Image:0': missing plane #2\r\n> [WARN] Image ID 'Image:0': missing plane #3\r\n> [WARN] Image ID 'Image:0': missing plane #4\r\n> [WARN] Image ID 'Image:0': missing plane #5\r\n> [WARN] Image ID 'Image:0': missing plane #6\r\n> [WARN] Image ID 'Image:0': missing plane #7\r\n> [WARN] Image ID 'Image:0': missing plane #8\r\n> [WARN] Image ID 'Image:0': missing plane #9\r\n> [WARN] Image ID 'Image:0': missing plane #10\r\n> [WARN] Image ID 'Image:0': missing plane #11\r\n> [WARN] Image ID 'Image:0': missing plane #12\r\n> [WARN] Image ID 'Image:0': missing plane #13\r\n> [WARN] Image ID 'Image:0': missing plane #14\r\n> [WARN] Image ID 'Image:0': missing plane #15\r\n> [WARN] Image ID 'Image:0': missing plane #16\r\n> [WARN] Image ID 'Image:0': missing plane #17\r\n> [WARN] Image ID 'Image:0': missing plane #18\r\n> [WARN] Image ID 'Image:0': missing plane #19\r\n> [WARN] Image ID 'Image:0': missing plane #20\r\n> [WARN] Image ID 'Image:0': missing plane #21\r\n> [WARN] Using TiffReader to determine the number of planes.\r\n> Reading IFDs\r\n> Populating metadata\r\n> Checking comment style\r\n> Populating OME metadata\r\n> Reading IFDs\r\n> Populating metadata\r\n> Checking comment style\r\n> Populating OME metadata\r\n```\r\nThis is a snippet code exemplifying different writing examples (I need to write each YX or ZYX or CZYC one by one as it's impossible to have the whole data loaded into my RAM).\r\n\r\n\r\n```Python\r\nimport numpy as np\r\nimport bioformats.omexml as ome\r\nimport tifffile as tf\r\nimport sys\r\n\r\n\r\ndef writeplanes(pixel, SizeT=1, SizeZ=1, SizeC=1, order='TZCYX'\r\n            , verbose=False):\r\n\r\n    if order == 'TZCYX':\r\n\r\n        p.DimensionOrder = ome.DO_XYCZT\r\n        counter = 0\r\n        for t in range(SizeT):\r\n            for z in range(SizeZ):\r\n                for c in range(SizeC):\r\n\r\n                    if verbose:\r\n                        print('Write PlaneTable: ', t, z, c),\r\n                        sys.stdout.flush()\r\n\r\n                    pixel.Plane(counter).TheT = t\r\n                    pixel.Plane(counter).TheZ = z\r\n                    pixel.Plane(counter).TheC = c\r\n                    counter = counter + 1\r\n\r\n    return pixel\r\n\r\n\r\n# Dimension TZCXY\r\nSizeT = 1\r\nSizeZ = 11\r\nSizeC = 2\r\nSizeX = 2044\r\nSizeY = 2044\r\nSeries = 0\r\n\r\n\r\nscalex = 0.10833\r\nscaley = scalex\r\nscalez = 0.3\r\npixeltype = 'uint16'\r\ndimorder = 'TZCYX'\r\noutput_file = r'/tmp/stack.ome.tiff' #this does nothing in this example\r\n\r\n# create numpy array with correct order\r\n\r\n# Getting metadata info\r\nomexml = ome.OMEXML()\r\nomexml.image(Series).Name = output_file\r\np = omexml.image(Series).Pixels\r\n#p.ID = 0\r\np.SizeX = SizeX\r\np.SizeY = SizeY\r\np.SizeC = SizeC\r\np.SizeT = SizeT\r\np.SizeZ = SizeZ\r\np.PhysicalSizeX = np.float(scalex)\r\np.PhysicalSizeY = np.float(scaley)\r\np.PhysicalSizeZ = np.float(scalez)\r\np.PixelType = pixeltype\r\np.channel_count = SizeC\r\np.plane_count = SizeZ * SizeT * SizeC\r\np = writeplanes(p, SizeT=SizeT, SizeZ=SizeZ, SizeC=SizeC, order=dimorder)\r\n\r\nfor c in range(SizeC):\r\n    if pixeltype == 'unit8':\r\n        p.Channel(c).SamplesPerPixel = 1\r\n    if pixeltype == 'unit16':\r\n        p.Channel(c).SamplesPerPixel = 2\r\n\r\n\r\nomexml.structured_annotations.add_original_metadata(\r\n            ome.OM_SAMPLES_PER_PIXEL, str(SizeC))\r\n\r\n# Converting to omexml\r\nxml = omexml.to_xml()\r\n\r\n\r\nimg5d = np.random.randn(\r\n        SizeT, SizeZ, SizeC, SizeY, SizeX).astype(np.uint16)\r\n\r\n# ~ write file and save OME-XML as description\r\ntf.imwrite(r'/tmp/test1.ome.tiff', img5d#,\r\n    , description=xml)\r\n\r\n\r\nwith tf.TiffWriter('/tmp/test2.ome.tiff'\r\n               #, bigtiff=True\r\n               #, imagej=True\r\n                      ) as tif:\r\n    for t in range(SizeT):\r\n        for z in range(SizeZ):\r\n            for c in range(SizeC):      \r\n                # ~ print(img5d[t,z,c,:,:].shape)   # -> (2044, 2044)\r\n                tif.save(img5d[t,z,c,:,:]\r\n            #                     ,shape=res.shape\r\n\r\n                        #,resolution= (.1083,0.1083,3)\r\n                         , description = xml\r\n                        , photometric='minisblack'\r\n                        #, datetime= True\r\n                        , metadata={'axes': 'TZCYX'\r\n                            , 'DimensionOrder' : 'TZCYX'\r\n                            , 'Resolution': 0.10833}\r\n                            )\r\n\r\nwith tf.TiffWriter('/tmp/test3.ome.tiff'\r\n               #, bigtiff=True\r\n               #, imagej=True\r\n                      ) as tif:\r\n    for t in range(SizeT):\r\n        # ~ print(img5d[t,z,c,:,:].shape)   # -> (2044, 2044)\r\n        tif.save(img5d[t,:,:,:,:]\r\n    #                     ,shape=res.shape\r\n\r\n                #,resolution= (.1083,0.1083,3)\r\n                 , description = xml\r\n                , photometric='minisblack'\r\n                #, datetime= True\r\n                , metadata={'axes': 'TZCYX'\r\n                    , 'DimensionOrder' : 'TZCYX'\r\n                    , 'Resolution': 0.10833}\r\n                    )\r\n\r\nwith tf.TiffWriter('/tmp/test4.ome.tiff'\r\n               #, bigtiff=True\r\n               , imagej=True\r\n                      ) as tif:\r\n    for t in range(SizeT):\r\n        # ~ print(img5d[t,z,c,:,:].shape)   # -> (2044, 2044)\r\n        tif.save(img5d[t,:,:,:,:]\r\n    #                     ,shape=res.shape\r\n\r\n                #,resolution= (.1083,0.1083,3)\r\n                 , description = xml\r\n                , photometric='minisblack'\r\n                #, datetime= True\r\n                , metadata={'axes': 'TZCYX'\r\n                    , 'DimensionOrder' : 'TZCYX'\r\n                    , 'Resolution': 0.10833}\r\n                    )\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/15", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/15/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/15/events", "html_url": "https://github.com/cgohlke/tifffile/issues/15", "id": 648876348, "node_id": "MDU6SXNzdWU2NDg4NzYzNDg=", "number": 15, "title": "Support large NDPI files ( > 4GB)", "user": {"login": "ksidis", "id": 3721468, "node_id": "MDQ6VXNlcjM3MjE0Njg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3721468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksidis", "html_url": "https://github.com/ksidis", "followers_url": "https://api.github.com/users/ksidis/followers", "following_url": "https://api.github.com/users/ksidis/following{/other_user}", "gists_url": "https://api.github.com/users/ksidis/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksidis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksidis/subscriptions", "organizations_url": "https://api.github.com/users/ksidis/orgs", "repos_url": "https://api.github.com/users/ksidis/repos", "events_url": "https://api.github.com/users/ksidis/events{/privacy}", "received_events_url": "https://api.github.com/users/ksidis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-01T10:40:41Z", "updated_at": "2020-07-05T01:15:19Z", "closed_at": "2020-07-03T03:11:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to read a large NDPI file, I get only the first page and the rest are truncated. I understand the problem and the fact that NDPI is based on the classic TIFF format, which does not support files larger than 4 GB. However, large NDPI files are out there. Given the fact that some libraries out there (i.e. openslide) are able to read them and that there are \"To-Do\" comments in your code pointing to it, I wanted to ask you what is your plan on supporting this? \r\n\r\nPlease have a look [here](https://github.com/openslide/openslide/pull/276) on how openslide addressed the issue last year.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/14", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/14/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/14/events", "html_url": "https://github.com/cgohlke/tifffile/issues/14", "id": 648860860, "node_id": "MDU6SXNzdWU2NDg4NjA4NjA=", "number": 14, "title": "How to read single tiles from a file?", "user": {"login": "rfezzani", "id": 3438227, "node_id": "MDQ6VXNlcjM0MzgyMjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3438227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfezzani", "html_url": "https://github.com/rfezzani", "followers_url": "https://api.github.com/users/rfezzani/followers", "following_url": "https://api.github.com/users/rfezzani/following{/other_user}", "gists_url": "https://api.github.com/users/rfezzani/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfezzani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfezzani/subscriptions", "organizations_url": "https://api.github.com/users/rfezzani/orgs", "repos_url": "https://api.github.com/users/rfezzani/repos", "events_url": "https://api.github.com/users/rfezzani/events{/privacy}", "received_events_url": "https://api.github.com/users/rfezzani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-01T10:16:00Z", "updated_at": "2020-07-02T15:35:15Z", "closed_at": "2020-07-02T15:35:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello @cgohlke and thank you for developing/maintaining this awesome package ^^.\r\n\r\nI am trying to read a large pyramidal,  multi-stack WS image in `svs` format (15\u00d791775\u00d787648\u00d73 pixels at full resolution):\r\n\r\n```python\r\n>>> with tifffile.TiffFile(fname) as f:\r\n...   for s in f.series:\r\n...     print(s.shape)\r\n... \r\n(15, 91775, 87648, 3)\r\n(768, 733, 3)\r\n(15, 22943, 21912, 3)\r\n(15, 5735, 5478, 3)\r\n(15, 2867, 2739, 3)\r\n(680, 653, 3)\r\n(613, 1600, 3)\r\n```\r\n\r\nI would like to read the image by chunks, and I saw in the [changelog](https://github.com/cgohlke/tifffile/blob/master/tifffile/tifffile.py#L116) that it is possible to read individual tiles from the image but I can't found the function or doc for this.\r\nCan you please point me to the correct method for doing this?\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/13", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/13/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/13/events", "html_url": "https://github.com/cgohlke/tifffile/issues/13", "id": 646155916, "node_id": "MDU6SXNzdWU2NDYxNTU5MTY=", "number": 13, "title": "[question] why does tag 282 (XResolution) yield a 2-tuple? ", "user": {"login": "PiRK", "id": 419570, "node_id": "MDQ6VXNlcjQxOTU3MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/419570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PiRK", "html_url": "https://github.com/PiRK", "followers_url": "https://api.github.com/users/PiRK/followers", "following_url": "https://api.github.com/users/PiRK/following{/other_user}", "gists_url": "https://api.github.com/users/PiRK/gists{/gist_id}", "starred_url": "https://api.github.com/users/PiRK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PiRK/subscriptions", "organizations_url": "https://api.github.com/users/PiRK/orgs", "repos_url": "https://api.github.com/users/PiRK/repos", "events_url": "https://api.github.com/users/PiRK/events{/privacy}", "received_events_url": "https://api.github.com/users/PiRK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-26T10:07:15Z", "updated_at": "2020-06-26T16:13:24Z", "closed_at": "2020-06-26T16:13:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I read tiff tag 282 with PIL, I get a scalar:\r\n\r\n        resX = pil_img.tag.get(282) \r\n        if resX not in [None, 0]:\r\n            # from px / unit to unit / px\r\n            self.x_resolution = 1. / resX\r\n\r\nWith tifffile, when reading page 0 of a NDPI file, I get a 2-tuple:\r\n\r\n        tags = tif.pages[0].tags\r\n        resX_tag = tags.get(282)\r\n        if resX_tag is not None:\r\n            resX = resX_tag.value\r\n            if hasattr(resX, \"__len__\"):\r\n                resX = resX[0]\r\n            # from px / unit to unit / px\r\n            self.x_resolution = 1. / resX if resX else 0.\r\n\r\nCan you explain the meaning of the 2 values? In the case of my NDPI file, only the first value seems meaningful, the second one is 1.\r\nBut in the examples you give in the Readme file, it seems there are 2 meaningfull values:\r\n```\r\n>>> with TiffFile('temp.tif') as tif:\r\n...     tag = tif.pages[0].tags['XResolution']\r\n>>> tag.value\r\n(2000, 5351)\r\n```\r\n\r\nThis page seems to indicate that we should expect a single value from this tag: https://www.awaresystems.be/imaging/tiff/tifftags/xresolution.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/12", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/12/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/12/events", "html_url": "https://github.com/cgohlke/tifffile/issues/12", "id": 638400425, "node_id": "MDU6SXNzdWU2Mzg0MDA0MjU=", "number": 12, "title": "Not clear how to read metadata from tifffile object (created with `imread`)", "user": {"login": "jimcost", "id": 6710629, "node_id": "MDQ6VXNlcjY3MTA2Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6710629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimcost", "html_url": "https://github.com/jimcost", "followers_url": "https://api.github.com/users/jimcost/followers", "following_url": "https://api.github.com/users/jimcost/following{/other_user}", "gists_url": "https://api.github.com/users/jimcost/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimcost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimcost/subscriptions", "organizations_url": "https://api.github.com/users/jimcost/orgs", "repos_url": "https://api.github.com/users/jimcost/repos", "events_url": "https://api.github.com/users/jimcost/events{/privacy}", "received_events_url": "https://api.github.com/users/jimcost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-14T18:02:09Z", "updated_at": "2020-06-14T18:24:55Z", "closed_at": "2020-06-14T18:24:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a tiff stack that I hope to extract the metadata from, but none of the `imread` object's methods seem to fit the bill. Searching the internet, I didn't find an example on the `tifffile` webpages. Any guidance would be much appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/11", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/11/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/11/events", "html_url": "https://github.com/cgohlke/tifffile/issues/11", "id": 637746498, "node_id": "MDU6SXNzdWU2Mzc3NDY0OTg=", "number": 11, "title": "Save uint16 array as 12-bit tif image", "user": {"login": "pietz", "id": 13137132, "node_id": "MDQ6VXNlcjEzMTM3MTMy", "avatar_url": "https://avatars2.githubusercontent.com/u/13137132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietz", "html_url": "https://github.com/pietz", "followers_url": "https://api.github.com/users/pietz/followers", "following_url": "https://api.github.com/users/pietz/following{/other_user}", "gists_url": "https://api.github.com/users/pietz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietz/subscriptions", "organizations_url": "https://api.github.com/users/pietz/orgs", "repos_url": "https://api.github.com/users/pietz/repos", "events_url": "https://api.github.com/users/pietz/events{/privacy}", "received_events_url": "https://api.github.com/users/pietz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T13:21:41Z", "updated_at": "2020-07-03T03:11:56Z", "closed_at": "2020-07-03T03:11:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to save a np.uint16 array as a 12-bit precision tif image because the camera has only 12-bit and I don't want to waste disk space. Is this possible? If yes, how?\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/10", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/10/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/10/events", "html_url": "https://github.com/cgohlke/tifffile/issues/10", "id": 635635609, "node_id": "MDU6SXNzdWU2MzU2MzU2MDk=", "number": 10, "title": "opening .SCN file returns compressed image", "user": {"login": "asasama12", "id": 41748563, "node_id": "MDQ6VXNlcjQxNzQ4NTYz", "avatar_url": "https://avatars1.githubusercontent.com/u/41748563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asasama12", "html_url": "https://github.com/asasama12", "followers_url": "https://api.github.com/users/asasama12/followers", "following_url": "https://api.github.com/users/asasama12/following{/other_user}", "gists_url": "https://api.github.com/users/asasama12/gists{/gist_id}", "starred_url": "https://api.github.com/users/asasama12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asasama12/subscriptions", "organizations_url": "https://api.github.com/users/asasama12/orgs", "repos_url": "https://api.github.com/users/asasama12/repos", "events_url": "https://api.github.com/users/asasama12/events{/privacy}", "received_events_url": "https://api.github.com/users/asasama12/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-09T17:37:46Z", "updated_at": "2020-06-09T18:48:22Z", "closed_at": "2020-06-09T18:48:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am attempting to open .scn files using tifffile in python 3.7.7\r\n\r\nI have installed:\r\n tifffile 2020.6.3 \r\nimagecodecs 2020.5.30\r\nnumpy 1.16.6\r\n\r\nWhen I read in the .scn file it appears to have automatically compressed it to some degree.  When this file is opened in ImageScope, it correctly shows the native image shape as (31090, 15884, 3) but tifffile reads it at  (12776, 5689, 3).  The .scn file is in a pyramidal format, but none of the pyramid levels correlate to the shape that tifffile read.  \r\n\r\nCode: \r\nimport tifffile\r\nfile = '/home/~~~~~~.scn'\r\nimage = tifffile.imread(file)\r\nimage.shape\r\n\r\nIs there a way to force tifffile to read the image at native resolution? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/9", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/9/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/9/events", "html_url": "https://github.com/cgohlke/tifffile/issues/9", "id": 629825772, "node_id": "MDU6SXNzdWU2Mjk4MjU3NzI=", "number": 9, "title": "[feature] let imread accept pathlib.Path filenames  ", "user": {"login": "maweigert", "id": 11042162, "node_id": "MDQ6VXNlcjExMDQyMTYy", "avatar_url": "https://avatars3.githubusercontent.com/u/11042162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maweigert", "html_url": "https://github.com/maweigert", "followers_url": "https://api.github.com/users/maweigert/followers", "following_url": "https://api.github.com/users/maweigert/following{/other_user}", "gists_url": "https://api.github.com/users/maweigert/gists{/gist_id}", "starred_url": "https://api.github.com/users/maweigert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maweigert/subscriptions", "organizations_url": "https://api.github.com/users/maweigert/orgs", "repos_url": "https://api.github.com/users/maweigert/repos", "events_url": "https://api.github.com/users/maweigert/events{/privacy}", "received_events_url": "https://api.github.com/users/maweigert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-03T09:04:16Z", "updated_at": "2020-06-25T00:15:06Z", "closed_at": "2020-06-04T05:36:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirst, thanks so much for all the great work put into `tifffile`! \r\n\r\nCurrently, `imread` does not accept `pathlib.Path` objects, i.e. the following fails:\r\n\r\n```\r\nimport numpy as np \r\nimport tempfile\r\nfrom pathlib import Path\r\nimport tifffile\r\n\r\nwith tempfile.NamedTemporaryFile(suffix='.tif') as tmp:\r\n    # save random data \r\n    tifffile.imsave(tmp, np.random.randint(0,255,(100,100)))\r\n\r\n    fpath = Path(tmp.name)\r\n\r\n    # works \r\n    tifffile.imread(str(fpath))\r\n\r\n    # does not work\r\n    tifffile.imread(fpath)\r\n```    \r\n\r\nI suspect it should be easy to fix this, as removing this [line](https://github.com/cgohlke/tifffile/blob/master/tifffile/tifffile.py#L622) does already fix the issue (`FileSequence` already can handle `Path` objects as indicated [here](https://github.com/cgohlke/tifffile/blob/master/tifffile/tifffile.py#L6206)).\r\n\r\n \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/7", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/7/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/7/events", "html_url": "https://github.com/cgohlke/tifffile/issues/7", "id": 618762581, "node_id": "MDU6SXNzdWU2MTg3NjI1ODE=", "number": 7, "title": "Depends on imagecodecs-lite on non x86 architectures", "user": {"login": "Czaki", "id": 3826210, "node_id": "MDQ6VXNlcjM4MjYyMTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3826210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Czaki", "html_url": "https://github.com/Czaki", "followers_url": "https://api.github.com/users/Czaki/followers", "following_url": "https://api.github.com/users/Czaki/following{/other_user}", "gists_url": "https://api.github.com/users/Czaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/Czaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Czaki/subscriptions", "organizations_url": "https://api.github.com/users/Czaki/orgs", "repos_url": "https://api.github.com/users/Czaki/repos", "events_url": "https://api.github.com/users/Czaki/events{/privacy}", "received_events_url": "https://api.github.com/users/Czaki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-15T07:33:25Z", "updated_at": "2020-05-15T08:05:59Z", "closed_at": "2020-05-15T08:05:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are person who would like to use tifffile on non x86 architecture processors. \r\nhttps://github.com/Czaki/imagecodecs/issues/6#issuecomment-628907454\r\nhttps://github.com/scikit-image/scikit-image/issues/4705#issuecomment-628673011\r\n\r\nI try to fast build aarm64 wheel but it wail without proper message and I do not have access to arm64 hardware to check it locally \r\n\r\nhttps://travis-ci.com/github/Czaki/imagecodecs/builds/\r\n\r\nSo maybe best soulltion is to use imagecodecs-lite on other architectures? \r\n\r\n(I'm not sure why issues lands in my repository, not in your)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/6", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/6/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/6/events", "html_url": "https://github.com/cgohlke/tifffile/issues/6", "id": 615552780, "node_id": "MDU6SXNzdWU2MTU1NTI3ODA=", "number": 6, "title": "Saved ImageJ test image produces a tif that crashes tifffile.imread()", "user": {"login": "marimar128", "id": 8754539, "node_id": "MDQ6VXNlcjg3NTQ1Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/8754539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marimar128", "html_url": "https://github.com/marimar128", "followers_url": "https://api.github.com/users/marimar128/followers", "following_url": "https://api.github.com/users/marimar128/following{/other_user}", "gists_url": "https://api.github.com/users/marimar128/gists{/gist_id}", "starred_url": "https://api.github.com/users/marimar128/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marimar128/subscriptions", "organizations_url": "https://api.github.com/users/marimar128/orgs", "repos_url": "https://api.github.com/users/marimar128/repos", "events_url": "https://api.github.com/users/marimar128/events{/privacy}", "received_events_url": "https://api.github.com/users/marimar128/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-11T02:59:18Z", "updated_at": "2020-05-11T19:45:43Z", "closed_at": "2020-05-11T18:43:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Steps to reproduce:\r\nOpen ImageJ 1.52v\r\nRun this ImageJ macro:\r\n\r\n```\r\nrun(\"HeLa Cells (1.3M, 48-bit RGB)\");\r\n//run(\"Channels Tool...\");\r\nStack.setDisplayMode(\"grayscale\");\r\nsaveAs(\"Tiff\", \"C:/Users/Admin/Desktop/tifffile_debugging/hela-cells.tif\");\r\n```\r\n(If you omit the line `Stack.setDisplayMode(\"grayscale\");`, the tif opens as expected)\r\n\r\nNow run the following python code:\r\n```\r\nimport tifffile\r\nprint(tifffile.__version__)\r\ndata = tifffile.imread('hela-cells.tif')\r\n```\r\nWhich yields the following output:\r\n```\r\n2020.5.7\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Admin\\Desktop\\tifffile_debugging\\test.py\", line 12, in <module>\r\n    data = tifffile.imread('hela-cells.tif')\r\n  File \"C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\tifffile\\tifffile.py\", line 589, in imread\r\n    return tif.asarray(**kwargs)\r\n  File \"C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\tifffile\\tifffile.py\", line 2306, in asarray\r\n    result = self.filehandle.read_array(\r\n  File \"C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\tifffile\\tifffile.py\", line 6402, in read_array\r\n    raise ValueError(f'failed to read {size} bytes')\r\nValueError: failed to read 6193152 bytes\r\n>>> \r\n```\r\nBefore this line, `shape` is [3]:\r\nhttps://github.com/cgohlke/tifffile/blob/e1902a9a1574223d82e06b97788f9a0465015359/tifffile/tifffile.py#L2656\r\nAfter this line, `shape` is [3, 512, 672, 3], which doesn't match the file size.\r\n\r\nThanks for making tifffile, it's a fantastic tool that I've always been grateful for!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/5", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/5/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/5/events", "html_url": "https://github.com/cgohlke/tifffile/issues/5", "id": 614200117, "node_id": "MDU6SXNzdWU2MTQyMDAxMTc=", "number": 5, "title": "imread and imwrite different", "user": {"login": "ear-lee", "id": 49790022, "node_id": "MDQ6VXNlcjQ5NzkwMDIy", "avatar_url": "https://avatars3.githubusercontent.com/u/49790022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ear-lee", "html_url": "https://github.com/ear-lee", "followers_url": "https://api.github.com/users/ear-lee/followers", "following_url": "https://api.github.com/users/ear-lee/following{/other_user}", "gists_url": "https://api.github.com/users/ear-lee/gists{/gist_id}", "starred_url": "https://api.github.com/users/ear-lee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ear-lee/subscriptions", "organizations_url": "https://api.github.com/users/ear-lee/orgs", "repos_url": "https://api.github.com/users/ear-lee/repos", "events_url": "https://api.github.com/users/ear-lee/events{/privacy}", "received_events_url": "https://api.github.com/users/ear-lee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-07T16:48:03Z", "updated_at": "2020-05-07T22:41:33Z", "closed_at": "2020-05-07T22:41:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Forgive my bad English. when I ```img = imread(path)``` , I get ```img.shape``` like (11, 1000, 2000, 2) but expect like (11, 1000, 2000). And when I ``` img = imread(path)``` ```imwrite(img)```, the result is different from the original.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/3", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/3/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/3/events", "html_url": "https://github.com/cgohlke/tifffile/issues/3", "id": 612851108, "node_id": "MDU6SXNzdWU2MTI4NTExMDg=", "number": 3, "title": "imwrite with partially-filled single tiles in contiguous mode creates corrupted files", "user": {"login": "jmuhlich", "id": 277154, "node_id": "MDQ6VXNlcjI3NzE1NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/277154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmuhlich", "html_url": "https://github.com/jmuhlich", "followers_url": "https://api.github.com/users/jmuhlich/followers", "following_url": "https://api.github.com/users/jmuhlich/following{/other_user}", "gists_url": "https://api.github.com/users/jmuhlich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmuhlich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmuhlich/subscriptions", "organizations_url": "https://api.github.com/users/jmuhlich/orgs", "repos_url": "https://api.github.com/users/jmuhlich/repos", "events_url": "https://api.github.com/users/jmuhlich/events{/privacy}", "received_events_url": "https://api.github.com/users/jmuhlich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-05T19:46:39Z", "updated_at": "2020-05-07T22:50:01Z", "closed_at": "2020-05-07T22:50:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "If `tile` is set, the image shape is smaller than `tile`, and `contiguous` is True, then the number of bytes allocated and written is less than the value in TileByteCounts. Furthermore there is no way to disable contiguous mode as the `contiguous` argument to `imwrite` is unconditionally overwritten with True. Here is a minimal reproduction:\r\n```python\r\nimport numpy as np\r\nimport tifffile\r\nimg = np.zeros((15, 15), np.uint8)\r\n# This vertical stripe makes the problem stand out in the image data.\r\nimg[:, 0] = 255\r\ntifffile.imsave('tiled-15x15.tif', img, tile=(16, 16))\r\n```\r\nThe output file in my case contains `TileOffsets <320>` and `TileByteCounts <256>` but the file is only 545 bytes long when it should be 320+256=576. From looking at a hex dump of the file it can be seen that only 15\\*15 bytes from `img` were written out without padding to 16\\*16. tifffile will actually read this back in correctly, but every other tool I tried either reports it as corrupt or reads the image data as if it were padded and ignores the buffer overrun (yielding an image with a diagonal stripe instead of a vertical one and possible garbage at the bottom).\r\n\r\nI traced this to the \"contiguous\" support introduced all the way back in v0.13.1 (2017-something?) and tried to disable that by passing `contiguous=False`, but I think there is also a small logic bug that prevents this from working. tifffile.py:1658 (in current master) says `contiguous = not compress` where I think it should say `contiguous = contiguous and not compress`.\r\n\r\nI'll be submitting a PR to address the `contiguous` problem, but I'm not sure what the use case for contiguous mode is so I'm hesitant to propose a fix for the bigger problem of corrupted output.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/2", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/2/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/2/events", "html_url": "https://github.com/cgohlke/tifffile/issues/2", "id": 594556451, "node_id": "MDU6SXNzdWU1OTQ1NTY0NTE=", "number": 2, "title": "Missing xml declaration from apeer-ometiff-library", "user": {"login": "manzt", "id": 24403730, "node_id": "MDQ6VXNlcjI0NDAzNzMw", "avatar_url": "https://avatars0.githubusercontent.com/u/24403730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manzt", "html_url": "https://github.com/manzt", "followers_url": "https://api.github.com/users/manzt/followers", "following_url": "https://api.github.com/users/manzt/following{/other_user}", "gists_url": "https://api.github.com/users/manzt/gists{/gist_id}", "starred_url": "https://api.github.com/users/manzt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manzt/subscriptions", "organizations_url": "https://api.github.com/users/manzt/orgs", "repos_url": "https://api.github.com/users/manzt/repos", "events_url": "https://api.github.com/users/manzt/events{/privacy}", "received_events_url": "https://api.github.com/users/manzt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-05T17:00:24Z", "updated_at": "2020-05-05T19:35:38Z", "closed_at": "2020-05-05T19:35:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have made the maintainers of [`apeer-ometiff-library`](https://github.com/apeer-micro/apeer-ometiff-library/issues/12) aware, but OME-TIFFs generated from `apeer-ometiff-library.io.write_ometiff` fail to have the property `tifffile.TiffFile.is_ome` (and subsequently `tifffile.TiffFile.ome_metadata`) when read by `tifffile`. I believe this is due to the line in the return that checks the first characters of the xml. This is because `apeer-ometiff-library` does not generate the xml declaration header `<?xml version=\"1.0\" encoding=\"UTF-8\"?>`. It is not clear to me if the xml declaration is required to have a [valid schema](https://en.wikipedia.org/wiki/XML#Key_terminology), but does this check need to be so stringent here?\r\n\r\nhttps://github.com/cgohlke/tifffile/blob/5f9f1381b6c8dae0fbad7d65818063d8a17be117/tifffile/tifffile.py#L5216-L5221", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cgohlke/tifffile/issues/1", "repository_url": "https://api.github.com/repos/cgohlke/tifffile", "labels_url": "https://api.github.com/repos/cgohlke/tifffile/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/cgohlke/tifffile/issues/1/comments", "events_url": "https://api.github.com/repos/cgohlke/tifffile/issues/1/events", "html_url": "https://github.com/cgohlke/tifffile/issues/1", "id": 584774793, "node_id": "MDU6SXNzdWU1ODQ3NzQ3OTM=", "number": 1, "title": "TiffFile.save() cannot write ExifTag or GPSTag metadata", "user": {"login": "CliffDellamano", "id": 47549188, "node_id": "MDQ6VXNlcjQ3NTQ5MTg4", "avatar_url": "https://avatars3.githubusercontent.com/u/47549188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CliffDellamano", "html_url": "https://github.com/CliffDellamano", "followers_url": "https://api.github.com/users/CliffDellamano/followers", "following_url": "https://api.github.com/users/CliffDellamano/following{/other_user}", "gists_url": "https://api.github.com/users/CliffDellamano/gists{/gist_id}", "starred_url": "https://api.github.com/users/CliffDellamano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CliffDellamano/subscriptions", "organizations_url": "https://api.github.com/users/CliffDellamano/orgs", "repos_url": "https://api.github.com/users/CliffDellamano/repos", "events_url": "https://api.github.com/users/CliffDellamano/events{/privacy}", "received_events_url": "https://api.github.com/users/CliffDellamano/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-20T00:25:54Z", "updated_at": "2020-07-03T03:12:18Z", "closed_at": "2020-07-03T03:12:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "As part of my work, I am attempting to open a single-page .TIF, perform some calculations based on the contents of the image array, modify the array accordingly, and then save the array back to a .TIF. However, I need to do this in a way that preserves **all** valid metadata from the original image (valid meaning that tags such as `DateTime` would be ignored). \r\n\r\nThis is easy enough with standard tags -- simply extract them from the original `TiffTags` object, store them in a list of `(code, dtype, count, value)` tuples, and pass them to the `extratags` argument of `save()`. However, this approach fails when attempting to write both `ExifTag` and `GPSTag` IFD groups.\r\n\r\nIs there a relatively simple method, with the current library, to bypass this limitation? I thought I might be able to recursively traverse the `TiffTags` dictionary, pull the individual tags out of their groups, and append them on to the full `extratags` list, but then they no longer belong to an IFD group.\r\n\r\nI am not sure if this is the best place to pose this issue, so please feel free to close if so.", "performed_via_github_app": null, "score": 1.0}]}