{"total_count": 26, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/garnaat/placebo/issues/73", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/73/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/73/events", "html_url": "https://github.com/garnaat/placebo/issues/73", "id": 410766214, "node_id": "MDU6SXNzdWU0MTA3NjYyMTQ=", "number": 73, "title": "Add additional tests for pickling mode", "user": {"login": "garnaat", "id": 2056, "node_id": "MDQ6VXNlcjIwNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garnaat", "html_url": "https://github.com/garnaat", "followers_url": "https://api.github.com/users/garnaat/followers", "following_url": "https://api.github.com/users/garnaat/following{/other_user}", "gists_url": "https://api.github.com/users/garnaat/gists{/gist_id}", "starred_url": "https://api.github.com/users/garnaat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garnaat/subscriptions", "organizations_url": "https://api.github.com/users/garnaat/orgs", "repos_url": "https://api.github.com/users/garnaat/repos", "events_url": "https://api.github.com/users/garnaat/events{/privacy}", "received_events_url": "https://api.github.com/users/garnaat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-15T13:19:28Z", "updated_at": "2019-02-16T18:25:05Z", "closed_at": "2019-02-16T18:25:05Z", "author_association": "OWNER", "active_lock_reason": null, "body": "#53 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/64", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/64/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/64/events", "html_url": "https://github.com/garnaat/placebo/issues/64", "id": 248193033, "node_id": "MDU6SXNzdWUyNDgxOTMwMzM=", "number": 64, "title": "Using Placebo to unit test legacy code", "user": {"login": "alexharv074", "id": 2305330, "node_id": "MDQ6VXNlcjIzMDUzMzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2305330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexharv074", "html_url": "https://github.com/alexharv074", "followers_url": "https://api.github.com/users/alexharv074/followers", "following_url": "https://api.github.com/users/alexharv074/following{/other_user}", "gists_url": "https://api.github.com/users/alexharv074/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexharv074/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexharv074/subscriptions", "organizations_url": "https://api.github.com/users/alexharv074/orgs", "repos_url": "https://api.github.com/users/alexharv074/repos", "events_url": "https://api.github.com/users/alexharv074/events{/privacy}", "received_events_url": "https://api.github.com/users/alexharv074/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-08-05T16:05:43Z", "updated_at": "2017-08-11T09:30:14Z", "closed_at": "2017-08-11T09:30:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I hope it's OK to ask a question here. I can't find this explained in the docs.\r\n\r\nI have legacy code that does a lot of stuff using the default Boto3 session, e.g.\r\n\r\n~~~ python\r\nimport boto3\r\nclient = boto3.client('ec2')\r\nclient.describe_images(DryRun=False, ImageIds=[ami_id])\r\n...\r\n~~~\r\n\r\nHowever, docs here at this project seem to imply that I need to manage the session explicity, i.e.\r\n\r\n~~~ python\r\nimport boto3\r\nsession = boto3.Session()\r\nclient = session.client('ec2')\r\nclient.describe_images(DryRun=False, ImageIds=[ami_id])\r\n...\r\n~~~\r\n\r\nThen you need to attach Placebo to `session`.\r\n\r\nBut is it possible to attach Placebo somehow to the default session -- or would I have to refactor all my legacy code before I could use Placebo on it?\r\n\r\nThanks,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/63", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/63/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/63/events", "html_url": "https://github.com/garnaat/placebo/issues/63", "id": 241975655, "node_id": "MDU6SXNzdWUyNDE5NzU2NTU=", "number": 63, "title": "release new version to include #50 and #51", "user": {"login": "kapilt", "id": 21650, "node_id": "MDQ6VXNlcjIxNjUw", "avatar_url": "https://avatars3.githubusercontent.com/u/21650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kapilt", "html_url": "https://github.com/kapilt", "followers_url": "https://api.github.com/users/kapilt/followers", "following_url": "https://api.github.com/users/kapilt/following{/other_user}", "gists_url": "https://api.github.com/users/kapilt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kapilt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kapilt/subscriptions", "organizations_url": "https://api.github.com/users/kapilt/orgs", "repos_url": "https://api.github.com/users/kapilt/repos", "events_url": "https://api.github.com/users/kapilt/events{/privacy}", "received_events_url": "https://api.github.com/users/kapilt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "garnaat", "id": 2056, "node_id": "MDQ6VXNlcjIwNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garnaat", "html_url": "https://github.com/garnaat", "followers_url": "https://api.github.com/users/garnaat/followers", "following_url": "https://api.github.com/users/garnaat/following{/other_user}", "gists_url": "https://api.github.com/users/garnaat/gists{/gist_id}", "starred_url": "https://api.github.com/users/garnaat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garnaat/subscriptions", "organizations_url": "https://api.github.com/users/garnaat/orgs", "repos_url": "https://api.github.com/users/garnaat/repos", "events_url": "https://api.github.com/users/garnaat/events{/privacy}", "received_events_url": "https://api.github.com/users/garnaat/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "garnaat", "id": 2056, "node_id": "MDQ6VXNlcjIwNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garnaat", "html_url": "https://github.com/garnaat", "followers_url": "https://api.github.com/users/garnaat/followers", "following_url": "https://api.github.com/users/garnaat/following{/other_user}", "gists_url": "https://api.github.com/users/garnaat/gists{/gist_id}", "starred_url": "https://api.github.com/users/garnaat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garnaat/subscriptions", "organizations_url": "https://api.github.com/users/garnaat/orgs", "repos_url": "https://api.github.com/users/garnaat/repos", "events_url": "https://api.github.com/users/garnaat/events{/privacy}", "received_events_url": "https://api.github.com/users/garnaat/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-07-11T09:01:34Z", "updated_at": "2018-09-03T16:48:12Z", "closed_at": "2018-09-03T16:48:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "there's a couple of important fixes between the two (#50 and #51), but without a release its unclear if most users will find them except the hard way, and then have to update deps to use git checkouts :-( Much nicer would be releasing 0.8.2 to pypi\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/55", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/55/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/55/events", "html_url": "https://github.com/garnaat/placebo/issues/55", "id": 183993999, "node_id": "MDU6SXNzdWUxODM5OTM5OTk=", "number": 55, "title": "datetime comparison issue with offset-naive and offset-aware", "user": {"login": "markfink", "id": 33456, "node_id": "MDQ6VXNlcjMzNDU2", "avatar_url": "https://avatars0.githubusercontent.com/u/33456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markfink", "html_url": "https://github.com/markfink", "followers_url": "https://api.github.com/users/markfink/followers", "following_url": "https://api.github.com/users/markfink/following{/other_user}", "gists_url": "https://api.github.com/users/markfink/gists{/gist_id}", "starred_url": "https://api.github.com/users/markfink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markfink/subscriptions", "organizations_url": "https://api.github.com/users/markfink/orgs", "repos_url": "https://api.github.com/users/markfink/repos", "events_url": "https://api.github.com/users/markfink/events{/privacy}", "received_events_url": "https://api.github.com/users/markfink/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-19T15:23:38Z", "updated_at": "2016-10-20T09:39:50Z", "closed_at": "2016-10-20T09:39:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "placebo works fine for some of my testcases. others I run into trouble during playback e.g.:\n\n``` txt\n response = client.describe_stack_events(StackName=stack_id)\n            for event in response['StackEvents'][::-1]:\n>               if event['EventId'] not in seen_events and event['Timestamp'] > now:\nE               TypeError: can't compare offset-naive and offset-aware datetimes\n```\n\nany idea how to tackle this?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/54", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/54/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/54/events", "html_url": "https://github.com/garnaat/placebo/issues/54", "id": 183971455, "node_id": "MDU6SXNzdWUxODM5NzE0NTU=", "number": 54, "title": "using placebo_session", "user": {"login": "markfink", "id": 33456, "node_id": "MDQ6VXNlcjMzNDU2", "avatar_url": "https://avatars0.githubusercontent.com/u/33456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markfink", "html_url": "https://github.com/markfink", "followers_url": "https://api.github.com/users/markfink/followers", "following_url": "https://api.github.com/users/markfink/following{/other_user}", "gists_url": "https://api.github.com/users/markfink/gists{/gist_id}", "starred_url": "https://api.github.com/users/markfink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markfink/subscriptions", "organizations_url": "https://api.github.com/users/markfink/orgs", "repos_url": "https://api.github.com/users/markfink/repos", "events_url": "https://api.github.com/users/markfink/events{/privacy}", "received_events_url": "https://api.github.com/users/markfink/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-19T14:05:24Z", "updated_at": "2018-01-26T11:46:44Z", "closed_at": "2016-10-19T14:46:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "new to placebo so this is most likely my fault. Any idea how to fix this?\n\n``` txt\n___________________________________________________________ test_list_stacks ____________________________________________________________\n\nargs = (), kwargs = {}, session_kwargs = {'profile_name': 'superuser-dev', 'region_name': 'eu-west-1'}\nprofile_name = 'superuser-dev', session = Session(region='eu-west-1')\n\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        session_kwargs = {\n            'region_name': os.environ.get('AWS_DEFAULT_REGION', 'us-east-1')\n        }\n        profile_name = os.environ.get('PLACEBO_PROFILE', None)\n        if profile_name:\n            session_kwargs['profile_name'] = profile_name\n\n        session = boto3.Session(**session_kwargs)\n\n>       self = args[0]\nE       IndexError: tuple index out of range\n\n../venv/local/lib/python2.7/site-packages/placebo/utils.py:29: IndexError\n======================================================= 1 failed in 0.73 seconds ========================================================\n```\n\nthis is my simple testcase:\n\n``` python\nfrom placebo.utils import placebo_session\n...\n\n@pytest.mark.aws\n@check_preconditions\n@placebo_session\ndef test_list_stacks(session):\n    out = StringIO()\n    list_stacks(session, out=out)\n    assert_regexp_matches(out.getvalue().strip(), 'listed \\d+ stacks')\n```\n\nI am using placebo in record mode like in the docu:\n\n``` bash\n$ PLACEBO_PROFILE=superuser-dp-dev PLACEBO_MODE=record python -m pytest tests/test_aws.py::test_list_stacks\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/52", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/52/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/52/events", "html_url": "https://github.com/garnaat/placebo/issues/52", "id": 160987064, "node_id": "MDU6SXNzdWUxNjA5ODcwNjQ=", "number": 52, "title": "Multiple region/sessions in single test", "user": {"login": "derwolfe", "id": 641357, "node_id": "MDQ6VXNlcjY0MTM1Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/641357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/derwolfe", "html_url": "https://github.com/derwolfe", "followers_url": "https://api.github.com/users/derwolfe/followers", "following_url": "https://api.github.com/users/derwolfe/following{/other_user}", "gists_url": "https://api.github.com/users/derwolfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/derwolfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derwolfe/subscriptions", "organizations_url": "https://api.github.com/users/derwolfe/orgs", "repos_url": "https://api.github.com/users/derwolfe/repos", "events_url": "https://api.github.com/users/derwolfe/events{/privacy}", "received_events_url": "https://api.github.com/users/derwolfe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-17T22:33:53Z", "updated_at": "2016-06-21T17:45:27Z", "closed_at": "2016-06-21T17:45:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it currently possible to use placebo to test functions that use multiple regions?\n\nMy understanding is that a session is bound to a region. If I have a function that uses mutltiple regions and as a result has multiple sessions, should attaching a pill to each session (and playing each session back) function?\n\nThanks!!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/48", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/48/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/48/events", "html_url": "https://github.com/garnaat/placebo/issues/48", "id": 152632360, "node_id": "MDU6SXNzdWUxNTI2MzIzNjA=", "number": 48, "title": "StreamingBody Issue in Record Mode", "user": {"login": "fxfitz", "id": 6355826, "node_id": "MDQ6VXNlcjYzNTU4MjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6355826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxfitz", "html_url": "https://github.com/fxfitz", "followers_url": "https://api.github.com/users/fxfitz/followers", "following_url": "https://api.github.com/users/fxfitz/following{/other_user}", "gists_url": "https://api.github.com/users/fxfitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxfitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxfitz/subscriptions", "organizations_url": "https://api.github.com/users/fxfitz/orgs", "repos_url": "https://api.github.com/users/fxfitz/repos", "events_url": "https://api.github.com/users/fxfitz/events{/privacy}", "received_events_url": "https://api.github.com/users/fxfitz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-05-02T20:03:25Z", "updated_at": "2017-02-21T19:41:34Z", "closed_at": "2017-02-21T19:41:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Today I had the problem with the following code in **record** mode:\n\n``` python\n            stdout_key = self._s3.Object(bucket_name='somebucket',\n                                         key='{}/stdout'.format(location))\n            result_output = stdout_key.get()['Body'].read()\n```\n\nNo matter what, `result_output` was always `''`.  After some digging, I was able to determine that the stream was already read.\n\n``` python\n(Pdb) test = stdout_key.get()['Body']\n(Pdb) test._raw_stream.tell()\n5\n```\n\nImportant note: the tests run fine and work as expected when in **playback** mode, and the content of the StreamingBody is saved correctly to the cassette.\n\nMy assumption: Placebo is `read()`ing the StreamingBody while in record mode so that it can save it to the cassette.\n\nIs there any way we can still present the results correctly? I'd like to avoid having my tests fail in record mode and then pass during playback mode. :-P\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/46", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/46/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/46/events", "html_url": "https://github.com/garnaat/placebo/issues/46", "id": 140599962, "node_id": "MDU6SXNzdWUxNDA1OTk5NjI=", "number": 46, "title": "Table really created in Dynamodb", "user": {"login": "next-ivanblanquez", "id": 7048741, "node_id": "MDQ6VXNlcjcwNDg3NDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/7048741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/next-ivanblanquez", "html_url": "https://github.com/next-ivanblanquez", "followers_url": "https://api.github.com/users/next-ivanblanquez/followers", "following_url": "https://api.github.com/users/next-ivanblanquez/following{/other_user}", "gists_url": "https://api.github.com/users/next-ivanblanquez/gists{/gist_id}", "starred_url": "https://api.github.com/users/next-ivanblanquez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/next-ivanblanquez/subscriptions", "organizations_url": "https://api.github.com/users/next-ivanblanquez/orgs", "repos_url": "https://api.github.com/users/next-ivanblanquez/repos", "events_url": "https://api.github.com/users/next-ivanblanquez/events{/privacy}", "received_events_url": "https://api.github.com/users/next-ivanblanquez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-03-14T07:46:51Z", "updated_at": "2017-08-13T05:37:19Z", "closed_at": "2017-02-21T19:41:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Garnaat,\n\nI'm trying to configure placebo to test my code, but I think I'm doing something bad. I not be able to configure placebo to work in local enviroment, I must use real credentials and when I use placebo to create a data base, It be created in AWS DynamoDB in my real account, if I use a not real credentials I get a conecttion error \"ClientError: An error occurred (UnrecognizedClientException) when calling the CreateTable operation: The security token included in the request is invali\"d  This is my code, Could you help me please?\n\n```\nimport unittest\n\nimport boto3\nimport placebo\nfrom placebo.utils import placebo_session\n\n\nclass TestIntegrationDynamodbTableDao(unittest.TestCase):\n    __access_key = \"Fake\"\n    __secret_key = \"Fake\"\n    __token = \"Fake\"\n    __region = \"local\"\n    __table = None\n    __resource = None\n    __pill = None\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        self.__pill.stop()\n\n    def test_given_when_then(self):\n        # self.__session = boto3.Session(aws_access_key_id=self.__access_key, aws_secret_access_key=self.__secret_key, aws_session_token=self.__token,\n        self.__session = boto3.Session(aws_access_key_id=self.__access_key, aws_secret_access_key=self.__secret_key, region_name=self.__region)\n        self.__pill = placebo.attach(self.__session, data_path='/home/ivan/tmp')\n        # self.__pill.record(services='dynamodb')\n        # self.__pill.record()\n        self.__resource = self.__session.resource('dynamodb')\n        self.__pill.playback()\n        self.__resource.create_table(TableName='test',\n                                     KeySchema=[{'AttributeName': 'zn', 'KeyType': 'HASH'},\n                                                {'AttributeName': 'dt', 'KeyType': 'RANGE'}],\n                                     AttributeDefinitions=[{'AttributeName': 'zn', 'AttributeType': 'S'},\n                                                           {'AttributeName': 'dt', 'AttributeType': 'S'}],\n                                     ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5})\n        self.__pill.stop()\n        print \"hello\"\n\n\nif __name__ == '__main__':\n    unittest.main()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/40", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/40/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/40/events", "html_url": "https://github.com/garnaat/placebo/issues/40", "id": 136437522, "node_id": "MDU6SXNzdWUxMzY0Mzc1MjI=", "number": 40, "title": "Placebo as a decorator", "user": {"login": "Miserlou", "id": 139987, "node_id": "MDQ6VXNlcjEzOTk4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/139987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Miserlou", "html_url": "https://github.com/Miserlou", "followers_url": "https://api.github.com/users/Miserlou/followers", "following_url": "https://api.github.com/users/Miserlou/following{/other_user}", "gists_url": "https://api.github.com/users/Miserlou/gists{/gist_id}", "starred_url": "https://api.github.com/users/Miserlou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Miserlou/subscriptions", "organizations_url": "https://api.github.com/users/Miserlou/orgs", "repos_url": "https://api.github.com/users/Miserlou/repos", "events_url": "https://api.github.com/users/Miserlou/events{/privacy}", "received_events_url": "https://api.github.com/users/Miserlou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-02-25T16:28:24Z", "updated_at": "2016-02-26T13:14:11Z", "closed_at": "2016-02-26T13:14:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We've been using Placebo in [Zappa](https://github.com/Miserlou/Zappa) as a [decorator](https://github.com/Miserlou/Zappa/blob/master/tests/utils.py) - would it be useful for you to have this moved upstream? \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/36", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/36/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/36/events", "html_url": "https://github.com/garnaat/placebo/issues/36", "id": 134741051, "node_id": "MDU6SXNzdWUxMzQ3NDEwNTE=", "number": 36, "title": "Spy on method parameters, and still return fake response?", "user": {"login": "ghostsquad", "id": 903488, "node_id": "MDQ6VXNlcjkwMzQ4OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/903488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghostsquad", "html_url": "https://github.com/ghostsquad", "followers_url": "https://api.github.com/users/ghostsquad/followers", "following_url": "https://api.github.com/users/ghostsquad/following{/other_user}", "gists_url": "https://api.github.com/users/ghostsquad/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghostsquad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghostsquad/subscriptions", "organizations_url": "https://api.github.com/users/ghostsquad/orgs", "repos_url": "https://api.github.com/users/ghostsquad/repos", "events_url": "https://api.github.com/users/ghostsquad/events{/privacy}", "received_events_url": "https://api.github.com/users/ghostsquad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-19T00:49:24Z", "updated_at": "2016-02-19T17:21:54Z", "closed_at": "2016-02-19T17:21:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm wondering if there is anyway to combine `placebo` functionality with `mock`. I'd like do something like this:\n\n``` Python\nsession = boto3.Session()\npill = placebo.attach(session, data_path=data_path)\npill.playback()\nautoscaling = session.client('autoscaling')\n\n# sut setup here\nsut.kill_inst_in_asg('foo')\n# the system under test (sut) calls:\n# autoscaling.terminate_instance_in_auto_scaling_group(InstanceId='foo')\n\npill.get_method('terminate_instance_in_auto_scaling_group').assert_called_with('foo')\n# or\npill.get_method('terminate_instance_in_auto_scaling_group').assert_called_with(InstanceId='foo')\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/31", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/31/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/31/events", "html_url": "https://github.com/garnaat/placebo/issues/31", "id": 134271683, "node_id": "MDU6SXNzdWUxMzQyNzE2ODM=", "number": 31, "title": "Add `session` property to `Pill` class", "user": {"login": "vlcinsky", "id": 635911, "node_id": "MDQ6VXNlcjYzNTkxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/635911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlcinsky", "html_url": "https://github.com/vlcinsky", "followers_url": "https://api.github.com/users/vlcinsky/followers", "following_url": "https://api.github.com/users/vlcinsky/following{/other_user}", "gists_url": "https://api.github.com/users/vlcinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlcinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlcinsky/subscriptions", "organizations_url": "https://api.github.com/users/vlcinsky/orgs", "repos_url": "https://api.github.com/users/vlcinsky/repos", "events_url": "https://api.github.com/users/vlcinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/vlcinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-17T12:55:06Z", "updated_at": "2016-02-17T13:38:37Z", "closed_at": "2016-02-17T13:22:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to use `placebo` in my `pytest` based suite, I have found, that in some scenarions (recording responses) I have forgotten to `pill.stop()` recording. For this reason my recording test was not failing when it was supposed to (when I disconnected from Internet).\n\nFor this reason I have decided to use `@pytest.fixture` called `recording_pill`, which at teardown calls `pill.stop()`.\n\nAnyway, I have found, I need to get the session bound to the pill and the only way to do it now is to ask `pill._session` breaking the rule \"we are all adults\" and accessed the private property.\n\nIt would be handy to **have (possibly read-only) `session` property on the `Pill` class.**\n\nHere is my current test suite `tests/test_logs.py`:\n\n```\nimport pytest\n\n\n@pytest.fixture\ndef session():\n    import boto3\n    return boto3.Session()\n\n\n@pytest.fixture(scope=\"session\")\ndef records_path(tmpdir_factory):\n    \"\"\"(py.path.local) directory for recorded responses\"\"\"\n    path = tmpdir_factory.mktemp(\"logs\")\n    path.ensure_dir()\n    return path\n\n\n@pytest.yield_fixture\ndef recording_pill(session, records_path):\n    import placebo\n    pill = placebo.attach(session, data_path=records_path.strpath)\n    pill.record()\n    yield pill\n    # tear down\n    pill.stop()\n\n\n@pytest.yield_fixture\ndef replaying_pill(session, records_path):\n    import placebo\n    pill = placebo.attach(session, data_path=records_path.strpath)\n    pill.playback()\n    yield pill\n    # tear down\n    pill.stop()\n\n\ndef get_groups(client):\n        paginator = client.get_paginator('describe_log_groups')\n        for page in paginator.paginate():\n            for group in page.get('logGroups', []):\n                yield group['logGroupName']\n\n\ndef test_recording(recording_pill):\n    session = recording_pill._session  # better access public property here\n    client = session.client(\"logs\")\n    groups = list(get_groups(client))\n    assert groups\n\n\ndef test_playback(replaying_pill):\n    session = replaying_pill._session  # better access public property here\n    client = session.client(\"logs\")\n    groups = list(get_groups(client))\n    assert groups\n```\n\nI could possibly pass the `session` value into `test_recording` and\n`test_playback`, but this is tricky as I really want to be sure, it is exactly\nthe `session` the pill was created for.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/27", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/27/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/27/events", "html_url": "https://github.com/garnaat/placebo/issues/27", "id": 126869987, "node_id": "MDU6SXNzdWUxMjY4Njk5ODc=", "number": 27, "title": "Requesting a release with 'prefix' argument included", "user": {"login": "ghicks-rmn", "id": 5115694, "node_id": "MDQ6VXNlcjUxMTU2OTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5115694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghicks-rmn", "html_url": "https://github.com/ghicks-rmn", "followers_url": "https://api.github.com/users/ghicks-rmn/followers", "following_url": "https://api.github.com/users/ghicks-rmn/following{/other_user}", "gists_url": "https://api.github.com/users/ghicks-rmn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghicks-rmn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghicks-rmn/subscriptions", "organizations_url": "https://api.github.com/users/ghicks-rmn/orgs", "repos_url": "https://api.github.com/users/ghicks-rmn/repos", "events_url": "https://api.github.com/users/ghicks-rmn/events{/privacy}", "received_events_url": "https://api.github.com/users/ghicks-rmn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-01-15T13:16:28Z", "updated_at": "2016-01-15T13:53:28Z", "closed_at": "2016-01-15T13:53:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I submitted a pull request a while back to add an optional 'prefix' argument, which I needed for tracking multiple sessions with Placebo. It's been merged into the project. but the latest '0.4.3' release does not have the argument.\n\nCan we get a release pushed to PyPI that has the argument included? I already have code written that is depending on it, but I'm stuck importing my local development version until the feature is available in the public release.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/26", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/26/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/26/events", "html_url": "https://github.com/garnaat/placebo/issues/26", "id": 122372838, "node_id": "MDU6SXNzdWUxMjIzNzI4Mzg=", "number": 26, "title": "Keep an eye on this", "user": {"login": "garnaat", "id": 2056, "node_id": "MDQ6VXNlcjIwNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garnaat", "html_url": "https://github.com/garnaat", "followers_url": "https://api.github.com/users/garnaat/followers", "following_url": "https://api.github.com/users/garnaat/following{/other_user}", "gists_url": "https://api.github.com/users/garnaat/gists{/gist_id}", "starred_url": "https://api.github.com/users/garnaat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garnaat/subscriptions", "organizations_url": "https://api.github.com/users/garnaat/orgs", "repos_url": "https://api.github.com/users/garnaat/repos", "events_url": "https://api.github.com/users/garnaat/events{/privacy}", "received_events_url": "https://api.github.com/users/garnaat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-15T21:38:49Z", "updated_at": "2016-02-15T19:41:35Z", "closed_at": "2016-02-15T19:41:35Z", "author_association": "OWNER", "active_lock_reason": null, "body": "https://github.com/boto/botocore/pull/741\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/23", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/23/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/23/events", "html_url": "https://github.com/garnaat/placebo/issues/23", "id": 122327506, "node_id": "MDU6SXNzdWUxMjIzMjc1MDY=", "number": 23, "title": "README.md missing from manifest", "user": {"login": "pas256", "id": 92010, "node_id": "MDQ6VXNlcjkyMDEw", "avatar_url": "https://avatars1.githubusercontent.com/u/92010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pas256", "html_url": "https://github.com/pas256", "followers_url": "https://api.github.com/users/pas256/followers", "following_url": "https://api.github.com/users/pas256/following{/other_user}", "gists_url": "https://api.github.com/users/pas256/gists{/gist_id}", "starred_url": "https://api.github.com/users/pas256/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pas256/subscriptions", "organizations_url": "https://api.github.com/users/pas256/orgs", "repos_url": "https://api.github.com/users/pas256/repos", "events_url": "https://api.github.com/users/pas256/events{/privacy}", "received_events_url": "https://api.github.com/users/pas256/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-15T17:47:11Z", "updated_at": "2015-12-15T18:29:01Z", "closed_at": "2015-12-15T18:23:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Error while installing Kappa\n\n```\nProcessing dependencies for kappa==0.3.1\nSearching for placebo>=0.4.1\nReading https://pypi.python.org/simple/placebo/\nBest match: placebo 0.4.2\nDownloading https://pypi.python.org/packages/source/p/placebo/placebo-0.4.2.tar.gz#md5=e9889017cd87355684fe9c6f2071d0d7\nProcessing placebo-0.4.2.tar.gz\nWriting /var/folders/9k/4xz7zjt95qgg1_tr6rnvzghr0000gn/T/easy_install-rRI3Av/placebo-0.4.2/setup.cfg\nRunning placebo-0.4.2/setup.py -q bdist_egg --dist-dir /var/folders/9k/4xz7zjt95qgg1_tr6rnvzghr0000gn/T/easy_install-rRI3Av/placebo-0.4.2/egg-dist-tmp-L8eSzP\nerror: [Errno 2] No such file or directory: 'README.md'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/22", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/22/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/22/events", "html_url": "https://github.com/garnaat/placebo/issues/22", "id": 122131808, "node_id": "MDU6SXNzdWUxMjIxMzE4MDg=", "number": 22, "title": "Loading multiple stored responses in single test", "user": {"login": "avs3323", "id": 8801388, "node_id": "MDQ6VXNlcjg4MDEzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8801388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avs3323", "html_url": "https://github.com/avs3323", "followers_url": "https://api.github.com/users/avs3323/followers", "following_url": "https://api.github.com/users/avs3323/following{/other_user}", "gists_url": "https://api.github.com/users/avs3323/gists{/gist_id}", "starred_url": "https://api.github.com/users/avs3323/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avs3323/subscriptions", "organizations_url": "https://api.github.com/users/avs3323/orgs", "repos_url": "https://api.github.com/users/avs3323/repos", "events_url": "https://api.github.com/users/avs3323/events{/privacy}", "received_events_url": "https://api.github.com/users/avs3323/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-14T21:08:59Z", "updated_at": "2015-12-30T20:24:50Z", "closed_at": "2015-12-30T20:24:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI have a unit test set up where I have recorded the results from a valid run, and an invalid run.\n\nI have 2 recorded placebo files, one in each directory, structured like this ('./goodtest/xxx_1.json', './badtest/xxx_1.json')\n\nI have 2 tests, where each test loads from a separate directory, like so:\n\n```\ndef test_verify_invalid(self):\n    invalid_session = boto3.Session()\n    pill = placebo.attach(invalid_session, data_path='./badtest/')\n    pill.playback()\n\n    with Replacer() as r:\n        r.replace('src.SESSION', invalid_session)\n        self.assertFalse(verify_thing(BADARGS))\n        pill.stop()\n\ndef test_verify_valid(self):\n    valid_session = boto3.Session()\n    pill = placebo.attach(valid_session, data_path='./goodtest/')\n    pill.playback()\n\n    with Replacer() as r:\n        r.replace('src.SESSION', valid_session)\n        self.assertTrue(verify_thing(GOODARGS))\n        pill.stop()\n```\n\nHowever, I get the 'bad' event for both tests.  I have verified that if I take the 'good' output, and put it into the badtest folder (the one that is loaded first)  and name it 'xxx_2.json' , it works fine.\n\nAm I doing something wrong?  I could have them both in the same folder, but that would require specific ordering of my tests, which doesn't seem right to me.\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/20", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/20/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/20/events", "html_url": "https://github.com/garnaat/placebo/issues/20", "id": 122073619, "node_id": "MDU6SXNzdWUxMjIwNzM2MTk=", "number": 20, "title": "Optional prefix for saved response filenames", "user": {"login": "gffhcks", "id": 5241287, "node_id": "MDQ6VXNlcjUyNDEyODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5241287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gffhcks", "html_url": "https://github.com/gffhcks", "followers_url": "https://api.github.com/users/gffhcks/followers", "following_url": "https://api.github.com/users/gffhcks/following{/other_user}", "gists_url": "https://api.github.com/users/gffhcks/gists{/gist_id}", "starred_url": "https://api.github.com/users/gffhcks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gffhcks/subscriptions", "organizations_url": "https://api.github.com/users/gffhcks/orgs", "repos_url": "https://api.github.com/users/gffhcks/repos", "events_url": "https://api.github.com/users/gffhcks/events{/privacy}", "received_events_url": "https://api.github.com/users/gffhcks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-12-14T16:08:04Z", "updated_at": "2015-12-17T15:54:00Z", "closed_at": "2015-12-17T15:54:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I noticed that each time Placebo writes a new response JSON file, it adds a `_<number>` suffix before the `.json`, and simply increments the suffix until it finds one that doesn't exist yet. This is better than overwriting previous runs, but doesn't give any way to distinguish multiple runs.\n\nWhat would be really nice, is if you could optionally set a `prefix` argument on a `Pill` object. This prefix would be applied to all filenames written by the pill, like so: `prefix.iam.ListUserPolicies_1.json`.\n\nI can think of two good use cases for this:\n1. Define the prefix uniquely on each execution, using a command line argument, timestamp, or some other generated value. Now individual executions can be reloaded and replayed, or even diffed for comparison.\n2. For an application that uses multiple Boto sessions, define a different prefix for each session. For example, I can use `base` for my initial credentials session, `mfa` for my new session after MFA authentication, and `<rolename>` for a session created using an IAM role.  I can even combine that with a timestamp (as in case 1) to separate multiple runs.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/19", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/19/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/19/events", "html_url": "https://github.com/garnaat/placebo/issues/19", "id": 122015603, "node_id": "MDU6SXNzdWUxMjIwMTU2MDM=", "number": 19, "title": "pypi metadata cleanup", "user": {"login": "kapilt", "id": 21650, "node_id": "MDQ6VXNlcjIxNjUw", "avatar_url": "https://avatars3.githubusercontent.com/u/21650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kapilt", "html_url": "https://github.com/kapilt", "followers_url": "https://api.github.com/users/kapilt/followers", "following_url": "https://api.github.com/users/kapilt/following{/other_user}", "gists_url": "https://api.github.com/users/kapilt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kapilt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kapilt/subscriptions", "organizations_url": "https://api.github.com/users/kapilt/orgs", "repos_url": "https://api.github.com/users/kapilt/repos", "events_url": "https://api.github.com/users/kapilt/events{/privacy}", "received_events_url": "https://api.github.com/users/kapilt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-14T10:32:40Z", "updated_at": "2015-12-14T13:28:34Z", "closed_at": "2015-12-14T13:28:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "LICENSE should just be Apache2, at the moment setup.py is long forming the license.txt\nie. see https://pypi.python.org/pypi/placebo/0.4.1\n\nInstead it should be long forming the readme as long_description for display on pypi page.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/17", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/17/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/17/events", "html_url": "https://github.com/garnaat/placebo/issues/17", "id": 121940823, "node_id": "MDU6SXNzdWUxMjE5NDA4MjM=", "number": 17, "title": "__init__.py uses data_file argument instead of data_path", "user": {"login": "gffhcks", "id": 5241287, "node_id": "MDQ6VXNlcjUyNDEyODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5241287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gffhcks", "html_url": "https://github.com/gffhcks", "followers_url": "https://api.github.com/users/gffhcks/followers", "following_url": "https://api.github.com/users/gffhcks/following{/other_user}", "gists_url": "https://api.github.com/users/gffhcks/gists{/gist_id}", "starred_url": "https://api.github.com/users/gffhcks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gffhcks/subscriptions", "organizations_url": "https://api.github.com/users/gffhcks/orgs", "repos_url": "https://api.github.com/users/gffhcks/repos", "events_url": "https://api.github.com/users/gffhcks/events{/privacy}", "received_events_url": "https://api.github.com/users/gffhcks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-13T20:13:46Z", "updated_at": "2015-12-13T21:39:58Z", "closed_at": "2015-12-13T21:39:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Apparently #15 was an incomplete description of the issue. While `data_path` was used in the code and `data_dir` in the docs, the `attach` interface defined in `__init__.py` uses `data_file`.\n\nWhile the interface works fine with positional arguments, the `attach` example in the readme uses a named argument and still causes an exception.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/15", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/15/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/15/events", "html_url": "https://github.com/garnaat/placebo/issues/15", "id": 121938392, "node_id": "MDU6SXNzdWUxMjE5MzgzOTI=", "number": 15, "title": "Docs reference an incorrect 'data_dir' argument on pill objects", "user": {"login": "gffhcks", "id": 5241287, "node_id": "MDQ6VXNlcjUyNDEyODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5241287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gffhcks", "html_url": "https://github.com/gffhcks", "followers_url": "https://api.github.com/users/gffhcks/followers", "following_url": "https://api.github.com/users/gffhcks/following{/other_user}", "gists_url": "https://api.github.com/users/gffhcks/gists{/gist_id}", "starred_url": "https://api.github.com/users/gffhcks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gffhcks/subscriptions", "organizations_url": "https://api.github.com/users/gffhcks/orgs", "repos_url": "https://api.github.com/users/gffhcks/repos", "events_url": "https://api.github.com/users/gffhcks/events{/privacy}", "received_events_url": "https://api.github.com/users/gffhcks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-13T19:34:13Z", "updated_at": "2015-12-13T19:53:35Z", "closed_at": "2015-12-13T19:53:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The README.md references a `data_dir` argument for setting the save/load directory when attaching to a session. The code actually uses `data_path` as the argument.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/13", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/13/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/13/events", "html_url": "https://github.com/garnaat/placebo/issues/13", "id": 121290412, "node_id": "MDU6SXNzdWUxMjEyOTA0MTI=", "number": 13, "title": "Placebo doesn't work with AWS responses that use botocore.response.StreamingBody", "user": {"login": "avs3323", "id": 8801388, "node_id": "MDQ6VXNlcjg4MDEzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8801388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avs3323", "html_url": "https://github.com/avs3323", "followers_url": "https://api.github.com/users/avs3323/followers", "following_url": "https://api.github.com/users/avs3323/following{/other_user}", "gists_url": "https://api.github.com/users/avs3323/gists{/gist_id}", "starred_url": "https://api.github.com/users/avs3323/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avs3323/subscriptions", "organizations_url": "https://api.github.com/users/avs3323/orgs", "repos_url": "https://api.github.com/users/avs3323/repos", "events_url": "https://api.github.com/users/avs3323/events{/privacy}", "received_events_url": "https://api.github.com/users/avs3323/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-09T16:52:42Z", "updated_at": "2015-12-09T16:53:10Z", "closed_at": "2015-12-09T16:53:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nThanks for fixing the last issue!  I figured this problem was different enough to need its own issue.\n\nplacebo crashes when I make an API call that returns a botocore.response.StreamingBody:\n\n`{'data.iot.GetThingShadow': {'index': 0, 'responses': [(200, {u'payload': <botocore.response.StreamingBody object at 0x109db4a10>, 'ResponseMetadata': {'HTTPStatusCode': 200, 'RequestId': '73d3ede2-cd17-4bf7-afe5-0facc8f194a1'}})]}}\nTraceback (most recent call last):\n  File \"iot_test.py\", line 8, in <module>\n    iot.meta.placebo.save('my_saved_iot_calls.json')\n  File \"/usr/local/lib/python2.7/site-packages/placebo.py\", line 68, in save\n    json.dump(self.mock_responses, fp, indent=4, default=serialize)\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py\", line 189, in dump\n    for chunk in iterable:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 434, in _iterencode\n    for chunk in _iterencode_dict(o, _current_indent_level):\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 332, in _iterencode_list\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 332, in _iterencode_list\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 442, in _iterencode\n    o = _default(o)\n  File \"/usr/local/lib/python2.7/site-packages/placebo.py\", line 164, in serialize\n    raise TypeError(\"Type not serializable\")\nTypeError: Type not serializable`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/12", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/12/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/12/events", "html_url": "https://github.com/garnaat/placebo/issues/12", "id": 121290070, "node_id": "MDU6SXNzdWUxMjEyOTAwNzA=", "number": 12, "title": "JSON serialization error", "user": {"login": "garnaat", "id": 2056, "node_id": "MDQ6VXNlcjIwNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garnaat", "html_url": "https://github.com/garnaat", "followers_url": "https://api.github.com/users/garnaat/followers", "following_url": "https://api.github.com/users/garnaat/following{/other_user}", "gists_url": "https://api.github.com/users/garnaat/gists{/gist_id}", "starred_url": "https://api.github.com/users/garnaat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garnaat/subscriptions", "organizations_url": "https://api.github.com/users/garnaat/orgs", "repos_url": "https://api.github.com/users/garnaat/repos", "events_url": "https://api.github.com/users/garnaat/events{/privacy}", "received_events_url": "https://api.github.com/users/garnaat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-12-09T16:50:59Z", "updated_at": "2016-02-16T02:06:42Z", "closed_at": "2016-02-16T01:46:04Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I ran into another issue, one of the API calls returns a botocore.streamingBody, which causes an issue on JSON serialization:\n\n```\n>>>>> python iot_test.py \n{'data.iot.GetThingShadow': {'index': 0, 'responses': [(200, {u'payload': <botocore.response.StreamingBody object at 0x109db4a10>, 'ResponseMetadata': {'HTTPStatusCode': 200, 'RequestId': '73d3ede2-cd17-4bf7-afe5-0facc8f194a1'}})]}}\nTraceback (most recent call last):\n  File \"iot_test.py\", line 8, in <module>\n    iot.meta.placebo.save('my_saved_iot_calls.json')\n  File \"/usr/local/lib/python2.7/site-packages/placebo.py\", line 68, in save\n    json.dump(self.mock_responses, fp, indent=4, default=serialize)\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py\", line 189, in dump\n    for chunk in iterable:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 434, in _iterencode\n    for chunk in _iterencode_dict(o, _current_indent_level):\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 332, in _iterencode_list\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 332, in _iterencode_list\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 442, in _iterencode\n    o = _default(o)\n  File \"/usr/local/lib/python2.7/site-packages/placebo.py\", line 164, in serialize\n    raise TypeError(\"Type not serializable\")\nTypeError: Type not serializable\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/10", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/10/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/10/events", "html_url": "https://github.com/garnaat/placebo/issues/10", "id": 121272704, "node_id": "MDU6SXNzdWUxMjEyNzI3MDQ=", "number": 10, "title": "Crashes when saving results from an AWS service with 2 'names'", "user": {"login": "avs3323", "id": 8801388, "node_id": "MDQ6VXNlcjg4MDEzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8801388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avs3323", "html_url": "https://github.com/avs3323", "followers_url": "https://api.github.com/users/avs3323/followers", "following_url": "https://api.github.com/users/avs3323/following{/other_user}", "gists_url": "https://api.github.com/users/avs3323/gists{/gist_id}", "starred_url": "https://api.github.com/users/avs3323/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avs3323/subscriptions", "organizations_url": "https://api.github.com/users/avs3323/orgs", "repos_url": "https://api.github.com/users/avs3323/repos", "events_url": "https://api.github.com/users/avs3323/events{/privacy}", "received_events_url": "https://api.github.com/users/avs3323/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-12-09T15:37:24Z", "updated_at": "2015-12-09T16:51:50Z", "closed_at": "2015-12-09T16:20:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code causes placebo to crash:\n\niot_data = session.client(client='iot-data')\n.....\niot_data.meta.placebo.save('iot-data')\n\nOn line 49 in placebo.py:\n\n_, service_name, operation_name = kwargs['event_name'].split('.')\n\nWhere kwargs['event_name'] is \"after-call.data.iot.GetThingShadow\"\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/9", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/9/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/9/events", "html_url": "https://github.com/garnaat/placebo/issues/9", "id": 121271272, "node_id": "MDU6SXNzdWUxMjEyNzEyNzI=", "number": 9, "title": "Strategies for integrating into an existing codebase", "user": {"login": "gffhcks", "id": 5241287, "node_id": "MDQ6VXNlcjUyNDEyODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5241287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gffhcks", "html_url": "https://github.com/gffhcks", "followers_url": "https://api.github.com/users/gffhcks/followers", "following_url": "https://api.github.com/users/gffhcks/following{/other_user}", "gists_url": "https://api.github.com/users/gffhcks/gists{/gist_id}", "starred_url": "https://api.github.com/users/gffhcks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gffhcks/subscriptions", "organizations_url": "https://api.github.com/users/gffhcks/orgs", "repos_url": "https://api.github.com/users/gffhcks/repos", "events_url": "https://api.github.com/users/gffhcks/events{/privacy}", "received_events_url": "https://api.github.com/users/gffhcks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2015-12-09T15:32:00Z", "updated_at": "2015-12-14T18:31:36Z", "closed_at": "2015-12-14T18:31:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "One thing I'm having trouble wrapping my head around, which maybe should be clarified in the readme: if I have an existing Boto application that I want to write unit tests for, and I want to use Placebo, how do I do so?\n\nThe main problem that I'm seeing is that loading and saving the stored responses happens on the boto _client_ object, which is often created inside a class object or function; there's not much utility to passing clients as function arguments, because they're just containers for the API methods. (As far as I know, at least - feel free to correct me if passing them as arguments is better practice.)\n\nIf the client isn't being passed to the class or function, then as far as I can tell I have to pass parameters to it instead, telling it whether to save or load the placebo data, before I can access that behavior in my unit test. That also implies adding code to act on those parameters (\"if save_placebo, then record and save; if load_placebo, then load the json before making any calls\").\n\nMy concern with doing it this way is that it pollutes the module being tested with lots of scaffolding code that doesn't actually contribute to the application's purpose, or get used in production. Something like Mock, or Moto, for example, can typically be set up entirely in the test module, without affecting the original code's readability.\n\n@garnaat - if I was going to use Placebo to test, say, a CLI tool - how would you recommend applying it while changing the application code as little as possible?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/6", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/6/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/6/events", "html_url": "https://github.com/garnaat/placebo/issues/6", "id": 120289807, "node_id": "MDU6SXNzdWUxMjAyODk4MDc=", "number": 6, "title": "mock responses are stored in a class variable", "user": {"login": "garnaat", "id": 2056, "node_id": "MDQ6VXNlcjIwNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garnaat", "html_url": "https://github.com/garnaat", "followers_url": "https://api.github.com/users/garnaat/followers", "following_url": "https://api.github.com/users/garnaat/following{/other_user}", "gists_url": "https://api.github.com/users/garnaat/gists{/gist_id}", "starred_url": "https://api.github.com/users/garnaat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garnaat/subscriptions", "organizations_url": "https://api.github.com/users/garnaat/orgs", "repos_url": "https://api.github.com/users/garnaat/repos", "events_url": "https://api.github.com/users/garnaat/events{/privacy}", "received_events_url": "https://api.github.com/users/garnaat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 290788038, "node_id": "MDU6TGFiZWwyOTA3ODgwMzg=", "url": "https://api.github.com/repos/garnaat/placebo/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "garnaat", "id": 2056, "node_id": "MDQ6VXNlcjIwNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garnaat", "html_url": "https://github.com/garnaat", "followers_url": "https://api.github.com/users/garnaat/followers", "following_url": "https://api.github.com/users/garnaat/following{/other_user}", "gists_url": "https://api.github.com/users/garnaat/gists{/gist_id}", "starred_url": "https://api.github.com/users/garnaat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garnaat/subscriptions", "organizations_url": "https://api.github.com/users/garnaat/orgs", "repos_url": "https://api.github.com/users/garnaat/repos", "events_url": "https://api.github.com/users/garnaat/events{/privacy}", "received_events_url": "https://api.github.com/users/garnaat/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "garnaat", "id": 2056, "node_id": "MDQ6VXNlcjIwNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garnaat", "html_url": "https://github.com/garnaat", "followers_url": "https://api.github.com/users/garnaat/followers", "following_url": "https://api.github.com/users/garnaat/following{/other_user}", "gists_url": "https://api.github.com/users/garnaat/gists{/gist_id}", "starred_url": "https://api.github.com/users/garnaat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garnaat/subscriptions", "organizations_url": "https://api.github.com/users/garnaat/orgs", "repos_url": "https://api.github.com/users/garnaat/repos", "events_url": "https://api.github.com/users/garnaat/events{/privacy}", "received_events_url": "https://api.github.com/users/garnaat/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2015-12-03T22:50:52Z", "updated_at": "2015-12-03T22:53:33Z", "closed_at": "2015-12-03T22:53:33Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This should be an instance variable.  Otherwise, if you have multiple clients all responses will be merged into the same dictionary.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/5", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/5/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/5/events", "html_url": "https://github.com/garnaat/placebo/issues/5", "id": 120277869, "node_id": "MDU6SXNzdWUxMjAyNzc4Njk=", "number": 5, "title": "Exception - TypeError: datetime.datetime(...) is not JSON serializable", "user": {"login": "gffhcks", "id": 5241287, "node_id": "MDQ6VXNlcjUyNDEyODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5241287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gffhcks", "html_url": "https://github.com/gffhcks", "followers_url": "https://api.github.com/users/gffhcks/followers", "following_url": "https://api.github.com/users/gffhcks/following{/other_user}", "gists_url": "https://api.github.com/users/gffhcks/gists{/gist_id}", "starred_url": "https://api.github.com/users/gffhcks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gffhcks/subscriptions", "organizations_url": "https://api.github.com/users/gffhcks/orgs", "repos_url": "https://api.github.com/users/gffhcks/repos", "events_url": "https://api.github.com/users/gffhcks/events{/privacy}", "received_events_url": "https://api.github.com/users/gffhcks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-12-03T21:49:47Z", "updated_at": "2015-12-08T16:27:18Z", "closed_at": "2015-12-08T16:27:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Some API calls in boto3 include `datetime` objects in the dictionary return values. Datetime is not one of the types that the `json` package understands, causing an exception when it tries to serialize it into a JSON file for the `save()` method:\n\n``` python\nTraceback (most recent call last):\n  File \"/usr/local/bin/testcode\", line 9, in <module>\n    load_entry_point('testcode==0.1', 'console_scripts', 'testcode')()\n  File \"/usr/local/lib/python2.7/site-packages/testcode-0.1-py2.7.egg/testcode/main.py\", line 511, in main\n    user.save_placebo()\n  File \"/usr/local/lib/python2.7/site-packages/testcode-0.1-py2.7.egg/testcode/main.py\", line 228, in save_placebo\n    self.client.meta.placebo.save(path)\n  File \"build/bdist.macosx-10.10-x86_64/egg/placebo.py\", line 60, in save\n  File \"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py\", line 189, in dump\n    for chunk in iterable:\n  File \"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 434, in _iterencode\n    for chunk in _iterencode_dict(o, _current_indent_level):\n  File \"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 332, in _iterencode_list\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 332, in _iterencode_list\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 442, in _iterencode\n    o = _default(o)\n  File \"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 184, in default\n    raise TypeError(repr(o) + \" is not JSON serializable\")\nTypeError: datetime.datetime(2015, 12, 3, 21, 20, 17, 326000, tzinfo=tzutc()) is not JSON serializable\n```\n\nThe `json.dump()` method takes an optional argument `default`, allowing you to pass a function that returns serializable versions of objects. There's an example for datetime on Stack Overflow here:\nhttp://stackoverflow.com/a/22238613\n\nSimilarly, the load() method will need to convert ISO 8601 strings back to `datetime` objects before using them for mocking. This could get tricky if someone uses timestamps for AWS object names, but maybe they could be marked for conversion. For example, `'placebo_timestamp:2015-12-3-21:20:17:326000Z'` is hopefully pretty unlikely as an AWS object name.\n\nI will try to submit a PR for this soon.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/garnaat/placebo/issues/3", "repository_url": "https://api.github.com/repos/garnaat/placebo", "labels_url": "https://api.github.com/repos/garnaat/placebo/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/garnaat/placebo/issues/3/comments", "events_url": "https://api.github.com/repos/garnaat/placebo/issues/3/events", "html_url": "https://github.com/garnaat/placebo/issues/3", "id": 120262405, "node_id": "MDU6SXNzdWUxMjAyNjI0MDU=", "number": 3, "title": "Python 3 support - 'wb' write mode causes TypeError", "user": {"login": "gffhcks", "id": 5241287, "node_id": "MDQ6VXNlcjUyNDEyODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5241287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gffhcks", "html_url": "https://github.com/gffhcks", "followers_url": "https://api.github.com/users/gffhcks/followers", "following_url": "https://api.github.com/users/gffhcks/following{/other_user}", "gists_url": "https://api.github.com/users/gffhcks/gists{/gist_id}", "starred_url": "https://api.github.com/users/gffhcks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gffhcks/subscriptions", "organizations_url": "https://api.github.com/users/gffhcks/orgs", "repos_url": "https://api.github.com/users/gffhcks/repos", "events_url": "https://api.github.com/users/gffhcks/events{/privacy}", "received_events_url": "https://api.github.com/users/gffhcks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-03T20:28:15Z", "updated_at": "2015-12-03T22:27:43Z", "closed_at": "2015-12-03T22:27:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to use Placebo in Python 3, and getting an exception `TypeError: a bytes-like object is required, not 'str'` when trying to save the API calls.\n\nThe issue is with the save method, line 60 of placebo.py: \n\n``` python\n    def save(self, path):\n        with open(path, 'wb') as fp:\n            json.dump(self._mock_responses, fp, indent=4)\n```\n\nThe target file is being written as binary. In Python2 8-bit strings also handle byte sequences, but in Python3 byte sequences have their own `bytes` type, causing the TypeError. (https://www.python.org/dev/peps/pep-0404/#strings-and-bytes)\n\n@garnaat Was there a specific reason for the binary mode on the `save()` and `load()` methods? If not, the easiest fix is probably to just change them to 'r' and 'w'.\n", "performed_via_github_app": null, "score": 1.0}]}