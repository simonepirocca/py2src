{"total_count": 452, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/Julian/jsonschema/issues/715", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/715/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/715/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/715/events", "html_url": "https://github.com/Julian/jsonschema/issues/715", "id": 669923718, "node_id": "MDU6SXNzdWU2Njk5MjM3MTg=", "number": 715, "title": "Validator fails on some cyrillic symbols from UTF-8 file", "user": {"login": "Ujifman", "id": 34909951, "node_id": "MDQ6VXNlcjM0OTA5OTUx", "avatar_url": "https://avatars3.githubusercontent.com/u/34909951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ujifman", "html_url": "https://github.com/Ujifman", "followers_url": "https://api.github.com/users/Ujifman/followers", "following_url": "https://api.github.com/users/Ujifman/following{/other_user}", "gists_url": "https://api.github.com/users/Ujifman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ujifman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ujifman/subscriptions", "organizations_url": "https://api.github.com/users/Ujifman/orgs", "repos_url": "https://api.github.com/users/Ujifman/repos", "events_url": "https://api.github.com/users/Ujifman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ujifman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-31T15:18:14Z", "updated_at": "2020-08-02T12:07:30Z", "closed_at": "2020-08-01T13:08:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Command line tool fails to parse json file in UTF-8 with **\u0418** cyrillic symbol\r\nschema:\r\n```\r\n{\r\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"some\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"target\": {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"required\": [\r\n        \"some\"\r\n    ]\r\n}\r\n```\r\n\r\njson_file successfull:\r\n```\r\n{\r\n    \"some\": {\r\n        \"target\": \"\u0419\u0426\u042b\u0420\u0412\u0410\u0421\u0420\u041f\u041c\u0414\u041d\u041b\u0413\u0410\u041e\u041d\u0412\u0420\u0412\u041e\u0415\"\r\n    }\r\n}\r\n```\r\n\r\njson_file failing:\r\n```\r\n{\r\n    \"some\": {\r\n        \"target\": \"\u0419\u0426\u042b\u0420\u0412\u0410\u0421\u0420\u041f\u041c\u0414\u041d\u041b\u0413\u0410\u041e\u041d\u0412\u0420\u0412\u041e\u0415\u0418\"\r\n    }\r\n}\r\n```\r\nAll the problem in **\u0418** symbol. Encoding table fails to recognize because I can't pass `UTF-8` encoding in command line tool using arguments, and it defaults to `cp1251` (I'm not completely sure)\r\nCommand line tool answers:\r\n```\r\n $ jsonschema.exe -i test2.json schema.json\r\nusage: jsonschema.exe [-h] [-i INSTANCES] [-F ERROR_FORMAT] [-V VALIDATOR]\r\n                      [--version]\r\n                      schema\r\njsonschema.exe: error: argument -i/--instance: invalid _json_file value: 'test2.json'\r\n```\r\nI have two proposals:\r\n* add encoding exception catch to provide meaningfull answer\r\n* add encoding argument to pass file encoding", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/714", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/714/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/714/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/714/events", "html_url": "https://github.com/Julian/jsonschema/issues/714", "id": 669568189, "node_id": "MDU6SXNzdWU2Njk1NjgxODk=", "number": 714, "title": "Python 3.8 urllib issue", "user": {"login": "1995parham", "id": 8181240, "node_id": "MDQ6VXNlcjgxODEyNDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8181240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1995parham", "html_url": "https://github.com/1995parham", "followers_url": "https://api.github.com/users/1995parham/followers", "following_url": "https://api.github.com/users/1995parham/following{/other_user}", "gists_url": "https://api.github.com/users/1995parham/gists{/gist_id}", "starred_url": "https://api.github.com/users/1995parham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1995parham/subscriptions", "organizations_url": "https://api.github.com/users/1995parham/orgs", "repos_url": "https://api.github.com/users/1995parham/repos", "events_url": "https://api.github.com/users/1995parham/events{/privacy}", "received_events_url": "https://api.github.com/users/1995parham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-31T08:37:55Z", "updated_at": "2020-07-31T13:24:04Z", "closed_at": "2020-07-31T13:24:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "In python 3.8 the following code:\r\n\r\n```\r\nurllib.request.urlopen('file:///home/parham/.bashrc')\r\n```\r\n\r\nGenerates the following error:\r\n\r\n```\r\nTraceback (most recent call last):                                                                                                      \r\n  File \"<stdin>\", line 1, in <module>                                                                                                   \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 222, in urlopen\r\n    return opener.open(url, data, timeout)                                                                                              \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 525, in open\r\n    response = self._open(req, data)                                                                                                    \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 536, in _open\r\n    result = self._call_chain(self.handle_open, 'default',                                                                              \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 502, in _call_chain\r\n    result = func(*args)                                                                                                                \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 806, in <lambda>\r\n    meth(r, proxy, type))                                                                                                               \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 834, in proxy_open\r\n    return self.parent.open(req, timeout=req.timeout)                                                                                   \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 531, in open\r\n    response = meth(req, response)                                                                                                      \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 640, in http_response\r\n    response = self.parent.error(                                                                                                       \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 569, in error\r\n    return self._call_chain(*args)                                                                                                      \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 502, in _call_chain\r\n    result = func(*args)                                                                                                                \r\n  File \"/home/linuxbrew/.linuxbrew/Cellar/python@3.8/3.8.5/lib/python3.8/urllib/request.py\", line 649, in http_error_default\r\n    raise HTTPError(req.full_url, code, msg, hdrs, fp)                                                                                  \r\nurllib.error.HTTPError: HTTP Error 400: Bad Request                                                                                     \r\n```\r\n\r\nAnd this cause issue with validator when it tries to fetch a local schema file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/713", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/713/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/713/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/713/events", "html_url": "https://github.com/Julian/jsonschema/issues/713", "id": 669111643, "node_id": "MDU6SXNzdWU2NjkxMTE2NDM=", "number": 713, "title": "{\"format\":\"uri\"} doesn't seem to be used", "user": {"login": "skandragon", "id": 43517, "node_id": "MDQ6VXNlcjQzNTE3", "avatar_url": "https://avatars3.githubusercontent.com/u/43517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skandragon", "html_url": "https://github.com/skandragon", "followers_url": "https://api.github.com/users/skandragon/followers", "following_url": "https://api.github.com/users/skandragon/following{/other_user}", "gists_url": "https://api.github.com/users/skandragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/skandragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skandragon/subscriptions", "organizations_url": "https://api.github.com/users/skandragon/orgs", "repos_url": "https://api.github.com/users/skandragon/repos", "events_url": "https://api.github.com/users/skandragon/events{/privacy}", "received_events_url": "https://api.github.com/users/skandragon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-30T19:24:19Z", "updated_at": "2020-08-01T08:17:49Z", "closed_at": "2020-07-31T12:38:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a schema defined as:\r\n\r\n```\r\n    submit_log_schema = {\r\n        \"type\": \"object\",\r\n        \"required\": [\"v1Location\", \"v2Location\", \"resultPrefix\", \"algorithm\"],\r\n        \"additionalProperties\": False,\r\n        \"properties\": {\r\n            \"v1Location\": {\"type\": \"string\", \"format\": \"uri\"},\r\n            \"v2Location\": {\"type\": \"string\", \"format\": \"uri\"},\r\n            \"resultPrefix\": {\"type\": \"string\", \"format\": \"uri\"},\r\n            \"algorithm\": {\"type\": \"string\", \"enum\": [\"spell\"]}\r\n        }\r\n    }\r\n```\r\n\r\nWhen I validate against this, if one of the 'uri' format strings is not a URI, it still passes validation.\r\n\r\nExamples:  empty string, or '-123' -- either the URI spec is so loose I'm not coming up with examples, or I have something configured incorrectly.\r\n\r\nI do have rfc3987 installed.  I'm using jsonschema 3.2.0 (via `pip install jsonschema[format]`)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/711", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/711/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/711/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/711/events", "html_url": "https://github.com/Julian/jsonschema/issues/711", "id": 665557650, "node_id": "MDU6SXNzdWU2NjU1NTc2NTA=", "number": 711, "title": "unresolvable pointer: #/definitions not resolved", "user": {"login": "Janluak", "id": 12571346, "node_id": "MDQ6VXNlcjEyNTcxMzQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/12571346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Janluak", "html_url": "https://github.com/Janluak", "followers_url": "https://api.github.com/users/Janluak/followers", "following_url": "https://api.github.com/users/Janluak/following{/other_user}", "gists_url": "https://api.github.com/users/Janluak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Janluak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Janluak/subscriptions", "organizations_url": "https://api.github.com/users/Janluak/orgs", "repos_url": "https://api.github.com/users/Janluak/repos", "events_url": "https://api.github.com/users/Janluak/events{/privacy}", "received_events_url": "https://api.github.com/users/Janluak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-07-25T10:06:55Z", "updated_at": "2020-08-02T15:53:12Z", "closed_at": "2020-07-26T18:08:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI was trying to skip the checking of the schema itself and for some reason the in-file pointing doesn't seem to work.\r\n\r\nAttached are a schema, test_data to verify and a small, rudimentarily script.\r\n\r\nThe most relevant code looks like this:\r\n```\r\nclass Validator:\r\n    ...\r\n    \r\n    def _file_resolver(self):\r\n        absolute_directory = dirname(realpath(self.file))\r\n        relative_directory = f\"file://{absolute_directory}/\"\r\n        self.__resolver = RefResolver(relative_directory, None)\r\n\r\n    def _create_validator(self):\r\n        self._file_resolver()\r\n\r\n        self._validator = Draft7Validator(self.raw_schema, resolver=self.__resolver)\r\n\r\n    def validate(self, d):\r\n        self._validator.validate(d)\r\n\r\nValidator(file=schema_file).validate(data)\r\n```\r\n\r\nError message shows `jsonschema.exceptions.RefResolutionError: Unresolvable JSON pointer: 'definitions/schemas/properties/origin'`.\r\n\r\n\r\nDo you have any idea why the pointer isn't getting resolved?\r\nThe schema itself is correct and if running `jsonschema.validate(schema=schema, instance=data)` there seems to be no issue with it.\r\n\r\nThanks for your support!\r\nJ\r\n\r\n## Files\r\n### data.json\r\n```\r\n{\r\n  \"KEY1\": \"value1\",\r\n  \"KEY2\": {\r\n    \"ORIGIN\": \"file\"\r\n  }\r\n}\r\n```\r\n### schema.json\r\n```\r\n{\r\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n  \"title\": \"some test schema\",\r\n  \"type\": \"object\",\r\n  \"additionalProperties\": false,\r\n  \"properties\": {\r\n    \"KEY1\": {\r\n      \"description\": \"\",\r\n      \"type\": \"string\"\r\n    },\r\n    \"KEY2\": {\r\n      \"description\": \"\",\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"ORIGIN\": {\r\n          \"$ref\": \"#/definitions/schemas/properties/origin\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"definitions\": {\r\n   \"schemas\": {\r\n     \"type\": \"object\",\r\n      \"properties\": {\r\n        \"origin\": {\r\n          \"type\": \"string\",\r\n          \"enum\": [\r\n            \"file\",\r\n            \"url\",\r\n            \"raw\"\r\n          ]\r\n        }\r\n\r\n      }\r\n   }\r\n  }\r\n}\r\n```\r\n\r\n### simple_schema_checking.py\r\n```\r\nfrom jsonschema.validators import Draft7Validator, RefResolver\r\nfrom os.path import dirname, realpath\r\nfrom json import load\r\n\r\n\r\nclass Validator:\r\n    def __init__(self, file):\r\n        self.file = file\r\n        self.schema = dict()\r\n\r\n        self._load_schema()\r\n        self._create_validator()\r\n\r\n    def _load_schema(self):\r\n        with open(self.file, \"r\") as fs:\r\n            self.raw_schema = load(fs)\r\n\r\n    def _file_resolver(self):\r\n        absolute_directory = dirname(realpath(self.file))\r\n        relative_directory = f\"file://{absolute_directory}/\"\r\n        self.__resolver = RefResolver(relative_directory, None)\r\n\r\n    def _create_validator(self):\r\n        self._file_resolver()\r\n\r\n        self._validator = Draft7Validator(self.raw_schema, resolver=self.__resolver)\r\n\r\n    def validate(self, d):\r\n        self._validator.validate(d)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    schema_file = \"schema.json\"\r\n    data_file = \"data.json\"\r\n\r\n    with open(schema_file, \"r\") as f:\r\n        schema = load(f)\r\n\r\n    with open(data_file, \"r\") as fd:\r\n        data = load(fd)\r\n\r\n    import jsonschema\r\n\r\n    jsonschema.validate(schema=schema, instance=data)\r\n\r\n    Validator(file=schema_file).validate(data)\r\n\r\n```\r\n### zip of all files\r\n[errorful_json_checking.zip](https://github.com/Julian/jsonschema/files/4975330/errorful_json_checking.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/707", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/707/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/707/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/707/events", "html_url": "https://github.com/Julian/jsonschema/issues/707", "id": 661926030, "node_id": "MDU6SXNzdWU2NjE5MjYwMzA=", "number": 707, "title": "How to use jsonschema package to implement filtering of data based on schema", "user": {"login": "mauvilsa", "id": 5780272, "node_id": "MDQ6VXNlcjU3ODAyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5780272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mauvilsa", "html_url": "https://github.com/mauvilsa", "followers_url": "https://api.github.com/users/mauvilsa/followers", "following_url": "https://api.github.com/users/mauvilsa/following{/other_user}", "gists_url": "https://api.github.com/users/mauvilsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mauvilsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mauvilsa/subscriptions", "organizations_url": "https://api.github.com/users/mauvilsa/orgs", "repos_url": "https://api.github.com/users/mauvilsa/repos", "events_url": "https://api.github.com/users/mauvilsa/events{/privacy}", "received_events_url": "https://api.github.com/users/mauvilsa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-20T15:02:18Z", "updated_at": "2020-07-29T15:43:05Z", "closed_at": "2020-07-26T18:10:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are a few use cases in which it is needed to filter out parts of some json data based on what is valid according to a json schema. See https://github.com/uber/json-schema-filter , https://stackoverflow.com/questions/40226596/how-to-filter-json-via-jsonschema-in-python , https://stackoverflow.com/questions/57378110/filter-json-data-against-json-schema-in-python . From what I have seen there is no python package that provides this.\r\n\r\nTo implement this filtering I figure that one would need a json schema validator to identify what parts are invalid to then remove them. So I ask it as a question here. Is there any easy way to use the jsonschema package just to identify which parts of a json object does not validate against the schema?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/706", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/706/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/706/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/706/events", "html_url": "https://github.com/Julian/jsonschema/issues/706", "id": 660130506, "node_id": "MDU6SXNzdWU2NjAxMzA1MDY=", "number": 706, "title": "result of running CLI without options?", "user": {"login": "sloanlance", "id": 17595351, "node_id": "MDQ6VXNlcjE3NTk1MzUx", "avatar_url": "https://avatars1.githubusercontent.com/u/17595351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloanlance", "html_url": "https://github.com/sloanlance", "followers_url": "https://api.github.com/users/sloanlance/followers", "following_url": "https://api.github.com/users/sloanlance/following{/other_user}", "gists_url": "https://api.github.com/users/sloanlance/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloanlance/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloanlance/subscriptions", "organizations_url": "https://api.github.com/users/sloanlance/orgs", "repos_url": "https://api.github.com/users/sloanlance/repos", "events_url": "https://api.github.com/users/sloanlance/events{/privacy}", "received_events_url": "https://api.github.com/users/sloanlance/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-18T12:46:07Z", "updated_at": "2020-07-24T17:21:55Z", "closed_at": "2020-07-24T17:21:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I run the jsonschema CLI with the name of a schema file, but I don't give any options, it doesn't seem to do anything.  That is:\r\n\r\n```sh\r\njsonschema schema_file.json\r\n```\r\n\r\nThere's no output.\r\n\r\nWhat is it doing, if anything?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/705", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/705/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/705/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/705/events", "html_url": "https://github.com/Julian/jsonschema/issues/705", "id": 657823497, "node_id": "MDU6SXNzdWU2NTc4MjM0OTc=", "number": 705, "title": "`0.0` is not considered an `integer` in draft-04 schemas", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars1.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-16T03:51:03Z", "updated_at": "2020-07-16T12:47:05Z", "closed_at": "2020-07-16T12:46:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I discovered this oddity working on a `hypothesis-jsonschema` upgrade:\r\n\r\n```python\r\nfrom jsonschema import validate\r\nvalidate(0.0, {\"type\": \"integer\"})  # passes\r\nvalidate(0.0, {\"type\": \"integer\", \"$schema\": \"http://json-schema.org/draft-04/schema#\"})  # fails\r\n```\r\n\r\nThe first behaviour is correct, because the `\"integer\"` 'type' is defined by having a zero fractional part, rather than by the Python `type` of the value.  (a surprise which my planned feature will introduce to users...) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/702", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/702/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/702/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/702/events", "html_url": "https://github.com/Julian/jsonschema/issues/702", "id": 652782595, "node_id": "MDU6SXNzdWU2NTI3ODI1OTU=", "number": 702, "title": "Validation option - spit out warnings if fields in JSON schema not present in JSON", "user": {"login": "jvillacis90", "id": 2754880, "node_id": "MDQ6VXNlcjI3NTQ4ODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2754880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvillacis90", "html_url": "https://github.com/jvillacis90", "followers_url": "https://api.github.com/users/jvillacis90/followers", "following_url": "https://api.github.com/users/jvillacis90/following{/other_user}", "gists_url": "https://api.github.com/users/jvillacis90/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvillacis90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvillacis90/subscriptions", "organizations_url": "https://api.github.com/users/jvillacis90/orgs", "repos_url": "https://api.github.com/users/jvillacis90/repos", "events_url": "https://api.github.com/users/jvillacis90/events{/privacy}", "received_events_url": "https://api.github.com/users/jvillacis90/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-08T00:41:37Z", "updated_at": "2020-07-08T03:08:28Z", "closed_at": "2020-07-08T03:08:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't think the following functionality exists when validating jsons against their json schemas, but the functionality I would like\r\n\r\n- I have a json schema with fields X,Y,Z\r\n- my json file contains fields X and Y only\r\n- I run `Draft4Validator(myJson, myResolver)`\r\n- the Validator succeeds, but prints out/returns warning logs saying \"myJson does not contain field Y\"\r\n\r\nI know I could throw in required tag in schema, or I think I could define a custom keyword and create some custom resolver logic, but I'm hoping there is a less verbose method of achieving the above?\r\n\r\n```\r\nif jsonField not in jsonSchema.properties:\r\n    log(\"missing\")\r\n```\r\nfor example", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/701", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/701/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/701/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/701/events", "html_url": "https://github.com/Julian/jsonschema/issues/701", "id": 652241590, "node_id": "MDU6SXNzdWU2NTIyNDE1OTA=", "number": 701, "title": "multipleOf validation throws DivisionImpossible error for Decimal class, if one of the operands is much bigger than the other.", "user": {"login": "Fraznist", "id": 35821640, "node_id": "MDQ6VXNlcjM1ODIxNjQw", "avatar_url": "https://avatars2.githubusercontent.com/u/35821640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fraznist", "html_url": "https://github.com/Fraznist", "followers_url": "https://api.github.com/users/Fraznist/followers", "following_url": "https://api.github.com/users/Fraznist/following{/other_user}", "gists_url": "https://api.github.com/users/Fraznist/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fraznist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fraznist/subscriptions", "organizations_url": "https://api.github.com/users/Fraznist/orgs", "repos_url": "https://api.github.com/users/Fraznist/repos", "events_url": "https://api.github.com/users/Fraznist/events{/privacy}", "received_events_url": "https://api.github.com/users/Fraznist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-07T11:21:56Z", "updated_at": "2020-07-08T11:21:22Z", "closed_at": "2020-07-08T11:21:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Modulo operation between two instances of `decimal.Decimal` classes can throw an `decimal.InvalidOperation: [<class 'decimal.DivisionImpossible'>]` error if the bigger operand is 28 orders of magnitudes bigger than the other (for `a % b` we get an error if a > b * 10^28). [Relevant stackoverflow thread](https://stackoverflow.com/questions/42868278/decimal-invalidoperation-divisionimpossible-for-very-large-numbers).\r\n\r\nI believe this exception should be caught and tried again with a better precision value. I understand that `decimal.Decimal` isn't used by `json.load`. Still, `decimal.Decimal` is being heavily used by [Singer](https://github.com/singer-io/getting-started) taps and targets for some reason.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/700", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/700/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/700/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/700/events", "html_url": "https://github.com/Julian/jsonschema/issues/700", "id": 649598629, "node_id": "MDU6SXNzdWU2NDk1OTg2Mjk=", "number": 700, "title": "[question] when type is object and no properties field, the result has  no error message.", "user": {"login": "willson-chen", "id": 53104026, "node_id": "MDQ6VXNlcjUzMTA0MDI2", "avatar_url": "https://avatars2.githubusercontent.com/u/53104026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willson-chen", "html_url": "https://github.com/willson-chen", "followers_url": "https://api.github.com/users/willson-chen/followers", "following_url": "https://api.github.com/users/willson-chen/following{/other_user}", "gists_url": "https://api.github.com/users/willson-chen/gists{/gist_id}", "starred_url": "https://api.github.com/users/willson-chen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willson-chen/subscriptions", "organizations_url": "https://api.github.com/users/willson-chen/orgs", "repos_url": "https://api.github.com/users/willson-chen/repos", "events_url": "https://api.github.com/users/willson-chen/events{/privacy}", "received_events_url": "https://api.github.com/users/willson-chen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-02T03:35:05Z", "updated_at": "2020-07-03T21:22:25Z", "closed_at": "2020-07-03T21:22:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is no error message when schema type is `object` without `properties` filed, which is a required filed.\r\n\r\nHere is the example code:\r\n```\r\nfrom unittest import TestCase\r\nfrom jsonschema.validators import Draft7Validator, exceptions\r\n\r\nclass TestBestMatch(TestCase):\r\n   def test_xxx(self, false=None):\r\n       schema={\r\n           \"$schema\": \"http://json-schema.org/schema#\",\r\n           \"type\": \"object\",\r\n           \"name\": {\"type\": \"string\"},\r\n           \"foo\": {\"type\": \"string\"}\r\n       }\r\n\r\n       doc={\r\n           \"name\": 3,\r\n           \"foo\": 2\r\n       }\r\n\r\n       validator = Draft7Validator(schema)\r\n       print(exceptions.best_match(validator.iter_errors(doc)))\r\n```\r\n\r\nIs it more reasonable to throw an error message?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/699", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/699/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/699/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/699/events", "html_url": "https://github.com/Julian/jsonschema/issues/699", "id": 646834969, "node_id": "MDU6SXNzdWU2NDY4MzQ5Njk=", "number": 699, "title": "Running the tox \u2013e py37-tests command on win10 keeps reporting errors", "user": {"login": "WilliamHeaven", "id": 28834227, "node_id": "MDQ6VXNlcjI4ODM0MjI3", "avatar_url": "https://avatars3.githubusercontent.com/u/28834227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WilliamHeaven", "html_url": "https://github.com/WilliamHeaven", "followers_url": "https://api.github.com/users/WilliamHeaven/followers", "following_url": "https://api.github.com/users/WilliamHeaven/following{/other_user}", "gists_url": "https://api.github.com/users/WilliamHeaven/gists{/gist_id}", "starred_url": "https://api.github.com/users/WilliamHeaven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WilliamHeaven/subscriptions", "organizations_url": "https://api.github.com/users/WilliamHeaven/orgs", "repos_url": "https://api.github.com/users/WilliamHeaven/repos", "events_url": "https://api.github.com/users/WilliamHeaven/events{/privacy}", "received_events_url": "https://api.github.com/users/WilliamHeaven/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-28T04:12:49Z", "updated_at": "2020-06-29T01:31:20Z", "closed_at": "2020-06-29T01:31:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "## The test steps are as follows\uff1a\r\n* pip install tox\r\n* pip install tox-venv\r\n* tox \u2013e py37-tests \r\n## Environmental information is as follows\uff1a\r\n![image](https://user-images.githubusercontent.com/28834227/85937654-3c591680-b938-11ea-98bc-c8bccbebc474.png)\r\n## Report an error\uff1a\r\n[error.log](https://github.com/Julian/jsonschema/files/4841667/error.log)\r\n```\r\nWheel checks failed                                         W-__main__\r\nChecks failed\r\nERROR: InvocationError for command 'D:\\OpenSource\\Project\\python_workspace\\jsonschema-master\\.tox\\py37-build\\Scripts\\python' -m pep517.check 'D:\\OpenSourc\r\ne\\Project\\python_workspace\\jsonschema-master' (exited with code 1)\r\npy37-tests installed: attrs==19.3.0,Automat==20.2.0,constantly==15.1.0,hyperlink==19.0.0,idna==2.9,incremental==17.5.0,PyHamcrest==2.0.2,six==1.15.0,Twist\r\ned==20.3.0,zope.interface==5.1.0\r\npy37-tests run-test-pre: PYTHONHASHSEED='822'\r\npy37-tests run-test: commands[0] | 'D:\\OpenSource\\Project\\python_workspace\\jsonschema-master\\.tox\\py37-tests\\Scripts\\python' -m pip install 'D:\\OpenSource\r\n\\Project\\python_workspace\\jsonschema-master[format]'\r\nLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple\r\nProcessing d:\\opensource\\project\\python_workspace\\jsonschema-master\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... error\r\n  ERROR: Command errored out with exit status 1:\r\n   command: 'D:\\OpenSource\\Project\\python_workspace\\jsonschema-master\\.tox\\py37-tests\\Scripts\\python.exe' 'D:\\OpenSource\\Project\\python_workspace\\jsonsche\r\nma-master\\.tox\\py37-tests\\lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py' get_requires_for_build_wheel 'C:\\Users\\jwx592110\\AppData\\Local\\Temp\\tmpnj3j\r\n3uzm'\r\n       cwd: C:\\Users\\jwx592110\\AppData\\Local\\Temp\\pip-req-build-z1mo9k8s\r\n  Complete output (35 lines):\r\n  Traceback (most recent call last):\r\n    File \"D:\\OpenSource\\Project\\python_workspace\\jsonschema-master\\.tox\\py37-tests\\lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py\", line 207, in <mod\r\nule>\r\n      main()\r\n    File \"D:\\OpenSource\\Project\\python_workspace\\jsonschema-master\\.tox\\py37-tests\\lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py\", line 197, in main\r\n\r\n      json_out['return_val'] = hook(**hook_input['kwargs'])\r\n    File \"D:\\OpenSource\\Project\\python_workspace\\jsonschema-master\\.tox\\py37-tests\\lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py\", line 54, in get_r\r\nequires_for_build_wheel\r\n      return hook(config_settings)\r\n    File \"C:\\Users\\jwx592110\\AppData\\Local\\Temp\\pip-build-env-lqvi7o6a\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 147, in get_requires_for_\r\nbuild_wheel\r\n      config_settings, requirements=['wheel'])\r\n    File \"C:\\Users\\jwx592110\\AppData\\Local\\Temp\\pip-build-env-lqvi7o6a\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 127, in _get_build_requir\r\nes\r\n      self.run_setup()\r\n    File \"C:\\Users\\jwx592110\\AppData\\Local\\Temp\\pip-build-env-lqvi7o6a\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 142, in run_setup\r\n      exec(compile(code, __file__, 'exec'), locals())\r\n    File \"setup.py\", line 1, in <module>\r\n    File \"C:\\Users\\jwx592110\\AppData\\Local\\Temp\\pip-build-env-lqvi7o6a\\overlay\\Lib\\site-packages\\setuptools\\__init__.py\", line 161, in setup\r\n      return distutils.core.setup(**attrs)\r\n    File \"d:\\software\\installpath\\python37_64\\lib\\distutils\\core.py\", line 108, in setup\r\n      _setup_distribution = dist = klass(attrs)\r\n    File \"C:\\Users\\jwx592110\\AppData\\Local\\Temp\\pip-build-env-lqvi7o6a\\overlay\\Lib\\site-packages\\setuptools\\dist.py\", line 426, in __init__\r\n      k: v for k, v in attrs.items()\r\n    File \"d:\\software\\installpath\\python37_64\\lib\\distutils\\dist.py\", line 292, in __init__\r\n      self.finalize_options()\r\n    File \"C:\\Users\\jwx592110\\AppData\\Local\\Temp\\pip-build-env-lqvi7o6a\\overlay\\Lib\\site-packages\\setuptools\\dist.py\", line 717, in finalize_options\r\n      ep(self)\r\n    File \"C:\\Users\\jwx592110\\AppData\\Local\\Temp\\pip-build-env-lqvi7o6a\\overlay\\Lib\\site-packages\\setuptools_scm\\integration.py\", line 48, in infer_version\r\n\r\n      dist.metadata.version = _get_version(config)\r\n    File \"C:\\Users\\jwx592110\\AppData\\Local\\Temp\\pip-build-env-lqvi7o6a\\overlay\\Lib\\site-packages\\setuptools_scm\\__init__.py\", line 148, in _get_version\r\n      parsed_version = _do_parse(config)\r\n    File \"C:\\Users\\jwx592110\\AppData\\Local\\Temp\\pip-build-env-lqvi7o6a\\overlay\\Lib\\site-packages\\setuptools_scm\\__init__.py\", line 118, in _do_parse\r\n      \"use git+https://github.com/user/proj.git#egg=proj\" % config.absolute_root\r\n  LookupError: setuptools-scm was unable to detect version for 'C:\\\\Users\\\\jwx592110\\\\AppData\\\\Local\\\\Temp\\\\pip-req-build-z1mo9k8s'.\r\n  \r\n  Make sure you're either building from a fully intact git repository or PyPI tarballs. Most other sources (such as GitHub's tarballs, a git checkout with\r\nout the .git folder) don't contain the necessary metadata and will not work.\r\n  \r\n  For example, if you're using pip, instead of https://github.com/user/proj/archive/master.zip use git+https://github.com/user/proj.git#egg=proj\r\n  ----------------------------------------\r\nERROR: Command errored out with exit status 1: 'D:\\OpenSource\\Project\\python_workspace\\jsonschema-master\\.tox\\py37-tests\\Scripts\\python.exe' 'D:\\OpenSourc\r\ne\\Project\\python_workspace\\jsonschema-master\\.tox\\py37-tests\\lib\\site-packages\\pip\\_vendor\\pep517\\_in_process.py' get_requires_for_build_wheel 'C:\\Users\\j\r\nwx592110\\AppData\\Local\\Temp\\tmpnj3j3uzm' Check the logs for full command output.\r\nWARNING: You are using pip version 19.2.3, however version 20.1.1 is available.\r\nYou should consider upgrading via the 'python -m pip install --upgrade pip' command.\r\nERROR: InvocationError for command 'D:\\OpenSource\\Project\\python_workspace\\jsonschema-master\\.tox\\py37-tests\\Scripts\\python' -m pip install 'D:\\OpenSource\r\n\\Project\\python_workspace\\jsonschema-master[format]' (exited with code 1)\r\npy37-tests_nongpl create: D:\\OpenSource\\Project\\python_workspace\\jsonschema-master\\.tox\\py37-tests_nongpl\r\npy37-tests_nongpl installdeps: -rD:\\OpenSource\\Project\\python_workspace\\jsonschema-master/test-requirements.txt, twisted\r\nERROR: got KeyboardInterrupt signal\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/696", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/696/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/696/events", "html_url": "https://github.com/Julian/jsonschema/issues/696", "id": 637356490, "node_id": "MDU6SXNzdWU2MzczNTY0OTA=", "number": 696, "title": "absolute_schema_path is incorrect for if/then constructs", "user": {"login": "jason-s", "id": 738893, "node_id": "MDQ6VXNlcjczODg5Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/738893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jason-s", "html_url": "https://github.com/jason-s", "followers_url": "https://api.github.com/users/jason-s/followers", "following_url": "https://api.github.com/users/jason-s/following{/other_user}", "gists_url": "https://api.github.com/users/jason-s/gists{/gist_id}", "starred_url": "https://api.github.com/users/jason-s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jason-s/subscriptions", "organizations_url": "https://api.github.com/users/jason-s/orgs", "repos_url": "https://api.github.com/users/jason-s/repos", "events_url": "https://api.github.com/users/jason-s/events{/privacy}", "received_events_url": "https://api.github.com/users/jason-s/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 241964, "node_id": "MDU6TGFiZWwyNDE5NjQ=", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-11T22:21:50Z", "updated_at": "2020-06-20T16:01:14Z", "closed_at": "2020-06-20T16:01:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using jsonschema 3.2.0 for Python 2.7.14 and am seeing an error in the `absolute_schema_path` when an `if`/`then` construct is involved.\r\n\r\nSee sample code https://gist.github.com/jason-s/188c226e51f0982ab05538c2d6581c21\r\n\r\nwhich outputs (on my machine) the following, `including absolute_schema_path` that starts with `['allOf', 0, 'if', 'then'` --- the problem is that the `if` and `then` keys are at the same level; if we are trying to indicate the `then` branch, then `if` should not be in the `absolute_schema_path`\r\n\r\n```\r\njsonschema version: 3.2.0\r\nitem1: success\r\nitem2: success\r\n=====\r\nitem3: failure\r\nmessage: 0 is not of type 'string'\r\npath: ['color']\r\nabsolute_schema_path: ['allOf', 0, 'if', 'then', 'properties', 'color', 'type']\r\n0 is not of type 'string'\r\n\r\nFailed validating 'type' in schema['allOf'][0]['if']['then']['properties']['color']:\r\n    {'type': 'string'}\r\n\r\nOn instance['color']:\r\n    0\r\n=====\r\nitem4: failure\r\nmessage: Additional properties are not allowed ('zipcode' was unexpected)\r\npath: []\r\nabsolute_schema_path: ['allOf', 0, 'if', 'then', 'additionalProperties']\r\nAdditional properties are not allowed ('zipcode' was unexpected)\r\n\r\nFailed validating 'additionalProperties' in schema['allOf'][0]['if']['then']:\r\n    {'additionalProperties': False,\r\n     'properties': {'color': {'type': 'string'}, 'type': {'const': 'foo'}},\r\n     'required': ['color'],\r\n     'type': 'object'}\r\n\r\nOn instance:\r\n    {'color': 'red', 'type': 'foo', 'zipcode': 12345}\r\n```\r\n\r\nmy sample schema (in YAML form)\r\n\r\n```\r\ntitle: SCHEMA 1 (foo_node or bar_node)\r\n$ref: '#/definitions/root_node'\r\n$schema: http://json-schema.org/draft-07/schema#\r\ndefinitions:\r\n  bar_node:\r\n    additionalProperties: false\r\n    properties:\r\n      type: {const: bar}\r\n      flavor: {type: string}\r\n    required: [flavor]\r\n    type: object\r\n  foo_node:\r\n    additionalProperties: false\r\n    properties:\r\n      type: {const: foo}\r\n      color: {type: string}\r\n    required: [color]\r\n    type: object\r\n  root_node:\r\n    allOf:\r\n    - if:\r\n        properties:\r\n          type: {const: foo}\r\n      then: {$ref: '#/definitions/foo_node'}\r\n    - if:\r\n        properties:\r\n          type: {const: bar}\r\n      then: {$ref: '#/definitions/bar_node'}\r\n    properties:\r\n      type:\r\n        enum: [foo, bar]\r\n    required: [type]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/695", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/695/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/695/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/695/events", "html_url": "https://github.com/Julian/jsonschema/issues/695", "id": 631369906, "node_id": "MDU6SXNzdWU2MzEzNjk5MDY=", "number": 695, "title": "Can't use validators as mock spec in Python 3.8", "user": {"login": "EpicWink", "id": 25142085, "node_id": "MDQ6VXNlcjI1MTQyMDg1", "avatar_url": "https://avatars3.githubusercontent.com/u/25142085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EpicWink", "html_url": "https://github.com/EpicWink", "followers_url": "https://api.github.com/users/EpicWink/followers", "following_url": "https://api.github.com/users/EpicWink/following{/other_user}", "gists_url": "https://api.github.com/users/EpicWink/gists{/gist_id}", "starred_url": "https://api.github.com/users/EpicWink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EpicWink/subscriptions", "organizations_url": "https://api.github.com/users/EpicWink/orgs", "repos_url": "https://api.github.com/users/EpicWink/repos", "events_url": "https://api.github.com/users/EpicWink/events{/privacy}", "received_events_url": "https://api.github.com/users/EpicWink/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-05T07:18:49Z", "updated_at": "2020-06-06T17:36:01Z", "closed_at": "2020-06-06T17:36:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Python 3.8, the object you pass as the `spec` argument to `unittest.mock.Mock` has its attributes iterated over. One of those attributes is `DEFAULT_TYPES`, which when accessed will raise `jsonschema.validators._DontDoThat`. This is not an issue in previous version of Python.\r\n\r\nThis will be solved by #681.\r\n\r\n* `jsonschema`: 3.2\r\n* Python: 3.8.3\r\n\r\n```python\r\nfrom unittest import mock\r\nimport jsonschema\r\nmock.Mock(spec=jsonschema.Draft7Validator)\r\n```\r\n\r\nCurrent solution:\r\n```python\r\nimport sys, jsonschema\r\nDraft7Validator = jsonschema.Draft7Validator\r\nif sys.version_info >= (3, 8):\r\n    from importlib import metadata\r\n    if int(metadata.version(\"jsonschema\").split(\".\")[0]) < 4:\r\n        class _Override(jsonschema.validators._DefaultTypesDeprecatingMetaClass):\r\n            DEFAULT_TYPES = None\r\n        class Draft7Validator(jsonschema.Draft7Validator, metaclass=_Override):\r\n            pass\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/694", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/694/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/694/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/694/events", "html_url": "https://github.com/Julian/jsonschema/issues/694", "id": 626929311, "node_id": "MDU6SXNzdWU2MjY5MjkzMTE=", "number": 694, "title": "DeprecationWarning in compat.py", "user": {"login": "KristianHolsheimer", "id": 8200332, "node_id": "MDQ6VXNlcjgyMDAzMzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8200332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KristianHolsheimer", "html_url": "https://github.com/KristianHolsheimer", "followers_url": "https://api.github.com/users/KristianHolsheimer/followers", "following_url": "https://api.github.com/users/KristianHolsheimer/following{/other_user}", "gists_url": "https://api.github.com/users/KristianHolsheimer/gists{/gist_id}", "starred_url": "https://api.github.com/users/KristianHolsheimer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KristianHolsheimer/subscriptions", "organizations_url": "https://api.github.com/users/KristianHolsheimer/orgs", "repos_url": "https://api.github.com/users/KristianHolsheimer/repos", "events_url": "https://api.github.com/users/KristianHolsheimer/events{/privacy}", "received_events_url": "https://api.github.com/users/KristianHolsheimer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-29T01:12:41Z", "updated_at": "2020-05-29T01:14:38Z", "closed_at": "2020-05-29T01:14:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting deprecation warnings from `jsonschema.compat`. This would be a pretty quick fix, i.e. just import from `collections.abs` instead of `collections`.\r\n\r\nThis can be reproduced by running:\r\n```\r\npython3.8 -Wall -c \"import jsonschema.compat\"\r\n```\r\n> jsonschema/compat.py:6: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/691", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/691/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/691/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/691/events", "html_url": "https://github.com/Julian/jsonschema/issues/691", "id": 624154379, "node_id": "MDU6SXNzdWU2MjQxNTQzNzk=", "number": 691, "title": "Custom error message instead of \"xx is a required property\"", "user": {"login": "OrangePJ", "id": 22257733, "node_id": "MDQ6VXNlcjIyMjU3NzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/22257733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OrangePJ", "html_url": "https://github.com/OrangePJ", "followers_url": "https://api.github.com/users/OrangePJ/followers", "following_url": "https://api.github.com/users/OrangePJ/following{/other_user}", "gists_url": "https://api.github.com/users/OrangePJ/gists{/gist_id}", "starred_url": "https://api.github.com/users/OrangePJ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OrangePJ/subscriptions", "organizations_url": "https://api.github.com/users/OrangePJ/orgs", "repos_url": "https://api.github.com/users/OrangePJ/repos", "events_url": "https://api.github.com/users/OrangePJ/events{/privacy}", "received_events_url": "https://api.github.com/users/OrangePJ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T09:00:08Z", "updated_at": "2020-06-03T13:59:07Z", "closed_at": "2020-06-03T13:59:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "```Python\r\n# This is my schema\r\nschema = {\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"pid\": {\"type\": \"integer\", \"error\": (4001, \"pid error\")},\r\n        \"email\": {\"type\": \"string\", \"error\": (4002, \"email error\")},\r\n        ...\r\n    },\r\n    \"required\": [\"pid\", \"email\",  ...]\r\n}\r\n\r\n\r\n# This is how I process the errors\r\nmy_data = {\r\n    \"pid\": 1,\r\n    \"email\": \"test@test.com\"\r\n}\r\nv = Draft7Validator(schema)\r\nerr_list = []\r\nfor error in v.iter_errors(my_data):\r\n    err_list.append(error.schema[\"error\"])\r\nprint(err_list)\r\n```\r\n\r\nMy requirement is to get all validation errors, so I used `iter_errors` to get them.\r\nBut I only can retrieve the `error` field that I defined myself when the `pid` has data but the wrong type. I can not get the custom `error` field if I don't post `pid` in `my_data`.\r\n\r\nDoes anyone know the resolution? (I must add the custom error message for every field)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/689", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/689/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/689/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/689/events", "html_url": "https://github.com/Julian/jsonschema/issues/689", "id": 622813855, "node_id": "MDU6SXNzdWU2MjI4MTM4NTU=", "number": 689, "title": "Update or remove outdated benchmark instructions from README.rst.", "user": {"login": "jdmoorman", "id": 13257018, "node_id": "MDQ6VXNlcjEzMjU3MDE4", "avatar_url": "https://avatars1.githubusercontent.com/u/13257018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdmoorman", "html_url": "https://github.com/jdmoorman", "followers_url": "https://api.github.com/users/jdmoorman/followers", "following_url": "https://api.github.com/users/jdmoorman/following{/other_user}", "gists_url": "https://api.github.com/users/jdmoorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdmoorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdmoorman/subscriptions", "organizations_url": "https://api.github.com/users/jdmoorman/orgs", "repos_url": "https://api.github.com/users/jdmoorman/repos", "events_url": "https://api.github.com/users/jdmoorman/events{/privacy}", "received_events_url": "https://api.github.com/users/jdmoorman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-21T21:53:11Z", "updated_at": "2020-05-22T12:31:07Z", "closed_at": "2020-05-22T12:31:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The **Benchmarks** section of `README.rst` suggests using this command to run the benchmarks manually (i.e. without tox):\r\n```bash\r\n$ python -m pyperf jsonschema/benchmarks/test_suite.py --hist --output results.json\r\n```\r\n\r\n\r\nHowever, this command fails with version 2.0.0 of pyperf:\r\n```text\r\n$ python -m pyperf jsonschema/benchmarks/test_suite.py --hist --output results.json\r\nusage: -m pyperf [-h] {show,hist,compare_to,stats,metadata,check,collect_metadata,timeit,system,convert,dump,slowest,command} ...\r\n-m pyperf: error: argument action: invalid choice: 'jsonschema/benchmarks/test_suite.py' (choose from 'show', 'hist', 'compare_to', 'stats', 'metadata', 'check', 'collect_metadata', 'timeit', 'system', 'convert', 'dump', 'slowest', 'command')\r\n```\r\nAdditionally, there is no such file `jsonschema/benchmarks/test_suite.py`.\r\n\r\nHaving a look at `tox.ini`, I see that the commands used to run pyperf are actually\r\n```text\r\n    perf: mkdir {envtmpdir}/benchmarks/\r\n    perf: {envpython} {toxinidir}/jsonschema/benchmarks/issue232.py --inherit-environ JSON_SCHEMA_TEST_SUITE --output {envtmpdir}/benchmarks/issue232.json\r\n    perf: {envpython} {toxinidir}/jsonschema/benchmarks/json_schema_test_suite.py --inherit-environ JSON_SCHEMA_TEST_SUITE --output {envtmpdir}/benchmarks/json_schema_test_suite.json\r\n```\r\nwhich suggests the correct commands for running the benchmarks manually would be\r\n```bash\r\n$ python jsonschema/benchmarks/issue232.py --inherit-environ JSON_SCHEMA_TEST_SUITE --output issue232_results.json\r\n$ python jsonschema/benchmarks/json_schema_test_suite.py --inherit-environ JSON_SCHEMA_TEST_SUITE --output json_schema_test_suite_results.json\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/687", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/687/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/687/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/687/events", "html_url": "https://github.com/Julian/jsonschema/issues/687", "id": 620942117, "node_id": "MDU6SXNzdWU2MjA5NDIxMTc=", "number": 687, "title": "MultipleOf validation Bug", "user": {"login": "noelwilsondel", "id": 53306114, "node_id": "MDQ6VXNlcjUzMzA2MTE0", "avatar_url": "https://avatars0.githubusercontent.com/u/53306114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noelwilsondel", "html_url": "https://github.com/noelwilsondel", "followers_url": "https://api.github.com/users/noelwilsondel/followers", "following_url": "https://api.github.com/users/noelwilsondel/following{/other_user}", "gists_url": "https://api.github.com/users/noelwilsondel/gists{/gist_id}", "starred_url": "https://api.github.com/users/noelwilsondel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noelwilsondel/subscriptions", "organizations_url": "https://api.github.com/users/noelwilsondel/orgs", "repos_url": "https://api.github.com/users/noelwilsondel/repos", "events_url": "https://api.github.com/users/noelwilsondel/events{/privacy}", "received_events_url": "https://api.github.com/users/noelwilsondel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-19T12:37:27Z", "updated_at": "2020-05-20T18:11:54Z", "closed_at": "2020-05-20T14:34:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nFirstly thanks for this library it's really useful, we have noticed some unusual behaviour on version 3.2.0 validation using `multipleOf` constraint for example:\r\n\r\n```\r\n>>> from jsonschema import validate\r\n>>> schema = {\r\n...     \"type\" : \"object\",\r\n...     \"properties\" : {\r\n...         \"test\" : {\"type\" : \"number\", \"multipleOf\": 0.001},\r\n...     },\r\n... }\r\n>>> # This should be valid but raises validation error\r\n>>> validate(instance={\"test\" : 0.95}, schema=schema)\r\n```\r\n\r\nSome other things we noticed using the above value this passes:\r\n```\r\n>>> # This is valid\r\n>>> validate(instance={\"test\" : 0.01}, schema=schema)\r\n>>> # This is valid\r\n>>> validate(instance={\"test\" : 0.1}, schema=schema)\r\n>>> # This is invalid\r\n>>> validate(instance={\"test\" : 0.95}, schema=schema)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/684", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/684/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/684/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/684/events", "html_url": "https://github.com/Julian/jsonschema/issues/684", "id": 611411634, "node_id": "MDU6SXNzdWU2MTE0MTE2MzQ=", "number": 684, "title": "Still struggling with local \"$ref\"s", "user": {"login": "demitri", "id": 64314, "node_id": "MDQ6VXNlcjY0MzE0", "avatar_url": "https://avatars2.githubusercontent.com/u/64314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/demitri", "html_url": "https://github.com/demitri", "followers_url": "https://api.github.com/users/demitri/followers", "following_url": "https://api.github.com/users/demitri/following{/other_user}", "gists_url": "https://api.github.com/users/demitri/gists{/gist_id}", "starred_url": "https://api.github.com/users/demitri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/demitri/subscriptions", "organizations_url": "https://api.github.com/users/demitri/orgs", "repos_url": "https://api.github.com/users/demitri/repos", "events_url": "https://api.github.com/users/demitri/events{/privacy}", "received_events_url": "https://api.github.com/users/demitri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-03T13:12:04Z", "updated_at": "2020-07-15T13:16:39Z", "closed_at": "2020-06-16T18:10:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm still struggling with making local `$ref`s work. I've tried basically every permutation I can think of or have read about (see: #570 and [here](https://stackoverflow.com/questions/53968770/how-to-set-up-local-file-references-in-python-jsonschema-document) and [here](https://stackoverflow.com/questions/42159346/jsonschema-refresolver-to-resolve-multiple-refs-in-python)). Here is my minimum example; all files placed in the same directory:\r\n\r\nfile: `gaia_dr2_record_response.json`\r\n```\r\n{\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"$id\": \"https://trillianverse.org/schemas/datasets/gaia/gaia_dr2_record_response.json\",\r\n    \"title\": \"Gaia DR2 Source Catalog Record Schema\",\r\n    \"type\": \"object\",\r\n    \"additionalProperties\" : false,\r\n    \"properties\" : {\r\n\t    \"$ref\" : \"gaia_dr2_properties.json#/definitions/GaiaDR2Properties/properties\"\r\n\t}\r\n}\r\n```\r\n\r\nfile: `gaia_dr2_properties.json`\r\n```\r\n{\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"$id\": \"https://trillianverse.org/schemas/datasets/gaia/gaia_dr2_properties.json\",\r\n    \"type\": \"object\",\r\n    \"definitions\": {\r\n        \"GaiaDR2Properties\" : {\r\n            \"properties\": {\r\n                \"solution_id\" : {\r\n                    \"type\": \"integer\",\r\n                    \"enum\" : [1635721458409799680]\r\n                },\r\n                \"designation\" : {\r\n                    \"type\": \"string\",\r\n                    \"pattern\": \"^Gaia DR2 [0-9]{19}$\"\r\n                },\r\n                \"source_id\" : {\r\n                    \"type\": \"integer\",\r\n                    \"minimum\" : 4295806720,\r\n                    \"maximum\" : 6917528997577384320\r\n                }\r\n            }    \r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nfile: `test.py`\r\n```\r\n#!/usr/bin/env python\r\n\r\nimport os\r\nimport json\r\n\r\nfrom jsonschema import RefResolver, Draft7Validator\r\n\r\nwith open(\"gaia_dr2_properties.json\") as schema_file:\r\n \tproperties_schema = json.loads(schema_file.read())\r\n\t\r\nwith open(\"gaia_dr2_record_response.json\") as schema_file:\r\n\tresponse_schema = json.loads(schema_file.read())\r\n\r\ndata_string = '''{\r\n  \"source_id\": 4038848092638268032,\r\n  \"solution_id\": 1635721458409799680,\r\n  \"designation\": \"Gaia DR2 1635721458409799680\"\r\n}'''\r\ndata = json.loads(data_string)\r\n\r\nfile_path = os.path.abspath(__file__)\r\nbase_uri = f\"file://{os.path.dirname(file_path)}/gaia_dr2_record_response.json\"\r\nprint(f\"\\nbase uri = '{base_uri}'\\n\")\r\n\r\n# do I need to load the $ref schema? these don't help\r\nstore = {\r\n\t\"gaia_dr2_properties.json\":properties_schema,\r\n\t\"file://{os.path.dirname(file_path)}/gaia_dr2_record_response.json\":properties_schema,\r\n\t\"file:/{os.path.dirname(file_path)}/gaia_dr2_record_response.json\":properties_schema,\r\n}\r\n\r\nresolver = RefResolver(base_uri=base_uri, referrer=response_schema, store=store)\r\nvalidator = Draft7Validator(response_schema, resolver=resolver)\r\n\r\n# this throws an error\r\n#validator.check_schema(response_schema)\r\n\r\nvalidator.validate(data)\r\n```\r\n\r\nI've tried *many* variations on `base_uri` in the resolver including path to files and URI to the file itself. I get that the `RefResolver` needs to know how to resolve the reference, but I don't know how it's working to know what to properly pass to it. Seemingly nothing I pass to `RefResolver` makes a difference (even `base_uri='ffff'`!).\r\n\r\nAlso, the I try to check the schema (commented out code above), it gives me this error which I'm not sure what to make of:\r\n\r\n```\r\njsonschema.exceptions.SchemaError: 'gaia_dr2_properties.json#/definitions/GaiaDR2Properties/properties' is not of type 'object', 'boolean'\r\n```\r\n\r\nWhen I simply copy and paste the referred to segment into the original schema, the check and validation works.\r\n\r\nAny help appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/683", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/683/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/683/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/683/events", "html_url": "https://github.com/Julian/jsonschema/issues/683", "id": 608096194, "node_id": "MDU6SXNzdWU2MDgwOTYxOTQ=", "number": 683, "title": "Cast to json schema", "user": {"login": "KayleMaster", "id": 19154414, "node_id": "MDQ6VXNlcjE5MTU0NDE0", "avatar_url": "https://avatars3.githubusercontent.com/u/19154414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KayleMaster", "html_url": "https://github.com/KayleMaster", "followers_url": "https://api.github.com/users/KayleMaster/followers", "following_url": "https://api.github.com/users/KayleMaster/following{/other_user}", "gists_url": "https://api.github.com/users/KayleMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/KayleMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KayleMaster/subscriptions", "organizations_url": "https://api.github.com/users/KayleMaster/orgs", "repos_url": "https://api.github.com/users/KayleMaster/repos", "events_url": "https://api.github.com/users/KayleMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/KayleMaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-28T07:40:20Z", "updated_at": "2020-05-05T11:54:43Z", "closed_at": "2020-04-30T17:06:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIs it possible to implement casting a python dict to a json schema?\r\nLike casting '4' to a number field - yeah, it's a string but can be casted without problems. \r\nI know this is not entirely in the scope of jsonschema's purpose, but if you can give some hints on where to start by extending this project in my own fork that'd be great.  \r\n\r\nOr is it possible to check instead if the data can be casted successfully to the schema's type? Something like 'loose' validation.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/679", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/679/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/679/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/679/events", "html_url": "https://github.com/Julian/jsonschema/issues/679", "id": 598548652, "node_id": "MDU6SXNzdWU1OTg1NDg2NTI=", "number": 679, "title": "600.03 is not a multiple of 0.01", "user": {"login": "ra-coder", "id": 47606823, "node_id": "MDQ6VXNlcjQ3NjA2ODIz", "avatar_url": "https://avatars0.githubusercontent.com/u/47606823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ra-coder", "html_url": "https://github.com/ra-coder", "followers_url": "https://api.github.com/users/ra-coder/followers", "following_url": "https://api.github.com/users/ra-coder/following{/other_user}", "gists_url": "https://api.github.com/users/ra-coder/gists{/gist_id}", "starred_url": "https://api.github.com/users/ra-coder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ra-coder/subscriptions", "organizations_url": "https://api.github.com/users/ra-coder/orgs", "repos_url": "https://api.github.com/users/ra-coder/repos", "events_url": "https://api.github.com/users/ra-coder/events{/privacy}", "received_events_url": "https://api.github.com/users/ra-coder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-12T18:54:00Z", "updated_at": "2020-04-12T19:08:18Z", "closed_at": "2020-04-12T19:08:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n>>> jsonschema.validate(600.03, {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'number', 'multipleOf': 0.01})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/dist-packages/jsonschema/validators.py\", line 934, in validate\r\n    raise error\r\njsonschema.exceptions.ValidationError: 600.03 is not a multiple of 0.01\r\n\r\nFailed validating 'multipleOf' in schema:\r\n    {'$schema': 'http://json-schema.org/draft-07/schema#',\r\n     'multipleOf': 0.01,\r\n     'type': 'number'}\r\n\r\nOn instance:\r\n    600.03\r\n>>> jsonschema.__version__\r\n'3.2.0'\r\n\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/677", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/677/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/677/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/677/events", "html_url": "https://github.com/Julian/jsonschema/issues/677", "id": 597546980, "node_id": "MDU6SXNzdWU1OTc1NDY5ODA=", "number": 677, "title": "Making extra messages for error messaging optional", "user": {"login": "ethankpow", "id": 41014198, "node_id": "MDQ6VXNlcjQxMDE0MTk4", "avatar_url": "https://avatars3.githubusercontent.com/u/41014198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ethankpow", "html_url": "https://github.com/ethankpow", "followers_url": "https://api.github.com/users/ethankpow/followers", "following_url": "https://api.github.com/users/ethankpow/following{/other_user}", "gists_url": "https://api.github.com/users/ethankpow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ethankpow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ethankpow/subscriptions", "organizations_url": "https://api.github.com/users/ethankpow/orgs", "repos_url": "https://api.github.com/users/ethankpow/repos", "events_url": "https://api.github.com/users/ethankpow/events{/privacy}", "received_events_url": "https://api.github.com/users/ethankpow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-09T20:54:21Z", "updated_at": "2020-04-12T20:02:42Z", "closed_at": "2020-04-12T20:02:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to make the extra error messages the _validator yields optional? If not, could it be an enhancement where you pass an \"extraErrorMessages\" property on the schema that is a boolean? I need to be able to disable that feature because of security issues.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/674", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/674/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/674/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/674/events", "html_url": "https://github.com/Julian/jsonschema/issues/674", "id": 593071169, "node_id": "MDU6SXNzdWU1OTMwNzExNjk=", "number": 674, "title": "Custom FormatChecker", "user": {"login": "Sharealikelicence", "id": 2420108, "node_id": "MDQ6VXNlcjI0MjAxMDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2420108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sharealikelicence", "html_url": "https://github.com/Sharealikelicence", "followers_url": "https://api.github.com/users/Sharealikelicence/followers", "following_url": "https://api.github.com/users/Sharealikelicence/following{/other_user}", "gists_url": "https://api.github.com/users/Sharealikelicence/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sharealikelicence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sharealikelicence/subscriptions", "organizations_url": "https://api.github.com/users/Sharealikelicence/orgs", "repos_url": "https://api.github.com/users/Sharealikelicence/repos", "events_url": "https://api.github.com/users/Sharealikelicence/events{/privacy}", "received_events_url": "https://api.github.com/users/Sharealikelicence/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-03T04:39:10Z", "updated_at": "2020-07-14T00:40:25Z", "closed_at": "2020-04-07T10:21:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nJust wondering if there is a way to extend the FormatChecker that is passed to the validator? I can't seem to find anything in the documentation. \r\nBasically, I am trying to check if a string value is a valid timezone. I'm using pytz for the timezone side. But, I need to check the provided json string property is contained within that list.\r\nThe only other way I can think of is to extract the list as an enum field in the schema. But, it's a huge list and seems a pretty clunky way of doing it.\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/671", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/671/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/671/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/671/events", "html_url": "https://github.com/Julian/jsonschema/issues/671", "id": 587729977, "node_id": "MDU6SXNzdWU1ODc3Mjk5Nzc=", "number": 671, "title": "Add support for uuid4 format", "user": {"login": "charlax", "id": 120501, "node_id": "MDQ6VXNlcjEyMDUwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/120501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlax", "html_url": "https://github.com/charlax", "followers_url": "https://api.github.com/users/charlax/followers", "following_url": "https://api.github.com/users/charlax/following{/other_user}", "gists_url": "https://api.github.com/users/charlax/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlax/subscriptions", "organizations_url": "https://api.github.com/users/charlax/orgs", "repos_url": "https://api.github.com/users/charlax/repos", "events_url": "https://api.github.com/users/charlax/events{/privacy}", "received_events_url": "https://api.github.com/users/charlax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-25T14:18:32Z", "updated_at": "2020-03-26T12:00:04Z", "closed_at": "2020-03-26T12:00:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nWould it make sense to add support for the uuid4 format (and the other uuid formats?)\r\n\r\nI had to do the following to add it manually:\r\n\r\n```python\r\nimport re\r\n\r\nfrom jsonschema import (\r\n    validate as jsonschema_validate,\r\n    draft7_format_checker,\r\n)\r\n\r\nRE_UUID4 = re.compile(\r\n    \"^[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}\", re.I\r\n)\r\n\r\n\r\n@draft7_format_checker.checks(format=\"uuid4\", raises=(ValueError,))\r\ndef validate_uuid4(value: str) -> bool:\r\n    if not RE_UUID4.match(value):\r\n        raise ValueError(f\"'{value}' is not a valid uuid4\")\r\n    return True\r\n\r\n\r\njsonschema_validate(\r\n    content, schema, format_checker=draft7_format_checker,\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/670", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/670/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/670/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/670/events", "html_url": "https://github.com/Julian/jsonschema/issues/670", "id": 586253310, "node_id": "MDU6SXNzdWU1ODYyNTMzMTA=", "number": 670, "title": "Unexpected behaviour applying minimum clause to missing property", "user": {"login": "alsyia", "id": 4249034, "node_id": "MDQ6VXNlcjQyNDkwMzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/4249034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alsyia", "html_url": "https://github.com/alsyia", "followers_url": "https://api.github.com/users/alsyia/followers", "following_url": "https://api.github.com/users/alsyia/following{/other_user}", "gists_url": "https://api.github.com/users/alsyia/gists{/gist_id}", "starred_url": "https://api.github.com/users/alsyia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alsyia/subscriptions", "organizations_url": "https://api.github.com/users/alsyia/orgs", "repos_url": "https://api.github.com/users/alsyia/repos", "events_url": "https://api.github.com/users/alsyia/events{/privacy}", "received_events_url": "https://api.github.com/users/alsyia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-23T14:30:23Z", "updated_at": "2020-03-24T16:08:47Z", "closed_at": "2020-03-24T12:09:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI'm seeing a somewhat weird behaviour when I try to apply a conditional minimum clause to a message where the minimum clause subject is missing.\r\n\r\nFor example: \r\n```\r\n{\r\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n      \"amount\": {\r\n          \"type\": \"number\"\r\n      },\r\n      \"sometimesOptional\": {\r\n        \"type\": \"string\"\r\n      }\r\n  },\r\n  \"if\": {\r\n      \"properties\": {\r\n          \"amount\": {\r\n              \"minimum\": 1\r\n          }\r\n      }\r\n  },\r\n  \"then\": {\r\n      \"required\": [\"sometimesOptional\"]\r\n  }\r\n}\r\n```\r\n\r\nApplying this schema to an empty JSON doc (`{}`) raises the following error:\r\n```\r\njsonschema.exceptions.ValidationError: 'sometimesOptional' is a required property\r\n\r\nFailed validating 'required' in schema['if']['then']:\r\n    {'required': ['sometimesOptional']}\r\n\r\nOn instance:\r\n    {}\r\n```\r\n\r\nIs this expected? It looks like in the absence of `amount` the `if/minimum` clause is considered valid. I checked the spec but could not find anything related to this particular edge case. I'm not sure what the correct behaviour is as I'm not very familiar with JSON schemas. In classic python or javascript testing if `None` or `undefined` was greater than 1 would raise an error... Anyway, I thought I might open an issue to know if it's a bug or just a quirk of schemas :)\r\n\r\nAs a side note, I think it worked in jsonschema 2.6.0 because I've had issues only since I upgraded to 3.2.0. \r\n\r\nFor now, as a fix, I added `\"required\": [\"amount\"]` in my if clause so that it's only enforced if the attribute is present.\r\n\r\nLooking into the code of 3.2.0 it looks logical at least: the `minimum` validator returns `None` because the attribute is not found and I think the `if` validator checks if there was an error validating the schema so... \r\n\r\nThank you for your time and this amazing lib! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/668", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/668/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/668/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/668/events", "html_url": "https://github.com/Julian/jsonschema/issues/668", "id": 584072946, "node_id": "MDU6SXNzdWU1ODQwNzI5NDY=", "number": 668, "title": "Is there a way to control the logging of the module?", "user": {"login": "neilyoung", "id": 731020, "node_id": "MDQ6VXNlcjczMTAyMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/731020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilyoung", "html_url": "https://github.com/neilyoung", "followers_url": "https://api.github.com/users/neilyoung/followers", "following_url": "https://api.github.com/users/neilyoung/following{/other_user}", "gists_url": "https://api.github.com/users/neilyoung/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilyoung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilyoung/subscriptions", "organizations_url": "https://api.github.com/users/neilyoung/orgs", "repos_url": "https://api.github.com/users/neilyoung/repos", "events_url": "https://api.github.com/users/neilyoung/events{/privacy}", "received_events_url": "https://api.github.com/users/neilyoung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-19T00:01:48Z", "updated_at": "2020-03-19T00:03:06Z", "closed_at": "2020-03-19T00:03:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I especially would like to get rid of the very verbose error messages", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/667", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/667/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/667/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/667/events", "html_url": "https://github.com/Julian/jsonschema/issues/667", "id": 579694848, "node_id": "MDU6SXNzdWU1Nzk2OTQ4NDg=", "number": 667, "title": "Schema validation issue on pattern mis-match", "user": {"login": "cmg1986", "id": 19831124, "node_id": "MDQ6VXNlcjE5ODMxMTI0", "avatar_url": "https://avatars2.githubusercontent.com/u/19831124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmg1986", "html_url": "https://github.com/cmg1986", "followers_url": "https://api.github.com/users/cmg1986/followers", "following_url": "https://api.github.com/users/cmg1986/following{/other_user}", "gists_url": "https://api.github.com/users/cmg1986/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmg1986/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmg1986/subscriptions", "organizations_url": "https://api.github.com/users/cmg1986/orgs", "repos_url": "https://api.github.com/users/cmg1986/repos", "events_url": "https://api.github.com/users/cmg1986/events{/privacy}", "received_events_url": "https://api.github.com/users/cmg1986/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-12T05:03:18Z", "updated_at": "2020-03-21T14:47:20Z", "closed_at": "2020-03-21T14:47:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have swagger yaml files which is having schems definition, properties with regex.\r\nIf there is an issue with json spec file then it thows an error like \"is not valid under any of the given schemas\" but doesnt show which specific properties having pattern match issue or something else.\r\n\r\nIs there any way to show specific error like patter didnt match with that properties or something because its little difficult to parse long spec file which its not matching on generic error.\r\n\r\nusing below code to validate ..\r\n```\r\n    def set_defaults(validator, properties, instance, schema):\r\n        if (('type' not in schema['properties']) or\r\n                (('type' in instance) and (schema['properties']['type']['default'] == instance['type']))):\r\n\r\n            for property, subschema in six.iteritems(properties):  # pylint: disable=redefined-builtin\r\n                if 'default' in subschema:\r\n                    instance.setdefault(property, subschema['default'])\r\n        for error in validate_properties(validator, properties, instance, schema):\r\n            yield error\r\n\r\n    return jsonschema.validators.extend(validator_class, {'properties': set_defaults})\r\n\r\n\r\nDefaultsEnforcingDraft4Validator = extend_with_set_default(Draft4RequestValidator)\r\n```\r\n\r\nUsing connexion 2.6.0\r\nopenapi 3.0.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/666", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/666/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/666/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/666/events", "html_url": "https://github.com/Julian/jsonschema/issues/666", "id": 579123339, "node_id": "MDU6SXNzdWU1NzkxMjMzMzk=", "number": 666, "title": "Floating point issues (multipleOf)", "user": {"login": "buti1021", "id": 49496963, "node_id": "MDQ6VXNlcjQ5NDk2OTYz", "avatar_url": "https://avatars2.githubusercontent.com/u/49496963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buti1021", "html_url": "https://github.com/buti1021", "followers_url": "https://api.github.com/users/buti1021/followers", "following_url": "https://api.github.com/users/buti1021/following{/other_user}", "gists_url": "https://api.github.com/users/buti1021/gists{/gist_id}", "starred_url": "https://api.github.com/users/buti1021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buti1021/subscriptions", "organizations_url": "https://api.github.com/users/buti1021/orgs", "repos_url": "https://api.github.com/users/buti1021/repos", "events_url": "https://api.github.com/users/buti1021/events{/privacy}", "received_events_url": "https://api.github.com/users/buti1021/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-11T09:32:01Z", "updated_at": "2020-03-11T09:35:59Z", "closed_at": "2020-03-11T09:34:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, \r\nI have issues with multiple of validation. I guess it is to floating point inaccuracy. Is there any fix / workaround.\r\n\r\nThe following schema schould be valid but is not. \r\n\r\nSchema: `{\r\n    \"type\": \"object\",\r\n    \"required\": [\r\n        \"environ_impact\"\r\n    ],\r\n    \"properties\": {\r\n            \"environ_impact\": {\r\n               \"type\": \"array\",\r\n               \"items\": {\r\n                  \"type\": \"object\",\r\n                  \"required\": [\r\n                     \"amount\"\r\n                  ],\r\n                  \"properties\": {\r\n                     \"amount\": {\r\n                        \"type\": \"number\",\r\n                        \"minimum\": 0,\r\n                        \"multipleOf\": 0.0001\r\n                     }\r\n                  }\r\n               }\r\n\r\n}\r\n    }\r\n}`\r\n\r\nJSON\r\n\r\n`{\r\n    \"type\": \"object\",\r\n    \"required\": [\r\n        \"environ_impact\"\r\n    ],\r\n    \"properties\": {\r\n            \"environ_impact\": {\r\n               \"type\": \"array\",\r\n               \"items\": {\r\n                  \"type\": \"object\",\r\n                  \"required\": [\r\n                     \"amount\"\r\n                  ],\r\n                  \"properties\": {\r\n                     \"amount\": {\r\n                        \"type\": \"number\",\r\n                        \"minimum\": 0,\r\n                        \"multipleOf\": 0.0001\r\n                     }\r\n                  }\r\n               }\r\n\r\n}\r\n    }\r\n}`\r\n\r\nThanks,\r\n\r\nbuti", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/665", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/665/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/665/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/665/events", "html_url": "https://github.com/Julian/jsonschema/issues/665", "id": 578621486, "node_id": "MDU6SXNzdWU1Nzg2MjE0ODY=", "number": 665, "title": "Any string valid uri", "user": {"login": "AsierGonzalez", "id": 11410715, "node_id": "MDQ6VXNlcjExNDEwNzE1", "avatar_url": "https://avatars1.githubusercontent.com/u/11410715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsierGonzalez", "html_url": "https://github.com/AsierGonzalez", "followers_url": "https://api.github.com/users/AsierGonzalez/followers", "following_url": "https://api.github.com/users/AsierGonzalez/following{/other_user}", "gists_url": "https://api.github.com/users/AsierGonzalez/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsierGonzalez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsierGonzalez/subscriptions", "organizations_url": "https://api.github.com/users/AsierGonzalez/orgs", "repos_url": "https://api.github.com/users/AsierGonzalez/repos", "events_url": "https://api.github.com/users/AsierGonzalez/events{/privacy}", "received_events_url": "https://api.github.com/users/AsierGonzalez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-10T14:29:08Z", "updated_at": "2020-03-10T15:54:17Z", "closed_at": "2020-03-10T14:47:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that any string is considered a valid uri, is that expected?\r\n\r\n```\r\n>>> from jsonschema import validate\r\n>>> schema = {\r\n        \"type\" : \"object\",\r\n        \"properties\" : {\r\n                \"price\" : {\"type\" : \"number\"},\r\n                \"name\" : {\"type\" : \"string\", \"format\":\"uri\"}\r\n        }\r\n}\r\n>>> validate(instance={\"name\" : \"Eggs\", \"price\" : 34.99}, schema=schema)\r\n>>> validate(instance={\"name\" : \"////  \", \"price\" : 34.99}, schema=schema)\r\n>>> validate(instance={\"name\" : \"//// has spaces  \", \"price\" : 34.99}, schema=schema)\r\n>>> validate(instance={\"name\" : 1, \"price\" : 34.99}, schema=schema)\r\nTraceback (most recent call last):\r\n        ...\r\njsonschema.exceptions.ValidationError: 1 is not of type 'string'\r\n```\r\nFrom the [tests](https://github.com/Julian/jsonschema/blob/master/json/tests/draft7/optional/format/uri.json#L81-L100) (which I have not tried) it seems that at least some of those should not be invalid.\r\nThe most problematic case I have seen is that an empty string also seems to be valid:\r\n```\r\n>>> validate(instance={\"name\" : \"\", \"price\" : 34.99}, schema=schema)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/664", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/664/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/664/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/664/events", "html_url": "https://github.com/Julian/jsonschema/issues/664", "id": 569726078, "node_id": "MDU6SXNzdWU1Njk3MjYwNzg=", "number": 664, "title": "Adding Conditional schema basis to enum value", "user": {"login": "knowBalpreet", "id": 19731500, "node_id": "MDQ6VXNlcjE5NzMxNTAw", "avatar_url": "https://avatars3.githubusercontent.com/u/19731500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/knowBalpreet", "html_url": "https://github.com/knowBalpreet", "followers_url": "https://api.github.com/users/knowBalpreet/followers", "following_url": "https://api.github.com/users/knowBalpreet/following{/other_user}", "gists_url": "https://api.github.com/users/knowBalpreet/gists{/gist_id}", "starred_url": "https://api.github.com/users/knowBalpreet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/knowBalpreet/subscriptions", "organizations_url": "https://api.github.com/users/knowBalpreet/orgs", "repos_url": "https://api.github.com/users/knowBalpreet/repos", "events_url": "https://api.github.com/users/knowBalpreet/events{/privacy}", "received_events_url": "https://api.github.com/users/knowBalpreet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-24T09:19:00Z", "updated_at": "2020-03-11T05:32:17Z", "closed_at": "2020-02-24T14:18:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @Julian , thank you for this amazing library.\r\nI have a use case where I need to add a property in schema based on the value of enum of another property. Please see the below example\r\n\r\n`{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"type\": {\r\n      \"type\": \"string\",\r\n\"enum\": [\"image\", \"text\"]\r\n    }\r\n  }\r\n}`\r\n\r\nNow if incoming value is image I want to add a property `transforms` and i want to validate against\r\n`{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"width\": {\r\n      \"type\": \"integer\"\r\n    },\r\n    \"height\": {\r\n      \"type\": \"integer\"\r\n    }\r\n  },\r\n  \"required\": [\r\n    \"width\",\r\n    \"height\"\r\n  ]\r\n}\r\n`\r\n\r\nAnd if the incoming value is text I want to a add a property `transforms` and I want to validate against:\r\n`{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"font-size\": {\r\n      \"type\": \"integer\"\r\n    },\r\n    \"font-color\": {\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"required\": [\r\n    \"font-size\",\r\n    \"font-color\"\r\n  ]\r\n}\r\n`\r\n\r\nPlease let me know if there is a way to do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/663", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/663/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/663/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/663/events", "html_url": "https://github.com/Julian/jsonschema/issues/663", "id": 569084079, "node_id": "MDU6SXNzdWU1NjkwODQwNzk=", "number": 663, "title": "ImportError:MetadataPathFinder", "user": {"login": "cxapython", "id": 49929318, "node_id": "MDQ6VXNlcjQ5OTI5MzE4", "avatar_url": "https://avatars0.githubusercontent.com/u/49929318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxapython", "html_url": "https://github.com/cxapython", "followers_url": "https://api.github.com/users/cxapython/followers", "following_url": "https://api.github.com/users/cxapython/following{/other_user}", "gists_url": "https://api.github.com/users/cxapython/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxapython/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxapython/subscriptions", "organizations_url": "https://api.github.com/users/cxapython/orgs", "repos_url": "https://api.github.com/users/cxapython/repos", "events_url": "https://api.github.com/users/cxapython/events{/privacy}", "received_events_url": "https://api.github.com/users/cxapython/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T17:23:05Z", "updated_at": "2020-03-02T10:42:45Z", "closed_at": "2020-03-02T10:42:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "when i use python3.8,\r\n \"\\__version__ = metadata.version(\"jsonschema\")\"  raise error,\r\n\r\n*** ImportError: cannot import name 'MetadataPathFinder' from 'importlib.metadata' (/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/importlib/metadata/__init__.py)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/662", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/662/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/662/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/662/events", "html_url": "https://github.com/Julian/jsonschema/issues/662", "id": 568557348, "node_id": "MDU6SXNzdWU1Njg1NTczNDg=", "number": 662, "title": "str(ValidateError) fails with TypeError", "user": {"login": "denis5417", "id": 17144919, "node_id": "MDQ6VXNlcjE3MTQ0OTE5", "avatar_url": "https://avatars3.githubusercontent.com/u/17144919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denis5417", "html_url": "https://github.com/denis5417", "followers_url": "https://api.github.com/users/denis5417/followers", "following_url": "https://api.github.com/users/denis5417/following{/other_user}", "gists_url": "https://api.github.com/users/denis5417/gists{/gist_id}", "starred_url": "https://api.github.com/users/denis5417/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denis5417/subscriptions", "organizations_url": "https://api.github.com/users/denis5417/orgs", "repos_url": "https://api.github.com/users/denis5417/repos", "events_url": "https://api.github.com/users/denis5417/events{/privacy}", "received_events_url": "https://api.github.com/users/denis5417/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-20T20:42:23Z", "updated_at": "2020-02-24T14:20:33Z", "closed_at": "2020-02-24T14:20:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have `TypeError: __str__ returned non-string (type ValidationError)` when I am trying to cast `ValidateError` instance to string.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/660", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/660/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/660/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/660/events", "html_url": "https://github.com/Julian/jsonschema/issues/660", "id": 567308607, "node_id": "MDU6SXNzdWU1NjczMDg2MDc=", "number": 660, "title": "[BUG] False/True instead of false/true in ValidationError", "user": {"login": "jaklan", "id": 24907857, "node_id": "MDQ6VXNlcjI0OTA3ODU3", "avatar_url": "https://avatars2.githubusercontent.com/u/24907857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaklan", "html_url": "https://github.com/jaklan", "followers_url": "https://api.github.com/users/jaklan/followers", "following_url": "https://api.github.com/users/jaklan/following{/other_user}", "gists_url": "https://api.github.com/users/jaklan/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaklan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaklan/subscriptions", "organizations_url": "https://api.github.com/users/jaklan/orgs", "repos_url": "https://api.github.com/users/jaklan/repos", "events_url": "https://api.github.com/users/jaklan/events{/privacy}", "received_events_url": "https://api.github.com/users/jaklan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-19T04:31:09Z", "updated_at": "2020-02-19T11:12:19Z", "closed_at": "2020-02-19T11:12:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using such a schema:\r\n```\r\n...\r\n\"type\": \"boolean\",\r\n\"default\": false,\r\n\"examples\": [\r\n    true\r\n]\r\n...\r\n```\r\nand passing some wrong value, e.g. `\"some_string\"`, an error looks like:\r\n```\r\njsonschema.exceptions.ValidationError: 'some_string' is not of type 'boolean'\r\n\r\nFailed validating 'type' in schema['properties']['something']:\r\n    {'default': False, 'examples': [True], 'type': 'boolean'}\r\n```\r\nIt's really misleading, because `True` and `False` are not proper JSON values - they should be lowercased (as they are in the schema, by the way).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/659", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/659/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/659/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/659/events", "html_url": "https://github.com/Julian/jsonschema/issues/659", "id": 564920894, "node_id": "MDU6SXNzdWU1NjQ5MjA4OTQ=", "number": 659, "title": "FutureWarning: Possible nested set at position 7 (in _validators.py line 200) with Python 3.7+", "user": {"login": "AdamWill", "id": 916551, "node_id": "MDQ6VXNlcjkxNjU1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/916551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdamWill", "html_url": "https://github.com/AdamWill", "followers_url": "https://api.github.com/users/AdamWill/followers", "following_url": "https://api.github.com/users/AdamWill/following{/other_user}", "gists_url": "https://api.github.com/users/AdamWill/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdamWill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdamWill/subscriptions", "organizations_url": "https://api.github.com/users/AdamWill/orgs", "repos_url": "https://api.github.com/users/AdamWill/repos", "events_url": "https://api.github.com/users/AdamWill/events{/privacy}", "received_events_url": "https://api.github.com/users/AdamWill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-13T20:06:15Z", "updated_at": "2020-02-19T13:52:35Z", "closed_at": "2020-02-19T13:52:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any time jsonschema is used with Python 3.7+, this warning is printed:\r\n\r\n    /usr/lib/python3.8/site-packages/jsonschema/_validators.py:200: FutureWarning: Possible nested set at position 7\r\n      not re.search(patrn, instance)\r\n\r\nthis seems to be documented [here](https://docs.python.org/dev/whatsnew/3.7.html#re):\r\n\r\n\"FutureWarning is now emitted if a regular expression contains character set constructs that will change semantically in the future, such as nested sets and set operations. (Contributed by Serhiy Storchaka in bpo-30349.)\"\r\n\r\nNot sure what's an appropriate fix to avoid this warning for jsonschema, sorry.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/658", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/658/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/658/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/658/events", "html_url": "https://github.com/Julian/jsonschema/issues/658", "id": 564167552, "node_id": "MDU6SXNzdWU1NjQxNjc1NTI=", "number": 658, "title": "Prevent schema issues from causing validation to be skipped", "user": {"login": "recvfrom", "id": 36489577, "node_id": "MDQ6VXNlcjM2NDg5NTc3", "avatar_url": "https://avatars1.githubusercontent.com/u/36489577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/recvfrom", "html_url": "https://github.com/recvfrom", "followers_url": "https://api.github.com/users/recvfrom/followers", "following_url": "https://api.github.com/users/recvfrom/following{/other_user}", "gists_url": "https://api.github.com/users/recvfrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/recvfrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/recvfrom/subscriptions", "organizations_url": "https://api.github.com/users/recvfrom/orgs", "repos_url": "https://api.github.com/users/recvfrom/repos", "events_url": "https://api.github.com/users/recvfrom/events{/privacy}", "received_events_url": "https://api.github.com/users/recvfrom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-12T17:55:39Z", "updated_at": "2020-02-13T04:27:06Z", "closed_at": "2020-02-12T23:31:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I recently encountered an issue similar to what was described in #268 - there was a mistake in my schema that caused parts of the validation to be skipped.  For example, a schema author likely intends for the following to look for an integer, but it effectively performs no validation:\r\n```\r\n{\r\n\"typ\": \"integer\"\r\n}\r\n```\r\nThe documentation states that `validate() will first verify that the provided schema is itself valid`, so I was surprised by this.  I know very little about the jsonschema format, so maybe that is a valid schema, but it seems error-prone to allow unrecognized keywords in the schema (apart from where it makes sense, like in a `properties` section).  I wonder how many people have errors like this in their schemas but don't realize it?\r\n\r\nAnyway, is there anything that can be done to help prevent these types of errors from occurring?  How do most people ensure that their schemas is free from this type of defect?\r\n\r\nI'd be happy to submit a PR that incorporates any best practices into the example documentation.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/657", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/657/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/657/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/657/events", "html_url": "https://github.com/Julian/jsonschema/issues/657", "id": 564112435, "node_id": "MDU6SXNzdWU1NjQxMTI0MzU=", "number": 657, "title": "Json Pointer Refs fail to resolve when multiple hops are involved", "user": {"login": "FrederikP", "id": 483596, "node_id": "MDQ6VXNlcjQ4MzU5Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/483596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FrederikP", "html_url": "https://github.com/FrederikP", "followers_url": "https://api.github.com/users/FrederikP/followers", "following_url": "https://api.github.com/users/FrederikP/following{/other_user}", "gists_url": "https://api.github.com/users/FrederikP/gists{/gist_id}", "starred_url": "https://api.github.com/users/FrederikP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FrederikP/subscriptions", "organizations_url": "https://api.github.com/users/FrederikP/orgs", "repos_url": "https://api.github.com/users/FrederikP/repos", "events_url": "https://api.github.com/users/FrederikP/events{/privacy}", "received_events_url": "https://api.github.com/users/FrederikP/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-12T16:22:29Z", "updated_at": "2020-02-19T10:41:47Z", "closed_at": "2020-02-19T10:41:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI use a third party tool, not related to this library, to bundle a multi-file schema into one file. The resulting file still contains refs pointing to other parts of the same file using json pointers. In some cases these involve multiple hops. I couldn't find anything saying that this is illegal, but this jsonschema library has an issue with that.\r\n\r\nI came up with a really short (and thus kinda stupid) example to reproduce this:\r\n\r\nexample_deref_bug_small.json:\r\n```\r\n{\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"title\": \"Example for JSON Pointer deref issue\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"ExampleProperty\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"InnerProperty\": {\r\n                    \"type\": \"string\",\r\n                    \"minLength\": 1\r\n                }\r\n            },\r\n            \"required\": [\r\n                \"InnerProperty\"\r\n            ]\r\n        },\r\n        \"ExampleProperty2\": {\r\n            \"$ref\": \"#/properties/ExampleProperty\"\r\n        },\r\n        \"ExampleProperty3\": {\r\n            \"$ref\": \"#/properties/ExampleProperty2\"\r\n        }\r\n    },\r\n    \"required\": [\r\n        \"ExampleProperty\",\r\n        \"ExampleProperty2\",\r\n        \"ExampleProperty3\"\r\n    ]\r\n}\r\n```\r\n\r\nScript to validate:\r\n```python\r\nimport json\r\n\r\nimport jsonschema\r\n\r\n\r\nexample = {\r\n    'ExampleProperty': {\r\n        'InnerProperty': 'meh'\r\n    },\r\n    'ExampleProperty2': {\r\n        'InnerProperty': 'meh'\r\n    },\r\n    'ExampleProperty3': {\r\n        'InnerProperty': 'meh'\r\n    }\r\n\r\n}\r\n\r\nwith open('example_deref_bug_small.json', 'r') as schema_file:\r\n    loaded_schema = json.load(schema_file)\r\n\r\njsonschema.validate(example, loaded_schema)\r\nprint('success')\r\n```\r\n\r\nRunning the script throws this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/validators.py\", line 811, in resolve_fragment\r\n    document = document[part]\r\nKeyError: 'ExampleProperty1'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"deref_bug_script.py\", line 22, in <module>\r\n    jsonschema.validate(example, loaded_schema)\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/validators.py\", line 932, in validate\r\n    error = exceptions.best_match(validator.iter_errors(instance))\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/exceptions.py\", line 367, in best_match\r\n    best = next(errors, None)\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/validators.py\", line 328, in iter_errors\r\n    for error in errors:\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/_validators.py\", line 286, in properties\r\n    schema_path=property,\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/validators.py\", line 344, in descend\r\n    for error in self.iter_errors(instance, schema):\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/validators.py\", line 328, in iter_errors\r\n    for error in errors:\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/_validators.py\", line 259, in ref\r\n    scope, resolved = validator.resolver.resolve(ref)\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/validators.py\", line 766, in resolve\r\n    return url, self._remote_cache(url)\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/validators.py\", line 781, in resolve_from_url\r\n    return self.resolve_fragment(document, fragment)\r\n  File \"/bla/lib/python3.6/site-packages/jsonschema/validators.py\", line 814, in resolve_fragment\r\n    \"Unresolvable JSON pointer: %r\" % fragment\r\njsonschema.exceptions.RefResolutionError: Unresolvable JSON pointer: 'properties/ExampleProperty1'\r\n```\r\n\r\nAs soon as you change the schema, so that `ExampleProperty3` directly points to `ExampleProperty` instead of `ExampleProperty2` it works. But since the resulting schema that the third party tool creates is much more complex, in my case, I can't easily get rid of these multi-hop pointers.\r\n\r\nIs this a bug or is following multiple pointers not allowed? Other libraries (including ones in other languages) are okay with that example schema. Example in nodejs:\r\n\r\n```javascript\r\nvar Validator = require('jsonschema').Validator;\r\nvar v = new Validator();\r\nexample = {\r\n    'ExampleProperty': {\r\n        'InnerProperty': 'meh'\r\n    },\r\n    'ExampleProperty2': {\r\n        'InnerProperty': 'meh'\r\n    },\r\n    'ExampleProperty3': {\r\n        'InnerProperty': 'meh'\r\n    }\r\n\r\n}\r\n\r\nvar fs = require(\"fs\");\r\nvar content = fs.readFileSync(\"example_deref_bug_small.json\");\r\nvar schema = JSON.parse(content);\r\nconsole.log(v.validate(example, schema));\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/656", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/656/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/656/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/656/events", "html_url": "https://github.com/Julian/jsonschema/issues/656", "id": 563501126, "node_id": "MDU6SXNzdWU1NjM1MDExMjY=", "number": 656, "title": "additionalProperties inside else not handled correctly", "user": {"login": "Dr-Irv", "id": 15113894, "node_id": "MDQ6VXNlcjE1MTEzODk0", "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dr-Irv", "html_url": "https://github.com/Dr-Irv", "followers_url": "https://api.github.com/users/Dr-Irv/followers", "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}", "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions", "organizations_url": "https://api.github.com/users/Dr-Irv/orgs", "repos_url": "https://api.github.com/users/Dr-Irv/repos", "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}", "received_events_url": "https://api.github.com/users/Dr-Irv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-11T21:50:09Z", "updated_at": "2020-02-12T20:08:28Z", "closed_at": "2020-02-12T20:08:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Below, you will see a JSON schema, a python test program, and 4 test files.  The second and 4th files should fail validation.  With jsonschema v3.2, the second one fails, but the 4th one succeeds.\r\n\r\nWhat I'm trying to do is allow JSON that has two properties `selector` and `c` if `selector` is `\"a\"` and does not allow property `c` if `selector` is not `\"a\"`\r\n\r\nIn Visual Studio Code, the 4th one properly fails validation (which is what I expected).  So I think this is a bug here, although maybe the JSON Schema Draft 7 is ambiguous on this point.\r\n\r\nFile `schema.json`\r\n\r\n```json\r\n{\r\n   \"$schema\": \"http://json-schema.org/draft-07/schema\",\r\n   \"definitions\": {\r\n      \"baseEntries\": {\r\n         \"type\": \"object\",\r\n         \"properties\": {\r\n            \"selector\": {\r\n               \"enum\": [\r\n                  \"a\",\r\n                  \"b\"\r\n               ]\r\n            }\r\n         },\r\n         \"required\": [\r\n            \"selector\"\r\n         ]\r\n      }\r\n   },\r\n   \"allOf\": [\r\n      {\r\n         \"$ref\": \"#/definitions/baseEntries\"\r\n      },\r\n      {\r\n         \"if\": {\r\n            \"properties\": {\r\n               \"selector\": {\r\n                  \"const\": \"a\"\r\n               }\r\n            }\r\n         },\r\n         \"then\": {\r\n            \"properties\": {\r\n               \"c\": {\r\n                  \"type\": \"number\"\r\n               }\r\n            },\r\n            \"required\": [\r\n               \"c\"\r\n            ]\r\n         },\r\n         \"else\": {\r\n            \"$ref\": \"#/definitions/baseEntries\",\r\n            \"additionalProperties\": false\r\n         }\r\n      }\r\n   ]\r\n}\r\n```\r\n\r\nFile `testit.py`\r\n```python\r\nfrom jsonschema import validate\r\nfrom jsonschema.exceptions import ValidationError\r\nimport json\r\n\r\nwith open(\"schema.json\", \"r\") as f:\r\n    schema = json.load(f)\r\nfor i in range(1, 5):\r\n    fname = \"s{}_test.json\".format(i)\r\n    with open(fname, \"r\") as f:\r\n        d = json.load(f)\r\n    try:\r\n        validate(d, schema)\r\n        print(\"Validation for \", fname, \"succeeds\")\r\n    except ValidationError as e:\r\n        print(\"Validation for \", fname, \"FAILS\")\r\n        print(\"**Message \", e.message)\r\n```\r\n\r\nFile `s1_test.json`\r\n```json\r\n{\r\n   \"selector\": \"a\",\r\n   \"c\":  3\r\n}\r\n```\r\n\r\nFile `s2_test.json`\r\n```json\r\n{\r\n   \"selector\": \"a\"\r\n}\r\n```\r\n\r\nFile `s3_test.json`\r\n```json\r\n{\r\n   \"selector\": \"b\"\r\n}\r\n```\r\n\r\nFile `s4_test.json`\r\n```json\r\n{\r\n   \"selector\": \"b\",\r\n   \"c\": 3\r\n}\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/655", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/655/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/655/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/655/events", "html_url": "https://github.com/Julian/jsonschema/issues/655", "id": 563444218, "node_id": "MDU6SXNzdWU1NjM0NDQyMTg=", "number": 655, "title": "email and hostname format validation fails", "user": {"login": "davaya", "id": 19152940, "node_id": "MDQ6VXNlcjE5MTUyOTQw", "avatar_url": "https://avatars3.githubusercontent.com/u/19152940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davaya", "html_url": "https://github.com/davaya", "followers_url": "https://api.github.com/users/davaya/followers", "following_url": "https://api.github.com/users/davaya/following{/other_user}", "gists_url": "https://api.github.com/users/davaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/davaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davaya/subscriptions", "organizations_url": "https://api.github.com/users/davaya/orgs", "repos_url": "https://api.github.com/users/davaya/repos", "events_url": "https://api.github.com/users/davaya/events{/privacy}", "received_events_url": "https://api.github.com/users/davaya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-11T20:02:57Z", "updated_at": "2020-02-11T21:06:12Z", "closed_at": "2020-02-11T21:06:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I disagree with the rationale used to close #403: \"validating email addresses isn't really a reasonable concept\".  If the authors of JSON Schema believed that, they would not have created an email format.   There is significant discussion about the *intent* of validating that a recipient actually exists at a particular email address vs. validating syntactic conformance with RFC 6854, but the goal of any schema is to validate syntax.  Saying \"not a reasonable concept\" disrespects the existence of RFCs that define the syntax required for interoperability.  I appreciate that handrews participated in the discussion of format as a second class citizen, but some users clearly need for it to behave as a first class assertion in order to implement the purpose of https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-7.1:\r\n```\r\n   The \"format\"\r\n   annotation keyword is defined to allow schema authors to convey\r\n   semantic information for a fixed subset of values which are\r\n   accurately described by authoritative resources, be they RFCs or\r\n   other external specifications.\r\n```\r\n\r\nI suggest having a look at https://stackoverflow.com/questions/201323/how-to-validate-an-email-address-using-a-regular-expression.\r\n\r\n```\r\n        try:\r\n            jsonschema.validate(\r\n                instance=val,\r\n                schema={'type': 'string', 'format': name},\r\n                format_checker=jsonschema.draft7_format_checker)\r\n        except jsonschema.exceptions.ValidationError as e:\r\n            raise ValueError(e.message)\r\n        return val\r\n```\r\nWhen calling jsonschema 3.2.0 with jsonschema.draft7_format_checker, some invalid hostname and email strings are rejected but others are accepted.   The Checker Notes table indicates that no additional packages are required for date, email, hostname, ipv4, or regex formats.\r\n\r\nValidationError is raised for email format on `\"http://www.foo.com/index.html\"` and `\"john\"`, but is not raised for `\"john@\"`.\r\n\r\nValidationError is raised for hostname format on `\"_http._sctp.www.example.com\"` (underscores are allowed in DNS service names but not in hostnames), but is not raised on `\"tag-.example.com\"` (label cannot begin or end with a hyphen.\r\n\r\nhttps://jsonschemalint.com/#!/version/draft-07/markup/json correctly rejects the above bad email and hostname examples.  The jsonschemalint authors apparently have a different opinion about the \"reasonableness\" of performing syntax validation on email addresses and hostnames.  I submit that returning a boolean answer for an authoritatively-defined fixed subset of values is both possible and reasonable.  My code does it, including for types other than string, but I wanted to delegate JSON Schema defined formats to your package.  That's when the unit tests started failing.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/654", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/654/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/654/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/654/events", "html_url": "https://github.com/Julian/jsonschema/issues/654", "id": 562421107, "node_id": "MDU6SXNzdWU1NjI0MjExMDc=", "number": 654, "title": "additionalProperties conflicts with required property", "user": {"login": "mfrlin", "id": 1454607, "node_id": "MDQ6VXNlcjE0NTQ2MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1454607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfrlin", "html_url": "https://github.com/mfrlin", "followers_url": "https://api.github.com/users/mfrlin/followers", "following_url": "https://api.github.com/users/mfrlin/following{/other_user}", "gists_url": "https://api.github.com/users/mfrlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfrlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfrlin/subscriptions", "organizations_url": "https://api.github.com/users/mfrlin/orgs", "repos_url": "https://api.github.com/users/mfrlin/repos", "events_url": "https://api.github.com/users/mfrlin/events{/privacy}", "received_events_url": "https://api.github.com/users/mfrlin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-10T09:11:50Z", "updated_at": "2020-02-10T12:55:44Z", "closed_at": "2020-02-10T12:22:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is an example:\r\n\r\n```\r\nimport jsonschema\r\n\r\n\r\nall_of = [\r\n    {\"if\": {\"properties\": {\"enum_type\": {\"const\": \"TESTA\"}}},\r\n    \"then\": {\r\n        \"properties\": {\"enum_data\": {\"required\": [\"TESTA_FIELD1\", \"TESTA_FIELD2\"], \"additionalProperties\": False}}\r\n    }},\r\n    {\"if\": {\"properties\": {\"enum_type\": {\"const\": \"TESTB\"}}},\r\n    \"then\": {\r\n        \"properties\": {\"enum_data\": {\"required\": [\"TESTB_FIELD1\", \"TESTB_FIELD2\"], \"additionalProperties\": False}}\r\n    }},\r\n]\r\n\r\ntop_level = {\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"enum_type\": {\r\n            \"type\": \"string\",\r\n             \"enum\": [\"TESTA\", \"TESTB\"],\r\n        },\r\n    },\r\n    \"required\": [\"enum_type\", \"enum_data\"],\r\n    \"allOf\": all_of,\r\n}\r\n\r\ndata = {\r\n    \"enum_type\": \"TESTA\",\r\n    \"enum_data\": {\"TESTA_FIELD1\": \"value\"}\r\n}\r\n\r\ndata2 = {\r\n    \"enum_type\": \"TESTA\",\r\n    \"enum_data\": {\"TESTA_FIELD1\": \"value\", \"TESTA_FIELD2\": \"value\"}\r\n}\r\n\r\ndata3 = {\r\n    \"enum_type\": \"TESTA\",\r\n    \"enum_data\": {\"TESTA_FIELD1\": \"value\", \"TESTA_FIELD2\": \"value\", \"UNWANTED_FIELD\": \"value\"}\r\n}\r\n\r\n\r\nfor d in [data, data2, data3]:\r\n    try:\r\n        jsonschema.validate(instance=d, schema=top_level)\r\n    except jsonschema.ValidationError as ve:\r\n        key = '__root__.' + '.'.join(ve.path)\r\n        msg = f\"Key <{key}>: {ve.message}\"\r\n        print(msg)\r\n```\r\n\r\nOutput:\r\n```\r\nKey <__root__.enum_data>: 'TESTA_FIELD2' is a required property\r\nKey <__root__.enum_data>: Additional properties are not allowed ('TESTA_FIELD1', 'TESTA_FIELD2' were unexpected)\r\nKey <__root__.enum_data>: Additional properties are not allowed ('TESTA_FIELD1', 'UNWANTED_FIELD', 'TESTA_FIELD2' were unexpected)\r\n```\r\n\r\nFirst validation is expected because `TESTA_FIELD2` is required.\r\nSecond validation is wrong. It should pass without errors.\r\nThird validation should fail but with only `UNWANTED_FIELD` as unexpected.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/653", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/653/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/653/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/653/events", "html_url": "https://github.com/Julian/jsonschema/issues/653", "id": 562074366, "node_id": "MDU6SXNzdWU1NjIwNzQzNjY=", "number": 653, "title": "Update the FAQ entry for format default behavior", "user": {"login": "Julian", "id": 329822, "node_id": "MDQ6VXNlcjMyOTgyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/329822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian", "html_url": "https://github.com/Julian", "followers_url": "https://api.github.com/users/Julian/followers", "following_url": "https://api.github.com/users/Julian/following{/other_user}", "gists_url": "https://api.github.com/users/Julian/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian/subscriptions", "organizations_url": "https://api.github.com/users/Julian/orgs", "repos_url": "https://api.github.com/users/Julian/repos", "events_url": "https://api.github.com/users/Julian/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-08T20:35:14Z", "updated_at": "2020-03-21T14:45:10Z", "closed_at": "2020-03-21T14:45:10Z", "author_association": "OWNER", "active_lock_reason": null, "body": "As of draft2019-09 (#613), format is now explicitly off by default (which is our behavior, but now all implementations must follow it).\r\n\r\nWe should update the FAQ entry with this New Fun World!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/651", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/651/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/651/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/651/events", "html_url": "https://github.com/Julian/jsonschema/issues/651", "id": 554149680, "node_id": "MDU6SXNzdWU1NTQxNDk2ODA=", "number": 651, "title": "Add project LICENSE file", "user": {"login": "johnthagen", "id": 10340167, "node_id": "MDQ6VXNlcjEwMzQwMTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/10340167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnthagen", "html_url": "https://github.com/johnthagen", "followers_url": "https://api.github.com/users/johnthagen/followers", "following_url": "https://api.github.com/users/johnthagen/following{/other_user}", "gists_url": "https://api.github.com/users/johnthagen/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnthagen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnthagen/subscriptions", "organizations_url": "https://api.github.com/users/johnthagen/orgs", "repos_url": "https://api.github.com/users/johnthagen/repos", "events_url": "https://api.github.com/users/johnthagen/events{/privacy}", "received_events_url": "https://api.github.com/users/johnthagen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-23T13:15:32Z", "updated_at": "2020-01-23T15:11:13Z", "closed_at": "2020-01-23T14:28:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The project currently doesn't have a LICENSE file for contributors or users. Could one be added?\r\n\r\nsetup.cfg mentions MIT:\r\n\r\nhttps://github.com/Julian/jsonschema/blob/9131e5cdc919899894255a8b5c94d88e4289f51c/setup.cfg#L13\r\n\r\nSo probably this would be the template to use:\r\n\r\nhttps://opensource.org/licenses/MIT", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/650", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/650/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/650/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/650/events", "html_url": "https://github.com/Julian/jsonschema/issues/650", "id": 554122618, "node_id": "MDU6SXNzdWU1NTQxMjI2MTg=", "number": 650, "title": "oneOf validation issue ", "user": {"login": "raghugitrepo", "id": 14183039, "node_id": "MDQ6VXNlcjE0MTgzMDM5", "avatar_url": "https://avatars3.githubusercontent.com/u/14183039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raghugitrepo", "html_url": "https://github.com/raghugitrepo", "followers_url": "https://api.github.com/users/raghugitrepo/followers", "following_url": "https://api.github.com/users/raghugitrepo/following{/other_user}", "gists_url": "https://api.github.com/users/raghugitrepo/gists{/gist_id}", "starred_url": "https://api.github.com/users/raghugitrepo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raghugitrepo/subscriptions", "organizations_url": "https://api.github.com/users/raghugitrepo/orgs", "repos_url": "https://api.github.com/users/raghugitrepo/repos", "events_url": "https://api.github.com/users/raghugitrepo/events{/privacy}", "received_events_url": "https://api.github.com/users/raghugitrepo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-23T12:18:47Z", "updated_at": "2020-01-23T14:35:48Z", "closed_at": "2020-01-23T12:34:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example schema : \r\n\"oneOf\":[\r\n        {\r\n          \"required\": [\r\n            \"self\",\r\n            \"first\",\r\n            \"previous\",\r\n            \"next\",\r\n            \"last\"\r\n          ]\r\n        },\r\n        {\r\n          \"required\": [\r\n            \"first\",\r\n            \"last\",\r\n            \"previous\",\r\n            \"self\"\r\n          ]\r\n        },\r\n        {\r\n          \"required\": [\r\n            \"first\",\r\n            \"last\",\r\n            \"self\"\r\n          ]\r\n        }\r\n      ]\r\njsonschema.exceptions.ValidationError: {'self': {'href': ''}, 'first': {'href': '/ocmi/billing/tenants?page=0&per_page=20'}, 'previous': {'href': ''}, 'next': {'href': ''}, 'last': {'href': ''}} is valid under each of {'required': ['first', 'last', 'previous', 'self']}, {'required': ['first', 'last', 'self']}, {'required': ['self', 'first', 'previous', 'next', 'last']}\r\n\r\n\r\njsonschema validation suppose to pass. But it failed. Need your help \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/648", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/648/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/648/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/648/events", "html_url": "https://github.com/Julian/jsonschema/issues/648", "id": 549084181, "node_id": "MDU6SXNzdWU1NDkwODQxODE=", "number": 648, "title": "Validation Error when assigning a floating point number to multipleOf", "user": {"login": "balgon", "id": 59839429, "node_id": "MDQ6VXNlcjU5ODM5NDI5", "avatar_url": "https://avatars2.githubusercontent.com/u/59839429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/balgon", "html_url": "https://github.com/balgon", "followers_url": "https://api.github.com/users/balgon/followers", "following_url": "https://api.github.com/users/balgon/following{/other_user}", "gists_url": "https://api.github.com/users/balgon/gists{/gist_id}", "starred_url": "https://api.github.com/users/balgon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/balgon/subscriptions", "organizations_url": "https://api.github.com/users/balgon/orgs", "repos_url": "https://api.github.com/users/balgon/repos", "events_url": "https://api.github.com/users/balgon/events{/privacy}", "received_events_url": "https://api.github.com/users/balgon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-13T17:44:42Z", "updated_at": "2020-01-14T20:07:16Z", "closed_at": "2020-01-14T20:07:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I assign a floating point number to multipleOf, I usually get a Validation Error.\r\n\r\nFor example, if I validate the following:\r\n````\r\n_schema={\r\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n      \"X\": {\r\n        \"type\": \"number\",\r\n        \"multipleOf\": 0.001\r\n      }\r\n    },\r\n    \"required\": [\"X\"]\r\n}\r\n\r\njsonschema.validate({\"X\":5.1}, _schema, format_checker=jsonschema.draft7_format_checker)\r\n````\r\nI get the following Validation Error:\r\n\r\n````ValidationError: 5.1 is not a multiple of 0.001\r\n\r\nFailed validating 'multipleOf' in schema['properties']['X']:\r\n    {'multipleOf': 0.001, 'type': 'number'}\r\n\r\nOn instance['X']:\r\n    5.1\r\n````\r\n\r\nI think, that this issue is related to the old problem with floating point numbers in python that not all numbers can be represented exactly. \r\n\r\nA posible workaround could be to substitute the following code in _validation.py (line 170):\r\n\r\n````\r\nquotient = instance / dB\r\nfailed = int(quotient) != quotient\r\n````\r\n\r\nwith:\r\n````\r\nquotient = instance / dB\r\nfailed = abs( quotient - round(quotient) ) > 10**-14 / dB\r\n````\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/644", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/644/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/644/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/644/events", "html_url": "https://github.com/Julian/jsonschema/issues/644", "id": 546359892, "node_id": "MDU6SXNzdWU1NDYzNTk4OTI=", "number": 644, "title": "Max file size ", "user": {"login": "Shireesha-c", "id": 59614615, "node_id": "MDQ6VXNlcjU5NjE0NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/59614615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shireesha-c", "html_url": "https://github.com/Shireesha-c", "followers_url": "https://api.github.com/users/Shireesha-c/followers", "following_url": "https://api.github.com/users/Shireesha-c/following{/other_user}", "gists_url": "https://api.github.com/users/Shireesha-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shireesha-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shireesha-c/subscriptions", "organizations_url": "https://api.github.com/users/Shireesha-c/orgs", "repos_url": "https://api.github.com/users/Shireesha-c/repos", "events_url": "https://api.github.com/users/Shireesha-c/events{/privacy}", "received_events_url": "https://api.github.com/users/Shireesha-c/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-07T15:51:34Z", "updated_at": "2020-01-10T15:53:11Z", "closed_at": "2020-01-10T15:53:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nThe maximum file size, which is processed successfully is 150 MB using JSONschema library. Is there a way around this? we use the library on a HDinsight cluster, but it only runs on one node. \r\n\r\nThanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/642", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/642/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/642/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/642/events", "html_url": "https://github.com/Julian/jsonschema/issues/642", "id": 537946338, "node_id": "MDU6SXNzdWU1Mzc5NDYzMzg=", "number": 642, "title": "Custom keywords?", "user": {"login": "threewordphrase", "id": 1591971, "node_id": "MDQ6VXNlcjE1OTE5NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1591971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/threewordphrase", "html_url": "https://github.com/threewordphrase", "followers_url": "https://api.github.com/users/threewordphrase/followers", "following_url": "https://api.github.com/users/threewordphrase/following{/other_user}", "gists_url": "https://api.github.com/users/threewordphrase/gists{/gist_id}", "starred_url": "https://api.github.com/users/threewordphrase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/threewordphrase/subscriptions", "organizations_url": "https://api.github.com/users/threewordphrase/orgs", "repos_url": "https://api.github.com/users/threewordphrase/repos", "events_url": "https://api.github.com/users/threewordphrase/events{/privacy}", "received_events_url": "https://api.github.com/users/threewordphrase/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-14T18:12:21Z", "updated_at": "2019-12-14T18:16:48Z", "closed_at": "2019-12-14T18:16:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does this library give any mechanism or plugin API to specify custom keywords, like AJV for javascript? https://ajv.js.org/custom.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/640", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/640/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/640/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/640/events", "html_url": "https://github.com/Julian/jsonschema/issues/640", "id": 534403685, "node_id": "MDU6SXNzdWU1MzQ0MDM2ODU=", "number": 640, "title": "jsonschema: now available as a dockerized tool for CI / CD", "user": {"login": "christian-weiss", "id": 1694741, "node_id": "MDQ6VXNlcjE2OTQ3NDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1694741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christian-weiss", "html_url": "https://github.com/christian-weiss", "followers_url": "https://api.github.com/users/christian-weiss/followers", "following_url": "https://api.github.com/users/christian-weiss/following{/other_user}", "gists_url": "https://api.github.com/users/christian-weiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/christian-weiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christian-weiss/subscriptions", "organizations_url": "https://api.github.com/users/christian-weiss/orgs", "repos_url": "https://api.github.com/users/christian-weiss/repos", "events_url": "https://api.github.com/users/christian-weiss/events{/privacy}", "received_events_url": "https://api.github.com/users/christian-weiss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-07T13:44:22Z", "updated_at": "2020-01-26T03:28:05Z", "closed_at": "2020-01-26T03:28:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Julian,\r\n\r\nonce again i want to thank you for this great validator.\r\n\r\nTo enable the crowd to easily use jsonschema in CI / CD pipelines i implemented an automated build and release of a docker image, which is available at: https://hub.docker.com/r/freifunkhamm/jsonschema. This docker image is automatically scanned for security vulnerabilities with trivy.\r\n\r\nYou are warm welcomed to join the release process. If your are interested in it i can grant you direct permissions at https://github.com/Freifunk-Hamm/docker_jsonschema. Just ping me.\r\n\r\nRelease cycle is very simple:\r\na) change Dockerfile (new version number)\r\nb) commit and tag commit with version number\r\nc) push\r\n(we use sticky version numbers to have the same result on subsequent build re-runs of the same commit) \r\n\r\nFeel free to link it in your github repo / project website.\r\n\r\nAlternative:\r\nIf you want to create your own namespace/organisation at DockerHub feel free to grap my code and enable automation in your git repo.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/639", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/639/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/639/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/639/events", "html_url": "https://github.com/Julian/jsonschema/issues/639", "id": 534198133, "node_id": "MDU6SXNzdWU1MzQxOTgxMzM=", "number": 639, "title": "make twisted test dep optional", "user": {"login": "chutz", "id": 33690, "node_id": "MDQ6VXNlcjMzNjkw", "avatar_url": "https://avatars2.githubusercontent.com/u/33690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chutz", "html_url": "https://github.com/chutz", "followers_url": "https://api.github.com/users/chutz/followers", "following_url": "https://api.github.com/users/chutz/following{/other_user}", "gists_url": "https://api.github.com/users/chutz/gists{/gist_id}", "starred_url": "https://api.github.com/users/chutz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chutz/subscriptions", "organizations_url": "https://api.github.com/users/chutz/orgs", "repos_url": "https://api.github.com/users/chutz/repos", "events_url": "https://api.github.com/users/chutz/events{/privacy}", "received_events_url": "https://api.github.com/users/chutz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-06T18:39:43Z", "updated_at": "2019-12-14T23:05:57Z", "closed_at": "2019-12-14T23:05:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to make the test dep on twisted optional? I am a packager for a Linux distro, and twisted is quite a large, complicated dependency.\r\n\r\nRunning the unit tests via `python -m unittest discover` works perfectly without twisted. It appears that it is really just used for the `FilePath` object and `SynchronousTestCase`. These seem pretty minor, and should be relatively easy to change.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/637", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/637/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/637/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/637/events", "html_url": "https://github.com/Julian/jsonschema/issues/637", "id": 533595658, "node_id": "MDU6SXNzdWU1MzM1OTU2NTg=", "number": 637, "title": "Fix simple typo: sensical -> sensible", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-05T20:58:55Z", "updated_at": "2019-12-05T22:37:55Z", "closed_at": "2019-12-05T22:37:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a small typo in jsonschema/exceptions.py.\nShould read sensible rather than sensical.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/636", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/636/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/636/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/636/events", "html_url": "https://github.com/Julian/jsonschema/issues/636", "id": 533496058, "node_id": "MDU6SXNzdWU1MzM0OTYwNTg=", "number": 636, "title": "Warn if JSON schema file is valid, but an \"empty schema\"", "user": {"login": "christian-weiss", "id": 1694741, "node_id": "MDQ6VXNlcjE2OTQ3NDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1694741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christian-weiss", "html_url": "https://github.com/christian-weiss", "followers_url": "https://api.github.com/users/christian-weiss/followers", "following_url": "https://api.github.com/users/christian-weiss/following{/other_user}", "gists_url": "https://api.github.com/users/christian-weiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/christian-weiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christian-weiss/subscriptions", "organizations_url": "https://api.github.com/users/christian-weiss/orgs", "repos_url": "https://api.github.com/users/christian-weiss/repos", "events_url": "https://api.github.com/users/christian-weiss/events{/privacy}", "received_events_url": "https://api.github.com/users/christian-weiss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-05T17:37:31Z", "updated_at": "2019-12-06T19:02:28Z", "closed_at": "2019-12-06T17:43:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "A JSON schema file that contains just `{}` is a vaild JSON schema as by draft-03, draft-04, draft-06 and draft-07. Same is true for a JSON schema file that contains at \"root level\" no typical JSON schema elements, but custom element names only.\r\n(see: https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5 for details) \r\nThese JSON schema files can be called \"emtpy schema\", as they are valid schema files but without any validation rule. \r\n\r\nIn fact, if an empty schema file is used to validate a JSON instance, then this instance is always valid (as it has no chance to fail; as there is no validation rule defined in that schema). A good validator should not error on \"empty schema\" files by default, but it should print a warning/info that this schema file is an \"empty schema\". An empty schema is not helpful, as it generates no business value and may lead into a false feeling of having all JSON instances successful validated. \r\n\r\nTo not introduce a backward compatibility break i recommend to implement a `--strict` flag.\r\nWhen `--strict`is set, then the validator should fail + exit (with exit code != 0) when an \"empty schema\" is detected.\r\n\r\nThis is would be helpful for draft-03, draft-04, draft-06 and draft-07. At least on draft-07 there is  a small hint in the official JSON Schema documentation, but on all other drafts that is missing, which makes it hard for \"first time users\" (of JSON schema an validators) to spot that \"empty schema\" problem. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/635", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/635/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/635/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/635/events", "html_url": "https://github.com/Julian/jsonschema/issues/635", "id": 533270811, "node_id": "MDU6SXNzdWU1MzMyNzA4MTE=", "number": 635, "title": "CLI: error on --validator parameter", "user": {"login": "christian-weiss", "id": 1694741, "node_id": "MDQ6VXNlcjE2OTQ3NDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1694741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christian-weiss", "html_url": "https://github.com/christian-weiss", "followers_url": "https://api.github.com/users/christian-weiss/followers", "following_url": "https://api.github.com/users/christian-weiss/following{/other_user}", "gists_url": "https://api.github.com/users/christian-weiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/christian-weiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christian-weiss/subscriptions", "organizations_url": "https://api.github.com/users/christian-weiss/orgs", "repos_url": "https://api.github.com/users/christian-weiss/repos", "events_url": "https://api.github.com/users/christian-weiss/events{/privacy}", "received_events_url": "https://api.github.com/users/christian-weiss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-05T10:45:55Z", "updated_at": "2019-12-05T16:34:56Z", "closed_at": "2019-12-05T16:34:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "When i call:\r\n`jsonschema -i /data/my.json -V /data/draft03.schema`\r\n\r\nthen i get:\r\n```\r\nusage: jsonschema [-h] [-i INSTANCES] [-F ERROR_FORMAT] [-V VALIDATOR]\r\n                  [--version]\r\n                  schema\r\njsonschema: error: argument -V/--validator: invalid _namedAnyWithDefault value: '/data/draft03.schema'\r\n```\r\nBut what is wrong with that draft-03 schema file?\r\n(Schema file was copied from: http://json-schema.org/draft-03/schema#; BTW: the file path is correct)\r\n\r\nEnvironment:\r\nDocker Container based on python:3.6.9-alpine\r\nPython: Python 3.6.9\r\npip: pip 19.3.1 from /usr/local/lib/python3.6/site-packages/pip (python 3.6) \r\njsonschema: 3.2.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/633", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/633/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/633/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/633/events", "html_url": "https://github.com/Julian/jsonschema/issues/633", "id": 529241108, "node_id": "MDU6SXNzdWU1MjkyNDExMDg=", "number": 633, "title": "Validation fail documentation", "user": {"login": "Thijxx", "id": 41118940, "node_id": "MDQ6VXNlcjQxMTE4OTQw", "avatar_url": "https://avatars2.githubusercontent.com/u/41118940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thijxx", "html_url": "https://github.com/Thijxx", "followers_url": "https://api.github.com/users/Thijxx/followers", "following_url": "https://api.github.com/users/Thijxx/following{/other_user}", "gists_url": "https://api.github.com/users/Thijxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thijxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thijxx/subscriptions", "organizations_url": "https://api.github.com/users/Thijxx/orgs", "repos_url": "https://api.github.com/users/Thijxx/repos", "events_url": "https://api.github.com/users/Thijxx/events{/privacy}", "received_events_url": "https://api.github.com/users/Thijxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-27T10:02:40Z", "updated_at": "2019-12-05T12:52:52Z", "closed_at": "2019-12-05T12:52:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "When validating a JSON file I get the message `Failed validating 'type' in metaschema` with an enormous amount of information below it. It is not clear for me what I am looking at. Could you please include an example in the documentation for not-so-smart people like me?\r\n\r\nI was expecting a message like: `<field> failed on <type>` but I honoustly don't know where to find the failed field in the information below.\r\n\r\n```\r\n    {'$id': 'http://json-schema.org/draft-07/schema#',\r\n     '$schema': 'http://json-schema.org/draft-07/schema#',\r\n     'default': True,\r\n     'definitions': {'nonNegativeInteger': {'minimum': 0,\r\n                                            'type': 'integer'},\r\n                     'nonNegativeIntegerDefault0': {'allOf': [{'$ref': '#/definitions/nonNegativeInteger'},\r\n                                                              {'default': 0}]},\r\n                     'schemaArray': {'items': {'$ref': '#'},\r\n                                     'minItems': 1,\r\n                                     'type': 'array'},\r\n                     'simpleTypes': {'enum': ['array',\r\n                                              'boolean',\r\n                                              'integer',\r\n                                              'null',\r\n                                              'number',\r\n                                              'object',\r\n                                              'string']},\r\n                     'stringArray': {'default': [],\r\n                                     'items': {'type': 'string'},\r\n                                     'type': 'array',\r\n                                     'uniqueItems': True}},\r\n     'properties': {'$comment': {'type': 'string'},\r\n                    '$id': {'format': 'uri-reference', 'type': 'string'},\r\n                    '$ref': {'format': 'uri-reference', 'type': 'string'},\r\n                    '$schema': {'format': 'uri', 'type': 'string'},\r\n                    'additionalItems': {'$ref': '#'},\r\n                    'additionalProperties': {'$ref': '#'},\r\n                    'allOf': {'$ref': '#/definitions/schemaArray'},\r\n                    'anyOf': {'$ref': '#/definitions/schemaArray'},\r\n                    'const': True,\r\n                    'contains': {'$ref': '#'},\r\n                    'contentEncoding': {'type': 'string'},\r\n                    'contentMediaType': {'type': 'string'},\r\n                    'default': True,\r\n                    'definitions': {'additionalProperties': {'$ref': '#'},\r\n                                    'default': {},\r\n                                    'type': 'object'},\r\n                    'dependencies': {'additionalProperties': {'anyOf': [{'$ref': '#'},\r\n                                                                        {'$ref': '#/definitions/stringArray'}]},\r\n                                     'type': 'object'},\r\n                    'description': {'type': 'string'},\r\n                    'else': {'$ref': '#'},\r\n                    'enum': {'items': True, 'type': 'array'},\r\n                    'examples': {'items': True, 'type': 'array'},\r\n                    'exclusiveMaximum': {'type': 'number'},\r\n                    'exclusiveMinimum': {'type': 'number'},\r\n                    'format': {'type': 'string'},\r\n                    'if': {'$ref': '#'},\r\n                    'items': {'anyOf': [{'$ref': '#'},\r\n                                        {'$ref': '#/definitions/schemaArray'}],\r\n                              'default': True},\r\n                    'maxItems': {'$ref': '#/definitions/nonNegativeInteger'},\r\n                    'maxLength': {'$ref': '#/definitions/nonNegativeInteger'},\r\n                    'maxProperties': {'$ref': '#/definitions/nonNegativeInteger'},\r\n                    'maximum': {'type': 'number'},\r\n                    'minItems': {'$ref': '#/definitions/nonNegativeIntegerDefault0'},\r\n                    'minLength': {'$ref': '#/definitions/nonNegativeIntegerDefault0'},\r\n                    'minProperties': {'$ref': '#/definitions/nonNegativeIntegerDefault0'},\r\n                    'minimum': {'type': 'number'},\r\n                    'multipleOf': {'exclusiveMinimum': 0, 'type': 'number'},\r\n                    'not': {'$ref': '#'},\r\n                    'oneOf': {'$ref': '#/definitions/schemaArray'},\r\n                    'pattern': {'format': 'regex', 'type': 'string'},\r\n                    'patternProperties': {'additionalProperties': {'$ref': '#'},\r\n                                          'default': {},\r\n                                          'propertyNames': {'format': 'regex'},\r\n                                          'type': 'object'},\r\n                    'properties': {'additionalProperties': {'$ref': '#'},\r\n                                   'default': {},\r\n                                   'type': 'object'},\r\n                    'propertyNames': {'$ref': '#'},\r\n                    'readOnly': {'default': False, 'type': 'boolean'},\r\n                    'required': {'$ref': '#/definitions/stringArray'},\r\n                    'then': {'$ref': '#'},\r\n                    'title': {'type': 'string'},\r\n                    'type': {'anyOf': [{'$ref': '#/definitions/simpleTypes'},\r\n                                       {'items': {'$ref': '#/definitions/simpleTypes'},\r\n                                        'minItems': 1,\r\n                                        'type': 'array',\r\n                                        'uniqueItems': True}]},\r\n                    'uniqueItems': {'default': False, 'type': 'boolean'}},\r\n     'title': 'Core schema meta-schema',\r\n     'type': ['object', 'boolean']}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/632", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/632/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/632/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/632/events", "html_url": "https://github.com/Julian/jsonschema/issues/632", "id": 528833402, "node_id": "MDU6SXNzdWU1Mjg4MzM0MDI=", "number": 632, "title": "Include the pyproject.toml in the MANIFEST", "user": {"login": "Julian", "id": 329822, "node_id": "MDQ6VXNlcjMyOTgyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/329822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian", "html_url": "https://github.com/Julian", "followers_url": "https://api.github.com/users/Julian/followers", "following_url": "https://api.github.com/users/Julian/following{/other_user}", "gists_url": "https://api.github.com/users/Julian/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian/subscriptions", "organizations_url": "https://api.github.com/users/Julian/orgs", "repos_url": "https://api.github.com/users/Julian/repos", "events_url": "https://api.github.com/users/Julian/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-26T16:22:47Z", "updated_at": "2019-11-29T15:01:56Z", "closed_at": "2019-11-29T15:01:56Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/631", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/631/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/631/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/631/events", "html_url": "https://github.com/Julian/jsonschema/issues/631", "id": 528080694, "node_id": "MDU6SXNzdWU1MjgwODA2OTQ=", "number": 631, "title": "Depends on setuptools even after switch to importlib_metadata", "user": {"login": "eide", "id": 89635, "node_id": "MDQ6VXNlcjg5NjM1", "avatar_url": "https://avatars1.githubusercontent.com/u/89635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eide", "html_url": "https://github.com/eide", "followers_url": "https://api.github.com/users/eide/followers", "following_url": "https://api.github.com/users/eide/following{/other_user}", "gists_url": "https://api.github.com/users/eide/gists{/gist_id}", "starred_url": "https://api.github.com/users/eide/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eide/subscriptions", "organizations_url": "https://api.github.com/users/eide/orgs", "repos_url": "https://api.github.com/users/eide/repos", "events_url": "https://api.github.com/users/eide/events{/privacy}", "received_events_url": "https://api.github.com/users/eide/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-25T13:17:49Z", "updated_at": "2019-11-29T15:01:56Z", "closed_at": "2019-11-29T15:01:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "In #511 setuptools was added to `install_requires` in `setup.cfg` because it was needed for `pkg_resources` (#510).\r\n\r\nIn https://github.com/Julian/jsonschema/commit/6a7155a854d57e3f13f9dec15f2ade0820dbca2a `pkg_resources` was replaced with `import_metadata` and `import_metadata` was added as a dependency.\r\n\r\nDoes this not mean that `setuptools` is no longer a requirement for install?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/630", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/630/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/630/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/630/events", "html_url": "https://github.com/Julian/jsonschema/issues/630", "id": 526851660, "node_id": "MDU6SXNzdWU1MjY4NTE2NjA=", "number": 630, "title": "Warning running pytest when importing jsonschema", "user": {"login": "michaelschmit", "id": 15383202, "node_id": "MDQ6VXNlcjE1MzgzMjAy", "avatar_url": "https://avatars0.githubusercontent.com/u/15383202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelschmit", "html_url": "https://github.com/michaelschmit", "followers_url": "https://api.github.com/users/michaelschmit/followers", "following_url": "https://api.github.com/users/michaelschmit/following{/other_user}", "gists_url": "https://api.github.com/users/michaelschmit/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelschmit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelschmit/subscriptions", "organizations_url": "https://api.github.com/users/michaelschmit/orgs", "repos_url": "https://api.github.com/users/michaelschmit/repos", "events_url": "https://api.github.com/users/michaelschmit/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelschmit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-21T21:29:07Z", "updated_at": "2019-11-21T21:42:19Z", "closed_at": "2019-11-21T21:42:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/jsonschema/compat.py:6: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import MutableMapping, Sequence  # noqa\r\n\r\nI'm wondering if jsonschema just needs to update it's reference.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/629", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/629/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/629/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/629/events", "html_url": "https://github.com/Julian/jsonschema/issues/629", "id": 526562454, "node_id": "MDU6SXNzdWU1MjY1NjI0NTQ=", "number": 629, "title": "Validation need to happen properly !!!!", "user": {"login": "vvksahoo", "id": 56999733, "node_id": "MDQ6VXNlcjU2OTk5NzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/56999733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvksahoo", "html_url": "https://github.com/vvksahoo", "followers_url": "https://api.github.com/users/vvksahoo/followers", "following_url": "https://api.github.com/users/vvksahoo/following{/other_user}", "gists_url": "https://api.github.com/users/vvksahoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvksahoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvksahoo/subscriptions", "organizations_url": "https://api.github.com/users/vvksahoo/orgs", "repos_url": "https://api.github.com/users/vvksahoo/repos", "events_url": "https://api.github.com/users/vvksahoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vvksahoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10671192, "node_id": "MDU6TGFiZWwxMDY3MTE5Mg==", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Invalid", "name": "Invalid", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-21T12:25:28Z", "updated_at": "2019-11-21T13:28:47Z", "closed_at": "2019-11-21T13:28:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Validation() is not giving error if i will pass extra parameter in json. it suppose to check whether that extra key is there in schema or not based on that it should through error but unfortunately its not . \r\n\r\n\r\nfrom jsonschema import validate\r\nfrom jsonschema.exceptions import ValidationError \r\n\r\nschema ={\r\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"id\": {\r\n      \"type\": \"integer\"\r\n    },\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"required\": [\r\n    \"id\",\r\n    \"name\"\r\n  ]\r\n}\r\ntry:\r\n    var = validate(instance={\"name\" : \"Eggs\", \"id\" : 1,\"city\":\"NY\"}, schema=schema)\r\n    print(var)\r\nexcept ValidationError as e:\r\n       return str(e)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/628", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/628/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/628/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/628/events", "html_url": "https://github.com/Julian/jsonschema/issues/628", "id": 525274037, "node_id": "MDU6SXNzdWU1MjUyNzQwMzc=", "number": 628, "title": "Use of importlib_metadata breaks jsonschema usage in AWS Lambda", "user": {"login": "BAllbeeEplexity", "id": 26661644, "node_id": "MDQ6VXNlcjI2NjYxNjQ0", "avatar_url": "https://avatars3.githubusercontent.com/u/26661644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BAllbeeEplexity", "html_url": "https://github.com/BAllbeeEplexity", "followers_url": "https://api.github.com/users/BAllbeeEplexity/followers", "following_url": "https://api.github.com/users/BAllbeeEplexity/following{/other_user}", "gists_url": "https://api.github.com/users/BAllbeeEplexity/gists{/gist_id}", "starred_url": "https://api.github.com/users/BAllbeeEplexity/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BAllbeeEplexity/subscriptions", "organizations_url": "https://api.github.com/users/BAllbeeEplexity/orgs", "repos_url": "https://api.github.com/users/BAllbeeEplexity/repos", "events_url": "https://api.github.com/users/BAllbeeEplexity/events{/privacy}", "received_events_url": "https://api.github.com/users/BAllbeeEplexity/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-19T21:19:26Z", "updated_at": "2019-12-13T20:34:08Z", "closed_at": "2019-11-19T22:12:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "While trying to use this library (through [`python-jsonschema-objects`](https://pypi.org/project/python-jsonschema-objects/), to generate classes) for a project running in an AWS Lambda, the attempt to retrieve the package `__version__` using\r\n\r\n```python\r\n__version__ = metadata.version(\"jsonschema\")\r\n```\r\nraises a `PackageNotFoundError` \u2014 `importlib_metadata` cannot be found, despite it being installed.\r\n\r\nI have worked around this by simply replacing that dunder-value with the actual version-value retrieved (`'3.2.0'` in this case), but thought it might be worth bringing to your attention, particularly since the `__version__` should be a constant for any given release, and there's no obvious benefit to calculating it vs. using any of [several other options](https://stackoverflow.com/questions/458550/standard-way-to-embed-version-into-python-package) that aren't beholden to yet another library. ;-)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/626", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/626/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/626/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/626/events", "html_url": "https://github.com/Julian/jsonschema/issues/626", "id": 522827395, "node_id": "MDU6SXNzdWU1MjI4MjczOTU=", "number": 626, "title": "note on readme and changelog that py2.7 support is dropped", "user": {"login": "kapilt", "id": 21650, "node_id": "MDQ6VXNlcjIxNjUw", "avatar_url": "https://avatars3.githubusercontent.com/u/21650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kapilt", "html_url": "https://github.com/kapilt", "followers_url": "https://api.github.com/users/kapilt/followers", "following_url": "https://api.github.com/users/kapilt/following{/other_user}", "gists_url": "https://api.github.com/users/kapilt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kapilt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kapilt/subscriptions", "organizations_url": "https://api.github.com/users/kapilt/orgs", "repos_url": "https://api.github.com/users/kapilt/repos", "events_url": "https://api.github.com/users/kapilt/events{/privacy}", "received_events_url": "https://api.github.com/users/kapilt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10671192, "node_id": "MDU6TGFiZWwxMDY3MTE5Mg==", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Invalid", "name": "Invalid", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-14T12:30:47Z", "updated_at": "2019-11-14T13:04:07Z", "closed_at": "2019-11-14T12:44:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "looks like starting with 3.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/624", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/624/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/624/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/624/events", "html_url": "https://github.com/Julian/jsonschema/issues/624", "id": 520591979, "node_id": "MDU6SXNzdWU1MjA1OTE5Nzk=", "number": 624, "title": "CLI: Invalid \"format\" not detected", "user": {"login": "cweiske", "id": 59036, "node_id": "MDQ6VXNlcjU5MDM2", "avatar_url": "https://avatars0.githubusercontent.com/u/59036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cweiske", "html_url": "https://github.com/cweiske", "followers_url": "https://api.github.com/users/cweiske/followers", "following_url": "https://api.github.com/users/cweiske/following{/other_user}", "gists_url": "https://api.github.com/users/cweiske/gists{/gist_id}", "starred_url": "https://api.github.com/users/cweiske/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cweiske/subscriptions", "organizations_url": "https://api.github.com/users/cweiske/orgs", "repos_url": "https://api.github.com/users/cweiske/repos", "events_url": "https://api.github.com/users/cweiske/events{/privacy}", "received_events_url": "https://api.github.com/users/cweiske/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 241963, "node_id": "MDU6TGFiZWwyNDE5NjM=", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Enhancement", "name": "Enhancement", "color": "0b02e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-10T12:03:49Z", "updated_at": "2019-12-06T19:47:10Z", "closed_at": "2019-12-06T19:47:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I made a mistake in my schema and had `\"format\": [\"date\", \"datetime\"]`, which is invalid.\r\n\r\nI tried to validate my schema against the official JSON schema for JSON schema: http://json-schema.org/draft/2019-09/schema but `jsonschema` did not complain:\r\n\r\n```\r\n$ jsonschema -i test-schema.json json-schema.schema.json ; echo $?\r\n0\r\n```\r\n\r\nMy test schema:\r\n```\r\n{\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"foo\": {\r\n            \"type\": \"array\",\r\n            \"items\": {\r\n                \"type\": \"string\",\r\n                \"format\": [\"date\", \"datetime\"]\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`jsonschema` should complain about that `format` not being a string.\r\n\r\n----\r\n\r\nThe (not understandable for me) error I got was:\r\n\r\n```\r\n$ jsonschema -i test-data.json test-schema.json\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/jsonschema\", line 10, in <module>\r\n    sys.exit(main())\r\n  File \"/usr/local/lib/python3.7/dist-packages/jsonschema/cli.py\", line 76, in main\r\n    sys.exit(run(arguments=parse_args(args=args)))\r\n  File \"/usr/local/lib/python3.7/dist-packages/jsonschema/cli.py\", line 83, in run\r\n    validator.check_schema(arguments[\"schema\"])\r\n  File \"/usr/local/lib/python3.7/dist-packages/jsonschema/validators.py\", line 294, in check_schema\r\n    raise exceptions.SchemaError.create_from(error)\r\njsonschema.exceptions.SchemaError: {'type': 'string', 'format': ['date', 'datetime']} is not valid under any of the given schemas\r\n\r\nFailed validating 'anyOf' in metaschema['properties']['properties']['additionalProperties']['properties']['items']:\r\n    {'anyOf': [{'$ref': '#'}, {'$ref': '#/definitions/schemaArray'}],\r\n     'default': True}\r\n\r\nOn schema['properties']['foo']['items']:\r\n    {'format': ['date', 'datetime'], 'type': 'string'}\r\n```\r\n\r\nData:\r\n```\r\n{\"foo\": [\"2019-10-23\"]}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/623", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/623/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/623/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/623/events", "html_url": "https://github.com/Julian/jsonschema/issues/623", "id": 520586378, "node_id": "MDU6SXNzdWU1MjA1ODYzNzg=", "number": 623, "title": "CLI: No error location for error \"None: None is not of type 'string'\"", "user": {"login": "cweiske", "id": 59036, "node_id": "MDQ6VXNlcjU5MDM2", "avatar_url": "https://avatars0.githubusercontent.com/u/59036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cweiske", "html_url": "https://github.com/cweiske", "followers_url": "https://api.github.com/users/cweiske/followers", "following_url": "https://api.github.com/users/cweiske/following{/other_user}", "gists_url": "https://api.github.com/users/cweiske/gists{/gist_id}", "starred_url": "https://api.github.com/users/cweiske/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cweiske/subscriptions", "organizations_url": "https://api.github.com/users/cweiske/orgs", "repos_url": "https://api.github.com/users/cweiske/repos", "events_url": "https://api.github.com/users/cweiske/events{/privacy}", "received_events_url": "https://api.github.com/users/cweiske/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 241963, "node_id": "MDU6TGFiZWwyNDE5NjM=", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Enhancement", "name": "Enhancement", "color": "0b02e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-10T11:07:23Z", "updated_at": "2020-03-22T21:56:02Z", "closed_at": "2020-03-22T21:56:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "When jsonschema validates that a given object property is of type \"string\", and it is `null` in the data, it outputs:\r\n\r\n    None: None is not of type 'string'\r\n\r\nNo more information is shown, especially not the property that failed to validate.\r\n\r\nThis makes finding the error with large schemas nearly impossible.\r\n\r\n# Example\r\nSchema:\r\n```\r\n{\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"foo\": {\r\n            \"type\": \"string\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nData:\r\n```\r\n{\"foo\": null}\r\n```\r\n\r\nOutput:\r\n```\r\n$ jsonschema -i test-data.json test-schema.json \r\nNone: None is not of type 'string'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/622", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/622/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/622/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/622/events", "html_url": "https://github.com/Julian/jsonschema/issues/622", "id": 520585241, "node_id": "MDU6SXNzdWU1MjA1ODUyNDE=", "number": 622, "title": "CLI: Show JSON schema parsing errors", "user": {"login": "cweiske", "id": 59036, "node_id": "MDQ6VXNlcjU5MDM2", "avatar_url": "https://avatars0.githubusercontent.com/u/59036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cweiske", "html_url": "https://github.com/cweiske", "followers_url": "https://api.github.com/users/cweiske/followers", "following_url": "https://api.github.com/users/cweiske/following{/other_user}", "gists_url": "https://api.github.com/users/cweiske/gists{/gist_id}", "starred_url": "https://api.github.com/users/cweiske/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cweiske/subscriptions", "organizations_url": "https://api.github.com/users/cweiske/orgs", "repos_url": "https://api.github.com/users/cweiske/repos", "events_url": "https://api.github.com/users/cweiske/events{/privacy}", "received_events_url": "https://api.github.com/users/cweiske/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 241963, "node_id": "MDU6TGFiZWwyNDE5NjM=", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Enhancement", "name": "Enhancement", "color": "0b02e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-10T10:55:07Z", "updated_at": "2019-12-06T19:47:51Z", "closed_at": "2019-12-06T19:47:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am developing a schema from my JSON data files. \r\nDuring schema writing, I make mistakes and the schema file itself is not valid JSON and thus cannot be parsed.\r\n\r\njsonschema does not tell me where the problem is but only outputs the following:\r\n\r\n```\r\n$ jsonschema -i games/de.eiswuxe.blookid2.json invalid-json-schema.json \r\nusage: jsonschema [-h] [-i INSTANCES] [-F ERROR_FORMAT] [-V VALIDATOR]\r\n                  [--version]\r\n                  schema\r\njsonschema: error: argument schema: invalid _json_file value: 'invalid-json-schema.json'\r\n```\r\n\r\nIt would be nice if `jsonschema` would tell me where my JSON file has a parsing error, instead of just saying \"invalid\".\r\n\r\nParsing errors should be shown for schema and data file parsing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/621", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/621/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/621/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/621/events", "html_url": "https://github.com/Julian/jsonschema/issues/621", "id": 519990096, "node_id": "MDU6SXNzdWU1MTk5OTAwOTY=", "number": 621, "title": "CLI: Allow piping of data", "user": {"login": "cweiske", "id": 59036, "node_id": "MDQ6VXNlcjU5MDM2", "avatar_url": "https://avatars0.githubusercontent.com/u/59036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cweiske", "html_url": "https://github.com/cweiske", "followers_url": "https://api.github.com/users/cweiske/followers", "following_url": "https://api.github.com/users/cweiske/following{/other_user}", "gists_url": "https://api.github.com/users/cweiske/gists{/gist_id}", "starred_url": "https://api.github.com/users/cweiske/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cweiske/subscriptions", "organizations_url": "https://api.github.com/users/cweiske/orgs", "repos_url": "https://api.github.com/users/cweiske/repos", "events_url": "https://api.github.com/users/cweiske/events{/privacy}", "received_events_url": "https://api.github.com/users/cweiske/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 241963, "node_id": "MDU6TGFiZWwyNDE5NjM=", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Enhancement", "name": "Enhancement", "color": "0b02e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-08T12:31:48Z", "updated_at": "2020-01-08T07:07:24Z", "closed_at": "2020-01-08T07:07:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if I could pipe data into the `jsonschema` for validation:\r\n\r\n    $ curl data.json | jsonschema schema.json", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/620", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/620/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/620/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/620/events", "html_url": "https://github.com/Julian/jsonschema/issues/620", "id": 519989174, "node_id": "MDU6SXNzdWU1MTk5ODkxNzQ=", "number": 620, "title": "CLI parameters: jsonschema schema.json data.json", "user": {"login": "cweiske", "id": 59036, "node_id": "MDQ6VXNlcjU5MDM2", "avatar_url": "https://avatars0.githubusercontent.com/u/59036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cweiske", "html_url": "https://github.com/cweiske", "followers_url": "https://api.github.com/users/cweiske/followers", "following_url": "https://api.github.com/users/cweiske/following{/other_user}", "gists_url": "https://api.github.com/users/cweiske/gists{/gist_id}", "starred_url": "https://api.github.com/users/cweiske/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cweiske/subscriptions", "organizations_url": "https://api.github.com/users/cweiske/orgs", "repos_url": "https://api.github.com/users/cweiske/repos", "events_url": "https://api.github.com/users/cweiske/events{/privacy}", "received_events_url": "https://api.github.com/users/cweiske/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 14479330, "node_id": "MDU6TGFiZWwxNDQ3OTMzMA==", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Wontfix", "name": "Wontfix", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-08T12:29:45Z", "updated_at": "2019-11-14T13:04:16Z", "closed_at": "2019-11-10T01:23:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "The commandline interface parameters are a bit strange:\r\n\r\n    $ jsonschema -i data.json schema.json\r\n\r\nIt would be easier to use (without needing to read the help) if the parameters would be in a different order:\r\n\r\n    $ jsonschema schema.json data.json", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/618", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/618/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/618/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/618/events", "html_url": "https://github.com/Julian/jsonschema/issues/618", "id": 511021060, "node_id": "MDU6SXNzdWU1MTEwMjEwNjA=", "number": 618, "title": "\"Command\" has not attribute \"Load\"", "user": {"login": "AwesomeAg1234", "id": 56287209, "node_id": "MDQ6VXNlcjU2Mjg3MjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/56287209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AwesomeAg1234", "html_url": "https://github.com/AwesomeAg1234", "followers_url": "https://api.github.com/users/AwesomeAg1234/followers", "following_url": "https://api.github.com/users/AwesomeAg1234/following{/other_user}", "gists_url": "https://api.github.com/users/AwesomeAg1234/gists{/gist_id}", "starred_url": "https://api.github.com/users/AwesomeAg1234/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AwesomeAg1234/subscriptions", "organizations_url": "https://api.github.com/users/AwesomeAg1234/orgs", "repos_url": "https://api.github.com/users/AwesomeAg1234/repos", "events_url": "https://api.github.com/users/AwesomeAg1234/events{/privacy}", "received_events_url": "https://api.github.com/users/AwesomeAg1234/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-23T01:46:29Z", "updated_at": "2019-10-23T01:48:35Z", "closed_at": "2019-10-23T01:48:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am making a Discord bot(which, I know is unrelated to this repository) and I'm using JSON. Whenever I try to run the commands using JSON, however, I keep getting the following error:\r\n`AttributeError: 'Command' object has no attribute 'load'`\r\nThis was working just 2 days ago, and the next morning, it suddenly stopped. Here is a snippet of my code(I am using python 3.7.3):\r\n```def checkforprofile(userid):\r\n    with open(\"gp.json\", mode=\"r\") as g:\r\n        gp = json.load(g)\r\n        user = \"userid_\" + str(userid)\r\n        if user not in gp:\r\n            addprofile(userid);```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/617", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/617/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/617/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/617/events", "html_url": "https://github.com/Julian/jsonschema/issues/617", "id": 506862717, "node_id": "MDU6SXNzdWU1MDY4NjI3MTc=", "number": 617, "title": "transient dependency on more-itertools breaks python 2", "user": {"login": "yogeshgstarsky", "id": 48812238, "node_id": "MDQ6VXNlcjQ4ODEyMjM4", "avatar_url": "https://avatars2.githubusercontent.com/u/48812238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yogeshgstarsky", "html_url": "https://github.com/yogeshgstarsky", "followers_url": "https://api.github.com/users/yogeshgstarsky/followers", "following_url": "https://api.github.com/users/yogeshgstarsky/following{/other_user}", "gists_url": "https://api.github.com/users/yogeshgstarsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/yogeshgstarsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yogeshgstarsky/subscriptions", "organizations_url": "https://api.github.com/users/yogeshgstarsky/orgs", "repos_url": "https://api.github.com/users/yogeshgstarsky/repos", "events_url": "https://api.github.com/users/yogeshgstarsky/events{/privacy}", "received_events_url": "https://api.github.com/users/yogeshgstarsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10671192, "node_id": "MDU6TGFiZWwxMDY3MTE5Mg==", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Invalid", "name": "Invalid", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-14T20:38:54Z", "updated_at": "2019-11-14T13:04:43Z", "closed_at": "2019-10-16T17:52:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "more itertools does not support python2 (not even python3.4)\r\nhttps://github.com/erikrose/more-itertools/blob/master/tox.ini\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/615", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/615/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/615/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/615/events", "html_url": "https://github.com/Julian/jsonschema/issues/615", "id": 505768409, "node_id": "MDU6SXNzdWU1MDU3Njg0MDk=", "number": 615, "title": "Generate JSON Skeleton from JSON Schema", "user": {"login": "micromad", "id": 6885515, "node_id": "MDQ6VXNlcjY4ODU1MTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6885515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/micromad", "html_url": "https://github.com/micromad", "followers_url": "https://api.github.com/users/micromad/followers", "following_url": "https://api.github.com/users/micromad/following{/other_user}", "gists_url": "https://api.github.com/users/micromad/gists{/gist_id}", "starred_url": "https://api.github.com/users/micromad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/micromad/subscriptions", "organizations_url": "https://api.github.com/users/micromad/orgs", "repos_url": "https://api.github.com/users/micromad/repos", "events_url": "https://api.github.com/users/micromad/events{/privacy}", "received_events_url": "https://api.github.com/users/micromad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-11T10:23:08Z", "updated_at": "2019-10-16T17:52:47Z", "closed_at": "2019-10-16T17:52:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I like your package but I would like to know if it's possible to add the function to generate a JSON skeleton based on the JSON schema.\r\n\r\nI must generate many JSON files according to a schema and currently I must write a driver to write these files including the skeleton I've defined in the schema.\r\n\r\nBy this way I create correlation between schema and the main code, so if I modify One, I should modify the other....\r\n\r\nThis functionnality could be usefull !!!\r\n\r\nRegards", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/614", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/614/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/614/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/614/events", "html_url": "https://github.com/Julian/jsonschema/issues/614", "id": 505423141, "node_id": "MDU6SXNzdWU1MDU0MjMxNDE=", "number": 614, "title": ">=3.1.0 does not run under Google App Engine", "user": {"login": "Drarok", "id": 55830, "node_id": "MDQ6VXNlcjU1ODMw", "avatar_url": "https://avatars0.githubusercontent.com/u/55830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Drarok", "html_url": "https://github.com/Drarok", "followers_url": "https://api.github.com/users/Drarok/followers", "following_url": "https://api.github.com/users/Drarok/following{/other_user}", "gists_url": "https://api.github.com/users/Drarok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Drarok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Drarok/subscriptions", "organizations_url": "https://api.github.com/users/Drarok/orgs", "repos_url": "https://api.github.com/users/Drarok/repos", "events_url": "https://api.github.com/users/Drarok/events{/privacy}", "received_events_url": "https://api.github.com/users/Drarok/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10671192, "node_id": "MDU6TGFiZWwxMDY3MTE5Mg==", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Invalid", "name": "Invalid", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-10T17:59:10Z", "updated_at": "2019-11-14T13:04:51Z", "closed_at": "2019-10-10T18:17:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "The change introduced in 6a7155a854d57e3f13f9dec15f2ade0820dbca2a, \"Switch to the newer importlib_metadata\" introduces a new dependency (`importlib_metadata`) which uses `ctypes` which are _not_ available on [Google App Engine][1]:\r\n\r\n```\r\n  File \"\u2026/jsonschema/__init__.py\", line 31, in <module>\r\n    import importlib_metadata\r\n  File \"\u2026/importlib_metadata/__init__.py\", line 15, in <module>\r\n    from ._compat import (\r\n  File \"\u2026/importlib_metadata/_compat.py\", line 30, in <module>\r\n    import pathlib2 as pathlib\r\n  File \"\u2026/pathlib2/__init__.py\", line 5, in <module>\r\n    import ctypes\r\n  File \"\u2026/.pyenv/versions/2.7.16/lib/python2.7/ctypes/__init__.py\", line 7, in <module>\r\n    from _ctypes import Union, Structure, Array\r\n  File \"\u2026/google-cloud-sdk/platform/google_appengine/google/appengine/tools/devappserver2/python/runtime/sandbox.py\", line 1120, in load_module\r\n    raise ImportError('No module named %s' % fullname)\r\nImportError: No module named _ctypes\r\n```\r\n\r\nSince it was only a minor version bump, it was picked up as a valid dependency but totally broke our development environment which took a _lot_ of hunting to find.\r\n\r\nI appreciate that as a project you might not want to revert this change for such a niche use-case, but hopefully other people will find this issue and it'll help them resolve the problem.\r\n\r\nIn short, __if you're using this library* on Google App Engine, pin to v3.0.2__.\r\n\r\n\\*(or a project with this as a dependency such as [Flask-RESTPlus][2])\r\n\r\n[1]: https://cloud.google.com/appengine/kb/?csw=1\r\n[2]: https://flask-restplus.readthedocs.io/en/stable/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/611", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/611/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/611/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/611/events", "html_url": "https://github.com/Julian/jsonschema/issues/611", "id": 504809423, "node_id": "MDU6SXNzdWU1MDQ4MDk0MjM=", "number": 611, "title": "Breaking change in jsonschema==3.1.0 for Python 2.7", "user": {"login": "logachev", "id": 1036695, "node_id": "MDQ6VXNlcjEwMzY2OTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1036695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/logachev", "html_url": "https://github.com/logachev", "followers_url": "https://api.github.com/users/logachev/followers", "following_url": "https://api.github.com/users/logachev/following{/other_user}", "gists_url": "https://api.github.com/users/logachev/gists{/gist_id}", "starred_url": "https://api.github.com/users/logachev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/logachev/subscriptions", "organizations_url": "https://api.github.com/users/logachev/orgs", "repos_url": "https://api.github.com/users/logachev/repos", "events_url": "https://api.github.com/users/logachev/events{/privacy}", "received_events_url": "https://api.github.com/users/logachev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 241964, "node_id": "MDU6TGFiZWwyNDE5NjQ=", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-10-09T18:09:21Z", "updated_at": "2020-02-01T20:36:53Z", "closed_at": "2020-02-01T20:36:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recent update `3.1.0` introduces a breaking change for Python 2.7.\r\n\r\nHere is a code sample that works with `3.0.0` but is broken with `3.1.0` because of the switch from `re` to `js_regex`: https://github.com/Julian/jsonschema/pull/609\r\n\r\n``` Python\r\nfrom jsonschema import Draft4Validator as Validator\r\nschema = {'type': 'string', 'pattern': r'\\d+'}\r\nvalidator = Validator(schema)\r\nlist(validator.iter_errors('123'))\r\n```\r\n\r\nThrown exception: \r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python2.7/site-packages/jsonschema/validators.py\", line 328, in iter_errors\r\n    for error in errors:\r\n  File \"/usr/local/lib/python2.7/site-packages/jsonschema/_validators.py\", line 200, in pattern\r\n    not js_regex.compile(patrn).search(instance)\r\n  File \"/usr/local/lib/python2.7/site-packages/js_regex/_impl.py\", line 39, in compile\r\n    raise TypeError(\"pattern={!r} must be a unicode string\".format(pattern))\r\nTypeError: pattern='\\\\d+' must be a unicode string\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/610", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/610/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/610/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/610/events", "html_url": "https://github.com/Julian/jsonschema/issues/610", "id": 504727622, "node_id": "MDU6SXNzdWU1MDQ3Mjc2MjI=", "number": 610, "title": "Cannot validate Redfish schemas from last redfish spec", "user": {"login": "frsauvage", "id": 23147820, "node_id": "MDQ6VXNlcjIzMTQ3ODIw", "avatar_url": "https://avatars1.githubusercontent.com/u/23147820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frsauvage", "html_url": "https://github.com/frsauvage", "followers_url": "https://api.github.com/users/frsauvage/followers", "following_url": "https://api.github.com/users/frsauvage/following{/other_user}", "gists_url": "https://api.github.com/users/frsauvage/gists{/gist_id}", "starred_url": "https://api.github.com/users/frsauvage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frsauvage/subscriptions", "organizations_url": "https://api.github.com/users/frsauvage/orgs", "repos_url": "https://api.github.com/users/frsauvage/repos", "events_url": "https://api.github.com/users/frsauvage/events{/privacy}", "received_events_url": "https://api.github.com/users/frsauvage/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-10-09T15:29:06Z", "updated_at": "2019-10-16T20:34:58Z", "closed_at": "2019-10-11T14:40:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI cannot validate my simple Chassis schema with jsonschema.\r\nI downloaded last redfish schemas DSP8010.\r\nI tried to validate with :\r\n\r\nmychassis.json\r\n\r\n{\r\n    \"@odata.type\": \"#Chassis.v1_7_0.Chassis\",\r\n    \"Id\": \"Rack_1\",\r\n    \"Name\": \"Sequana2 Rack\",\r\n    \"ChassisType\": \"Rack\",\r\n    \"Model\": \"Sequana 2 Ancien Rack\",\r\n    \"WeightKg\": 123,\r\n    \"WidthMm\": 654,\r\n    \"Manufacturer\": \"Bull\",\r\n    \"SerialNumber\": \"3M220100SL\",\r\n    \"PartNumber\": \"\",\r\n    \"PowerState\": \"On\",\r\n    \"@odata.context\": \"/redfish/v1/$metadata#Chassis.Chassis\",\r\n    \"@odata.id\": \"/redfish/v1/Chassis/Rack_1\",\r\n    \"@Redfish.Copyright\": \"Copyright 2014-2016 Distributed Management Task Force, Inc. (DMTF). For the full DMTF copyright policy, see http://www.dmtf.org/about/policies/copyright.\"\r\n}\r\n\r\n\r\n> jsonschema -i mychassis.json jsonschema/Chassis.v1_7_0.json\r\n\r\nError:\r\n\r\n`  File \"/bin/jsonschema\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/cli.py\", line 73, in main\r\n    sys.exit(run(arguments=parse_args(args=args)))\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/cli.py\", line 84, in run\r\n    for error in validator.iter_errors(instance):\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/validators.py\", line 323, in iter_errors\r\n    for error in errors:\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/_validators.py\", line 263, in ref\r\n    for error in validator.descend(instance, resolved):\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/validators.py\", line 339, in descend\r\n    for error in self.iter_errors(instance, schema):\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/validators.py\", line 323, in iter_errors\r\n    for error in errors:\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/_validators.py\", line 286, in properties\r\n    schema_path=property,\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/validators.py\", line 339, in descend\r\n    for error in self.iter_errors(instance, schema):\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/validators.py\", line 323, in iter_errors\r\n    for error in errors:\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/_validators.py\", line 259, in ref\r\n    scope, resolved = validator.resolver.resolve(ref)\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/validators.py\", line 734, in resolve\r\n    return url, self._remote_cache(url)\r\n  File \"/usr/lib/python2.7/site-packages/functools32/functools32.py\", line 400, in wrapper\r\n    result = user_function(*args, **kwds)\r\n  File \"/usr/lib/python2.7/site-packages/jsonschema/validators.py\", line 744, in resolve_from_url\r\n    raise exceptions.RefResolutionError(exc)\r\njsonschema.exceptions.RefResolutionError: No JSON object could be decoded\r\n`\r\nAny suggestion?\r\n\r\n\r\nBest Regards,\r\nFrancine", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/607", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/607/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/607/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/607/events", "html_url": "https://github.com/Julian/jsonschema/issues/607", "id": 500713224, "node_id": "MDU6SXNzdWU1MDA3MTMyMjQ=", "number": 607, "title": "Support for ECMA 262 regex patterns", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars1.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-01T07:23:10Z", "updated_at": "2019-10-07T20:40:33Z", "closed_at": "2019-10-07T20:40:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The value of [the `pattern`] keyword [SHOULD be a valid regular expression](https://json-schema.org/latest/json-schema-validation.html#pattern), according to the ECMA 262 regular expression dialect.  However [sticking to a common subset of the syntax is recommended](https://json-schema.org/understanding-json-schema/reference/regular_expressions.html).\r\n\r\nI spent the weekend doing some research on the differences between Python and JS regex, and seeing how difficult it might be to patch over them.  In short: https://pypi.org/project/js-regex/ now exists. (\ud83c\udf89)\r\n\r\nIt currently supports Python 3.6+ only, but solely because that's a much nicer way to develop a new project - if you were willing to use it in `jsonschema` I'd be happy to make a back-compatible release to support Pythons 2.7 and 3.5.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/606", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/606/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/606/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/606/events", "html_url": "https://github.com/Julian/jsonschema/issues/606", "id": 500073328, "node_id": "MDU6SXNzdWU1MDAwNzMzMjg=", "number": 606, "title": "Return True if Validator.check_schema does not raise exception.", "user": {"login": "suguru-yazawa", "id": 49271344, "node_id": "MDQ6VXNlcjQ5MjcxMzQ0", "avatar_url": "https://avatars3.githubusercontent.com/u/49271344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suguru-yazawa", "html_url": "https://github.com/suguru-yazawa", "followers_url": "https://api.github.com/users/suguru-yazawa/followers", "following_url": "https://api.github.com/users/suguru-yazawa/following{/other_user}", "gists_url": "https://api.github.com/users/suguru-yazawa/gists{/gist_id}", "starred_url": "https://api.github.com/users/suguru-yazawa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suguru-yazawa/subscriptions", "organizations_url": "https://api.github.com/users/suguru-yazawa/orgs", "repos_url": "https://api.github.com/users/suguru-yazawa/repos", "events_url": "https://api.github.com/users/suguru-yazawa/events{/privacy}", "received_events_url": "https://api.github.com/users/suguru-yazawa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 14479330, "node_id": "MDU6TGFiZWwxNDQ3OTMzMA==", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Wontfix", "name": "Wontfix", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-30T06:18:01Z", "updated_at": "2019-11-14T13:05:04Z", "closed_at": "2019-10-03T02:38:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\n\r\nCurrently, [Validator.check_schema](https://github.com/Julian/jsonschema/blob/master/jsonschema/validators.py#L292) doesn't explicitly return True.\r\nIt would be easy to test the schema if returns True.\r\n\r\n`before`\r\n```\r\n@classmethod\r\ndef check_schema(cls, schema):\r\n    for error in cls(cls.META_SCHEMA).iter_errors(schema):\r\n        raise exceptions.SchemaError.create_from(error)\r\n```\r\n\r\n\u2193\r\n\r\n`after`\r\n```\r\n@classmethod\r\ndef check_schema(cls, schema):\r\n    for error in cls(cls.META_SCHEMA).iter_errors(schema):\r\n        raise exceptions.SchemaError.create_from(error)\r\n    return True\r\n```\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/605", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/605/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/605/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/605/events", "html_url": "https://github.com/Julian/jsonschema/issues/605", "id": 494674453, "node_id": "MDU6SXNzdWU0OTQ2NzQ0NTM=", "number": 605, "title": "Required properties", "user": {"login": "mlabarre", "id": 8410461, "node_id": "MDQ6VXNlcjg0MTA0NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8410461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlabarre", "html_url": "https://github.com/mlabarre", "followers_url": "https://api.github.com/users/mlabarre/followers", "following_url": "https://api.github.com/users/mlabarre/following{/other_user}", "gists_url": "https://api.github.com/users/mlabarre/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlabarre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlabarre/subscriptions", "organizations_url": "https://api.github.com/users/mlabarre/orgs", "repos_url": "https://api.github.com/users/mlabarre/repos", "events_url": "https://api.github.com/users/mlabarre/events{/privacy}", "received_events_url": "https://api.github.com/users/mlabarre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-17T14:53:13Z", "updated_at": "2019-09-22T11:53:23Z", "closed_at": "2019-09-22T11:53:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\nFirst, very very great job. Bravo.\r\nA simple question : is possible with the actual code to require a property if another property is not set?\r\nThank you very much", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/604", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/604/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/604/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/604/events", "html_url": "https://github.com/Julian/jsonschema/issues/604", "id": 494486102, "node_id": "MDU6SXNzdWU0OTQ0ODYxMDI=", "number": 604, "title": "jsonschema 3 incompatibility with OpenStack", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-09-17T08:45:45Z", "updated_at": "2019-11-23T02:42:50Z", "closed_at": "2019-11-21T15:23:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am surprised there isnt an issue about this.\r\n\r\nA lot of the openstack projects have had pins like `jsonschema<3.0.0,>=2.6.0` for quite a long time.\r\n\r\nThis is blocking some distros (at least openSUSE) from moving to jsonschema 3.x , as they dont want to break openstack.  Which means they can also have all the new software which is now using features only in jsonschema 3.x .\r\n\r\nI see there is movement on this front on the openstack side, e.g.\r\ne.g. https://opendev.org/openstack/zaqar/commit/1af2c91e41b147f95082b68e3ec9df95ab458fb2\r\n\r\nI have also run the `glance_store` unit tests with jsonschema 3.latest and those tests pass.\r\n\r\nBut the supported version of openstack (codenamed Stein) still has the pin, and will likely continue to be supported for a while.\r\n\r\nIs there anything that can be done on the jsonschema side to reduce the incompatibilities with jsonschema 2.6.  Perhaps a shim can be created, or an upgrading guide (if one doesnt exist).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/603", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/603/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/603/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/603/events", "html_url": "https://github.com/Julian/jsonschema/issues/603", "id": 493499810, "node_id": "MDU6SXNzdWU0OTM0OTk4MTA=", "number": 603, "title": "How is asserting None handled", "user": {"login": "humbienri", "id": 1178569, "node_id": "MDQ6VXNlcjExNzg1Njk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1178569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humbienri", "html_url": "https://github.com/humbienri", "followers_url": "https://api.github.com/users/humbienri/followers", "following_url": "https://api.github.com/users/humbienri/following{/other_user}", "gists_url": "https://api.github.com/users/humbienri/gists{/gist_id}", "starred_url": "https://api.github.com/users/humbienri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humbienri/subscriptions", "organizations_url": "https://api.github.com/users/humbienri/orgs", "repos_url": "https://api.github.com/users/humbienri/repos", "events_url": "https://api.github.com/users/humbienri/events{/privacy}", "received_events_url": "https://api.github.com/users/humbienri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-13T20:16:29Z", "updated_at": "2019-09-16T15:41:50Z", "closed_at": "2019-09-16T15:41:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given this requests response.json() (note the `None` instead of `null`):\r\n```{\r\n    \"version\": \"2.3.4\",\r\n    \"result\": \"Multi-Status\",\r\n    \"data\": [\r\n        {\r\n            \"derId\": 583,\r\n            \"warnings\": [],\r\n            \"status\": \"success\",\r\n            \"error\": None\r\n        }\r\n    ]\r\n}\r\n```\r\n why is it that this schema isn't sufficient:\r\n```{\r\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n    \"title\": \"\",\r\n    \"description\": \"JSON schema for the HTTP REST API response.\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"version\": {\"type\": \"string\"},\r\n        \"result\": {\"type\": \"string\"},\r\n        \"data\": {\r\n            \"type\": \"array\",\r\n            \"items\": {\r\n                \"type\": \"object\",\r\n                \"properties\": {\r\n                    \"derId\": {\"type\": \"integer\"},\r\n                    \"warnings\": {\"type\": \"array\"},\r\n                    \"status\": {\"type\": \"string\"},\r\n                    \"error\": {\"type\": [\"null\",\"string\"]}\r\n                },\r\n                \"required\": [\"derId\", \"status\", \"warnings\", \"error\"]\r\n            }\r\n        }\r\n    },\r\n    \"required\": [\"data\", \"result\", \"version\"]\r\n}\r\n```\r\n\r\nEven if I remove the requirement for the error property, `jsonschema.validate()` chokes on the presence of `None`.\r\n\r\nI realize that `None` is a python thing and not valid json, as I understand it, but it is the calling of the `.json()` api on the API's response that introduces the `None`.\r\n\r\nThank you in advance.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/602", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/602/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/602/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/602/events", "html_url": "https://github.com/Julian/jsonschema/issues/602", "id": 493174630, "node_id": "MDU6SXNzdWU0OTMxNzQ2MzA=", "number": 602, "title": "TypeError: string indices must be integers", "user": {"login": "RichardCullen", "id": 45776269, "node_id": "MDQ6VXNlcjQ1Nzc2MjY5", "avatar_url": "https://avatars3.githubusercontent.com/u/45776269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RichardCullen", "html_url": "https://github.com/RichardCullen", "followers_url": "https://api.github.com/users/RichardCullen/followers", "following_url": "https://api.github.com/users/RichardCullen/following{/other_user}", "gists_url": "https://api.github.com/users/RichardCullen/gists{/gist_id}", "starred_url": "https://api.github.com/users/RichardCullen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RichardCullen/subscriptions", "organizations_url": "https://api.github.com/users/RichardCullen/orgs", "repos_url": "https://api.github.com/users/RichardCullen/repos", "events_url": "https://api.github.com/users/RichardCullen/events{/privacy}", "received_events_url": "https://api.github.com/users/RichardCullen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-13T07:22:38Z", "updated_at": "2019-09-18T00:54:39Z", "closed_at": "2019-09-18T00:54:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry I can't provide more info but I've auto-generated a schema using https://jsonschema.net/ from a lengthy JSON file and am getting this exception thrown. Schemas in both draft-06 and -07 throw the same error.\r\nAny tips for bug-hunting?\r\nPython 3.7.3, Win x64\r\n\r\nThanks\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"verifyjson.py\", line 13, in <module>\r\n    validate(instance=data, schema=schema)\r\n  File \"C:\\work\\test\\env\\lib\\site-packages\\jsonschema\\validators.py\", line 893, in validate\r\n    cls = validator_for(schema)\r\n  File \"C:\\work\\test\\env\\lib\\site-packages\\jsonschema\\validators.py\", line 925, in validator_for\r\n    if schema[u\"$schema\"] not in meta_schemas:\r\nTypeError: string indices must be integers\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/599", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/599/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/599/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/599/events", "html_url": "https://github.com/Julian/jsonschema/issues/599", "id": 488339494, "node_id": "MDU6SXNzdWU0ODgzMzk0OTQ=", "number": 599, "title": "RFE: Formalize workflow for loading and caching schema from localhost", "user": {"login": "jnsnow", "id": 656731, "node_id": "MDQ6VXNlcjY1NjczMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/656731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnsnow", "html_url": "https://github.com/jnsnow", "followers_url": "https://api.github.com/users/jnsnow/followers", "following_url": "https://api.github.com/users/jnsnow/following{/other_user}", "gists_url": "https://api.github.com/users/jnsnow/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnsnow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnsnow/subscriptions", "organizations_url": "https://api.github.com/users/jnsnow/orgs", "repos_url": "https://api.github.com/users/jnsnow/repos", "events_url": "https://api.github.com/users/jnsnow/events{/privacy}", "received_events_url": "https://api.github.com/users/jnsnow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-02T23:51:38Z", "updated_at": "2020-06-14T15:52:22Z", "closed_at": "2020-06-14T15:52:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "The URI in my schema are not yet valid as they are in development. What I'd like to do is use jsonschema to load a number of .json files locally, and have any `$ref` references load from a local cache.\r\n\r\n(Also, this helps unit tests in my code base before I push schema to production where they could be fetched by jsonschema. It's important to use the files from the local development branch and not those in production.)\r\n\r\nThere's kind-of support for this, because RefValidator has a cache. However, jsonschema.validate() creates a new Validator for every call. You can create your own validator, but seemingly you need to create a new one every time and manually propagate the cache, because the RefResolver appears to care about the base_url from the schema it was created from.\r\n\r\nThere doesn't *appear* to be support for creating something abstract like a ResolverContext that isn't specific to a particular Schema where cache items can be shared \"globally\" in a program.\r\n\r\nI can kind of fudge it like this:\r\n\r\n```python\r\nwith open(\"referenced-schema.json\", \"r\") as infile:\r\n    target_schema = json.load(infile)\r\n\r\nwith open(\"referencing-schema.json\", \"r\") as infile:\r\n    source_schema = json.load(infile)\r\n\r\n# Grab a resolver so we have access to it after validate()\r\nresolver = jsonschema.RefResolver.from_schema(target_schema)\r\njsonschema.validate(instance=foo, schema=target_schema, resolver=resolver)\r\n# reach in and grab the resolver cache\r\nstore = resolver.store\r\n\r\n# Create a new resolver for the next schema\r\nresolver = jsonschema.RefResolver.from_schema(source_schema)\r\nresolver.store.update(store)\r\njsonschema.validate(instance=bar, schema=sourcei_schema, resolver=resolver)\r\n```\r\n\r\nDo you have a recommendation for how to achieve this kind of a workflow? Ideally, I'd be able to do something as simple as this:\r\n\r\n```python\r\ncontext = jsonvalidator.RefContext()\r\njsonschema.validate(instance=foo, schema=target_schema, context=context)\r\njsonschema.validate(instance=bar, schema=source_schema, context=context)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/598", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/598/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/598/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/598/events", "html_url": "https://github.com/Julian/jsonschema/issues/598", "id": 487687344, "node_id": "MDU6SXNzdWU0ODc2ODczNDQ=", "number": 598, "title": "incorrect anyOf validation error", "user": {"login": "ralphie0112358", "id": 7169754, "node_id": "MDQ6VXNlcjcxNjk3NTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7169754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ralphie0112358", "html_url": "https://github.com/ralphie0112358", "followers_url": "https://api.github.com/users/ralphie0112358/followers", "following_url": "https://api.github.com/users/ralphie0112358/following{/other_user}", "gists_url": "https://api.github.com/users/ralphie0112358/gists{/gist_id}", "starred_url": "https://api.github.com/users/ralphie0112358/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ralphie0112358/subscriptions", "organizations_url": "https://api.github.com/users/ralphie0112358/orgs", "repos_url": "https://api.github.com/users/ralphie0112358/repos", "events_url": "https://api.github.com/users/ralphie0112358/events{/privacy}", "received_events_url": "https://api.github.com/users/ralphie0112358/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-30T22:08:14Z", "updated_at": "2019-09-03T16:28:47Z", "closed_at": "2019-09-03T16:28:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "This seems like a new issue in jsonschema>=3.0.\r\n\r\ntest.py\r\n```\r\nimport jsonschema\r\n\r\nschema = {'anyOf': [{'type': 'object'}, {'type': 'string'}]}\r\njsonschema.validate('hello, world', schema)\r\njsonschema.validate({'hello': 'world'}, schema)\r\njsonschema.validate(1, schema)\r\n```\r\n\r\ntest with jsonschema==2.6.0, gives proper validation error: `1 is not valid under any of the given schemas`\r\n```\r\n$ rm -rf env\r\n$ virtualenv --python=python3.7 env\r\nRunning virtualenv with interpreter /usr/bin/python3.7\r\nUsing base prefix '/usr'\r\n/usr/lib/python3/dist-packages/virtualenv.py:1082: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n  import imp\r\nNew python executable in /home/ubuntu/dev/jsonschema/env/bin/python3.7\r\nAlso creating executable in /home/ubuntu/dev/jsonschema/env/bin/python\r\nInstalling setuptools, pkg_resources, pip, wheel...done.\r\n$ env/bin/pip install jsonschema==2.6.0\r\nCollecting jsonschema==2.6.0\r\n  Using cached https://files.pythonhosted.org/packages/77/de/47e35a97b2b05c2fadbec67d44cfcdcd09b8086951b331d82de90d2912da/jsonschema-2.6.0-py2.py3-none-any.whl\r\nInstalling collected packages: jsonschema\r\nSuccessfully installed jsonschema-2.6.0\r\n$ env/bin/python test.py\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 6, in <module>\r\n    jsonschema.validate(1, schema)\r\n  File \"/home/ubuntu/dev/jsonschema/env/lib/python3.7/site-packages/jsonschema/validators.py\", line 541, in validate\r\n    cls(schema, *args, **kwargs).validate(instance)\r\n  File \"/home/ubuntu/dev/jsonschema/env/lib/python3.7/site-packages/jsonschema/validators.py\", line 130, in validate\r\n    raise error\r\njsonschema.exceptions.ValidationError: 1 is not valid under any of the given schemas\r\n\r\nFailed validating 'anyOf' in schema:\r\n    {'anyOf': [{'type': 'object'}, {'type': 'string'}]}\r\n\r\nOn instance:\r\n    1\r\n```\r\n\r\n\r\ntest with jsonschema==3.0.2 gives wrong validation error: `1 is not of type 'object'`\r\n```\r\n$ rm -rf env\r\n$ virtualenv --python=python3.7 env\r\nRunning virtualenv with interpreter /usr/bin/python3.7\r\nUsing base prefix '/usr'\r\n/usr/lib/python3/dist-packages/virtualenv.py:1082: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n  import imp\r\nNew python executable in /home/ubuntu/dev/jsonschema/env/bin/python3.7\r\nAlso creating executable in /home/ubuntu/dev/jsonschema/env/bin/python\r\nInstalling setuptools, pkg_resources, pip, wheel...done.\r\n$ env/bin/pip install jsonschema==3.0.2\r\nCollecting jsonschema==3.0.2\r\n  Using cached https://files.pythonhosted.org/packages/54/48/f5f11003ceddcd4ad292d4d9b5677588e9169eef41f88e38b2888e7ec6c4/jsonschema-3.0.2-py2.py3-none-any.whl\r\nCollecting attrs>=17.4.0 (from jsonschema==3.0.2)\r\n  Using cached https://files.pythonhosted.org/packages/23/96/d828354fa2dbdf216eaa7b7de0db692f12c234f7ef888cc14980ef40d1d2/attrs-19.1.0-py2.py3-none-any.whl\r\nCollecting six>=1.11.0 (from jsonschema==3.0.2)\r\n  Using cached https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl\r\nCollecting pyrsistent>=0.14.0 (from jsonschema==3.0.2)\r\nRequirement already satisfied: setuptools in ./env/lib/python3.7/site-packages (from jsonschema==3.0.2) (41.2.0)\r\nInstalling collected packages: attrs, six, pyrsistent, jsonschema\r\nSuccessfully installed attrs-19.1.0 jsonschema-3.0.2 pyrsistent-0.15.4 six-1.12.0\r\n$ env/bin/python test.py\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 6, in <module>\r\n    jsonschema.validate(1, schema)\r\n  File \"/home/ubuntu/dev/jsonschema/env/lib/python3.7/site-packages/jsonschema/validators.py\", line 899, in validate\r\n    raise error\r\njsonschema.exceptions.ValidationError: 1 is not of type 'object'\r\n\r\nFailed validating 'type' in schema[0]:\r\n    {'type': 'object'}\r\n\r\nOn instance:\r\n    1\r\n```\r\n\r\nThank you in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/597", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/597/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/597/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/597/events", "html_url": "https://github.com/Julian/jsonschema/issues/597", "id": 483335885, "node_id": "MDU6SXNzdWU0ODMzMzU4ODU=", "number": 597, "title": "Enable strict mode: Throw an error if a property is unknown", "user": {"login": "MatinF", "id": 26184427, "node_id": "MDQ6VXNlcjI2MTg0NDI3", "avatar_url": "https://avatars0.githubusercontent.com/u/26184427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatinF", "html_url": "https://github.com/MatinF", "followers_url": "https://api.github.com/users/MatinF/followers", "following_url": "https://api.github.com/users/MatinF/following{/other_user}", "gists_url": "https://api.github.com/users/MatinF/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatinF/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatinF/subscriptions", "organizations_url": "https://api.github.com/users/MatinF/orgs", "repos_url": "https://api.github.com/users/MatinF/repos", "events_url": "https://api.github.com/users/MatinF/events{/privacy}", "received_events_url": "https://api.github.com/users/MatinF/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-21T10:25:43Z", "updated_at": "2019-08-22T17:30:42Z", "closed_at": "2019-08-22T17:30:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nWe have a fairly large schema in which we need to ensure that no \"extra\" properties are included.\r\n\r\nThis can of course be done via `additionalProperties: false`. However, we also have a lot of dependency fields, meaning that we need to add a lot of convoluted `patternProperties` to account for all the dynamic fields that may be added.\r\n\r\nTo avoid this, we were hoping to be able to use a \"strict\" mode in the Python jsonschema. Basically, this would throw an error when the form data contains a property that is not included in the schema. \r\n\r\nOther JSON Schema editors like ruby-json-schema and react-json-schema-form seem to have a similar feature, but we've not be able to find it in jsonschema. Did we simply miss it or is it a deliberate decision to not include this?\r\n\r\nBest,\r\nMartin", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/596", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/596/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/596/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/596/events", "html_url": "https://github.com/Julian/jsonschema/issues/596", "id": 482180039, "node_id": "MDU6SXNzdWU0ODIxODAwMzk=", "number": 596, "title": "ISSUE/QUESTION - jsonschema.exceptions.RefResolutionError: Unresolvable JSON pointer: 'components/schemas/head'", "user": {"login": "sl2016", "id": 8767153, "node_id": "MDQ6VXNlcjg3NjcxNTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/8767153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sl2016", "html_url": "https://github.com/sl2016", "followers_url": "https://api.github.com/users/sl2016/followers", "following_url": "https://api.github.com/users/sl2016/following{/other_user}", "gists_url": "https://api.github.com/users/sl2016/gists{/gist_id}", "starred_url": "https://api.github.com/users/sl2016/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sl2016/subscriptions", "organizations_url": "https://api.github.com/users/sl2016/orgs", "repos_url": "https://api.github.com/users/sl2016/repos", "events_url": "https://api.github.com/users/sl2016/events{/privacy}", "received_events_url": "https://api.github.com/users/sl2016/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-19T08:41:43Z", "updated_at": "2019-08-22T19:51:05Z", "closed_at": "2019-08-22T19:51:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to validate the JSON with the expected Open API JSON schema(generated by FastAPI/Pydantic). However, for the $ref nodes in the schema, I receive an error message - \"Unresolvable JSON pointer: %r\" % fragment and jsonschema.exceptions.RefResolutionError: Unresolvable JSON pointer: 'components/schemas/head'\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/592", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/592/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/592/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/592/events", "html_url": "https://github.com/Julian/jsonschema/issues/592", "id": 476423601, "node_id": "MDU6SXNzdWU0NzY0MjM2MDE=", "number": 592, "title": "Accept `collections.abc.MutableMapping` instances as valid `object` instances", "user": {"login": "hblunck", "id": 15084984, "node_id": "MDQ6VXNlcjE1MDg0OTg0", "avatar_url": "https://avatars1.githubusercontent.com/u/15084984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hblunck", "html_url": "https://github.com/hblunck", "followers_url": "https://api.github.com/users/hblunck/followers", "following_url": "https://api.github.com/users/hblunck/following{/other_user}", "gists_url": "https://api.github.com/users/hblunck/gists{/gist_id}", "starred_url": "https://api.github.com/users/hblunck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hblunck/subscriptions", "organizations_url": "https://api.github.com/users/hblunck/orgs", "repos_url": "https://api.github.com/users/hblunck/repos", "events_url": "https://api.github.com/users/hblunck/events{/privacy}", "received_events_url": "https://api.github.com/users/hblunck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-03T07:00:39Z", "updated_at": "2019-08-03T15:43:08Z", "closed_at": "2019-08-03T15:43:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nfirst: Thanks for the great work! I really appreciate your library!\r\n\r\nI recently played around with my custom collections, i.e. classes that pretend to be python collections, in particular `dict` objects.\r\n\r\nI derived these custom mappings from [`collections.abc.MutableMapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping). However, passing those instances as schemas to `jsonschema.validate` yields an error as it cannot be validated that the schema is of type `object`.\r\n\r\nHere is some example code. Basically, the first call to `jsonschema.validate` works as expected, the second call complains that the schema is not of type object.\r\n\r\n```python\r\nimport jsonschema\r\nfrom collections.abc import MutableMapping\r\n\r\n# Create my own class that looks a lot like a dictionary.\r\nclass MyMapping(MutableMapping):\r\n    def __init__(self, **kwargs):\r\n        self._content = kwargs\r\n    \r\n    def __getitem__(self, key):\r\n        return self._content[key]\r\n    \r\n    def __setitem__(self, key, value):\r\n        self._content[key] = value\r\n    \r\n    def __delitem__(self, key):\r\n        del self._content[key]\r\n    \r\n    def __iter__(self):\r\n        return iter(self._content)\r\n    \r\n    def __len__(self):\r\n        return len(self._content)\r\n    \r\n    @classmethod\r\n    def from_dict(cls, d):\r\n        return cls(**d)\r\n    \r\n\r\nschema = {\r\n    'type': 'object',\r\n    'properties': {\r\n        'name': {\r\n            'type': 'string'\r\n        },\r\n        'age': {\r\n            'type': 'number'\r\n        },\r\n        'descendants': {\r\n            'type': 'array',\r\n            'items': {\r\n                '$ref': '#/human'\r\n            }\r\n        }\r\n    },\r\n    'required': ['name']\r\n}\r\n\r\ndata = {\r\n    'name': 'John Doe'\r\n}\r\n\r\n\r\n# First we try the original schema -> This works\r\njsonschema.validate(data, schema)\r\n# Now, to show that MyMapping works but that jsonschema\r\n# requires a class derived from dict, we create a second\r\n# custom class that also inherits from dict but uses the\r\n# methods defined in MyMapping for item access.\r\nclass MyDictBasedMapping(dict, MyMapping):\r\n    pass\r\n\r\njsonschema.validate(data, MyDictBasedMapping.from_dict(schema))\r\n\r\n# Finally, just using MyMapping does not work.\r\njsonschema.validate(data, MyMapping.from_dict(schema))\r\n```\r\n\r\nI tried to break down the problem and assume it relates to [this code segment](https://github.com/Julian/jsonschema/blob/8c725a1e4ded065dfd23c0d49d790df8e5396e6c/jsonschema/validators.py#L88) where the type check for `object` JSON types is set to a Python `dict`. Would it be possible to relax this to `collections.abc.MutableMapping`?\r\n\r\nRegards,\r\n\r\nHenning", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/589", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/589/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/589/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/589/events", "html_url": "https://github.com/Julian/jsonschema/issues/589", "id": 473167669, "node_id": "MDU6SXNzdWU0NzMxNjc2Njk=", "number": 589, "title": "RefResolver referrer is hard to understand", "user": {"login": "OhBonsai", "id": 18596879, "node_id": "MDQ6VXNlcjE4NTk2ODc5", "avatar_url": "https://avatars0.githubusercontent.com/u/18596879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OhBonsai", "html_url": "https://github.com/OhBonsai", "followers_url": "https://api.github.com/users/OhBonsai/followers", "following_url": "https://api.github.com/users/OhBonsai/following{/other_user}", "gists_url": "https://api.github.com/users/OhBonsai/gists{/gist_id}", "starred_url": "https://api.github.com/users/OhBonsai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OhBonsai/subscriptions", "organizations_url": "https://api.github.com/users/OhBonsai/orgs", "repos_url": "https://api.github.com/users/OhBonsai/repos", "events_url": "https://api.github.com/users/OhBonsai/events{/privacy}", "received_events_url": "https://api.github.com/users/OhBonsai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-26T04:08:05Z", "updated_at": "2019-09-02T12:29:58Z", "closed_at": "2019-09-02T12:29:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "RefResolver `referrer` param make me confuse....\r\n\r\nI have two json file, Server.json ref Base.json\r\n```\r\n# Base.json\r\n{\r\n  \"title\": \"Base\",\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"identity\": {\"type\": \"string\"},\r\n    \"name\": {\"type\": \"string\"}\r\n  },\r\n  \"required\": [\"identity\", \"name\"]\r\n}\r\n# Server.json\r\n{\r\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n  \"title\": \"server\",\r\n  \"type\": \"object\",\r\n\r\n  \"allOf\": [\r\n    { \"$ref\": \"Base.json\" }\r\n  ],\r\n  \"properties\": {\r\n    \"foo\": {\"type\": \"string\"},\r\n    \"bar\": {\"type\": \"string\"}\r\n  }\r\n}\r\n```\r\nIn the same dir,   Use RefResolver to load server validate like below\r\n```\r\nfrom jsonschema import validate, RefResolver, exceptions\r\nimport os\r\nimport json\r\n\r\n\r\ndef test_extend_schema():\r\n    schema_path = os.path.dirname(__file__)\r\n\r\n    schema_url = \"file:///{}/\".format(schema_path)\r\n\r\n    resolver = RefResolver(schema_url, None)\r\n    schema = json.load(open(os.path.join(schema_path, \"Server.json\")))\r\n    instance = {\r\n        \"identity\": 123,\r\n        \"name\": \"hello bonsai\"\r\n    }\r\n\r\n    try:\r\n        validate(instance, schema, resolver=resolver)\r\n    except exceptions.ValidationError as e:\r\n        print(e.message)\r\n\r\n\r\ntest_extend_schema()\r\n```\r\n\r\nI set RefResolver `referrer=None`,  Is there any other `RefResolver use case`. and why not  set `referrer` default equal None in init func?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/588", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/588/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/588/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/588/events", "html_url": "https://github.com/Julian/jsonschema/issues/588", "id": 472507676, "node_id": "MDU6SXNzdWU0NzI1MDc2NzY=", "number": 588, "title": "Install with Conda", "user": {"login": "yehoshuadimarsky", "id": 24758845, "node_id": "MDQ6VXNlcjI0NzU4ODQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/24758845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yehoshuadimarsky", "html_url": "https://github.com/yehoshuadimarsky", "followers_url": "https://api.github.com/users/yehoshuadimarsky/followers", "following_url": "https://api.github.com/users/yehoshuadimarsky/following{/other_user}", "gists_url": "https://api.github.com/users/yehoshuadimarsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/yehoshuadimarsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yehoshuadimarsky/subscriptions", "organizations_url": "https://api.github.com/users/yehoshuadimarsky/orgs", "repos_url": "https://api.github.com/users/yehoshuadimarsky/repos", "events_url": "https://api.github.com/users/yehoshuadimarsky/events{/privacy}", "received_events_url": "https://api.github.com/users/yehoshuadimarsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-24T20:32:57Z", "updated_at": "2019-07-26T02:39:24Z", "closed_at": "2019-07-26T02:39:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I use conda a lot instead of pip and I'd love to be able to install this with Conda. I volunteer to get it added to the conda-forge channel - that's the open community channel where people can contribute to. It's pretty straightforward to do once you get the hang of it, especially for libraries that are already on PyPI. I'll use this issue to keep everyone posted about this, once you let me know it's ok to publish on Conda.\r\n\r\n(As an aside, I've done this already with several other PyPI libraries that I wanted in conda - see `ib-insync`, `azure-cosmos-python`, `pyfinance`, and others).\r\n\r\nAlso, the conda \"recipe\" requires at least one maintainer, I'm happy to do so, but if you wish to also be a maintainer, let me know and I can get you added. \r\n\r\nThanks for this great package!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/587", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/587/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/587/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/587/events", "html_url": "https://github.com/Julian/jsonschema/issues/587", "id": 471576837, "node_id": "MDU6SXNzdWU0NzE1NzY4Mzc=", "number": 587, "title": "nested oneof validation fails", "user": {"login": "IamMashed", "id": 10993575, "node_id": "MDQ6VXNlcjEwOTkzNTc1", "avatar_url": "https://avatars2.githubusercontent.com/u/10993575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IamMashed", "html_url": "https://github.com/IamMashed", "followers_url": "https://api.github.com/users/IamMashed/followers", "following_url": "https://api.github.com/users/IamMashed/following{/other_user}", "gists_url": "https://api.github.com/users/IamMashed/gists{/gist_id}", "starred_url": "https://api.github.com/users/IamMashed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IamMashed/subscriptions", "organizations_url": "https://api.github.com/users/IamMashed/orgs", "repos_url": "https://api.github.com/users/IamMashed/repos", "events_url": "https://api.github.com/users/IamMashed/events{/privacy}", "received_events_url": "https://api.github.com/users/IamMashed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-23T09:12:07Z", "updated_at": "2019-07-23T14:12:27Z", "closed_at": "2019-07-23T14:12:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "continuation to #585\r\n\r\n```\r\nfrom jsonschema import validate\r\nfrom jsonschema import FormatChecker\r\n\r\nschema = {\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n        \"$ref\": \"#/definitions/SanctionsScreeningElement\"\r\n    },\r\n    \"efiVersion\": \"0.5\",\r\n    \"definitions\": {\r\n        \"SanctionsScreeningElement\": {\r\n            \"title\": \"SanctionsScreeningElement\",\r\n            \"type\": \"object\",\r\n            \"oneOf\": [\r\n                {\r\n                    \"properties\": {\r\n                        \"s_type\": {\r\n                            \"const\": \"transaction\"\r\n                        },\r\n                        \"s_id\": {\r\n                            \"$ref\": \"#/definitions/NumberOrString\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"additionalProperties\": false,\r\n                    \"properties\": {\r\n                        \"s_type\": {\r\n                            \"const\": \"internal\"\r\n                        },\r\n                        \"s_id\": {\r\n                            \"$ref\": \"#/definitions/emptyString\"\r\n                        },\r\n                        \"s_datetime\": {\r\n                            \"$ref\": \"#/definitions/MaybeDate\"\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        \"NumberOrString\": {\r\n            \"title\": \"NumberOrString\",\r\n            \"oneOf\": [\r\n                {\r\n                    \"$ref\": \"#/definitions/nonEmptyString\"\r\n                },\r\n                {\r\n                    \"type\": \"number\"\r\n                }\r\n            ]\r\n        },\r\n        \"date\": {\r\n            \"title\": \"date\",\r\n            \"type\": \"string\",\r\n            \"format\": \"date\"\r\n        },\r\n        \"DateTime\": {\r\n            \"title\": \"date\",\r\n            \"type\": \"string\",\r\n            \"format\": \"date-time\"\r\n        },\r\n        \"MaybeDate\": {\r\n            \"title\": \"MaybeDate\",\r\n            \"oneOf\": [\r\n                {\r\n                    \"$ref\": \"#/definitions/date\"\r\n                },\r\n                {\r\n                    \"$ref\": \"#/definitions/DateTime\"\r\n                },\r\n                {\r\n                    \"$ref\": \"#/definitions/emptyString\"\r\n                }\r\n            ]\r\n        },\r\n        \"nonEmptyString\": {\r\n            \"type\": \"string\",\r\n            \"minLength\": 1\r\n        },\r\n        \"emptyString\": {\r\n            \"const\": \"\"\r\n        }\r\n    }\r\n}\r\n\r\ndata = [\r\n  {\r\n    \"s_type\": \"internal\",\r\n    \"s_id\": \"\",\r\n    \"s_datetime\": \"\"\r\n  },\r\n  {\r\n    \"s_type\": \"transaction\",\r\n    \"s_id\": \"2626660\"\r\n  }\r\n]\r\n\r\nvalidate(data, schema, format_checker=FormatChecker())\r\n```\r\n\r\nresults in s_id raising\r\n```\r\njsonschema.exceptions.ValidationError: '' is too short\r\n\r\nFailed validating 'minLength' in schema[0]:\r\n    {'minLength': 1, 'type': 'string'}\r\n```\r\n\r\nWhat could be the cause? Validation should pass\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/586", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/586/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/586/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/586/events", "html_url": "https://github.com/Julian/jsonschema/issues/586", "id": 470219082, "node_id": "MDU6SXNzdWU0NzAyMTkwODI=", "number": 586, "title": "Support for MongoDB $bsonType extensions", "user": {"login": "ee987", "id": 49906529, "node_id": "MDQ6VXNlcjQ5OTA2NTI5", "avatar_url": "https://avatars2.githubusercontent.com/u/49906529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ee987", "html_url": "https://github.com/ee987", "followers_url": "https://api.github.com/users/ee987/followers", "following_url": "https://api.github.com/users/ee987/following{/other_user}", "gists_url": "https://api.github.com/users/ee987/gists{/gist_id}", "starred_url": "https://api.github.com/users/ee987/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ee987/subscriptions", "organizations_url": "https://api.github.com/users/ee987/orgs", "repos_url": "https://api.github.com/users/ee987/repos", "events_url": "https://api.github.com/users/ee987/events{/privacy}", "received_events_url": "https://api.github.com/users/ee987/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-19T09:05:57Z", "updated_at": "2020-04-14T15:52:34Z", "closed_at": "2019-07-26T20:24:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "When working with mongodb the database can enforce document structure with jsonSchema according to [1].\r\n\r\nHowever mongodb has some own datatypes [2], like ObjectId, Date, Bool, Int  that are not supported natively by json schema. These can be encoded by using the extension \"bsonType\"  property instead of \"type\".\r\n\r\nIt would be very useful if jsonschema could validate such objects also. When a document fails validation inside mongodb you don't get any explanation why [3], so you always have to validate it with another validator client-side on failed insertions. Right now there is no such validator for python so the best workaround is to remove all bsonTypes before using jsonschema or convert the document into nodejs and use ajv. Neither option is really smooth.\r\n\r\n[1] https://docs.mongodb.com/manual/reference/operator/query/jsonSchema/#jsonschema-extension\r\n[2] https://docs.mongodb.com/manual/reference/operator/query/type/#document-type-available-types\r\n[3] https://jira.mongodb.org/browse/SERVER-20547 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/585", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/585/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/585/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/585/events", "html_url": "https://github.com/Julian/jsonschema/issues/585", "id": 469167291, "node_id": "MDU6SXNzdWU0NjkxNjcyOTE=", "number": 585, "title": "[Bug] oneOf and empty-string ", "user": {"login": "leberknecht", "id": 1165177, "node_id": "MDQ6VXNlcjExNjUxNzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1165177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leberknecht", "html_url": "https://github.com/leberknecht", "followers_url": "https://api.github.com/users/leberknecht/followers", "following_url": "https://api.github.com/users/leberknecht/following{/other_user}", "gists_url": "https://api.github.com/users/leberknecht/gists{/gist_id}", "starred_url": "https://api.github.com/users/leberknecht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leberknecht/subscriptions", "organizations_url": "https://api.github.com/users/leberknecht/orgs", "repos_url": "https://api.github.com/users/leberknecht/repos", "events_url": "https://api.github.com/users/leberknecht/events{/privacy}", "received_events_url": "https://api.github.com/users/leberknecht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-17T12:35:03Z", "updated_at": "2019-07-17T13:02:50Z", "closed_at": "2019-07-17T13:02:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, im struggling with a field that should either have a date or an empty string:\r\n\r\n```\r\nfrom jsonschema import validate\r\n\r\nschema = {\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n        \"$ref\": \"#/definitions/MyElement\"\r\n    },\r\n    \"definitions\": {\r\n        \"MyElement\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"my_date\": { \"$ref\": \"#/definitions/MaybeDate\" },\r\n            }\r\n        },\r\n        \"MaybeDate\": {\r\n            \"title\": \"MaybeDate\",\r\n            \"oneOf\": [{\r\n                \"type\": \"string\",\r\n                \"format\": \"date\"\r\n            }, {\r\n                \"const\": \"\"\r\n            }]\r\n        }\r\n    }\r\n}\r\n\r\ndata = [{\r\n    \"my_date\": \"2018-05-05\",\r\n}]\r\n\r\nvalidate(data, schema)\r\n\r\ndata = [{\r\n    \"my_date\": \"\",\r\n}]\r\n\r\nvalidate(data, schema)\r\n```\r\nBoth should be valid, but the empty-string causes\r\n```\r\nTraceback (most recent call last):\r\n  File \"config/scratches/scratch_25.py\", line 38, in <module>\r\n    validate(data, schema)\r\n  File \"/venv/lib/python3.6/site-packages/jsonschema/validators.py\", line 899, in validate\r\n    raise error\r\njsonschema.exceptions.ValidationError: '' is valid under each of {'const': ''}, {'type': 'string', 'format': 'date'}\r\n\r\nFailed validating 'oneOf' in schema['items']['properties']['my_date']:\r\n    {'oneOf': [{'format': 'date', 'type': 'string'}, {'const': ''}],\r\n     'title': 'MaybeDate'}\r\n\r\nOn instance[0]['my_date']:\r\n```\r\nThis does not happen on https://www.jsonschemavalidator.net/ nor using the nodejs module https://www.npmjs.com/package/jsonschema \r\nAm i missing something?\r\nUsing v3.0.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/584", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/584/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/584/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/584/events", "html_url": "https://github.com/Julian/jsonschema/issues/584", "id": 468606613, "node_id": "MDU6SXNzdWU0Njg2MDY2MTM=", "number": 584, "title": "Package version mechanism incompatible with AWS Lambda", "user": {"login": "danie1k", "id": 7894107, "node_id": "MDQ6VXNlcjc4OTQxMDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7894107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danie1k", "html_url": "https://github.com/danie1k", "followers_url": "https://api.github.com/users/danie1k/followers", "following_url": "https://api.github.com/users/danie1k/following{/other_user}", "gists_url": "https://api.github.com/users/danie1k/gists{/gist_id}", "starred_url": "https://api.github.com/users/danie1k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danie1k/subscriptions", "organizations_url": "https://api.github.com/users/danie1k/orgs", "repos_url": "https://api.github.com/users/danie1k/repos", "events_url": "https://api.github.com/users/danie1k/events{/privacy}", "received_events_url": "https://api.github.com/users/danie1k/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10671192, "node_id": "MDU6TGFiZWwxMDY3MTE5Mg==", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Invalid", "name": "Invalid", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2019-07-16T11:43:49Z", "updated_at": "2020-08-04T22:56:35Z", "closed_at": "2019-07-23T17:56:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tested on AWS Lambda. Following code does not work on AWS Lambda due to lack of package manager.\r\n\r\nhttps://github.com/Julian/jsonschema/blob/e4fa34f6517895a81e5ba7e648dc0796f25f9b21/jsonschema/__init__.py#L32-L33\r\n\r\nIt has beed added in Julian/jsonschema@b07d0f1d893f4a21008e0c8922959ddcf0614b73 commit.\r\n\r\n\r\n**Stacktrace I'm getting**\r\n```\r\nTraceback (most recent call last):\r\nFile \"/var/task/wsgi_handler.py\", line 44, in import_app\r\nwsgi_module = importlib.import_module(wsgi_fqn_parts[-1])\r\nFile \"/var/lang/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\nreturn _bootstrap._gcd_import(name[level:], package, level)\r\nFile \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\nFile \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\nFile \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\nFile \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\nFile \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\nFile \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\nFile \"/var/task/index.py\", line 11, in <module>\r\n(...)\r\nfrom jsonschema.exceptions import ValidationError\r\nFile \"/var/task/jsonschema/__init__.py\", line 33, in <module>\r\n__version__ = get_distribution(__name__).version\r\nFile \"/var/task/pkg_resources/__init__.py\", line 481, in get_distribution\r\ndist = get_provider(dist)\r\nFile \"/var/task/pkg_resources/__init__.py\", line 357, in get_provider\r\nreturn working_set.find(moduleOrReq) or require(str(moduleOrReq))[0]\r\nFile \"/var/task/pkg_resources/__init__.py\", line 900, in require\r\nneeded = self.resolve(parse_requirements(requirements))\r\nFile \"/var/task/pkg_resources/__init__.py\", line 786, in resolve\r\nraise DistributionNotFound(req, requirers)\r\npkg_resources.DistributionNotFound: The 'jsonschema' distribution was not found and is required by the application\r\nSTART RequestId: xxx-xxx-xxx Version: $LATEST\r\nmodule initialization error: Unable to import index.api\r\n\r\nEND RequestId: xxx-xxx-xxx\r\nmodule initialization error\r\nUnable to import index.api\r\nTraceback (most recent call last):\r\nFile \"/var/task/wsgi_handler.py\", line 44, in import_app\r\nwsgi_module = importlib.import_module(wsgi_fqn_parts[-1])\r\nFile \"/var/lang/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\nreturn _bootstrap._gcd_import(name[level:], package, level)\r\nFile \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\nFile \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\nFile \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\nFile \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\nFile \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\nFile \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\nFile \"/var/task/index.py\", line 11, in <module>\r\n(...)\r\nfrom jsonschema.exceptions import ValidationError\r\nFile \"/var/task/jsonschema/__init__.py\", line 33, in <module>\r\n__version__ = get_distribution(__name__).version\r\nFile \"/var/task/pkg_resources/__init__.py\", line 481, in get_distribution\r\ndist = get_provider(dist)\r\nFile \"/var/task/pkg_resources/__init__.py\", line 357, in get_provider\r\nreturn working_set.find(moduleOrReq) or require(str(moduleOrReq))[0]\r\nFile \"/var/task/pkg_resources/__init__.py\", line 900, in require\r\nneeded = self.resolve(parse_requirements(requirements))\r\nFile \"/var/task/pkg_resources/__init__.py\", line 786, in resolve\r\nraise DistributionNotFound(req, requirers)\r\npkg_resources.DistributionNotFound: The 'jsonschema' distribution was not found and is required by the application\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/583", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/583/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/583/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/583/events", "html_url": "https://github.com/Julian/jsonschema/issues/583", "id": 468492040, "node_id": "MDU6SXNzdWU0Njg0OTIwNDA=", "number": 583, "title": "What is the reason to not have tests suites as git submodule from json-schema-org?", "user": {"login": "ystreibel", "id": 3459111, "node_id": "MDQ6VXNlcjM0NTkxMTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3459111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ystreibel", "html_url": "https://github.com/ystreibel", "followers_url": "https://api.github.com/users/ystreibel/followers", "following_url": "https://api.github.com/users/ystreibel/following{/other_user}", "gists_url": "https://api.github.com/users/ystreibel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ystreibel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ystreibel/subscriptions", "organizations_url": "https://api.github.com/users/ystreibel/orgs", "repos_url": "https://api.github.com/users/ystreibel/repos", "events_url": "https://api.github.com/users/ystreibel/events{/privacy}", "received_events_url": "https://api.github.com/users/ystreibel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10671192, "node_id": "MDU6TGFiZWwxMDY3MTE5Mg==", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Invalid", "name": "Invalid", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-16T07:26:03Z", "updated_at": "2019-11-14T13:05:43Z", "closed_at": "2019-07-20T20:39:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI compare the tests suites of jsonschema vs json-schema-org repositories. Could you explain why in jsonschema repository the tests suites directory is not a submodule from json-schema-org?\r\n\r\nWhat's the differences between those two tests suites ?\r\nDid you make the effort to maintain both in parallele ?\r\n\r\nThank you !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/581", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/581/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/581/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/581/events", "html_url": "https://github.com/Julian/jsonschema/issues/581", "id": 466974669, "node_id": "MDU6SXNzdWU0NjY5NzQ2Njk=", "number": 581, "title": "Specify instance type in docstring?", "user": {"login": "laurenmarietta", "id": 12650803, "node_id": "MDQ6VXNlcjEyNjUwODAz", "avatar_url": "https://avatars1.githubusercontent.com/u/12650803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laurenmarietta", "html_url": "https://github.com/laurenmarietta", "followers_url": "https://api.github.com/users/laurenmarietta/followers", "following_url": "https://api.github.com/users/laurenmarietta/following{/other_user}", "gists_url": "https://api.github.com/users/laurenmarietta/gists{/gist_id}", "starred_url": "https://api.github.com/users/laurenmarietta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laurenmarietta/subscriptions", "organizations_url": "https://api.github.com/users/laurenmarietta/orgs", "repos_url": "https://api.github.com/users/laurenmarietta/repos", "events_url": "https://api.github.com/users/laurenmarietta/events{/privacy}", "received_events_url": "https://api.github.com/users/laurenmarietta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 241963, "node_id": "MDU6TGFiZWwyNDE5NjM=", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Enhancement", "name": "Enhancement", "color": "0b02e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-11T15:50:48Z", "updated_at": "2020-01-08T07:07:02Z", "closed_at": "2020-01-08T07:07:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to just use the basic `validate(instance, schema)` function. The docstring for this function describes the `instance` argument as \"The instance to validate.\"\r\n\r\nThis is not particularly specific - is this `instance` a filename to a JSON file? An open file object of a JSON file? A string of JSON text? A JSON object opened with `json.load()`? Or an instance of one of the classes defined within `jsonschema`?\r\n\r\nIt would be helpful, appreciated, and hopefully easy to update that docstring to be more specific.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/579", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/579/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/579/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/579/events", "html_url": "https://github.com/Julian/jsonschema/issues/579", "id": 466475083, "node_id": "MDU6SXNzdWU0NjY0NzUwODM=", "number": 579, "title": "jsonschema.validate(42, {\"a\": \"b\"}) raises no exceptions?", "user": {"login": "karlosss", "id": 8711362, "node_id": "MDQ6VXNlcjg3MTEzNjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8711362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karlosss", "html_url": "https://github.com/karlosss", "followers_url": "https://api.github.com/users/karlosss/followers", "following_url": "https://api.github.com/users/karlosss/following{/other_user}", "gists_url": "https://api.github.com/users/karlosss/gists{/gist_id}", "starred_url": "https://api.github.com/users/karlosss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karlosss/subscriptions", "organizations_url": "https://api.github.com/users/karlosss/orgs", "repos_url": "https://api.github.com/users/karlosss/repos", "events_url": "https://api.github.com/users/karlosss/events{/privacy}", "received_events_url": "https://api.github.com/users/karlosss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10671192, "node_id": "MDU6TGFiZWwxMDY3MTE5Mg==", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Invalid", "name": "Invalid", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-10T19:19:06Z", "updated_at": "2019-11-14T13:05:42Z", "closed_at": "2019-07-10T19:42:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is probably a newbie one, but why this code raises no exceptions? Is there any way to force it to raise a `SchemaError`?\r\n\r\n`jsonschema.validate(42, {\"a\": \"b\"})`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/578", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/578/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/578/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/578/events", "html_url": "https://github.com/Julian/jsonschema/issues/578", "id": 464966083, "node_id": "MDU6SXNzdWU0NjQ5NjYwODM=", "number": 578, "title": "Make jsonschema --version work", "user": {"login": "Julian", "id": 329822, "node_id": "MDQ6VXNlcjMyOTgyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/329822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian", "html_url": "https://github.com/Julian", "followers_url": "https://api.github.com/users/Julian/followers", "following_url": "https://api.github.com/users/Julian/following{/other_user}", "gists_url": "https://api.github.com/users/Julian/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian/subscriptions", "organizations_url": "https://api.github.com/users/Julian/orgs", "repos_url": "https://api.github.com/users/Julian/repos", "events_url": "https://api.github.com/users/Julian/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-07T15:49:25Z", "updated_at": "2019-07-14T23:17:17Z", "closed_at": "2019-07-14T23:17:17Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/577", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/577/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/577/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/577/events", "html_url": "https://github.com/Julian/jsonschema/issues/577", "id": 464568892, "node_id": "MDU6SXNzdWU0NjQ1Njg4OTI=", "number": 577, "title": "Validating with additional types and the implicit validator", "user": {"login": "maggyero", "id": 33548838, "node_id": "MDQ6VXNlcjMzNTQ4ODM4", "avatar_url": "https://avatars0.githubusercontent.com/u/33548838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maggyero", "html_url": "https://github.com/maggyero", "followers_url": "https://api.github.com/users/maggyero/followers", "following_url": "https://api.github.com/users/maggyero/following{/other_user}", "gists_url": "https://api.github.com/users/maggyero/gists{/gist_id}", "starred_url": "https://api.github.com/users/maggyero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maggyero/subscriptions", "organizations_url": "https://api.github.com/users/maggyero/orgs", "repos_url": "https://api.github.com/users/maggyero/repos", "events_url": "https://api.github.com/users/maggyero/events{/privacy}", "received_events_url": "https://api.github.com/users/maggyero/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-05T10:12:10Z", "updated_at": "2019-07-20T20:39:56Z", "closed_at": "2019-07-20T20:39:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I used to validate with additional types with this code:\r\n\r\n```python\r\njsonschema.validate(instance, schema, types={\"array\": (list, tuple)})\r\n```\r\n\r\nNow I get a `DeprecationWarning` (with JSON Schema 3.0.1):\r\n\r\n> DeprecationWarning: The types argument is deprecated. Provide a type_checker to jsonschema.validators.extend instead.\r\n>   validator = cls(schema, *args, **kwargs)\r\n\r\nSo I have looked at the documentation to update my code, and I have found this  [example](https://python-jsonschema.readthedocs.io/en/stable/validate/#validating-with-additional-types) for validating with additional types the new way:\r\n\r\n```python\r\nclass MyInteger(object):\r\n    pass\r\n\r\ndef is_my_int(checker, instance):\r\n    return (\r\n        Draft3Validator.TYPE_CHECKER.is_type(instance, \"number\") or\r\n        isinstance(instance, MyInteger)\r\n    )\r\n\r\ntype_checker = Draft3Validator.TYPE_CHECKER.redefine(\"number\", is_my_int)\r\n\r\nCustomValidator = extend(Draft3Validator, type_checker=type_checker)\r\nvalidator = CustomValidator(schema={\"type\" : \"number\"})\r\n```\r\n\r\nIt seems that now I have to _specify the validator version explicitly_ (`Draft3Validator`). But I don't want to specify the version, I would like to use the implicit validator like in my code above. Is this currently possible with the new way?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/576", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/576/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/576/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/576/events", "html_url": "https://github.com/Julian/jsonschema/issues/576", "id": 464523109, "node_id": "MDU6SXNzdWU0NjQ1MjMxMDk=", "number": 576, "title": "Pattern rule does not work correctly.", "user": {"login": "alvassin", "id": 1497444, "node_id": "MDQ6VXNlcjE0OTc0NDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1497444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvassin", "html_url": "https://github.com/alvassin", "followers_url": "https://api.github.com/users/alvassin/followers", "following_url": "https://api.github.com/users/alvassin/following{/other_user}", "gists_url": "https://api.github.com/users/alvassin/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvassin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvassin/subscriptions", "organizations_url": "https://api.github.com/users/alvassin/orgs", "repos_url": "https://api.github.com/users/alvassin/repos", "events_url": "https://api.github.com/users/alvassin/events{/privacy}", "received_events_url": "https://api.github.com/users/alvassin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-05T08:24:03Z", "updated_at": "2019-07-05T14:17:09Z", "closed_at": "2019-07-05T14:17:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some reason, jsonschema does not handle pattern rule correctly.\r\n\r\n```\r\nfrom jsonschema import validate\r\n\r\nschema = {\r\n    \"type\" : \"object\",\r\n    \"properties\" : {\r\n        \"price\" : {\"type\" : \"string\", 'pattern': '^[a-z]+$'},\r\n    },\r\n}\r\n\r\n# Works\r\nvalidate(instance={ \"price\" : 'badstring\\n\\n'}, schema=schema)\r\n\r\n# Does not work\r\nvalidate(instance={ \"price\" : 'badstring\\n'}, schema=schema)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/575", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/575/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/575/events", "html_url": "https://github.com/Julian/jsonschema/issues/575", "id": 462486109, "node_id": "MDU6SXNzdWU0NjI0ODYxMDk=", "number": 575, "title": "`0`  should not be considered equal to `False`", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars1.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 241964, "node_id": "MDU6TGFiZWwyNDE5NjQ=", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-07-01T02:48:09Z", "updated_at": "2019-08-02T00:46:35Z", "closed_at": "2019-08-02T00:46:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm working on some schema canonicalisation and intersection logic for [`hypothesis-jsonschema`](https://github.com/Zac-HD/hypothesis-jsonschema), and encountered the surprising-to-me property that `jsonschema` *sometimes* considers `0 == False` (and similarly `1 == True`):\r\n\r\n```python\r\n# All of these pass:\r\nvalidate(0, {\"just\": False})            # 0 == False\r\nvalidate(False, {\"enum\": [0.0]})        # 0.0 == False\r\n# Fails, \"On instance: [0, 0]\", despite `unbool` logic\r\nvalidate([0, False], {\"uniqueItems\": True})\r\n```\r\n\r\n[According to the core spec](https://json-schema.org/latest/json-schema-core.html#rfc.section.4.2.3), instances are only equal if they are of the same type.\r\n\r\n(and there is only one number type in JSON, so `1 == 1.0`)\r\n\r\n~~The validation spec doesn't actually say anything about how value equality (ctrl-f \"equal\") should be defined, but I certainly found this surprising and the `uniqueItems` message convinced me to report it.~~\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/574", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/574/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/574/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/574/events", "html_url": "https://github.com/Julian/jsonschema/issues/574", "id": 461594498, "node_id": "MDU6SXNzdWU0NjE1OTQ0OTg=", "number": 574, "title": "ERROR: string indices must be integers, not unicode", "user": {"login": "i0bound", "id": 18262994, "node_id": "MDQ6VXNlcjE4MjYyOTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/18262994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/i0bound", "html_url": "https://github.com/i0bound", "followers_url": "https://api.github.com/users/i0bound/followers", "following_url": "https://api.github.com/users/i0bound/following{/other_user}", "gists_url": "https://api.github.com/users/i0bound/gists{/gist_id}", "starred_url": "https://api.github.com/users/i0bound/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/i0bound/subscriptions", "organizations_url": "https://api.github.com/users/i0bound/orgs", "repos_url": "https://api.github.com/users/i0bound/repos", "events_url": "https://api.github.com/users/i0bound/events{/privacy}", "received_events_url": "https://api.github.com/users/i0bound/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-27T15:23:16Z", "updated_at": "2019-06-29T18:02:36Z", "closed_at": "2019-06-29T18:02:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Great library, I've used it for a few simpler schema's, thanks!,  \r\n\r\nUnfortunately it choked unexpectedly on the attached schema. I have attached the schema (pns_firmware_A - from Brother International Corporation) along with a sample Python script (validate.py) and the json that I was trying to validate (Setting.json). The error returned is: \"ERROR: string indices must be integers, not unicode\".\r\n\r\nThe sample json validates with the Brother schema with no problems using https://www.jsonschemavalidator.net/\r\n\r\nNote: I had to add a txt extension to drag and drop the following files:\r\n\r\n[pns_firmware_A.py.txt](https://github.com/Julian/jsonschema/files/3335417/pns_firmware_A.py.txt)\r\n\r\n[Setting.json.txt](https://github.com/Julian/jsonschema/files/3335409/Setting.json.txt)\r\n\r\n[validate.py.txt](https://github.com/Julian/jsonschema/files/3335430/validate.py.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/573", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/573/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/573/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/573/events", "html_url": "https://github.com/Julian/jsonschema/issues/573", "id": 461514162, "node_id": "MDU6SXNzdWU0NjE1MTQxNjI=", "number": 573, "title": "howto generate a json schema from a json file?", "user": {"login": "rkanavath", "id": 15028741, "node_id": "MDQ6VXNlcjE1MDI4NzQx", "avatar_url": "https://avatars2.githubusercontent.com/u/15028741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkanavath", "html_url": "https://github.com/rkanavath", "followers_url": "https://api.github.com/users/rkanavath/followers", "following_url": "https://api.github.com/users/rkanavath/following{/other_user}", "gists_url": "https://api.github.com/users/rkanavath/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkanavath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkanavath/subscriptions", "organizations_url": "https://api.github.com/users/rkanavath/orgs", "repos_url": "https://api.github.com/users/rkanavath/repos", "events_url": "https://api.github.com/users/rkanavath/events{/privacy}", "received_events_url": "https://api.github.com/users/rkanavath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-27T12:57:52Z", "updated_at": "2019-06-27T12:58:45Z", "closed_at": "2019-06-27T12:58:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/572", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/572/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/572/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/572/events", "html_url": "https://github.com/Julian/jsonschema/issues/572", "id": 457985201, "node_id": "MDU6SXNzdWU0NTc5ODUyMDE=", "number": 572, "title": "unhashable definitions in schema", "user": {"login": "AntoineD", "id": 433696, "node_id": "MDQ6VXNlcjQzMzY5Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/433696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AntoineD", "html_url": "https://github.com/AntoineD", "followers_url": "https://api.github.com/users/AntoineD/followers", "following_url": "https://api.github.com/users/AntoineD/following{/other_user}", "gists_url": "https://api.github.com/users/AntoineD/gists{/gist_id}", "starred_url": "https://api.github.com/users/AntoineD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AntoineD/subscriptions", "organizations_url": "https://api.github.com/users/AntoineD/orgs", "repos_url": "https://api.github.com/users/AntoineD/repos", "events_url": "https://api.github.com/users/AntoineD/events{/privacy}", "received_events_url": "https://api.github.com/users/AntoineD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-19T12:30:32Z", "updated_at": "2019-06-19T12:42:50Z", "closed_at": "2019-06-19T12:42:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've created a schema with a `definitions` section, but jsonschema 3.0.1 cannot deal with it. Here is a reproducer :\r\n\r\nschema.json contains (from [here](http://json-schema.org/latest/json-schema-validation.html#rfc.section.9)):\r\n```\r\n{\r\n    \"type\": \"array\",\r\n    \"items\": { \"$ref\": \"#/definitions/positiveInteger\" },\r\n    \"definitions\": {\r\n        \"positiveInteger\": {\r\n            \"type\": \"integer\",\r\n            \"exclusiveMinimum\": 0\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTest code:\r\n```\r\nimport jsonschema\r\nimport json\r\nschema = json.load(open('schema.json'))\r\njsonschema.Draft7Validator({}, schema)\r\n\r\n```\r\n\r\nI get this exception:\r\n```\r\n  File \"/xxx/lib/python3.6/site-packages/jsonschema/validators.py\", line 276, in __init__\r\n    _generate_legacy_type_checks(types),\r\n  File \"/xxx/lib/python3.6/site-packages/jsonschema/validators.py\", line 83, in _generate_legacy_type_checks\r\n    definitions[typename] = gen_type_check(pytypes)\r\n  File \"/xxx/lib/python3.6/site-packages/jsonschema/validators.py\", line 71, in gen_type_check\r\n    pytypes = _utils.flatten(pytypes)\r\n  File \"/xxx/lib/python3.6/site-packages/jsonschema/_utils.py\", line 161, in flatten\r\n    types.add(thing)\r\nTypeError: unhashable type: 'dict'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/571", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/571/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/571/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/571/events", "html_url": "https://github.com/Julian/jsonschema/issues/571", "id": 457625496, "node_id": "MDU6SXNzdWU0NTc2MjU0OTY=", "number": 571, "title": "Inconsistency when value fails type and enum check", "user": {"login": "blakehilliard", "id": 25166376, "node_id": "MDQ6VXNlcjI1MTY2Mzc2", "avatar_url": "https://avatars3.githubusercontent.com/u/25166376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blakehilliard", "html_url": "https://github.com/blakehilliard", "followers_url": "https://api.github.com/users/blakehilliard/followers", "following_url": "https://api.github.com/users/blakehilliard/following{/other_user}", "gists_url": "https://api.github.com/users/blakehilliard/gists{/gist_id}", "starred_url": "https://api.github.com/users/blakehilliard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blakehilliard/subscriptions", "organizations_url": "https://api.github.com/users/blakehilliard/orgs", "repos_url": "https://api.github.com/users/blakehilliard/repos", "events_url": "https://api.github.com/users/blakehilliard/events{/privacy}", "received_events_url": "https://api.github.com/users/blakehilliard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-18T18:15:17Z", "updated_at": "2019-06-19T13:51:40Z", "closed_at": "2019-06-19T13:51:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider this program:\r\n\r\n```\r\n$ cat ~/json-schema-test.py \r\nimport jsonschema\r\n\r\nschema = {\r\n    'enum': ['3', '5'],\r\n    'type': 'string',\r\n}\r\n\r\nfailed_validators = {}\r\nfor _ in range(100):\r\n    checker = jsonschema.FormatChecker()\r\n    try:\r\n        jsonschema.validate(None, schema, format_checker=checker)\r\n    except jsonschema.exceptions.ValidationError as exc:\r\n        if exc.validator not in failed_validators:\r\n            failed_validators[exc.validator] = 0\r\n        failed_validators[exc.validator] += 1\r\n\r\nprint(failed_validators)\r\n```\r\n\r\nI would expect it to always fail validating the _type_ of the value rather than iterate over the enum before doing the type check. But if you run it, it sometimes rejects None for having an invalid type and sometimes for not being in the enum list. What's even stranger, it varies across times you execute this script, not within a single execution:\r\n\r\n```\r\n$ for i in {1..10} ; do python3 ~/json-schema-test.py ; done\r\n{'type': 100}\r\n{'type': 100}\r\n{'enum': 100}\r\n{'enum': 100}\r\n{'enum': 100}\r\n{'enum': 100}\r\n{'type': 100}\r\n{'enum': 100}\r\n{'enum': 100}\r\n{'enum': 100}\r\n```\r\n\r\nVersion details:\r\n\r\n```\r\n[mfw]$ python3\r\nPython 3.5.3 (default, Apr 28 2018, 10:34:28) \r\n[GCC 4.8.5] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import jsonschema\r\n>>> jsonschema.__version__\r\n'3.0.1'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/570", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/570/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/570/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/570/events", "html_url": "https://github.com/Julian/jsonschema/issues/570", "id": 456929013, "node_id": "MDU6SXNzdWU0NTY5MjkwMTM=", "number": 570, "title": "\"RefResolutionError\" exception raised when resolving \"$ref\"", "user": {"login": "warner121", "id": 2829268, "node_id": "MDQ6VXNlcjI4MjkyNjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2829268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/warner121", "html_url": "https://github.com/warner121", "followers_url": "https://api.github.com/users/warner121/followers", "following_url": "https://api.github.com/users/warner121/following{/other_user}", "gists_url": "https://api.github.com/users/warner121/gists{/gist_id}", "starred_url": "https://api.github.com/users/warner121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/warner121/subscriptions", "organizations_url": "https://api.github.com/users/warner121/orgs", "repos_url": "https://api.github.com/users/warner121/repos", "events_url": "https://api.github.com/users/warner121/events{/privacy}", "received_events_url": "https://api.github.com/users/warner121/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 241964, "node_id": "MDU6TGFiZWwyNDE5NjQ=", "url": "https://api.github.com/repos/Julian/jsonschema/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-06-17T13:16:31Z", "updated_at": "2020-04-06T06:57:19Z", "closed_at": "2019-09-08T23:51:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Taking the example from the json-schema documentation on structuring complex schema: [https://json-schema.org/understanding-json-schema/structuring.html](url).\r\n\r\nI create a file **address_pass.json** where address is defined internally:\r\n\r\n```\r\n{\r\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n\r\n  \"definitions\": {\r\n    \"address\": {\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"street_address\": { \"type\": \"string\" },\r\n        \"city\":           { \"type\": \"string\" },\r\n        \"state\":          { \"type\": \"string\" }\r\n      },\r\n      \"required\": [\"street_address\", \"city\", \"state\"]\r\n    }\r\n  },\r\n\r\n  \"type\": \"object\",\r\n\r\n  \"properties\": {\r\n    \"billing_address\": { \"$ref\": \"#/definitions/address\" },\r\n    \"shipping_address\": { \"$ref\": \"#/definitions/address\" }\r\n  }\r\n}\r\n```\r\nThe code below illustrates this validates the example instance:\r\n```python\r\nimport json\r\nfrom jsonschema import validate\r\n\r\ninstance = {\r\n  \"shipping_address\": {\r\n    \"street_address\": \"1600 Pennsylvania Avenue NW\",\r\n    \"city\": \"Washington\",\r\n    \"state\": \"DC\"\r\n  },\r\n  \"billing_address\": {\r\n    \"street_address\": \"1st Street SE\",\r\n    \"city\": \"Washington\",\r\n    \"state\": \"DC\"\r\n  }\r\n}\r\n\r\nwith open('address_pass.json') as json_data:\r\n    schema = json.load(json_data)\r\n    json_data.close()\r\n    \r\nvalidate(instance=instance, schema=schema)\r\n```\r\nAll good. Now, the example does not define the content of **definitions.json** but I believe it should look like this:\r\n```\r\n{\r\n  \"address\": {\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n      \"street_address\": { \"type\": \"string\" },\r\n      \"city\":           { \"type\": \"string\" },\r\n      \"state\":          { \"type\": \"string\" }\r\n    },\r\n    \"required\": [\"street_address\", \"city\", \"state\"]\r\n  }\r\n}\r\n```\r\nWith corresponding reference from within **address_fail.json** as below:\r\n```\r\n{\r\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n\r\n  \"definitions\": {\r\n    \"address\": {\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"street_address\": { \"type\": \"string\" },\r\n        \"city\":           { \"type\": \"string\" },\r\n        \"state\":          { \"type\": \"string\" }\r\n      },\r\n      \"required\": [\"street_address\", \"city\", \"state\"]\r\n    }\r\n  },\r\n\r\n  \"type\": \"object\",\r\n\r\n  \"properties\": {\r\n    \"billing_address\": { \"$ref\": \"definitions.json#/address\" },\r\n    \"shipping_address\": { \"$ref\": \"definitions.json#/address\" }\r\n  }\r\n}\r\n```\r\nHowever, the same code as above now fails with the RefResolutionError reported above:\r\n```python\r\nimport json\r\nfrom jsonschema import validate\r\n\r\ninstance = {\r\n  \"shipping_address\": {\r\n    \"street_address\": \"1600 Pennsylvania Avenue NW\",\r\n    \"city\": \"Washington\",\r\n    \"state\": \"DC\"\r\n  },\r\n  \"billing_address\": {\r\n    \"street_address\": \"1st Street SE\",\r\n    \"city\": \"Washington\",\r\n    \"state\": \"DC\"\r\n  }\r\n}\r\n\r\nwith open('address_fail.json') as json_data:\r\n    schema = json.load(json_data)\r\n    json_data.close()\r\n    \r\nvalidate(instance=instance, schema=schema)\r\n```\r\nFurthermore, replacing ```$ref``` with ```file``` and a full path to **definitions.json**  illustrates the external reference does work. So the issue seems to be simply in locating the file.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/567", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/567/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/567/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/567/events", "html_url": "https://github.com/Julian/jsonschema/issues/567", "id": 452818079, "node_id": "MDU6SXNzdWU0NTI4MTgwNzk=", "number": 567, "title": "does jsonschema support verifying optional field in json?", "user": {"login": "naijim", "id": 1352717, "node_id": "MDQ6VXNlcjEzNTI3MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1352717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naijim", "html_url": "https://github.com/naijim", "followers_url": "https://api.github.com/users/naijim/followers", "following_url": "https://api.github.com/users/naijim/following{/other_user}", "gists_url": "https://api.github.com/users/naijim/gists{/gist_id}", "starred_url": "https://api.github.com/users/naijim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naijim/subscriptions", "organizations_url": "https://api.github.com/users/naijim/orgs", "repos_url": "https://api.github.com/users/naijim/repos", "events_url": "https://api.github.com/users/naijim/events{/privacy}", "received_events_url": "https://api.github.com/users/naijim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-06T03:47:49Z", "updated_at": "2019-06-06T06:04:51Z", "closed_at": "2019-06-06T06:04:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to figure out whether jsonschema supporting verifying optional field in json or not. I tried the following code:\r\n\r\n```\r\nfrom jsonschema import validate\r\n\r\n# your code here\r\nschema = {\r\n    \"type\" : \"object\",\r\n    \"properties\" : {\r\n        \"price\" : {\"type\" : \"number\", \"required\": false},\r\n        \"name\" : {\"type\" : \"string\"},\r\n    },\r\n}\r\n\r\nvalidate({\"name\" : \"Eggs\", \"price\" : 123.123}, schema)\r\n```\r\n\r\nI have this error:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nNameError                                 Traceback (most recent call last)\r\n<ipython-input-6-6a64e78dd26e> in <module>\r\n      5     \"type\" : \"object\",\r\n      6     \"properties\" : {\r\n----> 7         \"price\" : {\"type\" : \"number\", \"required\": false},\r\n      8         \"name\" : {\"type\" : \"string\"},\r\n      9     },\r\n\r\nNameError: name 'false' is not defined\r\n```\r\n\r\n\r\nSo this feature isn't supported yet?\r\nI found related question [here](https://stackoverflow.com/questions/16204871/what-is-the-difference-between-required-vs-optional-in-json-schema)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/566", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/566/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/566/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/566/events", "html_url": "https://github.com/Julian/jsonschema/issues/566", "id": 451855552, "node_id": "MDU6SXNzdWU0NTE4NTU1NTI=", "number": 566, "title": "Specify setuptools version", "user": {"login": "aeby", "id": 46198, "node_id": "MDQ6VXNlcjQ2MTk4", "avatar_url": "https://avatars0.githubusercontent.com/u/46198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aeby", "html_url": "https://github.com/aeby", "followers_url": "https://api.github.com/users/aeby/followers", "following_url": "https://api.github.com/users/aeby/following{/other_user}", "gists_url": "https://api.github.com/users/aeby/gists{/gist_id}", "starred_url": "https://api.github.com/users/aeby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aeby/subscriptions", "organizations_url": "https://api.github.com/users/aeby/orgs", "repos_url": "https://api.github.com/users/aeby/repos", "events_url": "https://api.github.com/users/aeby/events{/privacy}", "received_events_url": "https://api.github.com/users/aeby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-04T08:11:09Z", "updated_at": "2019-06-04T14:09:08Z", "closed_at": "2019-06-04T14:09:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "In https://github.com/Julian/jsonschema/issues/510 the missing `setuptools` dependency was added without a specific version requirement. This is problematic if one uses a requirement file with hashes and results in this error:\r\n\r\n```bash\r\nERROR: In --require-hashes mode, all requirements must have their versions pinned with ==. These do not:\r\n    setuptools from https://files.pythonhosted.org/...snip...\r\n(from jsonschema==3.0.1->-r requirments.txt)\r\n```\r\n\r\nI do not know what would be a sensible version but as this was released in https://github.com/Julian/jsonschema/releases/tag/v3.0.0a4 it maybe makes sense to use the current version of `setuptools` at this point in time? This would be `setuptools>=40.6.3`.\r\nI'm happy to create a PR once we decide on the version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/564", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/564/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/564/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/564/events", "html_url": "https://github.com/Julian/jsonschema/issues/564", "id": 446055310, "node_id": "MDU6SXNzdWU0NDYwNTUzMTA=", "number": 564, "title": "Set error messages", "user": {"login": "hound672", "id": 10366926, "node_id": "MDQ6VXNlcjEwMzY2OTI2", "avatar_url": "https://avatars1.githubusercontent.com/u/10366926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hound672", "html_url": "https://github.com/hound672", "followers_url": "https://api.github.com/users/hound672/followers", "following_url": "https://api.github.com/users/hound672/following{/other_user}", "gists_url": "https://api.github.com/users/hound672/gists{/gist_id}", "starred_url": "https://api.github.com/users/hound672/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hound672/subscriptions", "organizations_url": "https://api.github.com/users/hound672/orgs", "repos_url": "https://api.github.com/users/hound672/repos", "events_url": "https://api.github.com/users/hound672/events{/privacy}", "received_events_url": "https://api.github.com/users/hound672/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-20T11:04:14Z", "updated_at": "2019-05-23T18:19:54Z", "closed_at": "2019-05-23T18:19:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, It's question just for discussion.\r\nFor example, I have a multilanguage application. And I want to make all translation on clientside (JS, React etc). In that case I wouldn't like to get human-readable error messages from Jsonschema validation, instead of it I'd rather get some code errors, like: \r\n\r\n> %FIELD_NAME% ERR_DOES_NOT_EXIST\r\n\r\nI would try to make some stuff in this lib. \r\nDoes it make sense?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Julian/jsonschema/issues/563", "repository_url": "https://api.github.com/repos/Julian/jsonschema", "labels_url": "https://api.github.com/repos/Julian/jsonschema/issues/563/labels{/name}", "comments_url": "https://api.github.com/repos/Julian/jsonschema/issues/563/comments", "events_url": "https://api.github.com/repos/Julian/jsonschema/issues/563/events", "html_url": "https://github.com/Julian/jsonschema/issues/563", "id": 446035945, "node_id": "MDU6SXNzdWU0NDYwMzU5NDU=", "number": 563, "title": "string but accepting numbers ", "user": {"login": "hdhakernk", "id": 23401738, "node_id": "MDQ6VXNlcjIzNDAxNzM4", "avatar_url": "https://avatars3.githubusercontent.com/u/23401738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hdhakernk", "html_url": "https://github.com/hdhakernk", "followers_url": "https://api.github.com/users/hdhakernk/followers", "following_url": "https://api.github.com/users/hdhakernk/following{/other_user}", "gists_url": "https://api.github.com/users/hdhakernk/gists{/gist_id}", "starred_url": "https://api.github.com/users/hdhakernk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hdhakernk/subscriptions", "organizations_url": "https://api.github.com/users/hdhakernk/orgs", "repos_url": "https://api.github.com/users/hdhakernk/repos", "events_url": "https://api.github.com/users/hdhakernk/events{/privacy}", "received_events_url": "https://api.github.com/users/hdhakernk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-20T10:18:13Z", "updated_at": "2019-05-23T18:07:50Z", "closed_at": "2019-05-23T18:07:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "i have added validation in schema as \r\n```\r\n\"name\": {\r\n        \"type\": \"string\",\r\n        \"minLength\": 5,\r\n         \"maxLength\": 30\r\n},\r\n```\r\nbut it also accepting numbers and other formats like number and bool. \r\n                ", "performed_via_github_app": null, "score": 1.0}]}