{"total_count": 70, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/alecthomas/injector/issues/150", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/150/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/150/events", "html_url": "https://github.com/alecthomas/injector/issues/150", "id": 655999034, "node_id": "MDU6SXNzdWU2NTU5OTkwMzQ=", "number": 150, "title": "Docs for using Injector in unit tests say to use deprecated and removed decorator @with_injector", "user": {"login": "outofthecave", "id": 4209873, "node_id": "MDQ6VXNlcjQyMDk4NzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4209873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/outofthecave", "html_url": "https://github.com/outofthecave", "followers_url": "https://api.github.com/users/outofthecave/followers", "following_url": "https://api.github.com/users/outofthecave/following{/other_user}", "gists_url": "https://api.github.com/users/outofthecave/gists{/gist_id}", "starred_url": "https://api.github.com/users/outofthecave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/outofthecave/subscriptions", "organizations_url": "https://api.github.com/users/outofthecave/orgs", "repos_url": "https://api.github.com/users/outofthecave/repos", "events_url": "https://api.github.com/users/outofthecave/events{/privacy}", "received_events_url": "https://api.github.com/users/outofthecave/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-13T16:55:33Z", "updated_at": "2020-07-13T17:18:37Z", "closed_at": "2020-07-13T16:58:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation page \"Testing with Injector\" (https://github.com/alecthomas/injector/blob/master/docs/testing.rst) says to use the decorator `@with_injector`, which was deprecated in version 0.13.4 and removed in version 0.16.0.  The code snippet that is provided in the documentation does not work in version 0.16.0 and higher.\r\n\r\nI was unable to find any official documentation explaining what to use instead for unit tests.  The changelog for version 0.13.4 only states, \"There\u2019s no one migration path recommended, it depends on a particular case.\"  But it does not say what exactly it depends on or what to do in various typical use cases.  Therefore, this statement is not helpful to new users of the Injector library.\r\n\r\nPlease remove the misleading documentation and add more detailed documentation on how to use the latest version of Injector in unit tests.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/148", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/148/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/148/events", "html_url": "https://github.com/alecthomas/injector/issues/148", "id": 645797631, "node_id": "MDU6SXNzdWU2NDU3OTc2MzE=", "number": 148, "title": "Binding NewType classes without mypy warnings?", "user": {"login": "davidparsson", "id": 325325, "node_id": "MDQ6VXNlcjMyNTMyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/325325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidparsson", "html_url": "https://github.com/davidparsson", "followers_url": "https://api.github.com/users/davidparsson/followers", "following_url": "https://api.github.com/users/davidparsson/following{/other_user}", "gists_url": "https://api.github.com/users/davidparsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidparsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidparsson/subscriptions", "organizations_url": "https://api.github.com/users/davidparsson/orgs", "repos_url": "https://api.github.com/users/davidparsson/repos", "events_url": "https://api.github.com/users/davidparsson/events{/privacy}", "received_events_url": "https://api.github.com/users/davidparsson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-25T19:25:13Z", "updated_at": "2020-06-26T15:55:39Z", "closed_at": "2020-06-26T15:41:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is it possible to somehow bind a `NewType` to a particular class without casting?\r\n\r\nConsider this:\r\n```python\r\nMyType = NewType('MyType', SomeClass)\r\ninjector.binder.bind(MyType, to=SomeClass)  # Error\r\n```\r\n\r\nThat gives the following error:\r\n```\r\nerror: Argument \"to\" to \"bind\" of \"Binder\" has incompatible type \"Type[SomeClass]\"; expected \"Union[MyType, Callable[..., MyType], Provider[MyType]]\"\r\n```\r\n\r\nThis might be a mypy issue, but I haven't found a way around it without casting. Do you know of any?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/146", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/146/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/146/events", "html_url": "https://github.com/alecthomas/injector/issues/146", "id": 642989508, "node_id": "MDU6SXNzdWU2NDI5ODk1MDg=", "number": 146, "title": "I'm not able to test my injectable class", "user": {"login": "mayermatheus", "id": 13408982, "node_id": "MDQ6VXNlcjEzNDA4OTgy", "avatar_url": "https://avatars3.githubusercontent.com/u/13408982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mayermatheus", "html_url": "https://github.com/mayermatheus", "followers_url": "https://api.github.com/users/mayermatheus/followers", "following_url": "https://api.github.com/users/mayermatheus/following{/other_user}", "gists_url": "https://api.github.com/users/mayermatheus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mayermatheus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mayermatheus/subscriptions", "organizations_url": "https://api.github.com/users/mayermatheus/orgs", "repos_url": "https://api.github.com/users/mayermatheus/repos", "events_url": "https://api.github.com/users/mayermatheus/events{/privacy}", "received_events_url": "https://api.github.com/users/mayermatheus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-22T11:28:16Z", "updated_at": "2020-07-13T17:01:14Z", "closed_at": "2020-06-22T12:36:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Versions:\r\n- injector==0.18.3\r\n- Flask-Injector==0.12.3\r\n- python == 3.6.9\r\n\r\nProblem:\r\nI am looking to test a service which has the inject annotation in its constructor to be injectable. However, I am not able to test it. According to the documentation I need to do this:\r\nimport unittest\r\nfrom injector import Module, with_injector, inject\r\n\r\n```python\r\nclass UsernameModule(Module):\r\n    def configure(self, binder):\r\n        binder.bind(str, 'Maria')\r\n\r\nclass TestSomethingClass(unittest.TestCase):\r\n    @with_injector(UsernameModule())\r\n    def setUp(self):\r\n        pass\r\n\r\n    @inject\r\n    def test_username(self, username: str):\r\n        self.assertEqual(username, 'Maria')\r\n```\r\n\r\nBut copying and pasting this code without touching anything, gives the following problem:\r\n![image](https://user-images.githubusercontent.com/13408982/85282516-41aef080-b462-11ea-96d2-a1046a716fbb.png)\r\n\r\n\r\nCan anybody help me?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/144", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/144/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/144/events", "html_url": "https://github.com/alecthomas/injector/issues/144", "id": 610931376, "node_id": "MDU6SXNzdWU2MTA5MzEzNzY=", "number": 144, "title": "\"from injector import Key\" fails", "user": {"login": "garyrob", "id": 1130621, "node_id": "MDQ6VXNlcjExMzA2MjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1130621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garyrob", "html_url": "https://github.com/garyrob", "followers_url": "https://api.github.com/users/garyrob/followers", "following_url": "https://api.github.com/users/garyrob/following{/other_user}", "gists_url": "https://api.github.com/users/garyrob/gists{/gist_id}", "starred_url": "https://api.github.com/users/garyrob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garyrob/subscriptions", "organizations_url": "https://api.github.com/users/garyrob/orgs", "repos_url": "https://api.github.com/users/garyrob/repos", "events_url": "https://api.github.com/users/garyrob/events{/privacy}", "received_events_url": "https://api.github.com/users/garyrob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-01T19:41:01Z", "updated_at": "2020-05-23T10:15:05Z", "closed_at": "2020-05-23T10:15:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "The Keys section on the Terminology page contains the line:\r\n\r\n`from injector import Key`\r\n\r\nHowever, when I run that line in the terminal, I get an error: \"ImportError: cannot import name 'Key' from 'injector'\". Other imports such as\r\n\r\n`from injector import InstanceProvider`\r\n\r\nwork fine in my setup.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/142", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/142/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/142/events", "html_url": "https://github.com/alecthomas/injector/issues/142", "id": 588298532, "node_id": "MDU6SXNzdWU1ODgyOTg1MzI=", "number": 142, "title": "Working Type Alias Example", "user": {"login": "tadas-subonis", "id": 247218, "node_id": "MDQ6VXNlcjI0NzIxOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/247218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tadas-subonis", "html_url": "https://github.com/tadas-subonis", "followers_url": "https://api.github.com/users/tadas-subonis/followers", "following_url": "https://api.github.com/users/tadas-subonis/following{/other_user}", "gists_url": "https://api.github.com/users/tadas-subonis/gists{/gist_id}", "starred_url": "https://api.github.com/users/tadas-subonis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tadas-subonis/subscriptions", "organizations_url": "https://api.github.com/users/tadas-subonis/orgs", "repos_url": "https://api.github.com/users/tadas-subonis/repos", "events_url": "https://api.github.com/users/tadas-subonis/events{/privacy}", "received_events_url": "https://api.github.com/users/tadas-subonis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-26T10:05:51Z", "updated_at": "2020-03-26T10:10:28Z", "closed_at": "2020-03-26T10:10:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nsince Key was recently removed, it is not entirely clear, how to reach the same functionality using type aliases. I would like to create two different instances of the class (with different parameters), and inject them using those aliases.\r\n\r\nDoes anybody have a working example? Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/135", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/135/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/135/events", "html_url": "https://github.com/alecthomas/injector/issues/135", "id": 559040579, "node_id": "MDU6SXNzdWU1NTkwNDA1Nzk=", "number": 135, "title": "Compatibility with python 3.5.3", "user": {"login": "JGiard", "id": 1167353, "node_id": "MDQ6VXNlcjExNjczNTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1167353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JGiard", "html_url": "https://github.com/JGiard", "followers_url": "https://api.github.com/users/JGiard/followers", "following_url": "https://api.github.com/users/JGiard/following{/other_user}", "gists_url": "https://api.github.com/users/JGiard/gists{/gist_id}", "starred_url": "https://api.github.com/users/JGiard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JGiard/subscriptions", "organizations_url": "https://api.github.com/users/JGiard/orgs", "repos_url": "https://api.github.com/users/JGiard/repos", "events_url": "https://api.github.com/users/JGiard/events{/privacy}", "received_events_url": "https://api.github.com/users/JGiard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-03T12:05:02Z", "updated_at": "2020-02-03T14:37:26Z", "closed_at": "2020-02-03T14:34:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nThere is a compatibility issue with python 3.5.3.\r\nWhen I try to inject classes with no `__init__` function I get the following error :\r\n`AttributeError: 'method-wrapper' object has no attribute '__func__'`\r\n\r\nI traced it back to calling\r\n```python\r\ntyping.get_type_hints(object.__init__)\r\n```\r\n\r\nIt looks like the fix : https://github.com/python/typing/pull/368\r\nwas release with python 3.5.4, since then it is hardcoded to return an empty dict.\r\n\r\nI understand if you would not want to add a workaround for an old python version, then the readme should be updated to specify the minimum version.\r\n`Injector works with CPython 3.5+ and PyPy 3 implementing Python 3.5+.`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/132", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/132/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/132/events", "html_url": "https://github.com/alecthomas/injector/issues/132", "id": 552958056, "node_id": "MDU6SXNzdWU1NTI5NTgwNTY=", "number": 132, "title": "Question about providers", "user": {"login": "JGiard", "id": 1167353, "node_id": "MDQ6VXNlcjExNjczNTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1167353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JGiard", "html_url": "https://github.com/JGiard", "followers_url": "https://api.github.com/users/JGiard/followers", "following_url": "https://api.github.com/users/JGiard/following{/other_user}", "gists_url": "https://api.github.com/users/JGiard/gists{/gist_id}", "starred_url": "https://api.github.com/users/JGiard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JGiard/subscriptions", "organizations_url": "https://api.github.com/users/JGiard/orgs", "repos_url": "https://api.github.com/users/JGiard/repos", "events_url": "https://api.github.com/users/JGiard/events{/privacy}", "received_events_url": "https://api.github.com/users/JGiard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-21T15:40:55Z", "updated_at": "2020-01-22T08:45:08Z", "closed_at": "2020-01-22T08:45:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm currently planning a migration to `injector` from a custom package that I wrote (https://github.com/JGiard/Pynject),\r\nand I have a question about how to best address a specific case :\r\nI used to be able get objects injected into my providers like\r\n```python\r\nclass FooProvider(Provider):\r\n    @inject\r\n    def __init__(bar: Bar):\r\n        self.bar = bar\r\n\r\n    def get(self) -> Foo:\r\n        return Foo(do_stuff_with_bar(self.bar))\r\n```\r\n\r\nAs I understand that's not possible with this injector, and I need to use something like the `@provider` annotation on modules\r\n\r\n```python\r\nclass FooModule(Module):\r\n    @provider\r\n    def get_foo(self, bar: Bar) -> Foo:\r\n        return Foo(do_stuff_with_bar(self.bar))\r\n```\r\n\r\nHowever I have a bunch of those, and I'd rather not put them all in one module. And having to pass them all to the injector constructor seems prone to forgetting one.\r\nI haven't found documentation about nesting modules, but it looks like you can just `install` submodules like in guice\r\n```python\r\nclass MyModule(Module):\r\n    def configure(self, binder: Binder):\r\n        binder.bind(Bar, to=Bar())\r\n        binder.install(FooModule) # will bind Foo to get_foo()\r\n```\r\nIs this something correct to write ?\r\nThank you if you take time to read this and give me some feedback.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/131", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/131/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/131/events", "html_url": "https://github.com/alecthomas/injector/issues/131", "id": 535600372, "node_id": "MDU6SXNzdWU1MzU2MDAzNzI=", "number": 131, "title": "Missing assert in test_forward_references_in_annotations_are_handled()", "user": {"login": "eugenhu", "id": 16740189, "node_id": "MDQ6VXNlcjE2NzQwMTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/16740189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eugenhu", "html_url": "https://github.com/eugenhu", "followers_url": "https://api.github.com/users/eugenhu/followers", "following_url": "https://api.github.com/users/eugenhu/following{/other_user}", "gists_url": "https://api.github.com/users/eugenhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/eugenhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eugenhu/subscriptions", "organizations_url": "https://api.github.com/users/eugenhu/orgs", "repos_url": "https://api.github.com/users/eugenhu/repos", "events_url": "https://api.github.com/users/eugenhu/events{/privacy}", "received_events_url": "https://api.github.com/users/eugenhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-10T09:27:37Z", "updated_at": "2019-12-14T18:08:37Z", "closed_at": "2019-12-14T18:08:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think there is an assert statement missing on Line 1197,\r\nhttps://github.com/alecthomas/injector/blob/f529eec73d7e52d253735247dc770b680dea3898/injector_test.py#L1177-L1199", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/130", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/130/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/130/events", "html_url": "https://github.com/alecthomas/injector/issues/130", "id": 535598022, "node_id": "MDU6SXNzdWU1MzU1OTgwMjI=", "number": 130, "title": "@provider decorator does not support forward references", "user": {"login": "eugenhu", "id": 16740189, "node_id": "MDQ6VXNlcjE2NzQwMTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/16740189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eugenhu", "html_url": "https://github.com/eugenhu", "followers_url": "https://api.github.com/users/eugenhu/followers", "following_url": "https://api.github.com/users/eugenhu/following{/other_user}", "gists_url": "https://api.github.com/users/eugenhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/eugenhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eugenhu/subscriptions", "organizations_url": "https://api.github.com/users/eugenhu/orgs", "repos_url": "https://api.github.com/users/eugenhu/repos", "events_url": "https://api.github.com/users/eugenhu/events{/privacy}", "received_events_url": "https://api.github.com/users/eugenhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-10T09:23:20Z", "updated_at": "2019-12-14T18:31:54Z", "closed_at": "2019-12-14T18:08:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running the following example (I am using Python 3.5.7),\r\n```python\r\nfrom injector import Injector, Module, inject, provider\r\n\r\n\r\nclass MyModule(Module):\r\n    @provider\r\n    def provide(self) -> 'X':\r\n        return X('hello')\r\n\r\n\r\n@inject\r\ndef fun(s: 'X') -> 'X':\r\n    return s\r\n\r\n\r\nclass X:\r\n    def __init__(self, message: str) -> None:\r\n        self.message = message\r\n\r\n\r\ninjector = Injector(modules=[MyModule], auto_bind=False)\r\nprint(injector.call_with_injection(fun).message)\r\n```\r\n\r\nI get an `UnsatisfiedRequirement` error. Rearranging to avoid forward references fixes this.\r\n\r\nI think this is because `_mark_provider_function()`\r\n\r\nhttps://github.com/alecthomas/injector/blob/f529eec73d7e52d253735247dc770b680dea3898/injector/__init__.py#L1165-L1176\r\n\r\nuses `inspector.getfullargspec()` to determine the return type, which I don't think resolves string literal annotations.\r\n\r\nWe could replace line 1167 with\r\n```python\r\nannotations = get_type_hints(function)\r\n```\r\nbut running the example again we get,\r\n```\r\nNameError: name 'X' is not defined\r\n```\r\nwhich I think is because the forward reference is trying to be resolved by the `@provider` decorator before `X` is defined.\r\n\r\nI don't know if there is an easy fix to this. One idea is to change the implementation of `_mark_provider_function()` to\r\n```python\r\ndef _mark_provider_function(function: Callable, *, allow_multi: bool) -> None:\r\n    if not allow_multi:\r\n        function.__is_provider__ = 'provider'\r\n    else:\r\n        function.__is_provider__ = 'multiprovider'\r\n```\r\nand then move the original `Binding` creating logic into `Module.__call__()`.\r\n\r\nA downside to this is that the \"Function needs to be decorated with a multiprovider\" error won't be raised until when the module is being configured.\r\n\r\nAlternatively, maybe if `get_type_hints(function)` fails, we could set `function.__binding__` to `'deferred'` (and then try creating the `Binding` object when the module is configured) and have some way of flagging the provider as a multiprovider.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/129", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/129/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/129/events", "html_url": "https://github.com/alecthomas/injector/issues/129", "id": 534536147, "node_id": "MDU6SXNzdWU1MzQ1MzYxNDc=", "number": 129, "title": "Unhelpful UnsatisfiedRequirement error message", "user": {"login": "eugenhu", "id": 16740189, "node_id": "MDQ6VXNlcjE2NzQwMTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/16740189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eugenhu", "html_url": "https://github.com/eugenhu", "followers_url": "https://api.github.com/users/eugenhu/followers", "following_url": "https://api.github.com/users/eugenhu/following{/other_user}", "gists_url": "https://api.github.com/users/eugenhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/eugenhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eugenhu/subscriptions", "organizations_url": "https://api.github.com/users/eugenhu/orgs", "repos_url": "https://api.github.com/users/eugenhu/repos", "events_url": "https://api.github.com/users/eugenhu/events{/privacy}", "received_events_url": "https://api.github.com/users/eugenhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-08T12:41:08Z", "updated_at": "2019-12-14T18:32:14Z", "closed_at": "2019-12-09T23:01:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Whenever there is an unsatisfied requirement, I see the message,\r\n```\r\ninjector.UnsatisfiedRequirement: <exception str() failed>\r\n```\r\nI am using Python 3.5.7.\r\n\r\nI think the cause of this is\r\nhttps://github.com/alecthomas/injector/blob/a461f722adcf8e23f0fdd4e122f101029a74877c/injector/__init__.py#L585\r\nwhich creates a new `UnsatisfiedRequirement` object with only one argument, but the `__str__()` function\r\nhttps://github.com/alecthomas/injector/blob/a461f722adcf8e23f0fdd4e122f101029a74877c/injector/__init__.py#L181-L186\r\nutilises `self.args[0]` and `self.args[1]`, which causes an exception.\r\n\r\nI'm not sure what `self.args[0]` and `self.args[1]` are meant to represent but modifying line 585 to\r\n```python\r\nraise UnsatisfiedRequirement(None, interface)\r\n```\r\nseems to output a sensible message when the error is thrown.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/128", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/128/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/128/events", "html_url": "https://github.com/alecthomas/injector/issues/128", "id": 534535015, "node_id": "MDU6SXNzdWU1MzQ1MzUwMTU=", "number": 128, "title": "Cannot inject dependency which is a subclass of a subscripted type", "user": {"login": "eugenhu", "id": 16740189, "node_id": "MDQ6VXNlcjE2NzQwMTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/16740189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eugenhu", "html_url": "https://github.com/eugenhu", "followers_url": "https://api.github.com/users/eugenhu/followers", "following_url": "https://api.github.com/users/eugenhu/following{/other_user}", "gists_url": "https://api.github.com/users/eugenhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/eugenhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eugenhu/subscriptions", "organizations_url": "https://api.github.com/users/eugenhu/orgs", "repos_url": "https://api.github.com/users/eugenhu/repos", "events_url": "https://api.github.com/users/eugenhu/events{/privacy}", "received_events_url": "https://api.github.com/users/eugenhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-08T12:30:46Z", "updated_at": "2019-12-10T01:30:04Z", "closed_at": "2019-12-09T22:48:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running the example code below,\r\n\r\n```python\r\nfrom typing import Sequence\r\nfrom injector import inject, Injector\r\n\r\n\r\nclass FibonacciSequence(Sequence[int]):\r\n    def __init__(self, n_terms: int = 10) -> None:\r\n        self._n_terms = n_terms\r\n\r\n    def __getitem__(self, i: int) -> int:\r\n        if i >= self._n_terms: raise IndexError\r\n\r\n        if i == 0: return 0\r\n        if i == 1: return 1\r\n        if i >= 2: return self[i-2] + self[i-1]\r\n\r\n    def __len__(self) -> int:\r\n        return self._n_terms\r\n\r\n\r\n# Test injecting FibonacciSequence dependency\r\n\r\n@inject\r\ndef main(sequence: FibonacciSequence) -> None:\r\n    print(tuple(sequence))\r\n\r\n\r\ninjector = Injector()\r\ninjector.call_with_injection(main)\r\n```\r\n\r\nI get the following error,\r\n\r\n```\r\nTraceback (most recent call last):\r\n  ...\r\n  File \".../python3.5/site-packages/injector/__init__.py\", line 1072, in _infer_injected_bindings\r\n    v, metadata = v.__origin__, v.__metadata__\r\nAttributeError: type object 'FibonacciSequence' has no attribute '__metadata__'\r\n```\r\n\r\nI ran this on Python 3.5.7.\r\n\r\nI think the cause of this issue is `_is_specialization(v, Annotated)` incorrectly returns `True` when `v` is `FibonacciSequence`.\r\n\r\nhttps://github.com/alecthomas/injector/blob/a461f722adcf8e23f0fdd4e122f101029a74877c/injector/__init__.py#L1071-L1073\r\n\r\nThe current implementation of `_is_specialization()` is\r\n\r\nhttps://github.com/alecthomas/injector/blob/a461f722adcf8e23f0fdd4e122f101029a74877c/injector/__init__.py#L596-L618\r\n\r\nThe value of `FibonacciSequence.__origin__` is `None`. I'm not sure where exactly the `__origin__` attribute is set but it seems (I'm guessing) that it is set to `None` for unsubscripted generics or subclasses of subscripted generics. So the `not hasattr(cls, '__origin__')` condition in line 608 fails as `FibonacciSequence` has an `__origin__` attribute set to `None`. Finally on line 618, the comparison `origin is generic_class` succeeds because here `origin` is `None`, and `generic_class` is also `None` because I am running this on a version of Python lower than 3.7.0 so `HAVE_ANNOTATED` is `False` and so `Annotated` has also been set to `None`.\r\n\r\nI think modifying line 608 to\r\n```python\r\nif getattr(cls, '__origin__', None) is None:\r\n```\r\nshould fix this issue.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/127", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/127/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/127/events", "html_url": "https://github.com/alecthomas/injector/issues/127", "id": 521468725, "node_id": "MDU6SXNzdWU1MjE0Njg3MjU=", "number": 127, "title": "0.18 release?", "user": {"login": "asyncee", "id": 701191, "node_id": "MDQ6VXNlcjcwMTE5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/701191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asyncee", "html_url": "https://github.com/asyncee", "followers_url": "https://api.github.com/users/asyncee/followers", "following_url": "https://api.github.com/users/asyncee/following{/other_user}", "gists_url": "https://api.github.com/users/asyncee/gists{/gist_id}", "starred_url": "https://api.github.com/users/asyncee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asyncee/subscriptions", "organizations_url": "https://api.github.com/users/asyncee/orgs", "repos_url": "https://api.github.com/users/asyncee/repos", "events_url": "https://api.github.com/users/asyncee/events{/privacy}", "received_events_url": "https://api.github.com/users/asyncee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-12T10:40:25Z", "updated_at": "2019-11-21T05:06:24Z", "closed_at": "2019-11-12T10:53:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, it seems that documentation already points to 0.18 (https://injector.readthedocs.io/en/latest/api.html#injector.NoInject), but in pypi it is still 0.17.\r\n\r\nAm i missing something or there are no 0.18 published yet? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/126", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/126/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/126/events", "html_url": "https://github.com/alecthomas/injector/issues/126", "id": 507587732, "node_id": "MDU6SXNzdWU1MDc1ODc3MzI=", "number": 126, "title": "Python 3.8 Support", "user": {"login": "Sytten", "id": 2366731, "node_id": "MDQ6VXNlcjIzNjY3MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2366731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sytten", "html_url": "https://github.com/Sytten", "followers_url": "https://api.github.com/users/Sytten/followers", "following_url": "https://api.github.com/users/Sytten/following{/other_user}", "gists_url": "https://api.github.com/users/Sytten/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sytten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sytten/subscriptions", "organizations_url": "https://api.github.com/users/Sytten/orgs", "repos_url": "https://api.github.com/users/Sytten/repos", "events_url": "https://api.github.com/users/Sytten/events{/privacy}", "received_events_url": "https://api.github.com/users/Sytten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-16T03:18:25Z", "updated_at": "2019-10-16T22:11:47Z", "closed_at": "2019-10-16T22:11:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just to make sure we don't forget to test against that version!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/125", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/125/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/125/events", "html_url": "https://github.com/alecthomas/injector/issues/125", "id": 500125307, "node_id": "MDU6SXNzdWU1MDAxMjUzMDc=", "number": 125, "title": "[Regression] injector.BoundKey", "user": {"login": "Stael", "id": 1999003, "node_id": "MDQ6VXNlcjE5OTkwMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1999003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stael", "html_url": "https://github.com/Stael", "followers_url": "https://api.github.com/users/Stael/followers", "following_url": "https://api.github.com/users/Stael/following{/other_user}", "gists_url": "https://api.github.com/users/Stael/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stael/subscriptions", "organizations_url": "https://api.github.com/users/Stael/orgs", "repos_url": "https://api.github.com/users/Stael/repos", "events_url": "https://api.github.com/users/Stael/events{/privacy}", "received_events_url": "https://api.github.com/users/Stael/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-30T08:23:09Z", "updated_at": "2019-12-10T01:29:56Z", "closed_at": "2019-12-10T01:19:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI have found a small regression in this snippet, which is provided as example on how to use the BoundKey here: https://injector.readthedocs.io/en/latest/api.html#injector.BoundKey\r\n\r\n```\r\nfrom injector import Injector, BoundKey, InstanceProvider\r\n\r\nclass A:\r\n    def __init__(self, a, b):\r\n        self.a = a\r\n        self.b = b\r\n\r\nInjectedA = BoundKey(A, a=InstanceProvider(1), b=InstanceProvider(2))\r\ninjector = Injector()\r\na = injector.get(InjectedA)\r\na.a, a.b\r\n```\r\n\r\nIt works in 0.15, 0.16 but fails in 0.17 with the following error:\r\n`UnknownProvider: couldn't determine provider for InstanceProvider(1) to None`\r\n\r\nHope this helps :)\r\nHave a good day !\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/123", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/123/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/123/events", "html_url": "https://github.com/alecthomas/injector/issues/123", "id": 479509984, "node_id": "MDU6SXNzdWU0Nzk1MDk5ODQ=", "number": 123, "title": "Multiple implementations of same interface", "user": {"login": "miguelgflores-fever", "id": 45825836, "node_id": "MDQ6VXNlcjQ1ODI1ODM2", "avatar_url": "https://avatars2.githubusercontent.com/u/45825836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miguelgflores-fever", "html_url": "https://github.com/miguelgflores-fever", "followers_url": "https://api.github.com/users/miguelgflores-fever/followers", "following_url": "https://api.github.com/users/miguelgflores-fever/following{/other_user}", "gists_url": "https://api.github.com/users/miguelgflores-fever/gists{/gist_id}", "starred_url": "https://api.github.com/users/miguelgflores-fever/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miguelgflores-fever/subscriptions", "organizations_url": "https://api.github.com/users/miguelgflores-fever/orgs", "repos_url": "https://api.github.com/users/miguelgflores-fever/repos", "events_url": "https://api.github.com/users/miguelgflores-fever/events{/privacy}", "received_events_url": "https://api.github.com/users/miguelgflores-fever/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-08-12T07:51:28Z", "updated_at": "2020-06-20T15:23:20Z", "closed_at": "2019-08-23T07:59:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI've reading a lot, the code and issues and I don't see there is an easy solution to this without modifying the original classes and using \"NewType\".\r\n\r\nThis is a really common case in my application:\r\n\r\n```python\r\nclass A(abc.ABC):\r\n    @abc.abstractmethod\r\n    def foo(self):\r\n        pass\r\n\r\nclass B1(A):\r\n    def foo(self):\r\n        print(\"I am b1\")\r\n\r\nclass B2(A):\r\n    def foo(self):\r\n        print(\"I am b2\")\r\n\r\nclass C:\r\n    @inject\r\n    def __init__(self, b1: A):\r\n        self.b = b1\r\n\r\nclass D:\r\n    @inject\r\n    def __init__(self, b2: A):\r\n        self.b = b2\r\n```\r\n\r\nHere, if I bind `A` to either `B1` or `B2`, I will always get the same instance for A, but I want different implementation of the interface A depending on the client.\r\n\r\nI can create new types for `A` and change on `C` class (and the same for `D`), but I want to respect the interfaces on the typehinting.\r\n\r\nI seems like a really common case for me, what do you do on this cases?\r\n\r\nRegards", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/122", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/122/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/122/events", "html_url": "https://github.com/alecthomas/injector/issues/122", "id": 467893981, "node_id": "MDU6SXNzdWU0Njc4OTM5ODE=", "number": 122, "title": "When using NewType in typing, the error message is not thrown as in Key", "user": {"login": "wbaik", "id": 17186351, "node_id": "MDQ6VXNlcjE3MTg2MzUx", "avatar_url": "https://avatars3.githubusercontent.com/u/17186351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wbaik", "html_url": "https://github.com/wbaik", "followers_url": "https://api.github.com/users/wbaik/followers", "following_url": "https://api.github.com/users/wbaik/following{/other_user}", "gists_url": "https://api.github.com/users/wbaik/gists{/gist_id}", "starred_url": "https://api.github.com/users/wbaik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wbaik/subscriptions", "organizations_url": "https://api.github.com/users/wbaik/orgs", "repos_url": "https://api.github.com/users/wbaik/repos", "events_url": "https://api.github.com/users/wbaik/events{/privacy}", "received_events_url": "https://api.github.com/users/wbaik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-14T22:57:21Z", "updated_at": "2019-07-24T01:27:13Z", "closed_at": "2019-07-24T01:27:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "While trying to understand your awesome library, I noticed `Key` is being deprecated. So from using NewType as suggested, the error message that should be generated is not thrown. \r\n\r\n```\r\nfrom typing import NewType\r\nfrom injector import inject, Injector, Key, Module, InstanceProvider, Binder\r\n\r\nName = NewType('name', str)\r\nDescription = NewType('description', str)\r\n\r\nName = Key('name')\r\nDescription = Key('description')\r\n\r\n# class MyModule(Module):\r\n#     def configure(self, binder):\r\n#         binder.bind(Name, to='Sher')\r\n#         binder.bind(Description, to='Desc')\r\n\r\n\r\nclass User:\r\n    @inject\r\n    def __init__(self, name: Name, description: Description) -> None:\r\n        self.name = name\r\n        self.description = description\r\n\r\n\r\nclass UserModule(Module):\r\n    def configure(self, binder):\r\n        binder.bind(User)\r\n\r\n\r\nif __name__ == '__main__':\r\n    injector = Injector([UserModule])\r\n    print(injector)\r\n    print('hi : {}'.format(injector.get(User)))\r\n```\r\nThis would throw `Exception: Instantiation of <class 'injector.name'> prohibited - it is derived from BaseKey so most likely you should bind it to something.` if `Key` is used, but nothing in the case of `NewType`.\r\n\r\n\r\nIs this intended? The original error message was very helpful, by the way.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/119", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/119/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/119/events", "html_url": "https://github.com/alecthomas/injector/issues/119", "id": 456572470, "node_id": "MDU6SXNzdWU0NTY1NzI0NzA=", "number": 119, "title": "Release injected object resource on scope exit", "user": {"login": "koi8-r", "id": 1974178, "node_id": "MDQ6VXNlcjE5NzQxNzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1974178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koi8-r", "html_url": "https://github.com/koi8-r", "followers_url": "https://api.github.com/users/koi8-r/followers", "following_url": "https://api.github.com/users/koi8-r/following{/other_user}", "gists_url": "https://api.github.com/users/koi8-r/gists{/gist_id}", "starred_url": "https://api.github.com/users/koi8-r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koi8-r/subscriptions", "organizations_url": "https://api.github.com/users/koi8-r/orgs", "repos_url": "https://api.github.com/users/koi8-r/repos", "events_url": "https://api.github.com/users/koi8-r/events{/privacy}", "received_events_url": "https://api.github.com/users/koi8-r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-15T20:20:00Z", "updated_at": "2019-06-17T13:25:56Z", "closed_at": "2019-06-17T13:25:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to inject a database connection during processing of http request in the custom request scope. Where i can close the connection after request is processed and request scope exits. Can i do this? And can i use custom scope for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/117", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/117/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/117/events", "html_url": "https://github.com/alecthomas/injector/issues/117", "id": 456210939, "node_id": "MDU6SXNzdWU0NTYyMTA5Mzk=", "number": 117, "title": "Injecting an unbound NewType gives an unexpected TypeError", "user": {"login": "davidparsson", "id": 325325, "node_id": "MDQ6VXNlcjMyNTMyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/325325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidparsson", "html_url": "https://github.com/davidparsson", "followers_url": "https://api.github.com/users/davidparsson/followers", "following_url": "https://api.github.com/users/davidparsson/following{/other_user}", "gists_url": "https://api.github.com/users/davidparsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidparsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidparsson/subscriptions", "organizations_url": "https://api.github.com/users/davidparsson/orgs", "repos_url": "https://api.github.com/users/davidparsson/repos", "events_url": "https://api.github.com/users/davidparsson/events{/privacy}", "received_events_url": "https://api.github.com/users/davidparsson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-14T11:59:24Z", "updated_at": "2019-06-15T14:52:56Z", "closed_at": "2019-06-14T21:40:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See the following example:\r\n\r\n```\r\nString1 = NewType('String1', str)\r\n\r\nclass A:\r\n    @injector.inject\r\n    def __init__(self, string_1: String1) -> None:\r\n        self.string_1 = string_1\r\n\r\ni = injector.Injector()\r\na = i.create_object(A)  # This fails\r\n```\r\n\r\nThe above code raises the following:\r\n```\r\nTypeError: Injecting partially applied functions is no longer supported.\r\n```\r\n\r\nTo me that's a bit confusing since `NewType` is supported.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/115", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/115/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/115/events", "html_url": "https://github.com/alecthomas/injector/issues/115", "id": 455627691, "node_id": "MDU6SXNzdWU0NTU2Mjc2OTE=", "number": 115, "title": "Using Key with mypy support?", "user": {"login": "davidparsson", "id": 325325, "node_id": "MDQ6VXNlcjMyNTMyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/325325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidparsson", "html_url": "https://github.com/davidparsson", "followers_url": "https://api.github.com/users/davidparsson/followers", "following_url": "https://api.github.com/users/davidparsson/following{/other_user}", "gists_url": "https://api.github.com/users/davidparsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidparsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidparsson/subscriptions", "organizations_url": "https://api.github.com/users/davidparsson/orgs", "repos_url": "https://api.github.com/users/davidparsson/repos", "events_url": "https://api.github.com/users/davidparsson/events{/privacy}", "received_events_url": "https://api.github.com/users/davidparsson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-13T09:18:18Z", "updated_at": "2019-06-13T10:58:14Z", "closed_at": "2019-06-13T10:15:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is it possible to use `Key` and not break `mypy` checks?\r\n\r\nI have a class that's implementing a waiting strategy, which takes a sleep time (`float`) as an argument. I'd like to be able to configure this via Injector, and it seems a `Key` for this would be ideal. The problem is that this breaks my `mypy` check, since a `Key` is not a `float`.\r\n\r\n```\r\nSleepTime = Key('SleepTime')\r\n\r\n\r\nclass WaitStrategy:\r\n\r\n    @inject\r\n    def __init__(self, sleep_time: SleepTime = 1.0) -> None:\r\n        self._sleep_time = sleep_time\r\n```\r\n\r\nThe `mypy` log says:\r\n```\r\nerror: Invalid type \"wait_strategy.SleepTime\"\r\n```\r\n\r\nMy current work-around is to use a `Module` with a `@provider`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/113", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/113/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/113/events", "html_url": "https://github.com/alecthomas/injector/issues/113", "id": 451119597, "node_id": "MDU6SXNzdWU0NTExMTk1OTc=", "number": 113, "title": "Can't get multibind to work", "user": {"login": "benwainwright", "id": 3321885, "node_id": "MDQ6VXNlcjMzMjE4ODU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3321885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benwainwright", "html_url": "https://github.com/benwainwright", "followers_url": "https://api.github.com/users/benwainwright/followers", "following_url": "https://api.github.com/users/benwainwright/following{/other_user}", "gists_url": "https://api.github.com/users/benwainwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/benwainwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benwainwright/subscriptions", "organizations_url": "https://api.github.com/users/benwainwright/orgs", "repos_url": "https://api.github.com/users/benwainwright/repos", "events_url": "https://api.github.com/users/benwainwright/events{/privacy}", "received_events_url": "https://api.github.com/users/benwainwright/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-01T20:04:18Z", "updated_at": "2019-06-15T14:52:17Z", "closed_at": "2019-06-15T14:52:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there. I've just spent several hours trying to get multibinding to work to no avail. I'm creating an injector module that collects all the modules in a given package and injects them as a multibind. The approach is this:\r\n\r\n```python\r\nclass ApplicationInjectorModule(Module):\r\n\r\n    def configure(self, binder: Binder):\r\n        handlers = [\r\n            getattr(application.handlers, class_name)\r\n            for class_name in application.handlers.__all__\r\n        ]\r\n\r\n        for handler in handlers:\r\n            binder.multibind(interface=[Handler], to=handler)\r\n```\r\n\r\nWhen I install this module and attempt to get an object that requires the handlers multibind, I'm getting an error thrown: `TypeError: '(type)' object is not iterable` (type) is one of the handler classes I'm trying to instantiate.\r\n\r\nAny suggestions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/112", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/112/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/112/events", "html_url": "https://github.com/alecthomas/injector/issues/112", "id": 438379909, "node_id": "MDU6SXNzdWU0MzgzNzk5MDk=", "number": 112, "title": "Injecting in a subclass", "user": {"login": "pohmelie", "id": 2385765, "node_id": "MDQ6VXNlcjIzODU3NjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2385765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pohmelie", "html_url": "https://github.com/pohmelie", "followers_url": "https://api.github.com/users/pohmelie/followers", "following_url": "https://api.github.com/users/pohmelie/following{/other_user}", "gists_url": "https://api.github.com/users/pohmelie/gists{/gist_id}", "starred_url": "https://api.github.com/users/pohmelie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pohmelie/subscriptions", "organizations_url": "https://api.github.com/users/pohmelie/orgs", "repos_url": "https://api.github.com/users/pohmelie/repos", "events_url": "https://api.github.com/users/pohmelie/events{/privacy}", "received_events_url": "https://api.github.com/users/pohmelie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-04-29T15:38:45Z", "updated_at": "2019-08-26T01:10:02Z", "closed_at": "2019-04-29T22:49:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Recent update (v0.16.x) broke our code. So I decide to make this issue to clear the situation, is it a bug/feature/changed behavior or our improper usage of injector? Here is example of code we have:\r\n``` python\r\nimport injector\r\n\r\n\r\nclass X:\r\n    pass\r\n\r\n\r\nclass Y:\r\n    pass\r\n\r\n\r\nclass A:\r\n    @injector.inject\r\n    def __init__(self, x: X):\r\n        print(x)\r\n\r\n\r\nclass B(A):\r\n    @injector.inject\r\n    def __init__(self, y: Y):\r\n        super().__init__()\r\n        print(y)\r\n\r\n\r\ninjector = injector.Injector()\r\ninjector.binder.bind(X, X())\r\ninjector.binder.bind(Y, Y())\r\nb = injector.create_object(B)\r\nprint(b)\r\n```\r\nFor version 0.15.0 output is:\r\n```\r\n<__main__.X object at 0x7f129f08e630>\r\n<__main__.Y object at 0x7f129f08e6a0>\r\n<__main__.B object at 0x7f129f09f198>\r\n```\r\nFor version 0.16.x output is:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test-injector.py\", line 28, in <module>\r\n    b = injector.create_object(B)\r\n  File \"/home/broomrider/.pyenv/versions/3.6.5/lib/python3.6/site-packages/injector/__init__.py\", line 735, in create_object\r\n    self._stack,\r\n  File \"/home/broomrider/.pyenv/versions/3.6.5/lib/python3.6/site-packages/injector/__init__.py\", line 72, in reraise\r\n    raise exception.with_traceback(tb)\r\n  File \"/home/broomrider/.pyenv/versions/3.6.5/lib/python3.6/site-packages/injector/__init__.py\", line 723, in create_object\r\n    self.call_with_injection(init, self_=instance, kwargs=additional_kwargs)\r\n  File \"/home/broomrider/.pyenv/versions/3.6.5/lib/python3.6/site-packages/injector/__init__.py\", line 786, in call_with_injection\r\n    reraise(e, CallError(self_, callable, args, dependencies, e, self._stack))\r\n  File \"/home/broomrider/.pyenv/versions/3.6.5/lib/python3.6/site-packages/injector/__init__.py\", line 72, in reraise\r\n    raise exception.with_traceback(tb)\r\n  File \"/home/broomrider/.pyenv/versions/3.6.5/lib/python3.6/site-packages/injector/__init__.py\", line 784, in call_with_injection\r\n    return callable(*full_args, **dependencies)\r\n  File \"test-injector.py\", line 21, in __init__\r\n    super().__init__()\r\nTypeError: __init__() missing 1 required positional argument: 'x'\r\n```\r\n\r\n`injector.call_with_injection(super().__init__)` solves the problem, but I want to know what is the official\u2122 way to inject to parent constructor and if it is a proper way, then why it works before?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/109", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/109/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/109/events", "html_url": "https://github.com/alecthomas/injector/issues/109", "id": 413794758, "node_id": "MDU6SXNzdWU0MTM3OTQ3NTg=", "number": 109, "title": "Best way to configure provided instance", "user": {"login": "asyncee", "id": 701191, "node_id": "MDQ6VXNlcjcwMTE5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/701191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asyncee", "html_url": "https://github.com/asyncee", "followers_url": "https://api.github.com/users/asyncee/followers", "following_url": "https://api.github.com/users/asyncee/following{/other_user}", "gists_url": "https://api.github.com/users/asyncee/gists{/gist_id}", "starred_url": "https://api.github.com/users/asyncee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asyncee/subscriptions", "organizations_url": "https://api.github.com/users/asyncee/orgs", "repos_url": "https://api.github.com/users/asyncee/repos", "events_url": "https://api.github.com/users/asyncee/events{/privacy}", "received_events_url": "https://api.github.com/users/asyncee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-24T08:11:56Z", "updated_at": "2019-04-27T11:54:20Z", "closed_at": "2019-04-27T11:48:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, i have a module that provides an instance of class X. This instance is configured after creation. For testing i want to switch class X to Y and then run configuration step. I do not know how to do that using injector.\r\n\r\nExample:\r\n\r\n```\r\nclass Base:\r\n    pass\r\n\r\nclass X(Base):\r\n    pass\r\n\r\nclass Y(Base):\r\n    pass\r\n\r\n\r\n... Module...\r\ndef provide_base(self) -> Base:\r\n     instance = X()\r\n     instance.add_subscriber(Subscriber1())  # this is configuration\r\n     return instance\r\n\r\n# in tests\r\ninjector.binder.bind(Base, Y()) -> configuration step is not run\r\n\r\n```\r\n\r\nWhat i came up with (dirty way):\r\n\r\n```\r\n.. Module ..\r\n\r\ndef provide_base(self) -> X:\r\n     instance = X()\r\n     self.configure_base(x)\r\n```\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/107", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/107/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/107/events", "html_url": "https://github.com/alecthomas/injector/issues/107", "id": 409318697, "node_id": "MDU6SXNzdWU0MDkzMTg2OTc=", "number": 107, "title": "The doc (on readthedoc) is not up to date", "user": {"login": "sfermigier", "id": 271079, "node_id": "MDQ6VXNlcjI3MTA3OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/271079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfermigier", "html_url": "https://github.com/sfermigier", "followers_url": "https://api.github.com/users/sfermigier/followers", "following_url": "https://api.github.com/users/sfermigier/following{/other_user}", "gists_url": "https://api.github.com/users/sfermigier/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfermigier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfermigier/subscriptions", "organizations_url": "https://api.github.com/users/sfermigier/orgs", "repos_url": "https://api.github.com/users/sfermigier/repos", "events_url": "https://api.github.com/users/sfermigier/events{/privacy}", "received_events_url": "https://api.github.com/users/sfermigier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-12T14:11:03Z", "updated_at": "2019-04-27T10:39:04Z", "closed_at": "2019-04-27T10:38:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://injector.readthedocs.io/en/latest/changelog.html stops at version 0.13.\r\n\r\nLatest release is version 0.15.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/106", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/106/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/106/events", "html_url": "https://github.com/alecthomas/injector/issues/106", "id": 396272818, "node_id": "MDU6SXNzdWUzOTYyNzI4MTg=", "number": 106, "title": "Document __slots__ behavior", "user": {"login": "masell", "id": 4653351, "node_id": "MDQ6VXNlcjQ2NTMzNTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4653351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masell", "html_url": "https://github.com/masell", "followers_url": "https://api.github.com/users/masell/followers", "following_url": "https://api.github.com/users/masell/following{/other_user}", "gists_url": "https://api.github.com/users/masell/gists{/gist_id}", "starred_url": "https://api.github.com/users/masell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masell/subscriptions", "organizations_url": "https://api.github.com/users/masell/orgs", "repos_url": "https://api.github.com/users/masell/repos", "events_url": "https://api.github.com/users/masell/events{/privacy}", "received_events_url": "https://api.github.com/users/masell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-06T16:31:15Z", "updated_at": "2019-11-23T11:07:30Z", "closed_at": "2019-11-23T11:07:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using `__slots__` it should be documented that a `__injector__` slot is required.\r\n\r\nhttps://github.com/alecthomas/injector/blob/master/injector.py#L756\r\n\r\nInstead of `Can\\'t create an instance of type %r due to presence of __slots__,  remove __slots__ to fix that'`\r\n\r\nIt should say:\r\n`Can\\'t create an instance of type %r due to presence of __slots__ and no __injector__ slot defined, remove __slots__ or add __injector__ to __slots__ to fix that`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/103", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/103/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/103/events", "html_url": "https://github.com/alecthomas/injector/issues/103", "id": 378160476, "node_id": "MDU6SXNzdWUzNzgxNjA0NzY=", "number": 103, "title": "Question: Preferred way to instantiate injector", "user": {"login": "asyncee", "id": 701191, "node_id": "MDQ6VXNlcjcwMTE5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/701191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asyncee", "html_url": "https://github.com/asyncee", "followers_url": "https://api.github.com/users/asyncee/followers", "following_url": "https://api.github.com/users/asyncee/following{/other_user}", "gists_url": "https://api.github.com/users/asyncee/gists{/gist_id}", "starred_url": "https://api.github.com/users/asyncee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asyncee/subscriptions", "organizations_url": "https://api.github.com/users/asyncee/orgs", "repos_url": "https://api.github.com/users/asyncee/repos", "events_url": "https://api.github.com/users/asyncee/events{/privacy}", "received_events_url": "https://api.github.com/users/asyncee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-07T06:38:36Z", "updated_at": "2018-11-07T09:58:33Z", "closed_at": "2018-11-07T09:58:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, i have a question about what is the best practices to instantiate injector.\r\n\r\nCurrently there are two ways in my mind:\r\n\r\n```python\r\ndef setup_injector(config):\r\n     # Use a closure to configure injector with dynamically passed config.\r\n     def setup_configuration(binder):\r\n          binder.bind(Config, to=config)\r\n  \r\n     return Injector([setup_configuration, Module1(), Module2(), ... ])\r\n```\r\n\r\nThat way all injector-specific initialization code is tied to it and is hidden from the client. The client code then just calls `injector = setup_injector(config=ProductionConfig())`.\r\n\r\nThe downside of this approach i see is that injector is created dynamically on the most outer (higher) layer of code, where the application is created, so it can not be imported by underlying code (to keep dependency graph between modules oneway and to follow clean architecture dependency rule).\r\n\r\nInjector factory function allows to create injector with specific configuration passed (Config instance).\r\n\r\nThis is my current approach. The code is:\r\n\r\n```python\r\n# Application.containers contains all providers and injector factory\r\nfrom application.containers import setup_injector\r\n\r\nconfig = get_config_from_command_line_arguments()\r\n\r\n# It is forbidden to import injector in other places of a program\r\n# to avoid circular import errors.\r\ninjector = setup_injector(config=config)\r\nmain = injector.get(Main)\r\nmain.run()\r\n```\r\n\r\nThe second approach i see is to create a singleton of injector by calling `injector = Injector()` on module level. This will create an application-global (and importable) constant. So the `injector` instance can be imported anywhere in the program. This will allow following code work:\r\n\r\n```\r\n# application.database module\r\n\r\nfrom application.containers import injector          \r\n\r\ndef transactional(fn):\r\n     def wrapper(*args, **kwargs):\r\n          session = injector.get(Session)\r\n          fn(*args, **kwargs)\r\n          session.commit()\r\n```\r\n\r\nBut this approach has it's downside \u2014 i can not get my head around how to **dynamically** configure this global instance of injector with different configuration, say a development config.\r\n\r\nMy application is configured via command line arguments and not environment variables.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/102", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/102/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/102/events", "html_url": "https://github.com/alecthomas/injector/issues/102", "id": 377874678, "node_id": "MDU6SXNzdWUzNzc4NzQ2Nzg=", "number": 102, "title": "Dependencies not injected on classes without @inject using Python 3", "user": {"login": "asyncee", "id": 701191, "node_id": "MDQ6VXNlcjcwMTE5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/701191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asyncee", "html_url": "https://github.com/asyncee", "followers_url": "https://api.github.com/users/asyncee/followers", "following_url": "https://api.github.com/users/asyncee/following{/other_user}", "gists_url": "https://api.github.com/users/asyncee/gists{/gist_id}", "starred_url": "https://api.github.com/users/asyncee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asyncee/subscriptions", "organizations_url": "https://api.github.com/users/asyncee/orgs", "repos_url": "https://api.github.com/users/asyncee/repos", "events_url": "https://api.github.com/users/asyncee/events{/privacy}", "received_events_url": "https://api.github.com/users/asyncee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-11-06T14:37:09Z", "updated_at": "2020-03-04T08:33:38Z", "closed_at": "2018-11-07T06:20:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, documentation states following:\r\n\r\nIf you use Python 3 you can make Injector use constructor parameter annotations to determine class dependencies. The following code:\r\n\r\n ```\r\nclass B:\r\n    @inject\r\n    def __init__(self, a: A):\r\n        self.a = a\r\n```\r\ncan now be written as:\r\n\r\n```\r\nclass B:\r\n    def __init__(self, a:A):\r\n        self.a = a\r\n```\r\n\r\nI can not get it working:\r\n\r\n```\r\nfrom injector import *\r\n\r\n\r\nclass A:\r\n    pass\r\n\r\n\r\nclass B:\r\n    def __init__(self, a: A):\r\n        self.a = a\r\n\r\n\r\nclass MyModule(Module):\r\n    @singleton\r\n    @provider\r\n    def provide_a(self) -> A:\r\n        return A()\r\n\r\n\r\ninjector = Injector(MyModule)\r\ninjector.get(B)\r\n```\r\n\r\nIf `@inject` is added to the B's constructor, then everything working fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/99", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/99/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/99/events", "html_url": "https://github.com/alecthomas/injector/issues/99", "id": 364087868, "node_id": "MDU6SXNzdWUzNjQwODc4Njg=", "number": 99, "title": "Singleton scope not honored when binding to subclasses", "user": {"login": "Nyshiki", "id": 3688803, "node_id": "MDQ6VXNlcjM2ODg4MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3688803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nyshiki", "html_url": "https://github.com/Nyshiki", "followers_url": "https://api.github.com/users/Nyshiki/followers", "following_url": "https://api.github.com/users/Nyshiki/following{/other_user}", "gists_url": "https://api.github.com/users/Nyshiki/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nyshiki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nyshiki/subscriptions", "organizations_url": "https://api.github.com/users/Nyshiki/orgs", "repos_url": "https://api.github.com/users/Nyshiki/repos", "events_url": "https://api.github.com/users/Nyshiki/events{/privacy}", "received_events_url": "https://api.github.com/users/Nyshiki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-26T15:26:02Z", "updated_at": "2018-09-27T07:17:38Z", "closed_at": "2018-09-26T16:35:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I surely got something wrong but I've encountered this unexpected behavior.\r\nWhen I bind a base class to a singleton subclass I expected just one instance to be created for both dependencies, two different instances were created instead.\r\n\r\npackage version == 0.14.1\r\n\r\nHere's how to reproduce the issue.\r\n```\r\nfrom abc import ABCMeta, abstractmethod\r\nfrom injector import singleton, Module, Injector\r\n\r\nclass IReader(metaclass=ABCMeta):\r\n    @abstractmethod\r\n    def read(self):\r\n        pass\r\n\r\n@singleton\r\nclass Catalog(IReader):\r\n    def read(self):\r\n        pass\r\n\r\n    def add_item(self, item: str):\r\n        pass\r\n\r\nclass CatalogModule(Module):\r\n    def configure(self, binder):\r\n        binder.bind(IReader, Catalog)\r\n\r\ninjector = Injector([CatalogModule])\r\n\r\ninjector.get(IReader) is injector.get(Catalog)\r\nFalse\r\n\r\ninjector.get(Catalog)\r\n<Catalog object at 0x7f9d34c83278>\r\n\r\ninjector.get(IReader) \r\n<Catalog object at 0x7f9d35786fd0>\r\n\r\n```\r\n\r\nHope it is clear enough.\r\nIs this the expected outcome?\r\nPlease let me know how to obtain the same instance for both dependencies.\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/95", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/95/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/95/events", "html_url": "https://github.com/alecthomas/injector/issues/95", "id": 349661869, "node_id": "MDU6SXNzdWUzNDk2NjE4Njk=", "number": 95, "title": "Factory isn't called during injection", "user": {"login": "robob4him", "id": 690413, "node_id": "MDQ6VXNlcjY5MDQxMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/690413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robob4him", "html_url": "https://github.com/robob4him", "followers_url": "https://api.github.com/users/robob4him/followers", "following_url": "https://api.github.com/users/robob4him/following{/other_user}", "gists_url": "https://api.github.com/users/robob4him/gists{/gist_id}", "starred_url": "https://api.github.com/users/robob4him/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robob4him/subscriptions", "organizations_url": "https://api.github.com/users/robob4him/orgs", "repos_url": "https://api.github.com/users/robob4him/repos", "events_url": "https://api.github.com/users/robob4him/events{/privacy}", "received_events_url": "https://api.github.com/users/robob4him/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-10T21:24:45Z", "updated_at": "2018-08-10T22:14:57Z", "closed_at": "2018-08-10T22:14:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Greetings!\r\n\r\nI'm actually relatively new to Python in general so I'm having trouble using a factory for the logger (so I can add handlers, set the log level, etc).\r\n\r\nHere's the simple state:\r\n```python\r\nfrom injector import Module, Key, provider, Injector, inject, singleton\r\nfrom logging import Logger\r\n\r\nimport logging\r\n\r\nclass TestApp:\r\n    @inject\r\n    def __init__(self, logger: Logger):\r\n        self.logger = logger\r\n\r\n    def run(self):\r\n        self.logger.info('Foo')\r\n\r\n@singleton\r\nclass LoggerFactory():\r\n    def __init__(self):\r\n    # Constructor\r\n        self.logger = None\r\n\r\n    @provider\r\n    def build(self) -> Logger:\r\n    # Build an instance of the logger\r\n        if self.logger is not None:\r\n            return self.logger\r\n\r\n        self.logger = logging.getLogger('testapp')\r\n\r\n        return self.logger\r\n\r\ndef bootstrapServices(binder):\r\n    binder.bind(LoggerFactory, to=Logger)\r\n\r\nif __name__ == '__main__':\r\n    injector = Injector(bootstrapServices)\r\n    application = injector.get(TestApp)\r\n    application.run()\r\n```\r\n\r\nI expect the factory to be called for dependency requests for `Logger` but instead an error is thrown: `injector.CallError: Call to Logger.__init__() failed: __init__() missing 1 required positional argument: 'name' (injection stack: [<class '__main__.TestApp'>])`\r\n\r\nThanks for your work!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/92", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/92/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/92/events", "html_url": "https://github.com/alecthomas/injector/issues/92", "id": 331929791, "node_id": "MDU6SXNzdWUzMzE5Mjk3OTE=", "number": 92, "title": "@noninjectable() accepts invalid arguments", "user": {"login": "davidparsson", "id": 325325, "node_id": "MDQ6VXNlcjMyNTMyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/325325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidparsson", "html_url": "https://github.com/davidparsson", "followers_url": "https://api.github.com/users/davidparsson/followers", "following_url": "https://api.github.com/users/davidparsson/following{/other_user}", "gists_url": "https://api.github.com/users/davidparsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidparsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidparsson/subscriptions", "organizations_url": "https://api.github.com/users/davidparsson/orgs", "repos_url": "https://api.github.com/users/davidparsson/repos", "events_url": "https://api.github.com/users/davidparsson/events{/privacy}", "received_events_url": "https://api.github.com/users/davidparsson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-13T10:13:55Z", "updated_at": "2018-09-19T08:16:51Z", "closed_at": "2018-09-19T08:16:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`@noninjectable` accepts invalid arguments. Consider the example below:\r\n\r\n```\r\nclass A:\r\n    @inject\r\n    @noninjectable('b, c')\r\n    def __init__(self, b: str, c: int):\r\n        self.b = b\r\n        self.c = c\r\n```\r\n\r\nIt may seem valid, but `'b, c'` should be `'b', 'c'`. It would be great if an exception would be raised if `@noninjectable` has been passed arguments that does not exist on the called method/function. Currently it's easy to make mistakes, especially for types that have defined default values such as `str` and `int` (which also typically are the ones you'd like to have non-injectable).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/90", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/90/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/90/events", "html_url": "https://github.com/alecthomas/injector/issues/90", "id": 314808794, "node_id": "MDU6SXNzdWUzMTQ4MDg3OTQ=", "number": 90, "title": "flask-restful is a hard dependency", "user": {"login": "yoanisgil", "id": 918271, "node_id": "MDQ6VXNlcjkxODI3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/918271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoanisgil", "html_url": "https://github.com/yoanisgil", "followers_url": "https://api.github.com/users/yoanisgil/followers", "following_url": "https://api.github.com/users/yoanisgil/following{/other_user}", "gists_url": "https://api.github.com/users/yoanisgil/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoanisgil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoanisgil/subscriptions", "organizations_url": "https://api.github.com/users/yoanisgil/orgs", "repos_url": "https://api.github.com/users/yoanisgil/repos", "events_url": "https://api.github.com/users/yoanisgil/events{/privacy}", "received_events_url": "https://api.github.com/users/yoanisgil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-16T20:37:12Z", "updated_at": "2018-04-16T20:38:51Z", "closed_at": "2018-04-16T20:38:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using flask-injector==0.10.1  alone with Flask-Restplus However Flask-Restful is a hard dependecy because otherwise the following error will be thrown:\r\n\r\n```bash\r\napi_next_1              |   File \"/usr/local/lib/python3.6/site-packages/flask_injector.py\", line 65, in wrap_fun\r\napi_next_1              |     return wrap_class_based_view(fun, injector)\r\napi_next_1              |   File \"/usr/local/lib/python3.6/site-packages/flask_injector.py\", line 156, in wrap_class_based_view\r\napi_next_1              |     return wrap_flask_restful_resource(fun, flask_restful_api, injector)\r\napi_next_1              |   File \"/usr/local/lib/python3.6/site-packages/flask_injector.py\", line 171, in wrap_flask_restful_resource\r\napi_next_1              |     from flask_restful.utils import unpack\r\napi_next_1              | ModuleNotFoundError: No module named 'flask_restful'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/83", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/83/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/83/events", "html_url": "https://github.com/alecthomas/injector/issues/83", "id": 309742786, "node_id": "MDU6SXNzdWUzMDk3NDI3ODY=", "number": 83, "title": "Remove setuptools from dependencies", "user": {"login": "pohmelie", "id": 2385765, "node_id": "MDQ6VXNlcjIzODU3NjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2385765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pohmelie", "html_url": "https://github.com/pohmelie", "followers_url": "https://api.github.com/users/pohmelie/followers", "following_url": "https://api.github.com/users/pohmelie/following{/other_user}", "gists_url": "https://api.github.com/users/pohmelie/gists{/gist_id}", "starred_url": "https://api.github.com/users/pohmelie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pohmelie/subscriptions", "organizations_url": "https://api.github.com/users/pohmelie/orgs", "repos_url": "https://api.github.com/users/pohmelie/repos", "events_url": "https://api.github.com/users/pohmelie/events{/privacy}", "received_events_url": "https://api.github.com/users/pohmelie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-29T12:53:15Z", "updated_at": "2018-03-30T04:07:22Z", "closed_at": "2018-03-30T04:07:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Package itself do not use `setuptools` and should not be in `install_requires` section. Solutions:\r\n* Move `setuptools` from `install_requires` to `setup_requires` (which is available since [0.6a1](https://setuptools.readthedocs.io/en/latest/history.html#a1))\r\n* Drop `setuptools` requirement at all, since your version requirement for `setuptools` is `0.6b1` and this version was released almost 10 years(!) ago, I hope no one use it nowadays.\r\n\r\nWhy this counts for us. We build debian packages from python packages and since modern python have `setuptools` bundled, we do not need to build debian package of setuptools, but since this dependency in `injector` we have to.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/82", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/82/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/82/events", "html_url": "https://github.com/alecthomas/injector/issues/82", "id": 309026573, "node_id": "MDU6SXNzdWUzMDkwMjY1NzM=", "number": 82, "title": "Injecting partially applied functions is no longer supported.", "user": {"login": "jorootsqc", "id": 22309072, "node_id": "MDQ6VXNlcjIyMzA5MDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/22309072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorootsqc", "html_url": "https://github.com/jorootsqc", "followers_url": "https://api.github.com/users/jorootsqc/followers", "following_url": "https://api.github.com/users/jorootsqc/following{/other_user}", "gists_url": "https://api.github.com/users/jorootsqc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorootsqc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorootsqc/subscriptions", "organizations_url": "https://api.github.com/users/jorootsqc/orgs", "repos_url": "https://api.github.com/users/jorootsqc/repos", "events_url": "https://api.github.com/users/jorootsqc/events{/privacy}", "received_events_url": "https://api.github.com/users/jorootsqc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-27T15:45:14Z", "updated_at": "2020-07-11T18:32:29Z", "closed_at": "2020-07-11T18:32:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get this error when I tried to execute query, do you know why ? \r\n\r\n\r\nsee my code:\r\n\r\n\r\n\r\n#MainProgram.py\r\n```\r\nfrom injector import Injector,inject\r\nfrom QueryGetPersonalValueFromPersonById import QueryGetPersonalValueFromPersonById\r\n\r\nclass MainProgram:\r\n\r\n\tdef StartProcess(self,id):\r\n\t\t\r\n\r\n\t\tinjector = Injector()\r\n        query  = injector.get(QueryGetPersonalValueFromPersonById)\r\n\t\tpersonalFieldValue = query.ReadPersonalFieldFromPersonId(id)\r\n\t\t\r\n\t\tprint(personalFieldValue)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\tmainProgram = MainProgram()\r\n\tmainProgram.StartProcess(5)\r\n```\r\n\r\n\r\n\r\n#QueryGetPersonalValueFromPersonById.py\r\n```\r\nfrom modelbd import Person\r\nfrom PersonRepository import PersonRepository\r\nfrom injector import Injector,inject\r\n\r\nimport numpy\r\nimport pandas\r\n\r\nclass QueryGetPersonalValueFromPersonById:\r\n    \r\n    id = None    \r\n   \r\n    @inject\r\n    def __init__(self,personRepositpory: PersonRepository):        \r\n         self.personRepo = personRepositpory\r\n        \r\n    def ReadPersonalFieldFromPersonId(self):       \r\n         \r\n        _person = self.personRepo.GetById(self.id)\r\n        df = pandas.read_json(_person.PersonalField)\r\n        \r\n        return df\r\n\r\n```\r\n#PersonRepository.py\r\n```\r\nfrom base import Session\r\nfrom modelbd import Person\r\nfrom injector import Injector,inject\r\n\r\n\r\nclass PersonRepository:\r\n    \r\n    @inject\r\n    def __init__(self,DBSession:Session):\r\n        self.session = DBSession\r\n     \r\n    def GetById(self,id):\r\n         _person = self.session.query(Person).filter_by(Id=id).first()\r\n         return _person\r\n         \r\n```\r\n\r\n#base.py\r\n```\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker\r\n\r\nengine = create_engine('mssql+pymssql://:@ZZZ/ZZZ')\r\nSession = sessionmaker(bind=engine)\r\n\r\nBase = declarative_base()\r\n```\r\n\r\n#modelbd.py\r\n```\r\nfrom sqlalchemy import BigInteger, Column, DateTime, ForeignKey, Index, Integer, LargeBinary, Numeric, String, Table, Unicode, text\r\nfrom sqlalchemy.orm import relationship\r\nfrom sqlalchemy.dialects.mssql.base import BIT\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\n\r\n\r\nBase = declarative_base()\r\nmetadata = Base.metadata\r\n\r\nclass Person(Base):\r\n    __tablename__ = 'Person'\r\n\r\n    Id = Column(BigInteger, primary_key=True)\r\n    Name = Column(String(200, 'Latin1_General_CI_AI'), nullable=False)\r\n    LastName = Column(String(200, 'Latin1_General_CI_AI'))\r\n    PersonalField= Column(String(200, 'Latin1_General_CI_AI'))\r\n    \r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/81", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/81/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/81/events", "html_url": "https://github.com/alecthomas/injector/issues/81", "id": 308793977, "node_id": "MDU6SXNzdWUzMDg3OTM5Nzc=", "number": 81, "title": "How to prioritize multibinds?", "user": {"login": "justanr", "id": 4221605, "node_id": "MDQ6VXNlcjQyMjE2MDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/4221605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justanr", "html_url": "https://github.com/justanr", "followers_url": "https://api.github.com/users/justanr/followers", "following_url": "https://api.github.com/users/justanr/following{/other_user}", "gists_url": "https://api.github.com/users/justanr/gists{/gist_id}", "starred_url": "https://api.github.com/users/justanr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justanr/subscriptions", "organizations_url": "https://api.github.com/users/justanr/orgs", "repos_url": "https://api.github.com/users/justanr/repos", "events_url": "https://api.github.com/users/justanr/events{/privacy}", "received_events_url": "https://api.github.com/users/justanr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-27T01:54:50Z", "updated_at": "2018-03-29T07:50:42Z", "closed_at": "2018-03-29T07:50:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I didn't see any mention of this in the docs and I haven't dug through the code thoroughly so feel free to point me at something I've potentially missed and tell me I've over thought this.\r\n\r\nThe use case here is allowing certain implementations to have a higher or lower priority based when dealing with non-deterministic registration.\r\n\r\nLet's say I have some interface:\r\n\r\n```python\r\nclass AuthenticationHandler(ABC):\r\n    def authenticate(self, identifier: str, secret: str) -> Optional[User]:\r\n        pass\r\n```\r\n\r\nAnd two implementations: `DefaultAuthHandler` and `LDAPAuthHandler`. This is easy enough to prioritize if I am the only one registering these into the application:\r\n\r\n```python\r\n# see injector #45\r\n# these are purposefully decomposed for sake of example\r\nbinder.multibind(AuthenticationHandler, to=ClassProviderList([LDAPAuthHandler]))\r\nbinder.multibind(AuthenticationHandler, to=ClassProviderList([DefaultAuthHandler]))\r\n```\r\n\r\nHowever, if I provide a plugin hook for users to provide their own modules, I can no longer guarantee order. At most I can guarantee that either my implementations always come before or after their implementations, but they can't be interleaved.\r\n\r\nA user may want to provide an implementation that uses `/etc/shadow` as an auth source but have it come in between my LDAP and Default implementations.\r\n\r\nI'd like to know if there is either support for this in injector. Barring that, it would seem that a custom provider would be the most straightforward approach:\r\n\r\n```python\r\nclass PrioritizedProvider(ClassProvider):\r\n    def __init__(self, cls, priority: int=0):\r\n        super().__init__(cls)\r\n        self.priority = priority\r\n```\r\n\r\nHowever, this would also require being able to provide a custom provider *inside* multibind that can handle sorting these providers, something along the lines of:\r\n\r\n```python\r\n_default_key = lambda provider: getattr(provider, 'priority', 0)\r\n\r\nclass PrioritizedListOfProviders(ListOfProviders):\r\n    def __init__(self, ordering=None):\r\n        super().__init__()\r\n        self.__sorted = False\r\n        self.__ordering = ordering or _default_key\r\n\r\n    def append(self, provider):\r\n        super().append(provider)\r\n        self.__sorted = False\r\n\r\n    def get(self, injector):\r\n        if not self.__sorted:\r\n            self._sort_providers()\r\n       return super().get(injector)\r\n\r\n    def _sort_providers(self):\r\n        # not thread safe\r\n        self._providers = sorted(self._providers, key=self.__ordering)\r\n```\r\n\r\nBut since multibind hard codes its uses of MultiBindProvider and MapBindProvider it's impossible to supply a custom implementation of ListOfProviders (well...not impossible, just gross) and supplying the customized provider to multibind itself would only cause that particular chunk to be prioritized at resolution.\r\n\r\nThoughts? Did I overlook something or is this a potential addition to this library?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/78", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/78/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/78/events", "html_url": "https://github.com/alecthomas/injector/issues/78", "id": 267126266, "node_id": "MDU6SXNzdWUyNjcxMjYyNjY=", "number": 78, "title": "Using default argument values in 0.13?", "user": {"login": "davidparsson", "id": 325325, "node_id": "MDQ6VXNlcjMyNTMyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/325325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidparsson", "html_url": "https://github.com/davidparsson", "followers_url": "https://api.github.com/users/davidparsson/followers", "following_url": "https://api.github.com/users/davidparsson/following{/other_user}", "gists_url": "https://api.github.com/users/davidparsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidparsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidparsson/subscriptions", "organizations_url": "https://api.github.com/users/davidparsson/orgs", "repos_url": "https://api.github.com/users/davidparsson/repos", "events_url": "https://api.github.com/users/davidparsson/events{/privacy}", "received_events_url": "https://api.github.com/users/davidparsson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-20T10:05:31Z", "updated_at": "2019-06-13T11:27:12Z", "closed_at": "2019-06-13T11:27:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In previous versions (0.12.x) of Injector, we've used the bindings in `@inject` to allow using the default values when injecting objects automatically, and using the `AssistedBuilder` when overriding is wanted:\r\n\r\n```\r\nclass MyClass:\r\n    @inject(other=OtherClass)\r\n    def __init__(self, other: OtherClass, title: str = 'Default title'):\r\n```\r\n\r\nIn 0.13.x the ability to provide bindings like this has been removed. Is there any recommended way to make Injector use the default values, that also works when creating the object without using Injector?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/75", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/75/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/75/events", "html_url": "https://github.com/alecthomas/injector/issues/75", "id": 266474739, "node_id": "MDU6SXNzdWUyNjY0NzQ3Mzk=", "number": 75, "title": "Can't create PyQt objects annotated with @inject", "user": {"login": "davidparsson", "id": 325325, "node_id": "MDQ6VXNlcjMyNTMyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/325325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidparsson", "html_url": "https://github.com/davidparsson", "followers_url": "https://api.github.com/users/davidparsson/followers", "following_url": "https://api.github.com/users/davidparsson/following{/other_user}", "gists_url": "https://api.github.com/users/davidparsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidparsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidparsson/subscriptions", "organizations_url": "https://api.github.com/users/davidparsson/orgs", "repos_url": "https://api.github.com/users/davidparsson/repos", "events_url": "https://api.github.com/users/davidparsson/events{/privacy}", "received_events_url": "https://api.github.com/users/davidparsson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-18T12:29:42Z", "updated_at": "2017-10-19T17:03:16Z", "closed_at": "2017-10-19T09:20:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If a class that inherits from a PyQt class, for example `QObject`, is annotated with `@inject`, it can't be created without using Injector. The [`getattr()` in `@inject`](https://github.com/alecthomas/injector/blob/4faa3f77c25342eddb5b092442c2f29ba9656541/injector.py#L1072) raises a `RuntimeError`. Here's an example:\r\n\r\n```\r\nfrom PyQt5.QtCore import QObject\r\nfrom injector import inject, Injector\r\n\r\nclass C(QObject):\r\n    @inject\r\n    def __init__(self):\r\n        super().__init__()\r\n\r\ninjector = Injector()\r\nc = injector.create_object(C)  # This works\r\n\r\nc = C()  # This raises a RuntimeError\r\n```\r\n\r\nThis is the traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"example.py\", line 12, in <module>\r\n    c = C()\r\n  File \".../lib/python3.6/site-packages/injector.py\", line 1072, in inject\r\n    injector = getattr(self_, '__injector__', None)\r\nRuntimeError: super-class __init__() of type C was never called\r\n```\r\n\r\nI've used PyQt 5.8 and Injector 0.13.2.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/72", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/72/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/72/events", "html_url": "https://github.com/alecthomas/injector/issues/72", "id": 264065909, "node_id": "MDU6SXNzdWUyNjQwNjU5MDk=", "number": 72, "title": "Why singleton scope doesn't work as expected for create_child_injector ", "user": {"login": "panyi121", "id": 3675275, "node_id": "MDQ6VXNlcjM2NzUyNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3675275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/panyi121", "html_url": "https://github.com/panyi121", "followers_url": "https://api.github.com/users/panyi121/followers", "following_url": "https://api.github.com/users/panyi121/following{/other_user}", "gists_url": "https://api.github.com/users/panyi121/gists{/gist_id}", "starred_url": "https://api.github.com/users/panyi121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/panyi121/subscriptions", "organizations_url": "https://api.github.com/users/panyi121/orgs", "repos_url": "https://api.github.com/users/panyi121/repos", "events_url": "https://api.github.com/users/panyi121/events{/privacy}", "received_events_url": "https://api.github.com/users/panyi121/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-10T00:47:04Z", "updated_at": "2017-10-16T15:05:43Z", "closed_at": "2017-10-16T15:05:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI have a use case to take in user inputs (name, description) at runtime at a top-level class, while some lower-level class also needs to depend on user inputs. \r\n\r\nWhile I tried with the below code, it throws Exception: Instantiation of <class 'injector.description'> prohibited - it is derived from BaseKey so most likely you should bind it to something.\r\n\r\nBut if I remove the @singleton annotation for class B, it works. Can someone explain to me why singleton scope doesn't work in the child_injector? \r\n\r\n```python\r\nclass base:\r\n    def __init__(self, name):\r\n        def configure(binder):\r\n            binder.bind(Name, to=InstanceProvider(name))\r\n\r\n        self.injector = Injector(configure)\r\n        print('base: {}'.format(self.injector.get(Name)))\r\n\r\n\r\nclass A(base):\r\n    def __init__(self, name, description):\r\n        super(A, self).__init__(name)\r\n\r\n        def configure(binder):\r\n            binder.bind(Description, to=InstanceProvider(description))\r\n\r\n        self.injector = self.injector.create_child_injector(configure)\r\n\r\n        print(self.injector.get(B))\r\n\r\n\r\n@singleton\r\nclass B:\r\n    @inject(name=Name, description=Description)\r\n    def __init__(self, name, description):\r\n        self.name = name\r\n\r\n\r\nA(name='hello', description='world')\r\n```\r\n\r\n\r\n===================================================================\r\nOutput:\r\n\r\n```\r\nbase: hello\r\nTraceback (most recent call last):\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 580, in get\r\n    return self._context[key]\r\nKeyError: (<class '__main__.B'>,)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/yipan/AlexaPrize-Python-Alexa-SDK/src/AlexaPrizeSocialbotCore/src/demo/di.py\", line 191, in <module>\r\n    A(name='hello', description='world')\r\n  File \"/Users/yipan/AlexaPrize-Python-Alexa-SDK/src/AlexaPrizeSocialbotCore/src/demo/di.py\", line 180, in __init__\r\n    print(self.injector.get(B))\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 743, in get\r\n    result = scope_instance.get(key, binding.provider).get(self)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 60, in wrapper\r\n    return function(*args, **kwargs)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 582, in get\r\n    provider = InstanceProvider(provider.get(self.injector))\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 144, in get\r\n    return injector.create_object(self._cls)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 787, in create_object\r\n    init(instance, **additional_kwargs)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 1152, in inject\r\n    kwargs=kwargs\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 894, in call_with_injection\r\n    owner_key=self_.__class__ if self_ is not None else callable.__module__,\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 60, in wrapper\r\n    return function(*args, **kwargs)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 937, in args_to_inject\r\n    instance = self.get(key.interface)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 743, in get\r\n    result = scope_instance.get(key, binding.provider).get(self)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 144, in get\r\n    return injector.create_object(self._cls)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 787, in create_object\r\n    init(instance, **additional_kwargs)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/injector.py\", line 1188, in __init__\r\n    'so most likely you should bind it to something.' % (self.__class__,))\r\nException: Instantiation of <class 'injector.description'> prohibited - it is derived from BaseKey so most likely you should bind it to something.\r\n\r\nProcess finished with exit code 1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/71", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/71/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/71/events", "html_url": "https://github.com/alecthomas/injector/issues/71", "id": 264015872, "node_id": "MDU6SXNzdWUyNjQwMTU4NzI=", "number": 71, "title": "How to access injector instances in dependency instance", "user": {"login": "song-han", "id": 2810789, "node_id": "MDQ6VXNlcjI4MTA3ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2810789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/song-han", "html_url": "https://github.com/song-han", "followers_url": "https://api.github.com/users/song-han/followers", "following_url": "https://api.github.com/users/song-han/following{/other_user}", "gists_url": "https://api.github.com/users/song-han/gists{/gist_id}", "starred_url": "https://api.github.com/users/song-han/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/song-han/subscriptions", "organizations_url": "https://api.github.com/users/song-han/orgs", "repos_url": "https://api.github.com/users/song-han/repos", "events_url": "https://api.github.com/users/song-han/events{/privacy}", "received_events_url": "https://api.github.com/users/song-han/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-09T20:26:28Z", "updated_at": "2017-10-20T00:46:31Z", "closed_at": "2017-10-20T00:46:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a use case.\r\n\r\nThere are two dependencies:\r\n``` python\r\nclass A(object):\r\n    @inject()\r\n    def init(self):\r\n        pass\r\n    \r\n    def somefunc(self):\r\n          b = B()\r\n```\r\n\r\n``` ptyhon\r\nclass B(object):\r\n    @inject(c=C):\r\n    def init(self, c):\r\n         self.c = c\r\n```\r\n\r\nI get an injector instance\r\n`injector = Injector()`\r\n\r\nThen, I get an instance of `A`\r\n`a = injector.get(A)`\r\n\r\nI want to create a new instance of `B`, when I call `somefunc` of `A` every time.\r\nHow can I use injection to get an instance B in this situation?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/70", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/70/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/70/events", "html_url": "https://github.com/alecthomas/injector/issues/70", "id": 263519981, "node_id": "MDU6SXNzdWUyNjM1MTk5ODE=", "number": 70, "title": "code sample on thread scope", "user": {"login": "song-han", "id": 2810789, "node_id": "MDQ6VXNlcjI4MTA3ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2810789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/song-han", "html_url": "https://github.com/song-han", "followers_url": "https://api.github.com/users/song-han/followers", "following_url": "https://api.github.com/users/song-han/following{/other_user}", "gists_url": "https://api.github.com/users/song-han/gists{/gist_id}", "starred_url": "https://api.github.com/users/song-han/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/song-han/subscriptions", "organizations_url": "https://api.github.com/users/song-han/orgs", "repos_url": "https://api.github.com/users/song-han/repos", "events_url": "https://api.github.com/users/song-han/events{/privacy}", "received_events_url": "https://api.github.com/users/song-han/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-06T17:37:11Z", "updated_at": "2017-10-09T20:18:04Z", "closed_at": "2017-10-09T20:18:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am trying to create a thread or http request scope. I read the document, but still have no idea hot to create it. Can you provide some sample code?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/67", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/67/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/67/events", "html_url": "https://github.com/alecthomas/injector/issues/67", "id": 236269258, "node_id": "MDU6SXNzdWUyMzYyNjkyNTg=", "number": 67, "title": "injector in connexion broken with version 0.13.0 ?", "user": {"login": "tjhgit", "id": 10506122, "node_id": "MDQ6VXNlcjEwNTA2MTIy", "avatar_url": "https://avatars3.githubusercontent.com/u/10506122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjhgit", "html_url": "https://github.com/tjhgit", "followers_url": "https://api.github.com/users/tjhgit/followers", "following_url": "https://api.github.com/users/tjhgit/following{/other_user}", "gists_url": "https://api.github.com/users/tjhgit/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjhgit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjhgit/subscriptions", "organizations_url": "https://api.github.com/users/tjhgit/orgs", "repos_url": "https://api.github.com/users/tjhgit/repos", "events_url": "https://api.github.com/users/tjhgit/events{/privacy}", "received_events_url": "https://api.github.com/users/tjhgit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-15T18:00:24Z", "updated_at": "2017-06-16T06:24:10Z", "closed_at": "2017-06-15T21:55:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get the following error message with the latest 0.13.0 version:\r\nFile \"/usr/local/lib/python3.6/site-packages/injector.py\", line 1014, in inject\r\n    raise AssertionError('Wrong use of the inject decorator, please consult the documentation')\r\n\r\nwhen trying the code of part1 here:\r\nhttps://medium.com/@ssola/building-microservices-with-python-part-i-5240a8dcc2fb\r\n\r\nWorks like a charm with version 0.12.1 !\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/66", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/66/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/66/events", "html_url": "https://github.com/alecthomas/injector/issues/66", "id": 229596427, "node_id": "MDU6SXNzdWUyMjk1OTY0Mjc=", "number": 66, "title": "Missing getfullargspec in python 2.7", "user": {"login": "hellerbarde", "id": 37417, "node_id": "MDQ6VXNlcjM3NDE3", "avatar_url": "https://avatars0.githubusercontent.com/u/37417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellerbarde", "html_url": "https://github.com/hellerbarde", "followers_url": "https://api.github.com/users/hellerbarde/followers", "following_url": "https://api.github.com/users/hellerbarde/following{/other_user}", "gists_url": "https://api.github.com/users/hellerbarde/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellerbarde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellerbarde/subscriptions", "organizations_url": "https://api.github.com/users/hellerbarde/orgs", "repos_url": "https://api.github.com/users/hellerbarde/repos", "events_url": "https://api.github.com/users/hellerbarde/events{/privacy}", "received_events_url": "https://api.github.com/users/hellerbarde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-18T08:44:45Z", "updated_at": "2017-05-19T08:20:46Z", "closed_at": "2017-05-18T21:12:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Python 2.7, using `@provider` throws an error, because `getfullargspec` is `None`\r\n\r\nI tried to add a shim, but since it uses the annotations attribute to determine the return type, this won't work in python 2.7\r\n\r\nI am unsure how to fix this. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/65", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/65/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/65/events", "html_url": "https://github.com/alecthomas/injector/issues/65", "id": 224103035, "node_id": "MDU6SXNzdWUyMjQxMDMwMzU=", "number": 65, "title": "Keyword arguments to @inject in future releases", "user": {"login": "Dominik1123", "id": 15989985, "node_id": "MDQ6VXNlcjE1OTg5OTg1", "avatar_url": "https://avatars2.githubusercontent.com/u/15989985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dominik1123", "html_url": "https://github.com/Dominik1123", "followers_url": "https://api.github.com/users/Dominik1123/followers", "following_url": "https://api.github.com/users/Dominik1123/following{/other_user}", "gists_url": "https://api.github.com/users/Dominik1123/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dominik1123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dominik1123/subscriptions", "organizations_url": "https://api.github.com/users/Dominik1123/orgs", "repos_url": "https://api.github.com/users/Dominik1123/repos", "events_url": "https://api.github.com/users/Dominik1123/events{/privacy}", "received_events_url": "https://api.github.com/users/Dominik1123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-25T11:15:58Z", "updated_at": "2017-04-29T09:10:16Z", "closed_at": "2017-04-29T09:10:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just read the [changelog for `0.11.0`](https://injector.readthedocs.io/en/latest/changelog.html#id2) and saw that keyword arguments to the `@inject` decorator will be removed in favor of type annotations in a future release. Does that mean that you plan to drop Python 2.x support completely? If not what is the reason for dropping Python2/3 compatibility?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/64", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/64/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/64/events", "html_url": "https://github.com/alecthomas/injector/issues/64", "id": 223422347, "node_id": "MDU6SXNzdWUyMjM0MjIzNDc=", "number": 64, "title": "Example from \"Testing with Injector\" doesn't work", "user": {"login": "tavianator", "id": 1692591, "node_id": "MDQ6VXNlcjE2OTI1OTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1692591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tavianator", "html_url": "https://github.com/tavianator", "followers_url": "https://api.github.com/users/tavianator/followers", "following_url": "https://api.github.com/users/tavianator/following{/other_user}", "gists_url": "https://api.github.com/users/tavianator/gists{/gist_id}", "starred_url": "https://api.github.com/users/tavianator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tavianator/subscriptions", "organizations_url": "https://api.github.com/users/tavianator/orgs", "repos_url": "https://api.github.com/users/tavianator/repos", "events_url": "https://api.github.com/users/tavianator/events{/privacy}", "received_events_url": "https://api.github.com/users/tavianator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-04-21T15:43:56Z", "updated_at": "2020-07-13T17:27:08Z", "closed_at": "2017-04-22T06:09:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried the example from [Testing with Injector](https://injector.readthedocs.io/en/latest/testing.html)\r\n\r\n```python\r\nimport unittest\r\nfrom injector import Module, with_injector, inject\r\n\r\nclass UsernameModule(Module):\r\n    def configure(self, binder):\r\n        binder.bind(str, 'Maria')\r\n\r\nclass TestSomethingClass(unittest.TestCase):\r\n    @with_injector(UsernameModule())\r\n    def setUp(self):\r\n        pass\r\n\r\n    @inject(username=str)\r\n    def test_username(self, username):\r\n        self.assertEqual(username, 'Maria')\r\n```\r\n\r\nBut it didn't work:\r\n\r\n```\r\n======================================================================\r\nERROR: test_username (tests.TestSomethingClass)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/tavianator/.virtualenvs/py3/lib/python3.6/site-packages/injector.py\", line 1153, in inject\r\n    return f(self_, *args, **kwargs)\r\nTypeError: test_username() missing 1 required positional argument: 'username'\r\n```\r\n\r\nThis is with injector 0.12.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/63", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/63/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/63/events", "html_url": "https://github.com/alecthomas/injector/issues/63", "id": 220682913, "node_id": "MDU6SXNzdWUyMjA2ODI5MTM=", "number": 63, "title": "TypeError when using ClassAssistedBuilder with @inject", "user": {"login": "davidparsson", "id": 325325, "node_id": "MDQ6VXNlcjMyNTMyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/325325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidparsson", "html_url": "https://github.com/davidparsson", "followers_url": "https://api.github.com/users/davidparsson/followers", "following_url": "https://api.github.com/users/davidparsson/following{/other_user}", "gists_url": "https://api.github.com/users/davidparsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidparsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidparsson/subscriptions", "organizations_url": "https://api.github.com/users/davidparsson/orgs", "repos_url": "https://api.github.com/users/davidparsson/repos", "events_url": "https://api.github.com/users/davidparsson/events{/privacy}", "received_events_url": "https://api.github.com/users/davidparsson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-10T15:32:21Z", "updated_at": "2017-04-22T07:19:42Z", "closed_at": "2017-04-11T05:55:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been trying to use the `ClassAssistedBuilder` and the `AssistedBuilder` as described in [the docs](http://injector.readthedocs.io/en/latest/terminology.html#assisted-injection), but I'm getting the following exception:\r\n```\r\nTraceback (most recent call last):\r\n  File \"reproduce.py\", line 9, in <module>\r\n    class NeedsUserUpdater(object):\r\n  File \"reproduce.py\", line 11, in NeedsUserUpdater\r\n    def __init__(self, builder: ClassAssistedBuilder[UserUpdater]):\r\n  File \"/Users/me/injector-reproduce/.venvs/3.5/lib/python3.5/site-packages/injector.py\", line 1093, in inject\r\n    bindings = _infer_injected_bindings(function)\r\n  File \"/Users/me/injector-reproduce/.venvs/3.5/lib/python3.5/site-packages/injector.py\", line 967, in _infer_injected_bindings\r\n    if _is_specialization(v, Union):\r\n  File \"/Users/me/injector-reproduce/.venvs/3.5/lib/python3.5/site-packages/injector.py\", line 490, in _is_specialization\r\n    (cls.__origin__ is generic_class or issubclass(cls.__origin__, generic_class))\r\n  File \"/usr/local/opt/pyenv/versions/3.5.3/lib/python3.5/typing.py\", line 770, in __subclasscheck__\r\n    raise TypeError(\"Unions cannot be used with issubclass().\")\r\nTypeError: Unions cannot be used with issubclass().\r\n```\r\n\r\nThis is the code I'm running:\r\n\r\n```\r\n#!/usr/bin/env python3\r\nfrom injector import ClassAssistedBuilder, Injector, inject\r\n\r\n\r\nclass UserUpdater:\r\n    def __init__(self, user):\r\n        self._user = user\r\n\r\nclass NeedsUserUpdater(object):\r\n    @inject\r\n    def __init__(self, builder: ClassAssistedBuilder[UserUpdater]):\r\n        self.updater_builder = builder\r\n\r\n    def method(self):\r\n        updater = self.updater_builder.build(user=None)\r\n\r\n\r\ninjector = Injector()\r\ninstance = injector.get(NeedsUserUpdater)\r\ninstance.method()\r\n```\r\n\r\nAm I doing something wrong, or is it not working as intended?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/62", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/62/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/62/events", "html_url": "https://github.com/alecthomas/injector/issues/62", "id": 218136896, "node_id": "MDU6SXNzdWUyMTgxMzY4OTY=", "number": 62, "title": "Some ideas on implementation", "user": {"login": "cjpit", "id": 3469512, "node_id": "MDQ6VXNlcjM0Njk1MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3469512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjpit", "html_url": "https://github.com/cjpit", "followers_url": "https://api.github.com/users/cjpit/followers", "following_url": "https://api.github.com/users/cjpit/following{/other_user}", "gists_url": "https://api.github.com/users/cjpit/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjpit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjpit/subscriptions", "organizations_url": "https://api.github.com/users/cjpit/orgs", "repos_url": "https://api.github.com/users/cjpit/repos", "events_url": "https://api.github.com/users/cjpit/events{/privacy}", "received_events_url": "https://api.github.com/users/cjpit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-30T09:36:27Z", "updated_at": "2017-03-30T23:31:37Z", "closed_at": "2017-03-30T11:53:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, Just some background on myself, I've been a c# guy for quite a few years, but have just started to move across to python the last couple of months.\r\n\r\nI started on python 3, and am used to using other DI frameworks in c#, using constructor injection.\r\n\r\nI have a library which does all of my business logic, and uses use_annotations, to inject.  All works fine.\r\nOne of my objects I pass in is my Database object.\r\nI now have a need to use the same library ,but for two different databases.  Each database is for a different company, but I'll need to merge data from both.\r\n\r\nI just can't seem to get my head around how I can achieve this.  At this stage I'm using flask injector, and for example have the following setup:\r\n\r\n```\r\ndef configure(binder):\r\n    db = CLDB(db_username=app.config['QUANTUM_USERNAME'],\r\n              dsn=app.config['QUANTUM_DSN'],\r\n              db_password=app.config['QUANTUM_PASSWORD'],\r\n              logger=app.logger,\r\n              quantum_username=app.config['QUANTUM_MASQUERADE_USER'])\r\n\r\n    # set it up as a singleton.\r\n    binder.bind(CLDB,\r\n                to=db,\r\n                scope=singleton\r\n                )\r\n\r\ninjector = Injector(auto_bind=True, \r\n                             modules=[configure], \r\n                             use_annotations=True)\r\nFlaskInjector(app=app, \r\n                      injector=injector)\r\n\r\n```\r\n\r\nthen I have a separate library that has classes like:\r\n\r\n```\r\nclass MSCIssuer:\r\n\r\n    def __init__(self,\r\n                 db: CLDB,\r\n                 emailer: Emailer,\r\n                 logger: Logger):\r\n        self._db = db\r\n        self._emailer = emailer\r\n        self.logger = logger\r\n\r\n```\r\n\r\nnow say in my merged project I want to instantiate two instances of MSCIssuer.\r\n\r\nOne with CLDB object 1, and one with CLDB object 2, each with different configurations.\r\n\r\nSince I haven't used guice before I'm kind of stuck :(\r\n\r\nThank you.\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/60", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/60/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/60/events", "html_url": "https://github.com/alecthomas/injector/issues/60", "id": 204438231, "node_id": "MDU6SXNzdWUyMDQ0MzgyMzE=", "number": 60, "title": "Does this library support asyncio?", "user": {"login": "tebanep", "id": 6664744, "node_id": "MDQ6VXNlcjY2NjQ3NDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6664744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tebanep", "html_url": "https://github.com/tebanep", "followers_url": "https://api.github.com/users/tebanep/followers", "following_url": "https://api.github.com/users/tebanep/following{/other_user}", "gists_url": "https://api.github.com/users/tebanep/gists{/gist_id}", "starred_url": "https://api.github.com/users/tebanep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tebanep/subscriptions", "organizations_url": "https://api.github.com/users/tebanep/orgs", "repos_url": "https://api.github.com/users/tebanep/repos", "events_url": "https://api.github.com/users/tebanep/events{/privacy}", "received_events_url": "https://api.github.com/users/tebanep/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-31T22:07:55Z", "updated_at": "2017-02-01T02:52:37Z", "closed_at": "2017-01-31T23:21:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would there be any problem in using injector besides asyncio?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/58", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/58/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/58/events", "html_url": "https://github.com/alecthomas/injector/issues/58", "id": 202126435, "node_id": "MDU6SXNzdWUyMDIxMjY0MzU=", "number": 58, "title": "Injecting using mixins?", "user": {"login": "anlutro", "id": 163093, "node_id": "MDQ6VXNlcjE2MzA5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/163093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anlutro", "html_url": "https://github.com/anlutro", "followers_url": "https://api.github.com/users/anlutro/followers", "following_url": "https://api.github.com/users/anlutro/following{/other_user}", "gists_url": "https://api.github.com/users/anlutro/gists{/gist_id}", "starred_url": "https://api.github.com/users/anlutro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anlutro/subscriptions", "organizations_url": "https://api.github.com/users/anlutro/orgs", "repos_url": "https://api.github.com/users/anlutro/repos", "events_url": "https://api.github.com/users/anlutro/events{/privacy}", "received_events_url": "https://api.github.com/users/anlutro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-20T12:14:27Z", "updated_at": "2017-02-01T23:40:42Z", "closed_at": "2017-02-01T23:40:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've got an application where classes can inherit from multiple mixins, which have at least one dependency and may also have various helper methods. Using the `@inject` decorator on the class, this seemed rather straight forward:\r\n\r\n```\r\nfrom injector import Injector, inject\r\n\r\nclass SomeThing: pass\r\nclass OtherThing: pass\r\n\r\n@inject(thing=SomeThing)\r\nclass ThingMixin: pass\r\n\r\n@inject(other=OtherThing)\r\nclass OtherThingMixin: pass\r\n\r\nclass UserClass(ThingMixin, OtherThingMixin):\r\n\tdef mymethod(self):\r\n\t\tprint(self.thing)\r\n\t\tprint(self.other)\r\n```\r\n\r\nThis obviously doesn't work in recent versions where `@inject` on classes has been removed. It doesn't work in 0.10 either: `AttributeError: 'UserClass' object has no attribute 'other'`\r\n\r\nIs there another way to allow this type of design without forcing the author of `UserClass` to declare every dependency in the constructor?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/57", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/57/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/57/events", "html_url": "https://github.com/alecthomas/injector/issues/57", "id": 185324350, "node_id": "MDU6SXNzdWUxODUzMjQzNTA=", "number": 57, "title": "inj.get(AssistedBuilder['object_bind']).build() not working since 0.11.0", "user": {"login": "vcapelca", "id": 2797927, "node_id": "MDQ6VXNlcjI3OTc5Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2797927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vcapelca", "html_url": "https://github.com/vcapelca", "followers_url": "https://api.github.com/users/vcapelca/followers", "following_url": "https://api.github.com/users/vcapelca/following{/other_user}", "gists_url": "https://api.github.com/users/vcapelca/gists{/gist_id}", "starred_url": "https://api.github.com/users/vcapelca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vcapelca/subscriptions", "organizations_url": "https://api.github.com/users/vcapelca/orgs", "repos_url": "https://api.github.com/users/vcapelca/repos", "events_url": "https://api.github.com/users/vcapelca/events{/privacy}", "received_events_url": "https://api.github.com/users/vcapelca/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-26T08:10:14Z", "updated_at": "2017-02-09T12:52:54Z", "closed_at": "2017-02-09T12:52:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "On Injector 0.9.1 we can do the following:\n\n```\nclass DatabaseDriversModule(Module):\n    def configure(self, binder):\n        binder.bind('database_driver_sqlserver', to=Sqlserver, scope=singleton)\n\nclass DBFactory(object):\n    def get_driver(self, driver, host, user, pass):\n        injector = Injector([DatabaseDriversModule])\n        return injector.get(AssistedBuilder('database_driver_' + driver.lower())).build(host, user, pass)\n```\n\nbut the same code (changing \"()\" for \"[]\") isn't working on Injector >= 0.11.0:\n\n```\nFile \"/Library/Python/2.7/site-packages/slippinj-1.2.2-py2.7.egg/slippinj/databases/db_factory.py\", line 26, in get_driver\n    inj.get(AssistedBuilder['database_driver_' + driver.lower()]).build()\n  File \"/Library/Python/2.7/site-packages/injector-0.11.1-py2.7.egg/injector.py\", line 1203, in build\n    binding = binder.get_binding(None, key)\n  File \"/Library/Python/2.7/site-packages/injector-0.11.1-py2.7.egg/injector.py\", line 459, in get_binding\n    binding = self.create_binding(key.interface)\n  File \"/Library/Python/2.7/site-packages/injector-0.11.1-py2.7.egg/injector.py\", line 395, in create_binding\n    provider = self.provider_for(interface, to)\n  File \"/Library/Python/2.7/site-packages/injector-0.11.1-py2.7.egg/injector.py\", line 430, in provider_for\n    elif isinstance(interface, (tuple, type)) and isinstance(to, interface):\n  File \"/Library/Python/2.7/site-packages/typing.py\", line 178, in __instancecheck__\n    raise TypeError(\"Forward references cannot be used with isinstance().\")\nTypeError: Forward references cannot be used with isinstance().\n```\n\nIt works when explicitly setting the class (AssistedBuilder[Sqlserver]) but not when using binds. The reason seems to be related to the _ForwardRef that the injector.py is returning:\n\n```\n0.9.1\ninj.get(AssistedBuilder('database_driver_' + driver.lower())) -> _AssistedBuilder(interface='database_driver_sqlserver', cls=None, callable=None)\n\n0.11.0\ninj.get(AssistedBuilder['database_driver_' + driver.lower()]) -> injector.AssistedBuilder<~T>[_ForwardRef('database_driver_sqlserver\u2019)]\n```\n\nMost of our classes are built like this, could you give us some guidance about it?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/56", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/56/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/56/events", "html_url": "https://github.com/alecthomas/injector/issues/56", "id": 182972163, "node_id": "MDU6SXNzdWUxODI5NzIxNjM=", "number": 56, "title": "@Named annotation support", "user": {"login": "tadas-subonis", "id": 247218, "node_id": "MDQ6VXNlcjI0NzIxOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/247218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tadas-subonis", "html_url": "https://github.com/tadas-subonis", "followers_url": "https://api.github.com/users/tadas-subonis/followers", "following_url": "https://api.github.com/users/tadas-subonis/following{/other_user}", "gists_url": "https://api.github.com/users/tadas-subonis/gists{/gist_id}", "starred_url": "https://api.github.com/users/tadas-subonis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tadas-subonis/subscriptions", "organizations_url": "https://api.github.com/users/tadas-subonis/orgs", "repos_url": "https://api.github.com/users/tadas-subonis/repos", "events_url": "https://api.github.com/users/tadas-subonis/events{/privacy}", "received_events_url": "https://api.github.com/users/tadas-subonis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-14T06:19:20Z", "updated_at": "2017-02-09T14:50:56Z", "closed_at": "2016-10-24T00:08:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a possibility to do something like @Named(\"myQualifier\") in Java ( http://docs.oracle.com/javaee/6/api/javax/inject/Named.html ) using this framework?\n\nThanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/55", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/55/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/55/events", "html_url": "https://github.com/alecthomas/injector/issues/55", "id": 176514502, "node_id": "MDU6SXNzdWUxNzY1MTQ1MDI=", "number": 55, "title": "New release soon?", "user": {"login": "mwgamble", "id": 4494785, "node_id": "MDQ6VXNlcjQ0OTQ3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4494785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwgamble", "html_url": "https://github.com/mwgamble", "followers_url": "https://api.github.com/users/mwgamble/followers", "following_url": "https://api.github.com/users/mwgamble/following{/other_user}", "gists_url": "https://api.github.com/users/mwgamble/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwgamble/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwgamble/subscriptions", "organizations_url": "https://api.github.com/users/mwgamble/orgs", "repos_url": "https://api.github.com/users/mwgamble/repos", "events_url": "https://api.github.com/users/mwgamble/events{/privacy}", "received_events_url": "https://api.github.com/users/mwgamble/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-12T23:57:01Z", "updated_at": "2016-09-15T07:50:44Z", "closed_at": "2016-09-15T00:17:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's been almost two years since the last release and there have been numerous bugfixes since then. I'd like to start using this in a project, but I'd very much prefer if there was a more recent release that encompasses all of these first.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/52", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/52/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/52/events", "html_url": "https://github.com/alecthomas/injector/issues/52", "id": 168856066, "node_id": "MDU6SXNzdWUxNjg4NTYwNjY=", "number": 52, "title": "Singleton scope leaks instances from child injectors", "user": {"login": "canni", "id": 385754, "node_id": "MDQ6VXNlcjM4NTc1NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/385754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canni", "html_url": "https://github.com/canni", "followers_url": "https://api.github.com/users/canni/followers", "following_url": "https://api.github.com/users/canni/following{/other_user}", "gists_url": "https://api.github.com/users/canni/gists{/gist_id}", "starred_url": "https://api.github.com/users/canni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canni/subscriptions", "organizations_url": "https://api.github.com/users/canni/orgs", "repos_url": "https://api.github.com/users/canni/repos", "events_url": "https://api.github.com/users/canni/events{/privacy}", "received_events_url": "https://api.github.com/users/canni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-02T10:54:27Z", "updated_at": "2017-10-16T15:05:57Z", "closed_at": "2017-10-16T15:05:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Show me the code\n\nThis test fails, and IMO it shouldn't according to `SingletonScope` docs, instances are stored _per injector_ so I'd expect this test to pass with no trouble\n\n```\nclass TestChildScope(unittest.TestCase):\n    def test_child_scope(self):\n        TestKey = Key('test')\n        TestKey2 = Key('test2')\n\n        def parent_module(binder):\n            binder.bind(TestKey, to=object, scope=singleton)\n\n        def first_child_module(binder):\n            binder.bind(TestKey2, to=object, scope=singleton)\n\n        def second_child_module(binder):\n            binder.bind(TestKey2, to='marker', scope=singleton)\n\n        injector = Injector(modules=[parent_module])\n        first_child_injector = injector.create_child_injector(modules=[first_child_module])\n        second_child_injector = injector.create_child_injector(modules=[second_child_module])\n\n        self.assertIsNot(first_child_injector.get(TestKey2), second_child_injector.get(TestKey2))\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/51", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/51/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/51/events", "html_url": "https://github.com/alecthomas/injector/issues/51", "id": 150565340, "node_id": "MDU6SXNzdWUxNTA1NjUzNDA=", "number": 51, "title": "Exception handling", "user": {"login": "richburdon", "id": 3523355, "node_id": "MDQ6VXNlcjM1MjMzNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3523355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richburdon", "html_url": "https://github.com/richburdon", "followers_url": "https://api.github.com/users/richburdon/followers", "following_url": "https://api.github.com/users/richburdon/following{/other_user}", "gists_url": "https://api.github.com/users/richburdon/gists{/gist_id}", "starred_url": "https://api.github.com/users/richburdon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richburdon/subscriptions", "organizations_url": "https://api.github.com/users/richburdon/orgs", "repos_url": "https://api.github.com/users/richburdon/repos", "events_url": "https://api.github.com/users/richburdon/events{/privacy}", "received_events_url": "https://api.github.com/users/richburdon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-04-23T15:27:53Z", "updated_at": "2016-04-26T06:10:54Z", "closed_at": "2016-04-26T06:10:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "When something isn't bound the following exception is thrown in BaseKey:\n\n```\nraise Exception('Instantiation of %s prohibited ...)\n```\n\nI think this is run in a different Thread, so in my case, the main Flask app isn't able to catch it, so I have no indication (other than logs) that an error has occurred (esp. since injector is lazy -- with no eager option -- so bindings happen after the server has started).\n\nIs there a workaround?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/49", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/49/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/49/events", "html_url": "https://github.com/alecthomas/injector/issues/49", "id": 121268303, "node_id": "MDU6SXNzdWUxMjEyNjgzMDM=", "number": 49, "title": "runtest.py is not in distribution package", "user": {"login": "mcai4gl2", "id": 4405873, "node_id": "MDQ6VXNlcjQ0MDU4NzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4405873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcai4gl2", "html_url": "https://github.com/mcai4gl2", "followers_url": "https://api.github.com/users/mcai4gl2/followers", "following_url": "https://api.github.com/users/mcai4gl2/following{/other_user}", "gists_url": "https://api.github.com/users/mcai4gl2/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcai4gl2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcai4gl2/subscriptions", "organizations_url": "https://api.github.com/users/mcai4gl2/orgs", "repos_url": "https://api.github.com/users/mcai4gl2/repos", "events_url": "https://api.github.com/users/mcai4gl2/events{/privacy}", "received_events_url": "https://api.github.com/users/mcai4gl2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-09T15:20:34Z", "updated_at": "2016-03-06T23:13:44Z", "closed_at": "2016-03-06T23:13:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I think in Pypi the distribution package doesn't contain runtest.py. This causes running test on distribution package failed. Is there any reason tests are excluded from distribution?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/48", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/48/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/48/events", "html_url": "https://github.com/alecthomas/injector/issues/48", "id": 108747159, "node_id": "MDU6SXNzdWUxMDg3NDcxNTk=", "number": 48, "title": "Too hard to find unbound keys.", "user": {"login": "richburdon", "id": 3523355, "node_id": "MDQ6VXNlcjM1MjMzNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3523355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richburdon", "html_url": "https://github.com/richburdon", "followers_url": "https://api.github.com/users/richburdon/followers", "following_url": "https://api.github.com/users/richburdon/following{/other_user}", "gists_url": "https://api.github.com/users/richburdon/gists{/gist_id}", "starred_url": "https://api.github.com/users/richburdon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richburdon/subscriptions", "organizations_url": "https://api.github.com/users/richburdon/orgs", "repos_url": "https://api.github.com/users/richburdon/repos", "events_url": "https://api.github.com/users/richburdon/events{/privacy}", "received_events_url": "https://api.github.com/users/richburdon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-28T21:07:43Z", "updated_at": "2016-03-07T02:59:57Z", "closed_at": "2016-03-07T02:59:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "When something isn't bound it's very difficult to find what is missing. The error looks like this (after 30 lines of injector.py code):\n\nTypeError: **init**() takes exactly 2 arguments (1 given)\n\nThere is no mention to the Key or class that is missing.\n\nIt would also be really useful to be able to list all bound (and non-bound) keys.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/45", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/45/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/45/events", "html_url": "https://github.com/alecthomas/injector/issues/45", "id": 101296469, "node_id": "MDU6SXNzdWUxMDEyOTY0Njk=", "number": 45, "title": "Multibinder requires instances.", "user": {"login": "richburdon", "id": 3523355, "node_id": "MDQ6VXNlcjM1MjMzNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3523355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richburdon", "html_url": "https://github.com/richburdon", "followers_url": "https://api.github.com/users/richburdon/followers", "following_url": "https://api.github.com/users/richburdon/following{/other_user}", "gists_url": "https://api.github.com/users/richburdon/gists{/gist_id}", "starred_url": "https://api.github.com/users/richburdon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richburdon/subscriptions", "organizations_url": "https://api.github.com/users/richburdon/orgs", "repos_url": "https://api.github.com/users/richburdon/repos", "events_url": "https://api.github.com/users/richburdon/events{/privacy}", "received_events_url": "https://api.github.com/users/richburdon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-16T20:34:46Z", "updated_at": "2017-03-30T12:51:07Z", "closed_at": "2017-03-30T12:51:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I often use multi-binding where I want to use DI to create instances of the sequence -- hence I can't bind instances directly to the sequence key. My workaround is the utility class below, but it feels like this should be built into the framework (esp. since ListOfProviders is markes @private)\n\n``` python\nbinder.multibind(Test.SEQ_KEY, ClassProviderList([MyClass])) # Not an instance.\n\nclass ClassProviderList(ListOfProviders):\n    def __init__(self, classes):\n        super(ClassProviderList, self).__init__()\n        for cls in classes:\n            self.append(ClassProvider(cls))\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/42", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/42/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/42/events", "html_url": "https://github.com/alecthomas/injector/issues/42", "id": 33446398, "node_id": "MDU6SXNzdWUzMzQ0NjM5OA==", "number": 42, "title": "New release", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2014-05-13T22:45:29Z", "updated_at": "2014-05-15T21:08:54Z", "closed_at": "2014-05-15T17:30:50Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hey, can we have tag 0.9.0 release please? Thanks in advance\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/41", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/41/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/41/events", "html_url": "https://github.com/alecthomas/injector/issues/41", "id": 30982950, "node_id": "MDU6SXNzdWUzMDk4Mjk1MA==", "number": 41, "title": "Annotation-based injections are ignored in methods", "user": {"login": "himikof", "id": 43698, "node_id": "MDQ6VXNlcjQzNjk4", "avatar_url": "https://avatars2.githubusercontent.com/u/43698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/himikof", "html_url": "https://github.com/himikof", "followers_url": "https://api.github.com/users/himikof/followers", "following_url": "https://api.github.com/users/himikof/following{/other_user}", "gists_url": "https://api.github.com/users/himikof/gists{/gist_id}", "starred_url": "https://api.github.com/users/himikof/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/himikof/subscriptions", "organizations_url": "https://api.github.com/users/himikof/orgs", "repos_url": "https://api.github.com/users/himikof/repos", "events_url": "https://api.github.com/users/himikof/events{/privacy}", "received_events_url": "https://api.github.com/users/himikof/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2014-04-07T13:17:54Z", "updated_at": "2015-08-17T00:42:23Z", "closed_at": "2015-08-17T00:42:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following test demonstrates the problem (tested on Python 3.3):\n\n``` python\n>>> from injector import *\n>>> inj = Injector(use_annotations=True)\n>>> inj.binder.bind(str, \"Hi\")\n>>> class A:\n...    def __init__(self, a:str):\n...        print(a)\n...    def foo(self, a:str):     \n...        print(a)\n>>> a = inj.create_object(A)\nHi                       \n>>> a.foo()                 \nTypeError: foo() missing 1 required positional argument: 'a'\n```\n\nThe `__init__` injection is performed successfully, but the `a.foo()` call fails. Expected result is:\n\n``` python\n>>> a.foo()                 \nHi                       \n```\n\nThe following works:\n\n``` python\n>>> from injector import *\n>>> inj = Injector(use_annotations=True)\n>>> inj.binder.bind(str, \"Hi\")\n>>> class A:\n...    def __init__(self, a:str):\n...        print(a)\n...    @inject(a=str)\n...    def foo(self, a):     \n...        print(a)\n>>> a = inj.create_object(A)\nHi                       \n>>> a.foo()                 \nHi                       \n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/32", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/32/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/32/events", "html_url": "https://github.com/alecthomas/injector/issues/32", "id": 21166060, "node_id": "MDU6SXNzdWUyMTE2NjA2MA==", "number": 32, "title": "Bug fix release", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-10-17T16:26:33Z", "updated_at": "2014-01-24T08:57:33Z", "closed_at": "2014-01-24T06:37:11Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Can I have 13cad7097a498d03f98534af362aebd930fa8083 (tag 0.7.9) released on PyPI? I pushed it in separate branch, I'll port it to master when I have a moment.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/31", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/31/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/31/events", "html_url": "https://github.com/alecthomas/injector/issues/31", "id": 20934356, "node_id": "MDU6SXNzdWUyMDkzNDM1Ng==", "number": 31, "title": "Deprecate @inject on Module.configure()", "user": {"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2013-10-13T22:19:31Z", "updated_at": "2013-10-14T02:30:42Z", "closed_at": "2013-10-14T02:30:42Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Hey @jstasiak,\n\nI've found over time that injecting arguments to `configure()` methods/functions is often a bad idea, particularly for `SequenceKey` or `MappingKey` keys, _or anything that depends on them_.\n\nThe reason for this is that the value of the keys become dependent on the order of module initialization, as only modules that have already been configured will contribute to the keys. This results in non-deterministic behavior and bugs that are difficult to track down.\n\neg.\n\n``` python\nfrom injector import Injector, SequenceKey, inject\n\n\nA = SequenceKey('A')\n\n\ndef conf(binder):\n    binder.multibind(A, to=[])\n\n\n@inject(a=A)\ndef conf1(binder, a):\n    print a\n    binder.multibind(A, to=[1])\n\n\n@inject(a=A)\ndef conf2(binder, a):\n    print a\n    binder.multibind(A, to=[2])\n\n\nInjector([conf, conf1, conf2])\nInjector([conf, conf2, conf1])\n```\n\nSo, my proposal is that we deprecate support for injected configure() and also module constructors (for the same reason) in the next release, then eventually explicitly deny support.\n\nThoughts?\n\nAlec\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/30", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/30/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/30/events", "html_url": "https://github.com/alecthomas/injector/issues/30", "id": 19588257, "node_id": "MDU6SXNzdWUxOTU4ODI1Nw==", "number": 30, "title": "PyPI release", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-09-17T00:08:08Z", "updated_at": "2013-09-17T00:18:02Z", "closed_at": "2013-09-17T00:16:48Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Assuming the changes look ok, may I have f82d6a320b8928e5281ebc7ceedb64fe9cbb67bc released on PyPI please?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/29", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/29/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/29/events", "html_url": "https://github.com/alecthomas/injector/issues/29", "id": 19529612, "node_id": "MDU6SXNzdWUxOTUyOTYxMg==", "number": 29, "title": "Do we (still) need binding key annotations?", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-09-16T00:26:53Z", "updated_at": "2013-09-18T00:48:59Z", "closed_at": "2013-09-17T23:36:46Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "It seems to me that binding annotations\n1. Don't work with `@inject`\n2. Introduce unnecessary complexity into the API, I haven't used them even once (look at point 1)\n\nThis is connected to readme/doc simplification that I've been thinking about lately.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/28", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/28/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/28/events", "html_url": "https://github.com/alecthomas/injector/issues/28", "id": 18267212, "node_id": "MDU6SXNzdWUxODI2NzIxMg==", "number": 28, "title": "New release", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-08-19T22:15:45Z", "updated_at": "2013-08-20T07:14:31Z", "closed_at": "2013-08-20T02:26:25Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Can I have 3f272705037a530e656a645e4773be4723a88c76 released on PyPI please?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/27", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/27/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/27/events", "html_url": "https://github.com/alecthomas/injector/issues/27", "id": 18264769, "node_id": "MDU6SXNzdWUxODI2NDc2OQ==", "number": 27, "title": "Change log considerations", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-08-19T21:26:13Z", "updated_at": "2013-08-19T21:33:39Z", "closed_at": "2013-08-19T21:33:39Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "IMO it's unnecessary to have change log in both readme (\"Recent Notable Changes\", it's supposed to be kind of a change log as far as I understand it) and a separate file - I'd stick with one of them (at this moment I'm thinking separate file will be better).\n\nAlso - isn't versioning in CHANGES.md off by one? (it looks like it's on purpose but I'm not sure). For example _Auto-convert README.md to RST for PyPi._ is placed in 0.7.5 section but I'd say it's reasonable to name the section 0.7.6 instead as the change was introduced by that version.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/26", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/26/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/26/events", "html_url": "https://github.com/alecthomas/injector/issues/26", "id": 17866464, "node_id": "MDU6SXNzdWUxNzg2NjQ2NA==", "number": 26, "title": "Fix the README so it's rendered correctly on PyPI", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-08-09T14:47:32Z", "updated_at": "2013-08-10T17:07:23Z", "closed_at": "2013-08-10T14:50:46Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/24", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/24/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/24/events", "html_url": "https://github.com/alecthomas/injector/issues/24", "id": 16585242, "node_id": "MDU6SXNzdWUxNjU4NTI0Mg==", "number": 24, "title": "New release", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2013-07-10T15:56:36Z", "updated_at": "2013-07-11T14:27:09Z", "closed_at": "2013-07-11T14:27:09Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Can I have 4bb75cf0fb961f634331007b1fe2932f36424718 released on PyPI? Thanks in advance.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/22", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/22/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/22/events", "html_url": "https://github.com/alecthomas/injector/issues/22", "id": 16172765, "node_id": "MDU6SXNzdWUxNjE3Mjc2NQ==", "number": 22, "title": "Broken 0.7.0 PyPI distribution", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-06-29T09:05:28Z", "updated_at": "2013-06-29T14:41:35Z", "closed_at": "2013-06-29T14:41:35Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "No README.md included, 5d54057042741b166751ba5607a97fc580f15d76 is probably worth releasing as 0.7.1. :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/21", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/21/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/21/events", "html_url": "https://github.com/alecthomas/injector/issues/21", "id": 12303124, "node_id": "MDU6SXNzdWUxMjMwMzEyNA==", "number": 21, "title": "New release", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2013-03-22T01:29:58Z", "updated_at": "2013-03-22T01:35:41Z", "closed_at": "2013-03-22T01:34:27Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Can we have most recent changes released on PyPI?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/20", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/20/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/20/events", "html_url": "https://github.com/alecthomas/injector/issues/20", "id": 12118917, "node_id": "MDU6SXNzdWUxMjExODkxNw==", "number": 20, "title": "CallError wrapping catches legitimate call errors", "user": {"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-03-18T02:32:10Z", "updated_at": "2013-03-18T02:34:24Z", "closed_at": "2013-03-18T02:33:45Z", "author_association": "OWNER", "active_lock_reason": null, "body": "``` python\nclass A(object):\n  @inject(a=int)\n  def __init__(self, a):\n    max()\n\ndef configure(binder):\n  binder.bind(int, to=13)\n\n\ni = Injector([configure])\ni.get(A)\n```\n\nraises\n\n```\nTraceback (most recent call last):\n  File \"t.py\", line 29, in <module>\n    i.get(A)\n  File \"/Users/alec/Projects/injector/injector.py\", line 526, in get\n    return scope_instance.get(key, binding.provider).get()\n  File \"/Users/alec/Projects/injector/injector.py\", line 120, in get\n    return self.injector.create_object(self._cls)\n  File \"/Users/alec/Projects/injector/injector.py\", line 542, in create_object\n    instance.__init__(**additional_kwargs)\n  File \"/Users/alec/Projects/injector/injector.py\", line 720, in inject\n    reraise(CallError(self_, f, args, dependencies, e))\n  File \"/Users/alec/Projects/injector/injector.py\", line 52, in reraise\n    exec('raise exception.__class__, exception, tb')\n  File \"/Users/alec/Projects/injector/injector.py\", line 718, in inject\n    return f(self_, *args, **dependencies)\n  File \"t.py\", line 20, in __init__\n    max()\ninjector.CallError: Call to <__main__.A object at 0x103778950>.__init__(a=13) failed: max expected 1 arguments, got 0\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/18", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/18/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/18/events", "html_url": "https://github.com/alecthomas/injector/issues/18", "id": 12102128, "node_id": "MDU6SXNzdWUxMjEwMjEyOA==", "number": 18, "title": "@inject on an ABCMeta class does not work", "user": {"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2013-03-16T23:18:09Z", "updated_at": "2013-03-18T01:42:27Z", "closed_at": "2013-03-18T01:42:27Z", "author_association": "OWNER", "active_lock_reason": null, "body": "```\nTraceback (most recent call last):\n  File \"app.py\", line 43, in <module>\n    class Controller(object):\n  File \"/Users/alec/Projects/injector/injector.py\", line 744, in multi_wrapper\n    return method_wrapper(something)\n  File \"/Users/alec/Projects/injector/injector.py\", line 701, in method_wrapper\n    args = inspect.getargspec(f)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/inspect.py\", line 813, in getargspec\n    raise TypeError('{!r} is not a Python function'.format(func))\nTypeError: <class '__main__.Controller'> is not a Python function\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/7", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/7/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/7/events", "html_url": "https://github.com/alecthomas/injector/issues/7", "id": 9248530, "node_id": "MDU6SXNzdWU5MjQ4NTMw", "number": 7, "title": "Generalise calling injected functions/methods", "user": {"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2012-12-13T11:00:52Z", "updated_at": "2013-08-08T14:53:12Z", "closed_at": "2013-08-08T14:53:12Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently, injected methods and functions are called using some ad-hoc code in `Injector.args_to_inject()` and the `@inject` decorator. This should be generalised so that it can be eg. used to inject args into `configure()` function modules.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/injector/issues/4", "repository_url": "https://api.github.com/repos/alecthomas/injector", "labels_url": "https://api.github.com/repos/alecthomas/injector/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/injector/issues/4/comments", "events_url": "https://api.github.com/repos/alecthomas/injector/issues/4/events", "html_url": "https://github.com/alecthomas/injector/issues/4", "id": 8436435, "node_id": "MDU6SXNzdWU4NDM2NDM1", "number": 4, "title": "Broken pypi 0.5.0 package", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-11-17T00:34:45Z", "updated_at": "2012-11-17T01:07:10Z", "closed_at": "2012-11-17T01:07:10Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The most recent pypi injector package (http://pypi.python.org/packages/source/i/injector/injector-0.5.0.tar.gz#md5=65d032f6b4edb07625900b736c193e42) has no `README.md` which is needed by setup script to run.\n\n```\n-> % pip install --upgrade injector\nDownloading/unpacking injector from http://pypi.python.org/packages/source/i/injector/injector-0.5.0.tar.gz#md5=65d032f6b4edb07625900b736c193e42\n  Downloading injector-0.5.0.tar.gz\n  Running setup.py egg_info for package injector\n    Traceback (most recent call last):\n      File \"<string>\", line 14, in <module>\n      File \"/home/kuba/ve/build/injector/setup.py\", line 20, in <module>\n        long_description = open('README.md').read()\n    IOError: [Errno 2] No such file or directory: 'README.md'\n```\n", "performed_via_github_app": null, "score": 1.0}]}