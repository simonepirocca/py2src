{"total_count": 215, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/HIPS/autograd/issues/561", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/561/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/561/events", "html_url": "https://github.com/HIPS/autograd/issues/561", "id": 675118870, "node_id": "MDU6SXNzdWU2NzUxMTg4NzA=", "number": 561, "title": "grad evaluation of odeint gradient slower than finite differences", "user": {"login": "JohnGoertz", "id": 9869969, "node_id": "MDQ6VXNlcjk4Njk5Njk=", "avatar_url": "https://avatars0.githubusercontent.com/u/9869969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnGoertz", "html_url": "https://github.com/JohnGoertz", "followers_url": "https://api.github.com/users/JohnGoertz/followers", "following_url": "https://api.github.com/users/JohnGoertz/following{/other_user}", "gists_url": "https://api.github.com/users/JohnGoertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnGoertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnGoertz/subscriptions", "organizations_url": "https://api.github.com/users/JohnGoertz/orgs", "repos_url": "https://api.github.com/users/JohnGoertz/repos", "events_url": "https://api.github.com/users/JohnGoertz/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnGoertz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-07T16:12:36Z", "updated_at": "2020-08-20T00:50:48Z", "closed_at": "2020-08-19T14:01:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Evaluating `grad` on a system of ODE's solved with autograd's `odeint` appears to be ~20x slower than estimating the gradient through finite differences. Is there something wrong here? Is it possible/necessary to calculate the jacobian of the ODE itself and supply that to `odeint`?\r\n\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as npo\r\nimport scipy as sci\r\n\r\nimport autograd.numpy as np\r\nfrom autograd import grad\r\nfrom autograd import jacobian\r\nfrom autograd.scipy.integrate import odeint\r\nfrom autograd.builtins import tuple\r\n\r\nimport time\r\n\r\n        \r\ndef kinetics(C, t, ks):\r\n    k1,k2 = ks\r\n    Ca,Cb,Cc = C\r\n    dCadt = -k1 * Ca\r\n    dCbdt = k1 * Ca - k2 * Cb\r\n    dCcdt = k2 * Cb\r\n    return np.array([dCadt,dCbdt,dCcdt])\r\n    \r\ndef ode_pred(params, y0, t):\r\n    return odeint(kinetics, y0, t, tuple((params,)))\r\n    \r\nt = np.linspace(0,10,5)\r\ntrue_y0 = np.array([1.,0.,0.])\r\ntrue_ks = np.array([1.,1.])\r\ntrue_y = ode_pred(true_ks,true_y0,t)\r\n\r\ndef L1_loss(pred, targets):\r\n    return np.mean(np.abs(pred - targets))\r\n\r\ndef train_loss(params):\r\n    pred = ode_pred(params, true_y0, t)\r\n    return L1_loss(pred, true_y)\r\n\r\njac = grad(train_loss)\r\ninit_ks = true_ks*2\r\njac(init_ks)\r\njac(np.array([0.5,1.5]))\r\n\r\nbegin = time.time()\r\nfit = sci.optimize.minimize(train_loss,init_ks)\r\nend = time.time()\r\nprint('Optimization without jacobian:')\r\nprint(f'Time elapsed: {end-begin} seconds')\r\nprint(fit)\r\n\r\n# Optimization without jacobian:\r\n    \r\n# Time elapsed: 0.36577939987182617 seconds\r\n\r\n#       fun: 5.396792486514866e-09\r\n#  hess_inv: array([[106.09494345, 108.44951657],\r\n#        [108.44951657, 112.80408753]])\r\n#       jac: array([-0.01530422,  0.01716303])\r\n#   message: 'Desired error not necessarily achieved due to precision loss.'\r\n#      nfev: 120\r\n#       nit: 1\r\n#      njev: 36\r\n#    status: 2\r\n#   success: False\r\n#         x: array([0.99999983, 1.00000016])\r\n\r\nbegin = time.time()\r\nfit = sci.optimize.minimize(train_loss,init_ks,jac=jac)\r\nend = time.time()\r\n\r\nprint('Optimization with jacobian:')\r\nprint(f'Time elapsed: {end-begin} seconds')\r\nprint(fit)\r\n\r\n# Optimization with jacobian:\r\n    \r\n# Time elapsed: 16.415971755981445 seconds\r\n\r\n#       fun: 2.001369694450681e-08\r\n#  hess_inv: array([[104.68816163, 107.00018347],\r\n#        [107.00018347, 111.31219715]])\r\n#       jac: array([-0.01536626,  0.01710102])\r\n#   message: 'Desired error not necessarily achieved due to precision loss.'\r\n#      nfev: 76\r\n#       nit: 1\r\n#      njev: 64\r\n#    status: 2\r\n#   success: False\r\n#         x: array([0.99999938, 1.00000062])\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/560", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/560/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/560/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/560/events", "html_url": "https://github.com/HIPS/autograd/issues/560", "id": 673181479, "node_id": "MDU6SXNzdWU2NzMxODE0Nzk=", "number": 560, "title": "Using make_vjp on functions with multiple return values seems to produce zeroed VJPs", "user": {"login": "ianwilliamson", "id": 8869582, "node_id": "MDQ6VXNlcjg4Njk1ODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/8869582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianwilliamson", "html_url": "https://github.com/ianwilliamson", "followers_url": "https://api.github.com/users/ianwilliamson/followers", "following_url": "https://api.github.com/users/ianwilliamson/following{/other_user}", "gists_url": "https://api.github.com/users/ianwilliamson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianwilliamson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianwilliamson/subscriptions", "organizations_url": "https://api.github.com/users/ianwilliamson/orgs", "repos_url": "https://api.github.com/users/ianwilliamson/repos", "events_url": "https://api.github.com/users/ianwilliamson/events{/privacy}", "received_events_url": "https://api.github.com/users/ianwilliamson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-05T01:18:17Z", "updated_at": "2020-08-05T04:32:28Z", "closed_at": "2020-08-05T04:32:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am attempting to use `autograd.make_vjp` on a function that returns multiple values and the VJP function seems to always produced zeroed arrays.\r\n\r\nBelow is a minimum example:\r\n```\r\nimport numpy as np\r\nimport autograd.numpy as npa\r\n\r\nA = np.array([\r\n    [1.0, 2.0, 3.0],\r\n    [4.0, 5.0, 6.0],\r\n    [7.0, 8.0, 9.0],\r\n])\r\nB = np.array([\r\n    [10.0, 11.0, 12.0],\r\n    [13.0, 14.0, 15.0],\r\n    [16.0, 17.0, 18.0],\r\n])\r\n\r\ndef fun(x):\r\n  return npa.matmul(A, x), npa.matmul(B, x)\r\n\r\nx = np.array([-1.0, +1.5, 2.25])\r\n\r\nvjp_fun, ans = autograd.make_vjp(fun)(x)\r\nvjp_fun(autograd.core.vspace(ans).ones())\r\n# array([0., 0., 0.])\r\n```\r\n\r\nIf I modify `fun` to `return npa.matmul(A, x)` the end result becomes non-zero.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/548", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/548/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/548/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/548/events", "html_url": "https://github.com/HIPS/autograd/issues/548", "id": 569255266, "node_id": "MDU6SXNzdWU1NjkyNTUyNjY=", "number": 548, "title": "autograd.numpy.add not supported?", "user": {"login": "kirarpit", "id": 4123853, "node_id": "MDQ6VXNlcjQxMjM4NTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/4123853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirarpit", "html_url": "https://github.com/kirarpit", "followers_url": "https://api.github.com/users/kirarpit/followers", "following_url": "https://api.github.com/users/kirarpit/following{/other_user}", "gists_url": "https://api.github.com/users/kirarpit/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirarpit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirarpit/subscriptions", "organizations_url": "https://api.github.com/users/kirarpit/orgs", "repos_url": "https://api.github.com/users/kirarpit/repos", "events_url": "https://api.github.com/users/kirarpit/events{/privacy}", "received_events_url": "https://api.github.com/users/kirarpit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-22T01:03:03Z", "updated_at": "2020-02-24T18:17:31Z", "closed_at": "2020-02-22T01:04:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "The code block below works just fine\r\n```\r\nimport autograd.numpy as np\r\nfrom autograd import grad\r\ndef exp(x):\r\n    return np.exp(x + 1)\r\nprint(grad(exp)(1.0))\r\n```\r\n\r\nHowever, when I replace np.exp with np.add, I get \"ValueError: invalid number of arguments\" error.\r\nWhat am I missing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/537", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/537/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/537/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/537/events", "html_url": "https://github.com/HIPS/autograd/issues/537", "id": 490530854, "node_id": "MDU6SXNzdWU0OTA1MzA4NTQ=", "number": 537, "title": "Mpi4py Allreduce in forward model", "user": {"login": "mdw771", "id": 20051363, "node_id": "MDQ6VXNlcjIwMDUxMzYz", "avatar_url": "https://avatars2.githubusercontent.com/u/20051363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdw771", "html_url": "https://github.com/mdw771", "followers_url": "https://api.github.com/users/mdw771/followers", "following_url": "https://api.github.com/users/mdw771/following{/other_user}", "gists_url": "https://api.github.com/users/mdw771/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdw771/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdw771/subscriptions", "organizations_url": "https://api.github.com/users/mdw771/orgs", "repos_url": "https://api.github.com/users/mdw771/repos", "events_url": "https://api.github.com/users/mdw771/events{/privacy}", "received_events_url": "https://api.github.com/users/mdw771/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-06T21:30:52Z", "updated_at": "2020-05-04T21:17:48Z", "closed_at": "2020-05-04T21:17:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI've had some successful experiences of using mpi4py with autograd where MPI is used to `Allreduce` the gradients computed *independently* by each thread. Now I'm trying something different for an optical reconstruction algorithm: I'm attempting to parallelize parts of the forward model, in the mid of which there should be data-synchronizing among the threads. Every sync is needed to provide the data necessary for the next distributed computation. Basically, the graph will be something like:\r\n```\r\nRank 0: [scipy.signal.convolve] \\                      / [scipy.signal.convolve] \\\r\nRank 1: [scipy.signal.convolve] --- [Full wavefield] --- [scipy.signal.convolve] --- ...... - [Predicted intensity] -\\\r\nRank 2: [scipy.signal.convolve] /                      \\ [scipy.signal.convolve] /                                    +-- [Cost function]\r\n                                                                                                   [Measurement] ----/\r\n```\r\nFor some reason I can't let each rank calculate its gradient independently, and every rank must borrow part of other ranks' data. In principle I think it will work because as long as you send the `ArrayBox` objects from other ranks, they will keep track the forward propagation. I used this from mpi4py to implement the synchronization:\r\n```\r\ntemp_probe_full_ls = comm.allgather(temp_probe_full)\r\n```\r\nwhere `temp_probe_full` is a Autograd-wrapped Numpy array (ArrayBox).\r\nBut it doesn't work as I got the following error:\r\n```\r\n  File \"mpi4py/MPI/Comm.pyx\", line 1272, in mpi4py.MPI.Comm.allgather\r\n  File \"mpi4py/MPI/msgpickle.pxi\", line 769, in mpi4py.MPI.PyMPI_allgather\r\n  File \"mpi4py/MPI/msgpickle.pxi\", line 104, in mpi4py.MPI.Pickle.dump\r\n  File \"mpi4py/MPI/msgpickle.pxi\", line 91, in mpi4py.MPI.Pickle.cdumps\r\nAttributeError: Can't pickle local object 'VJPNode.initialize_root.<locals>.<lambda>'\r\n```\r\nThe same thing happens if I directly take the sum using `allreduce`.\r\nIf I use the upper case `Allreduce` which is for Numpy arrays, it then gives\r\n```\r\nTypeError: message: expecting buffer or list/tuple\r\n```\r\nIs there a possible workaround for this issue? Any thoughts are appreciated. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/536", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/536/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/536/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/536/events", "html_url": "https://github.com/HIPS/autograd/issues/536", "id": 489822520, "node_id": "MDU6SXNzdWU0ODk4MjI1MjA=", "number": 536, "title": "JVP of slogdet wrt argnums (0,) not defined", "user": {"login": "CarloNicolini", "id": 1758847, "node_id": "MDQ6VXNlcjE3NTg4NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1758847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CarloNicolini", "html_url": "https://github.com/CarloNicolini", "followers_url": "https://api.github.com/users/CarloNicolini/followers", "following_url": "https://api.github.com/users/CarloNicolini/following{/other_user}", "gists_url": "https://api.github.com/users/CarloNicolini/gists{/gist_id}", "starred_url": "https://api.github.com/users/CarloNicolini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CarloNicolini/subscriptions", "organizations_url": "https://api.github.com/users/CarloNicolini/orgs", "repos_url": "https://api.github.com/users/CarloNicolini/repos", "events_url": "https://api.github.com/users/CarloNicolini/events{/privacy}", "received_events_url": "https://api.github.com/users/CarloNicolini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-05T15:01:20Z", "updated_at": "2019-09-05T16:05:50Z", "closed_at": "2019-09-05T16:05:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to compute the derivative of the logdet of a matrix phi(t) with respect to the parameter t.\r\nFor example:\r\n\r\nimport autograd.numpy as np\r\nfrom autograd import deriv\r\nf = deriv(lambda x : np.linalg.slogdet(x*np.eye(4))[1])(4.0)\r\n\r\nUnfortunately though it appears that slogdet has no backpropagation implemented. \r\nI know I can compute slogdet as trace of matrix log of the matrix Phi(t) and in this case backpropagation is handled correctly, but I am scared of numerical issues.\r\nAny idea?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/533", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/533/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/533/events", "html_url": "https://github.com/HIPS/autograd/issues/533", "id": 486869663, "node_id": "MDU6SXNzdWU0ODY4Njk2NjM=", "number": 533, "title": "backward", "user": {"login": "HONGJINLYU", "id": 54664627, "node_id": "MDQ6VXNlcjU0NjY0NjI3", "avatar_url": "https://avatars0.githubusercontent.com/u/54664627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HONGJINLYU", "html_url": "https://github.com/HONGJINLYU", "followers_url": "https://api.github.com/users/HONGJINLYU/followers", "following_url": "https://api.github.com/users/HONGJINLYU/following{/other_user}", "gists_url": "https://api.github.com/users/HONGJINLYU/gists{/gist_id}", "starred_url": "https://api.github.com/users/HONGJINLYU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HONGJINLYU/subscriptions", "organizations_url": "https://api.github.com/users/HONGJINLYU/orgs", "repos_url": "https://api.github.com/users/HONGJINLYU/repos", "events_url": "https://api.github.com/users/HONGJINLYU/events{/privacy}", "received_events_url": "https://api.github.com/users/HONGJINLYU/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-29T10:17:31Z", "updated_at": "2019-08-29T10:17:37Z", "closed_at": "2019-08-29T10:17:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/532", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/532/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/532/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/532/events", "html_url": "https://github.com/HIPS/autograd/issues/532", "id": 479425128, "node_id": "MDU6SXNzdWU0Nzk0MjUxMjg=", "number": 532, "title": "create your own primitive for matrix valued function", "user": {"login": "bpriviere", "id": 13130436, "node_id": "MDQ6VXNlcjEzMTMwNDM2", "avatar_url": "https://avatars0.githubusercontent.com/u/13130436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpriviere", "html_url": "https://github.com/bpriviere", "followers_url": "https://api.github.com/users/bpriviere/followers", "following_url": "https://api.github.com/users/bpriviere/following{/other_user}", "gists_url": "https://api.github.com/users/bpriviere/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpriviere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpriviere/subscriptions", "organizations_url": "https://api.github.com/users/bpriviere/orgs", "repos_url": "https://api.github.com/users/bpriviere/repos", "events_url": "https://api.github.com/users/bpriviere/events{/privacy}", "received_events_url": "https://api.github.com/users/bpriviere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-11T23:09:47Z", "updated_at": "2019-08-12T06:33:05Z", "closed_at": "2019-08-12T06:33:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to create a primitive for a matrix valued function, ie func(x) = y where x is a vector and y is a matrix\r\n\r\nFor example, if I have matrix, A:  \r\nA = [ \r\n   [x[0], x[1]]. \r\n   [x[3], x[4]] ]\r\nI would like to give autograd the jacobian dA/dx as: \r\ndA/dx = [ \r\n   [[1,0,0,0]. [0,1,0,0]],\r\n   [[0,0,1,0], [0,0,0,1]]]\r\n\r\nIf possible, can you please provide an example for this case? I have been using defvjp and having dimensional mismatch issues. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/525", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/525/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/525/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/525/events", "html_url": "https://github.com/HIPS/autograd/issues/525", "id": 467770858, "node_id": "MDU6SXNzdWU0Njc3NzA4NTg=", "number": 525, "title": "Examples and tests do not run", "user": {"login": "niceyeti", "id": 10640439, "node_id": "MDQ6VXNlcjEwNjQwNDM5", "avatar_url": "https://avatars0.githubusercontent.com/u/10640439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niceyeti", "html_url": "https://github.com/niceyeti", "followers_url": "https://api.github.com/users/niceyeti/followers", "following_url": "https://api.github.com/users/niceyeti/following{/other_user}", "gists_url": "https://api.github.com/users/niceyeti/gists{/gist_id}", "starred_url": "https://api.github.com/users/niceyeti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niceyeti/subscriptions", "organizations_url": "https://api.github.com/users/niceyeti/orgs", "repos_url": "https://api.github.com/users/niceyeti/repos", "events_url": "https://api.github.com/users/niceyeti/events{/privacy}", "received_events_url": "https://api.github.com/users/niceyeti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-13T22:03:46Z", "updated_at": "2019-07-15T00:40:57Z", "closed_at": "2019-07-15T00:40:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "This looks like a simple import error w.r.t logsumexp. I installed autograd-1.2 with pip3 and could not run rnn.py or several other examples. Built/installed from source repo, identical result.\r\n\r\nRepro:\r\n>   cd ./autograd/tests\r\n>   python3 test_scipy.py \r\n\r\nResult:\r\n> Traceback (most recent call last):\r\n>   File \"test_scipy.py\", line 14, in <module>\r\n>     import autograd.scipy.signal\r\n>   File \"/home/[user]/.local/lib/python3.5/site-packages/autograd/scipy/__init__.py\", line 7, in <module>\r\n>     from . import misc\r\n>   File \"/home/[user]/.local/lib/python3.5/site-packages/autograd/scipy/misc.py\", line 7, in <module>\r\n>     logsumexp = primitive(scipy.misc.logsumexp)\r\n> AttributeError: module 'scipy.misc' has no attribute 'logsumexp'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/523", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/523/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/523/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/523/events", "html_url": "https://github.com/HIPS/autograd/issues/523", "id": 467557393, "node_id": "MDU6SXNzdWU0Njc1NTczOTM=", "number": 523, "title": "Error in getting gradient for `numpy.linalg.matrxi_power'", "user": {"login": "ndonyapour", "id": 31333163, "node_id": "MDQ6VXNlcjMxMzMzMTYz", "avatar_url": "https://avatars0.githubusercontent.com/u/31333163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndonyapour", "html_url": "https://github.com/ndonyapour", "followers_url": "https://api.github.com/users/ndonyapour/followers", "following_url": "https://api.github.com/users/ndonyapour/following{/other_user}", "gists_url": "https://api.github.com/users/ndonyapour/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndonyapour/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndonyapour/subscriptions", "organizations_url": "https://api.github.com/users/ndonyapour/orgs", "repos_url": "https://api.github.com/users/ndonyapour/repos", "events_url": "https://api.github.com/users/ndonyapour/events{/privacy}", "received_events_url": "https://api.github.com/users/ndonyapour/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-12T19:01:54Z", "updated_at": "2019-07-25T21:16:19Z", "closed_at": "2019-07-25T21:16:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a function that uses the 'numpy.linalg.matrxi_power' function and when I'm trying to get the gradient of it I'm getting the following error:\r\n\r\nimport autograd.numpy.linalg as la\r\nimport autograd.numpy as np\r\nimport autograd.grad as grad\r\ndef f(x):\r\n       return np.sum(la.matrix_power(x, 3))\r\ngrad_func = grad(func)\r\nx = np.random.rand(10, 10)\r\ngrad_func(x)\r\n\r\n---------------------------------------\r\n<ipython-input-18-530aa1bf9292> in <module>()\r\n----> 1 grad_func(x)\r\n\r\n~/anaconda3/lib/python3.6/site-packages/autograd/wrap_util.py in nary_f(*args, **kwargs)\r\n     18             else:\r\n     19                 x = tuple(args[i] for i in argnum)\r\n---> 20             return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n     21         return nary_f\r\n     22     return nary_operator\r\n\r\n~/anaconda3/lib/python3.6/site-packages/autograd/differential_operators.py in grad(fun, x)\r\n     22     arguments as `fun`, but returns the gradient instead. The function `fun`\r\n     23     should be scalar-valued. The gradient has the same type as the argument.\"\"\"\r\n---> 24     vjp, ans = _make_vjp(fun, x)\r\n     25     if not vspace(ans).size == 1:\r\n     26         raise TypeError(\"Grad only applies to real scalar-output functions. \"\r\n\r\n~/anaconda3/lib/python3.6/site-packages/autograd/core.py in make_vjp(fun, x)\r\n      8 def make_vjp(fun, x):\r\n      9     start_node = VJPNode.new_root(x)\r\n---> 10     end_value, end_node =  trace(start_node, fun, x)\r\n     11     if end_node is None:\r\n     12         def vjp(g): return vspace(x).zeros()\r\n\r\n~/anaconda3/lib/python3.6/site-packages/autograd/tracer.py in trace(start_node, fun, x)\r\n      8     with trace_stack.new_trace() as t:\r\n      9         start_box = new_box(x, t, start_node)\r\n---> 10         end_box = fun(start_box)\r\n     11         if isbox(end_box) and end_box._trace == start_box._trace:\r\n     12             return end_box._value, end_box._node\r\n\r\n~/anaconda3/lib/python3.6/site-packages/autograd/wrap_util.py in unary_f(x)\r\n     13                 else:\r\n     14                     subargs = subvals(args, zip(argnum, x))\r\n---> 15                 return fun(*subargs, **kwargs)\r\n     16             if isinstance(argnum, int):\r\n     17                 x = args[argnum]\r\n\r\n<ipython-input-13-7580e05bee78> in func(x)\r\n      1 def func(x):\r\n----> 2     return np.sum(la.matrix_power(x, 3))\r\n      3 \r\n      4 \r\n\r\n~/anaconda3/lib/python3.6/site-packages/autograd/tracer.py in f_wrapped(*args, **kwargs)\r\n     43             argnums = tuple(argnum    for argnum, _   in boxed_args)\r\n     44             ans = f_wrapped(*argvals, **kwargs)\r\n---> 45             node = node_constructor(ans, f_wrapped, argvals, kwargs, argnums, parents)\r\n     46             return new_box(ans, trace, node)\r\n     47         else:\r\n\r\n~/anaconda3/lib/python3.6/site-packages/autograd/core.py in __init__(self, value, fun, args, kwargs, parent_argnums, parents)\r\n     28     def __init__(self, value, fun, args, kwargs, parent_argnums, parents):\r\n     29         self.parents = parents\r\n---> 30         self.vjp = primitive_vjps[fun](parent_argnums, value, args, kwargs)\r\n     31 \r\n     32     def initialize_root(self, value):\r\n\r\nKeyError: <function primitive.<locals>.f_wrapped at 0x2b6acee3f8c8", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/522", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/522/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/522/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/522/events", "html_url": "https://github.com/HIPS/autograd/issues/522", "id": 464948538, "node_id": "MDU6SXNzdWU0NjQ5NDg1Mzg=", "number": 522, "title": "Gradient of `numpy.linalg.eigh` with Hermitian matrix input", "user": {"login": "momchilmm", "id": 19151560, "node_id": "MDQ6VXNlcjE5MTUxNTYw", "avatar_url": "https://avatars3.githubusercontent.com/u/19151560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/momchilmm", "html_url": "https://github.com/momchilmm", "followers_url": "https://api.github.com/users/momchilmm/followers", "following_url": "https://api.github.com/users/momchilmm/following{/other_user}", "gists_url": "https://api.github.com/users/momchilmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/momchilmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/momchilmm/subscriptions", "organizations_url": "https://api.github.com/users/momchilmm/orgs", "repos_url": "https://api.github.com/users/momchilmm/repos", "events_url": "https://api.github.com/users/momchilmm/events{/privacy}", "received_events_url": "https://api.github.com/users/momchilmm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-07T12:39:43Z", "updated_at": "2019-07-30T02:26:25Z", "closed_at": "2019-07-30T02:26:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems to me that `autograd.numpy.linalg.eigh` accepts a Hermitian matrix on the forward pass, but the gradient for that case is wrong, as it is only implemented for real symmetric matrices. I have a simple example of how this is a problem:\r\n```\r\nimport autograd.numpy as npa\r\nfrom autograd import grad\r\n\r\ndef fn(a):\r\n    # Put `a` as an imaginary off-diagonal number of a Hermitian matrix\r\n    mat = npa.array([[1, 1j*a], [-1j*a, 2]]) \r\n    eigs = npa.linalg.eigh(mat)[0] # diagonalize\r\n    return eigs[0] # return the lowest eigenvalue\r\n\r\na = 2. # Some random test value\r\n\r\nprint('Autograd gradient:  ', grad(fn)(a))\r\nprint('Numerical gradient: ', (fn(a + 1e-5)-fn(a))/1e-5) \r\n```\r\n\r\nReturns:\r\n```\r\nAutograd gradient:   0.0\r\nNumerical gradient:  -0.9701426428199155\r\n```\r\n \r\nIt's also written in [this line](https://github.com/HIPS/autograd/blob/387c373115ddd54cff2c8ba6a9fc619f28639cfb/autograd/numpy/linalg.py#L105) that a symmetric matrix is expected.\r\n\r\nI don't really understand the code there so it's not clear to me if there's an easy extension, but some further insight would be greatly appreciated! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/520", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/520/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/520/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/520/events", "html_url": "https://github.com/HIPS/autograd/issues/520", "id": 464914672, "node_id": "MDU6SXNzdWU0NjQ5MTQ2NzI=", "number": 520, "title": "solved", "user": {"login": "doncwilliam", "id": 36778349, "node_id": "MDQ6VXNlcjM2Nzc4MzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/36778349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doncwilliam", "html_url": "https://github.com/doncwilliam", "followers_url": "https://api.github.com/users/doncwilliam/followers", "following_url": "https://api.github.com/users/doncwilliam/following{/other_user}", "gists_url": "https://api.github.com/users/doncwilliam/gists{/gist_id}", "starred_url": "https://api.github.com/users/doncwilliam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doncwilliam/subscriptions", "organizations_url": "https://api.github.com/users/doncwilliam/orgs", "repos_url": "https://api.github.com/users/doncwilliam/repos", "events_url": "https://api.github.com/users/doncwilliam/events{/privacy}", "received_events_url": "https://api.github.com/users/doncwilliam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-07T04:51:07Z", "updated_at": "2019-07-07T18:38:30Z", "closed_at": "2019-07-07T18:38:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/519", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/519/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/519/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/519/events", "html_url": "https://github.com/HIPS/autograd/issues/519", "id": 464726753, "node_id": "MDU6SXNzdWU0NjQ3MjY3NTM=", "number": 519, "title": "solved", "user": {"login": "doncwilliam", "id": 36778349, "node_id": "MDQ6VXNlcjM2Nzc4MzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/36778349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doncwilliam", "html_url": "https://github.com/doncwilliam", "followers_url": "https://api.github.com/users/doncwilliam/followers", "following_url": "https://api.github.com/users/doncwilliam/following{/other_user}", "gists_url": "https://api.github.com/users/doncwilliam/gists{/gist_id}", "starred_url": "https://api.github.com/users/doncwilliam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doncwilliam/subscriptions", "organizations_url": "https://api.github.com/users/doncwilliam/orgs", "repos_url": "https://api.github.com/users/doncwilliam/repos", "events_url": "https://api.github.com/users/doncwilliam/events{/privacy}", "received_events_url": "https://api.github.com/users/doncwilliam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-05T17:42:26Z", "updated_at": "2019-07-07T18:39:16Z", "closed_at": "2019-07-07T18:39:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/516", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/516/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/516/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/516/events", "html_url": "https://github.com/HIPS/autograd/issues/516", "id": 462073761, "node_id": "MDU6SXNzdWU0NjIwNzM3NjE=", "number": 516, "title": "General Question: Gradient of Sum", "user": {"login": "praisethemoon", "id": 22145460, "node_id": "MDQ6VXNlcjIyMTQ1NDYw", "avatar_url": "https://avatars2.githubusercontent.com/u/22145460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/praisethemoon", "html_url": "https://github.com/praisethemoon", "followers_url": "https://api.github.com/users/praisethemoon/followers", "following_url": "https://api.github.com/users/praisethemoon/following{/other_user}", "gists_url": "https://api.github.com/users/praisethemoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/praisethemoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/praisethemoon/subscriptions", "organizations_url": "https://api.github.com/users/praisethemoon/orgs", "repos_url": "https://api.github.com/users/praisethemoon/repos", "events_url": "https://api.github.com/users/praisethemoon/events{/privacy}", "received_events_url": "https://api.github.com/users/praisethemoon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-28T14:53:44Z", "updated_at": "2019-08-11T10:47:03Z", "closed_at": "2019-08-11T10:47:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! \r\n\r\nI came a cross this library a couple of weeks and I am toying with it for I am writing an automatic differentiation tools my self. I am comparing my results with autograd, but I am stuck with gradient of numpy ndarray sum across a given axis, here is the scenario:\r\n\r\n```py\r\nimport autograd.numpy as np\r\nfrom autograd import elementwise_grad as grad\r\n\r\ny = np.linspace(0, 3, 9*3).reshape(3, 3, 3)\r\n\r\ndef f(x):\r\n    return np.sum(x, axis=0)*np.linspace(0, 3, 9).reshape(3, 3)\r\n\r\ng = grad(f)\r\n``` \r\n```py\r\n>>> g(y)\r\narray([[[0.   , 0.375, 0.75 ],\r\n        [1.125, 1.5  , 1.875],\r\n        [2.25 , 2.625, 3.   ]],\r\n\r\n       [[0.   , 0.375, 0.75 ],\r\n        [1.125, 1.5  , 1.875],\r\n        [2.25 , 2.625, 3.   ]],\r\n\r\n       [[0.   , 0.375, 0.75 ],\r\n        [1.125, 1.5  , 1.875],\r\n        [2.25 , 2.625, 3.   ]]])\r\n```\r\n\r\nMy question is, altering the sum axis changes obviously changes the gradient, but I did not find any formula or the corresponding code for some inspirations in order to implement it.\r\n\r\nIf you have any tips please let me know!\r\n\r\nCheers!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/504", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/504/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/504/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/504/events", "html_url": "https://github.com/HIPS/autograd/issues/504", "id": 447987924, "node_id": "MDU6SXNzdWU0NDc5ODc5MjQ=", "number": 504, "title": "Broadcasting limited in python function", "user": {"login": "jmamath", "id": 16581022, "node_id": "MDQ6VXNlcjE2NTgxMDIy", "avatar_url": "https://avatars1.githubusercontent.com/u/16581022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmamath", "html_url": "https://github.com/jmamath", "followers_url": "https://api.github.com/users/jmamath/followers", "following_url": "https://api.github.com/users/jmamath/following{/other_user}", "gists_url": "https://api.github.com/users/jmamath/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmamath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmamath/subscriptions", "organizations_url": "https://api.github.com/users/jmamath/orgs", "repos_url": "https://api.github.com/users/jmamath/repos", "events_url": "https://api.github.com/users/jmamath/events{/privacy}", "received_events_url": "https://api.github.com/users/jmamath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-24T05:39:07Z", "updated_at": "2019-06-10T17:15:06Z", "closed_at": "2019-06-10T17:15:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 3.6\r\nautograd - 1.2 - py_1 - conda-forge\r\n\r\nConsider the following code:\r\n\r\n```\r\nimport autograd.numpy as np \r\nx = np.linspace(-10,10,100)\r\ndef _sigmoid(x):\r\n    return 1 / (1 + np.exp(-1))\r\n\r\nsigmoid = lambda x: (1/1+np.exp(-x))\r\n\r\n_s = _sigmoid(x)\r\ns = sigmoid(x)\r\n```\r\nIf you run it you will find that _s is a single value, whereas s is an array as expected. Why ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/501", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/501/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/501/events", "html_url": "https://github.com/HIPS/autograd/issues/501", "id": 445570793, "node_id": "MDU6SXNzdWU0NDU1NzA3OTM=", "number": 501, "title": "scipy.misc.logsumexp is deprecated", "user": {"login": "wesselb", "id": 1444448, "node_id": "MDQ6VXNlcjE0NDQ0NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1444448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesselb", "html_url": "https://github.com/wesselb", "followers_url": "https://api.github.com/users/wesselb/followers", "following_url": "https://api.github.com/users/wesselb/following{/other_user}", "gists_url": "https://api.github.com/users/wesselb/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesselb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesselb/subscriptions", "organizations_url": "https://api.github.com/users/wesselb/orgs", "repos_url": "https://api.github.com/users/wesselb/repos", "events_url": "https://api.github.com/users/wesselb/events{/privacy}", "received_events_url": "https://api.github.com/users/wesselb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-05-17T18:46:04Z", "updated_at": "2019-07-26T16:41:05Z", "closed_at": "2019-06-04T21:39:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "`scipy.misc.logsumexp`, used [here](https://github.com/HIPS/autograd/blob/65c21e2975fd4d0c6e979c248ee4407e94ed15bf/autograd/scipy/misc.py#L7), is deprecated (see [here](https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.logsumexp.html)), and currently yields an `AttributeError` if AutoGrad is imported with the latest version of SciPy. Simply changing the import to `scipy.special.logsumexp` should be sufficient (see [here](https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.logsumexp.html)).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/496", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/496/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/496/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/496/events", "html_url": "https://github.com/HIPS/autograd/issues/496", "id": 439036858, "node_id": "MDU6SXNzdWU0MzkwMzY4NTg=", "number": 496, "title": "How can I get the actual fn output as well as derivative of parameters when using `grad`?", "user": {"login": "freckletonj", "id": 8399149, "node_id": "MDQ6VXNlcjgzOTkxNDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/8399149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freckletonj", "html_url": "https://github.com/freckletonj", "followers_url": "https://api.github.com/users/freckletonj/followers", "following_url": "https://api.github.com/users/freckletonj/following{/other_user}", "gists_url": "https://api.github.com/users/freckletonj/gists{/gist_id}", "starred_url": "https://api.github.com/users/freckletonj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freckletonj/subscriptions", "organizations_url": "https://api.github.com/users/freckletonj/orgs", "repos_url": "https://api.github.com/users/freckletonj/repos", "events_url": "https://api.github.com/users/freckletonj/events{/privacy}", "received_events_url": "https://api.github.com/users/freckletonj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-01T01:01:26Z", "updated_at": "2019-05-01T16:01:26Z", "closed_at": "2019-05-01T16:01:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "So far, I've been doing this:\r\n\r\n```python\r\ndef f(params, inputs, target):\r\n    ...\r\n    return loss, output\r\n\r\nf_loss = lambda params, inputs, target: f(params, inputs, target)[1]\r\ng = grad(f_loss)\r\n```\r\n\r\nBut I have a function where, when `f` is ran, I want the derivative of `params` along with the `output` and `loss` that the execution of `f` produced.\r\n\r\nI tried this:\r\n\r\n```python\r\ndef new_f(params, ...):\r\n    loss, o = f(params, ...)\r\n    d_params = grad(lambda params: loss)(params)\r\n    return d_params, loss, o\r\n```\r\n\r\nBut, by this point it's too late to get a derivative of loss. So, it returns the \"gradient\" of the now constant `loss`, which is all 0s.\r\n\r\nThanks for this amazing library btw! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/495", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/495/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/495/events", "html_url": "https://github.com/HIPS/autograd/issues/495", "id": 439012304, "node_id": "MDU6SXNzdWU0MzkwMTIzMDQ=", "number": 495, "title": "Unusual behavior of checkpoint", "user": {"login": "ksagit", "id": 25496142, "node_id": "MDQ6VXNlcjI1NDk2MTQy", "avatar_url": "https://avatars1.githubusercontent.com/u/25496142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksagit", "html_url": "https://github.com/ksagit", "followers_url": "https://api.github.com/users/ksagit/followers", "following_url": "https://api.github.com/users/ksagit/following{/other_user}", "gists_url": "https://api.github.com/users/ksagit/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksagit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksagit/subscriptions", "organizations_url": "https://api.github.com/users/ksagit/orgs", "repos_url": "https://api.github.com/users/ksagit/repos", "events_url": "https://api.github.com/users/ksagit/events{/privacy}", "received_events_url": "https://api.github.com/users/ksagit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-30T22:57:14Z", "updated_at": "2019-05-01T22:04:58Z", "closed_at": "2019-05-01T22:04:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code\r\n```\r\nfrom autograd import grad, checkpoint\r\nimport autograd.numpy as np\r\ndef f(x):\r\n    return [x]\r\n\r\nx = np.ones(1)\r\ng = lambda x : f(x)[0]\r\n\r\ngrad(g)(x)\r\n\r\n>>> array([1.])\r\n```\r\nProduces 1 as you'd expect. But the slight modification\r\n```\r\nfrom autograd import grad, checkpoint\r\nimport autograd.numpy as np\r\ndef f(x):\r\n    return [x]\r\n\r\nx = np.ones(1)\r\ng = lambda x : checkpoint(f)(x)[0]\r\n\r\ngrad(g)(x)\r\n\r\n>>> array([0.])\r\n```\r\nProduces 0. I have observed that checkpoint generally does not play well with lists/tuples. Any pointers for resolving this would be really appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/494", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/494/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/494/events", "html_url": "https://github.com/HIPS/autograd/issues/494", "id": 434544146, "node_id": "MDU6SXNzdWU0MzQ1NDQxNDY=", "number": 494, "title": "PyPi package update.", "user": {"login": "kmdade", "id": 22314003, "node_id": "MDQ6VXNlcjIyMzE0MDAz", "avatar_url": "https://avatars0.githubusercontent.com/u/22314003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmdade", "html_url": "https://github.com/kmdade", "followers_url": "https://api.github.com/users/kmdade/followers", "following_url": "https://api.github.com/users/kmdade/following{/other_user}", "gists_url": "https://api.github.com/users/kmdade/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmdade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmdade/subscriptions", "organizations_url": "https://api.github.com/users/kmdade/orgs", "repos_url": "https://api.github.com/users/kmdade/repos", "events_url": "https://api.github.com/users/kmdade/events{/privacy}", "received_events_url": "https://api.github.com/users/kmdade/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-18T00:50:05Z", "updated_at": "2019-07-29T14:33:23Z", "closed_at": "2019-07-29T14:32:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Fantastic software, thank you so much! Would it be possible to update the package on PyPi? It seems many improvements have landed since the last published version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/493", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/493/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/493/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/493/events", "html_url": "https://github.com/HIPS/autograd/issues/493", "id": 431693411, "node_id": "MDU6SXNzdWU0MzE2OTM0MTE=", "number": 493, "title": "Cannot autodiff with dirichlet distribution from scipy.stats ", "user": {"login": "mikewojnowicz", "id": 6597365, "node_id": "MDQ6VXNlcjY1OTczNjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6597365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikewojnowicz", "html_url": "https://github.com/mikewojnowicz", "followers_url": "https://api.github.com/users/mikewojnowicz/followers", "following_url": "https://api.github.com/users/mikewojnowicz/following{/other_user}", "gists_url": "https://api.github.com/users/mikewojnowicz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikewojnowicz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikewojnowicz/subscriptions", "organizations_url": "https://api.github.com/users/mikewojnowicz/orgs", "repos_url": "https://api.github.com/users/mikewojnowicz/repos", "events_url": "https://api.github.com/users/mikewojnowicz/events{/privacy}", "received_events_url": "https://api.github.com/users/mikewojnowicz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-10T20:19:02Z", "updated_at": "2019-05-07T18:49:37Z", "closed_at": "2019-05-07T18:49:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport autograd.numpy as np\r\nfrom autograd import grad \r\n\r\nfrom scipy import stats as ss\r\n\r\n\r\ndef dirichlet_density(alpha, p):\r\n\treturn ss.dirichlet(alpha).logpdf(p)\r\n\r\ngrad_dirichlet_density_wrt_alpha=grad(dirichlet_density ,0)\r\ngrad_dirichlet_density_wrt_alpha(np.array([2.0, 2.0]), np.array([0.5, 0.5]))\r\n```\r\n\r\nyields a `TypeError` with respect to the `gammaln` function\r\n\r\n```\r\n/Users/me/Repos/myrepo/py2-env/lib/python2.7/site-packages/autograd/wrap_util.pyc in nary_f(*args, **kwargs)\r\n     18             else:\r\n     19                 x = tuple(args[i] for i in argnum)\r\n---> 20             return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n     21         return nary_f\r\n     22     return nary_operator\r\n\r\n/Users/me/Repos/myrepo/py2-env/lib/python2.7/site-packages/autograd/differential_operators.pyc in grad(fun, x)\r\n     22     arguments as `fun`, but returns the gradient instead. The function `fun`\r\n     23     should be scalar-valued. The gradient has the same type as the argument.\"\"\"\r\n---> 24     vjp, ans = _make_vjp(fun, x)\r\n     25     if not vspace(ans).size == 1:\r\n     26         raise TypeError(\"Grad only applies to real scalar-output functions. \"\r\n\r\n/Users/me/Repos/myrepo/py2-env/lib/python2.7/site-packages/autograd/core.pyc in make_vjp(fun, x)\r\n      8 def make_vjp(fun, x):\r\n      9     start_node = VJPNode.new_root(x)\r\n---> 10     end_value, end_node =  trace(start_node, fun, x)\r\n     11     if end_node is None:\r\n     12         def vjp(g): return vspace(x).zeros()\r\n\r\n/Users/me/Repos/myrepo/py2-env/lib/python2.7/site-packages/autograd/tracer.pyc in trace(start_node, fun, x)\r\n      8     with trace_stack.new_trace() as t:\r\n      9         start_box = new_box(x, t, start_node)\r\n---> 10         end_box = fun(start_box)\r\n     11         if isbox(end_box) and end_box._trace == start_box._trace:\r\n     12             return end_box._value, end_box._node\r\n\r\n/Users/me/Repos/myrepo/py2-env/lib/python2.7/site-packages/autograd/wrap_util.pyc in unary_f(x)\r\n     13                 else:\r\n     14                     subargs = subvals(args, zip(argnum, x))\r\n---> 15                 return fun(*subargs, **kwargs)\r\n     16             if isinstance(argnum, int):\r\n     17                 x = args[argnum]\r\n\r\n<ipython-input-2-21488bdcf127> in dirichlet_density(alpha, p)\r\n      6 \r\n      7 def dirichlet_density(alpha, p):\r\n----> 8         return ss.dirichlet(alpha).logpdf(p)\r\n      9 \r\n     10 grad_dirichlet_density_wrt_alpha=grad(dirichlet_density ,0)\r\n\r\n/Users/me/Repos/myrepo/py2-env/lib/python2.7/site-packages/scipy/stats/_multivariate.pyc in logpdf(self, x)\r\n   1571 \r\n   1572     def logpdf(self, x):\r\n-> 1573         return self._dist.logpdf(x, self.alpha)\r\n   1574 \r\n   1575     def pdf(self, x):\r\n\r\n/Users/me/Repos/myrepo/py2-env/lib/python2.7/site-packages/scipy/stats/_multivariate.pyc in logpdf(self, x, alpha)\r\n   1449         x = _dirichlet_check_input(alpha, x)\r\n   1450 \r\n-> 1451         out = self._logpdf(x, alpha)\r\n   1452         return _squeeze_output(out)\r\n   1453 \r\n\r\n/Users/me/Repos/myrepo/py2-env/lib/python2.7/site-packages/scipy/stats/_multivariate.pyc in _logpdf(self, x, alpha)\r\n   1427 \r\n   1428         \"\"\"\r\n-> 1429         lnB = _lnB(alpha)\r\n   1430         return - lnB + np.sum((xlogy(alpha - 1, x.T)).T, 0)\r\n   1431 \r\n\r\n/Users/me/Repos/myrepo/py2-env/lib/python2.7/site-packages/scipy/stats/_multivariate.pyc in _lnB(alpha)\r\n   1297 \r\n   1298     \"\"\"\r\n-> 1299     return np.sum(gammaln(alpha)) - gammaln(np.sum(alpha))\r\n   1300 \r\n   1301 \r\n\r\nTypeError: ufunc 'gammaln' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/488", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/488/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/488/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/488/events", "html_url": "https://github.com/HIPS/autograd/issues/488", "id": 421071157, "node_id": "MDU6SXNzdWU0MjEwNzExNTc=", "number": 488, "title": "Use existing VJP inside custom VJP for @primitive function", "user": {"login": "clemisch", "id": 5190547, "node_id": "MDQ6VXNlcjUxOTA1NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5190547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clemisch", "html_url": "https://github.com/clemisch", "followers_url": "https://api.github.com/users/clemisch/followers", "following_url": "https://api.github.com/users/clemisch/following{/other_user}", "gists_url": "https://api.github.com/users/clemisch/gists{/gist_id}", "starred_url": "https://api.github.com/users/clemisch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clemisch/subscriptions", "organizations_url": "https://api.github.com/users/clemisch/orgs", "repos_url": "https://api.github.com/users/clemisch/repos", "events_url": "https://api.github.com/users/clemisch/events{/privacy}", "received_events_url": "https://api.github.com/users/clemisch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-14T15:01:20Z", "updated_at": "2019-03-15T10:30:55Z", "closed_at": "2019-03-14T16:19:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is it possible to use an existing VJP of autograd inside a custom VJP I'm writing for a `@primitive` function?\r\n\r\nI think this would open the possibility to parallelize expensive function while still using autograd for their differentiation. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/479", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/479/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/479/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/479/events", "html_url": "https://github.com/HIPS/autograd/issues/479", "id": 413531401, "node_id": "MDU6SXNzdWU0MTM1MzE0MDE=", "number": 479, "title": "How is autograd differentiating this program?", "user": {"login": "krishvishal", "id": 7289509, "node_id": "MDQ6VXNlcjcyODk1MDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7289509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishvishal", "html_url": "https://github.com/krishvishal", "followers_url": "https://api.github.com/users/krishvishal/followers", "following_url": "https://api.github.com/users/krishvishal/following{/other_user}", "gists_url": "https://api.github.com/users/krishvishal/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishvishal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishvishal/subscriptions", "organizations_url": "https://api.github.com/users/krishvishal/orgs", "repos_url": "https://api.github.com/users/krishvishal/repos", "events_url": "https://api.github.com/users/krishvishal/events{/privacy}", "received_events_url": "https://api.github.com/users/krishvishal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-22T18:49:14Z", "updated_at": "2019-02-22T21:03:01Z", "closed_at": "2019-02-22T21:03:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using [autograd][1] package in python, I'm trying the differential programming aspect of automatic differentiation. This is a code I wrote:\r\n\r\n    from autograd import elementwise_grad as egrad\r\n\r\n    def f2(a, b):\r\n        c = b * a\r\n        return a\r\n\r\n    grad_f2 = egrad(f2)\r\n    print(grad_f2(2.0, 3.0))\r\n\r\n\r\nwhen the function returns `a`, then `grad_f2`'s value is `1.0` when I change the return to `b`, then `grad_f2`'s value is `0.0`. I don't understand why this is happening ? How does differentiating programs work ?  \r\n\r\n  [1]: https://github.com/HIPS/autograd\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/475", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/475/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/475/events", "html_url": "https://github.com/HIPS/autograd/issues/475", "id": 410479991, "node_id": "MDU6SXNzdWU0MTA0Nzk5OTE=", "number": 475, "title": "ode_net example reference error", "user": {"login": "mh510", "id": 35148775, "node_id": "MDQ6VXNlcjM1MTQ4Nzc1", "avatar_url": "https://avatars3.githubusercontent.com/u/35148775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mh510", "html_url": "https://github.com/mh510", "followers_url": "https://api.github.com/users/mh510/followers", "following_url": "https://api.github.com/users/mh510/following{/other_user}", "gists_url": "https://api.github.com/users/mh510/gists{/gist_id}", "starred_url": "https://api.github.com/users/mh510/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mh510/subscriptions", "organizations_url": "https://api.github.com/users/mh510/orgs", "repos_url": "https://api.github.com/users/mh510/repos", "events_url": "https://api.github.com/users/mh510/events{/privacy}", "received_events_url": "https://api.github.com/users/mh510/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-14T20:33:28Z", "updated_at": "2019-02-15T07:38:28Z", "closed_at": "2019-02-15T07:38:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi, i'm relatively new to autograd and python in general. i would like to run the ode_net example and getting a no module error, namly \"No module named 'autograd.scipy.integrate'\". does this module have another name these days? best, michael", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/472", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/472/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/472/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/472/events", "html_url": "https://github.com/HIPS/autograd/issues/472", "id": 405742972, "node_id": "MDU6SXNzdWU0MDU3NDI5NzI=", "number": 472, "title": "RuntimeWarning: divide by zero encountered in power", "user": {"login": "Arka7Z", "id": 22312345, "node_id": "MDQ6VXNlcjIyMzEyMzQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/22312345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arka7Z", "html_url": "https://github.com/Arka7Z", "followers_url": "https://api.github.com/users/Arka7Z/followers", "following_url": "https://api.github.com/users/Arka7Z/following{/other_user}", "gists_url": "https://api.github.com/users/Arka7Z/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arka7Z/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arka7Z/subscriptions", "organizations_url": "https://api.github.com/users/Arka7Z/orgs", "repos_url": "https://api.github.com/users/Arka7Z/repos", "events_url": "https://api.github.com/users/Arka7Z/events{/privacy}", "received_events_url": "https://api.github.com/users/Arka7Z/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-01T15:14:23Z", "updated_at": "2019-02-01T18:21:51Z", "closed_at": "2019-02-01T18:21:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\ndef undifferentiated_term(lamda,i,j):\r\n    retval=0.0\r\n    retval=retval+X[0][j,j]\r\n    for k in range(1,i+1):\r\n        retval=retval+(X[k][j,j])*(np.power(lamda,k))\r\n    retval=np.sqrt(retval)\r\n    return retval\r\ndef diff_func(i,j):\r\n    f=undifferentiated_term\r\n    for k in range(i):\r\n        gradient=grad(f,0)\r\n        f=gradient\r\n    return gradient(0.0,i,j)\r\n```\r\nIn the above code snippet `X` is a dictionary where each value is a numpy matrix, `i` and `j` are iteration indices.\r\nEvaluating the gradient at 0.0 as shown above is giving `RuntimeWarning: divide by zero encountered in power` whereas the value of `k` is always positive and there is no way `lamda` with zero as input is raised to a negative power. \r\n``` \r\nRuntimeWarning: invalid value encountered in double_scalars\r\n  anp.power.defgrad(lambda ans, x, y : unbroadcast(ans, x, lambda g : g * y * x ** (y - 1)))\r\n/home/cules/anaconda3/lib/python3.6/site-packages/autograd/numpy/numpy_grads.py:67: RuntimeWarning: invalid value encountered in double_scalars\r\n  anp.multiply.defgrad(lambda ans, x, y : unbroadcast(ans, x, lambda g : y * g))\r\n```\r\nI am unable to understand if there is any reconstruction of the form `x/x` involved and `x` is essentially 0.0. Is there a getaway around it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/471", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/471/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/471/events", "html_url": "https://github.com/HIPS/autograd/issues/471", "id": 405661855, "node_id": "MDU6SXNzdWU0MDU2NjE4NTU=", "number": 471, "title": "Freeze the gradient expression tree", "user": {"login": "martin-ueding", "id": 976924, "node_id": "MDQ6VXNlcjk3NjkyNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/976924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martin-ueding", "html_url": "https://github.com/martin-ueding", "followers_url": "https://api.github.com/users/martin-ueding/followers", "following_url": "https://api.github.com/users/martin-ueding/following{/other_user}", "gists_url": "https://api.github.com/users/martin-ueding/gists{/gist_id}", "starred_url": "https://api.github.com/users/martin-ueding/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martin-ueding/subscriptions", "organizations_url": "https://api.github.com/users/martin-ueding/orgs", "repos_url": "https://api.github.com/users/martin-ueding/repos", "events_url": "https://api.github.com/users/martin-ueding/events{/privacy}", "received_events_url": "https://api.github.com/users/martin-ueding/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-01T11:27:37Z", "updated_at": "2019-02-01T17:42:59Z", "closed_at": "2019-02-01T17:42:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a Hybrid Monte Carlo simulation where we need to compute the gradient over and over. Our particular function works such that the structure of the derivative does not change, just the numbers that we plug in.\r\n\r\nAs I understand autograd it will evaluate the the function once with a wrapper around the data to see which expression tree comes out, then it builds the derivative from that. I know that for our case that this is not going to change, so if I could \u201cfreeze\u201d this gradient expression tree it would save a lot of time for us.\r\n\r\nIn the profile I see that about 52 % of the time is spend building that tree and 47 % on evaluating it.\r\n\r\n![snakeviz_001_initial_all](https://user-images.githubusercontent.com/976924/52120365-59db6100-261c-11e9-8453-2b3fefa2c022.png)\r\n\r\nIs it possible to build the tree only once and then just plug in different numbers?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/468", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/468/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/468/events", "html_url": "https://github.com/HIPS/autograd/issues/468", "id": 402982630, "node_id": "MDU6SXNzdWU0MDI5ODI2MzA=", "number": 468, "title": "Numpy FutureWarnings", "user": {"login": "martiningram", "id": 8013690, "node_id": "MDQ6VXNlcjgwMTM2OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8013690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martiningram", "html_url": "https://github.com/martiningram", "followers_url": "https://api.github.com/users/martiningram/followers", "following_url": "https://api.github.com/users/martiningram/following{/other_user}", "gists_url": "https://api.github.com/users/martiningram/gists{/gist_id}", "starred_url": "https://api.github.com/users/martiningram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martiningram/subscriptions", "organizations_url": "https://api.github.com/users/martiningram/orgs", "repos_url": "https://api.github.com/users/martiningram/repos", "events_url": "https://api.github.com/users/martiningram/events{/privacy}", "received_events_url": "https://api.github.com/users/martiningram/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-25T02:46:29Z", "updated_at": "2019-06-11T14:25:57Z", "closed_at": "2019-06-11T14:25:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nFirst off, thanks for making autograd. It's my new favourite python library and feels like magic a lot of the time!\r\n\r\nI notice that numpy 1.15 is throwing a lot of `FutureWarning`s at me when running autograd:\r\n\r\n```python\r\n/anaconda2/envs/py3/lib/python3.6/site-packages/autograd/numpy/numpy_boxes.py:13: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\r\n  def __getitem__(A, idx): return A[idx]\r\n```\r\n\r\nLooks like it's fine for now, but it would be nice to be future-proof. Hopefully not a big change?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/466", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/466/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/466/events", "html_url": "https://github.com/HIPS/autograd/issues/466", "id": 402695412, "node_id": "MDU6SXNzdWU0MDI2OTU0MTI=", "number": 466, "title": "tensordot and axes", "user": {"login": "stefansommer", "id": 11538786, "node_id": "MDQ6VXNlcjExNTM4Nzg2", "avatar_url": "https://avatars0.githubusercontent.com/u/11538786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefansommer", "html_url": "https://github.com/stefansommer", "followers_url": "https://api.github.com/users/stefansommer/followers", "following_url": "https://api.github.com/users/stefansommer/following{/other_user}", "gists_url": "https://api.github.com/users/stefansommer/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefansommer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefansommer/subscriptions", "organizations_url": "https://api.github.com/users/stefansommer/orgs", "repos_url": "https://api.github.com/users/stefansommer/repos", "events_url": "https://api.github.com/users/stefansommer/events{/privacy}", "received_events_url": "https://api.github.com/users/stefansommer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-24T12:58:47Z", "updated_at": "2019-02-05T10:32:08Z", "closed_at": "2019-02-05T10:32:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As far as I can see, the axis specification of tensordot is ignored when computing derivatives. In this example, the Jacobian is of the wrong sign (it takes derivative of `-x` instead of `x`):\r\n\r\n```python\r\n(lambda x: np.tensordot(np.array([1,0]),np.array([[0,-x],[x,0]]),(0,1)))(1.)\r\n>>> array([0., 1.])\r\n\r\njacobian(lambda x: np.tensordot(np.array([1,0]),np.array([[0,-x],[x,0]]),(0,1)))(1.)\r\n>>> array([ 0., -1.])\r\n\r\n >>> check_grads(lambda x: np.tensordot(np.array([1,0]),np.array([[0,-x],[x,0]]),(0,1)))(1.)\r\nTraceback (most recent call last):\r\n...\r\nAssertionError: Derivative (VJP) check of jvp_<lambda> failed with arg\r\n(1.0, array(-0.43170061)):\r\nanalytic: -0.1353787902305393\r\nnumeric:  0.13537879021567292\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/464", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/464/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/464/events", "html_url": "https://github.com/HIPS/autograd/issues/464", "id": 401767742, "node_id": "MDU6SXNzdWU0MDE3Njc3NDI=", "number": 464, "title": "Can we compute gradients on the GPU ?", "user": {"login": "karanchahal", "id": 13203966, "node_id": "MDQ6VXNlcjEzMjAzOTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/13203966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karanchahal", "html_url": "https://github.com/karanchahal", "followers_url": "https://api.github.com/users/karanchahal/followers", "following_url": "https://api.github.com/users/karanchahal/following{/other_user}", "gists_url": "https://api.github.com/users/karanchahal/gists{/gist_id}", "starred_url": "https://api.github.com/users/karanchahal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karanchahal/subscriptions", "organizations_url": "https://api.github.com/users/karanchahal/orgs", "repos_url": "https://api.github.com/users/karanchahal/repos", "events_url": "https://api.github.com/users/karanchahal/events{/privacy}", "received_events_url": "https://api.github.com/users/karanchahal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-22T13:36:46Z", "updated_at": "2019-02-14T06:53:10Z", "closed_at": "2019-02-14T06:53:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am curious to know if autograd can work on the GPU. Also wanted to know if putting the calculations on the GPU will lead to substantial speed benefits. Can someone please direct me to relevant resources ?\r\n\r\nThanks !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/463", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/463/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/463/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/463/events", "html_url": "https://github.com/HIPS/autograd/issues/463", "id": 401072492, "node_id": "MDU6SXNzdWU0MDEwNzI0OTI=", "number": 463, "title": "Jacobian of Hessian seems to go wrong...", "user": {"login": "martiningram", "id": 8013690, "node_id": "MDQ6VXNlcjgwMTM2OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8013690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martiningram", "html_url": "https://github.com/martiningram", "followers_url": "https://api.github.com/users/martiningram/followers", "following_url": "https://api.github.com/users/martiningram/following{/other_user}", "gists_url": "https://api.github.com/users/martiningram/gists{/gist_id}", "starred_url": "https://api.github.com/users/martiningram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martiningram/subscriptions", "organizations_url": "https://api.github.com/users/martiningram/orgs", "repos_url": "https://api.github.com/users/martiningram/repos", "events_url": "https://api.github.com/users/martiningram/events{/privacy}", "received_events_url": "https://api.github.com/users/martiningram/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-20T07:56:58Z", "updated_at": "2019-01-20T11:11:19Z", "closed_at": "2019-01-20T09:59:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI have the following function:\r\n\r\n```\r\ndef log_marginal_lik(f_hat, X, y, var, lscales):\r\n    \r\n    hess_f_hat = hessian(calculate_posterior)(\r\n        f_hat, X, y, var, lscales)\r\n\r\n    sign, logdet = np.linalg.slogdet(-hess_f_hat)\r\n    logdet = sign * logdet\r\n\r\n    modal_posterior = calculate_posterior(\r\n        f_hat, X, y, var, lscales)\r\n    total = modal_posterior - 0.5 * logdet + np.log(2 * np.pi) * (\r\n        f_hat.shape[0] / 2)\r\n    \r\n    return total\r\n```\r\n\r\nI then differentiate it with respect to `var` like so:\r\n\r\n```\r\nexpl_grad_var = jacobian(log_marginal_lik, 3)(f_hat, X, y, var, lscales)\r\n```\r\n\r\nHowever, the result differs from finite differences, when called so:\r\n\r\n```\r\nfrom scipy.optimize import approx_fprime\r\n\r\nfor_fprime = lambda var: log_marginal_lik(f_hat, X, y, var, lscales)\r\n\r\napprox_fprime(np.array(var).reshape(-1), for_fprime, \r\n              np.sqrt(np.finfo(np.float).eps))\r\n```\r\n\r\nDoes anyone have any idea why? My guess is that it might have something to do with the fact that it is computing the hessian within `log_marginal_lik`?\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/460", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/460/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/460/events", "html_url": "https://github.com/HIPS/autograd/issues/460", "id": 393605335, "node_id": "MDU6SXNzdWUzOTM2MDUzMzU=", "number": 460, "title": "```autograd.scipy.stats.multivariate_normal.logpdf``` does not work within a function.", "user": {"login": "rgiordan", "id": 4494910, "node_id": "MDQ6VXNlcjQ0OTQ5MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4494910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rgiordan", "html_url": "https://github.com/rgiordan", "followers_url": "https://api.github.com/users/rgiordan/followers", "following_url": "https://api.github.com/users/rgiordan/following{/other_user}", "gists_url": "https://api.github.com/users/rgiordan/gists{/gist_id}", "starred_url": "https://api.github.com/users/rgiordan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rgiordan/subscriptions", "organizations_url": "https://api.github.com/users/rgiordan/orgs", "repos_url": "https://api.github.com/users/rgiordan/repos", "events_url": "https://api.github.com/users/rgiordan/events{/privacy}", "received_events_url": "https://api.github.com/users/rgiordan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-21T22:16:14Z", "updated_at": "2019-01-31T19:56:56Z", "closed_at": "2019-01-31T19:56:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I seem to be unable to get ```multivariate_normal.logpdf``` to work with ```autograd``` when wrapped in another function.  Below are steps to reproduce. \r\n\r\nIf this is not a bug, I would like to know what I'm doing wrong. \r\n\r\n```\r\nimport autograd\r\nimport autograd.numpy as np\r\nimport autograd.scipy as sp\r\nfrom autograd.test_util import check_grads\r\n\r\nnum_obs = 1000\r\n\r\n# Some valid values\r\ntrue_sigma = \\\r\n    np.eye(3) * np.diag(np.array([1, 2, 3])) + \\\r\n    np.random.random((3, 3)) * 0.1\r\ntrue_sigma = 0.5 * (true_sigma + true_sigma.T)\r\n\r\ntrue_mu = np.array([0, 1, 2])\r\n\r\nx = np.random.multivariate_normal(\r\n    mean=true_mu, cov=true_sigma, size=(num_obs, ))\r\n\r\n# Succeeds\r\nprint('Differentiation succeeds')\r\ncheck_grads(autograd.scipy.stats.multivariate_normal.logpdf, modes=['rev'])(x, true_mu, true_sigma)\r\n\r\n# Fails\r\ntry:\r\n    def logpdf_mu(mu):\r\n        return np.sum(autograd.scipy.stats.multivariate_normal.logpdf(x, mu, true_sigma))\r\n    print('Can evaluate the function: ', logpdf_mu(true_mu))\r\n    check_grads(logpdf_mu, modes=['rev'])(true_mu)\r\nexcept AssertionError as err:\r\n    print('Differentiation fails:\\ntest_util.py 31:\\tassert vspace(vjp_y) == x_vs')\r\n\r\ntry:\r\n    def logpdf_mu(mu):\r\n        return np.sum(autograd.scipy.stats.multivariate_normal.logpdf(x, mean=mu, cov=true_sigma))\r\n    print('Can evaluate the function: ', logpdf_mu(true_mu))\r\n    check_grads(logpdf_mu, modes=['rev'])(true_mu)\r\nexcept TypeError as err:\r\n    print('Differentiation fails: ' + str(err))\r\n```\r\n\r\nOutput:\r\n```\r\nSucceeds\r\nCan evaluate the function:  -5165.838149252399\r\nDifferentiation fails:\r\ntest_util.py 31:\tassert vspace(vjp_y) == x_vs\r\nCan evaluate the function:  -5165.838149252399\r\nDifferentiation fails: Can't differentiate w.r.t. type <class 'numpy.int64'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/454", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/454/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/454/events", "html_url": "https://github.com/HIPS/autograd/issues/454", "id": 387719951, "node_id": "MDU6SXNzdWUzODc3MTk5NTE=", "number": 454, "title": "Memory usage in vectorised Jacobian computation", "user": {"login": "matt-graham", "id": 6746980, "node_id": "MDQ6VXNlcjY3NDY5ODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/6746980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt-graham", "html_url": "https://github.com/matt-graham", "followers_url": "https://api.github.com/users/matt-graham/followers", "following_url": "https://api.github.com/users/matt-graham/following{/other_user}", "gists_url": "https://api.github.com/users/matt-graham/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt-graham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt-graham/subscriptions", "organizations_url": "https://api.github.com/users/matt-graham/orgs", "repos_url": "https://api.github.com/users/matt-graham/repos", "events_url": "https://api.github.com/users/matt-graham/events{/privacy}", "received_events_url": "https://api.github.com/users/matt-graham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-05T11:47:00Z", "updated_at": "2018-12-11T02:20:57Z", "closed_at": "2018-12-11T02:20:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm interested in using Autograd to compute Jacobians. As the inbuilt `jacobian` function can be slow in some cases due to (I think) the interpreter overhead in iteratively computing a vector Jacobian product for each each output dimension, I've been using a slightly hacky vectorised alternative. \r\n\r\nSpecifically I make sure all the functions which I need to compute Jacobians for broadcast over the leading dimensions of the input(s). So for example for a function `func` which as the base case takes an array `u` as argument with shape `shape_u` and returns an array `y = func(u)` with `shape_y` then if we instead input an array `u` with shape `(n,) + shape_u` we expect the returned `y = func(u)` to have shape `(n,) + shape_y` and that `all([np.allclose(y[i], func(u[i])) for i in range(n)]) == True`.  For a function of this type then the below `jacobian_and_value` function, (adapted from the functions in the `autograd.differential_operators` module) will compute the Jacobian by tiling `size_output` copies of the input along the leading dimension where `size_output` is the size of the output array, then computes a single 'vector' Jacobian product using the identity matrix (or generalisation for output arrays with more than one dimension in the base case) as the 'vector'.\r\n\r\n```Python\r\nfrom autograd.wrap_util import unary_to_nary\r\nfrom autograd.builtins import tuple as atuple\r\nfrom autograd.core import make_vjp as _make_vjp\r\nfrom autograd.extend import vspace\r\nimport autograd.numpy as np\r\n\r\n@unary_to_nary\r\ndef jacobian_and_value(fun, x):\r\n    val = fun(x)\r\n    v_vspace = vspace(val)\r\n    x_vspace = vspace(x)\r\n    x_rep = np.tile(x, (v_vspace.size,) + (1,) * x_vspace.ndim)\r\n    vjp_rep, _ = _make_vjp(fun, x_rep)\r\n    jacobian_shape = v_vspace.shape + x_vspace.shape\r\n    basis_vectors = np.array([b for b in v_vspace.standard_basis()])\r\n    jacobian = vjp_rep(basis_vectors)\r\n    return np.reshape(jacobian, jacobian_shape), val\r\n```\r\n\r\nIn terms of computation time, this can give quite significant savings over the inbuilt `jacobian` function in some cases due to pushing more work in to NumPy array functions. However it has a couple of downsides \r\n\r\n  * The memory usage is now of order [size of output] times higher than the inbuilt `jacobian` function as all the intermediate values computed in the the forward pass for each of the replicated inputs now need to be stored for the backwards pass.\r\n  * Relatedly we now compute the forward pass for multiple identical inputs while we should only really require to compute the forward pass once. As this just gives a small constant factor overhead in the overall computation time for the Jacobian this is less of a problem.\r\n\r\nI have found the increased memory usage to be particularly problematic when the function being differentiated involves a loop with lots of iterations (e.g. the timestepping loop in the numerical integration of a ODE / PDE system), as even the memory usage associated with tracing a single forward pass can be quite significant in this case.\r\n\r\nI originally played around with trying to see if I could use the VJP function returned by `make_vjp` for evaluating the function on the original non-replicated input to do something similar, however (unsurprisingly) this didn't work as even if the primitive calls in the original forward function broadcast as required along the leading dimensions, the corresponding primitive VJP calls in the backward pass do not necessarily do so. I also tried adding an extra leading dimension of length one to the input passed to `make_vjp` however this didn't help (again not surprising). The main culprits for operations in the function causing issues when trying to broadcast in the backwards pass I've encountered so far are slicing arrays (and corresponding `untake` calls in the backwards pass) and calls to `numpy.reshape`.\r\n\r\nIt seems what I want to do is exactly what would be achieved by the tensor Jacobian products proposed in PR #280 by @mattjj however I am not sure if that is something actively being worked on anymore or not?\r\n\r\nOtherwise I was wondering if anyone has any other ideas of possible ways for achieve something like this without the memory overhead?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/453", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/453/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/453/events", "html_url": "https://github.com/HIPS/autograd/issues/453", "id": 386274416, "node_id": "MDU6SXNzdWUzODYyNzQ0MTY=", "number": 453, "title": "Black box variational inference example", "user": {"login": "keimperk", "id": 22914901, "node_id": "MDQ6VXNlcjIyOTE0OTAx", "avatar_url": "https://avatars2.githubusercontent.com/u/22914901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keimperk", "html_url": "https://github.com/keimperk", "followers_url": "https://api.github.com/users/keimperk/followers", "following_url": "https://api.github.com/users/keimperk/following{/other_user}", "gists_url": "https://api.github.com/users/keimperk/gists{/gist_id}", "starred_url": "https://api.github.com/users/keimperk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keimperk/subscriptions", "organizations_url": "https://api.github.com/users/keimperk/orgs", "repos_url": "https://api.github.com/users/keimperk/repos", "events_url": "https://api.github.com/users/keimperk/events{/privacy}", "received_events_url": "https://api.github.com/users/keimperk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-30T17:09:47Z", "updated_at": "2018-12-01T18:22:18Z", "closed_at": "2018-12-01T18:22:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "When you generate random samples from posterior, shouldn't you do \r\n\r\n```python\r\nsamples = rs.randn(num_samples, D) * np.sqrt(np.exp(log_std)) + mean\r\n```\r\n\r\ninstead of\r\n\r\n```python\r\nsamples = rs.randn(num_samples, D) * np.exp(log_std) + mean\r\n```\r\nhttps://github.com/HIPS/autograd/blob/master/examples/black_box_svi.py#L30", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/451", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/451/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/451/events", "html_url": "https://github.com/HIPS/autograd/issues/451", "id": 384059644, "node_id": "MDU6SXNzdWUzODQwNTk2NDQ=", "number": 451, "title": "Python 3 syntax errors: print() is a function in Python 3", "user": {"login": "cclauss", "id": 3709715, "node_id": "MDQ6VXNlcjM3MDk3MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cclauss", "html_url": "https://github.com/cclauss", "followers_url": "https://api.github.com/users/cclauss/followers", "following_url": "https://api.github.com/users/cclauss/following{/other_user}", "gists_url": "https://api.github.com/users/cclauss/gists{/gist_id}", "starred_url": "https://api.github.com/users/cclauss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cclauss/subscriptions", "organizations_url": "https://api.github.com/users/cclauss/orgs", "repos_url": "https://api.github.com/users/cclauss/repos", "events_url": "https://api.github.com/users/cclauss/events{/privacy}", "received_events_url": "https://api.github.com/users/cclauss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-25T08:37:42Z", "updated_at": "2018-11-26T16:54:54Z", "closed_at": "2018-11-26T16:54:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://travis-ci.org/HIPS/autograd/jobs/459340911#L1038-L1050", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/450", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/450/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/450/events", "html_url": "https://github.com/HIPS/autograd/issues/450", "id": 384059567, "node_id": "MDU6SXNzdWUzODQwNTk1Njc=", "number": 450, "title": "Missing imports? 57 undefined names on Python 2.7", "user": {"login": "cclauss", "id": 3709715, "node_id": "MDQ6VXNlcjM3MDk3MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cclauss", "html_url": "https://github.com/cclauss", "followers_url": "https://api.github.com/users/cclauss/followers", "following_url": "https://api.github.com/users/cclauss/following{/other_user}", "gists_url": "https://api.github.com/users/cclauss/gists{/gist_id}", "starred_url": "https://api.github.com/users/cclauss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cclauss/subscriptions", "organizations_url": "https://api.github.com/users/cclauss/orgs", "repos_url": "https://api.github.com/users/cclauss/repos", "events_url": "https://api.github.com/users/cclauss/events{/privacy}", "received_events_url": "https://api.github.com/users/cclauss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-25T08:36:09Z", "updated_at": "2018-11-26T14:43:53Z", "closed_at": "2018-11-26T14:43:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://travis-ci.org/HIPS/autograd/jobs/459340909#L833", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/448", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/448/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/448/events", "html_url": "https://github.com/HIPS/autograd/issues/448", "id": 383184211, "node_id": "MDU6SXNzdWUzODMxODQyMTE=", "number": 448, "title": "Where can I find how to use the grad_odeint ?", "user": {"login": "zdhNarsil", "id": 30065320, "node_id": "MDQ6VXNlcjMwMDY1MzIw", "avatar_url": "https://avatars0.githubusercontent.com/u/30065320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdhNarsil", "html_url": "https://github.com/zdhNarsil", "followers_url": "https://api.github.com/users/zdhNarsil/followers", "following_url": "https://api.github.com/users/zdhNarsil/following{/other_user}", "gists_url": "https://api.github.com/users/zdhNarsil/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdhNarsil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdhNarsil/subscriptions", "organizations_url": "https://api.github.com/users/zdhNarsil/orgs", "repos_url": "https://api.github.com/users/zdhNarsil/repos", "events_url": "https://api.github.com/users/zdhNarsil/events{/privacy}", "received_events_url": "https://api.github.com/users/zdhNarsil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-21T15:57:07Z", "updated_at": "2018-12-01T18:25:58Z", "closed_at": "2018-12-01T18:25:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "the grad function of odeint in scipy, which is grad_odeint, is defined in `autograd/scipy/integrate.py`\r\nbut I can't call this function as I can do with other grad functions:\r\n```\r\nfrom scipy.integrate import odeint\r\n\r\n#  dynamics of ode: dy/dt = pend(y, t), this is the example of scipy.integrate.odeint\r\ndef pend(y, t, b, c):\r\n    theta, omega = y\r\n    dydt = [omega, -b*omega - c*np.sin(theta)]\r\n    return dydt\r\n\r\nb = 0.25\r\nc = 5.0\r\ny0 = [np.pi - 0.1, 0.0]\r\nt = np.linspace(0, 10, 101)\r\n\r\nsol = odeint(pend, y0, t, args=(b, c))  # this is a normal and successful call of odeint\r\n\r\nfrom autograd import grad\r\nmy_grad_odeint = grad(odeint) \r\nmy_grad_odeint(pend, y0, t, args=(b, c))   # I imitate the call of 'grad' in the tutorial but this is wrong, why?\r\n```\r\nthe error says: `TypeError: Can't differentiate w.r.t. type <class 'function'>` and I have no idea.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/447", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/447/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/447/events", "html_url": "https://github.com/HIPS/autograd/issues/447", "id": 383171439, "node_id": "MDU6SXNzdWUzODMxNzE0Mzk=", "number": 447, "title": "Support for np.gradient", "user": {"login": "clemisch", "id": 5190547, "node_id": "MDQ6VXNlcjUxOTA1NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5190547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clemisch", "html_url": "https://github.com/clemisch", "followers_url": "https://api.github.com/users/clemisch/followers", "following_url": "https://api.github.com/users/clemisch/following{/other_user}", "gists_url": "https://api.github.com/users/clemisch/gists{/gist_id}", "starred_url": "https://api.github.com/users/clemisch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clemisch/subscriptions", "organizations_url": "https://api.github.com/users/clemisch/orgs", "repos_url": "https://api.github.com/users/clemisch/repos", "events_url": "https://api.github.com/users/clemisch/events{/privacy}", "received_events_url": "https://api.github.com/users/clemisch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-21T15:30:45Z", "updated_at": "2019-04-11T06:34:15Z", "closed_at": "2019-04-11T06:34:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is it possible to add support for `numpy.gradient` in `autograd.grad`? \r\n\r\nI'm using `numpy.gradient` for computing a cost function in statistical tomographic reconstruction. As it is an optimization task, I need the gradient for the cost function, which is particularly nasty to derive manually when taking into account the pairwise neighbourhoods of pixels. Therefore it would be awesome if I could use `autograd` for this.\r\n\r\nMinimal example:\r\n\r\n```python\r\nimport autograd.numpy as np\r\nimport autograd as ag\r\n\r\ndef grad_test(x):\r\n    return np.sum(np.gradient(x))\r\n\r\nvg = ag.grad(grad_test)\r\nvg(np.random.rand(10, 10, 10))\r\n```\r\n\r\ngives `NotImplementedError: VJP of gradient wrt argnums (0,) not defined` :cry: \r\n\r\nPS: What does the error mean?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/446", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/446/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/446/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/446/events", "html_url": "https://github.com/HIPS/autograd/issues/446", "id": 382833951, "node_id": "MDU6SXNzdWUzODI4MzM5NTE=", "number": 446, "title": "np.savez having trouble?", "user": {"login": "rekino", "id": 2434082, "node_id": "MDQ6VXNlcjI0MzQwODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2434082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rekino", "html_url": "https://github.com/rekino", "followers_url": "https://api.github.com/users/rekino/followers", "following_url": "https://api.github.com/users/rekino/following{/other_user}", "gists_url": "https://api.github.com/users/rekino/gists{/gist_id}", "starred_url": "https://api.github.com/users/rekino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rekino/subscriptions", "organizations_url": "https://api.github.com/users/rekino/orgs", "repos_url": "https://api.github.com/users/rekino/repos", "events_url": "https://api.github.com/users/rekino/events{/privacy}", "received_events_url": "https://api.github.com/users/rekino/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-20T20:23:27Z", "updated_at": "2018-11-26T17:04:28Z", "closed_at": "2018-11-26T17:04:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to write and later read the parameters learned by autograd. But np.load seems to be deserializing into a wrong type of datatype. I am using the example code in neural_net.py and after loading the optimized_params from .npz file, l2_norm crashes with the error:\r\n\"ValueError: operands could not be broadcast together with shapes (784, 200) and (200, 100)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/443", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/443/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/443/events", "html_url": "https://github.com/HIPS/autograd/issues/443", "id": 380645797, "node_id": "MDU6SXNzdWUzODA2NDU3OTc=", "number": 443, "title": "AttributeError: 'ArrayBox' object has no attribute 'log'", "user": {"login": "kasakh", "id": 31774865, "node_id": "MDQ6VXNlcjMxNzc0ODY1", "avatar_url": "https://avatars0.githubusercontent.com/u/31774865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kasakh", "html_url": "https://github.com/kasakh", "followers_url": "https://api.github.com/users/kasakh/followers", "following_url": "https://api.github.com/users/kasakh/following{/other_user}", "gists_url": "https://api.github.com/users/kasakh/gists{/gist_id}", "starred_url": "https://api.github.com/users/kasakh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kasakh/subscriptions", "organizations_url": "https://api.github.com/users/kasakh/orgs", "repos_url": "https://api.github.com/users/kasakh/repos", "events_url": "https://api.github.com/users/kasakh/events{/privacy}", "received_events_url": "https://api.github.com/users/kasakh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-14T11:01:39Z", "updated_at": "2018-11-14T11:04:09Z", "closed_at": "2018-11-14T11:04:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to maximize the marginal likelihoods in a mixture model using autograd. \r\n\r\n```\r\nfrom __future__ import absolute_import\r\nfrom __future__ import print_function\r\nfrom builtins import range\r\n\r\nfrom autograd.misc.optimizers import adam\r\nfrom autograd.test_util import check_grads\r\n\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\nimport autograd.numpy as np\r\nimport autograd.numpy.random as npr\r\nfrom autograd import grad, hessian_vector_product\r\nfrom scipy.optimize import minimize\r\nfrom autograd.scipy.misc import logsumexp\r\nimport autograd.scipy.stats.multivariate_normal as mvn\r\nfrom autograd.misc.flatten import flatten_func\r\nfrom data import make_pinwheel\r\n\r\n\r\ndef init_gmm_params(num_components, D, scale, rs=npr.RandomState(0)):\r\n    return {'log proportions': rs.randn(num_components) * scale,\r\n            'means':           rs.randn(num_components, D) * scale,\r\n            'lower triangles': np.zeros((num_components, D, D)) + np.eye(D)}\r\n\r\nparams = init_gmm_params(num_components=3, D=2, scale=0.1)\r\n\r\ndata = make_pinwheel(radial_std=0.3, tangential_std=0.05, num_classes=3,\r\n                         num_per_class=100, rate=0.4)\r\n\r\ndef log_normalize(x):\r\n    return x - logsumexp(x)\r\n\r\ndef normal_logpdf(X,mu,var):\r\n    return - 0.5 * np.log( 2 * np.pi * var) \\\r\n           - 0.5 * ((X - mu)**2)/var\r\n\r\ndef unpack_gmm_params(params):\r\n    normalized_log_proportions = log_normalize(params['log proportions'])\r\n    return normalized_log_proportions, params['means'], params['lower triangles']\r\n\r\ndef marginal_loglikelihood(params,data):\r\n    #marginal_likelihood = np.zeros((np.shape(data)[0],np.shape(data)[1]))\r\n\r\n    marginal_likelihood = []\r\n    for i in range(np.shape(data)[1]):\r\n        for j in range(np.shape(data)[0]):\r\n            junk = []\r\n            for log_proportion, mean, cov_sqrt in zip(*unpack_gmm_params(params)):\r\n                cov = np.dot(cov_sqrt.T, cov_sqrt)\r\n                junk.append(np.exp(log_proportion)*np.exp(normal_logpdf(data[j,i],mean[i],cov[i,i])))\r\n            marginal_likelihood.append(np.sum(junk))\r\n            #print(sum(junk))\r\n    return np.sum(np.log(marginal_likelihood))\r\ngrad_marg = grad(marginal_loglikelihood,0)\r\ngrad_marg(params,data)\r\n```\r\n\r\nWhen I run this code, it says that AttributeError: 'ArrayBox' object has no attribute 'log'.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/442", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/442/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/442/events", "html_url": "https://github.com/HIPS/autograd/issues/442", "id": 376159659, "node_id": "MDU6SXNzdWUzNzYxNTk2NTk=", "number": 442, "title": "Jacobian and aux", "user": {"login": "johannbrehmer", "id": 17068560, "node_id": "MDQ6VXNlcjE3MDY4NTYw", "avatar_url": "https://avatars1.githubusercontent.com/u/17068560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johannbrehmer", "html_url": "https://github.com/johannbrehmer", "followers_url": "https://api.github.com/users/johannbrehmer/followers", "following_url": "https://api.github.com/users/johannbrehmer/following{/other_user}", "gists_url": "https://api.github.com/users/johannbrehmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/johannbrehmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johannbrehmer/subscriptions", "organizations_url": "https://api.github.com/users/johannbrehmer/orgs", "repos_url": "https://api.github.com/users/johannbrehmer/repos", "events_url": "https://api.github.com/users/johannbrehmer/events{/privacy}", "received_events_url": "https://api.github.com/users/johannbrehmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-31T21:04:16Z", "updated_at": "2018-11-12T17:12:37Z", "closed_at": "2018-11-12T15:05:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIs it possible to combine the functionality of `jacobian()` and `grad_and_aux()`? My code is basically\r\n\r\n```\r\ndef f(x, y):\r\n    # ...\r\n    z = [some_function(x, y), other_function(x, y)]\r\n    aux = last_function(x, y)\r\n    return z, aux\r\n```\r\n\r\nand I need the Jacobian dz/dx as well as the unmodified `aux`.\r\n\r\n`grad_and_aux()` only seems to support scalar functions, and `jacobian()` and `elementwise_grad()` don't seem to support the passing through of the second output.  Due to some stochasticity in the functions it is impractical to use two separate calls to `f(x,y)` and its derivative.\r\n\r\nThanks a lot,\r\nJohann", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/441", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/441/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/441/events", "html_url": "https://github.com/HIPS/autograd/issues/441", "id": 374679928, "node_id": "MDU6SXNzdWUzNzQ2Nzk5Mjg=", "number": 441, "title": "Exception when computing the gradient of a function that uses np.pad", "user": {"login": "crowsonkb", "id": 4657022, "node_id": "MDQ6VXNlcjQ2NTcwMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4657022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crowsonkb", "html_url": "https://github.com/crowsonkb", "followers_url": "https://api.github.com/users/crowsonkb/followers", "following_url": "https://api.github.com/users/crowsonkb/following{/other_user}", "gists_url": "https://api.github.com/users/crowsonkb/gists{/gist_id}", "starred_url": "https://api.github.com/users/crowsonkb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crowsonkb/subscriptions", "organizations_url": "https://api.github.com/users/crowsonkb/orgs", "repos_url": "https://api.github.com/users/crowsonkb/repos", "events_url": "https://api.github.com/users/crowsonkb/events{/privacy}", "received_events_url": "https://api.github.com/users/crowsonkb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-27T19:26:59Z", "updated_at": "2018-10-28T15:54:10Z", "closed_at": "2018-10-28T15:54:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using both the version of autograd on PyPI and the master branch, I get an exception when trying to compute the gradient of a function that uses `np.pad`. Here is a simple example:\r\n\r\n```python\r\nfrom autograd import grad\r\nimport autograd.numpy as np\r\n\r\n\r\ndef f(x):\r\n    x = np.pad(x, ((1, 1),), 'constant')\r\n    return np.sum(x**2)\r\n\r\ng = grad(f)\r\ng(np.zeros(2))\r\n```\r\n\r\nThis raises the exception:\r\n\r\n```python-traceback\r\nTraceback (most recent call last):\r\n  File \"pad_demo.py\", line 10, in <module>\r\n    g(np.zeros(2))\r\n  File \"/Users/kat/Documents/projects/pylab/venv/lib/python3.7/site-packages/autograd/wrap_util.py\", line 20, in nary_f\r\n    return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n  File \"/Users/kat/Documents/projects/pylab/venv/lib/python3.7/site-packages/autograd/differential_operators.py\", line 24, in grad\r\n    vjp, ans = _make_vjp(fun, x)\r\n  File \"/Users/kat/Documents/projects/pylab/venv/lib/python3.7/site-packages/autograd/core.py\", line 10, in make_vjp\r\n    end_value, end_node =  trace(start_node, fun, x)\r\n  File \"/Users/kat/Documents/projects/pylab/venv/lib/python3.7/site-packages/autograd/tracer.py\", line 10, in trace\r\n    end_box = fun(start_box)\r\n  File \"/Users/kat/Documents/projects/pylab/venv/lib/python3.7/site-packages/autograd/wrap_util.py\", line 15, in unary_f\r\n    return fun(*subargs, **kwargs)\r\n  File \"pad_demo.py\", line 6, in f\r\n    x = np.pad(x, ((1, 1),), 'constant')\r\n  File \"/Users/kat/Documents/projects/pylab/venv/lib/python3.7/site-packages/autograd/tracer.py\", line 45, in f_wrapped\r\n    node = node_constructor(ans, f_wrapped, argvals, kwargs, argnums, parents)\r\n  File \"/Users/kat/Documents/projects/pylab/venv/lib/python3.7/site-packages/autograd/core.py\", line 30, in __init__\r\n    self.vjp = primitive_vjps[fun](parent_argnums, value, args, kwargs)\r\nKeyError: <function primitive.<locals>.f_wrapped at 0x109928950>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/440", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/440/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/440/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/440/events", "html_url": "https://github.com/HIPS/autograd/issues/440", "id": 371667279, "node_id": "MDU6SXNzdWUzNzE2NjcyNzk=", "number": 440, "title": "Error on grad_odeint", "user": {"login": "mansura-habiba", "id": 26741425, "node_id": "MDQ6VXNlcjI2NzQxNDI1", "avatar_url": "https://avatars3.githubusercontent.com/u/26741425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mansura-habiba", "html_url": "https://github.com/mansura-habiba", "followers_url": "https://api.github.com/users/mansura-habiba/followers", "following_url": "https://api.github.com/users/mansura-habiba/following{/other_user}", "gists_url": "https://api.github.com/users/mansura-habiba/gists{/gist_id}", "starred_url": "https://api.github.com/users/mansura-habiba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mansura-habiba/subscriptions", "organizations_url": "https://api.github.com/users/mansura-habiba/orgs", "repos_url": "https://api.github.com/users/mansura-habiba/repos", "events_url": "https://api.github.com/users/mansura-habiba/events{/privacy}", "received_events_url": "https://api.github.com/users/mansura-habiba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-18T19:01:25Z", "updated_at": "2018-10-22T23:16:36Z", "closed_at": "2018-10-22T23:16:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "For \r\ngrad_odeint\r\nI am getting the following error \r\n\r\nz = grad_odeint(zt, model,z0,t, func_args=(friction,))\r\nHowever, I am getting the following error \r\n---> 21     T, D = np.shape(yt)\r\n     22     flat_args, unflatten = flatten(func_args)\r\n     23 \r\n\r\nValueError: not enough values to unpack (expected 2, got 1)\r\n\r\nAny example available for the grad_odeint", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/439", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/439/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/439/events", "html_url": "https://github.com/HIPS/autograd/issues/439", "id": 370830481, "node_id": "MDU6SXNzdWUzNzA4MzA0ODE=", "number": 439, "title": "forward mode Jacobian", "user": {"login": "plisdku", "id": 6510640, "node_id": "MDQ6VXNlcjY1MTA2NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/6510640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plisdku", "html_url": "https://github.com/plisdku", "followers_url": "https://api.github.com/users/plisdku/followers", "following_url": "https://api.github.com/users/plisdku/following{/other_user}", "gists_url": "https://api.github.com/users/plisdku/gists{/gist_id}", "starred_url": "https://api.github.com/users/plisdku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plisdku/subscriptions", "organizations_url": "https://api.github.com/users/plisdku/orgs", "repos_url": "https://api.github.com/users/plisdku/repos", "events_url": "https://api.github.com/users/plisdku/events{/privacy}", "received_events_url": "https://api.github.com/users/plisdku/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-10-16T22:49:09Z", "updated_at": "2018-11-26T17:15:23Z", "closed_at": "2018-11-26T17:05:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a need for a fast, forward-mode Jacobian and I see such a thing was implemented (partially? completely?) but not merged last year because there was no solid use case.  I wonder what the barriers are to finishing/merging that project?  (If there is more work to do maybe I can help.)\r\n\r\nMy application is a curve-fitting problem in spectroscopy.  My model function accepts order of one or several dozen parameters and produces order of 1000 data points.  The model function is horrid and also under development so it would be splendid to get the derivatives \"for free\".\r\n\r\nIt works in reverse mode on the sum of squares of the residual but I need the whole Jacobian because I want to use Levenberg-Marquardt.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/438", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/438/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/438/events", "html_url": "https://github.com/HIPS/autograd/issues/438", "id": 370393600, "node_id": "MDU6SXNzdWUzNzAzOTM2MDA=", "number": 438, "title": "Issue with ODE example", "user": {"login": "ericmjl", "id": 2631566, "node_id": "MDQ6VXNlcjI2MzE1NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericmjl", "html_url": "https://github.com/ericmjl", "followers_url": "https://api.github.com/users/ericmjl/followers", "following_url": "https://api.github.com/users/ericmjl/following{/other_user}", "gists_url": "https://api.github.com/users/ericmjl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericmjl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericmjl/subscriptions", "organizations_url": "https://api.github.com/users/ericmjl/orgs", "repos_url": "https://api.github.com/users/ericmjl/repos", "events_url": "https://api.github.com/users/ericmjl/events{/privacy}", "received_events_url": "https://api.github.com/users/ericmjl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-16T00:30:06Z", "updated_at": "2018-10-22T18:23:22Z", "closed_at": "2018-10-22T18:23:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Copying and pasting the ODE example into my own installation of Autograd (from master) gives an error. I have attached a Jupyter notebook PDF output, hopefully it illustrates what's going on.\r\n\r\n[autograd-ode.pdf](https://github.com/HIPS/autograd/files/2480949/autograd-ode.pdf)\r\n\r\nIt appears there's something wrong with the transformation of the parameters? @duvenaud just wondering what version of autograd you were using when you created your example?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/436", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/436/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/436/events", "html_url": "https://github.com/HIPS/autograd/issues/436", "id": 369487847, "node_id": "MDU6SXNzdWUzNjk0ODc4NDc=", "number": 436, "title": "AttributeError: 'ArrayBox' object has no attribute 'exp' (very simple code example) ", "user": {"login": "Duncanswilson", "id": 7635452, "node_id": "MDQ6VXNlcjc2MzU0NTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/7635452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Duncanswilson", "html_url": "https://github.com/Duncanswilson", "followers_url": "https://api.github.com/users/Duncanswilson/followers", "following_url": "https://api.github.com/users/Duncanswilson/following{/other_user}", "gists_url": "https://api.github.com/users/Duncanswilson/gists{/gist_id}", "starred_url": "https://api.github.com/users/Duncanswilson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Duncanswilson/subscriptions", "organizations_url": "https://api.github.com/users/Duncanswilson/orgs", "repos_url": "https://api.github.com/users/Duncanswilson/repos", "events_url": "https://api.github.com/users/Duncanswilson/events{/privacy}", "received_events_url": "https://api.github.com/users/Duncanswilson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-12T10:13:11Z", "updated_at": "2018-10-12T12:20:33Z", "closed_at": "2018-10-12T12:20:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having trouble getting anything to work the way I'm defining my functions, it's probably user error, but my example is terse. \r\n\r\nI'm just trying to define a simple neural network and keep running into issues using `np.tanh()` or `np.exp()` and the only similar errors I could find are from having nested data structures, which I don't have. \r\n\r\nHere's my full code snippet: \r\n\r\n```\r\nimport autograd.numpy as np\r\nfrom autograd import grad\r\n\r\naction_dim = 2\r\nfeature_dim = 6\r\nlayer_dim = 4 \r\nw1 = np.random.rand(feature_dim, layer_dim)\r\nb1 = np.random.rand(layer_dim)\r\nw2 = np.random.rand(layer_dim, action_dim)\r\nb2 = np.random.rand(action_dim)\r\n\r\ndef continuous_policy_function(w1, b1, w2, b2):\r\n    x = observation.dot(w1) + b1\r\n    x = 1.0 / (1.0 + np.exp(-x))  # sigmoid \"squashing\" function to interval [0,1]\r\n    out = x.dot(w2) + b2\r\n    return out \r\n\r\ngrad_function = grad(continuous_policy_function)\r\nobservation = np.random.rand(feature_dim)\r\naction = continuous_policy_function(w1, b1, w2, b2)\r\nprint(grad_function(w1, b1, w2, b2))\r\n```\r\n\r\nand the full trace: \r\n```\r\nTraceback (most recent call last):\r\n  File \"annoying_autograd.py\", line 55, in <module>\r\n    print(grad_function(w1, b1, w2, b2))\r\n  File \"/usr/local/Cellar/python3/3.6.4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/autograd/wrap_util.py\", line 20, in nary_f\r\n    return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n  File \"/usr/local/Cellar/python3/3.6.4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/autograd/differential_operators.py\", line 24, in grad\r\n    vjp, ans = _make_vjp(fun, x)\r\n  File \"/usr/local/Cellar/python3/3.6.4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/autograd/core.py\", line 10, in make_vjp\r\n    end_value, end_node =  trace(start_node, fun, x)\r\n  File \"/usr/local/Cellar/python3/3.6.4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/autograd/tracer.py\", line 10, in trace\r\n    end_box = fun(start_box)\r\n  File \"/usr/local/Cellar/python3/3.6.4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/autograd/wrap_util.py\", line 15, in unary_f\r\n    return fun(*subargs, **kwargs)\r\n  File \"annoying_autograd.py\", line 29, in continuous_policy_function\r\n    x = 1.0 / (1.0 + np.exp(-x))  # sigmoid \"squashing\" function to interval [0,1]\r\n  File \"/usr/local/Cellar/python3/3.6.4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/autograd/tracer.py\", line 48, in f_wrapped\r\n    return f_raw(*args, **kwargs)\r\nAttributeError: 'ArrayBox' object has no attribute 'exp'\r\n```\r\n\r\nI'm using Python 3.6.4 and and autograd 1.2 which I pulled from pip this morning. \r\n\r\nPlease let me know what I'm doing wrong here! :) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/434", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/434/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/434/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/434/events", "html_url": "https://github.com/HIPS/autograd/issues/434", "id": 366412789, "node_id": "MDU6SXNzdWUzNjY0MTI3ODk=", "number": 434, "title": "nograd_primitive ", "user": {"login": "hoanguc3m", "id": 7287528, "node_id": "MDQ6VXNlcjcyODc1Mjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7287528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hoanguc3m", "html_url": "https://github.com/hoanguc3m", "followers_url": "https://api.github.com/users/hoanguc3m/followers", "following_url": "https://api.github.com/users/hoanguc3m/following{/other_user}", "gists_url": "https://api.github.com/users/hoanguc3m/gists{/gist_id}", "starred_url": "https://api.github.com/users/hoanguc3m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hoanguc3m/subscriptions", "organizations_url": "https://api.github.com/users/hoanguc3m/orgs", "repos_url": "https://api.github.com/users/hoanguc3m/repos", "events_url": "https://api.github.com/users/hoanguc3m/events{/privacy}", "received_events_url": "https://api.github.com/users/hoanguc3m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-03T16:02:33Z", "updated_at": "2018-10-17T09:59:11Z", "closed_at": "2018-10-17T09:59:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I did not find the closed issue of nograd_primitive so I open one.\r\nI am reading an old code that has this line\r\n```\r\nfrom autograd import nograd_primitive\r\n```\r\nSo how can I modify the code to ensure that autograd does not take the gradient through it.\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/431", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/431/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/431/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/431/events", "html_url": "https://github.com/HIPS/autograd/issues/431", "id": 363764188, "node_id": "MDU6SXNzdWUzNjM3NjQxODg=", "number": 431, "title": "np.pad padding by (0,0) in any dimension returns an empty gradient", "user": {"login": "antipa", "id": 4605335, "node_id": "MDQ6VXNlcjQ2MDUzMzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4605335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antipa", "html_url": "https://github.com/antipa", "followers_url": "https://api.github.com/users/antipa/followers", "following_url": "https://api.github.com/users/antipa/following{/other_user}", "gists_url": "https://api.github.com/users/antipa/gists{/gist_id}", "starred_url": "https://api.github.com/users/antipa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antipa/subscriptions", "organizations_url": "https://api.github.com/users/antipa/orgs", "repos_url": "https://api.github.com/users/antipa/repos", "events_url": "https://api.github.com/users/antipa/events{/privacy}", "received_events_url": "https://api.github.com/users/antipa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-25T21:00:17Z", "updated_at": "2018-09-25T22:19:08Z", "closed_at": "2018-09-25T22:19:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Last week in issue #429, @j-towns kindly implemented np.pad gradients, which is fantastic. However, I noticed an unexpected behavior where if the padding tuple contains (0,0) for the padding in any dimension (i.e. don't pad that dimension), the gradient returned is empty. Obviously I could work around this by catching special cases, but it would be nice if AutoGrad was consistent with np.pad behavior. Thanks in advance!\r\n\r\nHere is an example:\r\n\r\n``` Python\r\nimport autograd.numpy as np\r\nfrom autograd import elementwise_grad\r\n\r\ntest = np.random.rand(3,3)\r\n\r\npadtuple = ((1,1),(1,1))\r\nprint(\"Original size: %s\" %(np.shape(test),))\r\nprint(\"Padding with %s returns padded shape:\" %(padtuple,))\r\nprint(np.shape(np.pad(test, padtuple, 'constant')))\r\n\r\nloss_func = lambda x:np.sum(np.pad(x,padtuple,'constant'))\r\ngrad_func = elementwise_grad(loss_func)\r\ng = grad_func(test)\r\n\r\nprint(\"with gradient:\")\r\nprint(g)\r\n\r\npadtuple = ((0,0),(1,1))\r\n\r\nprint(\"\\nPadding with %s returns padded shape:\" %(padtuple,))\r\nprint(np.shape(np.pad(test, padtuple, 'constant')))\r\n\r\nloss_func = lambda x:np.sum(np.pad(x,padtuple,'constant'))\r\ngrad_func = elementwise_grad(loss_func)\r\ng = grad_func(test)\r\n\r\nprint(\"with gradient:\")\r\nprint(g)\r\n```\r\n\r\nOutput:\r\n```\r\nOriginal size: (3, 3)\r\nPadding with ((1, 1), (1, 1)) returns padded shape:\r\n(5, 5)\r\nwith gradient:\r\n[[1. 1. 1.]\r\n [1. 1. 1.]\r\n [1. 1. 1.]]\r\n\r\nPadding with ((0, 0), (1, 1)) returns padded shape:\r\n(3, 5)\r\nwith gradient:\r\n[]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/430", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/430/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/430/events", "html_url": "https://github.com/HIPS/autograd/issues/430", "id": 361309875, "node_id": "MDU6SXNzdWUzNjEzMDk4NzU=", "number": 430, "title": "Custom primitive and VJP error", "user": {"login": "chtouroc", "id": 33642872, "node_id": "MDQ6VXNlcjMzNjQyODcy", "avatar_url": "https://avatars0.githubusercontent.com/u/33642872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chtouroc", "html_url": "https://github.com/chtouroc", "followers_url": "https://api.github.com/users/chtouroc/followers", "following_url": "https://api.github.com/users/chtouroc/following{/other_user}", "gists_url": "https://api.github.com/users/chtouroc/gists{/gist_id}", "starred_url": "https://api.github.com/users/chtouroc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chtouroc/subscriptions", "organizations_url": "https://api.github.com/users/chtouroc/orgs", "repos_url": "https://api.github.com/users/chtouroc/repos", "events_url": "https://api.github.com/users/chtouroc/events{/privacy}", "received_events_url": "https://api.github.com/users/chtouroc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-18T13:39:52Z", "updated_at": "2018-09-18T21:49:55Z", "closed_at": "2018-09-18T21:49:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI was trying to create an approximate gradient for the numpy.multivariate_normal function using the Autograd tutorial for custom gradients. \r\n\r\n```\r\nimport autograd.numpy as np\r\nimport autograd.numpy.random as npr\r\nfrom autograd import value_and_grad\r\nfrom autograd.extend import primitive, defvjp\r\n@primitive\r\ndef sample_mvn(x):\r\n    x=np.array(x)# x contains the mean vector followed by the flattened covariance matrix\r\n    L=x.shape[0]\r\n    delta=1+4*L\r\n    N=int((-1+np.sqrt(delta))/2) # is the length of the output\r\n    mean=x[:N]\r\n    cov=x[N:].reshape((N,N))\r\n    return npr.multivariate_normal(mean, cov)\r\n    \r\n\r\ndef sample_mvn_vjp(ans, x):\r\n    x=np.array(x)\r\n    L=x.shape[0]\r\n    delta=1+4*L\r\n    N=int((-1+np.sqrt(delta))/2)\r\n    mean=x[:N]\r\n    cov=x[N:].reshape((N,N))\r\n    B=np.linalg.cholesky(cov+1e-10*np.eye(N))\r\n    Binv=np.linalg.inv(B)\r\n    z=np.dot(Binv,ans-mean.reshape(ans.shape)).reshape(N)\r\n    kron=np.kron(np.eye(N),z)\r\n    gradient=np.hstack((np.eye(N),kron))\r\n    return lambda g: np.full(gradient.shape[0],g) * gradient.T\r\n\r\ndefvjp(sample_mvn, sample_mvn_vjp)\r\n```\r\n\r\nWhen I run this and then use the `value_and_grad` wrapper on a function containing the function `sample_mvn`, I get the following error: \r\n\r\n```\r\n\r\n> ----> **9     return npr.multivariate_normal(mean, cov)**\r\n     10     \r\n     11 \r\n\r\n/anaconda3/lib/python3.6/site-packages/autograd/tracer.py in f_wrapped(*args, **kwargs)\r\n     43             argnums = tuple(argnum    for argnum, _   in boxed_args)\r\n     44             ans = f_wrapped(*argvals, **kwargs)\r\n---> 45             node = node_constructor(ans, f_wrapped, argvals, kwargs, argnums, parents)\r\n     46             return new_box(ans, trace, node)\r\n     47         else:\r\n\r\n/anaconda3/lib/python3.6/site-packages/autograd/core.py in __init__(self, value, fun, args, kwargs, parent_argnums, parents)\r\n     28     def __init__(self, value, fun, args, kwargs, parent_argnums, parents):\r\n     29         self.parents = parents\r\n---> 30         self.vjp = primitive_vjps[fun](parent_argnums, value, args, kwargs)\r\n     31 \r\n     32     def initialize_root(self, value):\r\n\r\nKeyError: <function primitive.<locals>.f_wrapped at 0x111fc7e18>\r\n```\r\n\r\n\r\n\r\nIt seems that `npr.multivariate_normal` is still being called inside the primitive function. Can you please help with this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/429", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/429/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/429/events", "html_url": "https://github.com/HIPS/autograd/issues/429", "id": 361056111, "node_id": "MDU6SXNzdWUzNjEwNTYxMTE=", "number": 429, "title": "Implement gradients for numpy.pad", "user": {"login": "antipa", "id": 4605335, "node_id": "MDQ6VXNlcjQ2MDUzMzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4605335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antipa", "html_url": "https://github.com/antipa", "followers_url": "https://api.github.com/users/antipa/followers", "following_url": "https://api.github.com/users/antipa/following{/other_user}", "gists_url": "https://api.github.com/users/antipa/gists{/gist_id}", "starred_url": "https://api.github.com/users/antipa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antipa/subscriptions", "organizations_url": "https://api.github.com/users/antipa/orgs", "repos_url": "https://api.github.com/users/antipa/repos", "events_url": "https://api.github.com/users/antipa/events{/privacy}", "received_events_url": "https://api.github.com/users/antipa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-17T21:42:05Z", "updated_at": "2018-09-19T19:53:50Z", "closed_at": "2018-09-19T13:45:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "padding is differentiable, but using autograd.numpy.pad returns an error when evaluating the gradient. Here's an example that works without padding, but causes an error when autograd.numpy.pad is used.\r\n\r\n```python\r\nimport autograd.numpy as np\r\nfrom autograd import grad_and_aux\r\n\r\ntest = np.random.rand(10,10)  #Make a random 2d array\r\n\r\n# Function computes the sum of the input with no padding\r\n# Returns the sum and the unpadded variable\r\ndef NoPad_ag(x):\r\n    internal_variable = x\r\n    return np.sum(internal_variable), internal_variable   \r\n  \r\n# Verify that the function works\r\ntest_value, test_result = NoPad_ag(test)\r\nprint(test_value)\r\nprint(np.sum(test))\r\n\r\n# Verify that function works with autograd\r\nNoPad_grad = grad_and_aux(NoPad_ag)\r\ng, a = NoPad_grad(test)\r\nprint(np.sum(a)._value)\r\n\r\n\r\n# Define same function, but internal variable is now padded using autograd.numpy.pad\r\ndef Pad_ag(x):\r\n    internal_variable = np.pad(x,((5,5),(5,5)), 'constant')\r\n    return np.sum(internal_variable), internal_variable\r\n\r\n# Verify function returns the same values as the non-padding version\r\ntest_value, test_result = Pad_ag(test)\r\nprint(test_value)\r\nprint(np.sum(test))\r\n\r\n# Try padding version with autograd.\r\n# This is where the error occurs:\r\nPad_grad = grad_and_aux(Pad_ag)\r\ng, a_pad = Pad_grad(test)\r\nprint(np.sum(a_pad)._value)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/423", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/423/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/423/events", "html_url": "https://github.com/HIPS/autograd/issues/423", "id": 356322861, "node_id": "MDU6SXNzdWUzNTYzMjI4NjE=", "number": 423, "title": "autograd.jacobian fails at simple linear vector function (numpy.dot)", "user": {"login": "deasmhumhna", "id": 3468977, "node_id": "MDQ6VXNlcjM0Njg5Nzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3468977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deasmhumhna", "html_url": "https://github.com/deasmhumhna", "followers_url": "https://api.github.com/users/deasmhumhna/followers", "following_url": "https://api.github.com/users/deasmhumhna/following{/other_user}", "gists_url": "https://api.github.com/users/deasmhumhna/gists{/gist_id}", "starred_url": "https://api.github.com/users/deasmhumhna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deasmhumhna/subscriptions", "organizations_url": "https://api.github.com/users/deasmhumhna/orgs", "repos_url": "https://api.github.com/users/deasmhumhna/repos", "events_url": "https://api.github.com/users/deasmhumhna/events{/privacy}", "received_events_url": "https://api.github.com/users/deasmhumhna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-02T23:33:46Z", "updated_at": "2018-09-09T21:01:59Z", "closed_at": "2018-09-09T21:01:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nimport numpy as np \r\nimport autograd \r\n\r\ndef f(x):\r\n    A = np.arange(9, dtype=np.float).reshape(3,3)\r\n    return np.dot(A, x)\r\n\r\njac = autograd.jacobian(f)\r\nx = np.arange(3, dtype=np.float)\r\nprint(f(x))\r\nprint(jac(x))\r\n```\r\nThe above example yields\r\n```\r\n[ 5. 14. 23.]\r\n/usr/lib/python3.7/site-packages/autograd/tracer.py:14: UserWarning: Output seems independent of input.\r\n  warnings.warn(\"Output seems independent of input.\")\r\n[[0. 0. 0.]\r\n [0. 0. 0.]\r\n [0. 0. 0.]]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/422", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/422/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/422/events", "html_url": "https://github.com/HIPS/autograd/issues/422", "id": 354042782, "node_id": "MDU6SXNzdWUzNTQwNDI3ODI=", "number": 422, "title": "scipy.stats \"setting array element with a sequence\" error", "user": {"login": "matthewdhoffman", "id": 509707, "node_id": "MDQ6VXNlcjUwOTcwNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/509707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewdhoffman", "html_url": "https://github.com/matthewdhoffman", "followers_url": "https://api.github.com/users/matthewdhoffman/followers", "following_url": "https://api.github.com/users/matthewdhoffman/following{/other_user}", "gists_url": "https://api.github.com/users/matthewdhoffman/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewdhoffman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewdhoffman/subscriptions", "organizations_url": "https://api.github.com/users/matthewdhoffman/orgs", "repos_url": "https://api.github.com/users/matthewdhoffman/repos", "events_url": "https://api.github.com/users/matthewdhoffman/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewdhoffman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-25T20:54:59Z", "updated_at": "2018-08-26T17:56:40Z", "closed_at": "2018-08-26T17:56:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to run the following snippet:\r\n```python\r\nfrom autograd import grad\r\nfrom autograd import numpy as np\r\nfrom autograd import scipy\r\n\r\nn_dimensions = 2\r\nn_examples = 1000\r\n\r\ndef linear_regression_log_likelihood(beta, x, y):\r\n    predictions = x.dot(beta)\r\n    return scipy.stats.norm.logpdf(y, loc=predictions, scale=1.).sum(-1)\r\n\r\nfake_args = [np.zeros(n_dimensions), np.zeros([n_examples, n_dimensions]),\r\nnp.zeros(n_examples)]\r\ngrad(linear_regression_log_joint)(*fake_args)\r\n```\r\n\r\nI get this error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/tmp/test.py\", line 14, in <module>\r\n    grad(linear_regression_log_joint)(*fake_args)\r\n  File \"/usr/local/lib/python2.7/site-packages/autograd/wrap_util.py\", line 20, in nary_f\r\n    return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/autograd/differential_operators.py\", line 24, in grad\r\n    vjp, ans = _make_vjp(fun, x)\r\n  File \"/usr/local/lib/python2.7/site-packages/autograd/core.py\", line 10, in make_vjp\r\n    end_value, end_node =  trace(start_node, fun, x)\r\n  File \"/usr/local/lib/python2.7/site-packages/autograd/tracer.py\", line 10, in trace\r\n    end_box = fun(start_box)\r\n  File \"/usr/local/lib/python2.7/site-packages/autograd/wrap_util.py\", line 15, in unary_f\r\n    return fun(*subargs, **kwargs)\r\n  File \"/tmp/test.py\", line 11, in linear_regression_log_joint\r\n    return scipy.stats.norm.logpdf(y, loc=predictions, scale=1.).sum(-1)\r\n  File \"/usr/local/lib/python2.7/site-packages/autograd/tracer.py\", line 48, in f_wrapped\r\n    return f_raw(*args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/scipy/stats/_distn_infrastructure.py\", line 1691, in logpdf\r\n    x = np.asarray((x - loc)/scale, dtype=dtyp)\r\n  File \"/usr/local/lib/python2.7/site-packages/numpy/core/numeric.py\", line 492, in asarray\r\n    return array(a, dtype, copy=False, order=order)\r\nValueError: setting an array element with a sequence.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/419", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/419/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/419/events", "html_url": "https://github.com/HIPS/autograd/issues/419", "id": 341677324, "node_id": "MDU6SXNzdWUzNDE2NzczMjQ=", "number": 419, "title": "Current release version is not compatible with np.arctan2", "user": {"login": "HerculesJack", "id": 34429853, "node_id": "MDQ6VXNlcjM0NDI5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/34429853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HerculesJack", "html_url": "https://github.com/HerculesJack", "followers_url": "https://api.github.com/users/HerculesJack/followers", "following_url": "https://api.github.com/users/HerculesJack/following{/other_user}", "gists_url": "https://api.github.com/users/HerculesJack/gists{/gist_id}", "starred_url": "https://api.github.com/users/HerculesJack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HerculesJack/subscriptions", "organizations_url": "https://api.github.com/users/HerculesJack/orgs", "repos_url": "https://api.github.com/users/HerculesJack/repos", "events_url": "https://api.github.com/users/HerculesJack/events{/privacy}", "received_events_url": "https://api.github.com/users/HerculesJack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-16T21:00:00Z", "updated_at": "2018-10-19T08:32:35Z", "closed_at": "2018-10-19T08:32:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Once I installed autograd from pip, and found that the simple code below gets a keyerror:\r\n\r\n```\r\nfrom autograd import grad\r\nimport autograd.numpy as np\r\n\r\ndef fffff(x):\r\n    return np.arctan2(x[1],x[0])\r\n\r\ngrad(fffff)(np.array([1,1],dtype='float'))\r\n```\r\n\r\nBut it seems that this has been fixed in the latest source code. I reinstalled autograd from source code and it works, though the version number is still 1.2, same as the release version from pip. So please consider to update the release version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/418", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/418/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/418/events", "html_url": "https://github.com/HIPS/autograd/issues/418", "id": 340268923, "node_id": "MDU6SXNzdWUzNDAyNjg5MjM=", "number": 418, "title": "Backpropagate through numpy eigvalsh function", "user": {"login": "CarloNicolini", "id": 1758847, "node_id": "MDQ6VXNlcjE3NTg4NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1758847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CarloNicolini", "html_url": "https://github.com/CarloNicolini", "followers_url": "https://api.github.com/users/CarloNicolini/followers", "following_url": "https://api.github.com/users/CarloNicolini/following{/other_user}", "gists_url": "https://api.github.com/users/CarloNicolini/gists{/gist_id}", "starred_url": "https://api.github.com/users/CarloNicolini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CarloNicolini/subscriptions", "organizations_url": "https://api.github.com/users/CarloNicolini/orgs", "repos_url": "https://api.github.com/users/CarloNicolini/repos", "events_url": "https://api.github.com/users/CarloNicolini/events{/privacy}", "received_events_url": "https://api.github.com/users/CarloNicolini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-11T14:31:04Z", "updated_at": "2019-01-14T02:22:52Z", "closed_at": "2019-01-14T02:22:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to compute the gradients of a function that contains computations depending on eigenvalues of a matrix plus a x term that I want the gradient of:\r\n\r\nThe minimal error-reproducing is the following:\r\n\r\n    from __future__ import absolute_import\r\n    import autograd.numpy as np\r\n    from autograd import grad\r\n    from autograd.extend import primitive, defvjp\r\n\r\n    def f(x):\r\n        return np.linalg.eigvalsh(np.ones([10,10])+x).sum()\r\n\r\n    grad(f)(0.5)\r\n\r\nBut I get a very long error message:\r\n\r\n    KeyError                                  Traceback (most recent call last)\r\n    <ipython-input-29-34606a843831> in <module>()\r\n         53     return np.linalg.eigvalsh(np.ones([10,10])+x).sum()\r\n         54 \r\n    ---> 55 grad(cost)(0.5)\r\n\r\n    /usr/local/lib/python3.5/dist-packages/autograd/wrap_util.py in nary_f(*args, **kwargs)\r\n         18             else:\r\n         19                 x = tuple(args[i] for i in argnum)\r\n    ---> 20             return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n         21         return nary_f\r\n         22     return nary_operator\r\n\r\n    /usr/local/lib/python3.5/dist-packages/autograd/differential_operators.py in grad(fun, x)\r\n         22     arguments as `fun`, but returns the gradient instead. The function `fun`\r\n         23     should be scalar-valued. The gradient has the same type as the argument.\"\"\"\r\n    ---> 24     vjp, ans = _make_vjp(fun, x)\r\n         25     if not vspace(ans).size == 1:\r\n         26         raise TypeError(\"Grad only applies to real scalar-output functions. \"\r\n\r\n    /usr/local/lib/python3.5/dist-packages/autograd/core.py in make_vjp(fun, x)\r\n          8 def make_vjp(fun, x):\r\n          9     start_node = VJPNode.new_root(x)\r\n    ---> 10     end_value, end_node =  trace(start_node, fun, x)\r\n         11     if end_node is None:\r\n         12         def vjp(g): return vspace(x).zeros()\r\n\r\n    /usr/local/lib/python3.5/dist-packages/autograd/tracer.py in trace(start_node, fun, x)\r\n          8     with trace_stack.new_trace() as t:\r\n          9         start_box = new_box(x, t, start_node)\r\n    ---> 10         end_box = fun(start_box)\r\n         11         if isbox(end_box) and end_box._trace == start_box._trace:\r\n         12             return end_box._value, end_box._node\r\n\r\n    /usr/local/lib/python3.5/dist-packages/autograd/wrap_util.py in unary_f(x)\r\n         13                 else:\r\n         14                     subargs = subvals(args, zip(argnum, x))\r\n    ---> 15                 return fun(*subargs, **kwargs)\r\n         16             if isinstance(argnum, int):\r\n         17                 x = args[argnum]\r\n\r\n    <ipython-input-29-34606a843831> in cost(x)\r\n         51 \r\n         52 def cost(x):\r\n    ---> 53     return np.linalg.eigvalsh(np.ones([10,10])+x).sum()\r\n         54 \r\n         55 grad(cost)(0.5)\r\n\r\n    /usr/local/lib/python3.5/dist-packages/autograd/tracer.py in f_wrapped(*args, **kwargs)\r\n         43             argnums = tuple(argnum    for argnum, _   in boxed_args)\r\n         44             ans = f_wrapped(*argvals, **kwargs)\r\n    ---> 45             node = node_constructor(ans, f_wrapped, argvals, kwargs, argnums, parents)\r\n         46             return new_box(ans, trace, node)\r\n         47         else:\r\n\r\n    /usr/local/lib/python3.5/dist-packages/autograd/core.py in __init__(self, value, fun, args, kwargs, parent_argnums, parents)\r\n         28     def __init__(self, value, fun, args, kwargs, parent_argnums, parents):\r\n         29         self.parents = parents\r\n    ---> 30         self.vjp = primitive_vjps[fun](parent_argnums, value, args, kwargs)\r\n         31 \r\n         32     def initialize_root(self, value):\r\n\r\n    KeyError: <function primitive.<locals>.f_wrapped at 0x7f67276920d0>\r\n\r\nIs there a way to backpropagate through this function?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/415", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/415/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/415/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/415/events", "html_url": "https://github.com/HIPS/autograd/issues/415", "id": 337071154, "node_id": "MDU6SXNzdWUzMzcwNzExNTQ=", "number": 415, "title": "Derivative of scalar-output function that receives a vector", "user": {"login": "AlejandroCatalina", "id": 7590559, "node_id": "MDQ6VXNlcjc1OTA1NTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7590559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlejandroCatalina", "html_url": "https://github.com/AlejandroCatalina", "followers_url": "https://api.github.com/users/AlejandroCatalina/followers", "following_url": "https://api.github.com/users/AlejandroCatalina/following{/other_user}", "gists_url": "https://api.github.com/users/AlejandroCatalina/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlejandroCatalina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlejandroCatalina/subscriptions", "organizations_url": "https://api.github.com/users/AlejandroCatalina/orgs", "repos_url": "https://api.github.com/users/AlejandroCatalina/repos", "events_url": "https://api.github.com/users/AlejandroCatalina/events{/privacy}", "received_events_url": "https://api.github.com/users/AlejandroCatalina/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-29T17:02:37Z", "updated_at": "2018-07-04T13:59:17Z", "closed_at": "2018-07-04T13:59:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI'm trying to deal with scalar output functions that take as input a vector, such as ```np.std```. Nonetheless, running ```grad(np.std)(xx)```, where ```xx``` is a vector, returns a vector of the shape of ```xx```, but instead the true gradient of that function w.r.t ```xx``` should return a scalar, am I right?\r\n\r\nSo, is there a way to find this derivative within autograd or any other automatic differentiation software or should I just try to find it by hand?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/414", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/414/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/414/events", "html_url": "https://github.com/HIPS/autograd/issues/414", "id": 336636460, "node_id": "MDU6SXNzdWUzMzY2MzY0NjA=", "number": 414, "title": "Error in grad when using arctan2 function", "user": {"login": "joddlehod", "id": 17890378, "node_id": "MDQ6VXNlcjE3ODkwMzc4", "avatar_url": "https://avatars3.githubusercontent.com/u/17890378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joddlehod", "html_url": "https://github.com/joddlehod", "followers_url": "https://api.github.com/users/joddlehod/followers", "following_url": "https://api.github.com/users/joddlehod/following{/other_user}", "gists_url": "https://api.github.com/users/joddlehod/gists{/gist_id}", "starred_url": "https://api.github.com/users/joddlehod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joddlehod/subscriptions", "organizations_url": "https://api.github.com/users/joddlehod/orgs", "repos_url": "https://api.github.com/users/joddlehod/repos", "events_url": "https://api.github.com/users/joddlehod/events{/privacy}", "received_events_url": "https://api.github.com/users/joddlehod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-28T14:05:40Z", "updated_at": "2018-06-28T16:11:21Z", "closed_at": "2018-06-28T16:11:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "The autograd function arctan2 seems to work fine on its own:\r\n\r\n```\r\n>>> import autograd.numpy as anp\r\n>>> anp.arctan2(1.0, 0.0)\r\n1.5707963267948966\r\n>>>\r\n```\r\n\r\nBut when I try to `grad` a function that uses arctan2, I get an error:\r\n\r\nContents of `test_arctan2.py`:\r\n```\r\nimport autograd.numpy as anp\r\nfrom autograd import grad\r\n\r\ndef arctan2(xy):\r\n    return anp.arctan2(xy[1], xy[0])\r\n\r\ngarctan2 = grad(arctan2)\r\ngarctan2((0.0, 1.0))\r\n```\r\n\r\nOutput of `test_arctan2.py`\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/hodsonjd/dev/test_arctan2.py\", line 9, in <module>\r\n    print(garctan2((0.0, 1.0)))\r\n  File \"/home/hodsonjd/.linuxbrew/Cellar/python/3.6.5/lib/python3.6/site-packages/autograd/wrap_util.py\", line 20, in nary_f\r\n    return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n  File \"/home/hodsonjd/.linuxbrew/Cellar/python/3.6.5/lib/python3.6/site-packages/autograd/differential_operators.py\", line 24, in grad\r\n    vjp, ans = _make_vjp(fun, x)\r\n  File \"/home/hodsonjd/.linuxbrew/Cellar/python/3.6.5/lib/python3.6/site-packages/autograd/core.py\", line 10, in make_vjp\r\n    end_value, end_node =  trace(start_node, fun, x)\r\n  File \"/home/hodsonjd/.linuxbrew/Cellar/python/3.6.5/lib/python3.6/site-packages/autograd/tracer.py\", line 10, in trace\r\n    end_box = fun(start_box)\r\n  File \"/home/hodsonjd/.linuxbrew/Cellar/python/3.6.5/lib/python3.6/site-packages/autograd/wrap_util.py\", line 15, in unary_f\r\n    return fun(*subargs, **kwargs)\r\n  File \"/home/hodsonjd/dev/test_arctan2.py\", line 5, in arctan2\r\n    return anp.arctan2(xy[1], xy[0])\r\n  File \"/home/hodsonjd/.linuxbrew/Cellar/python/3.6.5/lib/python3.6/site-packages/autograd/tracer.py\", line 45, in f_wrapped\r\n    node = node_constructor(ans, f_wrapped, argvals, kwargs, argnums, parents)\r\n  File \"/home/hodsonjd/.linuxbrew/Cellar/python/3.6.5/lib/python3.6/site-packages/autograd/core.py\", line 30, in __init__\r\n    self.vjp = primitive_vjps[fun](parent_argnums, value, args, kwargs)\r\nKeyError: <function primitive.<locals>.f_wrapped at 0x7f57be01ea60>\r\n```\r\n\r\nI am quite new to autograd (just started working with it yesterday), so this may simply be user error. If someone can offer some insight as to what I might be doing wrong, any help would be greatly appreciated!\r\n\r\nThanks,\r\nJosh", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/407", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/407/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/407/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/407/events", "html_url": "https://github.com/HIPS/autograd/issues/407", "id": 332104519, "node_id": "MDU6SXNzdWUzMzIxMDQ1MTk=", "number": 407, "title": "stats.norm.pdf is not grad of stats.norm.cdf", "user": {"login": "tianle91", "id": 22728708, "node_id": "MDQ6VXNlcjIyNzI4NzA4", "avatar_url": "https://avatars3.githubusercontent.com/u/22728708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tianle91", "html_url": "https://github.com/tianle91", "followers_url": "https://api.github.com/users/tianle91/followers", "following_url": "https://api.github.com/users/tianle91/following{/other_user}", "gists_url": "https://api.github.com/users/tianle91/gists{/gist_id}", "starred_url": "https://api.github.com/users/tianle91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tianle91/subscriptions", "organizations_url": "https://api.github.com/users/tianle91/orgs", "repos_url": "https://api.github.com/users/tianle91/repos", "events_url": "https://api.github.com/users/tianle91/events{/privacy}", "received_events_url": "https://api.github.com/users/tianle91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-13T18:08:07Z", "updated_at": "2018-06-14T13:33:24Z", "closed_at": "2018-06-14T13:33:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "On Python 3.5:\r\n``` python\r\nfrom autograd import grad\r\nimport autograd.numpy as np\r\nimport autograd.scipy.stats as st\r\n\r\ncdf = st.norm.cdf\r\ngradcdf = grad(st.norm.cdf)\r\npdf = st.norm.pdf\r\n\r\neps = 1/np.power(10, 6)\r\nfd = (cdf(eps) - cdf(0.)) / eps\r\n\r\nprint ('at x=0:\\ngrad(cdf): %1.6f, pdf: %1.6f, finite-diff: %1.6f' %\r\n       (gradcdf(0.), pdf(0.), fd))\r\n```\r\n\r\nOutput:\r\n```\r\nat x=0:\r\ngrad(cdf): 0.241971, pdf: 0.398942, finite-diff: 0.398942\r\n```\r\n\r\nIs there anything wrong with this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/406", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/406/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/406/events", "html_url": "https://github.com/HIPS/autograd/issues/406", "id": 331764455, "node_id": "MDU6SXNzdWUzMzE3NjQ0NTU=", "number": 406, "title": "Further progress on CuPy wrapper", "user": {"login": "ericmjl", "id": 2631566, "node_id": "MDQ6VXNlcjI2MzE1NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericmjl", "html_url": "https://github.com/ericmjl", "followers_url": "https://api.github.com/users/ericmjl/followers", "following_url": "https://api.github.com/users/ericmjl/following{/other_user}", "gists_url": "https://api.github.com/users/ericmjl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericmjl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericmjl/subscriptions", "organizations_url": "https://api.github.com/users/ericmjl/orgs", "repos_url": "https://api.github.com/users/ericmjl/repos", "events_url": "https://api.github.com/users/ericmjl/events{/privacy}", "received_events_url": "https://api.github.com/users/ericmjl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-12T21:42:03Z", "updated_at": "2019-03-17T20:42:12Z", "closed_at": "2019-03-17T20:42:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Looping back on wrapping CuPy. \r\n\r\nSummary:\r\n\r\n- Can do gradient descent-based optimization with CuPy wrapper for a simple linear model.\r\n- Tests for wrapped functions using `check_grad` are now annotated.\r\n\r\n(1) Gradient-based optimization\r\n\r\n[This](https://github.com/ericmjl/autograd/blob/cupy/tests/test_cupy_hack.py#L52) now works for a simple linear model that I coded up. \r\n\r\n(2) Checking `check_grad` tests\r\n\r\n[`test_cupy.py`](https://github.com/ericmjl/autograd/blob/cupy/tests/test_cupy.py) is a direct mirror of [`test_numpy.py`](https://github.com/ericmjl/autograd/blob/cupy/tests/test_numpy.py), except with pytest annotations giving me a hint as to why they might be failing. \r\n\r\nFor some, I have an idea on how to debug (related to minute differences between CuPy and NumPy), for others, I might start reaching out for advice on what's going on. \r\n\r\ncc'ing people who I remember are interested, and those with whom I've conferred:\r\n\r\n@mattjj, @dougalm, @duvenaud, @jermwatt, @kmaehashi, @dwd31415, @tscohen, @oeway, @iaroslav-ai, @bingo619, @kastnerkyle, @outlace, @samuela", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/401", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/401/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/401/events", "html_url": "https://github.com/HIPS/autograd/issues/401", "id": 326727959, "node_id": "MDU6SXNzdWUzMjY3Mjc5NTk=", "number": 401, "title": "Sign flipped in stats.multivariate_normal", "user": {"login": "kuperov", "id": 164383, "node_id": "MDQ6VXNlcjE2NDM4Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/164383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kuperov", "html_url": "https://github.com/kuperov", "followers_url": "https://api.github.com/users/kuperov/followers", "following_url": "https://api.github.com/users/kuperov/following{/other_user}", "gists_url": "https://api.github.com/users/kuperov/gists{/gist_id}", "starred_url": "https://api.github.com/users/kuperov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kuperov/subscriptions", "organizations_url": "https://api.github.com/users/kuperov/orgs", "repos_url": "https://api.github.com/users/kuperov/repos", "events_url": "https://api.github.com/users/kuperov/events{/privacy}", "received_events_url": "https://api.github.com/users/kuperov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-26T10:29:16Z", "updated_at": "2018-06-20T09:54:01Z", "closed_at": "2018-06-20T09:54:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "G'day developers\r\n\r\nI love autograd, thanks for the hard work.\r\n\r\nIt is probably my own error, but I suspect a flipped sign in the derivative of the multivariate normal log density wrt its covariance. Here's a minimal example, or see [this Colab notebook](https://colab.research.google.com/drive/1F5Y1sQzVZT18p7qBGsTUYPXIuYiRy4NK):\r\n\r\n```\r\nfrom autograd import grad\r\nfrom autograd import numpy as np\r\nfrom autograd.scipy import stats\r\n\r\n# some constants\r\ns = np.array([[2.]]); mu = 2.; x = 1.\r\n\r\n# two log density functions that should be the same (univariate and 1x1 multivariate)\r\ndef llik(sigma):\r\n  return stats.norm.logpdf(x, np.array(mu), sigma)\r\ndef llik_mv(sigma):\r\n  vcv = np.dot(sigma, sigma.T)  # square to get a 1x1 covariance matrix\r\n  return stats.multivariate_normal.logpdf(np.array([[x]]), [mu], vcv)\r\n\r\nprint('Gradient of log pdf wrt standard deviation:')\r\nprint('autograd gradient: norm %.3f  multivariate_normal %.3f' % (\r\n    grad(llik)(s), grad(llik_mv)(s)))\r\n\r\n# manually differentiate numerically as a sense check\r\neps = 1e-7\r\nprint('numeric check:     norm %.3f  multivariate_normal %.3f' % (\r\n    (llik(s+eps) - llik(s))/eps, (llik_mv(s+eps) - llik_mv(s))/eps))\r\n```\r\n\r\nAnd the output, on python 3.6.3:\r\n```\r\nGradient of log pdf wrt standard deviation:\r\nautograd gradient: norm -0.375  multivariate_normal 0.375\r\nnumeric check:     norm -0.375  multivariate_normal -0.375\r\n```\r\n\r\nI expected both autograd gradients to match, as they do in the numerical version. Have I messed up, or is something wrong here? \r\n\r\nThanks again for a wonderful library\r\nAlex", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/398", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/398/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/398/events", "html_url": "https://github.com/HIPS/autograd/issues/398", "id": 323690308, "node_id": "MDU6SXNzdWUzMjM2OTAzMDg=", "number": 398, "title": "Can't import autograd in PyPy", "user": {"login": "denyazh", "id": 27444536, "node_id": "MDQ6VXNlcjI3NDQ0NTM2", "avatar_url": "https://avatars1.githubusercontent.com/u/27444536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denyazh", "html_url": "https://github.com/denyazh", "followers_url": "https://api.github.com/users/denyazh/followers", "following_url": "https://api.github.com/users/denyazh/following{/other_user}", "gists_url": "https://api.github.com/users/denyazh/gists{/gist_id}", "starred_url": "https://api.github.com/users/denyazh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denyazh/subscriptions", "organizations_url": "https://api.github.com/users/denyazh/orgs", "repos_url": "https://api.github.com/users/denyazh/repos", "events_url": "https://api.github.com/users/denyazh/events{/privacy}", "received_events_url": "https://api.github.com/users/denyazh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-16T16:12:44Z", "updated_at": "2019-06-14T12:51:23Z", "closed_at": "2019-06-14T12:51:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I thought that it would be interesting to compare the execution time of Autograd in PyPy and CPython to see if PyPy's JIT compilation provides a noticeable speedup. See below:\r\n\r\n<pre>Python 2.7.13 (ab0b9caf307d, Apr 24 2018, 18:04:42)\r\n[PyPy 6.0.0 with GCC 6.2.0 20160901] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>>> import numpy\r\n>>>> numpy.version.version\r\n'1.14.3'\r\n>>>> import autograd\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/dennis/Downloads/pypy2-v6.0.0-linux64/site-packages/autograd/__init__.py\", line 2, in <module>\r\n    from .differential_operators import (\r\n  File \"/home/dennis/Downloads/pypy2-v6.0.0-linux64/site-packages/autograd/differential_operators.py\", line 12, in <module>\r\n    import autograd.numpy as np\r\n  File \"/home/dennis/Downloads/pypy2-v6.0.0-linux64/site-packages/autograd/numpy/__init__.py\", line 5, in <module>\r\n    from . import numpy_vjps\r\n  File \"/home/dennis/Downloads/pypy2-v6.0.0-linux64/site-packages/autograd/numpy/numpy_vjps.py\", line 130, in <module>\r\n    defvjp(anp.where, None,\r\nAttributeError: 'module' object has no attribute 'where'\r\n</pre>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/396", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/396/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/396/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/396/events", "html_url": "https://github.com/HIPS/autograd/issues/396", "id": 321573180, "node_id": "MDU6SXNzdWUzMjE1NzMxODA=", "number": 396, "title": "np.where gradient incorrect", "user": {"login": "jluttine", "id": 2195834, "node_id": "MDQ6VXNlcjIxOTU4MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2195834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jluttine", "html_url": "https://github.com/jluttine", "followers_url": "https://api.github.com/users/jluttine/followers", "following_url": "https://api.github.com/users/jluttine/following{/other_user}", "gists_url": "https://api.github.com/users/jluttine/gists{/gist_id}", "starred_url": "https://api.github.com/users/jluttine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jluttine/subscriptions", "organizations_url": "https://api.github.com/users/jluttine/orgs", "repos_url": "https://api.github.com/users/jluttine/repos", "events_url": "https://api.github.com/users/jluttine/events{/privacy}", "received_events_url": "https://api.github.com/users/jluttine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-09T13:35:49Z", "updated_at": "2018-05-09T13:39:27Z", "closed_at": "2018-05-09T13:36:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following:\r\n```python\r\n>>> f = lambda v: autograd.numpy.sum(autograd.numpy.where([True, False, True], v, 0.0))\r\n>>> autograd.value_and_grad(f)(autograd.numpy.array(10))\r\n(20.0, array([ 1.,  0.,  1.]))\r\n```\r\nThe input and the output are scalars so the gradient should be a scalar too. In this case, it should be `array(2.)`, right?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/394", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/394/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/394/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/394/events", "html_url": "https://github.com/HIPS/autograd/issues/394", "id": 319955173, "node_id": "MDU6SXNzdWUzMTk5NTUxNzM=", "number": 394, "title": "Please help with wrong gradient calculation", "user": {"login": "wiedemannc", "id": 24568988, "node_id": "MDQ6VXNlcjI0NTY4OTg4", "avatar_url": "https://avatars1.githubusercontent.com/u/24568988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiedemannc", "html_url": "https://github.com/wiedemannc", "followers_url": "https://api.github.com/users/wiedemannc/followers", "following_url": "https://api.github.com/users/wiedemannc/following{/other_user}", "gists_url": "https://api.github.com/users/wiedemannc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiedemannc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiedemannc/subscriptions", "organizations_url": "https://api.github.com/users/wiedemannc/orgs", "repos_url": "https://api.github.com/users/wiedemannc/repos", "events_url": "https://api.github.com/users/wiedemannc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiedemannc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-03T14:52:23Z", "updated_at": "2018-05-04T07:23:42Z", "closed_at": "2018-05-04T07:23:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nthis is probably a stupid mistake, but I'm not able to find the root cause for the faulty gradient calculation. Using this script:\r\n\r\n```\r\nimport numpy as np\r\n\r\n# to test with latest autograd:\r\n#import sys\r\n#sys.path.insert(0, \"/tmp/autograd\")\r\n\r\nfrom autograd import grad\r\nimport autograd.numpy as anp\r\n\r\ndef vector_to_polar(xy_real, xy_imag, _ur):\r\n    p_raw = anp.arctan2(xy_imag, xy_real)\r\n    amp = anp.sqrt(xy_real**2 + xy_imag**2) #norm2(xy_real, xy_imag)\r\n    return p_raw*_ur/(2.0*anp.pi), amp\r\n\r\ndef polar_to_vector(amp, dist, _ur):\r\n    p = dist * 2.0*anp.pi/_ur\r\n    xy_real = anp.sum(amp * anp.cos(p), axis=0)\r\n    xy_imag = anp.sum(amp * anp.sin(p), axis=0)\r\n    return xy_real, xy_imag\r\n\r\ndef residuals(xy_f1, xy_meas_real, xy_meas_imag, xy_std_real, xy_std_imag, ur):\r\n    d = 2\r\n    xy0f1_real = xy_f1[0::d]\r\n    xy0f1_imag = xy_f1[1::d]\r\n    xy1f1_real = anp.ravel(xy_meas_real[0,...]) - xy0f1_real\r\n    xy1f1_imag = anp.ravel(xy_meas_imag[0,...]) - xy0f1_imag\r\n\r\n    d0,a0 = vector_to_polar(xy0f1_real, xy0f1_imag, ur[0])\r\n    d1,a1 = vector_to_polar(xy1f1_real, xy1f1_imag, ur[0])\r\n\r\n    if 0:\r\n        # this works\r\n        xyfi_real, xyfi_imag = polar_to_vector(anp.array([a0]), anp.array([d0]), ur[1])\r\n    else:\r\n        # this doesn't work\r\n        xyfi_real, xyfi_imag = polar_to_vector(anp.array([a0,a1]), anp.array([d0,d1]), ur[1])\r\n    return xyfi_real**2 + xyfi_imag**2\r\n\r\ndef test(XY, XYstd, ur):\r\n    x0 = np.zeros(XY[0,...].size*2)\r\n    x0[::2] = XY[0,...].flatten().real*0.6\r\n    x0[1::2] = XY[0,...].flatten().imag*0.6\r\n\r\n    residuals_cl = lambda x, *args: residuals(x, XY.real, XY.imag, XYstd.real, XYstd.imag, ur)\r\n\r\n    res = residuals_cl(x0, \"normal\")\r\n    print(\"\\nbefore optimizing: res=\", res)\r\n\r\n    grad_residuals = grad(residuals_cl)\r\n    g = grad_residuals(x0)\r\n    g2 = np.zeros(g.shape)\r\n    print(\"checking grad\")\r\n    for i in range(x0.size):\r\n        eps = 1e0\r\n        x0p = x0.copy()\r\n        x0p[i] += eps\r\n        yp = residuals_cl(x0p, \"normal\")\r\n        x0m = x0.copy()\r\n        x0m[i] -= eps\r\n        ym = residuals_cl(x0m, \"normal\")\r\n        g2[i] = (yp - ym)/(2*eps)\r\n    assert np.allclose(g2, g), \"num=%s vs ag=%s\" % (g2, g)\r\n    print(\"Grad check OK: num=%s vs ag=%s\" % (g2, g))\r\n\r\nif __name__ == \"__main__\":\r\n    ur = [1, 2, 3]\r\n    XY = np.array([[[1j-0.1]], [[-1+0.1*1j]], [[-1j+0.1]]])\r\n    XYstd = np.array([[[0.1+0.1*1j]], [[0.1+0.1*1j]], [[0.1+0.1*1j]]])\r\n\r\n    test(XY, XYstd, ur)\r\n```\r\n\r\nI am getting the following output using the latest master branch, the gradient is errorneously very small:\r\n\r\n> before optimizing: res= [ 1.01]\r\n> checking grad\r\n> Traceback (most recent call last):\r\n>   File \"...autograd_test.py\", line 78, in <module>\r\n>     test(XY, XYstd, ur)\r\n>   File \"...autograd_test.py\", line 70, in test\r\n>     assert np.allclose(g2, g), \"num=%s vs ag=%s\" % (g2, g)\r\n> AssertionError: num=[-0.03647315  0.40012972] vs ag=[ -8.32667268e-17   4.44089210e-16]\r\n\r\nChanging the `if 0:` to `if 1:` results in correct gradients:\r\n\r\n> before optimizing: res= [ 0.3636]\r\n> checking grad\r\n> Grad check OK: num=[-0.12  1.2 ] vs ag=[-0.12  1.2 ]\r\n\r\nI'd be glad if anyone could give me hints about problems in the code or about advanced debugging methods in autograd.\r\n\r\nThank you in advance!\r\nChristoph", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/386", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/386/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/386/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/386/events", "html_url": "https://github.com/HIPS/autograd/issues/386", "id": 318142826, "node_id": "MDU6SXNzdWUzMTgxNDI4MjY=", "number": 386, "title": "TypeError when using a scalar", "user": {"login": "anataraj", "id": 2790038, "node_id": "MDQ6VXNlcjI3OTAwMzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2790038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anataraj", "html_url": "https://github.com/anataraj", "followers_url": "https://api.github.com/users/anataraj/followers", "following_url": "https://api.github.com/users/anataraj/following{/other_user}", "gists_url": "https://api.github.com/users/anataraj/gists{/gist_id}", "starred_url": "https://api.github.com/users/anataraj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anataraj/subscriptions", "organizations_url": "https://api.github.com/users/anataraj/orgs", "repos_url": "https://api.github.com/users/anataraj/repos", "events_url": "https://api.github.com/users/anataraj/events{/privacy}", "received_events_url": "https://api.github.com/users/anataraj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-26T18:17:51Z", "updated_at": "2018-04-27T18:43:03Z", "closed_at": "2018-04-27T16:49:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Perhaps this is blatantly obvious but I cant seem to get autograd to work on finding gradients for a scalar. The below code throws a \"*** TypeError: ufunc 'xlogy' not supported for the input types, ...\" What is wrong with variable p's type?\r\n\r\n----------------------------------------------\r\n```\r\nimport autograd.numpy as np\r\nfrom autograd.scipy.special import scipy\r\nfrom autograd import grad\r\nfrom scipy.optimize import minimize\r\n\r\ndef logpmf(p):\r\n        k = 33\r\n        n = 100\r\n        return -scipy.stats.binom.logpmf(k, n, p)\r\n\r\nx0 = np.array([0.0])\r\nresult = minimize(logpmf, x0=x0, jac=grad(logpmf), method='CG')\r\nprint(\"Found minimum at {0}\".format(result.x))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/380", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/380/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/380/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/380/events", "html_url": "https://github.com/HIPS/autograd/issues/380", "id": 312929351, "node_id": "MDU6SXNzdWUzMTI5MjkzNTE=", "number": 380, "title": "Derivative of sinc is incorrect", "user": {"login": "rsokl", "id": 29104956, "node_id": "MDQ6VXNlcjI5MTA0OTU2", "avatar_url": "https://avatars2.githubusercontent.com/u/29104956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsokl", "html_url": "https://github.com/rsokl", "followers_url": "https://api.github.com/users/rsokl/followers", "following_url": "https://api.github.com/users/rsokl/following{/other_user}", "gists_url": "https://api.github.com/users/rsokl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsokl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsokl/subscriptions", "organizations_url": "https://api.github.com/users/rsokl/orgs", "repos_url": "https://api.github.com/users/rsokl/repos", "events_url": "https://api.github.com/users/rsokl/events{/privacy}", "received_events_url": "https://api.github.com/users/rsokl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-10T13:45:19Z", "updated_at": "2018-04-10T14:12:58Z", "closed_at": "2018-04-10T14:12:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Your derivative for sinc is off by a factor of pi\r\n\r\n`(np.cos(np.pi*x)*np.pi*x - np.sin(np.pi*x))/(np.pi*x**2)`\r\n\r\nshould be\r\n\r\n`(np.cos(np.pi*x)*np.pi*x - np.sin(np.pi*x))/(np.pi*x)**2`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/375", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/375/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/375/events", "html_url": "https://github.com/HIPS/autograd/issues/375", "id": 307947895, "node_id": "MDU6SXNzdWUzMDc5NDc4OTU=", "number": 375, "title": "getting 'ValueError: setting an array element with a sequence' when computing the jacobian", "user": {"login": "benno90", "id": 20475988, "node_id": "MDQ6VXNlcjIwNDc1OTg4", "avatar_url": "https://avatars3.githubusercontent.com/u/20475988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benno90", "html_url": "https://github.com/benno90", "followers_url": "https://api.github.com/users/benno90/followers", "following_url": "https://api.github.com/users/benno90/following{/other_user}", "gists_url": "https://api.github.com/users/benno90/gists{/gist_id}", "starred_url": "https://api.github.com/users/benno90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benno90/subscriptions", "organizations_url": "https://api.github.com/users/benno90/orgs", "repos_url": "https://api.github.com/users/benno90/repos", "events_url": "https://api.github.com/users/benno90/events{/privacy}", "received_events_url": "https://api.github.com/users/benno90/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-23T09:01:02Z", "updated_at": "2018-03-23T15:01:04Z", "closed_at": "2018-03-23T15:01:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run the following code\r\n\r\n    import autograd.numpy as np\r\n    from autograd import jacobian\r\n\r\n    def f(b):\r\n        c = np.zeros(2)\r\n        c[0] = b[0]*b[0]\r\n        c[1] = b[1] * b[0] + b[2]\r\n        return c\r\n\r\n    b = np.array([1.0, 2.0, 2.0])\r\n    c = f(b)\r\n\r\n    jf = jacobian(f,0)\r\n    j = jf(b)\r\n\r\nI get the following error\r\n\r\nTraceback (most recent call last):\r\n  File \"jacobian.py\", line 17, in <module>\r\n    j = jf(b)\r\n  File \"/usr/lib/python3.6/site-packages/autograd/wrap_util.py\", line 20, in nary_f\r\n    return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n  File \"/usr/lib/python3.6/site-packages/autograd/differential_operators.py\", line 51, in jacobian\r\n    vjp, ans = _make_vjp(fun, x)\r\n  File \"/usr/lib/python3.6/site-packages/autograd/core.py\", line 10, in make_vjp\r\n    end_value, end_node =  trace(start_node, fun, x)\r\n  File \"/usr/lib/python3.6/site-packages/autograd/tracer.py\", line 10, in trace\r\n    end_box = fun(start_box)\r\n  File \"/usr/lib/python3.6/site-packages/autograd/wrap_util.py\", line 15, in unary_f\r\n    return fun(*subargs, **kwargs)\r\n  File \"jacobian.py\", line 7, in f\r\n    c[0] = b[0]*b[0]\r\nValueError: setting an array element with a sequence.\r\n\r\nAm I doing something wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/373", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/373/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/373/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/373/events", "html_url": "https://github.com/HIPS/autograd/issues/373", "id": 306932942, "node_id": "MDU6SXNzdWUzMDY5MzI5NDI=", "number": 373, "title": "np.sum - TypeError: grad_np_sum() got an unexpected keyword argument 'out'", "user": {"login": "Razcle", "id": 10298740, "node_id": "MDQ6VXNlcjEwMjk4NzQw", "avatar_url": "https://avatars0.githubusercontent.com/u/10298740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Razcle", "html_url": "https://github.com/Razcle", "followers_url": "https://api.github.com/users/Razcle/followers", "following_url": "https://api.github.com/users/Razcle/following{/other_user}", "gists_url": "https://api.github.com/users/Razcle/gists{/gist_id}", "starred_url": "https://api.github.com/users/Razcle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Razcle/subscriptions", "organizations_url": "https://api.github.com/users/Razcle/orgs", "repos_url": "https://api.github.com/users/Razcle/repos", "events_url": "https://api.github.com/users/Razcle/events{/privacy}", "received_events_url": "https://api.github.com/users/Razcle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-20T16:07:13Z", "updated_at": "2018-03-20T17:44:22Z", "closed_at": "2018-03-20T17:43:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having problems differentiating np.sum.\r\n\r\nMinimal reproduction:\r\n```\r\nfrom autograd import grad\r\n\r\nx = np.ones(10)\r\ny = lambda x: np.sum(x)\r\nprint(grad(y)(x))\r\n```\r\n\r\nError message:\r\n\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-16-f3bd71c7414e> in <module>()\r\n      1 x = np.ones(30)\r\n      2 y = lambda x: np.sum(x)\r\n----> 3 grad(y)(x)\r\n\r\n~/miniconda3/envs/default/lib/python3.6/site-packages/autograd/wrap_util.py in nary_f(*args, **kwargs)\r\n     18             else:\r\n     19                 x = tuple(args[i] for i in argnum)\r\n---> 20             return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n     21         return nary_f\r\n     22     return nary_operator\r\n\r\n~/miniconda3/envs/default/lib/python3.6/site-packages/autograd/differential_operators.py in grad(fun, x)\r\n     22     arguments as `fun`, but returns the gradient instead. The function `fun`\r\n     23     should be scalar-valued. The gradient has the same type as the argument.\"\"\"\r\n---> 24     vjp, ans = _make_vjp(fun, x)\r\n     25     if not vspace(ans).size == 1:\r\n     26         raise TypeError(\"Grad only applies to real scalar-output functions. \"\r\n\r\n~/miniconda3/envs/default/lib/python3.6/site-packages/autograd/core.py in make_vjp(fun, x)\r\n      8 def make_vjp(fun, x):\r\n      9     start_node = VJPNode.new_root(x)\r\n---> 10     end_value, end_node =  trace(start_node, fun, x)\r\n     11     if end_node is None:\r\n     12         def vjp(g): return vspace(x).zeros()\r\n\r\n~/miniconda3/envs/default/lib/python3.6/site-packages/autograd/tracer.py in trace(start_node, fun, x)\r\n      8     with trace_stack.new_trace() as t:\r\n      9         start_box = new_box(x, t, start_node)\r\n---> 10         end_box = fun(start_box)\r\n     11         if isbox(end_box) and end_box._trace == start_box._trace:\r\n     12             return end_box._value, end_box._node\r\n\r\n~/miniconda3/envs/default/lib/python3.6/site-packages/autograd/wrap_util.py in unary_f(x)\r\n     13                 else:\r\n     14                     subargs = subvals(args, zip(argnum, x))\r\n---> 15                 return fun(*subargs, **kwargs)\r\n     16             if isinstance(argnum, int):\r\n     17                 x = args[argnum]\r\n\r\n<ipython-input-16-f3bd71c7414e> in <lambda>(x)\r\n      1 x = np.ones(30)\r\n----> 2 y = lambda x: np.sum(x)\r\n      3 grad(y)(x)\r\n\r\n~/miniconda3/envs/default/lib/python3.6/site-packages/numpy/core/fromnumeric.py in sum(a, axis, dtype, out, keepdims)\r\n   1878             pass\r\n   1879         else:\r\n-> 1880             return sum(axis=axis, dtype=dtype, out=out, **kwargs)\r\n   1881     return _methods._sum(a, axis=axis, dtype=dtype,\r\n   1882                          out=out, **kwargs)\r\n\r\n~/miniconda3/envs/default/lib/python3.6/site-packages/autograd/tracer.py in f_wrapped(*args, **kwargs)\r\n     43             argnums = tuple(argnum    for argnum, _   in boxed_args)\r\n     44             ans = f_wrapped(*argvals, **kwargs)\r\n---> 45             node = node_constructor(ans, f_wrapped, argvals, kwargs, argnums, parents)\r\n     46             return new_box(ans, trace, node)\r\n     47         else:\r\n\r\n~/miniconda3/envs/default/lib/python3.6/site-packages/autograd/core.py in __init__(self, value, fun, args, kwargs, parent_argnums, parents)\r\n     28     def __init__(self, value, fun, args, kwargs, parent_argnums, parents):\r\n     29         self.parents = parents\r\n---> 30         self.vjp = primitive_vjps[fun](parent_argnums, value, args, kwargs)\r\n     31 \r\n     32     def initialize_root(self, value):\r\n\r\n~/miniconda3/envs/default/lib/python3.6/site-packages/autograd/core.py in vjp_argnums(argnums, ans, args, kwargs)\r\n     58                 raise NotImplementedError(\r\n     59                     \"VJP of {} wrt argnum 0 not defined\".format(fun.__name__))\r\n---> 60             vjp = vjpfun(ans, *args, **kwargs)\r\n     61             return lambda g: (vjp(g),)\r\n     62         elif L == 2:\r\n\r\nTypeError: grad_np_sum() got an unexpected keyword argument 'out\r\n\r\nVersions:\r\npython 3.6\r\nnumpy 1.14.1 \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/372", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/372/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/372/events", "html_url": "https://github.com/HIPS/autograd/issues/372", "id": 306722076, "node_id": "MDU6SXNzdWUzMDY3MjIwNzY=", "number": 372, "title": "np.diagonal fails", "user": {"login": "martinwu42", "id": 23053399, "node_id": "MDQ6VXNlcjIzMDUzMzk5", "avatar_url": "https://avatars2.githubusercontent.com/u/23053399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwu42", "html_url": "https://github.com/martinwu42", "followers_url": "https://api.github.com/users/martinwu42/followers", "following_url": "https://api.github.com/users/martinwu42/following{/other_user}", "gists_url": "https://api.github.com/users/martinwu42/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwu42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwu42/subscriptions", "organizations_url": "https://api.github.com/users/martinwu42/orgs", "repos_url": "https://api.github.com/users/martinwu42/repos", "events_url": "https://api.github.com/users/martinwu42/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwu42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-20T04:04:03Z", "updated_at": "2018-11-28T06:00:02Z", "closed_at": "2018-11-28T06:00:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code fails\r\n\r\n```python\r\nimport autograd.numpy as np\r\nfrom autograd import grad\r\n\r\n\r\ndef f(x):\r\n    d = np.diagonal(x)\r\n    s = np.sum(d)\r\n    return s\r\n\r\n\r\ndf = grad(f)\r\nx = np.array([[1, 2], [3, 4]], dtype=float)\r\nprint(df(x))\r\n```\r\n\r\nThe traceback is\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test_diagonal.py\", line 13, in <module>\r\n    print(df(x))\r\n  File \"C:\\Python36\\lib\\site-packages\\autograd\\wrap_util.py\", line 20, in nary_f\r\n    return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n  File \"C:\\Python36\\lib\\site-packages\\autograd\\differential_operators.py\", line 28, in grad\r\n    return vjp(vspace(ans).ones())\r\n  File \"C:\\Python36\\lib\\site-packages\\autograd\\core.py\", line 14, in vjp\r\n    def vjp(g): return backward_pass(g, end_node)\r\n  File \"C:\\Python36\\lib\\site-packages\\autograd\\core.py\", line 21, in backward_pass\r\n    ingrads = node.vjp(outgrad[0])\r\n  File \"C:\\Python36\\lib\\site-packages\\autograd\\core.py\", line 61, in <lambda>\r\n    return lambda g: (vjp(g),)\r\n  File \"C:\\Python36\\lib\\site-packages\\autograd\\numpy\\numpy_vjps.py\", line 533, in <lambda>\r\n    lambda g: anp.make_diagonal(g, offset, axis1, axis2))\r\n  File \"C:\\Python36\\lib\\site-packages\\autograd\\tracer.py\", line 48, in f_wrapped\r\n    return f_raw(*args, **kwargs)\r\n  File \"C:\\Python36\\lib\\site-packages\\autograd\\numpy\\numpy_wrapper.py\", line 126, in make_diagonal\r\n    raise NotImplementedError(\"Currently make_diagonal only supports offset=0, axis1=-1, axis2=-2\")\r\nNotImplementedError: Currently make_diagonal only supports offset=0, axis1=-1, axis2=-2\r\n```\r\n\r\nHowever, the arguments of `make_diagonal` are `offset=0, axis1=0, axis2=1`, and they are identical to `offset=0, axis1=-1, axis2=-2` for a 2D array. If I comment the `raise` lines in `numpy_wrapper.py`, the code works as intended.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/365", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/365/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/365/events", "html_url": "https://github.com/HIPS/autograd/issues/365", "id": 299344739, "node_id": "MDU6SXNzdWUyOTkzNDQ3Mzk=", "number": 365, "title": "Trying to use grad on function with multiple parameters in different", "user": {"login": "echo66", "id": 778261, "node_id": "MDQ6VXNlcjc3ODI2MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/778261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echo66", "html_url": "https://github.com/echo66", "followers_url": "https://api.github.com/users/echo66/followers", "following_url": "https://api.github.com/users/echo66/following{/other_user}", "gists_url": "https://api.github.com/users/echo66/gists{/gist_id}", "starred_url": "https://api.github.com/users/echo66/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echo66/subscriptions", "organizations_url": "https://api.github.com/users/echo66/orgs", "repos_url": "https://api.github.com/users/echo66/repos", "events_url": "https://api.github.com/users/echo66/events{/privacy}", "received_events_url": "https://api.github.com/users/echo66/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-22T13:01:16Z", "updated_at": "2018-02-23T11:26:32Z", "closed_at": "2018-02-23T11:26:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Greetings! I'm trying to create code for maximum likelihood estimation of multivariate normal parameters. This is my current code: \r\n\r\n```python\r\nimport autograd.numpy as np\r\nimport autograd.scipy as scipy\r\nfrom autograd import grad\r\n\r\n\r\nx = ([[0.5, -0.2], [0.5, -0.2]])\r\nmean = np.array([0.5, -0.2])\r\ncov = np.array([[2.0, 0.3], [0.3, 0.5]])\r\n\r\n\r\ndef log_likelihood_agg(mean_, cov_, inputs):\r\n    print('INSIDE FUNC')\r\n    print(mean_)\r\n    print()\r\n    print(cov_)\r\n    print()\r\n    print(inputs)\r\n    print()\r\n    r = scipy.stats.multivariate_normal.logpdf(inputs, mean=mean_, cov=cov_)\r\n    return np.sum(r)\r\n\r\ng = grad(log_likelihood_agg, [0, 1])\r\n\r\ng(mean, cov, x)\r\n```\r\nand this is the output:\r\n\r\n```\r\nINSIDE FUNC\r\nAutograd ArrayBox with value [ 0.5 -0.2]\r\n\r\nAutograd ArrayBox with value [[2.  0.3]\r\n [0.3 0.5]]\r\n\r\n[[0.5, -0.2], [0.5, -0.2]]\r\n\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-17-970f954215c2> in <module>()\r\n     27 g = grad(log_likelihood_agg, [0, 1])\r\n     28 \r\n---> 29 g(mean, cov, x)\r\n\r\n~/.local/lib/python3.6/site-packages/autograd/wrap_util.py in nary_f(*args, **kwargs)\r\n     18             else:\r\n     19                 x = tuple(args[i] for i in argnum)\r\n---> 20             return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n     21         return nary_f\r\n     22     return nary_operator\r\n\r\n~/.local/lib/python3.6/site-packages/autograd/differential_operators.py in grad(fun, x)\r\n     22     arguments as `fun`, but returns the gradient instead. The function `fun`\r\n     23     should be scalar-valued. The gradient has the same type as the argument.\"\"\"\r\n---> 24     vjp, ans = _make_vjp(fun, x)\r\n     25     if not vspace(ans).size == 1:\r\n     26         raise TypeError(\"Grad only applies to real scalar-output functions. \"\r\n\r\n~/.local/lib/python3.6/site-packages/autograd/core.py in make_vjp(fun, x)\r\n      8 def make_vjp(fun, x):\r\n      9     start_node = VJPNode.new_root(x)\r\n---> 10     end_value, end_node =  trace(start_node, fun, x)\r\n     11     if end_node is None:\r\n     12         def vjp(g): return vspace(x).zeros()\r\n\r\n~/.local/lib/python3.6/site-packages/autograd/tracer.py in trace(start_node, fun, x)\r\n      8     with trace_stack.new_trace() as t:\r\n      9         start_box = new_box(x, t, start_node)\r\n---> 10         end_box = fun(start_box)\r\n     11         if isbox(end_box) and end_box._trace == start_box._trace:\r\n     12             return end_box._value, end_box._node\r\n\r\n~/.local/lib/python3.6/site-packages/autograd/wrap_util.py in unary_f(x)\r\n     13                 else:\r\n     14                     subargs = subvals(args, zip(argnum, x))\r\n---> 15                 return fun(*subargs, **kwargs)\r\n     16             if isinstance(argnum, int):\r\n     17                 x = args[argnum]\r\n\r\n<ipython-input-17-970f954215c2> in log_likelihood_agg(mean_, cov_, inputs)\r\n     17     print(inputs)\r\n     18     print()\r\n---> 19     r = scipy.stats.multivariate_normal.pdf(inputs, mean=mean_, cov=cov_)\r\n     20     return np.sum(r)\r\n     21 \r\n\r\n~/.local/lib/python3.6/site-packages/autograd/tracer.py in f_wrapped(*args, **kwargs)\r\n     46             return new_box(ans, trace, node)\r\n     47         else:\r\n---> 48             return f_raw(*args, **kwargs)\r\n     49     f_wrapped.fun = f_raw\r\n     50     f_wrapped._is_autograd_primitive = True\r\n\r\n~/.local/lib/python3.6/site-packages/scipy/stats/_multivariate.py in pdf(self, x, mean, cov, allow_singular)\r\n    508 \r\n    509         \"\"\"\r\n--> 510         dim, mean, cov = self._process_parameters(None, mean, cov)\r\n    511         x = self._process_quantiles(x, dim)\r\n    512         psd = _PSD(cov, allow_singular=allow_singular)\r\n\r\n~/.local/lib/python3.6/site-packages/scipy/stats/_multivariate.py in _process_parameters(self, dim, mean, cov)\r\n    376                         dim = cov.shape[0]\r\n    377             else:\r\n--> 378                 mean = np.asarray(mean, dtype=float)\r\n    379                 dim = mean.size\r\n    380         else:\r\n\r\n~/.local/lib/python3.6/site-packages/numpy/core/numeric.py in asarray(a, dtype, order)\r\n    490 \r\n    491     \"\"\"\r\n--> 492     return array(a, dtype, copy=False, order=order)\r\n    493 \r\n    494 \r\n\r\nValueError: setting an array element with a sequence.\r\n```\r\n\r\nI tried to do a small example with a linear regression\r\n```python\r\nimport numpy as o_np\r\nimport scipy as o_scipy\r\n\r\nimport autograd.numpy as np\r\nimport autograd.scipy as scipy\r\nfrom autograd import grad, multigrad_dict\r\n\r\n\r\ndef linear_regression(w, b, x):\r\n    print(w)\r\n    print(b)\r\n    r = np.dot(w, x) + b\r\n    print(r)\r\n    return np.sum(r)\r\n\r\nrs = np.random.RandomState(10)\r\n\r\nweights = rs.rand(4, 1).T\r\nbias = rs.rand(1, 1)\r\ninputs = np.array([\r\n    [1, 0, 0, 0],\r\n    [0, 1, 0, 0]\r\n]).T\r\n\r\nlr = grad(linear_regression, [0, 1])\r\n\r\nlr(weights, bias, inputs)\r\n```\r\nand the output was: \r\n\r\n```\r\nAutograd ArrayBox with value [[0.77132064 0.02075195 0.63364823 0.74880388]]\r\nAutograd ArrayBox with value [[0.49850701]]\r\nAutograd ArrayBox with value [[1.26982766 0.51925896]]\r\nOut[13]:\r\n(array([[1., 1., 0., 0.]]), array([[2.]]))\r\n```\r\nSo, it seems an issue related to the multivariate normal code. Finally, I tried a version with all parameters packet into a single parameters array \r\n\r\n```python\r\nimport numpy as o_np\r\nimport scipy as o_scipy\r\n\r\nimport autograd.numpy as np\r\nimport autograd.scipy as scipy\r\nfrom autograd import grad\r\nfrom autograd.misc import flatten\r\n\r\n\r\nmean = np.array([0.5, -0.2])\r\ncov = np.array([[2.0, 0.3], [0.3, 0.5]])\r\n\r\n\r\ndef mvn(params, inputs): \r\n    _mean_ = params[0:2]\r\n    _cov_ = params[2:].reshape(2,2)\r\n    \r\n    r = scipy.stats.multivariate_normal.logpdf(inputs, mean=_mean_, cov=_cov_)\r\n    return np.sum(r)\r\n\r\n\r\nparams, _ = flatten([mean, cov])\r\n\r\ng = grad(mvn)\r\n\r\ng(params, [[0.5, -0.2], [0.5, -0.2]])\r\n```\r\n\r\nAnd got the same error....\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-81-acf554f2ceff> in <module>()\r\n     24 g = grad(mvn)\r\n     25 \r\n---> 26 g(params, [[0.5, -0.2], [0.5, -0.2]])\r\n\r\n~/.local/lib/python3.6/site-packages/autograd/wrap_util.py in nary_f(*args, **kwargs)\r\n     18             else:\r\n     19                 x = tuple(args[i] for i in argnum)\r\n---> 20             return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n     21         return nary_f\r\n     22     return nary_operator\r\n\r\n~/.local/lib/python3.6/site-packages/autograd/differential_operators.py in grad(fun, x)\r\n     22     arguments as `fun`, but returns the gradient instead. The function `fun`\r\n     23     should be scalar-valued. The gradient has the same type as the argument.\"\"\"\r\n---> 24     vjp, ans = _make_vjp(fun, x)\r\n     25     if not vspace(ans).size == 1:\r\n     26         raise TypeError(\"Grad only applies to real scalar-output functions. \"\r\n\r\n~/.local/lib/python3.6/site-packages/autograd/core.py in make_vjp(fun, x)\r\n      8 def make_vjp(fun, x):\r\n      9     start_node = VJPNode.new_root(x)\r\n---> 10     end_value, end_node =  trace(start_node, fun, x)\r\n     11     if end_node is None:\r\n     12         def vjp(g): return vspace(x).zeros()\r\n\r\n~/.local/lib/python3.6/site-packages/autograd/tracer.py in trace(start_node, fun, x)\r\n      8     with trace_stack.new_trace() as t:\r\n      9         start_box = new_box(x, t, start_node)\r\n---> 10         end_box = fun(start_box)\r\n     11         if isbox(end_box) and end_box._trace == start_box._trace:\r\n     12             return end_box._value, end_box._node\r\n\r\n~/.local/lib/python3.6/site-packages/autograd/wrap_util.py in unary_f(x)\r\n     13                 else:\r\n     14                     subargs = subvals(args, zip(argnum, x))\r\n---> 15                 return fun(*subargs, **kwargs)\r\n     16             if isinstance(argnum, int):\r\n     17                 x = args[argnum]\r\n\r\n<ipython-input-81-acf554f2ceff> in mvn(params, inputs)\r\n     16     _cov_ = params[2:].reshape(2,2)\r\n     17 \r\n---> 18     r = scipy.stats.multivariate_normal.logpdf(inputs, mean=_mean_, cov=_cov_)\r\n     19     return np.sum(r)\r\n     20 \r\n\r\n~/.local/lib/python3.6/site-packages/autograd/tracer.py in f_wrapped(*args, **kwargs)\r\n     46             return new_box(ans, trace, node)\r\n     47         else:\r\n---> 48             return f_raw(*args, **kwargs)\r\n     49     f_wrapped.fun = f_raw\r\n     50     f_wrapped._is_autograd_primitive = True\r\n\r\n~/.local/lib/python3.6/site-packages/scipy/stats/_multivariate.py in logpdf(self, x, mean, cov, allow_singular)\r\n    482 \r\n    483         \"\"\"\r\n--> 484         dim, mean, cov = self._process_parameters(None, mean, cov)\r\n    485         x = self._process_quantiles(x, dim)\r\n    486         psd = _PSD(cov, allow_singular=allow_singular)\r\n\r\n~/.local/lib/python3.6/site-packages/scipy/stats/_multivariate.py in _process_parameters(self, dim, mean, cov)\r\n    376                         dim = cov.shape[0]\r\n    377             else:\r\n--> 378                 mean = np.asarray(mean, dtype=float)\r\n    379                 dim = mean.size\r\n    380         else:\r\n\r\n~/.local/lib/python3.6/site-packages/numpy/core/numeric.py in asarray(a, dtype, order)\r\n    490 \r\n    491     \"\"\"\r\n--> 492     return array(a, dtype, copy=False, order=order)\r\n    493 \r\n    494 \r\n\r\nValueError: setting an array element with a sequence.\r\n```\r\n\r\nI thought it was just a problem with the way I was using parameters in function signature. But I even tried this: \r\n\r\n```python\r\nimport autograd.numpy as np\r\nimport autograd.scipy as scipy\r\nfrom autograd import grad\r\n\r\nx = [[0.5, -0.2], [0.5, -0.2]]\r\nmean = np.array([0.5, -0.2])\r\ncov = np.array([[2.0, 0.3], [0.3, 0.5]])\r\n\r\n\r\nobj = lambda param: np.sum(np.array([scipy.stats.multivariate_normal.logpdf(x, mean=param, cov=cov)]))\r\n\r\nobj_ = grad(obj)\r\n\r\nobj_(mean)\r\n```\r\n\r\nAnd got the exact same error. :disappointed: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/364", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/364/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/364/events", "html_url": "https://github.com/HIPS/autograd/issues/364", "id": 298204748, "node_id": "MDU6SXNzdWUyOTgyMDQ3NDg=", "number": 364, "title": "Using autograd", "user": {"login": "tynanseltzer", "id": 18730424, "node_id": "MDQ6VXNlcjE4NzMwNDI0", "avatar_url": "https://avatars2.githubusercontent.com/u/18730424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tynanseltzer", "html_url": "https://github.com/tynanseltzer", "followers_url": "https://api.github.com/users/tynanseltzer/followers", "following_url": "https://api.github.com/users/tynanseltzer/following{/other_user}", "gists_url": "https://api.github.com/users/tynanseltzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/tynanseltzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tynanseltzer/subscriptions", "organizations_url": "https://api.github.com/users/tynanseltzer/orgs", "repos_url": "https://api.github.com/users/tynanseltzer/repos", "events_url": "https://api.github.com/users/tynanseltzer/events{/privacy}", "received_events_url": "https://api.github.com/users/tynanseltzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-19T09:15:41Z", "updated_at": "2018-02-23T15:10:12Z", "closed_at": "2018-02-23T15:10:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to find coefficients of a function f(y) and the w such that d^2y/dt^2 + w^2y = f(y) matches some given data set. To do this, I'm using scipy's odeint and gradient descent, with the following code\r\n\r\nf = open('foo', 'r')\r\nt = f.readline().rstrip().split()\r\nreal = f.readline().rstrip().split()\r\nreal = list(map(float,real))\r\nt = list(map(float,t))\r\n#t =  t = np.linspace(0, 50, 500)\r\n\r\ndef objective(params, step):\r\n    sol = odeint(osc, q0, t, args=(params[0],params[1],params[2], params[3]), full_output = 0)\r\n    real = np.array(real)\r\n    error = np.sum((sol[:,0]-real)**2)\r\n    return error\r\ndef osc(q, t, w, coef1,coef2,coef3):\r\n    f = np.poly1d([coef1,coef2,coef3])\r\n    x, y = q\r\n    dqdt = [y, -w**2*x +f(x)]\r\n    return dqdt\r\nw = 1.0\r\ncoef1 = 0.0\r\ncoef2 = 0.0\r\ncoef3 = 0.0\r\n\r\nparams =(w,coef1,coef2,coef3)\r\nq0 = [2,1]\r\n\r\ndef callback(params, step, g):\r\n    if step % 1000 == 0:\r\n        print(\"Iteration {0:3d} objective {1}\".format(step, objective(params, step)))\r\n        \r\nprint(type(grad(objective)))\r\nparams = adam(elementwise_grad(objective), params, step_size=0.001, num_iters=5001, callback=callback)        \r\n\r\nHowever, the type passed into objective by autograd (ArrayBox) seems to violently disagree with odeint.  ValueError: setting an array element with a sequence.\r\nIs there anything I can do to assuage this, or is there another way I could approach the problem?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/361", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/361/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/361/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/361/events", "html_url": "https://github.com/HIPS/autograd/issues/361", "id": 293642723, "node_id": "MDU6SXNzdWUyOTM2NDI3MjM=", "number": 361, "title": "Complex derivative wrong", "user": {"login": "jchayat", "id": 1694029, "node_id": "MDQ6VXNlcjE2OTQwMjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1694029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jchayat", "html_url": "https://github.com/jchayat", "followers_url": "https://api.github.com/users/jchayat/followers", "following_url": "https://api.github.com/users/jchayat/following{/other_user}", "gists_url": "https://api.github.com/users/jchayat/gists{/gist_id}", "starred_url": "https://api.github.com/users/jchayat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jchayat/subscriptions", "organizations_url": "https://api.github.com/users/jchayat/orgs", "repos_url": "https://api.github.com/users/jchayat/repos", "events_url": "https://api.github.com/users/jchayat/events{/privacy}", "received_events_url": "https://api.github.com/users/jchayat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-01T18:50:22Z", "updated_at": "2018-02-03T23:24:21Z", "closed_at": "2018-02-03T23:20:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n>>> value_and_grad(lambda x: x)(1.0j)\r\n(1j, (1+1j))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/360", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/360/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/360/events", "html_url": "https://github.com/HIPS/autograd/issues/360", "id": 293548803, "node_id": "MDU6SXNzdWUyOTM1NDg4MDM=", "number": 360, "title": "Tensordot broken", "user": {"login": "jchayat", "id": 1694029, "node_id": "MDQ6VXNlcjE2OTQwMjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1694029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jchayat", "html_url": "https://github.com/jchayat", "followers_url": "https://api.github.com/users/jchayat/followers", "following_url": "https://api.github.com/users/jchayat/following{/other_user}", "gists_url": "https://api.github.com/users/jchayat/gists{/gist_id}", "starred_url": "https://api.github.com/users/jchayat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jchayat/subscriptions", "organizations_url": "https://api.github.com/users/jchayat/orgs", "repos_url": "https://api.github.com/users/jchayat/repos", "events_url": "https://api.github.com/users/jchayat/events{/privacy}", "received_events_url": "https://api.github.com/users/jchayat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-02-01T14:24:42Z", "updated_at": "2018-02-05T12:16:27Z", "closed_at": "2018-02-03T23:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the following example `foo` and `bar` are equivalent, however their gradient differs (`bar` being correct).\r\n\r\n```python\r\n\r\ndef foo(x):\r\n    return tensordot(x, [1.0, 1.0j], axes=([0], [0]))\r\n\r\ndef bar(x):\r\n    return sum(x * [1.0, 1.0j])\r\n\r\n>>> value_and_grad(foo)(array([1.0, 1.0]))\r\n(array(1.+1.j), array([ 1.+1.j, -1.+1.j]))\r\n\r\n>>> value_and_grad(bar)(array([1.0, 1.0]))\r\n((1+1j), array([ 1., -1.]))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/357", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/357/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/357/events", "html_url": "https://github.com/HIPS/autograd/issues/357", "id": 290553610, "node_id": "MDU6SXNzdWUyOTA1NTM2MTA=", "number": 357, "title": "Resolved: np.copy", "user": {"login": "solitaryangler", "id": 10549837, "node_id": "MDQ6VXNlcjEwNTQ5ODM3", "avatar_url": "https://avatars1.githubusercontent.com/u/10549837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solitaryangler", "html_url": "https://github.com/solitaryangler", "followers_url": "https://api.github.com/users/solitaryangler/followers", "following_url": "https://api.github.com/users/solitaryangler/following{/other_user}", "gists_url": "https://api.github.com/users/solitaryangler/gists{/gist_id}", "starred_url": "https://api.github.com/users/solitaryangler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solitaryangler/subscriptions", "organizations_url": "https://api.github.com/users/solitaryangler/orgs", "repos_url": "https://api.github.com/users/solitaryangler/repos", "events_url": "https://api.github.com/users/solitaryangler/events{/privacy}", "received_events_url": "https://api.github.com/users/solitaryangler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-22T17:41:07Z", "updated_at": "2018-01-28T11:17:45Z", "closed_at": "2018-01-28T11:17:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\nI'm new to autograd. I'm getting a funny error with `np.copy`. To illustrate my error I modified an existing example which also produces the same error:\r\n```\r\nfrom __future__ import division\r\nimport autograd.numpy as np\r\nfrom autograd import grad\r\n\r\ndef fun(W, inds):\r\n   W = np.concatenate((W, inds), axis=1)\r\n   W = np.copy(W) ## <-- Error line\r\n   inds = W[:,-1]\r\n   W = W[:,:-1]\r\n   return W[np.int64(inds)].sum()\r\n\r\nW = np.random.randn(5, 10)\r\ninds = np.ones(5)[:,None]\r\ng = grad(fun)\r\nprint (g(W, inds))\r\n```\r\n\r\nI am using python 3.5. The error:\r\n\r\n> Traceback (most recent call last):\r\n  File \"cost_dotsq.py\", line 15, in <module>\r\n    print (g(W, inds))\r\n  File \".../anaconda2/envs/geomni35/lib/python3.5/site-packages/autograd/wrap_util.py\", line 20, in nary_f\r\n    return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n  File \".../anaconda2/envs/geomni35/lib/python3.5/site-packages/autograd/differential_operators.py\", line 24, in grad\r\n    vjp, ans = _make_vjp(fun, x)\r\n  File \".../anaconda2/envs/geomni35/lib/python3.5/site-packages/autograd/core.py\", line 10, in make_vjp\r\n    end_value, end_node =  trace(start_node, fun, x)\r\n  File \".../anaconda2/envs/geomni35/lib/python3.5/site-packages/autograd/tracer.py\", line 10, in trace\r\n    end_box = fun(start_box)\r\n  File \".../anaconda2/envs/geomni35/lib/python3.5/site-packages/autograd/wrap_util.py\", line 15, in unary_f\r\n    return fun(*subargs, **kwargs)\r\n  File \"cost_dotsq.py\", line 7, in fun\r\n    W = np.copy(W)\r\n  File \".../anaconda2/envs/geomni35/lib/python3.5/site-packages/autograd/tracer.py\", line 45, in f_wrapped\r\n    node = node_constructor(ans, f_wrapped, argvals, kwargs, argnums, parents)\r\n  File \".../anaconda2/envs/geomni35/lib/python3.5/site-packages/autograd/core.py\", line 30, in __init__\r\n    self.vjp = primitive_vjps[fun](parent_argnums, value, args, kwargs)\r\nKeyError: <function primitive.<locals>.f_wrapped at 0x7f3e0fb9a9d8>\r\n\r\nThanks for your help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/353", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/353/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/353/events", "html_url": "https://github.com/HIPS/autograd/issues/353", "id": 290341622, "node_id": "MDU6SXNzdWUyOTAzNDE2MjI=", "number": 353, "title": "Documenting CuPy wrapper progress", "user": {"login": "ericmjl", "id": 2631566, "node_id": "MDQ6VXNlcjI2MzE1NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericmjl", "html_url": "https://github.com/ericmjl", "followers_url": "https://api.github.com/users/ericmjl/followers", "following_url": "https://api.github.com/users/ericmjl/following{/other_user}", "gists_url": "https://api.github.com/users/ericmjl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericmjl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericmjl/subscriptions", "organizations_url": "https://api.github.com/users/ericmjl/orgs", "repos_url": "https://api.github.com/users/ericmjl/repos", "events_url": "https://api.github.com/users/ericmjl/events{/privacy}", "received_events_url": "https://api.github.com/users/ericmjl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2018-01-22T03:34:58Z", "updated_at": "2018-11-20T15:25:49Z", "closed_at": "2018-05-17T00:14:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Starting this issue to document progress on wrapping CuPy.\r\n\r\n- [x] `import autograd.cupy as cp`\r\n- [x] instantiate arrays from scalars, lists, and tuples.\r\n\r\n```python\r\ncp.array(1)\r\ncp.array([1, 2])\r\ncp.array([1, 3]) + cp.array([1, 1])\r\n```\r\n\r\n- [x] check that gradients work\r\n\r\n```python\r\nimport autograd.cupy as cp\r\nfrom autograd import elementwise_grad as egrad\r\n\r\ndef f(x):\r\n    return cp.sin(x)\r\n\r\ndef g(x):\r\n    return x + 2\r\n\r\ndf = egrad(f)\r\ndg = egrad(g)\r\n\r\na = cp.array([1, 1])\r\n\r\nprint(f(a))\r\nprint(df(a))\r\n\r\nprint(g(a))\r\nprint(dg(a))\r\n\r\n```\r\n\r\n- [x] Check that higher derivatives work.\r\n\r\n```python\r\nimport autograd.cupy as cp\r\nfrom autograd import elementwise_grad as egrad\r\nimport numpy as np\r\n\r\na = cp.arange(-2 * np.pi, 2 * np.pi, 0.01)\r\n\r\ndef sin(x):\r\n    return cp.sin(x)\r\n\r\ndsin = egrad(sin)\r\nddsin = egrad(dsin)\r\n\r\nsin(a)\r\ndsin(a)\r\nddsin(a)\r\n```\r\n- [ ] Fix `ValueError: object __array__ method not producing an array`. \r\n- [ ] Run tests for all of the CuPy wrapped functions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/352", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/352/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/352/events", "html_url": "https://github.com/HIPS/autograd/issues/352", "id": 290327458, "node_id": "MDU6SXNzdWUyOTAzMjc0NTg=", "number": 352, "title": "CuPy branch issue", "user": {"login": "ericmjl", "id": 2631566, "node_id": "MDQ6VXNlcjI2MzE1NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericmjl", "html_url": "https://github.com/ericmjl", "followers_url": "https://api.github.com/users/ericmjl/followers", "following_url": "https://api.github.com/users/ericmjl/following{/other_user}", "gists_url": "https://api.github.com/users/ericmjl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericmjl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericmjl/subscriptions", "organizations_url": "https://api.github.com/users/ericmjl/orgs", "repos_url": "https://api.github.com/users/ericmjl/repos", "events_url": "https://api.github.com/users/ericmjl/events{/privacy}", "received_events_url": "https://api.github.com/users/ericmjl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-22T01:34:31Z", "updated_at": "2018-01-22T02:28:36Z", "closed_at": "2018-01-22T02:28:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not sure where to get help over this, so I've decided to post here. Ping @duvenaud and @mattjj, maybe you guys might be able to help debug this?\r\n\r\nIn my CuPy branch, I've had issues with instantiating an array. Perhaps the following IPython terminal session snippet can illustrate:\r\n\r\n```\r\nIn [1]: import autograd.cupy as cp\r\n\r\nIn [2]: cp.array([1, 1])\r\n()\r\n{}\r\n1 1\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-2-d0af7ff69a60> in <module>()\r\n----> 1 cp.array([1, 1])\r\n\r\n~/github/software/autograd/autograd/cupy/cupy_wrapper.py in array(A, *args, **kwargs)\r\n     75     t = builtins.type(A)\r\n     76     if t in (list, tuple):\r\n---> 77         return array_from_args(args, kwargs, *map(array, A))\r\n     78     else:\r\n     79         return _array_from_scalar_or_array(args, kwargs, A)\r\n\r\n~/github/software/autograd/autograd/tracer.py in f_wrapped(*args, **kwargs)\r\n     46             return new_box(ans, trace, node)\r\n     47         else:\r\n---> 48             return f_raw(*args, **kwargs)\r\n     49     f_wrapped.fun = f_raw\r\n     50     f_wrapped._is_autograd_primitive = True\r\n\r\n~/github/software/autograd/autograd/cupy/cupy_wrapper.py in array_from_args(array_args, array_kwargs, *args)\r\n     97     print(array_kwargs)\r\n     98     print(*args)\r\n---> 99     return _cp.array(args, *array_args, **array_kwargs)\r\n    100 \r\n    101 def select(condlist, choicelist, default=0):\r\n\r\n~/anaconda/envs/autograd_cupy_dev/lib/python3.6/site-packages/cupy/creation/from_data.py in array(obj, dtype, copy, order, subok, ndmin)\r\n     39 \r\n     40     \"\"\"\r\n---> 41     return core.array(obj, dtype, copy, order, subok, ndmin)\r\n     42 \r\n     43 \r\n\r\ncupy/core/core.pyx in cupy.core.core.array()\r\n\r\ncupy/core/core.pyx in cupy.core.core.array()\r\n\r\nValueError: Unsupported dtype object\r\n\r\nIn [3]: import cupy\r\n\r\nIn [4]: cupy.array([1, 1])\r\nOut[4]: array([1, 1])\r\n```\r\n\r\nWhat I've done with [my CuPy branch](https://github.com/ericmjl/autograd/tree/cupy/autograd/cupy) is to copy over the `autograd.numpy` files and on first pass, change all `cupy` to `numpy`. Thus, I'm not sure what I might have missed here with the array instantiation code that is causing this to happen. Do you guys know where I could start to debug?\r\n\r\nNo worries if you all are busy, I just thought I'd take a chance pinging here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/350", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/350/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/350/events", "html_url": "https://github.com/HIPS/autograd/issues/350", "id": 289317820, "node_id": "MDU6SXNzdWUyODkzMTc4MjA=", "number": 350, "title": "vjp of np.rollaxis incorrect for negative axis argument", "user": {"login": "j-towns", "id": 15261883, "node_id": "MDQ6VXNlcjE1MjYxODgz", "avatar_url": "https://avatars2.githubusercontent.com/u/15261883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j-towns", "html_url": "https://github.com/j-towns", "followers_url": "https://api.github.com/users/j-towns/followers", "following_url": "https://api.github.com/users/j-towns/following{/other_user}", "gists_url": "https://api.github.com/users/j-towns/gists{/gist_id}", "starred_url": "https://api.github.com/users/j-towns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j-towns/subscriptions", "organizations_url": "https://api.github.com/users/j-towns/orgs", "repos_url": "https://api.github.com/users/j-towns/repos", "events_url": "https://api.github.com/users/j-towns/events{/privacy}", "received_events_url": "https://api.github.com/users/j-towns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-17T15:59:12Z", "updated_at": "2018-02-24T16:22:55Z", "closed_at": "2018-02-24T16:22:55Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "To replicate this problem:\r\n```python\r\nIn [1]: import autograd.numpy as np\r\n\r\nIn [2]: from autograd.test_util import check_grads\r\n\r\nIn [3]: check_grads(np.rollaxis, modes=['rev'])(np.random.randn(1, 2, 3), -1)\r\n\r\n~/dev/autograd/autograd/test_util.py in check_vjp(f, x)\r\n     29\r\n     30     vjp_y = x_vs.covector(vjp(y_vs.covector(y_v)))\r\n---> 31     assert vspace(vjp_y) == x_vs\r\n     32     vjv_numeric = x_vs.inner_prod(x_v, vjp_y)\r\n     33     vjv_exact   = y_vs.inner_prod(y_v, jvp(x_v))\r\n\r\nAssertionError:\r\n```\r\n\r\nThis was silently giving incorrect gradients in my code, a bug which was not easy to track down! This would have been picked up by vspace checking, so maybe we should write a `vspace_checking_grad` operator which enables vspace checks for every primitive.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/349", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/349/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/349/events", "html_url": "https://github.com/HIPS/autograd/issues/349", "id": 287135883, "node_id": "MDU6SXNzdWUyODcxMzU4ODM=", "number": 349, "title": "problem sort multidimensional data", "user": {"login": "imnuaufe", "id": 34753448, "node_id": "MDQ6VXNlcjM0NzUzNDQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/34753448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imnuaufe", "html_url": "https://github.com/imnuaufe", "followers_url": "https://api.github.com/users/imnuaufe/followers", "following_url": "https://api.github.com/users/imnuaufe/following{/other_user}", "gists_url": "https://api.github.com/users/imnuaufe/gists{/gist_id}", "starred_url": "https://api.github.com/users/imnuaufe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imnuaufe/subscriptions", "organizations_url": "https://api.github.com/users/imnuaufe/orgs", "repos_url": "https://api.github.com/users/imnuaufe/repos", "events_url": "https://api.github.com/users/imnuaufe/events{/privacy}", "received_events_url": "https://api.github.com/users/imnuaufe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-09T15:50:44Z", "updated_at": "2018-01-11T14:43:02Z", "closed_at": "2018-01-11T14:43:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I encounter a problem when I try to sort multidimensional data. Currently the code only support 1 dimension. I guess I can change function unpermuter as the following:\r\n\r\ndef grad_sort(ans, x, axis=-1, kind='quicksort', order=None):\r\n    #TODO: Cast input with np.asanyarray()\r\n    #if len(x.shape) > 1:\r\n        #raise NotImplementedError(\r\n            #\"Gradient of sort not implemented for multi-dimensional arrays.\")\r\n    sort_perm = anp.argsort(x, axis, kind, order)\r\n    return lambda g: unpermuter(g, sort_perm,axis,kind, order)\r\n\r\ndef unpermuter(g, permutation,axis,kind, order):\r\n    #unsort = anp.zeros(len(permutation), dtype=int)\r\n    #unsort[permutation] = list(range(len(permutation)))\r\n    unsort = onp.argsort(permutation,axis,kind, order) #I added\r\n    return g[unsort]\r\nI get following error:\r\n\r\n>>>outgrads.get(parent)[0].shape\r\n>>>(256, 10, 10)\r\n>>>ingrad.shape\r\n>>>(256, 10)\r\n\r\nin the function:\r\ndef backward_pass(g, end_node):\r\n    outgrads = {end_node : (g, False)}\r\n    for node in toposort(end_node):\r\n        outgrad = outgrads.pop(node)\r\n        ingrads = node.vjp(outgrad[0])\r\n        for parent, ingrad in zip(node.parents, ingrads):\r\n             outgrads[parent] = add_outgrads(outgrads.get(parent), ingrad)\r\n    return outgrad[0]\r\n\r\nHow can I solve the problem, thanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/346", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/346/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/346/events", "html_url": "https://github.com/HIPS/autograd/issues/346", "id": 281654535, "node_id": "MDU6SXNzdWUyODE2NTQ1MzU=", "number": 346, "title": "The sigmoid definition in the tutorial is wrong", "user": {"login": "ben-ix", "id": 9159657, "node_id": "MDQ6VXNlcjkxNTk2NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/9159657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben-ix", "html_url": "https://github.com/ben-ix", "followers_url": "https://api.github.com/users/ben-ix/followers", "following_url": "https://api.github.com/users/ben-ix/following{/other_user}", "gists_url": "https://api.github.com/users/ben-ix/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben-ix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben-ix/subscriptions", "organizations_url": "https://api.github.com/users/ben-ix/orgs", "repos_url": "https://api.github.com/users/ben-ix/repos", "events_url": "https://api.github.com/users/ben-ix/events{/privacy}", "received_events_url": "https://api.github.com/users/ben-ix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-13T07:50:53Z", "updated_at": "2018-01-30T14:42:13Z", "closed_at": "2018-01-30T14:41:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, \r\n\r\nJust a small point.\r\n\r\nReading through the [tutorial](https://github.com/HIPS/autograd/blob/master/docs/tutorial.md), the definition of sigmoid is given in terms of tanh as\r\n\r\n```\r\ndef sigmoid(x):\r\n    return 0.5*(np.tanh(x) + 1)\r\n```\r\n\r\nBut should it not be\r\n\r\n```\r\ndef sigmoid(x):\r\n    return 0.5*(np.tanh(x/2) + 1)\r\n```\r\n\r\nFor example sigmoid(1) with the first method gives ~0.88, with the second method gives the expected ~0.73.\r\n\r\nThis obviously isn't a huge issue but could be misleading if people just used the example code without double checking!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/339", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/339/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/339/events", "html_url": "https://github.com/HIPS/autograd/issues/339", "id": 274892897, "node_id": "MDU6SXNzdWUyNzQ4OTI4OTc=", "number": 339, "title": "Computing value and grad and hvp in one go", "user": {"login": "j-towns", "id": 15261883, "node_id": "MDQ6VXNlcjE1MjYxODgz", "avatar_url": "https://avatars2.githubusercontent.com/u/15261883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j-towns", "html_url": "https://github.com/j-towns", "followers_url": "https://api.github.com/users/j-towns/followers", "following_url": "https://api.github.com/users/j-towns/following{/other_user}", "gists_url": "https://api.github.com/users/j-towns/gists{/gist_id}", "starred_url": "https://api.github.com/users/j-towns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j-towns/subscriptions", "organizations_url": "https://api.github.com/users/j-towns/orgs", "repos_url": "https://api.github.com/users/j-towns/repos", "events_url": "https://api.github.com/users/j-towns/events{/privacy}", "received_events_url": "https://api.github.com/users/j-towns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-17T15:04:31Z", "updated_at": "2017-11-19T15:28:44Z", "closed_at": "2017-11-19T14:47:03Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Given some function `fun`, I'd like to calculate `fun(x)`, `grad(fun)(x)` and `hessian_vector_product(fun)(x, v)` all in one go.\r\n\r\nI've come up with an implementation but it's quite ugly\r\n```python\r\nfrom autograd import make_vjp\r\n\r\ndef val_and_grad_and_hvp(fun):\r\n    \"\"\"\r\n    Evaluates fun(x), grad(fun)(x) and hvp(fun)(x, v) in one go.\r\n\r\n    I've copied the idea in autograd.differential_operators.grad_and_aux to\r\n    implement this but there ought to be a much nicer way...\r\n    \"\"\"\r\n    saved = lambda: None\r\n    def vghvp(x, v):\r\n        def grad_and_val(x):\r\n            vjp, val = make_vjp(fun)(x)\r\n            saved.val = val\r\n            return vjp(1.)\r\n        hvpfun, grad = make_vjp(grad_and_val)(x)\r\n        return saved.val._value, grad, hvpfun(v)\r\n    return vghvp\r\n```\r\nCan we make this a bit nicer? It would be great if it were possible to avoid the trick of saving the value as a function's attribute, and the manual unboxing (`saved.val._value`), but maybe this can't be done with our current make_vjp API...\r\n\r\n**Edit:** OK here's a slightly neater solution, making use of our new autograd.builtins.tuple, but it has an unnecessary extra backward pass through fun so isn't as efficient as I'd like:\r\n```python\r\nfrom autograd.builtins import tuple as atuple\r\nfrom autograd import make_vjp\r\n\r\ndef val_and_grad_and_hvp(fun):\r\n    \"\"\"\r\n    Evaluates fun(x), grad(fun)(x) and hvp(fun)(x, v) in one go.\r\n    \"\"\"\r\n    def vghvp(x, v):\r\n        def grad_and_val(x):\r\n            vjp, val = make_vjp(fun)(x)\r\n            return atuple((vjp(1.), val))\r\n        hvpfun, (grad, val) = make_vjp(grad_and_val)(x)\r\n        return val, grad, hvpfun((v, 0))\r\n    return vghvp  #                  \u2191 This zero creates unnecessary backward pass\r\n```\r\nPerhaps we can use the same idea to simplify grad_and_aux too.\r\n\r\n**Edit 2:** Actually I don't think that zero will create much overhead in this case, because it's part of the same backward pass as `v` so should be 'fanned in' (or 'fanned out'?) and won't add more than a very small overhead to the FLO count.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/335", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/335/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/335/events", "html_url": "https://github.com/HIPS/autograd/issues/335", "id": 273411955, "node_id": "MDU6SXNzdWUyNzM0MTE5NTU=", "number": 335, "title": "assert vspace(vjp_y) == x_vs", "user": {"login": "jluttine", "id": 2195834, "node_id": "MDQ6VXNlcjIxOTU4MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2195834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jluttine", "html_url": "https://github.com/jluttine", "followers_url": "https://api.github.com/users/jluttine/followers", "following_url": "https://api.github.com/users/jluttine/following{/other_user}", "gists_url": "https://api.github.com/users/jluttine/gists{/gist_id}", "starred_url": "https://api.github.com/users/jluttine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jluttine/subscriptions", "organizations_url": "https://api.github.com/users/jluttine/orgs", "repos_url": "https://api.github.com/users/jluttine/repos", "events_url": "https://api.github.com/users/jluttine/events{/privacy}", "received_events_url": "https://api.github.com/users/jluttine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-13T12:26:32Z", "updated_at": "2017-11-19T08:51:15Z", "closed_at": "2017-11-19T08:51:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I must be missing something very obvious here, but why doesn't the below code work:\r\n\r\n```python\r\nfrom autograd import numpy as np\r\nfrom autograd.extend import primitive, defvjp\r\nfrom autograd.test_util import check_grads\r\n\r\n@primitive\r\ndef f(x):\r\n    y = np.zeros(2)\r\n    y[0] = x[0] ** 2\r\n    y[1] = x[0] + x[1]\r\n    return y\r\n \r\ndef df(y, x):\r\n    def _df(g):\r\n        dy = np.zeros(2)\r\n        dy[0] = 2 * g[0] * x[0]\r\n        dy[1] = g[0] + g[1]\r\n        return dy\r\n    return _df\r\n\r\ndefvjp(f, df)\r\ncheck_grads(f, modes=[\"rev\"])(np.array([1, 2]))\r\n```\r\n\r\nI get the following error:\r\n```\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-33-d116044e6089> in <module>()\r\n----> 1 check_grads(f, modes=[\"rev\"])(np.array([1, 2]))\r\n\r\n/.../lib/python3.5/site-packages/autograd/wrap_util.py in nary_f(*args, **kwargs)\r\n     18             else:\r\n     19                 x = tuple(args[i] for i in argnum)\r\n---> 20             return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n     21         return nary_f\r\n     22     return nary_operator\r\n\r\n/.../lib/python3.5/site-packages/autograd/test_util.py in check_grads(f, x, modes, order)\r\n     61             check_grads(grad_f, (0, 1), modes, order=order-1)(x, v)\r\n     62     if 'rev' in modes:\r\n---> 63         check_vjp(f, x)\r\n     64         if order > 1:\r\n     65             grad_f = lambda x, v: make_vjp(f, x)[0](v)\r\n\r\n/.../lib/python3.5/site-packages/autograd/test_util.py in check_vjp(f, x)\r\n     29 \r\n     30     vjp_y = x_vs.covector(vjp(y_vs.covector(y_v)))\r\n---> 31     assert vspace(vjp_y) == x_vs\r\n     32     vjv_numeric = x_vs.inner_prod(x_v, vjp_y)\r\n     33     vjv_exact   = y_vs.inner_prod(y_v, jvp(x_v))\r\n\r\nAssertionError: \r\n```\r\n\r\nI would have asked help on gitter, IRC or something similar but I couldn't find any such forum for Autograd.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/332", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/332/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/332/events", "html_url": "https://github.com/HIPS/autograd/issues/332", "id": 273004695, "node_id": "MDU6SXNzdWUyNzMwMDQ2OTU=", "number": 332, "title": "How to convert defgrad to 1.2?", "user": {"login": "jluttine", "id": 2195834, "node_id": "MDQ6VXNlcjIxOTU4MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2195834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jluttine", "html_url": "https://github.com/jluttine", "followers_url": "https://api.github.com/users/jluttine/followers", "following_url": "https://api.github.com/users/jluttine/following{/other_user}", "gists_url": "https://api.github.com/users/jluttine/gists{/gist_id}", "starred_url": "https://api.github.com/users/jluttine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jluttine/subscriptions", "organizations_url": "https://api.github.com/users/jluttine/orgs", "repos_url": "https://api.github.com/users/jluttine/repos", "events_url": "https://api.github.com/users/jluttine/events{/privacy}", "received_events_url": "https://api.github.com/users/jluttine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-10T17:26:01Z", "updated_at": "2017-12-21T09:32:12Z", "closed_at": "2017-12-21T09:32:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I upgraded to version 1.2 and switched from `defgrad` to the new `defvjp`. I didn't modify the actual gradient calculation function in any way. However, unit tests that are using `check_grads` to check the gradient numerically started suddenly failing. Also, some other unit tests that depend on the gradient of the function started failing. So, I guess I've done this conversion somehow incorrectly. I couldn't find any information on how to convert `defgrad` to the new `defvjp` (I only found this guide about switching from old `defvjp` to new `defvjp`: https://github.com/HIPS/autograd/blob/master/docs/updateguide.md#gradient-checking).\r\n\r\nSo, if I had a function:\r\n```\r\n@primitive\r\ndef f(x):\r\n    y = ...\r\n    return y\r\n\r\ndef df(y, x):\r\n    def g(dy):\r\n        d = ...\r\n        return d\r\n    return g\r\n\r\nf.defgrad(df)\r\n```\r\n\r\nI just changed `defgrad` method to `defvjp` function, nothing else changed:\r\n```\r\n@primitive\r\ndef f(x):\r\n    y = ...\r\n    return y\r\n\r\ndef df(y, x):\r\n    def g(dy):\r\n        d = ...\r\n        return d\r\n    return g\r\n\r\ndefvjp(f, df)\r\n```\r\n\r\nWhat am I doing wrong? What else should be modified?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/331", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/331/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/331/events", "html_url": "https://github.com/HIPS/autograd/issues/331", "id": 272938960, "node_id": "MDU6SXNzdWUyNzI5Mzg5NjA=", "number": 331, "title": "Confusing error message", "user": {"login": "jluttine", "id": 2195834, "node_id": "MDQ6VXNlcjIxOTU4MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2195834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jluttine", "html_url": "https://github.com/jluttine", "followers_url": "https://api.github.com/users/jluttine/followers", "following_url": "https://api.github.com/users/jluttine/following{/other_user}", "gists_url": "https://api.github.com/users/jluttine/gists{/gist_id}", "starred_url": "https://api.github.com/users/jluttine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jluttine/subscriptions", "organizations_url": "https://api.github.com/users/jluttine/orgs", "repos_url": "https://api.github.com/users/jluttine/repos", "events_url": "https://api.github.com/users/jluttine/events{/privacy}", "received_events_url": "https://api.github.com/users/jluttine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-10T13:52:33Z", "updated_at": "2017-11-18T18:34:53Z", "closed_at": "2017-11-18T18:32:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried the following:\r\n```\r\nfrom autograd import numpy as np\r\nfrom autograd import grad\r\nf = lambda x: np.append(x, 4)\r\ndf = grad(f)\r\ndf(np.ones(3))\r\n```\r\n\r\nAnd got the following error:\r\n```\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-9-76dbf5bddecc> in <module>()\r\n----> 1 df(np.ones(3))\r\n\r\n/.../lib/python3.5/site-packages/autograd/wrap_util.py in nary_f(*args, **kwargs)\r\n     18             else:\r\n     19                 x = tuple(args[i] for i in argnum)\r\n---> 20             return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)\r\n     21         return nary_f\r\n     22     return nary_operator\r\n\r\n/.../lib/python3.5/site-packages/autograd/differential_operators.py in grad(fun, x)\r\n     22     arguments as `fun`, but returns the gradient instead. The function `fun`\r\n     23     should be scalar-valued. The gradient has the same type as the argument.\"\"\"\r\n---> 24     vjp, ans = _make_vjp(fun, x)\r\n     25     if not vspace(ans).size == 1:\r\n     26         raise TypeError(\"Grad only applies to real scalar-output functions. \"\r\n\r\n/.../lib/python3.5/site-packages/autograd/core.py in make_vjp(fun, x)\r\n      8 def make_vjp(fun, x):\r\n      9     start_node = VJPNode.new_root(x)\r\n---> 10     end_value, end_node =  trace(start_node, fun, x)\r\n     11     if end_node is None:\r\n     12         def vjp(g): return vspace(x).zeros()\r\n\r\n/.../lib/python3.5/site-packages/autograd/tracer.py in trace(start_node, fun, x)\r\n      8     with trace_stack.new_trace() as t:\r\n      9         start_box = new_box(x, t, start_node)\r\n---> 10         end_box = fun(start_box)\r\n     11         if isbox(end_box) and end_box._trace == start_box._trace:\r\n     12             return end_box._value, end_box._node\r\n\r\n/.../lib/python3.5/site-packages/autograd/wrap_util.py in unary_f(x)\r\n     13                 else:\r\n     14                     subargs = subvals(args, zip(argnum, x))\r\n---> 15                 return fun(*subargs, **kwargs)\r\n     16             if isinstance(argnum, int):\r\n     17                 x = args[argnum]\r\n\r\n<ipython-input-7-542c5859855c> in <lambda>(x)\r\n----> 1 f = lambda x: np.append(x, 4)\r\n\r\n/.../lib/python3.5/site-packages/autograd/tracer.py in f_wrapped(*args, **kwargs)\r\n     43             argnums = tuple(argnum    for argnum, _   in boxed_args)\r\n     44             ans = f_wrapped(*argvals, **kwargs)\r\n---> 45             node = node_constructor(ans, f_wrapped, argvals, kwargs, argnums, parents)\r\n     46             return new_box(ans, trace, node)\r\n     47         else:\r\n\r\n/.../lib/python3.5/site-packages/autograd/core.py in __init__(self, value, fun, args, kwargs, parent_argnums, parents)\r\n     28     def __init__(self, value, fun, args, kwargs, parent_argnums, parents):\r\n     29         self.parents = parents\r\n---> 30         self.vjp = primitive_vjps[fun](parent_argnums, value, args, kwargs)\r\n     31 \r\n     32     def initialize_root(self, value):\r\n\r\nKeyError: <function primitive.<locals>.f_wrapped at 0x7f98bac5ec80>\r\n```\r\n\r\nApparently, gradient isn't implemented for `np.append`. Perhaps the error message could state that more clearly? Also, a feature request: Could the gradient of `np.append` be built into autograd?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/323", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/323/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/323/events", "html_url": "https://github.com/HIPS/autograd/issues/323", "id": 269353002, "node_id": "MDU6SXNzdWUyNjkzNTMwMDI=", "number": 323, "title": "Returned variational params are all NaN's", "user": {"login": "anataraj", "id": 2790038, "node_id": "MDQ6VXNlcjI3OTAwMzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2790038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anataraj", "html_url": "https://github.com/anataraj", "followers_url": "https://api.github.com/users/anataraj/followers", "following_url": "https://api.github.com/users/anataraj/following{/other_user}", "gists_url": "https://api.github.com/users/anataraj/gists{/gist_id}", "starred_url": "https://api.github.com/users/anataraj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anataraj/subscriptions", "organizations_url": "https://api.github.com/users/anataraj/orgs", "repos_url": "https://api.github.com/users/anataraj/repos", "events_url": "https://api.github.com/users/anataraj/events{/privacy}", "received_events_url": "https://api.github.com/users/anataraj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-28T21:53:17Z", "updated_at": "2017-10-30T16:38:31Z", "closed_at": "2017-10-30T15:33:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running a Bayesian logistic regression model with layer_sizes = [175, 1]. My activation function is a sigmoid. The returned VI parameters are all NaN's with run time warnings,\r\n\r\n1. autograd/core.py:81: RuntimeWarning: divide by zero encountered in log\r\n2. autograd/core.py:81: RuntimeWarning: divide by zero encountered in true_divide\r\n3. autograd/numpy/numpy_grads.py:20: RuntimeWarning: invalid value encountered in multiply anp.multiply.defvjp(   lambda g, ans, vs, gvs, x, y : unbroadcast(vs, gvs, y * g))\r\n\r\nMy guess is that the returned probabilities are very small leading to numerical instability. The piece of code that computes the log likelihood, which triggers these warnings, is log_lik = np.sum(np.log(label_probabilities)). Do you happen to know how small these probabilities can be before hitting a numerical underflow? Is there an elegant way to handle this issue?\r\n\r\nI am new to autograd. I apologize if this is not where I should be posting this error. Any help is appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/317", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/317/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/317/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/317/events", "html_url": "https://github.com/HIPS/autograd/issues/317", "id": 266785641, "node_id": "MDU6SXNzdWUyNjY3ODU2NDE=", "number": 317, "title": "Wrong definition of tanh in README", "user": {"login": "bgavran", "id": 3183608, "node_id": "MDQ6VXNlcjMxODM2MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3183608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgavran", "html_url": "https://github.com/bgavran", "followers_url": "https://api.github.com/users/bgavran/followers", "following_url": "https://api.github.com/users/bgavran/following{/other_user}", "gists_url": "https://api.github.com/users/bgavran/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgavran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgavran/subscriptions", "organizations_url": "https://api.github.com/users/bgavran/orgs", "repos_url": "https://api.github.com/users/bgavran/repos", "events_url": "https://api.github.com/users/bgavran/events{/privacy}", "received_events_url": "https://api.github.com/users/bgavran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-19T09:57:04Z", "updated_at": "2020-04-16T09:22:56Z", "closed_at": "2017-10-21T14:46:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the README in the description of the tanh function, shouldn't there be `-2x` instead of `-x` in the definition?\r\n\r\n[Wiki reference](https://en.wikipedia.org/wiki/Hyperbolic_function).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/310", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/310/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/310/events", "html_url": "https://github.com/HIPS/autograd/issues/310", "id": 264559250, "node_id": "MDU6SXNzdWUyNjQ1NTkyNTA=", "number": 310, "title": "cannot find gradients of np.linalg.eigh", "user": {"login": "gideonite", "id": 2163686, "node_id": "MDQ6VXNlcjIxNjM2ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2163686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gideonite", "html_url": "https://github.com/gideonite", "followers_url": "https://api.github.com/users/gideonite/followers", "following_url": "https://api.github.com/users/gideonite/following{/other_user}", "gists_url": "https://api.github.com/users/gideonite/gists{/gist_id}", "starred_url": "https://api.github.com/users/gideonite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gideonite/subscriptions", "organizations_url": "https://api.github.com/users/gideonite/orgs", "repos_url": "https://api.github.com/users/gideonite/repos", "events_url": "https://api.github.com/users/gideonite/events{/privacy}", "received_events_url": "https://api.github.com/users/gideonite/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-11T12:01:19Z", "updated_at": "2017-10-12T09:17:36Z", "closed_at": "2017-10-12T09:09:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run `grad(np.linalg.eigh)(np.eye(2))` I get an error\r\n\r\n```\r\nTypeError: No loop matching the specified signature and casting\r\nwas found for ufunc eigh_lo\r\n```\r\n\r\nAm I doing something wrong?\r\n\r\nI think that is some kind of numpy type error. I'm having some trouble fixing the problem because I'm finding it difficult to grok what primitives are all about and how to inspect their contents. If you give me some pointers I'd be happy to look deeper into this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/305", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/305/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/305/events", "html_url": "https://github.com/HIPS/autograd/issues/305", "id": 262068835, "node_id": "MDU6SXNzdWUyNjIwNjg4MzU=", "number": 305, "title": "Problems importing optimizers", "user": {"login": "sonaliparbhoo", "id": 18054327, "node_id": "MDQ6VXNlcjE4MDU0MzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/18054327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonaliparbhoo", "html_url": "https://github.com/sonaliparbhoo", "followers_url": "https://api.github.com/users/sonaliparbhoo/followers", "following_url": "https://api.github.com/users/sonaliparbhoo/following{/other_user}", "gists_url": "https://api.github.com/users/sonaliparbhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonaliparbhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonaliparbhoo/subscriptions", "organizations_url": "https://api.github.com/users/sonaliparbhoo/orgs", "repos_url": "https://api.github.com/users/sonaliparbhoo/repos", "events_url": "https://api.github.com/users/sonaliparbhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/sonaliparbhoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-02T12:29:51Z", "updated_at": "2017-10-03T12:00:42Z", "closed_at": "2017-10-03T12:00:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue resolved after fresh uninstall and reinstall of autograd", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/304", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/304/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/304/events", "html_url": "https://github.com/HIPS/autograd/issues/304", "id": 261859689, "node_id": "MDU6SXNzdWUyNjE4NTk2ODk=", "number": 304, "title": "Calling `np.array(..., np.float64)` can fail", "user": {"login": "konstunn", "id": 17176546, "node_id": "MDQ6VXNlcjE3MTc2NTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/17176546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konstunn", "html_url": "https://github.com/konstunn", "followers_url": "https://api.github.com/users/konstunn/followers", "following_url": "https://api.github.com/users/konstunn/following{/other_user}", "gists_url": "https://api.github.com/users/konstunn/gists{/gist_id}", "starred_url": "https://api.github.com/users/konstunn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konstunn/subscriptions", "organizations_url": "https://api.github.com/users/konstunn/orgs", "repos_url": "https://api.github.com/users/konstunn/repos", "events_url": "https://api.github.com/users/konstunn/events{/privacy}", "received_events_url": "https://api.github.com/users/konstunn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-09-30T17:46:01Z", "updated_at": "2018-09-13T18:05:08Z", "closed_at": "2018-09-13T18:05:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "This works:\r\n```python\r\nimport autograd.numpy as np\r\nfrom autograd import jacobian\r\n\r\nth = np.array([1., 2., 3., 4.])\r\nA = lambda th: [ [th[0], th[1]], [th[2], th[3]] ]\r\nB = lambda th: np.array(A(th), np.float64)\r\njacobian(B)(th)\r\n```\r\nBut this does not:\r\n```python\r\nimport autograd.numpy as np\r\nfrom autograd import jacobian\r\n\r\nth = np.array([1., 2., 3., 4])\r\nA = lambda th: [ [th[0], th[1]], [th[2], th[3]] ]\r\nB = lambda f: lambda th: np.array(f(th), np.float64)\r\nC = B(A)\r\njacobian(C)(th)\r\n```\r\nthrowing `AutogradHint: This error *might* be caused by assigning into arrays, which autograd doesn't support.`\r\n\r\nI have a list of functions such as A() that return lists. What I want to do is to wrap each of them into a function such as B() so that I can get numpy array on return. Can I achieve this another way?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/296", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/296/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/296/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/296/events", "html_url": "https://github.com/HIPS/autograd/issues/296", "id": 257723537, "node_id": "MDU6SXNzdWUyNTc3MjM1Mzc=", "number": 296, "title": "lower_half() operation in logpdf (scipy.stats.multivariate_normal) results in asymmetric  ", "user": {"login": "sanket-kamthe", "id": 15108821, "node_id": "MDQ6VXNlcjE1MTA4ODIx", "avatar_url": "https://avatars2.githubusercontent.com/u/15108821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanket-kamthe", "html_url": "https://github.com/sanket-kamthe", "followers_url": "https://api.github.com/users/sanket-kamthe/followers", "following_url": "https://api.github.com/users/sanket-kamthe/following{/other_user}", "gists_url": "https://api.github.com/users/sanket-kamthe/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanket-kamthe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanket-kamthe/subscriptions", "organizations_url": "https://api.github.com/users/sanket-kamthe/orgs", "repos_url": "https://api.github.com/users/sanket-kamthe/repos", "events_url": "https://api.github.com/users/sanket-kamthe/events{/privacy}", "received_events_url": "https://api.github.com/users/sanket-kamthe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-14T13:41:29Z", "updated_at": "2017-09-16T16:02:43Z", "closed_at": "2017-09-16T15:43:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am aware that autograd reports that logpdf is not supported, but I saw the code as I had raised an issue with it few months ago. \r\nHowever, if I just use the code in autgrad/autograd/scipy/stats/multivariate_normal.py, the resulting jacobian for covgrad is asymmetric, and gets worse for tricky derivatives. \r\n\r\nReproducible simple case\r\n```python\r\ntest_cov = np.array(([[1.0, 0.5 ], [0.5, 1.0 ]]), dtype=float)\r\ntest_mean = np.array([0.0, 0.0], dtype=float)\r\ndata = test_mean + 0.1\r\nA = np.random.randn(2,2)\r\nA = A @ A.T\r\n\r\ndef dummy_test(test_cov, A=A, mean=test_mean, x=data):    \r\n    scaled_test_cov = A @ test_cov @ A.T\r\n    return logpdf(data, test_mean, scaled_test_cov)\r\njacobian(dummy_test)(test_cov)\r\n\r\n```\r\n```sh\r\narray([[-0.64658309, -0.613179  ],\r\n       [ 1.18318703, -0.55036653]])\r\n```\r\n\r\n\r\n\r\n**Fix is easy, remove lower_half and place 0.5 in line 43** \r\n\r\nI can understand this may slow down everything as we are duplicating the progenitors, but just passing the lower half gets incorrect results. \r\n\r\n\r\n#225 still happens as the override of primitive fails sometimes and once we are inside scipy lower level function all hell breaks lose. \r\nPS: If you wish I can raise a separate bug to track this issue. I think it has more to do with name wrangling in Anaconda than bug in autograd itself. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/281", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/281/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/281/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/281/events", "html_url": "https://github.com/HIPS/autograd/issues/281", "id": 254166437, "node_id": "MDU6SXNzdWUyNTQxNjY0Mzc=", "number": 281, "title": "restoring `elementwise_grad`", "user": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-30T23:38:05Z", "updated_at": "2017-10-30T15:45:04Z", "closed_at": "2017-10-30T15:45:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@matthewdhoffman and others have convinced me that we should restore the `elementwise_grad` function (possibly with a better name).\r\n\r\nBasically, I think `grad` and `elementwise_grad` should both exist and have almost the same implementation; the only difference would be that `grad` would raise an error for non-scalar-valued functions. (The docstrings would also be different, and `elementwise_grad` could explain that it returns the diagonal elements of the Jacobian under the promise that the Jacobian is diagonal, etc.)\r\n\r\nI think having that behavior in `grad` is confusing and might hide bugs in users' code that they would otherwise immediately notice.\r\n\r\nThoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/271", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/271/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/271/events", "html_url": "https://github.com/HIPS/autograd/issues/271", "id": 249356684, "node_id": "MDU6SXNzdWUyNDkzNTY2ODQ=", "number": 271, "title": "Example doesn't work", "user": {"login": "juergspaak", "id": 24381340, "node_id": "MDQ6VXNlcjI0MzgxMzQw", "avatar_url": "https://avatars3.githubusercontent.com/u/24381340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juergspaak", "html_url": "https://github.com/juergspaak", "followers_url": "https://api.github.com/users/juergspaak/followers", "following_url": "https://api.github.com/users/juergspaak/following{/other_user}", "gists_url": "https://api.github.com/users/juergspaak/gists{/gist_id}", "starred_url": "https://api.github.com/users/juergspaak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juergspaak/subscriptions", "organizations_url": "https://api.github.com/users/juergspaak/orgs", "repos_url": "https://api.github.com/users/juergspaak/repos", "events_url": "https://api.github.com/users/juergspaak/events{/privacy}", "received_events_url": "https://api.github.com/users/juergspaak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-10T14:01:44Z", "updated_at": "2017-08-22T16:59:16Z", "closed_at": "2017-08-22T16:59:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to run the `tanh` example but got the following error:\r\n`TypeError: Output [-0.9981779  -0.99804522 -0.9979029  ...,  0.9979029   0.99804522\r\n  0.9981779 ] can't be cast to float. Function grad requires a scalar-valued function. Try jacobian or elementwise_grad.`\r\n\r\nI assume that broadcasting is not working. If I run `grad(tanh)(1.0)` I get the correct result", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/268", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/268/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/268/events", "html_url": "https://github.com/HIPS/autograd/issues/268", "id": 247685416, "node_id": "MDU6SXNzdWUyNDc2ODU0MTY=", "number": 268, "title": "norm fails at 0", "user": {"login": "keithbriggs", "id": 5146641, "node_id": "MDQ6VXNlcjUxNDY2NDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5146641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keithbriggs", "html_url": "https://github.com/keithbriggs", "followers_url": "https://api.github.com/users/keithbriggs/followers", "following_url": "https://api.github.com/users/keithbriggs/following{/other_user}", "gists_url": "https://api.github.com/users/keithbriggs/gists{/gist_id}", "starred_url": "https://api.github.com/users/keithbriggs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keithbriggs/subscriptions", "organizations_url": "https://api.github.com/users/keithbriggs/orgs", "repos_url": "https://api.github.com/users/keithbriggs/repos", "events_url": "https://api.github.com/users/keithbriggs/events{/privacy}", "received_events_url": "https://api.github.com/users/keithbriggs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-03T12:08:32Z", "updated_at": "2017-08-22T16:59:39Z", "closed_at": "2017-08-22T16:59:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "import autograd.numpy as np\r\nfrom autograd import value_and_grad\r\ndef f(x): return np.linalg.norm(x)\r\nx=np.zeros((1,))\r\nf_with_grad=value_and_grad(f)\r\nprint(f_with_grad(x))\r\n\r\n/usr/local/lib/python3.4/dist-packages/autograd-1.1.10-py3.4.egg/autograd/core.py:82: RuntimeWarning: divide by zero encountered in true_divide\r\n  result_value = self.fun(*argvals, **kwargs)\r\n/usr/local/lib/python3.4/dist-packages/autograd-1.1.10-py3.4.egg/autograd/core.py:82: RuntimeWarning: invalid value encountered in multiply\r\n  result_value = self.fun(*argvals, **kwargs)\r\n(0.0, array([ nan]))\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/263", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/263/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/263/events", "html_url": "https://github.com/HIPS/autograd/issues/263", "id": 244165294, "node_id": "MDU6SXNzdWUyNDQxNjUyOTQ=", "number": 263, "title": "use of np.add.at in autograd", "user": {"login": "krey", "id": 223908, "node_id": "MDQ6VXNlcjIyMzkwOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/223908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krey", "html_url": "https://github.com/krey", "followers_url": "https://api.github.com/users/krey/followers", "following_url": "https://api.github.com/users/krey/following{/other_user}", "gists_url": "https://api.github.com/users/krey/gists{/gist_id}", "starred_url": "https://api.github.com/users/krey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krey/subscriptions", "organizations_url": "https://api.github.com/users/krey/orgs", "repos_url": "https://api.github.com/users/krey/repos", "events_url": "https://api.github.com/users/krey/events{/privacy}", "received_events_url": "https://api.github.com/users/krey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-19T20:32:52Z", "updated_at": "2017-08-02T13:22:05Z", "closed_at": "2017-08-02T13:22:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I apologise in advance, this is not an issue with autograd, I'm doing something unsupported.\r\n\r\nMy numpy is too old to have `np.add.at` in it. Thankfully, it is only used once, in the definition of `untake`, so I can change the line:\r\n`np.add.at(A, idx, x)`\r\nto\r\n`A[idx] += x`\r\n\r\nThere is a clear difference in semantics though, in the case that `idx` contains repeated indices.\r\n\r\nFrom my naive understanding of the autograd internals, the only time I call `untake` is when I'm differentiating `np.concatenate`, and it doesn't look like that involves any repeated indices.\r\n\r\nI would really appreciate if you could tell me whether making the above substitution is \"safe\".\r\n\r\nMany thanks,\r\n\r\nkrey", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/259", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/259/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/259/events", "html_url": "https://github.com/HIPS/autograd/issues/259", "id": 241794063, "node_id": "MDU6SXNzdWUyNDE3OTQwNjM=", "number": 259, "title": "Broadcast not working in tanh.py example", "user": {"login": "kmundnic", "id": 4093769, "node_id": "MDQ6VXNlcjQwOTM3Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4093769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmundnic", "html_url": "https://github.com/kmundnic", "followers_url": "https://api.github.com/users/kmundnic/followers", "following_url": "https://api.github.com/users/kmundnic/following{/other_user}", "gists_url": "https://api.github.com/users/kmundnic/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmundnic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmundnic/subscriptions", "organizations_url": "https://api.github.com/users/kmundnic/orgs", "repos_url": "https://api.github.com/users/kmundnic/repos", "events_url": "https://api.github.com/users/kmundnic/events{/privacy}", "received_events_url": "https://api.github.com/users/kmundnic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-10T17:52:07Z", "updated_at": "2017-07-11T18:48:16Z", "closed_at": "2017-07-11T18:48:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running Python 2.7.13, autograd 1.1.10. The example tanh.py doesn't work for me:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 24, in <module>\r\n    x, grad(tanh)(x),                                 # first derivative\r\n  File \"/Users/karel/anaconda/lib/python2.7/site-packages/autograd/errors.py\", line 49, in wrapped\r\n    except Exception as e: add_extra_error_message(e)\r\n  File \"/Users/karel/anaconda/lib/python2.7/site-packages/autograd/errors.py\", line 71, in add_extra_error_message\r\n    raise_(etype, value, traceback)\r\n  File \"/Users/karel/anaconda/lib/python2.7/site-packages/autograd/errors.py\", line 48, in wrapped\r\n    try: return fun(*args, **kwargs)\r\n  File \"/Users/karel/anaconda/lib/python2.7/site-packages/autograd/convenience_wrappers.py\", line 27, in gradfun\r\n    vjp, ans = make_vjp(scalar_fun, argnum)(*args, **kwargs)\r\n  File \"/Users/karel/anaconda/lib/python2.7/site-packages/autograd/core.py\", line 14, in vjp\r\n    start_node, end_node = forward_pass(fun, args, kwargs, argnum)\r\n  File \"/Users/karel/anaconda/lib/python2.7/site-packages/autograd/core.py\", line 26, in forward_pass\r\n    end_node = fun(*args, **kwargs)\r\n  File \"/Users/karel/anaconda/lib/python2.7/site-packages/autograd/convenience_wrappers.py\", line 20, in scalar_fun\r\n    return as_scalar(fun(*args, **kwargs))\r\n  File \"/Users/karel/anaconda/lib/python2.7/site-packages/autograd/convenience_wrappers.py\", line 230, in as_scalar\r\n    \"Try jacobian or elementwise_grad.\".format(getval(x)))\r\nTypeError: Output [-0.9981779  -0.99804522 -0.9979029  -0.99775022 -0.99758644 -0.99741076\r\n -0.9972223  -0.99702015 -0.99680331 -0.99657071 -0.99632123 -0.99605363\r\n -0.9957666  -0.99545875 -0.99512857 -0.99477444 -0.99439464 -0.99398731\r\n -0.99355049 -0.99308204 -0.99257969 -0.99204101 -0.99146339 -0.99084405\r\n -0.99017999 -0.98946802 -0.98870472 -0.98788645 -0.98700928 -0.98606904\r\n -0.98506126 -0.98398116 -0.98282365 -0.98158327 -0.98025421 -0.97883026\r\n -0.9773048  -0.97567077 -0.97392065 -0.97204641 -0.97003952 -0.96789089\r\n -0.96559087 -0.96312917 -0.96049491 -0.95767649 -0.95466165 -0.95143738\r\n -0.94798991 -0.94430469 -0.94036635 -0.93615866 -0.93166454 -0.926866\r\n -0.92174416 -0.9162792  -0.91045039 -0.90423604 -0.89761355 -0.89055941\r\n -0.88304922 -0.8750577  -0.86655881 -0.85752573 -0.84793098 -0.83774653\r\n -0.82694388 -0.81549421 -0.80336854 -0.79053792 -0.77697361 -0.76264735\r\n -0.74753158 -0.73159974 -0.7148266  -0.69718856 -0.67866403 -0.65923379\r\n -0.63888141 -0.61759363 -0.59536077 -0.57217718 -0.5480416  -0.52295756\r\n -0.49693375 -0.46998435 -0.44212929 -0.41339449 -0.38381202 -0.35342017\r\n -0.32226348 -0.29039261 -0.25786418 -0.22474049 -0.19108913 -0.15698251\r\n -0.12249729 -0.08771371 -0.05271491 -0.01758613  0.01758613  0.05271491\r\n  0.08771371  0.12249729  0.15698251  0.19108913  0.22474049  0.25786418\r\n  0.29039261  0.32226348  0.35342017  0.38381202  0.41339449  0.44212929\r\n  0.46998435  0.49693375  0.52295756  0.5480416   0.57217718  0.59536077\r\n  0.61759363  0.63888141  0.65923379  0.67866403  0.69718856  0.7148266\r\n  0.73159974  0.74753158  0.76264735  0.77697361  0.79053792  0.80336854\r\n  0.81549421  0.82694388  0.83774653  0.84793098  0.85752573  0.86655881\r\n  0.8750577   0.88304922  0.89055941  0.89761355  0.90423604  0.91045039\r\n  0.9162792   0.92174416  0.926866    0.93166454  0.93615866  0.94036635\r\n  0.94430469  0.94798991  0.95143738  0.95466165  0.95767649  0.96049491\r\n  0.96312917  0.96559087  0.96789089  0.97003952  0.97204641  0.97392065\r\n  0.97567077  0.9773048   0.97883026  0.98025421  0.98158327  0.98282365\r\n  0.98398116  0.98506126  0.98606904  0.98700928  0.98788645  0.98870472\r\n  0.98946802  0.99017999  0.99084405  0.99146339  0.99204101  0.99257969\r\n  0.99308204  0.99355049  0.99398731  0.99439464  0.99477444  0.99512857\r\n  0.99545875  0.9957666   0.99605363  0.99632123  0.99657071  0.99680331\r\n  0.99702015  0.9972223   0.99741076  0.99758644  0.99775022  0.9979029\r\n  0.99804522  0.9981779 ] can't be cast to float. Function grad requires a scalar-valued function. Try jacobian or elementwise_grad.\r\n```\r\n\r\nSeems like broadcasting is not working. If I use `elementwise_grad` in tanh.py instead of `grad`, I am able to replicate the example of the README. Seems to me like broadcasting is not working. Is this intended behavior?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/258", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/258/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/258/events", "html_url": "https://github.com/HIPS/autograd/issues/258", "id": 240944858, "node_id": "MDU6SXNzdWUyNDA5NDQ4NTg=", "number": 258, "title": "Inverse Matrix with autograd numpy", "user": {"login": "MiYi93", "id": 29401875, "node_id": "MDQ6VXNlcjI5NDAxODc1", "avatar_url": "https://avatars1.githubusercontent.com/u/29401875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MiYi93", "html_url": "https://github.com/MiYi93", "followers_url": "https://api.github.com/users/MiYi93/followers", "following_url": "https://api.github.com/users/MiYi93/following{/other_user}", "gists_url": "https://api.github.com/users/MiYi93/gists{/gist_id}", "starred_url": "https://api.github.com/users/MiYi93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MiYi93/subscriptions", "organizations_url": "https://api.github.com/users/MiYi93/orgs", "repos_url": "https://api.github.com/users/MiYi93/repos", "events_url": "https://api.github.com/users/MiYi93/events{/privacy}", "received_events_url": "https://api.github.com/users/MiYi93/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-06T12:47:00Z", "updated_at": "2017-07-06T18:48:09Z", "closed_at": "2017-07-06T18:47:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, i have an issue. I need to inverse a Matrix with autograd numpy(i can't find a method for that) and at the end i have to do the gradient out of it. I know that an inverse Matrix is not differentiable, but has some here an idea how to solve my problem. Is there a way to program that.\r\n\r\n\r\nthanks ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/256", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/256/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/256/events", "html_url": "https://github.com/HIPS/autograd/issues/256", "id": 240054387, "node_id": "MDU6SXNzdWUyNDAwNTQzODc=", "number": 256, "title": "Is 'stop_gradient' supported?", "user": {"login": "BaiGang", "id": 241076, "node_id": "MDQ6VXNlcjI0MTA3Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/241076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BaiGang", "html_url": "https://github.com/BaiGang", "followers_url": "https://api.github.com/users/BaiGang/followers", "following_url": "https://api.github.com/users/BaiGang/following{/other_user}", "gists_url": "https://api.github.com/users/BaiGang/gists{/gist_id}", "starred_url": "https://api.github.com/users/BaiGang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BaiGang/subscriptions", "organizations_url": "https://api.github.com/users/BaiGang/orgs", "repos_url": "https://api.github.com/users/BaiGang/repos", "events_url": "https://api.github.com/users/BaiGang/events{/privacy}", "received_events_url": "https://api.github.com/users/BaiGang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-03T02:37:41Z", "updated_at": "2017-07-04T14:16:17Z", "closed_at": "2017-07-04T14:16:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can we mark a variable as a constant value, i.e do not propagate derivative calculation further?\r\n\r\nFor example, we have:\r\n```\r\ny = g(x) = 2 * x\r\nz = f(x, y) = x * y\r\n```\r\nand we want to evaluate `\\frac{\\partial z}{\\partial x}` which is supposed to be `y` (and its value is 2*x)  rather than 4*x (which is `\\frac{\\partial x * 2 * x}{\\partial x}`).\r\n\r\nSo how to mark `y` or `g(x)` as 'gradient back propagation is stopped here'?\r\n\r\nThanks,\r\nGang\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/255", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/255/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/255/events", "html_url": "https://github.com/HIPS/autograd/issues/255", "id": 239972825, "node_id": "MDU6SXNzdWUyMzk5NzI4MjU=", "number": 255, "title": "\"stack\" operation is too slow", "user": {"login": "jleahy", "id": 36183, "node_id": "MDQ6VXNlcjM2MTgz", "avatar_url": "https://avatars1.githubusercontent.com/u/36183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jleahy", "html_url": "https://github.com/jleahy", "followers_url": "https://api.github.com/users/jleahy/followers", "following_url": "https://api.github.com/users/jleahy/following{/other_user}", "gists_url": "https://api.github.com/users/jleahy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jleahy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jleahy/subscriptions", "organizations_url": "https://api.github.com/users/jleahy/orgs", "repos_url": "https://api.github.com/users/jleahy/repos", "events_url": "https://api.github.com/users/jleahy/events{/privacy}", "received_events_url": "https://api.github.com/users/jleahy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-01T21:13:57Z", "updated_at": "2017-10-30T15:45:04Z", "closed_at": "2017-10-30T15:45:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "The way the \"stack\" operation is currently implemented (including row_stack and column_stack) it invokes array(x) for each item of the input. This creates an object array (because the input is not an ndarray, it's an ArrayNode), which given the input array might have millions of entries is very very slow.\r\n\r\nYou can achieve the same thing (in the case of column_stack) with concatenate followed by reshape, so it seems odd that the stack function behaves so much worse. At least if it's expected it might be worth a note in the documentation.\r\n\r\nHere's an example of the problem:\r\n\r\n```python\r\nimport autograd.numpy as np\r\nimport autograd\r\n\r\ndef test_one(x):\r\n    a = np.sin(x)\r\n    b = np.cos(x)\r\n    c = np.concatenate((a, b)).reshape((-1, 2))\r\n    return np.sum(c)\r\n\r\ndef test_two(x):\r\n    a = np.sin(x)\r\n    b = np.cos(x)\r\n    c = np.column_stack((a, b))\r\n    return np.sum(c)\r\n\r\nx = np.zeros(1000000)\r\n\r\n# both are quick\r\nprint(test_one(x))\r\nprint(test_two(x))\r\n\r\n# this is quick\r\ntest_one_grad = autograd.grad(test_one)\r\nprint(test_one_grad(x))\r\n\r\n# this never terminates\r\ntest_two_grad = autograd.grad(test_two)\r\nprint(test_two_grad(x))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/246", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/246/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/246/events", "html_url": "https://github.com/HIPS/autograd/issues/246", "id": 237391194, "node_id": "MDU6SXNzdWUyMzczOTExOTQ=", "number": 246, "title": "Errors while using grad", "user": {"login": "nishnik", "id": 9252491, "node_id": "MDQ6VXNlcjkyNTI0OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9252491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nishnik", "html_url": "https://github.com/nishnik", "followers_url": "https://api.github.com/users/nishnik/followers", "following_url": "https://api.github.com/users/nishnik/following{/other_user}", "gists_url": "https://api.github.com/users/nishnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nishnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nishnik/subscriptions", "organizations_url": "https://api.github.com/users/nishnik/orgs", "repos_url": "https://api.github.com/users/nishnik/repos", "events_url": "https://api.github.com/users/nishnik/events{/privacy}", "received_events_url": "https://api.github.com/users/nishnik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-21T01:36:36Z", "updated_at": "2017-06-22T16:43:52Z", "closed_at": "2017-06-22T16:43:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why doesn't this work:\r\n```\r\nimport autograd.numpy as np\r\nfrom autograd import grad\r\nfrom math import *\r\n\r\ndef loss_n(x):\r\n    return exp(np.dot(x,x))\r\n\r\ngrad_ = grad(loss_n)\r\n\r\ntmp = np.asarray([2.0, 2.0])\r\n\r\nloss_n(tmp)\r\n```\r\nI get the error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/errors.py\", line 48, in wrapped\r\n    try: return fun(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/convenience_wrappers.py\", line 27, in gradfun\r\n    vjp, ans = make_vjp(scalar_fun, argnum)(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/core.py\", line 14, in vjp\r\n    start_node, end_node = forward_pass(fun, args, kwargs, argnum)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/core.py\", line 26, in forward_pass\r\n    end_node = fun(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/convenience_wrappers.py\", line 20, in scalar_fun\r\n    return as_scalar(fun(*args, **kwargs))\r\n  File \"<stdin>\", line 2, in loss_n\r\nTypeError: a float is required\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/errors.py\", line 49, in wrapped\r\n    except Exception as e: add_extra_error_message(e)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/errors.py\", line 71, in add_extra_error_message\r\n    raise_(etype, value, traceback)\r\n  File \"/usr/local/lib/python3.4/dist-packages/future/utils/__init__.py\", line 413, in raise_\r\n    raise exc.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/errors.py\", line 48, in wrapped\r\n    try: return fun(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/convenience_wrappers.py\", line 27, in gradfun\r\n    vjp, ans = make_vjp(scalar_fun, argnum)(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/core.py\", line 14, in vjp\r\n    start_node, end_node = forward_pass(fun, args, kwargs, argnum)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/core.py\", line 26, in forward_pass\r\n    end_node = fun(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/convenience_wrappers.py\", line 20, in scalar_fun\r\n    return as_scalar(fun(*args, **kwargs))\r\n  File \"<stdin>\", line 2, in loss_n\r\nTypeError: a float is required\r\n```\r\n\r\nAnd if I do:\r\n\r\n```\r\nimport autograd.numpy as np\r\nfrom autograd import grad\r\nfrom math import *\r\n\r\ndef loss_n(x):\r\n    return exp(float(np.dot(x,x)))\r\n\r\ngrad_ = grad(loss_n)\r\n\r\ntmp = np.asarray([2.0, 2.0])\r\n\r\nloss_n(tmp)\r\ngrad_(tmp)\r\n```\r\nThen I get:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/errors.py\", line 48, in wrapped\r\n    try: return fun(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/convenience_wrappers.py\", line 27, in gradfun\r\n    vjp, ans = make_vjp(scalar_fun, argnum)(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/core.py\", line 14, in vjp\r\n    start_node, end_node = forward_pass(fun, args, kwargs, argnum)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/core.py\", line 26, in forward_pass\r\n    end_node = fun(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/convenience_wrappers.py\", line 20, in scalar_fun\r\n    return as_scalar(fun(*args, **kwargs))\r\n  File \"<stdin>\", line 2, in loss_n\r\nTypeError: float() argument must be a string or a number, not 'ArrayNode'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/errors.py\", line 49, in wrapped\r\n    except Exception as e: add_extra_error_message(e)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/errors.py\", line 71, in add_extra_error_message\r\n    raise_(etype, value, traceback)\r\n  File \"/usr/local/lib/python3.4/dist-packages/future/utils/__init__.py\", line 413, in raise_\r\n    raise exc.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/errors.py\", line 48, in wrapped\r\n    try: return fun(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/convenience_wrappers.py\", line 27, in gradfun\r\n    vjp, ans = make_vjp(scalar_fun, argnum)(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/core.py\", line 14, in vjp\r\n    start_node, end_node = forward_pass(fun, args, kwargs, argnum)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/core.py\", line 26, in forward_pass\r\n    end_node = fun(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.4/dist-packages/autograd/convenience_wrappers.py\", line 20, in scalar_fun\r\n    return as_scalar(fun(*args, **kwargs))\r\n  File \"<stdin>\", line 2, in loss_n\r\nTypeError: float() argument must be a string or a number, not 'ArrayNode'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/244", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/244/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/244/events", "html_url": "https://github.com/HIPS/autograd/issues/244", "id": 237141512, "node_id": "MDU6SXNzdWUyMzcxNDE1MTI=", "number": 244, "title": "autograd consume too much memory and very slow", "user": {"login": "minhhg", "id": 11815787, "node_id": "MDQ6VXNlcjExODE1Nzg3", "avatar_url": "https://avatars3.githubusercontent.com/u/11815787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/minhhg", "html_url": "https://github.com/minhhg", "followers_url": "https://api.github.com/users/minhhg/followers", "following_url": "https://api.github.com/users/minhhg/following{/other_user}", "gists_url": "https://api.github.com/users/minhhg/gists{/gist_id}", "starred_url": "https://api.github.com/users/minhhg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/minhhg/subscriptions", "organizations_url": "https://api.github.com/users/minhhg/orgs", "repos_url": "https://api.github.com/users/minhhg/repos", "events_url": "https://api.github.com/users/minhhg/events{/privacy}", "received_events_url": "https://api.github.com/users/minhhg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-20T09:08:21Z", "updated_at": "2018-03-17T17:21:39Z", "closed_at": "2017-06-21T18:22:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI got a simple code  below\r\n%------------------------------------------\r\n`\r\nimport numpy as np\r\nfrom autograd import grad\r\n\r\nITIME=1\r\nreturns = np.random.rand(10000, 75, 13)\r\nx= np.random.rand(13)\r\nhorizon = 30\r\ndef obj(x):\r\n    res  = np.cumprod(returns.dot(x), axis=ITIME)\r\n    res1 = res[:, horizon-1]\r\n    log_returns = np.log(res1)\r\n    return -log_returns.mean()\r\n\r\ngr = grad(obj)\r\nprint(gr(x))\r\n%-----------------------------------------------\r\n`\r\nIt was very slow and took a lot memory on 32Gb Ubuntu, python 2.7. It did not finish, I had to stop it until it crash. Any idea why?  Thanks, Minh", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/242", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/242/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/242/events", "html_url": "https://github.com/HIPS/autograd/issues/242", "id": 235636200, "node_id": "MDU6SXNzdWUyMzU2MzYyMDA=", "number": 242, "title": "Bug in einsum grad?", "user": {"login": "pschulam", "id": 302991, "node_id": "MDQ6VXNlcjMwMjk5MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/302991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pschulam", "html_url": "https://github.com/pschulam", "followers_url": "https://api.github.com/users/pschulam/followers", "following_url": "https://api.github.com/users/pschulam/following{/other_user}", "gists_url": "https://api.github.com/users/pschulam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pschulam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pschulam/subscriptions", "organizations_url": "https://api.github.com/users/pschulam/orgs", "repos_url": "https://api.github.com/users/pschulam/repos", "events_url": "https://api.github.com/users/pschulam/events{/privacy}", "received_events_url": "https://api.github.com/users/pschulam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-13T17:53:38Z", "updated_at": "2017-06-14T13:45:51Z", "closed_at": "2017-06-14T06:18:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirst, thanks for the great software! I use it regularly.\r\n\r\nI've run into a possible bug in the gradient function for numpy's einsum. Here's a reproducible example for my system (pip environment file is attached to this issue).\r\n\r\n```{python}\r\nimport autograd\r\nimport autograd.numpy as np\r\n\r\nrng = np.random.RandomState(0)\r\nx = rng.normal(size=(3, 2, 3, 2))\r\n\r\ndef f(x):\r\n    y = np.einsum('abcd->bd', x)\r\n    return np.sum(y**2)\r\n\r\nprint(autograd.grad(f)(x))\r\n```\r\n\r\nIt appears that the indexing operation [here](https://github.com/HIPS/autograd/blob/master/autograd/numpy/numpy_grads.py#L406) triggers the exception. `naked_summed_dims` is a tuple, but I believe it should be a list.\r\n\r\nIs this fix as easy as changing `naked_summed_dims` to `list(naked_summed_dims)` in the index? If so, I'm happy to submit a PR.\r\n\r\nThanks for your help!\r\n\r\n[env.txt](https://github.com/HIPS/autograd/files/1072367/env.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/241", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/241/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/241/events", "html_url": "https://github.com/HIPS/autograd/issues/241", "id": 235593527, "node_id": "MDU6SXNzdWUyMzU1OTM1Mjc=", "number": 241, "title": "Reusing calculations in both the function and derivatives", "user": {"login": "krey", "id": 223908, "node_id": "MDQ6VXNlcjIyMzkwOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/223908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krey", "html_url": "https://github.com/krey", "followers_url": "https://api.github.com/users/krey/followers", "following_url": "https://api.github.com/users/krey/following{/other_user}", "gists_url": "https://api.github.com/users/krey/gists{/gist_id}", "starred_url": "https://api.github.com/users/krey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krey/subscriptions", "organizations_url": "https://api.github.com/users/krey/orgs", "repos_url": "https://api.github.com/users/krey/repos", "events_url": "https://api.github.com/users/krey/events{/privacy}", "received_events_url": "https://api.github.com/users/krey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-06-13T15:24:49Z", "updated_at": "2017-06-29T12:59:54Z", "closed_at": "2017-06-28T20:59:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Brand new to automatic differentiation, sorry if this question doesn't make sense.\r\nI am implementing the [Black-Scholes formula](https://en.wikipedia.org/wiki/Black%E2%80%93Scholes_model#Black.E2.80.93Scholes_formula) in Python and I would like to add it as a primitive in autograd. The Black Scholes formula is a scalar function of 4 scalar variables C(S, sigma, t, r).\r\n\r\nThere are non-trivial cancellations when taking derivatives, for instance dC/dS is just N(d_1), which is part of the calculation for C. The other partial derivatives \"reuse\" intermediate values from the calculation of C too.\r\n\r\nCurrently, I'm returning a tuple instead of a scalar. So C would look something like\r\n\r\n```python\r\n@primitive\r\ndef C(S, sigma, t, r):\r\n    ...\r\n    N_d_1 = ...\r\n    ...\r\n    value = ... N_d_1 ...\r\n    return np.array([value, N_d_1])\r\n```\r\nand dC/dS just does `g[0] * ans[1]`. Is there a better way?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/239", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/239/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/239/events", "html_url": "https://github.com/HIPS/autograd/issues/239", "id": 235323043, "node_id": "MDU6SXNzdWUyMzUzMjMwNDM=", "number": 239, "title": "Making a primitive closure", "user": {"login": "krey", "id": 223908, "node_id": "MDQ6VXNlcjIyMzkwOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/223908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krey", "html_url": "https://github.com/krey", "followers_url": "https://api.github.com/users/krey/followers", "following_url": "https://api.github.com/users/krey/following{/other_user}", "gists_url": "https://api.github.com/users/krey/gists{/gist_id}", "starred_url": "https://api.github.com/users/krey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krey/subscriptions", "organizations_url": "https://api.github.com/users/krey/orgs", "repos_url": "https://api.github.com/users/krey/repos", "events_url": "https://api.github.com/users/krey/events{/privacy}", "received_events_url": "https://api.github.com/users/krey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-12T18:29:34Z", "updated_at": "2017-06-12T21:33:44Z", "closed_at": "2017-06-12T21:33:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please close this issue. My mistake", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/235", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/235/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/235/events", "html_url": "https://github.com/HIPS/autograd/issues/235", "id": 233443433, "node_id": "MDU6SXNzdWUyMzM0NDM0MzM=", "number": 235, "title": "Question: Constructing a sparse matrix", "user": {"login": "eric-wieser", "id": 425260, "node_id": "MDQ6VXNlcjQyNTI2MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/425260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eric-wieser", "html_url": "https://github.com/eric-wieser", "followers_url": "https://api.github.com/users/eric-wieser/followers", "following_url": "https://api.github.com/users/eric-wieser/following{/other_user}", "gists_url": "https://api.github.com/users/eric-wieser/gists{/gist_id}", "starred_url": "https://api.github.com/users/eric-wieser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eric-wieser/subscriptions", "organizations_url": "https://api.github.com/users/eric-wieser/orgs", "repos_url": "https://api.github.com/users/eric-wieser/repos", "events_url": "https://api.github.com/users/eric-wieser/events{/privacy}", "received_events_url": "https://api.github.com/users/eric-wieser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-06-04T16:20:42Z", "updated_at": "2017-06-07T14:57:16Z", "closed_at": "2017-06-07T14:57:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I make a function like this work with autograd, given that assignment is forbidden?\r\n\r\n```python\r\ndef func(a, b):   # a and b are scalars\r\n    m = np.zeros((10, 10))\r\n    m[5,7] = a\r\n    m[3,6] = b\r\n    return m\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/229", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/229/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/229/events", "html_url": "https://github.com/HIPS/autograd/issues/229", "id": 231198557, "node_id": "MDU6SXNzdWUyMzExOTg1NTc=", "number": 229, "title": "issues with arange", "user": {"login": "MInner", "id": 5229267, "node_id": "MDQ6VXNlcjUyMjkyNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5229267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MInner", "html_url": "https://github.com/MInner", "followers_url": "https://api.github.com/users/MInner/followers", "following_url": "https://api.github.com/users/MInner/following{/other_user}", "gists_url": "https://api.github.com/users/MInner/gists{/gist_id}", "starred_url": "https://api.github.com/users/MInner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MInner/subscriptions", "organizations_url": "https://api.github.com/users/MInner/orgs", "repos_url": "https://api.github.com/users/MInner/repos", "events_url": "https://api.github.com/users/MInner/events{/privacy}", "received_events_url": "https://api.github.com/users/MInner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-24T23:20:41Z", "updated_at": "2017-05-25T01:38:43Z", "closed_at": "2017-05-25T01:38:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "For testing purposes I tried passing `np.arange`-ed data through the gradients and stumbled upon this weird issue:\r\n\r\n```\r\nimport autograd\r\nimport autograd.numpy as np\r\nimport numpy as _np\r\n\r\nf = lambda x: np.sum(x)\r\ng = autograd.grad(f)\r\nprint(g(np.ones(4))) # okay\r\nprint(g(_np.ones(4))) # okay\r\nprint(g(np.array([1, 1, 1, 1])))  # error\r\nprint(g(_np.array([1, 1, 1, 1]))) # error\r\nprint(g(np.arange(4))) # error\r\n```\r\n\r\n**upd**: got it, for others who might stuble upon it - the issue is in the fact that [1, 1, 1, 1] are *int*'s, not *float*'s", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/HIPS/autograd/issues/219", "repository_url": "https://api.github.com/repos/HIPS/autograd", "labels_url": "https://api.github.com/repos/HIPS/autograd/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/HIPS/autograd/issues/219/comments", "events_url": "https://api.github.com/repos/HIPS/autograd/issues/219/events", "html_url": "https://github.com/HIPS/autograd/issues/219", "id": 226117730, "node_id": "MDU6SXNzdWUyMjYxMTc3MzA=", "number": 219, "title": "Decreasing autograd memory usage", "user": {"login": "alexbw", "id": 161935, "node_id": "MDQ6VXNlcjE2MTkzNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexbw", "html_url": "https://github.com/alexbw", "followers_url": "https://api.github.com/users/alexbw/followers", "following_url": "https://api.github.com/users/alexbw/following{/other_user}", "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions", "organizations_url": "https://api.github.com/users/alexbw/orgs", "repos_url": "https://api.github.com/users/alexbw/repos", "events_url": "https://api.github.com/users/alexbw/events{/privacy}", "received_events_url": "https://api.github.com/users/alexbw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2017-05-03T21:18:41Z", "updated_at": "2017-05-09T20:30:35Z", "closed_at": "2017-05-09T20:12:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I don't mean \"memory leak\" in terms of unreachable memory after the Python process quits, I mean memory that is being allocated in the backwards pass, when it should be being freed. I mentioned this problem in #199 , but I think it should be opened as an issue.\r\n\r\nFor a simple function\r\n```\r\nimport autograd.numpy as np\r\nfrom autograd import grad\r\n\r\ndef F(x,z):\r\n    for i in range(100):\r\n        z = np.dot(x,z)\r\n    return np.sum(z)\r\ndF = grad(F)\r\n```\r\n\r\nand a procedure to measure memory usage\r\n```\r\nfrom memory_profiler import memory_usage\r\ndef make_data():\r\n    np.random.seed(0)\r\n    D = 1000\r\n    x = np.random.randn(D,D)\r\n    x = np.dot(x,x.T)\r\n    z = np.random.randn(D,D)\r\n    return x,z\r\n\r\ndef m():\r\n    from time import sleep\r\n    x,z = make_data()\r\n    gx = dF(x,z)\r\n    sleep(0.1)\r\n    return gx\r\n\r\nmem_usage = np.array(memory_usage(m,interval=0.01))\r\nmem_usage -= mem_usage[0]\r\n```\r\n\r\nand a manual gradient of the same function\r\n\r\n```\r\ndef grad_dot_A(g,A,B):\r\n    ga = np.dot(g,B.T)\r\n    ga = np.reshape(ga,np.shape(A))\r\n    return ga\r\n\r\ndef grad_dot_B(g,A,B):\r\n    gb = np.dot(A.T,g)\r\n    gb = np.reshape(gb, np.shape(B))\r\n    return gb\r\n\r\ndef dF(x, z):\r\n    z_stack = []\r\n    for i in list(range(100)):\r\n        z_stack.append(z)\r\n        z = np.dot(x, z)\r\n    retval = np.sum(z)\r\n\r\n    # Begin Backward Pass\r\n    g_retval = 1\r\n    g_x = 0\r\n\r\n    # Reverse of: retval = np.sum(z)\r\n    g_z = repeat_to_match_shape(g_retval, z)\r\n    for i in reversed(list(range(100))):\r\n\r\n        # Reverse of: z = np.dot(x, z)\r\n        z = z_stack.pop()\r\n        tmp_g0 = grad_dot_A(g_z, x, z)\r\n        tmp_g1 = grad_dot_B(g_z, x, z)\r\n        g_z = 0\r\n        g_x += tmp_g0\r\n        g_z += tmp_g1\r\n    return g_x\r\n```\r\n\r\nI get the following memory usage profile:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/161935/25681799/9fed2d90-3023-11e7-963d-ea413baf8797.png)\r\n\r\nIf I replace the dot gradient with the ones used in the manual code, I get the same memory profile, nothing improves. \r\n\r\nIf I replace the dot product with element-wise multiply, I get a different memory profile, but still not what I would expect:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/161935/25681971/5b6f35d6-3024-11e7-96ea-3fac8289e95b.png)\r\n\r\nI would love to help figure this out, but I'm not sure where to start. First thing is of course to document the problem.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}]}