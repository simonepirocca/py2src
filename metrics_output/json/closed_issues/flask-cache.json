{"total_count": 52, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/204", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/204/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/204/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/204", "id": 589719490, "node_id": "MDU6SXNzdWU1ODk3MTk0OTA=", "number": 204, "title": "Doesn't work with classmethod?", "user": {"login": "dzpt", "id": 5781080, "node_id": "MDQ6VXNlcjU3ODEwODA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5781080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzpt", "html_url": "https://github.com/dzpt", "followers_url": "https://api.github.com/users/dzpt/followers", "following_url": "https://api.github.com/users/dzpt/following{/other_user}", "gists_url": "https://api.github.com/users/dzpt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzpt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzpt/subscriptions", "organizations_url": "https://api.github.com/users/dzpt/orgs", "repos_url": "https://api.github.com/users/dzpt/repos", "events_url": "https://api.github.com/users/dzpt/events{/privacy}", "received_events_url": "https://api.github.com/users/dzpt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-29T05:15:02Z", "updated_at": "2020-03-29T09:06:05Z", "closed_at": "2020-03-29T09:06:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n@classmethod\r\n@cache.cached(timeout=86400, key_prefix='top_date')\r\n```\r\nthen i got this error: `TypeError: cannot pickle 'socket' object`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/200", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/200/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/200/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/200", "id": 461920961, "node_id": "MDU6SXNzdWU0NjE5MjA5NjE=", "number": 200, "title": "different request value lead to the same result", "user": {"login": "datalee", "id": 13651873, "node_id": "MDQ6VXNlcjEzNjUxODcz", "avatar_url": "https://avatars3.githubusercontent.com/u/13651873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datalee", "html_url": "https://github.com/datalee", "followers_url": "https://api.github.com/users/datalee/followers", "following_url": "https://api.github.com/users/datalee/following{/other_user}", "gists_url": "https://api.github.com/users/datalee/gists{/gist_id}", "starred_url": "https://api.github.com/users/datalee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datalee/subscriptions", "organizations_url": "https://api.github.com/users/datalee/orgs", "repos_url": "https://api.github.com/users/datalee/repos", "events_url": "https://api.github.com/users/datalee/events{/privacy}", "received_events_url": "https://api.github.com/users/datalee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-28T08:31:54Z", "updated_at": "2019-07-02T06:20:31Z", "closed_at": "2019-07-02T06:20:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "**1.request value1:**\r\n{\r\n    \"x\":\"x1\",\r\n    \"y\":\"y1\"\r\n}\r\n\r\n**2.request value2:**\r\n{\r\n    \"x\":\"x2\",\r\n    \"y\":\"y2\"\r\n}\r\nhas the same return", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/196", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/196/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/196/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/196", "id": 396360740, "node_id": "MDU6SXNzdWUzOTYzNjA3NDA=", "number": 196, "title": "support memorizing function with typehinted arguments", "user": {"login": "haolian9", "id": 6236829, "node_id": "MDQ6VXNlcjYyMzY4Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6236829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haolian9", "html_url": "https://github.com/haolian9", "followers_url": "https://api.github.com/users/haolian9/followers", "following_url": "https://api.github.com/users/haolian9/following{/other_user}", "gists_url": "https://api.github.com/users/haolian9/gists{/gist_id}", "starred_url": "https://api.github.com/users/haolian9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haolian9/subscriptions", "organizations_url": "https://api.github.com/users/haolian9/orgs", "repos_url": "https://api.github.com/users/haolian9/repos", "events_url": "https://api.github.com/users/haolian9/events{/privacy}", "received_events_url": "https://api.github.com/users/haolian9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-07T06:13:55Z", "updated_at": "2019-01-09T05:04:25Z", "closed_at": "2019-01-09T05:04:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n### reproducing:\r\n\r\nenv:\r\n\r\n* python3.6\r\n\r\ncode:\r\n\r\n```\r\n@cache.memorize()\r\ndef add(a: float, b: float):\r\n    return z + b\r\n\r\nadd(1, 2)\r\n```\r\n\r\n### output:\r\n\r\n```\r\nException possibly due to cache backend.\r\nTraceback (most recent call last):\r\n  File \"project/venv/lib64/python3.6/site-packages/flask_cache/__init__.py\", line 528, in decorated_function\r\n    cache_key = decorated_function.make_cache_key(f, *args, **kwargs)\r\n  File \"project/venv/lib64/python3.6/site-packages/flask_cache/__init__.py\", line 381, in make_cache_key\r\n    timeout=_timeout)\r\n  File \"project/venv/lib64/python3.6/site-packages/flask_cache/__init__.py\", line 336, in _memoize_version\r\n    fname, instance_fname = function_namespace(f, args=args)\r\n  File \"project/venv/lib64/python3.6/site-packages/flask_cache/__init__.py\", line 45, in function_namespace\r\n    m_args = inspect.getargspec(f)[0]\r\n  File \"/usr/lib64/python3.6/inspect.py\", line 1080, in getargspec\r\n    raise ValueError(\"Function has keyword-only parameters or annotations\"\r\nValueError: Function has keyword-only parameters or annotations, use getfullargspec() API which can support them\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/190", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/190/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/190/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/190", "id": 327297586, "node_id": "MDU6SXNzdWUzMjcyOTc1ODY=", "number": 190, "title": "Passwords that contain \"/\" character cause problems in Redis URLs", "user": {"login": "martinpeck", "id": 1524451, "node_id": "MDQ6VXNlcjE1MjQ0NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1524451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinpeck", "html_url": "https://github.com/martinpeck", "followers_url": "https://api.github.com/users/martinpeck/followers", "following_url": "https://api.github.com/users/martinpeck/following{/other_user}", "gists_url": "https://api.github.com/users/martinpeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinpeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinpeck/subscriptions", "organizations_url": "https://api.github.com/users/martinpeck/orgs", "repos_url": "https://api.github.com/users/martinpeck/repos", "events_url": "https://api.github.com/users/martinpeck/events{/privacy}", "received_events_url": "https://api.github.com/users/martinpeck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-05-29T12:25:09Z", "updated_at": "2018-09-04T20:07:55Z", "closed_at": "2018-09-04T20:07:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I try and use a REDIS_CACHE_URL, and within that url I have a password that looks like this...\r\n\r\n```python\r\nredis_url = 'rediss://:F6tM/t41SZ/c57sr2KFt0=@myredis.example.com:6380/0'\r\n```\r\n\r\n... (notice that it has two `/` characters) then I see a connection error as the url is not parsed correctly.\r\n\r\nThe underlying package `redis-py` supports URLEncoding/Decoding of connection urls, but it's something that requires code changes (it requires an additional parameter when making the connection). e.g...\r\n\r\n```python\r\nclient = redis.Redis.from_url(redis_url, decode_components = True)\r\n```\r\n\r\nTo make use of this ability, this code would need to be alterered to use this `decode_components` parameter:\r\n\r\nhttps://github.com/thadeusb/flask-cache/blob/1c60076b6d4c2df0ac1de54c59e63b4f780cecbc/flask_cache/backends.py#L79-L81\r\n\r\nIs it reasonable that `flash-cache` should make a change so that it uses `decode_components = True` in all situations or, to preserve the current behaviour, is is reasonable to add an additional ENV variable (e.g. `CACHE_REDIS_ENCODED_URL` to specify an encoded URL, or `CACHE_REDIS_DECODE_URL` set to `True` if decoding should occur)? If so, I'm happy to provide a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/183", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/183/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/183/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/183", "id": 280988617, "node_id": "MDU6SXNzdWUyODA5ODg2MTc=", "number": 183, "title": "the cache dosen't distinguish the request method for the same url?", "user": {"login": "axiaoxin", "id": 2876405, "node_id": "MDQ6VXNlcjI4NzY0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2876405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axiaoxin", "html_url": "https://github.com/axiaoxin", "followers_url": "https://api.github.com/users/axiaoxin/followers", "following_url": "https://api.github.com/users/axiaoxin/following{/other_user}", "gists_url": "https://api.github.com/users/axiaoxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/axiaoxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axiaoxin/subscriptions", "organizations_url": "https://api.github.com/users/axiaoxin/orgs", "repos_url": "https://api.github.com/users/axiaoxin/repos", "events_url": "https://api.github.com/users/axiaoxin/events{/privacy}", "received_events_url": "https://api.github.com/users/axiaoxin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-11T11:49:24Z", "updated_at": "2017-12-19T08:17:43Z", "closed_at": "2017-12-19T08:17:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "if there is a view like\r\n\r\n    @app.route('/', methods=['GET', 'POST'])\r\n    @cache.cached(timeout=10)\r\n    def t():\r\n        if request.method == GET:\r\n              return \"GET\"\r\n        else:\r\n              return \"POST\"\r\n\r\nthe flask_cache get the same result both GET and POST in the cached time", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/178", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/178/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/178/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/178", "id": 273708718, "node_id": "MDU6SXNzdWUyNzM3MDg3MTg=", "number": 178, "title": "flask_cache instead", "user": {"login": "durban89", "id": 1449203, "node_id": "MDQ6VXNlcjE0NDkyMDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1449203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durban89", "html_url": "https://github.com/durban89", "followers_url": "https://api.github.com/users/durban89/followers", "following_url": "https://api.github.com/users/durban89/following{/other_user}", "gists_url": "https://api.github.com/users/durban89/gists{/gist_id}", "starred_url": "https://api.github.com/users/durban89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durban89/subscriptions", "organizations_url": "https://api.github.com/users/durban89/orgs", "repos_url": "https://api.github.com/users/durban89/repos", "events_url": "https://api.github.com/users/durban89/events{/privacy}", "received_events_url": "https://api.github.com/users/durban89/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-14T08:42:17Z", "updated_at": "2017-11-14T08:55:58Z", "closed_at": "2017-11-14T08:55:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "python2.7/site-packages/flask_cache/jinja2ext.py:33: ExtDeprecationWarning: Importing flask.ext.cache is deprecated, use flask_cache instead.\r\n\r\non code from flask.ext.cache import make_template_fragment_key", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/177", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/177/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/177/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/177", "id": 266404800, "node_id": "MDU6SXNzdWUyNjY0MDQ4MDA=", "number": 177, "title": "memoize can't deal the magic arguments", "user": {"login": "huangxiaohen2738", "id": 6038418, "node_id": "MDQ6VXNlcjYwMzg0MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6038418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huangxiaohen2738", "html_url": "https://github.com/huangxiaohen2738", "followers_url": "https://api.github.com/users/huangxiaohen2738/followers", "following_url": "https://api.github.com/users/huangxiaohen2738/following{/other_user}", "gists_url": "https://api.github.com/users/huangxiaohen2738/gists{/gist_id}", "starred_url": "https://api.github.com/users/huangxiaohen2738/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huangxiaohen2738/subscriptions", "organizations_url": "https://api.github.com/users/huangxiaohen2738/orgs", "repos_url": "https://api.github.com/users/huangxiaohen2738/repos", "events_url": "https://api.github.com/users/huangxiaohen2738/events{/privacy}", "received_events_url": "https://api.github.com/users/huangxiaohen2738/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-18T08:33:54Z", "updated_at": "2018-01-18T02:29:41Z", "closed_at": "2018-01-18T02:29:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "memoize_make_cache_key  can't deal the magic arguments.\r\n\r\n```\r\n@cache.memoize(timeout=3)\r\ndef test(**kw):\r\n    return 1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/171", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/171/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/171/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/171", "id": 239713449, "node_id": "MDU6SXNzdWUyMzk3MTM0NDk=", "number": 171, "title": "report warning/error  when run flask-cache", "user": {"login": "wanghaiqing2015", "id": 11815186, "node_id": "MDQ6VXNlcjExODE1MTg2", "avatar_url": "https://avatars1.githubusercontent.com/u/11815186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanghaiqing2015", "html_url": "https://github.com/wanghaiqing2015", "followers_url": "https://api.github.com/users/wanghaiqing2015/followers", "following_url": "https://api.github.com/users/wanghaiqing2015/following{/other_user}", "gists_url": "https://api.github.com/users/wanghaiqing2015/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanghaiqing2015/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanghaiqing2015/subscriptions", "organizations_url": "https://api.github.com/users/wanghaiqing2015/orgs", "repos_url": "https://api.github.com/users/wanghaiqing2015/repos", "events_url": "https://api.github.com/users/wanghaiqing2015/events{/privacy}", "received_events_url": "https://api.github.com/users/wanghaiqing2015/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-30T08:39:54Z", "updated_at": "2017-06-30T08:44:27Z", "closed_at": "2017-06-30T08:44:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "c:\\python27\\lib\\site-packages\\flask_cache\\jinja2ext.py:33: ExtDeprecationWarning: Importing flask.ext.cache is deprecated, use flask_cache instead.\r\n\r\n===============================================\r\nreport error when use pyinstaller to freeze flask project\r\n>>>>>>\r\nC:\\Users\\root\\Desktop\\flask-aim-angle\\flask_aim\\dist\\master>master.exe\r\nTraceback (most recent call last):\r\n  File \"flask-aim-angle\\flask_aim\\master.py\", line 12, in <module>\r\n  File \"c:\\python27\\Lib\\site-packages\\PyInstaller\\loader\\pyimod03_importers.py\", line 389, in load_module\r\n    exec(bytecode, module.__dict__)\r\n  File \"flask-aim-angle\\flask_aim\\app.py\", line 21, in <module>\r\n  File \"site-packages\\flask_cache\\__init__.py\", line 121, in __init__\r\n  File \"site-packages\\flask_cache\\__init__.py\", line 156, in init_app\r\n  File \"c:\\python27\\Lib\\site-packages\\PyInstaller\\loader\\pyimod03_importers.py\", line 389, in load_module\r\n    exec(bytecode, module.__dict__)\r\n  File \"site-packages\\flask_cache\\jinja2ext.py\", line 33, in <module>\r\nImportError: No module named ext.cache\r\nFailed to execute script master", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/163", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/163/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/163/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/163", "id": 202989759, "node_id": "MDU6SXNzdWUyMDI5ODk3NTk=", "number": 163, "title": "Too Many Open Files", "user": {"login": "coffeegist", "id": 1392689, "node_id": "MDQ6VXNlcjEzOTI2ODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1392689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coffeegist", "html_url": "https://github.com/coffeegist", "followers_url": "https://api.github.com/users/coffeegist/followers", "following_url": "https://api.github.com/users/coffeegist/following{/other_user}", "gists_url": "https://api.github.com/users/coffeegist/gists{/gist_id}", "starred_url": "https://api.github.com/users/coffeegist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coffeegist/subscriptions", "organizations_url": "https://api.github.com/users/coffeegist/orgs", "repos_url": "https://api.github.com/users/coffeegist/repos", "events_url": "https://api.github.com/users/coffeegist/events{/privacy}", "received_events_url": "https://api.github.com/users/coffeegist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-25T01:32:08Z", "updated_at": "2017-02-02T14:11:49Z", "closed_at": "2017-02-02T14:11:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "After running for a few hours, this always happens.\r\n\r\nAnyone ever ran into this?\r\n\r\n```\r\n2017-01-25 01:15:57,442 - flask_cache - ERROR - Exception possibly due to cache backend.\r\nTraceback (most recent call last):\r\n  File \"/usr/lib64/python2.7/site-packages/flask_cache/__init__.py\", line 528, in decorated_function\r\n  File \"/usr/lib64/python2.7/site-packages/flask_cache/__init__.py\", line 381, in make_cache_key\r\n  File \"/usr/lib64/python2.7/site-packages/flask_cache/__init__.py\", line 370, in _memoize_version\r\n  File \"/usr/lib64/python2.7/site-packages/werkzeug/contrib/cache.py\", line 175, in set_many\r\n  File \"/usr/lib64/python2.7/site-packages/werkzeug/contrib/cache.py\", line 660, in set\r\n  File \"/usr/lib64/python2.7/site-packages/werkzeug/contrib/cache.py\", line 603, in _prune\r\n  File \"/usr/lib64/python2.7/site-packages/werkzeug/contrib/cache.py\", line 599, in _list_dir\r\nOSError: [Errno 24] Too many open files: '/var/user/web/flasky.cache'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/161", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/161/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/161/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/161", "id": 197396160, "node_id": "MDU6SXNzdWUxOTczOTYxNjA=", "number": 161, "title": "Handlers for Logger \"flask_cache\"", "user": {"login": "coffeegist", "id": 1392689, "node_id": "MDQ6VXNlcjEzOTI2ODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1392689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coffeegist", "html_url": "https://github.com/coffeegist", "followers_url": "https://api.github.com/users/coffeegist/followers", "following_url": "https://api.github.com/users/coffeegist/following{/other_user}", "gists_url": "https://api.github.com/users/coffeegist/gists{/gist_id}", "starred_url": "https://api.github.com/users/coffeegist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coffeegist/subscriptions", "organizations_url": "https://api.github.com/users/coffeegist/orgs", "repos_url": "https://api.github.com/users/coffeegist/repos", "events_url": "https://api.github.com/users/coffeegist/events{/privacy}", "received_events_url": "https://api.github.com/users/coffeegist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-23T16:28:41Z", "updated_at": "2017-01-25T01:33:21Z", "closed_at": "2017-01-25T01:32:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I suspect the issue might be the fact that we are still using the old `from flask.ext.cache import cache` syntax, and we need to update? \r\n\r\n`No handlers could be found for logger \"flask_cache\"`\r\n\r\nHowever, the update is impossible with this repository correct? Should we switch to flask-caching?\r\n\r\n@sh4nks - feel free to respond", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/140", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/140/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/140/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/140", "id": 157574133, "node_id": "MDU6SXNzdWUxNTc1NzQxMzM=", "number": 140, "title": "ExtDeprecationWarning on flask >= 0.11", "user": {"login": "lixxu", "id": 264487, "node_id": "MDQ6VXNlcjI2NDQ4Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/264487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lixxu", "html_url": "https://github.com/lixxu", "followers_url": "https://api.github.com/users/lixxu/followers", "following_url": "https://api.github.com/users/lixxu/following{/other_user}", "gists_url": "https://api.github.com/users/lixxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/lixxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lixxu/subscriptions", "organizations_url": "https://api.github.com/users/lixxu/orgs", "repos_url": "https://api.github.com/users/lixxu/repos", "events_url": "https://api.github.com/users/lixxu/events{/privacy}", "received_events_url": "https://api.github.com/users/lixxu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-05-31T01:34:07Z", "updated_at": "2016-05-31T21:37:37Z", "closed_at": "2016-05-31T21:37:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "flask 0.11 will issue a ExtDeprecationWarning for `flask.ext.cache` format.\n\n```\nC:\\python27\\lib\\site-packages\\flask\\exthook.py:71: ExtDeprecationWarning: Importing flask.ext.cache is deprecated, use flask_cache instead.\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/138", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/138/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/138/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/138", "id": 146526527, "node_id": "MDU6SXNzdWUxNDY1MjY1Mjc=", "number": 138, "title": "_memoize_make_cache_key make different cache keys with int and long type integer", "user": {"login": "lishubing", "id": 7519799, "node_id": "MDQ6VXNlcjc1MTk3OTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7519799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lishubing", "html_url": "https://github.com/lishubing", "followers_url": "https://api.github.com/users/lishubing/followers", "following_url": "https://api.github.com/users/lishubing/following{/other_user}", "gists_url": "https://api.github.com/users/lishubing/gists{/gist_id}", "starred_url": "https://api.github.com/users/lishubing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lishubing/subscriptions", "organizations_url": "https://api.github.com/users/lishubing/orgs", "repos_url": "https://api.github.com/users/lishubing/repos", "events_url": "https://api.github.com/users/lishubing/events{/privacy}", "received_events_url": "https://api.github.com/users/lishubing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-04-07T07:02:34Z", "updated_at": "2017-11-08T12:11:09Z", "closed_at": "2017-11-08T12:11:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "_memoize_make_cache_key generate cache key simply using the arguments tuple, but in Python2, int and long type of arguments tuple will be turn different strings:\n\n```\n>>> [int(1)]\n[1]\n>>> [long(1)]\n[1L]\n```\n\nso delete_memoized(func, 1) won't clear the cache result of func(1L).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/120", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/120/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/120/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/120", "id": 79571944, "node_id": "MDU6SXNzdWU3OTU3MTk0NA==", "number": 120, "title": "memoize decorator behaving differently from typical decorator when instantiated without syntactic sugar", "user": {"login": "gene1wood", "id": 1134034, "node_id": "MDQ6VXNlcjExMzQwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1134034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gene1wood", "html_url": "https://github.com/gene1wood", "followers_url": "https://api.github.com/users/gene1wood/followers", "following_url": "https://api.github.com/users/gene1wood/following{/other_user}", "gists_url": "https://api.github.com/users/gene1wood/gists{/gist_id}", "starred_url": "https://api.github.com/users/gene1wood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gene1wood/subscriptions", "organizations_url": "https://api.github.com/users/gene1wood/orgs", "repos_url": "https://api.github.com/users/gene1wood/repos", "events_url": "https://api.github.com/users/gene1wood/events{/privacy}", "received_events_url": "https://api.github.com/users/gene1wood/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-22T19:04:57Z", "updated_at": "2016-01-26T23:47:06Z", "closed_at": "2016-01-26T23:47:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "First, this is most likely due to my own misunderstanding of how `memoize` is used and hence the best thing to come out of this issue might be a documentation change.\n\nWhen using the `memoize` decorator with the `@` symbol syntactic sugar described in the [memoize documentation](https://pythonhosted.org/Flask-Cache/#flask.ext.cache.Cache.memoize) everything works as described.\n\nWhen I manually instantiate `memoize` without the `@` symbol, I get the error `memoize() takes exactly 1 argument`\n\nHere is a code block that illustrates the differing behavior with `memoize` and compares it to a typical decorator (in this case the one used in [wikipedia to illustrate decorators](https://en.wikipedia.org/wiki/Python_syntax_and_semantics#Decorators))\n# Using memoize as described in the documentation\n\n```\nimport random, traceback\nfrom flask import Flask\nfrom flask.ext.cache import Cache\napp = Flask(__name__)\ncache = Cache(app,config={'CACHE_TYPE': 'simple'})\n\nprint \"Using memoize as described in the documentation\"\n\n@cache.memoize(timeout=50)\ndef big_foo(a, b):\n    return a + b + random.randrange(0, 1000)\n\nprint \"big_foo(1,2) %s\" % big_foo(1,2)\nprint \"big_foo(3,4) %s\" % big_foo(3,4)\nprint \"big_foo(1,2) %s\" % big_foo(1,2)\n```\n# Using memoize without the syntactic sugar\n\n```\nprint \"Using memoize without the syntactic sugar\"\n\ndef big_bar(a, b):\n    return a + b + random.randrange(0, 1000)\n\nbig_bar = cache.memoize(big_bar)\n\ntry:\n    print \"big_bar(1,2) %s\" % big_bar(1,2)\nexcept Exception, err:\n    print(traceback.format_exc())\n```\n# Using a typical decorator with syntactic sugar\n\n```\nprint \"Using a typical decorator with syntactic sugar\"\n# https://en.wikipedia.org/wiki/Python_syntax_and_semantics#Decorators\n\ndef viking_chorus(myfunc):\n    def inner_func(*args, **kwargs):\n        for i in range(8):\n            myfunc(*args, **kwargs)\n    return inner_func\n\n@viking_chorus\ndef menu_item():\n    print(\"spam\")\n\nprint \"menu_item() %s\" % menu_item()\n```\n# Using a typical decorator without syntactic sugar\n\n```\nprint \"Using a typical decorator without syntactic sugar\"\n\ndef menu_item_alternate():\n    print(\"egg\")\n\nmenu_item_alternate = viking_chorus(menu_item_alternate)\n\nprint \"menu_item_alternate() %s\" % menu_item_alternate()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/108", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/108/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/108/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/108", "id": 58405755, "node_id": "MDU6SXNzdWU1ODQwNTc1NQ==", "number": 108, "title": "Incompatible with property decorator?", "user": {"login": "ScottSturdivant", "id": 709273, "node_id": "MDQ6VXNlcjcwOTI3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/709273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ScottSturdivant", "html_url": "https://github.com/ScottSturdivant", "followers_url": "https://api.github.com/users/ScottSturdivant/followers", "following_url": "https://api.github.com/users/ScottSturdivant/following{/other_user}", "gists_url": "https://api.github.com/users/ScottSturdivant/gists{/gist_id}", "starred_url": "https://api.github.com/users/ScottSturdivant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ScottSturdivant/subscriptions", "organizations_url": "https://api.github.com/users/ScottSturdivant/orgs", "repos_url": "https://api.github.com/users/ScottSturdivant/repos", "events_url": "https://api.github.com/users/ScottSturdivant/events{/privacy}", "received_events_url": "https://api.github.com/users/ScottSturdivant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-20T20:24:59Z", "updated_at": "2015-02-20T21:00:41Z", "closed_at": "2015-02-20T21:00:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nJust curious if Flask-Cache should be compatible with the @property decorator or not.  My usage shows that it is not, but this is also the first thing I've tried, so perhaps I'm doing it wrong!\n\nMy code:\n\n``` python\nimport random\n\nclass User(object):\n\n    @cache.memoize(50)\n    def foo_method(self):\n        return random.random()\n\n    @property\n    @cache.memoize(50)\n    def foo_prop(self):\n        return random.random()\n```\n\nUsage shows that the instance method can be cached and cleared, but the property can only be cached:\n\n```\n>>> user.foo_method()\n0.0014228338392391349\n\n>>> user.foo_method()\n0.0014228338392391349\n\n>>> user.foo_prop\n0.55235451242909\n\n>>> user.foo_prop\n0.55235451242909\n\n>>> cache.delete_memoized(user.foo_method)\n>>> user.foo_method()\n0.07564953227490745\n\n>>> cache.delete_memoized(user.foo_prop)\n---------------------------------------------------------------------------\nDeprecationWarning                        Traceback (most recent call last)\n    ----> 1 cache.delete_memoized(user.foo_prop)\n\n/home/scott/code/mypkg/venv/lib/python2.7/site-packages/flask_cache/__init__.pyc in delete_memoized(self, f, *args, **kwargs)\n    656         \"\"\"\n    657         if not callable(f):\n--> 658             raise DeprecationWarning(\"Deleting messages by relative name is no longer\"\n    659                           \" reliable, please switch to a function reference\")\n    660\n\nDeprecationWarning: Deleting messages by relative name is no longer reliable, please switch to a function reference\n\n>>> user.foo_prop\n0.55235451242909\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/106", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/106/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/106/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/106", "id": 57319387, "node_id": "MDU6SXNzdWU1NzMxOTM4Nw==", "number": 106, "title": "Conditional caching?", "user": {"login": "reubano", "id": 157864, "node_id": "MDQ6VXNlcjE1Nzg2NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/157864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reubano", "html_url": "https://github.com/reubano", "followers_url": "https://api.github.com/users/reubano/followers", "following_url": "https://api.github.com/users/reubano/following{/other_user}", "gists_url": "https://api.github.com/users/reubano/gists{/gist_id}", "starred_url": "https://api.github.com/users/reubano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reubano/subscriptions", "organizations_url": "https://api.github.com/users/reubano/orgs", "repos_url": "https://api.github.com/users/reubano/repos", "events_url": "https://api.github.com/users/reubano/events{/privacy}", "received_events_url": "https://api.github.com/users/reubano/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-11T14:04:46Z", "updated_at": "2015-02-11T14:22:33Z", "closed_at": "2015-02-11T14:22:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just wondering, is there a way to conditionally cache a url?\n\n``` python\nvalue = None\n\nwhile True:\n   value = get_new_value()\n   time.sleep(30)\n\n@cache.cached(timeout=30)\ndef feed():\n    return value or \"I'm not ready yet!!\"\n```\n\nIn this case I don't want to cache unless `value` is set.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/105", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/105/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/105/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/105", "id": 54586448, "node_id": "MDU6SXNzdWU1NDU4NjQ0OA==", "number": 105, "title": "delete memoize cache for classmethod is not working", "user": {"login": "neelay-shah", "id": 4274827, "node_id": "MDQ6VXNlcjQyNzQ4Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4274827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neelay-shah", "html_url": "https://github.com/neelay-shah", "followers_url": "https://api.github.com/users/neelay-shah/followers", "following_url": "https://api.github.com/users/neelay-shah/following{/other_user}", "gists_url": "https://api.github.com/users/neelay-shah/gists{/gist_id}", "starred_url": "https://api.github.com/users/neelay-shah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neelay-shah/subscriptions", "organizations_url": "https://api.github.com/users/neelay-shah/orgs", "repos_url": "https://api.github.com/users/neelay-shah/repos", "events_url": "https://api.github.com/users/neelay-shah/events{/privacy}", "received_events_url": "https://api.github.com/users/neelay-shah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-16T15:20:18Z", "updated_at": "2015-01-16T16:22:57Z", "closed_at": "2015-01-16T16:22:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use memoize functionality of flask-cache, but I am having problem with delete-memoized functionality. Here is my code. \n\n```\nclass SessionsRepository(object):\n\n    @classmethod\n    @app.cache.memoize(30)    \n    def get_session_by_id(self, session_id, get_attendees=False, timezone = None):\n        result = {}\n        sessioninfo = None\n        sessioninfo = db.session.query(Sessions).filter(Sessions.session_id == int(session_id)).first()\n\n        if timezone is not None:\n            sessioninfo = update_session_date_and_time_with_timezone(sessioninfo, timezone)\n\n        if get_attendees is True:\n            result['session'] = sessioninfo\n\n            result['students'] = []\n            students = db.session.query(models.users.Users, SessionAttendees.attendance_id).filter(SessionAttendees.session_id == session_id, SessionAttendees.user_id == models.users.Users.user_id).all()\n            if students is not None:\n                for user, attid in students:\n                    result['students'].append(user)\n\n            return result\n        else:\n            return sessioninfo\n\n\n    @classmethod    \n    def update_session_by_id(self, session_id, session, sis_push = True):\n         #update Session\n         db.session.query(Sessions).filter(Sessions.session_id == session_id).update(session)\n         app.cache.delete_memoized(SessionsRepository.get_session_by_id, SessionsRepository, session_id)\n\n\nsession_info = SessionsRepository.get_session_by_id(1)\nprint session_info\nif session_info.status == 0:\n    SessionsRepository.update_session_by_id(1,{'status' : 1})\n\nsession_info = SessionsRepository.get_session_by_id(1)\nprint session_info\n```\n\nI also tried with app.cache.delete_memoized(self.get_session_by_id, self, session_id)   too.  \nCan someone help me with this? I tried to print cache_key in package to, and i see diff cache key for cache and delete call.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/103", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/103/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/103/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/103", "id": 50604709, "node_id": "MDU6SXNzdWU1MDYwNDcwOQ==", "number": 103, "title": "Is it possible to use Flask-Cache unless feature with Jinja?", "user": {"login": "rturk", "id": 2236950, "node_id": "MDQ6VXNlcjIyMzY5NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2236950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rturk", "html_url": "https://github.com/rturk", "followers_url": "https://api.github.com/users/rturk/followers", "following_url": "https://api.github.com/users/rturk/following{/other_user}", "gists_url": "https://api.github.com/users/rturk/gists{/gist_id}", "starred_url": "https://api.github.com/users/rturk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rturk/subscriptions", "organizations_url": "https://api.github.com/users/rturk/orgs", "repos_url": "https://api.github.com/users/rturk/repos", "events_url": "https://api.github.com/users/rturk/events{/privacy}", "received_events_url": "https://api.github.com/users/rturk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-12-02T02:15:18Z", "updated_at": "2016-10-04T20:54:00Z", "closed_at": "2016-10-04T20:54:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm attempting to use Unless within a flask template. The example bellow is clearly documented as not possible, any options? Or this is not documented?\n\n{% cache 5*60, 'myform', User.id | string, unless=g.cache%}\n\n.. my templte data..\n\n{% endcache %}\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/96", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/96/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/96/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/96", "id": 43312031, "node_id": "MDU6SXNzdWU0MzMxMjAzMQ==", "number": 96, "title": "Make template tag timeout optional", "user": {"login": "iurisilvio", "id": 105852, "node_id": "MDQ6VXNlcjEwNTg1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/105852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iurisilvio", "html_url": "https://github.com/iurisilvio", "followers_url": "https://api.github.com/users/iurisilvio/followers", "following_url": "https://api.github.com/users/iurisilvio/following{/other_user}", "gists_url": "https://api.github.com/users/iurisilvio/gists{/gist_id}", "starred_url": "https://api.github.com/users/iurisilvio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iurisilvio/subscriptions", "organizations_url": "https://api.github.com/users/iurisilvio/orgs", "repos_url": "https://api.github.com/users/iurisilvio/repos", "events_url": "https://api.github.com/users/iurisilvio/events{/privacy}", "received_events_url": "https://api.github.com/users/iurisilvio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-09-20T15:03:34Z", "updated_at": "2014-11-15T12:03:33Z", "closed_at": "2014-11-15T12:03:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have to always make something like: `{% cache 7*24*60*60 \"key\" %}`. I want to make timeout optional, even with keys.\n\n```\n{% cache \"default\" \"key\" %}\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/88", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/88/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/88/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/88", "id": 31427619, "node_id": "MDU6SXNzdWUzMTQyNzYxOQ==", "number": 88, "title": "Error installing from pip under Python 3 - workaround", "user": {"login": "dukedougal", "id": 691840, "node_id": "MDQ6VXNlcjY5MTg0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/691840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dukedougal", "html_url": "https://github.com/dukedougal", "followers_url": "https://api.github.com/users/dukedougal/followers", "following_url": "https://api.github.com/users/dukedougal/following{/other_user}", "gists_url": "https://api.github.com/users/dukedougal/gists{/gist_id}", "starred_url": "https://api.github.com/users/dukedougal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dukedougal/subscriptions", "organizations_url": "https://api.github.com/users/dukedougal/orgs", "repos_url": "https://api.github.com/users/dukedougal/repos", "events_url": "https://api.github.com/users/dukedougal/events{/privacy}", "received_events_url": "https://api.github.com/users/dukedougal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-04-13T23:56:40Z", "updated_at": "2014-04-21T13:41:30Z", "closed_at": "2014-04-21T13:41:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "pip install --upgrade git+https://github.com/thadeusb/flask-cache#egg=flask-cache\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/87", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/87/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/87/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/87", "id": 29821253, "node_id": "MDU6SXNzdWUyOTgyMTI1Mw==", "number": 87, "title": "Pip version of Flask-Cache not compatible with python3", "user": {"login": "exaroth", "id": 3927388, "node_id": "MDQ6VXNlcjM5MjczODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3927388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exaroth", "html_url": "https://github.com/exaroth", "followers_url": "https://api.github.com/users/exaroth/followers", "following_url": "https://api.github.com/users/exaroth/following{/other_user}", "gists_url": "https://api.github.com/users/exaroth/gists{/gist_id}", "starred_url": "https://api.github.com/users/exaroth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exaroth/subscriptions", "organizations_url": "https://api.github.com/users/exaroth/orgs", "repos_url": "https://api.github.com/users/exaroth/repos", "events_url": "https://api.github.com/users/exaroth/events{/privacy}", "received_events_url": "https://api.github.com/users/exaroth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-03-20T14:10:12Z", "updated_at": "2014-04-21T13:32:37Z", "closed_at": "2014-04-21T13:32:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this project is still maintained but when i tried using pip'ed version under python 3.4 it returned error \n\n```\nNo module named exceptions\n```\n\nprobably related to fact that python 3 doesn't have it, Github version is working OK though.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/78", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/78/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/78/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/78", "id": 23130979, "node_id": "MDU6SXNzdWUyMzEzMDk3OQ==", "number": 78, "title": "Memoize does not respect the parameter timeout", "user": {"login": "teleyinex", "id": 131838, "node_id": "MDQ6VXNlcjEzMTgzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/131838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teleyinex", "html_url": "https://github.com/teleyinex", "followers_url": "https://api.github.com/users/teleyinex/followers", "following_url": "https://api.github.com/users/teleyinex/following{/other_user}", "gists_url": "https://api.github.com/users/teleyinex/gists{/gist_id}", "starred_url": "https://api.github.com/users/teleyinex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teleyinex/subscriptions", "organizations_url": "https://api.github.com/users/teleyinex/orgs", "repos_url": "https://api.github.com/users/teleyinex/repos", "events_url": "https://api.github.com/users/teleyinex/events{/privacy}", "received_events_url": "https://api.github.com/users/teleyinex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-11-22T11:14:25Z", "updated_at": "2014-04-21T13:31:49Z", "closed_at": "2014-04-21T13:31:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI'm having problems with the timeout parameter for the memoize decorator. It looks like it is never respected, putting in the cache always the default timeout: 300 (unless you modify it in the config file). Interestingly, with cached it works as expected.\n\nI'm using it like this:\n\n@cache.memoize(timeout=999)\ndef foo(arg1, arg2):\n    pass\n\nI'm using REDIS as the backend, any ideas?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/77", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/77/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/77/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/77", "id": 21997700, "node_id": "MDU6SXNzdWUyMTk5NzcwMA==", "number": 77, "title": "Set Timeout at Runtime", "user": {"login": "n0wa11", "id": 1938537, "node_id": "MDQ6VXNlcjE5Mzg1Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1938537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n0wa11", "html_url": "https://github.com/n0wa11", "followers_url": "https://api.github.com/users/n0wa11/followers", "following_url": "https://api.github.com/users/n0wa11/following{/other_user}", "gists_url": "https://api.github.com/users/n0wa11/gists{/gist_id}", "starred_url": "https://api.github.com/users/n0wa11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n0wa11/subscriptions", "organizations_url": "https://api.github.com/users/n0wa11/orgs", "repos_url": "https://api.github.com/users/n0wa11/repos", "events_url": "https://api.github.com/users/n0wa11/events{/privacy}", "received_events_url": "https://api.github.com/users/n0wa11/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-11-02T06:35:45Z", "updated_at": "2013-11-06T03:33:46Z", "closed_at": "2013-11-06T03:33:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "It will be nice to allow to set a different `timeout`, after the function is called.\n\n```\ncache_timeout\n    The cache timeout value for this function. \n    For a custom value to take affect, this must be set before the function is called.\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/73", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/73/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/73/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/73", "id": 20602756, "node_id": "MDU6SXNzdWUyMDYwMjc1Ng==", "number": 73, "title": "Memoization of classmethod", "user": {"login": "Marigold", "id": 1550888, "node_id": "MDQ6VXNlcjE1NTA4ODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1550888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marigold", "html_url": "https://github.com/Marigold", "followers_url": "https://api.github.com/users/Marigold/followers", "following_url": "https://api.github.com/users/Marigold/following{/other_user}", "gists_url": "https://api.github.com/users/Marigold/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marigold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marigold/subscriptions", "organizations_url": "https://api.github.com/users/Marigold/orgs", "repos_url": "https://api.github.com/users/Marigold/repos", "events_url": "https://api.github.com/users/Marigold/events{/privacy}", "received_events_url": "https://api.github.com/users/Marigold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-10-07T10:13:49Z", "updated_at": "2014-04-21T13:45:39Z", "closed_at": "2014-04-21T13:45:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do you memoize `@classmethod`? I would expect following test to work, but apparently `delete_memoize` don't clear the cache\n\n``` python\ndef test_delete_memoize_classmethod(self):\n        with self.app.test_request_context():\n            class Mock(object):\n                @classmethod\n                @self.cache.memoize(5)\n                def big_foo(cls, a, b):\n                    return a+b+random.randrange(0, 100000)\n\n            result = Mock.big_foo(5, 2)\n            result2 = Mock.big_foo(5, 3)\n\n            time.sleep(1)\n\n            assert Mock.big_foo(5, 2) == result\n            assert Mock.big_foo(5, 2) == result\n            assert Mock.big_foo(5, 3) != result\n            assert Mock.big_foo(5, 3) == result2\n\n            self.cache.delete_memoized(Mock.big_foo)\n\n            assert Mock.big_foo(5, 2) != result\n            assert Mock.big_foo(5, 3) != result2\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/72", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/72/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/72/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/72", "id": 19763769, "node_id": "MDU6SXNzdWUxOTc2Mzc2OQ==", "number": 72, "title": "Upload py3k compatible version on PyPi", "user": {"login": "tlaundal", "id": 817001, "node_id": "MDQ6VXNlcjgxNzAwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/817001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlaundal", "html_url": "https://github.com/tlaundal", "followers_url": "https://api.github.com/users/tlaundal/followers", "following_url": "https://api.github.com/users/tlaundal/following{/other_user}", "gists_url": "https://api.github.com/users/tlaundal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlaundal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlaundal/subscriptions", "organizations_url": "https://api.github.com/users/tlaundal/orgs", "repos_url": "https://api.github.com/users/tlaundal/repos", "events_url": "https://api.github.com/users/tlaundal/events{/privacy}", "received_events_url": "https://api.github.com/users/tlaundal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-09-19T15:57:31Z", "updated_at": "2014-04-21T13:59:18Z", "closed_at": "2014-04-21T13:59:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd love if you would upload the Python 3 compatible version to PyPi. The version that is there won't install on my system, but the github version will. \nIf you don't think the package is ready yet, you could always upload it with \"Development Status :: 3 - Alpha\"\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/64", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/64/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/64/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/64", "id": 13388339, "node_id": "MDU6SXNzdWUxMzM4ODMzOQ==", "number": 64, "title": "SASLMemcachedCache + pylibmc + libmemcached Errors", "user": {"login": "rdegges", "id": 90247, "node_id": "MDQ6VXNlcjkwMjQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/90247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdegges", "html_url": "https://github.com/rdegges", "followers_url": "https://api.github.com/users/rdegges/followers", "following_url": "https://api.github.com/users/rdegges/following{/other_user}", "gists_url": "https://api.github.com/users/rdegges/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdegges/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdegges/subscriptions", "organizations_url": "https://api.github.com/users/rdegges/orgs", "repos_url": "https://api.github.com/users/rdegges/repos", "events_url": "https://api.github.com/users/rdegges/events{/privacy}", "received_events_url": "https://api.github.com/users/rdegges/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-04-19T05:53:44Z", "updated_at": "2013-08-11T02:38:17Z", "closed_at": "2013-08-11T02:38:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\n\nI'm trying to get Flask-Cache working on Heroku with one of their addon providers, memcachier. Since memcachier only supports SASL authentication, I figured I'd use the following configuration:\n\n``` python\nCACHE_TYPE = 'saslmemcached'\nCACHE_MEMCACHED_SERVERS = '...'\nCACHE_MEMCACHED_USERNAME = '...'\nCACHE_MEMCACHED_PASSWORD = '...'\n```\n\nI've also got pylibmc installed locally (`pylibmc==1.2.3`).\n\nWhat happens, however, when I attempt to run app, is that I get:\n\n``` python\n  File \"/home/rdegges/.virtualenvs/tnapi-storage/local/lib/python2.7/site-packages/Flask_Cache-0.11.1-py2.7.egg/flask_cache/__init__.py\", line 66, in __init__\n    self.init_app(app, config)\n  File \"/home/rdegges/.virtualenvs/tnapi-storage/local/lib/python2.7/site-packages/Flask_Cache-0.11.1-py2.7.egg/flask_cache/__init__.py\", line 97, in init_app\n    self._set_cache(app, config)\n  File \"/home/rdegges/.virtualenvs/tnapi-storage/local/lib/python2.7/site-packages/Flask_Cache-0.11.1-py2.7.egg/flask_cache/__init__.py\", line 123, in _set_cache\n    app, config, cache_args, cache_options)\n  File \"/home/rdegges/.virtualenvs/tnapi-storage/local/lib/python2.7/site-packages/Flask_Cache-0.11.1-py2.7.egg/flask_cache/backends.py\", line 40, in saslmemcached\n    return SASLMemcachedCache(*args, **kwargs)\n  File \"/home/rdegges/.virtualenvs/tnapi-storage/local/lib/python2.7/site-packages/Flask_Cache-0.11.1-py2.7.egg/flask_cache/backends.py\", line 18, in __init__\n    binary=True)\n  File \"/home/rdegges/.virtualenvs/tnapi-storage/local/lib/python2.7/site-packages/pylibmc/client.py\", line 97, in __init__\n    password=password)\nTypeError: libmemcached does not support SASL\n```\n\nIt looks like `libmemcached` (which pylibmc depends on) is not working properly :o Does anyone else have this issue? I'm using Ubuntu 12.10 as well.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/60", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/60/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/60/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/60", "id": 12027624, "node_id": "MDU6SXNzdWUxMjAyNzYyNA==", "number": 60, "title": "Get remaining/elapsed time for memoize", "user": {"login": "shuhaowu", "id": 338100, "node_id": "MDQ6VXNlcjMzODEwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/338100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shuhaowu", "html_url": "https://github.com/shuhaowu", "followers_url": "https://api.github.com/users/shuhaowu/followers", "following_url": "https://api.github.com/users/shuhaowu/following{/other_user}", "gists_url": "https://api.github.com/users/shuhaowu/gists{/gist_id}", "starred_url": "https://api.github.com/users/shuhaowu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shuhaowu/subscriptions", "organizations_url": "https://api.github.com/users/shuhaowu/orgs", "repos_url": "https://api.github.com/users/shuhaowu/repos", "events_url": "https://api.github.com/users/shuhaowu/events{/privacy}", "received_events_url": "https://api.github.com/users/shuhaowu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-03-14T16:52:10Z", "updated_at": "2013-03-24T03:56:23Z", "closed_at": "2013-03-24T03:56:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to get the remaining time for memoize? Is it also possible to get the elapsed time as well?\n\nI don't see this in the docs, can we add this in?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/57", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/57/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/57/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/57", "id": 11851218, "node_id": "MDU6SXNzdWUxMTg1MTIxOA==", "number": 57, "title": "Catch Error in cache/memoize ?", "user": {"login": "Carreau", "id": 335567, "node_id": "MDQ6VXNlcjMzNTU2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Carreau", "html_url": "https://github.com/Carreau", "followers_url": "https://api.github.com/users/Carreau/followers", "following_url": "https://api.github.com/users/Carreau/following{/other_user}", "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions", "organizations_url": "https://api.github.com/users/Carreau/orgs", "repos_url": "https://api.github.com/users/Carreau/repos", "events_url": "https://api.github.com/users/Carreau/events{/privacy}", "received_events_url": "https://api.github.com/users/Carreau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2013-03-10T11:36:23Z", "updated_at": "2013-03-24T03:48:50Z", "closed_at": "2013-03-24T03:48:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I saw that you catched get/set error [here](https://github.com/thadeusb/flask-cache/blob/master/flask_cache/__init__.py#L221) and [here](https://github.com/thadeusb/flask-cache/blob/master/flask_cache/__init__.py#L425) , but if set/get fail there is a big chance that `cache_key = decorated_function.make_cache_key(*args, **kwargs)` fails 3 line above in each case and also [here](https://github.com/thadeusb/flask-cache/blob/master/flask_cache/__init__.py#L531) .\n\nshould I move it inside the try/catch too ? and wrap in a try catch for the 3rd case ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/55", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/55/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/55/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/55", "id": 11837929, "node_id": "MDU6SXNzdWUxMTgzNzkyOQ==", "number": 55, "title": "Spread value among multiple keys ?", "user": {"login": "Carreau", "id": 335567, "node_id": "MDQ6VXNlcjMzNTU2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Carreau", "html_url": "https://github.com/Carreau", "followers_url": "https://api.github.com/users/Carreau/followers", "following_url": "https://api.github.com/users/Carreau/following{/other_user}", "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions", "organizations_url": "https://api.github.com/users/Carreau/orgs", "repos_url": "https://api.github.com/users/Carreau/repos", "events_url": "https://api.github.com/users/Carreau/events{/privacy}", "received_events_url": "https://api.github.com/users/Carreau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-03-09T12:14:19Z", "updated_at": "2013-03-24T03:38:38Z", "closed_at": "2013-03-24T03:38:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, \n\nI came across the issue that by default, Memcached does not support value > 1M. Which should be configurable, but in PAAS like heroku, you can't always do that. \n\nIt's pretty easy [to circumvent](http://stackoverflow.com/questions/9127982/avoiding-memcache-1m-limit-of-values), so I was wondering is such an option would make sens in flask cache (or does it belong more in werkzeug contrib maybe ?)\n\nI guess it comes with a performance cost of course...\n\nI did it for my app, if you think this is a good idea, I can try to issue a PR if you wish .\n\nAnyway, sorry if I missed anything obvious.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/53", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/53/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/53/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/53", "id": 11499726, "node_id": "MDU6SXNzdWUxMTQ5OTcyNg==", "number": 53, "title": "Can't have more then 1 instance of Cache() in latest versions", "user": {"login": "rubensayshi", "id": 649160, "node_id": "MDQ6VXNlcjY0OTE2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/649160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rubensayshi", "html_url": "https://github.com/rubensayshi", "followers_url": "https://api.github.com/users/rubensayshi/followers", "following_url": "https://api.github.com/users/rubensayshi/following{/other_user}", "gists_url": "https://api.github.com/users/rubensayshi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rubensayshi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rubensayshi/subscriptions", "organizations_url": "https://api.github.com/users/rubensayshi/orgs", "repos_url": "https://api.github.com/users/rubensayshi/repos", "events_url": "https://api.github.com/users/rubensayshi/events{/privacy}", "received_events_url": "https://api.github.com/users/rubensayshi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-02-28T13:06:40Z", "updated_at": "2013-03-24T03:30:43Z", "closed_at": "2013-03-24T03:28:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "because `_set_cache` sets `app.extensions['cache']` and uses that for accessing the cache too it's not possible to have multiple instances of Cache() (eg. one local in-memory cache, one redis cache, one memcache cache).\n\nin v0.8.0 this was still possible ... \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/52", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/52/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/52/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/52", "id": 11382685, "node_id": "MDU6SXNzdWUxMTM4MjY4NQ==", "number": 52, "title": "PicklingError: Can't pickle <class 'flaskext.testing.TestResponse'>", "user": {"login": "krisneuharth", "id": 170379, "node_id": "MDQ6VXNlcjE3MDM3OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/170379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krisneuharth", "html_url": "https://github.com/krisneuharth", "followers_url": "https://api.github.com/users/krisneuharth/followers", "following_url": "https://api.github.com/users/krisneuharth/following{/other_user}", "gists_url": "https://api.github.com/users/krisneuharth/gists{/gist_id}", "starred_url": "https://api.github.com/users/krisneuharth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krisneuharth/subscriptions", "organizations_url": "https://api.github.com/users/krisneuharth/orgs", "repos_url": "https://api.github.com/users/krisneuharth/repos", "events_url": "https://api.github.com/users/krisneuharth/events{/privacy}", "received_events_url": "https://api.github.com/users/krisneuharth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-02-25T21:56:18Z", "updated_at": "2013-02-27T17:41:27Z", "closed_at": "2013-02-27T17:41:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I have a very simple endpoint like this:\n\n``` python\n@app.route('zip-codes/<string:zip_code>', methods=[\"GET\"])\n@cache.cached(timeout=50)\ndef zip_codes(zip_code):\n    coords = get_coords_for_zip_code(zip_code)\n    return success_response(coords)\n```\n\nIt hits a DB for a JSON representation of lat/longs for a given zip codes. \n\nI have a test that fails with the error message:\n\n```\nPicklingError: Can't pickle <class 'flaskext.testing.TestResponse'>\n```\n\nwhen using the 'simple' cache backend.\n\nMy failing test looks like this:\n\n``` python\n@patch('views.get_coords_for_zip_code')\n    def test_get_zip_code_polygon(self, get_coords_for_zip_code_mock):\n        get_coords_for_zip_code_mock.return_value = {\n            \"zip_code\": '90210',\n            \"polygons\": '[[33,44], [44,33]]'\n        }\n\n        response = self.client.get('/zip-codes/90210')\n        self.assertEqual(response.status_code, 200)\n\n        self.assertTrue('90210' in response.data)\n        self.assertTrue('zip_code' in response.data)\n        self.assertTrue('polygons' in response.data)\n```\n\nFull stack trace:\n\n```\nTraceback (most recent call last):\n  File \"/opt/dealer-portal/tests/blueprints/account/views.py\", line 816, in test_get_zip_code_polygon_bad_request\n    response = self.client.get('/zip-codes/-1')\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Werkzeug-0.8.2-py2.7.egg/werkzeug/test.py\", line 735, in get\n    return self.open(*args, **kw)\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Flask-0.8-py2.7.egg/flask/testing.py\", line 102, in open\n    follow_redirects=follow_redirects)\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Werkzeug-0.8.2-py2.7.egg/werkzeug/test.py\", line 675, in open\n    rv = run_wsgi_app(self.application, environ, buffered=buffered)\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Werkzeug-0.8.2-py2.7.egg/werkzeug/test.py\", line 818, in run_wsgi_app\n    app_iter = app(environ, start_response)\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Flask-0.8-py2.7.egg/flask/app.py\", line 1518, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Flask-0.8-py2.7.egg/flask/app.py\", line 1506, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Flask-0.8-py2.7.egg/flask/app.py\", line 1504, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Flask-0.8-py2.7.egg/flask/app.py\", line 1264, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Flask-0.8-py2.7.egg/flask/app.py\", line 1262, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Flask-0.8-py2.7.egg/flask/app.py\", line 1248, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Flask_Cache-0.10.1-py2.7.egg/flask_cache/__init__.py\", line 218, in decorated_function\n    timeout=decorated_function.cache_timeout)\n  File \"/home/kris/.virtualenvs/dp/local/lib/python2.7/site-packages/Werkzeug-0.8.2-py2.7.egg/werkzeug/contrib/cache.py\", line 258, in set\n    pickle.HIGHEST_PROTOCOL))\nPicklingError: Can't pickle <class 'flaskext.testing.TestResponse'>: attribute lookup flaskext.testing.TestResponse failed\n```\n\nIs this a known limitation or a bug?\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/51", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/51/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/51/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/51", "id": 11373739, "node_id": "MDU6SXNzdWUxMTM3MzczOQ==", "number": 51, "title": "Incorrect return value if create function caches dynamically.", "user": {"login": "rsk700", "id": 816292, "node_id": "MDQ6VXNlcjgxNjI5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/816292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsk700", "html_url": "https://github.com/rsk700", "followers_url": "https://api.github.com/users/rsk700/followers", "following_url": "https://api.github.com/users/rsk700/following{/other_user}", "gists_url": "https://api.github.com/users/rsk700/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsk700/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsk700/subscriptions", "organizations_url": "https://api.github.com/users/rsk700/orgs", "repos_url": "https://api.github.com/users/rsk700/repos", "events_url": "https://api.github.com/users/rsk700/events{/privacy}", "received_events_url": "https://api.github.com/users/rsk700/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-02-25T18:52:52Z", "updated_at": "2013-02-25T21:50:12Z", "closed_at": "2013-02-25T21:50:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Maybe it isn't intended use case, but if I try to create caches dynamically I get same return value if I pass same argument list. Here is the example code:\n\n```\nIn [1]: from flask import Flask\nIn [2]: from flask.ext.cache import Cache\nIn [3]: app = Flask('')\nIn [4]: cache = Cache(app, config={'CACHE_TYPE': 'simple'})\nIn [5]: def create_cached_function(f):\n...:         return cache.memoize(timeout=5)(f)\n...: f1 = create_cached_function(lambda x: 1)\n...: f2 = create_cached_function(lambda x: 2)\n...: \n\nIn [6]: f1('')\nOut[6]: 1\n\nIn [7]: f2('')\nOut[7]: 1\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/50", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/50/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/50/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/50", "id": 11243584, "node_id": "MDU6SXNzdWUxMTI0MzU4NA==", "number": 50, "title": "delete_memoized does not delete all keys associated to the function", "user": {"login": "phacops", "id": 336345, "node_id": "MDQ6VXNlcjMzNjM0NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/336345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phacops", "html_url": "https://github.com/phacops", "followers_url": "https://api.github.com/users/phacops/followers", "following_url": "https://api.github.com/users/phacops/following{/other_user}", "gists_url": "https://api.github.com/users/phacops/gists{/gist_id}", "starred_url": "https://api.github.com/users/phacops/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phacops/subscriptions", "organizations_url": "https://api.github.com/users/phacops/orgs", "repos_url": "https://api.github.com/users/phacops/repos", "events_url": "https://api.github.com/users/phacops/events{/privacy}", "received_events_url": "https://api.github.com/users/phacops/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-02-21T14:51:58Z", "updated_at": "2013-08-11T02:37:57Z", "closed_at": "2013-08-11T02:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI'm using memoize to store in cache the result of a static method in memcache. And when using delete_memoized, the cache is not delete as intended.\n\nMy object + function looks like this:\n\n```\nclass User(UserMixin):\n    @staticmethod\n    @cache.memoize(30)\n    def get(id):\n        return 'Some info about the user'\n```\n\nI use it to do something like this:\n\n```\nUser.get(user_id)\n```\n\nwhere user_id is an int.\n\nWhen I update user's info, I want to delete the memoized info:\n\n```\ndef some_action():\n    cache.delete_memoized(User.get, current_user.id)\n```\n\nBut the cache is never deleted (I'm checking with a memcached-tool dump). I checked it was the same id, same function_namespace.\n\nI think the cache regarding this object should be deleted.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/48", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/48/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/48/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/48", "id": 10365168, "node_id": "MDU6SXNzdWUxMDM2NTE2OA==", "number": 48, "title": "can it work with blueprint?", "user": {"login": "zfdang", "id": 1241196, "node_id": "MDQ6VXNlcjEyNDExOTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1241196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zfdang", "html_url": "https://github.com/zfdang", "followers_url": "https://api.github.com/users/zfdang/followers", "following_url": "https://api.github.com/users/zfdang/following{/other_user}", "gists_url": "https://api.github.com/users/zfdang/gists{/gist_id}", "starred_url": "https://api.github.com/users/zfdang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zfdang/subscriptions", "organizations_url": "https://api.github.com/users/zfdang/orgs", "repos_url": "https://api.github.com/users/zfdang/repos", "events_url": "https://api.github.com/users/zfdang/events{/privacy}", "received_events_url": "https://api.github.com/users/zfdang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-01-28T05:37:22Z", "updated_at": "2013-03-24T03:06:33Z", "closed_at": "2013-03-24T03:06:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't figure how to use flask-cache with blueprint. any help?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/43", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/43/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/43/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/43", "id": 9120614, "node_id": "MDU6SXNzdWU5MTIwNjE0", "number": 43, "title": "delete_many, get_many, set_many functions are not documented in the docs.", "user": {"login": "sunu", "id": 1142203, "node_id": "MDQ6VXNlcjExNDIyMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1142203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunu", "html_url": "https://github.com/sunu", "followers_url": "https://api.github.com/users/sunu/followers", "following_url": "https://api.github.com/users/sunu/following{/other_user}", "gists_url": "https://api.github.com/users/sunu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunu/subscriptions", "organizations_url": "https://api.github.com/users/sunu/orgs", "repos_url": "https://api.github.com/users/sunu/repos", "events_url": "https://api.github.com/users/sunu/events{/privacy}", "received_events_url": "https://api.github.com/users/sunu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2012-12-09T14:30:43Z", "updated_at": "2012-12-16T02:26:34Z", "closed_at": "2012-12-16T02:26:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is no mention of delete_many, get_many, set_many in the documentation.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/42", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/42/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/42/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/42", "id": 9023048, "node_id": "MDU6SXNzdWU5MDIzMDQ4", "number": 42, "title": "memoize cache key NOT unique", "user": {"login": "1xch", "id": 199137, "node_id": "MDQ6VXNlcjE5OTEzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/199137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1xch", "html_url": "https://github.com/1xch", "followers_url": "https://api.github.com/users/1xch/followers", "following_url": "https://api.github.com/users/1xch/following{/other_user}", "gists_url": "https://api.github.com/users/1xch/gists{/gist_id}", "starred_url": "https://api.github.com/users/1xch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1xch/subscriptions", "organizations_url": "https://api.github.com/users/1xch/orgs", "repos_url": "https://api.github.com/users/1xch/repos", "events_url": "https://api.github.com/users/1xch/events{/privacy}", "received_events_url": "https://api.github.com/users/1xch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2012-12-05T15:49:54Z", "updated_at": "2012-12-05T19:08:36Z", "closed_at": "2012-12-05T19:08:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a method:\n\n```\n@property\n@cache.memoize(10)\ndef simple_stat(self):\n    return dict({'viewed': self.viewed_all,\n                         'presented': self.presented,\n                         'submitted': self.submitted,\n                         'completed': self.completed,\n                         'edited': self.edited})\n```\n\nThe expectation is that cache.memoize would make a key based on id(self) that is unique, even if the function has no arguments other than self.\n\nInstead it is not -- at this point I get 1 cached simple_stat for all objects that have simple_stat method. If I pull them up in a dictionary or list, they all have the same simple_stat result where they should not. I am having difficulty working out a way to assign a unique key, and I'll be upfront about not 100% understanding the code I looked over here for making cache_keys. Making a callable function that creates a random key seems to serve no purpose(it would create a random key every time?) and I cannot pass in something like 'self.identifier' with the argument list.  If it a bug, reported. If there is something I do not understand, let me know.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/40", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/40/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/40/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/40", "id": 8420982, "node_id": "MDU6SXNzdWU4NDIwOTgy", "number": 40, "title": "UnboundLocalError: local variable 'arg' referenced before assignment", "user": {"login": "bvsn", "id": 2510755, "node_id": "MDQ6VXNlcjI1MTA3NTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2510755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvsn", "html_url": "https://github.com/bvsn", "followers_url": "https://api.github.com/users/bvsn/followers", "following_url": "https://api.github.com/users/bvsn/following{/other_user}", "gists_url": "https://api.github.com/users/bvsn/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvsn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvsn/subscriptions", "organizations_url": "https://api.github.com/users/bvsn/orgs", "repos_url": "https://api.github.com/users/bvsn/repos", "events_url": "https://api.github.com/users/bvsn/events{/privacy}", "received_events_url": "https://api.github.com/users/bvsn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2012-11-16T14:33:48Z", "updated_at": "2012-11-17T03:41:33Z", "closed_at": "2012-11-17T03:41:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Traceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1701, in **call**\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1689, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1687, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1360, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1358, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1344, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/home/andrew/workspace/aiw/src/lib/util/decorators.py\", line 16, in wrapper\n    response = func(_args, *_kwargs)\n  File \"/home/andrew/workspace/aiw/src/aiw/controllers/util.py\", line 26, in summary\n    for category in get_categories():\n  File \"/usr/local/lib/python2.7/dist-packages/flask_cache/**init**.py\", line 381, in decorated_function\n    cache_key = decorated_function.make_cache_key(f, _args, *_kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/flask_cache/**init**.py\", line 259, in make_cache_key\n    args, kwargs = self.memoize_kwargs_to_args(f, _args, *_kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/flask_cache/**init**.py\", line 314, in memoize_kwargs_to_args\n    new_args.append(arg)\nUnboundLocalError: local variable 'arg' referenced before assignment\n\nMy code:\n\n``` python\n@cache.memoize(timeout=DAY)\ndef get_categories(kind=None):\n    kind = kind if kind else get_default_kind()\n\n    return Category.query.filter(\n        Category.kind==kind,\n    ).all()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/38", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/38/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/38/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/38", "id": 8091996, "node_id": "MDU6SXNzdWU4MDkxOTk2", "number": 38, "title": "Support GAE", "user": {"login": "acertain", "id": 985195, "node_id": "MDQ6VXNlcjk4NTE5NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/985195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acertain", "html_url": "https://github.com/acertain", "followers_url": "https://api.github.com/users/acertain/followers", "following_url": "https://api.github.com/users/acertain/following{/other_user}", "gists_url": "https://api.github.com/users/acertain/gists{/gist_id}", "starred_url": "https://api.github.com/users/acertain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acertain/subscriptions", "organizations_url": "https://api.github.com/users/acertain/orgs", "repos_url": "https://api.github.com/users/acertain/repos", "events_url": "https://api.github.com/users/acertain/events{/privacy}", "received_events_url": "https://api.github.com/users/acertain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2012-11-04T20:41:15Z", "updated_at": "2013-01-11T00:28:56Z", "closed_at": "2013-01-11T00:28:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some import fails when run on GAE's sandbox and `ys.path.append(os.path.join(os.path.dirname(__file__), 'venv/lib/python2.7/site-packages'))` is used to add all extra modules:\n\n```\nERROR    2012-11-04 20:36:44,336 cgi.py:121] Traceback (most recent call last):\n  File \"/Users/cartercharbonneau/dndapp/run.py\", line 3, in <module>\n    from dndapp import app\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 719, in Decorate\n    return func(self, *args, **kwargs)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 1928, in load_module\n    return self.FindAndLoadModule(submodule, fullname, search_path)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 719, in Decorate\n    return func(self, *args, **kwargs)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 1792, in FindAndLoadModule\n    description)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 719, in Decorate\n    return func(self, *args, **kwargs)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 1735, in LoadModuleRestricted\n    description)\n  File \"/Users/cartercharbonneau/dndapp/dndapp/__init__.py\", line 7, in <module>\n    cache = Cache(app, False)\n  File \"/Users/cartercharbonneau/dndapp/venv/lib/python2.7/site-packages/flask_cache/__init__.py\", line 64, in __init__\n    self.init_app(app)\n  File \"/Users/cartercharbonneau/dndapp/venv/lib/python2.7/site-packages/flask_cache/__init__.py\", line 98, in init_app\n    self._set_cache()\n  File \"/Users/cartercharbonneau/dndapp/venv/lib/python2.7/site-packages/flask_cache/__init__.py\", line 106, in _set_cache\n    cache_obj = import_string(import_me)\n  File \"/Users/cartercharbonneau/dndapp/venv/lib/python2.7/site-packages/werkzeug/utils.py\", line 422, in import_string\n    __import__(modname)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 719, in Decorate\n    return func(self, *args, **kwargs)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 1928, in load_module\n    return self.FindAndLoadModule(submodule, fullname, search_path)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 719, in Decorate\n    return func(self, *args, **kwargs)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 1792, in FindAndLoadModule\n    description)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 719, in Decorate\n    return func(self, *args, **kwargs)\n  File \"/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/dev_appserver_import_hook.py\", line 1735, in LoadModuleRestricted\n    description)\n  File \"/Users/cartercharbonneau/dndapp/venv/lib/python2.7/site-packages/flask_cache/backends.py\", line 1, in <module>\n    from werkzeug.contrib.cache import (NullCache, SimpleCache, MemcachedCache,\n  File \"/Users/cartercharbonneau/dndapp/venv/lib/python2.7/site-packages/flask/exthook.py\", line 86, in load_module\n    raise ImportError('No module named %s' % fullname)\nImportStringError: import_string() failed for 'flask.ext.cache.backends.gaememcached'. Possible reasons are:\n\n- missing __init__.py in a package;\n- package or module path not included in sys.path;\n- duplicated package or module name taking precedence in sys.path;\n- missing module, class, function or variable;\n\nDebugged import:\n\n- 'flask' found in '/Users/cartercharbonneau/dndapp/venv/lib/python2.7/site-packages/flask/__init__.pyc'.\n- 'flask.ext' found in '/Users/cartercharbonneau/dndapp/venv/lib/python2.7/site-packages/flask/ext/__init__.pyc'.\n- 'flask.ext.cache' found in '/Users/cartercharbonneau/dndapp/venv/lib/python2.7/site-packages/flask_cache/__init__.pyc'.\n- 'flask.ext.cache.backends' not found.\n\nOriginal exception:\n\nImportError: No module named flask.ext.cache.werkzeug\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/36", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/36/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/36/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/36", "id": 7411749, "node_id": "MDU6SXNzdWU3NDExNzQ5", "number": 36, "title": "object instances as arguments to memoize() decorated function", "user": {"login": "alanhamlett", "id": 522344, "node_id": "MDQ6VXNlcjUyMjM0NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/522344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhamlett", "html_url": "https://github.com/alanhamlett", "followers_url": "https://api.github.com/users/alanhamlett/followers", "following_url": "https://api.github.com/users/alanhamlett/following{/other_user}", "gists_url": "https://api.github.com/users/alanhamlett/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhamlett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhamlett/subscriptions", "organizations_url": "https://api.github.com/users/alanhamlett/orgs", "repos_url": "https://api.github.com/users/alanhamlett/repos", "events_url": "https://api.github.com/users/alanhamlett/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhamlett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2012-10-08T04:40:17Z", "updated_at": "2012-10-09T21:43:37Z", "closed_at": "2012-10-09T21:43:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When passing an object instance as an argument to a function decorated with memoize, the cache key is calculated from calling id() on that function. Python's id() only returns a unique id for the lifetime of that object. The lifetime of an object is 1 request when in the Flask request context.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/32", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/32/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/32/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/32", "id": 6919092, "node_id": "MDU6SXNzdWU2OTE5MDky", "number": 32, "title": "username/password options", "user": {"login": "1xch", "id": 199137, "node_id": "MDQ6VXNlcjE5OTEzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/199137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1xch", "html_url": "https://github.com/1xch", "followers_url": "https://api.github.com/users/1xch/followers", "following_url": "https://api.github.com/users/1xch/following{/other_user}", "gists_url": "https://api.github.com/users/1xch/gists{/gist_id}", "starred_url": "https://api.github.com/users/1xch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1xch/subscriptions", "organizations_url": "https://api.github.com/users/1xch/orgs", "repos_url": "https://api.github.com/users/1xch/repos", "events_url": "https://api.github.com/users/1xch/events{/privacy}", "received_events_url": "https://api.github.com/users/1xch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2012-09-17T13:38:18Z", "updated_at": "2012-12-31T08:43:11Z", "closed_at": "2012-12-31T08:43:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using a memcached server (on Heroku) and configuring username/password options WITHIN flask-cache to interface with a memcached server requiring that username/password be specified is not clear from the documentation.\n\nI'm guessing this would go in CACHE_ARGS or CACHE_OPTIONS, but again how to do this isn't clear.  I'm sure it is simple, but a guide for someone not intimately acquainted with this code base would be useful. \n\nI can try a few things, and will gladly contribute, but clearer documentation/examples/saying this is or isn't possible would be appreciated.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/29", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/29/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/29/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/29", "id": 6459981, "node_id": "MDU6SXNzdWU2NDU5OTgx", "number": 29, "title": "Version 0.7.0 broke setup file.", "user": {"login": "klen", "id": 90699, "node_id": "MDQ6VXNlcjkwNjk5", "avatar_url": "https://avatars2.githubusercontent.com/u/90699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klen", "html_url": "https://github.com/klen", "followers_url": "https://api.github.com/users/klen/followers", "following_url": "https://api.github.com/users/klen/following{/other_user}", "gists_url": "https://api.github.com/users/klen/gists{/gist_id}", "starred_url": "https://api.github.com/users/klen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klen/subscriptions", "organizations_url": "https://api.github.com/users/klen/orgs", "repos_url": "https://api.github.com/users/klen/repos", "events_url": "https://api.github.com/users/klen/events{/privacy}", "received_events_url": "https://api.github.com/users/klen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2012-08-26T16:50:57Z", "updated_at": "2012-08-29T06:45:07Z", "closed_at": "2012-08-28T23:50:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Last version of your module haves \"import **version**\" from flaskext.cache.\n\nAlso flaskext.cache haves another imports (like as: flask, werkzeug). Its realy broke installation of Flask-Cache. Because python setuptools try to read \"install_requires\" and get exception \"No module named werkzeug\".\n\nIn my case, Im have  have \"requirements.txt\" file:\n\n```\nFlask>=0.9\nFlask-SQLAlchemy>=0.16\nFlask-Cache>=0.6.0\n```\n\nAnd when I create virtualenv and try to do \"pip install -r requirements.txt\", its make exception.\n\nWould you like fix that?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/26", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/26/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/26/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/26", "id": 6317998, "node_id": "MDU6SXNzdWU2MzE3OTk4", "number": 26, "title": "Multiple caches", "user": {"login": "explorigin", "id": 697818, "node_id": "MDQ6VXNlcjY5NzgxOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/697818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/explorigin", "html_url": "https://github.com/explorigin", "followers_url": "https://api.github.com/users/explorigin/followers", "following_url": "https://api.github.com/users/explorigin/following{/other_user}", "gists_url": "https://api.github.com/users/explorigin/gists{/gist_id}", "starred_url": "https://api.github.com/users/explorigin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/explorigin/subscriptions", "organizations_url": "https://api.github.com/users/explorigin/orgs", "repos_url": "https://api.github.com/users/explorigin/repos", "events_url": "https://api.github.com/users/explorigin/events{/privacy}", "received_events_url": "https://api.github.com/users/explorigin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2012-08-20T04:17:57Z", "updated_at": "2012-09-30T23:20:23Z", "closed_at": "2012-09-30T23:20:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a wishlist item.  In my large application (currently built with other technologies, but I'm considering flask), I cache data to memory (simple), memcached and as a file.  it would be great if I could create 3 instances of cache, where each one could handle different scenarios.  But it seems like the current version can only handle one instance because it only reads config from the app.  This feels like a big limitation in an otherwise nice piece of software.\n\nThanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/25", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/25/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/25/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/25", "id": 5846175, "node_id": "MDU6SXNzdWU1ODQ2MTc1", "number": 25, "title": "PicklingError: Can't pickle <type 'function'>: attribute lookup __builtin__.function failed", "user": {"login": "guotie", "id": 42231, "node_id": "MDQ6VXNlcjQyMjMx", "avatar_url": "https://avatars0.githubusercontent.com/u/42231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guotie", "html_url": "https://github.com/guotie", "followers_url": "https://api.github.com/users/guotie/followers", "following_url": "https://api.github.com/users/guotie/following{/other_user}", "gists_url": "https://api.github.com/users/guotie/gists{/gist_id}", "starred_url": "https://api.github.com/users/guotie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guotie/subscriptions", "organizations_url": "https://api.github.com/users/guotie/orgs", "repos_url": "https://api.github.com/users/guotie/repos", "events_url": "https://api.github.com/users/guotie/events{/privacy}", "received_events_url": "https://api.github.com/users/guotie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-07-26T04:08:00Z", "updated_at": "2012-08-12T23:01:06Z", "closed_at": "2012-08-12T23:01:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "when i use simple cache on windows, memoize got following error:\n\nPicklingError: Can't pickle <type 'function'>: attribute lookup **builtin**.function failed\n\nhow to solve?\n\nthanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/24", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/24/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/24/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/24", "id": 5846021, "node_id": "MDU6SXNzdWU1ODQ2MDIx", "number": 24, "title": "can flask-cache cache a jinja macro or filter?", "user": {"login": "guotie", "id": 42231, "node_id": "MDQ6VXNlcjQyMjMx", "avatar_url": "https://avatars0.githubusercontent.com/u/42231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guotie", "html_url": "https://github.com/guotie", "followers_url": "https://api.github.com/users/guotie/followers", "following_url": "https://api.github.com/users/guotie/following{/other_user}", "gists_url": "https://api.github.com/users/guotie/gists{/gist_id}", "starred_url": "https://api.github.com/users/guotie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guotie/subscriptions", "organizations_url": "https://api.github.com/users/guotie/orgs", "repos_url": "https://api.github.com/users/guotie/repos", "events_url": "https://api.github.com/users/guotie/events{/privacy}", "received_events_url": "https://api.github.com/users/guotie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-07-26T03:50:43Z", "updated_at": "2012-08-12T23:37:11Z", "closed_at": "2012-08-12T23:37:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "As the title say.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/23", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/23/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/23/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/23", "id": 5629799, "node_id": "MDU6SXNzdWU1NjI5Nzk5", "number": 23, "title": "NullCache for TESTING", "user": {"login": "klen", "id": 90699, "node_id": "MDQ6VXNlcjkwNjk5", "avatar_url": "https://avatars2.githubusercontent.com/u/90699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klen", "html_url": "https://github.com/klen", "followers_url": "https://api.github.com/users/klen/followers", "following_url": "https://api.github.com/users/klen/following{/other_user}", "gists_url": "https://api.github.com/users/klen/gists{/gist_id}", "starred_url": "https://api.github.com/users/klen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klen/subscriptions", "organizations_url": "https://api.github.com/users/klen/orgs", "repos_url": "https://api.github.com/users/klen/repos", "events_url": "https://api.github.com/users/klen/events{/privacy}", "received_events_url": "https://api.github.com/users/klen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-07-15T21:30:44Z", "updated_at": "2014-11-11T23:29:00Z", "closed_at": "2012-08-12T23:30:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why are you forced \"cache.cache = NullCache()\" for \"TESTING=True\"? I want to use \"SimpleCache\" for my test by example and etc.\n\nIt is always possible to setup CACHE_TYPE in test settings for your app (if you can set TESTING=True, you also can set CACHE_TYPE='null' if needed). But now it is useless with flask-cache for testing.\n\nI have to set \"TESTING=False\" for my tests with your extension and its ugly by my opinion.\n\nI propose to remove this condition.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/22", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/22/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/22/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/22", "id": 5055601, "node_id": "MDU6SXNzdWU1MDU1NjAx", "number": 22, "title": "Using this in a blueprint", "user": {"login": "1xch", "id": 199137, "node_id": "MDQ6VXNlcjE5OTEzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/199137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1xch", "html_url": "https://github.com/1xch", "followers_url": "https://api.github.com/users/1xch/followers", "following_url": "https://api.github.com/users/1xch/following{/other_user}", "gists_url": "https://api.github.com/users/1xch/gists{/gist_id}", "starred_url": "https://api.github.com/users/1xch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1xch/subscriptions", "organizations_url": "https://api.github.com/users/1xch/orgs", "repos_url": "https://api.github.com/users/1xch/repos", "events_url": "https://api.github.com/users/1xch/events{/privacy}", "received_events_url": "https://api.github.com/users/1xch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2012-06-13T19:49:09Z", "updated_at": "2012-08-12T23:28:14Z", "closed_at": "2012-08-12T23:28:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I could not see any way to use this in a blueprint. I have a blueprint, I want to specify a certain route gets cached as normally would be specified in an my application. However this gets circular quick for me, and nothing I've done works. \n\nhttp://stackoverflow.com/questions/11020170/using-flask-extensions-in-flask-blueprints\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/21", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/21/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/21/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/21", "id": 4992418, "node_id": "MDU6SXNzdWU0OTkyNDE4", "number": 21, "title": "import jinja2ext from flask.ext or flask_jinja2ext instead of flaskext", "user": {"login": "untitaker", "id": 837573, "node_id": "MDQ6VXNlcjgzNzU3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/untitaker", "html_url": "https://github.com/untitaker", "followers_url": "https://api.github.com/users/untitaker/followers", "following_url": "https://api.github.com/users/untitaker/following{/other_user}", "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions", "organizations_url": "https://api.github.com/users/untitaker/orgs", "repos_url": "https://api.github.com/users/untitaker/repos", "events_url": "https://api.github.com/users/untitaker/events{/privacy}", "received_events_url": "https://api.github.com/users/untitaker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-06-10T16:43:36Z", "updated_at": "2012-08-29T16:29:53Z", "closed_at": "2012-08-29T16:29:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am not sure if i am right, since i am pretty new to flask, anyway, here goes...\n\n```\n    File \"[...]/flask_cache/__init__.py\", line 23, in [module]\n    from flaskext.cache.jinja2ext import CacheExtension\n    ImportError: No module named flaskext.cache.jinja2ext\n```\n\nlooking into the sourcecode of flask itself, i found a notice saying that the flask.ext module provides a abstraction layer for loading flask extensions. It tries first flask_cache and at last flaskext.cache.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/20", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/20/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/20/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/20", "id": 4788291, "node_id": "MDU6SXNzdWU0Nzg4Mjkx", "number": 20, "title": "CacheType remains 'null'", "user": {"login": "DarkRedman", "id": 367844, "node_id": "MDQ6VXNlcjM2Nzg0NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/367844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarkRedman", "html_url": "https://github.com/DarkRedman", "followers_url": "https://api.github.com/users/DarkRedman/followers", "following_url": "https://api.github.com/users/DarkRedman/following{/other_user}", "gists_url": "https://api.github.com/users/DarkRedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarkRedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarkRedman/subscriptions", "organizations_url": "https://api.github.com/users/DarkRedman/orgs", "repos_url": "https://api.github.com/users/DarkRedman/repos", "events_url": "https://api.github.com/users/DarkRedman/events{/privacy}", "received_events_url": "https://api.github.com/users/DarkRedman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2012-05-29T03:16:42Z", "updated_at": "2012-08-12T23:24:48Z", "closed_at": "2012-08-12T23:24:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\n\nIn my app config I checked Testing = False and CACHE_TYPE = 'simple' (also tested with 'filesystem')\n\nbut it doesn't same to cache the cached functions\n\nand when I do repr(cache.cache) I got <werkzeurg.contrib.cache.NullCache object at 0xb6a2cb8c>\n\nand in case of CACHE_TYPE = 'filesystem' the directory is not filled with any file along the functions (and results) are cache.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/19", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/19/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/19/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/19", "id": 3866700, "node_id": "MDU6SXNzdWUzODY2NzAw", "number": 19, "title": "Add a method to force a cache refresh", "user": {"login": "LeonB", "id": 3979, "node_id": "MDQ6VXNlcjM5Nzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeonB", "html_url": "https://github.com/LeonB", "followers_url": "https://api.github.com/users/LeonB/followers", "following_url": "https://api.github.com/users/LeonB/following{/other_user}", "gists_url": "https://api.github.com/users/LeonB/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeonB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeonB/subscriptions", "organizations_url": "https://api.github.com/users/LeonB/orgs", "repos_url": "https://api.github.com/users/LeonB/repos", "events_url": "https://api.github.com/users/LeonB/events{/privacy}", "received_events_url": "https://api.github.com/users/LeonB/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-03-28T22:16:06Z", "updated_at": "2012-09-30T23:20:43Z", "closed_at": "2012-09-30T23:20:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example, if you have very expensive methods I want to refresh the cache for them with a cronjob or maybe somewhere else in my code. I want to pre populate the cache to avoid a \"thundering herd\" or \"cache miss storm\".\n\nIt would be nice to have a convenient method to pre populating the cache.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/16", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/16/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/16/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/16", "id": 3089810, "node_id": "MDU6SXNzdWUzMDg5ODEw", "number": 16, "title": "Memoized?", "user": {"login": "23doors", "id": 1051101, "node_id": "MDQ6VXNlcjEwNTExMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1051101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/23doors", "html_url": "https://github.com/23doors", "followers_url": "https://api.github.com/users/23doors/followers", "following_url": "https://api.github.com/users/23doors/following{/other_user}", "gists_url": "https://api.github.com/users/23doors/gists{/gist_id}", "starred_url": "https://api.github.com/users/23doors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/23doors/subscriptions", "organizations_url": "https://api.github.com/users/23doors/orgs", "repos_url": "https://api.github.com/users/23doors/repos", "events_url": "https://api.github.com/users/23doors/events{/privacy}", "received_events_url": "https://api.github.com/users/23doors/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2012-02-03T22:28:49Z", "updated_at": "2012-08-12T23:16:25Z", "closed_at": "2012-08-12T23:16:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am a little worried with how memoized seems to work here. Say, we're using more persistent cache than simple thread local storage.\n\nSpecifically if we use the example here:\n        @cache.memoize(3600)\n        def has_membership(role):\n                return self.groups.filter_by(role=role).count() >= 1\n\nAnd call has_membership('something') - it is cached.\n\nIn following request we call: cache.delete_memoized('has_membership') and what it should do is delete all memoized versions of this function. Well, it won't. \n\nCorrect me if I am wrong but you're keeping track of memoized functions by simply storing them in self field and in following requests - it is empty on init. This is not scalable at all and will only work in simplest of cases. Bad design decision, that's for sure.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/9", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/9/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/9/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/9", "id": 1426372, "node_id": "MDU6SXNzdWUxNDI2Mzcy", "number": 9, "title": "Support cas() function in gae memcache", "user": {"login": "klinkin", "id": 461927, "node_id": "MDQ6VXNlcjQ2MTkyNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/461927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klinkin", "html_url": "https://github.com/klinkin", "followers_url": "https://api.github.com/users/klinkin/followers", "following_url": "https://api.github.com/users/klinkin/following{/other_user}", "gists_url": "https://api.github.com/users/klinkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/klinkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klinkin/subscriptions", "organizations_url": "https://api.github.com/users/klinkin/orgs", "repos_url": "https://api.github.com/users/klinkin/repos", "events_url": "https://api.github.com/users/klinkin/events{/privacy}", "received_events_url": "https://api.github.com/users/klinkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-08-17T21:06:22Z", "updated_at": "2011-09-10T05:38:17Z", "closed_at": "2011-09-10T05:38:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Add support cas() function in gae memcache\n\nhttp://code.google.com/appengine/docs/python/memcache/clientclass.html\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/5", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/5/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/5/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/5", "id": 881844, "node_id": "MDU6SXNzdWU4ODE4NDQ=", "number": 5, "title": "Invalid key in memoize", "user": {"login": "juhamust", "id": 781002, "node_id": "MDQ6VXNlcjc4MTAwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/781002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juhamust", "html_url": "https://github.com/juhamust", "followers_url": "https://api.github.com/users/juhamust/followers", "following_url": "https://api.github.com/users/juhamust/following{/other_user}", "gists_url": "https://api.github.com/users/juhamust/gists{/gist_id}", "starred_url": "https://api.github.com/users/juhamust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juhamust/subscriptions", "organizations_url": "https://api.github.com/users/juhamust/orgs", "repos_url": "https://api.github.com/users/juhamust/repos", "events_url": "https://api.github.com/users/juhamust/events{/privacy}", "received_events_url": "https://api.github.com/users/juhamust/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2011-05-11T08:32:20Z", "updated_at": "2011-06-03T05:33:04Z", "closed_at": "2011-06-03T05:33:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using memoize (at least with GAEMemcached) gives following error:\n\n```\nFile \"/home/user/project/x/src/packages/werkzeug/contrib/cache.py\", line 313, in get\nif _test_memcached_key(key):\nTypeError: expected string or buffer\n```\n\nThe root cause seems to be the tuple key type, while it expects to get a string.\nI patched it locally as follows and it seems work ok:\n\n``` python\n        def memoize(f):\n            @wraps(f)\n            def decorated_function(*args, **kwargs):\n                cache_key = ('memoize', f.__name__, id(f), args, str(kwargs))\n\n                # PATCH: Create a string presentation of the key\n                cache_key = '%s%s%s%s' % (cache_key[0], cache_key[1], cache_key[3], cache_key[4])\n```\n\nUsed versions:\n- Werkzeug: 0.6.2\n- Flask-Cache: 0.3.2\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/thadeusb/flask-cache/issues/1", "repository_url": "https://api.github.com/repos/thadeusb/flask-cache", "labels_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/1/comments", "events_url": "https://api.github.com/repos/thadeusb/flask-cache/issues/1/events", "html_url": "https://github.com/thadeusb/flask-cache/issues/1", "id": 298966, "node_id": "MDU6SXNzdWUyOTg5NjY=", "number": 1, "title": "documentation issues", "user": {"login": "ThomasWaldmann", "id": 356103, "node_id": "MDQ6VXNlcjM1NjEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/356103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThomasWaldmann", "html_url": "https://github.com/ThomasWaldmann", "followers_url": "https://api.github.com/users/ThomasWaldmann/followers", "following_url": "https://api.github.com/users/ThomasWaldmann/following{/other_user}", "gists_url": "https://api.github.com/users/ThomasWaldmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThomasWaldmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThomasWaldmann/subscriptions", "organizations_url": "https://api.github.com/users/ThomasWaldmann/orgs", "repos_url": "https://api.github.com/users/ThomasWaldmann/repos", "events_url": "https://api.github.com/users/ThomasWaldmann/events{/privacy}", "received_events_url": "https://api.github.com/users/ThomasWaldmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2010-09-02T07:55:59Z", "updated_at": "2010-09-02T08:21:50Z", "closed_at": "2010-09-02T08:21:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "http://packages.python.org/Flask-Cache/\n\n\"The following configuration values exist for Flask-SQLAlchemy:\" (Flask-Cache*)\n\nthe \"timeout\" docs don't tell the unit of time (seconds?)\n", "performed_via_github_app": null, "score": 1.0}]}