{"total_count": 743, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1379", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1379/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1379/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1379/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1379", "id": 674955769, "node_id": "MDU6SXNzdWU2NzQ5NTU3Njk=", "number": 1379, "title": "Wrong number of arguments for 'set' command version 3.5.3", "user": {"login": "alexanderbakhmach", "id": 15934622, "node_id": "MDQ6VXNlcjE1OTM0NjIy", "avatar_url": "https://avatars1.githubusercontent.com/u/15934622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexanderbakhmach", "html_url": "https://github.com/alexanderbakhmach", "followers_url": "https://api.github.com/users/alexanderbakhmach/followers", "following_url": "https://api.github.com/users/alexanderbakhmach/following{/other_user}", "gists_url": "https://api.github.com/users/alexanderbakhmach/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexanderbakhmach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexanderbakhmach/subscriptions", "organizations_url": "https://api.github.com/users/alexanderbakhmach/orgs", "repos_url": "https://api.github.com/users/alexanderbakhmach/repos", "events_url": "https://api.github.com/users/alexanderbakhmach/events{/privacy}", "received_events_url": "https://api.github.com/users/alexanderbakhmach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-07T11:34:22Z", "updated_at": "2020-08-10T16:22:44Z", "closed_at": "2020-08-10T16:22:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**:  redis-py version -  3.5.3.  Redis version - 2.4.5\r\n\r\n**Platform**: Windows 10\r\n\r\n**Description**: Receive the error:\r\n```\r\n...\r\n redis.exceptions.ResponseError: wrong number of arguments for 'set' command\r\n...\r\n```\r\n When try to use redis lock the next way. \r\n```\r\n>>>import redis\r\n>>>r = redis.Redis()\r\n>>>\r\n>>>with r.lock('my-lock-key', blocking_timeout=5) as lock:\r\n>>>    pass\r\n>>>\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1377", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1377/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1377/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1377/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1377", "id": 670976812, "node_id": "MDU6SXNzdWU2NzA5NzY4MTI=", "number": 1377, "title": "saving subscriptions across pubsub connections", "user": {"login": "dcguim", "id": 4180822, "node_id": "MDQ6VXNlcjQxODA4MjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4180822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcguim", "html_url": "https://github.com/dcguim", "followers_url": "https://api.github.com/users/dcguim/followers", "following_url": "https://api.github.com/users/dcguim/following{/other_user}", "gists_url": "https://api.github.com/users/dcguim/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcguim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcguim/subscriptions", "organizations_url": "https://api.github.com/users/dcguim/orgs", "repos_url": "https://api.github.com/users/dcguim/repos", "events_url": "https://api.github.com/users/dcguim/events{/privacy}", "received_events_url": "https://api.github.com/users/dcguim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-01T15:50:03Z", "updated_at": "2020-08-02T16:01:55Z", "closed_at": "2020-08-02T16:01:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using python 3.8.2, Redis server version=6.0.5 and redis-py 3.5.2.\r\nI am trying to persist subscriptions even after the pubsub object was closed. I am afraid it is not very clear to me, the scope of the PubSub objects, in one hand it shouldn't be shared among several threads, on the other I can't persist changes to it. \r\n```python\r\n>>> import redis\r\n>>> r = redis.Redis(host='localhost', port=6379,db =0)\r\n>>> ps =r.pubsub()\r\n>>> ps.subscribe('ch1')\r\n>>> r.pubsub_numsub('ch1')\r\n[(b'ch1', 1)]\r\n>>> r.bgsave()\r\nTrue\r\n>>> r.save()\r\n>>> ps.close()\r\n>>> ps = pubsub_numsub()\r\n>>> r.pubsub_numsub('ch1')\r\n[(b'ch1', 0)]\r\n```\r\nCan published messages also be persisted/loaded?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1370", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1370/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1370/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1370/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1370", "id": 663153803, "node_id": "MDU6SXNzdWU2NjMxNTM4MDM=", "number": 1370, "title": "When the return value from the execute command is a string, library is complaining for an int value", "user": {"login": "RohanMajumdar69", "id": 21355169, "node_id": "MDQ6VXNlcjIxMzU1MTY5", "avatar_url": "https://avatars3.githubusercontent.com/u/21355169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RohanMajumdar69", "html_url": "https://github.com/RohanMajumdar69", "followers_url": "https://api.github.com/users/RohanMajumdar69/followers", "following_url": "https://api.github.com/users/RohanMajumdar69/following{/other_user}", "gists_url": "https://api.github.com/users/RohanMajumdar69/gists{/gist_id}", "starred_url": "https://api.github.com/users/RohanMajumdar69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RohanMajumdar69/subscriptions", "organizations_url": "https://api.github.com/users/RohanMajumdar69/orgs", "repos_url": "https://api.github.com/users/RohanMajumdar69/repos", "events_url": "https://api.github.com/users/RohanMajumdar69/events{/privacy}", "received_events_url": "https://api.github.com/users/RohanMajumdar69/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-21T16:35:20Z", "updated_at": "2020-07-22T17:07:18Z", "closed_at": "2020-07-22T17:06:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: redis-py version 3.5.3 and redis 5.0.8\r\n\r\nPython 3.6 on  Ubuntu 18.04\r\n\r\nr.execute_command(\"REPLICAOF\", str(address), port)\r\n  File \"/home/amni-user2/Documents/Project/venv/lib/python3.6/site-packages/redis/client.py\", line 901, in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\n  File \"/home/amni-user2/Documents/Project/venv/lib/python3.6/site-packages/redis/client.py\", line 915, in parse_response\r\n    response = connection.read_response()\r\n  File \"/home/amni-user2/Documents/Project/venv/lib/python3.6/site-packages/redis/connection.py\", line 756, in read_response\r\n    raise response\r\nredis.exceptions.ResponseError: value is not an integer or out of range\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1368", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1368/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1368/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1368/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1368", "id": 661055634, "node_id": "MDU6SXNzdWU2NjEwNTU2MzQ=", "number": 1368, "title": "redis.exceptions.ResponseError: unknown command 'ZPOPMAX'", "user": {"login": "Pradipta234", "id": 39899869, "node_id": "MDQ6VXNlcjM5ODk5ODY5", "avatar_url": "https://avatars2.githubusercontent.com/u/39899869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pradipta234", "html_url": "https://github.com/Pradipta234", "followers_url": "https://api.github.com/users/Pradipta234/followers", "following_url": "https://api.github.com/users/Pradipta234/following{/other_user}", "gists_url": "https://api.github.com/users/Pradipta234/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pradipta234/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pradipta234/subscriptions", "organizations_url": "https://api.github.com/users/Pradipta234/orgs", "repos_url": "https://api.github.com/users/Pradipta234/repos", "events_url": "https://api.github.com/users/Pradipta234/events{/privacy}", "received_events_url": "https://api.github.com/users/Pradipta234/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-19T20:37:53Z", "updated_at": "2020-07-19T22:07:01Z", "closed_at": "2020-07-19T22:06:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: redis-3.5.3\r\n\r\n**Platform**: Python 3.7.3 (default, Apr  3 2019, 19:16:38) on Ubuntu16.04\r\n\r\n**Description**:\r\n\r\nThis is the code snippet\r\n\r\n>>> import redis\r\n>>> pool = redis.ConnectionPool(host='localhost', port=6379, db=0)\r\n>>> r = redis.Redis(connection_pool=pool)\r\n>>> r.zincrby('queue',2,'hello')\r\n2.0\r\n>>> r.zincrby('queue',2,'hello')\r\n4.0\r\n>>> r.zincrby('queue',1,'he')\r\n1.0\r\n>>> r.zpopmax('queue')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/pradipta/.local/lib/python3.7/site-packages/redis/client.py\", line 2729, in zpopmax\r\n    return self.execute_command('ZPOPMAX', name, *args, **options)\r\n  File \"/home/pradipta/.local/lib/python3.7/site-packages/redis/client.py\", line 901, in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\n  File \"/home/pradipta/.local/lib/python3.7/site-packages/redis/client.py\", line 915, in parse_response\r\n    response = connection.read_response()\r\n  File \"/home/pradipta/.local/lib/python3.7/site-packages/redis/connection.py\", line 756, in read_response\r\n    raise response\r\nredis.exceptions.ResponseError: unknown command 'ZPOPMAX'\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1366", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1366/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1366/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1366/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1366", "id": 655966621, "node_id": "MDU6SXNzdWU2NTU5NjY2MjE=", "number": 1366, "title": "How to close idle Redis SSE connections?", "user": {"login": "Atin007", "id": 4726820, "node_id": "MDQ6VXNlcjQ3MjY4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4726820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Atin007", "html_url": "https://github.com/Atin007", "followers_url": "https://api.github.com/users/Atin007/followers", "following_url": "https://api.github.com/users/Atin007/following{/other_user}", "gists_url": "https://api.github.com/users/Atin007/gists{/gist_id}", "starred_url": "https://api.github.com/users/Atin007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Atin007/subscriptions", "organizations_url": "https://api.github.com/users/Atin007/orgs", "repos_url": "https://api.github.com/users/Atin007/repos", "events_url": "https://api.github.com/users/Atin007/events{/privacy}", "received_events_url": "https://api.github.com/users/Atin007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-13T16:03:32Z", "updated_at": "2020-07-22T23:49:16Z", "closed_at": "2020-07-22T23:49:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "In our web application, we are using redis-py to connect with Google cloud Redis (MemoryStore). Also, we are using flask_sse. Although we close the SSE connections from the client-side, the Redis doesn't close these connections. Is there a way we can achieve this in redis-py in our backend. Thanks!\r\n\r\n**Version**: redis==2.10.6\r\n\r\n**Platform**: Python 2.7 Flask app & Google cloud MemoryStore (Redis)\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1363", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1363/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1363/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1363/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1363", "id": 652734389, "node_id": "MDU6SXNzdWU2NTI3MzQzODk=", "number": 1363, "title": "callable handler not returning value from pubsub", "user": {"login": "mahdi-b", "id": 3051521, "node_id": "MDQ6VXNlcjMwNTE1MjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3051521?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdi-b", "html_url": "https://github.com/mahdi-b", "followers_url": "https://api.github.com/users/mahdi-b/followers", "following_url": "https://api.github.com/users/mahdi-b/following{/other_user}", "gists_url": "https://api.github.com/users/mahdi-b/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdi-b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdi-b/subscriptions", "organizations_url": "https://api.github.com/users/mahdi-b/orgs", "repos_url": "https://api.github.com/users/mahdi-b/repos", "events_url": "https://api.github.com/users/mahdi-b/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdi-b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-07T23:23:20Z", "updated_at": "2020-07-13T00:14:44Z", "closed_at": "2020-07-13T00:14:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is the fact that pattern or channel subscription handler does not return values a feature or a bug. In the example below, which is slightly modified from the README page, \"received a message\" is indeed printed, but the value True is not returned.\r\n\r\n```\r\n>>> def my_handler(message):\r\n    print(\"received a message\")\r\n    return True\r\n>>> p.subscribe(**{'my-channel': my_handler})\r\n```\r\nIf this is a conscious design decision, can you please explain the logic behind this decision and how could one go about returning values from a handler?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1361", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1361/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1361/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1361/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1361", "id": 650029596, "node_id": "MDU6SXNzdWU2NTAwMjk1OTY=", "number": 1361, "title": "Random Connection refused issue", "user": {"login": "mangleddata", "id": 57873718, "node_id": "MDQ6VXNlcjU3ODczNzE4", "avatar_url": "https://avatars3.githubusercontent.com/u/57873718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mangleddata", "html_url": "https://github.com/mangleddata", "followers_url": "https://api.github.com/users/mangleddata/followers", "following_url": "https://api.github.com/users/mangleddata/following{/other_user}", "gists_url": "https://api.github.com/users/mangleddata/gists{/gist_id}", "starred_url": "https://api.github.com/users/mangleddata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mangleddata/subscriptions", "organizations_url": "https://api.github.com/users/mangleddata/orgs", "repos_url": "https://api.github.com/users/mangleddata/repos", "events_url": "https://api.github.com/users/mangleddata/events{/privacy}", "received_events_url": "https://api.github.com/users/mangleddata/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-02T15:38:02Z", "updated_at": "2020-07-02T17:46:43Z", "closed_at": "2020-07-02T17:46:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: redis_version:4.0.9,  redis-py __version__ = '3.5.3'\r\n**Platform**: What platform / version? (python 3.6.6, Ubuntu 18.04.3 LTS, Amazon EC2)\r\n\r\n**Description**: I am using redis-py to connect to a local redis. There are many different threads and independent process that connects to redis (the number of clients should still be small < 10). At random points, I keep getting connection refused error.\r\n\"Error 111 connecting to 127.0.0.1:6379. Connection refused.\"\r\nThis is not reproducible consistently. Can you please offer any pointers on how to rootcause this ? I've tried many things (including locking before get/put) - but this random error pops up during put and goes away.  I use a singleton connection pool and have enough headroom for CPU/memory etc. Some of the connection stats look like below and nothing stands out from what I could see.\r\n\r\n# Stats\r\ntotal_connections_received:6\r\ntotal_commands_processed:5380\r\ninstantaneous_ops_per_sec:59\r\ntotal_net_input_bytes:374586707\r\ntotal_net_output_bytes:139631996\r\ninstantaneous_input_kbps:5111.95\r\ninstantaneous_output_kbps:6.49\r\nrejected_connections:0\r\nsync_full:0\r\nsync_partial_ok:0\r\nsync_partial_err:0\r\nexpired_keys:0\r\nexpired_stale_perc:0.00\r\nexpired_time_cap_reached_count:0\r\nevicted_keys:0\r\nkeyspace_hits:90\r\nkeyspace_misses:39\r\npubsub_channels:0\r\npubsub_patterns:0\r\nlatest_fork_usec:0\r\nmigrate_cached_sockets:0\r\nslave_expires_tracked_keys:0\r\nactive_defrag_hits:0\r\nactive_defrag_misses:0\r\nactive_defrag_key_hits:0\r\nactive_defrag_key_misses:0\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1356", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1356/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1356/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1356/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1356", "id": 644950391, "node_id": "MDU6SXNzdWU2NDQ5NTAzOTE=", "number": 1356, "title": "How to test PubSub for multiple messages over a single function?", "user": {"login": "Andrew-Chen-Wang", "id": 60190294, "node_id": "MDQ6VXNlcjYwMTkwMjk0", "avatar_url": "https://avatars0.githubusercontent.com/u/60190294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andrew-Chen-Wang", "html_url": "https://github.com/Andrew-Chen-Wang", "followers_url": "https://api.github.com/users/Andrew-Chen-Wang/followers", "following_url": "https://api.github.com/users/Andrew-Chen-Wang/following{/other_user}", "gists_url": "https://api.github.com/users/Andrew-Chen-Wang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andrew-Chen-Wang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andrew-Chen-Wang/subscriptions", "organizations_url": "https://api.github.com/users/Andrew-Chen-Wang/orgs", "repos_url": "https://api.github.com/users/Andrew-Chen-Wang/repos", "events_url": "https://api.github.com/users/Andrew-Chen-Wang/events{/privacy}", "received_events_url": "https://api.github.com/users/Andrew-Chen-Wang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-24T20:47:40Z", "updated_at": "2020-06-24T20:57:16Z", "closed_at": "2020-06-24T20:56:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: Latest\r\n\r\n**Platform**: Python 3.7 on all plats I guess.\r\n\r\n**Description**: \r\n\r\nLooking to test my PubSub in Django. A single function (a view) executes several publish commands. I took a look at test_pubsub.py (and I may have missed the solution), but I'm not entirely sure how I'd get all the messages executed. The `wait_get_message` seems to only be returning a single string. Is there maybe some method of collection of messages over a period of time for my pytest cases? Thank you!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1355", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1355/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1355/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1355/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1355", "id": 642628359, "node_id": "MDU6SXNzdWU2NDI2MjgzNTk=", "number": 1355, "title": "Semaphore Implementation", "user": {"login": "cemremengu", "id": 1297759, "node_id": "MDQ6VXNlcjEyOTc3NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1297759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cemremengu", "html_url": "https://github.com/cemremengu", "followers_url": "https://api.github.com/users/cemremengu/followers", "following_url": "https://api.github.com/users/cemremengu/following{/other_user}", "gists_url": "https://api.github.com/users/cemremengu/gists{/gist_id}", "starred_url": "https://api.github.com/users/cemremengu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cemremengu/subscriptions", "organizations_url": "https://api.github.com/users/cemremengu/orgs", "repos_url": "https://api.github.com/users/cemremengu/repos", "events_url": "https://api.github.com/users/cemremengu/events{/privacy}", "received_events_url": "https://api.github.com/users/cemremengu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-21T19:44:08Z", "updated_at": "2020-07-23T07:19:55Z", "closed_at": "2020-07-23T07:19:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a[ (counting) semaphore ](https://redislabs.com/ebook/part-2-core-concepts/chapter-6-application-components-in-redis/6-3-counting-semaphores/) implementation provided? If not, would you consider a PR?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1353", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1353/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1353/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1353/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1353", "id": 642460952, "node_id": "MDU6SXNzdWU2NDI0NjA5NTI=", "number": 1353, "title": "Support for new LPOS command", "user": {"login": "aparcar", "id": 16000931, "node_id": "MDQ6VXNlcjE2MDAwOTMx", "avatar_url": "https://avatars1.githubusercontent.com/u/16000931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aparcar", "html_url": "https://github.com/aparcar", "followers_url": "https://api.github.com/users/aparcar/followers", "following_url": "https://api.github.com/users/aparcar/following{/other_user}", "gists_url": "https://api.github.com/users/aparcar/gists{/gist_id}", "starred_url": "https://api.github.com/users/aparcar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aparcar/subscriptions", "organizations_url": "https://api.github.com/users/aparcar/orgs", "repos_url": "https://api.github.com/users/aparcar/repos", "events_url": "https://api.github.com/users/aparcar/events{/privacy}", "received_events_url": "https://api.github.com/users/aparcar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-20T23:06:49Z", "updated_at": "2020-07-22T22:09:13Z", "closed_at": "2020-07-22T22:09:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Redis 6.0.6 will support a new command called [LPOS](https://redis.io/commands/lpos)\r\n\r\n> The command returns the index of matching elements inside a Redis list. By default, when no options are given, it will scan the list from head to tail, looking for the first match of \"element\". If the element is found, its index (the zero-based position in the list) is returned. Otherwise, if no match is found, NULL is returned.\r\n\r\n**Version**: redis 6.0.6\r\n\r\n**Platform**: all\r\n\r\n**Description**: This is no bug report but a notification of the new command.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1349", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1349/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1349/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1349/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1349", "id": 627563055, "node_id": "MDU6SXNzdWU2Mjc1NjMwNTU=", "number": 1349, "title": "monitor command escape cannot distinguish \\x92 and \\\\x92", "user": {"login": "binux", "id": 646451, "node_id": "MDQ6VXNlcjY0NjQ1MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/646451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/binux", "html_url": "https://github.com/binux", "followers_url": "https://api.github.com/users/binux/followers", "following_url": "https://api.github.com/users/binux/following{/other_user}", "gists_url": "https://api.github.com/users/binux/gists{/gist_id}", "starred_url": "https://api.github.com/users/binux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/binux/subscriptions", "organizations_url": "https://api.github.com/users/binux/orgs", "repos_url": "https://api.github.com/users/binux/repos", "events_url": "https://api.github.com/users/binux/events{/privacy}", "received_events_url": "https://api.github.com/users/binux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-29T21:47:06Z", "updated_at": "2020-06-08T20:27:00Z", "closed_at": "2020-06-08T20:25:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: >3.5.2 (current master https://github.com/andymccurdy/redis-py/tree/7973bd9)\r\n\r\n**Platform**: Python 3.7.2 OSX\r\n\r\n**Description**: \r\n\r\nFor test case:\r\n\r\nhttps://github.com/andymccurdy/redis-py/blob/9c8be70e12c501dd0682232e9a7b686ac5e70ec3/tests/test_monitor.py#L30\r\n\r\n`b'foo\\\\x92'` is producing the same `response['command']` as `b'foo\\x92'`\r\n\r\n```\r\n    def test_command_with_binary_data(self, r):\r\n        with r.monitor() as m:\r\n            byte_string = b'foo\\x92 \\\\x92'\r\n            r.get(byte_string)\r\n            response = wait_for_command(r, m, 'GET foo\\\\x92 \\\\x92')\r\n            assert response['command'] == 'GET foo\\\\x92 \\\\x92'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1345", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1345/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1345/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1345/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1345", "id": 619095883, "node_id": "MDU6SXNzdWU2MTkwOTU4ODM=", "number": 1345, "title": "AttributeError: 'NoneType' object has no attribute 'close'", "user": {"login": "rolette", "id": 19616074, "node_id": "MDQ6VXNlcjE5NjE2MDc0", "avatar_url": "https://avatars1.githubusercontent.com/u/19616074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rolette", "html_url": "https://github.com/rolette", "followers_url": "https://api.github.com/users/rolette/followers", "following_url": "https://api.github.com/users/rolette/following{/other_user}", "gists_url": "https://api.github.com/users/rolette/gists{/gist_id}", "starred_url": "https://api.github.com/users/rolette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rolette/subscriptions", "organizations_url": "https://api.github.com/users/rolette/orgs", "repos_url": "https://api.github.com/users/rolette/repos", "events_url": "https://api.github.com/users/rolette/events{/privacy}", "received_events_url": "https://api.github.com/users/rolette/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-05-15T16:27:25Z", "updated_at": "2020-06-01T21:30:47Z", "closed_at": "2020-06-01T20:30:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Unfortunately, the fix for #732 doesn't correctly handle master node failover for multi-threaded code.\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  # snip\r\n  File \"/usr/local/lib/python3.5/site-packages/redis/client.py\", line 1870, in blpop\r\n    return self.execute_command('BLPOP', *keys)\r\n  File \"/usr/local/lib/python3.5/site-packages/redis/client.py\", line 884, in execute_command\r\n    conn.send_command(*args)\r\n  File \"/usr/local/lib/python3.5/site-packages/redis/connection.py\", line 721, in send_command\r\n    check_health=kwargs.get('check_health', True))\r\n  File \"/usr/local/lib/python3.5/site-packages/redis/connection.py\", line 692, in send_packed_command\r\n    self.connect()\r\n  File \"/usr/local/lib/python3.5/site-packages/redis/sentinel.py\", line 44, in connect\r\n    self.connect_to(self.connection_pool.get_master_address())\r\n  File \"/usr/local/lib/python3.5/site-packages/redis/sentinel.py\", line 107, in get_master_address\r\n    self.disconnect()\r\n  File \"/usr/local/lib/python3.5/site-packages/redis/connection.py\", line 1241, in disconnect\r\n    connection.disconnect()\r\n  File \"/usr/local/lib/python3.5/site-packages/redis/connection.py\", line 669, in disconnect\r\n    self._sock.close()\r\nAttributeError: 'NoneType' object has no attribute 'close'\r\n```\r\nScenario is this:\r\n- multi-threaded process running, using a `SentinelConnectionPool` to get their separate connections to the Redis master\r\n- Redis master goes down, Sentinel does its job and elects a new master\r\n- Subsequent redis-py call ends up calling `SentinelConnectionPool.get_master_address()`\r\n- `get_master_address()` notices that there is a new master and calls `self.disconnect()` to flush the pool\r\n- `ConnectionPool.disconnect()` calls `disconnect()` on each of the connections in the pool.\r\n- `Connection.disconnect()` sees a matching PID and calls `shutdown()` on the socket, then sets it back to `None`\r\n- \"Fun\" ensues...\r\n\r\nThere is thread-locking to protect the pool's management of its members, but `ConnectionPool.disconnect()` is ripping sockets out from other threads in the middle of other operations.\r\n\r\nThe actual stack trace and error you'll get will vary depending on timing.\r\n \r\nTo fix it in my product code, I'm re-integrating the deferred disconnect using a generation id from PR #784.\r\n\r\n**Version**: redis-py v3.4.1, redis/sentinel v3.2.13\r\n**Platform**: Python 3.5.2 on Linux", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1343", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1343/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1343/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1343/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1343", "id": 617857343, "node_id": "MDU6SXNzdWU2MTc4NTczNDM=", "number": 1343, "title": "Cannot unsubscribe", "user": {"login": "PhantomStyle", "id": 29716553, "node_id": "MDQ6VXNlcjI5NzE2NTUz", "avatar_url": "https://avatars3.githubusercontent.com/u/29716553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PhantomStyle", "html_url": "https://github.com/PhantomStyle", "followers_url": "https://api.github.com/users/PhantomStyle/followers", "following_url": "https://api.github.com/users/PhantomStyle/following{/other_user}", "gists_url": "https://api.github.com/users/PhantomStyle/gists{/gist_id}", "starred_url": "https://api.github.com/users/PhantomStyle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PhantomStyle/subscriptions", "organizations_url": "https://api.github.com/users/PhantomStyle/orgs", "repos_url": "https://api.github.com/users/PhantomStyle/repos", "events_url": "https://api.github.com/users/PhantomStyle/events{/privacy}", "received_events_url": "https://api.github.com/users/PhantomStyle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-14T01:29:08Z", "updated_at": "2020-05-23T19:06:49Z", "closed_at": "2020-05-23T19:06:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI execute that:\r\n`netstat | grep :6379 | grep ESTABLISHED |wc -l`\r\nThat command shows amount of open connections if I'm not making a mistake.\r\n`6379` is redis' port.\r\n\r\nI initialize pubsub object:\r\n`sub = redis_obj.pubsub()`\r\n`sub.subscribe(channel)`\r\n\r\nThen I try to receive some message from my channel.\r\nAnd after that I try to unsubscribe:\r\n`sub.unsubscribe(channel)`\r\n\r\nBut again I execute that:\r\n`netstat | grep :6379 | grep ESTABLISHED |wc -l`\r\nAnd I see that there are lots of connections which were not released. Why?\r\nIt's too important because I have lots of such connections because of that.\r\nAnd they won't be closed till I shut down my programm or call reset(). Unfortunatelly, that method is not a solution for me because I have to keep listening that channel.\r\n\r\nCan you help me?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1342", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1342/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1342/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1342/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1342", "id": 617789086, "node_id": "MDU6SXNzdWU2MTc3ODkwODY=", "number": 1342, "title": "Sentinel discover_slaves always reporting 1 less slave than there is", "user": {"login": "ayounes", "id": 9139332, "node_id": "MDQ6VXNlcjkxMzkzMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9139332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayounes", "html_url": "https://github.com/ayounes", "followers_url": "https://api.github.com/users/ayounes/followers", "following_url": "https://api.github.com/users/ayounes/following{/other_user}", "gists_url": "https://api.github.com/users/ayounes/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayounes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayounes/subscriptions", "organizations_url": "https://api.github.com/users/ayounes/orgs", "repos_url": "https://api.github.com/users/ayounes/repos", "events_url": "https://api.github.com/users/ayounes/events{/privacy}", "received_events_url": "https://api.github.com/users/ayounes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-13T22:15:08Z", "updated_at": "2020-05-14T01:27:32Z", "closed_at": "2020-05-14T01:27:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**:  redis              3.5.1 and I'm using redis version 3.0.6\r\n**Platform**: Ubuntu 16.04\r\n\r\n**Description**: I wrote a program that monitors redis clusters and makes sure that all intended master and slaves are up and running\r\n\r\nIn the redis cli:\r\n```\r\n127.0.0.1:6379> info replication\r\n# Replication\r\nrole:master\r\nconnected_slaves:2\r\nslave0:ip=10.10.10.8,port=6379,state=online,offset=1409435252945,lag=1\r\nslave1:ip=10.10.10.30,port=6379,state=online,offset=1409436519147,lag=1\r\nmaster_repl_offset:1409439031250\r\nrepl_backlog_active:1\r\nrepl_backlog_size:1048576\r\nrepl_backlog_first_byte_offset:1409437982675\r\nrepl_backlog_histlen:1048576\r\n```\r\n\r\nAll my redis servers as well as sentinels on each of my machines are up and running.\r\n\r\nIf I execute redis-cli -p 26379 and run sentinel slaves mymaster. I get a report of the same number of slaves as I have configured and running so all is good.\r\n\r\nIn my python program I do something like this:\r\n\r\n```\r\n\"nodes\" = [(\"10.10.10.210\", 26379),\r\n                   (\"10.10.10.8\", 26379),\r\n                   (\"10.10.10.30\", 26379)]\r\n\r\nsentinel = Sentinel(nodes, socket_timeout=0.1)\r\nmaster = sentinel.discover_master(master_name)\r\nslave_list = sentinel.discover_slaves(master_name)\r\n\r\nprint nodes\r\nprint master\r\nprint slave_list\r\n```\r\n\r\nnodes [('10.10.10.210', 26379), ('10.10.10.8', 26379), ('10.10.10.30', 26379)]\r\nmaster ('10.10.10.210', 6379)\r\nslave_list [('10.10.10.8', 6379)]\r\n\r\nAs you can see, the output is one less than the number of slaves that I have.\r\n\r\nI tried this with another cluster in my environment and I have had the same issue.  The other cluster has 4 nodes, 3 slaves, and it only reports 2 slaves.  The master result is always correct.\r\n\r\nIf I configure nodes to only include 10.10.10.30.  I still get the same results as above.\r\n\r\nI debugged the Redis Sentinel code and a filter is applied if the slave is reporting is_odown or is_sdown.  In my case 10.10.10.30 is reporting is_sdown.  But I am not clear on what that means.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1340", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1340/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1340/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1340/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1340", "id": 614956497, "node_id": "MDU6SXNzdWU2MTQ5NTY0OTc=", "number": 1340, "title": "Bug related to argument check in redis.hset()", "user": {"login": "jroose-pp", "id": 58224012, "node_id": "MDQ6VXNlcjU4MjI0MDEy", "avatar_url": "https://avatars1.githubusercontent.com/u/58224012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroose-pp", "html_url": "https://github.com/jroose-pp", "followers_url": "https://api.github.com/users/jroose-pp/followers", "following_url": "https://api.github.com/users/jroose-pp/following{/other_user}", "gists_url": "https://api.github.com/users/jroose-pp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroose-pp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroose-pp/subscriptions", "organizations_url": "https://api.github.com/users/jroose-pp/orgs", "repos_url": "https://api.github.com/users/jroose-pp/repos", "events_url": "https://api.github.com/users/jroose-pp/events{/privacy}", "received_events_url": "https://api.github.com/users/jroose-pp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-08T20:02:26Z", "updated_at": "2020-05-08T20:47:07Z", "closed_at": "2020-05-08T20:47:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: \r\nLatest git master:  https://github.com/andymccurdy/redis-py/blob/master/redis/client.py#L3041\r\n\r\n**Platform**: \r\nPython 3.8.1 on Amazon Linux\r\n\r\n**Description**: \r\nBased on redis-py's type checking int(x) should be a valid key for hset().  However, if hset is passed `redis.hset(myhash, key=0, value=\"mystr\")` then the Error: `redis.exceptions.DataError: 'hset' with no key value pairs` because inputs are improperly sanitized.  Using `redis.hset(myhash, mapping={0: \"mystr\"})` works as a workaround, but this cornercase could cause hard to debug errors when 0 is passed as a hash key.  \r\n\r\nI suggest changing the current check: \r\n```if not key and not mapping:```\r\nto \r\n```if (key is None) and not mapping:```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1339", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1339/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1339/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1339/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1339", "id": 614826236, "node_id": "MDU6SXNzdWU2MTQ4MjYyMzY=", "number": 1339, "title": "Exception ignored in: <function Connection.__del__ at 0x7f11449b2af0>", "user": {"login": "dbobrov", "id": 849246, "node_id": "MDQ6VXNlcjg0OTI0Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/849246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbobrov", "html_url": "https://github.com/dbobrov", "followers_url": "https://api.github.com/users/dbobrov/followers", "following_url": "https://api.github.com/users/dbobrov/following{/other_user}", "gists_url": "https://api.github.com/users/dbobrov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbobrov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbobrov/subscriptions", "organizations_url": "https://api.github.com/users/dbobrov/orgs", "repos_url": "https://api.github.com/users/dbobrov/repos", "events_url": "https://api.github.com/users/dbobrov/events{/privacy}", "received_events_url": "https://api.github.com/users/dbobrov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-05-08T15:50:05Z", "updated_at": "2020-06-01T21:31:01Z", "closed_at": "2020-05-20T18:05:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**:\r\nredis-py: 3.5.0\r\nredis: 6.0.1\r\n\r\n**Description**:\r\nAfter commit https://github.com/andymccurdy/redis-py/commit/200e4dfc40ce0705ab6a3aca906e0a67884235e2 when exception catching was removed from `__del__` methods. I faced this error after run tests in Django. With previous version of redis-py (3.4.1) everything was OK.\r\n\r\n```\r\nException ignored in: <function Connection.__del__ at 0x7f11449b2af0>\r\nTraceback (most recent call last):\r\n  File \"/home/dmitry/dev/test-project/env/lib/python3.8/site-packages/redis/connection.py\", line 537, in __del__\r\n  File \"/home/dmitry/dev/test-project/env/lib/python3.8/site-packages/redis/connection.py\", line 667, in disconnect\r\nTypeError: catching classes that do not inherit from BaseException is not allowed\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1338", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1338/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1338/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1338/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1338", "id": 614006677, "node_id": "MDU6SXNzdWU2MTQwMDY2Nzc=", "number": 1338, "title": "Low performance in stream colection", "user": {"login": "endikap100", "id": 14931821, "node_id": "MDQ6VXNlcjE0OTMxODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/14931821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/endikap100", "html_url": "https://github.com/endikap100", "followers_url": "https://api.github.com/users/endikap100/followers", "following_url": "https://api.github.com/users/endikap100/following{/other_user}", "gists_url": "https://api.github.com/users/endikap100/gists{/gist_id}", "starred_url": "https://api.github.com/users/endikap100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/endikap100/subscriptions", "organizations_url": "https://api.github.com/users/endikap100/orgs", "repos_url": "https://api.github.com/users/endikap100/repos", "events_url": "https://api.github.com/users/endikap100/events{/privacy}", "received_events_url": "https://api.github.com/users/endikap100/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-07T12:09:56Z", "updated_at": "2020-05-11T07:47:03Z", "closed_at": "2020-05-11T07:47:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**:\r\nredis-py: 3.5.0\r\nredis: 5.0.7\r\n\r\n**Description**: \r\nI am testing the performance of stream collection, and I am seeing a performance penalty in the client side.\r\nRedis slow log reports that the query is performed in 0,28s.\r\nIn a network capture I can see that it takes 0,31s from the first network package to the last package.\r\nBut the python script with the library takes 4s to get all the streams (in the attached code from \"start getting streams\" to \"end getting streams\").\r\nI performed the test with 16424 streams with a total of 78212 entry's with an average of 6 variables each.\r\nIs it the expected behavior? or am I doing something wrong?\r\n\r\n**Code for the test**:\r\nimport redis\r\nimport datetime\r\n\r\nredis_session = redis.Redis(host=\"127.0.0.1\", port=6379)\r\nprint(\"start getting keys \", datetime.datetime.now())\r\nkeys = redis_session.scan_iter(\"stream*\", count=10000)\r\nprint(\"end getting keys\", datetime.datetime.now())\r\n\r\ndict = {}\r\nfor key in keys:\r\n    dict[key] = b\"0-0\"\r\n\r\nprint(\"start getting streams\", datetime.datetime.now())\r\ncall_trace = redis_session.xread(dict, count=10000)\r\nprint(\"end getting streams\", datetime.datetime.now())\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1337", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1337/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1337/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1337/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1337", "id": 613608860, "node_id": "MDU6SXNzdWU2MTM2MDg4NjA=", "number": 1337, "title": "hset for key=0 raises redis.exceptions.DataError", "user": {"login": "AleksMat", "id": 9626750, "node_id": "MDQ6VXNlcjk2MjY3NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/9626750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AleksMat", "html_url": "https://github.com/AleksMat", "followers_url": "https://api.github.com/users/AleksMat/followers", "following_url": "https://api.github.com/users/AleksMat/following{/other_user}", "gists_url": "https://api.github.com/users/AleksMat/gists{/gist_id}", "starred_url": "https://api.github.com/users/AleksMat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AleksMat/subscriptions", "organizations_url": "https://api.github.com/users/AleksMat/orgs", "repos_url": "https://api.github.com/users/AleksMat/repos", "events_url": "https://api.github.com/users/AleksMat/events{/privacy}", "received_events_url": "https://api.github.com/users/AleksMat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-06T20:58:08Z", "updated_at": "2020-05-09T20:59:56Z", "closed_at": "2020-05-09T20:59:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nIn the new `redis-py` version `3.5.0` I have noticed some additional checks in `Redis.hset` method. Because of these checks the following corner case now fails:\r\n```\r\nRedis().hset('my-name', 0, 'my-value')\r\n```\r\nraising an error `redis.exceptions.DataError: 'hset' with no key value pairs`.\r\n\r\nThe problem is in [this line](https://github.com/andymccurdy/redis-py/blob/3.5.0/redis/client.py#L3041) where `not key` check is made.\r\n\r\nPotential solutions:\r\n - Changing `not key` into `key is None` check. This covers case `key=0` but it doesn't raise an error if `key=''` where it probably should?\r\n- Changing `not key` into `key is None or not str(key) `. I think this should cover all cases but it's an additional casting operation.\r\n\r\nLet me know if any of these options makes sense. I would be happy to submit a PR for this.\r\n\r\nFor now, I'll just make sure that I always cast `key` argument into string in my code to avoid this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1335", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1335/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1335/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1335/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1335", "id": 611847948, "node_id": "MDU6SXNzdWU2MTE4NDc5NDg=", "number": 1335, "title": "'hmset' with mapping of length 0", "user": {"login": "hrith", "id": 38906327, "node_id": "MDQ6VXNlcjM4OTA2MzI3", "avatar_url": "https://avatars2.githubusercontent.com/u/38906327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrith", "html_url": "https://github.com/hrith", "followers_url": "https://api.github.com/users/hrith/followers", "following_url": "https://api.github.com/users/hrith/following{/other_user}", "gists_url": "https://api.github.com/users/hrith/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrith/subscriptions", "organizations_url": "https://api.github.com/users/hrith/orgs", "repos_url": "https://api.github.com/users/hrith/repos", "events_url": "https://api.github.com/users/hrith/events{/privacy}", "received_events_url": "https://api.github.com/users/hrith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-04T12:45:43Z", "updated_at": "2020-05-20T18:11:33Z", "closed_at": "2020-05-20T18:11:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am receiving 'hmset' with mapping of length 0 error on accessing my admin url in django. \r\n\r\nI have set SESSION_ENGINE = 'redis'\r\n\r\nAfter removing this line I am not receiving this error.\r\n\r\n`#redis.py\r\nfrom django.contrib.sessions.backends.base import SessionBase\r\nfrom django.utils.functional import cached_property\r\nfrom redis import Redis\r\n\r\nclass SessionStore(SessionBase):\r\n    @cached_property\r\n    \r\n    def _connection(self):\r\n        return Redis(\r\n            host='127.0.0.1',\r\n            port='6379',\r\n            db=0,\r\n            decode_responses=True\r\n        )\r\n    \r\n    def load(self):\r\n        return self._connection.hgetall(self.session_key)\r\n\r\n    \r\n    def exists(self, session_key):\r\n        return self._connection.exists(session_key)\r\n    \r\n    def create(self):\r\n        # Creates a new session in the database.\r\n        self._session_key = self._get_new_session_key()\r\n        self.save(must_create=True)\r\n        self.modified = True\r\n    \r\n    def save(self, must_create=False):\r\n        # Saves the session data. If `must_create` is True,\r\n        # creates a new session object. Otherwise, only updates\r\n        # an existing object and doesn't create one.\r\n        if self.session_key is None:\r\n            return self.create()\r\n        data = self._get_session(no_load=must_create)\r\n        session_key = self._get_or_create_session_key()\r\n        self._connection.hmset(session_key, data)\r\n        self._connection.expire(session_key, self.get_expiry_age())\r\n    \r\n    def delete(self, session_key=None):\r\n        # Deletes the session data under the session key.\r\n        if session_key is None:\r\n            if self.session_key is None:\r\n                return\r\n            session_key = self.session_key\r\n        self._connection.delete(session_key)\r\n    @classmethod\r\n    \r\n    def clear_expired(cls):\r\n        # There is no need to remove expired sessions by hand\r\n        # because Redis can do it automatically when\r\n        # the session has expired.\r\n        # We set expiration time in `save` method.\r\n        pass\r\n`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1333", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1333/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1333/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1333/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1333", "id": 606994834, "node_id": "MDU6SXNzdWU2MDY5OTQ4MzQ=", "number": 1333, "title": "Module instantiation doesn't return connection status", "user": {"login": "BeeShall", "id": 14200584, "node_id": "MDQ6VXNlcjE0MjAwNTg0", "avatar_url": "https://avatars2.githubusercontent.com/u/14200584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BeeShall", "html_url": "https://github.com/BeeShall", "followers_url": "https://api.github.com/users/BeeShall/followers", "following_url": "https://api.github.com/users/BeeShall/following{/other_user}", "gists_url": "https://api.github.com/users/BeeShall/gists{/gist_id}", "starred_url": "https://api.github.com/users/BeeShall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BeeShall/subscriptions", "organizations_url": "https://api.github.com/users/BeeShall/orgs", "repos_url": "https://api.github.com/users/BeeShall/repos", "events_url": "https://api.github.com/users/BeeShall/events{/privacy}", "received_events_url": "https://api.github.com/users/BeeShall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-26T11:58:20Z", "updated_at": "2020-04-27T22:46:14Z", "closed_at": "2020-04-27T22:46:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for wanting to report an issue you've found in redis-py. Please delete this text and fill in the template below.  \r\nIt is of course not always possible to reduce your code to a small test case, but it's highly appreciated to have as much data as possible. Thank you!\r\n\r\n**Version**: What redis-py and what redis version is the issue happening on?\r\nLatest as of 4/26/20\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\nPyhton 3.7\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n\r\nWhen you instantiate a Redis instance within r= Redis(), you do not get any indication that the server was connected or not. I have to manually run redis.echo() to throw an exception.  \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1332", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1332/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1332/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1332/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1332", "id": 604550085, "node_id": "MDU6SXNzdWU2MDQ1NTAwODU=", "number": 1332, "title": "PubSub.on_connect may be no call!", "user": {"login": "seewindcn", "id": 2747944, "node_id": "MDQ6VXNlcjI3NDc5NDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2747944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seewindcn", "html_url": "https://github.com/seewindcn", "followers_url": "https://api.github.com/users/seewindcn/followers", "following_url": "https://api.github.com/users/seewindcn/following{/other_user}", "gists_url": "https://api.github.com/users/seewindcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/seewindcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seewindcn/subscriptions", "organizations_url": "https://api.github.com/users/seewindcn/orgs", "repos_url": "https://api.github.com/users/seewindcn/repos", "events_url": "https://api.github.com/users/seewindcn/events{/privacy}", "received_events_url": "https://api.github.com/users/seewindcn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-22T08:13:21Z", "updated_at": "2020-04-27T22:45:27Z", "closed_at": "2020-04-27T22:45:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: What redis-py and what redis version is the issue happening on?\r\n3.2.1\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\nwindows 7\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\nredis/client.py: \r\n```\r\n        if self.connection is None:\r\n            self.connection = self.connection_pool.get_connection(\r\n                'pubsub',\r\n                self.shard_hint\r\n            )\r\n            # register a callback that re-subscribes to any channels we\r\n            # were listening to when we were disconnected\r\n            self.connection.register_connect_callback(self.on_connect)\r\n```\r\nconnection_pool.get_connection is make sure return a connected connection;\r\nso connection.register_connect_callback(self.on_connect) may be not effect;\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1331", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1331/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1331/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1331/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1331", "id": 604486757, "node_id": "MDU6SXNzdWU2MDQ0ODY3NTc=", "number": 1331, "title": "blpop blocked forever", "user": {"login": "kingname", "id": 5440523, "node_id": "MDQ6VXNlcjU0NDA1MjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5440523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kingname", "html_url": "https://github.com/kingname", "followers_url": "https://api.github.com/users/kingname/followers", "following_url": "https://api.github.com/users/kingname/following{/other_user}", "gists_url": "https://api.github.com/users/kingname/gists{/gist_id}", "starred_url": "https://api.github.com/users/kingname/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kingname/subscriptions", "organizations_url": "https://api.github.com/users/kingname/orgs", "repos_url": "https://api.github.com/users/kingname/repos", "events_url": "https://api.github.com/users/kingname/events{/privacy}", "received_events_url": "https://api.github.com/users/kingname/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-22T06:17:08Z", "updated_at": "2020-05-29T20:19:49Z", "closed_at": "2020-05-29T20:19:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for wanting to report an issue you've found in redis-py. Please delete this text and fill in the template below.  \r\nIt is of course not always possible to reduce your code to a small test case, but it's highly appreciated to have as much data as possible. Thank you!\r\n\r\n**Version**: What redis-py and what redis version is the issue happening on?\r\n\r\nredis-py: 3.4.1\r\nredis_version:4.0.9, single instance.\r\n\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure) \r\n\r\nUbuntu 19.04\r\nPython 3.7.3\r\n\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n\r\nMy code:\r\n\r\n```python\r\nimport redis\r\nclient = redis.Redis()\r\nwhile True:\r\n    data = client.blpop('key', timeout=5 * 60)\r\n    if not data:\r\n        continue\r\n    parse(data[1])\r\n```\r\nsometime, this code will block forever even if there are many datas in the list. Especially when the list is empty for a long time, and then I lpush some data to it, the code could not read data from list, just blocks here. I must restart the program, then it could continue to consume.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1313", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1313/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1313/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1313/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1313", "id": 591912973, "node_id": "MDU6SXNzdWU1OTE5MTI5NzM=", "number": 1313, "title": "instance.table(t).column_family(f).gc_rule always returns None", "user": {"login": "czka", "id": 1593918, "node_id": "MDQ6VXNlcjE1OTM5MTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1593918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czka", "html_url": "https://github.com/czka", "followers_url": "https://api.github.com/users/czka/followers", "following_url": "https://api.github.com/users/czka/following{/other_user}", "gists_url": "https://api.github.com/users/czka/gists{/gist_id}", "starred_url": "https://api.github.com/users/czka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czka/subscriptions", "organizations_url": "https://api.github.com/users/czka/orgs", "repos_url": "https://api.github.com/users/czka/repos", "events_url": "https://api.github.com/users/czka/events{/privacy}", "received_events_url": "https://api.github.com/users/czka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-01T13:23:35Z", "updated_at": "2020-04-02T09:26:43Z", "closed_at": "2020-04-01T15:17:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "(deleted)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1311", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1311/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1311/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1311/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1311", "id": 590837865, "node_id": "MDU6SXNzdWU1OTA4Mzc4NjU=", "number": 1311, "title": "How to know the number of \u2018\u2019name \u2018\u2019in the redis hash", "user": {"login": "xiaofeng3", "id": 51773091, "node_id": "MDQ6VXNlcjUxNzczMDkx", "avatar_url": "https://avatars3.githubusercontent.com/u/51773091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaofeng3", "html_url": "https://github.com/xiaofeng3", "followers_url": "https://api.github.com/users/xiaofeng3/followers", "following_url": "https://api.github.com/users/xiaofeng3/following{/other_user}", "gists_url": "https://api.github.com/users/xiaofeng3/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaofeng3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaofeng3/subscriptions", "organizations_url": "https://api.github.com/users/xiaofeng3/orgs", "repos_url": "https://api.github.com/users/xiaofeng3/repos", "events_url": "https://api.github.com/users/xiaofeng3/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaofeng3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-31T06:38:59Z", "updated_at": "2020-04-01T05:03:25Z", "closed_at": "2020-04-01T05:03:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "r.hset(name=\"name\",key=\"key1\",value=\"value\") ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1310", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1310/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1310/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1310/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1310", "id": 586759652, "node_id": "MDU6SXNzdWU1ODY3NTk2NTI=", "number": 1310, "title": "redis-py 3.4.1 in pypi says it is the latest version, but it is different from github code", "user": {"login": "yonghee12", "id": 24601847, "node_id": "MDQ6VXNlcjI0NjAxODQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/24601847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yonghee12", "html_url": "https://github.com/yonghee12", "followers_url": "https://api.github.com/users/yonghee12/followers", "following_url": "https://api.github.com/users/yonghee12/following{/other_user}", "gists_url": "https://api.github.com/users/yonghee12/gists{/gist_id}", "starred_url": "https://api.github.com/users/yonghee12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yonghee12/subscriptions", "organizations_url": "https://api.github.com/users/yonghee12/orgs", "repos_url": "https://api.github.com/users/yonghee12/repos", "events_url": "https://api.github.com/users/yonghee12/events{/privacy}", "received_events_url": "https://api.github.com/users/yonghee12/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-24T07:45:34Z", "updated_at": "2020-04-29T20:35:08Z", "closed_at": "2020-04-29T20:35:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for wanting to report an issue you've found in redis-py. Please delete this text and fill in the template below.  \r\nIt is of course not always possible to reduce your code to a small test case, but it's highly appreciated to have as much data as possible. Thank you!\r\n\r\n**Version**: What redis-py and what redis version is the issue happening on?\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n\r\nAt first, thank you for offering this library.\r\n\r\nVersion : redis-py 3.4.1 from pypi\r\nPlatform : macos catalina\r\nDescription:\r\n- Using redis, I happened to realize that hmset is officially deprecated.\r\n- I wondered why deprecated warning didn't came out, and I wanted to change my code. \r\n- Searching Documentations, I've found that redis-py already adopted this situation, that I can pass mapping in redis-py's hset function.\r\n- I tried in my local, and it didn't work.\r\n- The reason was that my pypi redis-py 3.4.1 doesn't have recent hset code.\r\n\r\nAttachments\r\n- my redis-py version\r\n- redis-py code", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1309", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1309/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1309/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1309/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1309", "id": 583911681, "node_id": "MDU6SXNzdWU1ODM5MTE2ODE=", "number": 1309, "title": "Python 2.7.5 compatibility", "user": {"login": "cesarjorgemartinez", "id": 3857673, "node_id": "MDQ6VXNlcjM4NTc2NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3857673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjorgemartinez", "html_url": "https://github.com/cesarjorgemartinez", "followers_url": "https://api.github.com/users/cesarjorgemartinez/followers", "following_url": "https://api.github.com/users/cesarjorgemartinez/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjorgemartinez/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjorgemartinez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjorgemartinez/subscriptions", "organizations_url": "https://api.github.com/users/cesarjorgemartinez/orgs", "repos_url": "https://api.github.com/users/cesarjorgemartinez/repos", "events_url": "https://api.github.com/users/cesarjorgemartinez/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjorgemartinez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-18T18:06:20Z", "updated_at": "2020-03-18T19:05:19Z", "closed_at": "2020-03-18T19:04:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: Last version 3.4.1\r\n\r\n**Platform**: Python 2.7.5 (default) Centos 7\r\n\r\n**Description**:\r\n```\r\n  File \"/usr/local/ckan/venv-uma/lib/python2.7/site-packages/rq/worker.py\", line 581, in perform_job\r\n    self.prepare_job_execution(job)\r\n  File \"/usr/local/ckan/venv-uma/lib/python2.7/site-packages/rq/worker.py\", line 568, in prepare_job_execution\r\n    registry.add(job, timeout, pipeline=pipeline)\r\n  File \"/usr/local/ckan/venv-uma/lib/python2.7/site-packages/rq/registry.py\", line 34, in add\r\n    return pipeline.zadd(self.key, score, job.id)\r\n  File \"/usr/local/ckan/venv-uma/lib/python2.7/site-packages/redis/client.py\", line 2650, in zadd\r\n    for pair in iteritems(mapping):\r\n  File \"/usr/local/ckan/venv-uma/lib/python2.7/site-packages/redis/_compat.py\", line 132, in iteritems\r\n    return x.iteritems()\r\nAttributeError: 'int' object has no attribute 'iteritems'\r\n```\r\n\r\nUsing Python 2.7.5, what version of redis is compatible with Python 2.7.5. I read the changelog but can not find.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1308", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1308/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1308/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1308/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1308", "id": 582080275, "node_id": "MDU6SXNzdWU1ODIwODAyNzU=", "number": 1308, "title": "Getting error when fetching data from aws elastic cache cluster", "user": {"login": "kundankumarjha", "id": 7692849, "node_id": "MDQ6VXNlcjc2OTI4NDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7692849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kundankumarjha", "html_url": "https://github.com/kundankumarjha", "followers_url": "https://api.github.com/users/kundankumarjha/followers", "following_url": "https://api.github.com/users/kundankumarjha/following{/other_user}", "gists_url": "https://api.github.com/users/kundankumarjha/gists{/gist_id}", "starred_url": "https://api.github.com/users/kundankumarjha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kundankumarjha/subscriptions", "organizations_url": "https://api.github.com/users/kundankumarjha/orgs", "repos_url": "https://api.github.com/users/kundankumarjha/repos", "events_url": "https://api.github.com/users/kundankumarjha/events{/privacy}", "received_events_url": "https://api.github.com/users/kundankumarjha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-16T07:58:56Z", "updated_at": "2020-03-16T20:28:12Z", "closed_at": "2020-03-16T20:28:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: What redis-py and what redis version is the issue happening on?\r\nlatest\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\nAWS lamda with Python 3.8\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\nSome time it is accessing data from elastic cache and some time error like below.\r\n[ERROR] ResponseError: MOVED 5798 10.220.93.183:6379\r\nTraceback (most recent call last):\r\n\u00a0\u00a0File \"/var/task/app.py\", line 11, in handler\r\n\u00a0\u00a0\u00a0\u00a0res = r.get('name')\r\n\u00a0\u00a0File \"/var/task/redis/client.py\", line 1607, in get\r\n\u00a0\u00a0\u00a0\u00a0return self.execute_command('GET', name)\r\n\u00a0\u00a0File \"/var/task/redis/client.py\", line 902, in execute_command\r\n\u00a0\u00a0\u00a0\u00a0return self.parse_response(conn, command_name, **options)\r\n\u00a0\u00a0File \"/var/task/redis/client.py\", line 916, in parse_response\r\n\u00a0\u00a0\u00a0\u00a0response = connection.read_response()\r\n\u00a0\u00a0File \"/var/task/redis/connection.py\", line 752, in read_response\r\n\u00a0\u00a0\u00a0\u00a0raise responseEND RequestId: 04ea2538-b851-45fd-8194-12f90312447e\r\nREPORT RequestId: 04ea2538-b851-45fd-8194-12f90312447e\tDuration: 50.07 ms\tBilled Duration: 100 ms\tMemory Size: 128 MB\tMax Memory Used: 64 MB\t", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1305", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1305/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1305/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1305/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1305", "id": 578446783, "node_id": "MDU6SXNzdWU1Nzg0NDY3ODM=", "number": 1305, "title": "BRPOPLPUSH hangs forever in socket", "user": {"login": "jacopofar", "id": 1280346, "node_id": "MDQ6VXNlcjEyODAzNDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1280346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacopofar", "html_url": "https://github.com/jacopofar", "followers_url": "https://api.github.com/users/jacopofar/followers", "following_url": "https://api.github.com/users/jacopofar/following{/other_user}", "gists_url": "https://api.github.com/users/jacopofar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacopofar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacopofar/subscriptions", "organizations_url": "https://api.github.com/users/jacopofar/orgs", "repos_url": "https://api.github.com/users/jacopofar/repos", "events_url": "https://api.github.com/users/jacopofar/events{/privacy}", "received_events_url": "https://api.github.com/users/jacopofar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-10T09:33:14Z", "updated_at": "2020-03-16T08:41:14Z", "closed_at": "2020-03-16T08:41:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have multiple processes using Redis and randomly they hang forever while performing a `BRPOPLPUSH` operation witha. timeout of 10 minutes. It seems to happen intermittently, about 1/ 200 times, and when it happens the process hangs forever.\r\n\r\nThe client instance was created with `health_check_interval=30` in an attempt to solve, but didn't work.\r\n\r\nUsing `gdb-python` I got this stack trace:\r\n\r\n```\r\n(gdb) py-bt\r\nTraceback (most recent call first):\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/_compat.py\", line 71, in recv\r\n    return sock.recv(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/connection.py\", line 190, in _read_from_socket\r\n    data = recv(self._sock, socket_read_size)\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/connection.py\", line 248, in readline\r\n    self._read_from_socket()\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/connection.py\", line 316, in read_response\r\n    response = self._buffer.readline()\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/connection.py\", line 734, in read_response\r\n    response = self._parser.read_response()\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/client.py\", line 892, in parse_response\r\n    response = connection.read_response()\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/client.py\", line 878, in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/client.py\", line 1895, in brpoplpush\r\n    return self.execute_command('BRPOPLPUSH', src, dst, timeout)\r\n```\r\n\r\nIs there some other method to ensure the socket is alive before trying an operation?\r\n\r\n**Version**: redis 3.4.1\r\n\r\n**Platform**: Python 3.7 in Debian stable running in a K8s pod\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1300", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1300/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1300/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1300/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1300", "id": 576104296, "node_id": "MDU6SXNzdWU1NzYxMDQyOTY=", "number": 1300, "title": "Pipeline incorrectly calls DISCARD after EXEC in case of EXECABORT error", "user": {"login": "nickgaya", "id": 25260989, "node_id": "MDQ6VXNlcjI1MjYwOTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/25260989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickgaya", "html_url": "https://github.com/nickgaya", "followers_url": "https://api.github.com/users/nickgaya/followers", "following_url": "https://api.github.com/users/nickgaya/following{/other_user}", "gists_url": "https://api.github.com/users/nickgaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickgaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickgaya/subscriptions", "organizations_url": "https://api.github.com/users/nickgaya/orgs", "repos_url": "https://api.github.com/users/nickgaya/repos", "events_url": "https://api.github.com/users/nickgaya/events{/privacy}", "received_events_url": "https://api.github.com/users/nickgaya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-05T09:18:49Z", "updated_at": "2020-03-11T00:14:44Z", "closed_at": "2020-03-11T00:14:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Version**:\r\nRedis-py 3.4.1\r\nRedis 5.0.7\r\n\r\n**Platform**:\r\nPython 3.8.2\r\nMac OS 10.13.6\r\n\r\n**Description**:\r\nExecuting an explicit transaction containing an invalid command results in a response error, masking the original parsing error.\r\n\r\nExample:\r\n```\r\nfrom redis import Redis\r\nredis = Redis(...)\r\n\r\nwith redis.pipeline() as pipe:\r\n    pipe.multi()\r\n    pipe.execute_command('INCR', 'a', 'b', 'c')\r\n    pipe.execute()\r\n```\r\n\r\nExpected:\r\n```\r\nredis.exceptions.ResponseError: Command # 1 (INCR a b c) of pipeline caused error: wrong number of arguments for 'incr' command\r\n```\r\n\r\nActual:\r\n```\r\nredis.exceptions.ResponseError: DISCARD without MULTI\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1299", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1299/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1299/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1299/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1299", "id": 576093601, "node_id": "MDU6SXNzdWU1NzYwOTM2MDE=", "number": 1299, "title": "Unexpected UNWATCH after pipeline EXEC", "user": {"login": "nickgaya", "id": 25260989, "node_id": "MDQ6VXNlcjI1MjYwOTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/25260989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickgaya", "html_url": "https://github.com/nickgaya", "followers_url": "https://api.github.com/users/nickgaya/followers", "following_url": "https://api.github.com/users/nickgaya/following{/other_user}", "gists_url": "https://api.github.com/users/nickgaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickgaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickgaya/subscriptions", "organizations_url": "https://api.github.com/users/nickgaya/orgs", "repos_url": "https://api.github.com/users/nickgaya/repos", "events_url": "https://api.github.com/users/nickgaya/events{/privacy}", "received_events_url": "https://api.github.com/users/nickgaya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-05T09:01:03Z", "updated_at": "2020-03-11T01:33:40Z", "closed_at": "2020-03-11T01:33:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Version**:\r\nRedis-py 3.4.1\r\nRedis 5.0.7\r\n\r\n**Platform**:\r\nPython 3.8.2\r\nMac OS 10.13.6\r\n\r\n**Description**:\r\nWhen executing a transaction with watched keys, `Pipeline.execute()` does not clear the watching state of the pipeline object, so a subsequent call to `Pipeline.reset()` will send an extra `UNWATCH` command to the server.\r\n\r\nExample:\r\n```\r\nfrom redis import Redis\r\nredis = Redis(...)\r\n\r\nwith redis.pipeline() as pipe:\r\n    pipe.watch(\"key\")\r\n    pipe.get(\"key\")\r\n    pipe.multi()\r\n    pipe.set(\"key\", \"value\")\r\n    pipe.execute()\r\n```\r\n\r\nRedis monitor output:\r\n```\r\n1583397021.463844 [0 172.17.0.1:50360] \"WATCH\" \"key\"\r\n1583397021.465269 [0 172.17.0.1:50360] \"GET\" \"key\"\r\n1583397021.466502 [0 172.17.0.1:50360] \"MULTI\"\r\n1583397021.466524 [0 172.17.0.1:50360] \"SET\" \"key\" \"value\"\r\n1583397021.466531 [0 172.17.0.1:50360] \"EXEC\"\r\n1583397021.467971 [0 172.17.0.1:50360] \"UNWATCH\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1298", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1298/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1298/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1298/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1298", "id": 574664045, "node_id": "MDU6SXNzdWU1NzQ2NjQwNDU=", "number": 1298, "title": "spop test fails on redis server 3.0.x", "user": {"login": "Grokzen", "id": 892309, "node_id": "MDQ6VXNlcjg5MjMwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/892309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Grokzen", "html_url": "https://github.com/Grokzen", "followers_url": "https://api.github.com/users/Grokzen/followers", "following_url": "https://api.github.com/users/Grokzen/following{/other_user}", "gists_url": "https://api.github.com/users/Grokzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Grokzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Grokzen/subscriptions", "organizations_url": "https://api.github.com/users/Grokzen/orgs", "repos_url": "https://api.github.com/users/Grokzen/repos", "events_url": "https://api.github.com/users/Grokzen/events{/privacy}", "received_events_url": "https://api.github.com/users/Grokzen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-03T13:21:47Z", "updated_at": "2020-03-03T20:45:15Z", "closed_at": "2020-03-03T20:45:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: What redis-py and what redis version is the issue happening on?\r\n\r\n - 3.4.x\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\n\r\n - Ubuntu 19.10, python 3.8\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n\r\nTest method `test_spop_multi_value` fails when running the test suite against a redis server with version 3.0.7\r\n\r\nSteps to reproduce\r\n\r\n```\r\n>>> from redis import Redis                                     \r\n                                                                \r\n>>> r = Redis(host='localhost', port=7002)                      \r\n                                                                \r\n>>> r                                                           \r\nRedis<ConnectionPool<Connection<host=localhost,port=7002,db=0>>>\r\n\r\n>>> r.spop('a', count=2)                                                                                                              \r\nTraceback (most recent call last):                                                                                              \r\n  File \"<stdin>\", line 1, in <module>                                                                                           \r\n  File \"/home/grok/.virtualenvs/redis-py-cluster-38/lib/python3.8/site-packages/redis/client.py\", line 2255, in spop            \r\n    return self.execute_command('SPOP', name, *args)                                                                            \r\n  File \"/home/grok/.virtualenvs/redis-py-cluster-38/lib/python3.8/site-packages/redis/client.py\", line 878, in execute_command  \r\n    return self.parse_response(conn, command_name, **options)                                                                   \r\n  File \"/home/grok/.virtualenvs/redis-py-cluster-38/lib/python3.8/site-packages/redis/client.py\", line 892, in parse_response   \r\n    response = connection.read_response()                                                                                       \r\n  File \"/home/grok/.virtualenvs/redis-py-cluster-38/lib/python3.8/site-packages/redis/connection.py\", line 752, in read_response\r\n    raise response                                                                                                              \r\nredis.exceptions.ResponseError: wrong number of arguments for 'spop' command                                                    \r\n                                                                                                                                \r\nwrong number of arguments for 'spop' command          \r\n```\r\n\r\n```\r\n>>> r.info()                            \r\n{'redis_version': '3.0.7', ... }\r\n```\r\n\r\n# Reason\r\n\r\nAccording to official redis.io docs it says this about the count argument added to `spop`\r\n\r\n```\r\nCount argument extension\r\nRedis 3.2 introduced an optional count argument that can be passed to SPOP in order to retrieve multiple elements in a single call.\r\n```\r\n\r\n# Solution\r\nShould be fairly simple, add `@skip_if_server_version_lt('3.2.0')` to the method `test_spop_multi_value`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1296", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1296/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1296/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1296/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1296", "id": 574388711, "node_id": "MDU6SXNzdWU1NzQzODg3MTE=", "number": 1296, "title": "hmset deprecation wrongly in 3.4.1 section of release notes, but landed post-3.4.1", "user": {"login": "darkrain42", "id": 70228, "node_id": "MDQ6VXNlcjcwMjI4", "avatar_url": "https://avatars0.githubusercontent.com/u/70228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darkrain42", "html_url": "https://github.com/darkrain42", "followers_url": "https://api.github.com/users/darkrain42/followers", "following_url": "https://api.github.com/users/darkrain42/following{/other_user}", "gists_url": "https://api.github.com/users/darkrain42/gists{/gist_id}", "starred_url": "https://api.github.com/users/darkrain42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darkrain42/subscriptions", "organizations_url": "https://api.github.com/users/darkrain42/orgs", "repos_url": "https://api.github.com/users/darkrain42/repos", "events_url": "https://api.github.com/users/darkrain42/events{/privacy}", "received_events_url": "https://api.github.com/users/darkrain42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-03T03:20:29Z", "updated_at": "2020-03-03T20:46:27Z", "closed_at": "2020-03-03T20:46:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: redis-py 3.4.1\r\n\r\n**Description**: #1269 / #1271 deprecated `hmset` in the client, and added support for a `mapping` to the `hset` command.\r\n\r\nThat deprecation incorrectly shows up in the 3.4.1 section of the release notes (https://github.com/andymccurdy/redis-py/blob/e57daf554d6a4a66373de6605d13fb7a185852e9/CHANGES#L33-L34), even though it was merged in post-3.4.1:\r\n\r\n```\r\n* 7c023d2 - Enable warnings during tests and fix discovered cases (#1283) (3 weeks ago)\r\n* 07e1c4b - Improve Redis.hmset() warning message (3 weeks ago)\r\n* 3d8d523 - Make hset support multiple field/value pairs. (#1271) (3 weeks ago)\r\n* 4b7f562 - (tag: 3.4.1) 3.4.1 (4 weeks ago)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1295", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1295/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1295/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1295/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1295", "id": 573089618, "node_id": "MDU6SXNzdWU1NzMwODk2MTg=", "number": 1295, "title": "How to connect to a remote redis server through a squid proxy?", "user": {"login": "Hanny2010", "id": 10794673, "node_id": "MDQ6VXNlcjEwNzk0Njcz", "avatar_url": "https://avatars1.githubusercontent.com/u/10794673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hanny2010", "html_url": "https://github.com/Hanny2010", "followers_url": "https://api.github.com/users/Hanny2010/followers", "following_url": "https://api.github.com/users/Hanny2010/following{/other_user}", "gists_url": "https://api.github.com/users/Hanny2010/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hanny2010/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hanny2010/subscriptions", "organizations_url": "https://api.github.com/users/Hanny2010/orgs", "repos_url": "https://api.github.com/users/Hanny2010/repos", "events_url": "https://api.github.com/users/Hanny2010/events{/privacy}", "received_events_url": "https://api.github.com/users/Hanny2010/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-29T01:04:11Z", "updated_at": "2020-03-03T19:41:27Z", "closed_at": "2020-03-03T19:40:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: redis-py 3.3.8 and redis 5.0.7.\r\n\r\n**Platform**:  Python 3.7.4 on Mac\r\n\r\n**Description**: \r\nHi experts, \r\nI am trying to connect to a remote redis server through a squid proxy.\r\nCan I set the proxy_server_url when creating a redis client? \r\nFor example, `redis.Redis(host=host, password=password, proxies=SQUID_PROXY_SERVER_URL)`.\r\nI didn't find any parameters for this, then how should I set the connection over some proxy server?\r\n\r\nThank you so much!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1292", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1292/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1292/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1292/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1292", "id": 570760756, "node_id": "MDU6SXNzdWU1NzA3NjA3NTY=", "number": 1292, "title": "Procure a list of keys", "user": {"login": "TondiToday", "id": 36919092, "node_id": "MDQ6VXNlcjM2OTE5MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/36919092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TondiToday", "html_url": "https://github.com/TondiToday", "followers_url": "https://api.github.com/users/TondiToday/followers", "following_url": "https://api.github.com/users/TondiToday/following{/other_user}", "gists_url": "https://api.github.com/users/TondiToday/gists{/gist_id}", "starred_url": "https://api.github.com/users/TondiToday/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TondiToday/subscriptions", "organizations_url": "https://api.github.com/users/TondiToday/orgs", "repos_url": "https://api.github.com/users/TondiToday/repos", "events_url": "https://api.github.com/users/TondiToday/events{/privacy}", "received_events_url": "https://api.github.com/users/TondiToday/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-25T18:48:57Z", "updated_at": "2020-02-25T19:27:11Z", "closed_at": "2020-02-25T19:27:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: redis 3.4.1\r\n\r\n**Platform**: python 3.8.1/Debian linux 10\r\n**Description**: Is there any method available (or in the pipeline) to view a list of locks in redis? I cant use redis-cli for this particular use case i want to be able to list out and delete keys via an api call using django framework (allow me to control my locks in a disaster relief event from outside a container)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1291", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1291/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1291/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1291/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1291", "id": 569226321, "node_id": "MDU6SXNzdWU1NjkyMjYzMjE=", "number": 1291, "title": "XADD pipeline command stack", "user": {"login": "johntmyers", "id": 9696606, "node_id": "MDQ6VXNlcjk2OTY2MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/9696606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johntmyers", "html_url": "https://github.com/johntmyers", "followers_url": "https://api.github.com/users/johntmyers/followers", "following_url": "https://api.github.com/users/johntmyers/following{/other_user}", "gists_url": "https://api.github.com/users/johntmyers/gists{/gist_id}", "starred_url": "https://api.github.com/users/johntmyers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johntmyers/subscriptions", "organizations_url": "https://api.github.com/users/johntmyers/orgs", "repos_url": "https://api.github.com/users/johntmyers/repos", "events_url": "https://api.github.com/users/johntmyers/events{/privacy}", "received_events_url": "https://api.github.com/users/johntmyers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T22:58:49Z", "updated_at": "2020-02-22T05:57:49Z", "closed_at": "2020-02-22T05:57:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Version**: What redis-py and what redis version is the issue happening on?\r\n\r\n3.4.1\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\n\r\nMac OS X \r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n\r\nWhen using xadd on pipelines, certain parts of the command seem to be represented as bytes vs strings and just about every other command is a string. Is there a particular reason for this?\r\n\r\nIt makes it impossible to dump the command stack to JSON, etc. \r\n\r\nExample:\r\n\r\n```\r\nIn [4]: pipe = r.pipeline()                                                                                                                                                                                                                                                                                   \r\n\r\nIn [5]: pipe.xadd('pipe', {'foo': 'bar'}, maxlen=1000)                                                                                                                                                                                                                                                        \r\nOut[5]: Pipeline<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\r\n\r\nIn [6]: pipe.command_stack                                                                                                                                                                                                                                                                                    \r\nOut[6]: [(('XADD', 'pipe', b'MAXLEN', b'~', '1000', '*', 'foo', 'bar'), {})]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1290", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1290/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1290/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1290/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1290", "id": 569076479, "node_id": "MDU6SXNzdWU1NjkwNzY0Nzk=", "number": 1290, "title": "Change from time.time() to time.monotonic()", "user": {"login": "rolette", "id": 19616074, "node_id": "MDQ6VXNlcjE5NjE2MDc0", "avatar_url": "https://avatars1.githubusercontent.com/u/19616074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rolette", "html_url": "https://github.com/rolette", "followers_url": "https://api.github.com/users/rolette/followers", "following_url": "https://api.github.com/users/rolette/following{/other_user}", "gists_url": "https://api.github.com/users/rolette/gists{/gist_id}", "starred_url": "https://api.github.com/users/rolette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rolette/subscriptions", "organizations_url": "https://api.github.com/users/rolette/orgs", "repos_url": "https://api.github.com/users/rolette/repos", "events_url": "https://api.github.com/users/rolette/events{/privacy}", "received_events_url": "https://api.github.com/users/rolette/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-21T17:07:19Z", "updated_at": "2020-03-19T18:39:14Z", "closed_at": "2020-03-19T18:39:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "redis-py 3.4.1\r\n\r\nThere are a few places in redis-py where it uses `time.time()` to check for elapsed time (health checks, timeouts on locks, etc.). I believe these are going to malfunction when daylight savings kicks in and moves the clock back an hour. Since it is only intervals being measured, switching to `time.monotonic()` would fix the problem nicely.\r\n\r\nThe biggest problems are in `Lock().acquire()` and `ConnectionPool()._checkpid()`. \r\n\r\nMy tree has some local changes, so you won't be able to use this patch directly, but it's a small diff, so should still be helpful (hopefully):\r\n\r\n[monotonic_diff.txt](https://github.com/andymccurdy/redis-py/files/4237159/monotonic_diff.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1289", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1289/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1289/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1289/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1289", "id": 568721755, "node_id": "MDU6SXNzdWU1Njg3MjE3NTU=", "number": 1289, "title": "Sub /pub is used to transmit large amount of data", "user": {"login": "pppigg", "id": 44393853, "node_id": "MDQ6VXNlcjQ0MzkzODUz", "avatar_url": "https://avatars2.githubusercontent.com/u/44393853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pppigg", "html_url": "https://github.com/pppigg", "followers_url": "https://api.github.com/users/pppigg/followers", "following_url": "https://api.github.com/users/pppigg/following{/other_user}", "gists_url": "https://api.github.com/users/pppigg/gists{/gist_id}", "starred_url": "https://api.github.com/users/pppigg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pppigg/subscriptions", "organizations_url": "https://api.github.com/users/pppigg/orgs", "repos_url": "https://api.github.com/users/pppigg/repos", "events_url": "https://api.github.com/users/pppigg/events{/privacy}", "received_events_url": "https://api.github.com/users/pppigg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T04:01:57Z", "updated_at": "2020-03-16T11:57:41Z", "closed_at": "2020-03-16T11:57:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I used it to transfer 1MB of data, it was fine, and when the size was 64MB, it had the following information and exception information.\r\n```\r\n# - sub.py -\r\nException in thread Thread-1:\r\nTraceback (most recent call last):\r\n  File \"/Users/pppig/anaconda/anaconda3/envs/package_test/lib/python3.7/threading.py\", line 926, in _bootstrap_inner\r\n    self.run()\r\n  File \"/Users/pppig/anaconda/anaconda3/envs/package_test/lib/python3.7/site-packages/redis/client.py\", line 3667, in run\r\n    timeout=sleep_time)\r\n  File \"/Users/pppig/anaconda/anaconda3/envs/package_test/lib/python3.7/site-packages/redis/client.py\", line 3565, in get_message\r\n    response = self.parse_response(block=False, timeout=timeout)\r\n  File \"/Users/pppig/anaconda/anaconda3/envs/package_test/lib/python3.7/site-packages/redis/client.py\", line 3451, in parse_response\r\n    if not block and not conn.can_read(timeout=timeout):\r\n  File \"/Users/pppig/anaconda/anaconda3/envs/package_test/lib/python3.7/site-packages/redis/connection.py\", line 729, in can_read\r\n    return self._parser.can_read(timeout)\r\n  File \"/Users/pppig/anaconda/anaconda3/envs/package_test/lib/python3.7/site-packages/redis/connection.py\", line 313, in can_read\r\n    return self._buffer and self._buffer.can_read(timeout)\r\n  File \"/Users/pppig/anaconda/anaconda3/envs/package_test/lib/python3.7/site-packages/redis/connection.py\", line 223, in can_read\r\n    raise_on_timeout=False)\r\n  File \"/Users/pppig/anaconda/anaconda3/envs/package_test/lib/python3.7/site-packages/redis/connection.py\", line 193, in _read_from_socket\r\n    raise ConnectionError(SERVER_CLOSED_CONNECTION_ERROR)\r\nredis.exceptions.ConnectionError: Connection closed by server.\r\n```\r\n```\r\n# - pub.py -\r\n1\r\n0\r\n0\r\n...\r\n```\r\n\r\nThe program code\r\n```python\r\n# - sub.py -\r\nimport redis\r\nimport numpy as np\r\nrc = redis.StrictRedis()\r\nps = rc.pubsub()\r\n\r\n\r\ndef my_handler(data):\r\n    arr_data = np.frombuffer(data[\"data\"], dtype='u4')\r\n    data.update({\"data\": len(arr_data)})\r\n    print(data)\r\n\r\n\r\nps.subscribe(**{\"demo\": my_handler})\r\nps.run_in_thread()\r\n```\r\n```python\r\n# -- pub.py --\r\nimport redis\r\nimport time\r\nimport numpy\r\n\r\n# data = numpy.arange(1024**2, dtype=\"u4\")\r\ndata = numpy.arange(1024**2*16, dtype=\"u4\")\r\nrc = redis.StrictRedis()\r\nfor i in range(100):\r\n    time.sleep(0.5)\r\n    print(rc.publish(\"demo\", data.tobytes()))\r\n```\r\n\r\n\r\nRuntime environment\r\n```\r\nmacOS\r\nredis-5.05\r\n\r\npython-3.7.6\r\nredis-3.4.1\r\n```\r\n\r\n```\r\n127.0.0.1:6379> info memory\r\n# Memory\r\nused_memory:1052688\r\nused_memory_human:1.00M\r\nused_memory_rss:2084864\r\nused_memory_rss_human:1.99M\r\nused_memory_peak:135268640\r\nused_memory_peak_human:129.00M\r\nused_memory_peak_perc:0.78%\r\nused_memory_overhead:1037646\r\nused_memory_startup:987952\r\nused_memory_dataset:15042\r\nused_memory_dataset_perc:23.24%\r\nallocator_allocated:1007568\r\nallocator_active:2046976\r\nallocator_resident:2046976\r\ntotal_system_memory:8589934592\r\ntotal_system_memory_human:8.00G\r\nused_memory_lua:37888\r\nused_memory_lua_human:37.00K\r\nused_memory_scripts:0\r\nused_memory_scripts_human:0B\r\nnumber_of_cached_scripts:0\r\nmaxmemory:0\r\nmaxmemory_human:0B\r\nmaxmemory_policy:noeviction\r\nallocator_frag_ratio:2.03\r\nallocator_frag_bytes:1039408\r\nallocator_rss_ratio:1.00\r\nallocator_rss_bytes:0\r\nrss_overhead_ratio:1.02\r\nrss_overhead_bytes:37888\r\nmem_fragmentation_ratio:2.07\r\nmem_fragmentation_bytes:1077296\r\nmem_not_counted_for_evict:0\r\nmem_replication_backlog:0\r\nmem_clients_slaves:0\r\nmem_clients_normal:49694\r\nmem_aof_buffer:0\r\nmem_allocator:libc\r\nactive_defrag_running:0\r\nlazyfree_pending_objects:0\r\n```\r\n\r\nIs it necessary to add some parameters when instantiating?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1280", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1280/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1280/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1280/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1280", "id": 561987899, "node_id": "MDU6SXNzdWU1NjE5ODc4OTk=", "number": 1280, "title": "Support Redis 6.0 SET KEEPTTL option", "user": {"login": "huajianjiang", "id": 12984573, "node_id": "MDQ6VXNlcjEyOTg0NTcz", "avatar_url": "https://avatars1.githubusercontent.com/u/12984573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huajianjiang", "html_url": "https://github.com/huajianjiang", "followers_url": "https://api.github.com/users/huajianjiang/followers", "following_url": "https://api.github.com/users/huajianjiang/following{/other_user}", "gists_url": "https://api.github.com/users/huajianjiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/huajianjiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huajianjiang/subscriptions", "organizations_url": "https://api.github.com/users/huajianjiang/orgs", "repos_url": "https://api.github.com/users/huajianjiang/repos", "events_url": "https://api.github.com/users/huajianjiang/events{/privacy}", "received_events_url": "https://api.github.com/users/huajianjiang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-08T08:13:48Z", "updated_at": "2020-03-12T18:02:53Z", "closed_at": "2020-03-12T18:02:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: What redis-py and what redis version is the issue happening on?\r\n3.4.1\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\nPython 3.7.0 on Windows 10\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\nNeed support Redis 6.0 SET KEEPTTL option.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1279", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1279/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1279/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1279/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1279", "id": 559401169, "node_id": "MDU6SXNzdWU1NTk0MDExNjk=", "number": 1279, "title": "Infinite loop in Client transaction due to \"Watched variable changed\"", "user": {"login": "mattrunchey", "id": 3580926, "node_id": "MDQ6VXNlcjM1ODA5MjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3580926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattrunchey", "html_url": "https://github.com/mattrunchey", "followers_url": "https://api.github.com/users/mattrunchey/followers", "following_url": "https://api.github.com/users/mattrunchey/following{/other_user}", "gists_url": "https://api.github.com/users/mattrunchey/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattrunchey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattrunchey/subscriptions", "organizations_url": "https://api.github.com/users/mattrunchey/orgs", "repos_url": "https://api.github.com/users/mattrunchey/repos", "events_url": "https://api.github.com/users/mattrunchey/events{/privacy}", "received_events_url": "https://api.github.com/users/mattrunchey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-03T23:41:33Z", "updated_at": "2020-02-24T18:58:42Z", "closed_at": "2020-02-24T18:58:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: `redis` 4.0, `redis-py` newest 3.4.11\r\n\r\n**Platform**: Any supported platform and python combo. Observed on `python:3.7-slim` and OSX\r\n\r\n**Description**: \r\n\r\nOn 3.3.11, our tests ran fine. On 3.4.10/11, everything hangs due to getting infinitely stuck in the [WatchError](https://github.com/andymccurdy/redis-py/blob/1b050753d6ec6a6630c2cfd83c2cfbd741a3ced3/redis/client.py#L784) for a transaction.\r\n\r\nI am not the most familiar with using `redis` and am still trying to pinpoint what we're doing wrong, and how to communicate an example of recreating that doesn't rely on a bunch of our surrounding code. I intend to update this ticket when I do find something, though.\r\n\r\nIn the meantime, I've been trying to see which changes in the last 28 commits since 3.3.11 could be affecting this. I didn't notice any obvious changes in the release notes, nor in the functions that we seem to be calling. \r\n\r\nDoes anyone know a possible fruitful place to look for finding out how this is happening?\r\n\r\n\r\nEDIT -- how to recreate.\r\n\r\nI simply created a standalone pytest file, and ran a local `redis` container using an upstream container.\r\n\r\n`docker-compose.yml`\r\n```\r\nversion: \"2.1\"\r\n\r\nservices:\r\n\r\n  redis:\r\n    restart: always\r\n    image: redis:4.0\r\n    command: [\"redis-server\", \"--port\", \"${REDIS_PORT:-6379}\",\"--appendonly\", \"yes\"]\r\n    expose:\r\n      - \"${REDIS_PORT:-6379}\"\r\n    ports:\r\n      - \"${REDIS_PORT:-6379}:${REDIS_PORT:-6379}\"\r\n    volumes:\r\n      - data-redis:/data\r\n\r\n\r\nvolumes:\r\n  data-redis:\r\n```\r\n\r\nThen, alongside it, I created a file named `scratch.py`:\r\n\r\n```python\r\nimport redis\r\nimport json\r\n\r\nimport pytest\r\n\r\nLOCAL_FORWARD = \"alias:local-labels\"\r\nFORWARD_CACHE = \"alias:label-to-device\"\r\nREVERSE_CACHE = \"alias:device-to-label\"\r\n\r\ndef _add_local(pipe):\r\n    print(\"lookup\")\r\n\r\n    alias = \"alias--1\"\r\n    json_data = json.dumps({\"version\": \"v1\", \"alias\": \"alias--1\", \"target\": \"d--abcd-0000-0000-0000\", \"description\": \"a test\"})\r\n    target = \"d--abcd-0000-0000-0000\"\r\n    reverse = ['alias--1']\r\n\r\n    pipe.hset(LOCAL_FORWARD, alias, json_data)\r\n\r\n    pipe.hset(FORWARD_CACHE, alias, target)\r\n    pipe.hset(REVERSE_CACHE, target, json.dumps(reverse))\r\n\r\n\r\n\r\ndef test_this_on_for_size():\r\n\r\n    client = redis.Redis()\r\n    client.transaction(_add_local, LOCAL_FORWARD, REVERSE_CACHE, FORWARD_CACHE)\r\n```\r\n\r\nHow to run/recreate (commands run from directory with the two files above present):\r\n\r\n```shell\r\ndocker-compose up -d\r\npip install json\r\npip install redis==3.3.11\r\npytest scratch.py \r\n<test will pass almost instantly>\r\npip install redis==3.4.1\r\npytest scratch.py\r\n<test will hang>\r\npip install redis==3.3.11\r\npytest scratch.py\r\n<test will pass almost instantly>\r\n<repeat if you want to, same results>\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1278", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1278/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1278/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1278/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1278", "id": 558453427, "node_id": "MDU6SXNzdWU1NTg0NTM0Mjc=", "number": 1278, "title": "3.4.0 breaks connecting with connection URL", "user": {"login": "jbasko", "id": 632910, "node_id": "MDQ6VXNlcjYzMjkxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/632910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbasko", "html_url": "https://github.com/jbasko", "followers_url": "https://api.github.com/users/jbasko/followers", "following_url": "https://api.github.com/users/jbasko/following{/other_user}", "gists_url": "https://api.github.com/users/jbasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbasko/subscriptions", "organizations_url": "https://api.github.com/users/jbasko/orgs", "repos_url": "https://api.github.com/users/jbasko/repos", "events_url": "https://api.github.com/users/jbasko/events{/privacy}", "received_events_url": "https://api.github.com/users/jbasko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-01T01:16:37Z", "updated_at": "2020-02-01T12:23:01Z", "closed_at": "2020-02-01T12:23:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: 3.4.0\r\n\r\n**Platform**: Python 3.7.5, OS X and Linux\r\n\r\n**Description**: \r\nThis code:\r\n\r\n```\r\nimport os\r\n\r\nimport redis\r\n\r\nr = redis.StrictRedis.from_url(os.environ[\"REDIS_URL\"])\r\nprint(\"set key1 123\")\r\nprint(r.set('key1', '123'))\r\nprint(\"get key1\")\r\nprint(r.get('key1'))\r\n```\r\n\r\nraises:\r\n\r\n```\r\nset key1 123\r\nTraceback (most recent call last):\r\n  File \"scripts/test_redis.py\", line 8, in <module>\r\n    print(r.set('key1', '123'))\r\n  File \"~/.pyenv/versions/skdb/lib/python3.7/site-packages/redis/client.py\", line 1772, in set\r\n    return self.execute_command('SET', *pieces)\r\n  File \"~/.pyenv/versions/skdb/lib/python3.7/site-packages/redis/client.py\", line 881, in execute_command\r\n    conn = self.connection or pool.get_connection(command_name, **options)\r\n  File \"~/.pyenv/versions/skdb/lib/python3.7/site-packages/redis/connection.py\", line 1178, in get_connection\r\n    connection.connect()\r\n  File \"~/.pyenv/versions/skdb/lib/python3.7/site-packages/redis/connection.py\", line 559, in connect\r\n    self.on_connect()\r\n  File \"~/.pyenv/versions/skdb/lib/python3.7/site-packages/redis/connection.py\", line 633, in on_connect\r\n    if nativestr(self.read_response()) != 'OK':\r\n  File \"~/.pyenv/versions/skdb/lib/python3.7/site-packages/redis/connection.py\", line 739, in read_response\r\n    raise response\r\nredis.exceptions.ResponseError: wrong number of arguments for 'auth' command\r\n```\r\n\r\nThe connection URL is like the ones used on Heroku:\r\n`redis://h:blablabla@ec2-11-11-11-1.eu-west-1.compute.amazonaws.com:12345`\r\n\r\nDoesn't happen with 3.3.11\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1277", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1277/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1277/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1277/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1277", "id": 558366996, "node_id": "MDU6SXNzdWU1NTgzNjY5OTY=", "number": 1277, "title": "3.4.0 breaks celery 4.4.0", "user": {"login": "iblatter", "id": 1486369, "node_id": "MDQ6VXNlcjE0ODYzNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1486369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iblatter", "html_url": "https://github.com/iblatter", "followers_url": "https://api.github.com/users/iblatter/followers", "following_url": "https://api.github.com/users/iblatter/following{/other_user}", "gists_url": "https://api.github.com/users/iblatter/gists{/gist_id}", "starred_url": "https://api.github.com/users/iblatter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iblatter/subscriptions", "organizations_url": "https://api.github.com/users/iblatter/orgs", "repos_url": "https://api.github.com/users/iblatter/repos", "events_url": "https://api.github.com/users/iblatter/events{/privacy}", "received_events_url": "https://api.github.com/users/iblatter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-31T20:52:59Z", "updated_at": "2020-02-02T06:46:14Z", "closed_at": "2020-02-02T06:46:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Celery 4.4.0 using redis as broker and backend fails to start. Reverting to redis client 3.3.11 fixes the issue.\r\nRedis 3.4.0\r\nRunning on Alpine\r\n\r\nUnrecoverable error: \"TypeError(\\\"unhashable type: 'Redis'\\\")\"\r\nStack Trace:\r\nTypeError: unhashable type: 'Redis'\r\n  File \"celery/worker/worker.py\", line 205, in start\r\n    self.blueprint.start(self)\r\n  File \"celery/bootsteps.py\", line 119, in start\r\n    step.start(parent)\r\n  File \"celery/bootsteps.py\", line 369, in start\r\n    return self.obj.start()\r\n  File \"celery/worker/consumer/consumer.py\", line 318, in start\r\n    blueprint.start(self)\r\n  File \"celery/bootsteps.py\", line 119, in start\r\n    step.start(parent)\r\n  File \"celery/worker/consumer/mingle.py\", line 40, in start\r\n    self.sync(c)\r\n  File \"celery/worker/consumer/mingle.py\", line 44, in sync\r\n    replies = self.send_hello(c)\r\n  File \"celery/worker/consumer/mingle.py\", line 57, in send_hello\r\n    replies = inspect.hello(c.hostname, our_revoked._data) or {}\r\n  File \"celery/app/control.py\", line 154, in hello\r\n    return self._request('hello', from_node=from_node, revoked=revoked)\r\n  File \"celery/app/control.py\", line 106, in _request\r\n    pattern=self.pattern, matcher=self.matcher,\r\n  File \"celery/app/control.py\", line 477, in broadcast\r\n    limit, callback, channel=channel,\r\n  File \"kombu/pidbox.py\", line 352, in _broadcast\r\n    channel=chan)\r\n  File \"kombu/pidbox.py\", line 391, in _collect\r\n    self.connection.drain_events(timeout=timeout)\r\n  File \"kombu/connection.py\", line 323, in drain_events\r\n    return self.transport.drain_events(self.connection, **kwargs)\r\n  File \"kombu/transport/virtual/base.py\", line 963, in drain_events\r\n    get(self._deliver, timeout=timeout)\r\n  File \"kombu/transport/redis.py\", line 374, in get\r\n    self._register_BRPOP(channel)\r\n  File \"kombu/transport/redis.py\", line 311, in _register_BRPOP\r\n    if not self._client_registered(channel, channel.client, 'BRPOP'):\r\n  File \"kombu/transport/redis.py\", line 306, in _client_registered\r\n    (channel, client, cmd) in self._chan_to_sock)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1276", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1276/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1276/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1276/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1276", "id": 558152906, "node_id": "MDU6SXNzdWU1NTgxNTI5MDY=", "number": 1276, "title": "3.4.0 changed argument positions for constructor", "user": {"login": "bmerry", "id": 1963944, "node_id": "MDQ6VXNlcjE5NjM5NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1963944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmerry", "html_url": "https://github.com/bmerry", "followers_url": "https://api.github.com/users/bmerry/followers", "following_url": "https://api.github.com/users/bmerry/following{/other_user}", "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions", "organizations_url": "https://api.github.com/users/bmerry/orgs", "repos_url": "https://api.github.com/users/bmerry/repos", "events_url": "https://api.github.com/users/bmerry/events{/privacy}", "received_events_url": "https://api.github.com/users/bmerry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-31T14:07:41Z", "updated_at": "2020-02-03T04:07:46Z", "closed_at": "2020-01-31T20:29:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Version**: redis-py 3.4.0, redis 4.0.9\r\n\r\n**Platform**: Python 3.6.6, Ubuntu 18.04\r\n\r\n**Description**: Version 3.4.0 added an extra `username` argument to the `redis.Redis` constructor, but because it was added near the front of the list, and the arguments are not marked keyword-only, it breaks code that passes arguments to the constructor positionally.\r\n\r\nHere's a (somewhat contrived) example, that works on 3.3.11 but breaks on 3.4.0. This is the cause of jamesls/fakeredis#260.\r\n\r\n```python3\r\n#!/usr/bin/env python3\r\nimport redis\r\n\r\nr = redis.Redis('localhost', 6379, 0, None, None, None, None, None, None, None, 'utf-8')\r\nprint(r.ping())\r\n```\r\n\r\nOn 3.4.0 the 'utf-8' gets interpreted as `unix_socket_path` instead of `encoding`, leading to\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/bmerry/work/sdp/env3/lib/python3.6/site-packages/redis/connection.py\", line 550, in connect\r\n    sock = self._connect()\r\n  File \"/home/bmerry/work/sdp/env3/lib/python3.6/site-packages/redis/connection.py\", line 892, in _connect\r\n    sock.connect(self.path)\r\nFileNotFoundError: [Errno 2] No such file or directory\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./bad2.py\", line 5, in <module>\r\n    print(r.ping())\r\n  File \"/home/bmerry/work/sdp/env3/lib/python3.6/site-packages/redis/client.py\", line 1357, in ping\r\n    return self.execute_command('PING')\r\n  File \"/home/bmerry/work/sdp/env3/lib/python3.6/site-packages/redis/client.py\", line 881, in execute_command\r\n    conn = self.connection or pool.get_connection(command_name, **options)\r\n  File \"/home/bmerry/work/sdp/env3/lib/python3.6/site-packages/redis/connection.py\", line 1178, in get_connection\r\n    connection.connect()\r\n  File \"/home/bmerry/work/sdp/env3/lib/python3.6/site-packages/redis/connection.py\", line 555, in connect\r\n    raise ConnectionError(self._error_message(e))\r\nredis.exceptions.ConnectionError: Error 2 connecting to unix socket: utf-8. No such file or directory.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1275", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1275/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1275/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1275/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1275", "id": 558053726, "node_id": "MDU6SXNzdWU1NTgwNTM3MjY=", "number": 1275, "title": "Redis model does not implement __hash__.", "user": {"login": "Domol", "id": 10685999, "node_id": "MDQ6VXNlcjEwNjg1OTk5", "avatar_url": "https://avatars2.githubusercontent.com/u/10685999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Domol", "html_url": "https://github.com/Domol", "followers_url": "https://api.github.com/users/Domol/followers", "following_url": "https://api.github.com/users/Domol/following{/other_user}", "gists_url": "https://api.github.com/users/Domol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Domol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Domol/subscriptions", "organizations_url": "https://api.github.com/users/Domol/orgs", "repos_url": "https://api.github.com/users/Domol/repos", "events_url": "https://api.github.com/users/Domol/events{/privacy}", "received_events_url": "https://api.github.com/users/Domol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-31T10:43:03Z", "updated_at": "2020-02-03T10:49:37Z", "closed_at": "2020-02-02T06:46:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: 3.4.0\r\n\r\n**Platform**: Python 3.7\r\n\r\n**Description**: \r\nin the new version Redis model has `__eq__` implemented but not `__hash__`.\r\nPython docs(https://docs.python.org/3/reference/datamodel.html#object.__hash):\r\n\r\n> if it defines eq() but not hash(), its instances will not be usable as items in hashable collections.\r\n\r\n> A class that overrides __eq__() and does not define __hash__() will have its __hash__() implicitly set to None. When the __hash__() method of a class is None, instances of the class will raise an appropriate TypeError when a program attempts to retrieve their hash value, and will also be correctly identified as unhashable when checking isinstance(obj, collections.abc.Hashable).\r\n\r\n> If a class that overrides __eq__() needs to retain the implementation of __hash__() from a parent class, the interpreter must be told this explicitly by setting __hash__ = <ParentClass>.__hash__.\r\n\r\nShouldn't Redis implement `__hash__` then?\r\n\r\nThere is an issue with `kombu` related to it: https://github.com/celery/kombu/issues/1152\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1274", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1274/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1274/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1274/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1274", "id": 558018892, "node_id": "MDU6SXNzdWU1NTgwMTg4OTI=", "number": 1274, "title": "AUTH issue with version 3.4.0", "user": {"login": "sileht", "id": 200878, "node_id": "MDQ6VXNlcjIwMDg3OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/200878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sileht", "html_url": "https://github.com/sileht", "followers_url": "https://api.github.com/users/sileht/followers", "following_url": "https://api.github.com/users/sileht/following{/other_user}", "gists_url": "https://api.github.com/users/sileht/gists{/gist_id}", "starred_url": "https://api.github.com/users/sileht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sileht/subscriptions", "organizations_url": "https://api.github.com/users/sileht/orgs", "repos_url": "https://api.github.com/users/sileht/repos", "events_url": "https://api.github.com/users/sileht/events{/privacy}", "received_events_url": "https://api.github.com/users/sileht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2020-01-31T09:39:21Z", "updated_at": "2020-03-27T20:35:52Z", "closed_at": "2020-01-31T20:20:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**\r\n\r\nredis-py 3.4.0\r\nredis_version: 5.0.4 (redis-cloud on heroku)\r\n\r\n**Platform**: \r\n\r\npython 3.8 on heroku\r\n\r\n**Description**: \r\n\r\nAfter upgrading from 3.3.11 to 3.4.0 the authentication won't work anymore:\r\n\r\n```\r\n  File \"/app/mergifyio/cache.py\", line 127, in get\r\n    value = self.redis.get(key)\r\n  File \"/app/.heroku/python/lib/python3.8/site-packages/redis/client.py\", line 1585, in get\r\n    return self.execute_command('GET', name)\r\n  File \"/app/.heroku/python/lib/python3.8/site-packages/sentry_sdk/integrations/redis.py\", line 68, in sentry_patched_execute_command\r\n    return old_execute_command(self, name, *args, **kwargs)\r\n  File \"/app/.heroku/python/lib/python3.8/site-packages/redis/client.py\", line 881, in execute_command\r\n    conn = self.connection or pool.get_connection(command_name, **options)\r\n  File \"/app/.heroku/python/lib/python3.8/site-packages/redis/connection.py\", line 1178, in get_connection\r\n    connection.connect()\r\n  File \"/app/.heroku/python/lib/python3.8/site-packages/redis/connection.py\", line 559, in connect\r\n    self.on_connect()\r\n  File \"/app/.heroku/python/lib/python3.8/site-packages/redis/connection.py\", line 633, in on_connect\r\n    if nativestr(self.read_response()) != 'OK':\r\n  File \"/app/.heroku/python/lib/python3.8/site-packages/redis/connection.py\", line 739, in read_response\r\n    raise response\r\nredis.exceptions.ResponseError: wrong number of arguments for 'AUTH' command\r\n```\r\n\r\nDowngrading have workaround our issue.\r\n\r\nThe url passed to redis client looks like: \r\n\r\n`redis://rediscloud:<password>@redis-yyyyy.xxx.us-east-z-z.ec2.cloud.redislabs.com:12345`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1273", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1273/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1273/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1273/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1273", "id": 557930193, "node_id": "MDU6SXNzdWU1NTc5MzAxOTM=", "number": 1273, "title": "unhashable type: 'Redis'", "user": {"login": "Psayker", "id": 32624465, "node_id": "MDQ6VXNlcjMyNjI0NDY1", "avatar_url": "https://avatars0.githubusercontent.com/u/32624465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Psayker", "html_url": "https://github.com/Psayker", "followers_url": "https://api.github.com/users/Psayker/followers", "following_url": "https://api.github.com/users/Psayker/following{/other_user}", "gists_url": "https://api.github.com/users/Psayker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Psayker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Psayker/subscriptions", "organizations_url": "https://api.github.com/users/Psayker/orgs", "repos_url": "https://api.github.com/users/Psayker/repos", "events_url": "https://api.github.com/users/Psayker/events{/privacy}", "received_events_url": "https://api.github.com/users/Psayker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-31T05:54:17Z", "updated_at": "2020-01-31T06:11:06Z", "closed_at": "2020-01-31T06:11:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: `django-redis==4.10.0 redis==3.3.11`\r\n\r\n**Platform**: Python 3.7.4 on Calculate Linux 18.12\r\n\r\n**Description**: If i use Redis as rpc for Celery, i have problem with method `__equal__` in Redis class\r\n\r\n```\r\n[2020-01-31 14:46:05,659: CRITICAL/MainProcess] Unrecoverable error: TypeError(\"unhashable type: 'Redis'\")\r\nTraceback (most recent call last):\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/worker/worker.py\", line 205, in start\r\n    self.blueprint.start(self)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/bootsteps.py\", line 119, in start\r\n    step.start(parent)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/bootsteps.py\", line 369, in start\r\n    return self.obj.start()\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/worker/consumer/consumer.py\", line 318, in start\r\n    blueprint.start(self)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/bootsteps.py\", line 119, in start\r\n    step.start(parent)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/worker/consumer/mingle.py\", line 40, in start\r\n    self.sync(c)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/worker/consumer/mingle.py\", line 44, in sync\r\n    replies = self.send_hello(c)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/worker/consumer/mingle.py\", line 57, in send_hello\r\n    replies = inspect.hello(c.hostname, our_revoked._data) or {}\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/app/control.py\", line 154, in hello\r\n    return self._request('hello', from_node=from_node, revoked=revoked)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/app/control.py\", line 106, in _request\r\n    pattern=self.pattern, matcher=self.matcher,\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/celery/app/control.py\", line 477, in broadcast\r\n    limit, callback, channel=channel,\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/kombu/pidbox.py\", line 347, in _broadcast\r\n    channel=chan)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/kombu/pidbox.py\", line 386, in _collect\r\n    self.connection.drain_events(timeout=timeout)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/kombu/connection.py\", line 315, in drain_events\r\n    return self.transport.drain_events(self.connection, **kwargs)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/kombu/transport/virtual/base.py\", line 963, in drain_events\r\n    get(self._deliver, timeout=timeout)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/kombu/transport/redis.py\", line 366, in get\r\n    self._register_BRPOP(channel)\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/kombu/transport/redis.py\", line 311, in _register_BRPOP\r\n    if not self._client_registered(channel, channel.client, 'BRPOP'):\r\n  File \"/home/psayker/PycharmProjects/ee/py37/lib/python3.7/site-packages/kombu/transport/redis.py\", line 306, in _client_registered\r\n    (channel, client, cmd) in self._chan_to_sock)\r\nTypeError: unhashable type: 'Redis'\r\n```\r\n\r\nThis possibly because in Kombu we use `__equal__` method of `Redis` class. In `Redis` 3.3.11, all work fine.\r\nhttps://github.com/celery/kombu/blob/master/kombu/transport/redis.py#L306\r\nhttps://github.com/andymccurdy/redis-py/blob/master/redis/client.py#L749\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1269", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1269/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1269/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1269/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1269", "id": 555787261, "node_id": "MDU6SXNzdWU1NTU3ODcyNjE=", "number": 1269, "title": "hmset() uses deprecated command HMSET", "user": {"login": "mirekphd", "id": 36706320, "node_id": "MDQ6VXNlcjM2NzA2MzIw", "avatar_url": "https://avatars3.githubusercontent.com/u/36706320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mirekphd", "html_url": "https://github.com/mirekphd", "followers_url": "https://api.github.com/users/mirekphd/followers", "following_url": "https://api.github.com/users/mirekphd/following{/other_user}", "gists_url": "https://api.github.com/users/mirekphd/gists{/gist_id}", "starred_url": "https://api.github.com/users/mirekphd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mirekphd/subscriptions", "organizations_url": "https://api.github.com/users/mirekphd/orgs", "repos_url": "https://api.github.com/users/mirekphd/repos", "events_url": "https://api.github.com/users/mirekphd/events{/privacy}", "received_events_url": "https://api.github.com/users/mirekphd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-27T19:35:28Z", "updated_at": "2020-02-07T18:17:45Z", "closed_at": "2020-02-07T18:17:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Redis command HMSET is [deprecated](https://redis.io/commands/hmset) (its functionality was [moved](https://redis.io/commands/hset) to HSET command) since version 4.0.0 (July 2017) but `redis-py` still executes this deprecated command [in its hmset() function](https://redis-py.readthedocs.io/en/latest/_modules/redis/client.html#Redis.hmset). So the function should probably updated to use HSET without waiting for HMSET command to be entirely removed from Redis API.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1268", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1268/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1268/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1268/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1268", "id": 555249965, "node_id": "MDU6SXNzdWU1NTUyNDk5NjU=", "number": 1268, "title": "request to support memory_stats method", "user": {"login": "microprediction", "id": 57455669, "node_id": "MDQ6VXNlcjU3NDU1NjY5", "avatar_url": "https://avatars0.githubusercontent.com/u/57455669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/microprediction", "html_url": "https://github.com/microprediction", "followers_url": "https://api.github.com/users/microprediction/followers", "following_url": "https://api.github.com/users/microprediction/following{/other_user}", "gists_url": "https://api.github.com/users/microprediction/gists{/gist_id}", "starred_url": "https://api.github.com/users/microprediction/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/microprediction/subscriptions", "organizations_url": "https://api.github.com/users/microprediction/orgs", "repos_url": "https://api.github.com/users/microprediction/repos", "events_url": "https://api.github.com/users/microprediction/events{/privacy}", "received_events_url": "https://api.github.com/users/microprediction/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-26T16:10:10Z", "updated_at": "2020-02-25T21:32:58Z", "closed_at": "2020-02-25T21:26:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n**Version**: redis==3.3.11  (using redis labs)\r\n\r\n**Platform**: Py 3.8 \r\n\r\n**Description**: It would be nice to support the memory_stats method\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1267", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1267/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1267/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1267/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1267", "id": 555124597, "node_id": "MDU6SXNzdWU1NTUxMjQ1OTc=", "number": 1267, "title": "Unrecoverable error: TypeError(\"unhashable type: 'Redis'\")", "user": {"login": "spockoyno", "id": 18262815, "node_id": "MDQ6VXNlcjE4MjYyODE1", "avatar_url": "https://avatars2.githubusercontent.com/u/18262815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spockoyno", "html_url": "https://github.com/spockoyno", "followers_url": "https://api.github.com/users/spockoyno/followers", "following_url": "https://api.github.com/users/spockoyno/following{/other_user}", "gists_url": "https://api.github.com/users/spockoyno/gists{/gist_id}", "starred_url": "https://api.github.com/users/spockoyno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spockoyno/subscriptions", "organizations_url": "https://api.github.com/users/spockoyno/orgs", "repos_url": "https://api.github.com/users/spockoyno/repos", "events_url": "https://api.github.com/users/spockoyno/events{/privacy}", "received_events_url": "https://api.github.com/users/spockoyno/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-25T19:07:18Z", "updated_at": "2020-01-31T13:35:09Z", "closed_at": "2020-01-26T08:07:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n**Version**: > 3.3.11 (current master)\r\n\r\n**Platform**:  Python 3.7.1 and 3.8.1 on MacOS 10.14.6, Celery 4.4.0, Redis 5.0.7, Pycharm 2019.3\r\n\r\n**Description**: I have a Celery app setup with a redis broker and backend. Running celery worker gives me the error. Using the previous  v3.3.11 in Python 3.7.1 works fine. \r\nThanks!\r\n\r\n![StackTrace](https://user-images.githubusercontent.com/18262815/73126037-8ca50480-3fa5-11ea-94ec-d21fdf9740ba.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1265", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1265/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1265/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1265/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1265", "id": 554468482, "node_id": "MDU6SXNzdWU1NTQ0Njg0ODI=", "number": 1265, "title": "Support memoryviews instead of explicitly requiring data to be bytes type", "user": {"login": "Cody-G", "id": 5176452, "node_id": "MDQ6VXNlcjUxNzY0NTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5176452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cody-G", "html_url": "https://github.com/Cody-G", "followers_url": "https://api.github.com/users/Cody-G/followers", "following_url": "https://api.github.com/users/Cody-G/following{/other_user}", "gists_url": "https://api.github.com/users/Cody-G/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cody-G/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cody-G/subscriptions", "organizations_url": "https://api.github.com/users/Cody-G/orgs", "repos_url": "https://api.github.com/users/Cody-G/repos", "events_url": "https://api.github.com/users/Cody-G/events{/privacy}", "received_events_url": "https://api.github.com/users/Cody-G/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-23T23:35:13Z", "updated_at": "2020-02-24T23:39:59Z", "closed_at": "2020-02-24T23:39:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Version**: master\r\n**Platform**: Python 3.6.1 Ubuntu 18.04\r\n**Description**: memoryview objects are currently unsupported\r\n\r\nSince Python's [memoryview](https://docs.python.org/3/library/stdtypes.html#memoryview) objects support Python's [buffer protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects) I think it makes sense for redis-py to accept memoryviews instead of explicitly requiring bytes types.  This can eliminate an unnecessary memory copy incurred by calling `tobytes()` on a memoryview.  In our case this is useful for interfacing with libraries like [pyarrow](https://arrow.apache.org/docs/python/).  This is just a one-line change since Python sockets already support memoryviews, I'll make a PR shortly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1264", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1264/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1264/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1264/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1264", "id": 554444004, "node_id": "MDU6SXNzdWU1NTQ0NDQwMDQ=", "number": 1264, "title": "Official support for Python 3.8", "user": {"login": "spockoyno", "id": 18262815, "node_id": "MDQ6VXNlcjE4MjYyODE1", "avatar_url": "https://avatars2.githubusercontent.com/u/18262815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spockoyno", "html_url": "https://github.com/spockoyno", "followers_url": "https://api.github.com/users/spockoyno/followers", "following_url": "https://api.github.com/users/spockoyno/following{/other_user}", "gists_url": "https://api.github.com/users/spockoyno/gists{/gist_id}", "starred_url": "https://api.github.com/users/spockoyno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spockoyno/subscriptions", "organizations_url": "https://api.github.com/users/spockoyno/orgs", "repos_url": "https://api.github.com/users/spockoyno/repos", "events_url": "https://api.github.com/users/spockoyno/events{/privacy}", "received_events_url": "https://api.github.com/users/spockoyno/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-23T22:27:53Z", "updated_at": "2020-01-23T22:46:57Z", "closed_at": "2020-01-23T22:46:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "The redis-py version (3.3.11) on pypi seems to support up to Python 3.7. Just wondering if there's a roadmap for official support for Python 3.8. Thanks! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1261", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1261/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1261/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1261/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1261", "id": 553557632, "node_id": "MDU6SXNzdWU1NTM1NTc2MzI=", "number": 1261, "title": "ConnectionError when channel holds many messages each below buffer limit", "user": {"login": "kunadawa", "id": 310578, "node_id": "MDQ6VXNlcjMxMDU3OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/310578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kunadawa", "html_url": "https://github.com/kunadawa", "followers_url": "https://api.github.com/users/kunadawa/followers", "following_url": "https://api.github.com/users/kunadawa/following{/other_user}", "gists_url": "https://api.github.com/users/kunadawa/gists{/gist_id}", "starred_url": "https://api.github.com/users/kunadawa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kunadawa/subscriptions", "organizations_url": "https://api.github.com/users/kunadawa/orgs", "repos_url": "https://api.github.com/users/kunadawa/repos", "events_url": "https://api.github.com/users/kunadawa/events{/privacy}", "received_events_url": "https://api.github.com/users/kunadawa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-22T13:56:17Z", "updated_at": "2020-01-29T12:35:20Z", "closed_at": "2020-01-27T22:30:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: What redis-py and what redis version is the issue happening on?\r\n* redis-py - 3.3.11\r\n* redis - 5:4.0.9-1ubuntu0.2\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\n`Python 3.7.5 on Ubuntu 18.04.2`\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n\r\nWhen I publish many messages to a channel (each of them below the pubsub buffer limit) I get a connection closed error in python and `subscribe scheduled to be closed ASAP for overcoming of output buffer limits` in the redis log.\r\n\r\nI resolved the error by setting `client-output-buffer-limit pubsub 0 0 0` in redis.conf. Is there an alternative configuration or work around to this?\r\n\r\nPlease my test case here - https://github.com/kunadawa/video-object-detection/commit/76913165a6517784dc6c60b5bf300cff0b0ae9bf", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1260", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1260/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1260/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1260/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1260", "id": 552190470, "node_id": "MDU6SXNzdWU1NTIxOTA0NzA=", "number": 1260, "title": "a new release of zipp breaks installation", "user": {"login": "GergelyKalmar", "id": 5601876, "node_id": "MDQ6VXNlcjU2MDE4NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5601876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GergelyKalmar", "html_url": "https://github.com/GergelyKalmar", "followers_url": "https://api.github.com/users/GergelyKalmar/followers", "following_url": "https://api.github.com/users/GergelyKalmar/following{/other_user}", "gists_url": "https://api.github.com/users/GergelyKalmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/GergelyKalmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GergelyKalmar/subscriptions", "organizations_url": "https://api.github.com/users/GergelyKalmar/orgs", "repos_url": "https://api.github.com/users/GergelyKalmar/repos", "events_url": "https://api.github.com/users/GergelyKalmar/events{/privacy}", "received_events_url": "https://api.github.com/users/GergelyKalmar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-20T09:56:20Z", "updated_at": "2020-01-21T08:40:27Z", "closed_at": "2020-01-21T08:40:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been trying to install redis-py on Ubuntu 16.04 LTS (has Python 3.5.2), however, the installation breaks:\r\n\r\n```\r\npip install redis\r\n...\r\nERROR: Package 'zipp' requires a different Python: 3.5.2 not in '>=3.6'\r\n```\r\n\r\nIt seems there has been a [new version of zipp](https://pypi.org/project/zipp/#history) released about 10 hours ago that causes the problem by requiring Python 3.6+. A workaround for now is pinning to `zipp==1.0.0`, which seems to resolve the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1259", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1259/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1259/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1259/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1259", "id": 551909919, "node_id": "MDU6SXNzdWU1NTE5MDk5MTk=", "number": 1259, "title": "why get_message() return None when I use the custom callback functions to handle published messages?", "user": {"login": "Adhders", "id": 33727211, "node_id": "MDQ6VXNlcjMzNzI3MjEx", "avatar_url": "https://avatars3.githubusercontent.com/u/33727211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Adhders", "html_url": "https://github.com/Adhders", "followers_url": "https://api.github.com/users/Adhders/followers", "following_url": "https://api.github.com/users/Adhders/following{/other_user}", "gists_url": "https://api.github.com/users/Adhders/gists{/gist_id}", "starred_url": "https://api.github.com/users/Adhders/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Adhders/subscriptions", "organizations_url": "https://api.github.com/users/Adhders/orgs", "repos_url": "https://api.github.com/users/Adhders/repos", "events_url": "https://api.github.com/users/Adhders/events{/privacy}", "received_events_url": "https://api.github.com/users/Adhders/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-19T11:39:47Z", "updated_at": "2020-01-19T16:35:46Z", "closed_at": "2020-01-19T16:35:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "get_message() return None when I use the custom callback functions whose return value is not None  , How can I accquire the return value from the custom callback functions ?\r\nI have tried  get_message, parse_response and listen ,but all can't get return value!\r\n\r\n**` \r\n  def my_handler(message):\r\n      print(message)\r\n      return \"ok\"\r\n`\r\np.subscribe(**{'my-channel': my_handler})\r\n>>> message = p.get_message()\r\n>>> print message\r\nNone**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1258", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1258/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1258/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1258/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1258", "id": 548519812, "node_id": "MDU6SXNzdWU1NDg1MTk4MTI=", "number": 1258, "title": "Why use pair[1] as the score instead of pair[0]?", "user": {"login": "vistart", "id": 864657, "node_id": "MDQ6VXNlcjg2NDY1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/864657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vistart", "html_url": "https://github.com/vistart", "followers_url": "https://api.github.com/users/vistart/followers", "following_url": "https://api.github.com/users/vistart/following{/other_user}", "gists_url": "https://api.github.com/users/vistart/gists{/gist_id}", "starred_url": "https://api.github.com/users/vistart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vistart/subscriptions", "organizations_url": "https://api.github.com/users/vistart/orgs", "repos_url": "https://api.github.com/users/vistart/repos", "events_url": "https://api.github.com/users/vistart/events{/privacy}", "received_events_url": "https://api.github.com/users/vistart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-12T04:31:02Z", "updated_at": "2020-01-12T04:57:09Z", "closed_at": "2020-01-12T04:57:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/andymccurdy/redis-py/blob/272d3139e1c82c2d89551f87d12df7c18d938ea2/redis/client.py#L2642\r\n\r\nIsn't it the mapping key as the score?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1252", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1252/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1252/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1252/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1252", "id": 534387968, "node_id": "MDU6SXNzdWU1MzQzODc5Njg=", "number": 1252, "title": "Fix simple typo: recurrsion -> recursion", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-07T11:06:06Z", "updated_at": "2019-12-07T22:35:20Z", "closed_at": "2019-12-07T22:35:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in redis/connection.py.\nShould read recursion rather than recurrsion.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1250", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1250/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1250/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1250/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1250", "id": 526397292, "node_id": "MDU6SXNzdWU1MjYzOTcyOTI=", "number": 1250, "title": "[Question] redis.exceptions.ConnectionError: Error while reading from socket: (54, 'Connection reset by peer')", "user": {"login": "tony-is-coding", "id": 34122761, "node_id": "MDQ6VXNlcjM0MTIyNzYx", "avatar_url": "https://avatars0.githubusercontent.com/u/34122761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tony-is-coding", "html_url": "https://github.com/tony-is-coding", "followers_url": "https://api.github.com/users/tony-is-coding/followers", "following_url": "https://api.github.com/users/tony-is-coding/following{/other_user}", "gists_url": "https://api.github.com/users/tony-is-coding/gists{/gist_id}", "starred_url": "https://api.github.com/users/tony-is-coding/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tony-is-coding/subscriptions", "organizations_url": "https://api.github.com/users/tony-is-coding/orgs", "repos_url": "https://api.github.com/users/tony-is-coding/repos", "events_url": "https://api.github.com/users/tony-is-coding/events{/privacy}", "received_events_url": "https://api.github.com/users/tony-is-coding/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-21T06:43:57Z", "updated_at": "2020-01-17T18:41:39Z", "closed_at": "2020-01-17T18:41:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi, i need help, it was suddenly happend to my program that was never before, i would think \bit beause of too many connections make the connectionpool overflowed, but i can not find how to deal it , pls help me!!\r\n\r\n![image](https://user-images.githubusercontent.com/34122761/69313718-537eaa00-0c6d-11ea-9e73-9cfb0a37771d.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1248", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1248/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1248/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1248/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1248", "id": 524111072, "node_id": "MDU6SXNzdWU1MjQxMTEwNzI=", "number": 1248, "title": "Exception Catching ", "user": {"login": "the-c0d3r", "id": 4526565, "node_id": "MDQ6VXNlcjQ1MjY1NjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/4526565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the-c0d3r", "html_url": "https://github.com/the-c0d3r", "followers_url": "https://api.github.com/users/the-c0d3r/followers", "following_url": "https://api.github.com/users/the-c0d3r/following{/other_user}", "gists_url": "https://api.github.com/users/the-c0d3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/the-c0d3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the-c0d3r/subscriptions", "organizations_url": "https://api.github.com/users/the-c0d3r/orgs", "repos_url": "https://api.github.com/users/the-c0d3r/repos", "events_url": "https://api.github.com/users/the-c0d3r/events{/privacy}", "received_events_url": "https://api.github.com/users/the-c0d3r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-18T03:21:11Z", "updated_at": "2019-11-20T09:04:52Z", "closed_at": "2019-11-20T09:04:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: 3.3.11\r\n\r\n**Description**: `catching classes that do not inherit from BaseException is not allowed`\r\n\r\n**Sample code**\r\n\r\n```python\r\ntry:\r\n    r = redis.Redis(...)\r\nexcept redis.exceptions as error:\r\n    print(\"Operation failed due to error: \", error)\r\n```\r\n\r\nThis way of catching exceptions return an exception from python complaining the aforementioned exception message. I know that one can catch it as a broad `Exception` and check the erorr type, but that is a very broad exception. Is there any way to catch all the exceptions under `redis.exceptions`? I think this can be resolved if the `exceptions` in `redis/exceptions.py` are inheriting from `BaseException` class. \r\n\r\nPlease let me know your thoughts on this, how to catch all the redis exceptions. I can put up a PR if my solution is deemed to be correct. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1247", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1247/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1247/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1247/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1247", "id": 523237781, "node_id": "MDU6SXNzdWU1MjMyMzc3ODE=", "number": 1247, "title": "where did you reduced the value of _created_connections", "user": {"login": "wuxie2015", "id": 10534495, "node_id": "MDQ6VXNlcjEwNTM0NDk1", "avatar_url": "https://avatars3.githubusercontent.com/u/10534495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wuxie2015", "html_url": "https://github.com/wuxie2015", "followers_url": "https://api.github.com/users/wuxie2015/followers", "following_url": "https://api.github.com/users/wuxie2015/following{/other_user}", "gists_url": "https://api.github.com/users/wuxie2015/gists{/gist_id}", "starred_url": "https://api.github.com/users/wuxie2015/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wuxie2015/subscriptions", "organizations_url": "https://api.github.com/users/wuxie2015/orgs", "repos_url": "https://api.github.com/users/wuxie2015/repos", "events_url": "https://api.github.com/users/wuxie2015/events{/privacy}", "received_events_url": "https://api.github.com/users/wuxie2015/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-15T03:51:55Z", "updated_at": "2019-11-15T04:20:15Z", "closed_at": "2019-11-15T04:20:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/andymccurdy/redis-py/blob/656b551eb247c491976646092a71320407c0fa03/redis/connection.py#L1112\r\n\r\n`def make_connection(self):\r\n        \"Create a new connection\"\r\n        if self._created_connections >= self.max_connections:\r\n            raise ConnectionError(\"Too many connections\")\r\n        self._created_connections += 1\r\n        return self.connection_class(**self.connection_kwargs)\r\n\r\n    def release(self, connection):\r\n        \"Releases the connection back to the pool\"\r\n        self._checkpid()\r\n        if connection.pid != self.pid:\r\n            return\r\n        self._in_use_connections.remove(connection)\r\n        self._available_connections.append(connection)`\r\nsince you increased the value of self._created_connections but didn't reduce it in self.release(connection) , also I didn't see its value has been reduced in anywhre ,where did you reduced the value of _created_connections?  if you hadn't reduced the value of self._created_connections,how did you make sure that method make_connection run without exception?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1238", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1238/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1238/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1238/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1238", "id": 517811045, "node_id": "MDU6SXNzdWU1MTc4MTEwNDU=", "number": 1238, "title": "slowlog_get() raises TypeError when decode_responses=True", "user": {"login": "jakob-keller", "id": 57402305, "node_id": "MDQ6VXNlcjU3NDAyMzA1", "avatar_url": "https://avatars1.githubusercontent.com/u/57402305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakob-keller", "html_url": "https://github.com/jakob-keller", "followers_url": "https://api.github.com/users/jakob-keller/followers", "following_url": "https://api.github.com/users/jakob-keller/following{/other_user}", "gists_url": "https://api.github.com/users/jakob-keller/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakob-keller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakob-keller/subscriptions", "organizations_url": "https://api.github.com/users/jakob-keller/orgs", "repos_url": "https://api.github.com/users/jakob-keller/repos", "events_url": "https://api.github.com/users/jakob-keller/events{/privacy}", "received_events_url": "https://api.github.com/users/jakob-keller/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-05T14:34:41Z", "updated_at": "2019-11-11T22:58:17Z", "closed_at": "2019-11-11T22:58:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Version**: redis-py 3.3.11 and AWS ElastiCache Redis 5.0.5 (Cluster mode off, 1 shard, 2 nodes)\r\n\r\n**Platform**: Python 3.7.5 on macOS Catalina 10.15.1\r\n\r\n**Description**: Calling slowlog_get() on a redis.Redis client instance with decode_responses=True raises a TypeError: \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/Users/.../lib/python3.7/site-packages/redis/client.py\", line 1192, in slowlog_get\r\n    return self.execute_command(*args)\r\n  File \"/Users/.../lib/python3.7/site-packages/redis/client.py\", line 839, in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\n  File \"/Users/.../lib/python3.7/site-packages/redis/client.py\", line 859, in parse_response\r\n    return self.response_callbacks[command_name](response, **options)\r\n  File \"/Users/.../lib/python3.7/site-packages/redis/client.py\", line 397, in parse_slowlog_get\r\n    } for item in response]\r\n  File \"/Users/.../lib/python3.7/site-packages/redis/client.py\", line 397, in <listcomp>\r\n    } for item in response]\r\nTypeError: sequence item 0: expected a bytes-like object, str found\r\n```\r\n\r\nThe command executes just fine when decode_responses=False (default).\r\n\r\nAs a preliminary work-around, I replaced the type of whitespace used on [line 396 in parse_slowlog_get() of client.py](https://github.com/andymccurdy/redis-py/blob/29f4aa43aec50ae0e28df4d3fadfcb17cebe2a2f/redis/client.py#L396) (bytes -> str):\r\n`'command': ' '.join(item[3])` (remove `b`)\r\n\r\nOf course, this no longer handles the default case (decode_responses=False).\r\n\r\nThere are various ways to address this issue, including:\r\n1. Somehow pass the value of decode_responses and substitute b' ' by ' ' where appropriate (is this relevant in other places, too?)\r\n2. Determine type of list members (bytes vs. str) and use appropriate whitespace type\r\n3. Optimistically keep the current implementation, but wrap it in a try-except block and retry with alternative implementation on exception\r\n\r\nI am leaning towards option 1 and would be willing to create a PR, if it helps. Since I'm a noob here, it would help if you could point me to a similar issue for guidance. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1235", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1235/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1235/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1235/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1235", "id": 512048653, "node_id": "MDU6SXNzdWU1MTIwNDg2NTM=", "number": 1235, "title": "Connections is CLOSE_WAIT state", "user": {"login": "aasifalam", "id": 30460915, "node_id": "MDQ6VXNlcjMwNDYwOTE1", "avatar_url": "https://avatars2.githubusercontent.com/u/30460915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aasifalam", "html_url": "https://github.com/aasifalam", "followers_url": "https://api.github.com/users/aasifalam/followers", "following_url": "https://api.github.com/users/aasifalam/following{/other_user}", "gists_url": "https://api.github.com/users/aasifalam/gists{/gist_id}", "starred_url": "https://api.github.com/users/aasifalam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aasifalam/subscriptions", "organizations_url": "https://api.github.com/users/aasifalam/orgs", "repos_url": "https://api.github.com/users/aasifalam/repos", "events_url": "https://api.github.com/users/aasifalam/events{/privacy}", "received_events_url": "https://api.github.com/users/aasifalam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-10-24T16:19:38Z", "updated_at": "2020-07-07T10:50:03Z", "closed_at": "2020-07-07T10:50:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nredis-py-cluster = 1.3.6\r\nserver = 4.0.14\r\nredis = 2.10.6\r\nUbuntu (Kubernetes POD)\r\n\r\nwe are seeing many connection at the application in CLOSE_WAIT state. So many that application pod runs of all the file descriptors. Restart is the only option.\r\nAt the Redis server there are no dangling connection to the clients however. We are seeing this issue with multiple application clients.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1233", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1233/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1233/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1233/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1233", "id": 511270275, "node_id": "MDU6SXNzdWU1MTEyNzAyNzU=", "number": 1233, "title": "execute() doesn't send EXEC if no commands are queued", "user": {"login": "brianmaissy", "id": 622989, "node_id": "MDQ6VXNlcjYyMjk4OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/622989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianmaissy", "html_url": "https://github.com/brianmaissy", "followers_url": "https://api.github.com/users/brianmaissy/followers", "following_url": "https://api.github.com/users/brianmaissy/following{/other_user}", "gists_url": "https://api.github.com/users/brianmaissy/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianmaissy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianmaissy/subscriptions", "organizations_url": "https://api.github.com/users/brianmaissy/orgs", "repos_url": "https://api.github.com/users/brianmaissy/repos", "events_url": "https://api.github.com/users/brianmaissy/events{/privacy}", "received_events_url": "https://api.github.com/users/brianmaissy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-23T11:49:49Z", "updated_at": "2019-10-24T08:15:41Z", "closed_at": "2019-10-24T08:15:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: redis 5.0.4, redis-py 3.3.6\r\n**Platform**: Python 3.6.8 on Ubuntu 18.04\r\n**Description**: When calling `execute()` on a pipeline (created with `transaction=True`), the EXEC is never sent if no commands are queued. While at first glance this makes sense as an optimization (why send an empty pipeline to the server?), in fact the EXEC might still have a purpose: to check if any of the WATCHed keys have since been modified.\r\n\r\nFor example, under normal conditions:\r\n```\r\npipe = r.pipeline()\r\npipe.watch('foo')\r\nr.set('foo', 'bar')\r\npipe.multi()\r\npipe.get('bar')\r\npipe.execute()  # raises WatchError\r\n```\r\nHowever, if we don't run the `pipe.get('bar')`, the EXEC never gets sent:\r\n```\r\npipe = r.pipeline()\r\npipe.watch('foo')\r\nr.set('foo', 'bar')\r\npipe.multi()\r\npipe.execute()  # returns []\r\n```\r\n\r\nIt's easy to see that this is caused by this short-circuit check on line 3673 of client.py:\r\nhttps://github.com/andymccurdy/redis-py/blob/fa0b0392c86126cae1a264197dddab647fa37821/redis/client.py#L3670-L3674\r\nWhich, based on the git blame, looks like it was done based on the discussion here: https://github.com/andymccurdy/redis-py/issues/362\r\n\r\nBut it seems to me that if `pipe.watch()` has been called, we can't short circuit and must run the EXEC to see if the transaction succeeded or failed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1226", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1226/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1226/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1226/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1226", "id": 508430816, "node_id": "MDU6SXNzdWU1MDg0MzA4MTY=", "number": 1226, "title": "[3.3.11] some test fails", "user": {"login": "tuxmaster5000", "id": 837503, "node_id": "MDQ6VXNlcjgzNzUwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/837503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuxmaster5000", "html_url": "https://github.com/tuxmaster5000", "followers_url": "https://api.github.com/users/tuxmaster5000/followers", "following_url": "https://api.github.com/users/tuxmaster5000/following{/other_user}", "gists_url": "https://api.github.com/users/tuxmaster5000/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuxmaster5000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuxmaster5000/subscriptions", "organizations_url": "https://api.github.com/users/tuxmaster5000/orgs", "repos_url": "https://api.github.com/users/tuxmaster5000/repos", "events_url": "https://api.github.com/users/tuxmaster5000/events{/privacy}", "received_events_url": "https://api.github.com/users/tuxmaster5000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-17T12:08:04Z", "updated_at": "2019-10-18T07:47:55Z", "closed_at": "2019-10-18T07:47:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Environment: CentOS 7.7, Python 3.6, Redis 3.2.12 \r\nHere the log:\r\n cd /builddir/build/BUILD\r\n+ cd redis-3.3.11\r\n+ /usr/bin/python3 setup.py test\r\n+ redis-server\r\n149:C 17 Oct 14:03:50.560 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf\r\n149:M 17 Oct 14:03:50.561 # You requested maxclients of 10000 requiring at least 10032 max file descriptors.\r\n149:M 17 Oct 14:03:50.561 # Server can't set maximum open files to 10032 because of OS error: Operation not permitted.\r\n149:M 17 Oct 14:03:50.561 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'.\r\n                _._                                                  \r\n           _.-``__ ''-._                                             \r\n      _.-``    `.  `_.  ''-._           Redis 3.2.12 (00000000/0) 64 bit\r\n  .-`` .-```.  ```\\/    _.,_ ''-._                                   \r\n (    '      ,       .-`  | `,    )     Running in standalone mode\r\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379\r\n |    `-._   `._    /     _.-'    |     PID: 149\r\n  `-._    `-._  `-./  _.-'    _.-'                                   \r\n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \r\n |    `-._`-._        _.-'_.-'    |           http://redis.io        \r\n  `-._    `-._`-.__.-'_.-'    _.-'                                   \r\n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \r\n |    `-._`-._        _.-'_.-'    |                                  \r\n  `-._    `-._`-.__.-'_.-'    _.-'                                   \r\n      `-._    `-.__.-'    _.-'                                       \r\n          `-._        _.-'                                           \r\n              `-.__.-'                                               \r\n\r\n149:M 17 Oct 14:03:50.562 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.\r\n149:M 17 Oct 14:03:50.562 # Server started, Redis version 3.2.12\r\n149:M 17 Oct 14:03:50.562 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\r\n149:M 17 Oct 14:03:50.562 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.\r\n149:M 17 Oct 14:03:50.562 * The server is now ready to accept connections on port 6379\r\nrunning test\r\nrunning egg_info\r\nwriting redis.egg-info/PKG-INFO\r\nwriting dependency_links to redis.egg-info/dependency_links.txt\r\nwriting requirements to redis.egg-info/requires.txt\r\nwriting top-level names to redis.egg-info/top_level.txt\r\nreading manifest file 'redis.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwarning: no previously-included files found matching '__pycache__'\r\nwarning: no previously-included files matching '*.pyc' found under directory 'tests'\r\nwriting manifest file 'redis.egg-info/SOURCES.txt'\r\nrunning build_ext\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.6.8, pytest-4.6.3, py-1.8.0, pluggy-0.12.0\r\nrootdir: /builddir/build/BUILD/redis-3.3.11\r\nplugins: cov-2.7.1, hypothesis-3.12.0\r\ncollected 437 items\r\n\r\ntests/test_commands.py ....sss...................................ss..... [ 11%]\r\n........................................................................ [ 27%]\r\n...........................ssss......................................... [ 44%]\r\n..................................s..........ssssssssssssssssssss.s..... [ 60%]\r\n                                                                         [ 60%]\r\ntests/test_connection_pool.py .......................................... [ 70%]\r\n...............                                                          [ 73%]\r\ntests/test_encoding.py ........                                          [ 75%]\r\ntests/test_lock.py ........................                              [ 81%]\r\ntests/test_monitor.py FFFFF                                              [ 82%]\r\ntests/test_multiprocessing.py .........                                  [ 84%]\r\ntests/test_pipeline.py .................                                 [ 88%]\r\ntests/test_pubsub.py .................................                   [ 95%]\r\ntests/test_scripting.py .......                                          [ 97%]\r\ntests/test_sentinel.py ............                                      [100%]\r\n\r\n=================================== FAILURES ===================================\r\n___________________ TestPipeline.test_wait_command_not_found ___________________\r\n\r\nself = <tests.test_monitor.TestPipeline object at 0x7fe27ec65f60>\r\nr = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=9>>>\r\n\r\n    def test_wait_command_not_found(self, r):\r\n        \"Make sure the wait_for_command func works when command is not found\"\r\n        with r.monitor() as m:\r\n>           response = wait_for_command(r, m, 'nothing')\r\n\r\ntests/test_monitor.py:23: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/test_monitor.py:9: in wait_for_command\r\n    key = '__REDIS-PY-%s__' % str(client.client_id())\r\nredis/client.py:934: in client_id\r\n    return self.execute_command('CLIENT ID')\r\nredis/client.py:839: in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\nredis/client.py:853: in parse_response\r\n    response = connection.read_response()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = Connection<host=localhost,port=6379,db=9>\r\n\r\n    def read_response(self):\r\n        \"Read the response from a previously sent command\"\r\n        try:\r\n            response = self._parser.read_response()\r\n        except socket.timeout:\r\n            self.disconnect()\r\n            raise TimeoutError(\"Timeout reading from %s:%s\" %\r\n                               (self.host, self.port))\r\n        except socket.error:\r\n            self.disconnect()\r\n            e = sys.exc_info()[1]\r\n            raise ConnectionError(\"Error while reading from %s:%s : %s\" %\r\n                                  (self.host, self.port, e.args))\r\n        except:  # noqa: E722\r\n            self.disconnect()\r\n            raise\r\n    \r\n        if self.health_check_interval:\r\n            self.next_health_check = time() + self.health_check_interval\r\n    \r\n        if isinstance(response, ResponseError):\r\n>           raise response\r\nE           redis.exceptions.ResponseError: Syntax error, try CLIENT (LIST | KILL | GETNAME | SETNAME | PAUSE | REPLY)\r\n\r\nredis/connection.py:718: ResponseError\r\n______________________ TestPipeline.test_response_values _______________________\r\n\r\nself = <tests.test_monitor.TestPipeline object at 0x7fe27ec69c50>\r\nr = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=9>>>\r\n\r\n    def test_response_values(self, r):\r\n        with r.monitor() as m:\r\n            r.ping()\r\n>           response = wait_for_command(r, m, 'PING')\r\n\r\ntests/test_monitor.py:29: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/test_monitor.py:9: in wait_for_command\r\n    key = '__REDIS-PY-%s__' % str(client.client_id())\r\nredis/client.py:934: in client_id\r\n    return self.execute_command('CLIENT ID')\r\nredis/client.py:839: in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\nredis/client.py:853: in parse_response\r\n    response = connection.read_response()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = Connection<host=localhost,port=6379,db=9>\r\n\r\n    def read_response(self):\r\n        \"Read the response from a previously sent command\"\r\n        try:\r\n            response = self._parser.read_response()\r\n        except socket.timeout:\r\n            self.disconnect()\r\n            raise TimeoutError(\"Timeout reading from %s:%s\" %\r\n                               (self.host, self.port))\r\n        except socket.error:\r\n            self.disconnect()\r\n            e = sys.exc_info()[1]\r\n            raise ConnectionError(\"Error while reading from %s:%s : %s\" %\r\n                                  (self.host, self.port, e.args))\r\n        except:  # noqa: E722\r\n            self.disconnect()\r\n            raise\r\n    \r\n        if self.health_check_interval:\r\n            self.next_health_check = time() + self.health_check_interval\r\n    \r\n        if isinstance(response, ResponseError):\r\n>           raise response\r\nE           redis.exceptions.ResponseError: Syntax error, try CLIENT (LIST | KILL | GETNAME | SETNAME | PAUSE | REPLY)\r\n\r\nredis/connection.py:718: ResponseError\r\n__________________ TestPipeline.test_command_with_quoted_key ___________________\r\n\r\nself = <tests.test_monitor.TestPipeline object at 0x7fe27ec536a0>\r\nr = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=9>>>\r\n\r\n    def test_command_with_quoted_key(self, r):\r\n        with r.monitor() as m:\r\n            r.get('foo\"bar')\r\n>           response = wait_for_command(r, m, 'GET foo\"bar')\r\n\r\ntests/test_monitor.py:40: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/test_monitor.py:9: in wait_for_command\r\n    key = '__REDIS-PY-%s__' % str(client.client_id())\r\nredis/client.py:934: in client_id\r\n    return self.execute_command('CLIENT ID')\r\nredis/client.py:839: in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\nredis/client.py:853: in parse_response\r\n    response = connection.read_response()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = Connection<host=localhost,port=6379,db=9>\r\n\r\n    def read_response(self):\r\n        \"Read the response from a previously sent command\"\r\n        try:\r\n            response = self._parser.read_response()\r\n        except socket.timeout:\r\n            self.disconnect()\r\n            raise TimeoutError(\"Timeout reading from %s:%s\" %\r\n                               (self.host, self.port))\r\n        except socket.error:\r\n            self.disconnect()\r\n            e = sys.exc_info()[1]\r\n            raise ConnectionError(\"Error while reading from %s:%s : %s\" %\r\n                                  (self.host, self.port, e.args))\r\n        except:  # noqa: E722\r\n            self.disconnect()\r\n            raise\r\n    \r\n        if self.health_check_interval:\r\n            self.next_health_check = time() + self.health_check_interval\r\n    \r\n        if isinstance(response, ResponseError):\r\n>           raise response\r\nE           redis.exceptions.ResponseError: Syntax error, try CLIENT (LIST | KILL | GETNAME | SETNAME | PAUSE | REPLY)\r\n\r\nredis/connection.py:718: ResponseError\r\n__________________ TestPipeline.test_command_with_binary_data __________________\r\n\r\nself = <tests.test_monitor.TestPipeline object at 0x7fe27f9f55c0>\r\nr = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=9>>>\r\n\r\n    def test_command_with_binary_data(self, r):\r\n        with r.monitor() as m:\r\n            byte_string = b'foo\\x92'\r\n            r.get(byte_string)\r\n>           response = wait_for_command(r, m, 'GET foo\\\\x92')\r\n\r\ntests/test_monitor.py:47: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/test_monitor.py:9: in wait_for_command\r\n    key = '__REDIS-PY-%s__' % str(client.client_id())\r\nredis/client.py:934: in client_id\r\n    return self.execute_command('CLIENT ID')\r\nredis/client.py:839: in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\nredis/client.py:853: in parse_response\r\n    response = connection.read_response()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = Connection<host=localhost,port=6379,db=9>\r\n\r\n    def read_response(self):\r\n        \"Read the response from a previously sent command\"\r\n        try:\r\n            response = self._parser.read_response()\r\n        except socket.timeout:\r\n            self.disconnect()\r\n            raise TimeoutError(\"Timeout reading from %s:%s\" %\r\n                               (self.host, self.port))\r\n        except socket.error:\r\n            self.disconnect()\r\n            e = sys.exc_info()[1]\r\n            raise ConnectionError(\"Error while reading from %s:%s : %s\" %\r\n                                  (self.host, self.port, e.args))\r\n        except:  # noqa: E722\r\n            self.disconnect()\r\n            raise\r\n    \r\n        if self.health_check_interval:\r\n            self.next_health_check = time() + self.health_check_interval\r\n    \r\n        if isinstance(response, ResponseError):\r\n>           raise response\r\nE           redis.exceptions.ResponseError: Syntax error, try CLIENT (LIST | KILL | GETNAME | SETNAME | PAUSE | REPLY)\r\n\r\nredis/connection.py:718: ResponseError\r\n_________________________ TestPipeline.test_lua_script _________________________\r\n\r\nself = <tests.test_monitor.TestPipeline object at 0x7fe27ec74160>\r\nr = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=9>>>\r\n\r\n    def test_lua_script(self, r):\r\n        with r.monitor() as m:\r\n            script = 'return redis.call(\"GET\", \"foo\")'\r\n            assert r.eval(script, 0) is None\r\n>           response = wait_for_command(r, m, 'GET foo')\r\n\r\ntests/test_monitor.py:54: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/test_monitor.py:9: in wait_for_command\r\n    key = '__REDIS-PY-%s__' % str(client.client_id())\r\nredis/client.py:934: in client_id\r\n    return self.execute_command('CLIENT ID')\r\nredis/client.py:839: in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\nredis/client.py:853: in parse_response\r\n    response = connection.read_response()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = Connection<host=localhost,port=6379,db=9>\r\n\r\n    def read_response(self):\r\n        \"Read the response from a previously sent command\"\r\n        try:\r\n            response = self._parser.read_response()\r\n        except socket.timeout:\r\n            self.disconnect()\r\n            raise TimeoutError(\"Timeout reading from %s:%s\" %\r\n                               (self.host, self.port))\r\n        except socket.error:\r\n            self.disconnect()\r\n            e = sys.exc_info()[1]\r\n            raise ConnectionError(\"Error while reading from %s:%s : %s\" %\r\n                                  (self.host, self.port, e.args))\r\n        except:  # noqa: E722\r\n            self.disconnect()\r\n            raise\r\n    \r\n        if self.health_check_interval:\r\n            self.next_health_check = time() + self.health_check_interval\r\n    \r\n        if isinstance(response, ResponseError):\r\n>           raise response\r\nE           redis.exceptions.ResponseError: Syntax error, try CLIENT (LIST | KILL | GETNAME | SETNAME | PAUSE | REPLY)\r\n\r\nredis/connection.py:718: ResponseError\r\n=============== 5 failed, 401 passed, 31 skipped in 9.13 seconds ===============\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1223", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1223/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1223/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1223/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1223", "id": 504954016, "node_id": "MDU6SXNzdWU1MDQ5NTQwMTY=", "number": 1223, "title": "Celery Backend connection with Redis 3.3.8 error", "user": {"login": "srivignessh", "id": 3088710, "node_id": "MDQ6VXNlcjMwODg3MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3088710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srivignessh", "html_url": "https://github.com/srivignessh", "followers_url": "https://api.github.com/users/srivignessh/followers", "following_url": "https://api.github.com/users/srivignessh/following{/other_user}", "gists_url": "https://api.github.com/users/srivignessh/gists{/gist_id}", "starred_url": "https://api.github.com/users/srivignessh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srivignessh/subscriptions", "organizations_url": "https://api.github.com/users/srivignessh/orgs", "repos_url": "https://api.github.com/users/srivignessh/repos", "events_url": "https://api.github.com/users/srivignessh/events{/privacy}", "received_events_url": "https://api.github.com/users/srivignessh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-09T23:55:24Z", "updated_at": "2019-12-29T20:22:58Z", "closed_at": "2019-12-29T20:22:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version: 3.3.8\r\nPlatform: python 2.7 on ubuntu\r\n\r\n```\r\n[2019-10-09 23:49:35,629: ERROR/CeleryWorkerProcess-25] Unrecoverable error: AttributeError(\"'unicode' object has no attribute 'iteritems'\",)\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/celery/worker/__init__.py\", line 206, in start\r\n    self.blueprint.start(self)\r\n  File \"/usr/local/lib/python2.7/dist-packages/celery/bootsteps.py\", line 123, in start\r\n    step.start(parent)\r\n  File \"/usr/local/lib/python2.7/dist-packages/celery/bootsteps.py\", line 374, in start\r\n    return self.obj.start()\r\n  File \"/usr/local/lib/python2.7/dist-packages/celery/worker/consumer.py\", line 278, in start\r\n    blueprint.start(self)\r\n  File \"/usr/local/lib/python2.7/dist-packages/celery/bootsteps.py\", line 123, in start\r\n    step.start(parent)\r\n  File \"/usr/local/lib/python2.7/dist-packages/celery/worker/consumer.py\", line 821, in start\r\n    c.loop(*c.loop_args())\r\n  File \"/usr/local/lib/python2.7/dist-packages/celery/worker/loops.py\", line 70, in asynloop\r\n    next(loop)\r\n  File \"/usr/local/lib/python2.7/dist-packages/kombu/async/hub.py\", line 340, in create_loop\r\n    cb(*cbargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/kombu/transport/redis.py\", line 991, in on_readable\r\n    self._callbacks[queue](message)\r\n  File \"/usr/local/lib/python2.7/dist-packages/kombu/transport/virtual/__init__.py\", line 534, in _callback\r\n    self.qos.append(message, message.delivery_tag)\r\n  File \"/usr/local/lib/python2.7/dist-packages/kombu/transport/redis.py\", line 146, in append\r\n    pipe.zadd(self.unacked_index_key, delivery_tag, time()) \\\r\n  File \"/usr/local/lib/python2.7/dist-packages/redis/client.py\", line 2388, in zadd\r\n    for pair in iteritems(mapping):\r\n  File \"/usr/local/lib/python2.7/dist-packages/redis/_compat.py\", line 81, in iteritems\r\n    return x.iteritems()\r\nAttributeError: 'unicode' object has no attribute 'iteritems'\r\n[2019-10-09 23:49:35,646: INFO/MainProcess] beat: Shutting down...\r\n```\r\n\r\nCelery worker not starting because of the above error. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1221", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1221/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1221/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1221/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1221", "id": 504833668, "node_id": "MDU6SXNzdWU1MDQ4MzM2Njg=", "number": 1221, "title": "redis.StrictRedis.lock release doesn't actually check redis", "user": {"login": "yshaban", "id": 14334928, "node_id": "MDQ6VXNlcjE0MzM0OTI4", "avatar_url": "https://avatars0.githubusercontent.com/u/14334928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yshaban", "html_url": "https://github.com/yshaban", "followers_url": "https://api.github.com/users/yshaban/followers", "following_url": "https://api.github.com/users/yshaban/following{/other_user}", "gists_url": "https://api.github.com/users/yshaban/gists{/gist_id}", "starred_url": "https://api.github.com/users/yshaban/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yshaban/subscriptions", "organizations_url": "https://api.github.com/users/yshaban/orgs", "repos_url": "https://api.github.com/users/yshaban/repos", "events_url": "https://api.github.com/users/yshaban/events{/privacy}", "received_events_url": "https://api.github.com/users/yshaban/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-09T18:59:41Z", "updated_at": "2019-10-09T19:52:53Z", "closed_at": "2019-10-09T19:52:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: What redis-py and what redis version is the issue happening on?\r\nredis-py==3.3.8\r\nredis==3.2.8\r\n\r\nPython 3.5.1\r\n\r\n**Description**: \r\nI can create a redis.StrictRedis.lock object, check that its locked. If it is locked, I will try to release it. Releasing it throws a redis.exceptions.LockError saying that the lock cannot be released as it is already unlocked. This is in fact not true. I can verify it by using redis-cli and inspecting the lock. The lock is still in use.\r\n\r\n```\r\nif queue_lock.locked():\r\n            try:\r\n                queue_lock.release()\r\n            except redis.exceptions.LockError as le:\r\n                # received error, lock is already unlocked\r\n                # this is not true, we know the lock is actually locked\r\n                print(\"Received lock error: {0}.\".format(str(le)))\r\n                sys.stdout.flush()\r\n                # Delete the lock\r\n                print(\"Deleting lock....{0}\".format(queue_lock.name))\r\n                sys.stdout.flush()\r\n                r.delete(queue_lock.name)\r\n                print(\"{0} deleted\".format(queue_lock.name))\r\n                sys.stdout.flush()```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1217", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1217/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1217/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1217/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1217", "id": 502599356, "node_id": "MDU6SXNzdWU1MDI1OTkzNTY=", "number": 1217, "title": "pub/sub causes oom", "user": {"login": "zzxjl1", "id": 34417063, "node_id": "MDQ6VXNlcjM0NDE3MDYz", "avatar_url": "https://avatars3.githubusercontent.com/u/34417063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzxjl1", "html_url": "https://github.com/zzxjl1", "followers_url": "https://api.github.com/users/zzxjl1/followers", "following_url": "https://api.github.com/users/zzxjl1/following{/other_user}", "gists_url": "https://api.github.com/users/zzxjl1/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzxjl1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzxjl1/subscriptions", "organizations_url": "https://api.github.com/users/zzxjl1/orgs", "repos_url": "https://api.github.com/users/zzxjl1/repos", "events_url": "https://api.github.com/users/zzxjl1/events{/privacy}", "received_events_url": "https://api.github.com/users/zzxjl1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-04T12:07:02Z", "updated_at": "2019-10-04T12:43:13Z", "closed_at": "2019-10-04T12:43:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "pub/sub slowly eats up ram and won't recover, this issue happens when i am publishing messages real quick(0.01s per loop), i can see memory usage goes high.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1215", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1215/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1215/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1215/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1215", "id": 496939346, "node_id": "MDU6SXNzdWU0OTY5MzkzNDY=", "number": 1215, "title": "the parameter 'px' of func 'set' does not work", "user": {"login": "cocoonYh", "id": 27280286, "node_id": "MDQ6VXNlcjI3MjgwMjg2", "avatar_url": "https://avatars1.githubusercontent.com/u/27280286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cocoonYh", "html_url": "https://github.com/cocoonYh", "followers_url": "https://api.github.com/users/cocoonYh/followers", "following_url": "https://api.github.com/users/cocoonYh/following{/other_user}", "gists_url": "https://api.github.com/users/cocoonYh/gists{/gist_id}", "starred_url": "https://api.github.com/users/cocoonYh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cocoonYh/subscriptions", "organizations_url": "https://api.github.com/users/cocoonYh/orgs", "repos_url": "https://api.github.com/users/cocoonYh/repos", "events_url": "https://api.github.com/users/cocoonYh/events{/privacy}", "received_events_url": "https://api.github.com/users/cocoonYh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-09-23T07:39:39Z", "updated_at": "2019-09-24T05:27:27Z", "closed_at": "2019-09-24T05:27:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version: \r\nredis-py: 2.10.6, redis: 5.0.5\r\n\r\nPlatform: \r\npython 2.7 on macOS\r\n\r\nDescription: \r\nthe parameter 'px' of func 'set' does not work sometimes, here is my code: \r\n\r\n`logger.info('interval: %s' % interval)`\r\n`res = r.set(key, 1, nx=True, px=interval)`\r\n`logger.info('pttl: %s' % r.pttl(api_name))`\r\n\r\nand here is my log. i got so many 'None'. help please!\r\n[redis.log](https://github.com/andymccurdy/redis-py/files/3641056/redis.log)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1214", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1214/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1214/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1214/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1214", "id": 492518712, "node_id": "MDU6SXNzdWU0OTI1MTg3MTI=", "number": 1214, "title": "Can't pass a bytearray to SET", "user": {"login": "red-lithium", "id": 55216550, "node_id": "MDQ6VXNlcjU1MjE2NTUw", "avatar_url": "https://avatars3.githubusercontent.com/u/55216550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/red-lithium", "html_url": "https://github.com/red-lithium", "followers_url": "https://api.github.com/users/red-lithium/followers", "following_url": "https://api.github.com/users/red-lithium/following{/other_user}", "gists_url": "https://api.github.com/users/red-lithium/gists{/gist_id}", "starred_url": "https://api.github.com/users/red-lithium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/red-lithium/subscriptions", "organizations_url": "https://api.github.com/users/red-lithium/orgs", "repos_url": "https://api.github.com/users/red-lithium/repos", "events_url": "https://api.github.com/users/red-lithium/events{/privacy}", "received_events_url": "https://api.github.com/users/red-lithium/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-11T23:52:57Z", "updated_at": "2019-12-29T22:17:20Z", "closed_at": "2019-12-29T22:16:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: redis-py 3.3.8 and redis 5.0.5\r\n\r\n**Platform**: Python 3.6.8 on Ubuntu 18.04\r\n\r\n**Description**: Redis strings are should be binary safe, but `redis.set(key, value)` doesn't accept a bytearray as a valid type. Passing a bytearray in as a value, results in the following exception:\r\n`Invalid input of type: 'bytearray'. Convert to a byte, string or number first.`\r\n\r\nI understand that this might be a limitation of Python or perhaps I've misunderstood the [Redis documentation](https://redis.io/topics/data-types). Thanks in advance.\r\n\r\nExample code:\r\n```python\r\n#!/usr/bin/python3\r\nimport redis\r\n\r\nredis = redis.Redis(host=\"localhost\", port=6379, db=0)\r\n\r\n# This will result in an exception\r\nredis.set(\"my-key\", bytearray(10))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1213", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1213/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1213/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1213/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1213", "id": 490581026, "node_id": "MDU6SXNzdWU0OTA1ODEwMjY=", "number": 1213, "title": "Setting up redistogo in Heroku", "user": {"login": "deloquito", "id": 45498015, "node_id": "MDQ6VXNlcjQ1NDk4MDE1", "avatar_url": "https://avatars0.githubusercontent.com/u/45498015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deloquito", "html_url": "https://github.com/deloquito", "followers_url": "https://api.github.com/users/deloquito/followers", "following_url": "https://api.github.com/users/deloquito/following{/other_user}", "gists_url": "https://api.github.com/users/deloquito/gists{/gist_id}", "starred_url": "https://api.github.com/users/deloquito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deloquito/subscriptions", "organizations_url": "https://api.github.com/users/deloquito/orgs", "repos_url": "https://api.github.com/users/deloquito/repos", "events_url": "https://api.github.com/users/deloquito/events{/privacy}", "received_events_url": "https://api.github.com/users/deloquito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-07T02:27:55Z", "updated_at": "2019-09-15T18:19:51Z", "closed_at": "2019-09-15T18:19:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "i am developing a flask webapp with sessions and i want to develop it in heroku. I want to store the sessions in redistogo bacause Heroku often forgets sessions as its filesystem is ephimeral. I am a bit lost setting redistogo in Heroku, i installed the plugin and followed the steps but it throws 2 errors in logs (this 2 errors are given in heroku logs, in localhost everything works fine): \r\n1st\r\n`2019-09-07T02:15:56.714758+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/redis/connection.py\", line 583, in _connect\r\n2019-09-07T02:15:56.714760+00:00 app[web.1]:     sock.connect(socket_address)\r\n2019-09-07T02:15:56.714762+00:00 app[web.1]: ConnectionRefusedError: [Errno 111] Connection refused\r\n2019-09-07T02:15:56.714764+00:00 app[web.1]: \r\n2019-09-07T02:15:56.714766+00:00 app[web.1]: During handling of the above exception, another exception occurred:`\r\n2d:\r\n`2019-09-06T21:26:19.779199+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/redis/connection.py\", line 543, in connect\r\n2019-09-06T21:26:19.779201+00:00 app[web.1]:     raise ConnectionError(self._error_message(e))\r\n2019-09-06T21:26:19.779208+00:00 app[web.1]: redis.exceptions.ConnectionError: Error 111 connecting to localhost:6379. Connection refused.`\r\n\r\nAs i want to test my app in localhost i also dowloaded redis locally but i dont know if it is a good idea to have redis locally and redistogo in heroku as some variables might get mixed up. I am almost certain that my error is because of that, i must have mixed or missed something but i cant figure it out. Here is my code:\r\n`from redissession import RedisSessionInterface\r\nimport redis\r\n\r\n\r\napp = Flask(__name__)\r\n\r\nlogin_manager = LoginManager()\r\n\r\nlogin_manager.login_view = \"login\"\r\nlogin_manager.init_app(app)\r\n\r\napp.config['SECRET_KEY'] = os.environ.get('SECRET_KEY')\r\nredis_url = os.getenv('REDISTOGO_URL', 'redis://localhost:6379')\r\nredis = redis.from_url(redis_url)\r\n\r\napp.config[\"SESSION_FILE_DIR\"] = mkdtemp()\r\napp.config[\"SESSION_PERMANENT\"] = False\r\napp.config[\"SESSION_TYPE\"] = 'redis'\r\n#app.config[\"SESSION_TYPE\"] = \"filesystem\"\r\nSession(app)\r\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\r\napp.config['SQLALCHEMY_DATABASE_URI'] = os.environ['DATABASE_URL']`\r\nJust to clarify, the environment variable 'REDISTOGO_URL' is properly setted in heroku Edit: Trying to narrow down the problem i adde a print statement to print the 'redis_url' variable. when i am in localhost it prints 'redis://localhost:6379'\r\n\r\nand when on heroku it prints 'redis://redistogo:7d43a0c94e09a7d3701f86e16e6602dc@pearlfish.redistogo.com:9873/' So the variables are setted correctly.\r\n\r\nThen here is my login section with the sessions:\r\n\r\n`@app.route(\"/login\", methods=[\"GET\", \"POST\"])\r\ndef login():\r\n    \"\"\"Log user in\"\"\"\r\n\r\n    # Forget any user_id\r\n    session.clear()\r\n\r\n    # User reached route via POST (as by submitting a form via POST)\r\n    if request.method == \"POST\":\r\n        username=request.form.get(\"username\").upper()\r\n\r\n        # Ensure username was submitted\r\n        if not request.form.get(\"username\"):\r\n            return apology(\"Debe ingresar un nombre de usuario.\", 403)\r\n\r\n        # Ensure password was submitted\r\n        elif not request.form.get(\"password\"):\r\n            return apology(\"Debe ingresar una contrase\u00f1a.\", 403)\r\n\r\n\r\n        if rows is None or not check_password_hash(rows.hash, request.form.get(\"password\")):\r\n            return apology(\"Usuario o contrase\u00f1a incorrectos\", 403)\r\n\r\n        else:\r\n            session[\"nombrescuela\"] = rows.nombrescuela\r\n            login_user(rows)\r\n            flash(\"Sesi\u00f3n Iniciada!\")\r\n            return redirect(url_for('index'))\r\n\r\n\r\n\r\n\r\n\r\n\r\n        # Redirect user to home page\r\n\r\n    # User reached route via GET (as by clicking a link or via redirect)\r\n    else:\r\n        return render_template(\"login.html\")\r\n\r\n\r\n\r\n@app.route(\"/logout\")\r\ndef logout():\r\n    \"\"\"Log user out\"\"\"\r\n\r\n    # Forget any user_id\r\n\r\n    session.clear()\r\n    logout_user()\r\n    # Redirect user to login form\r\n    return redirect(url_for('index'))`\r\n\r\nAny clues? thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1212", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1212/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1212/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1212/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1212", "id": 490238840, "node_id": "MDU6SXNzdWU0OTAyMzg4NDA=", "number": 1212, "title": "hello\uff0cWhat causes redis to have too many idle connections", "user": {"login": "pyh007", "id": 37687691, "node_id": "MDQ6VXNlcjM3Njg3Njkx", "avatar_url": "https://avatars3.githubusercontent.com/u/37687691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyh007", "html_url": "https://github.com/pyh007", "followers_url": "https://api.github.com/users/pyh007/followers", "following_url": "https://api.github.com/users/pyh007/following{/other_user}", "gists_url": "https://api.github.com/users/pyh007/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyh007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyh007/subscriptions", "organizations_url": "https://api.github.com/users/pyh007/orgs", "repos_url": "https://api.github.com/users/pyh007/repos", "events_url": "https://api.github.com/users/pyh007/events{/privacy}", "received_events_url": "https://api.github.com/users/pyh007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-06T09:55:47Z", "updated_at": "2019-09-15T18:23:39Z", "closed_at": "2019-09-15T18:23:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I used celery to processing tasks, the task of redis connection, when running after a period of time, will quote us was forced to shut down a remote connection error, I view the Windows port usage, found that there are a lot of TCP connections, I doubt is free connection too much.What do you think", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1211", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1211/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1211/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1211/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1211", "id": 488017129, "node_id": "MDU6SXNzdWU0ODgwMTcxMjk=", "number": 1211, "title": "three is no 3.3.8 release git tag", "user": {"login": "georgexsh", "id": 32751, "node_id": "MDQ6VXNlcjMyNzUx", "avatar_url": "https://avatars3.githubusercontent.com/u/32751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/georgexsh", "html_url": "https://github.com/georgexsh", "followers_url": "https://api.github.com/users/georgexsh/followers", "following_url": "https://api.github.com/users/georgexsh/following{/other_user}", "gists_url": "https://api.github.com/users/georgexsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/georgexsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/georgexsh/subscriptions", "organizations_url": "https://api.github.com/users/georgexsh/orgs", "repos_url": "https://api.github.com/users/georgexsh/repos", "events_url": "https://api.github.com/users/georgexsh/events{/privacy}", "received_events_url": "https://api.github.com/users/georgexsh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-02T06:19:39Z", "updated_at": "2019-09-15T18:29:22Z", "closed_at": "2019-09-15T18:29:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have seen redis-py released 3.3.8 on pypi, but no 3.3.8 tag and github release, any reason?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1210", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1210/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1210/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1210/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1210", "id": 487734713, "node_id": "MDU6SXNzdWU0ODc3MzQ3MTM=", "number": 1210, "title": "blpop with timeout=0 get stuck after a long idle time", "user": {"login": "captainst", "id": 23187023, "node_id": "MDQ6VXNlcjIzMTg3MDIz", "avatar_url": "https://avatars2.githubusercontent.com/u/23187023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/captainst", "html_url": "https://github.com/captainst", "followers_url": "https://api.github.com/users/captainst/followers", "following_url": "https://api.github.com/users/captainst/following{/other_user}", "gists_url": "https://api.github.com/users/captainst/gists{/gist_id}", "starred_url": "https://api.github.com/users/captainst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/captainst/subscriptions", "organizations_url": "https://api.github.com/users/captainst/orgs", "repos_url": "https://api.github.com/users/captainst/repos", "events_url": "https://api.github.com/users/captainst/events{/privacy}", "received_events_url": "https://api.github.com/users/captainst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-31T05:58:04Z", "updated_at": "2019-09-20T02:33:05Z", "closed_at": "2019-09-13T13:04:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using redis server v3.2.100 on windows, and redis-py v3.3.8 from both windows and ubuntu 18.04.\r\n\r\nI got a similar problem described here: https://github.com/andymccurdy/redis-py/issues/1199\r\n\r\nI made the redis server public on internet, and use the redis-py to blpop the elements and process.\r\n\r\nThe redis-py code I used is like:\r\n\r\n```\r\n#import redis\r\ndb = redis.StrictRedis(host='xx.xx.xx.xx', port=6379, db=0)\r\nwhile True:\r\nqueue = db.blpop('detection_queue', timeout=5)\r\nif queue is not None:\r\n    # process the queue\r\n```\r\n\r\nIf I leave the redis queue empty, then after a long time **t**, the blpop seems to get stuck. It does not return even I push new elements into the queue.\r\nIf I specify timeout=0 in db.blpop (no timeout, wait indefinitely) call, then the **t** is about 30 minutes\r\nIf I specify timeout=5 in db.blpop (5 seconds timeout), then the **t** is around a couple of hours.\r\n\r\nI could share the redis IP and port, if anybody is interested to make a test.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1209", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1209/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1209/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1209/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1209", "id": 486901565, "node_id": "MDU6SXNzdWU0ODY5MDE1NjU=", "number": 1209, "title": "Cluster Support?", "user": {"login": "sazima", "id": 30383447, "node_id": "MDQ6VXNlcjMwMzgzNDQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/30383447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sazima", "html_url": "https://github.com/sazima", "followers_url": "https://api.github.com/users/sazima/followers", "following_url": "https://api.github.com/users/sazima/following{/other_user}", "gists_url": "https://api.github.com/users/sazima/gists{/gist_id}", "starred_url": "https://api.github.com/users/sazima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sazima/subscriptions", "organizations_url": "https://api.github.com/users/sazima/orgs", "repos_url": "https://api.github.com/users/sazima/repos", "events_url": "https://api.github.com/users/sazima/events{/privacy}", "received_events_url": "https://api.github.com/users/sazima/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-29T11:28:58Z", "updated_at": "2020-05-15T05:07:39Z", "closed_at": "2019-08-29T15:59:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1207", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1207/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1207/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1207/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1207", "id": 485843122, "node_id": "MDU6SXNzdWU0ODU4NDMxMjI=", "number": 1207, "title": "Tuple index out of range, in HGET, HSET while using functions in threading.Thread", "user": {"login": "leexxg", "id": 24434413, "node_id": "MDQ6VXNlcjI0NDM0NDEz", "avatar_url": "https://avatars2.githubusercontent.com/u/24434413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leexxg", "html_url": "https://github.com/leexxg", "followers_url": "https://api.github.com/users/leexxg/followers", "following_url": "https://api.github.com/users/leexxg/following{/other_user}", "gists_url": "https://api.github.com/users/leexxg/gists{/gist_id}", "starred_url": "https://api.github.com/users/leexxg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leexxg/subscriptions", "organizations_url": "https://api.github.com/users/leexxg/orgs", "repos_url": "https://api.github.com/users/leexxg/repos", "events_url": "https://api.github.com/users/leexxg/events{/privacy}", "received_events_url": "https://api.github.com/users/leexxg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-27T14:23:53Z", "updated_at": "2019-08-27T19:30:46Z", "closed_at": "2019-08-27T19:30:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\n**Version**: redis-cli v.4.0.9/redis-py 3.3.8\r\n\r\n**Platforms**: Ubuntu 18.04/Windows 7(x64)\r\n\r\n**Language**: Python 3.6\r\n\r\n**Description**: I have small redis code, with 2 functions\r\n\r\n\r\n\r\n```\r\nimport redis\r\ndef connect_to_redis(redis_host = \"127.0.0.1\", redis_port = 6379, db=0, password = None):\r\n    try:\r\n        redis_connection = redis.StrictRedis(host=redis_host, port=redis_port, db=db, password=password)\r\n       return redis_connection\r\n    except Exception as e:\r\n        print(\"--REDIS: ERROR: Can't connect to {}:{} - {}\".format(redis_host, redis_port, e))\r\n        return False\r\n\r\ndef get_error_from_redis(wallet_id, error_type):\r\n    try:\r\n        redis_connection = connect_to_redis()\r\n        if redis_connection==False:\r\n            return False\r\n\r\n        try:\r\n            errors_list = redis_connection.hget(name = wallet_id, key = error_type) # ERROR HERE\r\n        except Exception as e:\r\n            print(\"-- REDIS ERROR(get_error_from_redis): with wallet_id:{}, error_type:{} - {}\".format(wallet_id, error_type, e))\r\n\r\n        if errors_list:\r\n            errors_list = errors_list.decode('utf-8')\r\n            errors_list = ast.literal_eval(errors_list)\r\n            #print(\"-- REDIS GET(for wallet_id) - {}\".format(len(errors_list)))\r\n            if errors_list!=None:\r\n                #print(\"-- REDIS GET (for wallet_id:{}, error_type:{}) - {}\".format(wallet_id, error_type, len(errors_list)))\r\n                return errors_list\r\n\r\n        print(\"-- REDIS ERRORS LIST EMPTY FOR: wallet_id: {}\".format(wallet_id))\r\n        return []\r\n    except Exception as e:\r\n        print(\"-- REDIS ERROR(get_error_from_redis): with wallet_id:{}, error_type:{} - {}\".format(wallet_id, error_type, e))\r\n        return False\r\n```\r\n\r\nWhen i make tests in main(in this file) - everything is ok, But when i import this functions into logic, where i use threading.Thread(with 1 thread only), then i got error(for line - redis_connection.hget(name = wallet_id, key = error_type)) - tuple index out of range. I checked that redis_connection is ok(Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>) and checked that i had those variables - wallet_id(type str) and error_type(type str) inside of function). How i even can get this type of error in HGET?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1206", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1206/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1206/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1206/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1206", "id": 485239758, "node_id": "MDU6SXNzdWU0ODUyMzk3NTg=", "number": 1206, "title": "python 2.6 support", "user": {"login": "assafgi", "id": 13439460, "node_id": "MDQ6VXNlcjEzNDM5NDYw", "avatar_url": "https://avatars0.githubusercontent.com/u/13439460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/assafgi", "html_url": "https://github.com/assafgi", "followers_url": "https://api.github.com/users/assafgi/followers", "following_url": "https://api.github.com/users/assafgi/following{/other_user}", "gists_url": "https://api.github.com/users/assafgi/gists{/gist_id}", "starred_url": "https://api.github.com/users/assafgi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/assafgi/subscriptions", "organizations_url": "https://api.github.com/users/assafgi/orgs", "repos_url": "https://api.github.com/users/assafgi/repos", "events_url": "https://api.github.com/users/assafgi/events{/privacy}", "received_events_url": "https://api.github.com/users/assafgi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-26T13:33:30Z", "updated_at": "2019-08-26T15:08:20Z", "closed_at": "2019-08-26T15:08:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you consider make some small changes in redis/client.py in order to make the library support python 2.6?\r\n\r\nWe opened a fork that does this -  only two small fixes were needed-[our_fork](https://github.com/weka-io/redis-py)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1204", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1204/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1204/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1204/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1204", "id": 482742436, "node_id": "MDU6SXNzdWU0ODI3NDI0MzY=", "number": 1204, "title": "No new clients created while using connection pooling", "user": {"login": "mjmanav4", "id": 9611624, "node_id": "MDQ6VXNlcjk2MTE2MjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9611624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjmanav4", "html_url": "https://github.com/mjmanav4", "followers_url": "https://api.github.com/users/mjmanav4/followers", "following_url": "https://api.github.com/users/mjmanav4/following{/other_user}", "gists_url": "https://api.github.com/users/mjmanav4/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjmanav4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjmanav4/subscriptions", "organizations_url": "https://api.github.com/users/mjmanav4/orgs", "repos_url": "https://api.github.com/users/mjmanav4/repos", "events_url": "https://api.github.com/users/mjmanav4/events{/privacy}", "received_events_url": "https://api.github.com/users/mjmanav4/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-20T09:17:47Z", "updated_at": "2019-12-29T20:25:27Z", "closed_at": "2019-12-29T20:25:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "So i am running my redis server on port 3001\r\nand my python script initiates redis cli connection as the following\r\n` redis_pool = redis.ConnectionPool(port=port, db=0) `\r\n  ` r = redis.Redis(connection_pool=redis_pool,socket_keepalive=True,max_connections=100)`\r\n\r\nwhile checking cli `info` from after logging in to `redis-cli -p 3001`\r\ni see \r\n\r\n# Clients\r\nconnected_clients:2\r\nclient_recent_max_input_buffer:2\r\nclient_recent_max_output_buffer:0\r\nblocked_clients:0\r\n\r\n\r\nHere only two clients are available, one is form my terminal and other one from script\r\n\r\nWhy isn't it using 100 clients ??  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1203", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1203/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1203/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1203/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1203", "id": 481832703, "node_id": "MDU6SXNzdWU0ODE4MzI3MDM=", "number": 1203, "title": "Docker network socket timeout", "user": {"login": "wshayes", "id": 365303, "node_id": "MDQ6VXNlcjM2NTMwMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/365303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wshayes", "html_url": "https://github.com/wshayes", "followers_url": "https://api.github.com/users/wshayes/followers", "following_url": "https://api.github.com/users/wshayes/following{/other_user}", "gists_url": "https://api.github.com/users/wshayes/gists{/gist_id}", "starred_url": "https://api.github.com/users/wshayes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wshayes/subscriptions", "organizations_url": "https://api.github.com/users/wshayes/orgs", "repos_url": "https://api.github.com/users/wshayes/repos", "events_url": "https://api.github.com/users/wshayes/events{/privacy}", "received_events_url": "https://api.github.com/users/wshayes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-17T01:20:53Z", "updated_at": "2019-08-17T20:24:36Z", "closed_at": "2019-08-17T20:24:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for wanting to report an issue you've found in redis-py. Please delete this text and fill in the template below.  \r\nIt is of course not always possible to reduce your code to a small test case, but it's highly appreciated to have as much data as possible. Thank you!\r\n\r\n**Version**: What redis-py and what redis version is the issue happening on?\r\nredis-py:  3.3.7\r\nredis: 5.0.5\r\nDocker version 19.03.1\r\ndocker-compose version 1.24.1\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\nPython 3.7 on MacOS and Ubuntu (both running in docker)\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n\r\nUsing the following client setup while trying to use BRPOPLPUSH to wait for new tasks to show up.\r\n\r\n```\r\nredis_db = redis.Redis(\r\n    host=settings.REDIS_HOST,\r\n    port=settings.REDIS_PORT,\r\n    db=0,\r\n    health_check_interval=30,\r\n    socket_keepalive=True,\r\n    socket_timeout=60,\r\n    retry_on_timeout=True,\r\n)\r\n```\r\n\r\nI'm getting the following timeout which is causing the docker container to restart.  I'm starting several multiprocessing.Process to take jobs off of the task queue. I don't get the timeouts when I run this code outside of docker. Any suggestions on best way to handle this?  I looked at the other issues that had socket timeouts and tried everything I understood and several things I didn't (obviously since I have practically every socket/keepalive option turned on).\r\n\r\n```\r\npipeline           |   File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 538, in connect\r\npipeline           |     sock = self._connect()\r\npipeline           |   File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 595, in _connect\r\npipeline           |     raise err\r\npipeline           |   File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 583, in _connect\r\npipeline           |     sock.connect(socket_address)\r\npipeline           | socket.timeout: timed out\r\npipeline           |\r\npipeline           | During handling of the above exception, another exception occurred:\r\npipeline           |\r\npipeline           | Traceback (most recent call last):\r\npipeline           |   File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\r\npipeline           |     self.run()\r\npipeline           |   File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\r\npipeline           |     self._target(*self._args, **self._kwargs)\r\npipeline           |   File \"./main.py\", line 95, in process_tasks\r\npipeline           |     for worker_qname, task_str in db.redisdb.yield_queue(store, worker_id):\r\npipeline           |   File \"/app/db/redisdb.py\", line 44, in yield_queue\r\npipeline           |     task = redis_db.brpoplpush(store_qname, worker_qname, 0)\r\npipeline           |   File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 1648, in brpoplpush\r\npipeline           |     return self.execute_command('BRPOPLPUSH', src, dst, timeout)\r\npipeline           |   File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 836, in execute_command\r\npipeline           |     conn = self.connection or pool.get_connection(command_name, **options)\r\npipeline           |   File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 1071, in get_connection\r\npipeline           |     connection.connect()\r\npipeline           |   File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 540, in connect\r\npipeline           |     raise TimeoutError(\"Timeout connecting to server\")\r\npipeline           | redis.exceptions.TimeoutError: Timeout connecting to server\r\npipeline           | Traceback (most recent call last):\r\npipeline           |   File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 538, in connect\r\npipeline           |     sock = self._connect()\r\npipeline           |   File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 595, in _connect\r\npipeline           |     raise err\r\npipeline           |   File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 583, in _connect\r\npipeline           |     sock.connect(socket_address)\r\npipeline           | socket.timeout: timed out\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1202", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1202/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1202/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1202/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1202", "id": 480199367, "node_id": "MDU6SXNzdWU0ODAxOTkzNjc=", "number": 1202, "title": "ConnectionResetError on Pipeline calls", "user": {"login": "FodderMK", "id": 1096012, "node_id": "MDQ6VXNlcjEwOTYwMTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1096012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FodderMK", "html_url": "https://github.com/FodderMK", "followers_url": "https://api.github.com/users/FodderMK/followers", "following_url": "https://api.github.com/users/FodderMK/following{/other_user}", "gists_url": "https://api.github.com/users/FodderMK/gists{/gist_id}", "starred_url": "https://api.github.com/users/FodderMK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FodderMK/subscriptions", "organizations_url": "https://api.github.com/users/FodderMK/orgs", "repos_url": "https://api.github.com/users/FodderMK/repos", "events_url": "https://api.github.com/users/FodderMK/events{/privacy}", "received_events_url": "https://api.github.com/users/FodderMK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-13T14:46:09Z", "updated_at": "2019-08-16T22:14:55Z", "closed_at": "2019-08-13T23:54:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version:**\r\nredis-py: 3.3.6\r\nredis server: 4.0.12\r\n\r\n**Platform**:\r\nLinux 4.14.94+ x86_64 (Google Cloud Memorystore)\r\n\r\n**Description**:\r\nAfter upgrading from v3.2.1 to 3.3.6 I started to get ConnectionResetError exceptions on longer-running instances of my app.\r\n```\r\n  [...]\r\n  File \"/env/local/lib/python3.7/site-packages/redis/client.py\", line 3671, in execute\r\n    self.shard_hint)\r\n  File \"/env/local/lib/python3.7/site-packages/redis/connection.py\", line 1065, in get_connection\r\n    if connection.can_read():\r\n  File \"/env/local/lib/python3.7/site-packages/redis/connection.py\", line 682, in can_read\r\n    return self._parser.can_read(timeout)\r\n  File \"/env/local/lib/python3.7/site-packages/redis/connection.py\", line 295, in can_read\r\n    return self._buffer and self._buffer.can_read(timeout)\r\n  File \"/env/local/lib/python3.7/site-packages/redis/connection.py\", line 205, in can_read\r\n    raise_on_timeout=False)\r\n  File \"/env/local/lib/python3.7/site-packages/redis/connection.py\", line 173, in _read_from_socket\r\n    data = recv(self._sock, socket_read_size)\r\n  File \"/env/local/lib/python3.7/site-packages/redis/_compat.py\", line 58, in recv\r\n    return sock.recv(*args, **kwargs)\r\nConnectionResetError: [Errno 104] Connection reset by peer\r\n```\r\n\r\nI'm initializing my connection with health checks:\r\n```\r\nredis_client = redis.Redis(\r\n  host=host,\r\n  port=port,\r\n  socket_timeout=10,\r\n  socket_keepalive=True,\r\n  socket_connect_timeout=10,\r\n  retry_on_timeout=True,\r\n  health_check_interval=10,\r\n)\r\n\r\np = redis_client.pipeline()\r\n[...]\r\nresult = p.execute()\r\n```\r\n\r\nFrom what I can tell the path for `execute()` does a `sock.recv()` on a stale connection before it tries to do the health check, causing the exception to occur first.  Should execute be trying a health check first?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1200", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1200/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1200/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1200/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1200", "id": 477185377, "node_id": "MDU6SXNzdWU0NzcxODUzNzc=", "number": 1200, "title": "socket.timeout exception when timeouting on PubSub.get_message(timeout=1)", "user": {"login": "pvalsecc", "id": 1180608, "node_id": "MDQ6VXNlcjExODA2MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1180608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvalsecc", "html_url": "https://github.com/pvalsecc", "followers_url": "https://api.github.com/users/pvalsecc/followers", "following_url": "https://api.github.com/users/pvalsecc/following{/other_user}", "gists_url": "https://api.github.com/users/pvalsecc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvalsecc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvalsecc/subscriptions", "organizations_url": "https://api.github.com/users/pvalsecc/orgs", "repos_url": "https://api.github.com/users/pvalsecc/repos", "events_url": "https://api.github.com/users/pvalsecc/events{/privacy}", "received_events_url": "https://api.github.com/users/pvalsecc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-06T06:02:24Z", "updated_at": "2019-08-06T18:11:03Z", "closed_at": "2019-08-06T18:00:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: 3.3.5\r\n\r\n**Platform**: Python 3.7.3 on Ubuntu 18.04\r\n\r\n**Description**: Since 3.3.5 (was OK in 3.3.4), the polling of messages is raising a socket.timeout exception when no message arrives. In 3.3.4, it was doing nothing and returning None, as documented.\r\n\r\nThe line of code: https://github.com/camptocamp/c2cwsgiutils/blob/master/c2cwsgiutils/redis_utils.py#L30\r\n\r\nStacktrace:\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"/opt/c2cwsgiutils/c2cwsgiutils/redis_utils.py\", line 30, in run\r\n    pubsub.get_message(ignore_subscribe_messages=True, timeout=1)\r\n\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/client.py\", line 3283, in get_message\r\n    response = self.parse_response(block=False, timeout=timeout)\r\n\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/client.py\", line 3169, in parse_response\r\n    if not block and not conn.can_read(timeout=timeout):\r\n\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/connection.py\", line 674, in can_read\r\n    return self._parser.can_read(timeout)\r\n\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/connection.py\", line 291, in can_read\r\n    return self._buffer and self._buffer.can_read(timeout)\r\n\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/connection.py\", line 201, in can_read\r\n    raise_on_timeout=False)\r\n\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/connection.py\", line 173, in _read_from_socket\r\n    data = recv(self._sock, socket_read_size)\r\n\r\n  File \"/usr/local/lib/python3.7/dist-packages/redis/_compat.py\", line 58, in recv\r\n    return sock.recv(*args, **kwargs)\r\n\r\nsocket.timeout: timed out\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1199", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1199/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1199/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1199/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1199", "id": 476632876, "node_id": "MDU6SXNzdWU0NzY2MzI4NzY=", "number": 1199, "title": "blpop will not receive any data if the key empty for a long time and then pushed a data", "user": {"login": "kingname", "id": 5440523, "node_id": "MDQ6VXNlcjU0NDA1MjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5440523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kingname", "html_url": "https://github.com/kingname", "followers_url": "https://api.github.com/users/kingname/followers", "following_url": "https://api.github.com/users/kingname/following{/other_user}", "gists_url": "https://api.github.com/users/kingname/gists{/gist_id}", "starred_url": "https://api.github.com/users/kingname/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kingname/subscriptions", "organizations_url": "https://api.github.com/users/kingname/orgs", "repos_url": "https://api.github.com/users/kingname/repos", "events_url": "https://api.github.com/users/kingname/events{/privacy}", "received_events_url": "https://api.github.com/users/kingname/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-05T02:50:10Z", "updated_at": "2019-08-31T05:42:52Z", "closed_at": "2019-08-05T03:38:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: What redis-py and what redis version is the issue happening on?\r\n\r\n* redis-py: 3.2.1\r\n* redis: 5.0\r\n \r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure) \r\n\r\n* Ubuntu 18.04\r\n* Python 3.7.3\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n\r\n```python\r\nwhile True:\r\n    data = client.lpop('key')[1]\r\n    print(data)\r\n```\r\n\r\nthis code will work normally when I launch it just now. but if the list keeps empty for a long time, for example, 2 days, and then I push a data to it. this code will still blocked at `data = client.lpop('key')[1]`\uff0ccould not receive any data. only after I terminal the process and relaunch it again, it can receive the new data.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1198", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1198/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1198/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1198/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1198", "id": 476006503, "node_id": "MDU6SXNzdWU0NzYwMDY1MDM=", "number": 1198, "title": "Cannot seem to get values from remote machine", "user": {"login": "Neuroforge", "id": 1474186, "node_id": "MDQ6VXNlcjE0NzQxODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1474186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Neuroforge", "html_url": "https://github.com/Neuroforge", "followers_url": "https://api.github.com/users/Neuroforge/followers", "following_url": "https://api.github.com/users/Neuroforge/following{/other_user}", "gists_url": "https://api.github.com/users/Neuroforge/gists{/gist_id}", "starred_url": "https://api.github.com/users/Neuroforge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Neuroforge/subscriptions", "organizations_url": "https://api.github.com/users/Neuroforge/orgs", "repos_url": "https://api.github.com/users/Neuroforge/repos", "events_url": "https://api.github.com/users/Neuroforge/events{/privacy}", "received_events_url": "https://api.github.com/users/Neuroforge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-02T05:44:15Z", "updated_at": "2019-08-02T06:24:38Z", "closed_at": "2019-08-02T06:24:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: What redis-py and what redis version is the issue happening on?\r\n3.3.4\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\nWindows 10 Python 3.7\r\nMacOS Redis  5.0.4\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n\r\nI have a Macbook running 'redis-server --protected-mode no'.\r\nUsing redis-py on my Windows machine, i can connect, store data and retireve data using the Redis server running on the mac. This data can be stored and retrieved by the Windows machine.\r\n\r\nHowever, using the redis-cli on the Macbook, i am unable to see the keys added by the Windows client. \r\n\r\n1) Add a value to redis with key \"321\" on the client.\r\n2) Add a value to redis with the key \"ABC\" on the cli, on the same machine as redis server.\r\n3) Try and get the two clients to both see the same keys and fetch the data.\r\n\r\n```\r\nimport redis\r\ndb = redis.Redis(\"XXXXXXXX\",6379,0)\r\ndb.set(\"321\",\"A Value\")\r\nr = db.get(\"321\")\r\nprint(r)\r\n```\r\nRedis Cli Commands.\r\n```\r\n127.0.0.1:6379> SET \"ABC\" \"Another value\"\r\n127.0.0.1:6379> KEYS *\r\n1) \"ABC\"\r\n127.0.0.1:6379> \r\n```\r\nThe host, port and db value are the same for both the cli and Windows python client.\r\n\r\nRegards,\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1197", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1197/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1197/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1197/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1197", "id": 474023707, "node_id": "MDU6SXNzdWU0NzQwMjM3MDc=", "number": 1197, "title": "ssl.SSLWantReadError in version 3.3.0", "user": {"login": "liormizr", "id": 15181128, "node_id": "MDQ6VXNlcjE1MTgxMTI4", "avatar_url": "https://avatars3.githubusercontent.com/u/15181128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liormizr", "html_url": "https://github.com/liormizr", "followers_url": "https://api.github.com/users/liormizr/followers", "following_url": "https://api.github.com/users/liormizr/following{/other_user}", "gists_url": "https://api.github.com/users/liormizr/gists{/gist_id}", "starred_url": "https://api.github.com/users/liormizr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liormizr/subscriptions", "organizations_url": "https://api.github.com/users/liormizr/orgs", "repos_url": "https://api.github.com/users/liormizr/repos", "events_url": "https://api.github.com/users/liormizr/events{/privacy}", "received_events_url": "https://api.github.com/users/liormizr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-07-29T12:29:23Z", "updated_at": "2019-07-31T00:08:17Z", "closed_at": "2019-07-30T21:03:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: 3.3.0\r\n\r\n**Platform**: Python3.7 aws Lambda and Python 3.6 Ubuntu 18.04\r\n\r\n**Description**: \r\n\r\nHello\r\n\r\nWe upgraded today version to the last one - 3.3.0 from 3.2.1.\r\nWhen we did that we started to get ssl error.\r\n\r\nreverting version to 3.2.1 fix the issue... \r\n\r\ncode:\r\n```\r\nfrom redis import StrictRedis\r\ncache = StrictRedis(\r\n    host=SESSION_CACHE_HOST,\r\n    db=int(SESSION_CACHE_DB),\r\n    password=SESSION_CACHE_PASS,\r\n    ssl=True)\r\nprint(cache.keys())\r\n```\r\ntraceback:\r\n```\r\nTraceback (most recent call last):\r\n...\r\n File \"/var/task/redis/client.py\", line 1307, in exists\r\n return self.execute_command('EXISTS', *names)\r\n File \"/var/task/redis/client.py\", line 836, in execute_command\r\n conn = self.connection or pool.get_connection(command_name, **options)\r\n File \"/var/task/redis/connection.py\", line 1049, in get_connection\r\n if connection.can_read():\r\n File \"/var/task/redis/connection.py\", line 666, in can_read\r\n return self._parser.can_read(timeout)\r\n File \"/var/task/redis/connection.py\", line 280, in can_read\r\n return self._buffer and self._buffer.can_read(timeout)\r\n File \"/var/task/redis/connection.py\", line 190, in can_read\r\n raise_on_timeout=False)\r\n File \"/var/task/redis/connection.py\", line 159, in _read_from_socket\r\n data = recv(self._sock, socket_read_size)\r\n File \"/var/task/redis/_compat.py\", line 58, in recv\r\n return sock.recv(*args, **kwargs)\r\n File \"/var/lang/lib/python3.7/ssl.py\", line 1037, in recv\r\n return self.read(buflen)\r\n File \"/var/lang/lib/python3.7/ssl.py\", line 913, in read\r\n return self._sslobj.read(len)\r\nssl.SSLWantReadError: The operation did not complete (read) (_ssl.c:2488)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1196", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1196/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1196/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1196/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1196", "id": 473211795, "node_id": "MDU6SXNzdWU0NzMyMTE3OTU=", "number": 1196, "title": "Check hostname when using SSL", "user": {"login": "aniapte", "id": 1115421, "node_id": "MDQ6VXNlcjExMTU0MjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1115421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aniapte", "html_url": "https://github.com/aniapte", "followers_url": "https://api.github.com/users/aniapte/followers", "following_url": "https://api.github.com/users/aniapte/following{/other_user}", "gists_url": "https://api.github.com/users/aniapte/gists{/gist_id}", "starred_url": "https://api.github.com/users/aniapte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aniapte/subscriptions", "organizations_url": "https://api.github.com/users/aniapte/orgs", "repos_url": "https://api.github.com/users/aniapte/repos", "events_url": "https://api.github.com/users/aniapte/events{/privacy}", "received_events_url": "https://api.github.com/users/aniapte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-26T07:11:35Z", "updated_at": "2019-12-29T23:44:10Z", "closed_at": "2019-12-29T23:43:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Issue:** Redis client successfully creates SSL connections to AWS Elasticache redis server even though the hostname looks like \"redis.example.com\". \r\n**Expectation:** SSL connection must fail because the AWS Elasticache server will return a ssl certificate issued to \"*.example.ma443f.use1.cache.amazonaws.com\"\r\n\r\nWe are using the connection pool like this\r\n```python\r\npool = redis.ConnectionPool(host=host, port=port, db=0,\r\n                                  connection_class=redis.SSLConnection, ssl_cert_reqs='required',\r\n                                  ssl_ca_certs=certfile, retry_on_timeout=True)\r\n```\r\nNote that ssl_cert_requs='requred' is set with the expectation that SSL and hostname check will be enforced.\r\n\r\nHowever the _connect method in redis/connection.py explicitly sets check_hostname to False.\r\n```python\r\ndef _connect(self):\r\n     \"Wrap the socket with SSL support\"\r\n     sock = super(SSLConnection, self)._connect()\r\n     if hasattr(ssl, \"create_default_context\"):\r\n         context = ssl.create_default_context()\r\n         context.check_hostname = False\r\n         context.verify_mode = self.cert_reqs\r\n        ...\r\n```\r\nWhy does it set check_hostname to False?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1194", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1194/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1194/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1194/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1194", "id": 469884224, "node_id": "MDU6SXNzdWU0Njk4ODQyMjQ=", "number": 1194, "title": "PubSubWorkerThread will sometimes not stop", "user": {"login": "trulede", "id": 34501912, "node_id": "MDQ6VXNlcjM0NTAxOTEy", "avatar_url": "https://avatars2.githubusercontent.com/u/34501912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trulede", "html_url": "https://github.com/trulede", "followers_url": "https://api.github.com/users/trulede/followers", "following_url": "https://api.github.com/users/trulede/following{/other_user}", "gists_url": "https://api.github.com/users/trulede/gists{/gist_id}", "starred_url": "https://api.github.com/users/trulede/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trulede/subscriptions", "organizations_url": "https://api.github.com/users/trulede/orgs", "repos_url": "https://api.github.com/users/trulede/repos", "events_url": "https://api.github.com/users/trulede/events{/privacy}", "received_events_url": "https://api.github.com/users/trulede/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-07-18T17:01:41Z", "updated_at": "2019-07-28T21:02:53Z", "closed_at": "2019-07-28T21:02:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Version**: \r\n5.0 and latest (3.2) version of redis-py\r\n\r\n**Platform**: \r\nLinux\r\n\r\n**Description**: \r\nI've noticed that at times that a PubSubWorkerThread cannot be stopped. No matter how many times I call the `stop()` method, the `_running` variable is never set to False. Its not even possible to set that variable directly. I believe this the be caused as a side-effect of the Python Threading implementation.\r\n\r\nThe solution (which I will open a PR for) is to use an `Event()`, or some other mechanism which works correctly with Python Threads.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1191", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1191/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1191/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1191/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1191", "id": 468080784, "node_id": "MDU6SXNzdWU0NjgwODA3ODQ=", "number": 1191, "title": "xclaim raises an Exception if the item is not there", "user": {"login": "thomdask", "id": 21304764, "node_id": "MDQ6VXNlcjIxMzA0NzY0", "avatar_url": "https://avatars1.githubusercontent.com/u/21304764?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomdask", "html_url": "https://github.com/thomdask", "followers_url": "https://api.github.com/users/thomdask/followers", "following_url": "https://api.github.com/users/thomdask/following{/other_user}", "gists_url": "https://api.github.com/users/thomdask/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomdask/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomdask/subscriptions", "organizations_url": "https://api.github.com/users/thomdask/orgs", "repos_url": "https://api.github.com/users/thomdask/repos", "events_url": "https://api.github.com/users/thomdask/events{/privacy}", "received_events_url": "https://api.github.com/users/thomdask/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-15T11:43:01Z", "updated_at": "2019-07-17T22:50:09Z", "closed_at": "2019-07-17T22:50:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n\r\n**Version**: 3.2.1\r\n\r\n**Platform**: Python 3.7.3 on OS X 10.14.5\r\n\r\n**Description**: Traceback is \r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/ttt/Desktop/axs/lib/python3.7/site-packages/redis/client.py\", line 2048, in xclaim\r\n    return self.execute_command('XCLAIM', *pieces, **kwargs)\r\n  File \"/Users/ttt/Desktop/axs/lib/python3.7/site-packages/redis/client.py\", line 775, in execute_command\r\n    return self.parse_response(connection, command_name, **options)\r\n  File \"/Users/ttt/Desktop/axs/lib/python3.7/site-packages/redis/client.py\", line 795, in parse_response\r\n    return self.response_callbacks[command_name](response, **options)\r\n  File \"/Users/ttt/Desktop/axs/lib/python3.7/site-packages/redis/client.py\", line 272, in parse_xclaim\r\n    return parse_stream_list(response)\r\n  File \"/Users/ttt/Desktop/axs/lib/python3.7/site-packages/redis/client.py\", line 258, in parse_stream_list\r\n    return [(r[0], pairs_to_dict(r[1])) for r in response]\r\n  File \"/Users/ttt/Desktop/axs/lib/python3.7/site-packages/redis/client.py\", line 258, in <listcomp>\r\n    return [(r[0], pairs_to_dict(r[1])) for r in response]\r\nTypeError: 'NoneType' object is not subscriptable\r\n```\r\n\r\nThe problem is that the response for XCLAIM can be a list of Nones if the items do not exist in the stream (because it has been trimmed) \r\n\r\nTo replicate you can do the following:\r\n```\r\nimport redis\r\nr = redis.Redis(decode_responses=True)\r\n\r\nr.xgroup_create(\"STREAM\", \"CGROUP\", id=\"$\", mkstream=True)\r\nsid = r.xadd(\"STREAM\", {\"item\": 0})\r\nr.xreadgroup(\"CGROUP\", \"C1\", {\"STREAM\": \">\"})\r\nr.xadd(\"STREAM\", {\"item\": 3}, maxlen=1, approximate=False)\r\n\r\n# this line raises the above exception\r\nr.xclaim(\"STREAM\", \"CGROUP\", \"C2\", 0, [sid])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1190", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1190/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1190/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1190/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1190", "id": 467559713, "node_id": "MDU6SXNzdWU0Njc1NTk3MTM=", "number": 1190, "title": "Why does ConnectionPool.get_connection() take a command name and additional arguments?", "user": {"login": "coleifer", "id": 119974, "node_id": "MDQ6VXNlcjExOTk3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/119974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coleifer", "html_url": "https://github.com/coleifer", "followers_url": "https://api.github.com/users/coleifer/followers", "following_url": "https://api.github.com/users/coleifer/following{/other_user}", "gists_url": "https://api.github.com/users/coleifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/coleifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coleifer/subscriptions", "organizations_url": "https://api.github.com/users/coleifer/orgs", "repos_url": "https://api.github.com/users/coleifer/repos", "events_url": "https://api.github.com/users/coleifer/events{/privacy}", "received_events_url": "https://api.github.com/users/coleifer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-12T19:08:23Z", "updated_at": "2019-07-29T01:55:07Z", "closed_at": "2019-07-29T01:55:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: 3.2.1\r\n\r\n**Platform**: N/A\r\n\r\n**Description**: I apologize that this is not a bug, per-se, but more a question.\r\n\r\nI noticed that ConnectionPool.get_connection() has the signature:\r\n\r\n```python\r\ndef get_connection(self, command_name, *keys, **options):\r\n```\r\n\r\nBut none of these parameters seem to be used within the method itself. Is there a reason for this? If so, a comment might be helpful, as it struck me as very odd. Especially as in places in `client` it appears to be attempting to use these parameters.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1189", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1189/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1189/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1189/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1189", "id": 465725297, "node_id": "MDU6SXNzdWU0NjU3MjUyOTc=", "number": 1189, "title": "support `username` during auth", "user": {"login": "RoeyPrat", "id": 3721069, "node_id": "MDQ6VXNlcjM3MjEwNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3721069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoeyPrat", "html_url": "https://github.com/RoeyPrat", "followers_url": "https://api.github.com/users/RoeyPrat/followers", "following_url": "https://api.github.com/users/RoeyPrat/following{/other_user}", "gists_url": "https://api.github.com/users/RoeyPrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoeyPrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoeyPrat/subscriptions", "organizations_url": "https://api.github.com/users/RoeyPrat/orgs", "repos_url": "https://api.github.com/users/RoeyPrat/repos", "events_url": "https://api.github.com/users/RoeyPrat/events{/privacy}", "received_events_url": "https://api.github.com/users/RoeyPrat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "RoeyPrat", "id": 3721069, "node_id": "MDQ6VXNlcjM3MjEwNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3721069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoeyPrat", "html_url": "https://github.com/RoeyPrat", "followers_url": "https://api.github.com/users/RoeyPrat/followers", "following_url": "https://api.github.com/users/RoeyPrat/following{/other_user}", "gists_url": "https://api.github.com/users/RoeyPrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoeyPrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoeyPrat/subscriptions", "organizations_url": "https://api.github.com/users/RoeyPrat/orgs", "repos_url": "https://api.github.com/users/RoeyPrat/repos", "events_url": "https://api.github.com/users/RoeyPrat/events{/privacy}", "received_events_url": "https://api.github.com/users/RoeyPrat/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "RoeyPrat", "id": 3721069, "node_id": "MDQ6VXNlcjM3MjEwNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3721069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoeyPrat", "html_url": "https://github.com/RoeyPrat", "followers_url": "https://api.github.com/users/RoeyPrat/followers", "following_url": "https://api.github.com/users/RoeyPrat/following{/other_user}", "gists_url": "https://api.github.com/users/RoeyPrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoeyPrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoeyPrat/subscriptions", "organizations_url": "https://api.github.com/users/RoeyPrat/orgs", "repos_url": "https://api.github.com/users/RoeyPrat/repos", "events_url": "https://api.github.com/users/RoeyPrat/events{/privacy}", "received_events_url": "https://api.github.com/users/RoeyPrat/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-07-09T11:24:29Z", "updated_at": "2019-12-29T20:25:59Z", "closed_at": "2019-12-29T20:25:59Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "https://redis.io/topics/acl#acl", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1188", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1188/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1188/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1188/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1188", "id": 465725171, "node_id": "MDU6SXNzdWU0NjU3MjUxNzE=", "number": 1188, "title": "Add AuthenticationError for NOPERM error", "user": {"login": "RoeyPrat", "id": 3721069, "node_id": "MDQ6VXNlcjM3MjEwNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3721069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoeyPrat", "html_url": "https://github.com/RoeyPrat", "followers_url": "https://api.github.com/users/RoeyPrat/followers", "following_url": "https://api.github.com/users/RoeyPrat/following{/other_user}", "gists_url": "https://api.github.com/users/RoeyPrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoeyPrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoeyPrat/subscriptions", "organizations_url": "https://api.github.com/users/RoeyPrat/orgs", "repos_url": "https://api.github.com/users/RoeyPrat/repos", "events_url": "https://api.github.com/users/RoeyPrat/events{/privacy}", "received_events_url": "https://api.github.com/users/RoeyPrat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2168488945, "node_id": "MDU6TGFiZWwyMTY4NDg4OTQ1", "url": "https://api.github.com/repos/andymccurdy/redis-py/labels/Stale", "name": "Stale", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "RoeyPrat", "id": 3721069, "node_id": "MDQ6VXNlcjM3MjEwNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3721069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoeyPrat", "html_url": "https://github.com/RoeyPrat", "followers_url": "https://api.github.com/users/RoeyPrat/followers", "following_url": "https://api.github.com/users/RoeyPrat/following{/other_user}", "gists_url": "https://api.github.com/users/RoeyPrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoeyPrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoeyPrat/subscriptions", "organizations_url": "https://api.github.com/users/RoeyPrat/orgs", "repos_url": "https://api.github.com/users/RoeyPrat/repos", "events_url": "https://api.github.com/users/RoeyPrat/events{/privacy}", "received_events_url": "https://api.github.com/users/RoeyPrat/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "RoeyPrat", "id": 3721069, "node_id": "MDQ6VXNlcjM3MjEwNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3721069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoeyPrat", "html_url": "https://github.com/RoeyPrat", "followers_url": "https://api.github.com/users/RoeyPrat/followers", "following_url": "https://api.github.com/users/RoeyPrat/following{/other_user}", "gists_url": "https://api.github.com/users/RoeyPrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoeyPrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoeyPrat/subscriptions", "organizations_url": "https://api.github.com/users/RoeyPrat/orgs", "repos_url": "https://api.github.com/users/RoeyPrat/repos", "events_url": "https://api.github.com/users/RoeyPrat/events{/privacy}", "received_events_url": "https://api.github.com/users/RoeyPrat/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-07-09T11:24:09Z", "updated_at": "2020-07-09T00:25:31Z", "closed_at": "2020-07-09T00:25:30Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "also look at edge cases like \"username does not exist\", and make sure we catch them.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1187", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1187/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1187/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1187/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1187", "id": 465724919, "node_id": "MDU6SXNzdWU0NjU3MjQ5MTk=", "number": 1187, "title": "support ACL", "user": {"login": "RoeyPrat", "id": 3721069, "node_id": "MDQ6VXNlcjM3MjEwNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3721069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoeyPrat", "html_url": "https://github.com/RoeyPrat", "followers_url": "https://api.github.com/users/RoeyPrat/followers", "following_url": "https://api.github.com/users/RoeyPrat/following{/other_user}", "gists_url": "https://api.github.com/users/RoeyPrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoeyPrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoeyPrat/subscriptions", "organizations_url": "https://api.github.com/users/RoeyPrat/orgs", "repos_url": "https://api.github.com/users/RoeyPrat/repos", "events_url": "https://api.github.com/users/RoeyPrat/events{/privacy}", "received_events_url": "https://api.github.com/users/RoeyPrat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "RoeyPrat", "id": 3721069, "node_id": "MDQ6VXNlcjM3MjEwNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3721069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoeyPrat", "html_url": "https://github.com/RoeyPrat", "followers_url": "https://api.github.com/users/RoeyPrat/followers", "following_url": "https://api.github.com/users/RoeyPrat/following{/other_user}", "gists_url": "https://api.github.com/users/RoeyPrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoeyPrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoeyPrat/subscriptions", "organizations_url": "https://api.github.com/users/RoeyPrat/orgs", "repos_url": "https://api.github.com/users/RoeyPrat/repos", "events_url": "https://api.github.com/users/RoeyPrat/events{/privacy}", "received_events_url": "https://api.github.com/users/RoeyPrat/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "RoeyPrat", "id": 3721069, "node_id": "MDQ6VXNlcjM3MjEwNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3721069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoeyPrat", "html_url": "https://github.com/RoeyPrat", "followers_url": "https://api.github.com/users/RoeyPrat/followers", "following_url": "https://api.github.com/users/RoeyPrat/following{/other_user}", "gists_url": "https://api.github.com/users/RoeyPrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoeyPrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoeyPrat/subscriptions", "organizations_url": "https://api.github.com/users/RoeyPrat/orgs", "repos_url": "https://api.github.com/users/RoeyPrat/repos", "events_url": "https://api.github.com/users/RoeyPrat/events{/privacy}", "received_events_url": "https://api.github.com/users/RoeyPrat/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-07-09T11:23:33Z", "updated_at": "2019-12-29T06:54:20Z", "closed_at": "2019-12-29T06:54:19Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "ACL SETUSER\r\nACL LIST\r\nACL GETUSER\r\nACL CAT", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1186", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1186/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1186/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1186/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1186", "id": 465633691, "node_id": "MDU6SXNzdWU0NjU2MzM2OTE=", "number": 1186, "title": "Random ConnectionErrors (104, Connection reset by peer)", "user": {"login": "venthur", "id": 128459, "node_id": "MDQ6VXNlcjEyODQ1OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/128459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/venthur", "html_url": "https://github.com/venthur", "followers_url": "https://api.github.com/users/venthur/followers", "following_url": "https://api.github.com/users/venthur/following{/other_user}", "gists_url": "https://api.github.com/users/venthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/venthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/venthur/subscriptions", "organizations_url": "https://api.github.com/users/venthur/orgs", "repos_url": "https://api.github.com/users/venthur/repos", "events_url": "https://api.github.com/users/venthur/events{/privacy}", "received_events_url": "https://api.github.com/users/venthur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2019-07-09T08:08:02Z", "updated_at": "2020-05-06T19:06:39Z", "closed_at": "2020-03-13T18:05:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: \r\nredis-py: 3.2.1\r\nredis server: 5.0.5\r\n\r\n**Platform**: Debian\r\n\r\n**Description**: \r\nI have a connection to the Server that is idle for a few hours, and when I try to perform an operation, I get a `redis.exceptions.ConnectionError: Error while reading from socket: (104, 'Connection reset by peer')`. This happens not always but often enough to be annoying. I can wrap it in a try-except and just reconnect and it will work, however i don't want to wrap **every** command to redis like this.\r\n\r\nSome Background: The program is getting tasks from a Queue implemented in Redis, computing for a few hours, getting the next task, and so on.\r\n\r\nThe question is, is this a bug or expected? Is there an option to prevent this? I don't have any timeouts set on the client or server (everything is default). The current workaround would be to emulate a pre-ping, by sending a `ping` wrapped in a try-except-and-reconnect-if-needed, but it's not very pretty.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1185", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1185/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1185/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1185/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1185", "id": 465001052, "node_id": "MDU6SXNzdWU0NjUwMDEwNTI=", "number": 1185, "title": "odd behavior with the graphdb module", "user": {"login": "andreaBelmont", "id": 51330379, "node_id": "MDQ6VXNlcjUxMzMwMzc5", "avatar_url": "https://avatars2.githubusercontent.com/u/51330379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreaBelmont", "html_url": "https://github.com/andreaBelmont", "followers_url": "https://api.github.com/users/andreaBelmont/followers", "following_url": "https://api.github.com/users/andreaBelmont/following{/other_user}", "gists_url": "https://api.github.com/users/andreaBelmont/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreaBelmont/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreaBelmont/subscriptions", "organizations_url": "https://api.github.com/users/andreaBelmont/orgs", "repos_url": "https://api.github.com/users/andreaBelmont/repos", "events_url": "https://api.github.com/users/andreaBelmont/events{/privacy}", "received_events_url": "https://api.github.com/users/andreaBelmont/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-07T22:43:17Z", "updated_at": "2019-08-28T21:31:58Z", "closed_at": "2019-08-28T21:31:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having a hard time understanding why this simple cypher code fails to execute at the creating the edge. The cypher code works on neo4j. Am I doing something wrong? Thanks\r\n```\r\nimport redis\r\nr = redis.StrictRedis(host='localhost', port=6379, db=0)\r\n\r\ns = \"\"\"\\\r\nmerge (:person {name:'a'})\r\nmerge (:person {name:'b'})\r\nmatch (a:person {name:\"a\"}) match (b:person {name:\"b\"}) merge (a)-[r:loves]->(b)\r\n\"\"\"\r\n\r\nfor line in s.split('\\n'):\r\n    print(line)\r\n    reply = r.execute_command('GRAPH.QUERY', 'social', line)\r\n    print(reply)\r\n```\r\n\r\nThis is the output\r\n\r\n```\r\nmerge (:person {name:'a'})\r\n[[b'Query internal execution time: 0.089000 milliseconds']]\r\nmerge (:person {name:'b'})\r\n[[b'Query internal execution time: 0.062000 milliseconds']]\r\nmatch (a:person {name:\"a\"}) match (b:person {name:\"b\"}) merge (a)-[r:loves]->(b) return r\r\n---------------------------------------------------------------------------\r\nResponseError                             Traceback (most recent call last)\r\n<ipython-input-6-ef730d633aeb> in <module>\r\n      8 for line in s.split('\\n'):\r\n      9     print(line)\r\n---> 10     reply = r.execute_command('GRAPH.QUERY', 'social', line)\r\n     11     print(reply)\r\n     12\r\n\r\n~/my_codes/time_machine/.env/lib/python3.7/site-packages/redis/client.py in execute_command(self, *args, **options)\r\n    666         try:\r\n    667             connection.send_command(*args)\r\n--> 668             return self.parse_response(connection, command_name, **options)\r\n    669         except (ConnectionError, TimeoutError) as e:\r\n    670             connection.disconnect()\r\n\r\n~/my_codes/time_machine/.env/lib/python3.7/site-packages/redis/client.py in parse_response(self, connection, command_name, **options)\r\n    678     def parse_response(self, connection, command_name, **options):\r\n    679         \"Parses a response from the Redis server\"\r\n--> 680         response = connection.read_response()\r\n    681         if command_name in self.response_callbacks:\r\n    682             return self.response_callbacks[command_name](response, **options)\r\n\r\n~/my_codes/time_machine/.env/lib/python3.7/site-packages/redis/connection.py in read_response(self)\r\n    627             raise\r\n    628         if isinstance(response, ResponseError):\r\n--> 629             raise response\r\n    630         return response\r\n    631\r\n\r\nResponseError: Syntax error at offset 62 near 'merge'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1184", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1184/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1184/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1184/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1184", "id": 464036262, "node_id": "MDU6SXNzdWU0NjQwMzYyNjI=", "number": 1184, "title": "Does it support IPv6 ?", "user": {"login": "C2python", "id": 10085996, "node_id": "MDQ6VXNlcjEwMDg1OTk2", "avatar_url": "https://avatars0.githubusercontent.com/u/10085996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/C2python", "html_url": "https://github.com/C2python", "followers_url": "https://api.github.com/users/C2python/followers", "following_url": "https://api.github.com/users/C2python/following{/other_user}", "gists_url": "https://api.github.com/users/C2python/gists{/gist_id}", "starred_url": "https://api.github.com/users/C2python/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/C2python/subscriptions", "organizations_url": "https://api.github.com/users/C2python/orgs", "repos_url": "https://api.github.com/users/C2python/repos", "events_url": "https://api.github.com/users/C2python/events{/privacy}", "received_events_url": "https://api.github.com/users/C2python/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-04T02:59:39Z", "updated_at": "2019-08-27T17:46:55Z", "closed_at": "2019-08-27T17:46:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for wanting to report an issue you've found in redis-py. Please delete this text and fill in the template below.  \r\nIt is of course not always possible to reduce your code to a small test case, but it's highly appreciated to have as much data as possible. Thank you!\r\n\r\n**Version**: What redis-py and what redis version is the issue happening on?\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1183", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1183/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1183/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1183/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1183", "id": 463418820, "node_id": "MDU6SXNzdWU0NjM0MTg4MjA=", "number": 1183, "title": "Redisgraph parameter insertion", "user": {"login": "LWprogramming", "id": 13173037, "node_id": "MDQ6VXNlcjEzMTczMDM3", "avatar_url": "https://avatars0.githubusercontent.com/u/13173037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LWprogramming", "html_url": "https://github.com/LWprogramming", "followers_url": "https://api.github.com/users/LWprogramming/followers", "following_url": "https://api.github.com/users/LWprogramming/following{/other_user}", "gists_url": "https://api.github.com/users/LWprogramming/gists{/gist_id}", "starred_url": "https://api.github.com/users/LWprogramming/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LWprogramming/subscriptions", "organizations_url": "https://api.github.com/users/LWprogramming/orgs", "repos_url": "https://api.github.com/users/LWprogramming/repos", "events_url": "https://api.github.com/users/LWprogramming/events{/privacy}", "received_events_url": "https://api.github.com/users/LWprogramming/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-02T20:23:09Z", "updated_at": "2019-07-03T15:02:29Z", "closed_at": "2019-07-03T15:02:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working with redisgraph and would like to insert parameters into my Cypher queries programmatically. Is there a way to do this? \r\n\r\nFor instance, given the query\r\n```cypher\r\nMATCH (Foo:Bar)\r\nWHERE Foo.name = $name\r\nRETURN Foo\r\n```\r\nwhere `name` is a parameter, say `{'name': 'hello'}`, I'd like to write some python to execute this query by passing `name` as a parameter.\r\n\r\nThe [neo4j tutorial](https://neo4j.com/developer/python/) has an example of doing this programmatically.\r\n\r\n```python\r\ntx.run(\"CREATE (a:Greeting) \"\r\n    \"SET a.message = $message \"\r\n    \"RETURN a.message + ', from node ' + id(a)\", message=message)\r\n```\r\nHere we have `message` being passed in as an argument.\r\n\r\nThings that I tried that didn't work because it said that `x` is still not defined:\r\n\r\n* Running this:\r\n \r\n```python\r\nimport redis\r\nr = redis.Redis(host=u'localhost', port=6379)\r\nquery = 'match(n) return $x'\r\nr.execute_command('GRAPH.QUERY animals', query, x='hello')\r\n```\r\n\r\n* Attempting to set `x` by running `SET 'x' 'hello'`, and then running the python above but without the `x` named parameter.\r\n\r\n* Using redisgraph-py but this sort of query parameter insertion doesn't seem to be an option there. \r\n\r\n* Reading the docs-- there's no mention of this anywhere. It doesn't say it's not supported either, there's just no mention whatsoever.\r\n\r\n**Version**: redis-py- '3.2.1', redis: docker container version 1.2.2\r\n\r\n**Platform**: Python 3.6.7 on Ubuntu 18.04", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1181", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1181/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1181/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1181/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1181", "id": 461147668, "node_id": "MDU6SXNzdWU0NjExNDc2Njg=", "number": 1181, "title": "UnicodeDecodeError: 'utf8' on Windows", "user": {"login": "alexsilva", "id": 2024086, "node_id": "MDQ6VXNlcjIwMjQwODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2024086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexsilva", "html_url": "https://github.com/alexsilva", "followers_url": "https://api.github.com/users/alexsilva/followers", "following_url": "https://api.github.com/users/alexsilva/following{/other_user}", "gists_url": "https://api.github.com/users/alexsilva/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexsilva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexsilva/subscriptions", "organizations_url": "https://api.github.com/users/alexsilva/orgs", "repos_url": "https://api.github.com/users/alexsilva/repos", "events_url": "https://api.github.com/users/alexsilva/events{/privacy}", "received_events_url": "https://api.github.com/users/alexsilva/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2168488945, "node_id": "MDU6TGFiZWwyMTY4NDg4OTQ1", "url": "https://api.github.com/repos/andymccurdy/redis-py/labels/Stale", "name": "Stale", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-26T19:41:35Z", "updated_at": "2020-06-29T21:52:25Z", "closed_at": "2020-06-29T14:25:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for wanting to report an issue you've found in redis-py. Please delete this text and fill in the template below.  \r\nIt is of course not always possible to reduce your code to a small test case, but it's highly appreciated to have as much data as possible. Thank you!\r\n\r\n**Version**: What redis-py and what redis version is the issue happening on? `v3.2.1`\r\n\r\n**Platform**: What platform / version?  `Windows 10 64bits`\r\n\r\n**Description**: A connection failure does not display the error message correctly.\r\n```\r\nimport redis\r\nconn = redis.Redis(host='localhost', port=6379, db=0)\r\nconn.set('key', 'value')\r\n\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"Python2.7\\lib\\site-packages\\redis\\client.py\", line 1451, in set\r\n    return self.execute_command('SET', *pieces)\r\n  File \"Python2.7\\lib\\site-packages\\redis\\client.py\", line 772, in execute_command\r\n    connection = pool.get_connection(command_name, **options)\r\n  File \"Python2.7\\lib\\site-packages\\redis\\connection.py\", line 994, in get_connection\r\n    connection.connect()\r\n  File \"Python2.7\\lib\\site-packages\\redis\\connection.py\", line 497, in connect\r\n    raise ConnectionError(self._error_message(e))\r\n  File \"Python2.7\\lib\\site-packages\\redis\\connection.py\", line 561, in _error_message\r\n    (exception.args[0], self.host, self.port, exception.args[1])\r\nUnicodeDecodeError: 'utf8' codec can't decode byte 0xe3 in position 13: invalid continuation byte\r\n``` \r\n\r\nPossible correction:\r\n```\r\nreturn \"Error %s connecting to %s:%s. %s.\" % \\\r\n                (exception.args[0], self.host, self.port, exception.args[1].decode('utf8', 'ignore'))\r\n```\r\n\r\nThe error message is a str object and therefore needs to be decoded in some way.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1178", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1178/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1178/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1178/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1178", "id": 458339568, "node_id": "MDU6SXNzdWU0NTgzMzk1Njg=", "number": 1178, "title": "Connection is not thread-safe", "user": {"login": "gloryfromca", "id": 23442919, "node_id": "MDQ6VXNlcjIzNDQyOTE5", "avatar_url": "https://avatars2.githubusercontent.com/u/23442919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gloryfromca", "html_url": "https://github.com/gloryfromca", "followers_url": "https://api.github.com/users/gloryfromca/followers", "following_url": "https://api.github.com/users/gloryfromca/following{/other_user}", "gists_url": "https://api.github.com/users/gloryfromca/gists{/gist_id}", "starred_url": "https://api.github.com/users/gloryfromca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gloryfromca/subscriptions", "organizations_url": "https://api.github.com/users/gloryfromca/orgs", "repos_url": "https://api.github.com/users/gloryfromca/repos", "events_url": "https://api.github.com/users/gloryfromca/events{/privacy}", "received_events_url": "https://api.github.com/users/gloryfromca/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-20T04:32:01Z", "updated_at": "2020-01-30T23:05:13Z", "closed_at": "2020-01-30T23:05:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version**: redis==2.10.6\r\n\r\n**Platform**:  Python 3.7 on  Ubuntu 18.04\r\n\r\n**Description**: \r\nI encountered the same question with the link: [https://github.com/celery/celery/issues/4363](https://github.com/celery/celery/issues/4363)\r\n\r\nI reproduce the error by inserting time.sleep() in Connection.connect which is trying to initialize self._sock, then start two thread, make both pass self._sock existence check and run into Connection._on_connect (apprently Connection.connnect without any thread-lock).\r\n\r\nSo when one thread in on_connect() call  `read_response`, it maybe get another thread's response, then raise the error.\r\n \r\n\r\n    def on_connect(self):\r\n        \"Initialize the connection, authenticate and select a database\"\r\n        self._parser.on_connect(self)\r\n\r\n        # if a password is specified, authenticate\r\n        if self.password:\r\n            self.send_command('AUTH', self.password)\r\n            if nativestr(self.read_response()) != 'OK':\r\n                raise AuthenticationError('Invalid Password')\r\n\r\n        # if a database is specified, switch to it\r\n        if self.db:\r\n            self.send_command('SELECT', self.db)\r\n            res = self.read_response()\r\n            if nativestr(res) != 'OK':\r\n                raise ConnectionError('Invalid Database')\r\n\r\nIs this a bug or something I don't get? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1176", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1176/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1176/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1176/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1176", "id": 458029831, "node_id": "MDU6SXNzdWU0NTgwMjk4MzE=", "number": 1176, "title": "Working with RedisGraph", "user": {"login": "EdLeafe", "id": 177550, "node_id": "MDQ6VXNlcjE3NzU1MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/177550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdLeafe", "html_url": "https://github.com/EdLeafe", "followers_url": "https://api.github.com/users/EdLeafe/followers", "following_url": "https://api.github.com/users/EdLeafe/following{/other_user}", "gists_url": "https://api.github.com/users/EdLeafe/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdLeafe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdLeafe/subscriptions", "organizations_url": "https://api.github.com/users/EdLeafe/orgs", "repos_url": "https://api.github.com/users/EdLeafe/repos", "events_url": "https://api.github.com/users/EdLeafe/events{/privacy}", "received_events_url": "https://api.github.com/users/EdLeafe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-19T13:56:31Z", "updated_at": "2019-06-19T20:58:16Z", "closed_at": "2019-06-19T20:58:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is not an issue per se, but just a question. Is there support in redis-py for working with RedisGraph? I don't see any graph-specific methods, so how would I work with graph queries using redis-py?\r\n\r\nP.S. as an SDK-developer, I totally understand if the answer is \"you can't\". ;-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1174", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1174/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1174/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1174/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1174", "id": 457323183, "node_id": "MDU6SXNzdWU0NTczMjMxODM=", "number": 1174, "title": "can not disconnect pool connect", "user": {"login": "hyahm", "id": 22030094, "node_id": "MDQ6VXNlcjIyMDMwMDk0", "avatar_url": "https://avatars3.githubusercontent.com/u/22030094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyahm", "html_url": "https://github.com/hyahm", "followers_url": "https://api.github.com/users/hyahm/followers", "following_url": "https://api.github.com/users/hyahm/following{/other_user}", "gists_url": "https://api.github.com/users/hyahm/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyahm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyahm/subscriptions", "organizations_url": "https://api.github.com/users/hyahm/orgs", "repos_url": "https://api.github.com/users/hyahm/repos", "events_url": "https://api.github.com/users/hyahm/events{/privacy}", "received_events_url": "https://api.github.com/users/hyahm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-18T08:10:17Z", "updated_at": "2020-07-13T00:32:03Z", "closed_at": "2020-07-13T00:32:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nrconfig = {\r\n    \"host\": \"127.0.0.1\",\r\n    \"port\":6379,\r\n    \"password\": \"__@picker-redis\",\r\n    \"db\": 8\r\n}\r\n\r\nclass Redis:\r\n    def __init__(self, kargs):\r\n        self.pool =  redis.ConnectionPool(**kargs)\r\n        self.r = redis.StrictRedis(connection_pool=self.pool)\r\n    \r\n    def connect(self):\r\n        return self.r\r\n\r\n    def close(self):\r\n        self.pool.disconnect()\r\n        # if self.r is not None:\r\n        #     self.r.connection_pool.disconnect()\r\n        # else:\r\n        #     print(\"no connect\")\r\n\r\n# for i in range(1000):\r\nr1 = Redis(rconfig)\r\nconn = r1.connect()\r\nconn.set(\"aaaa\",\"bbbb\")\r\nr1.close()\r\n```\r\ni run it twice, so have to connects\r\n```shell\r\n[root@localhost ~]# ss -antup | grep 6379\r\ntcp   LISTEN      0       128           127.0.0.1:6379            0.0.0.0:*      users:((\"redis-server\",pid=2611,fd=6))                                         \r\ntcp   TIME-WAIT   0       0             127.0.0.1:45764         127.0.0.1:6379                                                                                  \r\ntcp   TIME-WAIT   0       0             127.0.0.1:43752         127.0.0.1:6379 \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1173", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1173/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1173/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1173/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1173", "id": 455615159, "node_id": "MDU6SXNzdWU0NTU2MTUxNTk=", "number": 1173, "title": "known command 'SELECT'", "user": {"login": "cccthon", "id": 19815750, "node_id": "MDQ6VXNlcjE5ODE1NzUw", "avatar_url": "https://avatars0.githubusercontent.com/u/19815750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cccthon", "html_url": "https://github.com/cccthon", "followers_url": "https://api.github.com/users/cccthon/followers", "following_url": "https://api.github.com/users/cccthon/following{/other_user}", "gists_url": "https://api.github.com/users/cccthon/gists{/gist_id}", "starred_url": "https://api.github.com/users/cccthon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cccthon/subscriptions", "organizations_url": "https://api.github.com/users/cccthon/orgs", "repos_url": "https://api.github.com/users/cccthon/repos", "events_url": "https://api.github.com/users/cccthon/events{/privacy}", "received_events_url": "https://api.github.com/users/cccthon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-13T08:52:50Z", "updated_at": "2019-06-13T08:53:13Z", "closed_at": "2019-06-13T08:53:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for wanting to report an issue you've found in redis-py. Please delete this text and fill in the template below.  \r\nIt is of course not always possible to reduce your code to a small test case, but it's highly appreciated to have as much data as possible. Thank you!\r\n\r\n**Version**: What redis-py and what redis version is the issue happening on?\r\n\r\n**Platform**: What platform / version? (For example Python 3.5.1 on Windows 7 / Ubuntu 15.10 / Azure)\r\n\r\n**Description**: Description of your issue, stack traces from errors and code that reproduces the issue\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1172", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1172/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1172/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1172/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1172", "id": 452418236, "node_id": "MDU6SXNzdWU0NTI0MTgyMzY=", "number": 1172, "title": "sentinel requirepass", "user": {"login": "yushizhao", "id": 23001757, "node_id": "MDQ6VXNlcjIzMDAxNzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/23001757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yushizhao", "html_url": "https://github.com/yushizhao", "followers_url": "https://api.github.com/users/yushizhao/followers", "following_url": "https://api.github.com/users/yushizhao/following{/other_user}", "gists_url": "https://api.github.com/users/yushizhao/gists{/gist_id}", "starred_url": "https://api.github.com/users/yushizhao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yushizhao/subscriptions", "organizations_url": "https://api.github.com/users/yushizhao/orgs", "repos_url": "https://api.github.com/users/yushizhao/repos", "events_url": "https://api.github.com/users/yushizhao/events{/privacy}", "received_events_url": "https://api.github.com/users/yushizhao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-05T10:06:44Z", "updated_at": "2019-06-06T02:43:07Z", "closed_at": "2019-06-06T02:43:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "As stated on https://redis.io/topics/sentinel:\r\n\r\nYou can also configure the Sentinel instance itself in order to require client authentication via the AUTH command, however this feature is only available starting with Redis 5.0.1.\r\n\r\nIn order to do so, just add the following configuration directive to all your Sentinel instances:\r\n\r\nrequirepass \"your_password_here\"\r\n\r\nSo, in order to interact with such a sentinel, how can we send the AUTH command to Sentinel instances using redis-py?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1171", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1171/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1171/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1171/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1171", "id": 451800846, "node_id": "MDU6SXNzdWU0NTE4MDA4NDY=", "number": 1171, "title": "the from_url(urlparse) does not parse the correct password", "user": {"login": "pingf", "id": 375315, "node_id": "MDQ6VXNlcjM3NTMxNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/375315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pingf", "html_url": "https://github.com/pingf", "followers_url": "https://api.github.com/users/pingf/followers", "following_url": "https://api.github.com/users/pingf/following{/other_user}", "gists_url": "https://api.github.com/users/pingf/gists{/gist_id}", "starred_url": "https://api.github.com/users/pingf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pingf/subscriptions", "organizations_url": "https://api.github.com/users/pingf/orgs", "repos_url": "https://api.github.com/users/pingf/repos", "events_url": "https://api.github.com/users/pingf/events{/privacy}", "received_events_url": "https://api.github.com/users/pingf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-04T05:11:04Z", "updated_at": "2019-06-04T07:50:36Z", "closed_at": "2019-06-04T07:50:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for wanting to report an issue you've found in redis-py. Please delete this text and fill in the template below.  \r\nIt is of course not always possible to reduce your code to a small test case, but it's highly appreciated to have as much data as possible. Thank you!\r\n\r\n**Version**:  3.2 (redis-server 4.0.9)\r\n\r\n**Platform**: What platform / version? (For example Python 3.7.3 on Ubuntu 18.04 / local)\r\n\r\n**Description**: \r\nwhen I use the special chars as the password `!#$%^&*()[]`,  I can connect to the redis and ping with command `redis-cli -a '!@#$%^&*()[]'`\r\n\r\nhowever when I use redis-py's  from_url, it does not work!\r\n\r\n```python\r\npassword = '!#$%^&*()[]'\r\nurl = 'redis://:{}@localhost:6379/0'.format(password)\r\nr=redis.from_url(url)\r\nresult = r.ping()\r\nprint(result)\r\n```\r\n\r\nmaybe https://github.com/andymccurdy/redis-py/issues/799 is related\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1168", "repository_url": "https://api.github.com/repos/andymccurdy/redis-py", "labels_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1168/labels{/name}", "comments_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1168/comments", "events_url": "https://api.github.com/repos/andymccurdy/redis-py/issues/1168/events", "html_url": "https://github.com/andymccurdy/redis-py/issues/1168", "id": 444437844, "node_id": "MDU6SXNzdWU0NDQ0Mzc4NDQ=", "number": 1168, "title": "execute_command() and response callbacks", "user": {"login": "itamarhaber", "id": 6059516, "node_id": "MDQ6VXNlcjYwNTk1MTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/6059516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarhaber", "html_url": "https://github.com/itamarhaber", "followers_url": "https://api.github.com/users/itamarhaber/followers", "following_url": "https://api.github.com/users/itamarhaber/following{/other_user}", "gists_url": "https://api.github.com/users/itamarhaber/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarhaber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarhaber/subscriptions", "organizations_url": "https://api.github.com/users/itamarhaber/orgs", "repos_url": "https://api.github.com/users/itamarhaber/repos", "events_url": "https://api.github.com/users/itamarhaber/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarhaber/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-05-15T13:25:36Z", "updated_at": "2019-05-28T23:23:40Z", "closed_at": "2019-05-28T23:21:32Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Thanks for wanting to report an issue you've found in redis-py. Please delete this text and fill in the template below.  \r\nIt is of course not always possible to reduce your code to a small test case, but it's highly appreciated to have as much data as possible. Thank you!\r\n\r\n**Version**: all\r\n\r\n**Platform**: all\r\n\r\n**Description**: there is quirkiness in how the response from `execute_command` is handled, which is case- (pun intended) dependent. When calling `execute_command('info')`, the callback is skipped and the result is returned as a newline-separated string. Calling `execute_command('INFO')` returns it as a parsed dict. The same would possibly happen with any custom response callback.\r\n\r\nThat said, changing this (e.g. upper() on the command's name) would break existing code relying on this behavior.\r\n\r\nCredit: @oranagra ", "performed_via_github_app": null, "score": 1.0}]}