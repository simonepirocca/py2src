{"total_count": 68, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/166", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/166/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/166/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/166", "id": 619727638, "node_id": "MDU6SXNzdWU2MTk3Mjc2Mzg=", "number": 166, "title": "DRF: AttributeError 'unicode' object has no attribute 'crop'", "user": {"login": "chubz", "id": 2011432, "node_id": "MDQ6VXNlcjIwMTE0MzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2011432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chubz", "html_url": "https://github.com/chubz", "followers_url": "https://api.github.com/users/chubz/followers", "following_url": "https://api.github.com/users/chubz/following{/other_user}", "gists_url": "https://api.github.com/users/chubz/gists{/gist_id}", "starred_url": "https://api.github.com/users/chubz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chubz/subscriptions", "organizations_url": "https://api.github.com/users/chubz/orgs", "repos_url": "https://api.github.com/users/chubz/repos", "events_url": "https://api.github.com/users/chubz/events{/privacy}", "received_events_url": "https://api.github.com/users/chubz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-17T15:09:19Z", "updated_at": "2020-06-07T08:31:35Z", "closed_at": "2020-06-07T08:31:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nI've added versatileimagefield to my project in hopes to provide a nice way for an admin to manipulate images, and I really like the DRF integration idea where I could provide my team with image options under the same key.\r\n\r\nHow ever I ran into a wall:\r\nException Value: 'unicode' object has no attribute 'crop'\r\n`File \"/home/borko/virtualenvs/move_music/local/lib/python2.7/site-packages/rest_framework/serializers.py\" in to_representation\r\n  527.                 ret[field.field_name] = field.to_representation(attribute)\r\n\r\nFile \"/home/borko/virtualenvs/move_music/local/lib/python2.7/site-packages/versatileimagefield/serializers.py\" in to_representation\r\n  53.         return self.to_native(value)\r\n\r\nFile \"/home/borko/virtualenvs/move_music/local/lib/python2.7/site-packages/versatileimagefield/serializers.py\" in to_native\r\n  46.             request=context_request\r\n\r\nFile \"/home/borko/virtualenvs/move_music/local/lib/python2.7/site-packages/versatileimagefield/utils.py\" in build_versatileimagefield_url_set\r\n  223.             img_url = get_url_from_image_key(image_instance, image_key)\r\n\r\nFile \"/home/borko/virtualenvs/move_music/local/lib/python2.7/site-packages/versatileimagefield/utils.py\" in get_url_from_image_key\r\n  194.     img_url = reduce(getattr, img_key_split, image_instance)`\r\n\r\nI did add  'versatileimagefield', to my installed apps\r\nI drop replace my ImageFields in models. I did not prewarm any images, and I am using django-storages and my media is being uploaded to an s3 bucket.\r\n\r\nWe still are on py2.7 but that is going to change and this is Django 1.11.29 project.\r\n\r\nAny ideas as to why I would be getting unicode error here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/163", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/163/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/163/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/163", "id": 547354486, "node_id": "MDU6SXNzdWU1NDczNTQ0ODY=", "number": 163, "title": "Issues deploying to Google App Engine", "user": {"login": "alstr", "id": 11612438, "node_id": "MDQ6VXNlcjExNjEyNDM4", "avatar_url": "https://avatars2.githubusercontent.com/u/11612438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alstr", "html_url": "https://github.com/alstr", "followers_url": "https://api.github.com/users/alstr/followers", "following_url": "https://api.github.com/users/alstr/following{/other_user}", "gists_url": "https://api.github.com/users/alstr/gists{/gist_id}", "starred_url": "https://api.github.com/users/alstr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alstr/subscriptions", "organizations_url": "https://api.github.com/users/alstr/orgs", "repos_url": "https://api.github.com/users/alstr/repos", "events_url": "https://api.github.com/users/alstr/events{/privacy}", "received_events_url": "https://api.github.com/users/alstr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-09T09:28:22Z", "updated_at": "2020-01-13T09:13:05Z", "closed_at": "2020-01-13T09:13:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for the useful package. All worked great with my app deployed to Google App Engine when I had `django-versatileimagefield==1.10` and `Django==2.2.2`.\r\n\r\nSince upgrading to `django-versatileimagefield==2.0` and `Django==3.0.2`, I just can't get it to play nicely.\r\n\r\nUsing just those requirements comes up with the error that others have reported:\r\n\r\n`ImportError: failed to find libmagic.  Check your installation`\r\n\r\nI can get around it locally on my Mac by adding `python-magic-bin==0.4.14` to the requirements.\r\n\r\nWhen I deploy to Google App Engine, though, it fails when when trying to install `python-magic-bin` with:\r\n\r\n```\r\nCould not find a version that satisfies the requirement python-magic-bin==0.4.14\r\nNo matching distribution found for python-magic-bin==0.4.14\r\n```\r\n\r\nI am using the App Engine Flexible environment with Python 3.7.2. I was just wondering if anyone had any ideas.\r\n\r\nIf I install `python-magic-bin==0.4.15` I get the `ImportError` mentioned above. \ud83e\udd37\u200d\u2642\ufe0f", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/161", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/161/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/161/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/161", "id": 542867606, "node_id": "MDU6SXNzdWU1NDI4Njc2MDY=", "number": 161, "title": "[ SECURITY ] Dependency upgrade", "user": {"login": "jtomaszon", "id": 1420474, "node_id": "MDQ6VXNlcjE0MjA0NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1420474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtomaszon", "html_url": "https://github.com/jtomaszon", "followers_url": "https://api.github.com/users/jtomaszon/followers", "following_url": "https://api.github.com/users/jtomaszon/following{/other_user}", "gists_url": "https://api.github.com/users/jtomaszon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtomaszon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtomaszon/subscriptions", "organizations_url": "https://api.github.com/users/jtomaszon/orgs", "repos_url": "https://api.github.com/users/jtomaszon/repos", "events_url": "https://api.github.com/users/jtomaszon/events{/privacy}", "received_events_url": "https://api.github.com/users/jtomaszon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-27T12:57:35Z", "updated_at": "2019-12-29T18:05:50Z", "closed_at": "2019-12-29T18:05:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "In order to update Pillow to 6.2.0 because of the follow [CVE](https://github.com/advisories/GHSA-j7mj-748x-7p78)\r\n```ERROR: django-versatileimagefield 1.10 has requirement Pillow<6.0.0,>=2.4.0, but you'll have pillow 6.2.0 which is incompatible.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/160", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/160/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/160/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/160", "id": 541683564, "node_id": "MDU6SXNzdWU1NDE2ODM1NjQ=", "number": 160, "title": "AttributeError: 'VersatileImageFieldFile' object has no attribute 'thumbnail'", "user": {"login": "hangtwenty", "id": 2420688, "node_id": "MDQ6VXNlcjI0MjA2ODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2420688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hangtwenty", "html_url": "https://github.com/hangtwenty", "followers_url": "https://api.github.com/users/hangtwenty/followers", "following_url": "https://api.github.com/users/hangtwenty/following{/other_user}", "gists_url": "https://api.github.com/users/hangtwenty/gists{/gist_id}", "starred_url": "https://api.github.com/users/hangtwenty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hangtwenty/subscriptions", "organizations_url": "https://api.github.com/users/hangtwenty/orgs", "repos_url": "https://api.github.com/users/hangtwenty/repos", "events_url": "https://api.github.com/users/hangtwenty/events{/privacy}", "received_events_url": "https://api.github.com/users/hangtwenty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-23T10:14:55Z", "updated_at": "2019-12-23T10:18:11Z", "closed_at": "2019-12-23T10:18:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Going to close this right after! Just figured I would create an issue for sake of discoverability - as it took me a couple of searches of my traceback, before I realized my mistake. (Should have been obvious but \ud83e\udd37\u200d\u2642 )\r\n\r\nAn error such as ...\r\n\r\n```\r\nAttributeError: 'VersatileImageFieldFile' object has no attribute 'thumbnail'\r\n```\r\n\r\nOr...\r\n\r\n```\r\nAttributeError: 'VersatileImageFieldFile' object has no attribute 'crop'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/158", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/158/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/158/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/158", "id": 531848483, "node_id": "MDU6SXNzdWU1MzE4NDg0ODM=", "number": 158, "title": "Django 3 doesn't contain 'six' anymore", "user": {"login": "tiltec", "id": 4410802, "node_id": "MDQ6VXNlcjQ0MTA4MDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4410802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tiltec", "html_url": "https://github.com/tiltec", "followers_url": "https://api.github.com/users/tiltec/followers", "following_url": "https://api.github.com/users/tiltec/following{/other_user}", "gists_url": "https://api.github.com/users/tiltec/gists{/gist_id}", "starred_url": "https://api.github.com/users/tiltec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tiltec/subscriptions", "organizations_url": "https://api.github.com/users/tiltec/orgs", "repos_url": "https://api.github.com/users/tiltec/repos", "events_url": "https://api.github.com/users/tiltec/events{/privacy}", "received_events_url": "https://api.github.com/users/tiltec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-12-03T09:36:29Z", "updated_at": "2019-12-29T18:48:45Z", "closed_at": "2019-12-29T18:48:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "See https://docs.djangoproject.com/en/3.0/releases/3.0/#removed-private-python-2-compatibility-apis\r\n\r\n```\r\n  File \"/home/tic/Development/karrot-docker/karrot-backend/karrot/groups/models.py\", line 13, in <module>\r\n    from versatileimagefield.fields import VersatileImageField\r\n  File \"/home/tic/Development/karrot-docker/karrot-backend/env/lib/python3.7/site-packages/versatileimagefield/fields.py\", line 12, in <module>\r\n    from .files import VersatileImageFieldFile, VersatileImageFileDescriptor\r\n  File \"/home/tic/Development/karrot-docker/karrot-backend/env/lib/python3.7/site-packages/versatileimagefield/files.py\", line 9, in <module>\r\n    from django.utils import six\r\nImportError: cannot import name 'six' from 'django.utils' (/home/tic/Development/karrot-docker/karrot-backend/env/lib/python3.7/site-packages/django/utils/__init__.py)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/157", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/157/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/157/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/157", "id": 529076926, "node_id": "MDU6SXNzdWU1MjkwNzY5MjY=", "number": 157, "title": "failed to instance.image.delete_all_created_images()", "user": {"login": "paulon-zervoulakus", "id": 6029807, "node_id": "MDQ6VXNlcjYwMjk4MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6029807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulon-zervoulakus", "html_url": "https://github.com/paulon-zervoulakus", "followers_url": "https://api.github.com/users/paulon-zervoulakus/followers", "following_url": "https://api.github.com/users/paulon-zervoulakus/following{/other_user}", "gists_url": "https://api.github.com/users/paulon-zervoulakus/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulon-zervoulakus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulon-zervoulakus/subscriptions", "organizations_url": "https://api.github.com/users/paulon-zervoulakus/orgs", "repos_url": "https://api.github.com/users/paulon-zervoulakus/repos", "events_url": "https://api.github.com/users/paulon-zervoulakus/events{/privacy}", "received_events_url": "https://api.github.com/users/paulon-zervoulakus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-27T02:30:20Z", "updated_at": "2019-12-01T01:04:04Z", "closed_at": "2019-12-01T01:04:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "versatileimagefield version 1.10\r\n\r\nusing model.signals.post_delete: instance.image.delete_all_created_images() fail if the django service is running for quite sometime.\r\nif the service restarted it will succeed, then a couple of hours again it will fail\r\n\r\nTraceback:\r\n\r\nFile \"/usr/local/lib64/python3.6/site-packages/django/core/handlers/exception.py\" in inner\r\n  34.             response = get_response(request)\r\n\r\nFile \"/usr/local/lib64/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\r\n  115.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/usr/local/lib64/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\r\n  113.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/usr/local/lib64/python3.6/site-packages/django/contrib/auth/decorators.py\" in _wrapped_view\r\n  21.                 return view_func(request, *args, **kwargs)\r\n\r\nFile \"/home/app/multivendor/saleor/account/decorators.py\" in new_fn\r\n  75.                   return fn(request, img_id, *args, **kwargs)\r\n\r\nFile \"/home/app/multivendor/saleor/storefront/views.py\" in storefront_product_image_delete\r\n  956.  img.delete()\r\n\r\nFile \"/home/app/multivendor/saleor/core/models.py\" in delete\r\n  31.         super().delete(*args, **kwargs)\r\n\r\nFile \"/usr/local/lib64/python3.6/site-packages/django/db/models/base.py\" in delete\r\n  919.         return collector.delete()\r\n\r\nFile \"/usr/local/lib64/python3.6/site-packages/django/db/models/deletion.py\" in delete\r\n  318.                             sender=model, instance=obj, using=self.using\r\n\r\nFile \"/usr/local/lib64/python3.6/site-packages/django/dispatch/dispatcher.py\" in send\r\n  175.             for receiver in self._live_receivers(sender)\r\n\r\nFile \"/usr/local/lib64/python3.6/site-packages/django/dispatch/dispatcher.py\" in <listcomp>\r\n  175.             for receiver in self._live_receivers(sender)\r\n\r\nFile \"/home/app/multivendor/saleor/product/models.py\" in delete_product_image\r\n  555.     instance.image.delete_all_created_images()\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/versatileimagefield/mixins.py\" in delete_all_created_images\r\n  217.         self.delete_sized_images()\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/versatileimagefield/mixins.py\" in delete_sized_images\r\n  204.             sizer_regex\r\n\r\nFile \"/usr/local/lib/python3.6/site-packages/versatileimagefield/mixins.py\" in delete_matching_files_from_storage\r\n  189.                             original=self.name\r\n\r\nException Type: OSError at /en/storefront/forrest-pharmacy-1/edit-product/8/image-delete/126/\r\nException Value: [Errno 5] Input/output error", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/155", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/155/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/155/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/155", "id": 520558106, "node_id": "MDU6SXNzdWU1MjA1NTgxMDY=", "number": 155, "title": "ImportError: failed to fin libmagic. Check your installation", "user": {"login": "migantoju", "id": 15803048, "node_id": "MDQ6VXNlcjE1ODAzMDQ4", "avatar_url": "https://avatars1.githubusercontent.com/u/15803048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/migantoju", "html_url": "https://github.com/migantoju", "followers_url": "https://api.github.com/users/migantoju/followers", "following_url": "https://api.github.com/users/migantoju/following{/other_user}", "gists_url": "https://api.github.com/users/migantoju/gists{/gist_id}", "starred_url": "https://api.github.com/users/migantoju/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/migantoju/subscriptions", "organizations_url": "https://api.github.com/users/migantoju/orgs", "repos_url": "https://api.github.com/users/migantoju/repos", "events_url": "https://api.github.com/users/migantoju/events{/privacy}", "received_events_url": "https://api.github.com/users/migantoju/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-10T05:48:33Z", "updated_at": "2019-11-29T12:05:08Z", "closed_at": "2019-11-12T17:18:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys, I install django-versatileimagefield but when I started the server, this give me the error above and idk why.\r\n\r\n$ python manage.py runserver\r\ndjango.utils.autoreload INFO     Watching for file changes with StatReloader\r\nException in thread django-main-thread:\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\a_niu\\appdata\\local\\programs\\python\\python36\\Lib\\threading.py\", line 916, in _bootstrap_inner\r\n    self.run()\r\n  File \"c:\\users\\a_niu\\appdata\\local\\programs\\python\\python36\\Lib\\threading.py\", line 864, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\django\\utils\\autoreload.py\", line 54, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\django\\core\\management\\commands\\runserver.py\", line 109, in inner_run\r\n    autoreload.raise_last_exception()\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\django\\utils\\autoreload.py\", line 77, in raise_last_exception\r\n    raise _exception[1]\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 337, in execute\r\n    autoreload.check_errors(django.setup)()\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\django\\utils\\autoreload.py\", line 54, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\django\\__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\django\\apps\\registry.py\", line 122, in populate\r\n    app_config.ready()\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\versatileimagefield\\apps.py\", line 10, in ready\r\n    from .registry import autodiscover\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\versatileimagefield\\registry.py\", line 6, in <module>\r\n    from .datastructures import FilteredImage, SizedImage\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\versatileimagefield\\datastructures\\__init__.py\", line 3, in <module>\r\n    from .sizedimage import SizedImage\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\versatileimagefield\\datastructures\\sizedimage.py\", line 10, in <module>\r\n    from ..utils import get_resized_path\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\versatileimagefield\\utils.py\", line 7, in <module>\r\n    import magic\r\n  File \"C:\\Users\\a_niu\\.virtualenvs\\django-instagram-b-X-YuFT\\lib\\site-packages\\magic.py\", line 181, in <module>\r\n    raise ImportError('failed to find libmagic.  Check your installation')\r\nImportError: failed to find libmagic.  Check your installation\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/154", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/154/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/154/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/154", "id": 517657827, "node_id": "MDU6SXNzdWU1MTc2NTc4Mjc=", "number": 154, "title": "Vulnerability in Pillow < 6.2.0", "user": {"login": "maarcingebala", "id": 5421321, "node_id": "MDQ6VXNlcjU0MjEzMjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5421321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maarcingebala", "html_url": "https://github.com/maarcingebala", "followers_url": "https://api.github.com/users/maarcingebala/followers", "following_url": "https://api.github.com/users/maarcingebala/following{/other_user}", "gists_url": "https://api.github.com/users/maarcingebala/gists{/gist_id}", "starred_url": "https://api.github.com/users/maarcingebala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maarcingebala/subscriptions", "organizations_url": "https://api.github.com/users/maarcingebala/orgs", "repos_url": "https://api.github.com/users/maarcingebala/repos", "events_url": "https://api.github.com/users/maarcingebala/events{/privacy}", "received_events_url": "https://api.github.com/users/maarcingebala/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-05T09:41:54Z", "updated_at": "2019-11-06T01:28:12Z", "closed_at": "2019-11-06T01:28:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Our project uses `django-versatileimagefield` and we're getting warnings about [vulnerability in Pillow < 6.2.0](https://nvd.nist.gov/vuln/detail/CVE-2019-16865). Are there any plans to update this library to fix this problem?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/149", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/149/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/149/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/149", "id": 464920794, "node_id": "MDU6SXNzdWU0NjQ5MjA3OTQ=", "number": 149, "title": "Is Pillow 6.1 Supported?", "user": {"login": "ayazgv", "id": 7500187, "node_id": "MDQ6VXNlcjc1MDAxODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7500187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazgv", "html_url": "https://github.com/ayazgv", "followers_url": "https://api.github.com/users/ayazgv/followers", "following_url": "https://api.github.com/users/ayazgv/following{/other_user}", "gists_url": "https://api.github.com/users/ayazgv/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazgv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazgv/subscriptions", "organizations_url": "https://api.github.com/users/ayazgv/orgs", "repos_url": "https://api.github.com/users/ayazgv/repos", "events_url": "https://api.github.com/users/ayazgv/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazgv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-07T06:40:50Z", "updated_at": "2019-11-06T01:28:35Z", "closed_at": "2019-11-06T01:28:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I recently upgraded pillow 6.0 to 6.1. When I install django-versatileimagefield it say's pillow 6.1 is incompatible but django-versatileimagefield was installed.\r\nIs Pillow 6.1 really supported?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/140", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/140/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/140/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/140", "id": 414984553, "node_id": "MDU6SXNzdWU0MTQ5ODQ1NTM=", "number": 140, "title": "New release for django-versatilefield to remove DeprecationWarning", "user": {"login": "CuriousLearner", "id": 8039608, "node_id": "MDQ6VXNlcjgwMzk2MDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8039608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CuriousLearner", "html_url": "https://github.com/CuriousLearner", "followers_url": "https://api.github.com/users/CuriousLearner/followers", "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}", "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}", "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions", "organizations_url": "https://api.github.com/users/CuriousLearner/orgs", "repos_url": "https://api.github.com/users/CuriousLearner/repos", "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}", "received_events_url": "https://api.github.com/users/CuriousLearner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-27T07:38:11Z", "updated_at": "2019-11-06T01:29:59Z", "closed_at": "2019-11-06T01:29:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello @respondcreate \r\n\r\nI see there is already a fix for the new DeprecationWarning thrown on the console:\r\n\r\nhttps://github.com/respondcreate/django-versatileimagefield/commit/1179a81f60f1d8cd3c433d4fb6603a5d6cb5ded5\r\n\r\nwhich comes from this PR: https://github.com/respondcreate/django-versatileimagefield/pull/136\r\n\r\nCan we please have a new minor or patch release for the package? It would certainly make the dev workflow cleaner.\r\n\r\nThank you so much!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/133", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/133/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/133/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/133", "id": 355952497, "node_id": "MDU6SXNzdWUzNTU5NTI0OTc=", "number": 133, "title": "Outdated renditions not deleted when a VersatileImageField gets changed", "user": {"login": "arminbw", "id": 547849, "node_id": "MDQ6VXNlcjU0Nzg0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/547849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arminbw", "html_url": "https://github.com/arminbw", "followers_url": "https://api.github.com/users/arminbw/followers", "following_url": "https://api.github.com/users/arminbw/following{/other_user}", "gists_url": "https://api.github.com/users/arminbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/arminbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arminbw/subscriptions", "organizations_url": "https://api.github.com/users/arminbw/orgs", "repos_url": "https://api.github.com/users/arminbw/repos", "events_url": "https://api.github.com/users/arminbw/events{/privacy}", "received_events_url": "https://api.github.com/users/arminbw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-31T11:59:42Z", "updated_at": "2018-08-31T12:26:24Z", "closed_at": "2018-08-31T12:26:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "When an image gets exchanged, the various resized versions remain in the __sized__ directory.\r\n\r\nI tried using image.delete_all_created_images() in signal.pre_save, but to no avail. The image of the instance is already the new one at that point.\r\n\r\nI then tried putting the delete_all in my edit view, right before the form gets validated. I can delete the images this way, but this doesn't feel like the right approach (what about changes done via the admin interface, bulk edits\u2026). \r\n\r\nWhat is the best practice here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/132", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/132/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/132/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/132", "id": 350010091, "node_id": "MDU6SXNzdWUzNTAwMTAwOTE=", "number": 132, "title": "render() got an unexpected keyword argument 'renderer' ", "user": {"login": "nijel", "id": 212189, "node_id": "MDQ6VXNlcjIxMjE4OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/212189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nijel", "html_url": "https://github.com/nijel", "followers_url": "https://api.github.com/users/nijel/followers", "following_url": "https://api.github.com/users/nijel/following{/other_user}", "gists_url": "https://api.github.com/users/nijel/gists{/gist_id}", "starred_url": "https://api.github.com/users/nijel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nijel/subscriptions", "organizations_url": "https://api.github.com/users/nijel/orgs", "repos_url": "https://api.github.com/users/nijel/repos", "events_url": "https://api.github.com/users/nijel/events{/privacy}", "received_events_url": "https://api.github.com/users/nijel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-13T12:32:33Z", "updated_at": "2018-08-13T12:37:29Z", "closed_at": "2018-08-13T12:37:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since Django 2.1 the render method no longer accepts renderer parameter, see https://docs.djangoproject.com/en/2.1/releases/2.1/\r\n\r\nWith django-versatileimagefield I end up with `TypeError: render() got an unexpected keyword argument 'renderer'`.\r\n\r\nRemoving the renderer params from the two render methods seems to do the trick, but I'm not sure if it is not necessary in some Django versions...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/130", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/130/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/130/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/130", "id": 347628885, "node_id": "MDU6SXNzdWUzNDc2Mjg4ODU=", "number": 130, "title": "PPOIField is not declared in __init__.py", "user": {"login": "mmmcorpsvit", "id": 9638835, "node_id": "MDQ6VXNlcjk2Mzg4MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9638835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmmcorpsvit", "html_url": "https://github.com/mmmcorpsvit", "followers_url": "https://api.github.com/users/mmmcorpsvit/followers", "following_url": "https://api.github.com/users/mmmcorpsvit/following{/other_user}", "gists_url": "https://api.github.com/users/mmmcorpsvit/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmmcorpsvit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmmcorpsvit/subscriptions", "organizations_url": "https://api.github.com/users/mmmcorpsvit/orgs", "repos_url": "https://api.github.com/users/mmmcorpsvit/repos", "events_url": "https://api.github.com/users/mmmcorpsvit/events{/privacy}", "received_events_url": "https://api.github.com/users/mmmcorpsvit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-04T16:00:26Z", "updated_at": "2018-08-13T13:30:20Z", "closed_at": "2018-08-13T13:30:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "subj", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/128", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/128/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/128/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/128", "id": 323390590, "node_id": "MDU6SXNzdWUzMjMzOTA1OTA=", "number": 128, "title": "Improve performance with cloud-storage/CDNs", "user": {"login": "camflan", "id": 27292, "node_id": "MDQ6VXNlcjI3Mjky", "avatar_url": "https://avatars0.githubusercontent.com/u/27292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camflan", "html_url": "https://github.com/camflan", "followers_url": "https://api.github.com/users/camflan/followers", "following_url": "https://api.github.com/users/camflan/following{/other_user}", "gists_url": "https://api.github.com/users/camflan/gists{/gist_id}", "starred_url": "https://api.github.com/users/camflan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camflan/subscriptions", "organizations_url": "https://api.github.com/users/camflan/orgs", "repos_url": "https://api.github.com/users/camflan/repos", "events_url": "https://api.github.com/users/camflan/events{/privacy}", "received_events_url": "https://api.github.com/users/camflan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-15T21:30:20Z", "updated_at": "2019-02-25T03:05:20Z", "closed_at": "2018-05-15T21:42:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I flipped off `create_images_on_demand` and actually saw a performance decrease in my usage. I think this is caused (again) by leveraging a cloud-storage/cdn for my images.\r\n\r\nWhen using `create_images_on_demand`, the URLs are cached, so retrieving URLs only have to hit Redis. However, with `create_images_on_demand`, the URLs are requested from my cloud-storage provider each time - which is obviously way slower than Redis.\r\n\r\nThis is at least 1 of the places we need to update in order to resolve this issue.\r\nhttps://github.com/respondcreate/django-versatileimagefield/blob/d46f05626bce1327886bb9673e533ba8206d8da9/versatileimagefield/datastructures/filteredimage.py#L146\r\n\r\nI think if we move the `cache.get()` call outside the `self.create_on_demand` check, then we can also `cache.set` in the imagewarmer.\r\n\r\nMy thinking is, we cache the URLs when they are warmed and then we can bypass the create check - because either way (prewarming vs on-demand) we already have the URL and don't need to do anymore work.\r\n\r\nI plan on working on this over the next couple of days, but if anyone has ideas or input - please let me know!\r\n\r\ncc @respondcreate ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/127", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/127/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/127/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/127", "id": 321646579, "node_id": "MDU6SXNzdWUzMjE2NDY1Nzk=", "number": 127, "title": "Poor Quality Of Uploaded Images", "user": {"login": "pythoncreate", "id": 1472082, "node_id": "MDQ6VXNlcjE0NzIwODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1472082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pythoncreate", "html_url": "https://github.com/pythoncreate", "followers_url": "https://api.github.com/users/pythoncreate/followers", "following_url": "https://api.github.com/users/pythoncreate/following{/other_user}", "gists_url": "https://api.github.com/users/pythoncreate/gists{/gist_id}", "starred_url": "https://api.github.com/users/pythoncreate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pythoncreate/subscriptions", "organizations_url": "https://api.github.com/users/pythoncreate/orgs", "repos_url": "https://api.github.com/users/pythoncreate/repos", "events_url": "https://api.github.com/users/pythoncreate/events{/privacy}", "received_events_url": "https://api.github.com/users/pythoncreate/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-09T16:49:45Z", "updated_at": "2018-05-09T20:25:16Z", "closed_at": "2018-05-09T20:25:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "My uploaded images look terrible and I'm not sure exactly what I'm doing wrong.\r\n\r\nI'm cropping like this `{{ deal_detail.image.crop.375x250 }}\" `\r\n\r\nyou can the image on the left here how bad the quality is...\r\n\r\nhttps://dealmazing.com/deals/under-armour-big-logo-t-shirt/\r\n\r\nas opposed to image of shirt on right which is just uploaded via a WYSIWYG editor\r\n\r\nAnyone see anything i'm doing wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/123", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/123/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/123/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/123", "id": 304170135, "node_id": "MDU6SXNzdWUzMDQxNzAxMzU=", "number": 123, "title": "Cannot use images with the same file name when storing on s3", "user": {"login": "jamespsteinberg", "id": 1237324, "node_id": "MDQ6VXNlcjEyMzczMjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1237324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamespsteinberg", "html_url": "https://github.com/jamespsteinberg", "followers_url": "https://api.github.com/users/jamespsteinberg/followers", "following_url": "https://api.github.com/users/jamespsteinberg/following{/other_user}", "gists_url": "https://api.github.com/users/jamespsteinberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamespsteinberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamespsteinberg/subscriptions", "organizations_url": "https://api.github.com/users/jamespsteinberg/orgs", "repos_url": "https://api.github.com/users/jamespsteinberg/repos", "events_url": "https://api.github.com/users/jamespsteinberg/events{/privacy}", "received_events_url": "https://api.github.com/users/jamespsteinberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-11T16:04:59Z", "updated_at": "2020-07-01T13:46:12Z", "closed_at": "2020-07-01T13:46:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using this setting:\r\n\r\nVERSATILEIMAGEFIELD_SETTINGS = {\r\n'image_key_post_processor': 'versatileimagefield.processors.md5'\r\n}\r\n\r\nbut it only works on local storage, not on s3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/121", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/121/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/121/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/121", "id": 294587943, "node_id": "MDU6SXNzdWUyOTQ1ODc5NDM=", "number": 121, "title": "Why template_name is not respecting my TEMPLATES DIR?", "user": {"login": "zerazobz", "id": 972676, "node_id": "MDQ6VXNlcjk3MjY3Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/972676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zerazobz", "html_url": "https://github.com/zerazobz", "followers_url": "https://api.github.com/users/zerazobz/followers", "following_url": "https://api.github.com/users/zerazobz/following{/other_user}", "gists_url": "https://api.github.com/users/zerazobz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zerazobz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zerazobz/subscriptions", "organizations_url": "https://api.github.com/users/zerazobz/orgs", "repos_url": "https://api.github.com/users/zerazobz/repos", "events_url": "https://api.github.com/users/zerazobz/events{/privacy}", "received_events_url": "https://api.github.com/users/zerazobz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-06T00:13:49Z", "updated_at": "2018-04-17T21:31:25Z", "closed_at": "2018-04-17T21:31:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a correct configuration of `TEMPLATES DIR` directory, I have tested this with a lot of TemplateResponse sentences.\r\n\r\nBut when I try to use it in a custom Widget '`ClearableFileInputWithImagePreview`' It's trying to load my template from \"`\\lib\\site-packages\\django\\forms\\templates\\`\" insted of my TEMPLATES DIR directory configured in settings.py.\r\n\r\n\r\n`\r\n\r\n    from django.forms import MultiWidget, HiddenInput\r\n    from versatileimagefield.widgets import (ClearableFileInputWithImagePreview,\r\n                                         SizedImageCenterpointWidgetMixIn)\r\n\r\n    class ImagePreviewFileInput(ClearableFileInputWithImagePreview):\r\n        template_name = 'mycustomdirectory/product_image/versatile_image.html'\r\n\r\n        def get_context(self, name, value, attrs):\r\n            context = super().get_context(\r\n                name, value, attrs)\r\n            value = context['widget']['value']\r\n            if value:\r\n                value.display_value = self.get_filename_from_path(str(value))\r\n            return context\r\n\r\n        def get_filename_from_path(self, path):\r\n            filename = path.split('/')[-1]\r\n            return filename if filename else path\\\r\n\r\n    class ImagePreviewWidget(SizedImageCenterpointWidgetMixIn, MultiWidget):\r\n        def __init__(self, attrs=None):\r\n            widgets = (ImagePreviewFileInput(attrs={'class': 'file-chooser'}),\r\n                       HiddenInput(attrs={'class': 'ppoi-input'}))\r\n            super().__init__(widgets, attrs)\r\n`\r\nIn settings.py:\r\n```\r\nTEMPLATES = [\r\n    {\r\n        'DIRS': [os.path.join(PROJECT_ROOT, 'templates'), ],\r\n    }\r\n```\r\nAnd this has been working for the whole project\r\n\r\nWhy?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/120", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/120/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/120/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/120", "id": 292516051, "node_id": "MDU6SXNzdWUyOTI1MTYwNTE=", "number": 120, "title": "Unable to dumpdata", "user": {"login": "honi", "id": 130202, "node_id": "MDQ6VXNlcjEzMDIwMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/130202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honi", "html_url": "https://github.com/honi", "followers_url": "https://api.github.com/users/honi/followers", "following_url": "https://api.github.com/users/honi/following{/other_user}", "gists_url": "https://api.github.com/users/honi/gists{/gist_id}", "starred_url": "https://api.github.com/users/honi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honi/subscriptions", "organizations_url": "https://api.github.com/users/honi/orgs", "repos_url": "https://api.github.com/users/honi/repos", "events_url": "https://api.github.com/users/honi/events{/privacy}", "received_events_url": "https://api.github.com/users/honi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-29T18:41:23Z", "updated_at": "2018-01-31T21:39:46Z", "closed_at": "2018-01-31T21:19:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting:\r\n```\r\nCommandError: Unable to serialize database: 'PPOIField' object has no attribute '_get_val_from_obj'\r\n```\r\n\r\nModel:\r\n```python\r\nclass Product(models.Model):\r\n    name = models.CharField(_('name'), max_length=128, unique=True)\r\n    image = VersatileImageField(_('image'), upload_to='uploads/merchandising/', ppoi_field='ppoi')\r\n    ppoi = PPOIField(_('ppoi'))\r\n\r\n    class Meta:\r\n        verbose_name = _('product')\r\n        verbose_name_plural = _('products')\r\n        ordering = ['name']\r\n\r\n    def __str__(self):\r\n        return self.name\r\n```\r\n\r\nVersions:\r\n```\r\nDjango==2.0.1\r\ndjango-versatileimagefield==1.8.1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/112", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/112/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/112/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/112", "id": 263434584, "node_id": "MDU6SXNzdWUyNjM0MzQ1ODQ=", "number": 112, "title": "Apps 'tests' folder shows up in root of site-packages (not ignored)", "user": {"login": "Bartvds", "id": 685984, "node_id": "MDQ6VXNlcjY4NTk4NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/685984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartvds", "html_url": "https://github.com/Bartvds", "followers_url": "https://api.github.com/users/Bartvds/followers", "following_url": "https://api.github.com/users/Bartvds/following{/other_user}", "gists_url": "https://api.github.com/users/Bartvds/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartvds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartvds/subscriptions", "organizations_url": "https://api.github.com/users/Bartvds/orgs", "repos_url": "https://api.github.com/users/Bartvds/repos", "events_url": "https://api.github.com/users/Bartvds/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartvds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-06T12:48:04Z", "updated_at": "2017-10-24T14:49:19Z", "closed_at": "2017-10-20T12:45:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I `pip install django-versatileimagefield` the `tests` folder from this app ends up in my virtualenvs `site-packages` directory, and then gets picked up by `./manage.py test` which then fails because it finds stuff that is not part of an app:\r\n\r\n    RuntimeError: Model class tests.models.MaybeVersatileImageModel doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS.\r\n\r\nSomehow this only errors when I use Django's `@isolate_apps` decorator (which I need in this particular project).\r\n\r\nThis is the first time I use that decorator and I'm not and expert on python packaging and tests but seems a bit odd to have the test suite in the distribution package, and definitely not intended to have this `tests` folder show up as a top-level package. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/110", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/110/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/110/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/110", "id": 260113674, "node_id": "MDU6SXNzdWUyNjAxMTM2NzQ=", "number": 110, "title": "Trying to get this to work with django-storages", "user": {"login": "EvanZ", "id": 1295082, "node_id": "MDQ6VXNlcjEyOTUwODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1295082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EvanZ", "html_url": "https://github.com/EvanZ", "followers_url": "https://api.github.com/users/EvanZ/followers", "following_url": "https://api.github.com/users/EvanZ/following{/other_user}", "gists_url": "https://api.github.com/users/EvanZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/EvanZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EvanZ/subscriptions", "organizations_url": "https://api.github.com/users/EvanZ/orgs", "repos_url": "https://api.github.com/users/EvanZ/repos", "events_url": "https://api.github.com/users/EvanZ/events{/privacy}", "received_events_url": "https://api.github.com/users/EvanZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-09-24T20:30:38Z", "updated_at": "2018-02-02T04:07:49Z", "closed_at": "2018-01-31T21:19:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using Google Cloud Storage to serve up images. \r\n\r\n```\r\nclass PhotoSerializer(serializers.ModelSerializer, TaggitSerializer):\r\n    owner = serializers.CharField(source='owner.username', read_only=True)\r\n    tags = TagListSerializerField()\r\n    photo = VersatileImageFieldSerializer(\r\n         sizes=[\r\n            ('full_size', 'url'),\r\n            ('thumbnail', 'thumbnail__250x250')\r\n        ]\r\n    )\r\n```\r\nWhen I try to upload images from my front end, I am getting errors like this:\r\n\r\n`google.cloud.exceptions.NotFound: 404 File does not exist: __sized__/img/u/1/pexels-photo-thumbnail-250x250-70.jpg\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/105", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/105/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/105/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/105", "id": 248438898, "node_id": "MDU6SXNzdWUyNDg0Mzg4OTg=", "number": 105, "title": "Interested in adding template tags for safely rendering images?", "user": {"login": "matthiask", "id": 2627, "node_id": "MDQ6VXNlcjI2Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiask", "html_url": "https://github.com/matthiask", "followers_url": "https://api.github.com/users/matthiask/followers", "following_url": "https://api.github.com/users/matthiask/following{/other_user}", "gists_url": "https://api.github.com/users/matthiask/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiask/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiask/subscriptions", "organizations_url": "https://api.github.com/users/matthiask/orgs", "repos_url": "https://api.github.com/users/matthiask/repos", "events_url": "https://api.github.com/users/matthiask/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiask/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-07T15:00:27Z", "updated_at": "2018-11-24T14:37:49Z", "closed_at": "2018-11-24T14:37:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Related to #104.\r\n\r\nI added an ugly hack for rendering thumbs in a project of ours which does not bring the whole site down if website managers upload corrupt images. Are you interested in adding a template tag library to django-versatileimagefield? Or do you have a different / better suggestion how exceptions should be handled either in versatileimagefield proper or in user code?\r\n\r\nAnyway, here's the current code (as a basis for discussion):\r\n\r\n```\r\nfrom __future__ import absolute_import, unicode_literals\r\n\r\nfrom django import template\r\nfrom django.utils import lru_cache\r\n\r\nfrom versatileimagefield.utils import get_url_from_image_key\r\n\r\n\r\nregister = template.Library()\r\n\r\n\r\n@lru_cache.lru_cache(maxsize=None)\r\ndef empty_imagefile(field):\r\n    return getattr(field.model(), field.name)\r\n\r\n\r\n@register.simple_tag\r\ndef image(imagefile, spec):\r\n    try:\r\n        return get_url_from_image_key(imagefile, spec)\r\n    except (IOError, OSError):\r\n        pass\r\n\r\n    if imagefile.field.placeholder_image:\r\n        return get_url_from_image_key(empty_imagefile(imagefile.field), spec)\r\n\r\n    return ''\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/102", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/102/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/102/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/102", "id": 241359097, "node_id": "MDU6SXNzdWUyNDEzNTkwOTc=", "number": 102, "title": "pillow version", "user": {"login": "jerzyk", "id": 199073, "node_id": "MDQ6VXNlcjE5OTA3Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/199073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jerzyk", "html_url": "https://github.com/jerzyk", "followers_url": "https://api.github.com/users/jerzyk/followers", "following_url": "https://api.github.com/users/jerzyk/following{/other_user}", "gists_url": "https://api.github.com/users/jerzyk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jerzyk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jerzyk/subscriptions", "organizations_url": "https://api.github.com/users/jerzyk/orgs", "repos_url": "https://api.github.com/users/jerzyk/repos", "events_url": "https://api.github.com/users/jerzyk/events{/privacy}", "received_events_url": "https://api.github.com/users/jerzyk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-07T19:32:51Z", "updated_at": "2017-10-20T15:13:18Z", "closed_at": "2017-10-20T15:13:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there any reasons to keep Pillow in version 4.0?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/100", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/100/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/100/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/100", "id": 237942673, "node_id": "MDU6SXNzdWUyMzc5NDI2NzM=", "number": 100, "title": "TypeError: getattr(): attribute name must be string, in mixins.py", "user": {"login": "ajatprabha", "id": 11836668, "node_id": "MDQ6VXNlcjExODM2NjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/11836668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajatprabha", "html_url": "https://github.com/ajatprabha", "followers_url": "https://api.github.com/users/ajatprabha/followers", "following_url": "https://api.github.com/users/ajatprabha/following{/other_user}", "gists_url": "https://api.github.com/users/ajatprabha/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajatprabha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajatprabha/subscriptions", "organizations_url": "https://api.github.com/users/ajatprabha/orgs", "repos_url": "https://api.github.com/users/ajatprabha/repos", "events_url": "https://api.github.com/users/ajatprabha/events{/privacy}", "received_events_url": "https://api.github.com/users/ajatprabha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-22T19:03:21Z", "updated_at": "2018-03-01T22:29:18Z", "closed_at": "2018-03-01T22:29:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get this error when I add PPOI field to a model. Without this everything works fine.\r\n\r\nError:\r\n```\r\nException Type:\tTypeError\r\nException Value:\tgetattr(): attribute name must be string\r\nException Location:\tC:\\Python\\Python36\\lib\\site-packages\\versatileimagefield\\mixins.py in __init__, line 56\r\n```\r\nHere's the traceback:\r\n```\r\nEnvironment:\r\n\r\n\r\nRequest Method: GET\r\nRequest URL: http://127.0.0.1:8000/admin/main/society/5/change/\r\n\r\nDjango Version: 1.11.2\r\nPython Version: 3.6.1\r\nInstalled Applications:\r\n['django.contrib.admin',\r\n 'django.contrib.auth',\r\n 'django.contrib.contenttypes',\r\n 'django.contrib.sessions',\r\n 'django.contrib.messages',\r\n 'django.contrib.staticfiles',\r\n 'django.contrib.humanize',\r\n 'rest_framework',\r\n 'versatileimagefield',\r\n 'ckeditor',\r\n 'ckeditor_uploader',\r\n 'hitcount',\r\n 'oauth.apps.OauthConfig',\r\n 'main.apps.MainConfig',\r\n 'forum.apps.ForumConfig']\r\nInstalled Middleware:\r\n['django.middleware.security.SecurityMiddleware',\r\n 'django.contrib.sessions.middleware.SessionMiddleware',\r\n 'django.middleware.common.CommonMiddleware',\r\n 'django.middleware.csrf.CsrfViewMiddleware',\r\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n 'django.contrib.messages.middleware.MessageMiddleware',\r\n 'django.middleware.clickjacking.XFrameOptionsMiddleware']\r\n\r\n\r\n\r\nTraceback:\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\core\\handlers\\exception.py\" in inner\r\n  41.             response = get_response(request)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\core\\handlers\\base.py\" in _get_response\r\n  187.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\core\\handlers\\base.py\" in _get_response\r\n  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\contrib\\admin\\options.py\" in wrapper\r\n  551.                 return self.admin_site.admin_view(view)(*args, **kwargs)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\utils\\decorators.py\" in _wrapped_view\r\n  149.                     response = view_func(request, *args, **kwargs)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\views\\decorators\\cache.py\" in _wrapped_view_func\r\n  57.         response = view_func(request, *args, **kwargs)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\contrib\\admin\\sites.py\" in inner\r\n  224.             return view(request, *args, **kwargs)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\contrib\\admin\\options.py\" in change_view\r\n  1511.         return self.changeform_view(request, object_id, form_url, extra_context)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\utils\\decorators.py\" in _wrapper\r\n  67.             return bound_func(*args, **kwargs)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\utils\\decorators.py\" in _wrapped_view\r\n  149.                     response = view_func(request, *args, **kwargs)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\utils\\decorators.py\" in bound_func\r\n  63.                 return func.__get__(self, type(self))(*args2, **kwargs2)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\contrib\\admin\\options.py\" in changeform_view\r\n  1408.             return self._changeform_view(request, object_id, form_url, extra_context)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\contrib\\admin\\options.py\" in _changeform_view\r\n  1465.                 form = ModelForm(instance=obj)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\forms\\models.py\" in __init__\r\n  287.             object_data = model_to_dict(instance, opts.fields, opts.exclude)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\forms\\models.py\" in model_to_dict\r\n  96.         data[f.name] = f.value_from_object(instance)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\django\\db\\models\\fields\\__init__.py\" in value_from_object\r\n  897.         return getattr(obj, self.attname)\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\versatileimagefield\\files.py\" in __get__\r\n  73.                 name=file\r\n\r\nFile \"C:\\Python\\Python36\\lib\\site-packages\\versatileimagefield\\mixins.py\" in __init__\r\n  56.                 (0.5, 0.5)\r\n\r\nException Type: TypeError at /admin/main/society/5/change/\r\nException Value: getattr(): attribute name must be string\r\n\r\n```\r\nWhat can be possibly wrong here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/99", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/99/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/99/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/99", "id": 237217456, "node_id": "MDU6SXNzdWUyMzcyMTc0NTY=", "number": 99, "title": "Accessing an PPOIField field from the class raises AttributeError", "user": {"login": "lufte", "id": 7890579, "node_id": "MDQ6VXNlcjc4OTA1Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7890579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lufte", "html_url": "https://github.com/lufte", "followers_url": "https://api.github.com/users/lufte/followers", "following_url": "https://api.github.com/users/lufte/following{/other_user}", "gists_url": "https://api.github.com/users/lufte/gists{/gist_id}", "starred_url": "https://api.github.com/users/lufte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lufte/subscriptions", "organizations_url": "https://api.github.com/users/lufte/orgs", "repos_url": "https://api.github.com/users/lufte/repos", "events_url": "https://api.github.com/users/lufte/events{/privacy}", "received_events_url": "https://api.github.com/users/lufte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-06-20T13:54:05Z", "updated_at": "2017-06-22T16:44:56Z", "closed_at": "2017-06-20T14:01:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm runnning Django 1.11.0 with django-versatileimagefield 1.7.1. I have a model `BaseArticle` that looks like this:\r\n\r\n    class BaseArticle(models.Model):\r\n\r\n        image = ImageField(upload_to='articles/image', blank=True, null=True, max_length=256, ppoi_field='image_ppoi',\r\n                           variations={\r\n                               'avatar': {'width': 100, 'height': 100, 'crop': True}\r\n                           })\r\n        image_ppoi = ImagePPOIField(blank=True, null=True)\r\n\r\nSimply running `BaseArticle.image_ppoi` raises the following error:\r\n\r\n    Traceback (most recent call last):\r\n    File \"<console>\", line 1, in <module>\r\n    File \"/usr/local/lib/python3.6/site-packages/versatileimagefield/fields.py\", line 25, in __get__\r\n      return obj.__dict__[self.field.name]\r\n    AttributeError: 'NoneType' object has no attribute '__dict__'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/97", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/97/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/97/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/97", "id": 233529680, "node_id": "MDU6SXNzdWUyMzM1Mjk2ODA=", "number": 97, "title": "Django 1.11.2 incompatibility", "user": {"login": "szewczykmira", "id": 6984271, "node_id": "MDQ6VXNlcjY5ODQyNzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6984271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szewczykmira", "html_url": "https://github.com/szewczykmira", "followers_url": "https://api.github.com/users/szewczykmira/followers", "following_url": "https://api.github.com/users/szewczykmira/following{/other_user}", "gists_url": "https://api.github.com/users/szewczykmira/gists{/gist_id}", "starred_url": "https://api.github.com/users/szewczykmira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szewczykmira/subscriptions", "organizations_url": "https://api.github.com/users/szewczykmira/orgs", "repos_url": "https://api.github.com/users/szewczykmira/repos", "events_url": "https://api.github.com/users/szewczykmira/events{/privacy}", "received_events_url": "https://api.github.com/users/szewczykmira/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-06-05T08:52:12Z", "updated_at": "2017-06-13T14:01:26Z", "closed_at": "2017-06-13T13:30:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the latest django version I get `AttributeError` from `files.py:42`:\r\n```\r\nself = <versatileimagefield.files.VersatileImageFileDescriptor object at 0x7fe54799ee80>, instance = None, owner = <class '__fake__.Collection'>\r\n\r\n    def __get__(self, instance=None, owner=None):\r\n        if instance is None:\r\n            raise AttributeError(\r\n                \"The '%s' attribute can only be accessed from %s instances.\"\r\n>               % (self.field.name, owner.__name__))\r\nE           AttributeError: The 'background_image' attribute can only be accessed from Collection instances.\r\n\r\n../../Envs/env11/lib/python3.5/site-packages/versatileimagefield/files.py:42: AttributeError\r\n```\r\n\r\nI think this might be similar to [this issue](https://github.com/dmkoch/django-jsonfield/issues/189)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/95", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/95/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/95/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/95", "id": 229376274, "node_id": "MDU6SXNzdWUyMjkzNzYyNzQ=", "number": 95, "title": "Using admin save_as doesn't copy VIF values", "user": {"login": "ursomniac", "id": 485748, "node_id": "MDQ6VXNlcjQ4NTc0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/485748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ursomniac", "html_url": "https://github.com/ursomniac", "followers_url": "https://api.github.com/users/ursomniac/followers", "following_url": "https://api.github.com/users/ursomniac/following{/other_user}", "gists_url": "https://api.github.com/users/ursomniac/gists{/gist_id}", "starred_url": "https://api.github.com/users/ursomniac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ursomniac/subscriptions", "organizations_url": "https://api.github.com/users/ursomniac/orgs", "repos_url": "https://api.github.com/users/ursomniac/repos", "events_url": "https://api.github.com/users/ursomniac/events{/privacy}", "received_events_url": "https://api.github.com/users/ursomniac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-17T14:40:59Z", "updated_at": "2017-05-19T16:59:49Z", "closed_at": "2017-05-19T16:11:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nIf for an admin.ModelAdmin you set save_as = True, Django exchanges the \"Save and add another\" button for a \"Save as New\" button, which creates a new model record based on the data on the form (basically it clones the original record).\r\n\r\nHowever, if one of the model fields is a VIF, Django throws an error because the file field has become None.   \r\n\r\n(But this might be an issue with ImageField, and not VIF specifically.)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/91", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/91/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/91/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/91", "id": 219398872, "node_id": "MDU6SXNzdWUyMTkzOTg4NzI=", "number": 91, "title": "django 1.11 incompatibility", "user": {"login": "jerzyk", "id": 199073, "node_id": "MDQ6VXNlcjE5OTA3Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/199073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jerzyk", "html_url": "https://github.com/jerzyk", "followers_url": "https://api.github.com/users/jerzyk/followers", "following_url": "https://api.github.com/users/jerzyk/following{/other_user}", "gists_url": "https://api.github.com/users/jerzyk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jerzyk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jerzyk/subscriptions", "organizations_url": "https://api.github.com/users/jerzyk/orgs", "repos_url": "https://api.github.com/users/jerzyk/repos", "events_url": "https://api.github.com/users/jerzyk/events{/privacy}", "received_events_url": "https://api.github.com/users/jerzyk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-04T22:06:28Z", "updated_at": "2018-02-01T01:23:56Z", "closed_at": "2018-02-01T01:23:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "exception:\r\n\r\n```\r\nversatileimagefield/mixins.py\", line 73, in _get_url\r\n    return super(VersatileImageMixIn, self)._get_url()\r\nAttributeError: 'super' object has no attribute '_get_url'\r\n```\r\n\r\ncaused by removal of `_get_url` from `django.db.models.fields.files.FieldFile`\r\n\r\nsimplest fix is to replace `super(VersatileImageMixIn, self)._get_url()` function call to `super(VersatileImageMixIn, self).url` property access\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/89", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/89/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/89/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/89", "id": 218519062, "node_id": "MDU6SXNzdWUyMTg1MTkwNjI=", "number": 89, "title": "HTTPS url instead of HTTP", "user": {"login": "BenDevelopment", "id": 6674194, "node_id": "MDQ6VXNlcjY2NzQxOTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6674194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenDevelopment", "html_url": "https://github.com/BenDevelopment", "followers_url": "https://api.github.com/users/BenDevelopment/followers", "following_url": "https://api.github.com/users/BenDevelopment/following{/other_user}", "gists_url": "https://api.github.com/users/BenDevelopment/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenDevelopment/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenDevelopment/subscriptions", "organizations_url": "https://api.github.com/users/BenDevelopment/orgs", "repos_url": "https://api.github.com/users/BenDevelopment/repos", "events_url": "https://api.github.com/users/BenDevelopment/events{/privacy}", "received_events_url": "https://api.github.com/users/BenDevelopment/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-31T14:28:42Z", "updated_at": "2017-04-05T10:16:32Z", "closed_at": "2017-04-05T10:16:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThank you for your work, that's a good plugin!\r\n\r\nI have a question about URLs, how can I say versatileimagefield to use HTTPS instead of HTTP in the returned URLs?\r\n\r\n```\r\n {\r\n        'large': 'https://some.url/image.jpg',\r\n        'medium': 'https://some.url/__sized__/image-crop-400x400.jpg',\r\n        'small': 'https://some.url/__sized__/image-thumbnail-100x100.jpg',\r\n    }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/85", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/85/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/85/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/85", "id": 205124457, "node_id": "MDU6SXNzdWUyMDUxMjQ0NTc=", "number": 85, "title": "Upgrade to or allow Pilllow version 4.0.0 if possible", "user": {"login": "aleksihakli", "id": 2477934, "node_id": "MDQ6VXNlcjI0Nzc5MzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2477934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksihakli", "html_url": "https://github.com/aleksihakli", "followers_url": "https://api.github.com/users/aleksihakli/followers", "following_url": "https://api.github.com/users/aleksihakli/following{/other_user}", "gists_url": "https://api.github.com/users/aleksihakli/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksihakli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksihakli/subscriptions", "organizations_url": "https://api.github.com/users/aleksihakli/orgs", "repos_url": "https://api.github.com/users/aleksihakli/repos", "events_url": "https://api.github.com/users/aleksihakli/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksihakli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-03T10:42:49Z", "updated_at": "2017-02-14T13:41:23Z", "closed_at": "2017-02-12T16:43:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Pillow has a new stable major release, version 4.0.0, which is largely supported for different platforms, and is the only version that has prebuilt wheels for e.g. Python 3.6.0.\r\n\r\nhttps://pypi.python.org/pypi/Pillow/4.0.0\r\n\r\nIs it possible to run django-versatileimagefield with Pillow 4.0.0?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/78", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/78/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/78/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/78", "id": 194255714, "node_id": "MDU6SXNzdWUxOTQyNTU3MTQ=", "number": 78, "title": "Windows support via Pillow version upgrade", "user": {"login": "aleksihakli", "id": 2477934, "node_id": "MDQ6VXNlcjI0Nzc5MzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2477934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksihakli", "html_url": "https://github.com/aleksihakli", "followers_url": "https://api.github.com/users/aleksihakli/followers", "following_url": "https://api.github.com/users/aleksihakli/following{/other_user}", "gists_url": "https://api.github.com/users/aleksihakli/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksihakli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksihakli/subscriptions", "organizations_url": "https://api.github.com/users/aleksihakli/orgs", "repos_url": "https://api.github.com/users/aleksihakli/repos", "events_url": "https://api.github.com/users/aleksihakli/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksihakli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-12-08T06:14:19Z", "updated_at": "2016-12-08T17:12:14Z", "closed_at": "2016-12-08T17:12:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\ndjango-versatileimagefield [requires Pillow](https://github.com/respondcreate/django-versatileimagefield/blob/master/setup.py#L18) <= 3.3.3:\r\n\r\n    install_requires=['Pillow>=2.4.0,<=3.3.3'],\r\n\r\nIs there a reason for not allowing [version 3.4.2 which has prebuilt Windows binaries available on PyPI](https://pypi.python.org/pypi/Pillow/3.4.2)? At the moment the installation would require compilation of Pillow and requires zlib for installation, which makes the library unpleasant to use.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/70", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/70/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/70/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/70", "id": 170733889, "node_id": "MDU6SXNzdWUxNzA3MzM4ODk=", "number": 70, "title": "Attribute Error", "user": {"login": "farice", "id": 13244177, "node_id": "MDQ6VXNlcjEzMjQ0MTc3", "avatar_url": "https://avatars1.githubusercontent.com/u/13244177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/farice", "html_url": "https://github.com/farice", "followers_url": "https://api.github.com/users/farice/followers", "following_url": "https://api.github.com/users/farice/following{/other_user}", "gists_url": "https://api.github.com/users/farice/gists{/gist_id}", "starred_url": "https://api.github.com/users/farice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/farice/subscriptions", "organizations_url": "https://api.github.com/users/farice/orgs", "repos_url": "https://api.github.com/users/farice/repos", "events_url": "https://api.github.com/users/farice/events{/privacy}", "received_events_url": "https://api.github.com/users/farice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-08-11T20:06:45Z", "updated_at": "2016-08-12T23:16:39Z", "closed_at": "2016-08-12T23:16:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I attempted to incorporate a basic versatile photo field directly from the tutorial into my pre-existing Django Rest API (3.4.3) with Django 1.10, and unfortunately I am getting the error:\n\n`'VersatileImageFieldFile' object has no attribute '__getitem__'`\n\nupon access of the model's URL. Any idea why this is happening? \n\nI am running my API to store images in an S3 bucket so it is my assumption that this has something to do with it. Does your framework support AWS integration?\n\nNOTE: All is well when a standard image field is used instead. \n\nThanks! \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/67", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/67/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/67/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/67", "id": 168220200, "node_id": "MDU6SXNzdWUxNjgyMjAyMDA=", "number": 67, "title": "Document propogation of resized image width/height", "user": {"login": "robmoggach", "id": 184759, "node_id": "MDQ6VXNlcjE4NDc1OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/184759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robmoggach", "html_url": "https://github.com/robmoggach", "followers_url": "https://api.github.com/users/robmoggach/followers", "following_url": "https://api.github.com/users/robmoggach/following{/other_user}", "gists_url": "https://api.github.com/users/robmoggach/gists{/gist_id}", "starred_url": "https://api.github.com/users/robmoggach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robmoggach/subscriptions", "organizations_url": "https://api.github.com/users/robmoggach/orgs", "repos_url": "https://api.github.com/users/robmoggach/repos", "events_url": "https://api.github.com/users/robmoggach/events{/privacy}", "received_events_url": "https://api.github.com/users/robmoggach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-28T23:31:15Z", "updated_at": "2016-07-31T17:38:46Z", "closed_at": "2016-07-31T13:11:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I love this:\n\n```\n<img class=\"img-fluid\" src=\"{{image.image.crop.720x300.url}}\"/>\n```\n\nIs it possible to do this somehow:\n\n```\n<img class=\"img-fluid\" src=\"{{image.image.crop.720x300.url}}\" width=\"{{image.image.crop.720x300.width}}\" height=\"{{image.image.crop.720x300.height}}\"/>\n```\n\nDocumentation on built-in sizers and filters could be expanded on a bit too... please!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/59", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/59/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/59/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/59", "id": 160417384, "node_id": "MDU6SXNzdWUxNjA0MTczODQ=", "number": 59, "title": "Add an option/setting to catch exception when file to crop/thumbnail cannot be opened", "user": {"login": "EliotBerriot", "id": 1970915, "node_id": "MDQ6VXNlcjE5NzA5MTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1970915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EliotBerriot", "html_url": "https://github.com/EliotBerriot", "followers_url": "https://api.github.com/users/EliotBerriot/followers", "following_url": "https://api.github.com/users/EliotBerriot/following{/other_user}", "gists_url": "https://api.github.com/users/EliotBerriot/gists{/gist_id}", "starred_url": "https://api.github.com/users/EliotBerriot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EliotBerriot/subscriptions", "organizations_url": "https://api.github.com/users/EliotBerriot/orgs", "repos_url": "https://api.github.com/users/EliotBerriot/repos", "events_url": "https://api.github.com/users/EliotBerriot/events{/privacy}", "received_events_url": "https://api.github.com/users/EliotBerriot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-15T13:06:58Z", "updated_at": "2016-08-03T15:44:24Z", "closed_at": "2016-07-29T20:43:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes, your database and media files can get out of sync, for example if you load a DB backup on your development machine without downloading the media files corresponding to this backup. \n\nIn this situation, the database may refers to a media file that does not actually exist on disk. Then, trying to generate a thumbnail or cropping the image will raise a `FileNotFoundError`. Dummy code to generate the issue, assuming the image is not present on disk:\n\n```\n{{ blog_entry.featured_image.thumbnail.200x200 }}\n```\n\nThis will generate a stack trace such as:\n\n```\nTraceback:\n\nFile \"/root/.local/lib/python3.4/site-packages/django/core/handlers/base.py\" in get_response\n  174.                     response = self.process_exception_by_middleware(e, request)\n\nFile \"/root/.local/lib/python3.4/site-packages/django/core/handlers/base.py\" in get_response\n  172.                     response = response.render()\n\nFile \"/root/.local/lib/python3.4/site-packages/django/template/response.py\" in render\n  160.             self.content = self.rendered_content\n\nFile \"/root/.local/lib/python3.4/site-packages/versatileimagefield/datastructures/sizedimage.py\" in __getitem__\n  120.                             height=height\n\nFile \"/root/.local/lib/python3.4/site-packages/versatileimagefield/datastructures/sizedimage.py\" in create_resized_image\n  168.             path_to_image\n\nFile \"/root/.local/lib/python3.4/site-packages/versatileimagefield/datastructures/base.py\" in retrieve_image\n  140.         image = self.storage.open(path_to_image, 'rb')\n\nFile \"/root/.local/lib/python3.4/site-packages/django/core/files/storage.py\" in open\n  37.         return self._open(name, mode)\n\nFile \"/root/.local/lib/python3.4/site-packages/django/core/files/storage.py\" in _open\n  201.         return File(open(self.path(name), mode))\n\nException Type: FileNotFoundError at /url/\nException Value: [Errno 2] No such file or directory: '/code/media/blog/2016/05/70-dummy-file-not-present-on-disk.png'\n```\n\nWhile this is a totally acceptable behaviour in production, where you don't want any missing file, on development / staging environment, this is quite painful, because any missing file can potentially make the whole template rendering step to crash.\n\nBecause of that, we cannot adopt versatileimagefield on our project, because it basically beak our development workflow: we update our local databases more often than media files, since we have gigabytes of media files, meaning that every page where we display a thumbnail can potentially crash.\n\nTo prevent this behaviour, I was thinking of adding an additional setting, such as `VERSATILEIMAGEFIELD_SETTINGS['fail_silently_on_missing_file']`, that would default to `False`, to preserve backward compatibility.  Then, by wrapping the cropping/thumbnail process with a `try / except FileNotFoundError`, we could just skip the exception, logging it somewhere and forget about it. \n\nI'm not sure if it's implementable though, and maybe there are reasons not do to this. Anyway, thank you for your time, and I hope we'll be able to find a workaround for this.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/54", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/54/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/54/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/54", "id": 155969778, "node_id": "MDU6SXNzdWUxNTU5Njk3Nzg=", "number": 54, "title": "delete_sized_images() fails with custom upload_to", "user": {"login": "neic", "id": 255399, "node_id": "MDQ6VXNlcjI1NTM5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/255399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neic", "html_url": "https://github.com/neic", "followers_url": "https://api.github.com/users/neic/followers", "following_url": "https://api.github.com/users/neic/following{/other_user}", "gists_url": "https://api.github.com/users/neic/gists{/gist_id}", "starred_url": "https://api.github.com/users/neic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neic/subscriptions", "organizations_url": "https://api.github.com/users/neic/orgs", "repos_url": "https://api.github.com/users/neic/repos", "events_url": "https://api.github.com/users/neic/events{/privacy}", "received_events_url": "https://api.github.com/users/neic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-05-20T14:00:37Z", "updated_at": "2018-03-20T11:48:44Z", "closed_at": "2016-07-29T21:09:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a custom `upload_to` path:\n\n``` python\ndef file_name(instance, path):\n    filename = os.path.basename(path)\n    sepFilename = os.path.splitext(filename)\n    newFilename = slugify(sepFilename[0]) + sepFilename[1]\n    year = str(instance.album.year)\n    album_slug = instance.album.slug\n\n    return '/'.join([year, album_slug, newFilename])\n\n#...\n\nclass Image(BaseMedia):\n    file = VersatileImageField(upload_to=file_name)\n    #...\n```\n\nWhen I run `delete_sized_images()` the files are not deleted. The problem is the custom path is both appended by `get_sized_root_folder()` and prepended by `sizer_regex`.\n\nExample:\n\n``` python\ndef delete_sized_images(self):\n    #...\n    print(self.get_sized_root_folder()) # __sized__/2015/sd/\n    print(self.sizer_regex.pattern)     # 2015/sd/g0043229-(thumbnail|crop)-(\\d+)x(\\d+)(?:-\\d+)?.JPG\n    #...\n```\n\nThank you for your time.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/53", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/53/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/53/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/53", "id": 155936963, "node_id": "MDU6SXNzdWUxNTU5MzY5NjM=", "number": 53, "title": "No such file or directory on delete_all_created_images()", "user": {"login": "neic", "id": 255399, "node_id": "MDQ6VXNlcjI1NTM5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/255399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neic", "html_url": "https://github.com/neic", "followers_url": "https://api.github.com/users/neic/followers", "following_url": "https://api.github.com/users/neic/following{/other_user}", "gists_url": "https://api.github.com/users/neic/gists{/gist_id}", "starred_url": "https://api.github.com/users/neic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neic/subscriptions", "organizations_url": "https://api.github.com/users/neic/orgs", "repos_url": "https://api.github.com/users/neic/repos", "events_url": "https://api.github.com/users/neic/events{/privacy}", "received_events_url": "https://api.github.com/users/neic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-05-20T10:50:28Z", "updated_at": "2016-11-15T16:54:16Z", "closed_at": "2016-11-15T16:54:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run `delete_all_created_images()` on a instance of a `VersatileImageField` with some sized thumbnails (no filtered and filtered+sized) I receive an error:\n\n```\nOSError at /admin/gallery/album/1/\n[Errno 2] No such file or directory: '/my/upload/path/__filtered__'\n```\n\nIdeally I should be able to call `delete_all_created_images()` even if I don't use one or more of sized, filtered or filtered+sized images.\n\nThe workaround is of course to only call the `delete_*_images()`-method that reflects the images you use, but then you have to remember to add the other delete-methods if you start using one of the others types in the future.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/49", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/49/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/49/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/49", "id": 151191661, "node_id": "MDU6SXNzdWUxNTExOTE2NjE=", "number": 49, "title": "Progressive JPEGs", "user": {"login": "yograterol", "id": 3322886, "node_id": "MDQ6VXNlcjMzMjI4ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3322886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yograterol", "html_url": "https://github.com/yograterol", "followers_url": "https://api.github.com/users/yograterol/followers", "following_url": "https://api.github.com/users/yograterol/following{/other_user}", "gists_url": "https://api.github.com/users/yograterol/gists{/gist_id}", "starred_url": "https://api.github.com/users/yograterol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yograterol/subscriptions", "organizations_url": "https://api.github.com/users/yograterol/orgs", "repos_url": "https://api.github.com/users/yograterol/repos", "events_url": "https://api.github.com/users/yograterol/events{/privacy}", "received_events_url": "https://api.github.com/users/yograterol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-04-26T17:23:57Z", "updated_at": "2016-06-02T13:12:26Z", "closed_at": "2016-05-31T00:02:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nGreat django app, do you can add a progressive JPEGs option for cached images?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/48", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/48/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/48/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/48", "id": 148715829, "node_id": "MDU6SXNzdWUxNDg3MTU4Mjk=", "number": 48, "title": "'SizedImageInstance' object has no attribute 'width' / 'height'", "user": {"login": "fabiocaccamo", "id": 1035294, "node_id": "MDQ6VXNlcjEwMzUyOTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1035294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabiocaccamo", "html_url": "https://github.com/fabiocaccamo", "followers_url": "https://api.github.com/users/fabiocaccamo/followers", "following_url": "https://api.github.com/users/fabiocaccamo/following{/other_user}", "gists_url": "https://api.github.com/users/fabiocaccamo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabiocaccamo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabiocaccamo/subscriptions", "organizations_url": "https://api.github.com/users/fabiocaccamo/orgs", "repos_url": "https://api.github.com/users/fabiocaccamo/repos", "events_url": "https://api.github.com/users/fabiocaccamo/events{/privacy}", "received_events_url": "https://api.github.com/users/fabiocaccamo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-04-15T17:08:40Z", "updated_at": "2016-12-15T13:34:26Z", "closed_at": "2016-04-26T18:37:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm migrating from sorl-thumbnail to VersatileImageField and I like pretty much this lib.\nBy the way during some code migration I encountered many times the same exception:\n\n`'SizedImageInstance' object has no attribute 'width' / 'height'`\n\nThat's really easy to fix, but I think that a SizedImageInstance obj could provide width/height properties.\nWhat do you think about it?\n\nThanks for this great lib.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/44", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/44/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/44/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/44", "id": 141691917, "node_id": "MDU6SXNzdWUxNDE2OTE5MTc=", "number": 44, "title": "PPOI is not correctly saved when the image field is inside an inline", "user": {"login": "honi", "id": 130202, "node_id": "MDQ6VXNlcjEzMDIwMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/130202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honi", "html_url": "https://github.com/honi", "followers_url": "https://api.github.com/users/honi/followers", "following_url": "https://api.github.com/users/honi/following{/other_user}", "gists_url": "https://api.github.com/users/honi/gists{/gist_id}", "starred_url": "https://api.github.com/users/honi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honi/subscriptions", "organizations_url": "https://api.github.com/users/honi/orgs", "repos_url": "https://api.github.com/users/honi/repos", "events_url": "https://api.github.com/users/honi/events{/privacy}", "received_events_url": "https://api.github.com/users/honi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-17T20:01:08Z", "updated_at": "2016-03-22T18:39:13Z", "closed_at": "2016-03-22T18:39:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "The hidden field is correctly updated, but the value is not saved in the DB. I'm using Django==1.9.4.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/43", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/43/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/43/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/43", "id": 138405956, "node_id": "MDU6SXNzdWUxMzg0MDU5NTY=", "number": 43, "title": "Throw IOError when file not found", "user": {"login": "mrgaolei", "id": 1567325, "node_id": "MDQ6VXNlcjE1NjczMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1567325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrgaolei", "html_url": "https://github.com/mrgaolei", "followers_url": "https://api.github.com/users/mrgaolei/followers", "following_url": "https://api.github.com/users/mrgaolei/following{/other_user}", "gists_url": "https://api.github.com/users/mrgaolei/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrgaolei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrgaolei/subscriptions", "organizations_url": "https://api.github.com/users/mrgaolei/orgs", "repos_url": "https://api.github.com/users/mrgaolei/repos", "events_url": "https://api.github.com/users/mrgaolei/events{/privacy}", "received_events_url": "https://api.github.com/users/mrgaolei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-04T07:43:23Z", "updated_at": "2016-03-04T13:20:07Z", "closed_at": "2016-03-04T13:20:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some time's I will dump server's database to my development machine to test.\n\nBut I won't download all pictures from my server.\n\nThen all of picture will not exists, It prompt IOError.\n\nHow do I capture this Exception?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/42", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/42/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/42/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/42", "id": 138390495, "node_id": "MDU6SXNzdWUxMzgzOTA0OTU=", "number": 42, "title": "VersatileImageFieldSerializer doesn't show placeholder's urls", "user": {"login": "GRLeo", "id": 17432240, "node_id": "MDQ6VXNlcjE3NDMyMjQw", "avatar_url": "https://avatars1.githubusercontent.com/u/17432240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GRLeo", "html_url": "https://github.com/GRLeo", "followers_url": "https://api.github.com/users/GRLeo/followers", "following_url": "https://api.github.com/users/GRLeo/following{/other_user}", "gists_url": "https://api.github.com/users/GRLeo/gists{/gist_id}", "starred_url": "https://api.github.com/users/GRLeo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GRLeo/subscriptions", "organizations_url": "https://api.github.com/users/GRLeo/orgs", "repos_url": "https://api.github.com/users/GRLeo/repos", "events_url": "https://api.github.com/users/GRLeo/events{/privacy}", "received_events_url": "https://api.github.com/users/GRLeo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-03-04T06:25:29Z", "updated_at": "2016-05-31T07:44:06Z", "closed_at": "2016-05-30T15:52:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there!\n\nutils.py:\n\n**if image_instance: # returns False while placeholder should be used**\n\n```\ndef build_versatileimagefield_url_set(image_instance, size_set, request=None):\n    \"\"\"\n    Returns a dictionary of urls corresponding to size_set\n    - `image_instance`: A VersatileImageFieldFile\n    - `size_set`: An iterable of 2-tuples, both strings. Example:\n        [\n            ('large', 'url'),\n            ('medium', 'crop__400x400'),\n            ('small', 'thumbnail__100x100')\n        ]\n        The above would lead to the following response:\n        {\n            'large': 'http://some.url/image.jpg',\n            'medium': 'http://some.url/__sized__/image-crop-400x400.jpg',\n            'small': 'http://some.url/__sized__/image-thumbnail-100x100.jpg',\n        }\n    - `request`:\n    \"\"\"\n    size_set = validate_versatileimagefield_sizekey_list(size_set)\n    to_return = {}\n    if image_instance: # returns False while placeholder should be used\n        for key, image_key in size_set:\n            img_url = get_url_from_image_key(image_instance, image_key)\n            if request is not None:\n                img_url = request.build_absolute_uri(img_url)\n            to_return[key] = img_url\n    return to_return\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/41", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/41/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/41/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/41", "id": 138224262, "node_id": "MDU6SXNzdWUxMzgyMjQyNjI=", "number": 41, "title": "AttributeError: 'VersatileImageFieldFile' object has no attribute 'delete_all_created_images'", "user": {"login": "agconti", "id": 3332051, "node_id": "MDQ6VXNlcjMzMzIwNTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3332051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agconti", "html_url": "https://github.com/agconti", "followers_url": "https://api.github.com/users/agconti/followers", "following_url": "https://api.github.com/users/agconti/following{/other_user}", "gists_url": "https://api.github.com/users/agconti/gists{/gist_id}", "starred_url": "https://api.github.com/users/agconti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agconti/subscriptions", "organizations_url": "https://api.github.com/users/agconti/orgs", "repos_url": "https://api.github.com/users/agconti/repos", "events_url": "https://api.github.com/users/agconti/events{/privacy}", "received_events_url": "https://api.github.com/users/agconti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-03-03T16:20:47Z", "updated_at": "2016-03-04T15:45:09Z", "closed_at": "2016-03-04T13:11:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm following the method detailed in the [docs](http://django-versatileimagefield.readthedocs.org/en/latest/deleting_created_images.html#automating-deletion-on-post-delete) to delete all image renditions when an object is deleted by calling `instance.image.delete_all_created_images()`  in a `post_delete` hook.\nHowever  when `instance.image.delete_all_created_images()` is called it throws an `AttributeError`. Inspecting the available properties on `instance.image` object reveals that only the `delete` method is available. \n\nDo I need a special configuration to allow versatile image objects to have the  `delete_all_created_images` method? How can I delete all image renditions from an object? \n\nPost delete hook: \n\n``` python\n@receiver(models.signals.post_delete, sender=CaseStudy)\ndef delete_case_study_images(sender, instance, **kwargs):\n    \"\"\"\n    Deletes CaseStudy image renditions on post_delete.\n    \"\"\"\n    instance.image.delete_all_created_images()\n    instance.image.delete()\n```\n\nStack trace:\n\n``` bash\nERROR: case_studies.test.test_models:CaseStudyTestCase.test_deleted_case_studies_remove_cropped_thumbnails\n  vi +14  my-project/case_studies/test/test_models.py  # test_deleted_case_studies_remove_cropped_thumbnails\n    self.case_study.delete()\n  vi +862 env/lib/python2.7/site-packages/django/db/models/base.py  # delete\n    return collector.delete()\n  vi +316 env/lib/python2.7/site-packages/django/db/models/deletion.py  # delete\n    sender=model, instance=obj, using=self.using\n  vi +192 env/lib/python2.7/site-packages/django/dispatch/dispatcher.py  # send\n    response = receiver(signal=self, sender=sender, **named)\n  vi +66  my-project/case_studies/models.py  # delete_case_study_images\n    instance.image.delete_all_created_images()\nAttributeError: 'VersatileImageFieldFile' object has no attribute 'delete_all_created_images'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/40", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/40/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/40/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/40", "id": 136622386, "node_id": "MDU6SXNzdWUxMzY2MjIzODY=", "number": 40, "title": "`jpeg_resize_quality` set, but no effect", "user": {"login": "mrgaolei", "id": 1567325, "node_id": "MDQ6VXNlcjE1NjczMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1567325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrgaolei", "html_url": "https://github.com/mrgaolei", "followers_url": "https://api.github.com/users/mrgaolei/followers", "following_url": "https://api.github.com/users/mrgaolei/following{/other_user}", "gists_url": "https://api.github.com/users/mrgaolei/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrgaolei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrgaolei/subscriptions", "organizations_url": "https://api.github.com/users/mrgaolei/orgs", "repos_url": "https://api.github.com/users/mrgaolei/repos", "events_url": "https://api.github.com/users/mrgaolei/events{/privacy}", "received_events_url": "https://api.github.com/users/mrgaolei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-02-26T07:50:04Z", "updated_at": "2016-02-26T08:04:03Z", "closed_at": "2016-02-26T08:04:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "My Settings:\n\n```\nVERSATILEIMAGEFIELD_SETTINGS = {\n    'jpeg_resize_quality': 20,\n}\n```\n\nWhen I using in template as:\n\n```\n{{goods.picture.thumbnail.600x600}}\n```\n\nThe thumbnail generated in `__sized__` dir and size is 17KB.\n\nBut when I delete this resized picture and change `jpeg_resize_quality` to 90,\nThe new thumbnail file is 17KB too, \nIt seems this settings has no any effect.\n\nIs this a bug?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/39", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/39/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/39/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/39", "id": 136523461, "node_id": "MDU6SXNzdWUxMzY1MjM0NjE=", "number": 39, "title": "Compress images without applying any sizer or filter?", "user": {"login": "davidtgq", "id": 14155110, "node_id": "MDQ6VXNlcjE0MTU1MTEw", "avatar_url": "https://avatars1.githubusercontent.com/u/14155110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtgq", "html_url": "https://github.com/davidtgq", "followers_url": "https://api.github.com/users/davidtgq/followers", "following_url": "https://api.github.com/users/davidtgq/following{/other_user}", "gists_url": "https://api.github.com/users/davidtgq/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtgq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtgq/subscriptions", "organizations_url": "https://api.github.com/users/davidtgq/orgs", "repos_url": "https://api.github.com/users/davidtgq/repos", "events_url": "https://api.github.com/users/davidtgq/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtgq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-02-25T21:53:08Z", "updated_at": "2016-04-08T18:24:11Z", "closed_at": "2016-02-26T18:14:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to compress images to a target filesize or quality percentage and retain the original resolution. I don't know if this can be accomplished with a sizer because it requires non-specific dimensions.\n\nIn English, the goal of this functionality would be to answer the following: \"Keep an original copy of all uploaded images, and serve a compressed version that has the same dimensions.\"\n\nAdditional optional functionality:\n- Passthrough images that are already compressed, under a certain filesize or filesize/pixels limit. I.e., \"If an uploaded image is under 1mb, do not compress it\" or \"If an uploaded image is under 1 byte per pixel (1mb for a 1000x1000 image), do not compress it\".\n- Separate treatment for images that have a large filesize but are detected to be high in entropy (indicated a high quality image that should not be compressed as much). I.e. \"If an image is greater than 1mb, compress it a lot if there's low entropy (probably taken with a low quality phone camera). Compress it very little or not at all if there's a lot of entropy (every pixel is carrying detail).\"\n\nIs this something that DVIF would be interested in implementing?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/38", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/38/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/38/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/38", "id": 134533572, "node_id": "MDU6SXNzdWUxMzQ1MzM1NzI=", "number": 38, "title": "VersatileImageField's field name does not include form prefix ", "user": {"login": "snowlock650", "id": 563326, "node_id": "MDQ6VXNlcjU2MzMyNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/563326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snowlock650", "html_url": "https://github.com/snowlock650", "followers_url": "https://api.github.com/users/snowlock650/followers", "following_url": "https://api.github.com/users/snowlock650/following{/other_user}", "gists_url": "https://api.github.com/users/snowlock650/gists{/gist_id}", "starred_url": "https://api.github.com/users/snowlock650/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snowlock650/subscriptions", "organizations_url": "https://api.github.com/users/snowlock650/orgs", "repos_url": "https://api.github.com/users/snowlock650/repos", "events_url": "https://api.github.com/users/snowlock650/events{/privacy}", "received_events_url": "https://api.github.com/users/snowlock650/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-02-18T10:02:53Z", "updated_at": "2016-02-18T13:22:01Z", "closed_at": "2016-02-18T13:22:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \n\nCurrently in my project, I am using form prefix introduced in Django 1.9 to identify different forms on the same page. \n\nThe HTML code generated by the widget is correct and has the proper form prefix added to the input name. But VersatileImageField's field name does not contain the form prefix (see code snippet below); All other standard field types tested will return field name with form prefix. Without prefixed field name, it is not possible to customize the widget using template tag or ugly hack like renaming the name in the view function is needed. \n\n```\n# model\nclass Product(models.Model):\n    name = models.CharField(max_length=128)\n    product_image = VersatileImageField(upload_to='product', ppoi_field='profile_pic_ppoi')\n\n# form\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = ['name', 'product_image']\n\n    def __init__(self, *args, **kwargs):\n        super(ProductForm, self).__init__(*args, **kwargs)\n\n# view \ndef product_details(request, pk):\n    product = Product.get(id=pk)\n    form = ProductForm(instance=product, prefix='my')\n    ctx = {\n        'form': form\n    }\n    return TemplateResponse(request, 'product.html', ctx)\n\n# template \n{{ form.name.name }}\n{{ form.product_image.name }}   \n\n# output\n    my-name\n    product_image\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/37", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/37/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/37/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/37", "id": 134236143, "node_id": "MDU6SXNzdWUxMzQyMzYxNDM=", "number": 37, "title": "DecompressionBombWarning", "user": {"login": "iraycd", "id": 1450984, "node_id": "MDQ6VXNlcjE0NTA5ODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1450984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iraycd", "html_url": "https://github.com/iraycd", "followers_url": "https://api.github.com/users/iraycd/followers", "following_url": "https://api.github.com/users/iraycd/following{/other_user}", "gists_url": "https://api.github.com/users/iraycd/gists{/gist_id}", "starred_url": "https://api.github.com/users/iraycd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iraycd/subscriptions", "organizations_url": "https://api.github.com/users/iraycd/orgs", "repos_url": "https://api.github.com/users/iraycd/repos", "events_url": "https://api.github.com/users/iraycd/events{/privacy}", "received_events_url": "https://api.github.com/users/iraycd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-17T10:04:48Z", "updated_at": "2016-04-22T07:51:37Z", "closed_at": "2016-02-19T19:41:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do I solve this error?\n\nDecompressionBombWarning: Image size (209255487 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/36", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/36/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/36/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/36", "id": 132136652, "node_id": "MDU6SXNzdWUxMzIxMzY2NTI=", "number": 36, "title": "Cleaner processed filenames using hash of options?", "user": {"login": "Bartvds", "id": 685984, "node_id": "MDQ6VXNlcjY4NTk4NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/685984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartvds", "html_url": "https://github.com/Bartvds", "followers_url": "https://api.github.com/users/Bartvds/followers", "following_url": "https://api.github.com/users/Bartvds/following{/other_user}", "gists_url": "https://api.github.com/users/Bartvds/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartvds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartvds/subscriptions", "organizations_url": "https://api.github.com/users/Bartvds/orgs", "repos_url": "https://api.github.com/users/Bartvds/repos", "events_url": "https://api.github.com/users/Bartvds/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartvds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-02-08T13:05:46Z", "updated_at": "2016-04-26T13:16:53Z", "closed_at": "2016-04-11T14:51:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "We would like to cleanup the generated thumbnail paths/filenames.\n\nBy default DVIF will generate a long concatenation of all the filters and parameters used to generate the image in a human readable but a little messy looking URL (many segments with double underscores, numbers, dots and dashes). Since some of our image URL's are somewhat visible to our users we'd like to clean this up if possible.\n\nOur existing thumbnailer (an old easythumbnails hackjob) also did this, but we've added a simple hashing function that takes the options concatenation and hashes it to make a compact chunky block of characters. \n\nBecause it uses a hashing function it is still generating unique names for each combination of options.\n\n```\n// so instead of something like this:\nthumbs/images/foo-desaturate__75__fancify-0-7__1-23-crop-c0-75__0-25-400x400.jpg\n\n// get something like this\nthumbs/images/foo-ff8765ab-400x400.jpg\n```\n\nIn our existing site we use an md5 binary hash encoded in (crockford) base32 alphabet and trimmed for length. These are fairly compact string (unlike hex) but non-scary (no casing or specials chars).\n\nMaybe DVIF could provide an option to have the user supply a hashing function like this? Could be a simple dot-separated path to an importable callback so people can bring their own hashers.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/34", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/34/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/34/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/34", "id": 127007086, "node_id": "MDU6SXNzdWUxMjcwMDcwODY=", "number": 34, "title": "blank=True has no effect via django-rest-framework", "user": {"login": "mrgaolei", "id": 1567325, "node_id": "MDQ6VXNlcjE1NjczMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1567325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrgaolei", "html_url": "https://github.com/mrgaolei", "followers_url": "https://api.github.com/users/mrgaolei/followers", "following_url": "https://api.github.com/users/mrgaolei/following{/other_user}", "gists_url": "https://api.github.com/users/mrgaolei/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrgaolei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrgaolei/subscriptions", "organizations_url": "https://api.github.com/users/mrgaolei/orgs", "repos_url": "https://api.github.com/users/mrgaolei/repos", "events_url": "https://api.github.com/users/mrgaolei/events{/privacy}", "received_events_url": "https://api.github.com/users/mrgaolei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-01-16T07:01:36Z", "updated_at": "2017-03-31T01:59:26Z", "closed_at": "2016-02-26T17:52:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my model, has a VersatileImageField(u\"picture\", blank=True, null=True).\nIn Django Admin, it can be empty.\nBut in django-rest-framework, when I don't upload this field, It prompt me this field is required.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/33", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/33/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/33/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/33", "id": 126454615, "node_id": "MDU6SXNzdWUxMjY0NTQ2MTU=", "number": 33, "title": "Crop, thumbnail etc not working", "user": {"login": "geotre", "id": 1889120, "node_id": "MDQ6VXNlcjE4ODkxMjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1889120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geotre", "html_url": "https://github.com/geotre", "followers_url": "https://api.github.com/users/geotre/followers", "following_url": "https://api.github.com/users/geotre/following{/other_user}", "gists_url": "https://api.github.com/users/geotre/gists{/gist_id}", "starred_url": "https://api.github.com/users/geotre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geotre/subscriptions", "organizations_url": "https://api.github.com/users/geotre/orgs", "repos_url": "https://api.github.com/users/geotre/repos", "events_url": "https://api.github.com/users/geotre/events{/privacy}", "received_events_url": "https://api.github.com/users/geotre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-01-13T16:16:29Z", "updated_at": "2016-01-14T14:32:25Z", "closed_at": "2016-01-13T22:58:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've followed the basic examples and installed all requirements but I can't get crop or thumbnail creation to work.\n\n```\nAttributeError: 'VersatileImageFieldFile' object has no attribute 'crop'\n```\n\nEdit:\n\n```\nPillow==3.0.0\ndjango-versatileimagefield==1.2.2\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/32", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/32/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/32/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/32", "id": 123662040, "node_id": "MDU6SXNzdWUxMjM2NjIwNDA=", "number": 32, "title": "import_module blows up when it can't import something in INSTALLED_APPS", "user": {"login": "decentral1se", "id": 1991377, "node_id": "MDQ6VXNlcjE5OTEzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1991377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentral1se", "html_url": "https://github.com/decentral1se", "followers_url": "https://api.github.com/users/decentral1se/followers", "following_url": "https://api.github.com/users/decentral1se/following{/other_user}", "gists_url": "https://api.github.com/users/decentral1se/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentral1se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentral1se/subscriptions", "organizations_url": "https://api.github.com/users/decentral1se/orgs", "repos_url": "https://api.github.com/users/decentral1se/repos", "events_url": "https://api.github.com/users/decentral1se/events{/privacy}", "received_events_url": "https://api.github.com/users/decentral1se/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-12-23T13:41:40Z", "updated_at": "2015-12-23T22:25:46Z", "closed_at": "2015-12-23T22:25:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, not sure if this is a problem in `django-versatileimagefield` or `django-rules`, but I don't really understand what is happening, so I will start here :+1: \n\nI have a `'rules.apps.AutodiscoverRulesConfig'` ([docs](https://github.com/dfunckt/django-rules#best-practices)) line in my `INSTALLED_APPS` which is some `django-rules` specific configuration for discovering my rules. However, your implementation of `autodiscover()` will call `import_module` and blow up when it can't import the `AutodiscoverRulesConfig`.\n\nAny ideas what the fix should be?\n\nThe error I am seeing is below.\n\n```\nTraceback (most recent call last):\n  File \"./manage.py\", line 8, in <module>\n    execute_from_command_line(sys.argv)\n  File \"/home/lwm/velodrome/.venv/lib/python3.4/site-packages/django/core/management/__init__.py\", line 350, in execute_from_command_line\n    utility.execute()\n  File \"/home/lwm/velodrome/.venv/lib/python3.4/site-packages/django/core/management/__init__.py\", line 324, in execute\n    django.setup()\n  File \"/home/lwm/velodrome/.venv/lib/python3.4/site-packages/django/__init__.py\", line 18, in setup\n    apps.populate(settings.INSTALLED_APPS)\n  File \"/home/lwm/velodrome/.venv/lib/python3.4/site-packages/django/apps/registry.py\", line 108, in populate\n    app_config.import_models(all_models)\n  File \"/home/lwm/velodrome/.venv/lib/python3.4/site-packages/django/apps/config.py\", line 202, in import_models\n    self.models_module = import_module(models_module_name)\n  File \"/usr/lib/python3.4/importlib/__init__.py\", line 109, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File \"<frozen importlib._bootstrap>\", line 2254, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 2237, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 2226, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 1200, in _load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 1129, in _exec\n  File \"<frozen importlib._bootstrap>\", line 1471, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 321, in _call_with_frames_removed\n  File \"/home/lwm/velodrome/velodrome/lock8/models.py\", line 80, in <module>\n    from versatileimagefield.fields import VersatileImageField\n  File \"/home/lwm/velodrome/.venv/src/django-versatileimagefield/versatileimagefield/fields.py\", line 13, in <module>\n    from .files import VersatileImageFieldFile, VersatileImageFileDescriptor\n  File \"/home/lwm/velodrome/.venv/src/django-versatileimagefield/versatileimagefield/files.py\", line 11, in <module>\n    from .mixins import VersatileImageMixIn\n  File \"/home/lwm/velodrome/.venv/src/django-versatileimagefield/versatileimagefield/mixins.py\", line 12, in <module>\n    autodiscover()\n  File \"/home/lwm/velodrome/.venv/src/django-versatileimagefield/versatileimagefield/registry.py\", line 196, in autodiscover\n    mod = import_module(app)\n  File \"/usr/lib/python3.4/importlib/__init__.py\", line 109, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nImportError: No module named 'rules.apps.AutodiscoverRulesConfig'; 'rules.apps' is not a package\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/30", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/30/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/30/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/30", "id": 122556691, "node_id": "MDU6SXNzdWUxMjI1NTY2OTE=", "number": 30, "title": "image.url does not return placeholder", "user": {"login": "jelko", "id": 1216324, "node_id": "MDQ6VXNlcjEyMTYzMjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1216324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jelko", "html_url": "https://github.com/jelko", "followers_url": "https://api.github.com/users/jelko/followers", "following_url": "https://api.github.com/users/jelko/following{/other_user}", "gists_url": "https://api.github.com/users/jelko/gists{/gist_id}", "starred_url": "https://api.github.com/users/jelko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jelko/subscriptions", "organizations_url": "https://api.github.com/users/jelko/orgs", "repos_url": "https://api.github.com/users/jelko/repos", "events_url": "https://api.github.com/users/jelko/events{/privacy}", "received_events_url": "https://api.github.com/users/jelko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-16T17:11:03Z", "updated_at": "2015-12-21T20:51:21Z", "closed_at": "2015-12-21T20:51:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is quite unexpected. What is the intention behind this?\nI would think that it would be intuitive that `image.url` would also return the placeholder since the e.g. `image.crop.--x--` does as well.\n\nAlso maybe it might be useful to document this behavior more clearly.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/28", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/28/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/28/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/28", "id": 122461077, "node_id": "MDU6SXNzdWUxMjI0NjEwNzc=", "number": 28, "title": "collectstatic fails when using placeholders", "user": {"login": "jelko", "id": 1216324, "node_id": "MDQ6VXNlcjEyMTYzMjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1216324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jelko", "html_url": "https://github.com/jelko", "followers_url": "https://api.github.com/users/jelko/followers", "following_url": "https://api.github.com/users/jelko/following{/other_user}", "gists_url": "https://api.github.com/users/jelko/gists{/gist_id}", "starred_url": "https://api.github.com/users/jelko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jelko/subscriptions", "organizations_url": "https://api.github.com/users/jelko/orgs", "repos_url": "https://api.github.com/users/jelko/repos", "events_url": "https://api.github.com/users/jelko/events{/privacy}", "received_events_url": "https://api.github.com/users/jelko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-16T09:21:38Z", "updated_at": "2015-12-16T16:44:58Z", "closed_at": "2015-12-16T16:44:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Deploying a application using django-versatileimagefield to Heroku and S3 fails for a odd reason. Django's `collectstatic` (which is supposed to put the static files on to the storage - here S3) fails because django-versatileimagefield's `placeholder_image=OnStoragePlaceholderImage(...)` tries to access a image on the same storage. Obviously that is not there yet (since it is just in the process of putting the files there).\n\nThe issue seems to be that the the placeholder image gets accessed when Python is creating the classes (in the beginning of `collectstatic`). Instead it should possibly use some kind of lazy reference to the image which just accesses the file on disk when it is actively called.\n\n```\n$ python manage.py collectstatic\n\nTraceback (most recent call last):\n  File \"manage.py\", line 10, in <module>\n    execute_from_command_line(sys.argv)\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/management/__init__.py\", line 338, in execute_from_command_line\n    utility.execute()\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/management/__init__.py\", line 312, in execute\n    django.setup()\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django/__init__.py\", line 18, in setup\n    apps.populate(settings.INSTALLED_APPS)\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django/apps/registry.py\", line 108, in populate\n    app_config.import_models(all_models)\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django/apps/config.py\", line 198, in import_models\n    self.models_module = import_module(models_module_name)\n  File \"/app/.heroku/python/lib/python2.7/importlib/__init__.py\", line 37, in import_module\n    __import__(name)\n  File \"/app/core/unchained_auth/models.py\", line 6, in <module>\n    from core.unchained_profiles.models import BaseProfile\n  File \"/app/core/unchained_profiles/models.py\", line 29, in <module>\n    class Employer(models.Model):\n  File \"/app/core/unchained_profiles/models.py\", line 43, in Employer\n    path=os.path.join('images', 'placeholder_company.png'), storage=StaticFilesStorage()\n  File \"/app/.heroku/python/lib/python2.7/site-packages/versatileimagefield/placeholder.py\", line 57, in __init__\n    file = storage.open(path)\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/files/storage.py\", line 37, in open\n    return self._open(name, mode)\n  File \"/app/.heroku/python/lib/python2.7/site-packages/storages/backends/s3boto.py\", line 366, in _open\n    raise IOError('File does not exist: %s' % name)\nIOError: File does not exist: static/images/placeholder_company.png\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/26", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/26/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/26/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/26", "id": 119942707, "node_id": "MDU6SXNzdWUxMTk5NDI3MDc=", "number": 26, "title": "Cropped images are not recreated if deleted during runtime", "user": {"login": "Syberspace", "id": 2759974, "node_id": "MDQ6VXNlcjI3NTk5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2759974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Syberspace", "html_url": "https://github.com/Syberspace", "followers_url": "https://api.github.com/users/Syberspace/followers", "following_url": "https://api.github.com/users/Syberspace/following{/other_user}", "gists_url": "https://api.github.com/users/Syberspace/gists{/gist_id}", "starred_url": "https://api.github.com/users/Syberspace/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Syberspace/subscriptions", "organizations_url": "https://api.github.com/users/Syberspace/orgs", "repos_url": "https://api.github.com/users/Syberspace/repos", "events_url": "https://api.github.com/users/Syberspace/events{/privacy}", "received_events_url": "https://api.github.com/users/Syberspace/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-12-02T13:41:30Z", "updated_at": "2016-01-25T16:32:31Z", "closed_at": "2016-01-25T16:24:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "This issue is related to #25 \n\nSince images are not recreated upon update of the source image I tried to work around this issue by simply deleting the cropped images whenever the source image is updated.\n\nHowever, versatileimagefield does not check if the cropped image still exists on the system and therefore returns invalid urls, resulting in 404 Errors for the users.\n\nOnly after a restart of the server the cropped images are created again.\n\n**Possible Fix**\nRecreate sizer/filter result file if not present on the filesystem\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/25", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/25/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/25/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/25", "id": 119941444, "node_id": "MDU6SXNzdWUxMTk5NDE0NDQ=", "number": 25, "title": "Recreate Thumbnails/Crop if source image is newer than result", "user": {"login": "Syberspace", "id": 2759974, "node_id": "MDQ6VXNlcjI3NTk5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2759974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Syberspace", "html_url": "https://github.com/Syberspace", "followers_url": "https://api.github.com/users/Syberspace/followers", "following_url": "https://api.github.com/users/Syberspace/following{/other_user}", "gists_url": "https://api.github.com/users/Syberspace/gists{/gist_id}", "starred_url": "https://api.github.com/users/Syberspace/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Syberspace/subscriptions", "organizations_url": "https://api.github.com/users/Syberspace/orgs", "repos_url": "https://api.github.com/users/Syberspace/repos", "events_url": "https://api.github.com/users/Syberspace/events{/privacy}", "received_events_url": "https://api.github.com/users/Syberspace/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-02T13:35:05Z", "updated_at": "2016-01-25T16:24:54Z", "closed_at": "2016-01-25T16:24:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using versatileimagefield to manage user avatars in my project.\nUpon update of any avatar I simply update the fileds value like so:\n\n``` python\nmediapath = 'path/to/avatars/username.jpg\"\nuser.avatar = mediapath\nuser.save()\n```\n\nthis works as expected.\n\nIn some other parts of the project I need to generate thumbnails/cropped versions of those avatars:\n\n``` python\nthumb = user.avatar.crop['200x200'].url\n```\n\nthis initially creates a new cropped version and places it in `__sized__/avatars/` as expected.\nHowever, if the \"source\" image has been changed since the thumbnail was first created it is not updated and the user is still represented by his/her old avatar.\n\nI suspect this happens with ever other sizer and filter aswell\n\n**Suggested Fix**\n- check file creation time of source/original and resulting image\n- if resulting image is older than original recreate the resulting image\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/24", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/24/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/24/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/24", "id": 118148975, "node_id": "MDU6SXNzdWUxMTgxNDg5NzU=", "number": 24, "title": "Server Error when no media exists for VersatileImageFieldSerializer", "user": {"login": "njamaleddine", "id": 5332222, "node_id": "MDQ6VXNlcjUzMzIyMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5332222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njamaleddine", "html_url": "https://github.com/njamaleddine", "followers_url": "https://api.github.com/users/njamaleddine/followers", "following_url": "https://api.github.com/users/njamaleddine/following{/other_user}", "gists_url": "https://api.github.com/users/njamaleddine/gists{/gist_id}", "starred_url": "https://api.github.com/users/njamaleddine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njamaleddine/subscriptions", "organizations_url": "https://api.github.com/users/njamaleddine/orgs", "repos_url": "https://api.github.com/users/njamaleddine/repos", "events_url": "https://api.github.com/users/njamaleddine/events{/privacy}", "received_events_url": "https://api.github.com/users/njamaleddine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-20T23:30:12Z", "updated_at": "2015-11-30T17:09:00Z", "closed_at": "2015-11-30T16:14:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello, it appears that when an error is deleted on the operating system, the following error is returned when using `VersatileImageFieldSerializer`:\n\n```\nIOError: [Errno 2] No such file or directory:\n```\n\nInstead it may be better to return `None` or allow for a more graceful failure on a server rather than a server error.\n\nI encountered this error via a database dump that had image instances already which have no files associated in my local environment since I'm not using an external image storage service like s3 locally.\n\nAny help or thoughts would be appreciated\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/23", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/23/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/23/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/23", "id": 111855481, "node_id": "MDU6SXNzdWUxMTE4NTU0ODE=", "number": 23, "title": "VersatileImageFieldSerializer displays absolute url", "user": {"login": "rocjojo", "id": 1843907, "node_id": "MDQ6VXNlcjE4NDM5MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1843907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rocjojo", "html_url": "https://github.com/rocjojo", "followers_url": "https://api.github.com/users/rocjojo/followers", "following_url": "https://api.github.com/users/rocjojo/following{/other_user}", "gists_url": "https://api.github.com/users/rocjojo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rocjojo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rocjojo/subscriptions", "organizations_url": "https://api.github.com/users/rocjojo/orgs", "repos_url": "https://api.github.com/users/rocjojo/repos", "events_url": "https://api.github.com/users/rocjojo/events{/privacy}", "received_events_url": "https://api.github.com/users/rocjojo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-10-16T15:32:58Z", "updated_at": "2015-10-17T07:25:25Z", "closed_at": "2015-10-16T20:29:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nWhen i use the standard ImageField in my serializers, the full url is displayed, everything works fine. But when i use the VersatileImageFieldSerializer by giving a liste of parameters for exemple : \n\n```\n*models.py\nlogo = VersatileImageField(upload_to=shop_logo_path, height_field='height', width_field='width', null=True, blank=True)\n\n*serializers.py\nlogo = VersatileImageFieldSerializer(\n    sizes=[\n        ('full_size', 'url'),\n        ('thumbnail', 'thumbnail__100x100'),\n        ('medium_square_crop', 'crop__400x400'),\n        ('small_square_crop', 'crop__50x50')\n    ]\n)\n```\n\nOnly the absolute url is displayed \n\n```\n\"logo\": {\n    \"medium_square_crop\": \"/media/__sized__/shop/VS/1890/asfd/68fc96d2-b890-48b6-88f0-b76d01cb95ef-crop-c0-5__0-5-400x400.jpg\",\n    \"small_square_crop\": \"/media/__sized__/shop/VS/1890/asfd/68fc96d2-b890-48b6-88f0-b76d01cb95ef-crop-c0-5__0-5-50x50.jpg\",\n    \"full_size\": \"/media/shop/VS/1890/asfd/68fc96d2-b890-48b6-88f0-b76d01cb95ef\",\n    \"thumbnail\": \"/media/__sized__/shop/VS/1890/asfd/68fc96d2-b890-48b6-88f0-b76d01cb95ef-thumbnail-100x100.jpg\"\n},\n```\n\nI took a look at your code in serializers.py the function to_representation and to_native received a value parameter, which is a VersatilImage instance, also display the absolute url\n\n```\n<VersatileImageFieldFile: shop/VS/1890/asfd/68fc96d2-b890-48b6-88f0-b76d01cb95ef>\nipdb> value.url\n'/media/shop/VS/1890/asfd/68fc96d2-b890-48b6-88f0-b76d01cb95ef'\n```\n\npip freeze shows:\n\nDjango==1.8.4\nPillow==3.0.0\ndjango-versatileimagefield==1.0.5\ndjangorestframework==3.1.3\n\nThanks for your work and your help.\n\nKing Regards.\n\nJoel\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/22", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/22/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/22/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/22", "id": 107371984, "node_id": "MDU6SXNzdWUxMDczNzE5ODQ=", "number": 22, "title": "Image preview disappearing on POST", "user": {"login": "securedirective", "id": 6537231, "node_id": "MDQ6VXNlcjY1MzcyMzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6537231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/securedirective", "html_url": "https://github.com/securedirective", "followers_url": "https://api.github.com/users/securedirective/followers", "following_url": "https://api.github.com/users/securedirective/following{/other_user}", "gists_url": "https://api.github.com/users/securedirective/gists{/gist_id}", "starred_url": "https://api.github.com/users/securedirective/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/securedirective/subscriptions", "organizations_url": "https://api.github.com/users/securedirective/orgs", "repos_url": "https://api.github.com/users/securedirective/repos", "events_url": "https://api.github.com/users/securedirective/events{/privacy}", "received_events_url": "https://api.github.com/users/securedirective/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-09-20T04:20:38Z", "updated_at": "2015-09-25T14:10:52Z", "closed_at": "2015-09-25T14:07:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Short explanation**\nWhen a form validation error occurs, VersatileImageField shows as if the field data truly is blank even when there was a previously uploaded photo.\n\nSo instead of seeing this...\n![image](https://cloud.githubusercontent.com/assets/6537231/9979154/907655de-5f10-11e5-8adf-8bc3fd773327.png)\n\n...I see this...\n![image](https://cloud.githubusercontent.com/assets/6537231/9979159/2cf0ba12-5f11-11e5-9e5c-4c53be5282ca.png)\n\n**When malfunction occurs**\n- PPOI feature is enabled by using `ppoi_field=\"photoppoi\"` in the models file.\n- AND a server-side validation error occurs in the form in an unrelated field.\n\n**When things work properly**\n- Using VersatileImageField _without_ setting `ppoi_field`\n- or using Django's built-in ImageField instead of VersatileImageField\n\n**Further details**\nWith the typical code being used in `views.py` (see below), most of the time the user sees the form after it was created using `PersonForm(instance=person)`. When the form is submitted, if everything is valid the user is immediately redirected to a clean form. But if there is a validation error, this redirect does not occur and the form is displayed after being created with `PersonForm(request.POST, request.FILES, instance=person)`.\n\n``` python\n  person = Person.objects.get(pk=1)\n  if request.method == 'POST':\n    form = PersonForm(request.POST, request.FILES, instance=person)\n    if form.is_valid():\n      form.instance.save()\n      return HttpResponseRedirect('/self/')\n  else:\n    form = PersonForm(instance=person)\n  # Render the form\n  return HttpResponse(template.render(Context(context)))\n```\n\nIn this condition, `bound_data` is called against the field.\n- When PPOI is not used, the field is an ImageField, so this method is inherited from FileField **[django/forms/fields.py, line 611](https://github.com/django/django/blob/master/django/forms/fields.py#L611)**. When `data` is None (file uploaded previously, but not changed during this render of the form), the return value is `initial` (the file already uploaded).\n\n``` python\n    def bound_data(self, data, initial):\n        if data in (None, FILE_INPUT_CONTRADICTION):\n            return initial\n        return data\n```\n- When PPOI is in use, however, the field is a SizedImageCenterpointClickDjangoAdminField, based off of django's MultiValueField. But since `bound_data` was not implemented, it is ultimately inherited from the base Field class **[django/forms/fields.py, line 171](https://github.com/django/django/blob/master/django/forms/fields.py#L171)**. Here, for reasons unknown to me, django ignores `initial` and simply returns `data`. But in this situation, `data` is None, so VersatileImageField shows blank.\n\n``` python\n    def bound_data(self, data, initial):\n        \"\"\"\n        Return the value that should be shown for this field on render of a\n        bound form, given the submitted POST data for the field and the initial\n        data, if any.\n\n        For most fields, this will simply be data; FileFields need to handle it\n        a bit differently.\n        \"\"\"\n        return data\n```\n\n**Possible fix**\nSince I can't profess to be a Django expert, I'm not sure if this is the _best_ way to fix the problem. But it seems to work on my end:\n\nIn **[versatileimagefield/forms.py](https://github.com/WGBH/django-versatileimagefield/blob/master/versatileimagefield/forms.py#L49)** insert the following lines at line 49 (implement the `bound_data` method to the VersatileImagePPOIClickField class):\n\n``` python\n    def bound_data(self, data, initial):\n        if (data[0] == None):\n            return initial\n        return data\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/20", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/20/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/20/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/20", "id": 98598739, "node_id": "MDU6SXNzdWU5ODU5ODczOQ==", "number": 20, "title": "How to remove ppoi widget", "user": {"login": "SebCorbin", "id": 645207, "node_id": "MDQ6VXNlcjY0NTIwNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/645207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SebCorbin", "html_url": "https://github.com/SebCorbin", "followers_url": "https://api.github.com/users/SebCorbin/followers", "following_url": "https://api.github.com/users/SebCorbin/following{/other_user}", "gists_url": "https://api.github.com/users/SebCorbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SebCorbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SebCorbin/subscriptions", "organizations_url": "https://api.github.com/users/SebCorbin/orgs", "repos_url": "https://api.github.com/users/SebCorbin/repos", "events_url": "https://api.github.com/users/SebCorbin/events{/privacy}", "received_events_url": "https://api.github.com/users/SebCorbin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-02T10:02:14Z", "updated_at": "2015-09-01T08:39:38Z", "closed_at": "2015-08-17T15:04:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using \n\n```\nzones_img = VersatileImageField(verbose_name=_('Plan for zones'), upload_to='zones_img', blank=True)\n```\n\nI find myself with an extra widget in my form's HTML:\n\n```\n<div class=\"versatileimagefield\"><input accept=\"image/jpeg,image/png\" class=\"file-chooser clearablefileinputwithimagepreview form-control\" id=\"id_general-main-zones_img_0\" name=\"general-main-zones_img_0\" type=\"file\"> <input accept=\"image/jpeg,image/png\" class=\"ppoi-input hiddeninput form-control\" id=\"id_general-main-zones_img_1\" name=\"general-main-zones_img_1\" type=\"hidden\"> </div>\n```\n\nHow to remove the second input file field?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/14", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/14/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/14/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/14", "id": 77581106, "node_id": "MDU6SXNzdWU3NzU4MTEwNg==", "number": 14, "title": "Provide a non-clearable image field", "user": {"login": "patrys", "id": 81205, "node_id": "MDQ6VXNlcjgxMjA1", "avatar_url": "https://avatars1.githubusercontent.com/u/81205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrys", "html_url": "https://github.com/patrys", "followers_url": "https://api.github.com/users/patrys/followers", "following_url": "https://api.github.com/users/patrys/following{/other_user}", "gists_url": "https://api.github.com/users/patrys/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrys/subscriptions", "organizations_url": "https://api.github.com/users/patrys/orgs", "repos_url": "https://api.github.com/users/patrys/repos", "events_url": "https://api.github.com/users/patrys/events{/privacy}", "received_events_url": "https://api.github.com/users/patrys/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "respondcreate", "id": 843929, "node_id": "MDQ6VXNlcjg0MzkyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/843929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/respondcreate", "html_url": "https://github.com/respondcreate", "followers_url": "https://api.github.com/users/respondcreate/followers", "following_url": "https://api.github.com/users/respondcreate/following{/other_user}", "gists_url": "https://api.github.com/users/respondcreate/gists{/gist_id}", "starred_url": "https://api.github.com/users/respondcreate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/respondcreate/subscriptions", "organizations_url": "https://api.github.com/users/respondcreate/orgs", "repos_url": "https://api.github.com/users/respondcreate/repos", "events_url": "https://api.github.com/users/respondcreate/events{/privacy}", "received_events_url": "https://api.github.com/users/respondcreate/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "respondcreate", "id": 843929, "node_id": "MDQ6VXNlcjg0MzkyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/843929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/respondcreate", "html_url": "https://github.com/respondcreate", "followers_url": "https://api.github.com/users/respondcreate/followers", "following_url": "https://api.github.com/users/respondcreate/following{/other_user}", "gists_url": "https://api.github.com/users/respondcreate/gists{/gist_id}", "starred_url": "https://api.github.com/users/respondcreate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/respondcreate/subscriptions", "organizations_url": "https://api.github.com/users/respondcreate/orgs", "repos_url": "https://api.github.com/users/respondcreate/repos", "events_url": "https://api.github.com/users/respondcreate/events{/privacy}", "received_events_url": "https://api.github.com/users/respondcreate/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2015-05-18T09:33:59Z", "updated_at": "2015-05-21T13:47:02Z", "closed_at": "2015-05-21T13:45:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Making the field clearable makes little sense for required fields and results in confusing UI. Currently making the field non-clearable requires subclassing the model field, the form field and the widget.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/13", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/13/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/13/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/13", "id": 76321378, "node_id": "MDU6SXNzdWU3NjMyMTM3OA==", "number": 13, "title": "PlaceHolderImage Image size 0", "user": {"login": "hagsteel", "id": 603835, "node_id": "MDQ6VXNlcjYwMzgzNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/603835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hagsteel", "html_url": "https://github.com/hagsteel", "followers_url": "https://api.github.com/users/hagsteel/followers", "following_url": "https://api.github.com/users/hagsteel/following{/other_user}", "gists_url": "https://api.github.com/users/hagsteel/gists{/gist_id}", "starred_url": "https://api.github.com/users/hagsteel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hagsteel/subscriptions", "organizations_url": "https://api.github.com/users/hagsteel/orgs", "repos_url": "https://api.github.com/users/hagsteel/repos", "events_url": "https://api.github.com/users/hagsteel/events{/privacy}", "received_events_url": "https://api.github.com/users/hagsteel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-05-14T11:01:41Z", "updated_at": "2015-05-15T20:47:02Z", "closed_at": "2015-05-15T15:05:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "`OnDiscPlaceholderImage` seem to have a bug in it:\n\nThis line: `self.image_data = ContentFile(file.read(), name=name)` causes the file to be read.\nThe next line `super(OnDiscPlaceholderImage, self).__init__(file, name)` is setting `self.image_data` again using `file.read()`, however file.read() will now return `''` thus `self.image_data` is always `''`\n\nI found this when I was writing a custom placeholder image class that reads from `STATIC` rather than `MEDIA`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/12", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/12/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/12/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/12", "id": 73669064, "node_id": "MDU6SXNzdWU3MzY2OTA2NA==", "number": 12, "title": "Add to Django Packages", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-06T16:21:19Z", "updated_at": "2015-05-07T18:23:36Z", "closed_at": "2015-05-07T18:23:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Probably be worth adding this to the [Django REST framework grid](https://www.djangopackages.com/grids/g/django-rest-framework/) on Django Packages.\n\nAlso perhaps adding a link from the REST framework docs someplace?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/11", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/11/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/11/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/11", "id": 68634784, "node_id": "MDU6SXNzdWU2ODYzNDc4NA==", "number": 11, "title": "Absolute urls in Django REST Framework serialzer", "user": {"login": "sebastibe", "id": 208512, "node_id": "MDQ6VXNlcjIwODUxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/208512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebastibe", "html_url": "https://github.com/sebastibe", "followers_url": "https://api.github.com/users/sebastibe/followers", "following_url": "https://api.github.com/users/sebastibe/following{/other_user}", "gists_url": "https://api.github.com/users/sebastibe/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebastibe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebastibe/subscriptions", "organizations_url": "https://api.github.com/users/sebastibe/orgs", "repos_url": "https://api.github.com/users/sebastibe/repos", "events_url": "https://api.github.com/users/sebastibe/events{/privacy}", "received_events_url": "https://api.github.com/users/sebastibe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "respondcreate", "id": 843929, "node_id": "MDQ6VXNlcjg0MzkyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/843929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/respondcreate", "html_url": "https://github.com/respondcreate", "followers_url": "https://api.github.com/users/respondcreate/followers", "following_url": "https://api.github.com/users/respondcreate/following{/other_user}", "gists_url": "https://api.github.com/users/respondcreate/gists{/gist_id}", "starred_url": "https://api.github.com/users/respondcreate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/respondcreate/subscriptions", "organizations_url": "https://api.github.com/users/respondcreate/orgs", "repos_url": "https://api.github.com/users/respondcreate/repos", "events_url": "https://api.github.com/users/respondcreate/events{/privacy}", "received_events_url": "https://api.github.com/users/respondcreate/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "respondcreate", "id": 843929, "node_id": "MDQ6VXNlcjg0MzkyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/843929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/respondcreate", "html_url": "https://github.com/respondcreate", "followers_url": "https://api.github.com/users/respondcreate/followers", "following_url": "https://api.github.com/users/respondcreate/following{/other_user}", "gists_url": "https://api.github.com/users/respondcreate/gists{/gist_id}", "starred_url": "https://api.github.com/users/respondcreate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/respondcreate/subscriptions", "organizations_url": "https://api.github.com/users/respondcreate/orgs", "repos_url": "https://api.github.com/users/respondcreate/repos", "events_url": "https://api.github.com/users/respondcreate/events{/privacy}", "received_events_url": "https://api.github.com/users/respondcreate/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2015-04-15T10:02:10Z", "updated_at": "2019-07-15T16:39:47Z", "closed_at": "2015-04-27T19:45:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI'm trying to find how to use absolute urls in the DRF serializer but I'm not sure it's possible today. Could you guide me on how I should implement this feature? I'm guessing it will become especially important when it will be possible to store on other storage services such as S3.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/10", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/10/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/10/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/10", "id": 64820283, "node_id": "MDU6SXNzdWU2NDgyMDI4Mw==", "number": 10, "title": "Admin PPOI click widget broken in Firefox", "user": {"login": "gregorvolkmann", "id": 1497977, "node_id": "MDQ6VXNlcjE0OTc5Nzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1497977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregorvolkmann", "html_url": "https://github.com/gregorvolkmann", "followers_url": "https://api.github.com/users/gregorvolkmann/followers", "following_url": "https://api.github.com/users/gregorvolkmann/following{/other_user}", "gists_url": "https://api.github.com/users/gregorvolkmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregorvolkmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregorvolkmann/subscriptions", "organizations_url": "https://api.github.com/users/gregorvolkmann/orgs", "repos_url": "https://api.github.com/users/gregorvolkmann/repos", "events_url": "https://api.github.com/users/gregorvolkmann/events{/privacy}", "received_events_url": "https://api.github.com/users/gregorvolkmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-03-27T18:12:27Z", "updated_at": "2015-04-02T18:23:29Z", "closed_at": "2015-04-02T18:21:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I edit an object which uses the VersatileImageField plus the ppoi feature, the red square is not editable in Firefox. When I click on an object in the listView, the red square is first positioned in the center of the image. When I reload the editView, the square is positioned in the upper left corner.\n\nI cleared the browser cache and checked the browsers console for errors.\n\nWith Chrome the widget works\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/9", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/9/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/9/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/9", "id": 64818804, "node_id": "MDU6SXNzdWU2NDgxODgwNA==", "number": 9, "title": "ValueError in django/forms/fields.py when editing an Object that uses VersatileImageField", "user": {"login": "gregorvolkmann", "id": 1497977, "node_id": "MDQ6VXNlcjE0OTc5Nzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1497977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregorvolkmann", "html_url": "https://github.com/gregorvolkmann", "followers_url": "https://api.github.com/users/gregorvolkmann/followers", "following_url": "https://api.github.com/users/gregorvolkmann/following{/other_user}", "gists_url": "https://api.github.com/users/gregorvolkmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregorvolkmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregorvolkmann/subscriptions", "organizations_url": "https://api.github.com/users/gregorvolkmann/orgs", "repos_url": "https://api.github.com/users/gregorvolkmann/repos", "events_url": "https://api.github.com/users/gregorvolkmann/events{/privacy}", "received_events_url": "https://api.github.com/users/gregorvolkmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-03-27T18:02:46Z", "updated_at": "2015-04-06T17:51:02Z", "closed_at": "2015-04-02T18:21:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Django raises an ValueError when I edit an object which uses the VersatileImageField.\nCreating the object is no problem.\nWhether the VersatileImageField uses a ppoi or not does not matter.\nSwitching back to the default ImageField solves the problem.\nI also removed the cache settings in `VERSATILEIMAGEFIELD_SETTINGS` (does that actually deactivate the cache?)\n\nDjango Version: 1.7\nPython Version: 2.7.6\nInstalled Applications:\n\n```\n('django.contrib.admin',\n 'django.contrib.auth',\n 'django.contrib.contenttypes',\n 'django.contrib.sessions',\n 'django.contrib.messages',\n 'django.contrib.staticfiles',\n 'core',\n 'versatileimagefield')\n```\n\nInstalled Middleware:\n\n```\n('django.contrib.sessions.middleware.SessionMiddleware',\n 'django.middleware.common.CommonMiddleware',\n 'django.middleware.csrf.CsrfViewMiddleware',\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\n 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\n 'django.contrib.messages.middleware.MessageMiddleware',\n 'django.middleware.clickjacking.XFrameOptionsMiddleware')\n```\n\nTraceback:\n\n```\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/core/handlers/base.py\" in get_response\n  111.                     response = wrapped_callback(request, *callback_args, **callback_kwargs)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/contrib/admin/options.py\" in wrapper\n  567.                 return self.admin_site.admin_view(view)(*args, **kwargs)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/utils/decorators.py\" in _wrapped_view\n  105.                     response = view_func(request, *args, **kwargs)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/views/decorators/cache.py\" in _wrapped_view_func\n  52.         response = view_func(request, *args, **kwargs)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/contrib/admin/sites.py\" in inner\n  204.             return view(request, *args, **kwargs)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/contrib/admin/options.py\" in change_view\n  1440.         return self.changeform_view(request, object_id, form_url, extra_context)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/utils/decorators.py\" in _wrapper\n  29.             return bound_func(*args, **kwargs)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/utils/decorators.py\" in _wrapped_view\n  105.                     response = view_func(request, *args, **kwargs)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/utils/decorators.py\" in bound_func\n  25.                 return func.__get__(self, type(self))(*args2, **kwargs2)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/db/transaction.py\" in inner\n  394.                 return func(*args, **kwargs)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/contrib/admin/options.py\" in changeform_view\n  1394.                     change_message = self.construct_change_message(request, form, formsets)\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/contrib/admin/options.py\" in construct_change_message\n  972.         if form.changed_data:\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/forms/forms.py\" in changed_data\n  440.                 elif field._has_changed(initial_value, data_value):\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/forms/fields.py\" in _has_changed\n  1082.             if field._has_changed(field.to_python(initial), data):\nFile \"/Users/Gregor/Projekte/adClouds/www/venv/lib/python2.7/site-packages/django/forms/fields.py\" in to_python\n  652.                 file = BytesIO(data.read())\n\nException Type: ValueError at /admin/core/cinema/1/\nException Value: I/O operation on closed file\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/8", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/8/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/8/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/8", "id": 60661644, "node_id": "MDU6SXNzdWU2MDY2MTY0NA==", "number": 8, "title": "Admin 'PPOI click widget' fails intermittently", "user": {"login": "respondcreate", "id": 843929, "node_id": "MDQ6VXNlcjg0MzkyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/843929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/respondcreate", "html_url": "https://github.com/respondcreate", "followers_url": "https://api.github.com/users/respondcreate/followers", "following_url": "https://api.github.com/users/respondcreate/following{/other_user}", "gists_url": "https://api.github.com/users/respondcreate/gists{/gist_id}", "starred_url": "https://api.github.com/users/respondcreate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/respondcreate/subscriptions", "organizations_url": "https://api.github.com/users/respondcreate/orgs", "repos_url": "https://api.github.com/users/respondcreate/repos", "events_url": "https://api.github.com/users/respondcreate/events{/privacy}", "received_events_url": "https://api.github.com/users/respondcreate/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-03-11T13:56:15Z", "updated_at": "2015-03-11T16:30:40Z", "closed_at": "2015-03-11T16:30:40Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The admin widget intermittently fails to load correctly, displaying the red square in the top-right corner and not allowing the user to click anywhere on the image (to set an image's PPOI value).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/7", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/7/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/7/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/7", "id": 58524673, "node_id": "MDU6SXNzdWU1ODUyNDY3Mw==", "number": 7, "title": "ValidationError when saving: (0.5,0.5) is in invalid ppoi", "user": {"login": "Bartvds", "id": 685984, "node_id": "MDQ6VXNlcjY4NTk4NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/685984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartvds", "html_url": "https://github.com/Bartvds", "followers_url": "https://api.github.com/users/Bartvds/followers", "following_url": "https://api.github.com/users/Bartvds/following{/other_user}", "gists_url": "https://api.github.com/users/Bartvds/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartvds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartvds/subscriptions", "organizations_url": "https://api.github.com/users/Bartvds/orgs", "repos_url": "https://api.github.com/users/Bartvds/repos", "events_url": "https://api.github.com/users/Bartvds/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartvds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-22T22:47:09Z", "updated_at": "2015-02-24T12:09:08Z", "closed_at": "2015-02-24T12:03:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get this ValidationError when I try to use the code from the PPOIField tutorial.\n\nThe weird thing is I can upload an image, and it shows up in the widget as expected. Then I save again (with or without changing anything) and then it throws this error.\n\nNote my admin uses django-suit, but I'd think it doesn't interfere. (I just tried versatileimagefield\nlate as experiment, I'll look into it next time)\n\n```\nValidationError at /dashboard/content/image/2/\n[\"(0.5,0.5) is in invalid ppoi. A valid ppoi must provide two coordinates, one for the x axis and one for the y, where both values are between 0 and 1. You may pass it as either a two-position tuple like this: (0.5,0.5) or as a string where the two values are separated by an 'x' like this: '0.5x0.5'.\"]\n```\n\nStack:\n\n```\nTraceback:\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/core/handlers/base.py\" in get_response\n  111.                     response = wrapped_callback(request, *callback_args, **callback_kwargs)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/contrib/admin/options.py\" in wrapper\n  583.                 return self.admin_site.admin_view(view)(*args, **kwargs)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/utils/decorators.py\" in _wrapped_view\n  105.                     response = view_func(request, *args, **kwargs)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/views/decorators/cache.py\" in _wrapped_view_func\n  52.         response = view_func(request, *args, **kwargs)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/contrib/admin/sites.py\" in inner\n  206.             return view(request, *args, **kwargs)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/contrib/admin/options.py\" in change_view\n  1456.         return self.changeform_view(request, object_id, form_url, extra_context)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/utils/decorators.py\" in _wrapper\n  29.             return bound_func(*args, **kwargs)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/utils/decorators.py\" in _wrapped_view\n  105.                     response = view_func(request, *args, **kwargs)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/utils/decorators.py\" in bound_func\n  25.                 return func.__get__(self, type(self))(*args2, **kwargs2)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/db/transaction.py\" in inner\n  394.                 return func(*args, **kwargs)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/contrib/admin/options.py\" in changeform_view\n  1396.             if form.is_valid():\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/forms/forms.py\" in is_valid\n  162.         return self.is_bound and not bool(self.errors)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/forms/forms.py\" in errors\n  154.             self.full_clean()\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/forms/forms.py\" in full_clean\n  355.         self._post_clean()\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/forms/models.py\" in _post_clean\n  406.         self.instance = construct_instance(self, self.instance, opts.fields, opts.exclude)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/forms/models.py\" in construct_instance\n  60.             f.save_form_data(instance, cleaned_data[f.name])\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/db/models/fields/__init__.py\" in save_form_data\n  804.         setattr(instance, self.name, data)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/django/db/models/fields/subclassing.py\" in __set__\n  37.         obj.__dict__[self.field.name] = self.field.to_python(value)\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/versatileimagefield/fields.py\" in to_python\n  171.             value, return_converted_tuple=True\nFile \"/home/vagrant/.virtualenvs/my-project/lib/python3.4/site-packages/versatileimagefield/validators.py\" in validate_ppoi\n  72.             code='invalid_ppoi'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/6", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/6/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/6/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/6", "id": 55686353, "node_id": "MDU6SXNzdWU1NTY4NjM1Mw==", "number": 6, "title": "install fails with pip 6+", "user": {"login": "vikrant-fueled", "id": 5070708, "node_id": "MDQ6VXNlcjUwNzA3MDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5070708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vikrant-fueled", "html_url": "https://github.com/vikrant-fueled", "followers_url": "https://api.github.com/users/vikrant-fueled/followers", "following_url": "https://api.github.com/users/vikrant-fueled/following{/other_user}", "gists_url": "https://api.github.com/users/vikrant-fueled/gists{/gist_id}", "starred_url": "https://api.github.com/users/vikrant-fueled/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vikrant-fueled/subscriptions", "organizations_url": "https://api.github.com/users/vikrant-fueled/orgs", "repos_url": "https://api.github.com/users/vikrant-fueled/repos", "events_url": "https://api.github.com/users/vikrant-fueled/events{/privacy}", "received_events_url": "https://api.github.com/users/vikrant-fueled/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-27T22:46:33Z", "updated_at": "2015-01-27T23:49:22Z", "closed_at": "2015-01-27T23:49:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "installing django versatile image field with pip 6+ raises the following error\n\n```\nCollecting django-versatileimagefield\n  Using cached django-versatileimagefield-0.5.tar.gz\n    Traceback (most recent call last):\n      File \"<string>\", line 20, in <module>\n      File \"/var/folders/vc/7wgsmmhd2xl2v5djtg7m74n00000gn/T/pip-build-m_GYdH/django-versatileimagefield/setup.py\", line 22, in <module>\n        for ir in parse_requirements('requirements.txt')\n      File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pip-6.0.3-py2.7.egg/pip/req/req_file.py\", line 19, in parse_requirements\n        \"parse_requirements() missing 1 required keyword argument: \"\n    TypeError: parse_requirements() missing 1 required keyword argument: 'session'\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n\n      File \"<string>\", line 20, in <module>\n\n      File \"/var/folders/vc/7wgsmmhd2xl2v5djtg7m74n00000gn/T/pip-build-m_GYdH/django-versatileimagefield/setup.py\", line 22, in <module>\n\n        for ir in parse_requirements('requirements.txt')\n\n      File \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pip-6.0.3-py2.7.egg/pip/req/req_file.py\", line 19, in parse_requirements\n\n        \"parse_requirements() missing 1 required keyword argument: \"\n\n    TypeError: parse_requirements() missing 1 required keyword argument: 'session'\n\n    ----------------------------------------\n    Command \"python setup.py egg_info\" failed with error code 1 in /var/folders/vc/7wgsmmhd2xl2v5djtg7m74n00000gn/T/pip-build-m_GYdH/django-versatileimagefieldd keyword argument: 'session'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/4", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/4/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/4/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/4", "id": 52954871, "node_id": "MDU6SXNzdWU1Mjk1NDg3MQ==", "number": 4, "title": "pip install fails for 0.3", "user": {"login": "theskumar", "id": 236356, "node_id": "MDQ6VXNlcjIzNjM1Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/236356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theskumar", "html_url": "https://github.com/theskumar", "followers_url": "https://api.github.com/users/theskumar/followers", "following_url": "https://api.github.com/users/theskumar/following{/other_user}", "gists_url": "https://api.github.com/users/theskumar/gists{/gist_id}", "starred_url": "https://api.github.com/users/theskumar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theskumar/subscriptions", "organizations_url": "https://api.github.com/users/theskumar/orgs", "repos_url": "https://api.github.com/users/theskumar/repos", "events_url": "https://api.github.com/users/theskumar/events{/privacy}", "received_events_url": "https://api.github.com/users/theskumar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-12-27T11:20:24Z", "updated_at": "2014-12-27T13:04:59Z", "closed_at": "2014-12-27T13:01:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here is my installation error log for 0.3. Seems something to do with `requirements.txt'`. Installation succeeds for v0.2.1.\n\n```\nDownloading/unpacking django-versatileimagefield==0.3 (from -r requirements/common.txt (line 20))\n  Using download cache from /Users/theskumar/Library/Caches/pip-downloads/https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2Fd%2Fdjango-versatileimagefield%2Fdjango-versatileimagefield-0.3.tar.gz\n  Running setup.py (path:/Users/theskumar/work/pr/myproject/venv/build/django-versatileimagefield/setup.py) egg_info for package django-versatileimagefield\n    Traceback (most recent call last):\n      File \"<string>\", line 17, in <module>\n      File \"/Users/theskumar/work/pr/myproject/venv/build/django-versatileimagefield/setup.py\", line 22, in <module>\n        for ir in parse_requirements('requirements.txt')\n      File \"/Users/theskumar/work/pr/myproject/venv/lib/python2.7/site-packages/pip/req.py\", line 1546, in parse_requirements\n        session=session,\n      File \"/Users/theskumar/work/pr/myproject/venv/lib/python2.7/site-packages/pip/download.py\", line 278, in get_file_content\n        raise InstallationError('Could not open requirements file: %s' % str(e))\n    pip.exceptions.InstallationError: Could not open requirements file: [Errno 2] No such file or directory: 'requirements.txt'\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n\n  File \"<string>\", line 17, in <module>\n\n  File \"/Users/theskumar/work/pr/myproject/venv/build/django-versatileimagefield/setup.py\", line 22, in <module>\n\n    for ir in parse_requirements('requirements.txt')\n\n  File \"/Users/theskumar/work/pr/myproject/venv/lib/python2.7/site-packages/pip/req.py\", line 1546, in parse_requirements\n\n    session=session,\n\n  File \"/Users/theskumar/work/pr/myproject/venv/lib/python2.7/site-packages/pip/download.py\", line 278, in get_file_content\n\n    raise InstallationError('Could not open requirements file: %s' % str(e))\n\npip.exceptions.InstallationError: Could not open requirements file: [Errno 2] No such file or directory: 'requirements.txt'\n\n----------------------------------------\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/2", "repository_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield", "labels_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/2/comments", "events_url": "https://api.github.com/repos/respondcreate/django-versatileimagefield/issues/2/events", "html_url": "https://github.com/respondcreate/django-versatileimagefield/issues/2", "id": 50932735, "node_id": "MDU6SXNzdWU1MDkzMjczNQ==", "number": 2, "title": "Question: Python 3 support?", "user": {"login": "saurabh-fueled", "id": 3982193, "node_id": "MDQ6VXNlcjM5ODIxOTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3982193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saurabh-fueled", "html_url": "https://github.com/saurabh-fueled", "followers_url": "https://api.github.com/users/saurabh-fueled/followers", "following_url": "https://api.github.com/users/saurabh-fueled/following{/other_user}", "gists_url": "https://api.github.com/users/saurabh-fueled/gists{/gist_id}", "starred_url": "https://api.github.com/users/saurabh-fueled/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saurabh-fueled/subscriptions", "organizations_url": "https://api.github.com/users/saurabh-fueled/orgs", "repos_url": "https://api.github.com/users/saurabh-fueled/repos", "events_url": "https://api.github.com/users/saurabh-fueled/events{/privacy}", "received_events_url": "https://api.github.com/users/saurabh-fueled/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-12-04T06:20:00Z", "updated_at": "2015-01-28T09:56:53Z", "closed_at": "2015-01-20T21:39:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey Guys,\n\nWould like know if python 3 support is something that is in the pipeline\n\nCheers,\n", "performed_via_github_app": null, "score": 1.0}]}