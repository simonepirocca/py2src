{"total_count": 128, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/386", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/386/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/386/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/386/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/386", "id": 663791999, "node_id": "MDU6SXNzdWU2NjM3OTE5OTk=", "number": 386, "title": "Optimal Penalizer Coef", "user": {"login": "martingg92", "id": 42093381, "node_id": "MDQ6VXNlcjQyMDkzMzgx", "avatar_url": "https://avatars2.githubusercontent.com/u/42093381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingg92", "html_url": "https://github.com/martingg92", "followers_url": "https://api.github.com/users/martingg92/followers", "following_url": "https://api.github.com/users/martingg92/following{/other_user}", "gists_url": "https://api.github.com/users/martingg92/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingg92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingg92/subscriptions", "organizations_url": "https://api.github.com/users/martingg92/orgs", "repos_url": "https://api.github.com/users/martingg92/repos", "events_url": "https://api.github.com/users/martingg92/events{/privacy}", "received_events_url": "https://api.github.com/users/martingg92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-22T14:08:58Z", "updated_at": "2020-07-22T14:10:11Z", "closed_at": "2020-07-22T14:09:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone, somebody knows if there is a way to find the optimal penalizer coef ?? something like a gridsearch ???\r\n\r\nI know that there is a way plotting the gamma distribution, but i have the doubt if there is a numerical combination. I have tried with differerent numbers of penalizer coef and studying the population mean, p, q, v and the negative log likehood and still dont find an answer. \r\n\r\nHere is an example.\r\n\r\n![image](https://user-images.githubusercontent.com/42093381/88186143-d1cb8b80-cc02-11ea-9d02-689b617b3b82.png)\r\n\r\n\r\nIn my context, the  best CLV (in terms of magnitude) is when i use a penalizer coef of 0.09, but i want to program a way when we use this method to find an optimal. \r\n\r\nThanks!!! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/378", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/378/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/378/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/378/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/378", "id": 641870622, "node_id": "MDU6SXNzdWU2NDE4NzA2MjI=", "number": 378, "title": " ValueError : There exist non-positive values in the monetary_value vector.", "user": {"login": "khayatrayen", "id": 31362688, "node_id": "MDQ6VXNlcjMxMzYyNjg4", "avatar_url": "https://avatars2.githubusercontent.com/u/31362688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khayatrayen", "html_url": "https://github.com/khayatrayen", "followers_url": "https://api.github.com/users/khayatrayen/followers", "following_url": "https://api.github.com/users/khayatrayen/following{/other_user}", "gists_url": "https://api.github.com/users/khayatrayen/gists{/gist_id}", "starred_url": "https://api.github.com/users/khayatrayen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khayatrayen/subscriptions", "organizations_url": "https://api.github.com/users/khayatrayen/orgs", "repos_url": "https://api.github.com/users/khayatrayen/repos", "events_url": "https://api.github.com/users/khayatrayen/events{/privacy}", "received_events_url": "https://api.github.com/users/khayatrayen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-19T10:29:31Z", "updated_at": "2020-06-19T12:10:47Z", "closed_at": "2020-06-19T12:10:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try ggf function from GammaGammaFitter\r\n\r\n`ggf.fit(rfm_MNT['frequency'],\r\n        \r\n\r\nrfm_MNT['monetary_value'])\r\n\r\nprint(ggf)`\r\n\r\nThe ERROR : There exist non-positive values in the monetary_value vector.\r\n\r\n**what is the problem on my monetary_value variable ?** \r\n\r\nnote that frequency and monetary_value  are the output of summary_data_from_transaction_data function. \r\n\r\nThank you  in advance \r\n\r\nBest regards\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/373", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/373/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/373/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/373/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/373", "id": 624711710, "node_id": "MDU6SXNzdWU2MjQ3MTE3MTA=", "number": 373, "title": "Deprecation of .ix indexer in Pandas", "user": {"login": "finlytics-hub", "id": 63492727, "node_id": "MDQ6VXNlcjYzNDkyNzI3", "avatar_url": "https://avatars0.githubusercontent.com/u/63492727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finlytics-hub", "html_url": "https://github.com/finlytics-hub", "followers_url": "https://api.github.com/users/finlytics-hub/followers", "following_url": "https://api.github.com/users/finlytics-hub/following{/other_user}", "gists_url": "https://api.github.com/users/finlytics-hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/finlytics-hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finlytics-hub/subscriptions", "organizations_url": "https://api.github.com/users/finlytics-hub/orgs", "repos_url": "https://api.github.com/users/finlytics-hub/repos", "events_url": "https://api.github.com/users/finlytics-hub/events{/privacy}", "received_events_url": "https://api.github.com/users/finlytics-hub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-26T08:50:09Z", "updated_at": "2020-05-26T10:39:00Z", "closed_at": "2020-05-26T10:39:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI receive the following error when using the summary_data_from_transaction_data function:\r\nAttributeError: 'DataFrame' object has no attribute 'ix'\r\n\r\nI believe this is because IX indexing was deprecated starting from pandas 0.20.0 and removed in pandas 1.0.0. \r\n\r\nI believe I would need to use an older pandas version for the time being but is there any possibility updating the function to use .iloc instead of .ix?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/363", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/363/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/363/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/363", "id": 577738840, "node_id": "MDU6SXNzdWU1Nzc3Mzg4NDA=", "number": 363, "title": "Piecewise Exponential cure model with random forest probabilities", "user": {"login": "SpirosFot", "id": 58300516, "node_id": "MDQ6VXNlcjU4MzAwNTE2", "avatar_url": "https://avatars0.githubusercontent.com/u/58300516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SpirosFot", "html_url": "https://github.com/SpirosFot", "followers_url": "https://api.github.com/users/SpirosFot/followers", "following_url": "https://api.github.com/users/SpirosFot/following{/other_user}", "gists_url": "https://api.github.com/users/SpirosFot/gists{/gist_id}", "starred_url": "https://api.github.com/users/SpirosFot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SpirosFot/subscriptions", "organizations_url": "https://api.github.com/users/SpirosFot/orgs", "repos_url": "https://api.github.com/users/SpirosFot/repos", "events_url": "https://api.github.com/users/SpirosFot/events{/privacy}", "received_events_url": "https://api.github.com/users/SpirosFot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1446970546, "node_id": "MDU6TGFiZWwxNDQ2OTcwNTQ2", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/theory", "name": "theory", "color": "cc317c", "default": false, "description": "not really a question about the library, but of the underlying concepts"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-09T08:36:27Z", "updated_at": "2020-03-09T14:46:04Z", "closed_at": "2020-03-09T14:46:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Cameron,\r\n\r\nI would like your guidance regarding the following issue. \r\n\r\nI want to implement a cox like piecewise exponential model with probabilities given not by a logit but by a Random forest.\r\n\r\nHowever I am having trouble understanding how the cumulative hazard function of the PE model should be defined and thus used as a baseline. \r\n\r\nMoreover, while as you have clearly documented for logistic probabilities we can go on like :\r\n\r\n```none\r\np_1 = exp(dot(Xs[\"c_1\"], params[\"c_1\"]))\r\np_2 = exp(dot(Xs[\"c_2\"], params[\"c_2\"]))\r\np_3 = 1\r\np_1 = p_1 / (p_1 + p_2 + p_3)\r\np_2 = p_2/(p_1+p_2+p_3)\r\np_3 = p_3/(p_1+p_2+p_3)\r\n```\r\n\r\nHowever for Random Forests I run into trouble when trying to multiply the conditional survival functions with the Random forest probability dataframe. Any clue on how to circumvent that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/361", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/361/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/361/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/361/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/361", "id": 574426210, "node_id": "MDU6SXNzdWU1NzQ0MjYyMTA=", "number": 361, "title": "t in customer_lifetime_value()", "user": {"login": "ywu-stats", "id": 56888960, "node_id": "MDQ6VXNlcjU2ODg4OTYw", "avatar_url": "https://avatars0.githubusercontent.com/u/56888960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ywu-stats", "html_url": "https://github.com/ywu-stats", "followers_url": "https://api.github.com/users/ywu-stats/followers", "following_url": "https://api.github.com/users/ywu-stats/following{/other_user}", "gists_url": "https://api.github.com/users/ywu-stats/gists{/gist_id}", "starred_url": "https://api.github.com/users/ywu-stats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ywu-stats/subscriptions", "organizations_url": "https://api.github.com/users/ywu-stats/orgs", "repos_url": "https://api.github.com/users/ywu-stats/repos", "events_url": "https://api.github.com/users/ywu-stats/events{/privacy}", "received_events_url": "https://api.github.com/users/ywu-stats/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1446970546, "node_id": "MDU6TGFiZWwxNDQ2OTcwNTQ2", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/theory", "name": "theory", "color": "cc317c", "default": false, "description": "not really a question about the library, but of the underlying concepts"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-03T05:29:49Z", "updated_at": "2020-03-03T11:48:56Z", "closed_at": "2020-03-03T11:48:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does the t has to be in month unit? Can I use days?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/356", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/356/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/356/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/356", "id": 564010204, "node_id": "MDU6SXNzdWU1NjQwMTAyMDQ=", "number": 356, "title": "ModifiedBetaGeoFitter needs predict() method", "user": {"login": "cereusperuv", "id": 48787464, "node_id": "MDQ6VXNlcjQ4Nzg3NDY0", "avatar_url": "https://avatars0.githubusercontent.com/u/48787464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cereusperuv", "html_url": "https://github.com/cereusperuv", "followers_url": "https://api.github.com/users/cereusperuv/followers", "following_url": "https://api.github.com/users/cereusperuv/following{/other_user}", "gists_url": "https://api.github.com/users/cereusperuv/gists{/gist_id}", "starred_url": "https://api.github.com/users/cereusperuv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cereusperuv/subscriptions", "organizations_url": "https://api.github.com/users/cereusperuv/orgs", "repos_url": "https://api.github.com/users/cereusperuv/repos", "events_url": "https://api.github.com/users/cereusperuv/events{/privacy}", "received_events_url": "https://api.github.com/users/cereusperuv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161473689, "node_id": "MDU6TGFiZWwxNjE0NzM2ODk=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": "invalid or off-topic question"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-12T13:45:24Z", "updated_at": "2020-02-13T12:55:05Z", "closed_at": "2020-02-12T13:50:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `predict`-method is not specified in the `fit` method of `ModifiedBetaGeoFitter`. As a result, the `predict` method of `BetaGeoFitter` is used instead when calculating customer lifetime values using `_customer_lifetime_value()` in `utils` or `customer_lifetime_value` function in `GammaGammaFitter`. Hard to spot, found it via `NaN`:s due to negative `log` arguments.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/353", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/353/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/353/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/353", "id": 549449946, "node_id": "MDU6SXNzdWU1NDk0NDk5NDY=", "number": 353, "title": "What is the definition of n_period in BetaGeoBetaBinomFitter.fit?", "user": {"login": "hmikelee", "id": 34959055, "node_id": "MDQ6VXNlcjM0OTU5MDU1", "avatar_url": "https://avatars3.githubusercontent.com/u/34959055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmikelee", "html_url": "https://github.com/hmikelee", "followers_url": "https://api.github.com/users/hmikelee/followers", "following_url": "https://api.github.com/users/hmikelee/following{/other_user}", "gists_url": "https://api.github.com/users/hmikelee/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmikelee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmikelee/subscriptions", "organizations_url": "https://api.github.com/users/hmikelee/orgs", "repos_url": "https://api.github.com/users/hmikelee/repos", "events_url": "https://api.github.com/users/hmikelee/events{/privacy}", "received_events_url": "https://api.github.com/users/hmikelee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-14T09:50:15Z", "updated_at": "2020-01-15T15:51:46Z", "closed_at": "2020-01-15T15:51:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear Sir,\r\n\r\nThank you for your great package, I have applied BG/NBD to different data sets in retail and banking industries with good results. Really appreciate the great work.\r\n\r\nI am now testing to see if BG/BB can provide better results. While preparing the data, I am not sure if the field n_period should be the # of days of the training data set or n_period is the same as T in BetaGeoFitter.fit\r\n\r\nI am not able to find any example online. Your help will be highly appreciated. Thank you very much\r\n\r\nhmikelee", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/350", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/350/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/350/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/350", "id": 547122938, "node_id": "MDU6SXNzdWU1NDcxMjI5Mzg=", "number": 350, "title": "AttributeError: 'BetaGeoFitter' object has no attribute 'summary'/'param_' respectively", "user": {"login": "ObiWanFoley", "id": 46608204, "node_id": "MDQ6VXNlcjQ2NjA4MjA0", "avatar_url": "https://avatars3.githubusercontent.com/u/46608204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ObiWanFoley", "html_url": "https://github.com/ObiWanFoley", "followers_url": "https://api.github.com/users/ObiWanFoley/followers", "following_url": "https://api.github.com/users/ObiWanFoley/following{/other_user}", "gists_url": "https://api.github.com/users/ObiWanFoley/gists{/gist_id}", "starred_url": "https://api.github.com/users/ObiWanFoley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ObiWanFoley/subscriptions", "organizations_url": "https://api.github.com/users/ObiWanFoley/orgs", "repos_url": "https://api.github.com/users/ObiWanFoley/repos", "events_url": "https://api.github.com/users/ObiWanFoley/events{/privacy}", "received_events_url": "https://api.github.com/users/ObiWanFoley/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1447006221, "node_id": "MDU6TGFiZWwxNDQ3MDA2MjIx", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/version%20issues", "name": "version issues", "color": "fbca04", "default": false, "description": "code changing and breaking when versions change and so forth..."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-01-08T21:51:27Z", "updated_at": "2020-01-12T06:42:28Z", "closed_at": "2020-01-12T06:42:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears that for some reason certain attributes are not being \"loaded\" (new to python...likely the incorrect jargon). When making a new LTV notebook and following the quick-start guide I can successfully call `.fit` and print `BetaGeoFitter`. After that the docs reference having access to the attributes `summary` and `param_` however when attempting to call `BetaGeoFitter.summary` and `BetaGeoFitter.param_` I get `AttributeError: 'BetaGeoFitter' object has no attribute 'summary' / 'param_'` respectively.\r\n\r\nRunning dir(BetaGeoFitter) gives me the following:\r\n\r\n```\r\n['__class__',\r\n '__delattr__',\r\n '__dict__',\r\n '__dir__',\r\n '__doc__',\r\n '__eq__',\r\n '__format__',\r\n '__ge__',\r\n '__getattribute__',\r\n '__gt__',\r\n '__hash__',\r\n '__init__',\r\n '__init_subclass__',\r\n '__le__',\r\n '__lt__',\r\n '__module__',\r\n '__ne__',\r\n '__new__',\r\n '__reduce__',\r\n '__reduce_ex__',\r\n '__repr__',\r\n '__setattr__',\r\n '__sizeof__',\r\n '__str__',\r\n '__subclasshook__',\r\n '__weakref__',\r\n '_negative_log_likelihood',\r\n '_unload_params',\r\n 'conditional_expected_number_of_purchases_up_to_time',\r\n 'conditional_probability_alive',\r\n 'conditional_probability_alive_matrix',\r\n 'expected_number_of_purchases_up_to_time',\r\n 'fit',\r\n 'load_model',\r\n 'probability_of_n_purchases_up_to_time',\r\n 'save_model']\r\n```\r\n\r\nof which summay and `param_` are missing. looking at the attributes present, I have no issues calling anything shown here.\r\n\r\nI don't know if this is an issue with `__init__.py` but potentially having a local call to def summary(self) could alleviate the issue?? Like I said... I'm pretty new to Python so I could be way off.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/349", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/349/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/349/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/349", "id": 545339433, "node_id": "MDU6SXNzdWU1NDUzMzk0MzM=", "number": 349, "title": "doubt about bgf.conditional_expected_number_of_purchases_up_to_time return", "user": {"login": "wallacez1", "id": 37086969, "node_id": "MDQ6VXNlcjM3MDg2OTY5", "avatar_url": "https://avatars3.githubusercontent.com/u/37086969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wallacez1", "html_url": "https://github.com/wallacez1", "followers_url": "https://api.github.com/users/wallacez1/followers", "following_url": "https://api.github.com/users/wallacez1/following{/other_user}", "gists_url": "https://api.github.com/users/wallacez1/gists{/gist_id}", "starred_url": "https://api.github.com/users/wallacez1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wallacez1/subscriptions", "organizations_url": "https://api.github.com/users/wallacez1/orgs", "repos_url": "https://api.github.com/users/wallacez1/repos", "events_url": "https://api.github.com/users/wallacez1/events{/privacy}", "received_events_url": "https://api.github.com/users/wallacez1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1446970546, "node_id": "MDU6TGFiZWwxNDQ2OTcwNTQ2", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/theory", "name": "theory", "color": "cc317c", "default": false, "description": "not really a question about the library, but of the underlying concepts"}, {"id": 1447001460, "node_id": "MDU6TGFiZWwxNDQ3MDAxNDYw", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/tutorial", "name": "tutorial", "color": "d4c5f9", "default": false, "description": "poster needs help on how to make something happen"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-04T22:20:16Z", "updated_at": "2020-01-05T23:07:21Z", "closed_at": "2020-01-05T23:07:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the documentation this is the definition of the return to this method.\r\n\r\n> Models expose a method that will predict a customer\u2019s expected purchases in the next period using their history\r\n\r\n\r\nthis number represent how many purchases the customer will make in the period or the probability of the customer of buying on the period?\r\n\r\n![image](https://user-images.githubusercontent.com/37086969/71772271-79af8f00-2f27-11ea-9f6d-45625258ef23.png)\r\n\r\n\r\nim slightly confuse, because if represent the how many purchases, for example: the id **1516** has 0.71 of predict purchases what thats means?, i tought would be a integer number like the customer A will make X purchases on this period.\r\n\r\nthank you so much in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/347", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/347/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/347/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/347", "id": 535447855, "node_id": "MDU6SXNzdWU1MzU0NDc4NTU=", "number": 347, "title": "Unclear how monetary_value is calculated", "user": {"login": "ZhengTzer", "id": 20983125, "node_id": "MDQ6VXNlcjIwOTgzMTI1", "avatar_url": "https://avatars1.githubusercontent.com/u/20983125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZhengTzer", "html_url": "https://github.com/ZhengTzer", "followers_url": "https://api.github.com/users/ZhengTzer/followers", "following_url": "https://api.github.com/users/ZhengTzer/following{/other_user}", "gists_url": "https://api.github.com/users/ZhengTzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZhengTzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZhengTzer/subscriptions", "organizations_url": "https://api.github.com/users/ZhengTzer/orgs", "repos_url": "https://api.github.com/users/ZhengTzer/repos", "events_url": "https://api.github.com/users/ZhengTzer/events{/privacy}", "received_events_url": "https://api.github.com/users/ZhengTzer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1447001460, "node_id": "MDU6TGFiZWwxNDQ3MDAxNDYw", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/tutorial", "name": "tutorial", "color": "d4c5f9", "default": false, "description": "poster needs help on how to make something happen"}, {"id": 1447308925, "node_id": "MDU6TGFiZWwxNDQ3MzA4OTI1", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/use%20case", "name": "use case", "color": "bfdadc", "default": false, "description": "help with a use case scenario"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-10T02:13:26Z", "updated_at": "2020-06-10T14:42:28Z", "closed_at": "2019-12-20T04:12:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had read through the documentation which stated:\r\n\r\n```\r\nThis is equal to the sum of all a customer's purchases divided by the total number of purchases...\r\n```\r\n\r\nSQL:\r\n\r\n```sql\r\nAVG(total_price) as monetary_value,\r\n```\r\n\r\nI try to check back with my own data, `frequency = 3`, it's correct:\r\n\r\n```python\r\ndata = [[236,'john'], [118,'john'], [236,'john'], [99,'john']]\r\ndf = pd.DataFrame(data, columns = ['sales', 'name'])\r\n```\r\n\r\nThe average should be `172.25`, but why the `monetary_value` in `summary_data_from_transaction_data` shows `190.33`. Where does `190.33` come from?\r\n\r\nThanks a lot", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/340", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/340/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/340/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/340/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/340", "id": 525348833, "node_id": "MDU6SXNzdWU1MjUzNDg4MzM=", "number": 340, "title": "In the documentation, is the predicted_purchases example the probability of a purchase in the next period?", "user": {"login": "jnguyen32", "id": 15060953, "node_id": "MDQ6VXNlcjE1MDYwOTUz", "avatar_url": "https://avatars3.githubusercontent.com/u/15060953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnguyen32", "html_url": "https://github.com/jnguyen32", "followers_url": "https://api.github.com/users/jnguyen32/followers", "following_url": "https://api.github.com/users/jnguyen32/following{/other_user}", "gists_url": "https://api.github.com/users/jnguyen32/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnguyen32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnguyen32/subscriptions", "organizations_url": "https://api.github.com/users/jnguyen32/orgs", "repos_url": "https://api.github.com/users/jnguyen32/repos", "events_url": "https://api.github.com/users/jnguyen32/events{/privacy}", "received_events_url": "https://api.github.com/users/jnguyen32/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1447001460, "node_id": "MDU6TGFiZWwxNDQ3MDAxNDYw", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/tutorial", "name": "tutorial", "color": "d4c5f9", "default": false, "description": "poster needs help on how to make something happen"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-20T00:35:43Z", "updated_at": "2019-11-20T13:36:06Z", "closed_at": "2019-11-20T13:34:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nt = 1\r\ndata['predicted_purchases'] = bgf.conditional_expected_number_of_purchases_up_to_time(\r\n    t, \r\n    data['frequency'], \r\n    data['recency'], \r\n    data['T']\r\n)\r\ndata.sort_values(by='predicted_purchases').tail(5)\r\n\"\"\"\r\n       frequency  recency      T        predicted_purchases\r\nID\r\n509   18          35.14        35.86    0.424877\r\n841   19          34.00        34.14    0.474738\r\n1981  17          28.43        28.86    0.486526\r\n157   29          37.71        38.00    0.662396\r\n1516  26          30.86        31.00    0.710623\r\n\"\"\"\r\n```\r\n\r\nIn this example from the documentation, `predicted_purchases` here is the probability of a customer making a purchase in the next period?\r\n\r\nFor example: ID #1516, the customer who has made 26 purchases, is the model suggesting that they have a 71% probability of making a purchase in the next 1 `t`?\r\n\r\nWhat is `t` here? 1 day?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/339", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/339/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/339/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/339", "id": 525033992, "node_id": "MDU6SXNzdWU1MjUwMzM5OTI=", "number": 339, "title": "How do you interpret the BGF params ?", "user": {"login": "wallacez1", "id": 37086969, "node_id": "MDQ6VXNlcjM3MDg2OTY5", "avatar_url": "https://avatars3.githubusercontent.com/u/37086969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wallacez1", "html_url": "https://github.com/wallacez1", "followers_url": "https://api.github.com/users/wallacez1/followers", "following_url": "https://api.github.com/users/wallacez1/following{/other_user}", "gists_url": "https://api.github.com/users/wallacez1/gists{/gist_id}", "starred_url": "https://api.github.com/users/wallacez1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wallacez1/subscriptions", "organizations_url": "https://api.github.com/users/wallacez1/orgs", "repos_url": "https://api.github.com/users/wallacez1/repos", "events_url": "https://api.github.com/users/wallacez1/events{/privacy}", "received_events_url": "https://api.github.com/users/wallacez1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1447001460, "node_id": "MDU6TGFiZWwxNDQ3MDAxNDYw", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/tutorial", "name": "tutorial", "color": "d4c5f9", "default": false, "description": "poster needs help on how to make something happen"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-19T14:11:05Z", "updated_at": "2019-11-19T14:14:39Z", "closed_at": "2019-11-19T14:11:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do you interpret the BGF params a, alpha, r, b \u2013 do they indicate the \u2018goodness\u2019 of the model\u2019s fit?\r\n\r\n\r\nThanks again for the awesome package!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/328", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/328/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/328/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/328", "id": 511265491, "node_id": "MDU6SXNzdWU1MTEyNjU0OTE=", "number": 328, "title": "ggf.customer_lifetime_value function runs very slow", "user": {"login": "HardikLGupta", "id": 22710609, "node_id": "MDQ6VXNlcjIyNzEwNjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/22710609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HardikLGupta", "html_url": "https://github.com/HardikLGupta", "followers_url": "https://api.github.com/users/HardikLGupta/followers", "following_url": "https://api.github.com/users/HardikLGupta/following{/other_user}", "gists_url": "https://api.github.com/users/HardikLGupta/gists{/gist_id}", "starred_url": "https://api.github.com/users/HardikLGupta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HardikLGupta/subscriptions", "organizations_url": "https://api.github.com/users/HardikLGupta/orgs", "repos_url": "https://api.github.com/users/HardikLGupta/repos", "events_url": "https://api.github.com/users/HardikLGupta/events{/privacy}", "received_events_url": "https://api.github.com/users/HardikLGupta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1447029529, "node_id": "MDU6TGFiZWwxNDQ3MDI5NTI5", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/incomplete%20description", "name": "incomplete description", "color": "1d76db", "default": false, "description": "the author needs to provide more information to allow for help"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-23T11:39:13Z", "updated_at": "2019-11-18T23:54:20Z", "closed_at": "2019-11-18T23:54:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using this function to calculate CLV for million+ users, however the function run very slow. How can I improve the performance\r\n\r\nI am using BG/NBD model as input", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/319", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/319/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/319/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/319/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/319", "id": 496006285, "node_id": "MDU6SXNzdWU0OTYwMDYyODU=", "number": 319, "title": "Fix plot_dropout_rate_heterogeneity Docstring", "user": {"login": "shaddyab", "id": 20774257, "node_id": "MDQ6VXNlcjIwNzc0MjU3", "avatar_url": "https://avatars3.githubusercontent.com/u/20774257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shaddyab", "html_url": "https://github.com/shaddyab", "followers_url": "https://api.github.com/users/shaddyab/followers", "following_url": "https://api.github.com/users/shaddyab/following{/other_user}", "gists_url": "https://api.github.com/users/shaddyab/gists{/gist_id}", "starred_url": "https://api.github.com/users/shaddyab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shaddyab/subscriptions", "organizations_url": "https://api.github.com/users/shaddyab/orgs", "repos_url": "https://api.github.com/users/shaddyab/repos", "events_url": "https://api.github.com/users/shaddyab/events{/privacy}", "received_events_url": "https://api.github.com/users/shaddyab/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669283870, "node_id": "MDU6TGFiZWw2NjkyODM4NzA=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": "about code documentation or the readthedocs"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-19T20:18:25Z", "updated_at": "2019-09-20T11:04:24Z", "closed_at": "2019-09-20T11:04:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "The Docstring should read\r\n\r\n> Plot the estimated beta distribution of p.\r\n\r\ninstead of\r\n\r\n> Plot the estimated gamma distribution of p.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/305", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/305/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/305/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/305", "id": 473374131, "node_id": "MDU6SXNzdWU0NzMzNzQxMzE=", "number": 305, "title": "Import error: No module named 'lifetimes'", "user": {"login": "maria-ferreira-olx", "id": 45977988, "node_id": "MDQ6VXNlcjQ1OTc3OTg4", "avatar_url": "https://avatars0.githubusercontent.com/u/45977988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maria-ferreira-olx", "html_url": "https://github.com/maria-ferreira-olx", "followers_url": "https://api.github.com/users/maria-ferreira-olx/followers", "following_url": "https://api.github.com/users/maria-ferreira-olx/following{/other_user}", "gists_url": "https://api.github.com/users/maria-ferreira-olx/gists{/gist_id}", "starred_url": "https://api.github.com/users/maria-ferreira-olx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maria-ferreira-olx/subscriptions", "organizations_url": "https://api.github.com/users/maria-ferreira-olx/orgs", "repos_url": "https://api.github.com/users/maria-ferreira-olx/repos", "events_url": "https://api.github.com/users/maria-ferreira-olx/events{/privacy}", "received_events_url": "https://api.github.com/users/maria-ferreira-olx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1470488210, "node_id": "MDU6TGFiZWwxNDcwNDg4MjEw", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/installation%20issues", "name": "installation issues", "color": "f9d0c4", "default": false, "description": "installation issues, might not be the user's nor the developer's fault"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-26T14:00:51Z", "updated_at": "2019-07-26T15:39:19Z", "closed_at": "2019-07-26T15:39:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I fitted a model last week and it worked perfectly, but now this error appears:\r\n\r\n```\r\nNo module named 'lifetimes'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/294", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/294/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/294/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/294/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/294", "id": 465192431, "node_id": "MDU6SXNzdWU0NjUxOTI0MzE=", "number": 294, "title": "Do Non-Contractual RFM Models deal well with Supermarket Data?", "user": {"login": "psygo", "id": 11823725, "node_id": "MDQ6VXNlcjExODIzNzI1", "avatar_url": "https://avatars3.githubusercontent.com/u/11823725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psygo", "html_url": "https://github.com/psygo", "followers_url": "https://api.github.com/users/psygo/followers", "following_url": "https://api.github.com/users/psygo/following{/other_user}", "gists_url": "https://api.github.com/users/psygo/gists{/gist_id}", "starred_url": "https://api.github.com/users/psygo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psygo/subscriptions", "organizations_url": "https://api.github.com/users/psygo/orgs", "repos_url": "https://api.github.com/users/psygo/repos", "events_url": "https://api.github.com/users/psygo/events{/privacy}", "received_events_url": "https://api.github.com/users/psygo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669283870, "node_id": "MDU6TGFiZWw2NjkyODM4NzA=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": "about code documentation or the readthedocs"}, {"id": 1446970546, "node_id": "MDU6TGFiZWwxNDQ2OTcwNTQ2", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/theory", "name": "theory", "color": "cc317c", "default": false, "description": "not really a question about the library, but of the underlying concepts"}], "state": "closed", "locked": false, "assignee": {"login": "psygo", "id": 11823725, "node_id": "MDQ6VXNlcjExODIzNzI1", "avatar_url": "https://avatars3.githubusercontent.com/u/11823725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psygo", "html_url": "https://github.com/psygo", "followers_url": "https://api.github.com/users/psygo/followers", "following_url": "https://api.github.com/users/psygo/following{/other_user}", "gists_url": "https://api.github.com/users/psygo/gists{/gist_id}", "starred_url": "https://api.github.com/users/psygo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psygo/subscriptions", "organizations_url": "https://api.github.com/users/psygo/orgs", "repos_url": "https://api.github.com/users/psygo/repos", "events_url": "https://api.github.com/users/psygo/events{/privacy}", "received_events_url": "https://api.github.com/users/psygo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "psygo", "id": 11823725, "node_id": "MDQ6VXNlcjExODIzNzI1", "avatar_url": "https://avatars3.githubusercontent.com/u/11823725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psygo", "html_url": "https://github.com/psygo", "followers_url": "https://api.github.com/users/psygo/followers", "following_url": "https://api.github.com/users/psygo/following{/other_user}", "gists_url": "https://api.github.com/users/psygo/gists{/gist_id}", "starred_url": "https://api.github.com/users/psygo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psygo/subscriptions", "organizations_url": "https://api.github.com/users/psygo/orgs", "repos_url": "https://api.github.com/users/psygo/repos", "events_url": "https://api.github.com/users/psygo/events{/privacy}", "received_events_url": "https://api.github.com/users/psygo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-07-08T11:01:44Z", "updated_at": "2019-07-29T11:23:39Z", "closed_at": "2019-07-29T11:23:39Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "With supermarkets, it seems reasonable to assume that there *will* be some periodicity to the purchases, because customers *do* regularly go to them. So my guess is that it's improper to use it for these cases (Non-Contractual RFM Models, such as the [Pareto/NBD](https://www.jstor.org/stable/2631608?seq=1#page_scan_tab_contents) or the [BG/NBD](https://repository.upenn.edu/marketing_papers/282/), assume that there is no periodicity to the customer's purchasing behavior).\r\n\r\nHas anyone been able to reach good fits with these models for supermarket data?\r\n\r\nIn [Schmittlein's paper](https://www.jstor.org/stable/2631608?seq=1#page_scan_tab_contents), he goes on to make a table of use cases for the Non-Contractual setting. If anyone can answer my question I will try to transform this issue into a *PR* for a table of use cases within the docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/293", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/293/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/293/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/293", "id": 465189869, "node_id": "MDU6SXNzdWU0NjUxODk4Njk=", "number": 293, "title": "Why *exactly* do we use *repeat* transactions for Non-Contractual RFM Models?", "user": {"login": "psygo", "id": 11823725, "node_id": "MDQ6VXNlcjExODIzNzI1", "avatar_url": "https://avatars3.githubusercontent.com/u/11823725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psygo", "html_url": "https://github.com/psygo", "followers_url": "https://api.github.com/users/psygo/followers", "following_url": "https://api.github.com/users/psygo/following{/other_user}", "gists_url": "https://api.github.com/users/psygo/gists{/gist_id}", "starred_url": "https://api.github.com/users/psygo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psygo/subscriptions", "organizations_url": "https://api.github.com/users/psygo/orgs", "repos_url": "https://api.github.com/users/psygo/repos", "events_url": "https://api.github.com/users/psygo/events{/privacy}", "received_events_url": "https://api.github.com/users/psygo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669283870, "node_id": "MDU6TGFiZWw2NjkyODM4NzA=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": "about code documentation or the readthedocs"}, {"id": 1446970546, "node_id": "MDU6TGFiZWwxNDQ2OTcwNTQ2", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/theory", "name": "theory", "color": "cc317c", "default": false, "description": "not really a question about the library, but of the underlying concepts"}], "state": "closed", "locked": false, "assignee": {"login": "psygo", "id": 11823725, "node_id": "MDQ6VXNlcjExODIzNzI1", "avatar_url": "https://avatars3.githubusercontent.com/u/11823725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psygo", "html_url": "https://github.com/psygo", "followers_url": "https://api.github.com/users/psygo/followers", "following_url": "https://api.github.com/users/psygo/following{/other_user}", "gists_url": "https://api.github.com/users/psygo/gists{/gist_id}", "starred_url": "https://api.github.com/users/psygo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psygo/subscriptions", "organizations_url": "https://api.github.com/users/psygo/orgs", "repos_url": "https://api.github.com/users/psygo/repos", "events_url": "https://api.github.com/users/psygo/events{/privacy}", "received_events_url": "https://api.github.com/users/psygo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "psygo", "id": 11823725, "node_id": "MDQ6VXNlcjExODIzNzI1", "avatar_url": "https://avatars3.githubusercontent.com/u/11823725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psygo", "html_url": "https://github.com/psygo", "followers_url": "https://api.github.com/users/psygo/followers", "following_url": "https://api.github.com/users/psygo/following{/other_user}", "gists_url": "https://api.github.com/users/psygo/gists{/gist_id}", "starred_url": "https://api.github.com/users/psygo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psygo/subscriptions", "organizations_url": "https://api.github.com/users/psygo/orgs", "repos_url": "https://api.github.com/users/psygo/repos", "events_url": "https://api.github.com/users/psygo/events{/privacy}", "received_events_url": "https://api.github.com/users/psygo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-07-08T10:55:49Z", "updated_at": "2019-07-29T11:14:59Z", "closed_at": "2019-07-29T11:14:59Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "In models like the [Pareto/NBD](https://www.jstor.org/stable/2631608?seq=1#page_scan_tab_contents) and the [BG/NBD](https://repository.upenn.edu/marketing_papers/282/) for RFM modeling in **Non-Contractual** settings, it is conventional to use **repeat** purchases. \r\n\r\nThe only answer I've found to it is (in the [BTYD *Vignettes*](https://cran.r-project.org/web/packages/BTYD/index.html)) that, if you simply use the blunt purchases, then you would have to consider customers who do not exist yet (zero purchases). This is very impractical, so you only consider customers who came at least once.\r\n\r\nHowever, if that were the case, then you wouldn't necessarily need to subtract `1` from each customer's frequency, you could simply *ignore inexistent* customers. I believe that the subtraction is also so the distribution of the customers is **recentered around `0`**, which is also the center for the underlying model's mixing distributions. If you didn't shift the customers, then you would probably have to add another (shifting) parameter to the mixing distributions.\r\n\r\nCan anyone confirm or deny my suspicions?\r\n\r\nIf someone can provide an answer to this, I could put in the docs so anyone has easy access to it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/288", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/288/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/288/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/288", "id": 463109938, "node_id": "MDU6SXNzdWU0NjMxMDk5Mzg=", "number": 288, "title": "How to use penalizer_coef correctly? How to evaluate GammaGamma fit?", "user": {"login": "myrthings", "id": 42479943, "node_id": "MDQ6VXNlcjQyNDc5OTQz", "avatar_url": "https://avatars3.githubusercontent.com/u/42479943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myrthings", "html_url": "https://github.com/myrthings", "followers_url": "https://api.github.com/users/myrthings/followers", "following_url": "https://api.github.com/users/myrthings/following{/other_user}", "gists_url": "https://api.github.com/users/myrthings/gists{/gist_id}", "starred_url": "https://api.github.com/users/myrthings/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myrthings/subscriptions", "organizations_url": "https://api.github.com/users/myrthings/orgs", "repos_url": "https://api.github.com/users/myrthings/repos", "events_url": "https://api.github.com/users/myrthings/events{/privacy}", "received_events_url": "https://api.github.com/users/myrthings/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-02T09:06:05Z", "updated_at": "2019-07-08T14:33:25Z", "closed_at": "2019-07-08T13:24:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to build a model with own data and I would like know how to evaluate it.\r\nI've found that changing penalizer_coef in GammaGammaFitter changes a lot the results for the CLV value: with higher value i get some negative values for monetary and clv, with a lower value -I cannot use 0 for the model fit- the values get higher an nonnegative -all of this without changing the model fit. How can I interpret this? How can I evaluate my model? Should the GammaGamma coef be related with the BetaGeo one? \r\n\r\nI will add some images of the results I'm getting.\r\npenalizer_coef=0.001\r\nMonetary:\r\n<img width=\"925\" alt=\"Captura de pantalla 2019-07-02 a las 10 57 47\" src=\"https://user-images.githubusercontent.com/42479943/60499454-c6848580-9cb8-11e9-866e-ab079fe34318.png\">\r\nCLV:\r\n<img width=\"939\" alt=\"Captura de pantalla 2019-07-02 a las 10 57 56\" src=\"https://user-images.githubusercontent.com/42479943/60499468-cdab9380-9cb8-11e9-8f08-19a2e081aa5e.png\">\r\n\r\npenalizer_coef=0.01\r\nMonetary:\r\n<img width=\"943\" alt=\"Captura de pantalla 2019-07-02 a las 10 58 47\" src=\"https://user-images.githubusercontent.com/42479943/60499495-db611900-9cb8-11e9-86a6-68aaba882964.png\">\r\nCLV:\r\n<img width=\"251\" alt=\"Captura de pantalla 2019-07-02 a las 11 00 13\" src=\"https://user-images.githubusercontent.com/42479943/60499505-e156fa00-9cb8-11e9-812e-2daa0f9f03d1.png\">\r\n<img width=\"935\" alt=\"Captura de pantalla 2019-07-02 a las 10 59 06\" src=\"https://user-images.githubusercontent.com/42479943/60499539-f469ca00-9cb8-11e9-8d73-394e56e6dede.png\">\r\n\r\nAny advice? How can I evaluate it? Is it better as little as possible?\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/282", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/282/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/282/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/282", "id": 458960247, "node_id": "MDU6SXNzdWU0NTg5NjAyNDc=", "number": 282, "title": "Monetary_value issue", "user": {"login": "andrewng88", "id": 44232530, "node_id": "MDQ6VXNlcjQ0MjMyNTMw", "avatar_url": "https://avatars1.githubusercontent.com/u/44232530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewng88", "html_url": "https://github.com/andrewng88", "followers_url": "https://api.github.com/users/andrewng88/followers", "following_url": "https://api.github.com/users/andrewng88/following{/other_user}", "gists_url": "https://api.github.com/users/andrewng88/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewng88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewng88/subscriptions", "organizations_url": "https://api.github.com/users/andrewng88/orgs", "repos_url": "https://api.github.com/users/andrewng88/repos", "events_url": "https://api.github.com/users/andrewng88/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewng88/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-21T01:16:08Z", "updated_at": "2019-06-21T08:50:01Z", "closed_at": "2019-06-21T08:50:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to clarify about Monetary Value. I read that it can be the total ( sum of qty x unit price ) but for lifetimes library we're using mean instead which is correct. Meaning total sales divided by unique date assuming date is not NULL. if NULL it wouldn't be considered,\r\n\r\nI tried to do a manual calculation but I was not able to tally the Monetary Value as per image.\r\n\r\nMay I trouble you guys to help explain? Thanks in advance.\r\n\r\nhttps://i.imgur.com/TprvkwG.png\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/277", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/277/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/277/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/277", "id": 454829736, "node_id": "MDU6SXNzdWU0NTQ4Mjk3MzY=", "number": 277, "title": "monetary ", "user": {"login": "temakahap", "id": 26182710, "node_id": "MDQ6VXNlcjI2MTgyNzEw", "avatar_url": "https://avatars0.githubusercontent.com/u/26182710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/temakahap", "html_url": "https://github.com/temakahap", "followers_url": "https://api.github.com/users/temakahap/followers", "following_url": "https://api.github.com/users/temakahap/following{/other_user}", "gists_url": "https://api.github.com/users/temakahap/gists{/gist_id}", "starred_url": "https://api.github.com/users/temakahap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/temakahap/subscriptions", "organizations_url": "https://api.github.com/users/temakahap/orgs", "repos_url": "https://api.github.com/users/temakahap/repos", "events_url": "https://api.github.com/users/temakahap/events{/privacy}", "received_events_url": "https://api.github.com/users/temakahap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-11T18:04:51Z", "updated_at": "2019-06-11T18:05:10Z", "closed_at": "2019-06-11T18:05:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello !\r\n\r\nThanks a lot for such a great library, looking forward to start to use it.\r\nI have question about monetary value. Could you please explain why it is necessary to exclude first purchases in monetary?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/269", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/269/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/269/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/269", "id": 439826043, "node_id": "MDU6SXNzdWU0Mzk4MjYwNDM=", "number": 269, "title": "[Question] high correlation between frequency and monetary value", "user": {"login": "spatil13", "id": 32886993, "node_id": "MDQ6VXNlcjMyODg2OTkz", "avatar_url": "https://avatars1.githubusercontent.com/u/32886993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spatil13", "html_url": "https://github.com/spatil13", "followers_url": "https://api.github.com/users/spatil13/followers", "following_url": "https://api.github.com/users/spatil13/following{/other_user}", "gists_url": "https://api.github.com/users/spatil13/gists{/gist_id}", "starred_url": "https://api.github.com/users/spatil13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spatil13/subscriptions", "organizations_url": "https://api.github.com/users/spatil13/orgs", "repos_url": "https://api.github.com/users/spatil13/repos", "events_url": "https://api.github.com/users/spatil13/events{/privacy}", "received_events_url": "https://api.github.com/users/spatil13/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1446970546, "node_id": "MDU6TGFiZWwxNDQ2OTcwNTQ2", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/theory", "name": "theory", "color": "cc317c", "default": false, "description": "not really a question about the library, but of the underlying concepts"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-02T23:10:52Z", "updated_at": "2019-07-11T20:13:21Z", "closed_at": "2019-07-11T20:13:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Team, \r\n\r\nBased on article:  \"The Gamma-Gamma submodel, in fact, assumes that there is no relationship between the monetary value and the purchase frequency. In practice we need to check whether the Pearson correlation between the two vectors is close to 0 in order to use this model\"\r\n\r\nI have two questions: \r\n\r\n1. In real world in most of cases there would high correlation between frequency visits/purchase to monetary value. I'm unable to understand importance of this assumption - Can someone please explain? \r\n\r\n2. In my case, a retail industry data - there is high correlation between monetary value and frequency. Is there a way I can use this model and produced valid results. \r\n\r\n\r\nPS: I have tried running this model on sample data. Transaction predictions are quit relevant however gamma - gamma model is producing highly inflated values. Not sure if it's because of highly correlated data or something else. \r\n\r\nThank you. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/264", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/264/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/264/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/264", "id": 434447709, "node_id": "MDU6SXNzdWU0MzQ0NDc3MDk=", "number": 264, "title": "Definition of Recency", "user": {"login": "psygo", "id": 11823725, "node_id": "MDQ6VXNlcjExODIzNzI1", "avatar_url": "https://avatars3.githubusercontent.com/u/11823725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psygo", "html_url": "https://github.com/psygo", "followers_url": "https://api.github.com/users/psygo/followers", "following_url": "https://api.github.com/users/psygo/following{/other_user}", "gists_url": "https://api.github.com/users/psygo/gists{/gist_id}", "starred_url": "https://api.github.com/users/psygo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psygo/subscriptions", "organizations_url": "https://api.github.com/users/psygo/orgs", "repos_url": "https://api.github.com/users/psygo/repos", "events_url": "https://api.github.com/users/psygo/events{/privacy}", "received_events_url": "https://api.github.com/users/psygo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-17T19:26:53Z", "updated_at": "2019-04-22T20:14:05Z", "closed_at": "2019-04-22T20:14:05Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hello, I'm new to this CLV stuff and something has been bothering me quite a lot: the definition of *recency*. I've seen so many different ones that I'm becoming paranoid about the other definitions of the RFM model and its variations.\r\n\r\nIn this library, from your code, I've recognized you used the definition Prof. Peter Fader used in his [lecture](https://youtu.be/guj2gVEEx4s) (the difference between the last and the first transaction), however, when writing about it in his BG/NBD paper, he defines it as \"when his last transaction occurred\", which I assume would be the difference between the observation period end and the last transaction. \r\n\r\nThe line of your code which shows you chose the former definition (`max` comes from each customer's transaction history, it is different from the observation period end):\r\n\r\n```python\r\ncustomers[\"recency\"] = (customers[\"max\"] - customers[\"min\"]) / np.timedelta64(1, freq) / freq_multiplier\r\n```\r\n\r\nTwo other papers (and [Wikipedia](https://en.wikipedia.org/wiki/RFM_(customer_value))) I've found so far seem to confirm the latter definition of the variable, albeit not the 100% reliable sources you would want them to be:\r\n\r\n1. Peker, S., *LRFMP model for customer segmentation in the grocery retail industry: a case\r\nstudy*.\r\n1. Zoeram, A., *A New Approach for Customer Clustering by Integrating\r\nthe LRFM Model and Fuzzy Inference System*.\r\n\r\nIf your definition also works, accident or not, it would be worth documenting its difference to others somewhere, preferably on your [readthedocs](https://lifetimes.readthedocs.io/en/latest/Quickstart.html#example-using-transactional-datasets) page.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/260", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/260/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/260/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/260", "id": 426430391, "node_id": "MDU6SXNzdWU0MjY0MzAzOTE=", "number": 260, "title": "summary_data_from_transaction_data  error when set freq = 'Q'", "user": {"login": "alexzzkk", "id": 33566560, "node_id": "MDQ6VXNlcjMzNTY2NTYw", "avatar_url": "https://avatars2.githubusercontent.com/u/33566560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexzzkk", "html_url": "https://github.com/alexzzkk", "followers_url": "https://api.github.com/users/alexzzkk/followers", "following_url": "https://api.github.com/users/alexzzkk/following{/other_user}", "gists_url": "https://api.github.com/users/alexzzkk/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexzzkk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexzzkk/subscriptions", "organizations_url": "https://api.github.com/users/alexzzkk/orgs", "repos_url": "https://api.github.com/users/alexzzkk/repos", "events_url": "https://api.github.com/users/alexzzkk/events{/privacy}", "received_events_url": "https://api.github.com/users/alexzzkk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-28T11:03:36Z", "updated_at": "2019-04-04T03:21:32Z", "closed_at": "2019-04-04T03:21:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nsummary_03 = summary_data_from_transaction_data(\r\n    transactions_03,\r\n    customer_id_col=\"c_id\",\r\n    datetime_col=\"invoice_date\",\r\n    monetary_value_col=\"monetary\",\r\n    freq='Q')\r\n\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-16-95b6289a62dc> in <module>()\r\n      4     datetime_col=\"invoice_date\",\r\n      5     monetary_value_col=\"monetary\",\r\n----> 6     freq='Q')\r\n\r\nD:\\Users\\Administrator\\Anaconda3\\lib\\site-packages\\lifetimes\\utils.py in summary_data_from_transaction_data(transactions, customer_id_col, datetime_col, monetary_value_col, datetime_format, observation_period_end, freq, freq_multiplier)\r\n    246     customers['frequency'] = customers['count'] - 1\r\n    247 \r\n--> 248     customers['T'] = (observation_period_end - customers['min']) / np.timedelta64(1, freq) / freq_multiplier\r\n    249     customers['recency'] = (customers['max'] - customers['min']) / np.timedelta64(1, freq) / freq_multiplier\r\n    250 \r\n\r\nTypeError: Invalid datetime unit \"Q\" in metadata\r\n\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/255", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/255/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/255/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/255", "id": 418591365, "node_id": "MDU6SXNzdWU0MTg1OTEzNjU=", "number": 255, "title": "ModifiedBetaGeoFitter OptimizerWarning and FutureWarning", "user": {"login": "mkbldn", "id": 8095617, "node_id": "MDQ6VXNlcjgwOTU2MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/8095617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkbldn", "html_url": "https://github.com/mkbldn", "followers_url": "https://api.github.com/users/mkbldn/followers", "following_url": "https://api.github.com/users/mkbldn/following{/other_user}", "gists_url": "https://api.github.com/users/mkbldn/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkbldn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkbldn/subscriptions", "organizations_url": "https://api.github.com/users/mkbldn/orgs", "repos_url": "https://api.github.com/users/mkbldn/repos", "events_url": "https://api.github.com/users/mkbldn/events{/privacy}", "received_events_url": "https://api.github.com/users/mkbldn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-08T01:30:41Z", "updated_at": "2019-03-08T02:34:39Z", "closed_at": "2019-03-08T02:34:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just upgraded to 11.0 and everything's running as expected except I'm getting a couple warnings when running the ModifiedBetaGeoFitter:\r\n\r\n```\r\n            bgm = ModifiedBetaGeoFitter(penalizer_coef=PrtBgmPnlzrCoef)\r\n            bgm.fit(RTFM_xv_cohort['frequency_cal'],\r\n                    RTFM_xv_cohort['recency_cal'],\r\n                    RTFM_xv_cohort['T_cal'],\r\n                    iterative_fitting=3,\r\n                    fit_method='Nelder-Mead'\r\n                    verbose=True,\r\n                    maxiter=100000,\r\n                    initial_params=None)\r\n```\r\n\r\n```\r\nC:\\Users\\baldim1\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\lifetimes\\fitters\\__init__.py:106: OptimizeWarning: Unknown solver options: iterative_fitting, fit_method\r\n  bounds=bounds,\r\nC:\\Users\\baldim1\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\autograd\\numpy\\numpy_vjps.py:444: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\r\n  return lambda g: g[idxs]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/253", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/253/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/253/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/253", "id": 418572291, "node_id": "MDU6SXNzdWU0MTg1NzIyOTE=", "number": 253, "title": "calibration_and_holdout_data \"attribute .n\"", "user": {"login": "jethard", "id": 8338784, "node_id": "MDQ6VXNlcjgzMzg3ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8338784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jethard", "html_url": "https://github.com/jethard", "followers_url": "https://api.github.com/users/jethard/followers", "following_url": "https://api.github.com/users/jethard/following{/other_user}", "gists_url": "https://api.github.com/users/jethard/gists{/gist_id}", "starred_url": "https://api.github.com/users/jethard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jethard/subscriptions", "organizations_url": "https://api.github.com/users/jethard/orgs", "repos_url": "https://api.github.com/users/jethard/repos", "events_url": "https://api.github.com/users/jethard/events{/privacy}", "received_events_url": "https://api.github.com/users/jethard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-08T00:06:25Z", "updated_at": "2019-04-12T14:16:15Z", "closed_at": "2019-03-08T02:34:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "On line 126 of lifetimes/lifetimes/utils.py there appears to be an extraneous .n at the end of the line \r\n\r\n\" delta_time = (to_period(observation_period_end) - to_period(calibration_period_end)).n\"\r\n\r\nThis is personally throwing an error for my data, as well as the quick start sample data. \r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/252", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/252/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/252/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/252", "id": 417485794, "node_id": "MDU6SXNzdWU0MTc0ODU3OTQ=", "number": 252, "title": "My Pareto NBD Model \"Sucks\"", "user": {"login": "mkbldn", "id": 8095617, "node_id": "MDQ6VXNlcjgwOTU2MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/8095617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkbldn", "html_url": "https://github.com/mkbldn", "followers_url": "https://api.github.com/users/mkbldn/followers", "following_url": "https://api.github.com/users/mkbldn/following{/other_user}", "gists_url": "https://api.github.com/users/mkbldn/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkbldn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkbldn/subscriptions", "organizations_url": "https://api.github.com/users/mkbldn/orgs", "repos_url": "https://api.github.com/users/mkbldn/repos", "events_url": "https://api.github.com/users/mkbldn/events{/privacy}", "received_events_url": "https://api.github.com/users/mkbldn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-05T20:24:37Z", "updated_at": "2019-03-07T19:40:09Z", "closed_at": "2019-03-07T19:40:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been running the Pareto NBD model against a various cohorts of our customers and they all display the same behavior in the plot_period_transactions (top left labeled 'Frequency of Repeat Transactions') graph that compares our data versus artificially simulated data with the fitted model's parameters.  In each case, simulated data is over estimating the 1 repeat customers and underestimating the amount of 2 or more repeat purchases. I've been re-running the models exploring different frequencies and penalizer coefficients but neither is improving the fit. \r\n\r\nAre there any \"dials\" I should be turning that I haven't already?... or any strategies to determining why the fit is so poor? I'm extremely new to these types of models and any assistance in improving the them would be greatly appreciated.\r\n\r\n### 2Q 2008 \r\n![xv_graphs_prt_0_200802_all_products](https://user-images.githubusercontent.com/8095617/53833446-8570a480-3f56-11e9-9a97-cd69a2a40ded.png)\r\n\r\n### 2Q 2014\r\n![xv_graphs_prt_0_201402_all_products](https://user-images.githubusercontent.com/8095617/53833807-6cb4be80-3f57-11e9-90ed-a86c9030212b.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/247", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/247/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/247/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/247", "id": 407797062, "node_id": "MDU6SXNzdWU0MDc3OTcwNjI=", "number": 247, "title": "TypeError: (\"unsupported operand type(s) for +: 'float' and 'Day'\", 'occurred at index 7') under  plot_calibration_purchases_vs_holdout_purchases", "user": {"login": "hmikelee", "id": 34959055, "node_id": "MDQ6VXNlcjM0OTU5MDU1", "avatar_url": "https://avatars3.githubusercontent.com/u/34959055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmikelee", "html_url": "https://github.com/hmikelee", "followers_url": "https://api.github.com/users/hmikelee/followers", "following_url": "https://api.github.com/users/hmikelee/following{/other_user}", "gists_url": "https://api.github.com/users/hmikelee/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmikelee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmikelee/subscriptions", "organizations_url": "https://api.github.com/users/hmikelee/orgs", "repos_url": "https://api.github.com/users/hmikelee/repos", "events_url": "https://api.github.com/users/hmikelee/events{/privacy}", "received_events_url": "https://api.github.com/users/hmikelee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-07T16:51:41Z", "updated_at": "2019-02-12T03:43:33Z", "closed_at": "2019-02-11T21:50:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear Cameron,\r\nThank you for great work in lifetimes implementation\r\nI recently encountered TypeError: (\"unsupported operand type(s) for +: 'float' and 'Day'\", 'occurred at index 7') when I called  plot_calibration_purchases_vs_holdout_purchases\r\nThe code ran ok in an older version of python\r\n'3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 18:10:19) \r\n[GCC 7.2.0]'\r\nBut failed in a newer verion of python\r\n3.6.8 |Anaconda, Inc.| (default, Dec 30 2018, 01:22:34)\r\n[GCC 7.3.0]\r\n\r\nThank you for your help.\r\n\r\nTraceback as below\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n/mnt/efs0/CLV/kpei/Customer-Analytics/qt.py in <module>()\r\n    163                             observation_period_end=last_date_in_trans_data )\r\n    164 bgf.fit(summary_cal_holdout['frequency_cal'], summary_cal_holdout['recency_cal'], summary_cal_holdout['T_cal'])\r\n--> 165 plot_calibration_purchases_vs_holdout_purchases(bgf, summary_cal_holdout, n=10)\r\n    166\r\n    167 plt.savefig('qt_actual_purchases_in_holdout_vs_predicted_purchase.png')\r\n\r\n~/anaconda3/lib/python3.6/site-packages/lifetimes/plotting.py in plot_calibration_purchases_vs_holdout_purchases(model, calibration_holdout_matrix, kind, n, **kwargs)\r\n    110     duration_holdout = summary.iloc[0]['duration_holdout']\r\n    111\r\n--> 112     summary['model_predictions'] = summary.apply(lambda r: model.conditional_expected_number_of_purchases_up_to_time(duration_holdout, r['frequency_cal'], r['recency_cal'], r['T_cal']), axis=1)\r\n    113\r\n    114     if kind == \"time_since_last_purchase\":\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py in apply(self, func, axis, broadcast, raw, reduce, result_type, args, **kwds)\r\n   6485                          args=args,\r\n   6486                          kwds=kwds)\r\n-> 6487         return op.get_result()\r\n   6488\r\n   6489     def applymap(self, func):\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/core/apply.py in get_result(self)\r\n    149             return self.apply_raw()\r\n    150\r\n--> 151         return self.apply_standard()\r\n    152\r\n    153     def apply_empty_result(self):\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/core/apply.py in apply_standard(self)\r\n    255\r\n    256         # compute the result using the series generator\r\n--> 257         self.apply_series_generator()\r\n    258\r\n    259         # wrap results\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/core/apply.py in apply_series_generator(self)\r\n    284             try:\r\n    285                 for i, v in enumerate(series_gen):\r\n--> 286                     results[i] = self.f(v)\r\n    287                     keys.append(v.name)\r\n    288             except Exception as e:\r\n\r\n~/anaconda3/lib/python3.6/site-packages/lifetimes/plotting.py in <lambda>(r)\r\n    110     duration_holdout = summary.iloc[0]['duration_holdout']\r\n    111\r\n--> 112     summary['model_predictions'] = summary.apply(lambda r: model.conditional_expected_number_of_purchases_up_to_time(duration_holdout, r['frequency_cal'], r['recency_cal'], r['T_cal']), axis=1)\r\n    113\r\n    114     if kind == \"time_since_last_purchase\":\r\n\r\n~/anaconda3/lib/python3.6/site-packages/lifetimes/fitters/beta_geo_fitter.py in conditional_expected_number_of_purchases_up_to_time(self, t, frequency, recency, T)\r\n    198         _b = b + x\r\n    199         _c = a + b + x - 1\r\n--> 200         _z = t / (alpha + T + t)\r\n    201         ln_hyp_term = np.log(hyp2f1(_a, _b, _c, _z))\r\n    202\r\n\r\nTypeError: (\"unsupported operand type(s) for +: 'float' and 'Day'\", 'occurred at index 7')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/245", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/245/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/245/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/245", "id": 406644048, "node_id": "MDU6SXNzdWU0MDY2NDQwNDg=", "number": 245, "title": "Issue in summary_data_from_transaction_data function", "user": {"login": "abhtpt", "id": 43437977, "node_id": "MDQ6VXNlcjQzNDM3OTc3", "avatar_url": "https://avatars3.githubusercontent.com/u/43437977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhtpt", "html_url": "https://github.com/abhtpt", "followers_url": "https://api.github.com/users/abhtpt/followers", "following_url": "https://api.github.com/users/abhtpt/following{/other_user}", "gists_url": "https://api.github.com/users/abhtpt/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhtpt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhtpt/subscriptions", "organizations_url": "https://api.github.com/users/abhtpt/orgs", "repos_url": "https://api.github.com/users/abhtpt/repos", "events_url": "https://api.github.com/users/abhtpt/events{/privacy}", "received_events_url": "https://api.github.com/users/abhtpt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-05T06:13:02Z", "updated_at": "2019-02-11T21:53:17Z", "closed_at": "2019-02-11T21:53:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "function summary_data_from_transaction_data is not working for new Pandas version 0.24.0 and 0.24.1,  It is having difficulty in calculation of Recency and T , basically it is not  able subtract  between series data type and date type, It works well with the version 0.23.4\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/244", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/244/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/244/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/244", "id": 405364680, "node_id": "MDU6SXNzdWU0MDUzNjQ2ODA=", "number": 244, "title": "Incorrect Frequency", "user": {"login": "rushdishams", "id": 6128549, "node_id": "MDQ6VXNlcjYxMjg1NDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6128549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rushdishams", "html_url": "https://github.com/rushdishams", "followers_url": "https://api.github.com/users/rushdishams/followers", "following_url": "https://api.github.com/users/rushdishams/following{/other_user}", "gists_url": "https://api.github.com/users/rushdishams/gists{/gist_id}", "starred_url": "https://api.github.com/users/rushdishams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rushdishams/subscriptions", "organizations_url": "https://api.github.com/users/rushdishams/orgs", "repos_url": "https://api.github.com/users/rushdishams/repos", "events_url": "https://api.github.com/users/rushdishams/events{/privacy}", "received_events_url": "https://api.github.com/users/rushdishams/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-31T17:48:57Z", "updated_at": "2019-03-07T19:40:09Z", "closed_at": "2019-03-07T19:40:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. In my transactions data, I have the following purchase history for a user with id `4125`\r\n\r\n```\r\n4125, 2018-04-24  7:19:25 PM\r\n4125, 2018-04-24  8:13:28 PM\r\n4125, 2018-05-24  4:00:01 AM\r\n```\r\nWhen I am using \r\n`summary = summary_data_from_transaction_data\\\r\n(df, 'user_id', 'created_at', observation_period_end='2019-01-31')`, I get:\r\n```\r\nuser_id | frequency | recency | T\r\n4125 | 1.0 | 30.0 | 282.0\r\n```\r\nShouldn't be the frequency 2 in this case although the user purchased twice in her first day? \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/242", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/242/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/242/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/242", "id": 397141389, "node_id": "MDU6SXNzdWUzOTcxNDEzODk=", "number": 242, "title": "Historical CLV plots", "user": {"login": "sophia-wright-blue", "id": 16384103, "node_id": "MDQ6VXNlcjE2Mzg0MTAz", "avatar_url": "https://avatars1.githubusercontent.com/u/16384103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sophia-wright-blue", "html_url": "https://github.com/sophia-wright-blue", "followers_url": "https://api.github.com/users/sophia-wright-blue/followers", "following_url": "https://api.github.com/users/sophia-wright-blue/following{/other_user}", "gists_url": "https://api.github.com/users/sophia-wright-blue/gists{/gist_id}", "starred_url": "https://api.github.com/users/sophia-wright-blue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sophia-wright-blue/subscriptions", "organizations_url": "https://api.github.com/users/sophia-wright-blue/orgs", "repos_url": "https://api.github.com/users/sophia-wright-blue/repos", "events_url": "https://api.github.com/users/sophia-wright-blue/events{/privacy}", "received_events_url": "https://api.github.com/users/sophia-wright-blue/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-08T23:36:56Z", "updated_at": "2019-01-28T20:03:40Z", "closed_at": "2019-01-28T20:03:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "thanks for releasing this amazing repo! I'd greatly appreciate any help/guidance making Historical CLV plots for the users. So make a plot of the change in CLV over time from a dataset for each user. Thanks,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/239", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/239/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/239/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/239", "id": 391548404, "node_id": "MDU6SXNzdWUzOTE1NDg0MDQ=", "number": 239, "title": "Conditional Probability  Alive is Wrong when frequency = 0, recency = 0.", "user": {"login": "vruvora", "id": 4951479, "node_id": "MDQ6VXNlcjQ5NTE0Nzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4951479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vruvora", "html_url": "https://github.com/vruvora", "followers_url": "https://api.github.com/users/vruvora/followers", "following_url": "https://api.github.com/users/vruvora/following{/other_user}", "gists_url": "https://api.github.com/users/vruvora/gists{/gist_id}", "starred_url": "https://api.github.com/users/vruvora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vruvora/subscriptions", "organizations_url": "https://api.github.com/users/vruvora/orgs", "repos_url": "https://api.github.com/users/vruvora/repos", "events_url": "https://api.github.com/users/vruvora/events{/privacy}", "received_events_url": "https://api.github.com/users/vruvora/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-17T03:51:29Z", "updated_at": "2018-12-30T05:12:10Z", "closed_at": "2018-12-30T05:12:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This seems wrong to me because this will output 1 for customers who have had one purchase a long time ago, but get 0 frequency due to one purchase given how `summary_df_from_transaction_data` is designed. \r\nhttps://github.com/CamDavidsonPilon/lifetimes/blob/2504445ba7125fe7179daf05f2700c5e38673aac/lifetimes/fitters/beta_geo_fitter.py#L252", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/238", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/238/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/238/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/238", "id": 391161325, "node_id": "MDU6SXNzdWUzOTExNjEzMjU=", "number": 238, "title": "setup py3.7 in Travis", "user": {"login": "CamDavidsonPilon", "id": 884032, "node_id": "MDQ6VXNlcjg4NDAzMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/884032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CamDavidsonPilon", "html_url": "https://github.com/CamDavidsonPilon", "followers_url": "https://api.github.com/users/CamDavidsonPilon/followers", "following_url": "https://api.github.com/users/CamDavidsonPilon/following{/other_user}", "gists_url": "https://api.github.com/users/CamDavidsonPilon/gists{/gist_id}", "starred_url": "https://api.github.com/users/CamDavidsonPilon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CamDavidsonPilon/subscriptions", "organizations_url": "https://api.github.com/users/CamDavidsonPilon/orgs", "repos_url": "https://api.github.com/users/CamDavidsonPilon/repos", "events_url": "https://api.github.com/users/CamDavidsonPilon/events{/privacy}", "received_events_url": "https://api.github.com/users/CamDavidsonPilon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1446992123, "node_id": "MDU6TGFiZWwxNDQ2OTkyMTIz", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/new%20feature%20suggestion", "name": "new feature suggestion", "color": "c5def5", "default": false, "description": "new feature suggestion for the library"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-14T15:44:01Z", "updated_at": "2019-08-21T11:34:01Z", "closed_at": "2019-01-07T15:59:08Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/234", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/234/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/234/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/234", "id": 388620624, "node_id": "MDU6SXNzdWUzODg2MjA2MjQ=", "number": 234, "title": "calculate_alive_path() function needs to be changed", "user": {"login": "arkahome", "id": 13066769, "node_id": "MDQ6VXNlcjEzMDY2NzY5", "avatar_url": "https://avatars1.githubusercontent.com/u/13066769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arkahome", "html_url": "https://github.com/arkahome", "followers_url": "https://api.github.com/users/arkahome/followers", "following_url": "https://api.github.com/users/arkahome/following{/other_user}", "gists_url": "https://api.github.com/users/arkahome/gists{/gist_id}", "starred_url": "https://api.github.com/users/arkahome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arkahome/subscriptions", "organizations_url": "https://api.github.com/users/arkahome/orgs", "repos_url": "https://api.github.com/users/arkahome/repos", "events_url": "https://api.github.com/users/arkahome/events{/privacy}", "received_events_url": "https://api.github.com/users/arkahome/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-07T11:44:07Z", "updated_at": "2019-03-01T14:49:02Z", "closed_at": "2019-03-01T14:49:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "The line :- \r\ncustomer_history['transactions'] = customer_history['transactions'].apply(lambda t: int(t > 0))\r\n\r\n in calculate_alive_path needs to be changed to :- \r\n\r\ncustomer_history['transactions'] = customer_history['transactions']\r\n\r\n Otherwise multiple transactions for a days are also getting computed as 1. Thus skewing the alive probability.\r\n\r\nThanks!! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/233", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/233/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/233/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/233", "id": 387717826, "node_id": "MDU6SXNzdWUzODc3MTc4MjY=", "number": 233, "title": "_customer_lifetime_value implementation of DCF does not consider resampling freq of the transactions", "user": {"login": "ashish-ram", "id": 6511786, "node_id": "MDQ6VXNlcjY1MTE3ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/6511786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashish-ram", "html_url": "https://github.com/ashish-ram", "followers_url": "https://api.github.com/users/ashish-ram/followers", "following_url": "https://api.github.com/users/ashish-ram/following{/other_user}", "gists_url": "https://api.github.com/users/ashish-ram/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashish-ram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashish-ram/subscriptions", "organizations_url": "https://api.github.com/users/ashish-ram/orgs", "repos_url": "https://api.github.com/users/ashish-ram/repos", "events_url": "https://api.github.com/users/ashish-ram/events{/privacy}", "received_events_url": "https://api.github.com/users/ashish-ram/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-05T11:41:09Z", "updated_at": "2019-03-07T19:40:37Z", "closed_at": "2019-03-07T19:40:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\ndef _customer_lifetime_value(transaction_prediction_model, frequency, recency, T, monetary_value, time=12, discount_rate=0.01):\r\n\r\n    df = pd.DataFrame(index=frequency.index)\r\n    df['clv'] = 0  # initialize the clv column to zeros\r\n\r\n    for i in range(30, (time * 30) + 1, 30):\r\n        # since the prediction of number of transactions is cumulative, we have to subtract off the previous periods\r\n        expected_number_of_transactions = transaction_prediction_model.predict(i, frequency, recency, T) - transaction_prediction_model.predict(i - 30, frequency, recency, T)\r\n        # sum up the CLV estimates of all of the periods\r\n        df['clv'] += (monetary_value * expected_number_of_transactions) / (1 + discount_rate) ** (i / 30)\r\n\r\n    return df['clv']  # return as a series\r\n```\r\nIn the the function assums that the frequency of purchases are always sampled per day i.e. freq=\"D\". What if you have generated the summary using freq=\"M\"? This will lead to wrong calculation inside the loop of _customer_lifetime_value(). \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/232", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/232/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/232/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/232", "id": 386779654, "node_id": "MDU6SXNzdWUzODY3Nzk2NTQ=", "number": 232, "title": "Can anybody explain the 'plot_calibration_purchases_vs_holdout_purchases' plots ?", "user": {"login": "QaisarRajput", "id": 11134951, "node_id": "MDQ6VXNlcjExMTM0OTUx", "avatar_url": "https://avatars2.githubusercontent.com/u/11134951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QaisarRajput", "html_url": "https://github.com/QaisarRajput", "followers_url": "https://api.github.com/users/QaisarRajput/followers", "following_url": "https://api.github.com/users/QaisarRajput/following{/other_user}", "gists_url": "https://api.github.com/users/QaisarRajput/gists{/gist_id}", "starred_url": "https://api.github.com/users/QaisarRajput/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QaisarRajput/subscriptions", "organizations_url": "https://api.github.com/users/QaisarRajput/orgs", "repos_url": "https://api.github.com/users/QaisarRajput/repos", "events_url": "https://api.github.com/users/QaisarRajput/events{/privacy}", "received_events_url": "https://api.github.com/users/QaisarRajput/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-03T11:42:00Z", "updated_at": "2019-02-18T17:13:40Z", "closed_at": "2019-02-18T17:13:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been trying to understand the following plot in the [docs](https://lifetimes.readthedocs.io/en/master/Quickstart.html)\r\n\r\n![bg-plot](https://user-images.githubusercontent.com/11134951/49371468-58271700-f719-11e8-81d6-d1886621709c.png)\r\n\r\nWhat are these \"Purchases in the calibration period\"(x-axis). and how are they in [0, 5] scale. same goes for the (y-axis). is it an aggregated form of the data?\r\n\r\nAdditionally, there is a [article ](https://towardsdatascience.com/whats-a-customer-worth-8daf183f8a4f) which also discusses the same example, and states \r\n\r\n> In this plot, we separate the data into both a in-sample (calibration) and validation (holdout) period. The sample period consists the beginning to 2011\u201306\u201308; the validation period spans from 2011\u201306\u201309 to 2011\u201312\u201309. **The plot groups all customers in the calibration period by their number of repeat purchases (x-axis) and then averages over their repeat purchases in the holdout period (y-axis)**. \r\n\r\nPlease simplify it for my understanding hopefully with an example\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/230", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/230/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/230/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/230", "id": 385335068, "node_id": "MDU6SXNzdWUzODUzMzUwNjg=", "number": 230, "title": "BrokenPipeError: [Errno 32] Broken pipe Error", "user": {"login": "tejaser", "id": 5510892, "node_id": "MDQ6VXNlcjU1MTA4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5510892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejaser", "html_url": "https://github.com/tejaser", "followers_url": "https://api.github.com/users/tejaser/followers", "following_url": "https://api.github.com/users/tejaser/following{/other_user}", "gists_url": "https://api.github.com/users/tejaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejaser/subscriptions", "organizations_url": "https://api.github.com/users/tejaser/orgs", "repos_url": "https://api.github.com/users/tejaser/repos", "events_url": "https://api.github.com/users/tejaser/events{/privacy}", "received_events_url": "https://api.github.com/users/tejaser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161473689, "node_id": "MDU6TGFiZWwxNjE0NzM2ODk=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": "invalid or off-topic question"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-28T15:54:39Z", "updated_at": "2019-08-21T11:33:08Z", "closed_at": "2018-11-29T02:38:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to follow the \"A Tutorial Using Probabalistic Programming and PyMC\" tutorial.  my environment is as below:\r\n\r\n```\r\nOS: Windows 10\r\nPython: 3.6.7\r\n```\r\n\r\nI am using `Anaconda` and when running the `Jupyter Notebook` I am getting:\r\n\r\n```\r\n\"BrokenPipeError: [Errno 32] Broken pipe\" error.\r\n```\r\n\r\nI tried turning off the firewall, changing the sample size, but the error still remains.  Any suggestions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/225", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/225/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/225/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/225", "id": 382911106, "node_id": "MDU6SXNzdWUzODI5MTExMDY=", "number": 225, "title": "Providing parameter `T` to `plot_probability_alive_matrix results` in error", "user": {"login": "clausherther", "id": 7342749, "node_id": "MDQ6VXNlcjczNDI3NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7342749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clausherther", "html_url": "https://github.com/clausherther", "followers_url": "https://api.github.com/users/clausherther/followers", "following_url": "https://api.github.com/users/clausherther/following{/other_user}", "gists_url": "https://api.github.com/users/clausherther/gists{/gist_id}", "starred_url": "https://api.github.com/users/clausherther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clausherther/subscriptions", "organizations_url": "https://api.github.com/users/clausherther/orgs", "repos_url": "https://api.github.com/users/clausherther/repos", "events_url": "https://api.github.com/users/clausherther/events{/privacy}", "received_events_url": "https://api.github.com/users/clausherther/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669283870, "node_id": "MDU6TGFiZWw2NjkyODM4NzA=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": "about code documentation or the readthedocs"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-21T00:59:14Z", "updated_at": "2019-08-30T23:46:44Z", "closed_at": "2018-11-22T15:25:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After fitting a BG/NBD model, calling `plot_probability_alive_matrix` with parameter `T` (or `t`)\r\n```\r\nplot_probability_alive_matrix(model=bgf, T=1);\r\n```\r\n\r\nresults in error `AttributeError: Unknown property t`, with below stracktrace.\r\n\r\nHowever, the docstring seems to indicate `T` can be specified:\r\n```\r\nplot_probability_alive_matrix(model, max_frequency=None, max_recency=None, title='Probability Customer is Alive,\\nby Frequency and Recency of a Customer', xlabel=\"Customer's Historical Frequency\", ylabel=\"Customer's Recency\", **kwargs)\r\n    Plot probability alive matrix as heatmap.\r\n    \r\n    Plot a figure of the probability a customer is alive based on their\r\n    frequency and recency.\r\n    \r\n    Parameters\r\n    ----------\r\n    model: lifetimes model\r\n        A fitted lifetimes model.\r\n    T: fload, optional\r\n        Next units of time to make predictions for\r\n    max_frequency: int, optional\r\n        The maximum frequency to plot. Default is max observed frequency.\r\n    max_recency: int, optional\r\n        The maximum recency to plot. This also determines the age of the customer.\r\n        Default to max observed age.\r\n    title: str, optional\r\n        Figure title\r\n    xlabel: str, optional\r\n        Figure xlabel\r\n    ylabel: str, optional\r\n        Figure ylabel\r\n    kwargs\r\n        Passed into the matplotlib.imshow command.\r\n    \r\n    Returns\r\n    -------\r\n    axes: matplotlib.AxesSubplot\r\n```\r\n\r\nFull stacktrace:\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-36-e66f8889a673> in <module>\r\n----> 1 plot_probability_alive_matrix(model=bgf, t=1, cmap=\"coolwarm\", interpolation=\"bilinear\", origin=\"lower\");\r\n\r\n~/.pyenv/versions/3.6.7/lib/python3.6/site-packages/lifetimes/plotting.py in plot_probability_alive_matrix(model, max_frequency, max_recency, title, xlabel, ylabel, **kwargs)\r\n    242 \r\n    243     ax = plt.subplot(111)\r\n--> 244     PCM = ax.imshow(z, interpolation=interpolation, **kwargs)\r\n    245     plt.xlabel(xlabel)\r\n    246     plt.ylabel(ylabel)\r\n\r\n~/.pyenv/versions/3.6.7/lib/python3.6/site-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)\r\n   1803                         \"the Matplotlib list!)\" % (label_namer, func.__name__),\r\n   1804                         RuntimeWarning, stacklevel=2)\r\n-> 1805             return func(ax, *args, **kwargs)\r\n   1806 \r\n   1807         inner.__doc__ = _add_data_doc(inner.__doc__,\r\n\r\n~/.pyenv/versions/3.6.7/lib/python3.6/site-packages/matplotlib/axes/_axes.py in imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)\r\n   5479         im = mimage.AxesImage(self, cmap, norm, interpolation, origin, extent,\r\n   5480                               filternorm=filternorm, filterrad=filterrad,\r\n-> 5481                               resample=resample, **kwargs)\r\n   5482 \r\n   5483         im.set_data(X)\r\n\r\n~/.pyenv/versions/3.6.7/lib/python3.6/site-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, extent, filternorm, filterrad, resample, **kwargs)\r\n    820             filterrad=filterrad,\r\n    821             resample=resample,\r\n--> 822             **kwargs\r\n    823         )\r\n    824 \r\n\r\n~/.pyenv/versions/3.6.7/lib/python3.6/site-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, filternorm, filterrad, resample, **kwargs)\r\n    221         self._imcache = None\r\n    222 \r\n--> 223         self.update(kwargs)\r\n    224 \r\n    225     def __getstate__(self):\r\n\r\n~/.pyenv/versions/3.6.7/lib/python3.6/site-packages/matplotlib/artist.py in update(self, props)\r\n    914 \r\n    915         with cbook._setattr_cm(self, eventson=False):\r\n--> 916             ret = [_update_property(self, k, v) for k, v in props.items()]\r\n    917 \r\n    918         if len(ret):\r\n\r\n~/.pyenv/versions/3.6.7/lib/python3.6/site-packages/matplotlib/artist.py in <listcomp>(.0)\r\n    914 \r\n    915         with cbook._setattr_cm(self, eventson=False):\r\n--> 916             ret = [_update_property(self, k, v) for k, v in props.items()]\r\n    917 \r\n    918         if len(ret):\r\n\r\n~/.pyenv/versions/3.6.7/lib/python3.6/site-packages/matplotlib/artist.py in _update_property(self, k, v)\r\n    910                 func = getattr(self, 'set_' + k, None)\r\n    911                 if not callable(func):\r\n--> 912                     raise AttributeError('Unknown property %s' % k)\r\n    913                 return func(v)\r\n    914 \r\n\r\nAttributeError: Unknown property t\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/223", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/223/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/223/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/223", "id": 379241298, "node_id": "MDU6SXNzdWUzNzkyNDEyOTg=", "number": 223, "title": "Scaling models?", "user": {"login": "Benski3030", "id": 11035100, "node_id": "MDQ6VXNlcjExMDM1MTAw", "avatar_url": "https://avatars2.githubusercontent.com/u/11035100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Benski3030", "html_url": "https://github.com/Benski3030", "followers_url": "https://api.github.com/users/Benski3030/followers", "following_url": "https://api.github.com/users/Benski3030/following{/other_user}", "gists_url": "https://api.github.com/users/Benski3030/gists{/gist_id}", "starred_url": "https://api.github.com/users/Benski3030/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Benski3030/subscriptions", "organizations_url": "https://api.github.com/users/Benski3030/orgs", "repos_url": "https://api.github.com/users/Benski3030/repos", "events_url": "https://api.github.com/users/Benski3030/events{/privacy}", "received_events_url": "https://api.github.com/users/Benski3030/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-09T16:55:29Z", "updated_at": "2018-11-10T21:48:46Z", "closed_at": "2018-11-10T21:48:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had a question about training and applying these models to larger sets of customer data.  In the examples and cited papers, the model is trained on a given cohort of customers, typically defined by customers acquired during a set unit of time (i.e. all customers who made their first purchase during the month of December 2014 etc.)  However, is the expectation then that a trained model with good performance is then applied to all future cohorts? or does each new cohort need to have its own model fit? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/217", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/217/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/217/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/217", "id": 373277925, "node_id": "MDU6SXNzdWUzNzMyNzc5MjU=", "number": 217, "title": "expected_cumulative_transactions hardcodes datetime_col as 'date'", "user": {"login": "mps-ds", "id": 42783397, "node_id": "MDQ6VXNlcjQyNzgzMzk3", "avatar_url": "https://avatars1.githubusercontent.com/u/42783397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mps-ds", "html_url": "https://github.com/mps-ds", "followers_url": "https://api.github.com/users/mps-ds/followers", "following_url": "https://api.github.com/users/mps-ds/following{/other_user}", "gists_url": "https://api.github.com/users/mps-ds/gists{/gist_id}", "starred_url": "https://api.github.com/users/mps-ds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mps-ds/subscriptions", "organizations_url": "https://api.github.com/users/mps-ds/orgs", "repos_url": "https://api.github.com/users/mps-ds/repos", "events_url": "https://api.github.com/users/mps-ds/events{/privacy}", "received_events_url": "https://api.github.com/users/mps-ds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-24T02:27:12Z", "updated_at": "2019-02-08T14:31:30Z", "closed_at": "2019-02-08T14:31:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think there's a bug in the function `expected_cumulative_transactions` that prevents causes an error if the datetime_col in the transactions dataframe is not 'date'. It also comes up if you try to run the `plot_cumulative_transactions` function. You can generate the error by running the following:\r\n\r\n```\r\nfrom lifetimes import ModifiedBetaGeoFitter\r\nfrom lifetimes.datasets import load_transaction_data\r\nimport lifetimes.plotting as ltplt\r\nfrom lifetimes.utils import summary_data_from_transaction_data, expected_cumulative_transactions\r\n\r\ntransactions = load_transaction_data().rename(columns={'date':'Date'})\r\nsummary = summary_data_from_transaction_data(transactions,'id','Date')\r\nmbg = ModifiedBetaGeoFitter()\r\nmbg.fit(summary['frequency'],summary['recency'],summary['T'])\r\nexpected_cumulative_transactions(mbg, transactions, 'Date', 'id', 100)\r\n```\r\n\r\nThis returns the error \"Key Error: 'date'\", which is triggered by line 487 in utils.py:\r\n```\r\nfirst_trans_size = first_transactions.groupby('date').size()\r\n```\r\n\r\nIt looks to me as though 'date' is hardcoded on lines 487 and 499. I think in both cases it should use datetime_col instead, although I am not certain about line 499.\r\n\r\nThe function works fine if you run:\r\n```\r\nexpected_cumulative_transactions(mbg,\r\n                                 transactions.rename(columns={'Date':'date'}),\r\n                                 'date', 'id', 100)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/216", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/216/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/216/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/216", "id": 372959109, "node_id": "MDU6SXNzdWUzNzI5NTkxMDk=", "number": 216, "title": "In beta_geo_beta_binom_fitter, How to get n &  n_custs?", "user": {"login": "yanwu0105", "id": 22611187, "node_id": "MDQ6VXNlcjIyNjExMTg3", "avatar_url": "https://avatars1.githubusercontent.com/u/22611187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanwu0105", "html_url": "https://github.com/yanwu0105", "followers_url": "https://api.github.com/users/yanwu0105/followers", "following_url": "https://api.github.com/users/yanwu0105/following{/other_user}", "gists_url": "https://api.github.com/users/yanwu0105/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanwu0105/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanwu0105/subscriptions", "organizations_url": "https://api.github.com/users/yanwu0105/orgs", "repos_url": "https://api.github.com/users/yanwu0105/repos", "events_url": "https://api.github.com/users/yanwu0105/events{/privacy}", "received_events_url": "https://api.github.com/users/yanwu0105/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-23T11:51:04Z", "updated_at": "2018-11-02T14:54:09Z", "closed_at": "2018-11-02T14:54:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "In `beta_geo_beta_binom_fitter.fit`  , will input  `n` &  `n_custs`.\r\nHow to measure the two parameters?\r\n\r\nI don't understand the definition of n & n_custs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/215", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/215/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/215/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/215", "id": 371316722, "node_id": "MDU6SXNzdWUzNzEzMTY3MjI=", "number": 215, "title": "in utils, _customer_lifetime_value is assuming the model is always a daily model", "user": {"login": "aggie13", "id": 7597760, "node_id": "MDQ6VXNlcjc1OTc3NjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7597760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aggie13", "html_url": "https://github.com/aggie13", "followers_url": "https://api.github.com/users/aggie13/followers", "following_url": "https://api.github.com/users/aggie13/following{/other_user}", "gists_url": "https://api.github.com/users/aggie13/gists{/gist_id}", "starred_url": "https://api.github.com/users/aggie13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aggie13/subscriptions", "organizations_url": "https://api.github.com/users/aggie13/orgs", "repos_url": "https://api.github.com/users/aggie13/repos", "events_url": "https://api.github.com/users/aggie13/events{/privacy}", "received_events_url": "https://api.github.com/users/aggie13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-10-18T00:32:35Z", "updated_at": "2019-03-07T19:40:09Z", "closed_at": "2019-03-07T19:40:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n    for i in range(30, (time * 30) + 1, 30):\r\n        # since the prediction of number of transactions is cumulative, we have to subtract off the previous periods\r\n        expected_number_of_transactions = transaction_prediction_model.predict(i, frequency, recency, T) - transaction_prediction_model.predict(i - 30, frequency, recency, T)\r\n        # sum up the CLV estimates of all of the periods\r\n        df['clv'] += (monetary_value * expected_number_of_transactions) / (1 + discount_rate) ** (i / 30)\r\n```\r\nThis seems assumes the  transaction_prediction_model is a daily model (as freq=D)? so if my model is using freq=M then the whole calculation would be wrong. Am I right?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/214", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/214/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/214/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/214", "id": 370880233, "node_id": "MDU6SXNzdWUzNzA4ODAyMzM=", "number": 214, "title": "The two function have any different??", "user": {"login": "yanwu0105", "id": 22611187, "node_id": "MDQ6VXNlcjIyNjExMTg3", "avatar_url": "https://avatars1.githubusercontent.com/u/22611187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanwu0105", "html_url": "https://github.com/yanwu0105", "followers_url": "https://api.github.com/users/yanwu0105/followers", "following_url": "https://api.github.com/users/yanwu0105/following{/other_user}", "gists_url": "https://api.github.com/users/yanwu0105/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanwu0105/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanwu0105/subscriptions", "organizations_url": "https://api.github.com/users/yanwu0105/orgs", "repos_url": "https://api.github.com/users/yanwu0105/repos", "events_url": "https://api.github.com/users/yanwu0105/events{/privacy}", "received_events_url": "https://api.github.com/users/yanwu0105/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-17T03:09:50Z", "updated_at": "2019-03-07T19:40:55Z", "closed_at": "2019-03-07T19:40:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "In BG/NBD or Pareto/NBD have two function \uff1a\r\n1\u3001conditional_expected_number_of_purchases_up_to_time\r\n2\u3001expected_number_of_purchases_up_to_time \r\nhave any different\uff1f\r\n\r\nIf I want to check the models' error about \"frequency\" between actual and prediction.\r\nwhich function should I use?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/213", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/213/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/213/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/213", "id": 365991368, "node_id": "MDU6SXNzdWUzNjU5OTEzNjg=", "number": 213, "title": "conditional_probability_of_being_alive_up_to_time", "user": {"login": "xingzhex", "id": 34249526, "node_id": "MDQ6VXNlcjM0MjQ5NTI2", "avatar_url": "https://avatars0.githubusercontent.com/u/34249526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xingzhex", "html_url": "https://github.com/xingzhex", "followers_url": "https://api.github.com/users/xingzhex/followers", "following_url": "https://api.github.com/users/xingzhex/following{/other_user}", "gists_url": "https://api.github.com/users/xingzhex/gists{/gist_id}", "starred_url": "https://api.github.com/users/xingzhex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xingzhex/subscriptions", "organizations_url": "https://api.github.com/users/xingzhex/orgs", "repos_url": "https://api.github.com/users/xingzhex/repos", "events_url": "https://api.github.com/users/xingzhex/events{/privacy}", "received_events_url": "https://api.github.com/users/xingzhex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161473686, "node_id": "MDU6TGFiZWwxNjE0NzM2ODY=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": "duplicate content"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-02T17:00:35Z", "updated_at": "2019-10-25T01:19:31Z", "closed_at": "2019-08-22T11:28:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there, @CamDavidsonPilon . Prof. Fader and Hardie also calculated the probability that a customer will still be alive up to time `T+t` with the purchase history `(x, t_x, T)` using `ParetoNBD` model in [this paper](http://www.brucehardie.com/notes/015/additional_pareto_nbd_results.pdf). Here I attached my code for this in case anyone is interested.\r\n\r\n```python\r\ndef conditional_probability_of_being_alive_up_to_time(\r\n    self,\r\n    t, \r\n    frequency, \r\n    recency, \r\n    T\r\n):\r\n    \"\"\"\r\n    Conditional probability of being alive up to time T+t.\r\n    \r\n    Compute the probability that a customer with history\r\n    (frequency, recency, T) is still alive up to time T+t, given they have\r\n        purchase history (frequency, recency, T).\r\n    From paper:\r\n    http://www.brucehardie.com/notes/015/additional_pareto_nbd_results.pdf\r\n    \r\n    Parameters\r\n    ----------\r\n    t: int\r\n        time up to which probability should be calculated.            \r\n    frequency: float\r\n        historical frequency of customer.\r\n    recency: float\r\n        historical recency of customer.\r\n    T: float\r\n        age of the customer.\r\n    Returns\r\n    -------\r\n    float\r\n        value representing a probability\r\n    \"\"\"\r\n    \r\n    x, t_x = frequency, recency\r\n    r, alpha, s, beta = self._unload_params('r', 'alpha', 's', 'beta')\r\n    A_0 = self._log_A_0([r, alpha, s, beta], x, t_x, T)\r\n    K_1 = s * log(beta + T + t) - s * log(beta + T)\r\n    K_2 = log(s) - log(r + s + x) + (r + x) * log(alpha + T) + s * log(beta + T + t) + A_0\r\n\r\n    return 1. / (exp(K_1) + exp(K_2))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/212", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/212/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/212/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/212", "id": 365904415, "node_id": "MDU6SXNzdWUzNjU5MDQ0MTU=", "number": 212, "title": "conditional_probability_alive with 0 frequency", "user": {"login": "Trollgeir", "id": 7591857, "node_id": "MDQ6VXNlcjc1OTE4NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7591857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Trollgeir", "html_url": "https://github.com/Trollgeir", "followers_url": "https://api.github.com/users/Trollgeir/followers", "following_url": "https://api.github.com/users/Trollgeir/following{/other_user}", "gists_url": "https://api.github.com/users/Trollgeir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Trollgeir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Trollgeir/subscriptions", "organizations_url": "https://api.github.com/users/Trollgeir/orgs", "repos_url": "https://api.github.com/users/Trollgeir/repos", "events_url": "https://api.github.com/users/Trollgeir/events{/privacy}", "received_events_url": "https://api.github.com/users/Trollgeir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-02T13:43:59Z", "updated_at": "2018-10-02T21:28:57Z", "closed_at": "2018-10-02T21:26:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currenty `conditional_probability_alive()` for customers with 0 frequency (only made 1 initial purchase) will always result in alive = 1.0 \r\n\r\nIsn't it better to assume the average inter-purchase time as a baseline for assuming the first-time customers' probability of being alive? An example of this:\r\n\r\n```\r\ndf_first_time_customers = df[df['frequency'] == 0]\r\ndf_first_time_customers['frequency'] = 1\r\n\r\nbgf.conditional_probability_alive(df_first_time_customers['frequency'],\r\n                                 df_first_time_customers['recency'],\r\n                                df_first_time_customers['T'])\r\n\r\narray([0.32956691, 0.37484188, 0.56253928, ..., 0.58532555, 0.59233202,\r\n       0.32660964])\r\n```\r\n\r\nIsn't this infinitely more useful than the probability of being alive being 1 for all these first time customers?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/211", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/211/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/211/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/211", "id": 365304876, "node_id": "MDU6SXNzdWUzNjUzMDQ4NzY=", "number": 211, "title": "Can I use negative monetary_value  to fit GammaGammaFitter & calculate CLV?", "user": {"login": "yanwu0105", "id": 22611187, "node_id": "MDQ6VXNlcjIyNjExMTg3", "avatar_url": "https://avatars1.githubusercontent.com/u/22611187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanwu0105", "html_url": "https://github.com/yanwu0105", "followers_url": "https://api.github.com/users/yanwu0105/followers", "following_url": "https://api.github.com/users/yanwu0105/following{/other_user}", "gists_url": "https://api.github.com/users/yanwu0105/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanwu0105/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanwu0105/subscriptions", "organizations_url": "https://api.github.com/users/yanwu0105/orgs", "repos_url": "https://api.github.com/users/yanwu0105/repos", "events_url": "https://api.github.com/users/yanwu0105/events{/privacy}", "received_events_url": "https://api.github.com/users/yanwu0105/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1446970546, "node_id": "MDU6TGFiZWwxNDQ2OTcwNTQ2", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/theory", "name": "theory", "color": "cc317c", "default": false, "description": "not really a question about the library, but of the underlying concepts"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-10-01T04:29:08Z", "updated_at": "2019-08-22T11:35:09Z", "closed_at": "2019-08-22T11:35:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my project, I will use the net profit to be monetary_value .\r\nSo monetary_value  have some negative, but it will be error.\r\nhow can I use negative monetary_value  to fit GammaGammaFitter & calculate CLV?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/210", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/210/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/210/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/210", "id": 365234473, "node_id": "MDU6SXNzdWUzNjUyMzQ0NzM=", "number": 210, "title": "SQL operations based on ('r', 'alpha', 'a', 'b')", "user": {"login": "Trollgeir", "id": 7591857, "node_id": "MDQ6VXNlcjc1OTE4NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7591857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Trollgeir", "html_url": "https://github.com/Trollgeir", "followers_url": "https://api.github.com/users/Trollgeir/followers", "following_url": "https://api.github.com/users/Trollgeir/following{/other_user}", "gists_url": "https://api.github.com/users/Trollgeir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Trollgeir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Trollgeir/subscriptions", "organizations_url": "https://api.github.com/users/Trollgeir/orgs", "repos_url": "https://api.github.com/users/Trollgeir/repos", "events_url": "https://api.github.com/users/Trollgeir/events{/privacy}", "received_events_url": "https://api.github.com/users/Trollgeir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669283870, "node_id": "MDU6TGFiZWw2NjkyODM4NzA=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": "about code documentation or the readthedocs"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-30T15:37:57Z", "updated_at": "2019-08-22T11:37:28Z", "closed_at": "2019-08-22T11:37:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I already have the RFM generation streamlined in my database. However I'm interested in taking it to the next level..\r\n\r\nDoes anyone know how feasible it is to do SQL table updates based on the parameters derived from the BetaGeoFitter? I'm aiming to do daily updates of predictions on customer data in standard SQL operations to avoid hassle with python/container jobs in my ETL.\r\n\r\nSpecifically I'm referring to the function `conditional_expected_number_of_purchases_up_to_time()` for the `BetaGeoFitter`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/209", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/209/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/209/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/209", "id": 363937932, "node_id": "MDU6SXNzdWUzNjM5Mzc5MzI=", "number": 209, "title": "question about \"Conditional expected number of purchases up to time\"", "user": {"login": "yanwu0105", "id": 22611187, "node_id": "MDQ6VXNlcjIyNjExMTg3", "avatar_url": "https://avatars1.githubusercontent.com/u/22611187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanwu0105", "html_url": "https://github.com/yanwu0105", "followers_url": "https://api.github.com/users/yanwu0105/followers", "following_url": "https://api.github.com/users/yanwu0105/following{/other_user}", "gists_url": "https://api.github.com/users/yanwu0105/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanwu0105/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanwu0105/subscriptions", "organizations_url": "https://api.github.com/users/yanwu0105/orgs", "repos_url": "https://api.github.com/users/yanwu0105/repos", "events_url": "https://api.github.com/users/yanwu0105/events{/privacy}", "received_events_url": "https://api.github.com/users/yanwu0105/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-26T09:34:15Z", "updated_at": "2018-11-02T15:49:46Z", "closed_at": "2018-11-02T15:49:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "in this function \"BetaGeoFitter.conditional_expected_number_of_purchases_up_to_time\"\r\n\r\nif  t =1,  result = 0.7\r\nHow to explain the result?\r\nis 0.7 times will buy in the next period?\r\nor \r\n the next period have 0.7 probability will buy ?\r\n\r\nand how to explain  the t= 2 ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/207", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/207/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/207/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/207", "id": 360533026, "node_id": "MDU6SXNzdWUzNjA1MzMwMjY=", "number": 207, "title": "plot_period_transactions with low \"s\" parameter ", "user": {"login": "JJDS0", "id": 43294408, "node_id": "MDQ6VXNlcjQzMjk0NDA4", "avatar_url": "https://avatars0.githubusercontent.com/u/43294408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JJDS0", "html_url": "https://github.com/JJDS0", "followers_url": "https://api.github.com/users/JJDS0/followers", "following_url": "https://api.github.com/users/JJDS0/following{/other_user}", "gists_url": "https://api.github.com/users/JJDS0/gists{/gist_id}", "starred_url": "https://api.github.com/users/JJDS0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JJDS0/subscriptions", "organizations_url": "https://api.github.com/users/JJDS0/orgs", "repos_url": "https://api.github.com/users/JJDS0/repos", "events_url": "https://api.github.com/users/JJDS0/events{/privacy}", "received_events_url": "https://api.github.com/users/JJDS0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-09-15T11:47:22Z", "updated_at": "2019-07-26T10:05:04Z", "closed_at": "2019-03-01T14:50:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI have problem with plot_period_transactions for estimated Pareto/NBD parameters. \r\nParameters:\r\n```\r\nOrderedDict([('r', 1.2264068998969124),\r\n             ('alpha', 12.16294151917949),\r\n             ('s', 4.6377925306795664e-10),\r\n             ('beta', 32.52434379061591)])\r\n```\r\n\r\nI get this error message:\r\n```\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\lifetimes\\generate_data.py:105: RuntimeWarning: divide by zero encountered in double_scalars\r\n  time_of_death = stats.expon.rvs(scale=1. / mu)\r\n```\r\n\r\nI think this issue comes with \"s\" parameter, which is extreamly low. Could you confirm it? Is it bug or I do something wrong?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/204", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/204/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/204/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/204", "id": 356566981, "node_id": "MDU6SXNzdWUzNTY1NjY5ODE=", "number": 204, "title": "ValueError: level name Customer Number is not the name of the index", "user": {"login": "BadrulAlom", "id": 11902526, "node_id": "MDQ6VXNlcjExOTAyNTI2", "avatar_url": "https://avatars0.githubusercontent.com/u/11902526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BadrulAlom", "html_url": "https://github.com/BadrulAlom", "followers_url": "https://api.github.com/users/BadrulAlom/followers", "following_url": "https://api.github.com/users/BadrulAlom/following{/other_user}", "gists_url": "https://api.github.com/users/BadrulAlom/gists{/gist_id}", "starred_url": "https://api.github.com/users/BadrulAlom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BadrulAlom/subscriptions", "organizations_url": "https://api.github.com/users/BadrulAlom/orgs", "repos_url": "https://api.github.com/users/BadrulAlom/repos", "events_url": "https://api.github.com/users/BadrulAlom/events{/privacy}", "received_events_url": "https://api.github.com/users/BadrulAlom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-09-03T17:08:23Z", "updated_at": "2019-03-07T19:40:08Z", "closed_at": "2019-03-07T19:40:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some reason my transaction_data worked with the first data extraction example, but when I tried the hold out method it failed with the error: **ValueError: level name Customer Number is not the name of the index**\r\n\r\nMy ID is 'customer number' and this is a text field.\r\nFor reference, here is the line of code that worked fine\r\nsummary = summary_data_from_transaction_data(transaction_data, 'Customer Number', 'DAXDate', observation_period_end='2018-01-01')\r\n\r\n**Error output:**\r\n```\r\n line 76, in ProcessSalesData\r\n    summary_cal_holdout = calibration_and_holdout_data(transaction_data, 'Customer Number', 'DAXDate',calibration_period_end='2017-10-01',observation_period_end='2017-07-01' )\r\n  \r\nline 91, in calibration_and_holdout_data\r\n    .groupby(level=customer_id_col).agg(['count'])\r\n  File \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\core\\generic.py\", line 6659, in groupby\r\n    observed=observed, **kwargs)\r\n  File \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\core\\groupby\\groupby.py\", line 2152, in groupby\r\n    return klass(obj, by, **kwds)\r\n  File \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\core\\groupby\\groupby.py\", line 599, in __init__\r\n    mutated=self.mutated)\r\n  File \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\core\\groupby\\groupby.py\", line 3177, in _get_grouper\r\n    'index' % level)\r\nValueError: level name Customer Number is not the name of the index\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/202", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/202/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/202/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/202", "id": 345294475, "node_id": "MDU6SXNzdWUzNDUyOTQ0NzU=", "number": 202, "title": "Should we be fitting parameters in the log space?", "user": {"login": "zscore", "id": 2708796, "node_id": "MDQ6VXNlcjI3MDg3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2708796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zscore", "html_url": "https://github.com/zscore", "followers_url": "https://api.github.com/users/zscore/followers", "following_url": "https://api.github.com/users/zscore/following{/other_user}", "gists_url": "https://api.github.com/users/zscore/gists{/gist_id}", "starred_url": "https://api.github.com/users/zscore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zscore/subscriptions", "organizations_url": "https://api.github.com/users/zscore/orgs", "repos_url": "https://api.github.com/users/zscore/repos", "events_url": "https://api.github.com/users/zscore/events{/privacy}", "received_events_url": "https://api.github.com/users/zscore/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-27T16:44:59Z", "updated_at": "2019-03-07T19:40:08Z", "closed_at": "2019-03-07T19:40:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the R version of the BGBB fitter, they log the parameters before using L-BFGS-B to estimate it: https://github.com/cran/BTYD/blob/master/R/bgbb.R#L79-L84", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/199", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/199/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/199/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/199", "id": 336036254, "node_id": "MDU6SXNzdWUzMzYwMzYyNTQ=", "number": 199, "title": "summary_data_from_transaction_data failed to pick Customer ID", "user": {"login": "fangfangwan29", "id": 40374369, "node_id": "MDQ6VXNlcjQwMzc0MzY5", "avatar_url": "https://avatars2.githubusercontent.com/u/40374369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangfangwan29", "html_url": "https://github.com/fangfangwan29", "followers_url": "https://api.github.com/users/fangfangwan29/followers", "following_url": "https://api.github.com/users/fangfangwan29/following{/other_user}", "gists_url": "https://api.github.com/users/fangfangwan29/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangfangwan29/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangfangwan29/subscriptions", "organizations_url": "https://api.github.com/users/fangfangwan29/orgs", "repos_url": "https://api.github.com/users/fangfangwan29/repos", "events_url": "https://api.github.com/users/fangfangwan29/events{/privacy}", "received_events_url": "https://api.github.com/users/fangfangwan29/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-27T00:26:13Z", "updated_at": "2018-06-27T13:53:53Z", "closed_at": "2018-06-27T13:53:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI try to use this function to transform data into the structure, but it couldn't pick customer Id. \r\n\r\nHere is the data and code I used,\r\n```python\r\nprint(df.head())\r\n     cust        date   sales\r\n0  437639  2018-04-01   7.408\r\n1  587146  2018-04-01   8.889\r\n2  587146  2018-04-01  17.551\r\n3  619023  2018-04-01   2.500\r\n4  102422  2018-04-01   3.200\r\nsummary = summary_data_from_transaction_data(df, 'cust', 'date', 'sales', observation_period_end='2018-05-31')\r\nprint(summary.head(10))\r\n      frequency  recency      T  monetary_value\r\ncust\r\n3           0.0      0.0   73.0          0.0000\r\n4           3.0    113.0  128.0         11.7310\r\n5           0.0      0.0  115.0          0.0000\r\n6           1.0     23.0  133.0         16.9900\r\n7           7.0    167.0  174.0         34.7240\r\n```\r\n\r\n\r\nThe cust column seems to be rearranged\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/196", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/196/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/196/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/196", "id": 331839714, "node_id": "MDU6SXNzdWUzMzE4Mzk3MTQ=", "number": 196, "title": "monetary_value", "user": {"login": "biaodianfu", "id": 1089064, "node_id": "MDQ6VXNlcjEwODkwNjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1089064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/biaodianfu", "html_url": "https://github.com/biaodianfu", "followers_url": "https://api.github.com/users/biaodianfu/followers", "following_url": "https://api.github.com/users/biaodianfu/following{/other_user}", "gists_url": "https://api.github.com/users/biaodianfu/gists{/gist_id}", "starred_url": "https://api.github.com/users/biaodianfu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/biaodianfu/subscriptions", "organizations_url": "https://api.github.com/users/biaodianfu/orgs", "repos_url": "https://api.github.com/users/biaodianfu/repos", "events_url": "https://api.github.com/users/biaodianfu/events{/privacy}", "received_events_url": "https://api.github.com/users/biaodianfu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1446970546, "node_id": "MDU6TGFiZWwxNDQ2OTcwNTQ2", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/theory", "name": "theory", "color": "cc317c", "default": false, "description": "not really a question about the library, but of the underlying concepts"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-13T04:43:01Z", "updated_at": "2019-08-22T12:25:50Z", "closed_at": "2019-08-22T12:25:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I don't quite understand how `monetary_value` is calculated in `summary_data_from_transaction_data()`.\r\n\r\n```python\r\nif monetary_value_col:\r\n\r\n        # create an index of all the first purchases\r\n        first_purchases = repeated_transactions[repeated_transactions['first']].index\r\n\r\n        # by setting the monetary_value cells of all the first purchases to NaN,\r\n        # those values will be excluded from the mean value calculation\r\n        repeated_transactions.loc[first_purchases, monetary_value_col] = np.nan\r\n        customers['monetary_value'] = repeated_transactions.groupby(customer_id_col)[monetary_value_col].mean().fillna(0)\r\n        summary_columns.append('monetary_value')\r\n```\r\n\r\nIs there anyone who can help to explain why setting the `monetary_value` cells of all the first purchases to `NaN`? \r\n\r\nWhy not use this:\r\n\r\n```sql\r\nSUM(PRICE_TOTAL)/COUNT(distinct TRANS_DATE) AS monetary_value\r\n\r\n(CASE \r\n    WHEN COUNT(distinct TRANS_DATE)-1=0 THEN 0 \r\n    ELSE SUM(PRICE_TOTAL)/COUNT(distinct TRANS_DATE) END) AS monetary_value\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/195", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/195/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/195/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/195", "id": 325068154, "node_id": "MDU6SXNzdWUzMjUwNjgxNTQ=", "number": 195, "title": "Faster data generation with numpy instead of scipy", "user": {"login": "wcbeard", "id": 379413, "node_id": "MDQ6VXNlcjM3OTQxMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/379413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wcbeard", "html_url": "https://github.com/wcbeard", "followers_url": "https://api.github.com/users/wcbeard/followers", "following_url": "https://api.github.com/users/wcbeard/following{/other_user}", "gists_url": "https://api.github.com/users/wcbeard/gists{/gist_id}", "starred_url": "https://api.github.com/users/wcbeard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wcbeard/subscriptions", "organizations_url": "https://api.github.com/users/wcbeard/orgs", "repos_url": "https://api.github.com/users/wcbeard/repos", "events_url": "https://api.github.com/users/wcbeard/events{/privacy}", "received_events_url": "https://api.github.com/users/wcbeard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-21T21:38:18Z", "updated_at": "2019-01-07T15:59:08Z", "closed_at": "2019-01-07T15:59:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "While playing around with #190, I found that the scipy number generator is the major bottleneck in [`pareto_nbd_model`](https://github.com/CamDavidsonPilon/lifetimes/blob/ad5d08f67283433ab647e33ed71255d9255bf731/lifetimes/generate_data.py#L112) (`next_purchase_in = stats.expon.rvs(scale=1. / l)`). This wouldn't be a problem, except that it's in a nested loop (~sample size x time of death), so it gets called a bunch of times on the large data set that I'm trying to generate.\r\n\r\nI looked at some alternatives in [this notebook](https://gist.github.com/wcbeard/a53cd9028a6d27b0a45db488b52d09a7). Numba is probably too heavy of a dependency but thought I'd include it for comparison.\r\n\r\nThe two main alternatives that I found were to replace `stats.expon.rvs(scale=1.0)` with a) `np.random.exponential(scale=1.0)` and b) a python generator function that uses `np.random.exponential(scale=1.0, size=100)` to generate a 100-length array and then yield an element each time it's iterated. The general wrapper for numpy distributions is \r\n\r\n```python\r\ndef rand_vec_gen(np_dist, size=100, **kw):\r\n    while 1:\r\n        arr = np_dist(size=size, **kw)\r\n        for e in arr:\r\n            yield e\r\n```\r\n\r\nHere's the timing performance plot:\r\n\r\n![perf](https://user-images.githubusercontent.com/379413/40330984-db1978ca-5d1c-11e8-9376-2bd7370f2b13.png)\r\n\r\nand here's the log-log scale version:\r\n\r\n![perf](https://user-images.githubusercontent.com/379413/40331014-f32aa826-5d1c-11e8-83db-0130595c35bb.png)\r\n\r\nUsing numpy one number at a time gives more than an order of magnitude increase in performance over scipy, and vectorizing numpy with the generator gives another OOM improvement (this is about the same as just wrapping numpy with a numba JIT decorator).\r\n\r\nAt the end of the notebook, I included a comparison of the generated values just to check that they all agree (which they do for larger N).\r\n\r\nIt could be worth it to replace all of the scipy calls inside the for-loops with one of these numpy versions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/194", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/194/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/194/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/194", "id": 324769306, "node_id": "MDU6SXNzdWUzMjQ3NjkzMDY=", "number": 194, "title": "CLV calculation assumes underlying data uses \"day\" as period", "user": {"login": "cliffordlyon", "id": 33696181, "node_id": "MDQ6VXNlcjMzNjk2MTgx", "avatar_url": "https://avatars3.githubusercontent.com/u/33696181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cliffordlyon", "html_url": "https://github.com/cliffordlyon", "followers_url": "https://api.github.com/users/cliffordlyon/followers", "following_url": "https://api.github.com/users/cliffordlyon/following{/other_user}", "gists_url": "https://api.github.com/users/cliffordlyon/gists{/gist_id}", "starred_url": "https://api.github.com/users/cliffordlyon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cliffordlyon/subscriptions", "organizations_url": "https://api.github.com/users/cliffordlyon/orgs", "repos_url": "https://api.github.com/users/cliffordlyon/repos", "events_url": "https://api.github.com/users/cliffordlyon/events{/privacy}", "received_events_url": "https://api.github.com/users/cliffordlyon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-21T02:33:52Z", "updated_at": "2019-03-07T19:41:56Z", "closed_at": "2019-03-07T19:41:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems as if here:\r\n\r\nhttps://github.com/CamDavidsonPilon/lifetimes/blob/master/lifetimes/utils.py#L417\r\n\r\nthat the CLV calculation is assuming the underlying summary information uses \"day\" as a time unit, and so makes adjustments to transform from days to months in the sum by incrementing by steps of 30. However, if the underlying data used \"week\", e.g., as in the CDNOW example, the CLV for 12 months would instead be calculated for 12 * 30 weeks or 7 years. Wouldn't it make more sense to have `t` simply be the periods, and let the user specify whether it is 12 months, or 52 weeks, or whatever they need?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/192", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/192/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/192/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/192/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/192", "id": 323259322, "node_id": "MDU6SXNzdWUzMjMyNTkzMjI=", "number": 192, "title": "Train/Test/Validate with BetaGeoFitter", "user": {"login": "lexykassan", "id": 7309624, "node_id": "MDQ6VXNlcjczMDk2MjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/7309624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lexykassan", "html_url": "https://github.com/lexykassan", "followers_url": "https://api.github.com/users/lexykassan/followers", "following_url": "https://api.github.com/users/lexykassan/following{/other_user}", "gists_url": "https://api.github.com/users/lexykassan/gists{/gist_id}", "starred_url": "https://api.github.com/users/lexykassan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lexykassan/subscriptions", "organizations_url": "https://api.github.com/users/lexykassan/orgs", "repos_url": "https://api.github.com/users/lexykassan/repos", "events_url": "https://api.github.com/users/lexykassan/events{/privacy}", "received_events_url": "https://api.github.com/users/lexykassan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-05-15T15:04:36Z", "updated_at": "2018-05-23T21:19:18Z", "closed_at": "2018-05-23T21:19:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am looking to do a train/test/validate on subsets of my data. Is there a means of using the existing functions for this? Maybe a variant of calibration_and_holdout_data?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/191", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/191/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/191/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/191", "id": 322514332, "node_id": "MDU6SXNzdWUzMjI1MTQzMzI=", "number": 191, "title": "Can the BG/BB fitter be used to predict at the individual level? ", "user": {"login": "clausherther", "id": 7342749, "node_id": "MDQ6VXNlcjczNDI3NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7342749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clausherther", "html_url": "https://github.com/clausherther", "followers_url": "https://api.github.com/users/clausherther/followers", "following_url": "https://api.github.com/users/clausherther/following{/other_user}", "gists_url": "https://api.github.com/users/clausherther/gists{/gist_id}", "starred_url": "https://api.github.com/users/clausherther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clausherther/subscriptions", "organizations_url": "https://api.github.com/users/clausherther/orgs", "repos_url": "https://api.github.com/users/clausherther/repos", "events_url": "https://api.github.com/users/clausherther/events{/privacy}", "received_events_url": "https://api.github.com/users/clausherther/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-12T14:09:20Z", "updated_at": "2018-11-22T15:27:45Z", "closed_at": "2018-11-22T15:27:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Following the original paper and the API for the `BetaGeoBetaBinomFitter`, it looks like (unlike the other fitters such as the `BetaGeoFitter`) this one requires **aggregate** data as input. As a result, the calculated probabilities and conditional values are for a combination of R and F, not the individual customer. (Also, there does not seem to be a `predict` method).\r\nIs there a way to use this fitter at the individual level?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/190", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/190/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/190/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/190", "id": 322035316, "node_id": "MDU6SXNzdWUzMjIwMzUzMTY=", "number": 190, "title": "Using pre-scaled params makes ParetoNBDFitter.generate_new_data slow", "user": {"login": "wcbeard", "id": 379413, "node_id": "MDQ6VXNlcjM3OTQxMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/379413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wcbeard", "html_url": "https://github.com/wcbeard", "followers_url": "https://api.github.com/users/wcbeard/followers", "following_url": "https://api.github.com/users/wcbeard/following{/other_user}", "gists_url": "https://api.github.com/users/wcbeard/gists{/gist_id}", "starred_url": "https://api.github.com/users/wcbeard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wcbeard/subscriptions", "organizations_url": "https://api.github.com/users/wcbeard/orgs", "repos_url": "https://api.github.com/users/wcbeard/repos", "events_url": "https://api.github.com/users/wcbeard/events{/privacy}", "received_events_url": "https://api.github.com/users/wcbeard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-10T18:32:06Z", "updated_at": "2018-05-21T21:16:14Z", "closed_at": "2018-05-21T21:16:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "`generate_new_data` is dynamically created around [here](https://github.com/CamDavidsonPilon/lifetimes/blob/ad5d08f67283433ab647e33ed71255d9255bf731/lifetimes/fitters/pareto_nbd_fitter.py#L116) as\r\n\r\n```\r\nself.generate_new_data = lambda size=1: pareto_nbd_model(T, *params,\r\n                                                                 size=size)\r\n```\r\n\r\nafter alpha/beta get rescaled as\r\n\r\n```\r\nself.params_['alpha'] /= self._scale\r\nself.params_['beta'] /= self._scale\r\n```\r\nIn my particular case, these unscaled parameters make the sampling _super_ slow, getting caught around generate_data.pareto_nbd_model:\r\n\r\n```\r\n        # hacky until I can find something better\r\n        times = []\r\n        next_purchase_in = stats.expon.rvs(scale=1. / l)\r\n        while np.sum(times) + next_purchase_in < min(time_of_death, T[i]):\r\n            times.append(next_purchase_in)\r\n            next_purchase_in = stats.expon.rvs(scale=1. / l)\r\n```\r\n\r\nWhen I sample w/ the scaled parameters (`model.params_`), it samples plausible results in much better time.\r\n\r\nThis could all be moot, though, if the sampling with the scaled parameters is incorrect.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/189", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/189/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/189/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/189", "id": 321910094, "node_id": "MDU6SXNzdWUzMjE5MTAwOTQ=", "number": 189, "title": "Advice for inverse frequency distribution", "user": {"login": "EamonKeane", "id": 1946655, "node_id": "MDQ6VXNlcjE5NDY2NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1946655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EamonKeane", "html_url": "https://github.com/EamonKeane", "followers_url": "https://api.github.com/users/EamonKeane/followers", "following_url": "https://api.github.com/users/EamonKeane/following{/other_user}", "gists_url": "https://api.github.com/users/EamonKeane/gists{/gist_id}", "starred_url": "https://api.github.com/users/EamonKeane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EamonKeane/subscriptions", "organizations_url": "https://api.github.com/users/EamonKeane/orgs", "repos_url": "https://api.github.com/users/EamonKeane/repos", "events_url": "https://api.github.com/users/EamonKeane/events{/privacy}", "received_events_url": "https://api.github.com/users/EamonKeane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-10T12:12:49Z", "updated_at": "2018-05-14T08:02:06Z", "closed_at": "2018-05-14T08:02:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Thanks again for an excellent library. Works a charm on taxi trip customer data for customer loyalty.\r\n\r\nI'm hoping to use this for a second purpose of predicting driver loyalty and after trying a few different fitters it doesn't seem to work. So if this is the wrong use of the data please let me know or if you could point me in the right direction that would be great.\r\n\r\nI have a population of 1500 drivers over 20 months with the following distribution of trips.\r\n\r\n<img width=\"410\" alt=\"screen shot 2018-05-10 at 13 06 33\" src=\"https://user-images.githubusercontent.com/1946655/39868931-a84b34b4-5453-11e8-9a0d-61d12c3d6135.png\">\r\n\r\nThe models all fit some variety of this (penalizer_coef=0 for bgf, pNBD, mbgf):\r\n\r\n<img width=\"400\" alt=\"screen shot 2018-05-10 at 13 08 53\" src=\"https://user-images.githubusercontent.com/1946655/39868936-aceb338e-5453-11e8-8e5c-72059559697f.png\">\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/186", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/186/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/186/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/186", "id": 318238455, "node_id": "MDU6SXNzdWUzMTgyMzg0NTU=", "number": 186, "title": "pin /set lower bound of libs in requirements.txt", "user": {"login": "CamDavidsonPilon", "id": 884032, "node_id": "MDQ6VXNlcjg4NDAzMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/884032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CamDavidsonPilon", "html_url": "https://github.com/CamDavidsonPilon", "followers_url": "https://api.github.com/users/CamDavidsonPilon/followers", "following_url": "https://api.github.com/users/CamDavidsonPilon/following{/other_user}", "gists_url": "https://api.github.com/users/CamDavidsonPilon/gists{/gist_id}", "starred_url": "https://api.github.com/users/CamDavidsonPilon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CamDavidsonPilon/subscriptions", "organizations_url": "https://api.github.com/users/CamDavidsonPilon/orgs", "repos_url": "https://api.github.com/users/CamDavidsonPilon/repos", "events_url": "https://api.github.com/users/CamDavidsonPilon/events{/privacy}", "received_events_url": "https://api.github.com/users/CamDavidsonPilon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-27T00:19:29Z", "updated_at": "2019-01-07T15:59:08Z", "closed_at": "2019-01-07T15:59:08Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/185", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/185/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/185/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/185", "id": 318111301, "node_id": "MDU6SXNzdWUzMTgxMTEzMDE=", "number": 185, "title": "prepare for 0.9.1 release", "user": {"login": "CamDavidsonPilon", "id": 884032, "node_id": "MDQ6VXNlcjg4NDAzMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/884032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CamDavidsonPilon", "html_url": "https://github.com/CamDavidsonPilon", "followers_url": "https://api.github.com/users/CamDavidsonPilon/followers", "following_url": "https://api.github.com/users/CamDavidsonPilon/following{/other_user}", "gists_url": "https://api.github.com/users/CamDavidsonPilon/gists{/gist_id}", "starred_url": "https://api.github.com/users/CamDavidsonPilon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CamDavidsonPilon/subscriptions", "organizations_url": "https://api.github.com/users/CamDavidsonPilon/orgs", "repos_url": "https://api.github.com/users/CamDavidsonPilon/repos", "events_url": "https://api.github.com/users/CamDavidsonPilon/events{/privacy}", "received_events_url": "https://api.github.com/users/CamDavidsonPilon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-26T16:42:17Z", "updated_at": "2018-06-14T02:07:34Z", "closed_at": "2018-06-14T02:07:34Z", "author_association": "OWNER", "active_lock_reason": null, "body": " - create changelog entry from recent commits\r\n - follow practices for lifelines releases (see #175)\r\n -  ... ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/184", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/184/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/184/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/184", "id": 316793518, "node_id": "MDU6SXNzdWUzMTY3OTM1MTg=", "number": 184, "title": "Frequency, Recency and T from summary_data_from_transaction_data method", "user": {"login": "billy-odera", "id": 12785557, "node_id": "MDQ6VXNlcjEyNzg1NTU3", "avatar_url": "https://avatars3.githubusercontent.com/u/12785557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/billy-odera", "html_url": "https://github.com/billy-odera", "followers_url": "https://api.github.com/users/billy-odera/followers", "following_url": "https://api.github.com/users/billy-odera/following{/other_user}", "gists_url": "https://api.github.com/users/billy-odera/gists{/gist_id}", "starred_url": "https://api.github.com/users/billy-odera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/billy-odera/subscriptions", "organizations_url": "https://api.github.com/users/billy-odera/orgs", "repos_url": "https://api.github.com/users/billy-odera/repos", "events_url": "https://api.github.com/users/billy-odera/events{/privacy}", "received_events_url": "https://api.github.com/users/billy-odera/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-23T12:37:45Z", "updated_at": "2018-04-27T00:21:23Z", "closed_at": "2018-04-27T00:21:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have tried to use the summary_data_from_transaction_data to calculate the frequency,recency and Age but the values are completely off. \r\nCode:\r\n```\r\ndata = summary_data_from_transaction_data(df, 'cus_id', \r\n                                          'buy_date', monetary_value_col='amount', \r\n                                           observation_period_end='2017-12-31', freq='D')\r\n```\r\nThis is the output\r\n```\r\n\t      frequency\t   recency\t          T\t           monetary_value\r\ncus_id\t\t\t\t\r\n1\t       3.0\t           43.0\t        203.0\t      150.0\r\n2\t       0.0\t           0.0\t        282.0\t       0.0\r\n3\t       4.0\t           76.0\t        362.0\t       375.0\r\n4\t       4.0\t           284.0\t        284.0\t       52.5\r\n5\t       0.0\t           0.0\t        363.0\t       0.0\r\n```\r\nThis is the df head\r\n```\r\n           Cus_id\tbuy date   \tamount\r\n0\t7\t\t2017-08-10\t15.0\t\r\n1\t7\t\t2017-12-02\t15.0\t\r\n2\t7\t\t2017-04-27\t15.0\t\r\n3\t7\t\t2017-02-11\t15.0\t\r\n4\t7\t        2017-03-03\t15.0\t\r\n```\r\nif i look at customer id 1 he has 8 transaction, i expect his frequency to be 7 but the method gives 3. Why?\r\n\r\ncustomer id 1 data from the csv\r\n```\r\ncus_id| buy_date| amount \r\n1 | 2017-06-11 |  75.0  \r\n1 | 2017-07-24 | 75.0 \r\n1 | 2017-07-08 | 75.0\r\n1 | 2017-06-24 |  75.0\r\n1 | 2017-07-24 | 75.0\r\n1 | 2017-06-11 |  75.0\r\n1 | 2017-07-08 | 75.0\r\n1 | 2017-06-24 | 175.0 \r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/180", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/180/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/180/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/180", "id": 312913228, "node_id": "MDU6SXNzdWUzMTI5MTMyMjg=", "number": 180, "title": "How does Customer_lifetime_value work?", "user": {"login": "Tobiasv-b", "id": 38249628, "node_id": "MDQ6VXNlcjM4MjQ5NjI4", "avatar_url": "https://avatars3.githubusercontent.com/u/38249628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tobiasv-b", "html_url": "https://github.com/Tobiasv-b", "followers_url": "https://api.github.com/users/Tobiasv-b/followers", "following_url": "https://api.github.com/users/Tobiasv-b/following{/other_user}", "gists_url": "https://api.github.com/users/Tobiasv-b/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tobiasv-b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tobiasv-b/subscriptions", "organizations_url": "https://api.github.com/users/Tobiasv-b/orgs", "repos_url": "https://api.github.com/users/Tobiasv-b/repos", "events_url": "https://api.github.com/users/Tobiasv-b/events{/privacy}", "received_events_url": "https://api.github.com/users/Tobiasv-b/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161473685, "node_id": "MDU6TGFiZWwxNjE0NzM2ODU=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "necessarily a mistake, improvements or other ways to do it should go elsewhere"}, {"id": 1447308925, "node_id": "MDU6TGFiZWwxNDQ3MzA4OTI1", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/use%20case", "name": "use case", "color": "bfdadc", "default": false, "description": "help with a use case scenario"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-10T13:03:58Z", "updated_at": "2019-08-31T01:07:52Z", "closed_at": "2019-03-07T19:50:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm having trouble understanding the GammaGammaFitter function **customer_lifetime_value**.\r\n\r\nIn the [Lifetimes documentation](http://lifetimes.readthedocs.io/en/latest/Quickstart.html#estimating-customer-lifetime-value-using-the-gamma-gamma-model), the CLV of customer_id 1 is calculated to 1      140.096211 for time = 12 and discount_rate=0.01 used in the documentation.\r\n\r\nGiven that the conditional average expected profit is 24.658619, doesn't that assume that customer 1 will make ~140/25 = 5.6 purchases in the 12 coming months? Given that the customer made 2 repeat purchases in the calibration period, doesn't 5.6 seem too high?\r\n\r\nShouldn't CLV simply be equal to expected number of transaction in holdout period * conditional average expected profit, if ignoring the discount rate? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/178", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/178/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/178/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/178", "id": 311131968, "node_id": "MDU6SXNzdWUzMTExMzE5Njg=", "number": 178, "title": "How to calculate expected lifetime length?", "user": {"login": "limziwang", "id": 32086443, "node_id": "MDQ6VXNlcjMyMDg2NDQz", "avatar_url": "https://avatars3.githubusercontent.com/u/32086443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/limziwang", "html_url": "https://github.com/limziwang", "followers_url": "https://api.github.com/users/limziwang/followers", "following_url": "https://api.github.com/users/limziwang/following{/other_user}", "gists_url": "https://api.github.com/users/limziwang/gists{/gist_id}", "starred_url": "https://api.github.com/users/limziwang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/limziwang/subscriptions", "organizations_url": "https://api.github.com/users/limziwang/orgs", "repos_url": "https://api.github.com/users/limziwang/repos", "events_url": "https://api.github.com/users/limziwang/events{/privacy}", "received_events_url": "https://api.github.com/users/limziwang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669283870, "node_id": "MDU6TGFiZWw2NjkyODM4NzA=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": "about code documentation or the readthedocs"}, {"id": 1446970546, "node_id": "MDU6TGFiZWwxNDQ2OTcwNTQ2", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/theory", "name": "theory", "color": "cc317c", "default": false, "description": "not really a question about the library, but of the underlying concepts"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-04T08:27:50Z", "updated_at": "2019-08-22T15:02:00Z", "closed_at": "2019-08-22T15:02:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am following the example in the [readthedocs link](http://lifetimes.readthedocs.io/en/latest/Quickstart.html#the-gamma-gamma-model-and-the-independence-assumption), and I noticed that the 'time = 12' parameter is up to us to decide. How is this usually calculated?\r\n\r\nCan someone please teach me how I should go about deriving this number?\r\n\r\nThank you!\r\n\r\n```python\r\npd.DataFrame(\r\n    ggf.customer_lifetime_value(\r\n        transaction_prediction_model= bgf, #the model to use to predict the number of future transactions\r\n        frequency= data['frequency'],\r\n        recency= data['recency'],\r\n        T= data['T'],\r\n        monetary_value = summary_with_money_value['monetary_value'],\r\n        time=12, # the lifetime expected for the user in months. Default: 12\r\n        discount_rate=0.01 #  the monthly adjusted discount rate. Default: 0.01\r\n))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/177", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/177/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/177/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/177", "id": 309353510, "node_id": "MDU6SXNzdWUzMDkzNTM1MTA=", "number": 177, "title": "Please continue offering source packages (.tar.gz) in addition to .whl", "user": {"login": "barrywhart", "id": 1678585, "node_id": "MDQ6VXNlcjE2Nzg1ODU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1678585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barrywhart", "html_url": "https://github.com/barrywhart", "followers_url": "https://api.github.com/users/barrywhart/followers", "following_url": "https://api.github.com/users/barrywhart/following{/other_user}", "gists_url": "https://api.github.com/users/barrywhart/gists{/gist_id}", "starred_url": "https://api.github.com/users/barrywhart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barrywhart/subscriptions", "organizations_url": "https://api.github.com/users/barrywhart/orgs", "repos_url": "https://api.github.com/users/barrywhart/repos", "events_url": "https://api.github.com/users/barrywhart/events{/privacy}", "received_events_url": "https://api.github.com/users/barrywhart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-03-28T12:51:44Z", "updated_at": "2018-06-14T02:07:47Z", "closed_at": "2018-06-14T02:07:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Wheels are definitely better when they are supported. I have run across a situation where they apparently aren't supported: When I try and use Lifetimes on [Google Cloud DataFlow](https://cloud.google.com/dataflow/), it apparently ignores wheels, so I have to use Lifetimes 0.8.0.0 or earlier. I tried to install wheel before installing Lifetimes, but was unable to get it to work. (Because DataFlow is serverless, the options for customizing the environment are pretty limited.)\r\n\r\nFor now, I think I can work around this by building a source package myself and uploading it with the job.\r\n\r\nIf you can give me a little guidance on the packaging process for Lifetimes, I will be happy to submit a PR for this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/175", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/175/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/175/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/175", "id": 308404479, "node_id": "MDU6SXNzdWUzMDg0MDQ0Nzk=", "number": 175, "title": "There's no way in git to determine what code was in prior releases.", "user": {"login": "barrywhart", "id": 1678585, "node_id": "MDQ6VXNlcjE2Nzg1ODU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1678585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barrywhart", "html_url": "https://github.com/barrywhart", "followers_url": "https://api.github.com/users/barrywhart/followers", "following_url": "https://api.github.com/users/barrywhart/following{/other_user}", "gists_url": "https://api.github.com/users/barrywhart/gists{/gist_id}", "starred_url": "https://api.github.com/users/barrywhart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barrywhart/subscriptions", "organizations_url": "https://api.github.com/users/barrywhart/orgs", "repos_url": "https://api.github.com/users/barrywhart/repos", "events_url": "https://api.github.com/users/barrywhart/events{/privacy}", "received_events_url": "https://api.github.com/users/barrywhart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-26T01:04:46Z", "updated_at": "2018-06-14T02:07:55Z", "closed_at": "2018-06-14T02:07:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could you create a git tag or branch for each release? Often, it is helpful to know what code makes up a particular release (e.g. to know if a release contains a particular issue and/or fix).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/173", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/173/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/173/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/173", "id": 306109372, "node_id": "MDU6SXNzdWUzMDYxMDkzNzI=", "number": 173, "title": "Interpretation of P(alive) for one-time customers", "user": {"login": "mszep", "id": 734695, "node_id": "MDQ6VXNlcjczNDY5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/734695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mszep", "html_url": "https://github.com/mszep", "followers_url": "https://api.github.com/users/mszep/followers", "following_url": "https://api.github.com/users/mszep/following{/other_user}", "gists_url": "https://api.github.com/users/mszep/gists{/gist_id}", "starred_url": "https://api.github.com/users/mszep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mszep/subscriptions", "organizations_url": "https://api.github.com/users/mszep/orgs", "repos_url": "https://api.github.com/users/mszep/repos", "events_url": "https://api.github.com/users/mszep/events{/privacy}", "received_events_url": "https://api.github.com/users/mszep/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-17T00:02:46Z", "updated_at": "2018-03-23T17:13:06Z", "closed_at": "2018-03-23T17:13:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've noticed a strange behaviour in the behaviour of the `conditional_probability_alive` method of the `ModifiedBetaGeoFitter` class. I'm not sure if it's a shortcoming in the model or implementation, a data issue or a mistake I'm making, but I'm hoping someone has seen this type of result before and can help me along.\r\n\r\nThe problem lies in the distributions I'm getting for the values of P(alive) across customers. The following plot illustrates the issue:\r\n![screenshot from 2018-03-16 23-58-16](https://user-images.githubusercontent.com/734695/37549237-f71d4194-2975-11e8-8f4b-51e8401118d8.png)\r\n\r\nThe fairly smooth behaviour for high values of P(alive) is intuitively understandable, but the bulge around P(alive)=0.3 and the sharp cutoff is unexpected. Inspection reveals that the bulge is composed of customers who have made a single purchase, since it disappears when plotting only repeat customers:\r\n![screenshot from 2018-03-16 23-58-25](https://user-images.githubusercontent.com/734695/37549243-fcbb16ee-2975-11e8-827c-e1f4e34447fa.png)\r\n\r\nThe cliff on the left side of the bulge is composed of customers who made their single purchase near the beginning of the observation period, and the customers get more recent as you move right within the bulge.\r\n\r\nThis distribution of P(alive) for one-time customers doesn't seem to me to be an accurate or useful representation of these customers' probability of being alive, but the issue crops up across datasets so I'm wondering if:\r\n\r\n- There is anything incorrect or implausible about my interpretation\r\n- This is a known issue with this type of model\r\n- There are any known workarounds or fixes\r\n\r\nAny other thoughts or suggestions would be very welcome.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/172", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/172/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/172/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/172", "id": 305724819, "node_id": "MDU6SXNzdWUzMDU3MjQ4MTk=", "number": 172, "title": "Negative values for monetary_value?", "user": {"login": "nuochen", "id": 7774791, "node_id": "MDQ6VXNlcjc3NzQ3OTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7774791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nuochen", "html_url": "https://github.com/nuochen", "followers_url": "https://api.github.com/users/nuochen/followers", "following_url": "https://api.github.com/users/nuochen/following{/other_user}", "gists_url": "https://api.github.com/users/nuochen/gists{/gist_id}", "starred_url": "https://api.github.com/users/nuochen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nuochen/subscriptions", "organizations_url": "https://api.github.com/users/nuochen/orgs", "repos_url": "https://api.github.com/users/nuochen/repos", "events_url": "https://api.github.com/users/nuochen/events{/privacy}", "received_events_url": "https://api.github.com/users/nuochen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-15T21:24:34Z", "updated_at": "2018-04-27T00:02:38Z", "closed_at": "2018-04-27T00:02:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a reason why the monetary_value cannot take negative values? With cost of marketing and production factored in, some customers indeed generate negative monetary values. Thanks! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/171", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/171/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/171/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/171", "id": 305594847, "node_id": "MDU6SXNzdWUzMDU1OTQ4NDc=", "number": 171, "title": "Data generation method for BetaGeoBetaBinomFitter?", "user": {"login": "zscore", "id": 2708796, "node_id": "MDQ6VXNlcjI3MDg3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2708796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zscore", "html_url": "https://github.com/zscore", "followers_url": "https://api.github.com/users/zscore/followers", "following_url": "https://api.github.com/users/zscore/following{/other_user}", "gists_url": "https://api.github.com/users/zscore/gists{/gist_id}", "starred_url": "https://api.github.com/users/zscore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zscore/subscriptions", "organizations_url": "https://api.github.com/users/zscore/orgs", "repos_url": "https://api.github.com/users/zscore/repos", "events_url": "https://api.github.com/users/zscore/events{/privacy}", "received_events_url": "https://api.github.com/users/zscore/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-15T15:13:57Z", "updated_at": "2018-04-27T00:00:59Z", "closed_at": "2018-04-27T00:00:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there a reason why no data generation method has been implemented yet aside from lack of interest? If not, I can code something up.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/169", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/169/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/169/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/169", "id": 303455384, "node_id": "MDU6SXNzdWUzMDM0NTUzODQ=", "number": 169, "title": "BetaGeoFitter.conditional_probability_alive returns 0D-array, not float", "user": {"login": "mszep", "id": 734695, "node_id": "MDQ6VXNlcjczNDY5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/734695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mszep", "html_url": "https://github.com/mszep", "followers_url": "https://api.github.com/users/mszep/followers", "following_url": "https://api.github.com/users/mszep/following{/other_user}", "gists_url": "https://api.github.com/users/mszep/gists{/gist_id}", "starred_url": "https://api.github.com/users/mszep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mszep/subscriptions", "organizations_url": "https://api.github.com/users/mszep/orgs", "repos_url": "https://api.github.com/users/mszep/repos", "events_url": "https://api.github.com/users/mszep/events{/privacy}", "received_events_url": "https://api.github.com/users/mszep/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-08T11:58:50Z", "updated_at": "2019-03-07T19:40:08Z", "closed_at": "2019-03-07T19:40:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "The docstring mentions that the return type of `BetaGeoFitter.conditional_probability_alive` is `float`, but when passing values from DataFrames, the result is actually a 0-dimensional `ndarray`:\r\n\r\n```\r\nIn [101]: bgf = BetaGeoFitter()\r\n\r\nIn [102]: df = load_cdnow_summary()\r\n\r\nIn [103]: bgf.fit(df['frequency'],df['recency'],df['T'])\r\nOut[103]: <lifetimes.BetaGeoFitter: fitted with 2357 subjects, a: 0.79, alpha: 4.41, b: 2.43, r: 0.24>\r\n\r\nIn [104]: bgf.conditional_probability_alive(df.iloc[0]['frequency'],df.iloc[0]['recency'\r\n     ...: ],df.iloc[0]['T'])\r\nOut[104]: array(0.7266095443377226)\r\n\r\nIn [105]: \r\n```\r\n\r\nThe same method in other fitters seem to all have forms that would indeed return `float`s, but I haven't tested that explicitly.\r\n\r\nI can make a PR where either the docstring is altered, or the return value is wrapped with `float()`; any thoughts on which would be preferable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/162", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/162/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/162/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/162", "id": 287833497, "node_id": "MDU6SXNzdWUyODc4MzM0OTc=", "number": 162, "title": "GammaGammaFitter fit() slow for empty dataframe", "user": {"login": "felixlehmann", "id": 10515844, "node_id": "MDQ6VXNlcjEwNTE1ODQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/10515844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixlehmann", "html_url": "https://github.com/felixlehmann", "followers_url": "https://api.github.com/users/felixlehmann/followers", "following_url": "https://api.github.com/users/felixlehmann/following{/other_user}", "gists_url": "https://api.github.com/users/felixlehmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixlehmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixlehmann/subscriptions", "organizations_url": "https://api.github.com/users/felixlehmann/orgs", "repos_url": "https://api.github.com/users/felixlehmann/repos", "events_url": "https://api.github.com/users/felixlehmann/events{/privacy}", "received_events_url": "https://api.github.com/users/felixlehmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-11T16:03:45Z", "updated_at": "2018-01-12T10:16:44Z", "closed_at": "2018-01-12T10:16:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm using lifetimes for an automated CLV calculation.\r\n\r\nSimple problem: sometimes I get datasets without rebuyers. But data is sitll valuable.\r\nThe app applies the GammaGammaFitter.fit() method on an empty dataframe.\r\n\r\nAs far as I understand, I can't skip GammaGammaFitter.fit(), because it's the precondition for GammaGammaFitter.customer_lifetime_value().\r\n\r\nUpdate:\r\nMy solution for now is to add `iterative_fitting=1` and `maxiter=1` to fit() in case of having an empty dataframe.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/160", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/160/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/160/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/160", "id": 285072598, "node_id": "MDU6SXNzdWUyODUwNzI1OTg=", "number": 160, "title": "customer_lifetime_value() method now name _customer_lifetime_value() in utils.py", "user": {"login": "ruojol", "id": 33889712, "node_id": "MDQ6VXNlcjMzODg5NzEy", "avatar_url": "https://avatars1.githubusercontent.com/u/33889712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruojol", "html_url": "https://github.com/ruojol", "followers_url": "https://api.github.com/users/ruojol/followers", "following_url": "https://api.github.com/users/ruojol/following{/other_user}", "gists_url": "https://api.github.com/users/ruojol/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruojol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruojol/subscriptions", "organizations_url": "https://api.github.com/users/ruojol/orgs", "repos_url": "https://api.github.com/users/ruojol/repos", "events_url": "https://api.github.com/users/ruojol/events{/privacy}", "received_events_url": "https://api.github.com/users/ruojol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-29T10:47:09Z", "updated_at": "2019-03-07T19:50:59Z", "closed_at": "2019-03-07T19:50:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Keep running to this error:\r\n\r\n~/anaconda3/envs/DataScienceEnv/lib/python3.6/site-packages/clv/utils.py in clv_from_rfm(df, start_date, end_date, forecast_days, save_clv, clv_save_path)\r\n    441 \r\n    442     # CLV value is discounted in weekly periods\r\n--> 443     df['clv'] = lifetimes.utils._customer_lifetime_value(\r\n    444         transaction_prediction_model=bgf,\r\n    445         frequency=df['frequency'],\r\n\r\nNameError: name 'customer_lifetime_value' is not defined\r\n\r\nalthough lifetimes.utils._customer_lifetime_value() shift+tab brings up the legend correctly in ipython", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/154", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/154/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/154/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/154", "id": 284460057, "node_id": "MDU6SXNzdWUyODQ0NjAwNTc=", "number": 154, "title": "what is difference with Survival analysis", "user": {"login": "Sandy4321", "id": 11426119, "node_id": "MDQ6VXNlcjExNDI2MTE5", "avatar_url": "https://avatars0.githubusercontent.com/u/11426119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sandy4321", "html_url": "https://github.com/Sandy4321", "followers_url": "https://api.github.com/users/Sandy4321/followers", "following_url": "https://api.github.com/users/Sandy4321/following{/other_user}", "gists_url": "https://api.github.com/users/Sandy4321/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sandy4321/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sandy4321/subscriptions", "organizations_url": "https://api.github.com/users/Sandy4321/orgs", "repos_url": "https://api.github.com/users/Sandy4321/repos", "events_url": "https://api.github.com/users/Sandy4321/events{/privacy}", "received_events_url": "https://api.github.com/users/Sandy4321/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-25T17:03:19Z", "updated_at": "2018-01-18T11:36:55Z", "closed_at": "2017-12-30T04:26:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for your video about HR Building People Analytics - Keynote Cameron Davidson-Pilon\r\nsorry for simple question, but regarding to this video\r\nwhat is difference of lifetimes with Survival analysis\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/152", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/152/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/152/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/152", "id": 282796946, "node_id": "MDU6SXNzdWUyODI3OTY5NDY=", "number": 152, "title": "expected_cumulative_transactions will calculate actual transactions incorrectly", "user": {"login": "patng323", "id": 4714791, "node_id": "MDQ6VXNlcjQ3MTQ3OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/4714791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patng323", "html_url": "https://github.com/patng323", "followers_url": "https://api.github.com/users/patng323/followers", "following_url": "https://api.github.com/users/patng323/following{/other_user}", "gists_url": "https://api.github.com/users/patng323/gists{/gist_id}", "starred_url": "https://api.github.com/users/patng323/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patng323/subscriptions", "organizations_url": "https://api.github.com/users/patng323/orgs", "repos_url": "https://api.github.com/users/patng323/repos", "events_url": "https://api.github.com/users/patng323/events{/privacy}", "received_events_url": "https://api.github.com/users/patng323/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-18T08:19:41Z", "updated_at": "2018-02-03T18:22:55Z", "closed_at": "2018-02-03T18:22:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "While I am using plot_cumulative_transactions, I think I found a bug in utils.expected_cumulative_transactions.\r\n\r\nLet's say I want to build a beta_geo_fitter model, and freq='D'.  First I will call utils.summary_data_from_transaction_data to summarize my transaction.  That function will treat transactions which happened on the **same** day as one transaction when it calculates _frequency_.  \r\n\r\nLater on, when I call plot_cumulative_transactions, I see that it calls utils.expected_cumulative_transactions, but that function will treat multiple transactions happening on the same day as multiple transactions (see the line below).\r\n\r\n`act_transactions = (transactions_current.groupby(customer_id_col).size() - 1).sum()`\r\n\r\nAs a result, the actual and expected lines I got from plot_cumulative_transactions look very different.  I worked around this by calling df.drop_duplicates([customer_id_col, date_col]) on my transaction dataframe first before I call plot_cumulative_transactions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/151", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/151/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/151/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/151", "id": 278691436, "node_id": "MDU6SXNzdWUyNzg2OTE0MzY=", "number": 151, "title": "plot_frequency_recency_matrix is plotting black and white without legends", "user": {"login": "lyleaf", "id": 6929618, "node_id": "MDQ6VXNlcjY5Mjk2MTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6929618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lyleaf", "html_url": "https://github.com/lyleaf", "followers_url": "https://api.github.com/users/lyleaf/followers", "following_url": "https://api.github.com/users/lyleaf/following{/other_user}", "gists_url": "https://api.github.com/users/lyleaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/lyleaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lyleaf/subscriptions", "organizations_url": "https://api.github.com/users/lyleaf/orgs", "repos_url": "https://api.github.com/users/lyleaf/repos", "events_url": "https://api.github.com/users/lyleaf/events{/privacy}", "received_events_url": "https://api.github.com/users/lyleaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-12-02T15:18:48Z", "updated_at": "2018-03-07T22:03:34Z", "closed_at": "2017-12-03T11:39:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using plot_frequency_recency_matrix to plot my bgf but here is my result:\r\n\r\nhttps://storage.googleapis.com/pizzahutnz/bgf.png\r\n\r\nAny thing wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/150", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/150/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/150/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/150", "id": 278624277, "node_id": "MDU6SXNzdWUyNzg2MjQyNzc=", "number": 150, "title": "What is a time period?", "user": {"login": "SreyaG", "id": 24440654, "node_id": "MDQ6VXNlcjI0NDQwNjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/24440654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SreyaG", "html_url": "https://github.com/SreyaG", "followers_url": "https://api.github.com/users/SreyaG/followers", "following_url": "https://api.github.com/users/SreyaG/following{/other_user}", "gists_url": "https://api.github.com/users/SreyaG/gists{/gist_id}", "starred_url": "https://api.github.com/users/SreyaG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SreyaG/subscriptions", "organizations_url": "https://api.github.com/users/SreyaG/orgs", "repos_url": "https://api.github.com/users/SreyaG/repos", "events_url": "https://api.github.com/users/SreyaG/events{/privacy}", "received_events_url": "https://api.github.com/users/SreyaG/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669283870, "node_id": "MDU6TGFiZWw2NjkyODM4NzA=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": "about code documentation or the readthedocs"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-01T23:13:01Z", "updated_at": "2019-08-23T11:19:20Z", "closed_at": "2019-08-23T11:19:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I apologize for this naive question:\r\nWhat is a time period in this context? My best answer is its a week, for the CDNOW data-set, so if a had my data in days it would be a day. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/148", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/148/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/148/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/148", "id": 275671003, "node_id": "MDU6SXNzdWUyNzU2NzEwMDM=", "number": 148, "title": "Typo in README", "user": {"login": "gtjemwa", "id": 1063142, "node_id": "MDQ6VXNlcjEwNjMxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1063142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gtjemwa", "html_url": "https://github.com/gtjemwa", "followers_url": "https://api.github.com/users/gtjemwa/followers", "following_url": "https://api.github.com/users/gtjemwa/following{/other_user}", "gists_url": "https://api.github.com/users/gtjemwa/gists{/gist_id}", "starred_url": "https://api.github.com/users/gtjemwa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gtjemwa/subscriptions", "organizations_url": "https://api.github.com/users/gtjemwa/orgs", "repos_url": "https://api.github.com/users/gtjemwa/repos", "events_url": "https://api.github.com/users/gtjemwa/events{/privacy}", "received_events_url": "https://api.github.com/users/gtjemwa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-21T11:05:59Z", "updated_at": "2017-11-23T07:37:07Z", "closed_at": "2017-11-23T07:37:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Documentation is incorrectly spelt as \"Documenation\" in a section heading", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/147", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/147/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/147/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/147", "id": 271682324, "node_id": "MDU6SXNzdWUyNzE2ODIzMjQ=", "number": 147, "title": "Address the many numpy warnings", "user": {"login": "CamDavidsonPilon", "id": 884032, "node_id": "MDQ6VXNlcjg4NDAzMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/884032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CamDavidsonPilon", "html_url": "https://github.com/CamDavidsonPilon", "followers_url": "https://api.github.com/users/CamDavidsonPilon/followers", "following_url": "https://api.github.com/users/CamDavidsonPilon/following{/other_user}", "gists_url": "https://api.github.com/users/CamDavidsonPilon/gists{/gist_id}", "starred_url": "https://api.github.com/users/CamDavidsonPilon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CamDavidsonPilon/subscriptions", "organizations_url": "https://api.github.com/users/CamDavidsonPilon/orgs", "repos_url": "https://api.github.com/users/CamDavidsonPilon/repos", "events_url": "https://api.github.com/users/CamDavidsonPilon/events{/privacy}", "received_events_url": "https://api.github.com/users/CamDavidsonPilon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-07T01:45:11Z", "updated_at": "2018-04-24T05:37:26Z", "closed_at": "2018-04-24T05:37:26Z", "author_association": "OWNER", "active_lock_reason": null, "body": "```\r\ntests/test_estimation.py::TestBetaGeoBetaBinomFitter::()::test_params_out_is_close_to_Hardie_paper\r\n  /home/travis/build/CamDavidsonPilon/lifetimes/lifetimes/fitters/beta_geo_beta_binom_fitter.py:71: RuntimeWarning: divide by zero encountered in log\r\n    betaln(gamma + 1, delta + tx + j) - beta_gd)))\r\ntests/test_estimation.py::TestBetaGeoBetaBinomFitter::()::test_prob_alive_is_close_to_Hardie_paper_table_6\r\n  /home/travis/build/CamDavidsonPilon/lifetimes/lifetimes/fitters/beta_geo_beta_binom_fitter.py:71: RuntimeWarning: divide by zero encountered in log\r\n    betaln(gamma + 1, delta + tx + j) - beta_gd)))\r\ntests/test_estimation.py::TestBetaGeoBetaBinomFitter::()::test_conditional_expectation_returns_same_value_as_Hardie_excel_sheet\r\n  /home/travis/build/CamDavidsonPilon/lifetimes/lifetimes/fitters/beta_geo_beta_binom_fitter.py:71: RuntimeWarning: divide by zero encountered in log\r\n    betaln(gamma + 1, delta + tx + j) - beta_gd)))\r\ntests/test_estimation.py::TestBetaGeoBetaBinomFitter::()::test_expected_purchases_in_n_periods_returns_same_value_as_Hardie_excel_sheet\r\n  /home/travis/build/CamDavidsonPilon/lifetimes/lifetimes/fitters/beta_geo_beta_binom_fitter.py:71: RuntimeWarning: divide by zero encountered in log\r\n    betaln(gamma + 1, delta + tx + j) - beta_gd)))\r\ntests/test_estimation.py::TestBetaGeoBetaBinomFitter::()::test_fit_with_index\r\n  /home/travis/build/CamDavidsonPilon/lifetimes/lifetimes/fitters/beta_geo_beta_binom_fitter.py:71: RuntimeWarning: divide by zero encountered in log\r\n    betaln(gamma + 1, delta + tx + j) - beta_gd)))\r\ntests/test_estimation.py::TestParetoNBDFitter::()::test_conditional_probability_alive_overflow_error\r\n  /home/travis/build/CamDavidsonPilon/lifetimes/lifetimes/fitters/pareto_nbd_fitter.py:236: RuntimeWarning: overflow encountered in power\r\n    (alpha + T) ** (r + x) * (beta + T) ** s * A_0)\r\n-- Docs: http://doc.pytest.org/en/latest/warnings.html\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/146", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/146/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/146/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/146", "id": 271678712, "node_id": "MDU6SXNzdWUyNzE2Nzg3MTI=", "number": 146, "title": "My clv is coming wrong. It comes negative for many customers. Can you please suggest.", "user": {"login": "jasminesethi11", "id": 27746975, "node_id": "MDQ6VXNlcjI3NzQ2OTc1", "avatar_url": "https://avatars1.githubusercontent.com/u/27746975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasminesethi11", "html_url": "https://github.com/jasminesethi11", "followers_url": "https://api.github.com/users/jasminesethi11/followers", "following_url": "https://api.github.com/users/jasminesethi11/following{/other_user}", "gists_url": "https://api.github.com/users/jasminesethi11/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasminesethi11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasminesethi11/subscriptions", "organizations_url": "https://api.github.com/users/jasminesethi11/orgs", "repos_url": "https://api.github.com/users/jasminesethi11/repos", "events_url": "https://api.github.com/users/jasminesethi11/events{/privacy}", "received_events_url": "https://api.github.com/users/jasminesethi11/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2017-11-07T01:23:23Z", "updated_at": "2019-01-07T15:59:08Z", "closed_at": "2019-01-07T15:59:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom lifetimes import GammaGammaFitter\r\nggf = GammaGammaFitter(penalizer_coef = 0)\r\nggf.fit(df['x'], df['Margin'])\r\ndf['clv'] = 0.0\r\nresults = {}\r\nresults_pnbd_p\t= {}\r\nfor i in prodname:\r\n    temp= df[df[\"PROD_MODEL\"]==i]\r\n    ggf = GammaGammaFitter(penalizer_coef = 0)\r\n    ggf.fit(temp['x'], temp['Margin'])\r\n    pnbd = ParetoNBDFitter()\r\n    mod = pnbd.fit(temp['x'], temp['t_x'], temp['T'])\r\n    results[i] = mod.params_.values()\r\n   \r\n    try:\r\n      temp['clv'] = ggf.customer_lifetime_value(mod, #the model to use to predict the number of future transactions\r\n                                                      temp['x'], temp['t_x'], temp['T'], temp['Margin'],\r\n                                                      time=12, # months\r\n                                                      discount_rate=0.1)\r\n    except:\r\n      continue\r\n    print i\r\n    print results\r\n    for j in temp.index:\r\n      df.ix[j,'clv'] = temp['clv'][j]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/144", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/144/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/144/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/144", "id": 270917066, "node_id": "MDU6SXNzdWUyNzA5MTcwNjY=", "number": 144, "title": "conditional_expected_number_of_purchases_up_to_time shows weird values for ParetoNBDFitter", "user": {"login": "mwrabel", "id": 17828920, "node_id": "MDQ6VXNlcjE3ODI4OTIw", "avatar_url": "https://avatars3.githubusercontent.com/u/17828920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwrabel", "html_url": "https://github.com/mwrabel", "followers_url": "https://api.github.com/users/mwrabel/followers", "following_url": "https://api.github.com/users/mwrabel/following{/other_user}", "gists_url": "https://api.github.com/users/mwrabel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwrabel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwrabel/subscriptions", "organizations_url": "https://api.github.com/users/mwrabel/orgs", "repos_url": "https://api.github.com/users/mwrabel/repos", "events_url": "https://api.github.com/users/mwrabel/events{/privacy}", "received_events_url": "https://api.github.com/users/mwrabel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-03T09:23:23Z", "updated_at": "2017-12-29T02:30:33Z", "closed_at": "2017-12-29T02:30:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that conditional_expected_number_of_purchases_up_to_time method works weird for ParetoNBDFitter. Users with positive frequency and recency experience near zero estimate for predicted purchases, while those with frequency and recency =0 have higher values of predicted purchases. Not sure if it's a bug though, are you able to confirm?\r\n\r\nYou can easily replicate this with code below:\r\n```python\r\nfrom lifetimes.datasets import load_cdnow_summary\r\ndata = load_cdnow_summary(index_col=[0])\r\n\r\nprint(data.head())\r\n\r\nfrom lifetimes import BetaGeoFitter\r\nfrom lifetimes import ParetoNBDFitter\r\n\r\nbgf = BetaGeoFitter(penalizer_coef=0.0) # 0.001 to 0.1 are effective (L2 regularization)\r\nbgf.fit(data['frequency'], data['recency'], data['T'])\r\nprint(bgf)\r\npnbd = ParetoNBDFitter(penalizer_coef=0.0) # 0.001 to 0.1 are effective (L2 regularization)\r\npnbd.fit(data['frequency'], data['recency'], data['T'])\r\nprint(pnbd)\r\n\r\nt = 30\r\ndata['pred_purchases_1m_bgf'] = bgf.conditional_expected_number_of_purchases_up_to_time(t, data['frequency'], data['recency'], data['T'])\r\ndata['pred_purchases_1m_pnbd'] = pnbd.conditional_expected_number_of_purchases_up_to_time(t, data['frequency'], data['recency'], data['T'])\r\nprint data.head(20)\r\n```\r\n\r\n![result](https://user-images.githubusercontent.com/17828920/32366921-851fb9e0-c080-11e7-9130-276fd74b0a3f.JPG)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/143", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/143/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/143/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/143", "id": 270240603, "node_id": "MDU6SXNzdWUyNzAyNDA2MDM=", "number": 143, "title": "Divide by zero in BGBB fit", "user": {"login": "mtlotfizad", "id": 13979835, "node_id": "MDQ6VXNlcjEzOTc5ODM1", "avatar_url": "https://avatars3.githubusercontent.com/u/13979835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtlotfizad", "html_url": "https://github.com/mtlotfizad", "followers_url": "https://api.github.com/users/mtlotfizad/followers", "following_url": "https://api.github.com/users/mtlotfizad/following{/other_user}", "gists_url": "https://api.github.com/users/mtlotfizad/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtlotfizad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtlotfizad/subscriptions", "organizations_url": "https://api.github.com/users/mtlotfizad/orgs", "repos_url": "https://api.github.com/users/mtlotfizad/repos", "events_url": "https://api.github.com/users/mtlotfizad/events{/privacy}", "received_events_url": "https://api.github.com/users/mtlotfizad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-01T09:04:06Z", "updated_at": "2018-04-24T05:37:57Z", "closed_at": "2018-04-24T05:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "While fitting my model I encountered this error:\r\n.../beta_geo_beta_binom_fitter.py:71: RuntimeWarning: divide by zero encountered in log\r\n  betaln(gamma + 1, delta + tx + j) - beta_gd)))\r\n\r\nI call fit method with this code snippet: \r\n`summary = summary_data_from_transaction_data(transaction_data, 'customer_id', '_date')`\r\n`bgbf = BetaGeoBetaBinomFitter(penalizer_coef=0.1)`\r\n`summary_bgbf = summary.reset_index().summary_bgbf.groupby(['frequency', 'recency', 'T'])['customer_id'].agg(['count']).reset_index().astype(int)`\r\n`bgbf.fit(summary_bgbf['frequency'], summary_bgbf['recency'], summary_bgbf['T'], summary_bgbf['count'])`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/142", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/142/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/142/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/142", "id": 267773977, "node_id": "MDU6SXNzdWUyNjc3NzM5Nzc=", "number": 142, "title": "Can anyone help me to calculate PALIVE(the probability that they are still alive at the end of the calibration period.) in Python?", "user": {"login": "jasminesethi11", "id": 27746975, "node_id": "MDQ6VXNlcjI3NzQ2OTc1", "avatar_url": "https://avatars1.githubusercontent.com/u/27746975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasminesethi11", "html_url": "https://github.com/jasminesethi11", "followers_url": "https://api.github.com/users/jasminesethi11/followers", "following_url": "https://api.github.com/users/jasminesethi11/following{/other_user}", "gists_url": "https://api.github.com/users/jasminesethi11/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasminesethi11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasminesethi11/subscriptions", "organizations_url": "https://api.github.com/users/jasminesethi11/orgs", "repos_url": "https://api.github.com/users/jasminesethi11/repos", "events_url": "https://api.github.com/users/jasminesethi11/events{/privacy}", "received_events_url": "https://api.github.com/users/jasminesethi11/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-23T18:40:31Z", "updated_at": "2017-10-23T21:00:04Z", "closed_at": "2017-10-23T20:01:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know R has a Pareto negative binomial distribution function pnbd.PAlive(params, r, s, apha, beta) but what is similar to it in Python?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/141", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/141/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/141/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/141", "id": 267313155, "node_id": "MDU6SXNzdWUyNjczMTMxNTU=", "number": 141, "title": "palive", "user": {"login": "jasminesethi11", "id": 27746975, "node_id": "MDQ6VXNlcjI3NzQ2OTc1", "avatar_url": "https://avatars1.githubusercontent.com/u/27746975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasminesethi11", "html_url": "https://github.com/jasminesethi11", "followers_url": "https://api.github.com/users/jasminesethi11/followers", "following_url": "https://api.github.com/users/jasminesethi11/following{/other_user}", "gists_url": "https://api.github.com/users/jasminesethi11/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasminesethi11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasminesethi11/subscriptions", "organizations_url": "https://api.github.com/users/jasminesethi11/orgs", "repos_url": "https://api.github.com/users/jasminesethi11/repos", "events_url": "https://api.github.com/users/jasminesethi11/events{/privacy}", "received_events_url": "https://api.github.com/users/jasminesethi11/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-10-20T21:43:59Z", "updated_at": "2017-11-29T22:13:11Z", "closed_at": "2017-11-01T13:15:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to calculate Palive in python?\r\n In r it used to be done like this pnbd.PAlive(params, cal.cbs[, 1], cal.cbs[, 2], cal.cbs[, 3]). What is the similar syntax in python for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/139", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/139/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/139/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/139", "id": 261603587, "node_id": "MDU6SXNzdWUyNjE2MDM1ODc=", "number": 139, "title": "summary_data_from_transaction_data() misses lots of users", "user": {"login": "foreveryang0208", "id": 9613154, "node_id": "MDQ6VXNlcjk2MTMxNTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/9613154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/foreveryang0208", "html_url": "https://github.com/foreveryang0208", "followers_url": "https://api.github.com/users/foreveryang0208/followers", "following_url": "https://api.github.com/users/foreveryang0208/following{/other_user}", "gists_url": "https://api.github.com/users/foreveryang0208/gists{/gist_id}", "starred_url": "https://api.github.com/users/foreveryang0208/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/foreveryang0208/subscriptions", "organizations_url": "https://api.github.com/users/foreveryang0208/orgs", "repos_url": "https://api.github.com/users/foreveryang0208/repos", "events_url": "https://api.github.com/users/foreveryang0208/events{/privacy}", "received_events_url": "https://api.github.com/users/foreveryang0208/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-29T10:48:43Z", "updated_at": "2017-09-29T12:54:22Z", "closed_at": "2017-09-29T12:54:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Have anybody encountered the issue when after applying lifetimes.utils. summary_data_from_transaction_data function, the resulting rfm dataset only has parts of user being analysed, e.g.\r\n![lifetimes](https://user-images.githubusercontent.com/9613154/31012915-907bb9be-a50b-11e7-92e8-1a6c8a6cff08.png)\r\n\r\nI couldn't figure out why this has happened. I've checked the users who have been missed - their data doesn't look different from the captured ones. Is there something I've missed? \r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/138", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/138/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/138/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/138", "id": 261211396, "node_id": "MDU6SXNzdWUyNjEyMTEzOTY=", "number": 138, "title": "Getting probability of staying alive", "user": {"login": "Adnation", "id": 9931826, "node_id": "MDQ6VXNlcjk5MzE4MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/9931826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Adnation", "html_url": "https://github.com/Adnation", "followers_url": "https://api.github.com/users/Adnation/followers", "following_url": "https://api.github.com/users/Adnation/following{/other_user}", "gists_url": "https://api.github.com/users/Adnation/gists{/gist_id}", "starred_url": "https://api.github.com/users/Adnation/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Adnation/subscriptions", "organizations_url": "https://api.github.com/users/Adnation/orgs", "repos_url": "https://api.github.com/users/Adnation/repos", "events_url": "https://api.github.com/users/Adnation/events{/privacy}", "received_events_url": "https://api.github.com/users/Adnation/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-28T06:55:17Z", "updated_at": "2017-10-23T21:11:17Z", "closed_at": "2017-10-05T10:44:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way we can get the customer's probability of staying alive using BG/NBD model? Right now it gives us a plot but how about getting a number for each user?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/132", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/132/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/132/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/132", "id": 251374503, "node_id": "MDU6SXNzdWUyNTEzNzQ1MDM=", "number": 132, "title": "Memory exhaustion running lifetimes package for over 1 million transactions", "user": {"login": "harrisong", "id": 182082, "node_id": "MDQ6VXNlcjE4MjA4Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/182082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harrisong", "html_url": "https://github.com/harrisong", "followers_url": "https://api.github.com/users/harrisong/followers", "following_url": "https://api.github.com/users/harrisong/following{/other_user}", "gists_url": "https://api.github.com/users/harrisong/gists{/gist_id}", "starred_url": "https://api.github.com/users/harrisong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harrisong/subscriptions", "organizations_url": "https://api.github.com/users/harrisong/orgs", "repos_url": "https://api.github.com/users/harrisong/repos", "events_url": "https://api.github.com/users/harrisong/events{/privacy}", "received_events_url": "https://api.github.com/users/harrisong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-08-18T22:37:31Z", "updated_at": "2019-03-07T19:40:08Z", "closed_at": "2019-03-07T19:40:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was fiddling with the lifetimes package and tried to look into why it took so long when the number of transactions increases significantly. I could not get 1 million transactions to work, so I started to use less number of transactions. (around 100k)\r\n\r\nAnd when I try to do cProfile over the method calls, this is what I get.\r\n\r\n<img width=\"845\" alt=\"screen shot 2017-08-15 at 10 24 02 am\" src=\"https://user-images.githubusercontent.com/182082/29480048-87b9676a-842a-11e7-9624-f218c9b2ba36.png\">\r\n\r\nI realised that if I ran the BetaGeoFitter.fit and BetaGeoFitter.fit, the method took 50 seconds to compute, which is a big issue if the number of transactions get high enough.\r\n\r\nIs there anyway we can improve the performance of minimize() (line 308) in utils.py?\r\n\r\nP.S. I already tried to reduce maxiter from 2000 to 400. It helps a little but it does not help much in the context of 1 million transactions.\r\n\r\nThanks loads!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/124", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/124/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/124/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/124", "id": 246154555, "node_id": "MDU6SXNzdWUyNDYxNTQ1NTU=", "number": 124, "title": "Save models", "user": {"login": "lrargerich", "id": 7193221, "node_id": "MDQ6VXNlcjcxOTMyMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7193221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrargerich", "html_url": "https://github.com/lrargerich", "followers_url": "https://api.github.com/users/lrargerich/followers", "following_url": "https://api.github.com/users/lrargerich/following{/other_user}", "gists_url": "https://api.github.com/users/lrargerich/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrargerich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrargerich/subscriptions", "organizations_url": "https://api.github.com/users/lrargerich/orgs", "repos_url": "https://api.github.com/users/lrargerich/repos", "events_url": "https://api.github.com/users/lrargerich/events{/privacy}", "received_events_url": "https://api.github.com/users/lrargerich/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 669283870, "node_id": "MDU6TGFiZWw2NjkyODM4NzA=", "url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": "about code documentation or the readthedocs"}], "state": "closed", "locked": false, "assignee": {"login": "aprotopopov", "id": 6563045, "node_id": "MDQ6VXNlcjY1NjMwNDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6563045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aprotopopov", "html_url": "https://github.com/aprotopopov", "followers_url": "https://api.github.com/users/aprotopopov/followers", "following_url": "https://api.github.com/users/aprotopopov/following{/other_user}", "gists_url": "https://api.github.com/users/aprotopopov/gists{/gist_id}", "starred_url": "https://api.github.com/users/aprotopopov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aprotopopov/subscriptions", "organizations_url": "https://api.github.com/users/aprotopopov/orgs", "repos_url": "https://api.github.com/users/aprotopopov/repos", "events_url": "https://api.github.com/users/aprotopopov/events{/privacy}", "received_events_url": "https://api.github.com/users/aprotopopov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "aprotopopov", "id": 6563045, "node_id": "MDQ6VXNlcjY1NjMwNDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6563045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aprotopopov", "html_url": "https://github.com/aprotopopov", "followers_url": "https://api.github.com/users/aprotopopov/followers", "following_url": "https://api.github.com/users/aprotopopov/following{/other_user}", "gists_url": "https://api.github.com/users/aprotopopov/gists{/gist_id}", "starred_url": "https://api.github.com/users/aprotopopov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aprotopopov/subscriptions", "organizations_url": "https://api.github.com/users/aprotopopov/orgs", "repos_url": "https://api.github.com/users/aprotopopov/repos", "events_url": "https://api.github.com/users/aprotopopov/events{/privacy}", "received_events_url": "https://api.github.com/users/aprotopopov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2017-07-27T20:09:22Z", "updated_at": "2017-08-21T13:09:29Z", "closed_at": "2017-08-21T13:09:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, is there a quick way to save the models that take a long time to fit? The idea is to just save them and then use them...\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/107", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/107/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/107/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/107", "id": 237541320, "node_id": "MDU6SXNzdWUyMzc1NDEzMjA=", "number": 107, "title": "Optimizer for fit method", "user": {"login": "aprotopopov", "id": 6563045, "node_id": "MDQ6VXNlcjY1NjMwNDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6563045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aprotopopov", "html_url": "https://github.com/aprotopopov", "followers_url": "https://api.github.com/users/aprotopopov/followers", "following_url": "https://api.github.com/users/aprotopopov/following{/other_user}", "gists_url": "https://api.github.com/users/aprotopopov/gists{/gist_id}", "starred_url": "https://api.github.com/users/aprotopopov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aprotopopov/subscriptions", "organizations_url": "https://api.github.com/users/aprotopopov/orgs", "repos_url": "https://api.github.com/users/aprotopopov/repos", "events_url": "https://api.github.com/users/aprotopopov/events{/privacy}", "received_events_url": "https://api.github.com/users/aprotopopov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-21T13:50:21Z", "updated_at": "2017-06-25T18:12:14Z", "closed_at": "2017-06-25T18:12:14Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I found, that optimizer for `_fit` was changed from `minimize` to `fmin` in utils with [that commit](https://github.com/CamDavidsonPilon/lifetimes/commit/bc06a6c73932e888c034df1c6a596ca28375e728#diff-48a7adefd56b3316f39206b07dadd6f5). I have some questions: \r\n- why *Nelder-Mead* algorithm was finally chosen?\r\n- why `minimize` was changed to `fmin` while there are some notes about that in [scipy docs](https://docs.scipy.org/doc/scipy-0.19.0/reference/optimize.html):\r\n> The specific optimization method interfaces below in this subsection are not recommended for use in new scripts; all of these methods are accessible via a newer, more consistent interface provided by the functions above\r\n\r\nI'm also interesting in increasing training speed for model (BetaGeoFitter) because in my case I need to wait about 45 minutes to train (~15 mln records). On sample I saw that [SLSQP](https://docs.scipy.org/doc/scipy-0.19.0/reference/optimize.minimize-slsqp.html) was faster. Could it be used for training model or the are any pitfalls with that? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/103", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/103/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/103/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/103", "id": 233523775, "node_id": "MDU6SXNzdWUyMzM1MjM3NzU=", "number": 103, "title": "conditional_probability_alive in ModifiedBetaGeoFitter and BetaGeoFitter", "user": {"login": "aprotopopov", "id": 6563045, "node_id": "MDQ6VXNlcjY1NjMwNDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6563045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aprotopopov", "html_url": "https://github.com/aprotopopov", "followers_url": "https://api.github.com/users/aprotopopov/followers", "following_url": "https://api.github.com/users/aprotopopov/following{/other_user}", "gists_url": "https://api.github.com/users/aprotopopov/gists{/gist_id}", "starred_url": "https://api.github.com/users/aprotopopov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aprotopopov/subscriptions", "organizations_url": "https://api.github.com/users/aprotopopov/orgs", "repos_url": "https://api.github.com/users/aprotopopov/repos", "events_url": "https://api.github.com/users/aprotopopov/events{/privacy}", "received_events_url": "https://api.github.com/users/aprotopopov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-05T08:21:18Z", "updated_at": "2017-06-28T14:08:25Z", "closed_at": "2017-06-28T14:07:52Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "It's strange but there are different code realization for `conditional_probability_alive` for `ModifiedBetaGeoFitter` and `BetaGeoFitter` with the same link on [Computing P(alive) Using the BG/NBD Model](http://www.brucehardie.com/notes/021/palive_for_BGNBD.pdf):\r\n```\r\nclass BetaGeoFitter(BaseFitter):\r\n\r\n    def conditional_probability_alive(self, frequency, recency, T):\r\n        \"\"\"\r\n        Compute the probability that a customer with history (frequency, recency, T) is currently\r\n        alive. From http://www.brucehardie.com/notes/021/palive_for_BGNBD.pdf\r\n\r\n        Parameters:\r\n            frequency: a scalar: historical frequency of customer.\r\n            recency: a scalar: historical recency of customer.\r\n            T: a scalar: age of the customer.\r\n\r\n        Returns: a scalar\r\n\r\n        \"\"\"\r\n        r, alpha, a, b = self._unload_params('r', 'alpha', 'a', 'b')\r\n        return 1. / (1 + (frequency > 0) * (a / (b + frequency - 1)) * ((alpha + T) / (alpha + recency)) ** (r + frequency))\r\n\r\nclass ModifiedBetaGeoFitter(BetaGeoFitter):\r\n\r\n    def conditional_probability_alive(self, frequency, recency, T):\r\n        \"\"\"\r\n        Compute the probability that a customer with history (frequency, recency, T) is currently\r\n        alive. From http://www.brucehardie.com/notes/021/palive_for_BGNBD.pdf\r\n\r\n        Parameters:\r\n            frequency: a scalar: historical frequency of customer.\r\n            recency: a scalar: historical recency of customer.\r\n            T: a scalar: age of the customer.\r\n\r\n        Returns: a scalar\r\n\r\n        \"\"\"\r\n        r, alpha, a, b = self._unload_params('r', 'alpha', 'a', 'b')\r\n        return 1. / (1 + (a / (b + frequency)) * ((alpha + T) / (alpha + recency)) ** (r + frequency))\r\n```\r\n\r\n[conditional_probability_alive BetaGeoFitter](https://github.com/CamDavidsonPilon/lifetimes/blob/master/lifetimes/estimation.py#L622)\r\n\r\n[conditional_probability_alive ModifiedBetaGeoFitter](https://github.com/CamDavidsonPilon/lifetimes/blob/master/lifetimes/estimation.py#L777)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/100", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/100/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/100/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/100", "id": 232497752, "node_id": "MDU6SXNzdWUyMzI0OTc3NTI=", "number": 100, "title": "Summary transaction data round to whole periods not float", "user": {"login": "aprotopopov", "id": 6563045, "node_id": "MDQ6VXNlcjY1NjMwNDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6563045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aprotopopov", "html_url": "https://github.com/aprotopopov", "followers_url": "https://api.github.com/users/aprotopopov/followers", "following_url": "https://api.github.com/users/aprotopopov/following{/other_user}", "gists_url": "https://api.github.com/users/aprotopopov/gists{/gist_id}", "starred_url": "https://api.github.com/users/aprotopopov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aprotopopov/subscriptions", "organizations_url": "https://api.github.com/users/aprotopopov/orgs", "repos_url": "https://api.github.com/users/aprotopopov/repos", "events_url": "https://api.github.com/users/aprotopopov/events{/privacy}", "received_events_url": "https://api.github.com/users/aprotopopov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-31T08:52:47Z", "updated_at": "2018-04-24T05:32:36Z", "closed_at": "2018-04-24T05:32:36Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Tried to get RFM matrix from raw CDNOW transactions sample but without success with `summary_data_from_transaction_data` due to `to_freq` rounding to whole digits.  Do you have idea how to improve that? \r\nI came with hucky solution to set `freq='D'` and then divide `recency` and `T` on 7 to get appropriate numbers in function `summary_data_from_transaction_data` but it doesn't seem a good way to solve problems like that.\r\n\r\n```\r\nfrom lifetimes.datasets import load_transaction_data, load_cdnow_summary, load_dataset\r\nfrom lifetimes.utils import summary_data_from_transaction_data\r\n\r\ndf_cdnow_summary = load_cdnow_summary()\r\n\r\ntransactions = load_dataset('CDNOW_sample.txt', header=None, sep='\\s+')\r\ntransactions.columns = ['id_total', 'id_sample', 'date', 'num_cd_purc', 'total_value']\r\nsummary_trans = summary_data_from_transaction_data(transactions, 'id_sample', 'date', datetime_format='%Y%m%d', \r\n                                   observation_period_end='19970930', freq='W')\r\n\r\ndf_cdnow_summary.head()\r\n\"\"\"\r\n   ID  frequency  recency      T\r\n0   1          2    30.43  38.86\r\n1   2          1     1.71  38.86\r\n2   3          0     0.00  38.86\r\n3   4          0     0.00  38.86\r\n4   5          0     0.00  38.86\r\n\"\"\"\r\nsummary_trans.head()\r\n\"\"\"\r\n           frequency  recency     T\r\nid_sample                          \r\n1                2.0     30.0  39.0\r\n2                1.0      2.0  39.0\r\n3                0.0      0.0  39.0\r\n4                0.0      0.0  39.0\r\n5                0.0      0.0  39.0\r\n\"\"\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/99", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/99/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/99/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/99", "id": 231625405, "node_id": "MDU6SXNzdWUyMzE2MjU0MDU=", "number": 99, "title": "Cumulative Transactions Plot ", "user": {"login": "aprotopopov", "id": 6563045, "node_id": "MDQ6VXNlcjY1NjMwNDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6563045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aprotopopov", "html_url": "https://github.com/aprotopopov", "followers_url": "https://api.github.com/users/aprotopopov/followers", "following_url": "https://api.github.com/users/aprotopopov/following{/other_user}", "gists_url": "https://api.github.com/users/aprotopopov/gists{/gist_id}", "starred_url": "https://api.github.com/users/aprotopopov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aprotopopov/subscriptions", "organizations_url": "https://api.github.com/users/aprotopopov/orgs", "repos_url": "https://api.github.com/users/aprotopopov/repos", "events_url": "https://api.github.com/users/aprotopopov/events{/privacy}", "received_events_url": "https://api.github.com/users/aprotopopov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-26T13:23:16Z", "updated_at": "2017-05-31T12:56:13Z", "closed_at": "2017-05-31T12:56:13Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I think it'll be a good idea to also add Cumulative Transactions Plot like in R BTYD: https://rdrr.io/cran/BTYD/man/bgbb.PlotTrackingCum.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/97", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/97/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/97/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/97", "id": 222050695, "node_id": "MDU6SXNzdWUyMjIwNTA2OTU=", "number": 97, "title": "serialize the models better", "user": {"login": "CamDavidsonPilon", "id": 884032, "node_id": "MDQ6VXNlcjg4NDAzMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/884032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CamDavidsonPilon", "html_url": "https://github.com/CamDavidsonPilon", "followers_url": "https://api.github.com/users/CamDavidsonPilon/followers", "following_url": "https://api.github.com/users/CamDavidsonPilon/following{/other_user}", "gists_url": "https://api.github.com/users/CamDavidsonPilon/gists{/gist_id}", "starred_url": "https://api.github.com/users/CamDavidsonPilon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CamDavidsonPilon/subscriptions", "organizations_url": "https://api.github.com/users/CamDavidsonPilon/orgs", "repos_url": "https://api.github.com/users/CamDavidsonPilon/repos", "events_url": "https://api.github.com/users/CamDavidsonPilon/events{/privacy}", "received_events_url": "https://api.github.com/users/CamDavidsonPilon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-17T02:12:11Z", "updated_at": "2017-06-25T18:10:21Z", "closed_at": "2017-06-25T18:10:21Z", "author_association": "OWNER", "active_lock_reason": null, "body": "https://twitter.com/elesinOlalekan/status/853112408273031169", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/93", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/93/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/93/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/93", "id": 204964653, "node_id": "MDU6SXNzdWUyMDQ5NjQ2NTM=", "number": 93, "title": "ggf.customer_lifetime_value returns sum of CLV instead of CLV per customer_id", "user": {"login": "ronnyli", "id": 6841011, "node_id": "MDQ6VXNlcjY4NDEwMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6841011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronnyli", "html_url": "https://github.com/ronnyli", "followers_url": "https://api.github.com/users/ronnyli/followers", "following_url": "https://api.github.com/users/ronnyli/following{/other_user}", "gists_url": "https://api.github.com/users/ronnyli/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronnyli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronnyli/subscriptions", "organizations_url": "https://api.github.com/users/ronnyli/orgs", "repos_url": "https://api.github.com/users/ronnyli/repos", "events_url": "https://api.github.com/users/ronnyli/events{/privacy}", "received_events_url": "https://api.github.com/users/ronnyli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-02T19:00:36Z", "updated_at": "2017-02-02T19:38:04Z", "closed_at": "2017-02-02T19:30:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @CamDavidsonPilon, long time no see!\r\n\r\nJust wanted to point out an issue in the Quickstart tutorial in the Gamma-gamma model section. When I run the example code for `ggf.customer_lifetime_value` I get a single value (`1992970.28649` to be exact) instead of a column containing one prediction per customer like in the docs. To get an output similar to the docs I needed to do a groupby on `customer_id` and then apply `ggf.customer_lifetime_value` to each chunk, which is incredibly slow.\r\n\r\nHope this was helpful, keep up the good work!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/91", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/91/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/91/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/91", "id": 201919328, "node_id": "MDU6SXNzdWUyMDE5MTkzMjg=", "number": 91, "title": "Bug when there are multiple orders in same day", "user": {"login": "paoloRais", "id": 15232441, "node_id": "MDQ6VXNlcjE1MjMyNDQx", "avatar_url": "https://avatars1.githubusercontent.com/u/15232441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paoloRais", "html_url": "https://github.com/paoloRais", "followers_url": "https://api.github.com/users/paoloRais/followers", "following_url": "https://api.github.com/users/paoloRais/following{/other_user}", "gists_url": "https://api.github.com/users/paoloRais/gists{/gist_id}", "starred_url": "https://api.github.com/users/paoloRais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paoloRais/subscriptions", "organizations_url": "https://api.github.com/users/paoloRais/orgs", "repos_url": "https://api.github.com/users/paoloRais/repos", "events_url": "https://api.github.com/users/paoloRais/events{/privacy}", "received_events_url": "https://api.github.com/users/paoloRais/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-19T17:07:35Z", "updated_at": "2017-01-27T14:23:27Z", "closed_at": "2017-01-27T14:23:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current functions to obtain summary data from transaction data do not work properly when there is more than one order per day. For example:\r\n\r\n```\r\nimport pandas as pd\r\nfrom lifetimes.utils import summary_data_from_transaction_data\r\n\r\ntest = [{'id': 1, 'date':'2012-01-06'},\r\n        {'id': 1, 'date':'2012-01-06'}]\r\ntest = pd.DataFrame(test)\r\ntest['date'] = pd.to_datetime(test['date'])\r\nsummary = summary_data_from_transaction_data(test, 'id', 'date', observation_period_end='2012-12-31')\r\nprint(summary)\r\n\r\n\r\n```\r\nyields\r\n\r\nfrequency=1  recency=0      T=360, where frequency > recency. This is probably due to commit [ c05f88b ](https://github.com/CamDavidsonPilon/lifetimes/commit/08695a4eebd81510743404fef32e5a2dbf1ff01e).\r\n\r\nTo my knowledge, cases where frequency > recency will break the fitting procedure. I think that in the literature if there is more than one order during the same time unit, the second order is considered as a 'top up' and is merged with the first, i.e. the frequency is (number of unique dates) -1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/85", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/85/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/85/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/85", "id": 195433781, "node_id": "MDU6SXNzdWUxOTU0MzM3ODE=", "number": 85, "title": "summary_data_from_transaction_data implicitly requires Transaction Data to be sorted by date", "user": {"login": "aashanand", "id": 12959203, "node_id": "MDQ6VXNlcjEyOTU5MjAz", "avatar_url": "https://avatars1.githubusercontent.com/u/12959203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aashanand", "html_url": "https://github.com/aashanand", "followers_url": "https://api.github.com/users/aashanand/followers", "following_url": "https://api.github.com/users/aashanand/following{/other_user}", "gists_url": "https://api.github.com/users/aashanand/gists{/gist_id}", "starred_url": "https://api.github.com/users/aashanand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aashanand/subscriptions", "organizations_url": "https://api.github.com/users/aashanand/orgs", "repos_url": "https://api.github.com/users/aashanand/repos", "events_url": "https://api.github.com/users/aashanand/events{/privacy}", "received_events_url": "https://api.github.com/users/aashanand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-14T03:49:59Z", "updated_at": "2017-02-20T02:53:55Z", "closed_at": "2017-02-20T02:53:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "The utility summary_data_from_transaction_data implicitly requires the input DataFrame to be sorted by the Datetime column in ascending order. Either this requirement should be explicitly stated in the documentation, or the utility itself should conduct the sort prior to summarization. Many transactional datasets (from Shopify's API, for example) come sorted in descending order of timestamps by default.\r\n\r\nMinimal repro below. Notice the difference in `monetary_value` field for customer with ID 2.\r\n\r\n```python\r\nimport pandas as pd\r\nfrom lifetimes.utils import summary_data_from_transaction_data\r\n\r\n# Replicating output from Readme.md under \"Example using transactional datasets\"\r\n# https://github.com/CamDavidsonPilon/lifetimes#example-using-transactional-datasets\r\ncust = pd.Series([0,1,2,2,2])\r\ndates1 = pd.to_datetime(pd.Series(['2014-03-08 00:00:00',\r\n                  '2014-05-21 00:00:00',\r\n                  '2014-03-14 00:00:00',\r\n                  '2014-04-09 00:00:00',\r\n                  '2014-05-21 00:00:00']))\r\nsales1 = pd.Series([10,20,10,20,25])\r\ntransaction_data1 = pd.DataFrame({'date': dates1, 'id': cust, 'sales': sales1})\r\nsummary1 = summary_data_from_transaction_data(transaction_data1, 'id', 'date', 'sales', observation_period_end='2014-12-31')\r\nprint(summary1)\r\n```\r\n        frequency  recency      T  monetary_value\r\n    id                                           \r\n    0         0.0      0.0  298.0             0.0\r\n    1         0.0      0.0  224.0             0.0\r\n    2         2.0     68.0  292.0            22.5\r\n```python\r\n# Now we just change the order of the 3rd and 5th transactions\r\ndates2 = pd.to_datetime(pd.Series(['2014-03-08 00:00:00',\r\n                  '2014-05-21 00:00:00',\r\n                  '2014-05-21 00:00:00',\r\n                  '2014-04-09 00:00:00',\r\n                  '2014-03-14 00:00:00']))\r\nsales2 = pd.Series([10,20,25,20,10])\r\ntransaction_data2 = pd.DataFrame({'date': dates2, 'id': cust, 'sales': sales2})\r\nsummary2 = summary_data_from_transaction_data(transaction_data2, 'id', 'date', 'sales', observation_period_end='2014-12-31')\r\nprint(summary2)\r\n```\r\n        frequency  recency      T  monetary_value\r\n    id                                           \r\n    0         0.0      0.0  298.0             0.0\r\n    1         0.0      0.0  224.0             0.0\r\n    2         2.0     68.0  292.0            15.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/81", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/81/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/81/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/81", "id": 189316351, "node_id": "MDU6SXNzdWUxODkzMTYzNTE=", "number": 81, "title": "Why the customers with 0 frequency has greater monetary value than others?", "user": {"login": "HunjaeJung", "id": 2314163, "node_id": "MDQ6VXNlcjIzMTQxNjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2314163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HunjaeJung", "html_url": "https://github.com/HunjaeJung", "followers_url": "https://api.github.com/users/HunjaeJung/followers", "following_url": "https://api.github.com/users/HunjaeJung/following{/other_user}", "gists_url": "https://api.github.com/users/HunjaeJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/HunjaeJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HunjaeJung/subscriptions", "organizations_url": "https://api.github.com/users/HunjaeJung/orgs", "repos_url": "https://api.github.com/users/HunjaeJung/repos", "events_url": "https://api.github.com/users/HunjaeJung/events{/privacy}", "received_events_url": "https://api.github.com/users/HunjaeJung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-15T07:11:42Z", "updated_at": "2016-11-22T06:51:11Z", "closed_at": "2016-11-22T06:51:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Before I create this issue, I should say thank you to the all contributors about this great open source library.\r\n\r\nQuestion below, \r\n\r\nWhy the customers with 0 frequency(id 3,4,5,8,10 below) have greater monetary value than customer 2,8,9?\r\n\r\n```\r\nprint ggf.conditional_expected_average_profit(\r\n        summary_with_money_value['frequency'],\r\n        summary_with_money_value['monetary_value']\r\n    ).head()\r\n\"\"\"\r\ncustomer_id\r\n1     24.658616\r\n2     18.911480\r\n3     35.171003\r\n4     35.171003\r\n5     35.171003\r\n6     71.462851\r\n7     18.911480\r\n8     35.171003\r\n9     27.282408\r\n10    35.171003\r\ndtype: float64\r\n\"\"\"\r\n```\r\n\r\nI realized that \"how\" and \"where\" this results comes from. But I'm still curious \"why\" it should be. Is it intended?\r\n\r\n```\r\ndef conditional_expected_average_profit(self, frequency=None, monetary_value=None):\r\n     \"\"\"\r\n     # ...\r\n     individual_weight = p * frequency / (p * frequency + q - 1)\r\n     population_mean = v * p / (q - 1)\r\n     return (1 - individual_weight) * population_mean + individual_weight * monetary_value\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/80", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/80/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/80/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/80", "id": 186969106, "node_id": "MDU6SXNzdWUxODY5NjkxMDY=", "number": 80, "title": "Let's move more params to the init", "user": {"login": "CamDavidsonPilon", "id": 884032, "node_id": "MDQ6VXNlcjg4NDAzMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/884032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CamDavidsonPilon", "html_url": "https://github.com/CamDavidsonPilon", "followers_url": "https://api.github.com/users/CamDavidsonPilon/followers", "following_url": "https://api.github.com/users/CamDavidsonPilon/following{/other_user}", "gists_url": "https://api.github.com/users/CamDavidsonPilon/gists{/gist_id}", "starred_url": "https://api.github.com/users/CamDavidsonPilon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CamDavidsonPilon/subscriptions", "organizations_url": "https://api.github.com/users/CamDavidsonPilon/orgs", "repos_url": "https://api.github.com/users/CamDavidsonPilon/repos", "events_url": "https://api.github.com/users/CamDavidsonPilon/events{/privacy}", "received_events_url": "https://api.github.com/users/CamDavidsonPilon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-03T02:53:48Z", "updated_at": "2019-03-01T18:44:42Z", "closed_at": "2019-03-01T18:44:42Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Ex: tolerance, number of fits, etc. to make it similar to scikit-learn. This will have to be a new version release. \r\n\r\ncc @yanirs ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/76", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/76/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/76/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/76", "id": 185616254, "node_id": "MDU6SXNzdWUxODU2MTYyNTQ=", "number": 76, "title": "iterative_fitting not really iterative?", "user": {"login": "yanirs", "id": 3952615, "node_id": "MDQ6VXNlcjM5NTI2MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3952615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanirs", "html_url": "https://github.com/yanirs", "followers_url": "https://api.github.com/users/yanirs/followers", "following_url": "https://api.github.com/users/yanirs/following{/other_user}", "gists_url": "https://api.github.com/users/yanirs/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanirs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanirs/subscriptions", "organizations_url": "https://api.github.com/users/yanirs/orgs", "repos_url": "https://api.github.com/users/yanirs/repos", "events_url": "https://api.github.com/users/yanirs/events{/privacy}", "received_events_url": "https://api.github.com/users/yanirs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-27T09:24:24Z", "updated_at": "2016-10-28T23:36:39Z", "closed_at": "2016-10-28T23:36:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Reading through the code of `utils._fit`, it looks like the assignment to `params_init` in the end of the loop (https://github.com/CamDavidsonPilon/lifetimes/blob/master/lifetimes/utils.py#L247) doesn't have any effect because `params_init` gets overwritten in the beginning of the loop (https://github.com/CamDavidsonPilon/lifetimes/blob/master/lifetimes/utils.py#L240). Looks like line 240 should be outside the loop body.\n\nI'd also give `params_init` a different name (`current_params`?) to make the difference between that variable and `initial_params` clearer.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/74", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/74/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/74/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/74", "id": 184423266, "node_id": "MDU6SXNzdWUxODQ0MjMyNjY=", "number": 74, "title": "Installation error", "user": {"login": "jbwhit", "id": 105829, "node_id": "MDQ6VXNlcjEwNTgyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/105829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbwhit", "html_url": "https://github.com/jbwhit", "followers_url": "https://api.github.com/users/jbwhit/followers", "following_url": "https://api.github.com/users/jbwhit/following{/other_user}", "gists_url": "https://api.github.com/users/jbwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbwhit/subscriptions", "organizations_url": "https://api.github.com/users/jbwhit/orgs", "repos_url": "https://api.github.com/users/jbwhit/repos", "events_url": "https://api.github.com/users/jbwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/jbwhit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-21T08:04:47Z", "updated_at": "2016-10-24T19:23:36Z", "closed_at": "2016-10-24T19:23:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Output from pip install attempt: \n\n``````\n$ pip install lifetimes\nYou are using pip version 7.1.0, however version 8.1.2 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\nCollecting lifetimes\n  Using cached Lifetimes-0.2.2.1.tar.gz\nRequirement already satisfied (use --upgrade to upgrade): numpy in /usr/lib64/python2.6/site-packages (from lifetimes)\nCollecting scipy (from lifetimes)\n  Using cached scipy-0.18.1.tar.gz\nCollecting pandas>=0.19 (from lifetimes)\n  Using cached pandas-0.19.0.tar.gz\nCollecting python-dateutil (from pandas>=0.19->lifetimes)\n  Using cached python_dateutil-2.5.3-py2.py3-none-any.whl\nCollecting pytz>=2011k (from pandas>=0.19->lifetimes)\n  Using cached pytz-2016.7-py2.py3-none-any.whl\nCollecting six>=1.5 (from python-dateutil->pandas>=0.19->lifetimes)\n  Using cached six-1.10.0-py2.py3-none-any.whl\nBuilding wheels for collected packages: lifetimes, scipy, pandas\n  Running setup.py bdist_wheel for lifetimes\n  Complete output from command /usr/bin/python -c \"import setuptools;__file__='/tmp/pip-build-DOw4uO/lifetimes/setup.py';exec(compile(open(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" bdist_wheel -d /tmp/tmpOmPS2xpip-wheel-:\n  usage: -c [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\n     or: -c --help [cmd1 cmd2 ...]\n     or: -c --help-commands\n     or: -c cmd --help\n\n  error: invalid command 'bdist_wheel'\n\n  ----------------------------------------\n  Failed building wheel for lifetimes\n  Running setup.py bdist_wheel for scipy\n  Complete output from command /usr/bin/python -c \"import setuptools;__file__='/tmp/pip-build-DOw4uO/scipy/setup.py';exec(compile(open(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" bdist_wheel -d /tmp/tmp07PPZVpip-wheel-:\n  usage: -c [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\n     or: -c --help [cmd1 cmd2 ...]\n     or: -c --help-commands\n     or: -c cmd --help\n\n  error: invalid command 'bdist_wheel'\n\n  ----------------------------------------\n  Failed building wheel for scipy\n  Running setup.py bdist_wheel for pandas\n  Stored in directory: /home/jwhitmore/.cache/pip/wheels/95/de/b6/d0219d3007532bde54b775a18943296a7a31f20980901c37ee\nSuccessfully built pandas\nFailed to build lifetimes scipy\nInstalling collected packages: scipy, six, python-dateutil, pytz, pandas, lifetimes\n  Running setup.py install for scipy\n    Complete output from command /usr/bin/python -c \"import setuptools, tokenize;__file__='/tmp/pip-build-DOw4uO/scipy/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /tmp/pip-XZvmqa-record/install-record.txt --single-version-externally-managed --compile:\n\n    Note: if you need reliable uninstall behavior, then install\n    with pip instead of using `setup.py install`:\n\n      - `pip install .`       (from a git repo or downloaded source\n                               release)\n      - `pip install scipy`   (last SciPy release on PyPI)\n\n\n    lapack_opt_info:\n    openblas_lapack_info:\n      libraries openblas not found in ['/usr/local/lib64', '/usr/local/lib', '/usr/lib64', '/usr/lib']\n      NOT AVAILABLE\n\n    lapack_mkl_info:\n    mkl_info:\n      libraries mkl,vml,guide not found in ['/usr/local/lib64', '/usr/local/lib', '/usr/lib64', '/usr/lib']\n      NOT AVAILABLE\n\n      NOT AVAILABLE\n\n    atlas_3_10_threads_info:\n    Setting PTATLAS=ATLAS\n      libraries tatlas,tatlas not found in /usr/local/lib64\n      libraries lapack_atlas not found in /usr/local/lib64\n      libraries tatlas,tatlas not found in /usr/local/lib\n      libraries lapack_atlas not found in /usr/local/lib\n      libraries tatlas,tatlas not found in /usr/lib64/atlas\n      libraries lapack_atlas not found in /usr/lib64/atlas\n      libraries tatlas,tatlas not found in /usr/lib64/sse2\n      libraries lapack_atlas not found in /usr/lib64/sse2\n      libraries tatlas,tatlas not found in /usr/lib64\n      libraries lapack_atlas not found in /usr/lib64\n      libraries tatlas,tatlas not found in /usr/lib\n      libraries lapack_atlas not found in /usr/lib\n    <class 'numpy.distutils.system_info.atlas_3_10_threads_info'>\n      NOT AVAILABLE\n\n    atlas_3_10_info:\n      libraries satlas,satlas not found in /usr/local/lib64\n      libraries lapack_atlas not found in /usr/local/lib64\n      libraries satlas,satlas not found in /usr/local/lib\n      libraries lapack_atlas not found in /usr/local/lib\n      libraries satlas,satlas not found in /usr/lib64/atlas\n      libraries lapack_atlas not found in /usr/lib64/atlas\n      libraries satlas,satlas not found in /usr/lib64/sse2\n      libraries lapack_atlas not found in /usr/lib64/sse2\n      libraries satlas,satlas not found in /usr/lib64\n      libraries lapack_atlas not found in /usr/lib64\n      libraries satlas,satlas not found in /usr/lib\n      libraries lapack_atlas not found in /usr/lib\n    <class 'numpy.distutils.system_info.atlas_3_10_info'>\n      NOT AVAILABLE\n\n    atlas_threads_info:\n    Setting PTATLAS=ATLAS\n      libraries ptf77blas,ptcblas,atlas not found in /usr/local/lib64\n      libraries lapack_atlas not found in /usr/local/lib64\n      libraries ptf77blas,ptcblas,atlas not found in /usr/local/lib\n      libraries lapack_atlas not found in /usr/local/lib\n      libraries ptf77blas,ptcblas,atlas not found in /usr/lib64/atlas\n      libraries lapack_atlas not found in /usr/lib64/atlas\n      libraries ptf77blas,ptcblas,atlas not found in /usr/lib64/sse2\n      libraries lapack_atlas not found in /usr/lib64/sse2\n      libraries ptf77blas,ptcblas,atlas not found in /usr/lib64\n      libraries lapack_atlas not found in /usr/lib64\n      libraries ptf77blas,ptcblas,atlas not found in /usr/lib\n      libraries lapack_atlas not found in /usr/lib\n    <class 'numpy.distutils.system_info.atlas_threads_info'>\n      NOT AVAILABLE\n\n    atlas_info:\n      libraries f77blas,cblas,atlas not found in /usr/local/lib64\n      libraries lapack_atlas not found in /usr/local/lib64\n      libraries f77blas,cblas,atlas not found in /usr/local/lib\n      libraries lapack_atlas not found in /usr/local/lib\n      libraries f77blas,cblas,atlas not found in /usr/lib64/atlas\n      libraries lapack_atlas not found in /usr/lib64/atlas\n      libraries f77blas,cblas,atlas not found in /usr/lib64/sse2\n      libraries lapack_atlas not found in /usr/lib64/sse2\n      libraries f77blas,cblas,atlas not found in /usr/lib64\n      libraries lapack_atlas not found in /usr/lib64\n      libraries f77blas,cblas,atlas not found in /usr/lib\n      libraries lapack_atlas not found in /usr/lib\n    <class 'numpy.distutils.system_info.atlas_info'>\n      NOT AVAILABLE\n\n    /usr/lib64/python2.6/site-packages/numpy/distutils/system_info.py:1552: UserWarning:\n        Atlas (http://math-atlas.sourceforge.net/) libraries not found.\n        Directories to search for the libraries can be specified in the\n        numpy/distutils/site.cfg file (section [atlas]) or by setting\n        the ATLAS environment variable.\n      warnings.warn(AtlasNotFoundError.__doc__)\n    lapack_info:\n      libraries lapack not found in ['/usr/local/lib64', '/usr/local/lib', '/usr/lib64', '/usr/lib']\n      NOT AVAILABLE\n\n    /usr/lib64/python2.6/site-packages/numpy/distutils/system_info.py:1563: UserWarning:\n        Lapack (http://www.netlib.org/lapack/) libraries not found.\n        Directories to search for the libraries can be specified in the\n        numpy/distutils/site.cfg file (section [lapack]) or by setting\n        the LAPACK environment variable.\n      warnings.warn(LapackNotFoundError.__doc__)\n    lapack_src_info:\n      NOT AVAILABLE\n\n    /usr/lib64/python2.6/site-packages/numpy/distutils/system_info.py:1566: UserWarning:\n        Lapack (http://www.netlib.org/lapack/) sources not found.\n        Directories to search for the sources can be specified in the\n        numpy/distutils/site.cfg file (section [lapack_src]) or by setting\n        the LAPACK_SRC environment variable.\n      warnings.warn(LapackSrcNotFoundError.__doc__)\n      NOT AVAILABLE\n\n    Running from scipy source directory.\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n      File \"/tmp/pip-build-DOw4uO/scipy/setup.py\", line 415, in <module>\n        setup_package()\n      File \"/tmp/pip-build-DOw4uO/scipy/setup.py\", line 411, in setup_package\n        setup(**metadata)\n      File \"/usr/lib64/python2.6/site-packages/numpy/distutils/core.py\", line 135, in setup\n        config = configuration()\n      File \"/tmp/pip-build-DOw4uO/scipy/setup.py\", line 335, in configuration\n        config.add_subpackage('scipy')\n      File \"/usr/lib64/python2.6/site-packages/numpy/distutils/misc_util.py\", line 1002, in add_subpackage\n        caller_level = 2)\n      File \"/usr/lib64/python2.6/site-packages/numpy/distutils/misc_util.py\", line 971, in get_subpackage\n        caller_level = caller_level + 1)\n      File \"/usr/lib64/python2.6/site-packages/numpy/distutils/misc_util.py\", line 908, in _get_configuration_from_setup_py\n        config = setup_module.configuration(*args)\n      File \"scipy/setup.py\", line 15, in configuration\n        config.add_subpackage('linalg')\n      File \"/usr/lib64/python2.6/site-packages/numpy/distutils/misc_util.py\", line 1002, in add_subpackage\n        caller_level = 2)\n      File \"/usr/lib64/python2.6/site-packages/numpy/distutils/misc_util.py\", line 971, in get_subpackage\n        caller_level = caller_level + 1)\n      File \"/usr/lib64/python2.6/site-packages/numpy/distutils/misc_util.py\", line 908, in _get_configuration_from_setup_py\n        config = setup_module.configuration(*args)\n      File \"scipy/linalg/setup.py\", line 20, in configuration\n        raise NotFoundError('no lapack/blas resources found')\n    numpy.distutils.system_info.NotFoundError: no lapack/blas resources found\n\n    ----------------------------------------\nCommand \"/usr/bin/python -c \"import setuptools, tokenize;__file__='/tmp/pip-build-DOw4uO/scipy/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /tmp/pip-XZvmqa-record/install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in /tmp/pip-build-DOw4uO/scipy```\n``````\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/68", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/68/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/68/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/68", "id": 181331945, "node_id": "MDU6SXNzdWUxODEzMzE5NDU=", "number": 68, "title": "utils.calibration_and_holdout_data() should work with monetary value", "user": {"login": "yanirs", "id": 3952615, "node_id": "MDQ6VXNlcjM5NTI2MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3952615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanirs", "html_url": "https://github.com/yanirs", "followers_url": "https://api.github.com/users/yanirs/followers", "following_url": "https://api.github.com/users/yanirs/following{/other_user}", "gists_url": "https://api.github.com/users/yanirs/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanirs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanirs/subscriptions", "organizations_url": "https://api.github.com/users/yanirs/orgs", "repos_url": "https://api.github.com/users/yanirs/repos", "events_url": "https://api.github.com/users/yanirs/events{/privacy}", "received_events_url": "https://api.github.com/users/yanirs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-06T06:08:36Z", "updated_at": "2016-11-02T07:59:59Z", "closed_at": "2016-11-02T07:59:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There's currently a subtle bug in `utils.calibration_and_holdout_data()`:\n\n``` python\ncalibration_summary_data = summary_data_from_transaction_data(calibration_transactions, customer_id_col, datetime_col, datetime_format, observation_period_end=calibration_period_end, freq=freq)\n```\n\nThe fourth positional argument of `summary_data_from_transaction_data` is actually `monetary_value_col`, not `datetime_format`.\n\nThe ideal solution would be to add `monetary_value_col` as a parameter to `calibration_and_holdout_data()` and pass most parameters to `summary_data_from_transaction_data` by name to avoid future errors.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/67", "repository_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes", "labels_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/67/comments", "events_url": "https://api.github.com/repos/CamDavidsonPilon/lifetimes/issues/67/events", "html_url": "https://github.com/CamDavidsonPilon/lifetimes/issues/67", "id": 181324215, "node_id": "MDU6SXNzdWUxODEzMjQyMTU=", "number": 67, "title": "observation_period_end should default to the max transaction time", "user": {"login": "yanirs", "id": 3952615, "node_id": "MDQ6VXNlcjM5NTI2MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3952615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanirs", "html_url": "https://github.com/yanirs", "followers_url": "https://api.github.com/users/yanirs/followers", "following_url": "https://api.github.com/users/yanirs/following{/other_user}", "gists_url": "https://api.github.com/users/yanirs/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanirs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanirs/subscriptions", "organizations_url": "https://api.github.com/users/yanirs/orgs", "repos_url": "https://api.github.com/users/yanirs/repos", "events_url": "https://api.github.com/users/yanirs/events{/privacy}", "received_events_url": "https://api.github.com/users/yanirs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-10-06T04:52:23Z", "updated_at": "2018-04-24T05:33:58Z", "closed_at": "2018-04-24T05:33:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In `utils.calibration_and_holdout_data(transactions, customer_id_col, datetime_col, calibration_period_end, observation_period_end=datetime.today(), freq='D', datetime_format=None)`: `datetime.today()` is set once when the file is first read. This can be confusing when dealing with historical data, as the holdout column and evaluation results become dependent on the time the process is run.\n\nIt'd be better to default to `None` and then in the function body do:\n\n``` python\nif observation_period_end is None:\n    observation_period_end = transactions[datetime_col].max()\n```\n", "performed_via_github_app": null, "score": 1.0}]}