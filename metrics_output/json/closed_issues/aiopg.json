{"total_count": 116, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/aio-libs/aiopg/issues/679", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/679/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/679/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/679/events", "html_url": "https://github.com/aio-libs/aiopg/issues/679", "id": 614036122, "node_id": "MDU6SXNzdWU2MTQwMzYxMjI=", "number": 679, "title": "UniqueConstraint not working with SQLAlchemy", "user": {"login": "tomhamiltonstubber", "id": 8955690, "node_id": "MDQ6VXNlcjg5NTU2OTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8955690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomhamiltonstubber", "html_url": "https://github.com/tomhamiltonstubber", "followers_url": "https://api.github.com/users/tomhamiltonstubber/followers", "following_url": "https://api.github.com/users/tomhamiltonstubber/following{/other_user}", "gists_url": "https://api.github.com/users/tomhamiltonstubber/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomhamiltonstubber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomhamiltonstubber/subscriptions", "organizations_url": "https://api.github.com/users/tomhamiltonstubber/orgs", "repos_url": "https://api.github.com/users/tomhamiltonstubber/repos", "events_url": "https://api.github.com/users/tomhamiltonstubber/events{/privacy}", "received_events_url": "https://api.github.com/users/tomhamiltonstubber/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-07T12:56:02Z", "updated_at": "2020-05-07T13:01:05Z", "closed_at": "2020-05-07T13:01:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks,\r\n\r\nI seem to be having issues with `UniqueConstraint`s.\r\n\r\nIn models I have:\r\n\r\n```py\r\nclass SubjectCategory(Base):\r\n    __tablename__ = 'subject_categories'\r\n\r\n    id = Column(Integer, primary_key=True, nullable=False)\r\n    name = Column(String(63))\r\n    region = Column(Integer, ForeignKey('regions.id'), nullable=False)\r\n\r\n    __tableargs__ = UniqueConstraint('name', 'region', name='_subject_category_uc')\r\n```\r\nThat should create a UniqueConstraint on `name` and `region` together right?\r\n\r\nHowever, when I look at the database:\r\n```\r\nmy_database=# \\d subject_categories\r\n                Table \"public.subject_categories\"\r\n Column |         Type          | Collation | Nullable | Default \r\n--------+-----------------------+-----------+----------+---------\r\n id     | integer               |           | not null | \r\n name   | character varying(63) |           |          | \r\n region | integer               |           | not null | \r\nIndexes:\r\n    \"subject_categories_pkey\" PRIMARY KEY, btree (id)\r\nForeign-key constraints:\r\n    \"subject_categories_region_fkey\" FOREIGN KEY (region) REFERENCES regions(id)\r\nReferenced by:\r\n    TABLE \"subjects\" CONSTRAINT \"subjects_category_fkey\" FOREIGN KEY (category) REFERENCES subject_categories(id)\r\n```\r\nI have no constraint.\r\n\r\nHave I implemented this wrongly?\r\n\r\nThanks,\r\nTom", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/588", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/588/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/588/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/588/events", "html_url": "https://github.com/aio-libs/aiopg/issues/588", "id": 487951435, "node_id": "MDU6SXNzdWU0ODc5NTE0MzU=", "number": 588, "title": "AttributeError __aexit__ on Connection", "user": {"login": "jenny-kwan-woodlamp-tech", "id": 54250724, "node_id": "MDQ6VXNlcjU0MjUwNzI0", "avatar_url": "https://avatars1.githubusercontent.com/u/54250724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jenny-kwan-woodlamp-tech", "html_url": "https://github.com/jenny-kwan-woodlamp-tech", "followers_url": "https://api.github.com/users/jenny-kwan-woodlamp-tech/followers", "following_url": "https://api.github.com/users/jenny-kwan-woodlamp-tech/following{/other_user}", "gists_url": "https://api.github.com/users/jenny-kwan-woodlamp-tech/gists{/gist_id}", "starred_url": "https://api.github.com/users/jenny-kwan-woodlamp-tech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jenny-kwan-woodlamp-tech/subscriptions", "organizations_url": "https://api.github.com/users/jenny-kwan-woodlamp-tech/orgs", "repos_url": "https://api.github.com/users/jenny-kwan-woodlamp-tech/repos", "events_url": "https://api.github.com/users/jenny-kwan-woodlamp-tech/events{/privacy}", "received_events_url": "https://api.github.com/users/jenny-kwan-woodlamp-tech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-02T00:53:16Z", "updated_at": "2019-09-02T16:43:58Z", "closed_at": "2019-09-02T16:43:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI'm using aiopg==0.16.0 with sqlalchemy==1.3.8 and create_engine(). I'm using pip psycopg2-binary==2.8.3. I run this locally with a virtualenv 3.7.4 using pytest just fine. However, inside my docker-compose, pytest raises an AttributeError for `__aexit__`. I'm checking the docker build logs and pip install is indeed grabbing these versions. The base image for Docker is python:3.7.4-buster.\r\n\r\nAny clues? This is very weird.\r\n\r\nI have the following source:\r\n```\r\n@functools.lru_cache()\r\nasync def engine():\r\n    return await aiopg.sa.create_engine(\r\n        host=HOST,\r\n        port=PORT,\r\n        user=USER,\r\n        password=PASSWORD,\r\n    )\r\n\r\nasync def connection():\r\n    engine_ = await engine()\r\n    return await engine_.acquire()\r\n\r\n\r\nasync def ping():\r\n    async with await connection() as conn:\r\n        async for row in conn.execute('SELECT NULL AS heartbeat'):\r\n            return row['heartbeat'] is None\r\n```\r\n\r\nMy test is simply:\r\n```\r\n@pytest.mark.asyncio\r\nasync def test_ping():\r\n    return await fluor__innkeeper.state.ping()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/576", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/576/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/576/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/576/events", "html_url": "https://github.com/aio-libs/aiopg/issues/576", "id": 461040747, "node_id": "MDU6SXNzdWU0NjEwNDA3NDc=", "number": 576, "title": "User password field and mapper", "user": {"login": "komaxko", "id": 29356121, "node_id": "MDQ6VXNlcjI5MzU2MTIx", "avatar_url": "https://avatars2.githubusercontent.com/u/29356121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/komaxko", "html_url": "https://github.com/komaxko", "followers_url": "https://api.github.com/users/komaxko/followers", "following_url": "https://api.github.com/users/komaxko/following{/other_user}", "gists_url": "https://api.github.com/users/komaxko/gists{/gist_id}", "starred_url": "https://api.github.com/users/komaxko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/komaxko/subscriptions", "organizations_url": "https://api.github.com/users/komaxko/orgs", "repos_url": "https://api.github.com/users/komaxko/repos", "events_url": "https://api.github.com/users/komaxko/events{/privacy}", "received_events_url": "https://api.github.com/users/komaxko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-26T15:30:33Z", "updated_at": "2019-08-06T21:54:53Z", "closed_at": "2019-08-06T21:54:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Greetings!\r\n\r\nThanks a lot for your work!\r\n\r\nI have a problem storing user password. This field should be encrypted, but which way should I do that?\r\n\r\nAlso  I've seen post by asvetlov that metaData Schemas are the unqiue way to use async, no sessions and etc.\r\n\r\n`#user table`\r\n`Users = sa.Table(`\r\n`    \"users\",`\r\n`    metadata,`\r\n`    sa.Column(\"id\", sa.Integer, nullable=False, autoincrement=True, primary_key=True),`\r\n`    sa.Column(\"login\", sa.String(256), nullable=False, unique=True),`\r\n`    sa.Column(\"email\", sa.String(256), nullable=False, unique=True),`\r\n`    sa.Column(\"password\", sa.String(256), nullable=False),`\r\n`    sa.Column(\"is_superuser\", sa.Boolean, nullable=False, server_default=\"FALSE\"),`\r\n\r\n`#user class`\r\n`class User(object):`\r\n`    def __init__(self, login, password, email):`\r\n`        self.login = login`\r\n`        self.password = hash_p(password)`\r\n`        self.email = email`\r\n\r\n`    def validate_password(self, password):`\r\n`        return unhash_p(password, self.password)`\r\n`mapper(User, Users)`\r\n\r\nin handlers I can not save User (class instance) to Users table:\r\n`async def post(self):`\r\n`        body = await self.text()`\r\n`        response_obj = body`\r\n`        async with self.app['db'].acquire() as conn:`\r\n`            try:`\r\n`                _data = json.loads(body)`\r\n`                usr = db.User(**_data)`\r\n`                cursor = await conn.execute(db.Users.insert(usr)`\r\n`                record = await cursor.fetchone()`\r\n`                return web.json_response(text=json.dumps(record, default=str))`\r\n`            except Exception as e:`\r\n`                return web.Response(text=str(e))`\r\n\r\nCould you give me any advice please?\r\n\r\nP.S. in sqlalchemy thread I got response that alchemy doesn't support async and they cannot advice me. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/564", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/564/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/564/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/564/events", "html_url": "https://github.com/aio-libs/aiopg/issues/564", "id": 442781309, "node_id": "MDU6SXNzdWU0NDI3ODEzMDk=", "number": 564, "title": "option to close unused connections in alchemy wrapper", "user": {"login": "and800", "id": 9919211, "node_id": "MDQ6VXNlcjk5MTkyMTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/9919211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/and800", "html_url": "https://github.com/and800", "followers_url": "https://api.github.com/users/and800/followers", "following_url": "https://api.github.com/users/and800/following{/other_user}", "gists_url": "https://api.github.com/users/and800/gists{/gist_id}", "starred_url": "https://api.github.com/users/and800/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/and800/subscriptions", "organizations_url": "https://api.github.com/users/and800/orgs", "repos_url": "https://api.github.com/users/and800/repos", "events_url": "https://api.github.com/users/and800/events{/privacy}", "received_events_url": "https://api.github.com/users/and800/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1369310482, "node_id": "MDU6TGFiZWwxMzY5MzEwNDgy", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/pr-rejected", "name": "pr-rejected", "color": "363396", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-10T15:42:14Z", "updated_at": "2020-02-18T17:01:10Z", "closed_at": "2020-02-18T17:01:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are some cases when connection pools are not useful at all (my case - I run my code on a lot of machines simultaneously trying to connect to a single DB, so I want to hold open as few connections as possible).\r\n\r\nThere should be a simple way to close unused connections. For the raw `Pool` there is the `clear()` method, but for the alchemy engine there is no way to do this. It should be quite easy to resolve this - just expose underlying pool `clear()` method to `Engine`'s public API. Also maybe we can add something like \"do not use a pool at all\" flag to `Engine` factory, or pass a pool factory to engine (In Sqlalchemy there is a `NullPool` concept for this)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/556", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/556/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/556/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/556/events", "html_url": "https://github.com/aio-libs/aiopg/issues/556", "id": 429852314, "node_id": "MDU6SXNzdWU0Mjk4NTIzMTQ=", "number": 556, "title": "SystemError exception with psycopg2 2.8", "user": {"login": "TTRh", "id": 7224314, "node_id": "MDQ6VXNlcjcyMjQzMTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/7224314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TTRh", "html_url": "https://github.com/TTRh", "followers_url": "https://api.github.com/users/TTRh/followers", "following_url": "https://api.github.com/users/TTRh/following{/other_user}", "gists_url": "https://api.github.com/users/TTRh/gists{/gist_id}", "starred_url": "https://api.github.com/users/TTRh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TTRh/subscriptions", "organizations_url": "https://api.github.com/users/TTRh/orgs", "repos_url": "https://api.github.com/users/TTRh/repos", "events_url": "https://api.github.com/users/TTRh/events{/privacy}", "received_events_url": "https://api.github.com/users/TTRh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "vir-mir", "id": 2296252, "node_id": "MDQ6VXNlcjIyOTYyNTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2296252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vir-mir", "html_url": "https://github.com/vir-mir", "followers_url": "https://api.github.com/users/vir-mir/followers", "following_url": "https://api.github.com/users/vir-mir/following{/other_user}", "gists_url": "https://api.github.com/users/vir-mir/gists{/gist_id}", "starred_url": "https://api.github.com/users/vir-mir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vir-mir/subscriptions", "organizations_url": "https://api.github.com/users/vir-mir/orgs", "repos_url": "https://api.github.com/users/vir-mir/repos", "events_url": "https://api.github.com/users/vir-mir/events{/privacy}", "received_events_url": "https://api.github.com/users/vir-mir/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "vir-mir", "id": 2296252, "node_id": "MDQ6VXNlcjIyOTYyNTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2296252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vir-mir", "html_url": "https://github.com/vir-mir", "followers_url": "https://api.github.com/users/vir-mir/followers", "following_url": "https://api.github.com/users/vir-mir/following{/other_user}", "gists_url": "https://api.github.com/users/vir-mir/gists{/gist_id}", "starred_url": "https://api.github.com/users/vir-mir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vir-mir/subscriptions", "organizations_url": "https://api.github.com/users/vir-mir/orgs", "repos_url": "https://api.github.com/users/vir-mir/repos", "events_url": "https://api.github.com/users/vir-mir/events{/privacy}", "received_events_url": "https://api.github.com/users/vir-mir/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-04-05T17:05:20Z", "updated_at": "2019-04-10T09:20:19Z", "closed_at": "2019-04-10T09:20:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `aiopg[sa]` it pull the latest release from `psycopg2-binary-2.8` (2 days ago) and i got this exception with `postgres:9.6.1` : \r\n\r\n```\r\nException in callback Connection._ready(<weakref at 0...x7f0d9caa1a20>) at /usr/local/lib/python3.7/dist-packages/aiopg/connection.py:132\r\nhandle: <Handle Connection._ready(<weakref at 0...x7f0d9caa1a20>) at /usr/local/lib/python3.7/dist-packages/aiopg/connection.py:132>\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.7/asyncio/events.py\", line 88, in _run\r\n    self._context.run(self._callback, *self._args)\r\n  File \"/usr/local/lib/python3.7/dist-packages/aiopg/connection.py\", line 141, in _ready\r\n    state = self._conn.poll()\r\nSystemError: unexpectedly, there's no async cursor here\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/554", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/554/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/554/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/554/events", "html_url": "https://github.com/aio-libs/aiopg/issues/554", "id": 427849149, "node_id": "MDU6SXNzdWU0Mjc4NDkxNDk=", "number": 554, "title": "New Release?", "user": {"login": "asgoel", "id": 1323030, "node_id": "MDQ6VXNlcjEzMjMwMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1323030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asgoel", "html_url": "https://github.com/asgoel", "followers_url": "https://api.github.com/users/asgoel/followers", "following_url": "https://api.github.com/users/asgoel/following{/other_user}", "gists_url": "https://api.github.com/users/asgoel/gists{/gist_id}", "starred_url": "https://api.github.com/users/asgoel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asgoel/subscriptions", "organizations_url": "https://api.github.com/users/asgoel/orgs", "repos_url": "https://api.github.com/users/asgoel/repos", "events_url": "https://api.github.com/users/asgoel/events{/privacy}", "received_events_url": "https://api.github.com/users/asgoel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984833, "node_id": "MDU6TGFiZWw4OTk4NDgzMw==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-04-01T18:29:36Z", "updated_at": "2019-09-23T14:00:51Z", "closed_at": "2019-09-23T14:00:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any chance we can get a new release? Specifically including the changes in this commit:\r\nhttps://github.com/aio-libs/aiopg/commit/ef1cabeeb7023841184f23197298215d1d45209d\r\nwhich will fix python 3.7 deprecation warnings.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/550", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/550/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/550/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/550/events", "html_url": "https://github.com/aio-libs/aiopg/issues/550", "id": 427244825, "node_id": "MDU6SXNzdWU0MjcyNDQ4MjU=", "number": 550, "title": "idea as fixed bulk update/insert and mogrify", "user": {"login": "vir-mir", "id": 2296252, "node_id": "MDQ6VXNlcjIyOTYyNTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2296252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vir-mir", "html_url": "https://github.com/vir-mir", "followers_url": "https://api.github.com/users/vir-mir/followers", "following_url": "https://api.github.com/users/vir-mir/following{/other_user}", "gists_url": "https://api.github.com/users/vir-mir/gists{/gist_id}", "starred_url": "https://api.github.com/users/vir-mir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vir-mir/subscriptions", "organizations_url": "https://api.github.com/users/vir-mir/orgs", "repos_url": "https://api.github.com/users/vir-mir/repos", "events_url": "https://api.github.com/users/vir-mir/events{/privacy}", "received_events_url": "https://api.github.com/users/vir-mir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984833, "node_id": "MDU6TGFiZWw4OTk4NDgzMw==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "jettify", "id": 223335, "node_id": "MDQ6VXNlcjIyMzMzNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/223335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jettify", "html_url": "https://github.com/jettify", "followers_url": "https://api.github.com/users/jettify/followers", "following_url": "https://api.github.com/users/jettify/following{/other_user}", "gists_url": "https://api.github.com/users/jettify/gists{/gist_id}", "starred_url": "https://api.github.com/users/jettify/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jettify/subscriptions", "organizations_url": "https://api.github.com/users/jettify/orgs", "repos_url": "https://api.github.com/users/jettify/repos", "events_url": "https://api.github.com/users/jettify/events{/privacy}", "received_events_url": "https://api.github.com/users/jettify/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jettify", "id": 223335, "node_id": "MDQ6VXNlcjIyMzMzNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/223335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jettify", "html_url": "https://github.com/jettify", "followers_url": "https://api.github.com/users/jettify/followers", "following_url": "https://api.github.com/users/jettify/following{/other_user}", "gists_url": "https://api.github.com/users/jettify/gists{/gist_id}", "starred_url": "https://api.github.com/users/jettify/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jettify/subscriptions", "organizations_url": "https://api.github.com/users/jettify/orgs", "repos_url": "https://api.github.com/users/jettify/repos", "events_url": "https://api.github.com/users/jettify/events{/privacy}", "received_events_url": "https://api.github.com/users/jettify/received_events", "type": "User", "site_admin": false}, {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, {"login": "thehesiod", "id": 4001789, "node_id": "MDQ6VXNlcjQwMDE3ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4001789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thehesiod", "html_url": "https://github.com/thehesiod", "followers_url": "https://api.github.com/users/thehesiod/followers", "following_url": "https://api.github.com/users/thehesiod/following{/other_user}", "gists_url": "https://api.github.com/users/thehesiod/gists{/gist_id}", "starred_url": "https://api.github.com/users/thehesiod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thehesiod/subscriptions", "organizations_url": "https://api.github.com/users/thehesiod/orgs", "repos_url": "https://api.github.com/users/thehesiod/repos", "events_url": "https://api.github.com/users/thehesiod/events{/privacy}", "received_events_url": "https://api.github.com/users/thehesiod/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2019-03-30T05:15:55Z", "updated_at": "2019-12-05T14:35:28Z", "closed_at": "2019-12-05T14:35:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hey all. \r\n\r\nWe can implement a bulk insert, but we need to decide what to do with **mogrify**.\r\n\r\nIm test `psycopg2.extras.execute_batch` in asynchronous style and the result impressed me. \r\nwe replace \"executemany\" with \"mogrify and execute\"\r\n\r\nRecently, the argument was `use_batch_mode` added to sqlalchemy. https://github.com/psycopg/psycopg2/issues/491#issuecomment-276693067 \r\n> `use_batch_mode`: This flag allows `psycopg2.extras.execute_batch` for `cursor.executemany()` calls performed by the Engine. It is currently experimental but may well become True by default as it is critical for executemany performance.\r\n\r\npsycopg documentation: http://initd.org/psycopg/docs/extras.html#psycopg2.extras.execute_batch\r\npsycopg implementation: https://github.com/psycopg/psycopg2/blob/master/lib/extras.py#L1185\r\nsignificant speedup: https://github.com/psycopg/psycopg2/issues/491#issuecomment-276551038\r\n\r\nThis allows us to make mass requests using `use_batch_mode=True` in `Engine` and will resolve of issues: https://github.com/aio-libs/aiopg/issues/112, https://github.com/aio-libs/aiopg/issues/546.\r\n\r\nhowever, `cursor.mogrify` is an asynchronous function. \r\nalthough is doesn't need https://github.com/aio-libs/aiopg/issues/186, https://github.com/aio-libs/aiopg/issues/352 \r\n\r\nI propose to change this behavior in version **1.0.0** without backward compatibility.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/530", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/530/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/530/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/530/events", "html_url": "https://github.com/aio-libs/aiopg/issues/530", "id": 401760826, "node_id": "MDU6SXNzdWU0MDE3NjA4MjY=", "number": 530, "title": "How to provide 'on the fly' which postgresql schema i want to use on sqlalchemy queries?", "user": {"login": "nickmetal", "id": 10012365, "node_id": "MDQ6VXNlcjEwMDEyMzY1", "avatar_url": "https://avatars1.githubusercontent.com/u/10012365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickmetal", "html_url": "https://github.com/nickmetal", "followers_url": "https://api.github.com/users/nickmetal/followers", "following_url": "https://api.github.com/users/nickmetal/following{/other_user}", "gists_url": "https://api.github.com/users/nickmetal/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickmetal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickmetal/subscriptions", "organizations_url": "https://api.github.com/users/nickmetal/orgs", "repos_url": "https://api.github.com/users/nickmetal/repos", "events_url": "https://api.github.com/users/nickmetal/events{/privacy}", "received_events_url": "https://api.github.com/users/nickmetal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-22T13:19:21Z", "updated_at": "2019-01-25T20:40:49Z", "closed_at": "2019-01-25T20:40:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to select schema name before i did a query.\r\n\r\nIn traditional sqlalchemy i do:\r\n```python\r\nfrom sqlalchemy import create_engine\r\nengine = create_engine(...).execution_options(schema_translate_map={None: 'some_schema_name'})\r\n```\r\nAnd all next queries for each models will be use such path: \r\n```sql\r\nselect * from some_schema_name.table;\r\n```\r\n\r\nBut i faced with error using aiopg:\r\n```python\r\nfrom aiopg.sa import create_engine\r\nengine = create_engine(...).execution_options \r\nAttributeError: 'Engine' object has no attribute 'execution_options'\r\n```\r\nI was trying to find this in [docs](https://media.readthedocs.org/pdf/aiopg/stable/aiopg.pdf), but not found.\r\nWhich way is correct to provide schema name in `aiopg.sa`?\r\n\r\naiopg==0.15.0\r\nSQLAlchemy==1.2.16\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/528", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/528/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/528/events", "html_url": "https://github.com/aio-libs/aiopg/issues/528", "id": 399077186, "node_id": "MDU6SXNzdWUzOTkwNzcxODY=", "number": 528, "title": "New release", "user": {"login": "roadscape", "id": 5168676, "node_id": "MDQ6VXNlcjUxNjg2NzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/5168676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roadscape", "html_url": "https://github.com/roadscape", "followers_url": "https://api.github.com/users/roadscape/followers", "following_url": "https://api.github.com/users/roadscape/following{/other_user}", "gists_url": "https://api.github.com/users/roadscape/gists{/gist_id}", "starred_url": "https://api.github.com/users/roadscape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roadscape/subscriptions", "organizations_url": "https://api.github.com/users/roadscape/orgs", "repos_url": "https://api.github.com/users/roadscape/repos", "events_url": "https://api.github.com/users/roadscape/events{/privacy}", "received_events_url": "https://api.github.com/users/roadscape/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984836, "node_id": "MDU6TGFiZWw4OTk4NDgzNg==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-14T21:17:37Z", "updated_at": "2019-01-26T07:47:01Z", "closed_at": "2019-01-26T07:47:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue https://github.com/aio-libs/aiopg/issues/364 was resolved with PR https://github.com/aio-libs/aiopg/pull/452 back in October, but there hasn't been a 0.16.0 release. (0.15.0 was released Aug 14, 2018)\r\n\r\nI attempted to work around this using `dependency_links`, but this doesn't work since `0.15.0` is what's hardcoded on master and [this bug](https://github.com/pypa/setuptools/issues/987) prevents using a newer commit hash.\r\n\r\nCould we have a new release soon? :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/510", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/510/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/510/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/510/events", "html_url": "https://github.com/aio-libs/aiopg/issues/510", "id": 370804961, "node_id": "MDU6SXNzdWUzNzA4MDQ5NjE=", "number": 510, "title": "asyncpg integration ? ", "user": {"login": "vir-mir", "id": 2296252, "node_id": "MDQ6VXNlcjIyOTYyNTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2296252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vir-mir", "html_url": "https://github.com/vir-mir", "followers_url": "https://api.github.com/users/vir-mir/followers", "following_url": "https://api.github.com/users/vir-mir/following{/other_user}", "gists_url": "https://api.github.com/users/vir-mir/gists{/gist_id}", "starred_url": "https://api.github.com/users/vir-mir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vir-mir/subscriptions", "organizations_url": "https://api.github.com/users/vir-mir/orgs", "repos_url": "https://api.github.com/users/vir-mir/repos", "events_url": "https://api.github.com/users/vir-mir/events{/privacy}", "received_events_url": "https://api.github.com/users/vir-mir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984833, "node_id": "MDU6TGFiZWw4OTk4NDgzMw==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-16T21:21:15Z", "updated_at": "2019-01-26T07:46:48Z", "closed_at": "2019-01-26T07:46:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Dear team,\r\n \r\nI want to introduce a low-level driver, it's pretty good. https://github.com/MagicStack/asyncpg\r\nThis driver is completely asynchronous, it does not use Psycopg2.\r\nIe, he does everything himself.\r\n\r\nthere are downsides:\r\n1. don't hold pg_bouncer\r\n2. not so big comunite as in Psycopg2\r\n\r\nbut there are also pluses:\r\n1. he is faster, there are benchmark\r\n2. we use it in some microservices in production\r\n3. He has an asynchronous cursor\r\n\r\nI suggest to make it as an optional one, which can be installed, like this: `pip install aoipg[asyncpg]`\r\n\r\nsince it may not be completely conspicuous.\r\n\r\nInteresting also opinion, @asvetlov  and @jettify . do not be silent :)\r\n\r\nGuys, if you are for, put your fingers in the top, no, well, the same thing, just the other way around", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/508", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/508/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/508/events", "html_url": "https://github.com/aio-libs/aiopg/issues/508", "id": 369060523, "node_id": "MDU6SXNzdWUzNjkwNjA1MjM=", "number": 508, "title": "Deprecated async lock with Python 3.7", "user": {"login": "Pajinek", "id": 430007, "node_id": "MDQ6VXNlcjQzMDAwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/430007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pajinek", "html_url": "https://github.com/Pajinek", "followers_url": "https://api.github.com/users/Pajinek/followers", "following_url": "https://api.github.com/users/Pajinek/following{/other_user}", "gists_url": "https://api.github.com/users/Pajinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pajinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pajinek/subscriptions", "organizations_url": "https://api.github.com/users/Pajinek/orgs", "repos_url": "https://api.github.com/users/Pajinek/repos", "events_url": "https://api.github.com/users/Pajinek/events{/privacy}", "received_events_url": "https://api.github.com/users/Pajinek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984831, "node_id": "MDU6TGFiZWw4OTk4NDgzMQ==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 89984836, "node_id": "MDU6TGFiZWw4OTk4NDgzNg==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-10-11T10:43:16Z", "updated_at": "2019-01-28T20:09:30Z", "closed_at": "2019-01-28T20:09:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I received warning with Python 3.7:\r\n\r\n```\r\n/usr/local/lib/python3.7/site-packages/aiopg/pool.py:46: DeprecationWarning: 'with (yield from lock)' is deprecated use 'async with lock' insteadwith (yield from pool._cond):\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/484", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/484/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/484/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/484/events", "html_url": "https://github.com/aio-libs/aiopg/issues/484", "id": 337251061, "node_id": "MDU6SXNzdWUzMzcyNTEwNjE=", "number": 484, "title": "'NoneType' object has no attribute 'is_callable' when trying to update", "user": {"login": "Satchitananda", "id": 1810820, "node_id": "MDQ6VXNlcjE4MTA4MjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1810820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Satchitananda", "html_url": "https://github.com/Satchitananda", "followers_url": "https://api.github.com/users/Satchitananda/followers", "following_url": "https://api.github.com/users/Satchitananda/following{/other_user}", "gists_url": "https://api.github.com/users/Satchitananda/gists{/gist_id}", "starred_url": "https://api.github.com/users/Satchitananda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Satchitananda/subscriptions", "organizations_url": "https://api.github.com/users/Satchitananda/orgs", "repos_url": "https://api.github.com/users/Satchitananda/repos", "events_url": "https://api.github.com/users/Satchitananda/events{/privacy}", "received_events_url": "https://api.github.com/users/Satchitananda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-30T23:47:14Z", "updated_at": "2018-06-30T23:55:45Z", "closed_at": "2018-06-30T23:55:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nawait conn.execute(update(Recipe.__table__) \\\r\n        .where(Recipe.__table__.c.id == rec_id) \\\r\n        .values(**transformed['recipe']))\r\n```\r\n\r\nWhen trying to execute update receiving such error", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/471", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/471/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/471/events", "html_url": "https://github.com/aio-libs/aiopg/issues/471", "id": 319954900, "node_id": "MDU6SXNzdWUzMTk5NTQ5MDA=", "number": 471, "title": "Is there a way to wrap all transactions in test to rollback them at the end of a test?", "user": {"login": "GregEremeev", "id": 1488661, "node_id": "MDQ6VXNlcjE0ODg2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1488661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GregEremeev", "html_url": "https://github.com/GregEremeev", "followers_url": "https://api.github.com/users/GregEremeev/followers", "following_url": "https://api.github.com/users/GregEremeev/following{/other_user}", "gists_url": "https://api.github.com/users/GregEremeev/gists{/gist_id}", "starred_url": "https://api.github.com/users/GregEremeev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GregEremeev/subscriptions", "organizations_url": "https://api.github.com/users/GregEremeev/orgs", "repos_url": "https://api.github.com/users/GregEremeev/repos", "events_url": "https://api.github.com/users/GregEremeev/events{/privacy}", "received_events_url": "https://api.github.com/users/GregEremeev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-03T14:51:38Z", "updated_at": "2018-05-04T11:58:57Z", "closed_at": "2018-05-04T11:13:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use aiopg.sa.create_engine and I'm looking for a way to wrap all transactions in my tests to rollback them at the end of each test to remove all data.\r\nIs it possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/445", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/445/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/445/events", "html_url": "https://github.com/aio-libs/aiopg/issues/445", "id": 300809678, "node_id": "MDU6SXNzdWUzMDA4MDk2Nzg=", "number": 445, "title": "psycopg2 renaming", "user": {"login": "flip111", "id": 2244480, "node_id": "MDQ6VXNlcjIyNDQ0ODA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2244480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip111", "html_url": "https://github.com/flip111", "followers_url": "https://api.github.com/users/flip111/followers", "following_url": "https://api.github.com/users/flip111/following{/other_user}", "gists_url": "https://api.github.com/users/flip111/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip111/subscriptions", "organizations_url": "https://api.github.com/users/flip111/orgs", "repos_url": "https://api.github.com/users/flip111/repos", "events_url": "https://api.github.com/users/flip111/events{/privacy}", "received_events_url": "https://api.github.com/users/flip111/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-02-27T22:00:53Z", "updated_at": "2019-01-02T12:41:16Z", "closed_at": "2019-01-01T12:35:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think this library triggers the following warning:\r\n\r\n```\r\nenv/lib/python3.6/site-packages/psycopg2/__init__.py:144: UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use \"pip install psycopg2-binary\" instead. For details see: <http://initd.org/psycopg/docs/install.html#binary-install-from-pypi>.\r\n```\r\n\r\ni noticed this while running `adev runserver` from aiohttp-devtools", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/436", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/436/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/436/events", "html_url": "https://github.com/aio-libs/aiopg/issues/436", "id": 296633414, "node_id": "MDU6SXNzdWUyOTY2MzM0MTQ=", "number": 436, "title": "Python 3.7 compatibility", "user": {"login": "smagafurov", "id": 8242406, "node_id": "MDQ6VXNlcjgyNDI0MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8242406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smagafurov", "html_url": "https://github.com/smagafurov", "followers_url": "https://api.github.com/users/smagafurov/followers", "following_url": "https://api.github.com/users/smagafurov/following{/other_user}", "gists_url": "https://api.github.com/users/smagafurov/gists{/gist_id}", "starred_url": "https://api.github.com/users/smagafurov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smagafurov/subscriptions", "organizations_url": "https://api.github.com/users/smagafurov/orgs", "repos_url": "https://api.github.com/users/smagafurov/repos", "events_url": "https://api.github.com/users/smagafurov/events{/privacy}", "received_events_url": "https://api.github.com/users/smagafurov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-02-13T07:03:14Z", "updated_at": "2018-08-14T17:11:24Z", "closed_at": "2018-08-14T17:11:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "SyntaxError in python 3.7 (name `async` is not allowed)\r\n\r\n```\r\n  File \"/home/travis/build/05bit/peewee-async/peewee_async.py\", line 29, in <module>\r\n    import aiopg\r\n  File \"/home/travis/virtualenv/python3.7-dev/lib/python3.7/site-packages/aiopg/__init__.py\", line 5, in <module>\r\n    from .connection import connect, Connection, TIMEOUT as DEFAULT_TIMEOUT\r\n  File \"/home/travis/virtualenv/python3.7-dev/lib/python3.7/site-packages/aiopg/connection.py\", line 109\r\n    self._conn = psycopg2.connect(dsn, async=True, **kwargs)\r\n                                           ^\r\nSyntaxError: invalid syntax\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/411", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/411/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/411/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/411/events", "html_url": "https://github.com/aio-libs/aiopg/issues/411", "id": 284848944, "node_id": "MDU6SXNzdWUyODQ4NDg5NDQ=", "number": 411, "title": "Broken compatibility with new release of SQLAlchemy 1.2.0", "user": {"login": "Gr1N", "id": 1087619, "node_id": "MDQ6VXNlcjEwODc2MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1087619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gr1N", "html_url": "https://github.com/Gr1N", "followers_url": "https://api.github.com/users/Gr1N/followers", "following_url": "https://api.github.com/users/Gr1N/following{/other_user}", "gists_url": "https://api.github.com/users/Gr1N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gr1N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gr1N/subscriptions", "organizations_url": "https://api.github.com/users/Gr1N/orgs", "repos_url": "https://api.github.com/users/Gr1N/repos", "events_url": "https://api.github.com/users/Gr1N/events{/privacy}", "received_events_url": "https://api.github.com/users/Gr1N/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-28T06:15:27Z", "updated_at": "2018-01-03T20:13:36Z", "closed_at": "2018-01-03T20:13:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nYesterday released new version of SQLAlchemy (1.2.0) and new release incompatible with aiopg:\r\n\r\n```\r\nmymodule.py:42: in fetchone\r\n    result = await conn.execute(query)\r\n.tox/py36-tests/lib/python3.6/site-packages/aiopg/utils.py:72: in __await__\r\n    resp = yield from self._coro\r\n.tox/py36-tests/lib/python3.6/site-packages/aiopg/sa/connection.py:116: in _execute\r\n    return ResultProxy(self, cursor, self._dialect, result_map)\r\n.tox/py36-tests/lib/python3.6/site-packages/aiopg/sa/result.py:234: in __init__\r\n    self._metadata = ResultMetaData(self, cursor.description)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <aiopg.sa.result.ResultMetaData object at 0x7f0417f6a550>\r\nresult_proxy = <aiopg.sa.result.ResultProxy object at 0x7f0417f6a5c0>\r\nmetadata = (Column(name='column_0', type_code=23, display_size=None, internal_size=4, precision=None, scale=None, null_ok=None), ...Column(name='column_2', type_code=3802, display_size=None, internal_size=-1, precision=None, scale=None, null_ok=None))\r\n\r\n    def __init__(self, result_proxy, metadata):\r\n        self._processors = processors = []\r\n    \r\n        result_map = {}\r\n        if result_proxy._result_map:\r\n            result_map = {elem[0]: elem[3] for elem in\r\n                          result_proxy._result_map}\r\n    \r\n        # We do not strictly need to store the processor in the key mapping,\r\n        # though it is faster in the Python version (probably because of the\r\n        # saved attribute lookup self._processors)\r\n        self._keymap = keymap = {}\r\n        self.keys = []\r\n        dialect = result_proxy.dialect\r\n>       typemap = dialect.dbapi_type_map\r\nE       AttributeError: 'PGDialect_psycopg2' object has no attribute 'dbapi_type_map'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/409", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/409/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/409/events", "html_url": "https://github.com/aio-libs/aiopg/issues/409", "id": 282338939, "node_id": "MDU6SXNzdWUyODIzMzg5Mzk=", "number": 409, "title": "aiopg.sa don't work", "user": {"login": "Bernard04", "id": 34566019, "node_id": "MDQ6VXNlcjM0NTY2MDE5", "avatar_url": "https://avatars3.githubusercontent.com/u/34566019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bernard04", "html_url": "https://github.com/Bernard04", "followers_url": "https://api.github.com/users/Bernard04/followers", "following_url": "https://api.github.com/users/Bernard04/following{/other_user}", "gists_url": "https://api.github.com/users/Bernard04/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bernard04/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bernard04/subscriptions", "organizations_url": "https://api.github.com/users/Bernard04/orgs", "repos_url": "https://api.github.com/users/Bernard04/repos", "events_url": "https://api.github.com/users/Bernard04/events{/privacy}", "received_events_url": "https://api.github.com/users/Bernard04/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-15T07:12:46Z", "updated_at": "2017-12-15T08:01:52Z", "closed_at": "2017-12-15T08:01:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nOriginal exception was:\r\nTraceback (most recent call last):\r\n  File \"/projects/api/PgSQL.py\", line 2, in <module>\r\n    from aiopg.sa import create_engine\r\n  File \"/usr/local/lib/python3.6/dist-packages/aiopg/sa/__init__.py\", line 2, in <module>\r\n    from .connection import SAConnection\r\n  File \"/usr/local/lib/python3.6/dist-packages/aiopg/sa/connection.py\", line 3, in <module>\r\n    from sqlalchemy.sql import ClauseElement\r\nModuleNotFoundError: No module named 'sqlalchemy.sql'; 'sqlalchemy' is not a package\r\n```\r\n\r\nBut i did already install sqlalchemy and use in projects. Help me please.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/401", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/401/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/401/events", "html_url": "https://github.com/aio-libs/aiopg/issues/401", "id": 275931725, "node_id": "MDU6SXNzdWUyNzU5MzE3MjU=", "number": 401, "title": "need inserted_primary_key in ResultProxy", "user": {"login": "DeoLeung", "id": 3764720, "node_id": "MDQ6VXNlcjM3NjQ3MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3764720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeoLeung", "html_url": "https://github.com/DeoLeung", "followers_url": "https://api.github.com/users/DeoLeung/followers", "following_url": "https://api.github.com/users/DeoLeung/following{/other_user}", "gists_url": "https://api.github.com/users/DeoLeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeoLeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeoLeung/subscriptions", "organizations_url": "https://api.github.com/users/DeoLeung/orgs", "repos_url": "https://api.github.com/users/DeoLeung/repos", "events_url": "https://api.github.com/users/DeoLeung/events{/privacy}", "received_events_url": "https://api.github.com/users/DeoLeung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-22T03:15:11Z", "updated_at": "2017-12-01T02:12:15Z", "closed_at": "2017-12-01T02:12:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI would like to have inserted_primary_key  in ResultProxy as what sqlalchemy does, any hint on how to implement it?\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/385", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/385/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/385/events", "html_url": "https://github.com/aio-libs/aiopg/issues/385", "id": 256769009, "node_id": "MDU6SXNzdWUyNTY3NjkwMDk=", "number": 385, "title": "Any way to stream results asynchronously?", "user": {"login": "Daenyth", "id": 14644, "node_id": "MDQ6VXNlcjE0NjQ0", "avatar_url": "https://avatars3.githubusercontent.com/u/14644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Daenyth", "html_url": "https://github.com/Daenyth", "followers_url": "https://api.github.com/users/Daenyth/followers", "following_url": "https://api.github.com/users/Daenyth/following{/other_user}", "gists_url": "https://api.github.com/users/Daenyth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Daenyth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Daenyth/subscriptions", "organizations_url": "https://api.github.com/users/Daenyth/orgs", "repos_url": "https://api.github.com/users/Daenyth/repos", "events_url": "https://api.github.com/users/Daenyth/events{/privacy}", "received_events_url": "https://api.github.com/users/Daenyth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-11T16:42:23Z", "updated_at": "2017-10-15T17:31:00Z", "closed_at": "2017-10-15T17:31:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since psycopg2 doesn't support named cursors in async mode, is there any way to stream results?\r\n\r\nIs it possible to use aipog's interface synchronously to stream results? If so, how? Do I need to use raw psycopg2 directly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/380", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/380/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/380/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/380/events", "html_url": "https://github.com/aio-libs/aiopg/issues/380", "id": 256163361, "node_id": "MDU6SXNzdWUyNTYxNjMzNjE=", "number": 380, "title": "set timeout on SAConnection", "user": {"login": "DeoLeung", "id": 3764720, "node_id": "MDQ6VXNlcjM3NjQ3MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3764720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeoLeung", "html_url": "https://github.com/DeoLeung", "followers_url": "https://api.github.com/users/DeoLeung/followers", "following_url": "https://api.github.com/users/DeoLeung/following{/other_user}", "gists_url": "https://api.github.com/users/DeoLeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeoLeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeoLeung/subscriptions", "organizations_url": "https://api.github.com/users/DeoLeung/orgs", "repos_url": "https://api.github.com/users/DeoLeung/repos", "events_url": "https://api.github.com/users/DeoLeung/events{/privacy}", "received_events_url": "https://api.github.com/users/DeoLeung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-08T07:22:35Z", "updated_at": "2017-10-18T01:45:24Z", "closed_at": "2017-10-17T07:54:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nCan I set timeout on SAConnetion separately? \r\ncurrently I can only set it when I create the engine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/372", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/372/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/372/events", "html_url": "https://github.com/aio-libs/aiopg/issues/372", "id": 253260808, "node_id": "MDU6SXNzdWUyNTMyNjA4MDg=", "number": 372, "title": "psycopg2.OperationalError: server closed the connection unexpectedly", "user": {"login": "soar", "id": 30570, "node_id": "MDQ6VXNlcjMwNTcw", "avatar_url": "https://avatars0.githubusercontent.com/u/30570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soar", "html_url": "https://github.com/soar", "followers_url": "https://api.github.com/users/soar/followers", "following_url": "https://api.github.com/users/soar/following{/other_user}", "gists_url": "https://api.github.com/users/soar/gists{/gist_id}", "starred_url": "https://api.github.com/users/soar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soar/subscriptions", "organizations_url": "https://api.github.com/users/soar/orgs", "repos_url": "https://api.github.com/users/soar/repos", "events_url": "https://api.github.com/users/soar/events{/privacy}", "received_events_url": "https://api.github.com/users/soar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-28T08:27:28Z", "updated_at": "2017-10-17T18:46:57Z", "closed_at": "2017-10-17T18:46:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using aiopg with SqlAlchemy support. All your examples looks like:\r\n\r\n```python\r\nasync with create_engine(...) as engine:\r\n        async with engine.acquire() as conn:\r\n            await conn.execute(...)\r\n```\r\n\r\nBut I think this is wrong way: you shouldn't `create_engine` on every DB call. So engine object should be reusable instance in whole app. I've tried to use it like this:\r\n\r\n```python\r\n# Somewhere on app init stage:\r\nasync def init_db_engine():\r\n    db_engine = await aiopg.sa.create_engine(**engine_init_params)\r\n    return db_engine\r\n\r\n# Somewhere on app stop stage:\r\nasync def release_db_engine(db_engine):\r\n    db_engine.close()\r\n    return await db_engine.wait_closed()\r\n\r\n# In some handlers:\r\nasync def get(*args, **kwargs):\r\n    redirect_table = app.db.models.redirect.Redirect.__table__\r\n    async with self.application.db.acquire() as conn:\r\n        redirect_query = redirect_table.select().where(...)\r\n        redirect_query_result = await conn.execute(redirect_query)\r\n        redirect_info = await redirect_query_result.fetchone()\r\n```\r\n\r\nAll looks like good, but... After some time of program inactivity any call to database fails with error:\r\n\r\n```\r\n\tvalue = future.result()\r\n\tresp = yield from self._coro\r\n\tredirect_query_result = await conn.execute(redirect_query)\r\nFile \"/usr/local/lib/python3.6/site-packages/aiopg/utils.py\", line 72, in __await__\r\nFile \"/usr/local/lib/python3.6/site-packages/aiopg/cursor.py\", line 113, in execute\r\nFile \"/usr/local/lib/python3.6/site-packages/aiopg/connection.py\", line 237, in _poll\r\n\tyield from self._conn._poll(waiter, timeout)\r\n\tyield from cursor.execute(str(compiled), post_processed_params[0])\r\nFile \"/usr/local/lib/python3.6/site-packages/aiopg/sa/connection.py\", line 110, in _execute\r\n\treturn fut.result()\r\nFile \"/usr/local/lib/python3.6/asyncio/tasks.py\", line 358, in wait_for\r\nFile \"/usr/local/lib/python3.6/site-packages/aiopg/connection.py\", line 134, in _ready\r\n\tyield from asyncio.wait_for(self._waiter, timeout, loop=self._loop)\r\n\r\npsycopg2.OperationalError: server closed the connection unexpectedly before or while processing the request. This probably means the server terminated abnormally\r\n```\r\n\r\nNext call - works fine, so connection is reistablished.\r\n\r\nWhat I've tried:\r\n1. Add parameter `pool_recycle=1` to `engine_init_params` - it is not recognized\r\n2. Add `minsize` and `maxsize` parameters to `engine_init_params` - this didn't help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/367", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/367/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/367/events", "html_url": "https://github.com/aio-libs/aiopg/issues/367", "id": 248701486, "node_id": "MDU6SXNzdWUyNDg3MDE0ODY=", "number": 367, "title": "Add support for async session.query(MyModel) operations", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-08T12:40:18Z", "updated_at": "2018-06-16T19:23:33Z", "closed_at": "2017-08-09T11:22:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to be able to query the database using SQLAlchemy's Query API e.g.\r\n```python\r\nsession_factory = sessionmaker(bind=some_engine)\r\nsession = scoped_session()()\r\nasync session.query(MyModel).one()\r\n```\r\nRight now it seems that it is only possible to run raw SQL queries asynchronously.\r\nI'm not sure that sessions can be created using what we currently have. If not, we need to implement them as well somehow.\r\nIs it possible to add async/await support to the Query API?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/364", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/364/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/364/events", "html_url": "https://github.com/aio-libs/aiopg/issues/364", "id": 247226662, "node_id": "MDU6SXNzdWUyNDcyMjY2NjI=", "number": 364, "title": "close cannot be used while an asynchronous query is underway", "user": {"login": "ingmferrer", "id": 6753534, "node_id": "MDQ6VXNlcjY3NTM1MzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6753534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ingmferrer", "html_url": "https://github.com/ingmferrer", "followers_url": "https://api.github.com/users/ingmferrer/followers", "following_url": "https://api.github.com/users/ingmferrer/following{/other_user}", "gists_url": "https://api.github.com/users/ingmferrer/gists{/gist_id}", "starred_url": "https://api.github.com/users/ingmferrer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ingmferrer/subscriptions", "organizations_url": "https://api.github.com/users/ingmferrer/orgs", "repos_url": "https://api.github.com/users/ingmferrer/repos", "events_url": "https://api.github.com/users/ingmferrer/events{/privacy}", "received_events_url": "https://api.github.com/users/ingmferrer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 52, "created_at": "2017-08-01T23:00:02Z", "updated_at": "2019-03-23T20:59:11Z", "closed_at": "2018-10-16T20:45:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting this error if I do multiple fetchs. I'm not sure what I'm doing wrong:\r\n```\r\n\r\nException ignored in: <function ResultProxy.__init__.<locals>.<lambda> at 0x7f979638fe18>\r\nTraceback (most recent call last):\r\n  File \"/home/anthbot/Pyvenv/anthbotv5/lib/python3.5/site-packages/aiopg/sa/result.py\", line 235, in <lambda>\r\n    self._weak = weakref.ref(self, lambda wr: cursor.close())\r\n  File \"/home/anthbot/Pyvenv/anthbotv5/lib/python3.5/site-packages/aiopg/cursor.py\", line 50, in close\r\n    self._impl.close()\r\npsycopg2.ProgrammingError: close cannot be used while an asynchronous query is underway\r\n```\r\nThis is the query:\r\n```\r\nquery = sa.select([role_item]).where(role_item.c.auto_role_id == auto_role_id)\r\n        return await fetch_ite(query)\r\n```\r\nThis is the function:\r\n```\r\nasync def _fetch(query, type=DBType.ONE):\r\n    async with engine.acquire() as conn:\r\n        res = await conn.execute(query)\r\n        if type == DBType.ONE:\r\n            return await res.fetchone()\r\n        elif type == DBType.ALL:\r\n            return await res.fetchall()\r\n        elif type == DBType.ITE:\r\n            return res\r\n        return None\r\n```\r\n\r\nAny help would be appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/358", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/358/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/358/events", "html_url": "https://github.com/aio-libs/aiopg/issues/358", "id": 245541828, "node_id": "MDU6SXNzdWUyNDU1NDE4Mjg=", "number": 358, "title": "Is there a good way to create aiopg pytest.fixture?", "user": {"login": "royxue", "id": 4725561, "node_id": "MDQ6VXNlcjQ3MjU1NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4725561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/royxue", "html_url": "https://github.com/royxue", "followers_url": "https://api.github.com/users/royxue/followers", "following_url": "https://api.github.com/users/royxue/following{/other_user}", "gists_url": "https://api.github.com/users/royxue/gists{/gist_id}", "starred_url": "https://api.github.com/users/royxue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/royxue/subscriptions", "organizations_url": "https://api.github.com/users/royxue/orgs", "repos_url": "https://api.github.com/users/royxue/repos", "events_url": "https://api.github.com/users/royxue/events{/privacy}", "received_events_url": "https://api.github.com/users/royxue/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-25T21:32:11Z", "updated_at": "2017-10-30T18:11:13Z", "closed_at": "2017-10-30T18:11:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "As for test, what's the best way to create aiopg engine/connections/transaction for the sqlalchemy async model functions?\r\n\r\nI tried several ways but didnt find a good solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/356", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/356/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/356/events", "html_url": "https://github.com/aio-libs/aiopg/issues/356", "id": 245343652, "node_id": "MDU6SXNzdWUyNDUzNDM2NTI=", "number": 356, "title": "How to make concurrent queries to a database?", "user": {"login": "panagiks", "id": 9973156, "node_id": "MDQ6VXNlcjk5NzMxNTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9973156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/panagiks", "html_url": "https://github.com/panagiks", "followers_url": "https://api.github.com/users/panagiks/followers", "following_url": "https://api.github.com/users/panagiks/following{/other_user}", "gists_url": "https://api.github.com/users/panagiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/panagiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/panagiks/subscriptions", "organizations_url": "https://api.github.com/users/panagiks/orgs", "repos_url": "https://api.github.com/users/panagiks/repos", "events_url": "https://api.github.com/users/panagiks/events{/privacy}", "received_events_url": "https://api.github.com/users/panagiks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-07-25T09:41:40Z", "updated_at": "2019-02-26T18:36:28Z", "closed_at": "2017-10-17T07:56:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm probably missing sth really obvious .. I'm trying to make a few concurrent queries to a database in the following form:\r\n\r\n```py\r\nwith (yield from request.app['pg_engine']) as conn:\r\n    tasks = []\r\n    tasks.append(conn.execute(tbl.insert().values(a=1,b=2....)\r\n    tasks.append(conn.execute(other_tbl.insert().values(a=2,b=3....)\r\n    res = yield from asyncio.gather(*tasks)\r\n```\r\nbut I get : `RuntimeError: cursor.execute() called while another coroutine is already waiting for incoming data`.\r\n\r\nSo I guess my approach is not the best practice. My questions is how should/would I make a few concurrent queries to create rows in a few different tables?\r\n\r\nNote:  `app['pg_engine']` is created using `aiopg.sa.create_engine`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/345", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/345/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/345/events", "html_url": "https://github.com/aio-libs/aiopg/issues/345", "id": 239033014, "node_id": "MDU6SXNzdWUyMzkwMzMwMTQ=", "number": 345, "title": "SQLAlchemy Dialects", "user": {"login": "jairhenrique", "id": 81854, "node_id": "MDQ6VXNlcjgxODU0", "avatar_url": "https://avatars0.githubusercontent.com/u/81854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jairhenrique", "html_url": "https://github.com/jairhenrique", "followers_url": "https://api.github.com/users/jairhenrique/followers", "following_url": "https://api.github.com/users/jairhenrique/following{/other_user}", "gists_url": "https://api.github.com/users/jairhenrique/gists{/gist_id}", "starred_url": "https://api.github.com/users/jairhenrique/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jairhenrique/subscriptions", "organizations_url": "https://api.github.com/users/jairhenrique/orgs", "repos_url": "https://api.github.com/users/jairhenrique/repos", "events_url": "https://api.github.com/users/jairhenrique/events{/privacy}", "received_events_url": "https://api.github.com/users/jairhenrique/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-28T02:08:21Z", "updated_at": "2017-06-28T14:59:15Z", "closed_at": "2017-06-28T14:59:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if SQLAlchemy support was done using the [dialects](http://docs.sqlalchemy.org/en/latest/dialects/index.html).\r\n\r\n```python\r\nfrom sqlalchemy import create_engine\r\nengine = create_engine('postgresql+aiopg://...')\r\n....\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/339", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/339/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/339/events", "html_url": "https://github.com/aio-libs/aiopg/issues/339", "id": 234289422, "node_id": "MDU6SXNzdWUyMzQyODk0MjI=", "number": 339, "title": "could not send SSL negotiation packet: Resource temporarily unavailable", "user": {"login": "alexmac", "id": 165841, "node_id": "MDQ6VXNlcjE2NTg0MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/165841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexmac", "html_url": "https://github.com/alexmac", "followers_url": "https://api.github.com/users/alexmac/followers", "following_url": "https://api.github.com/users/alexmac/following{/other_user}", "gists_url": "https://api.github.com/users/alexmac/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexmac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexmac/subscriptions", "organizations_url": "https://api.github.com/users/alexmac/orgs", "repos_url": "https://api.github.com/users/alexmac/repos", "events_url": "https://api.github.com/users/alexmac/events{/privacy}", "received_events_url": "https://api.github.com/users/alexmac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-07T17:44:18Z", "updated_at": "2017-06-28T15:00:14Z", "closed_at": "2017-06-28T15:00:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "No idea what's causing this yet - but I see sporadic failures when using aiopg to connect to our DBs (via a pgbouncer if that makes a difference)\r\n\r\n```\r\nFile \"/usr/local/lib/python3.5/site-packages/aiopg/pool.py\", line 263, in cursor\r\n    conn = yield from self.acquire()\r\n  File \"/usr/local/lib/python3.5/site-packages/aiopg/utils.py\", line 67, in __iter__\r\n    resp = yield from self._coro\r\n  File \"/usr/local/lib/python3.5/site-packages/aiopg/pool.py\", line 170, in _acquire\r\n    yield from self._fill_free_pool(True)\r\n  File \"/usr/local/lib/python3.5/site-packages/aiopg/pool.py\", line 203, in _fill_free_pool\r\n    **self._conn_kwargs)\r\n  File \"/usr/local/lib/python3.5/site-packages/aiopg/utils.py\", line 67, in __iter__\r\n    resp = yield from self._coro\r\n  File \"/usr/local/lib/python3.5/site-packages/aiopg/connection.py\", line 74, in _connect\r\n    yield from conn._poll(waiter, timeout)\r\n  File \"/usr/local/lib/python3.5/site-packages/aiopg/connection.py\", line 237, in _poll\r\n    yield from asyncio.wait_for(self._waiter, timeout, loop=self._loop)\r\n  File \"/usr/local/lib/python3.5/asyncio/tasks.py\", line 392, in wait_for\r\n    return fut.result()\r\n  File \"/usr/local/lib/python3.5/asyncio/futures.py\", line 274, in result\r\n    raise self._exception\r\n  File \"/usr/local/lib/python3.5/site-packages/aiopg/connection.py\", line 134, in _ready\r\n    state = self._conn.poll()\r\npsycopg2.OperationalError: could not send SSL negotiation packet: Resource temporarily unavailable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/338", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/338/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/338/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/338/events", "html_url": "https://github.com/aio-libs/aiopg/issues/338", "id": 233962239, "node_id": "MDU6SXNzdWUyMzM5NjIyMzk=", "number": 338, "title": "psycopg2.OperationalError after an idle period", "user": {"login": "barrachri", "id": 4802083, "node_id": "MDQ6VXNlcjQ4MDIwODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4802083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barrachri", "html_url": "https://github.com/barrachri", "followers_url": "https://api.github.com/users/barrachri/followers", "following_url": "https://api.github.com/users/barrachri/following{/other_user}", "gists_url": "https://api.github.com/users/barrachri/gists{/gist_id}", "starred_url": "https://api.github.com/users/barrachri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barrachri/subscriptions", "organizations_url": "https://api.github.com/users/barrachri/orgs", "repos_url": "https://api.github.com/users/barrachri/repos", "events_url": "https://api.github.com/users/barrachri/events{/privacy}", "received_events_url": "https://api.github.com/users/barrachri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-06T17:11:03Z", "updated_at": "2017-06-16T12:38:17Z", "closed_at": "2017-06-16T12:38:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "From time to time I get this error:\r\n```\r\nserver closed the connection unexpectedly\r\n\tThis probably means the server terminated abnormally\r\n\tbefore or while processing the request.\r\n```\r\nMostly when I call some views that do operations with the db after an idle period (like leaving the browser open and doing a sign-up after 5 minutes).\r\n\r\nThe app and the db are running inside a docker service.\r\n\r\nThis is the code:\r\n\r\n```python\r\ntry:\r\n    async with engine.acquire() as conn:\r\n        query = models.User.select().where(models.User.c.email == email)\r\n        result = await conn.execute(query)\r\n        user = await result.fetchone()\r\n        # update last_access if user is not None\r\n        if user is not None:\r\n            query = models.User.update().where(models.User.c.id == user.id).values(last_access=func.now())\r\n            await conn.execute(query)\r\nexcept OperationalError as err:\r\n    logger.error(f\"error while db connection: {err}\")\r\n    raise web.HTTPInternalServerError()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/337", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/337/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/337/events", "html_url": "https://github.com/aio-libs/aiopg/issues/337", "id": 233247857, "node_id": "MDU6SXNzdWUyMzMyNDc4NTc=", "number": 337, "title": "How to non-asynchronously open a pool which I can use asynchronously later?", "user": {"login": "Daenyth", "id": 14644, "node_id": "MDQ6VXNlcjE0NjQ0", "avatar_url": "https://avatars3.githubusercontent.com/u/14644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Daenyth", "html_url": "https://github.com/Daenyth", "followers_url": "https://api.github.com/users/Daenyth/followers", "following_url": "https://api.github.com/users/Daenyth/following{/other_user}", "gists_url": "https://api.github.com/users/Daenyth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Daenyth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Daenyth/subscriptions", "organizations_url": "https://api.github.com/users/Daenyth/orgs", "repos_url": "https://api.github.com/users/Daenyth/repos", "events_url": "https://api.github.com/users/Daenyth/events{/privacy}", "received_events_url": "https://api.github.com/users/Daenyth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-02T17:22:38Z", "updated_at": "2017-06-07T17:45:25Z", "closed_at": "2017-06-07T17:45:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "My use case is for a kinesis consumer application. Due to the KCL class interface, I can't make my methods async, so instead, I give my consumer an event loop object and have it run my async db operations on that event loop. The problem is that I can't figure out how to also pass it a connection pool, synchronously, because I'd prefer not to open a new db connection for each kinesis record on the stream. Because `create_pool` is intended to be used as `async with`, I don't see how I can pass the created pool to non-async functions", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/335", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/335/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/335/events", "html_url": "https://github.com/aio-libs/aiopg/issues/335", "id": 232822931, "node_id": "MDU6SXNzdWUyMzI4MjI5MzE=", "number": 335, "title": "pool.acquire() function is not thread safe", "user": {"login": "Jerevia", "id": 13352496, "node_id": "MDQ6VXNlcjEzMzUyNDk2", "avatar_url": "https://avatars0.githubusercontent.com/u/13352496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jerevia", "html_url": "https://github.com/Jerevia", "followers_url": "https://api.github.com/users/Jerevia/followers", "following_url": "https://api.github.com/users/Jerevia/following{/other_user}", "gists_url": "https://api.github.com/users/Jerevia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jerevia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jerevia/subscriptions", "organizations_url": "https://api.github.com/users/Jerevia/orgs", "repos_url": "https://api.github.com/users/Jerevia/repos", "events_url": "https://api.github.com/users/Jerevia/events{/privacy}", "received_events_url": "https://api.github.com/users/Jerevia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-01T09:45:02Z", "updated_at": "2017-06-01T11:36:01Z", "closed_at": "2017-06-01T11:36:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/321", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/321/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/321/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/321/events", "html_url": "https://github.com/aio-libs/aiopg/issues/321", "id": 228384360, "node_id": "MDU6SXNzdWUyMjgzODQzNjA=", "number": 321, "title": "How to `metadata.create_all`?", "user": {"login": "Daenyth", "id": 14644, "node_id": "MDQ6VXNlcjE0NjQ0", "avatar_url": "https://avatars3.githubusercontent.com/u/14644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Daenyth", "html_url": "https://github.com/Daenyth", "followers_url": "https://api.github.com/users/Daenyth/followers", "following_url": "https://api.github.com/users/Daenyth/following{/other_user}", "gists_url": "https://api.github.com/users/Daenyth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Daenyth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Daenyth/subscriptions", "organizations_url": "https://api.github.com/users/Daenyth/orgs", "repos_url": "https://api.github.com/users/Daenyth/repos", "events_url": "https://api.github.com/users/Daenyth/events{/privacy}", "received_events_url": "https://api.github.com/users/Daenyth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-12T19:21:15Z", "updated_at": "2018-09-20T22:25:34Z", "closed_at": "2017-05-12T19:27:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have this code (more or less):\r\n\r\n```python\r\nimport sqlalchemy as sa\r\nfrom aiopg.sa import create_engine\r\n\r\ndsn = '...'\r\nmetadata = sa.MetaData(schema=\"test_schema\")\r\ntbl = Table(\"name\", metadata, ....)\r\ntables = [tbl]\r\nasync with create_engine(dsn) as engine:\r\n    metadata.create_all(engine, tables=tables, checkfirst=True)\r\n```\r\n\r\nAnd I get this exception:\r\n\r\n```\r\n  File \"/Users/daenyth/Curata/observer/obs/run/create_schema/__main__.py\", line 19, in main\r\n    metadata.create_all(engine, tables=tables, checkfirst=True)\r\n  File \"/Users/daenyth/.pyenv/versions/obs-venv/lib/python3.6/site-packages/sqlalchemy/sql/schema.py\", line 3882, in create_all\r\n    bind._run_visitor(ddl.SchemaGenerator,\r\nAttributeError: 'Engine' object has no attribute '_run_visitor'\r\n```\r\n\r\nShould I use sqlalchemy's built-in engine for this instead of aiopg? Is this a bug, or something that's not supposed to work?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/310", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/310/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/310/events", "html_url": "https://github.com/aio-libs/aiopg/issues/310", "id": 224498523, "node_id": "MDU6SXNzdWUyMjQ0OTg1MjM=", "number": 310, "title": "How to realize many to many relationship without sqlalchemy.orm", "user": {"login": "MaxOvcharov", "id": 13488059, "node_id": "MDQ6VXNlcjEzNDg4MDU5", "avatar_url": "https://avatars3.githubusercontent.com/u/13488059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaxOvcharov", "html_url": "https://github.com/MaxOvcharov", "followers_url": "https://api.github.com/users/MaxOvcharov/followers", "following_url": "https://api.github.com/users/MaxOvcharov/following{/other_user}", "gists_url": "https://api.github.com/users/MaxOvcharov/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaxOvcharov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaxOvcharov/subscriptions", "organizations_url": "https://api.github.com/users/MaxOvcharov/orgs", "repos_url": "https://api.github.com/users/MaxOvcharov/repos", "events_url": "https://api.github.com/users/MaxOvcharov/events{/privacy}", "received_events_url": "https://api.github.com/users/MaxOvcharov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-26T14:58:50Z", "updated_at": "2017-04-27T06:19:57Z", "closed_at": "2017-04-27T06:19:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try to realize many to many relationship. Is this correct way?\r\n\r\n```\r\nusers = Table('users', metadata,\r\n                       Column('id', Integer, primary_key=True),\r\n                       Column('login', String(255)),\r\n                       Column('password', Text),\r\n                       Column('user_id', GUID(), default=uuid.uuid4, nullable=False, unique=True),)\r\n\r\nchats = Table('chats', metadata,\r\n                       Column('id', Integer, primary_key=True),\r\n                       Column('chat_id', GUID(), default=uuid.uuid4, nullable=False, unique=True),\r\n                       Column('name', String(255)),)\r\n\r\nusers_chats = Table('users_chats', metadata,\r\n                                  Column('user_id', None, ForeignKey('users.id'),\r\n                                  Column('chat_id', None, ForeignKey('chats.id')),\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/282", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/282/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/282/events", "html_url": "https://github.com/aio-libs/aiopg/issues/282", "id": 210731768, "node_id": "MDU6SXNzdWUyMTA3MzE3Njg=", "number": 282, "title": "What is the recommanded usage for aiopg ?", "user": {"login": "ikit", "id": 2109206, "node_id": "MDQ6VXNlcjIxMDkyMDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2109206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ikit", "html_url": "https://github.com/ikit", "followers_url": "https://api.github.com/users/ikit/followers", "following_url": "https://api.github.com/users/ikit/following{/other_user}", "gists_url": "https://api.github.com/users/ikit/gists{/gist_id}", "starred_url": "https://api.github.com/users/ikit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ikit/subscriptions", "organizations_url": "https://api.github.com/users/ikit/orgs", "repos_url": "https://api.github.com/users/ikit/repos", "events_url": "https://api.github.com/users/ikit/events{/privacy}", "received_events_url": "https://api.github.com/users/ikit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-28T09:30:20Z", "updated_at": "2017-02-28T13:28:18Z", "closed_at": "2017-02-28T13:28:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nIn your examples, all is done in a same function : creation of the pool > connexion > cursor, and then execution of the query. What is the best to do in the case of a real web application : shall I create a new pool/connexion/cursor each time I need to use the database ? or is it better to create one pool that will be used by the whole application ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/277", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/277/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/277/events", "html_url": "https://github.com/aio-libs/aiopg/issues/277", "id": 207439179, "node_id": "MDU6SXNzdWUyMDc0MzkxNzk=", "number": 277, "title": "Asyncio gather assertion error: Don't support server side cursors yet", "user": {"login": "VitaliProkurat", "id": 17850409, "node_id": "MDQ6VXNlcjE3ODUwNDA5", "avatar_url": "https://avatars1.githubusercontent.com/u/17850409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VitaliProkurat", "html_url": "https://github.com/VitaliProkurat", "followers_url": "https://api.github.com/users/VitaliProkurat/followers", "following_url": "https://api.github.com/users/VitaliProkurat/following{/other_user}", "gists_url": "https://api.github.com/users/VitaliProkurat/gists{/gist_id}", "starred_url": "https://api.github.com/users/VitaliProkurat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VitaliProkurat/subscriptions", "organizations_url": "https://api.github.com/users/VitaliProkurat/orgs", "repos_url": "https://api.github.com/users/VitaliProkurat/repos", "events_url": "https://api.github.com/users/VitaliProkurat/events{/privacy}", "received_events_url": "https://api.github.com/users/VitaliProkurat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-14T07:34:59Z", "updated_at": "2017-04-07T18:02:06Z", "closed_at": "2017-02-28T14:45:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, i try run several functions in asyncio.gather\r\n\r\ni create connection pool:\r\n```python       \r\nfrom aiopg.sa import create_engine\r\nengine = await create_engine(...)\r\n```\r\neach function acquire connection from pool before run query\r\n```python\r\nasync with engine.acquire() as conn:\r\n    res_proxy = await conn.execute(sql)\r\n    res_proxy.fetchone()\r\n    \r\n```\r\nIt seems functions in gather takes the same connection and when results for one function is ready another function also running query via this connection.\r\n\r\nPlease let me know how to solve problem?\r\nThanks.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/270", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/270/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/270/events", "html_url": "https://github.com/aio-libs/aiopg/issues/270", "id": 205095340, "node_id": "MDU6SXNzdWUyMDUwOTUzNDA=", "number": 270, "title": "How to create a connection pool on app start and use it?", "user": {"login": "bjorxi", "id": 2669197, "node_id": "MDQ6VXNlcjI2NjkxOTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2669197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorxi", "html_url": "https://github.com/bjorxi", "followers_url": "https://api.github.com/users/bjorxi/followers", "following_url": "https://api.github.com/users/bjorxi/following{/other_user}", "gists_url": "https://api.github.com/users/bjorxi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorxi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorxi/subscriptions", "organizations_url": "https://api.github.com/users/bjorxi/orgs", "repos_url": "https://api.github.com/users/bjorxi/repos", "events_url": "https://api.github.com/users/bjorxi/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorxi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-03T08:11:58Z", "updated_at": "2017-03-20T16:28:22Z", "closed_at": "2017-03-20T16:28:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI'm building a web app. I wan't to create a connection pool when the server starts and use connections from this pool. I've seen examples and the source code, but I'm not able to complete this task. I'm not Python newbie and used NodeJS, but I'm currently trying Python's asyncio (with async/await).\r\n\r\nIn the example we use `async with aiopg.create_pool(...) as pool`, if I got it correctly the pool will be closed on `__aexit__`. How to overcome this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/250", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/250/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/250/events", "html_url": "https://github.com/aio-libs/aiopg/issues/250", "id": 200717253, "node_id": "MDU6SXNzdWUyMDA3MTcyNTM=", "number": 250, "title": "insert multiple rows in one query", "user": {"login": "samuelcolvin", "id": 4039449, "node_id": "MDQ6VXNlcjQwMzk0NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4039449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samuelcolvin", "html_url": "https://github.com/samuelcolvin", "followers_url": "https://api.github.com/users/samuelcolvin/followers", "following_url": "https://api.github.com/users/samuelcolvin/following{/other_user}", "gists_url": "https://api.github.com/users/samuelcolvin/gists{/gist_id}", "starred_url": "https://api.github.com/users/samuelcolvin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samuelcolvin/subscriptions", "organizations_url": "https://api.github.com/users/samuelcolvin/orgs", "repos_url": "https://api.github.com/users/samuelcolvin/repos", "events_url": "https://api.github.com/users/samuelcolvin/events{/privacy}", "received_events_url": "https://api.github.com/users/samuelcolvin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-13T19:58:43Z", "updated_at": "2017-01-13T21:16:35Z", "closed_at": "2017-01-13T21:16:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Related to #112, I know `executemany` is not possible, but I wonder if it would be possible for aiopg (and aiopg-sqlachemy flavour) to support insert with multiple rows. As described [here](http://docs.sqlalchemy.org/en/latest/core/dml.html#sqlalchemy.sql.expression.Insert.values)?\r\n\r\nCurrently, I'm getting \r\n\r\n```\r\n    await request['conn'].execute(q)\r\n  File \"/home/samuel/code/socket-server/env/lib/python3.6/site-packages/aiopg/utils.py\", line 72, in __await__\r\n    resp = yield from self._coro\r\n  File \"/home/samuel/code/socket-server/env/lib/python3.6/site-packages/aiopg/sa/connection.py\", line 88, in _execute\r\n    compiled_parameters = [compiled.construct_params(dp)]\r\n  File \"/home/samuel/code/socket-server/env/lib/python3.6/site-packages/aiopg/sa/engine.py\", line 23, in construct_params\r\n    pd[column.key] = self._exec_default(column.default)\r\n  File \"/home/samuel/code/socket-server/env/lib/python3.6/site-packages/aiopg/sa/engine.py\", line 31, in _exec_default\r\n    return default.arg\r\nAttributeError: 'Sequence' object has no attribute 'arg'\r\n```\r\n\r\nWhen trying a query like this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/244", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/244/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/244/events", "html_url": "https://github.com/aio-libs/aiopg/issues/244", "id": 197643461, "node_id": "MDU6SXNzdWUxOTc2NDM0NjE=", "number": 244, "title": "create_all issue", "user": {"login": "philsong", "id": 1390304, "node_id": "MDQ6VXNlcjEzOTAzMDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1390304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philsong", "html_url": "https://github.com/philsong", "followers_url": "https://api.github.com/users/philsong/followers", "following_url": "https://api.github.com/users/philsong/following{/other_user}", "gists_url": "https://api.github.com/users/philsong/gists{/gist_id}", "starred_url": "https://api.github.com/users/philsong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philsong/subscriptions", "organizations_url": "https://api.github.com/users/philsong/orgs", "repos_url": "https://api.github.com/users/philsong/repos", "events_url": "https://api.github.com/users/philsong/events{/privacy}", "received_events_url": "https://api.github.com/users/philsong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-27T04:15:27Z", "updated_at": "2016-12-27T08:34:24Z", "closed_at": "2016-12-27T05:42:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Traceback (most recent call last):\r\n  File \"bootstrap_data.py\", line 39, in <module>\r\n    loop.run_until_complete(main())\r\n  File \"/Users/phil/.pyenv/versions/3.5.2/lib/python3.5/asyncio/base_events.py\", line 387, in run_until_complete\r\n    return future.result()\r\n  File \"/Users/phil/.pyenv/versions/3.5.2/lib/python3.5/asyncio/futures.py\", line 274, in result\r\n    raise self._exception\r\n  File \"/Users/phil/.pyenv/versions/3.5.2/lib/python3.5/asyncio/tasks.py\", line 239, in _step\r\n    result = coro.send(None)\r\n  File \"bootstrap_data.py\", line 20, in main\r\n    await db.create_schemas(db.engine)\r\n  File \"/Users/phil/work/messenger/server/messenger/database.py\", line 266, in create_schemas\r\n    await metadata.create_all(engine)\r\n  File \"/Users/phil/.pyenv/versions/bixin352/lib/python3.5/site-packages/sqlalchemy/sql/schema.py\", line 3823, in create_all\r\n    bind._run_visitor(ddl.SchemaGenerator,\r\nAttributeError: 'Engine' object has no attribute '_run_visitor'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/225", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/225/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/225/events", "html_url": "https://github.com/aio-libs/aiopg/issues/225", "id": 193092229, "node_id": "MDU6SXNzdWUxOTMwOTIyMjk=", "number": 225, "title": "when a new release?", "user": {"login": "vir-mir", "id": 2296252, "node_id": "MDQ6VXNlcjIyOTYyNTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2296252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vir-mir", "html_url": "https://github.com/vir-mir", "followers_url": "https://api.github.com/users/vir-mir/followers", "following_url": "https://api.github.com/users/vir-mir/following{/other_user}", "gists_url": "https://api.github.com/users/vir-mir/gists{/gist_id}", "starred_url": "https://api.github.com/users/vir-mir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vir-mir/subscriptions", "organizations_url": "https://api.github.com/users/vir-mir/orgs", "repos_url": "https://api.github.com/users/vir-mir/repos", "events_url": "https://api.github.com/users/vir-mir/events{/privacy}", "received_events_url": "https://api.github.com/users/vir-mir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-02T11:15:45Z", "updated_at": "2016-12-02T13:29:18Z", "closed_at": "2016-12-02T13:29:18Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://github.com/aio-libs/aiopg/blob/master/CHANGES.txt\r\n\r\n0.13.0 (2016-11-XX) already 2016-12-xx ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/216", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/216/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/216/events", "html_url": "https://github.com/aio-libs/aiopg/issues/216", "id": 191530319, "node_id": "MDU6SXNzdWUxOTE1MzAzMTk=", "number": 216, "title": "Random \"cursor.execute() called while another coroutine is already waiting for incoming data\" under load", "user": {"login": "themylogin", "id": 669257, "node_id": "MDQ6VXNlcjY2OTI1Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/669257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/themylogin", "html_url": "https://github.com/themylogin", "followers_url": "https://api.github.com/users/themylogin/followers", "following_url": "https://api.github.com/users/themylogin/following{/other_user}", "gists_url": "https://api.github.com/users/themylogin/gists{/gist_id}", "starred_url": "https://api.github.com/users/themylogin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/themylogin/subscriptions", "organizations_url": "https://api.github.com/users/themylogin/orgs", "repos_url": "https://api.github.com/users/themylogin/repos", "events_url": "https://api.github.com/users/themylogin/events{/privacy}", "received_events_url": "https://api.github.com/users/themylogin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-24T14:16:11Z", "updated_at": "2016-12-02T12:37:17Z", "closed_at": "2016-12-02T12:37:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a trivial `aiohttp.web` application that executes SQL requests via `aiopg` sqlalchemy integration. It's as simple as:\r\n\r\n    import aiohttp.web\r\n    from aiopg.sa import create_engine\r\n\r\n    app = aiohttp.web.Application()\r\n\r\n\r\n    async def rows(request):\r\n        async with request.app[\"db\"].acquire() as db:\r\n            return aiohttp.web.json_response(list(await db.execute(\"SELECT * FROM table\")))\r\n\r\n    app.router.add_route(\"GET\", \"/rows\", rows)\r\n\r\n\r\n    async def init(app):\r\n        app[\"db\"] = await create_engine(host=\"postgres\", user=\"visio\", password=\"visio\", database=\"visio\")\r\n\r\n    if __name__ == \"__main__\":\r\n        loop = asyncio.get_event_loop()\r\n        handler = app.make_handler()\r\n\r\n        loop.run_until_complete(init(app))\r\n\r\n        loop.run_until_complete(loop.create_server(handler, \"0.0.0.0\", 80))\r\n        loop.run_forever()\r\n\r\n\r\nWhen server load reaches 100 rps, this error starts appearing randomly:\r\n\r\n    RuntimeError: cursor.execute() called while another coroutine is already waiting for incoming data\r\n      File \"aiohttp/server.py\", line 261, in start\r\n        yield from self.handle_request(message, payload)\r\n      File \"aiohttp/web.py\", line 88, in handle_request\r\n        resp = yield from handler(request)\r\n      File \"visio_longer/views/communicate/__init__.py\", line 72, in legacy_communicate\r\n        device = await query_device(db, access_token)\r\n      File \"visio_longer/views/communicate/__init__.py\", line 31, in query_device\r\n        (Device.access_token == access_token)\r\n      File \"aiopg/utils.py\", line 72, in __await__\r\n        resp = yield from self._coro\r\n      File \"aiopg/sa/connection.py\", line 103, in _execute\r\n        yield from cursor.execute(str(compiled), post_processed_params[0])\r\n      File \"aiopg/cursor.py\", line 103, in execute\r\n        waiter = self._conn._create_waiter('cursor.execute')\r\n      File \"aiopg/connection.py\", line 186, in _create_waiter\r\n        'already waiting for incoming data' % func_name)\r\n\r\nIt happens with random queries at random times, once in a few days, sometimes these errors come in bunch of 4 or 2. Is there something wrong with my code? `aiohttp` and `aiopg` versions are latest from pip", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/201", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/201/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/201/events", "html_url": "https://github.com/aio-libs/aiopg/issues/201", "id": 188859947, "node_id": "MDU6SXNzdWUxODg4NTk5NDc=", "number": 201, "title": "begin_nested() contextmanager error", "user": {"login": "hudecof", "id": 4510160, "node_id": "MDQ6VXNlcjQ1MTAxNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4510160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hudecof", "html_url": "https://github.com/hudecof", "followers_url": "https://api.github.com/users/hudecof/followers", "following_url": "https://api.github.com/users/hudecof/following{/other_user}", "gists_url": "https://api.github.com/users/hudecof/gists{/gist_id}", "starred_url": "https://api.github.com/users/hudecof/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hudecof/subscriptions", "organizations_url": "https://api.github.com/users/hudecof/orgs", "repos_url": "https://api.github.com/users/hudecof/repos", "events_url": "https://api.github.com/users/hudecof/events{/privacy}", "received_events_url": "https://api.github.com/users/hudecof/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-11T21:58:15Z", "updated_at": "2016-11-18T20:46:54Z", "closed_at": "2016-11-18T20:46:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nwhen I try to use code\r\n```\r\n async with conn.begin_nested() as trans:\r\n```\r\n\r\nResult is\r\n```\r\n17:19:10 RS.1   | -> async with conn.begin_nested() as trans:\r\n17:19:14 RS.1   | (Pdb) AttributeError: __aexit__\r\n```\r\n\r\nWithout context manager it's working as expected.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/191", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/191/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/191/events", "html_url": "https://github.com/aio-libs/aiopg/issues/191", "id": 185715917, "node_id": "MDU6SXNzdWUxODU3MTU5MTc=", "number": 191, "title": "Intermittent Invalid file object error", "user": {"login": "msornay", "id": 9009843, "node_id": "MDQ6VXNlcjkwMDk4NDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/9009843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msornay", "html_url": "https://github.com/msornay", "followers_url": "https://api.github.com/users/msornay/followers", "following_url": "https://api.github.com/users/msornay/following{/other_user}", "gists_url": "https://api.github.com/users/msornay/gists{/gist_id}", "starred_url": "https://api.github.com/users/msornay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msornay/subscriptions", "organizations_url": "https://api.github.com/users/msornay/orgs", "repos_url": "https://api.github.com/users/msornay/repos", "events_url": "https://api.github.com/users/msornay/events{/privacy}", "received_events_url": "https://api.github.com/users/msornay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-27T16:18:09Z", "updated_at": "2016-11-19T00:21:48Z", "closed_at": "2016-11-19T00:21:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nI am not certain that it is an aiopg issue, but we are sometime encountering the following error : \n\n```\nFile \"/usr/local/lib/python3.5/dist-packages/aiopg/cursor.py\", line 113, in execute\n    yield from self._conn._poll(waiter, timeout)\nFile \"/usr/local/lib/python3.5/dist-packages/aiopg/connection.py\", line 193, in _poll\n    self._ready(self._weakref)\nFile \"/usr/local/lib/python3.5/dist-packages/aiopg/connection.py\", line 162, in _ready\n    self._loop.add_writer(self._fileno, self._ready, weak_self)\nFile \"/usr/lib/python3.5/asyncio/selector_events.py\", line 272, in add_writer\n    key = self._selector.get_key(fd)\nFile \"/usr/lib/python3.5/selectors.py\", line 189, in get_key\n    return mapping[fileobj]\nFile \"/usr/lib/python3.5/selectors.py\", line 70, in __getitem__\n    fd = self._selector._fileobj_lookup(fileobj)\nFile \"/usr/lib/python3.5/selectors.py\", line 224, in _fileobj_lookup\n    return _fileobj_to_fd(fileobj)\nFile \"/usr/lib/python3.5/selectors.py\", line 39, in _fileobj_to_fd\n    \"{!r}\".format(fileobj)) from None\nValueError: Invalid file object: None\n```\n\nIt happens rarely, during the execution of the UPDATE step of a transaction with the following queries : \n1. BEGIN ;\n2. SELECT column FROM table WHERE condition FOR UPDATE ;\n3. UPDATE table SET column = value WHERE condition ;\n4. COMMIT ; (Which is never executed when the error occurs, never releasing the SELECT FOR UPDATE lock)\n\nEnvironment : \n- PostgreSQL 9.5.3\n- Ubuntu 16.04 (dockerized) \n- Python 3.5.2\n- aiopg 0.11\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/189", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/189/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/189/events", "html_url": "https://github.com/aio-libs/aiopg/issues/189", "id": 184494452, "node_id": "MDU6SXNzdWUxODQ0OTQ0NTI=", "number": 189, "title": "hstore with cursor_factory=psycopg2.extras.RealDictCursor Errors", "user": {"login": "bgcgarlipp", "id": 5688677, "node_id": "MDQ6VXNlcjU2ODg2Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5688677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgcgarlipp", "html_url": "https://github.com/bgcgarlipp", "followers_url": "https://api.github.com/users/bgcgarlipp/followers", "following_url": "https://api.github.com/users/bgcgarlipp/following{/other_user}", "gists_url": "https://api.github.com/users/bgcgarlipp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgcgarlipp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgcgarlipp/subscriptions", "organizations_url": "https://api.github.com/users/bgcgarlipp/orgs", "repos_url": "https://api.github.com/users/bgcgarlipp/repos", "events_url": "https://api.github.com/users/bgcgarlipp/events{/privacy}", "received_events_url": "https://api.github.com/users/bgcgarlipp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-21T14:09:14Z", "updated_at": "2018-11-03T10:24:09Z", "closed_at": "2018-11-03T10:24:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\n\nWhen intializing a new connection with cursor_factory=psycopg2.extras.RealDictCursor on a databse with hstore extension on, you get an error as follows. This is due to a dict being returned as result and not list.\n\n> Traceback (most recent call last):\n>   File \"wsclient.py\", line 134, in <module>\n>     loop.run_until_complete(db.init_db()) \n>   File \"/usr/lib/python3.5/asyncio/base_events.py\", line 337, in run_until_complete\n>     return future.result()\n>   File \"/usr/lib/python3.5/asyncio/futures.py\", line 274, in result\n>     raise self._exception\n>   File \"/usr/lib/python3.5/asyncio/tasks.py\", line 239, in _step\n>     result = coro.send(None)\n>   File \"/home/bernhardt/git_work/qs_switch/QS_Workflow/client/async_quantdb.py\", line 25, in init_db\n>     cursor_factory=psycopg2.extras.RealDictCursor)\n>   File \"/home/bernhardt/git_work/qs_switch/QS_Workflow/pyenv/lib/python3.5/site-packages/aiopg/utils.py\", line 57, in __await__\n>     resp = yield from self._coro\n>   File \"/home/bernhardt/git_work/qs_switch/QS_Workflow/pyenv/lib/python3.5/site-packages/aiopg/pool.py\", line 45, in _create_pool\n>     yield from pool._fill_free_pool(False)\n>   File \"/home/bernhardt/git_work/qs_switch/QS_Workflow/pyenv/lib/python3.5/site-packages/aiopg/pool.py\", line 188, in _fill_free_pool\n>     **self._conn_kwargs)\n>   File \"/home/bernhardt/git_work/qs_switch/QS_Workflow/pyenv/lib/python3.5/site-packages/aiopg/utils.py\", line 52, in __iter__\n>     resp = yield from self._coro\n>   File \"/home/bernhardt/git_work/qs_switch/QS_Workflow/pyenv/lib/python3.5/site-packages/aiopg/connection.py\", line 78, in _connect\n>     oids = yield from _enable_hstore(conn)\n>   File \"/home/bernhardt/git_work/qs_switch/QS_Workflow/pyenv/lib/python3.5/site-packages/aiopg/connection.py\", line 37, in _enable_hstore\n>     rv0.append(oids[0])\n> KeyError: 0\n\nHow to reproduce:\ninstall \n\n> sudo apt-get install postgresql-contrib\n> create hstore extension on database\n> \n> CREATE EXTENSION hstore; \n\ncreate connection to datbase using aiopg, we created a pool, but as it calls connect function inside normal conection should fail aswell\n`self._pool = await aiopg.create_pool(host=self.settings.DATABASE_HOST, \n                                 database=self.settings.DATABASE_NAME, \n                                 user=self.settings.DATABASE_USER, \n                                 password=self.settings.DATABASE_PASS, \n                                 port=self.settings.DATABASE_PORT,\n                                 cursor_factory=psycopg2.extras.RealDictCursor)`\n\nSuggested solution:\nChange \"def _enable_hstore(conn):\" in aiopg.connection\nfrom\n\n```\n@asyncio.coroutine\ndef _enable_hstore(conn):\n    cur = yield from conn.cursor()\n    yield from cur.execute(\"\"\"\\\n        SELECT t.oid, typarray\n        FROM pg_type t JOIN pg_namespace ns\n            ON typnamespace = ns.oid\n        WHERE typname = 'hstore';\n        \"\"\")\n    rv0, rv1 = [], []\n    for oids in (yield from cur.fetchall()):\n        rv0.append(oids[0])\n        rv1.append(oids[1])\n    cur.close()\n    return tuple(rv0), tuple(rv1)\n```\n\nTo\n\n```\n@asyncio.coroutine\ndef _enable_hstore(conn):\n    cur = yield from conn.cursor()\n    yield from cur.execute(\"\"\"\\\n        SELECT t.oid, typarray\n        FROM pg_type t JOIN pg_namespace ns\n            ON typnamespace = ns.oid\n        WHERE typname = 'hstore';\n        \"\"\")\n    rv0, rv1 = [], []\n    for oids in (yield from cur.fetchall()):\n        if type(oids) is list:\n            rv0.append(oids[0])\n            rv1.append(oids[1])\n        else:\n            rv0.append(oids['oid'])\n            rv1.append(oids['typarray'])\n    cur.close()\n    return tuple(rv0), tuple(rv1)\n```\n\nRegards\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/186", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/186/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/186/events", "html_url": "https://github.com/aio-libs/aiopg/issues/186", "id": 183487054, "node_id": "MDU6SXNzdWUxODM0ODcwNTQ=", "number": 186, "title": "mogrify doesn't need to be a coroutine", "user": {"login": "samuelcolvin", "id": 4039449, "node_id": "MDQ6VXNlcjQwMzk0NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4039449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samuelcolvin", "html_url": "https://github.com/samuelcolvin", "followers_url": "https://api.github.com/users/samuelcolvin/followers", "following_url": "https://api.github.com/users/samuelcolvin/following{/other_user}", "gists_url": "https://api.github.com/users/samuelcolvin/gists{/gist_id}", "starred_url": "https://api.github.com/users/samuelcolvin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samuelcolvin/subscriptions", "organizations_url": "https://api.github.com/users/samuelcolvin/orgs", "repos_url": "https://api.github.com/users/samuelcolvin/repos", "events_url": "https://api.github.com/users/samuelcolvin/events{/privacy}", "received_events_url": "https://api.github.com/users/samuelcolvin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-17T18:10:48Z", "updated_at": "2017-02-16T11:16:23Z", "closed_at": "2017-02-16T11:16:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Is there a good reason why [mogrify](https://github.com/aio-libs/aiopg/blob/fb5f28505debafd7b7f5961314dd6a9b28f3d616/aiopg/cursor.py#L149-L160) is a coroutine?\n\nIt's like to be used in \"bulk create\" operations where it'll be called a lot of times so it would have a margin improvement to performance to make it a simple function.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/179", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/179/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/179/events", "html_url": "https://github.com/aio-libs/aiopg/issues/179", "id": 181900218, "node_id": "MDU6SXNzdWUxODE5MDAyMTg=", "number": 179, "title": "Question: Is there two phase commit support?", "user": {"login": "toidi", "id": 892861, "node_id": "MDQ6VXNlcjg5Mjg2MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/892861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toidi", "html_url": "https://github.com/toidi", "followers_url": "https://api.github.com/users/toidi/followers", "following_url": "https://api.github.com/users/toidi/following{/other_user}", "gists_url": "https://api.github.com/users/toidi/gists{/gist_id}", "starred_url": "https://api.github.com/users/toidi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toidi/subscriptions", "organizations_url": "https://api.github.com/users/toidi/orgs", "repos_url": "https://api.github.com/users/toidi/repos", "events_url": "https://api.github.com/users/toidi/events{/privacy}", "received_events_url": "https://api.github.com/users/toidi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-09T17:44:58Z", "updated_at": "2016-10-09T18:07:29Z", "closed_at": "2016-10-09T18:07:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "If yes - it would be good to have a quick example here.\n\nThank you.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/144", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/144/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/144/events", "html_url": "https://github.com/aio-libs/aiopg/issues/144", "id": 178690037, "node_id": "MDU6SXNzdWUxNzg2OTAwMzc=", "number": 144, "title": "CancelledError after a while", "user": {"login": "Palen", "id": 5496345, "node_id": "MDQ6VXNlcjU0OTYzNDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5496345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Palen", "html_url": "https://github.com/Palen", "followers_url": "https://api.github.com/users/Palen/followers", "following_url": "https://api.github.com/users/Palen/following{/other_user}", "gists_url": "https://api.github.com/users/Palen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Palen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Palen/subscriptions", "organizations_url": "https://api.github.com/users/Palen/orgs", "repos_url": "https://api.github.com/users/Palen/repos", "events_url": "https://api.github.com/users/Palen/events{/privacy}", "received_events_url": "https://api.github.com/users/Palen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-22T18:47:24Z", "updated_at": "2016-09-23T10:16:09Z", "closed_at": "2016-09-23T10:16:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been benchmarking an app made in Aiohttp/Aiopg and I've been noticed that when the number of queries is increased, a lot of requests are finished with a CancelledError exception.\n\n```\nresult_p = await conn.execute(s)\nFile \"/Users/albert/.virtualenvs/villachiste_backend/lib/python3.5/site-packages/aiopg/utils.py\", line 72, in __await__\nresp = yield from self._coro\nFile \"/Users/albert/.virtualenvs/villachiste_backend/lib/python3.5/site-packages/aiopg/sa/connection.py\", line 103, in _execute\nyield from cursor.execute(str(compiled), post_processed_params[0])\nFile \"/Users/albert/.virtualenvs/villachiste_backend/lib/python3.5/site-packages/aiopg/cursor.py\", line 113, in execute\nyield from self._conn._poll(waiter, timeout)\nFile \"/Users/albert/.virtualenvs/villachiste_backend/lib/python3.5/site-packages/aiopg/connection.py\", line 211, in _poll\nraise exc\nFile \"/Users/albert/.virtualenvs/villachiste_backend/lib/python3.5/site-packages/aiopg/connection.py\", line 208, in _poll\nyield from asyncio.wait_for(self._waiter, timeout, loop=self._loop)\nFile \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/asyncio/tasks.py\", line 379, in wait_for\nyield from waiter\nFile \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/asyncio/futures.py\", line 358, in __iter__\nyield self  # This tells Task to wait for completion.\nconcurrent.futures._base.CancelledError\n```\n\nAm I doing anything wrong or I overwhelm my server?\nI'm talking about 30s/sec with 1 core machine.\n\nThanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/143", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/143/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/143/events", "html_url": "https://github.com/aio-libs/aiopg/issues/143", "id": 178173203, "node_id": "MDU6SXNzdWUxNzgxNzMyMDM=", "number": 143, "title": "Hanging test", "user": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2016-09-20T20:34:52Z", "updated_at": "2016-11-18T22:37:33Z", "closed_at": "2016-11-18T22:37:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`test_cancel_pending_op` (https://github.com/aio-libs/aiopg/blob/master/tests/test_connection.py#L270-L288) sometimes hangs.\nUnfortunately I don't know what's wrong with the test itself (or cancellation code maybe).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/141", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/141/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/141/events", "html_url": "https://github.com/aio-libs/aiopg/issues/141", "id": 176169515, "node_id": "MDU6SXNzdWUxNzYxNjk1MTU=", "number": 141, "title": "Add an on_connect callback parameter to pool", "user": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-09-10T08:57:19Z", "updated_at": "2016-09-18T16:17:18Z", "closed_at": "2016-09-18T16:17:18Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It allows to customize connections before usage.\n\nSee also #51\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/140", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/140/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/140/events", "html_url": "https://github.com/aio-libs/aiopg/issues/140", "id": 175482059, "node_id": "MDU6SXNzdWUxNzU0ODIwNTk=", "number": 140, "title": "Using cursors with SQLAlchemy ", "user": {"login": "tomas-fp", "id": 19695060, "node_id": "MDQ6VXNlcjE5Njk1MDYw", "avatar_url": "https://avatars3.githubusercontent.com/u/19695060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomas-fp", "html_url": "https://github.com/tomas-fp", "followers_url": "https://api.github.com/users/tomas-fp/followers", "following_url": "https://api.github.com/users/tomas-fp/following{/other_user}", "gists_url": "https://api.github.com/users/tomas-fp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomas-fp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomas-fp/subscriptions", "organizations_url": "https://api.github.com/users/tomas-fp/orgs", "repos_url": "https://api.github.com/users/tomas-fp/repos", "events_url": "https://api.github.com/users/tomas-fp/events{/privacy}", "received_events_url": "https://api.github.com/users/tomas-fp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-09-07T11:46:48Z", "updated_at": "2016-09-07T13:09:28Z", "closed_at": "2016-09-07T13:09:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, thank you for the great job publishing this package.\n\nI would like to know how to properly use a cursor using SQLAlchemy abstraction in `aiopg`.\nLooks like the `sa` subpackage is using internally a cursor.\n\nWould you mind sharing an example about how to use it?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/138", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/138/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/138/events", "html_url": "https://github.com/aio-libs/aiopg/issues/138", "id": 175066760, "node_id": "MDU6SXNzdWUxNzUwNjY3NjA=", "number": 138, "title": "Connection error occasionally affects another connection", "user": {"login": "not-even", "id": 22003867, "node_id": "MDQ6VXNlcjIyMDAzODY3", "avatar_url": "https://avatars3.githubusercontent.com/u/22003867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/not-even", "html_url": "https://github.com/not-even", "followers_url": "https://api.github.com/users/not-even/followers", "following_url": "https://api.github.com/users/not-even/following{/other_user}", "gists_url": "https://api.github.com/users/not-even/gists{/gist_id}", "starred_url": "https://api.github.com/users/not-even/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/not-even/subscriptions", "organizations_url": "https://api.github.com/users/not-even/orgs", "repos_url": "https://api.github.com/users/not-even/repos", "events_url": "https://api.github.com/users/not-even/events{/privacy}", "received_events_url": "https://api.github.com/users/not-even/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-09-05T12:59:49Z", "updated_at": "2016-09-08T12:48:49Z", "closed_at": "2016-09-08T12:48:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Symptoms:\nWhen creating a bunch of aiopg connections in parallel, if one of them fails with a psycopg error, **another** one might fail with tracebacks like these:\n\n```\nTraceback (most recent call last):\n  File \"/home/lena/.virtualenvs/tsdebug/lib/python3.5/site-packages/aiopg/connection.py\", line 213, in _poll\n    yield from asyncio.wait_for(self._waiter, timeout, loop=self._loop)\n  File \"/usr/local/lib/python3.5/asyncio/tasks.py\", line 396, in wait_for\n    raise futures.TimeoutError()\nconcurrent.futures._base.TimeoutError\n```\n\n```\nERROR:api.query:Traceback (most recent call last):\n  File \"/usr/local/lib/python3.5/asyncio/tasks.py\", line 241, in _step\n    result = coro.throw(exc)\n  File \"/home/lena/xxx/xxx/xxx/xxx/xxx/api/postgresql_querying.py\", line 140, in query_db\n    cursor_factory=NamedTupleCursor) as conn:\n  File \"/home/lena/.virtualenvs/tsdebug/lib/python3.5/site-packages/aiopg/utils.py\", line 75, in __aenter__\n    self._obj = yield from self._coro\n  File \"/home/lena/.virtualenvs/tsdebug/lib/python3.5/site-packages/aiopg/connection.py\", line 69, in _connect\n    yield from conn._poll(waiter, timeout)\n  File \"/home/lena/.virtualenvs/tsdebug/lib/python3.5/site-packages/aiopg/connection.py\", line 216, in _poll\n    yield from asyncio.shield(cancel(), loop=self._loop)\n  File \"/usr/local/lib/python3.5/asyncio/futures.py\", line 361, in __iter__\n    yield self  # This tells Task to wait for completion.\n  File \"/usr/local/lib/python3.5/asyncio/tasks.py\", line 296, in _wakeup\n    future.result()\n  File \"/usr/local/lib/python3.5/asyncio/futures.py\", line 274, in result\n    raise self._exception\n  File \"/usr/local/lib/python3.5/asyncio/tasks.py\", line 239, in _step\n    result = coro.send(None)\n  File \"/home/lena/.virtualenvs/tsdebug/lib/python3.5/site-packages/aiopg/connection.py\", line 206, in cancel\n    self._conn.cancel()\npsycopg2.OperationalError: asynchronous connection attempt underway\n```\n\nReason:\nPython3.5 only allows to add one reader to a file descriptor, and add_reader method returns None. Thus remove_reader method removes whatever reader is currently registered on the descriptor.\nSo the following happens sometimes (once in 10\u201325 requests in my experience):\n1. aiopg's Connection() object initializes, adds a reader on a file descriptor\n2. this connection object gets a psycopg2.Error when polling\n3. another aiopg Connection() object is initialized, it adds a reader on the same file descriptor (which effectively cancels the reader added in step 1)\n4. the first connection object's .close() is called, and removes the reader from the file descriptor\n\nAs the reader removed actually \"belonged\" to the second connection (and not to the first, which removed it), this creates problems for it.\n\nSuggested solution (thanks @asvetlov):\nIf a psycopg2.Error occurs, **and** the file descriptor has gone bad, remove the reader immediately (don't wait for .close() to do it)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/136", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/136/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/136/events", "html_url": "https://github.com/aio-libs/aiopg/issues/136", "id": 173063330, "node_id": "MDU6SXNzdWUxNzMwNjMzMzA=", "number": 136, "title": "Update async generators protocol to support Python 3.5.2/3.6+", "user": {"login": "jettify", "id": 223335, "node_id": "MDQ6VXNlcjIyMzMzNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/223335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jettify", "html_url": "https://github.com/jettify", "followers_url": "https://api.github.com/users/jettify/followers", "following_url": "https://api.github.com/users/jettify/following{/other_user}", "gists_url": "https://api.github.com/users/jettify/gists{/gist_id}", "starred_url": "https://api.github.com/users/jettify/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jettify/subscriptions", "organizations_url": "https://api.github.com/users/jettify/orgs", "repos_url": "https://api.github.com/users/jettify/repos", "events_url": "https://api.github.com/users/jettify/events{/privacy}", "received_events_url": "https://api.github.com/users/jettify/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-08-24T21:32:56Z", "updated_at": "2016-09-10T08:53:33Z", "closed_at": "2016-09-10T08:53:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "For context see https://github.com/KeepSafe/aiohttp/issues/1082\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/135", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/135/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/135/events", "html_url": "https://github.com/aio-libs/aiopg/issues/135", "id": 169423774, "node_id": "MDU6SXNzdWUxNjk0MjM3NzQ=", "number": 135, "title": "SA: Declarative reflection error '_PoolContextManager' object has no attribute 'run_callable'", "user": {"login": "cybergrind", "id": 192182, "node_id": "MDQ6VXNlcjE5MjE4Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/192182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cybergrind", "html_url": "https://github.com/cybergrind", "followers_url": "https://api.github.com/users/cybergrind/followers", "following_url": "https://api.github.com/users/cybergrind/following{/other_user}", "gists_url": "https://api.github.com/users/cybergrind/gists{/gist_id}", "starred_url": "https://api.github.com/users/cybergrind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cybergrind/subscriptions", "organizations_url": "https://api.github.com/users/cybergrind/orgs", "repos_url": "https://api.github.com/users/cybergrind/repos", "events_url": "https://api.github.com/users/cybergrind/events{/privacy}", "received_events_url": "https://api.github.com/users/cybergrind/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-04T17:00:27Z", "updated_at": "2016-08-05T09:07:23Z", "closed_at": "2016-08-05T09:07:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to do simple example from http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/table_config.html#using-reflection-with-declarative\n\nAnd it give me error like:\n\n```\nTraceback (most recent call last):\n  File \"store_sync/db.py\", line 42, in <module>\n    main()\n  File \"store_sync/db.py\", line 38, in main\n    loop.run_until_complete(s)\n  File \"/usr/lib64/python3.5/asyncio/base_events.py\", line 387, in run_until_complete\n    return future.result()\n  File \"/usr/lib64/python3.5/asyncio/futures.py\", line 274, in result\n    raise self._exception\n  File \"/usr/lib64/python3.5/asyncio/tasks.py\", line 239, in _step\n    result = coro.send(None)\n  File \"store_sync/db.py\", line 29, in get_schedule\n    Base.prepare(engine)\n  File \"/ssd/kpi/tipsi/microservices/venv/lib/python3.5/site-packages/sqlalchemy/ext/declarative/api.py\", line 648, in prepare\n    cls._sa_decl_prepare(thingy.local_table, engine)\n  File \"/ssd/kpi/tipsi/microservices/venv/lib/python3.5/site-packages/sqlalchemy/ext/declarative/api.py\", line 677, in _sa_decl_prepare\n    cls._reflect_table(local_table, engine)\n  File \"/ssd/kpi/tipsi/microservices/venv/lib/python3.5/site-packages/sqlalchemy/ext/declarative/api.py\", line 687, in _reflect_table\n    schema=table.schema)\n  File \"/ssd/kpi/tipsi/microservices/venv/lib/python3.5/site-packages/sqlalchemy/sql/schema.py\", line 425, in __new__\n    table._init_existing(*args, **kw)\n  File \"/ssd/kpi/tipsi/microservices/venv/lib/python3.5/site-packages/sqlalchemy/sql/schema.py\", line 590, in _init_existing\n    include_columns, exclude_columns)\n  File \"/ssd/kpi/tipsi/microservices/venv/lib/python3.5/site-packages/sqlalchemy/sql/schema.py\", line 520, in _autoload\n    autoload_with.run_callable(\nAttributeError: '_PoolContextManager' object has no attribute 'run_callable'\n```\n\nSource code looks like:\n\n``` python\nimport asyncio                                                                                                                                                                                                                          \n\nimport sqlalchemy as sa                                                                                                                                                                                                                 \nfrom aiopg.sa import create_engine                                                                                                                                                                                                      \n#from sqlalchemy import create_engine                                                                                                                                                                                                   \nfrom sqlalchemy.ext.declarative import declarative_base, DeferredReflection                                                                                                                                                             \n\nfrom store_sync.util import interpolate_sysenv                                                                                                                                                                                          \n\n\nBase = declarative_base(cls=DeferredReflection)                                                                                                                                                                                         \n\n\nclass RetailSyncSchedule(Base):                                                                                                                                                                                                         \n    __tablename__ = 'retail_retailsyncschedule'                                                                                                                                                                                         \n\n\nPG_DEFAULTS = {                                                                                                                                                                                                                         \n    'PGDATABASE': 'postgres',                                                                                                                                                                                                           \n    'PGPORT': 5432,                                                                                                                                                                                                                     \n    'PGHOST': 'localhost',                                                                                                                                                                                                              \n    'PGUSER': 'postgres',                                                                                                                                                                                                               \n    'PGPASSWORD': '',                                                                                                                                                                                                                   \n    }                                                                                                                                                                                                                                   \nDSN = interpolate_sysenv('postgresql://{PGUSER}:{PGPASSWORD}@{PGHOST}:{PGPORT}/{PGDATABASE}', PG_DEFAULTS)                                                                                                                              \n\nasync def get_schedule():                                                                                                                                                                                                               \n    engine = create_engine(DSN)                                                                                                                                                                                                         \n    await Base.prepare(engine)                                                                                                                                                                                                          \n    s = await sa.orm.Session(engine)                                                                                                                                                                                                    \n    out = await s.query(RetailSyncSchedule).all()                                                                                                                                                                                       \n    print(dir(out[0]))                                                                                                                                                                                                                  \n\n\ndef main():                                                                                                                                                                                                                             \n    loop = asyncio.get_event_loop()                                                                                                                                                                                                     \n    s = get_schedule()                                                                                                                                                                                                                  \n    loop.run_until_complete(s)                                                                                                                                                                                                          \n    loop.close()                                                                                                                                                                                                                        \n\nif __name__ == '__main__':                                                                                                                                                                                                              \n    main()        \n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/129", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/129/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/129/events", "html_url": "https://github.com/aio-libs/aiopg/issues/129", "id": 166818652, "node_id": "MDU6SXNzdWUxNjY4MTg2NTI=", "number": 129, "title": "Document connection pool best usage and caveats", "user": {"login": "mpaolini", "id": 523292, "node_id": "MDQ6VXNlcjUyMzI5Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/523292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpaolini", "html_url": "https://github.com/mpaolini", "followers_url": "https://api.github.com/users/mpaolini/followers", "following_url": "https://api.github.com/users/mpaolini/following{/other_user}", "gists_url": "https://api.github.com/users/mpaolini/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpaolini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpaolini/subscriptions", "organizations_url": "https://api.github.com/users/mpaolini/orgs", "repos_url": "https://api.github.com/users/mpaolini/repos", "events_url": "https://api.github.com/users/mpaolini/events{/privacy}", "received_events_url": "https://api.github.com/users/mpaolini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-07-21T13:25:39Z", "updated_at": "2016-07-31T23:34:02Z", "closed_at": "2016-07-31T23:34:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A wrong usage of connection pool may cause deadlocks. See #113 #127 #128 for reference. Expecially [issue 128 comment](https://github.com/aio-libs/aiopg/issues/128#issuecomment-234192294).\n\nWe should document what's the best way of using connection pooling and also give some example of bad usage that leads to deadlocks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/128", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/128/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/128/events", "html_url": "https://github.com/aio-libs/aiopg/issues/128", "id": 166101973, "node_id": "MDU6SXNzdWUxNjYxMDE5NzM=", "number": 128, "title": "Make engine.acquire() reentrant", "user": {"login": "mpaolini", "id": 523292, "node_id": "MDQ6VXNlcjUyMzI5Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/523292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpaolini", "html_url": "https://github.com/mpaolini", "followers_url": "https://api.github.com/users/mpaolini/followers", "following_url": "https://api.github.com/users/mpaolini/following{/other_user}", "gists_url": "https://api.github.com/users/mpaolini/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpaolini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpaolini/subscriptions", "organizations_url": "https://api.github.com/users/mpaolini/orgs", "repos_url": "https://api.github.com/users/mpaolini/repos", "events_url": "https://api.github.com/users/mpaolini/events{/privacy}", "received_events_url": "https://api.github.com/users/mpaolini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 50, "created_at": "2016-07-18T14:08:09Z", "updated_at": "2016-07-21T13:26:12Z", "closed_at": "2016-07-21T13:26:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "currently acquiring a connection from the pool in a nested manner is deadlock-prone. See #113 #126 and #127 \n\nSometimes (e.g when implementing middlewares or forms validators, or any other feature plugged in existing frameworks) is just difficult to pass the `connection` instance down the call stack.\n\nI propose a new feature where `engine.acquire()` returns the same already acquired connection if called again inside a `engine.acquire()` context by the same asyncio task.\n\nthis would mean this test would pass \n\n``` python\n\nasync def test_nested_acquire(event_loop):\n    async with engine.acquire() as conn1:\n        async with engine.acquire() as conn2:\n            assert conn1 == conn2\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/127", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/127/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/127/events", "html_url": "https://github.com/aio-libs/aiopg/issues/127", "id": 166059683, "node_id": "MDU6SXNzdWUxNjYwNTk2ODM=", "number": 127, "title": "Acquiring connections in a nested manner", "user": {"login": "serg666", "id": 10406902, "node_id": "MDQ6VXNlcjEwNDA2OTAy", "avatar_url": "https://avatars1.githubusercontent.com/u/10406902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/serg666", "html_url": "https://github.com/serg666", "followers_url": "https://api.github.com/users/serg666/followers", "following_url": "https://api.github.com/users/serg666/following{/other_user}", "gists_url": "https://api.github.com/users/serg666/gists{/gist_id}", "starred_url": "https://api.github.com/users/serg666/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/serg666/subscriptions", "organizations_url": "https://api.github.com/users/serg666/orgs", "repos_url": "https://api.github.com/users/serg666/repos", "events_url": "https://api.github.com/users/serg666/events{/privacy}", "received_events_url": "https://api.github.com/users/serg666/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-07-18T10:02:55Z", "updated_at": "2016-07-18T13:49:49Z", "closed_at": "2016-07-18T13:31:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Guys, sorry for annoying, but all your answers in #113 #125 #126 are not at problem described at issues.\n\nThe point of #113 is that we can deadlock the pool if we acquire two connections in a nested manner in case if concurrency is more then pool size . In #113 #125 #126 you propose to use a timeout, or does not use a nested style at all as @asvetlov  commented at  the #113\n\nThe question is \"**_can we acquire connections in a nested manner_**\" as described in #113 at the first example \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/126", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/126/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/126/events", "html_url": "https://github.com/aio-libs/aiopg/issues/126", "id": 165812290, "node_id": "MDU6SXNzdWUxNjU4MTIyOTA=", "number": 126, "title": "Acquired connections does not return to pool?", "user": {"login": "serg666", "id": 10406902, "node_id": "MDQ6VXNlcjEwNDA2OTAy", "avatar_url": "https://avatars1.githubusercontent.com/u/10406902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/serg666", "html_url": "https://github.com/serg666", "followers_url": "https://api.github.com/users/serg666/followers", "following_url": "https://api.github.com/users/serg666/following{/other_user}", "gists_url": "https://api.github.com/users/serg666/gists{/gist_id}", "starred_url": "https://api.github.com/users/serg666/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/serg666/subscriptions", "organizations_url": "https://api.github.com/users/serg666/orgs", "repos_url": "https://api.github.com/users/serg666/repos", "events_url": "https://api.github.com/users/serg666/events{/privacy}", "received_events_url": "https://api.github.com/users/serg666/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-07-15T15:20:36Z", "updated_at": "2016-07-18T10:21:09Z", "closed_at": "2016-07-16T15:22:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Guys! This issue refer to #113  As @asvetlov said I began to use asyncio.wait_for \n\n``` python\nimport logging\nimport logging.config\nimport asyncio\n\nimport aiopg.sa\nimport sqlalchemy as sa\n\nimport tornado.web\nimport tornado.platform.asyncio\nfrom tornado.options import parse_command_line\n\nasync def create_engine():\n    return await aiopg.sa.create_engine(\n        'dbname=gateway user=gateway password=qazwsx host=127.0.0.1',\n        echo=True,\n    )\n\nlog = logging.getLogger(__name__)\n\ntornado.platform.asyncio.AsyncIOMainLoop().install()\nloop = asyncio.get_event_loop()\n\nengine = loop.run_until_complete(create_engine())\nmetadata = sa.MetaData()\n\n\nt1 = sa.Table('t1', metadata,\n              sa.Column('id', sa.Integer, primary_key=True),\n              sa.Column('name', sa.String(255), nullable=False))\n\n\nt2 = sa.Table('t2', metadata,\n              sa.Column('id', sa.Integer, primary_key=True),\n              sa.Column('name', sa.String(255), nullable=False))\n\n\nasync def fetch_t2():\n    log.debug('try to acquire from fetch_f2')\n    conn = await asyncio.wait_for(engine.acquire(), 10)\n    log.debug('acquired from fetch_f2')\n    await conn.execute(t2.select().where(t2.c.id == 4))\n    await engine.release(conn)\n\n\nclass ReqHandler(tornado.web.RequestHandler):\n    async def post(self):\n        log.debug('try to acquire from post')\n        conn = await asyncio.wait_for(engine.acquire(), 10)\n        log.debug('acquired from post')\n        async with conn.begin():\n            await conn.execute(t1.select().where(t1.c.id == 1))\n            await fetch_t2()\n            await conn.execute(t1.insert().values(name='some name'))\n        await engine.release(conn)\n\n        self.write(\"Hello world!\\n\")\n\n\napp = tornado.web.Application([\n    (r'/', ReqHandler)\n])\n\nif __name__ == '__main__':\n    app.listen(8080, '192.168.156.101')\n    loop.run_forever()\n```\n\nThen I provide a load of 100 concurrent requests I had seen that connections has timed out but it seems to me that they does not returned to pool at all. \n\nMy ps command gives me 10 idle postgres connections\n\n 1016 ?        Ss     0:00 postgres: gateway gateway 127.0.0.1(35420) idle  \n 1020 ?        Ss     0:00 postgres: gateway gateway 127.0.0.1(35421) idle  \n 1032 ?        Ss     0:00 postgres: gateway gateway 127.0.0.1(35422) idle  \n 1033 ?        Ss     0:00 postgres: gateway gateway 127.0.0.1(35423) idle  \n 1034 ?        Ss     0:00 postgres: gateway gateway 127.0.0.1(35424) idle  \n 1035 ?        Ss     0:00 postgres: gateway gateway 127.0.0.1(35425) idle  \n 1036 ?        Ss     0:00 postgres: gateway gateway 127.0.0.1(35426) idle  \n 1037 ?        Ss     0:00 postgres: gateway gateway 127.0.0.1(35427) idle  \n 1038 ?        Ss     0:00 postgres: gateway gateway 127.0.0.1(35428) idle  \n 1039 ?        Ss     0:00 postgres: gateway gateway 127.0.0.1(35429) idle                                                                             \n\nand any new request to http://192.168.156.101:8080/ leads to concurrent.futures._base.TimeoutError\n\nIt seems to me that if the pool is completely exhausted, the connections are not returned to the pool\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/123", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/123/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/123/events", "html_url": "https://github.com/aio-libs/aiopg/issues/123", "id": 165431103, "node_id": "MDU6SXNzdWUxNjU0MzExMDM=", "number": 123, "title": "aiopg.sa.Engine doesn't implement sqlalchemy.engine.base.Engine", "user": {"login": "nucular", "id": 5305459, "node_id": "MDQ6VXNlcjUzMDU0NTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5305459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nucular", "html_url": "https://github.com/nucular", "followers_url": "https://api.github.com/users/nucular/followers", "following_url": "https://api.github.com/users/nucular/following{/other_user}", "gists_url": "https://api.github.com/users/nucular/gists{/gist_id}", "starred_url": "https://api.github.com/users/nucular/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nucular/subscriptions", "organizations_url": "https://api.github.com/users/nucular/orgs", "repos_url": "https://api.github.com/users/nucular/repos", "events_url": "https://api.github.com/users/nucular/events{/privacy}", "received_events_url": "https://api.github.com/users/nucular/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-13T21:57:38Z", "updated_at": "2016-07-18T22:22:21Z", "closed_at": "2016-07-14T08:48:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nIt appears to me that the `Engine` class is far from implementing the current interface of `sqlalchemy.engine.base.Engine`. Same is true for `SAConnection`. This causes many duck-typed SQLAlchemy functions to fail.\n\nFor example:\n\n``` py\nimport asyncio\nfrom sqlalchemy import Table, MetaData, Column, Integer\nfrom aiopg.sa import create_engine\n\nmetadata = MetaData()\nTest = Table(\"Test\", metadata,\n  Column(\"test\", Integer)\n)\n\nasync def run():\n  engine = create_engine(\n    database=\"postgres\",\n    user=\"postgres\",\n    password=\"- snip -\",\n    host=\"localhost\",\n    port=\"5432\"\n  )\n\n  metadata.create_all(engine)\n\nif __name__ == \"__main__\":\n  loop = asyncio.get_event_loop()\n  loop.run_until_complete(run())\n```\n\nresults in\n\n``` py\nTraceback (most recent call last):\n  File \"test.py\", line 24, in <module>\n    loop.run_until_complete(run())\n  File \"C:\\tools\\python\\lib\\asyncio\\base_events.py\", line 337, in run_until_complete\n    return future.result()\n  File \"C:\\tools\\python\\lib\\asyncio\\futures.py\", line 274, in result\n    raise self._exception\n  File \"C:\\tools\\python\\lib\\asyncio\\tasks.py\", line 239, in _step\n    result = coro.send(None)\n  File \"test.py\", line 20, in run\n    metadata.create_all(engine)\n  File \"C:\\tools\\python\\lib\\site-packages\\sqlalchemy\\sql\\schema.py\", line 3742, in create_all\n    bind._run_visitor(ddl.SchemaGenerator,\nAttributeError: '_PoolContextManager' object has no attribute '_run_visitor'\n```\n\ndue to the`_run_visitor` method missing in `Engine`. Why are these classes not subclassing SQLAlchemy's `Engine` or `Connectable`?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/120", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/120/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/120/events", "html_url": "https://github.com/aio-libs/aiopg/issues/120", "id": 161960020, "node_id": "MDU6SXNzdWUxNjE5NjAwMjA=", "number": 120, "title": "Setting up application name", "user": {"login": "extremely-cool", "id": 20113154, "node_id": "MDQ6VXNlcjIwMTEzMTU0", "avatar_url": "https://avatars2.githubusercontent.com/u/20113154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/extremely-cool", "html_url": "https://github.com/extremely-cool", "followers_url": "https://api.github.com/users/extremely-cool/followers", "following_url": "https://api.github.com/users/extremely-cool/following{/other_user}", "gists_url": "https://api.github.com/users/extremely-cool/gists{/gist_id}", "starred_url": "https://api.github.com/users/extremely-cool/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/extremely-cool/subscriptions", "organizations_url": "https://api.github.com/users/extremely-cool/orgs", "repos_url": "https://api.github.com/users/extremely-cool/repos", "events_url": "https://api.github.com/users/extremely-cool/events{/privacy}", "received_events_url": "https://api.github.com/users/extremely-cool/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-23T16:00:04Z", "updated_at": "2016-06-23T20:43:52Z", "closed_at": "2016-06-23T20:43:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be great if for the connection pool could be install the application name\ne.g. SQL \"SET application_name = %s'' operation.\nit's very convenient when you have many connections from multiple applications.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/116", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/116/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/116/events", "html_url": "https://github.com/aio-libs/aiopg/issues/116", "id": 156519232, "node_id": "MDU6SXNzdWUxNTY1MTkyMzI=", "number": 116, "title": "Ignore/reconnect for closed connection in pool", "user": {"login": "runtel", "id": 11735949, "node_id": "MDQ6VXNlcjExNzM1OTQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/11735949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/runtel", "html_url": "https://github.com/runtel", "followers_url": "https://api.github.com/users/runtel/followers", "following_url": "https://api.github.com/users/runtel/following{/other_user}", "gists_url": "https://api.github.com/users/runtel/gists{/gist_id}", "starred_url": "https://api.github.com/users/runtel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/runtel/subscriptions", "organizations_url": "https://api.github.com/users/runtel/orgs", "repos_url": "https://api.github.com/users/runtel/repos", "events_url": "https://api.github.com/users/runtel/events{/privacy}", "received_events_url": "https://api.github.com/users/runtel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-05-24T14:15:15Z", "updated_at": "2016-07-15T05:45:31Z", "closed_at": "2016-07-15T05:45:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\n\nI have some problem with pool.acquire() and closed connection in pool.\nSetting on PG Server set connection timeout to 120 second.  When i use pool.acquire() it is raise error:\n\n```\nSleep 600\nTraceback (most recent call last):\n  File \"test.py\", line 21, in <module>\n    loop.run_until_complete(test_select())\n  File \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/asyncio/base_events.py\", line 337, in run_until_complete\n    return future.result()\n  File \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/asyncio/futures.py\", line 274, in result\n    raise self._exception\n  File \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/asyncio/tasks.py\", line 239, in _step\n    result = coro.send(None)\n  File \"test.py\", line 10, in test_select\n    async with pool.acquire() as conn:\n  File \"/usr/local/lib/python3.5/site-packages/aiopg/utils.py\", line 116, in __aenter__\n    self._conn = yield from self._coro\n  File \"/usr/local/lib/python3.5/site-packages/aiopg/pool.py\", line 170, in _acquire\n    assert not conn.closed, conn\nAssertionError: <aiopg.connection.Connection object at 0x106f7df98>\n\n```\n\nand code\n\n``` python\nimport asyncio\nimport aiopg\n\ndsn = 'dbname=dbname user=user password=password host=127.0.0.1'\nasync def test_select():\n    async with aiopg.create_pool(dsn) as pool:\n        print(\"Sleep 600\")\n        await asyncio.sleep(150)\n        async with pool.acquire() as conn:\n            async with conn.cursor() as cur:\n                await cur.execute(\"SELECT 1\")\n                ret = []\n                async for row in cur:\n                    ret.append(row)\n                assert ret == [(1,)]\n    print(\"ALL DONE\")\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(test_select())\n```\n\nHow to solve this problem.\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/115", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/115/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/115/events", "html_url": "https://github.com/aio-libs/aiopg/issues/115", "id": 151471008, "node_id": "MDU6SXNzdWUxNTE0NzEwMDg=", "number": 115, "title": "Use existing database", "user": {"login": "codeadict", "id": 168440, "node_id": "MDQ6VXNlcjE2ODQ0MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/168440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codeadict", "html_url": "https://github.com/codeadict", "followers_url": "https://api.github.com/users/codeadict/followers", "following_url": "https://api.github.com/users/codeadict/following{/other_user}", "gists_url": "https://api.github.com/users/codeadict/gists{/gist_id}", "starred_url": "https://api.github.com/users/codeadict/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codeadict/subscriptions", "organizations_url": "https://api.github.com/users/codeadict/orgs", "repos_url": "https://api.github.com/users/codeadict/repos", "events_url": "https://api.github.com/users/codeadict/events{/privacy}", "received_events_url": "https://api.github.com/users/codeadict/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-27T19:28:54Z", "updated_at": "2016-07-15T09:31:29Z", "closed_at": "2016-07-15T09:31:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would be great if we can use aiopg sqlalchemy with a legacy database as you can do with `sqlalchemy.ext.declarative` or `sqlalchemy.ext.automap`  without redefining all the tables again. Im using something like:\n\n![screenshot from 2016-04-27 15-27-16](https://cloud.githubusercontent.com/assets/168440/14865427/8e4d583c-0c8c-11e6-908a-389d3d0e0a3e.png)\n\nbut get an error saying:\n\n``` python\nAttributeError: 'SAConnection' object has no attribute 'connect'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/113", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/113/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/113/events", "html_url": "https://github.com/aio-libs/aiopg/issues/113", "id": 146277165, "node_id": "MDU6SXNzdWUxNDYyNzcxNjU=", "number": 113, "title": "Can't acquire connection from pool", "user": {"login": "serg666", "id": 10406902, "node_id": "MDQ6VXNlcjEwNDA2OTAy", "avatar_url": "https://avatars1.githubusercontent.com/u/10406902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/serg666", "html_url": "https://github.com/serg666", "followers_url": "https://api.github.com/users/serg666/followers", "following_url": "https://api.github.com/users/serg666/following{/other_user}", "gists_url": "https://api.github.com/users/serg666/gists{/gist_id}", "starred_url": "https://api.github.com/users/serg666/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/serg666/subscriptions", "organizations_url": "https://api.github.com/users/serg666/orgs", "repos_url": "https://api.github.com/users/serg666/repos", "events_url": "https://api.github.com/users/serg666/events{/privacy}", "received_events_url": "https://api.github.com/users/serg666/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984834, "node_id": "MDU6TGFiZWw4OTk4NDgzNA==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2016-04-06T11:06:53Z", "updated_at": "2016-07-18T06:28:11Z", "closed_at": "2016-07-15T09:32:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\n\nI have got the problem with aiopg when acquiring new connection from pool. I have used a simple code for this:\n\n``` python\nimport asyncio\n\nimport aiopg.sa\nimport sqlalchemy as sa\n\nimport tornado.web\nimport tornado.platform.asyncio\n\nasync def create_engine():\n    return await aiopg.sa.create_engine(\n        'dbname=dbname user=user password=password host=127.0.0.1',\n        echo=True\n    )\n\nloop = asyncio.get_event_loop()\nengine = loop.run_until_complete(create_engine())\nmetadata = sa.MetaData()\n\n\nt1 = sa.Table('t1', metadata,\n              sa.Column('id', sa.Integer, primary_key=True),\n              sa.Column('name', sa.String(255), nullable=False))\n\n\nt2 = sa.Table('t2', metadata,\n              sa.Column('id', sa.Integer, primary_key=True),\n              sa.Column('name', sa.String(255), nullable=False))\n\n\nasync def fetch_t2():\n    async with engine.acquire() as conn:\n        await conn.execute(t2.select().where(t2.c.id == 4))\n\n\nclass ReqHandler(tornado.web.RequestHandler):\n    async def post(self):\n        async with engine.acquire() as conn:\n            async with conn.begin():\n                await conn.execute(t1.select().where(t1.c.id == 1))\n                await fetch_t2()\n                await conn.execute(t1.insert().values(name='some name'))\n\n        self.write(\"Hello world!\\n\")\n\n\napp = tornado.web.Application([\n    (r'/', ReqHandler)\n])\n\nif __name__ == '__main__':\n    tornado.platform.asyncio.AsyncIOMainLoop().install()\n    app.listen(8080)\n    loop.run_forever()\n```\n\nThen I provide a load of 100 concurrent requests and after a while the service hangs. It  seems to me that aiopg can not get another connection from the pool, because when I increase the maximum pool size load test has been passed\n\nI have used the following:\n\naiopg-0.9.2\npsycopg2-2.6.1\nSQLAlchemy-1.0.12\ntornado-4.3\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/112", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/112/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/112/events", "html_url": "https://github.com/aio-libs/aiopg/issues/112", "id": 146139354, "node_id": "MDU6SXNzdWUxNDYxMzkzNTQ=", "number": 112, "title": "aiopg.sa bulk inserts / executemany", "user": {"login": "bcmyers", "id": 10109972, "node_id": "MDQ6VXNlcjEwMTA5OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/10109972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcmyers", "html_url": "https://github.com/bcmyers", "followers_url": "https://api.github.com/users/bcmyers/followers", "following_url": "https://api.github.com/users/bcmyers/following{/other_user}", "gists_url": "https://api.github.com/users/bcmyers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcmyers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcmyers/subscriptions", "organizations_url": "https://api.github.com/users/bcmyers/orgs", "repos_url": "https://api.github.com/users/bcmyers/repos", "events_url": "https://api.github.com/users/bcmyers/events{/privacy}", "received_events_url": "https://api.github.com/users/bcmyers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-04-05T23:39:39Z", "updated_at": "2016-07-15T09:40:06Z", "closed_at": "2016-07-15T09:40:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologies in advance if this is the wrong forum for a question like this, but I was wondering if you have any plans to add bulk insert / executemany functionality for the SQLAlchemy wrapper in the future.  My understanding (which may be wrong) is that this functionality is not in the current version.  Just curious if it's something that will eventually be added?  Thanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/111", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/111/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/111/events", "html_url": "https://github.com/aio-libs/aiopg/issues/111", "id": 145457595, "node_id": "MDU6SXNzdWUxNDU0NTc1OTU=", "number": 111, "title": "aiopg closes event loop on failed connection", "user": {"login": "mr-rodgers", "id": 554780, "node_id": "MDQ6VXNlcjU1NDc4MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/554780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mr-rodgers", "html_url": "https://github.com/mr-rodgers", "followers_url": "https://api.github.com/users/mr-rodgers/followers", "following_url": "https://api.github.com/users/mr-rodgers/following{/other_user}", "gists_url": "https://api.github.com/users/mr-rodgers/gists{/gist_id}", "starred_url": "https://api.github.com/users/mr-rodgers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mr-rodgers/subscriptions", "organizations_url": "https://api.github.com/users/mr-rodgers/orgs", "repos_url": "https://api.github.com/users/mr-rodgers/repos", "events_url": "https://api.github.com/users/mr-rodgers/events{/privacy}", "received_events_url": "https://api.github.com/users/mr-rodgers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-04-03T05:56:00Z", "updated_at": "2016-07-16T15:18:47Z", "closed_at": "2016-07-16T15:18:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a connection to postgres fails, the asyncio event loop is closed. This prevents me from running any further coroutines (in particular, even those unrelated to aiopg) after a connection fails, which isn't always desirable.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/110", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/110/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/110/events", "html_url": "https://github.com/aio-libs/aiopg/issues/110", "id": 142228727, "node_id": "MDU6SXNzdWUxNDIyMjg3Mjc=", "number": 110, "title": "Exception in Connection.__del__ when database connection has failed.", "user": {"login": "elektito", "id": 28643, "node_id": "MDQ6VXNlcjI4NjQz", "avatar_url": "https://avatars1.githubusercontent.com/u/28643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elektito", "html_url": "https://github.com/elektito", "followers_url": "https://api.github.com/users/elektito/followers", "following_url": "https://api.github.com/users/elektito/following{/other_user}", "gists_url": "https://api.github.com/users/elektito/gists{/gist_id}", "starred_url": "https://api.github.com/users/elektito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elektito/subscriptions", "organizations_url": "https://api.github.com/users/elektito/orgs", "repos_url": "https://api.github.com/users/elektito/repos", "events_url": "https://api.github.com/users/elektito/events{/privacy}", "received_events_url": "https://api.github.com/users/elektito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-21T00:53:29Z", "updated_at": "2016-07-16T15:23:11Z", "closed_at": "2016-07-16T15:23:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Try the following code snippet:\n\n```\nimport asyncio\nimport aiopg\nimport psycopg2\n\nasync def run():\n    try:\n    pool = await aiopg.create_pool('dbname=foo host=bar')\n    except psycopg2.OperationalError:\n    pass\n\ndef main():\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n\nif __name__ == '__main__':\n    main()\n```\n\nIf `foo` is a database that **does** exist and `bar` a host that **does not**, you'll receive the following error:\n\n```\nException ignored in: <bound method Connection.__del__ of <aiopg.connection.Connection object at 0x7ffff4d90358>>\nTraceback (most recent call last):\n  File \"/home/mostafa/source/salesman/venv/lib/python3.5/site-packages/aiopg/connection.py\", line 452, in __del__\n      if not self._conn.closed:\nAttributeError: 'Connection' object has no attribute '_conn'\n```\n\nWe should probably either check if `_conn` exists, or make sure it does exist even if the `connect` method fails.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/106", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/106/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/106/events", "html_url": "https://github.com/aio-libs/aiopg/issues/106", "id": 137685738, "node_id": "MDU6SXNzdWUxMzc2ODU3Mzg=", "number": 106, "title": "Reduce pool minsize to 1", "user": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-01T21:01:33Z", "updated_at": "2016-03-04T21:30:31Z", "closed_at": "2016-03-04T21:30:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The main reason for non-zero min size is checking postgres server existence on pool creation time.\nOne connection should be enough.\n\nThoughts?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/105", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/105/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/105/events", "html_url": "https://github.com/aio-libs/aiopg/issues/105", "id": 133585241, "node_id": "MDU6SXNzdWUxMzM1ODUyNDE=", "number": 105, "title": "Why is only ISOLATION_LEVEL_READ_COMMITTED supported?", "user": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-14T21:52:31Z", "updated_at": "2016-02-17T13:35:34Z", "closed_at": "2016-02-17T13:35:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "As the title states, I'm curious to know why the documentation states that only `ISOLATION_LEVEL_READ_COMMITTED` is supported.\n\n**Edit:** I've just been looking at the `psycopg2` documentation. Would I be correct to assume that other isolation levels are actually supported, but **setting** them using the `set_isolation_level` api is unsupported?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/99", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/99/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/99/events", "html_url": "https://github.com/aio-libs/aiopg/issues/99", "id": 126862820, "node_id": "MDU6SXNzdWUxMjY4NjI4MjA=", "number": 99, "title": "Syntax errors in SQLAlchemy example", "user": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-15T12:22:29Z", "updated_at": "2016-01-31T17:16:50Z", "closed_at": "2016-01-31T17:16:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is the current SQLAlchemy example on the website. As you can see, there are a few syntax errors. Once I corrected the syntax errors, I still got a psychopg ProgrammingError (see below)\n\nExample from the readme:\n\n``` python\nimport asyncio\nfrom aiopg.sa import create_engine\nfrom sqlalchemy.schema import CreateTable\nimport sqlalchemy as sa\n\nmetadata = sa.MetaData()\n\ntbl = sa.Table('tbl', metadata,\n    sa.Column('id', sa.Integer, primary_key=True),\n    sa.Column('val', sa.String(255)))\n\n\n async def go():\n     async with create_engine(user='aiopg',\n                              database='aiopg',\n                              host='127.0.0.1',\n                              password='passwd') as engine:\n\n     async with engine.acquire() as conn:\n         await conn.execute(tbl.insert().values(val='abc'))\n\n         async for row in conn.execute(tbl.select())\n             print(row.id, row.val)\n\nasyncio.get_event_loop().run_until_complete(go())\n```\n\nExample with syntax corrections:\n\n``` python\nimport asyncio\nfrom aiopg.sa import create_engine\nimport sqlalchemy as sa\nimport os\n\n\nmetadata = sa.MetaData()\n\ntbl = sa.Table('tbl', metadata,\n               sa.Column('id', sa.Integer, primary_key=True),\n               sa.Column('val', sa.String(255)))\n\nasync def go():\n    async with create_engine(user='aiopg',\n                             database='aiopg',\n                             host='127.0.0.1',\n                             password='passwd') as engine:\n\n        async with engine.acquire() as conn:\n            await conn.execute(tbl.insert().values(val='abc'))\n\n            async for row in conn.execute(tbl.select().where(tbl.c.val=='abc')):\n                print(row.id, row.val)\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(go())\n```\n\nThis produces the following error:\n\n```\npsycopg2.ProgrammingError: relation \"tbl\" does not exist\nLINE 1: INSERT INTO tbl (val) VALUES ('abc') RETURNING tbl.id\n```\n\n`pip` version info:\n\n```\nSQLAlchemy==1.0.11\ngit+https://github.com/aio-libs/aiopg.git@8c50b98ddd3dcc7619fc60334fad804b1486ec62\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/92", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/92/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/92/events", "html_url": "https://github.com/aio-libs/aiopg/issues/92", "id": 124974337, "node_id": "MDU6SXNzdWUxMjQ5NzQzMzc=", "number": 92, "title": "Support async iterator in ResultProxy", "user": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/aio-libs/aiopg/milestones/1", "html_url": "https://github.com/aio-libs/aiopg/milestone/1", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/milestones/1/labels", "id": 1484907, "node_id": "MDk6TWlsZXN0b25lMTQ4NDkwNw==", "number": 1, "title": "0.8", "description": "", "creator": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "open", "created_at": "2016-01-05T14:06:15Z", "updated_at": "2016-01-10T16:31:13Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2016-01-05T14:11:23Z", "updated_at": "2016-01-10T16:31:02Z", "closed_at": "2016-01-10T16:31:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```\nasync for row in conn.exectute(\"SELECT ...\"):\n    print(row)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/91", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/91/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/91/events", "html_url": "https://github.com/aio-libs/aiopg/issues/91", "id": 124974124, "node_id": "MDU6SXNzdWUxMjQ5NzQxMjQ=", "number": 91, "title": "Support async conext manager for transaction", "user": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/aio-libs/aiopg/milestones/1", "html_url": "https://github.com/aio-libs/aiopg/milestone/1", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/milestones/1/labels", "id": 1484907, "node_id": "MDk6TWlsZXN0b25lMTQ4NDkwNw==", "number": 1, "title": "0.8", "description": "", "creator": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "open", "created_at": "2016-01-05T14:06:15Z", "updated_at": "2016-01-10T16:31:13Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2016-01-05T14:10:05Z", "updated_at": "2016-01-10T16:31:13Z", "closed_at": "2016-01-10T16:31:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```async with conn.begin():\n       conn.execute(...)\n\n```\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/87", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/87/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/87/events", "html_url": "https://github.com/aio-libs/aiopg/issues/87", "id": 116206418, "node_id": "MDU6SXNzdWUxMTYyMDY0MTg=", "number": 87, "title": "Returning after update", "user": {"login": "ikrivosheev", "id": 6786239, "node_id": "MDQ6VXNlcjY3ODYyMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6786239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ikrivosheev", "html_url": "https://github.com/ikrivosheev", "followers_url": "https://api.github.com/users/ikrivosheev/followers", "following_url": "https://api.github.com/users/ikrivosheev/following{/other_user}", "gists_url": "https://api.github.com/users/ikrivosheev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ikrivosheev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ikrivosheev/subscriptions", "organizations_url": "https://api.github.com/users/ikrivosheev/orgs", "repos_url": "https://api.github.com/users/ikrivosheev/repos", "events_url": "https://api.github.com/users/ikrivosheev/events{/privacy}", "received_events_url": "https://api.github.com/users/ikrivosheev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-11-10T21:31:25Z", "updated_at": "2015-12-04T16:42:38Z", "closed_at": "2015-12-04T16:42:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, after execute query:\n\n``` python\nwith (yield from self.db) as db_conn:\n        task_list = yield from db_conn.execute(update(tasks).where(tasks.c.id == task_id).values(locked=True).returning(tasks.columns))\n```\n\nException is:\n\n```\nFile \"/home/ivan/.virtualenvs/tracerwebui/lib/python3.4/site-packages/sqlalchemy/sql/compiler.py\", line 1775, in returning_clause\n    \"RETURNING is not supported by this \"\nsqlalchemy.exc.CompileError: RETURNING is not supported by this dialect's statement compiler.\n```\n\nModel:\n\n``` python\nmetadata = sa.MetaData()\n\ntasks = sa.Table(\"tasks\", metadata,\n                      sa.Column(\"id\", sa.Integer, primary_key=True),\n                      sa.Column(\"title\", sa.String(128), index=True, unique=True),\n                      sa.Column(\"data\", JSONType),\n                      sa.Column(\"start_date\", sa.DateTime, nullable=True),\n                      sa.Column(\"end_date\", sa.DateTime, nullable=True),\n                      sa.Column(\"archive\", sa.Boolean, default=False),\n                      sa.Column(\"slurm_job\", sa.Integer, nullable=True),\n                      sa.Column(\"locked\", sa.Boolean, default=False),\n                      sa.Column(\"is_running\", sa.Boolean, default=False),\n                      sa.Column(\"readiness\", sa.Integer(), default=0),\n                      sa.Column(\"state\", ChoiceType(TASK_STATE), default=TASK_STATE_DEFAULT)\n                      )\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/86", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/86/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/86/events", "html_url": "https://github.com/aio-libs/aiopg/issues/86", "id": 115753251, "node_id": "MDU6SXNzdWUxMTU3NTMyNTE=", "number": 86, "title": "Cannot make db -> python value conversion working with custom SA columns", "user": {"login": "avanov", "id": 601955, "node_id": "MDQ6VXNlcjYwMTk1NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/601955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avanov", "html_url": "https://github.com/avanov", "followers_url": "https://api.github.com/users/avanov/followers", "following_url": "https://api.github.com/users/avanov/following{/other_user}", "gists_url": "https://api.github.com/users/avanov/gists{/gist_id}", "starred_url": "https://api.github.com/users/avanov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avanov/subscriptions", "organizations_url": "https://api.github.com/users/avanov/orgs", "repos_url": "https://api.github.com/users/avanov/repos", "events_url": "https://api.github.com/users/avanov/events{/privacy}", "received_events_url": "https://api.github.com/users/avanov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-11-08T19:19:03Z", "updated_at": "2016-11-25T22:36:46Z", "closed_at": "2016-11-25T22:36:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "The definition:\n\n``` python\nimport logging\nimport sqlalchemy.types as types\nfrom enum import Enum as PythonEnum\n\nlog = logging.getLogger(__name__)\n\nclass PythonMappedEnum(types.TypeDecorator):\n    \"\"\" Implements mapping between Postgres' Enums and Python Enums.\n    \"\"\"\n    impl = types.Enum\n\n    def __init__(self, python_enum_type: PythonEnum, **kwargs):\n        self.python_enum_type = python_enum_type\n        self.kwargs = kwargs\n        enum_args = [x.value for x in python_enum_type]\n        super(PythonMappedEnum, self).__init__(*enum_args, **self.kwargs)\n\n    def process_bind_param(self, value: PythonEnum, dialect):\n        \"\"\" Convert to postgres value\n        \"\"\"\n        return value.value\n\n    def process_result_value(self, value: str, dialect):\n        \"\"\" Convert to python value\n        \"\"\"\n        log.debug(\"=====================\")\n        log.debug(\"Called\")\n        for __, case in self.python_enum_type.__members__.items():\n            if case.value == value:\n                return case\n        raise TypeError(\"Cannot map Enum value '{}' to Python's {}\".format(\n            value, self.python_enum_type\n        ))\n\n    def copy(self):\n        return PythonMappedEnum(self.python_enum_type, **self.kwargs)\n```\n\nThe calling code (abstract):\n\n``` python\nresult = yield from SAPoolConnection.execute(SATable.select().limit(1))\ndata = yield from result.fetchone()\n```\n\nWhen `data` is processed, the value that corresponds to the custom Enum field is of type `str`, because the `process_result_value()` never gets called. But for insert statements, `process_bind_param()` is called as expected.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/85", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/85/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/85/events", "html_url": "https://github.com/aio-libs/aiopg/issues/85", "id": 115319049, "node_id": "MDU6SXNzdWUxMTUzMTkwNDk=", "number": 85, "title": "aiopg incorrectly installs tests along with aiopg in Python", "user": {"login": "rutsky", "id": 46573, "node_id": "MDQ6VXNlcjQ2NTcz", "avatar_url": "https://avatars2.githubusercontent.com/u/46573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rutsky", "html_url": "https://github.com/rutsky", "followers_url": "https://api.github.com/users/rutsky/followers", "following_url": "https://api.github.com/users/rutsky/following{/other_user}", "gists_url": "https://api.github.com/users/rutsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rutsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rutsky/subscriptions", "organizations_url": "https://api.github.com/users/rutsky/orgs", "repos_url": "https://api.github.com/users/rutsky/repos", "events_url": "https://api.github.com/users/rutsky/events{/privacy}", "received_events_url": "https://api.github.com/users/rutsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-11-05T16:18:59Z", "updated_at": "2016-03-09T14:30:57Z", "closed_at": "2016-03-09T14:30:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`packages=find_packages(),` in `setup.py` tells setuptools to include all subdirectories that looks like python package to include it in the distribution (since Python 3.3, according to [documentation](https://pythonhosted.org/setuptools/setuptools.html#using-find-packages) directories even don't need to have `__init__.py`). \n\nThis leads to inclusion in the distribution of aiopg `tests` directory, which is incorrect (this directory may in in source distribution, but must not be in binary distributions, e.g. in wheels).\n\nSimilar error exists in at least [aiohttp_debugtoolbar](https://github.com/aio-libs/aiohttp_debugtoolbar).\n\nTo solve this issue in aiohttp_cors I explicitly listed packages that I want to include in distribution: https://github.com/aio-libs/aiohttp_cors/commit/22b9ff4efd53921cf763b09810d4767ab5d2b7ca\n\nThis issue is one of the reasons of initially putting sources inside `src/` subdirectory in aiohttp_cors.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/81", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/81/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/81/events", "html_url": "https://github.com/aio-libs/aiopg/issues/81", "id": 111628584, "node_id": "MDU6SXNzdWUxMTE2Mjg1ODQ=", "number": 81, "title": "Pool.terminate may be broken.", "user": {"login": "obmarg", "id": 556490, "node_id": "MDQ6VXNlcjU1NjQ5MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/556490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obmarg", "html_url": "https://github.com/obmarg", "followers_url": "https://api.github.com/users/obmarg/followers", "following_url": "https://api.github.com/users/obmarg/following{/other_user}", "gists_url": "https://api.github.com/users/obmarg/gists{/gist_id}", "starred_url": "https://api.github.com/users/obmarg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obmarg/subscriptions", "organizations_url": "https://api.github.com/users/obmarg/orgs", "repos_url": "https://api.github.com/users/obmarg/repos", "events_url": "https://api.github.com/users/obmarg/events{/privacy}", "received_events_url": "https://api.github.com/users/obmarg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-15T14:28:04Z", "updated_at": "2016-07-16T16:25:47Z", "closed_at": "2016-07-16T16:25:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "There's not much documentation around the `Pool.terminate` function and it's expected behaviour, so I'm not sure if this is a bug or me mis-using things.\n\nTo shutdown my aiopg pool, I am calling `pool.terminate()`, but this is leaving 10 connections to the database open.  From looking at the [pool.terminate code](https://github.com/aio-libs/aiopg/blob/master/aiopg/pool.py#L111-L113) it appears that only _used_ connections get closed, but un-used ones will still remain open.\n\nFrom looking around it seems I could then `yield from pool.wait_closed()` to wait for the free connections to close.  This doesn't seem too intuitive to me - since the code is terminating connections that are being used, I'd expect the un-used ones to get closed too.  Is this a bug?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/80", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/80/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/80/events", "html_url": "https://github.com/aio-libs/aiopg/issues/80", "id": 111083739, "node_id": "MDU6SXNzdWUxMTEwODM3Mzk=", "number": 80, "title": "test_binary_protocol_error produces psycopg2.DatabaseError with psycopg2 2.6.1", "user": {"login": "bitdancer", "id": 476443, "node_id": "MDQ6VXNlcjQ3NjQ0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/476443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitdancer", "html_url": "https://github.com/bitdancer", "followers_url": "https://api.github.com/users/bitdancer/followers", "following_url": "https://api.github.com/users/bitdancer/following{/other_user}", "gists_url": "https://api.github.com/users/bitdancer/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitdancer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitdancer/subscriptions", "organizations_url": "https://api.github.com/users/bitdancer/orgs", "repos_url": "https://api.github.com/users/bitdancer/repos", "events_url": "https://api.github.com/users/bitdancer/events{/privacy}", "received_events_url": "https://api.github.com/users/bitdancer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-13T01:09:04Z", "updated_at": "2015-10-13T11:29:29Z", "closed_at": "2015-10-13T11:29:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Running the tests on master with psycopg2==2.6.1 and postgres 9.4.3 I get a test failure in test_binary_protocol_error.  Instead of the expected OperationalError, I'm getting a DatabaseError.  One fix would be to look for both, the other would be to check the version (assuming that's the issue).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/78", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/78/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/78/events", "html_url": "https://github.com/aio-libs/aiopg/issues/78", "id": 109831590, "node_id": "MDU6SXNzdWUxMDk4MzE1OTA=", "number": 78, "title": "SQL statements logging", "user": {"login": "avanov", "id": 601955, "node_id": "MDQ6VXNlcjYwMTk1NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/601955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avanov", "html_url": "https://github.com/avanov", "followers_url": "https://api.github.com/users/avanov/followers", "following_url": "https://api.github.com/users/avanov/following{/other_user}", "gists_url": "https://api.github.com/users/avanov/gists{/gist_id}", "starred_url": "https://api.github.com/users/avanov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avanov/subscriptions", "organizations_url": "https://api.github.com/users/avanov/orgs", "repos_url": "https://api.github.com/users/avanov/repos", "events_url": "https://api.github.com/users/avanov/events{/privacy}", "received_events_url": "https://api.github.com/users/avanov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-10-05T16:05:06Z", "updated_at": "2015-11-08T19:33:39Z", "closed_at": "2015-11-08T19:33:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\nI would like to have sql statements logging right into stdout when I run my applications in a debug mode. Normally (i.e. with a regular sqlalchemy-backed application) I setup the standard python logger with the following structure:\n\n``` yaml\nlogging:\n  version: 1\n  disable_existing_loggers: True\n  formatters:\n    generic:\n      format: \"%(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s\"\n\n  handlers:\n    console:\n      level: DEBUG\n      class: logging.StreamHandler\n      stream: ext://sys.stdout\n      formatter: generic\n\n  loggers:\n    root:\n      level: DEBUG\n      handlers: [console]\n\n    asyncio:\n      level: DEBUG\n      handlers: [console]\n\n    sqlalchemy:\n      # \"level = INFO\" logs SQL queries.\n      # \"level = DEBUG\" logs SQL queries and results.\n      # \"level = WARN\" logs neither.  (Recommended for production systems.)\n      level: DEBUG\n      handlers: [console]\n\n    sqlalchemy.engine:\n      # \"level = INFO\" logs SQL queries.\n      # \"level = DEBUG\" logs SQL queries and results.\n      # \"level = WARN\" logs neither.  (Recommended for production systems.)\n      level: INFO\n      handlers: [console]\n      propagate: False\n```\n\nBut apparently this is not enough for aiopg. Just adding the `aiopg` logger into that definition makes no difference to the final output. Therefore, the question is how to set it up properly. Is there any working example of it?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/77", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/77/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/77/events", "html_url": "https://github.com/aio-libs/aiopg/issues/77", "id": 109816027, "node_id": "MDU6SXNzdWUxMDk4MTYwMjc=", "number": 77, "title": "fetchone() return is not a RowProxy but a generator", "user": {"login": "Huastone", "id": 14979799, "node_id": "MDQ6VXNlcjE0OTc5Nzk5", "avatar_url": "https://avatars2.githubusercontent.com/u/14979799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Huastone", "html_url": "https://github.com/Huastone", "followers_url": "https://api.github.com/users/Huastone/followers", "following_url": "https://api.github.com/users/Huastone/following{/other_user}", "gists_url": "https://api.github.com/users/Huastone/gists{/gist_id}", "starred_url": "https://api.github.com/users/Huastone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Huastone/subscriptions", "organizations_url": "https://api.github.com/users/Huastone/orgs", "repos_url": "https://api.github.com/users/Huastone/repos", "events_url": "https://api.github.com/users/Huastone/events{/privacy}", "received_events_url": "https://api.github.com/users/Huastone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-10-05T15:00:24Z", "updated_at": "2015-10-06T11:23:04Z", "closed_at": "2015-10-06T11:23:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "tbl2 = sa.Table('usert2', metadata,\n\u3000\u3000sa.Column('id', INTEGER, primary_key=True),\n\u3000\u3000sa.Column('webid', UUID),\n\u3000\u3000sa.Column('totyear', SMALLINT),\n\u3000\u3000sa.Column('brewdata', SMALLINT))\n\nengine = yield from create_engine(user='postgres',database='t1',host='127.0.0.1',password='pg')\nwith (yield from engine) as conn:\nquery = sa.select([tbl2])\nres = yield from conn.execute(query)\nalarm=res.fetchone()\nprint('alarm=',alarm)\n\nOutput is :\n\u3000\u3000 <generator object fetchone at 0x7f7b27eff5e8>\n\nIt is not right according to sqlalchemy rules. See below section 'Selecting' :\n\u3000\u3000http://docs.sqlalchemy.org/en/rel_1_0/core/tutorial.html#executing\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/76", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/76/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/76/events", "html_url": "https://github.com/aio-libs/aiopg/issues/76", "id": 108536655, "node_id": "MDU6SXNzdWUxMDg1MzY2NTU=", "number": 76, "title": "Connection handling in web application example", "user": {"login": "rudyryk", "id": 4500, "node_id": "MDQ6VXNlcjQ1MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rudyryk", "html_url": "https://github.com/rudyryk", "followers_url": "https://api.github.com/users/rudyryk/followers", "following_url": "https://api.github.com/users/rudyryk/following{/other_user}", "gists_url": "https://api.github.com/users/rudyryk/gists{/gist_id}", "starred_url": "https://api.github.com/users/rudyryk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rudyryk/subscriptions", "organizations_url": "https://api.github.com/users/rudyryk/orgs", "repos_url": "https://api.github.com/users/rudyryk/repos", "events_url": "https://api.github.com/users/rudyryk/events{/privacy}", "received_events_url": "https://api.github.com/users/rudyryk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984836, "node_id": "MDU6TGFiZWw4OTk4NDgzNg==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-27T13:48:17Z", "updated_at": "2016-07-16T15:26:11Z", "closed_at": "2016-07-16T15:26:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the most generic proper way of handling database connection in real web apps? The naive way is just to create connection pool and pick/release a cursor per-query (or per-request?).\n\nBut the naive approach has some pitfalls:\n1. The connection break because of database server connection down\n2. The connection break after locking invalid query/transaction\n3. Unknown reason like #67 etc. \n\nSo what is the way to connect/re-connect which suits basic needs and could face naive approach problems?\n\nIt would be great to have some ideas and examples on that in docs.\n\nThank you!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/71", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/71/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/71/events", "html_url": "https://github.com/aio-libs/aiopg/issues/71", "id": 106971429, "node_id": "MDU6SXNzdWUxMDY5NzE0Mjk=", "number": 71, "title": "Migrate from \"yield from\" to await (TypeError: object Engine can't be used in 'await' expression)", "user": {"login": "vvv-v13", "id": 11189773, "node_id": "MDQ6VXNlcjExMTg5Nzcz", "avatar_url": "https://avatars0.githubusercontent.com/u/11189773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvv-v13", "html_url": "https://github.com/vvv-v13", "followers_url": "https://api.github.com/users/vvv-v13/followers", "following_url": "https://api.github.com/users/vvv-v13/following{/other_user}", "gists_url": "https://api.github.com/users/vvv-v13/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvv-v13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvv-v13/subscriptions", "organizations_url": "https://api.github.com/users/vvv-v13/orgs", "repos_url": "https://api.github.com/users/vvv-v13/repos", "events_url": "https://api.github.com/users/vvv-v13/events{/privacy}", "received_events_url": "https://api.github.com/users/vvv-v13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/aio-libs/aiopg/milestones/1", "html_url": "https://github.com/aio-libs/aiopg/milestone/1", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/milestones/1/labels", "id": 1484907, "node_id": "MDk6TWlsZXN0b25lMTQ4NDkwNw==", "number": 1, "title": "0.8", "description": "", "creator": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "open", "created_at": "2016-01-05T14:06:15Z", "updated_at": "2016-01-10T16:31:13Z", "due_on": null, "closed_at": null}, "comments": 18, "created_at": "2015-09-17T12:19:19Z", "updated_at": "2018-05-17T20:20:57Z", "closed_at": "2016-01-05T14:06:52Z", "author_association": "NONE", "active_lock_reason": null, "body": " Hi, i replaced in my code \"yield from\"  to \"await\", and received Traceback:\n\"TypeError: object Engine can't be used in 'await' expression\"\n\n``` python\nasync def db_psql_middleware(app, handler):\n    async def middleware(request):\n        db = app.get('db_psql')\n        if not db:\n            app['db_psql'] = db = await create_engine(app['psql_dsn'], minsize=1, maxsize=5)\n        request.app['db_psql'] = db\n        return (await handler(request))\n    return middleware\n\n\nasync def psql_select(request):\n    with (await request.app['db_psql']) as conn:\n        result = await conn.execute(models.select())\n```\n\nTraceback\n\n``` python\n[2015-09-17 14:50:29 +0300] [26045] [ERROR] Error handling request\nTraceback (most recent call last):\n  File \"/Users/vvv/src/backend-tools/python/asyncio/venv35/lib/python3.5/site-packages/aiohttp/server.py\", line 272, in start\n    yield from self.handle_request(message, payload)\n  File \"/Users/vvv/src/backend-tools/python/asyncio/venv35/lib/python3.5/site-packages/aiohttp/web.py\", line 85, in handle_request\n    resp = yield from handler(request)\n  File \"/Users/vvv/src/backend-tools/python/asyncio/app.py\", line 39, in middleware\n    return (await handler(request))\n  File \"/Users/vvv/src/backend-tools/python/asyncio/app.py\", line 46, in psql_select\n    with (await request.app['db_psql']) as conn:\nTypeError: object Engine can't be used in 'await' expression\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/70", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/70/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/70/events", "html_url": "https://github.com/aio-libs/aiopg/issues/70", "id": 106117997, "node_id": "MDU6SXNzdWUxMDYxMTc5OTc=", "number": 70, "title": "SQLA dsn", "user": {"login": "iho", "id": 4000375, "node_id": "MDQ6VXNlcjQwMDAzNzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4000375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iho", "html_url": "https://github.com/iho", "followers_url": "https://api.github.com/users/iho/followers", "following_url": "https://api.github.com/users/iho/following{/other_user}", "gists_url": "https://api.github.com/users/iho/gists{/gist_id}", "starred_url": "https://api.github.com/users/iho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iho/subscriptions", "organizations_url": "https://api.github.com/users/iho/orgs", "repos_url": "https://api.github.com/users/iho/repos", "events_url": "https://api.github.com/users/iho/events{/privacy}", "received_events_url": "https://api.github.com/users/iho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-12T01:03:11Z", "updated_at": "2015-09-12T12:16:16Z", "closed_at": "2015-09-12T12:16:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. \n\nHow about add it ? \n\n```\ndsn = \"postgresql+psycopg2://aiopg:passwd@localhost:5432/aiopg\"\n    def parse_uri(uri):\n        from urllib.parse import urlparse\n        uri = urlparse(uri)\n        return dict(\n            user=uri.username,\n            password=uri.password,\n            database=uri.path[1:],\n            port=str(uri.port),\n            host=uri.hostname\n        )\n engine = yield from create_engine(**parse_uri(dsn))\n```\n\nIf we use the SQLAlchemy we need the same uri to acceses db.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/68", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/68/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/68/events", "html_url": "https://github.com/aio-libs/aiopg/issues/68", "id": 101602344, "node_id": "MDU6SXNzdWUxMDE2MDIzNDQ=", "number": 68, "title": "SQLAlchemy example doesn't work to me", "user": {"login": "hyzhak", "id": 184706, "node_id": "MDQ6VXNlcjE4NDcwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/184706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyzhak", "html_url": "https://github.com/hyzhak", "followers_url": "https://api.github.com/users/hyzhak/followers", "following_url": "https://api.github.com/users/hyzhak/following{/other_user}", "gists_url": "https://api.github.com/users/hyzhak/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyzhak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyzhak/subscriptions", "organizations_url": "https://api.github.com/users/hyzhak/orgs", "repos_url": "https://api.github.com/users/hyzhak/repos", "events_url": "https://api.github.com/users/hyzhak/events{/privacy}", "received_events_url": "https://api.github.com/users/hyzhak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-08-18T08:41:52Z", "updated_at": "2015-08-19T17:02:41Z", "closed_at": "2015-08-19T17:02:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This one example https://github.com/aio-libs/aiopg#example-of-sqlalchemy-optional-integration doesn't work. And gives error: \n\n```\npsycopg2.ProgrammingError: relation \"tbl\" does not exist\nLINE 1: INSERT INTO tbl (val) VALUES ('abc') RETURNING tbl.id\n```\n\nBecause table `tbl` isn't created by default. And as I understand we should add something like: `yield from conn.execute(CreateTable(tbl))` before `yield from conn.execute(tbl.insert().values(val='abc'))`. Right?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/67", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/67/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/67/events", "html_url": "https://github.com/aio-libs/aiopg/issues/67", "id": 98310785, "node_id": "MDU6SXNzdWU5ODMxMDc4NQ==", "number": 67, "title": "Queries start failing after some time", "user": {"login": "nerandell", "id": 820105, "node_id": "MDQ6VXNlcjgyMDEwNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/820105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nerandell", "html_url": "https://github.com/nerandell", "followers_url": "https://api.github.com/users/nerandell/followers", "following_url": "https://api.github.com/users/nerandell/following{/other_user}", "gists_url": "https://api.github.com/users/nerandell/gists{/gist_id}", "starred_url": "https://api.github.com/users/nerandell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nerandell/subscriptions", "organizations_url": "https://api.github.com/users/nerandell/orgs", "repos_url": "https://api.github.com/users/nerandell/repos", "events_url": "https://api.github.com/users/nerandell/events{/privacy}", "received_events_url": "https://api.github.com/users/nerandell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2015-07-31T03:47:06Z", "updated_at": "2016-07-16T15:25:10Z", "closed_at": "2016-07-16T15:25:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am facing an issue where my db queries start failing after sometime. Here is some code that I use to create a pool\n\n``` python\nclass PostgresStore:\n    _pool = None\n    _connection_params = {}\n\n    @classmethod\n    def connect(cls, database:str, user:str, password:str, host:str, port:int):\n        \"\"\"\n        Sets connection parameters\n        \"\"\"\n        cls._connection_params['database'] = database\n        cls._connection_params['user'] = user\n        cls._connection_params['password'] = password\n        cls._connection_params['host'] = host\n        cls._connection_params['port'] = port\n\n    @classmethod\n    def use_pool(cls, pool:Pool):\n        \"\"\"\n        Sets an existing connection pool instead of using connect() to make one\n        \"\"\"\n        cls._pool = pool\n\n    @classmethod\n    @coroutine\n    def get_pool(cls) -> Pool:\n        \"\"\"\n        Yields:\n            existing db connection pool\n        \"\"\"\n        if len(cls._connection_params) < 5:\n            raise ConnectionError('Please call SQLStore.connect before calling this method')\n        if not cls._pool:\n            cls._pool = yield from create_pool(**cls._connection_params)\n        return cls._pool\n```\n\nI use aiohttp to create a web server and once the server is up and running for a few hours, db quesries start failing. All other apis work perfectly fine. Here are the logs attached:\n\n<pre>\n2015-07-14 16:19:18,531 ERROR [base_events:698] Fatal read error on socket transport\nprotocol: <RequestHandler none:none connected>\ntransport: <asyncio.selector_events._SelectorSocketTransport object at 0x7f0cb01b8b38>\nTraceback (most recent call last):\n  File \"/usr/lib/python3.4/asyncio/selector_events.py\", line 459, in _read_ready\n    data = self._sock.recv(self.max_size)\nTimeoutError: [Errno 110] Connection timed out\n2015-07-14 17:26:42,070 ERROR [base_events:698] Fatal error on aiopg connection: bad state in _ready callback\nconnection: <aiopg.connection.Connection object at 0x7f0cb06756d8>\n2015-07-14 17:26:58,017 ERROR [base_events:698] Fatal error on aiopg connection: bad state in _ready callback\nconnection: <aiopg.connection.Connection object at 0x7f0cb0419128>\n2015-07-14 17:27:02,606 ERROR [base_events:698] Fatal error on aiopg connection: bad state in _ready callback\nconnection: <aiopg.connection.Connection object at 0x7f0cb0413be0>\n2015-07-14 17:27:03,226 ERROR [base_events:698] Fatal error on aiopg connection: bad state in _ready callback\nconnection: <aiopg.connection.Connection object at 0x7f0cb0413780>\n2015-07-14 17:27:14,691 ERROR [base_events:698] Fatal error on aiopg connection: bad state in _ready callback\nconnection: <aiopg.connection.Connection object at 0x7f0cb0413e10>\n2015-07-14 18:47:51,427 ERROR [base_events:698] Fatal read error on socket transport\nprotocol: <RequestHandler none:none connected>\ntransport: <asyncio.selector_events._SelectorSocketTransport object at 0x7f0cb00c5f98>\nTraceback (most recent call last):\n  File \"/usr/lib/python3.4/asyncio/selector_events.py\", line 459, in _read_ready\n    data = self._sock.recv(self.max_size)\nTimeoutError: [Errno 110] Connection timed out\n2015-07-14 18:50:02,499 ERROR [base_events:698] Fatal read error on socket transport\nprotocol: <RequestHandler none:none connected>\ntransport: <asyncio.selector_events._SelectorSocketTransport object at 0x7f0cb01f0320>\nTraceback (most recent call last):\n  File \"/usr/lib/python3.4/asyncio/selector_events.py\", line 459, in _read_ready\n    data = self._sock.recv(self.max_size)\nTimeoutError: [Errno 110] Connection timed out\n</pre>\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/66", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/66/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/66/events", "html_url": "https://github.com/aio-libs/aiopg/issues/66", "id": 95139241, "node_id": "MDU6SXNzdWU5NTEzOTI0MQ==", "number": 66, "title": "Problem with transaction", "user": {"login": "chemiron", "id": 7299611, "node_id": "MDQ6VXNlcjcyOTk2MTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7299611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chemiron", "html_url": "https://github.com/chemiron", "followers_url": "https://api.github.com/users/chemiron/followers", "following_url": "https://api.github.com/users/chemiron/following{/other_user}", "gists_url": "https://api.github.com/users/chemiron/gists{/gist_id}", "starred_url": "https://api.github.com/users/chemiron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chemiron/subscriptions", "organizations_url": "https://api.github.com/users/chemiron/orgs", "repos_url": "https://api.github.com/users/chemiron/repos", "events_url": "https://api.github.com/users/chemiron/events{/privacy}", "received_events_url": "https://api.github.com/users/chemiron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-15T08:58:15Z", "updated_at": "2015-08-28T21:58:17Z", "closed_at": "2015-08-28T21:58:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nI've got a problem with aiopg when using transaction. I've used a simple code for transaction:\n\n``` python\ntrans = yield from conn.begin()\ntry:\n      yield from fn(self, conn, *args, **kwargs)\nexcept:\n      yield from trans.rollback()\n      raise\nelse:\n      yield from trans.commit()\n```\n\nBut if there timeout is occurred I'll get the next traceback:\n\nTraceback (most recent call last):\n...\n  File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/sa/connection.py\", line 100, in execute\n    yield from cursor.execute(str(compiled), post_processed_params[0])\n  File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/cursor.py\", line 112, in execute\n    yield from self._conn._poll(waiter, timeout)\n  File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/connection.py\", line 162, in _poll\n    yield from asyncio.wait_for(self._waiter, timeout, loop=self._loop)\n  File \"/usr/lib/python3.4/asyncio/tasks.py\", line 381, in wait_for\n    raise futures.TimeoutError()\nconcurrent.futures._base.TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/sa/connection.py\", line 185, in _rollback_impl\n    yield from cur.execute('ROLLBACK')\n  File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/cursor.py\", line 107, in execute\n    self._impl.execute(operation, parameters)\npsycopg2.ProgrammingError: execute cannot be used while an asynchronous query is underway\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n...\n  File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/sa/transaction.py\", line 67, in rollback\n    yield from self._do_rollback()\n  File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/sa/transaction.py\", line 95, in _do_rollback\n    yield from self._connection._rollback_impl()\n  File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/sa/connection.py\", line 187, in _rollback_impl\n    cur.close()\n  File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/cursor.py\", line 49, in close\n    self._impl.close()\npsycopg2.ProgrammingError: close cannot be used while an asynchronous query is underway\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n...\n   File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/sa/engine.py\", line 190, in **exit**\n    self._engine.release(self._conn)\n  File \"/home/alex/work/python/.envs/stload3/lib/python3.4/site-packages/aiopg/sa/engine.py\", line 133, in release\n    raise InvalidRequestError(\"Cannot release a connection with \"\naiopg.sa.exc.InvalidRequestError: Cannot release a connection with not finished transaction\n\nAs I think if we get TimoutError while the query executing, the query should be cancelled.\nThanks \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/65", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/65/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/65/events", "html_url": "https://github.com/aio-libs/aiopg/issues/65", "id": 94265864, "node_id": "MDU6SXNzdWU5NDI2NTg2NA==", "number": 65, "title": "Closing connection object throws exception", "user": {"login": "sumerc", "id": 136531, "node_id": "MDQ6VXNlcjEzNjUzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/136531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sumerc", "html_url": "https://github.com/sumerc", "followers_url": "https://api.github.com/users/sumerc/followers", "following_url": "https://api.github.com/users/sumerc/following{/other_user}", "gists_url": "https://api.github.com/users/sumerc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sumerc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sumerc/subscriptions", "organizations_url": "https://api.github.com/users/sumerc/orgs", "repos_url": "https://api.github.com/users/sumerc/repos", "events_url": "https://api.github.com/users/sumerc/events{/privacy}", "received_events_url": "https://api.github.com/users/sumerc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2015-07-10T09:46:19Z", "updated_at": "2016-07-16T16:22:44Z", "closed_at": "2016-07-16T16:22:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI am using aiopg with a Pool object that is shared among coroutines. Every once in a while, randomly I see following error:\n\npsycopg2.ProgrammingError: close cannot be used while an asynchronous query is u\nnderway\n\nI can reproduce the issue with following:\n\n<pre><code>\npool = yield from aiopg.create_pool(dsn)\nwith (yield from pool.cursor(timeout=1.0)) as cur:\n    yield from cur.execute(\"SELECT pg_sleep(2)\")\n</code></pre>\n\n\nIt seems valid to raise TimeoutError rather than ProgrammingError, I believe. What do you think?\n\nThanks,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/62", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/62/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/62/events", "html_url": "https://github.com/aio-libs/aiopg/issues/62", "id": 91314456, "node_id": "MDU6SXNzdWU5MTMxNDQ1Ng==", "number": 62, "title": "Extract aiopg.sa as library", "user": {"login": "eirnym", "id": 485399, "node_id": "MDQ6VXNlcjQ4NTM5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/485399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eirnym", "html_url": "https://github.com/eirnym", "followers_url": "https://api.github.com/users/eirnym/followers", "following_url": "https://api.github.com/users/eirnym/following{/other_user}", "gists_url": "https://api.github.com/users/eirnym/gists{/gist_id}", "starred_url": "https://api.github.com/users/eirnym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eirnym/subscriptions", "organizations_url": "https://api.github.com/users/eirnym/orgs", "repos_url": "https://api.github.com/users/eirnym/repos", "events_url": "https://api.github.com/users/eirnym/events{/privacy}", "received_events_url": "https://api.github.com/users/eirnym/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984836, "node_id": "MDU6TGFiZWw4OTk4NDgzNg==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-06-26T17:33:14Z", "updated_at": "2015-11-08T03:21:59Z", "closed_at": "2015-11-08T03:21:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "this package is almost same in `aiopg` and `aiomysql`. So I think we should extract this package as separate library, shouldn't we?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/60", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/60/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/60/events", "html_url": "https://github.com/aio-libs/aiopg/issues/60", "id": 81702184, "node_id": "MDU6SXNzdWU4MTcwMjE4NA==", "number": 60, "title": "Server side cursor support", "user": {"login": "kashifrazzaqui", "id": 83298, "node_id": "MDQ6VXNlcjgzMjk4", "avatar_url": "https://avatars1.githubusercontent.com/u/83298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kashifrazzaqui", "html_url": "https://github.com/kashifrazzaqui", "followers_url": "https://api.github.com/users/kashifrazzaqui/followers", "following_url": "https://api.github.com/users/kashifrazzaqui/following{/other_user}", "gists_url": "https://api.github.com/users/kashifrazzaqui/gists{/gist_id}", "starred_url": "https://api.github.com/users/kashifrazzaqui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kashifrazzaqui/subscriptions", "organizations_url": "https://api.github.com/users/kashifrazzaqui/orgs", "repos_url": "https://api.github.com/users/kashifrazzaqui/repos", "events_url": "https://api.github.com/users/kashifrazzaqui/events{/privacy}", "received_events_url": "https://api.github.com/users/kashifrazzaqui/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-05-28T01:26:32Z", "updated_at": "2017-04-07T17:59:18Z", "closed_at": "2015-05-28T03:30:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I believe aiopg doesn't allow server side cursor support, are there any plans to change this?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/58", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/58/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/58/events", "html_url": "https://github.com/aio-libs/aiopg/issues/58", "id": 74730512, "node_id": "MDU6SXNzdWU3NDczMDUxMg==", "number": 58, "title": "PostgreSQL notification support", "user": {"login": "spinus", "id": 950799, "node_id": "MDQ6VXNlcjk1MDc5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/950799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spinus", "html_url": "https://github.com/spinus", "followers_url": "https://api.github.com/users/spinus/followers", "following_url": "https://api.github.com/users/spinus/following{/other_user}", "gists_url": "https://api.github.com/users/spinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/spinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spinus/subscriptions", "organizations_url": "https://api.github.com/users/spinus/orgs", "repos_url": "https://api.github.com/users/spinus/repos", "events_url": "https://api.github.com/users/spinus/events{/privacy}", "received_events_url": "https://api.github.com/users/spinus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2015-05-09T18:28:58Z", "updated_at": "2015-07-02T13:37:01Z", "closed_at": "2015-07-02T13:18:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\ndo you plan to add support for http://initd.org/psycopg/docs/advanced.html#asynchronous-notifications by any chance?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/57", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/57/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/57/events", "html_url": "https://github.com/aio-libs/aiopg/issues/57", "id": 72504742, "node_id": "MDU6SXNzdWU3MjUwNDc0Mg==", "number": 57, "title": "Add advanced example of making sa select", "user": {"login": "AlexKovalevych", "id": 577231, "node_id": "MDQ6VXNlcjU3NzIzMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/577231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexKovalevych", "html_url": "https://github.com/AlexKovalevych", "followers_url": "https://api.github.com/users/AlexKovalevych/followers", "following_url": "https://api.github.com/users/AlexKovalevych/following{/other_user}", "gists_url": "https://api.github.com/users/AlexKovalevych/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexKovalevych/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexKovalevych/subscriptions", "organizations_url": "https://api.github.com/users/AlexKovalevych/orgs", "repos_url": "https://api.github.com/users/AlexKovalevych/repos", "events_url": "https://api.github.com/users/AlexKovalevych/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexKovalevych/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-01T19:33:09Z", "updated_at": "2016-07-16T16:34:30Z", "closed_at": "2016-07-16T16:34:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was not able to iterate over a select query result, running from the view. Here is the flow:\n\ni run a repository function from the view:\n\n``` python\n# views.py\nusers = yield from find_all()\n```\n\n`find_all()` is the function in repository module:\n\n``` python\n# app/models/user.py\n@asyncio.coroutine\ndef find_all():\n    yield from run(User.table.select())\n```\n\nfinally here is how `run` looks:\n\n``` python\n# app/models/__init__.py\n@asyncio.coroutine\ndef run(query):\n    engine = yield from create_engine(user='test',\n                                      database='test',\n                                      host='127.0.0.1',\n                                      password='test')\n    with (yield from engine) as conn:\n        yield from conn.execute(query)\n```\n\nSo the problem is that `users` is a `NoneObject`, but if i iterate the result in the same file where the query is executed (`app/models/__init__.py`) then it works fine:\n\n``` python\n        res = yield from conn.execute(query)\n        for row in res:\n            print(row)\n```\n\nCould you please add more examples of how to get a query result in such case?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/49", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/49/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/49/events", "html_url": "https://github.com/aio-libs/aiopg/issues/49", "id": 60147115, "node_id": "MDU6SXNzdWU2MDE0NzExNQ==", "number": 49, "title": "Default value doesn't work", "user": {"login": "AnderUstarroz", "id": 8544110, "node_id": "MDQ6VXNlcjg1NDQxMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8544110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnderUstarroz", "html_url": "https://github.com/AnderUstarroz", "followers_url": "https://api.github.com/users/AnderUstarroz/followers", "following_url": "https://api.github.com/users/AnderUstarroz/following{/other_user}", "gists_url": "https://api.github.com/users/AnderUstarroz/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnderUstarroz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnderUstarroz/subscriptions", "organizations_url": "https://api.github.com/users/AnderUstarroz/orgs", "repos_url": "https://api.github.com/users/AnderUstarroz/repos", "events_url": "https://api.github.com/users/AnderUstarroz/events{/privacy}", "received_events_url": "https://api.github.com/users/AnderUstarroz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984831, "node_id": "MDU6TGFiZWw4OTk4NDgzMQ==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2015-03-06T19:30:01Z", "updated_at": "2018-04-10T19:09:18Z", "closed_at": "2016-11-25T22:33:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've found an unexpected behavior in SQLAlchemy. I'm using the following versions:\n- **SQLAlchemy** (0.9.8)\n- **PostgreSQL** (9.3.5)\n- **psycopg2** (2.5.4)\n- **aiopg** (0.5.1)\n\nThis is the table definition for the example:\n\n```\nimport asyncio\nfrom aiopg.sa import create_engine\nfrom sqlalchemy import (\n  MetaData,\n  Column,\n  Integer,\n  Table,\n  String,\n)\nmetadata = MetaData()\n\nusers = Table('users', metadata,\n  Column('id_user', Integer, primary_key=True, nullable=False),\n  Column('name', String(20), unique=True),\n  Column('age', Integer, nullable=False, default=0),\n)\n```\n\nNow if I try to execute a simple insert to the table just populating the **_id_user**_ and **_name**_, the column **_age**_ should be auto-generated with the default value **0** right? Lets see...\n\n```\n@asyncio.coroutine\ndef go():\n  engine = yield from create_engine('postgresql://USER@localhost/DB')\n  data = {'id_user':1, 'name':'Jimmy' }\n  stmt = users.insert(values=data, inline=False)\n  with (yield from engine) as conn:\n    result = yield from conn.execute(stmt)\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(go())\n```\n\nThis is the resulting statement with the corresponding error:\n\n```\nINSERT INTO users (id_user, name, age) VALUES (1, 'Jimmy', null);\n\npsycopg2.IntegrityError: null value in column \"age\" violates not-null constraint\n```\n\nI didn't provide the **age** column, so where is that **age = null** value coming from? I was expecting something like this:\n\n```\nINSERT INTO users (id_user, name) VALUES (1, 'Jimmy');\n```\n\nOr if the **_default**_ flag actually works should be:\n\n```\nINSERT INTO users (id_user, name, Age) VALUES (1, 'Jimmy', 0);\n```\n\nCould you put some light on this?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/48", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/48/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/48/events", "html_url": "https://github.com/aio-libs/aiopg/issues/48", "id": 59287670, "node_id": "MDU6SXNzdWU1OTI4NzY3MA==", "number": 48, "title": "Many cursor method examples are not correct?", "user": {"login": "bitdancer", "id": 476443, "node_id": "MDQ6VXNlcjQ3NjQ0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/476443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitdancer", "html_url": "https://github.com/bitdancer", "followers_url": "https://api.github.com/users/bitdancer/followers", "following_url": "https://api.github.com/users/bitdancer/following{/other_user}", "gists_url": "https://api.github.com/users/bitdancer/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitdancer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitdancer/subscriptions", "organizations_url": "https://api.github.com/users/bitdancer/orgs", "repos_url": "https://api.github.com/users/bitdancer/repos", "events_url": "https://api.github.com/users/bitdancer/events{/privacy}", "received_events_url": "https://api.github.com/users/bitdancer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-02-27T20:12:15Z", "updated_at": "2016-08-01T09:39:22Z", "closed_at": "2016-08-01T09:39:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I realize (now) that the docs say all the methods are coroutines (except close).  However, the examples for fetchone, fetchmany, fetchiter, etc do not use 'yield from' in the examples and I wasted a bit of time wondering why I was getting an empty list from my select statement before I noticed the (correct) example at the top of the section.  Also, the example of using the cursor as an iterator does not work for me (prints no data).  I'm using 0.6.1.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/46", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/46/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/46/events", "html_url": "https://github.com/aio-libs/aiopg/issues/46", "id": 56317077, "node_id": "MDU6SXNzdWU1NjMxNzA3Nw==", "number": 46, "title": "Unable to do multi-insert according to docs", "user": {"login": "housleyjk", "id": 5325564, "node_id": "MDQ6VXNlcjUzMjU1NjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5325564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/housleyjk", "html_url": "https://github.com/housleyjk", "followers_url": "https://api.github.com/users/housleyjk/followers", "following_url": "https://api.github.com/users/housleyjk/following{/other_user}", "gists_url": "https://api.github.com/users/housleyjk/gists{/gist_id}", "starred_url": "https://api.github.com/users/housleyjk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/housleyjk/subscriptions", "organizations_url": "https://api.github.com/users/housleyjk/orgs", "repos_url": "https://api.github.com/users/housleyjk/repos", "events_url": "https://api.github.com/users/housleyjk/events{/privacy}", "received_events_url": "https://api.github.com/users/housleyjk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-02-03T00:44:13Z", "updated_at": "2015-02-03T21:06:01Z", "closed_at": "2015-02-03T20:02:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code should work according to http://aiopg.readthedocs.org/en/stable/sa.html#aiopg.sa.SAConnection.execute:\n\n``` python\nimport asyncio\nfrom aiopg.sa import create_engine\nimport sqlalchemy as sa\n\n\nmetadata = sa.MetaData()\n\ntable = sa.Table(\n    'table',\n    metadata,\n    sa.Column('id', sa.Integer, primary_key=True),\n    sa.Column('value', sa.String(255)),\n)\n\n\n@asyncio.coroutine\ndef go():\n    engine = yield from create_engine('postgresql://localhost/aiopg_issue')\n\n    with (yield from engine) as conn:\n        yield from conn.execute(\n            table.insert(),\n            {\"id\": 1, \"value\": \"v1\"},\n            {\"id\": 2, \"value\": \"v2\"},\n        )\n\n        res = yield from conn.execute(table.select())\n        for row in res:\n            print(row.id, row.val)\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(go())\n```\n\nHowever, I get a `aiopg.sa.exc.ArgumentError: Don't mix sqlalchemy clause and execution with parameters` error because of the dictionaries passed to execute. Are the docs out of date?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/43", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/43/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/43/events", "html_url": "https://github.com/aio-libs/aiopg/issues/43", "id": 55301264, "node_id": "MDU6SXNzdWU1NTMwMTI2NA==", "number": 43, "title": "Error with sqlalchemy", "user": {"login": "rightaway", "id": 3680078, "node_id": "MDQ6VXNlcjM2ODAwNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3680078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rightaway", "html_url": "https://github.com/rightaway", "followers_url": "https://api.github.com/users/rightaway/followers", "following_url": "https://api.github.com/users/rightaway/following{/other_user}", "gists_url": "https://api.github.com/users/rightaway/gists{/gist_id}", "starred_url": "https://api.github.com/users/rightaway/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rightaway/subscriptions", "organizations_url": "https://api.github.com/users/rightaway/orgs", "repos_url": "https://api.github.com/users/rightaway/repos", "events_url": "https://api.github.com/users/rightaway/events{/privacy}", "received_events_url": "https://api.github.com/users/rightaway/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984836, "node_id": "MDU6TGFiZWw4OTk4NDgzNg==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-23T16:26:27Z", "updated_at": "2015-03-06T20:04:27Z", "closed_at": "2015-03-06T20:04:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting an error when using sqlalchemy and nothing is getting inserted.\n\n```\nFatal error on aiopg connection: bad state in _ready callback\nconnection: <aiopg.connection.Connection object at 0x7f0c3ab44710>\n```\n\nNot sure what's causing it, maybe this additional information will help. Is it possible to use a sqlalchemy model defined using declarative to get the table object used by aiopg?\n\n```\nfrom aiopg.sa import create_engine\nengine = create_engine(database='db')\nBase.metadata.bind = engine\ntable = Base.metadata.tables['table']\n```\n\nAnd is it possible to only provide the 'database' argument like above if in the non-aiopg version I'm defining it as follows, with just a db name because it's using local authentication.\n\n```\nengine = engine_from_config({'sqlalchemy.url': 'postgresql+psycopg2:///db'})\n```\n\nI'm running the insert statements like this (not sure if I need the commented parts).\n\n```\n    with (yield from engine) as conn:\n        # tr = yield from conn.begin()\n        yield from conn.execute(table.insert(), *multivalues)\n        # yield from tr.commit()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/40", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/40/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/40/events", "html_url": "https://github.com/aio-libs/aiopg/issues/40", "id": 52728609, "node_id": "MDU6SXNzdWU1MjcyODYwOQ==", "number": 40, "title": "Asyncio + sqlalchemy  ORM", "user": {"login": "iho", "id": 4000375, "node_id": "MDQ6VXNlcjQwMDAzNzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4000375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iho", "html_url": "https://github.com/iho", "followers_url": "https://api.github.com/users/iho/followers", "following_url": "https://api.github.com/users/iho/following{/other_user}", "gists_url": "https://api.github.com/users/iho/gists{/gist_id}", "starred_url": "https://api.github.com/users/iho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iho/subscriptions", "organizations_url": "https://api.github.com/users/iho/orgs", "repos_url": "https://api.github.com/users/iho/repos", "events_url": "https://api.github.com/users/iho/events{/privacy}", "received_events_url": "https://api.github.com/users/iho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-12-23T10:13:21Z", "updated_at": "2015-01-11T10:18:33Z", "closed_at": "2015-01-11T10:18:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "\u041f\u0440\u0438\u0432\u0456\u0442. \n\n\u042f\u043a \u043f\u0440\u0430\u0446\u044e\u0432\u0430\u0442\u0438 \u0437 \u043e\u0431'\u0454\u043a\u0442\u0430\u043c\u0438 \u0430\u043b\u0445\u0456\u043c\u0456\u0457? \n\u041d\u0443 \u0442\u043e\u0431\u0442\u043e \u0437\u0430\u0440\u0430\u0437 \u0454 \u043c\u043e\u0436\u043b\u0438\u0432\u0456\u0441\u0442\u044c \u0432\u0438\u043a\u043e\u043d\u0443\u0432\u0430\u0442\u0438 sql \u0437\u0430\u043f\u0438\u0442\u0438  \u0447\u0435\u0440\u0435\u0437 conn.execute() \u0456 \u043e\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u0442\u0438 \u0437\u0432\u0456\u0434\u0442\u0438 \u0441\u043a\u0430\u043b\u044f\u0440\u0438.  \n\u0410 \u043c\u043e\u0436\u043d\u0430 \u043e\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u0442\u0438 \u043e\u0431\u0434\u0436\u0435\u043a\u0442\u0438? \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/38", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/38/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/38/events", "html_url": "https://github.com/aio-libs/aiopg/issues/38", "id": 46204901, "node_id": "MDU6SXNzdWU0NjIwNDkwMQ==", "number": 38, "title": "Create a django database backend", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-19T13:10:00Z", "updated_at": "2015-01-11T10:19:41Z", "closed_at": "2015-01-11T10:19:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently there's no database backend using aiopg for Django.\nTwo backends should be implemented one that provides the same behavior as the original psycopg2 adapter and one that also provides connection pooling. The first backend should be a drop-in replacement.\nHow do we advance this issue further?\nI assume that yield from should be added [here](https://github.com/django/django/blob/master/django/db/backends/postgresql_psycopg2/base.py#L137) and [here](https://github.com/django/django/blob/master/django/db/backends/postgresql_psycopg2/base.py#L163) but there are probably other places where we should be async.\nCare to provide some feedback? I'll create a pull request once I will have further instructions on how to proceed.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/35", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/35/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/35/events", "html_url": "https://github.com/aio-libs/aiopg/issues/35", "id": 44417787, "node_id": "MDU6SXNzdWU0NDQxNzc4Nw==", "number": 35, "title": "Add method for closing sa engine", "user": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-09-30T09:46:16Z", "updated_at": "2014-10-13T03:21:29Z", "closed_at": "2014-10-13T03:21:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/34", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/34/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/34/events", "html_url": "https://github.com/aio-libs/aiopg/issues/34", "id": 44260095, "node_id": "MDU6SXNzdWU0NDI2MDA5NQ==", "number": 34, "title": "cursor() interfaces are different for pool and single connection", "user": {"login": "rudyryk", "id": 4500, "node_id": "MDQ6VXNlcjQ1MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rudyryk", "html_url": "https://github.com/rudyryk", "followers_url": "https://api.github.com/users/rudyryk/followers", "following_url": "https://api.github.com/users/rudyryk/following{/other_user}", "gists_url": "https://api.github.com/users/rudyryk/gists{/gist_id}", "starred_url": "https://api.github.com/users/rudyryk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rudyryk/subscriptions", "organizations_url": "https://api.github.com/users/rudyryk/orgs", "repos_url": "https://api.github.com/users/rudyryk/repos", "events_url": "https://api.github.com/users/rudyryk/events{/privacy}", "received_events_url": "https://api.github.com/users/rudyryk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-09-29T06:03:55Z", "updated_at": "2014-09-29T11:09:24Z", "closed_at": "2014-09-29T08:53:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm playing with development version and noticed that Pool and Connection cursor() methods have different result types, that makes single connection and pool interfaces non interchangeable when making queries.\n\nIs it a bug or feature?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/32", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/32/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/32/events", "html_url": "https://github.com/aio-libs/aiopg/issues/32", "id": 44103605, "node_id": "MDU6SXNzdWU0NDEwMzYwNQ==", "number": 32, "title": "Issue with postgres JSON field deserialization.", "user": {"login": "oiwn", "id": 398035, "node_id": "MDQ6VXNlcjM5ODAzNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/398035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oiwn", "html_url": "https://github.com/oiwn", "followers_url": "https://api.github.com/users/oiwn/followers", "following_url": "https://api.github.com/users/oiwn/following{/other_user}", "gists_url": "https://api.github.com/users/oiwn/gists{/gist_id}", "starred_url": "https://api.github.com/users/oiwn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oiwn/subscriptions", "organizations_url": "https://api.github.com/users/oiwn/orgs", "repos_url": "https://api.github.com/users/oiwn/repos", "events_url": "https://api.github.com/users/oiwn/events{/privacy}", "received_events_url": "https://api.github.com/users/oiwn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984831, "node_id": "MDU6TGFiZWw4OTk4NDgzMQ==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-09-26T20:35:03Z", "updated_at": "2014-10-01T16:09:14Z", "closed_at": "2014-10-01T16:09:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there, we started to use your modern framework aioREST in our projects with aiopg driver on top of SQLAlchemy and i got some problems with JSON field.\n\n`https://github.com/aio-libs/aiopg/blob/master/aiopg/sa/result.py#L49`\n\nWe have code like this:\n\n``` python\n    @classmethod\n    @coroutine\n    def get_by_id(cls, id):\n        '''Return user or None'''\n        with (yield from db.engine) as conn:\n            cursor = yield from conn.execute(\n                users.select().where(users.c.id == id).limit(1))\n            user = yield from cursor.first()\n        return cls(user) if user else None\n```\n\nas far as i understand psycopg2 already deserialize JSON into native datatype, i started to look using `pdb` and that's what i got:\n\n``` python\n> /projecti/auth/models.py(81)__init__()\n-> print(sq_row['contacts'])\n(Pdb) s\n--Call--\n> /project/var/env/lib/python3.4/site-packages/aiopg/sa/result.py(27)__getitem__()\n-> def __getitem__(self, key):\n(Pdb) s\n> /project/var/env/lib/python3.4/site-packages/aiopg/sa/result.py(28)__getitem__()\n-> try:\n(Pdb) s\n> /project/var/env/lib/python3.4/site-packages/aiopg/sa/result.py(29)__getitem__()\n-> processor, obj, index = self._keymap[key]\n(Pdb) s\n> /project/var/env/lib/python3.4/site-packages/aiopg/sa/result.py(45)__getitem__()\n-> if index is None:\n(Pdb) print(processor)\n<function JSON.result_processor.<locals>.process at 0x10ecd4488>\n(Pdb) print(processor.__name__)\nprocess\n(Pdb) s               \n> /project/var/env/lib/python3.4/site-packages/aiopg/sa/result.py(49)__getitem__()\n-> if processor is not None:\n(Pdb) s\n> /project/var/env/lib/python3.4/site-packages/aiopg/sa/result.py(50)__getitem__()\n-> return processor(self._row[index])\n(Pdb) print(self._row[index])\n[{'type': 'phone', 'value': ''}]\n(Pdb) s\n--Call--\n> /project/var/env/lib/python3.4/site-packages/sqlalchemy/dialects/postgresql/json.py(202)process()\n-> def process(value):\n(Pdb) s\n> /project/var/env/lib/python3.4/site-packages/sqlalchemy/dialects/postgresql/json.py(203)process()\n-> return json_deserializer(value)\n```\n\nbut value already is in native python data structure\n\n``` text\n(Pdb) print(type(value))\n<class 'list'>\n```\n\nso finally:\n\n``` python\nTypeError: the JSON object must be str, not 'list'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/30", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/30/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/30/events", "html_url": "https://github.com/aio-libs/aiopg/issues/30", "id": 40735658, "node_id": "MDU6SXNzdWU0MDczNTY1OA==", "number": 30, "title": "Cursor documentation: coros and __iter__", "user": {"login": "Javex", "id": 641439, "node_id": "MDQ6VXNlcjY0MTQzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/641439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Javex", "html_url": "https://github.com/Javex", "followers_url": "https://api.github.com/users/Javex/followers", "following_url": "https://api.github.com/users/Javex/following{/other_user}", "gists_url": "https://api.github.com/users/Javex/gists{/gist_id}", "starred_url": "https://api.github.com/users/Javex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Javex/subscriptions", "organizations_url": "https://api.github.com/users/Javex/orgs", "repos_url": "https://api.github.com/users/Javex/repos", "events_url": "https://api.github.com/users/Javex/events{/privacy}", "received_events_url": "https://api.github.com/users/Javex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-08-20T19:29:53Z", "updated_at": "2014-10-02T11:34:16Z", "closed_at": "2014-10-02T11:34:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the [Cursor documentation](https://aiopg.readthedocs.org/en/0.3/core.html#aiopg-core-cursor) it says that all methods are coroutines. I get that you don't want to document that on each method explicitly, but there were two issues for me while using it:\n1. The `Cursor.close` method is not a coroutine. It probably should be mentioned in the docs that you don't need to wait for it\n2. There is no `__iter__` for async cursors. Afaik you can't have them because there's no way to implement correctly (is this correct?). The docs say that \n   \n   > Cursor objects are iterable [...]\n   \n   This isn't true here so it should probably be adjusted.\n   My proposal as a fix would be to introduce something like `fetchiter` that yields each row separately (if this is possible). Otherwise the only way I found would be to use `fetchall` or (if you have many rows) to handle this yourself using `fetchmany`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/29", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/29/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/29/events", "html_url": "https://github.com/aio-libs/aiopg/issues/29", "id": 39229771, "node_id": "MDU6SXNzdWUzOTIyOTc3MQ==", "number": 29, "title": "Links for transactions docs", "user": {"login": "lud4ik", "id": 905024, "node_id": "MDQ6VXNlcjkwNTAyNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/905024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lud4ik", "html_url": "https://github.com/lud4ik", "followers_url": "https://api.github.com/users/lud4ik/followers", "following_url": "https://api.github.com/users/lud4ik/following{/other_user}", "gists_url": "https://api.github.com/users/lud4ik/gists{/gist_id}", "starred_url": "https://api.github.com/users/lud4ik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lud4ik/subscriptions", "organizations_url": "https://api.github.com/users/lud4ik/orgs", "repos_url": "https://api.github.com/users/lud4ik/repos", "events_url": "https://api.github.com/users/lud4ik/events{/privacy}", "received_events_url": "https://api.github.com/users/lud4ik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-07-31T19:38:50Z", "updated_at": "2014-08-01T09:35:24Z", "closed_at": "2014-08-01T09:35:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you, please, show docs links, where the difference between two-phase and nested transactions is explained?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/26", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/26/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/26/events", "html_url": "https://github.com/aio-libs/aiopg/issues/26", "id": 37790874, "node_id": "MDU6SXNzdWUzNzc5MDg3NA==", "number": 26, "title": "Implement echo=True", "user": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-07-14T14:25:47Z", "updated_at": "2014-10-07T15:31:45Z", "closed_at": "2014-10-07T15:31:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "or something like that\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/21", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/21/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/21/events", "html_url": "https://github.com/aio-libs/aiopg/issues/21", "id": 36726365, "node_id": "MDU6SXNzdWUzNjcyNjM2NQ==", "number": 21, "title": "Confusing traceback in update", "user": {"login": "paultag", "id": 132447, "node_id": "MDQ6VXNlcjEzMjQ0Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/132447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paultag", "html_url": "https://github.com/paultag", "followers_url": "https://api.github.com/users/paultag/followers", "following_url": "https://api.github.com/users/paultag/following{/other_user}", "gists_url": "https://api.github.com/users/paultag/gists{/gist_id}", "starred_url": "https://api.github.com/users/paultag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paultag/subscriptions", "organizations_url": "https://api.github.com/users/paultag/orgs", "repos_url": "https://api.github.com/users/paultag/repos", "events_url": "https://api.github.com/users/paultag/events{/privacy}", "received_events_url": "https://api.github.com/users/paultag/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-06-28T14:41:54Z", "updated_at": "2014-06-28T14:48:24Z", "closed_at": "2014-06-28T14:48:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "``` python\n  File \"/home/tag/.virtualenvs/moxie/lib/python3.4/site-packages/aiopg/sa/connection.py\", line 53, in scalar\n    return (yield from res.scalar())\n  File \"/home/tag/.virtualenvs/moxie/lib/python3.4/site-packages/aiopg/sa/result.py\", line 417, in scalar\n    row = yield from self.first()\n  File \"/home/tag/.virtualenvs/moxie/lib/python3.4/site-packages/aiopg/sa/result.py\", line 405, in first\n    self._non_result()\n  File \"/home/tag/.virtualenvs/moxie/lib/python3.4/site-packages/aiopg/sa/result.py\", line 334, in _non_result\n    \"This result object does not return rows. \"\naiopg.sa.exc.ResourceClosedError: This result object does not return rows. It has been closed automatically.\n```\n\nCode is similar to:\n\n``` python\n    engine = yield from aiopg.sa.create_engine(DATABASE_URL)\n    with (yield from engine) as conn:\n        reschedule = (dt.datetime.utcnow() + job.interval)\n        yield from conn.scalar(\n            update(\n                Job.__table__\n            ).where(\n                Job.name==job.name\n            ).values(\n                active=True,\n                scheduled=reschedule,\n            ))\n```\n\nDatabase has:\n\n``` SQL\nmoxie=# SELECT * FROM job;\n id |      name      |      description      |    command     |    image     |         scheduled          | interval | active | maintainer_id \n----+----------------+-----------------------+----------------+--------------+----------------------------+----------+--------+---------------\n  3 | test-job-three | Test Job number Three | update holyoke | paultag/pupa | 2014-06-28 14:37:09.501019 | 1 day    | f      |             1\n  4 | test-job-four  | Test Job number Four  | update holyoke | paultag/pupa | 2014-06-28 14:37:09.50455  | 1 day    | f      |             2\n  5 | test-job-five  | Test Job number Five  | update holyoke | paultag/pupa | 2014-06-28 14:37:09.508053 | 1 day    | f      |             2\n  6 | test-job-six   | Test Job number Six   | update holyoke | paultag/pupa | 2014-06-28 14:37:09.512476 | 1 day    | f      |             2\n  1 | test-job-one   | Test Job number One   | update holyoke | paultag/pupa | 2014-06-29 14:37:15.559101 | 1 day    | t      |             1\n  2 | test-job-two   | Test Job number Two   | update holyoke | paultag/pupa | 2014-06-29 14:37:15.56207  | 1 day    | t      |             1\n(6 rows)\n```\n\nFailed on entry `test-job-three`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aio-libs/aiopg/issues/20", "repository_url": "https://api.github.com/repos/aio-libs/aiopg", "labels_url": "https://api.github.com/repos/aio-libs/aiopg/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/aio-libs/aiopg/issues/20/comments", "events_url": "https://api.github.com/repos/aio-libs/aiopg/issues/20/events", "html_url": "https://github.com/aio-libs/aiopg/issues/20", "id": 36242557, "node_id": "MDU6SXNzdWUzNjI0MjU1Nw==", "number": 20, "title": "Handle PostgreSQL server restart with opened connections", "user": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 89984831, "node_id": "MDU6TGFiZWw4OTk4NDgzMQ==", "url": "https://api.github.com/repos/aio-libs/aiopg/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asvetlov", "id": 356399, "node_id": "MDQ6VXNlcjM1NjM5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/356399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asvetlov", "html_url": "https://github.com/asvetlov", "followers_url": "https://api.github.com/users/asvetlov/followers", "following_url": "https://api.github.com/users/asvetlov/following{/other_user}", "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions", "organizations_url": "https://api.github.com/users/asvetlov/orgs", "repos_url": "https://api.github.com/users/asvetlov/repos", "events_url": "https://api.github.com/users/asvetlov/events{/privacy}", "received_events_url": "https://api.github.com/users/asvetlov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 18, "created_at": "2014-06-22T11:58:17Z", "updated_at": "2016-11-01T23:19:48Z", "closed_at": "2016-11-01T23:19:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently client 'hangs'.\nProbably the best way to process the issue is adding timeouts.\n", "performed_via_github_app": null, "score": 1.0}]}