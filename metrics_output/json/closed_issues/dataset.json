{"total_count": 223, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pudo/dataset/issues/334", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/334/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/334/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/334/events", "html_url": "https://github.com/pudo/dataset/issues/334", "id": 643452441, "node_id": "MDU6SXNzdWU2NDM0NTI0NDE=", "number": 334, "title": "Question about custom SQL queries", "user": {"login": "yilu1015", "id": 25930948, "node_id": "MDQ6VXNlcjI1OTMwOTQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/25930948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yilu1015", "html_url": "https://github.com/yilu1015", "followers_url": "https://api.github.com/users/yilu1015/followers", "following_url": "https://api.github.com/users/yilu1015/following{/other_user}", "gists_url": "https://api.github.com/users/yilu1015/gists{/gist_id}", "starred_url": "https://api.github.com/users/yilu1015/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yilu1015/subscriptions", "organizations_url": "https://api.github.com/users/yilu1015/orgs", "repos_url": "https://api.github.com/users/yilu1015/repos", "events_url": "https://api.github.com/users/yilu1015/events{/privacy}", "received_events_url": "https://api.github.com/users/yilu1015/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-23T01:04:30Z", "updated_at": "2020-06-28T13:02:31Z", "closed_at": "2020-06-28T13:02:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ran into a question when trying to use `db.query` to update some values. The code below returns `AttributeError: 'tuple' object has no attribute 'keys'`, but an almost identical rendition in `psycopg2` executes the command correctly. What could be the issue here?\r\n\r\n```\r\n        db = dataset.connect('postgresql://my_database')\r\n        db = dataset.connect()\r\n        db.begin()\r\n        db.query('''\r\n            UPDATE scrape_log \r\n            SET date_scraped=%s, result_count=%s \r\n            WHERE start_date=%s AND end_date=%s;\r\n            ''', (date_scraped, result_count, start_date, end_date))\r\n        db.commit()\r\n```\r\nvs.\r\n\r\n```\r\n        conn = psycopg2.connect('postgresql://my_database')\r\n        cur = conn.cursor()\r\n        cur.execute('''\r\n            UPDATE scrape_log \r\n            SET date_scraped=%s, result_count=%s \r\n            WHERE start_date=%s AND end_date=%s;\r\n            ''', (date_scraped, result_count, start_date, end_date))\r\n        conn.commit()\r\n```\r\n\r\nNow if anyone could kindly let me know if there's a more elegant solution using `update`, I shall be very grateful. Sorry for what might be a sophomoric question, but for someone new to SQL, this library has made my life so much easier. Thanks so much!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/333", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/333/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/333/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/333/events", "html_url": "https://github.com/pudo/dataset/issues/333", "id": 641471385, "node_id": "MDU6SXNzdWU2NDE0NzEzODU=", "number": 333, "title": "JSON Partial updates in MySQL with update / upsert", "user": {"login": "d3vr", "id": 1549990, "node_id": "MDQ6VXNlcjE1NDk5OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1549990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d3vr", "html_url": "https://github.com/d3vr", "followers_url": "https://api.github.com/users/d3vr/followers", "following_url": "https://api.github.com/users/d3vr/following{/other_user}", "gists_url": "https://api.github.com/users/d3vr/gists{/gist_id}", "starred_url": "https://api.github.com/users/d3vr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d3vr/subscriptions", "organizations_url": "https://api.github.com/users/d3vr/orgs", "repos_url": "https://api.github.com/users/d3vr/repos", "events_url": "https://api.github.com/users/d3vr/events{/privacy}", "received_events_url": "https://api.github.com/users/d3vr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-18T18:44:44Z", "updated_at": "2020-06-19T12:24:45Z", "closed_at": "2020-06-19T12:24:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nIs there any way to achieve a [JSON partial update](https://dev.mysql.com/doc/refman/8.0/en/json.html) (using JSON_SET()) in MySQL when using the update / upsert methods ? \r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/331", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/331/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/331/events", "html_url": "https://github.com/pudo/dataset/issues/331", "id": 627631531, "node_id": "MDU6SXNzdWU2Mjc2MzE1MzE=", "number": 331, "title": "Integration with SQLAlchemy", "user": {"login": "vladiscripts", "id": 6325118, "node_id": "MDQ6VXNlcjYzMjUxMTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6325118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vladiscripts", "html_url": "https://github.com/vladiscripts", "followers_url": "https://api.github.com/users/vladiscripts/followers", "following_url": "https://api.github.com/users/vladiscripts/following{/other_user}", "gists_url": "https://api.github.com/users/vladiscripts/gists{/gist_id}", "starred_url": "https://api.github.com/users/vladiscripts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vladiscripts/subscriptions", "organizations_url": "https://api.github.com/users/vladiscripts/orgs", "repos_url": "https://api.github.com/users/vladiscripts/repos", "events_url": "https://api.github.com/users/vladiscripts/events{/privacy}", "received_events_url": "https://api.github.com/users/vladiscripts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-30T02:18:56Z", "updated_at": "2020-08-15T14:20:30Z", "closed_at": "2020-06-28T13:48:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could you add improved integration support with SQLAlchemy? Because now have to duplicate the code, violating the [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) principle.\r\nI mean:\r\n* Add exists engine defination.\r\n* Add support of exists models definations.\r\n\r\nTo example:\r\n```python\r\nBase = declarative_base()\r\n\r\nclass Table(Base):\r\n    __tablename__ = 't_name'\r\n    id = Column(Integer, primary_key=True)\r\n    date = Column(Date, nullable=False, unique=True)\r\n    total = Column(Integer, nullable=False)\r\n\r\ndb_name = 'db_name'\r\nengine = create_engine(f'mysql+pymysql://{user}:{password}@{host}/{db_name}', echo=True)\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\n\r\nBase.metadata.create_all(engine)\r\n\r\ndb = dataset.connect(str(engine.url), engine_kwargs=dict(echo=engine.echo))\r\n\r\n\r\ndef insert_to_Table(rows: Union[list, tuple]):\r\n    table = db[Table.__tablename__]\r\n    for row in rows:\r\n        d = dict(zip([Table.date.key, Table.total.key], row))\r\n        table.insert_ignore(d, Table.date.key)\r\n```\r\n\r\nHow can see. Now have to separately use SQLAlchemy first to create a table model. Then call `Base.metadata.create_all(engine)`. Also keep `Session()` for more complex cases #322.\r\n\r\nThen do duplication of the engine defination. Here I would really like to add the `engine` parameter to the `dataset.connect()`to use an existing one.\r\n\r\nAll this does in the script duplication of DB connections and confuses the script if several developers do it.\r\n\r\nThen, again, have to use the reference to the models `db [Table .__ tablename__]`, `dict (zip ([Table.date.key, Table.total.key], row))`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/330", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/330/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/330/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/330/events", "html_url": "https://github.com/pudo/dataset/issues/330", "id": 626655197, "node_id": "MDU6SXNzdWU2MjY2NTUxOTc=", "number": 330, "title": "get_table ignores ensure_schema flag", "user": {"login": "astenuz", "id": 4689127, "node_id": "MDQ6VXNlcjQ2ODkxMjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4689127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astenuz", "html_url": "https://github.com/astenuz", "followers_url": "https://api.github.com/users/astenuz/followers", "following_url": "https://api.github.com/users/astenuz/following{/other_user}", "gists_url": "https://api.github.com/users/astenuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/astenuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astenuz/subscriptions", "organizations_url": "https://api.github.com/users/astenuz/orgs", "repos_url": "https://api.github.com/users/astenuz/repos", "events_url": "https://api.github.com/users/astenuz/events{/privacy}", "received_events_url": "https://api.github.com/users/astenuz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-28T16:42:28Z", "updated_at": "2020-06-28T13:44:51Z", "closed_at": "2020-06-28T13:44:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! As I understand, when connecting to a database we could set `ensure_schema=False` to avoid table and column creation. However, it seems this flag is ignored when accessing tables. For example, I believe it makes sense that when the flag is set to `False`, loading a non-existing table should raise an exception. However, it creates the table with a single `id` column:\r\n\r\n```python\r\nimport dataset\r\n\r\ndb = dataset.connect('<connection>', ensure_schema=False)\r\n\r\ndb['non_existing_table']  # creates the table, ignoring ensure_schema\r\n```\r\n\r\nThis happens because `get_table(...)` (the method [] uses under the hood) directly calls `create_table(...)` [without checking the flag](https://github.com/pudo/dataset/blob/0c46d9eead35ab89e6c7ae52ce7c9d51216c77ca/dataset/database.py#L221)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/329", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/329/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/329/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/329/events", "html_url": "https://github.com/pudo/dataset/issues/329", "id": 604096463, "node_id": "MDU6SXNzdWU2MDQwOTY0NjM=", "number": 329, "title": "primary_id cannot be changed after table is dropped", "user": {"login": "luerhard", "id": 24412608, "node_id": "MDQ6VXNlcjI0NDEyNjA4", "avatar_url": "https://avatars2.githubusercontent.com/u/24412608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luerhard", "html_url": "https://github.com/luerhard", "followers_url": "https://api.github.com/users/luerhard/followers", "following_url": "https://api.github.com/users/luerhard/following{/other_user}", "gists_url": "https://api.github.com/users/luerhard/gists{/gist_id}", "starred_url": "https://api.github.com/users/luerhard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luerhard/subscriptions", "organizations_url": "https://api.github.com/users/luerhard/orgs", "repos_url": "https://api.github.com/users/luerhard/repos", "events_url": "https://api.github.com/users/luerhard/events{/privacy}", "received_events_url": "https://api.github.com/users/luerhard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-21T15:57:06Z", "updated_at": "2020-06-28T13:47:57Z", "closed_at": "2020-06-28T13:47:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there, first of all, thank you for this amazing package, I use it every day !\r\n\r\nI have found a problem, that I cannot quite explain. If I drop a Table and afterwards create a Table with the same name, I cannot change the primary_id column for this new Table.\r\n\r\nIf I 'reconnect' (uncomment the commented line in the sourcecode, this script works like expected:\r\n\r\n```python\r\nimport dataset\r\nprint(\"version: \", dataset.__version__, end=\"\\n\\n\")\r\n\r\nimport os\r\nif os.path.exists(\"test.db\"):\r\n    os.remove(\"test.db\")\r\n\r\ndb = dataset.connect(\"sqlite:///test.db\", row_type=dict)\r\n\r\ndb.create_table(\"my_table\", primary_id=\"id\")\r\ndb[\"my_table\"].insert({\"a\": 2, \"b\": 3})\r\nprint(\"After first input: \", list(db[\"my_table\"].all()))\r\n\r\ndb[\"my_table\"].drop()\r\nprint(\"Tables in DB after drop: \", db.tables)\r\n\r\n#db = dataset.connect(\"sqlite:///test.db\", row_type=dict)\r\n\r\ndb.create_table(\"my_table\", primary_id=\"custom\")\r\ndb[\"my_table\"].insert({\"a\": 20, \"b\": 30, \"custom\": 50})\r\nprint(\"After second input: \", list(db[\"my_table\"].all()))\r\n\r\nprint()\r\nif \"custom\" in db[\"my_table\"].table.c:\r\n    print(\"custom_col == primary ->\", db[\"my_table\"].table.c.custom.primary_key)\r\nif \"id\" in db[\"my_table\"].table.c:\r\n    print(\"id_col == primary ->\", db[\"my_table\"].table.c.id.primary_key)\r\n```\r\n-----\r\nThe output of this is with line __commented__:\r\n```\r\nversion:  1.3.1\r\n\r\nAfter first input:  [{'id': 1, 'a': 2, 'b': 3}]\r\nTables in DB after drop:  []\r\nAfter second input:  [{'id': 1, 'a': 20, 'b': 30, 'custom': 50}]\r\n\r\ncustom_col == primary -> False\r\nid_col == primary -> True\r\n```\r\n-----\r\nOutput fo this with the line __uncommented__:\r\n```\r\nversion:  1.3.1\r\n\r\nAfter first input:  [{'id': 1, 'a': 2, 'b': 3}]\r\nTables in DB after drop:  []\r\nAfter second input:  [{'custom': 50, 'a': 20, 'b': 30}]\r\n\r\ncustom_col == primary -> True\r\n```\r\n\r\nMy Problem is the difference in the line that says \"After second input\". If i do not 'reconnect' to the DB, there is an additional column there.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/327", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/327/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/327/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/327/events", "html_url": "https://github.com/pudo/dataset/issues/327", "id": 602250457, "node_id": "MDU6SXNzdWU2MDIyNTA0NTc=", "number": 327, "title": "Postgres search_path", "user": {"login": "kushtun", "id": 2752408, "node_id": "MDQ6VXNlcjI3NTI0MDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2752408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kushtun", "html_url": "https://github.com/kushtun", "followers_url": "https://api.github.com/users/kushtun/followers", "following_url": "https://api.github.com/users/kushtun/following{/other_user}", "gists_url": "https://api.github.com/users/kushtun/gists{/gist_id}", "starred_url": "https://api.github.com/users/kushtun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kushtun/subscriptions", "organizations_url": "https://api.github.com/users/kushtun/orgs", "repos_url": "https://api.github.com/users/kushtun/repos", "events_url": "https://api.github.com/users/kushtun/events{/privacy}", "received_events_url": "https://api.github.com/users/kushtun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-17T21:44:49Z", "updated_at": "2020-04-27T08:59:06Z", "closed_at": "2020-04-27T08:59:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Question -- using `dataset` seems to require the connect be URL-ish.  Given that a lot of Pg dbs are set up not under `public`, usually need to specify a schema in the connect info.  How do we do that with `dataset`?  Seems like the API examples are based around querying, can one issue a general SQL statement somehow to set the schema that way as well, or is there some syntax that allows it to go in the URL?\r\n\r\nNot seeing a way to get to non-public schemas in `dataset` Pg connections.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/326", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/326/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/326/events", "html_url": "https://github.com/pudo/dataset/issues/326", "id": 599220244, "node_id": "MDU6SXNzdWU1OTkyMjAyNDQ=", "number": 326, "title": "timestamp **with** time zone", "user": {"login": "gduverger", "id": 93743, "node_id": "MDQ6VXNlcjkzNzQz", "avatar_url": "https://avatars2.githubusercontent.com/u/93743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gduverger", "html_url": "https://github.com/gduverger", "followers_url": "https://api.github.com/users/gduverger/followers", "following_url": "https://api.github.com/users/gduverger/following{/other_user}", "gists_url": "https://api.github.com/users/gduverger/gists{/gist_id}", "starred_url": "https://api.github.com/users/gduverger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gduverger/subscriptions", "organizations_url": "https://api.github.com/users/gduverger/orgs", "repos_url": "https://api.github.com/users/gduverger/repos", "events_url": "https://api.github.com/users/gduverger/events{/privacy}", "received_events_url": "https://api.github.com/users/gduverger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-14T00:46:47Z", "updated_at": "2020-04-27T07:51:24Z", "closed_at": "2020-04-27T07:51:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I insert an aware datetime, Dataset creates a `timestamp **without** time zone` field for it.\r\n\r\n```\r\n>>> import dataset\r\n>>> import datetime\r\n>>> db = dataset.connect('postgresql://\u2026/test')\r\n>>> now = datetime.datetime.now(datetime.timezone.utc)\r\n>>> db['test'].insert(dict(date=now))\r\n```\r\n\r\n<img width=\"537\" alt=\"Screen Shot 2020-04-13 at 8 45 06 PM\" src=\"https://user-images.githubusercontent.com/93743/79174116-b06b3000-7dc7-11ea-9382-294f2681d224.png\">\r\n\r\nIs there a way to make that field `timestamp **with** time zone`, instead? Otherwise, what's the recommended way to handle timezones with Dataset?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/325", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/325/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/325/events", "html_url": "https://github.com/pudo/dataset/issues/325", "id": 595972686, "node_id": "MDU6SXNzdWU1OTU5NzI2ODY=", "number": 325, "title": "\"Caching\" issue with multiple connections", "user": {"login": "c00kiemon5ter", "id": 97634, "node_id": "MDQ6VXNlcjk3NjM0", "avatar_url": "https://avatars0.githubusercontent.com/u/97634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c00kiemon5ter", "html_url": "https://github.com/c00kiemon5ter", "followers_url": "https://api.github.com/users/c00kiemon5ter/followers", "following_url": "https://api.github.com/users/c00kiemon5ter/following{/other_user}", "gists_url": "https://api.github.com/users/c00kiemon5ter/gists{/gist_id}", "starred_url": "https://api.github.com/users/c00kiemon5ter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c00kiemon5ter/subscriptions", "organizations_url": "https://api.github.com/users/c00kiemon5ter/orgs", "repos_url": "https://api.github.com/users/c00kiemon5ter/repos", "events_url": "https://api.github.com/users/c00kiemon5ter/events{/privacy}", "received_events_url": "https://api.github.com/users/c00kiemon5ter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-07T15:52:04Z", "updated_at": "2020-05-26T12:49:15Z", "closed_at": "2020-05-26T12:48:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, we are using `dataset` to connect to a mysql database. The database gets multiple connections that can write and read simultaneously. We observed that if a connection does a write, then another connection does not see the new data until it writes again to the database.\r\n\r\nI assume there is a caching layer and that is updated when a write operation takes place. This may work in single connection environments, but not in environments where there are multiple connections to the database.\r\n\r\nThis is a small test case to illustrate the problem:\r\n```python\r\n# create two connections\r\nIn [141]: db1 = dataset.connect(\"mysql://XXX/foo\")                                    \r\nIn [142]: db2 = dataset.connect(\"mysql://XXX/foo\")                                    \r\n\r\n# load the table, to initialize the cache (assumption)\r\nIn [143]: db1.get_table(\"bar\").all()                                                                                                                                                                        \r\nOut[143]: <dataset.util.ResultIter at 0x7ff53ee4b438>\r\nIn [144]: db2.get_table(\"bar\").all()                                                                                                                                                                        \r\nOut[144]: <dataset.util.ResultIter at 0x7ff53f3f7c88>\r\n\r\n# insert new data from one connection\r\nIn [145]: db1.get_table(\"bar\").insert({})                                                                                                                                                                   \r\nOut[145]: 156\r\n\r\n# read the new data out from another connection\r\n# this fails as the data have been cached and did not get updated (assumption)\r\nIn [146]: list(db2.get_table(\"bar\").find(id=156))                                                                                                                                                           \r\nOut[146]: []\r\n```\r\n\r\nI would expect the new data to be available in the second connection.\r\n\r\n---\r\n\r\nIt is important to have first read the table data. If you do not, then the first read from another connection will work, because it loads the data for the first time and it will include the new data. \r\nThe second time the process is repeated though, the same as above will happen:\r\n\r\n```python\r\n# create two connections\r\nIn [149]: db1 = dataset.connect(\"mysql://XXX/foo\")                                    \r\nIn [150]: db2 = dataset.connect(\"mysql://XXX/foo\")                                    \r\n\r\n# insert new data from one connection\r\nIn [151]: db1.get_table(\"bar\").insert({})                                                                                                                                                                   \r\nOut[151]: 157\r\n\r\n# read the new data out from another connection\r\n# this works as this is the first time the data are read\r\nIn [152]: list(db2.get_table(\"bar\").find(id=157))                                                                                                                                                           \r\nOut[152]: \r\n[OrderedDict([('id', 157),\r\n              ('value', None)])]\r\n\r\n# insert new data from one connection\r\nIn [153]: db1.get_table(\"bar\").insert({})                                                                                                                                                                   \r\nOut[153]: 158\r\n\r\n# read the new data out from another connection\r\n# this fails as the data have been cached and did not get updated (assumption)\r\nIn [154]: list(db2.get_table(\"bar\").find(id=158))                                                                                                                                                           \r\nOut[154]: []\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/322", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/322/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/322/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/322/events", "html_url": "https://github.com/pudo/dataset/issues/322", "id": 593592550, "node_id": "MDU6SXNzdWU1OTM1OTI1NTA=", "number": 322, "title": "Support for Foreign Keys and relationships", "user": {"login": "jgburd79", "id": 16708259, "node_id": "MDQ6VXNlcjE2NzA4MjU5", "avatar_url": "https://avatars3.githubusercontent.com/u/16708259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgburd79", "html_url": "https://github.com/jgburd79", "followers_url": "https://api.github.com/users/jgburd79/followers", "following_url": "https://api.github.com/users/jgburd79/following{/other_user}", "gists_url": "https://api.github.com/users/jgburd79/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgburd79/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgburd79/subscriptions", "organizations_url": "https://api.github.com/users/jgburd79/orgs", "repos_url": "https://api.github.com/users/jgburd79/repos", "events_url": "https://api.github.com/users/jgburd79/events{/privacy}", "received_events_url": "https://api.github.com/users/jgburd79/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-03T19:26:58Z", "updated_at": "2020-04-03T19:36:21Z", "closed_at": "2020-04-03T19:36:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there support for Foreign Keys? How does one normalize the database and create relationships?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/319", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/319/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/319/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/319/events", "html_url": "https://github.com/pudo/dataset/issues/319", "id": 585677760, "node_id": "MDU6SXNzdWU1ODU2Nzc3NjA=", "number": 319, "title": "Can't insert a list type value", "user": {"login": "sailist", "id": 25661058, "node_id": "MDQ6VXNlcjI1NjYxMDU4", "avatar_url": "https://avatars0.githubusercontent.com/u/25661058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sailist", "html_url": "https://github.com/sailist", "followers_url": "https://api.github.com/users/sailist/followers", "following_url": "https://api.github.com/users/sailist/following{/other_user}", "gists_url": "https://api.github.com/users/sailist/gists{/gist_id}", "starred_url": "https://api.github.com/users/sailist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sailist/subscriptions", "organizations_url": "https://api.github.com/users/sailist/orgs", "repos_url": "https://api.github.com/users/sailist/repos", "events_url": "https://api.github.com/users/sailist/events{/privacy}", "received_events_url": "https://api.github.com/users/sailist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-22T09:32:23Z", "updated_at": "2020-03-22T09:47:50Z", "closed_at": "2020-03-22T09:47:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there some easy ways to help insert list type value? \r\n```\r\n[SQL: INSERT INTO \"table\" (....) VALUES (.....)]\r\n[parameters: ('....',  [],')]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/318", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/318/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/318/events", "html_url": "https://github.com/pudo/dataset/issues/318", "id": 584494042, "node_id": "MDU6SXNzdWU1ODQ0OTQwNDI=", "number": 318, "title": "Database password with square brackets", "user": {"login": "Johan944", "id": 17673923, "node_id": "MDQ6VXNlcjE3NjczOTIz", "avatar_url": "https://avatars1.githubusercontent.com/u/17673923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Johan944", "html_url": "https://github.com/Johan944", "followers_url": "https://api.github.com/users/Johan944/followers", "following_url": "https://api.github.com/users/Johan944/following{/other_user}", "gists_url": "https://api.github.com/users/Johan944/gists{/gist_id}", "starred_url": "https://api.github.com/users/Johan944/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Johan944/subscriptions", "organizations_url": "https://api.github.com/users/Johan944/orgs", "repos_url": "https://api.github.com/users/Johan944/repos", "events_url": "https://api.github.com/users/Johan944/events{/privacy}", "received_events_url": "https://api.github.com/users/Johan944/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-19T15:26:44Z", "updated_at": "2020-03-19T15:42:21Z", "closed_at": "2020-03-19T15:40:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, we try to use your module but we met a problem.\r\n\r\nWhen we try to connect with our production database, an error occured : \r\n-> File \"C:\\Users\\Johan Ganem--Brunet\\Anaconda3\\lib\\urllib\\parse.py\", line 459, in urlsplit\r\n    raise ValueError(\"Invalid IPv6 URL\")\r\nValueError: Invalid IPv6 URL\r\n\r\nWhile in local, there is not problem.\r\n\r\nI researched in the Internet, and I found that urllib does not support brackets in URL. So, the password in brackets must to be encode, but when a I did this, a sqlalchemy error occured:\r\n-> sqlalchemy.exc.ArgumentError: Could not parse rfc1738 URL from string\r\n\r\nCan you think you can fix that ? Thank you :)\r\n\r\nJohan\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/316", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/316/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/316/events", "html_url": "https://github.com/pudo/dataset/issues/316", "id": 580774195, "node_id": "MDU6SXNzdWU1ODA3NzQxOTU=", "number": 316, "title": "Do I have to remove None values from dicts when I add them?", "user": {"login": "everythingability", "id": 96276, "node_id": "MDQ6VXNlcjk2Mjc2", "avatar_url": "https://avatars3.githubusercontent.com/u/96276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/everythingability", "html_url": "https://github.com/everythingability", "followers_url": "https://api.github.com/users/everythingability/followers", "following_url": "https://api.github.com/users/everythingability/following{/other_user}", "gists_url": "https://api.github.com/users/everythingability/gists{/gist_id}", "starred_url": "https://api.github.com/users/everythingability/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/everythingability/subscriptions", "organizations_url": "https://api.github.com/users/everythingability/orgs", "repos_url": "https://api.github.com/users/everythingability/repos", "events_url": "https://api.github.com/users/everythingability/events{/privacy}", "received_events_url": "https://api.github.com/users/everythingability/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-13T18:33:50Z", "updated_at": "2020-03-15T11:34:11Z", "closed_at": "2020-03-15T11:34:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to bang a dict straight into a usertable like this... and I remove all the None values but it still errors.. I'm using SQLite\r\n\r\n```\r\nfor person in result['person']:\r\n\tprint( person['href'] )\r\n\r\n\t# CLEAN UP THE DICTS\r\n\tlinks = person['links']\t\r\n\tdel person['links']\r\n\t\r\n\tnewDict = {}\r\n\r\n\tfor p in person:\r\n\t\tprint( p, person[p])\r\n\t\tif person[p] != None :\r\n\t\t\tnewDict[p] = person[p]\r\n\t\r\n\tprint(newDict)\r\n\tusertable.insert( newDict )\r\n```\r\n\r\n\r\n....and I get this... \r\n\r\n\r\n\r\n\r\n\r\n```\r\n{'id': '60901274-0148-4EBB-9461-9B6FD0090598', 'href': 'https://gtr.ukri.org:443/gtr/api/persons/60901274-0148-4EBB-9461-9B6FD0090598', 'created': 1582643294000, 'firstName': 'Hui', 'otherNames': '', 'surname': 'Yuan'}\r\nTraceback (most recent call last):\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1248, in _execute_context\r\n    cursor, statement, parameters, context\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 588, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlite3.IntegrityError: datatype mismatch\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"get_people.py\", line 35, in <module>\r\n    usertable.insert( newDict )\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/dataset/table.py\", line 111, in insert\r\n    res = self.db.executable.execute(self.table.insert(row))\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 984, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/sqlalchemy/sql/elements.py\", line 293, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1103, in _execute_clauseelement\r\n    distilled_params,\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1288, in _execute_context\r\n    e, statement, parameters, cursor, context\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1482, in _handle_dbapi_exception\r\n    sqlalchemy_exception, with_traceback=exc_info[2], from_=e\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 178, in raise_\r\n    raise exception\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1248, in _execute_context\r\n    cursor, statement, parameters, context\r\n  File \"/Users/tomsmith/gtr_object_definitions/env/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 588, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) datatype mismatch\r\n[SQL: INSERT INTO users (id, href, created, \"firstName\", \"otherNames\", surname) VALUES (?, ?, ?, ?, ?, ?)]\r\n[parameters: ('60901274-0148-4EBB-9461-9B6FD0090598', 'https://gtr.ukri.org:443/gtr/api/persons/60901274-0148-4EBB-9461-9B6FD0090598', 1582643294000, 'Hui', '', 'Yuan')]\r\n(Background on this error at: http://sqlalche.me/e/gkpj)\r\n```\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/312", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/312/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/312/events", "html_url": "https://github.com/pudo/dataset/issues/312", "id": 569787087, "node_id": "MDU6SXNzdWU1Njk3ODcwODc=", "number": 312, "title": "Regression: `argument of type 'NoneType' is not iterable` when re-opening table", "user": {"login": "Frankkkkk", "id": 17879459, "node_id": "MDQ6VXNlcjE3ODc5NDU5", "avatar_url": "https://avatars3.githubusercontent.com/u/17879459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Frankkkkk", "html_url": "https://github.com/Frankkkkk", "followers_url": "https://api.github.com/users/Frankkkkk/followers", "following_url": "https://api.github.com/users/Frankkkkk/following{/other_user}", "gists_url": "https://api.github.com/users/Frankkkkk/gists{/gist_id}", "starred_url": "https://api.github.com/users/Frankkkkk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Frankkkkk/subscriptions", "organizations_url": "https://api.github.com/users/Frankkkkk/orgs", "repos_url": "https://api.github.com/users/Frankkkkk/repos", "events_url": "https://api.github.com/users/Frankkkkk/events{/privacy}", "received_events_url": "https://api.github.com/users/Frankkkkk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-24T11:11:59Z", "updated_at": "2020-02-24T14:46:05Z", "closed_at": "2020-02-24T14:46:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've got an exception when I reopen a database and write inside it:\r\n```\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 11, in <module>\r\n    t.insert({'xuid': uuid.uuid4().hex, 'name': ''})\r\n  File \"/usr/local/lib/python3.8/site-packages/dataset/table.py\", line 103, in insert\r\n    row = self._sync_columns(row, ensure, types=types)\r\n  File \"/usr/local/lib/python3.8/site-packages/dataset/table.py\", line 376, in _sync_columns\r\n    name = self._get_column_name(name)\r\n  File \"/usr/local/lib/python3.8/site-packages/dataset/table.py\", line 83, in _get_column_name\r\n    return self._column_keys.get(key, name)\r\n  File \"/usr/local/lib/python3.8/site-packages/dataset/table.py\", line 64, in _column_keys\r\n    if key in self._columns:\r\nTypeError: argument of type 'NoneType' is not iterable\r\n```\r\n\r\nThe example code is here: https://github.com/Frankkkkk/dataset-exception-example\r\n\r\nAnd you can raise the exception like so:\r\n```bash\r\n$ docker build -t test .\r\nSuccessfully tagged test:latest\r\n$ sudo rm -rf db\r\n$ docker run -v $(pwd)/db:/db -it test\r\n$ docker run -v $(pwd)/db:/db -it test\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 11, in <module>\r\n    t.insert({'xuid': uuid.uuid4().hex, 'name': ''})\r\n  File \"/usr/local/lib/python3.8/site-packages/dataset/table.py\", line 103, in insert\r\n    row = self._sync_columns(row, ensure, types=types)\r\n  File \"/usr/local/lib/python3.8/site-packages/dataset/table.py\", line 376, in _sync_columns\r\n    name = self._get_column_name(name)\r\n  File \"/usr/local/lib/python3.8/site-packages/dataset/table.py\", line 83, in _get_column_name\r\n    return self._column_keys.get(key, name)\r\n  File \"/usr/local/lib/python3.8/site-packages/dataset/table.py\", line 64, in _column_keys\r\n    if key in self._columns:\r\nTypeError: argument of type 'NoneType' is not iterable\r\n```\r\n\r\n**This is a regression of version 1.2.1. It works with version 1.2.0**\r\n\r\nI'll try to make a patch if I've got time.\r\n\r\nCheers\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/311", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/311/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/311/events", "html_url": "https://github.com/pudo/dataset/issues/311", "id": 557173306, "node_id": "MDU6SXNzdWU1NTcxNzMzMDY=", "number": 311, "title": "Custom type columns not preserved", "user": {"login": "mjd3", "id": 7028710, "node_id": "MDQ6VXNlcjcwMjg3MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7028710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjd3", "html_url": "https://github.com/mjd3", "followers_url": "https://api.github.com/users/mjd3/followers", "following_url": "https://api.github.com/users/mjd3/following{/other_user}", "gists_url": "https://api.github.com/users/mjd3/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjd3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjd3/subscriptions", "organizations_url": "https://api.github.com/users/mjd3/orgs", "repos_url": "https://api.github.com/users/mjd3/repos", "events_url": "https://api.github.com/users/mjd3/events{/privacy}", "received_events_url": "https://api.github.com/users/mjd3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-29T23:13:18Z", "updated_at": "2020-01-31T03:18:50Z", "closed_at": "2020-01-30T13:21:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems like using the insert/update commands, one is able to specify types for the input to the database, but when using find or find_one, it is not possible. Am I just doing this incorrectly? The reasoning behind this question is that I am using sqlalchemy's TypeDecorator to convert several different objects to binary strings, but I can't find a good way to have the binary strings automatically decoded when querying the database later on. \r\n\r\nAlso, this seems relevant to #254, since supporting TypeDecorators in this way would really help with something like a numpy array or similar (without necessarily having to build in each of the types that would be converted). Thanks in advance for the help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/310", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/310/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/310/events", "html_url": "https://github.com/pudo/dataset/issues/310", "id": 552767766, "node_id": "MDU6SXNzdWU1NTI3Njc3NjY=", "number": 310, "title": "When a Uppercase was entered in column, the value could not be entered. (1.2.0)", "user": {"login": "t-niijima-adglobe-co-jp", "id": 18522967, "node_id": "MDQ6VXNlcjE4NTIyOTY3", "avatar_url": "https://avatars3.githubusercontent.com/u/18522967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-niijima-adglobe-co-jp", "html_url": "https://github.com/t-niijima-adglobe-co-jp", "followers_url": "https://api.github.com/users/t-niijima-adglobe-co-jp/followers", "following_url": "https://api.github.com/users/t-niijima-adglobe-co-jp/following{/other_user}", "gists_url": "https://api.github.com/users/t-niijima-adglobe-co-jp/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-niijima-adglobe-co-jp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-niijima-adglobe-co-jp/subscriptions", "organizations_url": "https://api.github.com/users/t-niijima-adglobe-co-jp/orgs", "repos_url": "https://api.github.com/users/t-niijima-adglobe-co-jp/repos", "events_url": "https://api.github.com/users/t-niijima-adglobe-co-jp/events{/privacy}", "received_events_url": "https://api.github.com/users/t-niijima-adglobe-co-jp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-21T09:58:23Z", "updated_at": "2020-02-23T18:17:53Z", "closed_at": "2020-02-23T18:17:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm not good at English\r\nSo this is google translated content.\r\nI'm sorry if there is a wrong place.\r\n\r\nCreated an uppercase column.\r\nFor version 1.1.2. I can inserted in the columns.\r\nHowever, no value was inserted in version 1.2.0.\r\nIs this a bug?\r\n\r\nBelow is the example code.\r\n```Python\r\ndb = dataset.connect(DATA_DB_DSN,ensure_schema=False)\r\ndb.query(\"CREATE TABLE test(id int, Test varchar(10),test_two varchar(10));\")\r\ntable = db[\"test\"]\r\ntable.insert({\"id\":1,\"Test\":\"test\",\"test_two\":\"test\"})\r\n```\r\n\r\nver 1.1.2\r\n```\r\nMySQL [test]> select * from test;\r\n+------+------+----------+\r\n| id   | Test | test_two |\r\n+------+------+----------+\r\n|    1 | test | test     |\r\n+------+------+----------+\r\n```\r\n\r\nver 1.2.0\r\n```\r\nMySQL [test]> select * from test;\r\n+------+------+----------+\r\n| id   | Test | test_two |\r\n+------+------+----------+\r\n|    1 | NULL | test     |\r\n+------+------+----------+\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/308", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/308/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/308/events", "html_url": "https://github.com/pudo/dataset/issues/308", "id": 547044430, "node_id": "MDU6SXNzdWU1NDcwNDQ0MzA=", "number": 308, "title": "Flask-SQLAlchemy declarative orm and dataset in parallel", "user": {"login": "brunorpinho", "id": 11368602, "node_id": "MDQ6VXNlcjExMzY4NjAy", "avatar_url": "https://avatars1.githubusercontent.com/u/11368602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunorpinho", "html_url": "https://github.com/brunorpinho", "followers_url": "https://api.github.com/users/brunorpinho/followers", "following_url": "https://api.github.com/users/brunorpinho/following{/other_user}", "gists_url": "https://api.github.com/users/brunorpinho/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunorpinho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunorpinho/subscriptions", "organizations_url": "https://api.github.com/users/brunorpinho/orgs", "repos_url": "https://api.github.com/users/brunorpinho/repos", "events_url": "https://api.github.com/users/brunorpinho/events{/privacy}", "received_events_url": "https://api.github.com/users/brunorpinho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-08T18:59:17Z", "updated_at": "2020-01-09T22:26:20Z", "closed_at": "2020-01-09T22:24:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have a couple models in my project that I declared using Flask-SQLAlchemy. However, I think this is great and I would like work with `dataset` alongside with my already declared models. How do I connect this with my existing Flask-SQLAlchemy instance and be able to add/remove/query on both?\r\n\r\nBTW, thanks for this tool.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/306", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/306/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/306/events", "html_url": "https://github.com/pudo/dataset/issues/306", "id": 545347716, "node_id": "MDU6SXNzdWU1NDUzNDc3MTY=", "number": 306, "title": "Fix simple typo: acessed -> accessed", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-05T00:02:02Z", "updated_at": "2020-01-11T10:51:15Z", "closed_at": "2020-01-11T10:51:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in docs/quickstart.rst.\nShould read `accessed` rather than `acessed`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/304", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/304/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/304/events", "html_url": "https://github.com/pudo/dataset/issues/304", "id": 526290727, "node_id": "MDU6SXNzdWU1MjYyOTA3Mjc=", "number": 304, "title": "MySQLdb._exceptions.OperationalError: (1170, \"BLOB/TEXT column 'email' used in key specification without a key length\")", "user": {"login": "Ammadkhalid", "id": 14825937, "node_id": "MDQ6VXNlcjE0ODI1OTM3", "avatar_url": "https://avatars2.githubusercontent.com/u/14825937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ammadkhalid", "html_url": "https://github.com/Ammadkhalid", "followers_url": "https://api.github.com/users/Ammadkhalid/followers", "following_url": "https://api.github.com/users/Ammadkhalid/following{/other_user}", "gists_url": "https://api.github.com/users/Ammadkhalid/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ammadkhalid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ammadkhalid/subscriptions", "organizations_url": "https://api.github.com/users/Ammadkhalid/orgs", "repos_url": "https://api.github.com/users/Ammadkhalid/repos", "events_url": "https://api.github.com/users/Ammadkhalid/events{/privacy}", "received_events_url": "https://api.github.com/users/Ammadkhalid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-21T00:20:03Z", "updated_at": "2020-02-23T17:32:30Z", "closed_at": "2020-02-23T17:32:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\ngot this error\r\n```\r\nMySQLdb._exceptions.OperationalError: (1170, \"BLOB/TEXT column 'email' used in key specification without a key length\")\r\n```\r\ncode\r\n```\r\nquery = dict(email=email, password=password, total_storage=total_storage,\r\n                     used_storage=used_storage, free_storage=free_storage,\r\n                     is_full=is_full)\r\n        return self.pool.upsert(query, ['email'])\r\n```\r\npool is the table\r\n\r\nis this happening because of mysql version? sorry i don't have strong knowledge of databaset stuff rn :)\r\nthanks a lot.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/303", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/303/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/303/events", "html_url": "https://github.com/pudo/dataset/issues/303", "id": 507064707, "node_id": "MDU6SXNzdWU1MDcwNjQ3MDc=", "number": 303, "title": "Can't execute 'from stuf import stuf'", "user": {"login": "therden", "id": 3173673, "node_id": "MDQ6VXNlcjMxNzM2NzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3173673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/therden", "html_url": "https://github.com/therden", "followers_url": "https://api.github.com/users/therden/followers", "following_url": "https://api.github.com/users/therden/following{/other_user}", "gists_url": "https://api.github.com/users/therden/gists{/gist_id}", "starred_url": "https://api.github.com/users/therden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/therden/subscriptions", "organizations_url": "https://api.github.com/users/therden/orgs", "repos_url": "https://api.github.com/users/therden/repos", "events_url": "https://api.github.com/users/therden/events{/privacy}", "received_events_url": "https://api.github.com/users/therden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-15T07:40:04Z", "updated_at": "2020-01-11T12:37:57Z", "closed_at": "2020-01-11T12:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently found dataset, and am interested in using in a project.  But I found a problem while following along in the examples in *Quickstart*.  Attempting to execute \r\n\r\n```from stuf import stuf```\r\n\r\nas shown at the end of the \"Reading Data from Tables: section results in\r\n\r\n```No module found named 'stuf'```\r\n\r\nAny ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/297", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/297/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/297/events", "html_url": "https://github.com/pudo/dataset/issues/297", "id": 464993554, "node_id": "MDU6SXNzdWU0NjQ5OTM1NTQ=", "number": 297, "title": "Confusion with `insert_ignore` documentation", "user": {"login": "robroc", "id": 1219001, "node_id": "MDQ6VXNlcjEyMTkwMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1219001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robroc", "html_url": "https://github.com/robroc", "followers_url": "https://api.github.com/users/robroc/followers", "following_url": "https://api.github.com/users/robroc/following{/other_user}", "gists_url": "https://api.github.com/users/robroc/gists{/gist_id}", "starred_url": "https://api.github.com/users/robroc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robroc/subscriptions", "organizations_url": "https://api.github.com/users/robroc/orgs", "repos_url": "https://api.github.com/users/robroc/repos", "events_url": "https://api.github.com/users/robroc/events{/privacy}", "received_events_url": "https://api.github.com/users/robroc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-07T21:08:12Z", "updated_at": "2020-01-11T12:36:36Z", "closed_at": "2020-01-11T12:36:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm a little confused about this line in the description for `insert_ignore`:\r\n\r\n\"If rows with matching `keys` exist they will be added to the table.\"\r\n\r\nThis seems to contradict the preceding line, which says if a row exists it won't be inserted:\r\n\r\n\"Add a `row` dict into the table if the row does not exist.\"\r\n\r\nDoes specifying a key override the ignore behaviour?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/295", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/295/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/295/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/295/events", "html_url": "https://github.com/pudo/dataset/issues/295", "id": 457540747, "node_id": "MDU6SXNzdWU0NTc1NDA3NDc=", "number": 295, "title": "insert_many: maximum chunk_size", "user": {"login": "PlatonB", "id": 25541767, "node_id": "MDQ6VXNlcjI1NTQxNzY3", "avatar_url": "https://avatars0.githubusercontent.com/u/25541767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlatonB", "html_url": "https://github.com/PlatonB", "followers_url": "https://api.github.com/users/PlatonB/followers", "following_url": "https://api.github.com/users/PlatonB/following{/other_user}", "gists_url": "https://api.github.com/users/PlatonB/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlatonB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlatonB/subscriptions", "organizations_url": "https://api.github.com/users/PlatonB/orgs", "repos_url": "https://api.github.com/users/PlatonB/repos", "events_url": "https://api.github.com/users/PlatonB/events{/privacy}", "received_events_url": "https://api.github.com/users/PlatonB/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-18T15:11:57Z", "updated_at": "2019-07-13T12:16:51Z", "closed_at": "2019-07-13T12:16:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please specify in the API documentation what maximum chunk_size can be used. For example, my laptop has 8 GB RAM, and if program tries to insert barely 100 MB list into SQLite DB, OS hangs.\r\n```\r\nwhile True:\r\n    if sys.getsizeof(fragment) / 1e8 > done_commits + 1:\r\n        table.insert_many(fragment, chunk_size=len(fragment))\r\n        fragment.clear()\r\n        done_commits += 1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/294", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/294/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/294/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/294/events", "html_url": "https://github.com/pudo/dataset/issues/294", "id": 451177853, "node_id": "MDU6SXNzdWU0NTExNzc4NTM=", "number": 294, "title": "Can't connect to MySQL server on 'localhost'", "user": {"login": "PlatonB", "id": 25541767, "node_id": "MDQ6VXNlcjI1NTQxNzY3", "avatar_url": "https://avatars0.githubusercontent.com/u/25541767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlatonB", "html_url": "https://github.com/PlatonB", "followers_url": "https://api.github.com/users/PlatonB/followers", "following_url": "https://api.github.com/users/PlatonB/following{/other_user}", "gists_url": "https://api.github.com/users/PlatonB/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlatonB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlatonB/subscriptions", "organizations_url": "https://api.github.com/users/PlatonB/orgs", "repos_url": "https://api.github.com/users/PlatonB/repos", "events_url": "https://api.github.com/users/PlatonB/events{/privacy}", "received_events_url": "https://api.github.com/users/PlatonB/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-02T10:43:47Z", "updated_at": "2019-06-04T10:58:04Z", "closed_at": "2019-06-03T16:08:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "elementary OS 5.0\r\nPython 3.6.7\r\n\r\nIs it possible to solve this problem without configs editing?\r\n\r\n`db = dataset.connect(f'mysql+mysqlconnector://platon:<password>@localhost:3306{db_path}')`\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/mysql/connector/connection_cext.py\", line 179, in _open_connection\r\n    self._cmysql.connect(**cnx_kwargs)\r\n_mysql_connector.MySQLInterfaceError: Can't connect to MySQL server on 'localhost' (111)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py\", line 2262, in _wrap_pool_connect\r\n    return fn()\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 303, in unique_connection\r\n    return _ConnectionFairy._checkout(self)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 760, in _checkout\r\n    fairy = _ConnectionRecord.checkout(pool)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 492, in checkout\r\n    rec = pool._do_get()\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/impl.py\", line 139, in _do_get\r\n    self._dec_overflow()\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/util/langhelpers.py\", line 68, in __exit__\r\n    compat.reraise(exc_type, exc_value, exc_tb)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/util/compat.py\", line 129, in reraise\r\n    raise value\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/impl.py\", line 136, in _do_get\r\n    return self._create_connection()\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 308, in _create_connection\r\n    return _ConnectionRecord(self)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 437, in __init__\r\n    self.__connect(first_connect_check=True)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 639, in __connect\r\n    connection = pool._invoke_creator(self)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/strategies.py\", line 114, in connect\r\n    return dialect.connect(*cargs, **cparams)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/default.py\", line 451, in connect\r\n    return self.dbapi.connect(*cargs, **cparams)\r\n  File \"/usr/local/lib/python3.6/dist-packages/mysql/connector/__init__.py\", line 172, in connect\r\n    return CMySQLConnection(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/mysql/connector/connection_cext.py\", line 78, in __init__\r\n    self.connect(**kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/mysql/connector/abstracts.py\", line 736, in connect\r\n    self._open_connection()\r\n  File \"/usr/local/lib/python3.6/dist-packages/mysql/connector/connection_cext.py\", line 182, in _open_connection\r\n    sqlstate=exc.sqlstate)\r\nmysql.connector.errors.DatabaseError: 2003 (HY000): Can't connect to MySQL server on 'localhost' (111)\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/platon/_0_\u0414\u0438\u0441\u0441\u0435\u0440\u0442\u0430\u0446\u0438\u044f/00_\u0421\u043a\u0440\u0438\u043f\u0442\u044b/create_database.py\", line 41, in <module>\r\n    db_path = create_database('/home/platon/_0_\u0414\u0438\u0441\u0441\u0435\u0440\u0442\u0430\u0446\u0438\u044f/SQL_test/ALL.chr1_GRCh38.genotypes.20170504.vcf.gz', 130, [0, 1, 2])\r\n  File \"/home/platon/_0_\u0414\u0438\u0441\u0441\u0435\u0440\u0442\u0430\u0446\u0438\u044f/00_\u0421\u043a\u0440\u0438\u043f\u0442\u044b/create_database.py\", line 31, in create_database\r\n    table.insert(dict(zip(col_names, cells)))\r\n  File \"/usr/local/lib/python3.6/dist-packages/dataset/table.py\", line 79, in insert\r\n    row = self._sync_columns(row, ensure, types=types)\r\n  File \"/usr/local/lib/python3.6/dist-packages/dataset/table.py\", line 265, in _sync_columns\r\n    columns = self.columns\r\n  File \"/usr/local/lib/python3.6/dist-packages/dataset/table.py\", line 53, in columns\r\n    if not self.exists:\r\n  File \"/usr/local/lib/python3.6/dist-packages/dataset/table.py\", line 41, in exists\r\n    return self.name in self.db\r\n  File \"/usr/local/lib/python3.6/dist-packages/dataset/database.py\", line 147, in __contains__\r\n    return normalize_table_name(table_name) in self.tables\r\n  File \"/usr/local/lib/python3.6/dist-packages/dataset/database.py\", line 142, in tables\r\n    return self.inspect.get_table_names(schema=self.schema)\r\n  File \"/usr/local/lib/python3.6/dist-packages/dataset/database.py\", line 75, in inspect\r\n    return Inspector.from_engine(self.executable)\r\n  File \"/usr/local/lib/python3.6/dist-packages/dataset/database.py\", line 63, in executable\r\n    self.local.conn = self.engine.connect()\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py\", line 2193, in connect\r\n    return self._connection_cls(self, **kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py\", line 103, in __init__\r\n    else engine.raw_connection()\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py\", line 2293, in raw_connection\r\n    self.pool.unique_connection, _connection\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py\", line 2266, in _wrap_pool_connect\r\n    e, dialect, self\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py\", line 1536, in _handle_dbapi_exception_noconnection\r\n    util.raise_from_cause(sqlalchemy_exception, exc_info)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/util/compat.py\", line 383, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/util/compat.py\", line 128, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py\", line 2262, in _wrap_pool_connect\r\n    return fn()\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 303, in unique_connection\r\n    return _ConnectionFairy._checkout(self)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 760, in _checkout\r\n    fairy = _ConnectionRecord.checkout(pool)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 492, in checkout\r\n    rec = pool._do_get()\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/impl.py\", line 139, in _do_get\r\n    self._dec_overflow()\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/util/langhelpers.py\", line 68, in __exit__\r\n    compat.reraise(exc_type, exc_value, exc_tb)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/util/compat.py\", line 129, in reraise\r\n    raise value\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/impl.py\", line 136, in _do_get\r\n    return self._create_connection()\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 308, in _create_connection\r\n    return _ConnectionRecord(self)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 437, in __init__\r\n    self.__connect(first_connect_check=True)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/pool/base.py\", line 639, in __connect\r\n    connection = pool._invoke_creator(self)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/strategies.py\", line 114, in connect\r\n    return dialect.connect(*cargs, **cparams)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/default.py\", line 451, in connect\r\n    return self.dbapi.connect(*cargs, **cparams)\r\n  File \"/usr/local/lib/python3.6/dist-packages/mysql/connector/__init__.py\", line 172, in connect\r\n    return CMySQLConnection(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/mysql/connector/connection_cext.py\", line 78, in __init__\r\n    self.connect(**kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/mysql/connector/abstracts.py\", line 736, in connect\r\n    self._open_connection()\r\n  File \"/usr/local/lib/python3.6/dist-packages/mysql/connector/connection_cext.py\", line 182, in _open_connection\r\n    sqlstate=exc.sqlstate)\r\nsqlalchemy.exc.DatabaseError: (mysql.connector.errors.DatabaseError) 2003 (HY000): Can't connect to MySQL server on 'localhost' (111)\r\n(Background on this error at: http://sqlalche.me/e/4xp6)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/293", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/293/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/293/events", "html_url": "https://github.com/pudo/dataset/issues/293", "id": 444094553, "node_id": "MDU6SXNzdWU0NDQwOTQ1NTM=", "number": 293, "title": "how to create_index within definition of table?", "user": {"login": "beh333", "id": 32456695, "node_id": "MDQ6VXNlcjMyNDU2Njk1", "avatar_url": "https://avatars1.githubusercontent.com/u/32456695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beh333", "html_url": "https://github.com/beh333", "followers_url": "https://api.github.com/users/beh333/followers", "following_url": "https://api.github.com/users/beh333/following{/other_user}", "gists_url": "https://api.github.com/users/beh333/gists{/gist_id}", "starred_url": "https://api.github.com/users/beh333/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beh333/subscriptions", "organizations_url": "https://api.github.com/users/beh333/orgs", "repos_url": "https://api.github.com/users/beh333/repos", "events_url": "https://api.github.com/users/beh333/events{/privacy}", "received_events_url": "https://api.github.com/users/beh333/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157870, "node_id": "MDU6TGFiZWwzNDE1Nzg3MA==", "url": "https://api.github.com/repos/pudo/dataset/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-14T19:51:06Z", "updated_at": "2020-01-11T13:35:13Z", "closed_at": "2020-01-11T13:35:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi and thanks for dataset. I want to create indexes. I'd like to use table.create_index(), but this only takes effect after I create the table and insert data. The [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/create-index.html) recommends creating indexes when the table is defined, before any data goes in. Is there a way with dataset to define an empty table with indexes, as recommended by MySQL? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/292", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/292/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/292/events", "html_url": "https://github.com/pudo/dataset/issues/292", "id": 440261094, "node_id": "MDU6SXNzdWU0NDAyNjEwOTQ=", "number": 292, "title": "Unstable Errors", "user": {"login": "tarikaltuncu", "id": 4439117, "node_id": "MDQ6VXNlcjQ0MzkxMTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4439117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tarikaltuncu", "html_url": "https://github.com/tarikaltuncu", "followers_url": "https://api.github.com/users/tarikaltuncu/followers", "following_url": "https://api.github.com/users/tarikaltuncu/following{/other_user}", "gists_url": "https://api.github.com/users/tarikaltuncu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tarikaltuncu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tarikaltuncu/subscriptions", "organizations_url": "https://api.github.com/users/tarikaltuncu/orgs", "repos_url": "https://api.github.com/users/tarikaltuncu/repos", "events_url": "https://api.github.com/users/tarikaltuncu/events{/privacy}", "received_events_url": "https://api.github.com/users/tarikaltuncu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-03T23:53:26Z", "updated_at": "2019-07-13T12:24:26Z", "closed_at": "2019-07-13T12:24:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't work this through because of unexpected errors such as:\r\nBut it works from time to time..\r\n```\r\nimport dataset\r\ndb = dataset.connect('postgres://XYZ', schema='abc')\r\nnd = db['ijk']\r\nnd.insert(dict(ali='veli'))\r\n\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-11-01e6d3b86f0f> in <module>()\r\n----> 1 nd.insert(dict(ali='veli'))\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/dataset/table.py in insert(self, row, ensure, types)\r\n     77         Returns the inserted row's primary key.\r\n     78         \"\"\"\r\n---> 79         row = self._sync_columns(row, ensure, types=types)\r\n     80         res = self.db.executable.execute(self.table.insert(row))\r\n     81         if len(res.inserted_primary_key) > 0:\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/dataset/table.py in _sync_columns(self, row, ensure, types)\r\n    263         matching column.\r\n    264         \"\"\"\r\n--> 265         columns = self.columns\r\n    266         ensure = self._check_ensure(ensure)\r\n    267         types = types or {}\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/dataset/table.py in columns(self)\r\n     53         if not self.exists:\r\n     54             return []\r\n---> 55         return self.table.columns.keys()\r\n     56 \r\n     57     def has_column(self, column):\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/dataset/table.py in table(self)\r\n     45         \"\"\"Get a reference to the table, which may be reflected or created.\"\"\"\r\n     46         if self._table is None:\r\n---> 47             self._sync_table(())\r\n     48         return self._table\r\n     49 \r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/dataset/table.py in _sync_table(self, columns)\r\n    222         if self._table is None:\r\n    223             # Load an existing table from the database.\r\n--> 224             self._reflect_table()\r\n    225         if self._table is None:\r\n    226             # Create the table with an initial set of columns.\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/dataset/table.py in _reflect_table(self)\r\n    207                                         self.db.metadata,\r\n    208                                         schema=self.db.schema,\r\n--> 209                                         autoload=True)\r\n    210             except NoSuchTableError:\r\n    211                 pass\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/sqlalchemy/sql/schema.py in __new__(cls, *args, **kw)\r\n    455             except:\r\n    456                 with util.safe_reraise():\r\n--> 457                     metadata._remove_table(name, schema)\r\n    458 \r\n    459     @property\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py in __exit__(self, type_, value, traceback)\r\n     64             self._exc_info = None   # remove potential circular references\r\n     65             if not self.warn_only:\r\n---> 66                 compat.reraise(exc_type, exc_value, exc_tb)\r\n     67         else:\r\n     68             if not compat.py3k and self._exc_info and self._exc_info[1]:\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/sqlalchemy/util/compat.py in reraise(tp, value, tb, cause)\r\n    247         if value.__traceback__ is not tb:\r\n    248             raise value.with_traceback(tb)\r\n--> 249         raise value\r\n    250 \r\n    251 else:\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/sqlalchemy/sql/schema.py in __new__(cls, *args, **kw)\r\n    450             metadata._add_table(name, schema, table)\r\n    451             try:\r\n--> 452                 table._init(name, metadata, *args, **kw)\r\n    453                 table.dispatch.after_parent_attach(table, metadata)\r\n    454                 return table\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/sqlalchemy/sql/schema.py in _init(self, name, metadata, *args, **kwargs)\r\n    532             self._autoload(\r\n    533                 metadata, autoload_with,\r\n--> 534                 include_columns, _extend_on=_extend_on)\r\n    535 \r\n    536         # initialize all the column, etc. objects.  done after reflection to\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/sqlalchemy/sql/schema.py in _autoload(self, metadata, autoload_with, include_columns, exclude_columns, _extend_on)\r\n    558                 bind.dialect.reflecttable,\r\n    559                 self, include_columns, exclude_columns,\r\n--> 560                 _extend_on=_extend_on\r\n    561             )\r\n    562 \r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/sqlalchemy/engine/base.py in run_callable(self, callable_, *args, **kwargs)\r\n   1543 \r\n   1544         \"\"\"\r\n-> 1545         return callable_(self, *args, **kwargs)\r\n   1546 \r\n   1547     def _run_visitor(self, visitorcallable, element, **kwargs):\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/sqlalchemy/engine/default.py in reflecttable(self, connection, table, include_columns, exclude_columns, **opts)\r\n    389         insp = reflection.Inspector.from_engine(connection)\r\n    390         return insp.reflecttable(\r\n--> 391             table, include_columns, exclude_columns, **opts)\r\n    392 \r\n    393     def get_pk_constraint(self, conn, table_name, schema=None, **kw):\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/sqlalchemy/engine/reflection.py in reflecttable(self, table, include_columns, exclude_columns, _extend_on)\r\n    621             self._reflect_column(\r\n    622                 table, col_d, include_columns,\r\n--> 623                 exclude_columns, cols_by_orig_name)\r\n    624 \r\n    625         if not found_table:\r\n\r\n~/.pyenv/versions/3.6.5/envs/general3/lib/python3.6/site-packages/sqlalchemy/engine/reflection.py in _reflect_column(self, table, col_d, include_columns, exclude_columns, cols_by_orig_name)\r\n    675         if col_d.get('default') is not None:\r\n    676             default = col_d['default']\r\n--> 677             if isinstance(default, sql.elements.TextClause):\r\n    678                 default = sa_schema.DefaultClause(default, _reflected=True)\r\n    679             elif not isinstance(default, sa_schema.FetchedValue):\r\n\r\nAttributeError: module 'sqlalchemy.sql' has no attribute 'elements'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/290", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/290/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/290/events", "html_url": "https://github.com/pudo/dataset/issues/290", "id": 427401127, "node_id": "MDU6SXNzdWU0Mjc0MDExMjc=", "number": 290, "title": "Upsert with unset keys overwrites every single entry in table", "user": {"login": "Jereviendrai", "id": 7254040, "node_id": "MDQ6VXNlcjcyNTQwNDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7254040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jereviendrai", "html_url": "https://github.com/Jereviendrai", "followers_url": "https://api.github.com/users/Jereviendrai/followers", "following_url": "https://api.github.com/users/Jereviendrai/following{/other_user}", "gists_url": "https://api.github.com/users/Jereviendrai/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jereviendrai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jereviendrai/subscriptions", "organizations_url": "https://api.github.com/users/Jereviendrai/orgs", "repos_url": "https://api.github.com/users/Jereviendrai/repos", "events_url": "https://api.github.com/users/Jereviendrai/events{/privacy}", "received_events_url": "https://api.github.com/users/Jereviendrai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157868, "node_id": "MDU6TGFiZWwzNDE1Nzg2OA==", "url": "https://api.github.com/repos/pudo/dataset/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-31T14:12:41Z", "updated_at": "2020-01-11T12:47:44Z", "closed_at": "2020-01-11T12:47:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm upserting into a table, using the auto-generated 'id' column as primary key. The item I'm upserting into the table is either an existing item which has 'id' set, or a newly created dict which does not contain the 'id' key at all. In the latter case, I would've expected a new row to be created with an auto-generated id. However, instead, every single existing row is updated to the value of the dict:\r\n\r\n\r\n```\r\nnew_item = {\"foo\": \"bar\"}\r\ntable.upsert(new_item, ['id'])\r\n```\r\n\r\nExpected behaviour: A new row is created with `foo` set to `bar` and `id` set to the next auto-increment value\r\n\r\nActual behaviour: Every single existing row is updated so that `foo` is set to `bar`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/289", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/289/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/289/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/289/events", "html_url": "https://github.com/pudo/dataset/issues/289", "id": 420676078, "node_id": "MDU6SXNzdWU0MjA2NzYwNzg=", "number": 289, "title": "Supporting find \"not in\"", "user": {"login": "impredicative", "id": 566650, "node_id": "MDQ6VXNlcjU2NjY1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/566650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/impredicative", "html_url": "https://github.com/impredicative", "followers_url": "https://api.github.com/users/impredicative/followers", "following_url": "https://api.github.com/users/impredicative/following{/other_user}", "gists_url": "https://api.github.com/users/impredicative/gists{/gist_id}", "starred_url": "https://api.github.com/users/impredicative/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/impredicative/subscriptions", "organizations_url": "https://api.github.com/users/impredicative/orgs", "repos_url": "https://api.github.com/users/impredicative/repos", "events_url": "https://api.github.com/users/impredicative/events{/privacy}", "received_events_url": "https://api.github.com/users/impredicative/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-13T19:18:58Z", "updated_at": "2019-03-17T13:23:41Z", "closed_at": "2019-03-17T13:23:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a request for the `not in` comparison operator for use with `.find()`. It is not currently among the ones documented at https://dataset.readthedocs.io/en/latest/quickstart.html#reading-data-from-tables\r\n\r\nHow would I currently run such a query with `dataset`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/288", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/288/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/288/events", "html_url": "https://github.com/pudo/dataset/issues/288", "id": 420004379, "node_id": "MDU6SXNzdWU0MjAwMDQzNzk=", "number": 288, "title": "In autogeneration of tables datatype always text for varchar columns", "user": {"login": "aartijain", "id": 4479599, "node_id": "MDQ6VXNlcjQ0Nzk1OTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4479599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aartijain", "html_url": "https://github.com/aartijain", "followers_url": "https://api.github.com/users/aartijain/followers", "following_url": "https://api.github.com/users/aartijain/following{/other_user}", "gists_url": "https://api.github.com/users/aartijain/gists{/gist_id}", "starred_url": "https://api.github.com/users/aartijain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aartijain/subscriptions", "organizations_url": "https://api.github.com/users/aartijain/orgs", "repos_url": "https://api.github.com/users/aartijain/repos", "events_url": "https://api.github.com/users/aartijain/events{/privacy}", "received_events_url": "https://api.github.com/users/aartijain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-12T14:04:01Z", "updated_at": "2019-07-13T12:21:09Z", "closed_at": "2019-07-13T12:21:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to create a table using dataset from a CSV file. Why dataset generates all columns text instead of varchar. CSV content is as follow:\r\n\r\napplicationCode,orderId,orderStatus,brandCode,orderType,channelTypeCode,channelSourceCode,emailAddress,orderCreatedDateTime,orderUpdatedDateTime,referralCode,salesAgentId,salesAgentName,totals_orderShippingTaxed,totals_orderShippingTaxAmount,totals_orderSubtotalTaxed,totals_orderSubtotalTaxAmount,totals_totalOrderDiscount,totals_grandTotalTaxed,totals_grandTotalTaxAmount,totals_orderCurrencyCode,etl_ref\r\nABC00,4000080771,NEW,TE,ZO01,TEST,TEST,abc@example.com,2019-02-22T09:01:01Z,,,,,9,,64,,,64,,GBP,d7506e0c-f708-451f-aec3-204ce155f901\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/287", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/287/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/287/events", "html_url": "https://github.com/pudo/dataset/issues/287", "id": 418962170, "node_id": "MDU6SXNzdWU0MTg5NjIxNzA=", "number": 287, "title": "Official Python 3.7 support", "user": {"login": "impredicative", "id": 566650, "node_id": "MDQ6VXNlcjU2NjY1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/566650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/impredicative", "html_url": "https://github.com/impredicative", "followers_url": "https://api.github.com/users/impredicative/followers", "following_url": "https://api.github.com/users/impredicative/following{/other_user}", "gists_url": "https://api.github.com/users/impredicative/gists{/gist_id}", "starred_url": "https://api.github.com/users/impredicative/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/impredicative/subscriptions", "organizations_url": "https://api.github.com/users/impredicative/orgs", "repos_url": "https://api.github.com/users/impredicative/repos", "events_url": "https://api.github.com/users/impredicative/events{/privacy}", "received_events_url": "https://api.github.com/users/impredicative/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-08T21:21:35Z", "updated_at": "2019-03-09T10:40:06Z", "closed_at": "2019-03-09T10:39:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the status of official support of `dataset` for Python 3.7? Can it be included in `setup.py` too? Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/286", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/286/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/286/events", "html_url": "https://github.com/pudo/dataset/issues/286", "id": 412852278, "node_id": "MDU6SXNzdWU0MTI4NTIyNzg=", "number": 286, "title": "Create user-defined function", "user": {"login": "luboss", "id": 1175150, "node_id": "MDQ6VXNlcjExNzUxNTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1175150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luboss", "html_url": "https://github.com/luboss", "followers_url": "https://api.github.com/users/luboss/followers", "following_url": "https://api.github.com/users/luboss/following{/other_user}", "gists_url": "https://api.github.com/users/luboss/gists{/gist_id}", "starred_url": "https://api.github.com/users/luboss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luboss/subscriptions", "organizations_url": "https://api.github.com/users/luboss/orgs", "repos_url": "https://api.github.com/users/luboss/repos", "events_url": "https://api.github.com/users/luboss/events{/privacy}", "received_events_url": "https://api.github.com/users/luboss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-21T10:27:49Z", "updated_at": "2019-07-15T10:03:30Z", "closed_at": "2019-07-13T12:11:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking for a feature to create user defined function that will be able to use in SQL queries. Sqlite3 module does allow this:\r\n`sqlite3.Connection.create_function(name, num_params, func)`\r\n\r\nIs it possible to leverage this feature? SQLAlchemy is also capable of this using the register() method.\r\nI'm using _sqlite:///:memory:_ as database engine. I could load the created database with sqlite module but I'm sure there must be better way to do it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/283", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/283/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/283/events", "html_url": "https://github.com/pudo/dataset/issues/283", "id": 409774969, "node_id": "MDU6SXNzdWU0MDk3NzQ5Njk=", "number": 283, "title": "SQLite: StaticPool leads to never closed file descriptors", "user": {"login": "pohmelie", "id": 2385765, "node_id": "MDQ6VXNlcjIzODU3NjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2385765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pohmelie", "html_url": "https://github.com/pohmelie", "followers_url": "https://api.github.com/users/pohmelie/followers", "following_url": "https://api.github.com/users/pohmelie/following{/other_user}", "gists_url": "https://api.github.com/users/pohmelie/gists{/gist_id}", "starred_url": "https://api.github.com/users/pohmelie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pohmelie/subscriptions", "organizations_url": "https://api.github.com/users/pohmelie/orgs", "repos_url": "https://api.github.com/users/pohmelie/repos", "events_url": "https://api.github.com/users/pohmelie/events{/privacy}", "received_events_url": "https://api.github.com/users/pohmelie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-13T12:10:54Z", "updated_at": "2020-01-11T15:47:18Z", "closed_at": "2020-01-11T13:42:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\r\ndb = dataset.connect(\"sqlite:///test.sqlite\")\r\n# lsof -p pid | grep test\r\n# nothing\r\nprint(db.tables)\r\n# lsof\r\n# ... /path/to/test.sqlite\r\ndel db\r\n# lsof\r\n# ... /path/to/test.sqlite\r\ndb = dataset.connect(\"sqlite:///test.sqlite\")\r\nprint(db.tables)\r\n# lsof\r\n# ... /path/to/test.sqlite\r\n# ... /path/to/test.sqlite\r\n```\r\nDataset [forces to use `StaticPool`](https://github.com/pudo/dataset/blob/master/dataset/database.py#L36), but this leads to reaching opened file descriptors limit. So after some time you can't accept sockets nor open files. We have case, where our code use hundreds of sqlite db files.\r\n\r\nWorkaround is to use default pool:\r\n``` python\r\ndb = dataset.connect(url, , engine_kwargs=dict(poolclass=None))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/282", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/282/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/282/events", "html_url": "https://github.com/pudo/dataset/issues/282", "id": 408872515, "node_id": "MDU6SXNzdWU0MDg4NzI1MTU=", "number": 282, "title": "MSSQL: Error when creating a new table without primary_keys", "user": {"login": "douglasfabretti", "id": 1675415, "node_id": "MDQ6VXNlcjE2NzU0MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1675415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/douglasfabretti", "html_url": "https://github.com/douglasfabretti", "followers_url": "https://api.github.com/users/douglasfabretti/followers", "following_url": "https://api.github.com/users/douglasfabretti/following{/other_user}", "gists_url": "https://api.github.com/users/douglasfabretti/gists{/gist_id}", "starred_url": "https://api.github.com/users/douglasfabretti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/douglasfabretti/subscriptions", "organizations_url": "https://api.github.com/users/douglasfabretti/orgs", "repos_url": "https://api.github.com/users/douglasfabretti/repos", "events_url": "https://api.github.com/users/douglasfabretti/events{/privacy}", "received_events_url": "https://api.github.com/users/douglasfabretti/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157868, "node_id": "MDU6TGFiZWwzNDE1Nzg2OA==", "url": "https://api.github.com/repos/pudo/dataset/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-11T16:43:10Z", "updated_at": "2020-01-11T13:41:04Z", "closed_at": "2020-01-11T13:41:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there folks.\r\n\r\nI'm new using dataset, I'm evaluating it to a new project that I'm working on.\r\n\r\nI just tried to create a new table with no primary key (primary_id=False):\r\n\r\n```python\r\ndb = dataset.connect('mssql+pymssql://User:Password@Server:1433/database?charset=utf8')\r\ntable = db.create_table('test', primary_id=False)\r\ntable\r\n```\r\n\r\nAnd faced the following the exception, I'm not sure if I missed anything or if this is a bug:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"src\\pymssql.pyx\", line 448, in pymssql.Cursor.execute\r\n  File \"src\\_mssql.pyx\", line 1064, in _mssql.MSSQLConnection.execute_query\r\n  File \"src\\_mssql.pyx\", line 1095, in _mssql.MSSQLConnection.execute_query\r\n  File \"src\\_mssql.pyx\", line 1228, in _mssql.MSSQLConnection.format_and_run_query\r\n  File \"src\\_mssql.pyx\", line 1639, in _mssql.check_cancel_and_raise\r\n  File \"src\\_mssql.pyx\", line 1683, in _mssql.maybe_raise_MSSQLDatabaseException\r\n_mssql.MSSQLDatabaseException: (102, b\"Incorrect syntax near ')'.DB-Lib error message 20018, severity 15:\\nGeneral SQL Server error: Check messages from the SQL Server\\n\")\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1193, in _execute_context\r\n    context)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 509, in do_execute\r\n    cursor.execute(statement, parameters)\r\n  File \"src\\pymssql.pyx\", line 465, in pymssql.Cursor.execute\r\npymssql.ProgrammingError: (102, b\"Incorrect syntax near ')'.DB-Lib error message 20018, severity 15:\\nGeneral SQL Server error: Check messages from the SQL Server\\n\")\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\dataset\\table.py\", line 586, in __repr__\r\n    return '<Table(%s)>' % self.table.name\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\dataset\\table.py\", line 47, in table\r\n    self._sync_table(())\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\dataset\\table.py\", line 248, in _sync_table\r\n    self._table.create(self.db.executable, checkfirst=True)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\sql\\schema.py\", line 779, in create\r\n    checkfirst=checkfirst)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1549, in _run_visitor\r\n    **kwargs).traverse_single(element)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\sql\\visitors.py\", line 121, in traverse_single\r\n    return meth(obj, **kw)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\sql\\ddl.py\", line 791, in visit_table\r\n    include_foreign_key_constraints=include_foreign_key_constraints\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 948, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\sql\\ddl.py\", line 68, in _execute_on_connection\r\n    return connection._execute_ddl(self, multiparams, params)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1009, in _execute_ddl\r\n    compiled\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1200, in _execute_context\r\n    context)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1413, in _handle_dbapi_exception\r\n    exc_info\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 265, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 248, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1193, in _execute_context\r\n    context)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 509, in do_execute\r\n    cursor.execute(statement, parameters)\r\n  File \"src\\pymssql.pyx\", line 465, in pymssql.Cursor.execute\r\nsqlalchemy.exc.ProgrammingError: (pymssql.ProgrammingError) (102, b\"Incorrect syntax near ')'.DB-Lib error message 20018, severity 15:\\nGeneral SQL Server error: Check messages from the SQL Server\\n\") [SQL: '\\nCREATE TABLE test (\\n)\\n\\n'] (Background on this error at: http://sqlalche.me/e/f405)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/281", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/281/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/281/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/281/events", "html_url": "https://github.com/pudo/dataset/issues/281", "id": 408577036, "node_id": "MDU6SXNzdWU0MDg1NzcwMzY=", "number": 281, "title": "cannot create table after load_table", "user": {"login": "allanberry", "id": 735153, "node_id": "MDQ6VXNlcjczNTE1Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/735153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allanberry", "html_url": "https://github.com/allanberry", "followers_url": "https://api.github.com/users/allanberry/followers", "following_url": "https://api.github.com/users/allanberry/following{/other_user}", "gists_url": "https://api.github.com/users/allanberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/allanberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allanberry/subscriptions", "organizations_url": "https://api.github.com/users/allanberry/orgs", "repos_url": "https://api.github.com/users/allanberry/repos", "events_url": "https://api.github.com/users/allanberry/events{/privacy}", "received_events_url": "https://api.github.com/users/allanberry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-10T20:46:46Z", "updated_at": "2019-07-13T12:31:49Z", "closed_at": "2019-07-13T12:31:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, good software; thanks.\r\n\r\nI bumped into this; seems like a bug to me, but as I'm new to the system, I might have missed something.\r\n\r\nThis works fine:\r\n\r\n```python\r\ndb = dataset.connect('sqlite:///data/stuff.db')\r\ntable = db['people']\r\ntable.insert(dict(name='John Doe', age=46, country='China'))\r\n```\r\n\r\nBut if I try and make a table after checking whether it exists, it fails:\r\n\r\n```python\r\ndb = dataset.connect('sqlite:///data/stuff.db')\r\nif not db.load_table('people'):\r\n    table = db['people']\r\n    table.insert(dict(name='John Doe', age=46, country='China'))\r\n```\r\n\r\nI get this:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"visit.py\", line 11, in <module>\r\n    table.insert(dict(name='John Doe', age=46, country='China'))\r\n  File \"/Users/allanberry/.local/share/virtualenvs/webcat-DZ0rpZOL/lib/python3.7/site-packages/dataset/table.py\", line 79, in insert\r\n    row = self._sync_columns(row, ensure, types=types)\r\n  File \"/Users/allanberry/.local/share/virtualenvs/webcat-DZ0rpZOL/lib/python3.7/site-packages/dataset/table.py\", line 281, in _sync_columns\r\n    self._sync_table(sync_columns)\r\n  File \"/Users/allanberry/.local/share/virtualenvs/webcat-DZ0rpZOL/lib/python3.7/site-packages/dataset/table.py\", line 228, in _sync_table\r\n    raise DatasetException(\"Table does not exist: %s\" % self.name)\r\ndataset.util.DatasetException: Table does not exist: people\r\n```\r\n\r\nIf the table doesn't exist, shouldn't it just create it, regardless of whether it's in the `if not` clause?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/279", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/279/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/279/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/279/events", "html_url": "https://github.com/pudo/dataset/issues/279", "id": 403493945, "node_id": "MDU6SXNzdWU0MDM0OTM5NDU=", "number": 279, "title": "connect() doesn't work on Path objects", "user": {"login": "apnewberry", "id": 31109952, "node_id": "MDQ6VXNlcjMxMTA5OTUy", "avatar_url": "https://avatars1.githubusercontent.com/u/31109952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apnewberry", "html_url": "https://github.com/apnewberry", "followers_url": "https://api.github.com/users/apnewberry/followers", "following_url": "https://api.github.com/users/apnewberry/following{/other_user}", "gists_url": "https://api.github.com/users/apnewberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/apnewberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apnewberry/subscriptions", "organizations_url": "https://api.github.com/users/apnewberry/orgs", "repos_url": "https://api.github.com/users/apnewberry/repos", "events_url": "https://api.github.com/users/apnewberry/events{/privacy}", "received_events_url": "https://api.github.com/users/apnewberry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157873, "node_id": "MDU6TGFiZWwzNDE1Nzg3Mw==", "url": "https://api.github.com/repos/pudo/dataset/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-26T23:11:13Z", "updated_at": "2019-07-13T12:12:30Z", "closed_at": "2019-07-13T12:12:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "[As of Python 3.7](https://bugs.python.org/issue33496), `sqlite3.connect(path)` accepts Pathlike objects like `pathlib.Path`. This doesn't work in dataset.\r\n\r\n```\r\n>>> import dataset, pathlib\r\n>>> dataset.connect(pathlib.Path('db'))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/.envs/env/lib/python3.7/site-packages/dataset/__init__.py\", line 42, in connect\r\n    ensure_schema=ensure_schema, row_type=row_type)\r\n  File \"/home/user/.envs/env/lib/python3.7/site-packages/dataset/database.py\", line 35, in __init__\r\n    parsed_url = urlparse(url)\r\n  File \"/usr/lib/python3.7/urllib/parse.py\", line 367, in urlparse\r\n    url, scheme, _coerce_result = _coerce_args(url, scheme)\r\n  File \"/usr/lib/python3.7/urllib/parse.py\", line 123, in _coerce_args\r\n    return _decode_args(args) + (_encode_result,)\r\n  File \"/usr/lib/python3.7/urllib/parse.py\", line 107, in _decode_args\r\n    return tuple(x.decode(encoding, errors) if x else '' for x in args)\r\n  File \"/usr/lib/python3.7/urllib/parse.py\", line 107, in <genexpr>\r\n    return tuple(x.decode(encoding, errors) if x else '' for x in args)\r\nAttributeError: 'PosixPath' object has no attribute 'decode'\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/278", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/278/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/278/events", "html_url": "https://github.com/pudo/dataset/issues/278", "id": 402899189, "node_id": "MDU6SXNzdWU0MDI4OTkxODk=", "number": 278, "title": "Using MySQL Example?", "user": {"login": "liquidgenius", "id": 3987909, "node_id": "MDQ6VXNlcjM5ODc5MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3987909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liquidgenius", "html_url": "https://github.com/liquidgenius", "followers_url": "https://api.github.com/users/liquidgenius/followers", "following_url": "https://api.github.com/users/liquidgenius/following{/other_user}", "gists_url": "https://api.github.com/users/liquidgenius/gists{/gist_id}", "starred_url": "https://api.github.com/users/liquidgenius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liquidgenius/subscriptions", "organizations_url": "https://api.github.com/users/liquidgenius/orgs", "repos_url": "https://api.github.com/users/liquidgenius/repos", "events_url": "https://api.github.com/users/liquidgenius/events{/privacy}", "received_events_url": "https://api.github.com/users/liquidgenius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-24T21:17:03Z", "updated_at": "2019-01-26T01:23:48Z", "closed_at": "2019-01-26T01:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any additional documentation or examples using a MySQL database? I would like to migrate an application using SQLite to MySQL and found the provided documentation a little sparse. I love the simplicity of Dataset BTW.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/275", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/275/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/275/events", "html_url": "https://github.com/pudo/dataset/issues/275", "id": 395977615, "node_id": "MDU6SXNzdWUzOTU5Nzc2MTU=", "number": 275, "title": "Queries not formatted correctly for SQLite", "user": {"login": "tinder-haroldmartin", "id": 30417889, "node_id": "MDQ6VXNlcjMwNDE3ODg5", "avatar_url": "https://avatars3.githubusercontent.com/u/30417889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinder-haroldmartin", "html_url": "https://github.com/tinder-haroldmartin", "followers_url": "https://api.github.com/users/tinder-haroldmartin/followers", "following_url": "https://api.github.com/users/tinder-haroldmartin/following{/other_user}", "gists_url": "https://api.github.com/users/tinder-haroldmartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinder-haroldmartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinder-haroldmartin/subscriptions", "organizations_url": "https://api.github.com/users/tinder-haroldmartin/orgs", "repos_url": "https://api.github.com/users/tinder-haroldmartin/repos", "events_url": "https://api.github.com/users/tinder-haroldmartin/events{/privacy}", "received_events_url": "https://api.github.com/users/tinder-haroldmartin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157868, "node_id": "MDU6TGFiZWwzNDE1Nzg2OA==", "url": "https://api.github.com/repos/pudo/dataset/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-04T16:03:35Z", "updated_at": "2020-01-11T12:33:15Z", "closed_at": "2020-01-11T12:33:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using SQLite, running a query like `elderly_users = table.find(age={'=': 70})` results in the error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1193, in _execute_context\r\n    context)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 509, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlite3.InterfaceError: Error binding parameter 0 - probably unsupported type.\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"db_open.py\", line 6, in <module>\r\n    two = table.find(age={'=': 70})\r\n  File \"/usr/local/lib/python3.7/site-packages/dataset/table.py\", line 474, in find\r\n    return ResultIter(conn.execute(query),\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 948, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/sql/elements.py\", line 269, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1060, in _execute_clauseelement\r\n    compiled_sql, distilled_params\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1200, in _execute_context\r\n    context)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1413, in _handle_dbapi_exception\r\n    exc_info\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 265, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 248, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1193, in _execute_context\r\n    context)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 509, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.InterfaceError: <exception str() failed>\r\n```\r\n\r\n\r\nInspecting the thrown `sqlalchemy.exc.InterfaceError` shows that the query and params are passed as:\r\n```\r\nSELECT <...>\r\nFROM user \r\nWHERE user.age = ?\r\n LIMIT ? OFFSET ?\r\n({'=': 70}, -1, 0)\r\n```\r\n\r\nSo it appears that the WHERE clause is not correctly stringified.\r\nI tried to verify this theory and noticed that `elderly_users = table.find(age=70)` works as expected", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/274", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/274/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/274/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/274/events", "html_url": "https://github.com/pudo/dataset/issues/274", "id": 395737598, "node_id": "MDU6SXNzdWUzOTU3Mzc1OTg=", "number": 274, "title": "Unable to Pip Install Dataset", "user": {"login": "liquidgenius", "id": 3987909, "node_id": "MDQ6VXNlcjM5ODc5MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3987909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liquidgenius", "html_url": "https://github.com/liquidgenius", "followers_url": "https://api.github.com/users/liquidgenius/followers", "following_url": "https://api.github.com/users/liquidgenius/following{/other_user}", "gists_url": "https://api.github.com/users/liquidgenius/gists{/gist_id}", "starred_url": "https://api.github.com/users/liquidgenius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liquidgenius/subscriptions", "organizations_url": "https://api.github.com/users/liquidgenius/orgs", "repos_url": "https://api.github.com/users/liquidgenius/repos", "events_url": "https://api.github.com/users/liquidgenius/events{/privacy}", "received_events_url": "https://api.github.com/users/liquidgenius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-01-03T21:52:58Z", "updated_at": "2019-02-06T13:43:10Z", "closed_at": "2019-02-06T13:42:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "After a clean install of OSX Mojave 10.14.2 I can no longer PIP install Dataset into a Anaconda Python3.6.5 environment. The error below lists GCC as a problem during the build. I attempted to install GCC again using Homebrew to no avail. I then wiped and reinstalled Mojave with the same results.\r\n\r\nI also attempted to PIP install Dataset into the root system environment with the same results.\r\n\r\nI can install other python modules into both the root system and Anaconda environments.\r\n\r\nAny direction on getting Dataset working again would be greatly appreciated. Errors below:\r\n\r\n> Collecting dataset\r\n>   Using cached https://files.pythonhosted.org/packages/ba/76/5b8fe80f487bfa90b8d0094c3a27150fe797b1fbe02dec31b048fd52448d/dataset-1.1.0-py2.py3-none-any.whl\r\n> Collecting sqlalchemy>=1.1.0 (from dataset)\r\n> Requirement already satisfied: six>=1.11.0 in /Users/jz/anaconda3/envs/bridge/lib/python3.6/site-packages (from dataset) (1.12.0)\r\n> Collecting normality>=0.5.1 (from dataset)\r\n>   Using cached https://files.pythonhosted.org/packages/7f/38/9ed937afe0fe95a281180d8820d46eb955bc1b0f656f3b301635608a5c1f/normality-1.0.0-py2.py3-none-any.whl\r\n> Collecting alembic>=0.6.2 (from dataset)\r\n> Collecting banal>=0.4.1 (from normality>=0.5.1->dataset)\r\n>   Using cached https://files.pythonhosted.org/packages/27/07/376d107ccf0dd80efdd8e4310b1d7d34a2d54f5389f946d58950c6dd70cc/banal-0.4.2-py2.py3-none-any.whl\r\n> Collecting chardet (from normality>=0.5.1->dataset)\r\n>   Using cached https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl\r\n> Collecting pyicu>=1.9.3 (from normality>=0.5.1->dataset)\r\n>   Using cached https://files.pythonhosted.org/packages/c2/15/0af20b540c828943b6ffea5677c86e908dcac108813b522adebb75c827c1/PyICU-2.2.tar.gz\r\n> Collecting Mako (from alembic>=0.6.2->dataset)\r\n> Requirement already satisfied: python-dateutil in /Users/jz/anaconda3/envs/bridge/lib/python3.6/site-packages (from alembic>=0.6.2->dataset) (2.7.5)\r\n> Collecting python-editor>=0.3 (from alembic>=0.6.2->dataset)\r\n> Collecting MarkupSafe>=0.9.2 (from Mako->alembic>=0.6.2->dataset)\r\n>   Using cached https://files.pythonhosted.org/packages/da/fc/2979c425ad23d528d6ac2e1f3efdc28e572fa1e1fbd5a75171cbdd7ddaa5/MarkupSafe-1.1.0-cp36-cp36m-macosx_10_6_intel.whl\r\n> Building wheels for collected packages: pyicu\r\n>   Running setup.py bdist_wheel for pyicu: started\r\n>   Running setup.py bdist_wheel for pyicu: finished with status 'error'\r\n>   Complete output from command /Users/jz/anaconda3/envs/bridge/bin/python -u -c \"import setuptools, tokenize;__file__='/private/var/folders/8v/wnw63nls49572vj7073gzn4w0000gn/T/pycharm-packaging/pyicu/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" bdist_wheel -d /private/var/folders/8v/wnw63nls49572vj7073gzn4w0000gn/T/pip-wheel-q_nht7jo --python-tag cp36:\r\n>   \r\n>   Building PyICU 2.2 for ICU 58.2\r\n>   \r\n>   Adding CXXFLAGS=\"-I/Users/jz/anaconda3/include\" from /Users/jz/anaconda3/bin/icu-config\r\n>   Adding LDFLAGS=\"-Wl,-rpath,/Users/jz/anaconda3/lib -L/Users/jz/anaconda3/lib -licui18n -licuuc -licudata\" from /Users/jz/anaconda3/bin/icu-config\r\n>   running bdist_wheel\r\n>   running build\r\n>   running build_py\r\n>   creating build\r\n>   creating build/lib.macosx-10.7-x86_64-3.6\r\n>   copying PyICU.py -> build/lib.macosx-10.7-x86_64-3.6\r\n>   creating build/lib.macosx-10.7-x86_64-3.6/icu\r\n>   copying icu/__init__.py -> build/lib.macosx-10.7-x86_64-3.6/icu\r\n>   warning: build_py: byte-compiling is disabled, skipping.\r\n>   \r\n>   running build_ext\r\n>   building '_icu' extension\r\n>   creating build/temp.macosx-10.7-x86_64-3.6\r\n>   gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/jz/anaconda3/envs/bridge/include -arch x86_64 -I/Users/jz/anaconda3/envs/bridge/include -arch x86_64 -I/Users/jz/anaconda3/envs/bridge/include/python3.6m -c _icu.cpp -o build/temp.macosx-10.7-x86_64-3.6/_icu.o -DPYICU_VER=\"2.2\" -I/Users/jz/anaconda3/include\r\n>   warning: include path for stdlibc++ headers not found; pass '-std=libc++' on the command line to use the libc++ standard library instead [-Wstdlibcxx-not-found]\r\n>   In file included from _icu.cpp:27:\r\n>   ./common.h:38:13: error: unknown type name 'decltype'\r\n>       typedef decltype(nullptr) nullptr_t;\r\n>               ^\r\n>   ./common.h:38:30: error: expected ';' after top level declarator\r\n>       typedef decltype(nullptr) nullptr_t;\r\n>                                ^\r\n>                                ;\r\n>   In file included from _icu.cpp:27:\r\n>   In file included from ./common.h:106:\r\n>   In file included from /Users/jz/anaconda3/include/unicode/unistr.h:33:\r\n>   /Users/jz/anaconda3/include/unicode/std_string.h:35:10: fatal error: 'string' file not found\r\n>   #include <string>\r\n>            ^~~~~~~~\r\n>   1 warning and 3 errors generated.\r\n>   error: command 'gcc' failed with exit status 1\r\n>   \r\n>   ----------------------------------------\r\n>   Running setup.py clean for pyicu\r\n> Failed to build pyicu\r\n> Installing collected packages: sqlalchemy, banal, chardet, pyicu, normality, MarkupSafe, Mako, python-editor, alembic, dataset\r\n>   Running setup.py install for pyicu: started\r\n>     Running setup.py install for pyicu: finished with status 'error'\r\n>     Complete output from command /Users/jz/anaconda3/envs/bridge/bin/python -u -c \"import setuptools, tokenize;__file__='/private/var/folders/8v/wnw63nls49572vj7073gzn4w0000gn/T/pycharm-packaging/pyicu/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /private/var/folders/8v/wnw63nls49572vj7073gzn4w0000gn/T/pip-record-yz3yw6d5/install-record.txt --single-version-externally-managed --compile:\r\n>     \r\n>     Building PyICU 2.2 for ICU 58.2\r\n>     \r\n>     Adding CXXFLAGS=\"-I/Users/jz/anaconda3/include\" from /Users/jz/anaconda3/bin/icu-config\r\n>     Adding LDFLAGS=\"-Wl,-rpath,/Users/jz/anaconda3/lib -L/Users/jz/anaconda3/lib -licui18n -licuuc -licudata\" from /Users/jz/anaconda3/bin/icu-config\r\n>     running install\r\n>     running build\r\n>     running build_py\r\n>     creating build\r\n>     creating build/lib.macosx-10.7-x86_64-3.6\r\n>     copying PyICU.py -> build/lib.macosx-10.7-x86_64-3.6\r\n>     creating build/lib.macosx-10.7-x86_64-3.6/icu\r\n>     copying icu/__init__.py -> build/lib.macosx-10.7-x86_64-3.6/icu\r\n>     warning: build_py: byte-compiling is disabled, skipping.\r\n>     \r\n>     running build_ext\r\n>     building '_icu' extension\r\n>     creating build/temp.macosx-10.7-x86_64-3.6\r\n>     gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/jz/anaconda3/envs/bridge/include -arch x86_64 -I/Users/jz/anaconda3/envs/bridge/include -arch x86_64 -I/Users/jz/anaconda3/envs/bridge/include/python3.6m -c _icu.cpp -o build/temp.macosx-10.7-x86_64-3.6/_icu.o -DPYICU_VER=\"2.2\" -I/Users/jz/anaconda3/include\r\n>     warning: include path for stdlibc++ headers not found; pass '-std=libc++' on the command line to use the libc++ standard library instead [-Wstdlibcxx-not-found]\r\n>     In file included from _icu.cpp:27:\r\n>     ./common.h:38:13: error: unknown type name 'decltype'\r\n>         typedef decltype(nullptr) nullptr_t;\r\n>                 ^\r\n>     ./common.h:38:30: error: expected ';' after top level declarator\r\n>         typedef decltype(nullptr) nullptr_t;\r\n>                                  ^\r\n>                                  ;\r\n>     In file included from _icu.cpp:27:\r\n>     In file included from ./common.h:106:\r\n>     In file included from /Users/jz/anaconda3/include/unicode/unistr.h:33:\r\n>     /Users/jz/anaconda3/include/unicode/std_string.h:35:10: fatal error: 'string' file not found\r\n>     #include <string>\r\n>              ^~~~~~~~\r\n>     1 warning and 3 errors generated.\r\n>     error: command 'gcc' failed with exit status 1\r\n>     \r\n>     ----------------------------------------\r\n> \r\n>   Failed building wheel for pyicu\r\n> Command \"/Users/jz/anaconda3/envs/bridge/bin/python -u -c \"import setuptools, tokenize;__file__='/private/var/folders/8v/wnw63nls49572vj7073gzn4w0000gn/T/pycharm-packaging/pyicu/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /private/var/folders/8v/wnw63nls49572vj7073gzn4w0000gn/T/pip-record-yz3yw6d5/install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in /private/var/folders/8v/wnw63nls49572vj7073gzn4w0000gn/T/pycharm-packaging/pyicu/\r\n> ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/273", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/273/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/273/events", "html_url": "https://github.com/pudo/dataset/issues/273", "id": 393053813, "node_id": "MDU6SXNzdWUzOTMwNTM4MTM=", "number": 273, "title": "Add method to create multiple columns", "user": {"login": "saimn", "id": 311639, "node_id": "MDQ6VXNlcjMxMTYzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/311639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saimn", "html_url": "https://github.com/saimn", "followers_url": "https://api.github.com/users/saimn/followers", "following_url": "https://api.github.com/users/saimn/following{/other_user}", "gists_url": "https://api.github.com/users/saimn/gists{/gist_id}", "starred_url": "https://api.github.com/users/saimn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saimn/subscriptions", "organizations_url": "https://api.github.com/users/saimn/orgs", "repos_url": "https://api.github.com/users/saimn/repos", "events_url": "https://api.github.com/users/saimn/events{/privacy}", "received_events_url": "https://api.github.com/users/saimn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-20T13:47:46Z", "updated_at": "2019-07-13T12:17:52Z", "closed_at": "2019-07-13T12:17:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I need to create a set of columns to be sure that they exist with the correct type (this is minor annoyance with the automatic creation, if a value for a column is None it will not be created with the expected type).\r\n\r\nSo it is currently possible to do a loop with `Table.create_column`, but it would be more efficient to have a way to create directly a set of columns (or just ensure that they exists with the correct type). I guess that making `Table._sync_columns` a public method would be enough. Thoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/272", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/272/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/272/events", "html_url": "https://github.com/pudo/dataset/issues/272", "id": 384618496, "node_id": "MDU6SXNzdWUzODQ2MTg0OTY=", "number": 272, "title": "Connect using existing pyodbc connection, fails with AttributeError", "user": {"login": "yugmorf", "id": 9900297, "node_id": "MDQ6VXNlcjk5MDAyOTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/9900297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yugmorf", "html_url": "https://github.com/yugmorf", "followers_url": "https://api.github.com/users/yugmorf/followers", "following_url": "https://api.github.com/users/yugmorf/following{/other_user}", "gists_url": "https://api.github.com/users/yugmorf/gists{/gist_id}", "starred_url": "https://api.github.com/users/yugmorf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yugmorf/subscriptions", "organizations_url": "https://api.github.com/users/yugmorf/orgs", "repos_url": "https://api.github.com/users/yugmorf/repos", "events_url": "https://api.github.com/users/yugmorf/events{/privacy}", "received_events_url": "https://api.github.com/users/yugmorf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-27T04:34:14Z", "updated_at": "2018-11-27T14:02:46Z", "closed_at": "2018-11-27T14:02:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "sqlsStr = 'DRIVER={ODBC Driver 13 for SQL Server}; SERVER=myServer; DATABASE=myDatabase; Trusted_Connection=yes'\r\nconn = pyodbc.connect(sqlsStr) \r\nfrom urllib.parse import quote_plus\r\nengine = create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % quote_plus(sqlsStr)) # The sqlAchemy engine retrived from sqlsStr.  Used by DataSet\r\nassert(repr(type(engine)) == \"<class 'sqlalchemy.engine.base.Engine'>\")\r\ndb=dataset.connect(engine.url)\r\n#AttributeError: 'URL' object has no attribute 'decode'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/271", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/271/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/271/events", "html_url": "https://github.com/pudo/dataset/issues/271", "id": 384319207, "node_id": "MDU6SXNzdWUzODQzMTkyMDc=", "number": 271, "title": ".find() not working with comparison-operator", "user": {"login": "luerhard", "id": 24412608, "node_id": "MDQ6VXNlcjI0NDEyNjA4", "avatar_url": "https://avatars2.githubusercontent.com/u/24412608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luerhard", "html_url": "https://github.com/luerhard", "followers_url": "https://api.github.com/users/luerhard/followers", "following_url": "https://api.github.com/users/luerhard/following{/other_user}", "gists_url": "https://api.github.com/users/luerhard/gists{/gist_id}", "starred_url": "https://api.github.com/users/luerhard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luerhard/subscriptions", "organizations_url": "https://api.github.com/users/luerhard/orgs", "repos_url": "https://api.github.com/users/luerhard/repos", "events_url": "https://api.github.com/users/luerhard/events{/privacy}", "received_events_url": "https://api.github.com/users/luerhard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-26T12:58:23Z", "updated_at": "2019-03-13T22:29:41Z", "closed_at": "2018-12-01T11:07:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there,\r\nI am currently trying to get the comparison-operators from the [documentation](https://dataset.readthedocs.io/en/latest/quickstart.html#reading-data-from-tables) to work, which says i can do this:\r\n```python\r\n# Find by comparison operator\r\nelderly_users = table.find(age={'>=': 70})\r\npossible_customers = table.find(age={'between': [21, 80]})\r\n```\r\n\r\nI get an error (on sqlite) or no answer (on mysql) when i try this. To reproduce the error, I have taken the sample date from this repo to make it easy\r\n```python\r\nimport dataset\r\nimport sqlalchemy\r\nimport importlib.util\r\npath = \"/home/lukas/git/dataset/test/sample_data.py\"\r\nspec = importlib.util.spec_from_file_location(\"test_data\", path)\r\ntestdata = importlib.util.module_from_spec(spec)\r\nspec.loader.exec_module(testdata)\r\n\r\ndb = dataset.connect(\"sqlite:///:memory:\")\r\ntable = db[\"weather\"]\r\ntable.insert_many(testdata.TEST_DATA)\r\n\r\ntemperatures = table.find(temperature={'between': [0, 4]})\r\n```\r\n\r\nThis throws the following error:\r\n```\r\n---------------------------------------------------------------------------\r\nInterfaceError                            Traceback (most recent call last)\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args)\r\n   1192                         parameters,\r\n-> 1193                         context)\r\n   1194         except BaseException as e:\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context)\r\n    508     def do_execute(self, cursor, statement, parameters, context=None):\r\n--> 509         cursor.execute(statement, parameters)\r\n    510 \r\n\r\nInterfaceError: Error binding parameter 0 - probably unsupported type.\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nInterfaceError                            Traceback (most recent call last)\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_code(self, code_obj, result, async_)\r\n   3266                 else:\r\n-> 3267                     exec(code_obj, self.user_global_ns, self.user_ns)\r\n   3268             finally:\r\n\r\n<ipython-input-1-bb46e1247e91> in <module>\r\n     12 \r\n---> 13 temperatures = table.find(temperature={'between': [0, 4]})\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/dataset/table.py in find(self, *_clauses, **kwargs)\r\n    473 \r\n--> 474         return ResultIter(conn.execute(query),\r\n    475                           row_type=self.db.row_type,\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/engine/base.py in execute(self, object, *multiparams, **params)\r\n    947         else:\r\n--> 948             return meth(self, multiparams, params)\r\n    949 \r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/sql/elements.py in _execute_on_connection(self, connection, multiparams, params)\r\n    268         if self.supports_execution:\r\n--> 269             return connection._execute_clauseelement(self, multiparams, params)\r\n    270         else:\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_clauseelement(self, elem, multiparams, params)\r\n   1059             distilled_params,\r\n-> 1060             compiled_sql, distilled_params\r\n   1061         )\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args)\r\n   1199                 cursor,\r\n-> 1200                 context)\r\n   1201 \r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _handle_dbapi_exception(self, e, statement, parameters, cursor, context)\r\n   1412                     sqlalchemy_exception,\r\n-> 1413                     exc_info\r\n   1414                 )\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/util/compat.py in raise_from_cause(exception, exc_info)\r\n    264     cause = exc_value if exc_value is not exception else None\r\n--> 265     reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n    266 \r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/util/compat.py in reraise(tp, value, tb, cause)\r\n    247         if value.__traceback__ is not tb:\r\n--> 248             raise value.with_traceback(tb)\r\n    249         raise value\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args)\r\n   1192                         parameters,\r\n-> 1193                         context)\r\n   1194         except BaseException as e:\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context)\r\n    508     def do_execute(self, cursor, statement, parameters, context=None):\r\n--> 509         cursor.execute(statement, parameters)\r\n    510 \r\n\r\n<class 'str'>: (<class 'AttributeError'>, AttributeError(\"'int' object has no attribute 'items'\"))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nAttributeError                            Traceback (most recent call last)\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_code(self, code_obj, result, async_)\r\n   3282             if result is not None:\r\n   3283                 result.error_in_exec = sys.exc_info()[1]\r\n-> 3284             self.showtraceback(running_compiled_code=True)\r\n   3285         else:\r\n   3286             outflag = False\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/IPython/core/interactiveshell.py in showtraceback(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)\r\n   2021                                             value, tb, tb_offset=tb_offset)\r\n   2022 \r\n-> 2023                     self._showtraceback(etype, value, stb)\r\n   2024                     if self.call_pdb:\r\n   2025                         # drop into debugger\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/ipykernel/zmqshell.py in _showtraceback(self, etype, evalue, stb)\r\n    544             u'traceback' : stb,\r\n    545             u'ename' : unicode_type(etype.__name__),\r\n--> 546             u'evalue' : py3compat.safe_unicode(evalue),\r\n    547         }\r\n    548 \r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/ipython_genutils/py3compat.py in safe_unicode(e)\r\n     63     \"\"\"\r\n     64     try:\r\n---> 65         return unicode_type(e)\r\n     66     except UnicodeError:\r\n     67         pass\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/exc.py in __str__(self)\r\n    322             if self.params:\r\n    323                 params_repr = util._repr_params(self.params, 10)\r\n--> 324                 details.append(\"[parameters: %r]\" % params_repr)\r\n    325         code_str = self._code_str()\r\n    326         if code_str:\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/sql/util.py in __repr__(self)\r\n    370             ))\r\n    371         elif ismulti:\r\n--> 372             return self._repr_multi(self.params, typ)\r\n    373         else:\r\n    374             return self._repr_params(self.params, typ)\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/sql/util.py in _repr_multi(self, multi_params, typ)\r\n    388             elements = \", \".join(\r\n    389                 self._repr_params(params, elem_type)\r\n--> 390                 for params in multi_params)\r\n    391         else:\r\n    392             elements = \"\"\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/sql/util.py in <genexpr>(.0)\r\n    388             elements = \", \".join(\r\n    389                 self._repr_params(params, elem_type)\r\n--> 390                 for params in multi_params)\r\n    391         else:\r\n    392             elements = \"\"\r\n\r\n/opt/conda/envs/ma/lib/python3.7/site-packages/sqlalchemy/sql/util.py in _repr_params(self, params, typ)\r\n    403                 \", \".join(\r\n    404                     \"%r: %s\" % (key, trunc(value))\r\n--> 405                     for key, value in params.items()\r\n    406                 )\r\n    407             )\r\n\r\nAttributeError: 'int' object has no attribute 'items'\r\n\r\n\r\n```\r\n\r\nThis works however...\r\n```python\r\ntemperatures = table.find(sqlalchemy.and_(table.table.c.temperature > 0, table.table.c.temperature < 4))\r\nprint(list(temperatures))\r\n```\r\n```\r\n[OrderedDict([('id', 1), ('date', datetime.datetime(2011, 1, 1, 0, 0)), ('temperature', 1), ('place', 'G\u20aclway')])]\r\n```\r\n\r\nAm I doing something wrong?\r\n\r\nMy versions are:\r\n```\r\npython=3.7.1\r\nsqlalchemy=1.2.14\r\ndataset=1.1.0\r\n```\r\nThanks in advance !\r\nRegards,\r\nLukas Erhard", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/270", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/270/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/270/events", "html_url": "https://github.com/pudo/dataset/issues/270", "id": 384117232, "node_id": "MDU6SXNzdWUzODQxMTcyMzI=", "number": 270, "title": "uppercase column names ", "user": {"login": "codefatherru", "id": 5977298, "node_id": "MDQ6VXNlcjU5NzcyOTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5977298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codefatherru", "html_url": "https://github.com/codefatherru", "followers_url": "https://api.github.com/users/codefatherru/followers", "following_url": "https://api.github.com/users/codefatherru/following{/other_user}", "gists_url": "https://api.github.com/users/codefatherru/gists{/gist_id}", "starred_url": "https://api.github.com/users/codefatherru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codefatherru/subscriptions", "organizations_url": "https://api.github.com/users/codefatherru/orgs", "repos_url": "https://api.github.com/users/codefatherru/repos", "events_url": "https://api.github.com/users/codefatherru/events{/privacy}", "received_events_url": "https://api.github.com/users/codefatherru/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157868, "node_id": "MDU6TGFiZWwzNDE1Nzg2OA==", "url": "https://api.github.com/repos/pudo/dataset/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-25T20:47:45Z", "updated_at": "2020-01-11T13:32:48Z", "closed_at": "2020-01-11T13:32:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I suppose this is a bug (I couldn't google it)\r\nif you have got database table with column 'Tags' (capitalize  first letter)\r\ntry\r\n```\r\ntable.insert(dict(name='Jane Doe', age=37, country='France', gender='female', tags = 'tag'))\r\n#  lowercase letters only \r\n```\r\nyou will  get\r\n\r\n> sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) duplicate column name: tags [SQL: 'ALTER TABLE csv ADD COLUMN tags TEXT'] (Background on this error at: http://sqlalche.me/e/e3q8)\r\n\r\nit comes as if table.insert is caseSensitive when checks for columns, but caseINsensitive when tries to create them\r\n\r\nP.S.\r\nI hope this issue will save several hours for someone  \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/269", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/269/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/269/events", "html_url": "https://github.com/pudo/dataset/issues/269", "id": 373244292, "node_id": "MDU6SXNzdWUzNzMyNDQyOTI=", "number": 269, "title": "Is dataset threadsafe? ", "user": {"login": "sometimescool22", "id": 20865218, "node_id": "MDQ6VXNlcjIwODY1MjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/20865218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sometimescool22", "html_url": "https://github.com/sometimescool22", "followers_url": "https://api.github.com/users/sometimescool22/followers", "following_url": "https://api.github.com/users/sometimescool22/following{/other_user}", "gists_url": "https://api.github.com/users/sometimescool22/gists{/gist_id}", "starred_url": "https://api.github.com/users/sometimescool22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sometimescool22/subscriptions", "organizations_url": "https://api.github.com/users/sometimescool22/orgs", "repos_url": "https://api.github.com/users/sometimescool22/repos", "events_url": "https://api.github.com/users/sometimescool22/events{/privacy}", "received_events_url": "https://api.github.com/users/sometimescool22/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-23T23:32:19Z", "updated_at": "2019-01-03T11:49:26Z", "closed_at": "2019-01-03T11:49:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/268", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/268/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/268/events", "html_url": "https://github.com/pudo/dataset/issues/268", "id": 372322899, "node_id": "MDU6SXNzdWUzNzIzMjI4OTk=", "number": 268, "title": "requirements on install (windows)", "user": {"login": "ltpyt", "id": 44342048, "node_id": "MDQ6VXNlcjQ0MzQyMDQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/44342048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltpyt", "html_url": "https://github.com/ltpyt", "followers_url": "https://api.github.com/users/ltpyt/followers", "following_url": "https://api.github.com/users/ltpyt/following{/other_user}", "gists_url": "https://api.github.com/users/ltpyt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltpyt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltpyt/subscriptions", "organizations_url": "https://api.github.com/users/ltpyt/orgs", "repos_url": "https://api.github.com/users/ltpyt/repos", "events_url": "https://api.github.com/users/ltpyt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltpyt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-21T14:53:24Z", "updated_at": "2018-10-21T19:18:45Z", "closed_at": "2018-10-21T19:18:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Im getting these errors when i do \"pip install dataset\" - do i really need to downgrade all of this ? \r\n\r\npew 1.1.2 has requirement psutil==5.3.1; sys_platform == \"win32\", but you'll have psutil 5.4.3 which is incompatible.\r\ngoogle-cloud 0.32.0 has requirement google-api-core<0.2.0dev,>=0.1.2, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud 0.32.0 has requirement google-cloud-speech<0.31dev,>=0.30.0, but you'll have google-cloud-speech 0.32.1 which is incompatible.\r\ngoogle-cloud-vision 0.29.0 has requirement google-api-core<0.2.0dev,>=0.1.0, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-trace 0.17.0 has requirement google-api-core<0.2.0dev,>=0.1.1, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-storage 1.6.0 has requirement google-api-core<0.2.0dev,>=0.1.1, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-spanner 0.29.0 has requirement google-api-core<0.2.0dev,>=0.1.1, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-pubsub 0.30.1 has requirement google-api-core[grpc]<0.2.0dev,>=0.1.3, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-logging 1.4.0 has requirement google-api-core<0.2.0dev,>=0.1.1, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-firestore 0.28.0 has requirement google-api-core<0.2.0dev,>=0.1.1, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-error-reporting 0.28.0 has requirement google-api-core<0.2.0dev,>=0.1.1, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-dns 0.28.0 has requirement google-api-core<0.2.0dev,>=0.1.1, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-datastore 1.4.0 has requirement google-api-core<0.2.0dev,>=0.1.1, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-bigtable 0.28.1 has requirement google-api-core<0.2.0dev,>=0.1.1, but you'll have google-api-core 1.0.0 which is incompatible.\r\ngoogle-cloud-bigquery 0.28.0 has requirement google-api-core<0.2.0dev,>=0.1.1, but you'll have google-api-core 1.0.0 which is incompatible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/267", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/267/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/267/events", "html_url": "https://github.com/pudo/dataset/issues/267", "id": 370824435, "node_id": "MDU6SXNzdWUzNzA4MjQ0MzU=", "number": 267, "title": "Treat materialized views as a table-like", "user": {"login": "iantbutler01", "id": 6426407, "node_id": "MDQ6VXNlcjY0MjY0MDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6426407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iantbutler01", "html_url": "https://github.com/iantbutler01", "followers_url": "https://api.github.com/users/iantbutler01/followers", "following_url": "https://api.github.com/users/iantbutler01/following{/other_user}", "gists_url": "https://api.github.com/users/iantbutler01/gists{/gist_id}", "starred_url": "https://api.github.com/users/iantbutler01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iantbutler01/subscriptions", "organizations_url": "https://api.github.com/users/iantbutler01/orgs", "repos_url": "https://api.github.com/users/iantbutler01/repos", "events_url": "https://api.github.com/users/iantbutler01/events{/privacy}", "received_events_url": "https://api.github.com/users/iantbutler01/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157870, "node_id": "MDU6TGFiZWwzNDE1Nzg3MA==", "url": "https://api.github.com/repos/pudo/dataset/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-16T22:25:06Z", "updated_at": "2020-01-11T15:47:10Z", "closed_at": "2020-01-11T15:47:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Expected behaviour:\r\n\r\n- db[\"<view_name>\"] returns a table object with the materialized view which you can query drop etc.\r\n\r\nActual behaviour:\r\n\r\n- db[\"<view_name>\"] creates a new table with the name of the view\r\n\r\nDB: postgres9.6\r\n\r\n```\r\ndb = dataset.connect(\"--------\")\r\ndb[\"language_tagging_dataset_table\"].drop()\r\ntagged_posts = db[\"tagged_posts\"] (this is the view)\r\n```\r\n\r\nreflect_views is left alone, using the default config.\r\n\r\nIt looks like regular views might be fine just not materialized views", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/266", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/266/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/266/events", "html_url": "https://github.com/pudo/dataset/issues/266", "id": 365441234, "node_id": "MDU6SXNzdWUzNjU0NDEyMzQ=", "number": 266, "title": "Unique and Not Null", "user": {"login": "patarapolw", "id": 21255931, "node_id": "MDQ6VXNlcjIxMjU1OTMx", "avatar_url": "https://avatars0.githubusercontent.com/u/21255931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patarapolw", "html_url": "https://github.com/patarapolw", "followers_url": "https://api.github.com/users/patarapolw/followers", "following_url": "https://api.github.com/users/patarapolw/following{/other_user}", "gists_url": "https://api.github.com/users/patarapolw/gists{/gist_id}", "starred_url": "https://api.github.com/users/patarapolw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patarapolw/subscriptions", "organizations_url": "https://api.github.com/users/patarapolw/orgs", "repos_url": "https://api.github.com/users/patarapolw/repos", "events_url": "https://api.github.com/users/patarapolw/events{/privacy}", "received_events_url": "https://api.github.com/users/patarapolw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-01T12:37:47Z", "updated_at": "2020-01-11T12:58:10Z", "closed_at": "2020-01-11T12:58:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to see these two, at least, in a schema-less NoSQL. How do I specify it is `dataset`?\r\n\r\nI managed to [create such in TinyDB](https://github.com/patarapolw/tinydb-constraint), but the main problems of TinyDB are:\r\n- Slow `insert_one`\r\n- No support of BLOB/binary\r\n\r\nBTW, does `dataset` support blob?\r\n\r\nAnother interesting thing is ForeignKey, but I believe it will never be supported, anyway.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/263", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/263/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/263/events", "html_url": "https://github.com/pudo/dataset/issues/263", "id": 359796552, "node_id": "MDU6SXNzdWUzNTk3OTY1NTI=", "number": 263, "title": "Distinct does not support advanced queries", "user": {"login": "saimn", "id": 311639, "node_id": "MDQ6VXNlcjMxMTYzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/311639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saimn", "html_url": "https://github.com/saimn", "followers_url": "https://api.github.com/users/saimn/followers", "following_url": "https://api.github.com/users/saimn/following{/other_user}", "gists_url": "https://api.github.com/users/saimn/gists{/gist_id}", "starred_url": "https://api.github.com/users/saimn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saimn/subscriptions", "organizations_url": "https://api.github.com/users/saimn/orgs", "repos_url": "https://api.github.com/users/saimn/repos", "events_url": "https://api.github.com/users/saimn/events{/privacy}", "received_events_url": "https://api.github.com/users/saimn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-13T08:38:19Z", "updated_at": "2018-10-04T14:00:14Z", "closed_at": "2018-10-04T14:00:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It looks like `.distinct` does not support advanced selections e.g. `table.distinct('key', key=[...])` like `.find` or `.count`. Is there a reason or is it just an oversight as it does not use `._args_to_clause` ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/261", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/261/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/261/events", "html_url": "https://github.com/pudo/dataset/issues/261", "id": 346346145, "node_id": "MDU6SXNzdWUzNDYzNDYxNDU=", "number": 261, "title": "mongodb", "user": {"login": "fedecaccia", "id": 17413112, "node_id": "MDQ6VXNlcjE3NDEzMTEy", "avatar_url": "https://avatars3.githubusercontent.com/u/17413112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fedecaccia", "html_url": "https://github.com/fedecaccia", "followers_url": "https://api.github.com/users/fedecaccia/followers", "following_url": "https://api.github.com/users/fedecaccia/following{/other_user}", "gists_url": "https://api.github.com/users/fedecaccia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fedecaccia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fedecaccia/subscriptions", "organizations_url": "https://api.github.com/users/fedecaccia/orgs", "repos_url": "https://api.github.com/users/fedecaccia/repos", "events_url": "https://api.github.com/users/fedecaccia/events{/privacy}", "received_events_url": "https://api.github.com/users/fedecaccia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-31T20:29:42Z", "updated_at": "2018-07-31T20:56:42Z", "closed_at": "2018-07-31T20:56:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can I use dataset to connect to a mongodb NoSQL database?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/260", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/260/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/260/events", "html_url": "https://github.com/pudo/dataset/issues/260", "id": 342783969, "node_id": "MDU6SXNzdWUzNDI3ODM5Njk=", "number": 260, "title": "Add auto_create=True parameter in dataset.connect", "user": {"login": "pikhovkin", "id": 630071, "node_id": "MDQ6VXNlcjYzMDA3MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/630071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pikhovkin", "html_url": "https://github.com/pikhovkin", "followers_url": "https://api.github.com/users/pikhovkin/followers", "following_url": "https://api.github.com/users/pikhovkin/following{/other_user}", "gists_url": "https://api.github.com/users/pikhovkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pikhovkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pikhovkin/subscriptions", "organizations_url": "https://api.github.com/users/pikhovkin/orgs", "repos_url": "https://api.github.com/users/pikhovkin/repos", "events_url": "https://api.github.com/users/pikhovkin/events{/privacy}", "received_events_url": "https://api.github.com/users/pikhovkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-19T15:40:38Z", "updated_at": "2019-01-03T11:54:00Z", "closed_at": "2019-01-03T11:54:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "`auto_create` parameter in dataset.connect allow\\disallow auto creating a table and a column", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/259", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/259/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/259/events", "html_url": "https://github.com/pudo/dataset/issues/259", "id": 341740055, "node_id": "MDU6SXNzdWUzNDE3NDAwNTU=", "number": 259, "title": "How can i get result from update and insert(using db.query)", "user": {"login": "forkforlearn", "id": 29908621, "node_id": "MDQ6VXNlcjI5OTA4NjIx", "avatar_url": "https://avatars0.githubusercontent.com/u/29908621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/forkforlearn", "html_url": "https://github.com/forkforlearn", "followers_url": "https://api.github.com/users/forkforlearn/followers", "following_url": "https://api.github.com/users/forkforlearn/following{/other_user}", "gists_url": "https://api.github.com/users/forkforlearn/gists{/gist_id}", "starred_url": "https://api.github.com/users/forkforlearn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/forkforlearn/subscriptions", "organizations_url": "https://api.github.com/users/forkforlearn/orgs", "repos_url": "https://api.github.com/users/forkforlearn/repos", "events_url": "https://api.github.com/users/forkforlearn/events{/privacy}", "received_events_url": "https://api.github.com/users/forkforlearn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-17T02:12:20Z", "updated_at": "2018-07-17T07:18:51Z", "closed_at": "2018-07-17T07:18:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi \uff0cwhen i try to us db.query , there is no message return, for example:\r\n`\r\ndb.query('update table set column1 = 123 when column2 = 222')\r\n`\r\nor\r\n`\r\ndb.query('insert into table select * from table b')\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/258", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/258/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/258/events", "html_url": "https://github.com/pudo/dataset/issues/258", "id": 338370742, "node_id": "MDU6SXNzdWUzMzgzNzA3NDI=", "number": 258, "title": "No module named 'MySQLdb'", "user": {"login": "michaels011235", "id": 24896275, "node_id": "MDQ6VXNlcjI0ODk2Mjc1", "avatar_url": "https://avatars0.githubusercontent.com/u/24896275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaels011235", "html_url": "https://github.com/michaels011235", "followers_url": "https://api.github.com/users/michaels011235/followers", "following_url": "https://api.github.com/users/michaels011235/following{/other_user}", "gists_url": "https://api.github.com/users/michaels011235/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaels011235/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaels011235/subscriptions", "organizations_url": "https://api.github.com/users/michaels011235/orgs", "repos_url": "https://api.github.com/users/michaels011235/repos", "events_url": "https://api.github.com/users/michaels011235/events{/privacy}", "received_events_url": "https://api.github.com/users/michaels011235/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-04T20:32:53Z", "updated_at": "2018-07-05T08:25:59Z", "closed_at": "2018-07-05T08:25:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tried to use dataset in Python 3.6 with MariaDB on a Raspberry Pi. I used this line:\r\n`dataset.connect('mysql://m:pw@localhost/w')` \r\nbut got the following error:\r\n`No module named 'MySQLdb'` \r\nIs it possible to use dataset with mysql in Python3?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/253", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/253/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/253/events", "html_url": "https://github.com/pudo/dataset/issues/253", "id": 326747062, "node_id": "MDU6SXNzdWUzMjY3NDcwNjI=", "number": 253, "title": "Why don't we use QueurPool for DB connections?", "user": {"login": "kivo360", "id": 2403240, "node_id": "MDQ6VXNlcjI0MDMyNDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2403240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kivo360", "html_url": "https://github.com/kivo360", "followers_url": "https://api.github.com/users/kivo360/followers", "following_url": "https://api.github.com/users/kivo360/following{/other_user}", "gists_url": "https://api.github.com/users/kivo360/gists{/gist_id}", "starred_url": "https://api.github.com/users/kivo360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kivo360/subscriptions", "organizations_url": "https://api.github.com/users/kivo360/orgs", "repos_url": "https://api.github.com/users/kivo360/repos", "events_url": "https://api.github.com/users/kivo360/events{/privacy}", "received_events_url": "https://api.github.com/users/kivo360/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-26T15:40:33Z", "updated_at": "2018-06-04T04:59:22Z", "closed_at": "2018-06-04T04:59:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried inserting a lot of records that would ignore a certain key. To speed the process I added everything to a multiprocess pool, with the hope that I could send the records in faster (insert many doesn't have an ignore option). However, I ran into problems with this. The database couldn't handle multiple connections.\r\n\r\nI looked at the code and saw that the connection was handled using a staticpool. I was wondering why it didn't queue connections with a hard limit, instead of limiting the connections to one?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/252", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/252/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/252/events", "html_url": "https://github.com/pudo/dataset/issues/252", "id": 326207024, "node_id": "MDU6SXNzdWUzMjYyMDcwMjQ=", "number": 252, "title": "Insert many with missing columns", "user": {"login": "alexwennerberg", "id": 11624958, "node_id": "MDQ6VXNlcjExNjI0OTU4", "avatar_url": "https://avatars1.githubusercontent.com/u/11624958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwennerberg", "html_url": "https://github.com/alexwennerberg", "followers_url": "https://api.github.com/users/alexwennerberg/followers", "following_url": "https://api.github.com/users/alexwennerberg/following{/other_user}", "gists_url": "https://api.github.com/users/alexwennerberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwennerberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwennerberg/subscriptions", "organizations_url": "https://api.github.com/users/alexwennerberg/orgs", "repos_url": "https://api.github.com/users/alexwennerberg/repos", "events_url": "https://api.github.com/users/alexwennerberg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwennerberg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157868, "node_id": "MDU6TGFiZWwzNDE1Nzg2OA==", "url": "https://api.github.com/repos/pudo/dataset/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-24T16:52:25Z", "updated_at": "2018-05-29T18:55:32Z", "closed_at": "2018-05-29T18:55:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey I love this tool and I use it a lot because I am very lazy. However, something has impeded my laziness - I noticed that when I call insert_many with rows that don't all include all the columns that I am inserting, it returns an sqlalchemy error. That is to say, I have to figure out all the column headers first, then set all those values to None before I call insert_many. I looked briefly into the code and I think I understand why this is, I have been thinking about making a pull request that automatically sets any missing column's value to null when calling insert_many, but I was wondering if there is any reason why this change hasn't been made? \r\n\r\nHope this makes sense.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/251", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/251/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/251/events", "html_url": "https://github.com/pudo/dataset/issues/251", "id": 326040870, "node_id": "MDU6SXNzdWUzMjYwNDA4NzA=", "number": 251, "title": "No issue, just thank you very much!", "user": {"login": "teewhyli", "id": 12669464, "node_id": "MDQ6VXNlcjEyNjY5NDY0", "avatar_url": "https://avatars2.githubusercontent.com/u/12669464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teewhyli", "html_url": "https://github.com/teewhyli", "followers_url": "https://api.github.com/users/teewhyli/followers", "following_url": "https://api.github.com/users/teewhyli/following{/other_user}", "gists_url": "https://api.github.com/users/teewhyli/gists{/gist_id}", "starred_url": "https://api.github.com/users/teewhyli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teewhyli/subscriptions", "organizations_url": "https://api.github.com/users/teewhyli/orgs", "repos_url": "https://api.github.com/users/teewhyli/repos", "events_url": "https://api.github.com/users/teewhyli/events{/privacy}", "received_events_url": "https://api.github.com/users/teewhyli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-24T09:37:25Z", "updated_at": "2018-05-25T13:23:31Z", "closed_at": "2018-05-25T13:23:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just want to thank you!\r\n\r\nI'm a python beginner and a even 'greener' beginner in regards to ORM. This has not only helped me perform 'magic', but has given me some nice insights into how to use ORM :)!\r\n\r\nHopefully i can contribute to this library in the future :)!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/249", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/249/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/249/events", "html_url": "https://github.com/pudo/dataset/issues/249", "id": 321335146, "node_id": "MDU6SXNzdWUzMjEzMzUxNDY=", "number": 249, "title": "UPSERT MANY", "user": {"login": "ohld", "id": 5613295, "node_id": "MDQ6VXNlcjU2MTMyOTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5613295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohld", "html_url": "https://github.com/ohld", "followers_url": "https://api.github.com/users/ohld/followers", "following_url": "https://api.github.com/users/ohld/following{/other_user}", "gists_url": "https://api.github.com/users/ohld/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohld/subscriptions", "organizations_url": "https://api.github.com/users/ohld/orgs", "repos_url": "https://api.github.com/users/ohld/repos", "events_url": "https://api.github.com/users/ohld/events{/privacy}", "received_events_url": "https://api.github.com/users/ohld/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-08T20:27:52Z", "updated_at": "2019-07-13T12:47:05Z", "closed_at": "2019-07-13T12:47:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just found your library and it's amazing!\r\nBut I can't find method for UPSERT MANY sql-query.\r\n\r\nFor example, in `sqlite3`library I often use this calls:\r\n\r\n```python\r\ndb.executemany('REPLACE INTO .... ', list_of_dicts)\r\n```\r\n\r\nCan you please implement this method or give me the way how can I make it with already existing ones? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/248", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/248/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/248/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/248/events", "html_url": "https://github.com/pudo/dataset/issues/248", "id": 318520636, "node_id": "MDU6SXNzdWUzMTg1MjA2MzY=", "number": 248, "title": "Can't insert list in dictionaries", "user": {"login": "DanielVip3", "id": 36603306, "node_id": "MDQ6VXNlcjM2NjAzMzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/36603306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielVip3", "html_url": "https://github.com/DanielVip3", "followers_url": "https://api.github.com/users/DanielVip3/followers", "following_url": "https://api.github.com/users/DanielVip3/following{/other_user}", "gists_url": "https://api.github.com/users/DanielVip3/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielVip3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielVip3/subscriptions", "organizations_url": "https://api.github.com/users/DanielVip3/orgs", "repos_url": "https://api.github.com/users/DanielVip3/repos", "events_url": "https://api.github.com/users/DanielVip3/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielVip3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-27T19:17:54Z", "updated_at": "2018-04-30T15:00:34Z", "closed_at": "2018-04-30T15:00:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know if that's an issue or an impossible thing, but I'll briefly explain :  \r\nI wanted to do a \"badge system\". As always, I tried to make a dictionary with this library, but this time it didn't work, because I was using a list.\r\n\r\n```\r\nmottdb = dataset.connect('sqlite:///prova.db')\r\n\r\nbadge = mottdb['badge']\r\n\r\nbadge.insert(dict(IDuser=294897792919404544, badge=[\"badge\", \"badgetwo\"]))\r\nbadge.insert(dict(IDuser=228923618246000642, badge=[\"badge\", \"badgetwo\"]))\r\n```\r\nThe error that shows up is : \r\n```\r\nin do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 1 - probably unsupported type. [SQL: 'INSERT INTO badge (\"IDutente\", badge) VALUES (?, ?)'] [parameters: (294897792919404544, ['badge', 'badgedue'])] (Background on this error at: http://sqlalche.me/e/rvf5)\r\n```\r\nI also tried with tuples and the list([\"badge\", \"badgetwo\"]) method, but nothing.\r\nIs there a way to make a list in the dictionary without problems?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/246", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/246/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/246/events", "html_url": "https://github.com/pudo/dataset/issues/246", "id": 308826184, "node_id": "MDU6SXNzdWUzMDg4MjYxODQ=", "number": 246, "title": "how to clearing or shutting down the connections", "user": {"login": "l976308589", "id": 10337055, "node_id": "MDQ6VXNlcjEwMzM3MDU1", "avatar_url": "https://avatars3.githubusercontent.com/u/10337055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l976308589", "html_url": "https://github.com/l976308589", "followers_url": "https://api.github.com/users/l976308589/followers", "following_url": "https://api.github.com/users/l976308589/following{/other_user}", "gists_url": "https://api.github.com/users/l976308589/gists{/gist_id}", "starred_url": "https://api.github.com/users/l976308589/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l976308589/subscriptions", "organizations_url": "https://api.github.com/users/l976308589/orgs", "repos_url": "https://api.github.com/users/l976308589/repos", "events_url": "https://api.github.com/users/l976308589/events{/privacy}", "received_events_url": "https://api.github.com/users/l976308589/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-27T05:24:48Z", "updated_at": "2020-01-11T12:16:40Z", "closed_at": "2020-01-11T12:16:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is no way of explicitly clearing or shutting down the connections, other than having the dataset instance garbage collected.\r\n\r\ndef test():\r\n     with dataset.connect(self.sql_url) as db:\r\n          db[self.orders_table].update({'Label': label, 'Account': account, 'State': 1}, ['Label', 'Account'])\r\n\r\nwhen I run this function(postgresql),dataset will build a new connection.After a while, warning too many clients already.\r\n\r\nhow to clearing or shutting down the connections.\r\n\r\nThanks.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/245", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/245/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/245/events", "html_url": "https://github.com/pudo/dataset/issues/245", "id": 303136164, "node_id": "MDU6SXNzdWUzMDMxMzYxNjQ=", "number": 245, "title": "I need a sticker of your logo", "user": {"login": "wuhland", "id": 7431774, "node_id": "MDQ6VXNlcjc0MzE3NzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/7431774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wuhland", "html_url": "https://github.com/wuhland", "followers_url": "https://api.github.com/users/wuhland/followers", "following_url": "https://api.github.com/users/wuhland/following{/other_user}", "gists_url": "https://api.github.com/users/wuhland/gists{/gist_id}", "starred_url": "https://api.github.com/users/wuhland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wuhland/subscriptions", "organizations_url": "https://api.github.com/users/wuhland/orgs", "repos_url": "https://api.github.com/users/wuhland/repos", "events_url": "https://api.github.com/users/wuhland/events{/privacy}", "received_events_url": "https://api.github.com/users/wuhland/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-07T15:11:15Z", "updated_at": "2020-01-11T11:29:24Z", "closed_at": "2020-01-11T11:29:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do I get this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/244", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/244/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/244/events", "html_url": "https://github.com/pudo/dataset/issues/244", "id": 302509313, "node_id": "MDU6SXNzdWUzMDI1MDkzMTM=", "number": 244, "title": "Cannot get newly inserted data with an old connection", "user": {"login": "xg1990", "id": 1443518, "node_id": "MDQ6VXNlcjE0NDM1MTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1443518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xg1990", "html_url": "https://github.com/xg1990", "followers_url": "https://api.github.com/users/xg1990/followers", "following_url": "https://api.github.com/users/xg1990/following{/other_user}", "gists_url": "https://api.github.com/users/xg1990/gists{/gist_id}", "starred_url": "https://api.github.com/users/xg1990/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xg1990/subscriptions", "organizations_url": "https://api.github.com/users/xg1990/orgs", "repos_url": "https://api.github.com/users/xg1990/repos", "events_url": "https://api.github.com/users/xg1990/events{/privacy}", "received_events_url": "https://api.github.com/users/xg1990/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-05T23:48:52Z", "updated_at": "2018-03-06T04:04:41Z", "closed_at": "2018-03-06T04:04:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to use the following code to obtain records that are inserted within recent 30 seconds ( using the column `start_t`)\r\n\r\nThe problems is that after 30 seconds, the `table.find` function get zero records. But I am sure there are new records in the database. And I have also tried to use `table.query` instead of  `table.find`, the issue remains the same.\r\n\r\nOne temporary solution is to create a new dataset connection using `dataset.connect` before `table.find`\r\n\r\n```\r\nimport time\r\n\r\nimport dataset\r\n\r\nfrom config import config\r\n\r\ndef main():\r\n    db = dataset.connect('mysql://{user}:{password}@{host}:{port}/{database}'.format(\r\n        user = 'root',\r\n        password = config['database']['root_password'],\r\n        host = config['database']['host'],\r\n        database = config['database']['database'],\r\n        port = config['database']['port']\r\n    ) )\r\n\r\n    while True:\r\n        re = db.get_table('table_name').find(\"start_t > {}\".format(time.time() - 30))\r\n        print list(re)\r\n        time.sleep(5)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n\r\n```\r\n\r\n\r\nAnd I am using the latest dataset:\r\n```\r\npip2 install dataset -U\r\nRequirement already up-to-date: dataset in /usr/local/lib/python2.7/site-packages\r\nRequirement already up-to-date: six>=1.11.0 in /usr/local/lib/python2.7/site-packages (from dataset)\r\nRequirement already up-to-date: alembic>=0.6.2 in /usr/local/lib/python2.7/site-packages (from dataset)\r\nRequirement already up-to-date: normality>=0.5.1 in /usr/local/lib/python2.7/site-packages (from dataset)\r\nRequirement already up-to-date: sqlalchemy>=1.1.0 in /usr/local/lib/python2.7/site-packages (from dataset)\r\nRequirement already up-to-date: python-editor>=0.3 in /usr/local/lib/python2.7/site-packages (from alembic>=0.6.2->dataset)\r\nRequirement already up-to-date: python-dateutil in /usr/local/lib/python2.7/site-packages (from alembic>=0.6.2->dataset)\r\nRequirement already up-to-date: Mako in /usr/local/lib/python2.7/site-packages (from alembic>=0.6.2->dataset)\r\nRequirement already up-to-date: chardet in /usr/local/lib/python2.7/site-packages (from normality>=0.5.1->dataset)\r\nRequirement already up-to-date: banal in /usr/local/lib/python2.7/site-packages (from normality>=0.5.1->dataset)\r\nRequirement already up-to-date: MarkupSafe>=0.9.2 in /usr/local/lib/python2.7/site-packages (from Mako->alembic>=0.6.2->dataset)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/243", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/243/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/243/events", "html_url": "https://github.com/pudo/dataset/issues/243", "id": 300075048, "node_id": "MDU6SXNzdWUzMDAwNzUwNDg=", "number": 243, "title": "Does an async compatible version of dataset exist?", "user": {"login": "ThatNerdyPikachu", "id": 15848969, "node_id": "MDQ6VXNlcjE1ODQ4OTY5", "avatar_url": "https://avatars3.githubusercontent.com/u/15848969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThatNerdyPikachu", "html_url": "https://github.com/ThatNerdyPikachu", "followers_url": "https://api.github.com/users/ThatNerdyPikachu/followers", "following_url": "https://api.github.com/users/ThatNerdyPikachu/following{/other_user}", "gists_url": "https://api.github.com/users/ThatNerdyPikachu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThatNerdyPikachu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThatNerdyPikachu/subscriptions", "organizations_url": "https://api.github.com/users/ThatNerdyPikachu/orgs", "repos_url": "https://api.github.com/users/ThatNerdyPikachu/repos", "events_url": "https://api.github.com/users/ThatNerdyPikachu/events{/privacy}", "received_events_url": "https://api.github.com/users/ThatNerdyPikachu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-26T00:01:04Z", "updated_at": "2018-02-26T08:06:09Z", "closed_at": "2018-02-26T08:06:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I really need it for my project with ``discord.py``, and it just stopped working, and I have identified the fix to be dataset needs to be async compatible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/242", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/242/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/242/events", "html_url": "https://github.com/pudo/dataset/issues/242", "id": 299623983, "node_id": "MDU6SXNzdWUyOTk2MjM5ODM=", "number": 242, "title": "When the transaction is finished, why the connection is not explicitly closed?", "user": {"login": "liqueur", "id": 10989624, "node_id": "MDQ6VXNlcjEwOTg5NjI0", "avatar_url": "https://avatars3.githubusercontent.com/u/10989624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liqueur", "html_url": "https://github.com/liqueur", "followers_url": "https://api.github.com/users/liqueur/followers", "following_url": "https://api.github.com/users/liqueur/following{/other_user}", "gists_url": "https://api.github.com/users/liqueur/gists{/gist_id}", "starred_url": "https://api.github.com/users/liqueur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liqueur/subscriptions", "organizations_url": "https://api.github.com/users/liqueur/orgs", "repos_url": "https://api.github.com/users/liqueur/repos", "events_url": "https://api.github.com/users/liqueur/events{/privacy}", "received_events_url": "https://api.github.com/users/liqueur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-23T07:39:31Z", "updated_at": "2018-02-23T07:54:35Z", "closed_at": "2018-02-23T07:54:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "the transaction wrapper in database.py\r\n\r\n```python\r\ndef __exit__(self, error_type, error_value, traceback):\r\n    \"\"\"End a transaction by committing or rolling back.\"\"\"\r\n    if error_type is None:\r\n        try:\r\n            self.commit()\r\n        except:\r\n            with safe_reraise():\r\n                self.rollback()\r\n    else:\r\n        self.rollback()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/241", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/241/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/241/events", "html_url": "https://github.com/pudo/dataset/issues/241", "id": 296116517, "node_id": "MDU6SXNzdWUyOTYxMTY1MTc=", "number": 241, "title": "Datetime column strange behaviour", "user": {"login": "Davte", "id": 30200121, "node_id": "MDQ6VXNlcjMwMjAwMTIx", "avatar_url": "https://avatars2.githubusercontent.com/u/30200121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Davte", "html_url": "https://github.com/Davte", "followers_url": "https://api.github.com/users/Davte/followers", "following_url": "https://api.github.com/users/Davte/following{/other_user}", "gists_url": "https://api.github.com/users/Davte/gists{/gist_id}", "starred_url": "https://api.github.com/users/Davte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Davte/subscriptions", "organizations_url": "https://api.github.com/users/Davte/orgs", "repos_url": "https://api.github.com/users/Davte/repos", "events_url": "https://api.github.com/users/Davte/events{/privacy}", "received_events_url": "https://api.github.com/users/Davte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-10T17:11:53Z", "updated_at": "2020-01-11T12:29:16Z", "closed_at": "2020-01-11T12:29:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "At least with sqlite, datetime columns are treated as datetime objects by table.find() method (which is great!) but as strings by db.query() method (which is bad to me).\r\nI can't figure out why, can anybody help me understand?\r\n\r\n```\r\nwith dataset.connect(DATABASE) as db:\r\n\tprint(\"table.find() method\")\r\n\tfor x in db[\"myTable\"].find():\r\n\t\tprint(type(x['endTime']))\r\n\tprint(\"db.query() method\")\r\n\tfor x in db.query(\"SELECT * FROM myTable\"):\r\n\t\tprint(type(x['endTime']))\r\n```\r\n---> `<class datetime.datetime>` for the first cycle,  `<class str>` for the second one", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/240", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/240/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/240/events", "html_url": "https://github.com/pudo/dataset/issues/240", "id": 294260949, "node_id": "MDU6SXNzdWUyOTQyNjA5NDk=", "number": 240, "title": "how to update the data", "user": {"login": "l976308589", "id": 10337055, "node_id": "MDQ6VXNlcjEwMzM3MDU1", "avatar_url": "https://avatars3.githubusercontent.com/u/10337055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l976308589", "html_url": "https://github.com/l976308589", "followers_url": "https://api.github.com/users/l976308589/followers", "following_url": "https://api.github.com/users/l976308589/following{/other_user}", "gists_url": "https://api.github.com/users/l976308589/gists{/gist_id}", "starred_url": "https://api.github.com/users/l976308589/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l976308589/subscriptions", "organizations_url": "https://api.github.com/users/l976308589/orgs", "repos_url": "https://api.github.com/users/l976308589/repos", "events_url": "https://api.github.com/users/l976308589/events{/privacy}", "received_events_url": "https://api.github.com/users/l976308589/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-05T03:04:59Z", "updated_at": "2018-02-18T09:11:50Z", "closed_at": "2018-02-18T09:11:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "table.update(dict(name='John Doe', age=47), ['name'])\r\nThe list of filter columns given as the second argument filter using the values in the first column. \r\nHowever, I alse wanna updata 'name',like this:\r\n1.Change the \u2018age\u2019 of all people named John Doe to 47\r\n2.Change the \u2018name\u2019 of all people named John Doe to 'Maike'\r\njust like the T-sql:\r\nUPDATE [dbo].[table] SET [name] = 'Maike', [name] = 47  WHERE [name] = 'John Doe',\r\nthanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/238", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/238/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/238/events", "html_url": "https://github.com/pudo/dataset/issues/238", "id": 291602153, "node_id": "MDU6SXNzdWUyOTE2MDIxNTM=", "number": 238, "title": "SQLite, Pool and threading warning", "user": {"login": "saimn", "id": 311639, "node_id": "MDQ6VXNlcjMxMTYzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/311639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saimn", "html_url": "https://github.com/saimn", "followers_url": "https://api.github.com/users/saimn/followers", "following_url": "https://api.github.com/users/saimn/following{/other_user}", "gists_url": "https://api.github.com/users/saimn/gists{/gist_id}", "starred_url": "https://api.github.com/users/saimn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saimn/subscriptions", "organizations_url": "https://api.github.com/users/saimn/orgs", "repos_url": "https://api.github.com/users/saimn/repos", "events_url": "https://api.github.com/users/saimn/events{/privacy}", "received_events_url": "https://api.github.com/users/saimn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157873, "node_id": "MDU6TGFiZWwzNDE1Nzg3Mw==", "url": "https://api.github.com/repos/pudo/dataset/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-25T15:08:38Z", "updated_at": "2019-07-13T13:08:25Z", "closed_at": "2019-07-13T13:08:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since ffea0f7a69d88d97b4e974e4475805e37ab38587, a \"multi-threading warning\" is displayed when dataset changes the schema inside a transaction, and I'm looking for the best way to avoid this warning. \r\nWith #163 the `StaticPool` is used by default for SQLite, which should be safe regarding multi-threading ?\r\nAnd even if I use the `NullPool`, I still get the warning, and don't understand why. Do you have any hint here ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/237", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/237/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/237/events", "html_url": "https://github.com/pudo/dataset/issues/237", "id": 290697908, "node_id": "MDU6SXNzdWUyOTA2OTc5MDg=", "number": 237, "title": "set foreign key", "user": {"login": "gvoysey", "id": 3641839, "node_id": "MDQ6VXNlcjM2NDE4Mzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3641839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvoysey", "html_url": "https://github.com/gvoysey", "followers_url": "https://api.github.com/users/gvoysey/followers", "following_url": "https://api.github.com/users/gvoysey/following{/other_user}", "gists_url": "https://api.github.com/users/gvoysey/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvoysey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvoysey/subscriptions", "organizations_url": "https://api.github.com/users/gvoysey/orgs", "repos_url": "https://api.github.com/users/gvoysey/repos", "events_url": "https://api.github.com/users/gvoysey/events{/privacy}", "received_events_url": "https://api.github.com/users/gvoysey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-23T03:34:33Z", "updated_at": "2018-01-28T14:26:28Z", "closed_at": "2018-01-28T14:26:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "this is less of a bug report and more of an open question not addressed in the docs. \r\nWhat are the semantics of foreign key relationships, one-to-many relationships between tables, etc.?\r\n\r\nSay i have two tables: \r\n\r\n```\r\ndb = dataset.connect(\"sqlite:///:memory:\")\r\nfoo = db['foo']\r\nfoo.insert({'name':'bob'})\r\nbar = db['bar']\r\nbar.insert({'clothing':'shirt'})\r\nbar.insert({'clothing':'pants'})\r\n# bob wants to wear some clothes\r\n```\r\n\r\nit's not clear to me how i add a FK (to `bar`? ), or query for \"bob and all his clothes\". \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/235", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/235/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/235/events", "html_url": "https://github.com/pudo/dataset/issues/235", "id": 287635414, "node_id": "MDU6SXNzdWUyODc2MzU0MTQ=", "number": 235, "title": "Table.exists fails for view", "user": {"login": "iszerotoo", "id": 35318131, "node_id": "MDQ6VXNlcjM1MzE4MTMx", "avatar_url": "https://avatars1.githubusercontent.com/u/35318131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iszerotoo", "html_url": "https://github.com/iszerotoo", "followers_url": "https://api.github.com/users/iszerotoo/followers", "following_url": "https://api.github.com/users/iszerotoo/following{/other_user}", "gists_url": "https://api.github.com/users/iszerotoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/iszerotoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iszerotoo/subscriptions", "organizations_url": "https://api.github.com/users/iszerotoo/orgs", "repos_url": "https://api.github.com/users/iszerotoo/repos", "events_url": "https://api.github.com/users/iszerotoo/events{/privacy}", "received_events_url": "https://api.github.com/users/iszerotoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157870, "node_id": "MDU6TGFiZWwzNDE1Nzg3MA==", "url": "https://api.github.com/repos/pudo/dataset/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-11T01:36:09Z", "updated_at": "2020-01-20T22:21:17Z", "closed_at": "2020-01-11T15:47:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "when i using version 0.8 , i could load a view like this:\r\ndb=dataset.connect('sqlite:///some.db')\r\nview = db['view_name']\r\nview.exists # this get true\r\n\r\nbut when i recently upgrade to 1.05, this did not work\r\nview.exists # this get false, not always but very often\r\n\r\nwhy? is this version designed to work like this or its a bug ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/234", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/234/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/234/events", "html_url": "https://github.com/pudo/dataset/issues/234", "id": 285233912, "node_id": "MDU6SXNzdWUyODUyMzM5MTI=", "number": 234, "title": "Iteration through not exist table raises exception", "user": {"login": "pohmelie", "id": 2385765, "node_id": "MDQ6VXNlcjIzODU3NjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2385765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pohmelie", "html_url": "https://github.com/pohmelie", "followers_url": "https://api.github.com/users/pohmelie/followers", "following_url": "https://api.github.com/users/pohmelie/following{/other_user}", "gists_url": "https://api.github.com/users/pohmelie/gists{/gist_id}", "starred_url": "https://api.github.com/users/pohmelie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pohmelie/subscriptions", "organizations_url": "https://api.github.com/users/pohmelie/orgs", "repos_url": "https://api.github.com/users/pohmelie/repos", "events_url": "https://api.github.com/users/pohmelie/events{/privacy}", "received_events_url": "https://api.github.com/users/pohmelie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-31T01:24:28Z", "updated_at": "2018-01-03T11:22:41Z", "closed_at": "2018-01-03T11:22:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 3.6\r\ndataset 1.0.4\r\n``` python\r\ndb = dataset.connect(\"sqlite:///data.db\"))\r\nfor row in db[\"abrakadabra\"]:\r\n    print(row)\r\n```\r\n```\r\nTypeError: iter() returned non-iterator of type 'list'\r\n```\r\nIt looks like the problem is [here](https://github.com/pudo/dataset/blob/master/dataset/table.py#L446). This should be `return iter([])` I think.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/233", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/233/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/233/events", "html_url": "https://github.com/pudo/dataset/issues/233", "id": 283573236, "node_id": "MDU6SXNzdWUyODM1NzMyMzY=", "number": 233, "title": "Set default value for a column", "user": {"login": "saimn", "id": 311639, "node_id": "MDQ6VXNlcjMxMTYzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/311639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saimn", "html_url": "https://github.com/saimn", "followers_url": "https://api.github.com/users/saimn/followers", "following_url": "https://api.github.com/users/saimn/following{/other_user}", "gists_url": "https://api.github.com/users/saimn/gists{/gist_id}", "starred_url": "https://api.github.com/users/saimn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saimn/subscriptions", "organizations_url": "https://api.github.com/users/saimn/orgs", "repos_url": "https://api.github.com/users/saimn/repos", "events_url": "https://api.github.com/users/saimn/events{/privacy}", "received_events_url": "https://api.github.com/users/saimn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 34157870, "node_id": "MDU6TGFiZWwzNDE1Nzg3MA==", "url": "https://api.github.com/repos/pudo/dataset/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-20T14:05:50Z", "updated_at": "2020-01-11T12:56:05Z", "closed_at": "2020-01-11T12:56:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to set a default value for a column, but that doesn't work for the first insert : \r\n```\r\nIn [24]: db = dataset.connect('sqlite:///:memory:')\r\n    ...: table = db['sometable']                  \r\n    ...: table.create_column('bar', db.types.integer)\r\n    ...: table.table.c['bar'].default = ColumnDefault(-1)\r\n    ...: table.insert(dict(name='John Doe', age=37))\r\n    ...: list(table.all())                              \r\n    ...: \r\nOut[24]: [OrderedDict([('id', 1), ('bar', None), ('name', 'John Doe'), ('age', 37)])]\r\n```\r\ndefault is not taken into account, but it works if I do it a second time:\r\n```\r\nIn [25]: table.table.c['bar'].default              \r\n                                \r\nIn [26]: table.table.c['bar'].default = ColumnDefault(-11)\r\n                                                     \r\nIn [27]: table.insert(dict(name='John Doe', age=37))     \r\nOut[27]: 2                                          \r\n                          \r\nIn [28]: list(table.all())\r\nOut[28]: \r\n[OrderedDict([('id', 1), ('bar', None), ('name', 'John Doe'), ('age', 37)]),         \r\n OrderedDict([('id', 2), ('bar', -11), ('name', 'John Doe'), ('age', 37)])]\r\n```\r\nOr another way, if I first insert a row, then it works:\r\n```\r\nIn [29]: db = dataset.connect('sqlite:///:memory:')\r\n    ...: table = db['sometable']\r\n    ...: table.create_column('bar', db.types.integer)\r\n    ...: table.insert(dict(name='John Doe', age=37))\r\n    ...: table.table.c['bar'].default = ColumnDefault(-1)\r\n    ...: table.insert(dict(name='John Doe', age=37))\r\n    ...: list(table.all())\r\nOut[29]: \r\n[OrderedDict([('id', 1), ('bar', None), ('name', 'John Doe'), ('age', 37)]),\r\n OrderedDict([('id', 2), ('bar', -1), ('name', 'John Doe'), ('age', 37)])]\r\n```\r\nMaybe related to #228 (*table is only really created when the first write operation is performed*) ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/232", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/232/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/232/events", "html_url": "https://github.com/pudo/dataset/issues/232", "id": 282596315, "node_id": "MDU6SXNzdWUyODI1OTYzMTU=", "number": 232, "title": "Where does the database save the data?", "user": {"login": "eduaero", "id": 16412674, "node_id": "MDQ6VXNlcjE2NDEyNjc0", "avatar_url": "https://avatars2.githubusercontent.com/u/16412674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduaero", "html_url": "https://github.com/eduaero", "followers_url": "https://api.github.com/users/eduaero/followers", "following_url": "https://api.github.com/users/eduaero/following{/other_user}", "gists_url": "https://api.github.com/users/eduaero/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduaero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduaero/subscriptions", "organizations_url": "https://api.github.com/users/eduaero/orgs", "repos_url": "https://api.github.com/users/eduaero/repos", "events_url": "https://api.github.com/users/eduaero/events{/privacy}", "received_events_url": "https://api.github.com/users/eduaero/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-16T03:26:07Z", "updated_at": "2018-02-18T09:16:05Z", "closed_at": "2018-02-18T09:16:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you very much for reading my comment.\r\nI was wondering how do I define where I save the database in local. I was using this line of code, but I cannot find where it gets save.\r\n\r\ndb = dataset.connect('sqlite:///:memory:')\r\n\r\nI would like to save it on \\db on the same folder where I run the codes.\r\n\r\nThank you very much!!\r\n\r\nCongrats for such an amazing and wonderful project!! I LOVE IT!!\r\n\r\nEdu\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/230", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/230/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/230/events", "html_url": "https://github.com/pudo/dataset/issues/230", "id": 274178467, "node_id": "MDU6SXNzdWUyNzQxNzg0Njc=", "number": 230, "title": "Trying to redefine primary-key column 'id' as a non-primary-key", "user": {"login": "saimn", "id": 311639, "node_id": "MDQ6VXNlcjMxMTYzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/311639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saimn", "html_url": "https://github.com/saimn", "followers_url": "https://api.github.com/users/saimn/followers", "following_url": "https://api.github.com/users/saimn/following{/other_user}", "gists_url": "https://api.github.com/users/saimn/gists{/gist_id}", "starred_url": "https://api.github.com/users/saimn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saimn/subscriptions", "organizations_url": "https://api.github.com/users/saimn/orgs", "repos_url": "https://api.github.com/users/saimn/repos", "events_url": "https://api.github.com/users/saimn/events{/privacy}", "received_events_url": "https://api.github.com/users/saimn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-15T14:37:31Z", "updated_at": "2017-11-15T14:43:55Z", "closed_at": "2017-11-15T14:41:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When setting the `primary_id` to a column name and next inserting data with that column name, it fails because it tries to recreate this column:\r\n```\r\nIn [1]: import dataset\r\n\r\nIn [2]: db = dataset.connect('sqlite:///factbook.db')\r\n\r\nIn [3]: table = db.create_table('population', 'id')\r\n\r\nIn [4]: table.insert(dict(age=12, id=2))\r\n---------------------------------------------------------------------------\r\nArgumentError                             Traceback (most recent call last)\r\n<ipython-input-4-bbf8ec668889> in <module>()\r\n----> 1 table.insert(dict(age=12, id=2))\r\n\r\n~/miniconda3/lib/python3.6/site-packages/dataset/table.py in insert(self, row, ensure, types)\r\n     77         Returns the inserted row's primary key.\r\n     78         \"\"\"\r\n---> 79         row = self._sync_columns(row, ensure, types=types)\r\n     80         res = self.db.executable.execute(self.table.insert(row))\r\n     81         if len(res.inserted_primary_key) > 0:\r\n\r\n~/miniconda3/lib/python3.6/site-packages/dataset/table.py in _sync_columns(self, row, ensure, types)\r\n    275             if name in columns:\r\n    276                 out[name] = value\r\n--> 277         self._sync_table(sync_columns)\r\n    278         return out\r\n    279 \r\n\r\n~/miniconda3/lib/python3.6/site-packages/dataset/table.py in _sync_table(self, columns)\r\n    242                     self._table.append_column(column)\r\n    243                 for column in columns:\r\n--> 244                     self._table.append_column(column)\r\n    245                 self._table.create(self.db.executable, checkfirst=True)\r\n    246         elif len(columns):\r\n\r\n~/miniconda3/lib/python3.6/site-packages/sqlalchemy/sql/schema.py in append_column(self, column)\r\n    679         \"\"\"\r\n    680 \r\n--> 681         column._set_parent_with_dispatch(self)\r\n    682 \r\n    683     def append_constraint(self, constraint):\r\n\r\n~/miniconda3/lib/python3.6/site-packages/sqlalchemy/sql/base.py in _set_parent_with_dispatch(self, parent)\r\n    429     def _set_parent_with_dispatch(self, parent):\r\n    430         self.dispatch.before_parent_attach(self, parent)\r\n--> 431         self._set_parent(parent)\r\n    432         self.dispatch.after_parent_attach(self, parent)\r\n    433 \r\n\r\n~/miniconda3/lib/python3.6/site-packages/sqlalchemy/sql/schema.py in _set_parent(self, table)\r\n   1342                 \"Trying to redefine primary-key column '%s' as a \"\r\n   1343                 \"non-primary-key column on table '%s'\" % (\r\n-> 1344                     self.key, table.fullname))\r\n   1345 \r\n   1346         self.table = table\r\n\r\nArgumentError: Trying to redefine primary-key column 'id' as a non-primary-key column on table 'population'\r\n\r\n```\r\nBut if I first a row without the `primary_id` value, then I can use it for the following rows:\r\n```\r\nIn [1]: import dataset\r\n\r\nIn [2]: db = dataset.connect('sqlite:///factbook.db')\r\n\r\nIn [3]: table = db.create_table('population', 'id')\r\n\r\nIn [4]: table.insert(dict(age=12))\r\nOut[4]: 1\r\n\r\nIn [5]: table.insert(dict(age=15, id=4))\r\nOut[5]: 4\r\n\r\nIn [6]: list(table.all())\r\nOut[6]: [OrderedDict([('id', 1), ('age', 12)]), OrderedDict([('id', 4), ('age', 15)])]\r\n```\r\nIs there a way to avoid that ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/229", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/229/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/229/events", "html_url": "https://github.com/pudo/dataset/issues/229", "id": 267582112, "node_id": "MDU6SXNzdWUyNjc1ODIxMTI=", "number": 229, "title": "Find_One Returns Only Column Names", "user": {"login": "gfleetwood", "id": 7785756, "node_id": "MDQ6VXNlcjc3ODU3NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7785756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfleetwood", "html_url": "https://github.com/gfleetwood", "followers_url": "https://api.github.com/users/gfleetwood/followers", "following_url": "https://api.github.com/users/gfleetwood/following{/other_user}", "gists_url": "https://api.github.com/users/gfleetwood/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfleetwood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfleetwood/subscriptions", "organizations_url": "https://api.github.com/users/gfleetwood/orgs", "repos_url": "https://api.github.com/users/gfleetwood/repos", "events_url": "https://api.github.com/users/gfleetwood/events{/privacy}", "received_events_url": "https://api.github.com/users/gfleetwood/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-23T08:30:16Z", "updated_at": "2017-11-05T10:13:54Z", "closed_at": "2017-11-05T10:13:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to pull user data from a table and decided to use find_one in the case of duplicates. It only returns the columns though. I'm using Ubuntu 14.04 and Python 3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/228", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/228/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/228/events", "html_url": "https://github.com/pudo/dataset/issues/228", "id": 265557916, "node_id": "MDU6SXNzdWUyNjU1NTc5MTY=", "number": 228, "title": "Strange issue with create_table and SQLite when database file doesn't exist initially", "user": {"login": "cheese528", "id": 9817824, "node_id": "MDQ6VXNlcjk4MTc4MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9817824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cheese528", "html_url": "https://github.com/cheese528", "followers_url": "https://api.github.com/users/cheese528/followers", "following_url": "https://api.github.com/users/cheese528/following{/other_user}", "gists_url": "https://api.github.com/users/cheese528/gists{/gist_id}", "starred_url": "https://api.github.com/users/cheese528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cheese528/subscriptions", "organizations_url": "https://api.github.com/users/cheese528/orgs", "repos_url": "https://api.github.com/users/cheese528/repos", "events_url": "https://api.github.com/users/cheese528/events{/privacy}", "received_events_url": "https://api.github.com/users/cheese528/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-15T09:25:34Z", "updated_at": "2019-07-13T13:11:15Z", "closed_at": "2019-07-13T13:11:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI was trying out this library and hit a strange issue, possibly due to not understanding something.\r\n\r\nWhen I tried to call connect() followed create_table() when pointed to a sqlite3 file that doesn't initially exist, the file gets created, but the table doesn't get created until I do something like print table.  See the sample code here:\r\n\r\n```python\r\n    import dataset\r\n\r\n    class Test(object):\r\n        def __init__(self):\r\n            self.url = None\r\n            self.tablename = None\r\n            self.db = None\r\n            self.table = None\r\n\r\n        def connect(self):\r\n            self.db = dataset.connect(self.url)\r\n            self.table = self.db.create_table(self.table)\r\n\r\n    if __name__ == '__main__':\r\n        testdb = Test()\r\n        testdb.url = 'sqlite:///test.db'\r\n        testdb.tablename = 'test'\r\n        testdb.connect()\r\n        print 'tables are', testdb.db.tables # empty set\r\n        print 'table column is', testdb.table.columns # no columns yet\r\n        print testdb.table\r\n        print 'tables are now', testdb.db.tables # table is now there\r\n        print 'table column is', testdb.table.columns # automatic id column is there too\r\n```\r\n\r\nThe resulting output:\r\n```\r\n    tables are []\r\n    table column is []\r\n    <Table(test)>\r\n    tables are now [u'test']\r\n    table column is ['id']\r\n```\r\nThe db file gets created at the point of the 'connect() call, but somehow the table doesn't unless I do the print.  Does anyone have an idea what I need to do to force the initialization of the initial table besides using the print?\r\n\r\nEdit: I'm using Python 2.7.11 on 64-bit Windows 10.  Also a mistype in the sample code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/227", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/227/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/227/events", "html_url": "https://github.com/pudo/dataset/issues/227", "id": 263669183, "node_id": "MDU6SXNzdWUyNjM2NjkxODM=", "number": 227, "title": "Python 3 JSON Freeze errors out", "user": {"login": "ColdHeat", "id": 166333, "node_id": "MDQ6VXNlcjE2NjMzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/166333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ColdHeat", "html_url": "https://github.com/ColdHeat", "followers_url": "https://api.github.com/users/ColdHeat/followers", "following_url": "https://api.github.com/users/ColdHeat/following{/other_user}", "gists_url": "https://api.github.com/users/ColdHeat/gists{/gist_id}", "starred_url": "https://api.github.com/users/ColdHeat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ColdHeat/subscriptions", "organizations_url": "https://api.github.com/users/ColdHeat/orgs", "repos_url": "https://api.github.com/users/ColdHeat/repos", "events_url": "https://api.github.com/users/ColdHeat/events{/privacy}", "received_events_url": "https://api.github.com/users/ColdHeat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-07T20:18:49Z", "updated_at": "2017-11-05T10:17:32Z", "closed_at": "2017-11-05T10:17:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running into an issue with Python 3 and dataset where it is unable to export a table to JSON using Python 3.6: \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"export.py\", line 12, in <module>\r\n    backup = export_ctf()\r\n  File \"/Users/kchung/Repositories/CTFd/CTFd/utils.py\", line 639, in export_ctf\r\n    datafreeze.freeze(result, format='json', fileobj=result_file)\r\n  File \"/Users/kchung/.virtualenvs/ctfd3/lib/python3.6/site-packages/datafreeze/app.py\", line 124, in freeze\r\n    return freeze_export(Export({}, kw), result=records)\r\n  File \"/Users/kchung/.virtualenvs/ctfd3/lib/python3.6/site-packages/datafreeze/app.py\", line 136, in freeze_export\r\n    serializer.serialize()\r\n  File \"/Users/kchung/.virtualenvs/ctfd3/lib/python3.6/site-packages/datafreeze/format/common.py\", line 93, in serialize\r\n    self.close()\r\n  File \"/Users/kchung/.virtualenvs/ctfd3/lib/python3.6/site-packages/datafreeze/format/fjson.py\", line 61, in close\r\n    fh.write(data)\r\nTypeError: a bytes-like object is required, not 'str'\r\n```\r\n\r\nI'm technically using datafreeze at the moment but I think the codebases are reasonably similar but I can open the issue there if you prefer. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/226", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/226/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/226/events", "html_url": "https://github.com/pudo/dataset/issues/226", "id": 261865081, "node_id": "MDU6SXNzdWUyNjE4NjUwODE=", "number": 226, "title": "Memory leak when iterating over DB with .all()", "user": {"login": "Jwink3101", "id": 3073584, "node_id": "MDQ6VXNlcjMwNzM1ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3073584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jwink3101", "html_url": "https://github.com/Jwink3101", "followers_url": "https://api.github.com/users/Jwink3101/followers", "following_url": "https://api.github.com/users/Jwink3101/following{/other_user}", "gists_url": "https://api.github.com/users/Jwink3101/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jwink3101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jwink3101/subscriptions", "organizations_url": "https://api.github.com/users/Jwink3101/orgs", "repos_url": "https://api.github.com/users/Jwink3101/repos", "events_url": "https://api.github.com/users/Jwink3101/events{/privacy}", "received_events_url": "https://api.github.com/users/Jwink3101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-30T19:04:48Z", "updated_at": "2020-01-11T14:01:33Z", "closed_at": "2020-01-11T14:01:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "My dataset-backed website tends go grow in memory over time and I *think* I finally traced it to dataset and my search function which iterates the entire DB (not the best method, I know).\r\n\r\nI only know a little bit of SQL, but I created the example below to demonstrate the problem. It uses [`memory_profiler`](https://github.com/fabianp/memory_profiler). Also note that you do not have to run the `make_db()` more than once (it is kind of slow). I also include a quick sanity check that both methods are iterating over the entire DB. \r\n\r\nI ran this with: (python 3.6.2) with the latest dataset (1.0.2)\r\n\r\n    $ python3 -m memory_profiler testmem.py\r\n\r\nYou will see that the first iteration through dataset adds a lot of memory and then the next ones add too (and it is never cleaned up). On the flip side, the iteration through the sqlite version doesn't change the memory (at all) and through the dataset `query` only adds memory the first time.\r\n\r\n(I should note that these are not 100% consistent. Run it a few times)\r\n\r\n````python\r\nfrom memory_profiler import profile # pip install memory_profiler\r\n\r\nimport sys\r\nif sys.version_info[0]>2:\r\n    xrange = range\r\n    unicode = str\r\n\r\nimport os\r\nimport random\r\nimport dataset\r\nimport sqlite3\r\n\r\nDBname = 'test.db'\r\n\r\nN = 5000;\r\n\r\nLI = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\"\"\r\nLI = LI.split()\r\n\r\ndef make_db():\r\n    # delete it\r\n    try:\r\n        os.remove(DBname)\r\n    except OSError:\r\n        pass\r\n    \r\n    DB = dataset.connect('sqlite:///' + DBname)\r\n    tab = DB['tab']\r\n    \r\n    def rows(N): # Iterator to yield the next item\r\n        for nn in range(N):\r\n            item = {'N':nn}\r\n            item['text'] = ' '.join(random.choice(LI) for _ in range(500))     \r\n            yield item\r\n    \r\n    tab.insert_many(rows(N))\r\n    DB.commit()    \r\n\r\n@profile\r\ndef test_iter_dataset(tab):\r\n    count = 0\r\n    all_iterator = tab.all()\r\n    for page in all_iterator:\r\n        count += len(page['text']) # Make sure it is querying all\r\n    \r\n    print(count)\r\n\r\n@profile\r\ndef test_iter_dataset_sql(DB):\r\n    count = 0\r\n    for page in DB.query('SELECT * from tab'):\r\n        count += len(page['text']) # Make sure it is querying all\r\n\r\n    print(count)\r\n\r\n@profile\r\ndef test_iter_sqlite(cursor):\r\n    count = 0\r\n    for page in cursor.execute('SELECT * from tab'):\r\n        count += len(page[2]) # Make sure it is querying all\r\n\r\n    print(count)\r\n    \r\n\r\nif __name__ == '__main__':\r\n    make_db() # Just run once\r\n    \r\n    # Test with the same DB\r\n    DB = dataset.connect('sqlite:///' + DBname)\r\n    tab = DB['tab']\r\n    for ii in range(3):\r\n        print('dataset {} ---------'.format(ii))\r\n        test_iter_dataset(tab)\r\n        print('dataset {} +++++++++'.format(ii))\r\n    \r\n    DB2 = dataset.connect('sqlite:///' + DBname)\r\n    for ii in range(3):\r\n        print('dataset sql {} ---------'.format(ii))\r\n        test_iter_dataset_sql(DB2)\r\n        print('dataset sql {} +++++++++'.format(ii))\r\n    \r\n    DB3 = sqlite3.connect(DBname)\r\n    cursor = DB3.cursor()\r\n    for ii in range(3):\r\n        print('sqlite {} ---------'.format(ii))\r\n        test_iter_sqlite(cursor)\r\n        print('sqlite {} +++++++++'.format(ii))\r\n    \r\n````\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/225", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/225/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/225/events", "html_url": "https://github.com/pudo/dataset/issues/225", "id": 261755152, "node_id": "MDU6SXNzdWUyNjE3NTUxNTI=", "number": 225, "title": "Database _check_ensure method overrides Table ensure keyword argument", "user": {"login": "emanuelfeld", "id": 4269640, "node_id": "MDQ6VXNlcjQyNjk2NDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4269640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emanuelfeld", "html_url": "https://github.com/emanuelfeld", "followers_url": "https://api.github.com/users/emanuelfeld/followers", "following_url": "https://api.github.com/users/emanuelfeld/following{/other_user}", "gists_url": "https://api.github.com/users/emanuelfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/emanuelfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emanuelfeld/subscriptions", "organizations_url": "https://api.github.com/users/emanuelfeld/orgs", "repos_url": "https://api.github.com/users/emanuelfeld/repos", "events_url": "https://api.github.com/users/emanuelfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/emanuelfeld/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-29T20:01:31Z", "updated_at": "2020-01-11T13:38:31Z", "closed_at": "2020-01-11T13:38:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If ensure is not set for a Table operation, its value is set to the Database ensure_schema value. With ensure_schema set to True by default, new columns are added if ensure is not set to False.\r\n\r\nhttps://github.com/pudo/dataset/blob/da901efbf747c1e2863d5a14982191aea3ca105e/dataset/table.py#L280\r\n\r\nThis is not the expected behavior from reading the API documentation\r\n\r\n> If ensure is set, any of the keys of the row are not table columns, they will be created automatically.\r\n\r\nIt would be clearer if the default argument for ensure was True.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/223", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/223/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/223/events", "html_url": "https://github.com/pudo/dataset/issues/223", "id": 261500858, "node_id": "MDU6SXNzdWUyNjE1MDA4NTg=", "number": 223, "title": "Jedi doesn't autocomplete functions and methods properly", "user": {"login": "esauvisky", "id": 18354658, "node_id": "MDQ6VXNlcjE4MzU0NjU4", "avatar_url": "https://avatars0.githubusercontent.com/u/18354658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/esauvisky", "html_url": "https://github.com/esauvisky", "followers_url": "https://api.github.com/users/esauvisky/followers", "following_url": "https://api.github.com/users/esauvisky/following{/other_user}", "gists_url": "https://api.github.com/users/esauvisky/gists{/gist_id}", "starred_url": "https://api.github.com/users/esauvisky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/esauvisky/subscriptions", "organizations_url": "https://api.github.com/users/esauvisky/orgs", "repos_url": "https://api.github.com/users/esauvisky/repos", "events_url": "https://api.github.com/users/esauvisky/events{/privacy}", "received_events_url": "https://api.github.com/users/esauvisky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-29T00:40:40Z", "updated_at": "2017-09-29T10:37:25Z", "closed_at": "2017-09-29T10:37:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "_I'm a new user to Python, so I don't know exactly what I'm doing. Sorry if this is not the right place to ask this._ \r\n\r\nI'm using Anaconda with Sublime Text 3 as my Python IDE.\r\nAs I understand, Anaconda uses jedi to find autocompletions for imported packages.\r\n\r\nHowever, when trying the sample script of dataset:\r\n        \r\n    db = dataset.connect('sqlite:///ebay.db')\r\n    table = db['searches']\r\n    table.insert [...]\r\n         ^ problem happens there`\r\n\r\nAfter the dot, I get no autocompletion of _insert_ (or any other functions).\r\nWhen I try it in the python console it works fine. \r\n\r\nI tried to debug it and narrowed down the problem to either _jedi_ or _dataset_.\r\n_At Python console:_\r\n\r\n    >>> from jedi import Script\r\n    >>> print(Script('import dataset;dataset.table.').completions())\r\n\r\n_Returns:_\r\n\r\n    [<Completion: and_>, <Completion: ClauseElement>, <Completion: Column>, <Completion: DatasetException>, <Completion: ensure_tuple>, <Completion: expression>, <Completion: false>, <Completion: func>, <Completion: Index>, <Completion: index_name>, <Completion: log>, <Completion: logging>, <Completion: normalize_column_name>, <Completion: normalize_table_name>, <Completion: NoSuchTableError>, <Completion: QUERY_STEP>, <Completion: ResultIter>, <Completion: select>, <Completion: SQLATable>, <Completion: Table>, <Completion: threading>, <Completion: Types>, <Completion: warnings>, <Completion: __doc__>, <Completion: __file__>, <Completion: __name__>, <Completion: __package__>]\r\n\r\nNote there is no `Completion: insert` there.\r\n\r\nIf I try listing the completions of *dataset.* it works though:\r\n\r\n    >>> from jedi import Script\r\n    >>> print(Script('import dataset;dataset.').completions())\r\n\r\nReturns:\r\n\r\n    [<Completion: connect>, <Completion: Database>, <Completion: database>, <Completion: os>, <Completion: row_type>, <Completion: Table>, <Completion: table>, <Completion: types>, <Completion: util>, <Completion: warnings>, <Completion: __all__>, <Completion: __doc__>, <Completion: __file__>, <Completion: __name__>, <Completion: __package__>]\r\n\r\nAs you can see, `Completion: connect` is there, for example.\r\n\r\nAm I missing anything? Am I doing something stupidly wrong? Sorry if this is completely trivial.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/222", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/222/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/222/events", "html_url": "https://github.com/pudo/dataset/issues/222", "id": 256908175, "node_id": "MDU6SXNzdWUyNTY5MDgxNzU=", "number": 222, "title": "Cannot set type argument in Table.create_column()", "user": {"login": "aernesto", "id": 15206067, "node_id": "MDQ6VXNlcjE1MjA2MDY3", "avatar_url": "https://avatars2.githubusercontent.com/u/15206067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aernesto", "html_url": "https://github.com/aernesto", "followers_url": "https://api.github.com/users/aernesto/followers", "following_url": "https://api.github.com/users/aernesto/following{/other_user}", "gists_url": "https://api.github.com/users/aernesto/gists{/gist_id}", "starred_url": "https://api.github.com/users/aernesto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aernesto/subscriptions", "organizations_url": "https://api.github.com/users/aernesto/orgs", "repos_url": "https://api.github.com/users/aernesto/repos", "events_url": "https://api.github.com/users/aernesto/events{/privacy}", "received_events_url": "https://api.github.com/users/aernesto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-12T03:39:04Z", "updated_at": "2017-09-25T22:00:55Z", "closed_at": "2017-09-14T23:08:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nIf this is not the place where I should post this question, please let me know and I will be happy to post it elsewhere.\r\n\r\n---\r\nI tried to reproduce your example from the [documentation](https://dataset.readthedocs.io/en/latest/api.html#database):\r\n```\r\ntable3 = db.create_table('population3',\r\n                         primary_id='city',\r\n                         primary_type=db.types.text)\r\n```\r\nbut Python 3 returns the error:\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-40-5e2e59dae3cc> in <module>()\r\n      1 table3 = db.create_table('population3',\r\n      2                          primary_id='city',\r\n----> 3                          primary_type=db.types.text)\r\n\r\nAttributeError: 'Database' object has no attribute 'types'\r\n```\r\nI am performing all of this on a [Jupyter notebook](http://jupyter-notebook.readthedocs.io/en/latest/).\r\n\r\nI tried to investigate in a very basic manner, with the following commands/outputs:\r\n`type(db)` returns\r\n```\r\ndataset.persistence.database.Database\r\n```\r\n`db.__dict__.keys()` returns\r\n```\r\ndict_keys(['lock', 'local', 'schema', 'engine', 'url', 'row_type', 'ensure_schema', '_tables', 'metadata'])\r\n```\r\n\r\nAny help would be appreciated", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/221", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/221/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/221/events", "html_url": "https://github.com/pudo/dataset/issues/221", "id": 256631244, "node_id": "MDU6SXNzdWUyNTY2MzEyNDQ=", "number": 221, "title": "Ask for help, about MySQL UnicodeEncodeError", "user": {"login": "Iflier", "id": 19361364, "node_id": "MDQ6VXNlcjE5MzYxMzY0", "avatar_url": "https://avatars1.githubusercontent.com/u/19361364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Iflier", "html_url": "https://github.com/Iflier", "followers_url": "https://api.github.com/users/Iflier/followers", "following_url": "https://api.github.com/users/Iflier/following{/other_user}", "gists_url": "https://api.github.com/users/Iflier/gists{/gist_id}", "starred_url": "https://api.github.com/users/Iflier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Iflier/subscriptions", "organizations_url": "https://api.github.com/users/Iflier/orgs", "repos_url": "https://api.github.com/users/Iflier/repos", "events_url": "https://api.github.com/users/Iflier/events{/privacy}", "received_events_url": "https://api.github.com/users/Iflier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-11T09:05:44Z", "updated_at": "2017-09-29T10:47:08Z", "closed_at": "2017-09-29T10:47:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I met a question about MySQL. when I try to insert data to a database:\r\n\r\n```\r\ndb = dataset.connect(url=\"mysql://{password}:{username}@localhost/testdataset\".format(password=conf.get(\"password\"), username=conf.get(\"user\")),\r\n                     reflect_metadata=True, engine_kwargs={\"encoding\": \"utf-8\"})\r\n```\r\n\r\n,and when it run raise an error:\r\n\r\n```\r\nFile \"D:\\Python\\lib\\site-packages\\dataset\\table.py\", line 134, in insert_many\r\n    self.table.insert().execute(chunk)\r\n  File \"D:\\Python\\lib\\site-packages\\sqlalchemy\\sql\\base.py\", line 386, in execute\r\n    return e._execute_clauseelement(self, multiparams, params)\r\n  File \"D:\\Python\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1053, in _execute_clauseelement\r\n    compiled_sql, distilled_params\r\n  File \"D:\\Python\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1189, in _execute_context\r\n    context)\r\n  File \"D:\\Python\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1405, in _handle_dbapi_exception\r\n    util.reraise(*exc_info)\r\n  File \"D:\\Python\\lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 187, in reraise\r\n    raise value\r\n  File \"D:\\Python\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1159, in _execute_context\r\n    context)\r\n  File \"D:\\Python\\lib\\site-packages\\sqlalchemy\\dialects\\mysql\\mysqldb.py\", line 113, in do_executemany\r\n    rowcount = cursor.executemany(statement, parameters)\r\n  File \"D:\\Python\\lib\\site-packages\\MySQLdb\\cursors.py\", line 281, in executemany\r\n    self._get_db().encoding)\r\n  File \"D:\\Python\\lib\\site-packages\\MySQLdb\\cursors.py\", line 297, in _do_execute_many\r\n    v = values % escape(next(args), conn)\r\n  File \"D:\\Python\\lib\\site-packages\\MySQLdb\\cursors.py\", line 111, in _escape_args\r\n    return tuple(conn.literal(arg) for arg in args)\r\n  File \"D:\\Python\\lib\\site-packages\\MySQLdb\\cursors.py\", line 111, in <genexpr>\r\n    return tuple(conn.literal(arg) for arg in args)\r\n  File \"D:\\Python\\lib\\site-packages\\MySQLdb\\connections.py\", line 318, in literal\r\n    s = self.escape(o, self.encoders)\r\n  File \"D:\\Python\\lib\\site-packages\\MySQLdb\\connections.py\", line 225, in unicode_literal\r\n    return db.string_literal(str(u).encode(db.encoding))\r\nUnicodeEncodeError: 'latin-1' codec can't encode characters in position 0-2: ordinal not in range(256)\r\n\r\n[Done] exited with code=1 in 0.662 seconds\r\nPython: Ver 3.5.2, MySQL: Ver 5.7, dataset: Ver 1.0.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/220", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/220/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/220/events", "html_url": "https://github.com/pudo/dataset/issues/220", "id": 256542271, "node_id": "MDU6SXNzdWUyNTY1NDIyNzE=", "number": 220, "title": "problem explicitly adding column to table prior to any write", "user": {"login": "paulfitz", "id": 118367, "node_id": "MDQ6VXNlcjExODM2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/118367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulfitz", "html_url": "https://github.com/paulfitz", "followers_url": "https://api.github.com/users/paulfitz/followers", "following_url": "https://api.github.com/users/paulfitz/following{/other_user}", "gists_url": "https://api.github.com/users/paulfitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulfitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulfitz/subscriptions", "organizations_url": "https://api.github.com/users/paulfitz/orgs", "repos_url": "https://api.github.com/users/paulfitz/repos", "events_url": "https://api.github.com/users/paulfitz/events{/privacy}", "received_events_url": "https://api.github.com/users/paulfitz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-10T21:37:31Z", "updated_at": "2017-09-14T23:17:11Z", "closed_at": "2017-09-14T23:17:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm seeing a problem (with dataset==1.0.0) explicitly creating columns like this:\r\n```py\r\n    def test_create_table_and_add_column(self):\r\n        table = self.db.create_table('addresses')\r\n        table.create_column('status', self.db.types.integer)\r\n        assert len(table.table.columns) == 2, table.table.columns\r\n```\r\nThe above code fails as follows:\r\n```py\r\nTraceback (most recent call last):\r\n  File \"/home/paulfitz/cvs/dataset/test/test_dataset.py\", line 154, in test_create_table_and_add_column\r\n    table.create_column('status', self.db.types.integer)\r\n  File \"/home/paulfitz/cvs/dataset/dataset/table.py\", line 334, in create_column\r\n    self.db.schema\r\n  File \"/usr/local/lib/python2.7/dist-packages/alembic/operations.py\", line 595, in add_column\r\n    schema=schema\r\n  File \"/usr/local/lib/python2.7/dist-packages/alembic/ddl/impl.py\", line 176, in add_column\r\n    self._exec(base.AddColumn(table_name, column, schema=schema))\r\n  File \"/usr/local/lib/python2.7/dist-packages/alembic/ddl/impl.py\", line 122, in _exec\r\n    return conn.execute(construct, *multiparams, **params)\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/engine/base.py\", line 945, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/sql/ddl.py\", line 68, in _execute_on_connection\r\n    return connection._execute_ddl(self, multiparams, params)\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/engine/base.py\", line 1002, in _execute_ddl\r\n    compiled\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/engine/base.py\", line 1189, in _execute_context\r\n    context)\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/engine/base.py\", line 1393, in _handle_dbapi_exception\r\n    exc_info\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/util/compat.py\", line 203, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/engine/base.py\", line 1182, in _execute_context\r\n    context)\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/engine/default.py\", line 470, in do_execute\r\n    cursor.execute(statement, parameters)\r\nOperationalError: (pysqlite2.dbapi2.OperationalError) no such table: addresses [SQL: u'ALTER TABLE addresses ADD COLUMN status INTEGER']\r\n```\r\nIf I write something before adding a column, all is good - for example, this works:\r\n```py\r\n    def test_create_table_and_add_column(self):\r\n        table = self.db.create_table('addresses')\r\n        table.insert({})  # <--- adding a write\r\n        table.create_column('status', self.db.types.integer)\r\n        assert len(table.table.columns) == 2, table.table.columns\r\n```\r\nI see a commit message related to lazy table creation, and I'm guessing this is a side effect of that. Should I change how I'm writing the code or is there a bug?\r\n\r\nGreat library and excited to see it reach 1.0 :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/219", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/219/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/219/events", "html_url": "https://github.com/pudo/dataset/issues/219", "id": 255542615, "node_id": "MDU6SXNzdWUyNTU1NDI2MTU=", "number": 219, "title": "Asyncio", "user": {"login": "lormayna", "id": 5850251, "node_id": "MDQ6VXNlcjU4NTAyNTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5850251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lormayna", "html_url": "https://github.com/lormayna", "followers_url": "https://api.github.com/users/lormayna/followers", "following_url": "https://api.github.com/users/lormayna/following{/other_user}", "gists_url": "https://api.github.com/users/lormayna/gists{/gist_id}", "starred_url": "https://api.github.com/users/lormayna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lormayna/subscriptions", "organizations_url": "https://api.github.com/users/lormayna/orgs", "repos_url": "https://api.github.com/users/lormayna/repos", "events_url": "https://api.github.com/users/lormayna/events{/privacy}", "received_events_url": "https://api.github.com/users/lormayna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-06T09:43:27Z", "updated_at": "2017-09-09T16:27:47Z", "closed_at": "2017-09-09T16:27:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is dataset supporting asyncio?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/218", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/218/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/218/events", "html_url": "https://github.com/pudo/dataset/issues/218", "id": 255263153, "node_id": "MDU6SXNzdWUyNTUyNjMxNTM=", "number": 218, "title": "Can't use insert for auto ADD COLUMN", "user": {"login": "adelleodel", "id": 15379548, "node_id": "MDQ6VXNlcjE1Mzc5NTQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/15379548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelleodel", "html_url": "https://github.com/adelleodel", "followers_url": "https://api.github.com/users/adelleodel/followers", "following_url": "https://api.github.com/users/adelleodel/following{/other_user}", "gists_url": "https://api.github.com/users/adelleodel/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelleodel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelleodel/subscriptions", "organizations_url": "https://api.github.com/users/adelleodel/orgs", "repos_url": "https://api.github.com/users/adelleodel/repos", "events_url": "https://api.github.com/users/adelleodel/events{/privacy}", "received_events_url": "https://api.github.com/users/adelleodel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-05T12:39:55Z", "updated_at": "2017-09-06T06:35:16Z", "closed_at": "2017-09-06T06:35:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "i try to insert new column (not yet add to certain table).\r\ni would like to add the column using dataset, which is in 'Storing data' section of dataset document in [here](https://dataset.readthedocs.io/en/latest/quickstart.html#connecting-to-a-database) said that\r\n\r\n> dataset will create \"missing\" columns any time you insert a dict with an unknown key\r\n\r\nso i try it myself. but in my condition, the program keep 'hang' or 'idle' and not running anymore.\r\n```\r\nadelleodel ~ $ ps -aux | grep postgre\r\npostgres  1508  0.0  0.6 305248 24448 ?        S    15:17   0:00 /usr/lib/postgresql/9.6/bin/postgres -D /var/lib/postgresql/9.6/main -c config_file=/etc/postgresql/9.6/main/postgresql.conf\r\npostgres  1509  0.0  0.6 294708 24152 ?        S    15:17   0:00 /usr/lib/postgresql/9.5/bin/postgres -D /var/lib/postgresql/9.5/main -c config_file=/etc/postgresql/9.5/main/postgresql.conf\r\npostgres  1510  0.0  0.6 294116 23892 ?        S    15:17   0:00 /usr/lib/postgresql/9.4/bin/postgres -D /var/lib/postgresql/9.4/main -c config_file=/etc/postgresql/9.4/main/postgresql.conf\r\npostgres  1553  0.0  0.0 294116  3892 ?        Ss   15:17   0:00 postgres: checkpointer process   \r\npostgres  1554  0.0  0.1 294116  5556 ?        Ss   15:17   0:00 postgres: writer process   \r\npostgres  1555  0.0  0.0 294116  3892 ?        Ss   15:17   0:00 postgres: wal writer process   \r\npostgres  1556  0.0  0.1 294540  6316 ?        Ss   15:17   0:00 postgres: autovacuum launcher process   \r\npostgres  1557  0.0  0.0 149260  2940 ?        Ss   15:17   0:00 postgres: stats collector process   \r\npostgres  1558  0.0  0.0 305248  3840 ?        Ss   15:17   0:00 postgres: checkpointer process   \r\npostgres  1559  0.0  0.0 305248  3840 ?        Ss   15:17   0:00 postgres: writer process   \r\npostgres  1560  0.0  0.0 305248  3840 ?        Ss   15:17   0:00 postgres: wal writer process   \r\npostgres  1561  0.0  0.1 305696  6576 ?        Ss   15:17   0:00 postgres: autovacuum launcher process   \r\npostgres  1562  0.0  0.0 160248  3216 ?        Ss   15:17   0:00 postgres: stats collector process   \r\npostgres  1566  0.0  0.1 294836  6932 ?        Ss   15:17   0:00 postgres: checkpointer process   \r\npostgres  1567  0.0  0.1 294708  5540 ?        Ss   15:17   0:00 postgres: writer process   \r\npostgres  1568  0.0  0.2 294708  8704 ?        Ss   15:17   0:00 postgres: wal writer process   \r\npostgres  1569  0.0  0.1 295136  6448 ?        Ss   15:17   0:00 postgres: autovacuum launcher process   \r\npostgres  1570  0.0  0.1 149828  4232 ?        Ss   15:17   0:00 postgres: stats collector process   \r\nadelleo+  4997  0.0  0.2 111788  8392 pts/4    S+   16:38   0:00 /usr/lib/postgresql/9.6/bin/psql -d newdatabase -U adelleodel -W\r\npostgres  5010  0.0  0.3 302736 15816 ?        Ss   16:38   0:00 postgres: adelleodel newdatabase [local] idle\r\npostgres  5034  0.2  0.3 296472 15496 ?        Ss   16:39   0:00 postgres: adelleodel newdatabase 127.0.0.1(42358) idle in transaction\r\npostgres  5036  0.0  0.3 296468 15364 ?        Ss   16:39   0:00 postgres: adelleodel newdatabase 127.0.0.1(42360) SELECT waiting\r\nadelleo+  5122  0.0  0.0  14232   968 pts/2    R+   16:39   0:00 grep --color=auto postgre \r\n```\r\nthen i try:\r\n`$ select * from pg_stat_activity \\x\\g\\x;`\r\n\r\nshown:\r\n```\r\n...\r\ndatid            | 25350\r\ndatname          | newdatabase\r\npid              | 5034\r\nusesysid         | 16398\r\nusename          | adelleodel\r\napplication_name | \r\nclient_addr      | 127.0.0.1\r\nclient_hostname  | \r\nclient_port      | 42358\r\nbackend_start    | 2017-08-24 16:39:22.906779+07\r\nxact_start       | 2017-08-24 16:39:23.377092+07\r\nquery_start      | 2017-08-24 16:39:23.377159+07\r\nstate_change     | 2017-08-24 16:39:23.412624+07\r\nwaiting          | f\r\nstate            | idle in transaction\r\nbackend_xid      | 117863\r\nbackend_xmin     | \r\nquery            | ALTER TABLE newtable2 ADD COLUMN latitude INTEGER\r\n-[ RECORD 3 ]----+-------------------------------------------------------------------\r\ndatid            | 25350\r\ndatname          | newdatabase\r\npid              | 5036\r\nusesysid         | 16398\r\nusename          | adelleodel\r\napplication_name | \r\nclient_addr      | 127.0.0.1\r\nclient_hostname  | \r\nclient_port      | 42360\r\nbackend_start    | 2017-08-24 16:39:23.413498+07\r\nxact_start       | 2017-08-24 16:39:23.419179+07\r\nquery_start      | 2017-08-24 16:39:23.430744+07\r\nstate_change     | 2017-08-24 16:39:23.430747+07\r\nwaiting          | t\r\nstate            | active\r\nbackend_xid      | \r\nbackend_xmin     | 117863\r\nquery            |                                                                   +\r\n                 |             SELECT a.attname,                                     +\r\n                 |               pg_catalog.format_type(a.atttypid, a.atttypmod),    +\r\n                 |               (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid)  +\r\n                 |                 FROM pg_catalog.pg_attrdef d                      +\r\n                 |                WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum+\r\n                 |                AND a.atthasdef)                                   +\r\n                 |               AS DEFAULT,                                         +\r\n                 |               a.attnotnull, a.attnum, a.attrelid as table_oid     +\r\n                 |             FROM pg_catalog.pg_attribute a                        +\r\n                 |             WHERE a.attrelid = 25512                              +\r\n                 |             AND a.attnum > 0 AND NOT a.attisdropped               +\r\n                 |             ORDER BY a.attnum                                     +\r\n                 |         \r\n\r\n...\r\n```\r\n\r\ni make sure that the user is superuser and have access to database (i already set GRANT ALL for the user). i also try to prove it like this:\r\n```\r\nnewdatabase=# select current_setting('is_superuser'); \r\n current_setting \r\n-----------------\r\n on\r\n(1 row)\r\n\r\nnewdatabase=# show is_superuser;\r\n is_superuser \r\n--------------\r\n on\r\n(1 row)\r\nnewdatabase=# select usesuper from pg_user where usename = CURRENT_USER;\r\n usesuper \r\n----------\r\n t\r\n(1 row)\r\n```\r\n\r\nas long as i remember, in the first try, i can add another new column.\r\nbut recently, when i try it again, i don't know why but it keep hang like that.\r\nif you guys know what happening in here, please tell me. so i may still using this dataset module.\r\nthankyou", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/217", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/217/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/217/events", "html_url": "https://github.com/pudo/dataset/issues/217", "id": 255165610, "node_id": "MDU6SXNzdWUyNTUxNjU2MTA=", "number": 217, "title": "Split datafreeze into it's own module", "user": {"login": "pudo", "id": 41628, "node_id": "MDQ6VXNlcjQxNjI4", "avatar_url": "https://avatars0.githubusercontent.com/u/41628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pudo", "html_url": "https://github.com/pudo", "followers_url": "https://api.github.com/users/pudo/followers", "following_url": "https://api.github.com/users/pudo/following{/other_user}", "gists_url": "https://api.github.com/users/pudo/gists{/gist_id}", "starred_url": "https://api.github.com/users/pudo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pudo/subscriptions", "organizations_url": "https://api.github.com/users/pudo/orgs", "repos_url": "https://api.github.com/users/pudo/repos", "events_url": "https://api.github.com/users/pudo/events{/privacy}", "received_events_url": "https://api.github.com/users/pudo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-05T05:45:23Z", "updated_at": "2017-09-09T17:06:22Z", "closed_at": "2017-09-09T16:26:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The vast majority of ``dataset`` users seem to only be using the persistence part of the application, not the flat-file dumping component. Since the latter is largely independent of the former, they should live in separate packages.\r\n\r\nMaking this transition will require a major version semver release.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/215", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/215/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/215/events", "html_url": "https://github.com/pudo/dataset/issues/215", "id": 253191151, "node_id": "MDU6SXNzdWUyNTMxOTExNTE=", "number": 215, "title": "Expose and document Database.engine", "user": {"login": "dcbb", "id": 8624827, "node_id": "MDQ6VXNlcjg2MjQ4Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8624827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcbb", "html_url": "https://github.com/dcbb", "followers_url": "https://api.github.com/users/dcbb/followers", "following_url": "https://api.github.com/users/dcbb/following{/other_user}", "gists_url": "https://api.github.com/users/dcbb/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcbb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcbb/subscriptions", "organizations_url": "https://api.github.com/users/dcbb/orgs", "repos_url": "https://api.github.com/users/dcbb/repos", "events_url": "https://api.github.com/users/dcbb/events{/privacy}", "received_events_url": "https://api.github.com/users/dcbb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-27T21:28:27Z", "updated_at": "2017-09-05T05:56:38Z", "closed_at": "2017-09-05T05:56:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes it is useful to access the underlying sqlalchemy engine. For this, it would be nice if it was documented (I found it reading the source), or even supported with a getter and probably an example in the docs.\r\n\r\nWhy? For working with libraries that can do something with a DB connection, like Pandas. Specifically, in my project,\r\n\r\n    dataframe = pandas.read_sql(sql, con=db.engine)\r\n\r\nis an order of magnitude faster than creating lists or dictionaries from the result set and passing those to Pandas. The combination of dataset and Pandas is really nice, so I think this would benefit others.\r\n\r\nAnd btw: I LOVE dataset!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/214", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/214/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/214/events", "html_url": "https://github.com/pudo/dataset/issues/214", "id": 252057550, "node_id": "MDU6SXNzdWUyNTIwNTc1NTA=", "number": 214, "title": "Mutables as default arguments in functions", "user": {"login": "aleksarias", "id": 8338500, "node_id": "MDQ6VXNlcjgzMzg1MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8338500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksarias", "html_url": "https://github.com/aleksarias", "followers_url": "https://api.github.com/users/aleksarias/followers", "following_url": "https://api.github.com/users/aleksarias/following{/other_user}", "gists_url": "https://api.github.com/users/aleksarias/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksarias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksarias/subscriptions", "organizations_url": "https://api.github.com/users/aleksarias/orgs", "repos_url": "https://api.github.com/users/aleksarias/repos", "events_url": "https://api.github.com/users/aleksarias/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksarias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-22T19:03:06Z", "updated_at": "2017-09-05T17:39:17Z", "closed_at": "2017-09-02T06:50:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "This may result in bugs. Better to use sentinel.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/213", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/213/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/213/events", "html_url": "https://github.com/pudo/dataset/issues/213", "id": 241420747, "node_id": "MDU6SXNzdWUyNDE0MjA3NDc=", "number": 213, "title": "Question: Multiple values and/or wildcard lookup? ", "user": {"login": "Jwink3101", "id": 3073584, "node_id": "MDQ6VXNlcjMwNzM1ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3073584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jwink3101", "html_url": "https://github.com/Jwink3101", "followers_url": "https://api.github.com/users/Jwink3101/followers", "following_url": "https://api.github.com/users/Jwink3101/following{/other_user}", "gists_url": "https://api.github.com/users/Jwink3101/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jwink3101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jwink3101/subscriptions", "organizations_url": "https://api.github.com/users/Jwink3101/orgs", "repos_url": "https://api.github.com/users/Jwink3101/repos", "events_url": "https://api.github.com/users/Jwink3101/events{/privacy}", "received_events_url": "https://api.github.com/users/Jwink3101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-08T03:12:40Z", "updated_at": "2018-06-12T20:24:38Z", "closed_at": "2017-09-04T16:51:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am lazy and *really* looking forward to using `dataset` in my next (personal) project. \r\n\r\nWhile I can think of workarounds, I would really like to be able to insert multiple values for a key. For example:\r\n\r\n    table.insert(dict(key=['val1','val2'])) # Causes SQL error on insert\r\n\r\nAnd then be able to (quickly) query on `val1`. Alternatively, I could do\r\n\r\n    table.insert(dict(key='val1,val2'))\r\n\r\nwhich is allowed, but I can't query with wild cards. Or can I?\r\n\r\nIs there any current way to do what I want? Is there is any possibility of supporting it in the future?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/212", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/212/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/212/events", "html_url": "https://github.com/pudo/dataset/issues/212", "id": 235020331, "node_id": "MDU6SXNzdWUyMzUwMjAzMzE=", "number": 212, "title": "TypeError: string argument without an encoding", "user": {"login": "BebeSparkelSparkel", "id": 10747532, "node_id": "MDQ6VXNlcjEwNzQ3NTMy", "avatar_url": "https://avatars2.githubusercontent.com/u/10747532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BebeSparkelSparkel", "html_url": "https://github.com/BebeSparkelSparkel", "followers_url": "https://api.github.com/users/BebeSparkelSparkel/followers", "following_url": "https://api.github.com/users/BebeSparkelSparkel/following{/other_user}", "gists_url": "https://api.github.com/users/BebeSparkelSparkel/gists{/gist_id}", "starred_url": "https://api.github.com/users/BebeSparkelSparkel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BebeSparkelSparkel/subscriptions", "organizations_url": "https://api.github.com/users/BebeSparkelSparkel/orgs", "repos_url": "https://api.github.com/users/BebeSparkelSparkel/repos", "events_url": "https://api.github.com/users/BebeSparkelSparkel/events{/privacy}", "received_events_url": "https://api.github.com/users/BebeSparkelSparkel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-10T18:49:07Z", "updated_at": "2020-01-11T12:30:53Z", "closed_at": "2020-01-11T12:30:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I really like the concept of dataset but I'm having a problem using it on my sqlite db.\r\n\r\nSimple code\r\n```python\r\ndb['parts'].find(import_successfully=True)\r\nfor r in rows:\r\n      print(r['description'])\r\n```\r\n\r\nsqlite3 table\r\n```sql\r\nCREATE TABLE IF NOT EXISTS parts (\r\n  description TEXT,\r\n  file BLOB,\r\n  reference BLOB,\r\n  tolerance TEXT,\r\n  units TEXT,\r\n  import_successfully BOOL,\r\n\r\n  last_success_test_time TEXT,\r\n  status TEXT\r\n);\r\n```\r\n\r\n```shell\r\nTraceback (most recent call last):\r\n  File \"test_nesting_methods.py\", line 142, in test_create_shape_errors\r\n    for r in rows:\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/dataset/persistence/util.py\", line 70, in __next__\r\n    return convert_row(self.row_type, next(self._iter))\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/dataset/persistence/util.py\", line 35, in convert_row\r\n    return row_type(row.items())\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/sqlalchemy/engine/result.py\", line 166, in items\r\n    return [(key, self[key]) for key in self.keys()]\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/sqlalchemy/engine/result.py\", line 166, in <listcomp>\r\n    return [(key, self[key]) for key in self.keys()]\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/sqlalchemy/sql/sqltypes.py\", line 904, in process\r\n    value = bytes(value)\r\nTypeError: string argument without an encoding\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/211", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/211/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/211/events", "html_url": "https://github.com/pudo/dataset/issues/211", "id": 230791056, "node_id": "MDU6SXNzdWUyMzA3OTEwNTY=", "number": 211, "title": "Close connection automatically when with is used", "user": {"login": "ritviksahajpal", "id": 2277375, "node_id": "MDQ6VXNlcjIyNzczNzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2277375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ritviksahajpal", "html_url": "https://github.com/ritviksahajpal", "followers_url": "https://api.github.com/users/ritviksahajpal/followers", "following_url": "https://api.github.com/users/ritviksahajpal/following{/other_user}", "gists_url": "https://api.github.com/users/ritviksahajpal/gists{/gist_id}", "starred_url": "https://api.github.com/users/ritviksahajpal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ritviksahajpal/subscriptions", "organizations_url": "https://api.github.com/users/ritviksahajpal/orgs", "repos_url": "https://api.github.com/users/ritviksahajpal/repos", "events_url": "https://api.github.com/users/ritviksahajpal/events{/privacy}", "received_events_url": "https://api.github.com/users/ritviksahajpal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-05-23T17:47:17Z", "updated_at": "2019-04-04T21:02:19Z", "closed_at": "2017-09-02T06:36:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I connect to a database using the with statement like this:\r\n\r\n```\r\nwith dataset.connect(path_to_database) as db:\r\n    pass\r\n```\r\n\r\nDoes the connection to database close automatically once we are outside the scope of the with statement? Or should we still explicitly close the connection?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/210", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/210/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/210/events", "html_url": "https://github.com/pudo/dataset/issues/210", "id": 229072695, "node_id": "MDU6SXNzdWUyMjkwNzI2OTU=", "number": 210, "title": "Tests for custom ids hang on teardown when dropping created table", "user": {"login": "stefanw", "id": 78356, "node_id": "MDQ6VXNlcjc4MzU2", "avatar_url": "https://avatars0.githubusercontent.com/u/78356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefanw", "html_url": "https://github.com/stefanw", "followers_url": "https://api.github.com/users/stefanw/followers", "following_url": "https://api.github.com/users/stefanw/following{/other_user}", "gists_url": "https://api.github.com/users/stefanw/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefanw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefanw/subscriptions", "organizations_url": "https://api.github.com/users/stefanw/orgs", "repos_url": "https://api.github.com/users/stefanw/repos", "events_url": "https://api.github.com/users/stefanw/events{/privacy}", "received_events_url": "https://api.github.com/users/stefanw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-16T15:22:50Z", "updated_at": "2017-09-04T20:56:02Z", "closed_at": "2017-09-04T20:56:02Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "[Travis CI tests for Postgres](https://travis-ci.org/pudo/dataset/jobs/232860570) and [MySQL](https://travis-ci.org/pudo/dataset/jobs/232860571) currently hang on the [`test_create_table_custom_id1`](https://github.com/pudo/dataset/blob/master/test/test_persistence.py#L50) test. I reproduced it locally for Postgres and it hangs on test teardown when dropping the `foo2` table. \r\n\r\nThere are locks present in Postgres, but I haven't been able to track this down fully.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/209", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/209/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/209/events", "html_url": "https://github.com/pudo/dataset/issues/209", "id": 228902034, "node_id": "MDU6SXNzdWUyMjg5MDIwMzQ=", "number": 209, "title": "Exception when using insert/upsert in transactions if new columns are added after first insert/upsert", "user": {"login": "jason1365", "id": 16825179, "node_id": "MDQ6VXNlcjE2ODI1MTc5", "avatar_url": "https://avatars3.githubusercontent.com/u/16825179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jason1365", "html_url": "https://github.com/jason1365", "followers_url": "https://api.github.com/users/jason1365/followers", "following_url": "https://api.github.com/users/jason1365/following{/other_user}", "gists_url": "https://api.github.com/users/jason1365/gists{/gist_id}", "starred_url": "https://api.github.com/users/jason1365/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jason1365/subscriptions", "organizations_url": "https://api.github.com/users/jason1365/orgs", "repos_url": "https://api.github.com/users/jason1365/repos", "events_url": "https://api.github.com/users/jason1365/events{/privacy}", "received_events_url": "https://api.github.com/users/jason1365/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-16T03:01:08Z", "updated_at": "2017-09-04T16:39:43Z", "closed_at": "2017-09-04T16:39:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "dataset seems to handle adding new columns well; however, within a transaction, it fails if there is a valid insert/upsert prior to a row of data that would require adding a new column. The columns list also seems to get the new column added in it's list; however, it doesn't make it into sqlite.\r\n\r\nCode [dataset_issue.txt](https://github.com/pudo/dataset/files/1003084/dataset_issue.txt):\r\n`db = dataset.connect('sqlite:///tmp/sandbox.db')\r\ntablename = 'new_non-existant_Table'\r\ndb[tablename]\r\ndict1 = {'id': '3270156573', 'price': 116000, 'shortPrice': '$116k'}\r\ndict2 = {'id': '3269807036', 'price': 429000, 'shortPrice': '$429k', 'hasOpenHouse': True} \r\nwith db as dbTransaction:\r\n    print(dbTransaction[tablename].columns)\r\n    data = dbTransaction[tablename].upsert(dict1, ['id'])\r\n    print(\"new columns are added on the first insert/upsert\")\r\n    print(dbTransaction[tablename].columns)\r\n    try:\r\n        data = dbTransaction[tablename].upsert(dict2, ['id'])\r\n    except Exception as e:\r\n        print(str(e))\r\n        print(dbTransaction[tablename].columns)\r\n        print(\"Seems to now have the column...\")\r\n        try:\r\n            data = dbTransaction[tablename].upsert(dict2, ['id'])\r\n        except Exception as e2:\r\n            print(str(e2))\r\n            print(\"But the column actually isn't available...\")\r\nprint(\"Final set of columns:\")\r\nprint(db[tablename].columns)`\r\n\r\nResults from code:\r\n`['id']\r\nnew columns are added on the first insert/upsert\r\n['id', 'price', 'shortPrice']\r\n(sqlite3.OperationalError) table new_non-existant_Table has no column named hasOpenHouse [SQL: 'INSERT INTO \"new_non-existant_Table\" (id, price, \"shortPrice\", \"hasOpenHouse\") VALUES (?, ?, ?, ?)'] [parameters: ('3269807036', 429000, '$429k', 1)]\r\n['id', 'price', 'shortPrice', 'hasOpenHouse']\r\nSeems to now have the column...\r\n(sqlite3.OperationalError) no such column: new_non-existant_Table.hasOpenHouse [SQL: 'SELECT \"new_non-existant_Table\".id, \"new_non-existant_Table\".price, \"new_non-existant_Table\".\"shortPrice\", \"new_non-existant_Table\".\"hasOpenHouse\" \\nFROM \"new_non-existant_Table\" \\nWHERE \"new_non-existant_Table\".id = ?\\n LIMIT ? OFFSET ?'] [parameters: ('3269807036', 1, 0)]\r\nBut the column actually isn't available...\r\nFinal set of columns:\r\n['id', 'price', 'shortPrice', 'hasOpenHouse']`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/208", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/208/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/208/events", "html_url": "https://github.com/pudo/dataset/issues/208", "id": 226083418, "node_id": "MDU6SXNzdWUyMjYwODM0MTg=", "number": 208, "title": "Unexpected behavior when dropping and re-creating table ", "user": {"login": "jasonhildebrand", "id": 7389806, "node_id": "MDQ6VXNlcjczODk4MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/7389806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonhildebrand", "html_url": "https://github.com/jasonhildebrand", "followers_url": "https://api.github.com/users/jasonhildebrand/followers", "following_url": "https://api.github.com/users/jasonhildebrand/following{/other_user}", "gists_url": "https://api.github.com/users/jasonhildebrand/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonhildebrand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonhildebrand/subscriptions", "organizations_url": "https://api.github.com/users/jasonhildebrand/orgs", "repos_url": "https://api.github.com/users/jasonhildebrand/repos", "events_url": "https://api.github.com/users/jasonhildebrand/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonhildebrand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-03T19:02:31Z", "updated_at": "2017-09-05T14:03:34Z", "closed_at": "2017-09-05T05:54:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm liking dataset - thanks for your work on it!\r\n\r\nI saw in the documentation for drop_table:   If you want to re-create the table, make sure to get a fresh instance from the Database.\r\n\r\nI thought I could get a fresh instance by invoking create_table explicitly, as follows:\r\n\r\n    db['test'].drop()\r\n    table = db.create_table('test', primary_id='name')\r\n    assert table.columns == ['name'], table.columns\r\n    # Fails with: AssertionError: ['id', 'name']\r\n\r\nBut found that my table then contains an unwanted 'id' column.  I believe this is added implicitly when I do db['test'].drop(), and is somehow being cached.\r\n\r\nAfter some digging I found that adding a db.update_table() call solves this issue:\r\n\r\n    db['test'].drop()\r\n    db.update_table('test')\r\n    table = db.create_table('test', primary_id='name')\r\n    assert table.columns == ['name'], table.columns\r\n\r\nIf possible it would be good to to fix this unexpected behavior, so that the call to update_table() is not necessary.  But in the meantime, it would help new users if you could mention update_table() in the docs for drop_table.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/207", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/207/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/207/events", "html_url": "https://github.com/pudo/dataset/issues/207", "id": 225483871, "node_id": "MDU6SXNzdWUyMjU0ODM4NzE=", "number": 207, "title": "Use sqlite_autoincrement for SQLite data bases?", "user": {"login": "Macuyiko", "id": 271897, "node_id": "MDQ6VXNlcjI3MTg5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/271897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Macuyiko", "html_url": "https://github.com/Macuyiko", "followers_url": "https://api.github.com/users/Macuyiko/followers", "following_url": "https://api.github.com/users/Macuyiko/following{/other_user}", "gists_url": "https://api.github.com/users/Macuyiko/gists{/gist_id}", "starred_url": "https://api.github.com/users/Macuyiko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Macuyiko/subscriptions", "organizations_url": "https://api.github.com/users/Macuyiko/orgs", "repos_url": "https://api.github.com/users/Macuyiko/repos", "events_url": "https://api.github.com/users/Macuyiko/events{/privacy}", "received_events_url": "https://api.github.com/users/Macuyiko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-01T17:54:45Z", "updated_at": "2017-09-06T06:46:38Z", "closed_at": "2017-09-05T06:05:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, the auto increment implementation of SQLAlchemy and SQLite will cause SQLite to reuse earlier-seen IDs in case rows are deleted. The auto-generated id is hence MAX(id) + 1, instead of LAST_ID_GENERATED + 1.  This can cause issues when working with multiple tables with some kind of \"weak\" foreign key system going on.\r\n\r\nSQLAlchemy supports setting the \"sqlite_autoincrement\" parameter to add AUTOINCREMENT when creating tables. Perhaps this can be added as an option to dataset?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/206", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/206/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/206/events", "html_url": "https://github.com/pudo/dataset/issues/206", "id": 222319571, "node_id": "MDU6SXNzdWUyMjIzMTk1NzE=", "number": 206, "title": "sqlalchemy.BigInteger (bigserial) is not supported as primary key type", "user": {"login": "daniel-surename", "id": 27721653, "node_id": "MDQ6VXNlcjI3NzIxNjUz", "avatar_url": "https://avatars0.githubusercontent.com/u/27721653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-surename", "html_url": "https://github.com/daniel-surename", "followers_url": "https://api.github.com/users/daniel-surename/followers", "following_url": "https://api.github.com/users/daniel-surename/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-surename/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-surename/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-surename/subscriptions", "organizations_url": "https://api.github.com/users/daniel-surename/orgs", "repos_url": "https://api.github.com/users/daniel-surename/repos", "events_url": "https://api.github.com/users/daniel-surename/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-surename/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-18T06:53:07Z", "updated_at": "2017-09-04T20:30:34Z", "closed_at": "2017-09-04T20:30:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is impossible to insert a row who's id column is a big integer:\r\n\r\n\r\n`table = db['temptable']`\r\n`insertee = {'id': 222641234407424, 'foo':'bar'}`\r\n`table.insert(insertee, ensure=True, types={'id': sqlalchemy.BigInteger})`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/205", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/205/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/205/events", "html_url": "https://github.com/pudo/dataset/issues/205", "id": 218806394, "node_id": "MDU6SXNzdWUyMTg4MDYzOTQ=", "number": 205, "title": "Incorrect String Value", "user": {"login": "Dennis-Duarte-Mariana", "id": 22567980, "node_id": "MDQ6VXNlcjIyNTY3OTgw", "avatar_url": "https://avatars3.githubusercontent.com/u/22567980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dennis-Duarte-Mariana", "html_url": "https://github.com/Dennis-Duarte-Mariana", "followers_url": "https://api.github.com/users/Dennis-Duarte-Mariana/followers", "following_url": "https://api.github.com/users/Dennis-Duarte-Mariana/following{/other_user}", "gists_url": "https://api.github.com/users/Dennis-Duarte-Mariana/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dennis-Duarte-Mariana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dennis-Duarte-Mariana/subscriptions", "organizations_url": "https://api.github.com/users/Dennis-Duarte-Mariana/orgs", "repos_url": "https://api.github.com/users/Dennis-Duarte-Mariana/repos", "events_url": "https://api.github.com/users/Dennis-Duarte-Mariana/events{/privacy}", "received_events_url": "https://api.github.com/users/Dennis-Duarte-Mariana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-03T00:31:15Z", "updated_at": "2017-09-02T15:40:40Z", "closed_at": "2017-09-02T15:40:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, i am trying this simple code\r\n\r\ndb = dataset.connect('mysql://root:@localhost/aula5bdis')\r\n\r\ntable = db['curso']\r\n\r\njohn = table.find_one(nome=\"JDennis\")\r\n\r\n, but it keeps throwing this error.\r\n\r\n\r\nC:\\Python27\\lib\\site-packages\\sqlalchemy\\engine\\default.py:450: Warning: (1366L, \"Incorrect string value: '\\\\xE3o de ...' for column 'VARIABLE_VALUE' at row 478\")\r\n  cursor.execute(statement, parameters)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/204", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/204/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/204/events", "html_url": "https://github.com/pudo/dataset/issues/204", "id": 211521774, "node_id": "MDU6SXNzdWUyMTE1MjE3NzQ=", "number": 204, "title": "Transaction doesn't work with insert_many and postgres", "user": {"login": "aleksarias", "id": 8338500, "node_id": "MDQ6VXNlcjgzMzg1MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8338500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksarias", "html_url": "https://github.com/aleksarias", "followers_url": "https://api.github.com/users/aleksarias/followers", "following_url": "https://api.github.com/users/aleksarias/following{/other_user}", "gists_url": "https://api.github.com/users/aleksarias/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksarias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksarias/subscriptions", "organizations_url": "https://api.github.com/users/aleksarias/orgs", "repos_url": "https://api.github.com/users/aleksarias/repos", "events_url": "https://api.github.com/users/aleksarias/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksarias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-02T21:22:20Z", "updated_at": "2017-09-05T05:57:18Z", "closed_at": "2017-09-05T05:57:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried transaction with the simple insert and it worked fine. \r\nI then tried the transaction with insert many however the rollback isn't occurring.\r\n\r\nHere's the code I used to test this functionality:\r\n```\r\n        db = dataset_connect('postgres-master')\r\n        db.begin()\r\n        try:\r\n            chunk_size = 5000\r\n            i = 0\r\n            chunk = []\r\n            total_rows = 0\r\n            for row in rows:\r\n                db['ad_words_hourly'].insert(row)\r\n            #     chunk.append(row)\r\n            #     i += 1\r\n            #     total_rows += 1\r\n            #     if i >= chunk_size:\r\n            #         log.info('Insert rows %s to %s' % (total_rows-chunk_size, total_rows))\r\n                    db['ad_words_hourly'].insert_many(chunk, chunk_size=chunk_size)\r\n            #         i = 0\r\n            #         chunk = []\r\n            # if chunk:\r\n            #     log.info('Insert rows %s to %s' % (total_rows - chunk_size, total_rows))\r\n            #     db['ad_words_hourly'].insert_many(chunk, chunk_size=chunk_size)\r\n            db.commit()\r\n        except:\r\n            print('Requesting rollback')\r\n            db.rollback()\r\n            raise\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/203", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/203/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/203/events", "html_url": "https://github.com/pudo/dataset/issues/203", "id": 207896927, "node_id": "MDU6SXNzdWUyMDc4OTY5Mjc=", "number": 203, "title": "Column creation in context transaction fails in Python 3.6 sqlite", "user": {"login": "fmder", "id": 961474, "node_id": "MDQ6VXNlcjk2MTQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/961474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmder", "html_url": "https://github.com/fmder", "followers_url": "https://api.github.com/users/fmder/followers", "following_url": "https://api.github.com/users/fmder/following{/other_user}", "gists_url": "https://api.github.com/users/fmder/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmder/subscriptions", "organizations_url": "https://api.github.com/users/fmder/orgs", "repos_url": "https://api.github.com/users/fmder/repos", "events_url": "https://api.github.com/users/fmder/events{/privacy}", "received_events_url": "https://api.github.com/users/fmder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-15T19:03:05Z", "updated_at": "2017-09-05T05:51:11Z", "closed_at": "2017-09-05T05:51:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using Python3.6, the following code raises an operational error saying that the column does not exist\r\n\r\n````python\r\nfrom dataset import connect\r\ndb = connect(\"sqlite:///test.db\")\r\nwith db as tx:\r\n    tx[\"result\"].insert({\"foo\": \"bar\"})\r\n````\r\n\r\neven using `ensure=True` raises the error.\r\n\r\nI forked dataset and setup a travis-ci to reproduce the error : https://travis-ci.org/NovaSyst/dataset", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/202", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/202/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/202/events", "html_url": "https://github.com/pudo/dataset/issues/202", "id": 206982285, "node_id": "MDU6SXNzdWUyMDY5ODIyODU=", "number": 202, "title": "about table.delete", "user": {"login": "wlccgp3", "id": 20854848, "node_id": "MDQ6VXNlcjIwODU0ODQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/20854848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wlccgp3", "html_url": "https://github.com/wlccgp3", "followers_url": "https://api.github.com/users/wlccgp3/followers", "following_url": "https://api.github.com/users/wlccgp3/following{/other_user}", "gists_url": "https://api.github.com/users/wlccgp3/gists{/gist_id}", "starred_url": "https://api.github.com/users/wlccgp3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wlccgp3/subscriptions", "organizations_url": "https://api.github.com/users/wlccgp3/orgs", "repos_url": "https://api.github.com/users/wlccgp3/repos", "events_url": "https://api.github.com/users/wlccgp3/events{/privacy}", "received_events_url": "https://api.github.com/users/wlccgp3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-02-11T14:19:04Z", "updated_at": "2017-05-17T08:27:57Z", "closed_at": "2017-02-13T09:35:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "why it's delete all when I use table.delete({'a': 1))?\r\ncould you hlep me? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/201", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/201/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/201/events", "html_url": "https://github.com/pudo/dataset/issues/201", "id": 206905342, "node_id": "MDU6SXNzdWUyMDY5MDUzNDI=", "number": 201, "title": "deprecation warning from psycopg2 or sqlalchemy", "user": {"login": "yurzo", "id": 25695763, "node_id": "MDQ6VXNlcjI1Njk1NzYz", "avatar_url": "https://avatars2.githubusercontent.com/u/25695763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurzo", "html_url": "https://github.com/yurzo", "followers_url": "https://api.github.com/users/yurzo/followers", "following_url": "https://api.github.com/users/yurzo/following{/other_user}", "gists_url": "https://api.github.com/users/yurzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurzo/subscriptions", "organizations_url": "https://api.github.com/users/yurzo/orgs", "repos_url": "https://api.github.com/users/yurzo/repos", "events_url": "https://api.github.com/users/yurzo/events{/privacy}", "received_events_url": "https://api.github.com/users/yurzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-10T21:00:24Z", "updated_at": "2017-09-02T06:44:12Z", "closed_at": "2017-09-02T06:44:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "`dataset/persistence/table.py:400: SADeprecationWarning: ``FromClause.count()`` is deprecated. Counting rows requires that the correct column expression and accommodations for joins, DISTINCT, etc. must be made, otherwise results may not be what's expected. Please use an appropriate ``func.count()`` expression directly.`\r\n\r\nIn [4]: psycopg2.__version__\r\nOut[4]: '2.6.1 (dt dec pq3 ext lo64)'\r\n\r\nIn [6]: sqlalchemy.__version__\r\nOut[6]: '1.1.5'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/200", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/200/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/200/events", "html_url": "https://github.com/pudo/dataset/issues/200", "id": 203956426, "node_id": "MDU6SXNzdWUyMDM5NTY0MjY=", "number": 200, "title": "sqlite3 OperationalError", "user": {"login": "nmaas87", "id": 1331457, "node_id": "MDQ6VXNlcjEzMzE0NTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1331457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nmaas87", "html_url": "https://github.com/nmaas87", "followers_url": "https://api.github.com/users/nmaas87/followers", "following_url": "https://api.github.com/users/nmaas87/following{/other_user}", "gists_url": "https://api.github.com/users/nmaas87/gists{/gist_id}", "starred_url": "https://api.github.com/users/nmaas87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nmaas87/subscriptions", "organizations_url": "https://api.github.com/users/nmaas87/orgs", "repos_url": "https://api.github.com/users/nmaas87/repos", "events_url": "https://api.github.com/users/nmaas87/events{/privacy}", "received_events_url": "https://api.github.com/users/nmaas87/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-01-30T09:07:06Z", "updated_at": "2017-09-05T06:08:38Z", "closed_at": "2017-09-05T06:08:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there,\r\n\r\nI always get following error\r\n\r\nTraceback (most recent call last):\r\n  File \"./compile_results.py\", line 58, in <module>\r\n    for i in table_send:\r\n  File \"/usr/local/lib/python2.7/dist-packages/dataset/persistence/util.py\", line 73, in __next__\r\n    return self.__next__()\r\n  File \"/usr/local/lib/python2.7/dist-packages/dataset/persistence/util.py\", line 67, in __next__\r\n    if not self._next_chunk():\r\n  File \"/usr/local/lib/python2.7/dist-packages/dataset/persistence/util.py\", line 58, in _next_chunk\r\n    chunk = self.result_proxy.fetchmany(self.step)\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/engine/result.py\", line 997, in fetchmany\r\n    self.cursor, self.context)\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/engine/base.py\", line 1341, in _handle_dbapi_exception\r\n    exc_info\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/util/compat.py\", line 200, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb)\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/engine/result.py\", line 990, in fetchmany\r\n    l = self.process_rows(self._fetchmany_impl(size))\r\n  File \"/usr/local/lib/python2.7/dist-packages/sqlalchemy/engine/result.py\", line 907, in _fetchmany_impl\r\n    return self.cursor.fetchmany(size)\r\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) SQL logic error or missing database\r\n\r\nif I try to access dataset number 5000 of my sqlite database.\r\n\r\nI am importing two databases into memory with about 60000 rows, which works.\r\nI can also access the row 5000 (here id 10000) without error. However, as soon as the sqlite database reaches the for loop at this position, the whole python program crashes with the error shown above. So it seems like the database is working and got the imported data correctly (otherwise I could not access it before the for loop) - but something weird happens then. Any ideas?\r\n\r\nThank you very much for your help and great product :)\r\n\r\n\r\n````\r\n# import json from sender into memory database\r\ndb_send = dataset.connect('sqlite:///:memory:')\r\ntable_send = db_send['record']\r\nwith open(sendfile) as send:\r\n    s = json.load(send)\r\ntable_send.insert_many(s[\"results\"])\r\nsend.close()\r\n\r\n# import json from receiver into memory database\r\ndb_recv = dataset.connect('sqlite:///:memory:')\r\ntable_recv = db_recv['record']\r\nwith open(recvfile) as recv:\r\n    r = json.load(recv)\r\ntable_recv.insert_many(r[\"results\"])\r\nrecv.close()\r\n\r\n# init variables for matching counter\r\ncount_search=0\r\ncount_found=0\r\n\r\n#print len(table_send)\r\n#test = table_send.find_one(id=9998)\r\n#print test['id']\r\n#test = table_send.find_one(id=10000)\r\n#print test['id']\r\n#test = table_send.find_one(id=10002)\r\n#print test['id']\r\n\r\n# iterate through sender results, set file as sent\r\n# match checksum of sent files to received files\r\n# if matches, include time details of receiver and set received\r\n# update results\r\nfor i in table_send:\r\n        print i['id']\r\n        i['file_sent'] = 1\r\n        count_search += 1\r\n        res_recv = table_recv.find_one(filechecksum=i['filechecksum'])\r\n        i['file_sent'] = 1\r\n        if res_recv != None:\r\n                count_found += 1\r\n                #print i['filechecksum'] + ':' + res_recv['filechecksum']\r\n                i['r_time_start'] = res_recv['time_start']\r\n                i['r_time_end'] = res_recv['time_end']\r\n                i['r_time'] = res_recv['time']\r\n                i['file_received'] = 1\r\n        table_send.update(i,['id'])\r\n````", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/199", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/199/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/199/events", "html_url": "https://github.com/pudo/dataset/issues/199", "id": 203179850, "node_id": "MDU6SXNzdWUyMDMxNzk4NTA=", "number": 199, "title": "Deprecation warning FromClause.count()", "user": {"login": "fmder", "id": 961474, "node_id": "MDQ6VXNlcjk2MTQ3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/961474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmder", "html_url": "https://github.com/fmder", "followers_url": "https://api.github.com/users/fmder/followers", "following_url": "https://api.github.com/users/fmder/following{/other_user}", "gists_url": "https://api.github.com/users/fmder/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmder/subscriptions", "organizations_url": "https://api.github.com/users/fmder/orgs", "repos_url": "https://api.github.com/users/fmder/repos", "events_url": "https://api.github.com/users/fmder/events{/privacy}", "received_events_url": "https://api.github.com/users/fmder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-25T18:10:34Z", "updated_at": "2017-02-02T08:29:30Z", "closed_at": "2017-02-02T08:29:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that since SQLAlchemy 1.1, FromClause.count() is deprecated and one should use func.count() instead. This is the full deprecation warning message.\r\n\r\n```\r\npython3.5/site-packages/dataset/persistence/table.py:440: SADeprecationWarning: ``FromClause.count()`` is deprecated. Counting rows requires that the correct column expression and accommodations for joins, DISTINCT, etc. must be made, otherwise results may not be what's expected. Please use an appropriate ``func.count()`` expression directly.\r\n```\r\n\r\nHere is the SQLAlchemy API link : http://docs.sqlalchemy.org/en/latest/core/selectable.html#sqlalchemy.sql.expression.Alias.count", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/198", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/198/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/198/events", "html_url": "https://github.com/pudo/dataset/issues/198", "id": 200149028, "node_id": "MDU6SXNzdWUyMDAxNDkwMjg=", "number": 198, "title": "Database freeze not executing and not returning an exception either.", "user": {"login": "Olamyy", "id": 14059714, "node_id": "MDQ6VXNlcjE0MDU5NzE0", "avatar_url": "https://avatars2.githubusercontent.com/u/14059714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Olamyy", "html_url": "https://github.com/Olamyy", "followers_url": "https://api.github.com/users/Olamyy/followers", "following_url": "https://api.github.com/users/Olamyy/following{/other_user}", "gists_url": "https://api.github.com/users/Olamyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Olamyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Olamyy/subscriptions", "organizations_url": "https://api.github.com/users/Olamyy/orgs", "repos_url": "https://api.github.com/users/Olamyy/repos", "events_url": "https://api.github.com/users/Olamyy/events{/privacy}", "received_events_url": "https://api.github.com/users/Olamyy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-11T16:58:01Z", "updated_at": "2017-01-11T18:00:08Z", "closed_at": "2017-01-11T18:00:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a database I'm attempting to export using dataset.\r\nThe export completes when i use a **freezefile.yaml** i.e when i do :\r\n\r\n`datafreeze freezefile.yaml`\r\n\r\nHowever when i try it from a script query, the export does not execute and does not return an error either.\r\nWhat I'm trying is this.\r\n\r\n\r\n  ```python\r\n    query = self.db[table].all()\r\n    try:\r\n       dataset.freeze(query, format='csv', filename='data/data.csv')\r\n    except Exception as error:\r\n                print(error)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/197", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/197/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/197/events", "html_url": "https://github.com/pudo/dataset/issues/197", "id": 198563517, "node_id": "MDU6SXNzdWUxOTg1NjM1MTc=", "number": 197, "title": "sqlite operational error using dataset but not sqlite directly", "user": {"login": "jmerkow", "id": 5933681, "node_id": "MDQ6VXNlcjU5MzM2ODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/5933681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmerkow", "html_url": "https://github.com/jmerkow", "followers_url": "https://api.github.com/users/jmerkow/followers", "following_url": "https://api.github.com/users/jmerkow/following{/other_user}", "gists_url": "https://api.github.com/users/jmerkow/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmerkow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmerkow/subscriptions", "organizations_url": "https://api.github.com/users/jmerkow/orgs", "repos_url": "https://api.github.com/users/jmerkow/repos", "events_url": "https://api.github.com/users/jmerkow/events{/privacy}", "received_events_url": "https://api.github.com/users/jmerkow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-03T20:39:14Z", "updated_at": "2017-02-02T08:30:03Z", "closed_at": "2017-02-02T08:30:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running this in a docker based on python:2.7.\r\nWhen I try to connect/create a db (sqlite) I get an operational error, that states \"unable to open database file\"\r\nHowever, when I make the connection using sqlite3, it works fine.\r\n\r\n```python\r\nimport tempfile\r\nimport dataset\r\noutput_dir = tempfile.mkdtemp()\r\ndata = [dict(name='John Doe', age=46, country='China'),\r\n       dict(name='Jane Doe', age=26, country='France')]\r\ndb = dataset.connect('sqlite://'+output_dir+'/data.db')\r\n\r\n```\r\nError (full stack attached):\r\n\r\n> ---------------------------------------------------------------------------\r\n> OperationalError                          Traceback (most recent call last)\r\n> <ipython-input-24-f139904cb690> in <module>()\r\n> ----> 1 db = dataset.connect('sqlite://'+output_dir+'/data.db')\r\n> ....\r\n> /usr/local/lib/python2.7/site-packages/dataset/persistence/database.pyc in __init__(self, url, schema, reflect_metadata, engine_kwargs, reflect_views, ensure_schema, row_type)\r\n>      58         self.metadata.bind = self.engine\r\n>      59         if reflect_metadata:\r\n> ---> 60             self.metadata.reflect(self.engine, views=reflect_views)\r\n>      61             for table_name in self.metadata.tables.keys():\r\n>      62                 self.load_table(self.metadata.tables[table_name].name)\r\n> ....\r\n> /usr/local/lib/python2.7/site-packages/sqlalchemy/engine/default.pyc in connect(self, *cargs, **cparams)\r\n>     390 \r\n>     391     def connect(self, *cargs, **cparams):\r\n> --> 392         return self.dbapi.connect(*cargs, **cparams)\r\n>     393 \r\n>     394     def create_connect_args(self, url):\r\n> \r\n> OperationalError: (sqlite3.OperationalError) unable to open database file\r\n\r\n\r\n```python\r\nimport sqlite3 as sqlite\r\nimport pandas as pd\r\nconn = sqlite.connect(output_dir+'/data.db')\r\ndf = pd.DataFrame(data)\r\ndf.to_sql('data', conn, index=False, if_exists='replace')\r\ndf2 = pd.read_sql('select * from data', conn)\r\nprint df2\r\n```\r\n\r\noutput:\r\n\r\n>    age country      name\r\n> 0   46   China  John Doe\r\n> 1   26  France  Jane Doe\r\n\r\n\r\nusing: `db = dataset.connect('sqlite://'+'/data.db')` works fine.  \r\n\r\n[The entire stack trace](https://github.com/pudo/dataset/files/683172/dataset-error-stack-trace.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pudo/dataset/issues/196", "repository_url": "https://api.github.com/repos/pudo/dataset", "labels_url": "https://api.github.com/repos/pudo/dataset/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/pudo/dataset/issues/196/comments", "events_url": "https://api.github.com/repos/pudo/dataset/issues/196/events", "html_url": "https://github.com/pudo/dataset/issues/196", "id": 197275173, "node_id": "MDU6SXNzdWUxOTcyNzUxNzM=", "number": 196, "title": "add support to use pg_service.conf?", "user": {"login": "swuecho", "id": 666683, "node_id": "MDQ6VXNlcjY2NjY4Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/666683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swuecho", "html_url": "https://github.com/swuecho", "followers_url": "https://api.github.com/users/swuecho/followers", "following_url": "https://api.github.com/users/swuecho/following{/other_user}", "gists_url": "https://api.github.com/users/swuecho/gists{/gist_id}", "starred_url": "https://api.github.com/users/swuecho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swuecho/subscriptions", "organizations_url": "https://api.github.com/users/swuecho/orgs", "repos_url": "https://api.github.com/users/swuecho/repos", "events_url": "https://api.github.com/users/swuecho/events{/privacy}", "received_events_url": "https://api.github.com/users/swuecho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-22T21:58:23Z", "updated_at": "2017-02-02T08:31:23Z", "closed_at": "2017-02-02T08:31:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://gist.github.com/tym-oao/33baf67bb332cebc4b20f7211dbedf59\r\n\r\nso can use this:\r\n\r\n```\r\ndb = dataset.connect(service='example')\r\n```\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}]}