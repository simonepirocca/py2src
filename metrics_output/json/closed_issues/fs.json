{"total_count": 210, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/412", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/412/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/412/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/412", "id": 653686511, "node_id": "MDU6SXNzdWU2NTM2ODY1MTE=", "number": 412, "title": "Is there a way to save/load MemoryFS to/from a single binary?", "user": {"login": "samtatasurya", "id": 9136050, "node_id": "MDQ6VXNlcjkxMzYwNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/9136050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samtatasurya", "html_url": "https://github.com/samtatasurya", "followers_url": "https://api.github.com/users/samtatasurya/followers", "following_url": "https://api.github.com/users/samtatasurya/following{/other_user}", "gists_url": "https://api.github.com/users/samtatasurya/gists{/gist_id}", "starred_url": "https://api.github.com/users/samtatasurya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samtatasurya/subscriptions", "organizations_url": "https://api.github.com/users/samtatasurya/orgs", "repos_url": "https://api.github.com/users/samtatasurya/repos", "events_url": "https://api.github.com/users/samtatasurya/events{/privacy}", "received_events_url": "https://api.github.com/users/samtatasurya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-09T01:02:29Z", "updated_at": "2020-07-12T23:20:10Z", "closed_at": "2020-07-12T23:20:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wonder if there exists a way / API to save the current state of `MemoryFS` to a single binary file, so that at a later time we can create a new `MemoryFS` instance, load the data from that single binary file, and essentially continuing from the last-saved state?\r\n\r\nI know that there exists `fs.copy.copy_fs()` and `fs.move.move_fs()` as suggested from this link: [https://stackoverflow.com/a/51508921/4879957](url), but it is not exactly what I want in my use case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/404", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/404/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/404/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/404", "id": 642481018, "node_id": "MDU6SXNzdWU2NDI0ODEwMTg=", "number": 404, "title": "copy dir through multiple file system", "user": {"login": "akeebismail", "id": 19197136, "node_id": "MDQ6VXNlcjE5MTk3MTM2", "avatar_url": "https://avatars0.githubusercontent.com/u/19197136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akeebismail", "html_url": "https://github.com/akeebismail", "followers_url": "https://api.github.com/users/akeebismail/followers", "following_url": "https://api.github.com/users/akeebismail/following{/other_user}", "gists_url": "https://api.github.com/users/akeebismail/gists{/gist_id}", "starred_url": "https://api.github.com/users/akeebismail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akeebismail/subscriptions", "organizations_url": "https://api.github.com/users/akeebismail/orgs", "repos_url": "https://api.github.com/users/akeebismail/repos", "events_url": "https://api.github.com/users/akeebismail/events{/privacy}", "received_events_url": "https://api.github.com/users/akeebismail/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-21T02:24:25Z", "updated_at": "2020-06-29T10:10:24Z", "closed_at": "2020-06-29T10:10:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pls, how can I use this library to copy directories and files from two different systems? for instance, I want to \r\nCopy directories and files from FTP with a secure connection to S3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/402", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/402/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/402/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/402", "id": 630181382, "node_id": "MDU6SXNzdWU2MzAxODEzODI=", "number": 402, "title": "How to get a path pointing to io.BytesIO?", "user": {"login": "WaterKnight1998", "id": 41203448, "node_id": "MDQ6VXNlcjQxMjAzNDQ4", "avatar_url": "https://avatars1.githubusercontent.com/u/41203448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaterKnight1998", "html_url": "https://github.com/WaterKnight1998", "followers_url": "https://api.github.com/users/WaterKnight1998/followers", "following_url": "https://api.github.com/users/WaterKnight1998/following{/other_user}", "gists_url": "https://api.github.com/users/WaterKnight1998/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaterKnight1998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaterKnight1998/subscriptions", "organizations_url": "https://api.github.com/users/WaterKnight1998/orgs", "repos_url": "https://api.github.com/users/WaterKnight1998/repos", "events_url": "https://api.github.com/users/WaterKnight1998/events{/privacy}", "received_events_url": "https://api.github.com/users/WaterKnight1998/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2020-06-03T17:25:04Z", "updated_at": "2020-06-06T14:56:09Z", "closed_at": "2020-06-04T10:46:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am finding lot of librarys that use the filename for opening the file. However, in my Flask app I would like to get a filename that points to IO.BytesIO without the need o using temporal files", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/399", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/399/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/399/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/399", "id": 620052890, "node_id": "MDU6SXNzdWU2MjAwNTI4OTA=", "number": 399, "title": "googledrive makedirs fails on root drive", "user": {"login": "simonm3", "id": 1199593, "node_id": "MDQ6VXNlcjExOTk1OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1199593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonm3", "html_url": "https://github.com/simonm3", "followers_url": "https://api.github.com/users/simonm3/followers", "following_url": "https://api.github.com/users/simonm3/following{/other_user}", "gists_url": "https://api.github.com/users/simonm3/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonm3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonm3/subscriptions", "organizations_url": "https://api.github.com/users/simonm3/orgs", "repos_url": "https://api.github.com/users/simonm3/repos", "events_url": "https://api.github.com/users/simonm3/events{/privacy}", "received_events_url": "https://api.github.com/users/simonm3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-18T09:26:29Z", "updated_at": "2020-05-18T09:50:24Z", "closed_at": "2020-05-18T09:50:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "on google root drive makedir works:\r\n\r\n`fs.open_fs(f\"googledrive://{gdrive()}\").makedir(\"ttt\")`\r\n\r\nbut makedirs raises exception:\r\n\r\n`fs.open_fs(f\"googledrive://{gdrive()}\").makedirs(\"qqq\")`\r\n\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-54-842bad7cafe2> in <module>\r\n----> 1 fs.open_fs(f\"googledrive://{gdrive()}\").makedirs(\"qqq\")\r\n\r\n~\\Anaconda3\\Lib\\site-packages\\fs\\base.py in makedirs(self, path, permissions, recreate)\r\n   1066         self.check()\r\n   1067         with self._lock:\r\n-> 1068             dir_paths = tools.get_intermediate_dirs(self, path)\r\n   1069             for dir_path in dir_paths:\r\n   1070                 try:\r\n\r\n~\\Anaconda3\\Lib\\site-packages\\fs\\tools.py in get_intermediate_dirs(fs, dir_path)\r\n     77         for path in recursepath(abspath(dir_path), reverse=True):\r\n     78             try:\r\n---> 79                 resource = fs.getinfo(path)\r\n     80             except ResourceNotFound:\r\n     81                 intermediates.append(abspath(path))\r\n\r\n~\\Anaconda3\\Lib\\site-packages\\fs\\googledrivefs\\googledrivefs.py in getinfo(self, path, namespaces)\r\n    244                         if metadata is None or isinstance(metadata, list):\r\n    245                                 raise ResourceNotFound(path=path)\r\n--> 246                         return self._infoFromMetadata(metadata)\r\n    247 \r\n    248         def setinfo(self, path, info):  # pylint: disable=redefined-outer-name,too-many-branches,unused-argument\r\n\r\n~\\Anaconda3\\Lib\\site-packages\\fs\\googledrivefs\\googledrivefs.py in _infoFromMetadata(self, metadata)\r\n    214 \t\trawInfo = {\r\n    215 \t\t\t\"basic\": {\r\n--> 216                                 \"name\": \"\" if isRoot else metadata[\"name\"],\r\n    217                                 \"is_dir\": isFolder\r\n    218 \t\t\t},\r\n\r\nKeyError: 'name'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/398", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/398/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/398/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/398", "id": 619780974, "node_id": "MDU6SXNzdWU2MTk3ODA5NzQ=", "number": 398, "title": "splitext removes a forward slash from url", "user": {"login": "simonm3", "id": 1199593, "node_id": "MDQ6VXNlcjExOTk1OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1199593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonm3", "html_url": "https://github.com/simonm3", "followers_url": "https://api.github.com/users/simonm3/followers", "following_url": "https://api.github.com/users/simonm3/following{/other_user}", "gists_url": "https://api.github.com/users/simonm3/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonm3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonm3/subscriptions", "organizations_url": "https://api.github.com/users/simonm3/orgs", "repos_url": "https://api.github.com/users/simonm3/repos", "events_url": "https://api.github.com/users/simonm3/events{/privacy}", "received_events_url": "https://api.github.com/users/simonm3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2020-05-17T19:36:39Z", "updated_at": "2020-05-19T12:57:08Z", "closed_at": "2020-05-19T12:55:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why does fs.path.splitext(url) remove one of the forward slashes?\r\n```\r\nurl = 's3://simonm3/_testdata/file1.pkl'\r\nfs.path.splitext(url), os.path.splitext(url)\r\n```\r\n(('s3:/simonm3/_testdata/file1', '.pkl'),\r\n ('s3://simonm3/_testdata/file1', '.pkl'))\r\n\r\nAlso what is the purpose of the second forward slash? The standard format of a url is that // denotes the start what urllib.urlparse calls \"netloc\" and includes username etc..  The pyfilesystem url instead uses // as part of the filesystem. Why not have \"s3:/somefolder/somefile\" rather than \"s3://somefolder/somefile\" ?\r\n\r\nhttps://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Generic_syntax", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/390", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/390/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/390/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/390/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/390", "id": 610960489, "node_id": "MDU6SXNzdWU2MTA5NjA0ODk=", "number": 390, "title": "Documentation website appears to be down", "user": {"login": "nwh", "id": 525247, "node_id": "MDQ6VXNlcjUyNTI0Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/525247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwh", "html_url": "https://github.com/nwh", "followers_url": "https://api.github.com/users/nwh/followers", "following_url": "https://api.github.com/users/nwh/following{/other_user}", "gists_url": "https://api.github.com/users/nwh/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwh/subscriptions", "organizations_url": "https://api.github.com/users/nwh/orgs", "repos_url": "https://api.github.com/users/nwh/repos", "events_url": "https://api.github.com/users/nwh/events{/privacy}", "received_events_url": "https://api.github.com/users/nwh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-01T20:46:19Z", "updated_at": "2020-05-12T09:39:08Z", "closed_at": "2020-05-12T09:39:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is what I see:\r\n\r\n<img width=\"840\" alt=\"Screen Shot 2020-05-01 at 13 44 50\" src=\"https://user-images.githubusercontent.com/525247/80840399-13273e80-8bb2-11ea-9832-488ef89183af.png\">\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/387", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/387/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/387/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/387/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/387", "id": 607042335, "node_id": "MDU6SXNzdWU2MDcwNDIzMzU=", "number": 387, "title": "Hooks/Signals on fs events [suggestion]", "user": {"login": "cldtech", "id": 52659208, "node_id": "MDQ6VXNlcjUyNjU5MjA4", "avatar_url": "https://avatars2.githubusercontent.com/u/52659208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cldtech", "html_url": "https://github.com/cldtech", "followers_url": "https://api.github.com/users/cldtech/followers", "following_url": "https://api.github.com/users/cldtech/following{/other_user}", "gists_url": "https://api.github.com/users/cldtech/gists{/gist_id}", "starred_url": "https://api.github.com/users/cldtech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cldtech/subscriptions", "organizations_url": "https://api.github.com/users/cldtech/orgs", "repos_url": "https://api.github.com/users/cldtech/repos", "events_url": "https://api.github.com/users/cldtech/events{/privacy}", "received_events_url": "https://api.github.com/users/cldtech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-04-26T15:43:25Z", "updated_at": "2020-05-31T14:55:05Z", "closed_at": "2020-04-26T15:54:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a basic function missing that i'm sure a lot would appreciate.\r\nTo do something on certain events like before and after a file is added in the file system. The best example would be Django signals, also often called hooks depending on the context.\r\nIn my case i need to maintain custom metadata files for each actual files in the PyFilesystem.\r\nOr have i fail to find a way in the already defined API?\r\n\r\nP.S.\r\nThis is a very nice software design, thanks for making it available!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/385", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/385/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/385/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/385", "id": 606783441, "node_id": "MDU6SXNzdWU2MDY3ODM0NDE=", "number": 385, "title": "Unpack a within in-memory fs", "user": {"login": "Make42", "id": 4905185, "node_id": "MDQ6VXNlcjQ5MDUxODU=", "avatar_url": "https://avatars2.githubusercontent.com/u/4905185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Make42", "html_url": "https://github.com/Make42", "followers_url": "https://api.github.com/users/Make42/followers", "following_url": "https://api.github.com/users/Make42/following{/other_user}", "gists_url": "https://api.github.com/users/Make42/gists{/gist_id}", "starred_url": "https://api.github.com/users/Make42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Make42/subscriptions", "organizations_url": "https://api.github.com/users/Make42/orgs", "repos_url": "https://api.github.com/users/Make42/repos", "events_url": "https://api.github.com/users/Make42/events{/privacy}", "received_events_url": "https://api.github.com/users/Make42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-25T14:41:29Z", "updated_at": "2020-05-04T17:16:52Z", "closed_at": "2020-05-04T17:16:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to unpack a zip, somewhat like [shutil.unpack_archive](https://docs.python.org/3/library/shutil.html#shutil.unpack_archive), but within the in-memory fs? So what I would do is, I would copy the zip into the in-memory fs and then unpack it there.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/383", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/383/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/383/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/383", "id": 605502936, "node_id": "MDU6SXNzdWU2MDU1MDI5MzY=", "number": 383, "title": "fs.dropboxfs missing in list of Third Party filesystems", "user": {"login": "jensens", "id": 157140, "node_id": "MDQ6VXNlcjE1NzE0MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/157140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jensens", "html_url": "https://github.com/jensens", "followers_url": "https://api.github.com/users/jensens/followers", "following_url": "https://api.github.com/users/jensens/following{/other_user}", "gists_url": "https://api.github.com/users/jensens/gists{/gist_id}", "starred_url": "https://api.github.com/users/jensens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jensens/subscriptions", "organizations_url": "https://api.github.com/users/jensens/orgs", "repos_url": "https://api.github.com/users/jensens/repos", "events_url": "https://api.github.com/users/jensens/events{/privacy}", "received_events_url": "https://api.github.com/users/jensens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-23T12:45:21Z", "updated_at": "2020-04-24T07:04:23Z", "closed_at": "2020-04-24T07:04:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any reason why the the very useful and pretty well working [fs.dropboxfs ](https://pypi.org/project/fs.dropboxfs/) by @zopyx is not listed at https://www.pyfilesystem.org/page/index-of-filesystems/ under external Third Party there?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/379", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/379/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/379/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/379/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/379", "id": 592259166, "node_id": "MDU6SXNzdWU1OTIyNTkxNjY=", "number": 379, "title": "listdir() should return a lazy iterator.", "user": {"login": "spacebat777", "id": 17787949, "node_id": "MDQ6VXNlcjE3Nzg3OTQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/17787949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spacebat777", "html_url": "https://github.com/spacebat777", "followers_url": "https://api.github.com/users/spacebat777/followers", "following_url": "https://api.github.com/users/spacebat777/following{/other_user}", "gists_url": "https://api.github.com/users/spacebat777/gists{/gist_id}", "starred_url": "https://api.github.com/users/spacebat777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spacebat777/subscriptions", "organizations_url": "https://api.github.com/users/spacebat777/orgs", "repos_url": "https://api.github.com/users/spacebat777/repos", "events_url": "https://api.github.com/users/spacebat777/events{/privacy}", "received_events_url": "https://api.github.com/users/spacebat777/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-01T23:19:23Z", "updated_at": "2020-04-02T07:04:53Z", "closed_at": "2020-04-02T07:04:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "for modules like `fs.ftpfs`, the `listdir()` method can be horrendously slow because it blocks until it's retrieved all the list items. It's so slow in some cases as to make using the fs module as a solution for ftp impractical.\r\n\r\nIMO, it would be better if this method returned a lazy iterator that doesn't retrieve everything before it returns. It could retrieve in smaller blocks of filenames, or single file names at a time when it's iterated over. Maybe this would require threading or async, but doesn't have to.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/378", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/378/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/378/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/378/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/378", "id": 592256769, "node_id": "MDU6SXNzdWU1OTIyNTY3Njk=", "number": 378, "title": "raising wrong exception type - OSError's.", "user": {"login": "spacebat777", "id": 17787949, "node_id": "MDQ6VXNlcjE3Nzg3OTQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/17787949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spacebat777", "html_url": "https://github.com/spacebat777", "followers_url": "https://api.github.com/users/spacebat777/followers", "following_url": "https://api.github.com/users/spacebat777/following{/other_user}", "gists_url": "https://api.github.com/users/spacebat777/gists{/gist_id}", "starred_url": "https://api.github.com/users/spacebat777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spacebat777/subscriptions", "organizations_url": "https://api.github.com/users/spacebat777/orgs", "repos_url": "https://api.github.com/users/spacebat777/repos", "events_url": "https://api.github.com/users/spacebat777/events{/privacy}", "received_events_url": "https://api.github.com/users/spacebat777/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-01T23:12:46Z", "updated_at": "2020-04-02T07:02:56Z", "closed_at": "2020-04-02T07:02:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "memoryfs.py:131:178:(maybe more) - Not raising the appropriate fs.errors type - instead raising built-in type IOError which is a subclass of the built-in OSError type.\r\n\r\nWould a better type be OperationFailed(\"File not open for reading.\"), or PermissionDenied(\"File not open for reading.\") ?\r\n\r\nOr do we need to create some new types of error to cover the cases where the fs modules resort to raising OSError types?\r\n\r\nSomething else to consider - doing away with a custom `fs.errors` tree and simply using the built-in `OSError` tree.  It seems like `fs.errors` is just reinventing the wheel in this respect..\r\n\r\nAlso, if raising an OSError type, please set the errno field to the appropriate number if possible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/377", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/377/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/377/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/377", "id": 591340113, "node_id": "MDU6SXNzdWU1OTEzNDAxMTM=", "number": 377, "title": "Is there a way to open zipfile inside another filesystem as ZipFS", "user": {"login": "torviolento", "id": 16355064, "node_id": "MDQ6VXNlcjE2MzU1MDY0", "avatar_url": "https://avatars1.githubusercontent.com/u/16355064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/torviolento", "html_url": "https://github.com/torviolento", "followers_url": "https://api.github.com/users/torviolento/followers", "following_url": "https://api.github.com/users/torviolento/following{/other_user}", "gists_url": "https://api.github.com/users/torviolento/gists{/gist_id}", "starred_url": "https://api.github.com/users/torviolento/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/torviolento/subscriptions", "organizations_url": "https://api.github.com/users/torviolento/orgs", "repos_url": "https://api.github.com/users/torviolento/repos", "events_url": "https://api.github.com/users/torviolento/events{/privacy}", "received_events_url": "https://api.github.com/users/torviolento/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-31T18:50:41Z", "updated_at": "2020-04-14T13:04:11Z", "closed_at": "2020-04-14T13:04:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "In this case the first filesystem is just OSFS, so I can just get the path to the zip file, but it would be nice to later use some other FS like in-memory filesystem instead. \r\n\r\nI tried to look into docs and searched around, but couldn't find any way to do that.\r\nI tried using this_filesystem.open_dir with passing zipfs as constructor, but it only works with directories.\r\n\r\nIt would be nice to have a function like open_fs to open filesystems inside another filesystems, but I understand it might be hard to implement.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/375", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/375/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/375/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/375", "id": 575664096, "node_id": "MDU6SXNzdWU1NzU2NjQwOTY=", "number": 375, "title": "Inconsistency between filenames being represented as listdir() output vs. walker.files()", "user": {"login": "zopyx", "id": 594239, "node_id": "MDQ6VXNlcjU5NDIzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/594239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zopyx", "html_url": "https://github.com/zopyx", "followers_url": "https://api.github.com/users/zopyx/followers", "following_url": "https://api.github.com/users/zopyx/following{/other_user}", "gists_url": "https://api.github.com/users/zopyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/zopyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zopyx/subscriptions", "organizations_url": "https://api.github.com/users/zopyx/orgs", "repos_url": "https://api.github.com/users/zopyx/repos", "events_url": "https://api.github.com/users/zopyx/events{/privacy}", "received_events_url": "https://api.github.com/users/zopyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-04T18:45:10Z", "updated_at": "2020-03-05T10:30:50Z", "closed_at": "2020-03-05T10:30:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I found an edge case that popped with the `webdavfs` driver and a faulty WebDAV server (Zope 5).\r\nThe problem is the the WebDAV server exposes the filename of a resource (through the `displayname` tag in XML as `b'bar.txt' - possibly to some improper str to bytes conversion in Zope.\r\n\r\nSo the output of listdir() seems to derive the name of a file in a different way than the `Walker.files()` implementation. Neither checked the pyfilesystem nor the WebDAV code...do you have an idea if this is an issue in PyFilesystem2 or our driver?\r\n\r\n```\r\n(Pdb) handle.listdir(\".\")\r\n['bar.txt']\r\n\r\n(Pdb) for x in walker.files(handle): print(x)\r\n/b'bar.txt'\r\n\r\n(Pdb) handle.getinfo('bar.txt')\r\n<file 'b'bar.txt''>\r\n\r\n(Pdb) handle.getinfo('bar.txt').name\r\n\"b'bar.txt'\"\r\n\r\n ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/373", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/373/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/373/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/373/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/373", "id": 566381170, "node_id": "MDU6SXNzdWU1NjYzODExNzA=", "number": 373, "title": "Third Party FS - a new filesystem for Illumina Basespace", "user": {"login": "nivm", "id": 1131350, "node_id": "MDQ6VXNlcjExMzEzNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1131350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivm", "html_url": "https://github.com/nivm", "followers_url": "https://api.github.com/users/nivm/followers", "following_url": "https://api.github.com/users/nivm/following{/other_user}", "gists_url": "https://api.github.com/users/nivm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivm/subscriptions", "organizations_url": "https://api.github.com/users/nivm/orgs", "repos_url": "https://api.github.com/users/nivm/repos", "events_url": "https://api.github.com/users/nivm/events{/privacy}", "received_events_url": "https://api.github.com/users/nivm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-17T15:44:39Z", "updated_at": "2020-03-29T16:35:58Z", "closed_at": "2020-03-29T16:35:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Adding more implementation to the INDEX OF FILESYSTEMS: [Third Party section](https://www.pyfilesystem.org/page/index-of-filesystems/) .\r\n\r\nWe have created a pyfilesystem plugin to support [Illumina Basespace](https://basespace.illumina.com/) and are using it in production for the past year.\r\n\r\nA link to the repository: https://github.com/emedgene/fs_basespace", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/372", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/372/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/372/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/372", "id": 566374777, "node_id": "MDU6SXNzdWU1NjYzNzQ3Nzc=", "number": 372, "title": "Third Party FS - a new filesystem for Azure Datalake", "user": {"login": "nivm", "id": 1131350, "node_id": "MDQ6VXNlcjExMzEzNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1131350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivm", "html_url": "https://github.com/nivm", "followers_url": "https://api.github.com/users/nivm/followers", "following_url": "https://api.github.com/users/nivm/following{/other_user}", "gists_url": "https://api.github.com/users/nivm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivm/subscriptions", "organizations_url": "https://api.github.com/users/nivm/orgs", "repos_url": "https://api.github.com/users/nivm/repos", "events_url": "https://api.github.com/users/nivm/events{/privacy}", "received_events_url": "https://api.github.com/users/nivm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-17T15:33:38Z", "updated_at": "2020-04-02T07:07:34Z", "closed_at": "2020-04-02T07:07:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Adding more implementation to the INDEX OF FILESYSTEMS: [Third Party section ](https://www.pyfilesystem.org/page/index-of-filesystems/).\r\n\r\nWe have created a pyfilesystem plugin to support [Azure Datalake](https://docs.microsoft.com/en-us/azure/data-lake-store/) and are using it in production for the past year.\r\n\r\nA link to the repository: https://github.com/emedgene/fs_dlk\r\n\r\n\r\nI can see there is another implementation called \r\n[fs.datalake Azure Datalake Storage filesystem (work in progress).](https://github.com/glenfant/fs.datalake)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/369", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/369/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/369/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/369/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/369", "id": 552382516, "node_id": "MDU6SXNzdWU1NTIzODI1MTY=", "number": 369, "title": "Request function to file name validation like validatepath(path)", "user": {"login": "12edge", "id": 9768590, "node_id": "MDQ6VXNlcjk3Njg1OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9768590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12edge", "html_url": "https://github.com/12edge", "followers_url": "https://api.github.com/users/12edge/followers", "following_url": "https://api.github.com/users/12edge/following{/other_user}", "gists_url": "https://api.github.com/users/12edge/gists{/gist_id}", "starred_url": "https://api.github.com/users/12edge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12edge/subscriptions", "organizations_url": "https://api.github.com/users/12edge/orgs", "repos_url": "https://api.github.com/users/12edge/repos", "events_url": "https://api.github.com/users/12edge/events{/privacy}", "received_events_url": "https://api.github.com/users/12edge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-20T15:53:38Z", "updated_at": "2020-01-21T17:59:06Z", "closed_at": "2020-01-21T17:59:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is an existing function to validate the syntax of a path \"validatepath(path)\". I would like to have a function to validate the syntax of a file name. This is exactly what the package pathvalidate does in the function is_valid_filename().  This would allow my programs to validate a file name without having to import yet another package. It would allow my programs to validate input without doing a request to the operating system.  (Also, stem would be nice. Is there any thoughts of merging pyfilesystem with pathlib?)\r\nexample of what needs to be done now\r\n```\r\nimport pathlib\r\nfrom pathvalidate import is_valid_filename\r\nif is_valid_filename (sys.argv[0]):\r\n    output_file = PurePath(sys.argv[0]).stem + '.out'\r\nelse:\r\n    progname = 'unknown.out'\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/367", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/367/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/367/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/367", "id": 542410361, "node_id": "MDU6SXNzdWU1NDI0MTAzNjE=", "number": 367, "title": "Datastore FS - a new filesystem for Google Cloud Firestore in Datastore mode", "user": {"login": "mikespub", "id": 1447115, "node_id": "MDQ6VXNlcjE0NDcxMTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1447115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikespub", "html_url": "https://github.com/mikespub", "followers_url": "https://api.github.com/users/mikespub/followers", "following_url": "https://api.github.com/users/mikespub/following{/other_user}", "gists_url": "https://api.github.com/users/mikespub/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikespub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikespub/subscriptions", "organizations_url": "https://api.github.com/users/mikespub/orgs", "repos_url": "https://api.github.com/users/mikespub/repos", "events_url": "https://api.github.com/users/mikespub/events{/privacy}", "received_events_url": "https://api.github.com/users/mikespub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-26T02:26:31Z", "updated_at": "2020-04-02T07:10:47Z", "closed_at": "2020-04-02T07:10:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "See README at https://github.com/mikespub-org/mp-fs-wsgidav\r\n\r\nMost of the basic functionality is available, including listing, walking, downloading, uploading etc.\r\n\r\nSome of the more detailed file operations like appendbytes, seek & truncate fail because, well, it's really not a filesystem in the back-end, and we use a simple io.BytesIO between the FS and Datastore.\r\n\r\nAnd since I've been investigating Firestore in native mode for WsgiDAV as well, I'll probably throw in a Firestore FS for PyFilesytem2 too ;-)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/365", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/365/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/365/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/365", "id": 539326007, "node_id": "MDU6SXNzdWU1MzkzMjYwMDc=", "number": 365, "title": "Fix simple typo: recusrive -> recursive", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-17T21:43:17Z", "updated_at": "2020-04-02T07:11:28Z", "closed_at": "2020-04-02T07:11:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in docs/source/globbing.rst.\nShould read `recursive` rather than `recusrive`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/363", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/363/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/363/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/363", "id": 536253817, "node_id": "MDU6SXNzdWU1MzYyNTM4MTc=", "number": 363, "title": "Have `open_fs(fs)` return a copy of the passed `fs`", "user": {"login": "trendelkampschroer", "id": 5398411, "node_id": "MDQ6VXNlcjUzOTg0MTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/5398411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trendelkampschroer", "html_url": "https://github.com/trendelkampschroer", "followers_url": "https://api.github.com/users/trendelkampschroer/followers", "following_url": "https://api.github.com/users/trendelkampschroer/following{/other_user}", "gists_url": "https://api.github.com/users/trendelkampschroer/gists{/gist_id}", "starred_url": "https://api.github.com/users/trendelkampschroer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trendelkampschroer/subscriptions", "organizations_url": "https://api.github.com/users/trendelkampschroer/orgs", "repos_url": "https://api.github.com/users/trendelkampschroer/repos", "events_url": "https://api.github.com/users/trendelkampschroer/events{/privacy}", "received_events_url": "https://api.github.com/users/trendelkampschroer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-11T09:44:09Z", "updated_at": "2019-12-11T10:26:47Z", "closed_at": "2019-12-11T10:26:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all thanks a lot for the great project!\r\n\r\nI'm wondering whether it would make sence to have `open_fs` return a copy of a passed in `fs` instance instead of returning the instance. Consider the following example\r\n\r\n```python\r\n\r\nfrom fs import open_fs\r\nfrom fs.base import FS\r\nfrom fs.tempfs import TempFS\r\n\r\ndef foo(target: Union[str, FS]) -> None:\r\n    \"\"\"Create the empty file 'foo.bar' at `target`.\r\n\r\n    Args:\r\n        target (path, url or filesystem instance): The target for ressource at which to create file 'foo.bar'.\r\n\r\n    \"\"\"\r\n    with open_fs(target) as fs:\r\n        fs.touch(\"foo.bar\")\r\n\r\nwith TempFS() as fs:\r\n    foo(fs)\r\n    print(fs.exists(\"foo.bar\"))  # raises `FilesystemClosed`\r\n\r\nwith TempFS() as fs:\r\n   foo(fs.getsyspath(\"\"))\r\n   print(fs.exists(\"foo.bar\"))\r\n\r\n>>> True  \r\n\r\n```\r\n\r\nI think that it would be good if `open_fs` could be made to return a copy of a passed in `FS` instance, because it should be as simple as possible for someone creating `foo`-like function to ensure that all function local ressources are appropriately closed without affecting a filesystem instance that is passed from the outside.\r\n\r\nOtherwise user will be tempted to implement the above functionality as\r\n\r\n```python\r\n\r\ndef foo(target: Union[str, FS]):\r\n    fs = open_fs(target)\r\n    fs.touch(\"foo.bar\")\r\n\r\n```\r\nHere the function local ressource `fs` will not be closed, if `target` is a path or url, in order to avoid closing an externally managed `FS` instance\r\n\r\nor \r\n\r\n```python\r\n\r\ndef foo(target: Union[str, FS):\r\n    if isinstance(target, FS):\r\n         target.touch(\"foo.bar\")\r\n    else:\r\n        with open_fs(target) as fs:\r\n            fs.touch(\"foo.bar\")\r\n\r\n```\r\n\r\nwhich defies the purpose of duck typing and needs to be repeatedly performed to 'work' around an undesired/unexpected (in this situation) behaviour of `open_fs`.\r\n       \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/358", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/358/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/358/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/358", "id": 513359992, "node_id": "MDU6SXNzdWU1MTMzNTk5OTI=", "number": 358, "title": "Documentation for listing shared network printers.", "user": {"login": "jonfen", "id": 56961, "node_id": "MDQ6VXNlcjU2OTYx", "avatar_url": "https://avatars0.githubusercontent.com/u/56961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonfen", "html_url": "https://github.com/jonfen", "followers_url": "https://api.github.com/users/jonfen/followers", "following_url": "https://api.github.com/users/jonfen/following{/other_user}", "gists_url": "https://api.github.com/users/jonfen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonfen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonfen/subscriptions", "organizations_url": "https://api.github.com/users/jonfen/orgs", "repos_url": "https://api.github.com/users/jonfen/repos", "events_url": "https://api.github.com/users/jonfen/events{/privacy}", "received_events_url": "https://api.github.com/users/jonfen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-28T15:00:10Z", "updated_at": "2019-10-28T18:55:43Z", "closed_at": "2019-10-28T18:50:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Listing the shared files is cut and dry, but how do you list the shared printer names of a given computer?\r\n\r\nAlso asked here:\r\nhttps://github.com/althonos/fs.smbfs/issues/5", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/355", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/355/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/355/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/355", "id": 504907083, "node_id": "MDU6SXNzdWU1MDQ5MDcwODM=", "number": 355, "title": "Support of ReadOnly File System?", "user": {"login": "Nazime", "id": 23621072, "node_id": "MDQ6VXNlcjIzNjIxMDcy", "avatar_url": "https://avatars1.githubusercontent.com/u/23621072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nazime", "html_url": "https://github.com/Nazime", "followers_url": "https://api.github.com/users/Nazime/followers", "following_url": "https://api.github.com/users/Nazime/following{/other_user}", "gists_url": "https://api.github.com/users/Nazime/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nazime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nazime/subscriptions", "organizations_url": "https://api.github.com/users/Nazime/orgs", "repos_url": "https://api.github.com/users/Nazime/repos", "events_url": "https://api.github.com/users/Nazime/events{/privacy}", "received_events_url": "https://api.github.com/users/Nazime/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-10-09T21:31:32Z", "updated_at": "2019-10-10T11:32:39Z", "closed_at": "2019-10-10T06:43:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I discovered this project few days ago and I find it really **interesting**.\r\n\r\nI am working on a project and need to implement/use a read only github file system. I almost finished the read only class from scratch (isdir, ispath, listdir, readtext, ...) and it's very unfortunate that I can't use pyfilesystem2 and all its features or to add my project as an extension to pyfilesystem2.\r\n\r\nI couldn't use pyfilesystem for two reasons\r\n\r\n- must implement none read only methods (makedir, remove, ...)\r\n- no unitesting for readonly file systems\r\n\r\nIs there any way to support ReadOnly filesystem?\r\n\r\nThis is an overview of the Github read only filesystem \r\n```python\r\nfrom rofs import GithubROFS\r\npyfilesystem2 = GithubROFS(\"pyfilesystem/pyfilesystem2\")  # github repo\r\npyfilesystem2.isdir(\"docs\")  # True\r\npyfilesystem2.isdir(\"docs/source\")  # True\r\npyfilesystem2.isdir(\"none\")  # False\r\npyfilesystem2.isfile(\".gitignore\")   # True\r\n\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/353", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/353/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/353/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/353", "id": 498150216, "node_id": "MDU6SXNzdWU0OTgxNTAyMTY=", "number": 353, "title": "fs.path.forcedir would add '/' after filepath\uff1f", "user": {"login": "Arstead", "id": 12146747, "node_id": "MDQ6VXNlcjEyMTQ2NzQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/12146747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arstead", "html_url": "https://github.com/Arstead", "followers_url": "https://api.github.com/users/Arstead/followers", "following_url": "https://api.github.com/users/Arstead/following{/other_user}", "gists_url": "https://api.github.com/users/Arstead/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arstead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arstead/subscriptions", "organizations_url": "https://api.github.com/users/Arstead/orgs", "repos_url": "https://api.github.com/users/Arstead/repos", "events_url": "https://api.github.com/users/Arstead/events{/privacy}", "received_events_url": "https://api.github.com/users/Arstead/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-09-25T09:05:16Z", "updated_at": "2019-09-25T10:12:50Z", "closed_at": "2019-09-25T09:10:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I check up source code of function 'fs.path.forcedir'\r\n```\r\ndef forcedir(path):\r\n    # type: (Text) -> Text\r\n    \"\"\"Ensure the path ends with a trailing forward slash.\r\n\r\n    Arguments:\r\n        path (str): A PyFilesytem path.\r\n\r\n    Returns:\r\n        str: The path, ending with a slash.\r\n\r\n    Example:\r\n        >>> forcedir(\"foo/bar\")\r\n        'foo/bar/'\r\n        >>> forcedir(\"foo/bar/\")\r\n        'foo/bar/'\r\n        >>> forcedir(\"foo/spam.txt\")\r\n        'foo/spam.txt'\r\n\r\n    \"\"\"\r\n    if not path.endswith(\"/\"):\r\n        return path + \"/\"\r\n    return path\r\n```\r\nif we just append '/' after path. forcedir(\"foo/spam.txt\") will retrun \"foo/spam.txt/\", not \"foo/spam.txt\".\r\n\r\nIs that a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/350", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/350/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/350/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/350", "id": 486100069, "node_id": "MDU6SXNzdWU0ODYxMDAwNjk=", "number": 350, "title": "listdir() seems not to work", "user": {"login": "TeoColuccio", "id": 16000669, "node_id": "MDQ6VXNlcjE2MDAwNjY5", "avatar_url": "https://avatars2.githubusercontent.com/u/16000669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeoColuccio", "html_url": "https://github.com/TeoColuccio", "followers_url": "https://api.github.com/users/TeoColuccio/followers", "following_url": "https://api.github.com/users/TeoColuccio/following{/other_user}", "gists_url": "https://api.github.com/users/TeoColuccio/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeoColuccio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeoColuccio/subscriptions", "organizations_url": "https://api.github.com/users/TeoColuccio/orgs", "repos_url": "https://api.github.com/users/TeoColuccio/repos", "events_url": "https://api.github.com/users/TeoColuccio/events{/privacy}", "received_events_url": "https://api.github.com/users/TeoColuccio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-28T00:31:40Z", "updated_at": "2019-08-28T01:50:44Z", "closed_at": "2019-08-28T01:50:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I created a filesystem as described in the docs, but listdir() doesn't work. Instead, the function tree(), on the same fs, works well. In attachment there is a screen where you can see it. \r\n\r\n![IMG_20190828_021317_054__04__01](https://user-images.githubusercontent.com/16000669/63817276-ee503c80-c93b-11e9-8cb0-14ea24bd2d0e.jpg)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/349", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/349/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/349/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/349", "id": 484612935, "node_id": "MDU6SXNzdWU0ODQ2MTI5MzU=", "number": 349, "title": "Missing requirements.txt", "user": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-08-23T16:26:27Z", "updated_at": "2019-09-07T15:01:49Z", "closed_at": "2019-09-07T15:01:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "requirements.txt was removed in https://github.com/PyFilesystem/pyfilesystem2/pull/337 Turns out that readthedocs needs it, so it needs to be restored before we push a new version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/348", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/348/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/348/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/348/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/348", "id": 484606180, "node_id": "MDU6SXNzdWU0ODQ2MDYxODA=", "number": 348, "title": "sftpfs", "user": {"login": "timnyborg", "id": 10194397, "node_id": "MDQ6VXNlcjEwMTk0Mzk3", "avatar_url": "https://avatars1.githubusercontent.com/u/10194397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timnyborg", "html_url": "https://github.com/timnyborg", "followers_url": "https://api.github.com/users/timnyborg/followers", "following_url": "https://api.github.com/users/timnyborg/following{/other_user}", "gists_url": "https://api.github.com/users/timnyborg/gists{/gist_id}", "starred_url": "https://api.github.com/users/timnyborg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timnyborg/subscriptions", "organizations_url": "https://api.github.com/users/timnyborg/orgs", "repos_url": "https://api.github.com/users/timnyborg/repos", "events_url": "https://api.github.com/users/timnyborg/events{/privacy}", "received_events_url": "https://api.github.com/users/timnyborg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-23T16:09:07Z", "updated_at": "2019-08-23T16:28:42Z", "closed_at": "2019-08-23T16:12:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since paramiko is now available on python3, is there any plan to make fs.sftpfs available again?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/345", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/345/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/345/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/345", "id": 480389255, "node_id": "MDU6SXNzdWU0ODAzODkyNTU=", "number": 345, "title": "Bad namespacing, imports breaks setuptools", "user": {"login": "dargueta", "id": 620513, "node_id": "MDQ6VXNlcjYyMDUxMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/620513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dargueta", "html_url": "https://github.com/dargueta", "followers_url": "https://api.github.com/users/dargueta/followers", "following_url": "https://api.github.com/users/dargueta/following{/other_user}", "gists_url": "https://api.github.com/users/dargueta/gists{/gist_id}", "starred_url": "https://api.github.com/users/dargueta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dargueta/subscriptions", "organizations_url": "https://api.github.com/users/dargueta/orgs", "repos_url": "https://api.github.com/users/dargueta/repos", "events_url": "https://api.github.com/users/dargueta/events{/privacy}", "received_events_url": "https://api.github.com/users/dargueta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2019-08-13T21:59:35Z", "updated_at": "2019-08-14T15:21:47Z", "closed_at": "2019-08-14T15:00:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[fs.dropboxfs](https://github.com/PyFilesystem/fs.dropboxfs) is implemented using `fs` as a namespace package. This causes it to misbehave when importing from `fs` for several reasons:\r\n\r\n`fs` declares itself as a namespace package. According to the setuptools documentation [here](https://setuptools.readthedocs.io/en/latest/setuptools.html#namespace-packages),\r\n\r\nA) only namespace packages are supposed to contain the `__import__('pkg_resources')...`\r\nB) they *must not* contain executable code aside from that import.\r\n\r\nWe violate both of those rules, thus resulting in weird exceptions like this:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/dargueta/dev/goodrx-data-scripts/airflow_dags/grx/third_party/dropbox.py\", line 6, in <module>\r\n    from fs.dropboxfs import DropboxFS\r\n  File \"/Users/dargueta/.pyenv/versions/2.7.15/envs/gds/lib/python2.7/site-packages/fs/dropboxfs/__init__.py\", line 1, in <module>\r\n    from .dropboxfs import DropboxFile\r\n  File \"/Users/dargueta/.pyenv/versions/2.7.15/envs/gds/lib/python2.7/site-packages/fs/dropboxfs/dropboxfs.py\", line 12, in <module>\r\n    from fs.base import FS\r\n  File \"/Users/dargueta/.pyenv/versions/2.7.15/envs/gds/lib/python2.7/site-packages/fs/base.py\", line 24, in <module>\r\n    from . import copy, errors, fsencode, iotools, move, tools, walk, wildcard\r\nImportError: cannot import name fsencode\r\n\r\ncannot import name fsencode\r\n```\r\n\r\nChanging that line to these two fixes the problem:\r\n\r\n```py\r\nfrom . import copy, errors, iotools, move, tools, walk, wildcard\r\nfrom ._fscompat import fsencode\r\n```\r\n\r\nThere's a similar issue in `fs.test`:\r\n\r\n```py\r\n# Broken\r\nfrom fs import ResourceType, Seek\r\n\r\n# Works\r\nfrom fs.enums import ResourceType, Seek\r\n```\r\n\r\nIt appears these are the only two places in the repo we do this. Fixing these imports gets us a separate weird error in code using `fs.dropboxfs` but that may be unrelated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/340", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/340/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/340/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/340/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/340", "id": 477607510, "node_id": "MDU6SXNzdWU0Nzc2MDc1MTA=", "number": 340, "title": "Developer friendly: tell me which root path cannot be opened.", "user": {"login": "chfw", "id": 4280312, "node_id": "MDQ6VXNlcjQyODAzMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4280312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chfw", "html_url": "https://github.com/chfw", "followers_url": "https://api.github.com/users/chfw/followers", "following_url": "https://api.github.com/users/chfw/following{/other_user}", "gists_url": "https://api.github.com/users/chfw/gists{/gist_id}", "starred_url": "https://api.github.com/users/chfw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chfw/subscriptions", "organizations_url": "https://api.github.com/users/chfw/orgs", "repos_url": "https://api.github.com/users/chfw/repos", "events_url": "https://api.github.com/users/chfw/events{/privacy}", "received_events_url": "https://api.github.com/users/chfw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-08-06T21:41:27Z", "updated_at": "2019-08-23T19:38:43Z", "closed_at": "2019-08-23T19:38:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all\r\n\r\nIt would be very helpful to display the root path, for which osfs cannot open it. I knew you would argue, \"please add break point or print it, dude\". What I am facing here is: MacOS, Linux and Linux system path here. I do not have always three OS at the same time. If OSFS would be nicely to tell what is the root path, it will save me a lot time in taking the assumed advice: adding break point or print it.\r\n\r\nI am sending a PR through.\r\n\r\nhttps://dev.azure.com/moremoban/moban/_build/results?buildId=670\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"c:\\hostedtoolcache\\windows\\python\\3.7.4\\x64\\lib\\site-packages\\nose\\case.py\", line 198, in runTest\r\n    open_fs = opener.open_fs(fs_url, parse_result, writeable, create, cwd)\r\n  File \"D:\\a\\1\\s\\moban\\fs_openers.py\", line 68, in open_fs\r\n    osfs = EnhancedOSFS(path, create=create)\r\n  File \"c:\\hostedtoolcache\\windows\\python\\3.7.4\\x64\\lib\\site-packages\\fs\\osfs.py\", line 140, in __init__\r\n    raise errors.CreateFailed(\"root path does not exist\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/338", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/338/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/338/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/338/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/338", "id": 477513755, "node_id": "MDU6SXNzdWU0Nzc1MTM3NTU=", "number": 338, "title": "Bug: PyPy does not have ENOTSUP", "user": {"login": "dargueta", "id": 620513, "node_id": "MDQ6VXNlcjYyMDUxMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/620513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dargueta", "html_url": "https://github.com/dargueta", "followers_url": "https://api.github.com/users/dargueta/followers", "following_url": "https://api.github.com/users/dargueta/following{/other_user}", "gists_url": "https://api.github.com/users/dargueta/gists{/gist_id}", "starred_url": "https://api.github.com/users/dargueta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dargueta/subscriptions", "organizations_url": "https://api.github.com/users/dargueta/orgs", "repos_url": "https://api.github.com/users/dargueta/repos", "events_url": "https://api.github.com/users/dargueta/events{/privacy}", "received_events_url": "https://api.github.com/users/dargueta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-06T17:50:55Z", "updated_at": "2019-08-30T08:09:19Z", "closed_at": "2019-08-30T08:09:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "To reproduce: Run the unit tests on PyPy. They fail because `errno` doesn't have ENOTSUP defined, even though it's present on the same platform for CPython.\r\n\r\nWe can fix it by using the CPython value as a default. Error codes aren't guaranteed to be identical across all platforms so this might not work everywhere, but it'll prevent the crash.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/335", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/335/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/335/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/335", "id": 476608626, "node_id": "MDU6SXNzdWU0NzY2MDg2MjY=", "number": 335, "title": "[Question] What is the _meta class attribute of FS ?", "user": {"login": "glenfant", "id": 703389, "node_id": "MDQ6VXNlcjcwMzM4OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/703389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glenfant", "html_url": "https://github.com/glenfant", "followers_url": "https://api.github.com/users/glenfant/followers", "following_url": "https://api.github.com/users/glenfant/following{/other_user}", "gists_url": "https://api.github.com/users/glenfant/gists{/gist_id}", "starred_url": "https://api.github.com/users/glenfant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glenfant/subscriptions", "organizations_url": "https://api.github.com/users/glenfant/orgs", "repos_url": "https://api.github.com/users/glenfant/repos", "events_url": "https://api.github.com/users/glenfant/events{/privacy}", "received_events_url": "https://api.github.com/users/glenfant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-05T00:02:50Z", "updated_at": "2019-08-05T08:08:34Z", "closed_at": "2019-08-05T08:08:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am actually adding a new Azure Dalalake backend to FS2.\r\n\r\nhttps://github.com/glenfant/fs.datalake\r\n\r\nHacking the code, of OTB and 3rd party backends for FS2, I notice that the various FS subclasses have a \"_meta\" class duct attribute. But I did not find (or searched unsuccessfully documentation or hints about the various keys of this dict.\r\n\r\nAny help is welcome. And many thanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/333", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/333/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/333/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/333/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/333", "id": 476389720, "node_id": "MDU6SXNzdWU0NzYzODk3MjA=", "number": 333, "title": "AttributeError: 'ReadTarFS' object has no attribute '_tar'", "user": {"login": "chfw", "id": 4280312, "node_id": "MDQ6VXNlcjQyODAzMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4280312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chfw", "html_url": "https://github.com/chfw", "followers_url": "https://api.github.com/users/chfw/followers", "following_url": "https://api.github.com/users/chfw/following{/other_user}", "gists_url": "https://api.github.com/users/chfw/gists{/gist_id}", "starred_url": "https://api.github.com/users/chfw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chfw/subscriptions", "organizations_url": "https://api.github.com/users/chfw/orgs", "repos_url": "https://api.github.com/users/chfw/repos", "events_url": "https://api.github.com/users/chfw/events{/privacy}", "received_events_url": "https://api.github.com/users/chfw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-08-02T23:37:03Z", "updated_at": "2019-08-23T19:38:43Z", "closed_at": "2019-08-23T19:38:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all\r\n\r\nI caught this hidden exception with this code while using your nice library:\r\n\r\n```\r\nfrom fs import tarfs\r\n\r\ntarfs.TarFS('tar://i_do_not_exist.tar')\r\n```\r\n\r\nAbove code will trigger the following ignored exception:\r\n\r\n```\r\nException ignored in: <function FS.__del__ at 0x108b2b950>\r\nTraceback (most recent call last):\r\n  File \"/Users/jaska/github/moremoban/pyfilesystem2/fs/base.py\", line 117, in __del__\r\n    self.close()\r\n  File \"/Users/jaska/github/moremoban/pyfilesystem2/fs/tarfs.py\", line 465, in close\r\n    self._tar.close()\r\nAttributeError: 'ReadTarFS' object has no attribute '_tar'\r\n\r\n======================================================================\r\nFAIL: test_read_non_existent_file (tests.test_tarfs.TestReadTarFS)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/jaska/github/moremoban/pyfilesystem2/fs/errors.py\", line 130, in new_func\r\n    return func(*args, **kwargs)\r\n  File \"/Users/jaska/github/moremoban/pyfilesystem2/fs/tarfs.py\", line 272, in __init__\r\n    self._tar = tarfile.open(file, mode=\"r\")\r\nFileNotFoundError: [Errno 2] No such file or directory: 'tar://i_do_not_exist.tar'\r\n```\r\n\r\nThe same applies for ZipFS. I will send one PR over.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/332", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/332/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/332/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/332", "id": 476300278, "node_id": "MDU6SXNzdWU0NzYzMDAyNzg=", "number": 332, "title": "Enforce mypy typechecking in CI", "user": {"login": "chfw", "id": 4280312, "node_id": "MDQ6VXNlcjQyODAzMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4280312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chfw", "html_url": "https://github.com/chfw", "followers_url": "https://api.github.com/users/chfw/followers", "following_url": "https://api.github.com/users/chfw/following{/other_user}", "gists_url": "https://api.github.com/users/chfw/gists{/gist_id}", "starred_url": "https://api.github.com/users/chfw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chfw/subscriptions", "organizations_url": "https://api.github.com/users/chfw/orgs", "repos_url": "https://api.github.com/users/chfw/repos", "events_url": "https://api.github.com/users/chfw/events{/privacy}", "received_events_url": "https://api.github.com/users/chfw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-08-02T18:17:22Z", "updated_at": "2019-08-04T22:11:50Z", "closed_at": "2019-08-04T19:20:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all,\r\n\r\nThis project's PR template reads very interesting:\r\n\r\n` I accept that @willmcgugan may be pedantic in the code review.`\r\n\r\nI wondered if adding flake8 check to such a cool project would support the word: 'pedantic', strongly. Is there a good reason not to have flake8?\r\n\r\nHere is what flake8 tells about the files:\r\n```\r\n...\r\ntests/test_path.py:183:22: F405 'iswildcard' may be undefined, or defined from star imports: fs.path\r\ntests/test_path.py:184:22: F405 'iswildcard' may be undefined, or defined from star imports: fs.path\r\ntests/test_path.py:185:22: F405 'iswildcard' may be undefined, or defined from star imports: fs.path\r\ntests/test_path.py:186:26: F405 'iswildcard' may be undefined, or defined from star imports: fs.path\r\ntests/test_path.py:187:26: F405 'iswildcard' may be undefined, or defined from star imports: fs.path\r\ntests/test_path.py:188:26: F405 'iswildcard' may be undefined, or defined from star imports: fs.path\r\ntests/test_path.py:204:30: F405 'relativefrom' may be undefined, or defined from star imports: fs.path\r\n...\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/331", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/331/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/331/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/331", "id": 476061263, "node_id": "MDU6SXNzdWU0NzYwNjEyNjM=", "number": 331, "title": "Tests broken Py27 and Py34, fs.path related", "user": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-08-02T08:30:14Z", "updated_at": "2019-08-04T22:13:08Z", "closed_at": "2019-08-04T22:13:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://github.com/PyFilesystem/pyfilesystem2/pull/316", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/329", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/329/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/329/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/329/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/329", "id": 476037839, "node_id": "MDU6SXNzdWU0NzYwMzc4Mzk=", "number": 329, "title": "Bug: return value of OSFS.geturl cannot be consumed by FS on Windows", "user": {"login": "chfw", "id": 4280312, "node_id": "MDQ6VXNlcjQyODAzMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4280312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chfw", "html_url": "https://github.com/chfw", "followers_url": "https://api.github.com/users/chfw/followers", "following_url": "https://api.github.com/users/chfw/following{/other_user}", "gists_url": "https://api.github.com/users/chfw/gists{/gist_id}", "starred_url": "https://api.github.com/users/chfw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chfw/subscriptions", "organizations_url": "https://api.github.com/users/chfw/orgs", "repos_url": "https://api.github.com/users/chfw/repos", "events_url": "https://api.github.com/users/chfw/events{/privacy}", "received_events_url": "https://api.github.com/users/chfw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-02T07:27:30Z", "updated_at": "2019-08-23T19:38:42Z", "closed_at": "2019-08-23T19:38:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`geturl()` will return `file://D:\\a\\1\\s\\tests\\fixtures\\template`(the dog food) on windows, which can be not used(eaten) by osfs itself.\r\n\r\nan PR is coming to fix it. I am logging this issue here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/327", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/327/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/327/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/327/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/327", "id": 474655857, "node_id": "MDU6SXNzdWU0NzQ2NTU4NTc=", "number": 327, "title": "Switch to pytest?", "user": {"login": "dargueta", "id": 620513, "node_id": "MDQ6VXNlcjYyMDUxMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/620513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dargueta", "html_url": "https://github.com/dargueta", "followers_url": "https://api.github.com/users/dargueta/followers", "following_url": "https://api.github.com/users/dargueta/following{/other_user}", "gists_url": "https://api.github.com/users/dargueta/gists{/gist_id}", "starred_url": "https://api.github.com/users/dargueta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dargueta/subscriptions", "organizations_url": "https://api.github.com/users/dargueta/orgs", "repos_url": "https://api.github.com/users/dargueta/repos", "events_url": "https://api.github.com/users/dargueta/events{/privacy}", "received_events_url": "https://api.github.com/users/dargueta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639387, "node_id": "MDU6TGFiZWw0NjE2MzkzODc=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-07-30T15:31:58Z", "updated_at": "2019-08-23T16:19:09Z", "closed_at": "2019-08-23T16:19:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`nose` is no longer maintained (last release was in 2015) so I think we should consider moving on to a different testing framework. `pytest` gets us a lot of things like simplified argument parametrization and a *lot* of plugins we can install. It works with `unittest` so I don't think the move will require an overhaul.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/326", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/326/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/326/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/326", "id": 474516130, "node_id": "MDU6SXNzdWU0NzQ1MTYxMzA=", "number": 326, "title": "ResourceType not properly linked in docs", "user": {"login": "lurch", "id": 476186, "node_id": "MDQ6VXNlcjQ3NjE4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/476186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lurch", "html_url": "https://github.com/lurch", "followers_url": "https://api.github.com/users/lurch/followers", "following_url": "https://api.github.com/users/lurch/following{/other_user}", "gists_url": "https://api.github.com/users/lurch/gists{/gist_id}", "starred_url": "https://api.github.com/users/lurch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lurch/subscriptions", "organizations_url": "https://api.github.com/users/lurch/orgs", "repos_url": "https://api.github.com/users/lurch/repos", "events_url": "https://api.github.com/users/lurch/events{/privacy}", "received_events_url": "https://api.github.com/users/lurch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-30T10:56:16Z", "updated_at": "2019-07-30T12:25:35Z", "closed_at": "2019-07-30T12:25:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://docs.pyfilesystem.org/en/latest/info.html#details-namespace says:\r\nResource type, one of the values defined in `ResourceType`.\r\n\r\nIs the `ResourceType` supposed to link to https://docs.pyfilesystem.org/en/latest/reference/enums.html#fs.enums.ResourceType ?\r\n\r\nAnd see also https://docs.pyfilesystem.org/en/latest/reference/info_objects.html#fs.info.Info.type and https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.gettype", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/325", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/325/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/325/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/325", "id": 474433255, "node_id": "MDU6SXNzdWU0NzQ0MzMyNTU=", "number": 325, "title": "Test on windows", "user": {"login": "chfw", "id": 4280312, "node_id": "MDQ6VXNlcjQyODAzMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4280312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chfw", "html_url": "https://github.com/chfw", "followers_url": "https://api.github.com/users/chfw/followers", "following_url": "https://api.github.com/users/chfw/following{/other_user}", "gists_url": "https://api.github.com/users/chfw/gists{/gist_id}", "starred_url": "https://api.github.com/users/chfw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chfw/subscriptions", "organizations_url": "https://api.github.com/users/chfw/orgs", "repos_url": "https://api.github.com/users/chfw/repos", "events_url": "https://api.github.com/users/chfw/events{/privacy}", "received_events_url": "https://api.github.com/users/chfw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-30T07:59:43Z", "updated_at": "2019-07-30T16:18:26Z", "closed_at": "2019-07-30T16:17:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi pyfileystem2 team:\r\n\r\nThanks for this nice library and I am porting my library to use it.\r\n\r\nWhile I am doing the porting, I am finding that there are quite [many issues on python3 in windows](https://dev.azure.com/moremoban/moban/_build/results?buildId=598). Yes, I will make PR later once my porting work is done.\r\n\r\nBefore that, could I suggest to your team to use either appveyor or azure pipeline where ci build on windows os is possible? I can contribute to such an effort but both ci system requires the owner of open source project to do initial setup: i.e. permissions et el. I am not sure if you would consider a windows build to complement your vision.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/324", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/324/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/324/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/324", "id": 474278046, "node_id": "MDU6SXNzdWU0NzQyNzgwNDY=", "number": 324, "title": "error on opening directory with `@` symbol", "user": {"login": "cmalbrec", "id": 38668527, "node_id": "MDQ6VXNlcjM4NjY4NTI3", "avatar_url": "https://avatars1.githubusercontent.com/u/38668527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmalbrec", "html_url": "https://github.com/cmalbrec", "followers_url": "https://api.github.com/users/cmalbrec/followers", "following_url": "https://api.github.com/users/cmalbrec/following{/other_user}", "gists_url": "https://api.github.com/users/cmalbrec/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmalbrec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmalbrec/subscriptions", "organizations_url": "https://api.github.com/users/cmalbrec/orgs", "repos_url": "https://api.github.com/users/cmalbrec/repos", "events_url": "https://api.github.com/users/cmalbrec/events{/privacy}", "received_events_url": "https://api.github.com/users/cmalbrec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-07-29T22:05:40Z", "updated_at": "2019-08-02T14:21:27Z", "closed_at": "2019-08-02T08:11:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi `pyfilesystem2`-team:\r\n\r\nI came across the following issue when opening a directory in the Linux filesystem tree:\r\n\r\nSuppose I create a directory like this:\r\n```Bash\r\nmkdir /tmp/test@mymail.com\r\n```\r\nExecuting\r\n```Python\r\nimport fs\r\nfs.open_fs(u'/tmp/test@mymail.com/')\r\n```\r\nfails with `CreateFailed: root path does not exist`, while\r\n```Python\r\nimport os\r\nos.path.isdir(u'/tmp/test@mymail.com/')\r\n```\r\nreturns `True`.\r\n\r\nI suspect the path-massaging code https://github.com/PyFilesystem/pyfilesystem2/blob/a57ef8b799c3c63dee43e5f3528de77ba9a9cb83/fs/osfs.py#L119-L127 screws things up. Adding a debug statement to https://github.com/PyFilesystem/pyfilesystem2/blob/a57ef8b799c3c63dee43e5f3528de77ba9a9cb83/fs/osfs.py#L139-L140 tells me that `_root_path` gets modified to become a concatenation of the current directory where the Python code is executed and the piece of the path specified after the `@` symbol.\r\n\r\nE.g. if I am executing in `/home/myuser`, `_root_path` turns into `/home/myuser/mymail.com`.\r\n\r\nI am using Python `3.5.2` and `pyfilesystem2` version `2.4.10`.\r\n\r\nPls let me know in case I am incorrectly using the `fs.open_fs()` function with special characters. Otherwise, it would be great if that bug could be fixed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/322", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/322/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/322/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/322/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/322", "id": 474241836, "node_id": "MDU6SXNzdWU0NzQyNDE4MzY=", "number": 322, "title": "Typo in a recent commit?", "user": {"login": "lurch", "id": 476186, "node_id": "MDQ6VXNlcjQ3NjE4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/476186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lurch", "html_url": "https://github.com/lurch", "followers_url": "https://api.github.com/users/lurch/followers", "following_url": "https://api.github.com/users/lurch/following{/other_user}", "gists_url": "https://api.github.com/users/lurch/gists{/gist_id}", "starred_url": "https://api.github.com/users/lurch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lurch/subscriptions", "organizations_url": "https://api.github.com/users/lurch/orgs", "repos_url": "https://api.github.com/users/lurch/repos", "events_url": "https://api.github.com/users/lurch/events{/privacy}", "received_events_url": "https://api.github.com/users/lurch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-29T20:30:14Z", "updated_at": "2019-07-29T21:20:25Z", "closed_at": "2019-07-29T21:20:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/PyFilesystem/pyfilesystem2/commit/f274b325fac8e47df6d45260111d6517abddde7e adds:\r\n```\r\n    def copydir(self, src_path, dst_path, create=False):\r\n        # stuff\r\n            move_dir(src_fs, _src_path, dst_fs, _dst_path)\r\n```\r\nand also\r\n```\r\n    def copydir(self, src_path, dst_path, create=False):\r\n        # stuff\r\n            copy_dir(src_fs, _src_path, dst_fs, _dst_path)\r\n```\r\n\r\nShould the first `def copydir` actually have been `def movedir` ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/312", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/312/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/312/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/312", "id": 471366388, "node_id": "MDU6SXNzdWU0NzEzNjYzODg=", "number": 312, "title": "Just learnt the pyfs2 does not support(like) windows path?", "user": {"login": "chfw", "id": 4280312, "node_id": "MDQ6VXNlcjQyODAzMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4280312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chfw", "html_url": "https://github.com/chfw", "followers_url": "https://api.github.com/users/chfw/followers", "following_url": "https://api.github.com/users/chfw/following{/other_user}", "gists_url": "https://api.github.com/users/chfw/gists{/gist_id}", "starred_url": "https://api.github.com/users/chfw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chfw/subscriptions", "organizations_url": "https://api.github.com/users/chfw/orgs", "repos_url": "https://api.github.com/users/chfw/repos", "events_url": "https://api.github.com/users/chfw/events{/privacy}", "received_events_url": "https://api.github.com/users/chfw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-22T22:25:14Z", "updated_at": "2019-07-23T07:53:08Z", "closed_at": "2019-07-23T07:53:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi\r\n\r\nThanks for writing this nice library. I am [evaluating the move to replace os with fs](https://github.com/moremoban/moban/pull/302).\r\n\r\nHere is my new findings:\r\n\r\n`fs.errors.InvalidCharsInPath: path 'tests\\fixtures\\simple.yaml' contains invalid characters`\r\n\r\nand above path is generated using `os.path.join('tests', 'fixtures', 'simple.yaml')`\r\n\r\n\r\nHere is our failed build:\r\nhttps://dev.azure.com/moremoban/moban/_build/results?buildId=491\r\n\r\nIf the design decision is to drop windows path, what would you recommend we use? unix file path on windows?\r\n\r\nCheers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/310", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/310/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/310/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/310", "id": 468254645, "node_id": "MDU6SXNzdWU0NjgyNTQ2NDU=", "number": 310, "title": "makedirs bug when multiprocessing", "user": {"login": "simonm3", "id": 1199593, "node_id": "MDQ6VXNlcjExOTk1OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1199593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonm3", "html_url": "https://github.com/simonm3", "followers_url": "https://api.github.com/users/simonm3/followers", "following_url": "https://api.github.com/users/simonm3/following{/other_user}", "gists_url": "https://api.github.com/users/simonm3/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonm3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonm3/subscriptions", "organizations_url": "https://api.github.com/users/simonm3/orgs", "repos_url": "https://api.github.com/users/simonm3/repos", "events_url": "https://api.github.com/users/simonm3/events{/privacy}", "received_events_url": "https://api.github.com/users/simonm3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-15T17:47:46Z", "updated_at": "2019-07-28T16:53:42Z", "closed_at": "2019-07-28T16:53:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have multiple processes writing different files to the same folder. To ensure the folder hierarchy exists I call makedirs(recreate=True)  before I create the files. Sometimes this fails saying folder already exists. This is because of race condition where another process created it after the check.\r\n\r\nThe pyfilesystem code in base/makedirs has thread lock which stops this happening in threads. It also has a try except to ignore the exception for the lowest subfolder. However this should be around the creation of parent folders too:\r\n\r\n```\r\n            dir_paths = tools.get_intermediate_dirs(self, path)\r\n            for dir_path in dir_paths:\r\n                self.makedir(dir_path, permissions=permissions)\r\n            try:\r\n                self.makedir(path)\r\n            except errors.DirectoryExists:\r\n                if not recreate:\r\n                    raise\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/309", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/309/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/309/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/309/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/309", "id": 466141789, "node_id": "MDU6SXNzdWU0NjYxNDE3ODk=", "number": 309, "title": "Expose SubFS factory", "user": {"login": "rkhwaja", "id": 511154, "node_id": "MDQ6VXNlcjUxMTE1NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/511154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkhwaja", "html_url": "https://github.com/rkhwaja", "followers_url": "https://api.github.com/users/rkhwaja/followers", "following_url": "https://api.github.com/users/rkhwaja/following{/other_user}", "gists_url": "https://api.github.com/users/rkhwaja/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkhwaja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkhwaja/subscriptions", "organizations_url": "https://api.github.com/users/rkhwaja/orgs", "repos_url": "https://api.github.com/users/rkhwaja/repos", "events_url": "https://api.github.com/users/rkhwaja/events{/privacy}", "received_events_url": "https://api.github.com/users/rkhwaja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639387, "node_id": "MDU6TGFiZWw0NjE2MzkzODc=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-07-10T07:18:55Z", "updated_at": "2019-07-28T15:16:17Z", "closed_at": "2019-07-28T15:16:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are some custom methods (i.e. not overrides) on GoogleFS and OneDriveFS to expose specific features of those filesystems.\r\n\r\nMy problem is that makedir(s) returns a SubFS which then doesn't support those custom methods so you can't use it transparently (e.g. in the tests)\r\nI see that opendir has a factory parameter so that you can customize the return type, but that's missing from the other SubFS-returning functions.\r\nI'd suggest that we could add the same factory parameter to makedir(s), except that it seems to me that it shouldn't be specified by the user but by the filesystem developer - maybe in the _meta dictionary?\r\nI suppose that another way to do it would be to use the custom factory if the user specifies one but if factory is None, use the GoogleFS-specified one.\r\n\r\nWhat do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/308", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/308/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/308/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/308", "id": 464842009, "node_id": "MDU6SXNzdWU0NjQ4NDIwMDk=", "number": 308, "title": "Free memory on MemoryFS.close", "user": {"login": "mostafa", "id": 54546, "node_id": "MDQ6VXNlcjU0NTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/54546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mostafa", "html_url": "https://github.com/mostafa", "followers_url": "https://api.github.com/users/mostafa/followers", "following_url": "https://api.github.com/users/mostafa/following{/other_user}", "gists_url": "https://api.github.com/users/mostafa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mostafa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mostafa/subscriptions", "organizations_url": "https://api.github.com/users/mostafa/orgs", "repos_url": "https://api.github.com/users/mostafa/repos", "events_url": "https://api.github.com/users/mostafa/events{/privacy}", "received_events_url": "https://api.github.com/users/mostafa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}, {"id": 461639387, "node_id": "MDU6TGFiZWw0NjE2MzkzODc=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-07-06T10:43:55Z", "updated_at": "2019-07-28T15:07:38Z", "closed_at": "2019-07-28T15:07:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Steps to reproduce:\r\n\r\n1. Run this piece of code in your favorite REPL.\r\n```python\r\nfrom fs.memoryfs import MemoryFS\r\n\r\nmem_fs = MemoryFS()\r\nwith open('large_binary_file', 'rb') as f:\r\n\tmem_fs.upload('/large_binary_file', f)\r\nmem_fs.close()\r\n```\r\n2. Watch python process before and after running this script.\r\n3. The memory is there and the files are not removed.\r\n4. Run `del mem_fs` and it immediately claims back the memory.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/307", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/307/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/307/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/307/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/307", "id": 464797764, "node_id": "MDU6SXNzdWU0NjQ3OTc3NjQ=", "number": 307, "title": "Use SpooledTemporaryFile in MemoryFS?", "user": {"login": "dargueta", "id": 620513, "node_id": "MDQ6VXNlcjYyMDUxMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/620513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dargueta", "html_url": "https://github.com/dargueta", "followers_url": "https://api.github.com/users/dargueta/followers", "following_url": "https://api.github.com/users/dargueta/following{/other_user}", "gists_url": "https://api.github.com/users/dargueta/gists{/gist_id}", "starred_url": "https://api.github.com/users/dargueta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dargueta/subscriptions", "organizations_url": "https://api.github.com/users/dargueta/orgs", "repos_url": "https://api.github.com/users/dargueta/repos", "events_url": "https://api.github.com/users/dargueta/events{/privacy}", "received_events_url": "https://api.github.com/users/dargueta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-07-05T23:53:44Z", "updated_at": "2019-07-30T00:39:07Z", "closed_at": "2019-07-30T00:39:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently MemoryFS maintains all files as `io.BytesIO` streams, which works fine until you have a lot of files or some particularly large ones. Eventually your code runs out of memory and crashes.\r\n\r\nTo alleviate this, I was wondering if we could modify `MemoryFS` to use [`tempfile.SpooledTemporaryFile`](https://docs.python.org/3/library/tempfile.html#tempfile.SpooledTemporaryFile) which starts off as a `BytesIO`, but once it reaches a predefined it size gets flushed out to an actual temporary file on the disk. The change won't have any effect on performance for files under the limit we choose, and it'll allow a MemoryFS file system to scale better.\r\n\r\nThe maximum file size is configurable so I think we can either hard-code a sane limit (say 128 MiB or whatever) or allow the user to pass one in as an argument to the opener.\r\n\r\nThoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/306", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/306/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/306/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/306", "id": 462802634, "node_id": "MDU6SXNzdWU0NjI4MDI2MzQ=", "number": 306, "title": "Quicker path to docs?", "user": {"login": "lurch", "id": 476186, "node_id": "MDQ6VXNlcjQ3NjE4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/476186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lurch", "html_url": "https://github.com/lurch", "followers_url": "https://api.github.com/users/lurch/followers", "following_url": "https://api.github.com/users/lurch/following{/other_user}", "gists_url": "https://api.github.com/users/lurch/gists{/gist_id}", "starred_url": "https://api.github.com/users/lurch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lurch/subscriptions", "organizations_url": "https://api.github.com/users/lurch/orgs", "repos_url": "https://api.github.com/users/lurch/repos", "events_url": "https://api.github.com/users/lurch/events{/privacy}", "received_events_url": "https://api.github.com/users/lurch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-01T16:20:38Z", "updated_at": "2019-07-01T18:44:57Z", "closed_at": "2019-07-01T17:27:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I go to https://www.pyfilesystem.org/ there's a link to \"Documentation\". If I click it that then goes  to _another_ [page](https://www.pyfilesystem.org/page/documentation/), which finally offers me a link to http://docs.pyfilesystem.org/ (which is where the actual documentation is!)\r\n\r\nCould / should this middle step be removed?\r\nWould it make sense for `README.md` to also point to `http://docs.pyfilesystem.org/` instead of `https://pyfilesystem2.readthedocs.io/en/latest/` ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/305", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/305/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/305/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/305", "id": 462422080, "node_id": "MDU6SXNzdWU0NjI0MjIwODA=", "number": 305, "title": "Running file from virtual file system", "user": {"login": "TheSph1nx", "id": 35219962, "node_id": "MDQ6VXNlcjM1MjE5OTYy", "avatar_url": "https://avatars1.githubusercontent.com/u/35219962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheSph1nx", "html_url": "https://github.com/TheSph1nx", "followers_url": "https://api.github.com/users/TheSph1nx/followers", "following_url": "https://api.github.com/users/TheSph1nx/following{/other_user}", "gists_url": "https://api.github.com/users/TheSph1nx/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheSph1nx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheSph1nx/subscriptions", "organizations_url": "https://api.github.com/users/TheSph1nx/orgs", "repos_url": "https://api.github.com/users/TheSph1nx/repos", "events_url": "https://api.github.com/users/TheSph1nx/events{/privacy}", "received_events_url": "https://api.github.com/users/TheSph1nx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-30T16:22:10Z", "updated_at": "2019-09-02T01:37:28Z", "closed_at": "2019-07-01T14:26:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there, I was wondering if it might be possibile running a file such as a binary from inside the virtual file system.\r\n\r\nThank you guys!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/304", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/304/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/304/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/304", "id": 461081903, "node_id": "MDU6SXNzdWU0NjEwODE5MDM=", "number": 304, "title": "fs.path not available", "user": {"login": "simonm3", "id": 1199593, "node_id": "MDQ6VXNlcjExOTk1OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1199593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonm3", "html_url": "https://github.com/simonm3", "followers_url": "https://api.github.com/users/simonm3/followers", "following_url": "https://api.github.com/users/simonm3/following{/other_user}", "gists_url": "https://api.github.com/users/simonm3/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonm3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonm3/subscriptions", "organizations_url": "https://api.github.com/users/simonm3/orgs", "repos_url": "https://api.github.com/users/simonm3/repos", "events_url": "https://api.github.com/users/simonm3/events{/privacy}", "received_events_url": "https://api.github.com/users/simonm3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}, {"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-06-26T16:57:52Z", "updated_at": "2019-07-28T15:41:42Z", "closed_at": "2019-07-28T15:41:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the docs it says fs.path provides operations on generic pyfilesystem filepaths. However it is not available until a filesystem has been opened.\r\n\r\nFor example I want to carry out a path operation before opening a filesystem but this is not possible. Says \"module fs has no attribute path\". Once I open a filesystem it works fine.\r\n\r\n```\r\nimport fs\r\nfs.path\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/302", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/302/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/302/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/302", "id": 457172187, "node_id": "MDU6SXNzdWU0NTcxNzIxODc=", "number": 302, "title": "Questions", "user": {"login": "alan-cugler", "id": 25991646, "node_id": "MDQ6VXNlcjI1OTkxNjQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/25991646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alan-cugler", "html_url": "https://github.com/alan-cugler", "followers_url": "https://api.github.com/users/alan-cugler/followers", "following_url": "https://api.github.com/users/alan-cugler/following{/other_user}", "gists_url": "https://api.github.com/users/alan-cugler/gists{/gist_id}", "starred_url": "https://api.github.com/users/alan-cugler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alan-cugler/subscriptions", "organizations_url": "https://api.github.com/users/alan-cugler/orgs", "repos_url": "https://api.github.com/users/alan-cugler/repos", "events_url": "https://api.github.com/users/alan-cugler/events{/privacy}", "received_events_url": "https://api.github.com/users/alan-cugler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-17T22:13:34Z", "updated_at": "2019-06-18T18:32:00Z", "closed_at": "2019-06-18T12:19:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "### My questions:\r\n - Can pyfilesystem2 work using python3.7? \r\n   - A couple issues from 2018 had directly said python3.7 wasnt supported yet because of dependencies.\r\n   - peaking at the `requirements.txt` file I see several dependencies demanding earlier version of python.\r\n - Is `conda install fs` not the same as `conda install fs -c conda-forge`?\r\n    - `conda search fs` gives me results like: `git-lfs, s3fs, r-sfsmisc, python-hdfs, python-crfsuite, libhdfs3`, etc.\r\n\r\nI apologize if these questions are horrible, the docs and other internet material are frying my brain a bit on such fundamental questions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/301", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/301/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/301/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/301/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/301", "id": 455469453, "node_id": "MDU6SXNzdWU0NTU0Njk0NTM=", "number": 301, "title": "Add a method to create a link", "user": {"login": "rkhwaja", "id": 511154, "node_id": "MDQ6VXNlcjUxMTE1NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/511154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkhwaja", "html_url": "https://github.com/rkhwaja", "followers_url": "https://api.github.com/users/rkhwaja/followers", "following_url": "https://api.github.com/users/rkhwaja/following{/other_user}", "gists_url": "https://api.github.com/users/rkhwaja/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkhwaja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkhwaja/subscriptions", "organizations_url": "https://api.github.com/users/rkhwaja/orgs", "repos_url": "https://api.github.com/users/rkhwaja/repos", "events_url": "https://api.github.com/users/rkhwaja/events{/privacy}", "received_events_url": "https://api.github.com/users/rkhwaja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-12T23:33:47Z", "updated_at": "2019-06-14T00:24:30Z", "closed_at": "2019-06-14T00:24:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Google Drive allows a file or folder to have multiple parents and I would like to add a method to fs.googledrivefs that allows adding a new parent to a file and/or create the file with 2 parents in the first place.\r\n\r\nI can make a non-pyfilesystem method to do this, of course, and I probably will, but I thought I'd ask if you have any plans for adding support for this - obviously this feature is supported in lots of other filesystems.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/298", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/298/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/298/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/298", "id": 454436398, "node_id": "MDU6SXNzdWU0NTQ0MzYzOTg=", "number": 298, "title": "Tests leave load of junk in my temp-dir", "user": {"login": "lurch", "id": 476186, "node_id": "MDQ6VXNlcjQ3NjE4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/476186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lurch", "html_url": "https://github.com/lurch", "followers_url": "https://api.github.com/users/lurch/followers", "following_url": "https://api.github.com/users/lurch/following{/other_user}", "gists_url": "https://api.github.com/users/lurch/gists{/gist_id}", "starred_url": "https://api.github.com/users/lurch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lurch/subscriptions", "organizations_url": "https://api.github.com/users/lurch/orgs", "repos_url": "https://api.github.com/users/lurch/repos", "events_url": "https://api.github.com/users/lurch/events{/privacy}", "received_events_url": "https://api.github.com/users/lurch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2019-06-11T01:14:31Z", "updated_at": "2019-08-04T15:12:17Z", "closed_at": "2019-08-04T15:12:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Observe:\r\n```\r\n$ ls -l /tmp/tmp*\r\nls: cannot access /tmp/tmp*: No such file or directory\r\n$ nosetests tests/test_tempfs.py\r\n.......................................................................S....................................................................................S...........\r\n----------------------------------------------------------------------\r\nRan 168 tests in 1.108s\r\n\r\nOK (SKIP=2)\r\n$ ls -l /tmp/tmp*\r\n/tmp/tmp0_2hqgqlfstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmp_0fkvyxqfstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmp15_h_uavfsTempFS:\r\ntotal 12\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew   12 Jun 11 02:03 top.txt\r\n\r\n/tmp/tmp189jd9a_fstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmp1i3v20tjfstestosfs:\r\ntotal 12\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew   12 Jun 11 02:03 top.txt\r\n\r\n/tmp/tmp1l7wo6t1fstestosfs:\r\ntotal 8\r\n-rw-rw-r-- 1 andrew andrew    3 Jun 11 02:03 file.bin\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmp396gu0e5fstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmp3em77scofstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 1200 Jun 11 02:03 hello.bin\r\n\r\n/tmp/tmp_4phjqbjfstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmp56py379lfstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 6 Jun 11 02:03 foo\r\n\r\n/tmp/tmp5n3vws2vfstestosfs:\r\ntotal 8\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew   20 Jun 11 02:03 iter.bin\r\n\r\n/tmp/tmp5vgpa86rfstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 12 Jun 11 02:03 hello.bin\r\n\r\n/tmp/tmp5w3s7nnrfstestosfs:\r\ntotal 8\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew    4 Jun 11 02:03 foo.bin\r\n\r\n/tmp/tmp6n9c6n6nfstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmp6p8f1wfhfstestosfs:\r\ntotal 2312\r\n-rw-rw-r-- 1 andrew andrew 1572864 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew    4096 Jun 11 02:03 dir1\r\ndrwxrwxr-x 3 andrew andrew    4096 Jun 11 02:03 dir2\r\n-rw-rw-r-- 1 andrew andrew  786432 Jun 11 02:03 foo\r\n\r\n/tmp/tmp6v96q1refstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmp6yliqrgjfstestosfs:\r\ntotal 0\r\n-rw-rw-r-- 1 andrew andrew 0 Jun 11 02:03 foo\r\n\r\n/tmp/tmp7uvz1xbrfstestosfs:\r\ntotal 2312\r\n-rw-rw-r-- 1 andrew andrew 1572864 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew    4096 Jun 11 02:03 dir1\r\ndrwxrwxr-x 3 andrew andrew    4096 Jun 11 02:03 dir2\r\n-rw-rw-r-- 1 andrew andrew  786432 Jun 11 02:03 foo\r\n\r\n/tmp/tmp8zll3o76fstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmpacu1rkz8fstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmpb3kld447fstestosfs:\r\ntotal 16\r\n-rw-rw-r-- 1 andrew andrew    4 Jun 11 02:03 bar\r\n-rw-rw-r-- 1 andrew andrew    4 Jun 11 02:03 baz\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 dir\r\n-rw-rw-r-- 1 andrew andrew    4 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 foo_copy\r\n\r\n/tmp/tmpb3qvum7ffstestosfs:\r\ntotal 2312\r\n-rw-rw-r-- 1 andrew andrew 1572864 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew    4096 Jun 11 02:03 dir1\r\ndrwxrwxr-x 3 andrew andrew    4096 Jun 11 02:03 dir2\r\n-rw-rw-r-- 1 andrew andrew  786432 Jun 11 02:03 foo\r\n\r\n/tmp/tmp_bcvx72hfstestosfs:\r\ntotal 8\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmpc3r8nk8sfstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmpcgud50n1fstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmpck80fzibfstestosfs:\r\ntotal 0\r\n-rw-rw-r-- 1 andrew andrew 0 Jun 11  2019 birthday.txt\r\n\r\n/tmp/tmpcknaa6aifsTempFS:\r\ntotal 12\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew   12 Jun 11 02:03 top.txt\r\n\r\n/tmp/tmpd02eaf4nfstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmpd4p6j_yifstestosfs:\r\ntotal 16\r\n-rw-rw-r-- 1 andrew andrew    3 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 baz\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 dir\r\n-rw-rw-r-- 1 andrew andrew    3 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 notadir\r\n\r\n/tmp/tmpda5d2rnrfstestosfs:\r\ntotal 8\r\n-rw-rw-r-- 1 andrew andrew 12 Jun 11 02:03 bar.txt\r\n-rw-rw-r-- 1 andrew andrew 12 Jun 11 02:03 foo.txt\r\n\r\n/tmp/tmpdoz9qly3fstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmpffgd9v02fstestosfs:\r\ntotal 0\r\n-rw-rw-r-- 1 andrew andrew 0 Jun 11 02:03 new.txt\r\n\r\n/tmp/tmpfie7smjufsTempFS:\r\ntotal 0\r\n\r\n/tmp/tmpfo71zn9vfstestosfs:\r\ntotal 16\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 dir\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew    5 Jun 11 02:03 foo1\r\n-rw-rw-r-- 1 andrew andrew    5 Jun 11 02:03 foo3\r\n\r\n/tmp/tmpfu04kylbfstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmpgx1fg97ofsTempFS:\r\ntotal 12\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew   12 Jun 11 02:03 top.txt\r\n\r\n/tmp/tmpgye7zaqafstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmph29y0x71fstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 3 Jun 11 02:03 foo\r\n\r\n/tmp/tmph37u6ndafstestosfs:\r\ntotal 12\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew   12 Jun 11 02:03 top.txt\r\n\r\n/tmp/tmphq76_4bifstestosfs:\r\ntotal 4\r\nlrwxrwxrwx 1 andrew andrew 30 Jun 11 02:03 bar -> /tmp/tmphq76_4bifstestosfs/foo\r\n-rw-rw-r-- 1 andrew andrew  6 Jun 11 02:03 foo\r\n\r\n/tmp/tmpht99mmtvfstestosfs:\r\ntotal 2312\r\n-rw-rw-r-- 1 andrew andrew 1572864 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew    4096 Jun 11 02:03 dir1\r\ndrwxrwxr-x 3 andrew andrew    4096 Jun 11 02:03 dir2\r\n-rw-rw-r-- 1 andrew andrew  786432 Jun 11 02:03 foo\r\n\r\n/tmp/tmphtnr_i0qfsTempFS:\r\ntotal 12\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew   12 Jun 11 02:03 top.txt\r\n\r\n/tmp/tmphuruhcv0fstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmpip8msjn3fstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmpjemvmm05fstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 7 Jun 11 02:03 test_openbin_exclusive\r\n\r\n/tmp/tmpk51k477yfstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmpk6fgqg8ofstestosfs:\r\ntotal 12\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew   12 Jun 11 02:03 top.txt\r\n\r\n/tmp/tmpkcoo_7w8fstestosfs:\r\ntotal 0\r\n-rw-rw-r-- 1 andrew andrew 0 Jun 11 02:03 foo\r\n\r\n/tmp/tmpm5g0idjhfstestosfs:\r\ntotal 8\r\n-rw-rw-r-- 1 andrew andrew 3 Jun 11 02:03 foo1\r\n-rw-rw-r-- 1 andrew andrew 3 Jun 11 02:03 foo2\r\n\r\n/tmp/tmpmamlehs3fstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 384 Jun 11 02:03 foo\r\n\r\n/tmp/tmpmm85f801fstestosfs:\r\ntotal 12\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo2\r\n-rw-rw-r-- 1 andrew andrew   12 Jun 11 02:03 top.txt\r\n\r\n/tmp/tmpmu4ihcz8fstestosfs:\r\ntotal 0\r\n-rw-rw-r-- 1 andrew andrew 0 Jun 11 02:03 foo\r\n\r\n/tmp/tmpn3u8wtfwfstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmpn5bdc9qafstestosfs:\r\ntotal 2312\r\n-rw-rw-r-- 1 andrew andrew 1572864 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew    4096 Jun 11 02:03 dir1\r\ndrwxrwxr-x 3 andrew andrew    4096 Jun 11 02:03 dir2\r\n-rw-rw-r-- 1 andrew andrew  786432 Jun 11 02:03 foo\r\n\r\n/tmp/tmpnahwvf72fstestosfs:\r\ntotal 8\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo2\r\n\r\n/tmp/tmpne9qrl70fstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmpnhqb_k6wfsTempFS:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmpnpzk7jdqfstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 3 Jun 11 02:03 foo\r\n\r\n/tmp/tmponstgn0nfstestosfs:\r\ntotal 2312\r\n-rw-rw-r-- 1 andrew andrew 1572864 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew    4096 Jun 11 02:03 dir1\r\ndrwxrwxr-x 3 andrew andrew    4096 Jun 11 02:03 dir2\r\n-rw-rw-r-- 1 andrew andrew  786432 Jun 11 02:03 foo\r\n\r\n/tmp/tmpooreripefstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 6 Jun 11 02:03 foo\r\n\r\n/tmp/tmpoxv06nh8fstestosfs:\r\ntotal 8\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 $FOO\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 TYRIONLANISTER\r\n\r\n/tmp/tmpp62860iqfstestosfs:\r\ntotal 8\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 fOO\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 Foo\r\n\r\n/tmp/tmpps972tg7fstestosfs:\r\ntotal 2312\r\n-rw-rw-r-- 1 andrew andrew 1572864 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew    4096 Jun 11 02:03 dir1\r\ndrwxrwxr-x 3 andrew andrew    4096 Jun 11 02:03 dir2\r\n-rw-rw-r-- 1 andrew andrew  786432 Jun 11 02:03 foo\r\n\r\n/tmp/tmprre9qmxyfstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 dir\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 foo\r\n\r\n/tmp/tmpruti4s9rfstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 256 Jun 11 02:03 foo\r\n\r\n/tmp/tmpry6y7dsrfstestosfs:\r\ntotal 16\r\n-rw-rw-r-- 1 andrew andrew    4 Jun 11 02:03 bar\r\n-rw-rw-r-- 1 andrew andrew    4 Jun 11 02:03 baz\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 dir\r\n-rw-rw-r-- 1 andrew andrew    4 Jun 11 02:03 foo\r\n\r\n/tmp/tmps0pzvleqfstestosfs:\r\ntotal 0\r\n-rw-rw-r-- 1 andrew andrew 0 Jul  5  2016 birthday.txt\r\n\r\n/tmp/tmpsdp9kws6fstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 dir\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 foo\r\n\r\n/tmp/tmpsherufovfstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmp_sttbo_3fstestosfs:\r\ntotal 0\r\n\r\n/tmp/tmpux7008cgfstestosfs:\r\ntotal 12\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew   12 Jun 11 02:03 top.txt\r\n\r\n/tmp/tmpu_y2r0xbfstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmpvhegnjrffstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmpvmsmfb5qfstestosfs:\r\ntotal 0\r\n-rw-rw-r-- 1 andrew andrew 0 Jun 11 02:03 foo\r\n\r\n/tmp/tmpvqz4yw8hfstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 7 Jun 11 02:03 test_open_exclusive\r\n\r\n/tmp/tmpvsv2kvkffstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 test.txt\r\n\r\n/tmp/tmpvy9rtio3fstestosfs:\r\ntotal 8\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 dir\r\n-rw-rw-r-- 1 andrew andrew    3 Jun 11 02:03 foo\r\n\r\n/tmp/tmpvzswc9xtfstestosfs:\r\ntotal 8\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 baz\r\n-rw-rw-r-- 1 andrew andrew  256 Jun 11 02:03 foo\r\n\r\n/tmp/tmpwelqzllwfstestosfs:\r\ntotal 12\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 egg\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\ndrwxrwxr-x 3 andrew andrew 4096 Jun 11 02:03 foo2\r\n\r\n/tmp/tmpwu9dwt0gfstestosfs:\r\ntotal 8\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 empty\r\n-rw-rw-r-- 1 andrew andrew    1 Jun 11 02:03 one\r\n-rw-rw-r-- 1 andrew andrew 1000 Jun 11 02:03 onethousand\r\n\r\n/tmp/tmpx2ophvmffstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmpxdu4ss7mfstestosfs:\r\ntotal 8\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n-rw-rw-r-- 1 andrew andrew   20 Jun 11 02:03 iter.txt\r\n\r\n/tmp/tmpxm_kma6rfstestosfs:\r\ntotal 2312\r\n-rw-rw-r-- 1 andrew andrew 1572864 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew    4096 Jun 11 02:03 dir1\r\ndrwxrwxr-x 3 andrew andrew    4096 Jun 11 02:03 dir2\r\n-rw-rw-r-- 1 andrew andrew  786432 Jun 11 02:03 foo\r\n\r\n/tmp/tmpxrb9ap8r__tempfs__:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 3 Jun 11 02:03 foo\r\n\r\n/tmp/tmpy04mawiifsTempFS:\r\ntotal 0\r\n\r\n/tmp/tmpy1jzdgtwfsTempFS:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 foo\r\n\r\n/tmp/tmpy24v7fujfstestosfs:\r\ntotal 8\r\n-rw-rw-r-- 1 andrew andrew  0 Jun 11 02:03 bin\r\n-rw-rw-r-- 1 andrew andrew 10 Jun 11 02:03 text\r\n-rw-rw-r-- 1 andrew andrew 14 Jun 11 02:03 unicode\r\n\r\n/tmp/tmpz4lz_eo2fstestosfs:\r\ntotal 4\r\n-rw-rw-r-- 1 andrew andrew 3 Jun 11 02:03 foo\r\n\r\n/tmp/tmpzb8g0h9sfstestosfs:\r\ntotal 4\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 bar\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 foo.txt\r\n\r\n/tmp/tmpzc7rfkvzfstestosfs:\r\ntotal 8\r\n-rw-rw-r-- 1 andrew andrew 3 Jun 11 02:03 foo1\r\n-rw-rw-r-- 1 andrew andrew 4 Jun 11 02:03 foo2\r\n-rw-rw-r-- 1 andrew andrew 0 Jun 11 02:03 newfoo\r\n\r\n/tmp/tmpzgqa2dvrfstestosfs:\r\ntotal 12\r\n-rw-rw-r-- 1 andrew andrew    6 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 baz\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 baz2\r\n\r\n/tmp/tmpzu50bz54fstestosfs:\r\ntotal 8\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 bar\r\ndrwxrwxr-x 2 andrew andrew 4096 Jun 11 02:03 baz\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 foo.py\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 foo.pyc\r\n-rw-rw-r-- 1 andrew andrew    0 Jun 11 02:03 foo.txt\r\n```\r\n\r\nSeems like `make_fs` in https://github.com/PyFilesystem/pyfilesystem2/blob/master/tests/test_osfs.py does `tempfile.mkdtemp(\"fstestosfs\")` but this directory never gets deleted anywhere :(  Was there supposed to be another `shutil.rmtree` in `destroy_fs` ?\r\nI guess in some situations you may _want_ to keep these temporary test directories for later debugging purposes, but IMHO running the unit-tests should auto-delete all these junk files by default, and only leave them behind if some kind of env-var or something is explicitly set?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/295", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/295/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/295/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/295/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/295", "id": 454070000, "node_id": "MDU6SXNzdWU0NTQwNzAwMDA=", "number": 295, "title": "Incomplete documentation?", "user": {"login": "lurch", "id": 476186, "node_id": "MDQ6VXNlcjQ3NjE4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/476186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lurch", "html_url": "https://github.com/lurch", "followers_url": "https://api.github.com/users/lurch/followers", "following_url": "https://api.github.com/users/lurch/following{/other_user}", "gists_url": "https://api.github.com/users/lurch/gists{/gist_id}", "starred_url": "https://api.github.com/users/lurch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lurch/subscriptions", "organizations_url": "https://api.github.com/users/lurch/orgs", "repos_url": "https://api.github.com/users/lurch/repos", "events_url": "https://api.github.com/users/lurch/events{/privacy}", "received_events_url": "https://api.github.com/users/lurch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-10T09:06:31Z", "updated_at": "2019-07-28T16:07:06Z", "closed_at": "2019-07-28T16:07:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://pyfilesystem2.readthedocs.io/en/latest/interface.html says \"The following is a complete list of methods on PyFilesystem objects....\" and yet it doesn't seem to include e.g. `isdir` or `islink` that https://pyfilesystem2.readthedocs.io/en/latest/reference/base.html does?? (there may be others, I didn't do an exhaustive check)\r\n\r\nShould they also be included in the list of https://pyfilesystem2.readthedocs.io/en/latest/implementers.html#non-essential-methods ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/294", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/294/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/294/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/294/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/294", "id": 453945225, "node_id": "MDU6SXNzdWU0NTM5NDUyMjU=", "number": 294, "title": "copydir is missing from WrapFS", "user": {"login": "rkhwaja", "id": 511154, "node_id": "MDQ6VXNlcjUxMTE1NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/511154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkhwaja", "html_url": "https://github.com/rkhwaja", "followers_url": "https://api.github.com/users/rkhwaja/followers", "following_url": "https://api.github.com/users/rkhwaja/following{/other_user}", "gists_url": "https://api.github.com/users/rkhwaja/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkhwaja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkhwaja/subscriptions", "organizations_url": "https://api.github.com/users/rkhwaja/orgs", "repos_url": "https://api.github.com/users/rkhwaja/repos", "events_url": "https://api.github.com/users/rkhwaja/events{/privacy}", "received_events_url": "https://api.github.com/users/rkhwaja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-06-09T22:10:45Z", "updated_at": "2019-07-28T16:54:41Z", "closed_at": "2019-07-28T16:54:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As discussed [here](https://github.com/PyFilesystem/pyfilesystem2/issues/207#issuecomment-409894399), WrapFS has to implement all of methods in order to delegate to it's wrapped filesystem.\r\n\r\ncopydir and movedir are missing, possibly others in the list of [non-essential methods](https://docs.pyfilesystem.org/en/latest/implementers.html#non-essential-methods)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/292", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/292/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/292/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/292", "id": 453191698, "node_id": "MDU6SXNzdWU0NTMxOTE2OTg=", "number": 292, "title": "FTPFS: EOFError in listdir", "user": {"login": "efuce", "id": 19961063, "node_id": "MDQ6VXNlcjE5OTYxMDYz", "avatar_url": "https://avatars1.githubusercontent.com/u/19961063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/efuce", "html_url": "https://github.com/efuce", "followers_url": "https://api.github.com/users/efuce/followers", "following_url": "https://api.github.com/users/efuce/following{/other_user}", "gists_url": "https://api.github.com/users/efuce/gists{/gist_id}", "starred_url": "https://api.github.com/users/efuce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/efuce/subscriptions", "organizations_url": "https://api.github.com/users/efuce/orgs", "repos_url": "https://api.github.com/users/efuce/repos", "events_url": "https://api.github.com/users/efuce/events{/privacy}", "received_events_url": "https://api.github.com/users/efuce/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-06T19:06:24Z", "updated_at": "2019-09-16T12:24:27Z", "closed_at": "2019-07-28T15:18:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am new to pyfilesystem, so please excuse if i might have missed something. From what i can understand from the documentation pyfilesystem2 translates exceptions from the underlying filesystem into a common set of exceptions.\r\n\r\nThere seems to be a corner case for ftpfs where it might raise EOFError in listdir if the server forcefully closes the connection during the operation. This exception seems to be coming from the underlying ftplib.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/285", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/285/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/285/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/285/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/285", "id": 443722275, "node_id": "MDU6SXNzdWU0NDM3MjIyNzU=", "number": 285, "title": "Yanks can't pass the test suite", "user": {"login": "mrg0029", "id": 11335876, "node_id": "MDQ6VXNlcjExMzM1ODc2", "avatar_url": "https://avatars2.githubusercontent.com/u/11335876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrg0029", "html_url": "https://github.com/mrg0029", "followers_url": "https://api.github.com/users/mrg0029/followers", "following_url": "https://api.github.com/users/mrg0029/following{/other_user}", "gists_url": "https://api.github.com/users/mrg0029/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrg0029/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrg0029/subscriptions", "organizations_url": "https://api.github.com/users/mrg0029/orgs", "repos_url": "https://api.github.com/users/mrg0029/repos", "events_url": "https://api.github.com/users/mrg0029/events{/privacy}", "received_events_url": "https://api.github.com/users/mrg0029/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-14T05:51:49Z", "updated_at": "2019-06-02T16:08:57Z", "closed_at": "2019-06-02T16:08:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I mentioned in https://github.com/PyFilesystem/pyfilesystem2/issues/284#issuecomment-491648503 that `make test` was failing for me due to something timezone-related.\r\n\r\nI believe it's failing for everyone behind UTC time.  I'll post a fix", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/284", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/284/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/284/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/284/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/284", "id": 442494803, "node_id": "MDU6SXNzdWU0NDI0OTQ4MDM=", "number": 284, "title": "another exception when a tarfile contains a path called '.' ", "user": {"login": "mrg0029", "id": 11335876, "node_id": "MDQ6VXNlcjExMzM1ODc2", "avatar_url": "https://avatars2.githubusercontent.com/u/11335876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrg0029", "html_url": "https://github.com/mrg0029", "followers_url": "https://api.github.com/users/mrg0029/followers", "following_url": "https://api.github.com/users/mrg0029/following{/other_user}", "gists_url": "https://api.github.com/users/mrg0029/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrg0029/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrg0029/subscriptions", "organizations_url": "https://api.github.com/users/mrg0029/orgs", "repos_url": "https://api.github.com/users/mrg0029/repos", "events_url": "https://api.github.com/users/mrg0029/events{/privacy}", "received_events_url": "https://api.github.com/users/mrg0029/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2019-05-10T01:05:07Z", "updated_at": "2019-06-08T14:20:14Z", "closed_at": "2019-06-08T14:16:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was running into [this](https://github.com/PyFilesystem/pyfilesystem2/issues/275) problem until the 2.4.5 release.\r\nI no longer get an IndexError, but I now get a ResourceNotFound when testing the same file.\r\nIn Debian/Ubuntu/etc. this should reproduce it:\r\n\r\n    $ pushd $(mktemp -d)\r\n    $ apt-get download hello\r\n    $ ar t hello*\r\n        debian-binary\r\n        control.tar.gz\r\n        data.tar.xz\r\n    $ ar x hello*\r\n    $ python -c 'import tarfile; tarfile.open(\"data.tar.xz\").getmembers(); print(\"OK\")'\r\n        OK\r\n\r\n    $ python -c 'import fs; fs.open_fs(\"tar://data.tar.xz\").walk.files().__next__(); print(\"OK\")'\r\n        Traceback (most recent call last):\r\n          File \"site-packages/fs/tarfs.py\", line 330, in getinfo\r\n            member = self._tar.getmember(self._encode(_path))\r\n          File \"tarfile.py\", line 1752, in getmember\r\n            raise KeyError(\"filename %r not found\" % name)\r\n        KeyError: \"filename 'usr' not found\"\r\n\r\n        During handling of the above exception, another exception occurred:\r\n\r\n        Traceback (most recent call last):\r\n          File \"<string>\", line 1, in <module>\r\n          File \"site-packages/fs/walk.py\", line 362, in files\r\n            for _path, info in self._iter_walk(fs, path=path):\r\n          File \"site-packages/fs/walk.py\", line 433, in _walk_breadth\r\n            for info in _scan(fs, dir_path, namespaces=namespaces):\r\n          File \"site-packages/fs/walk.py\", line 298, in _scan\r\n            six.reraise(type(error), error)\r\n          File \"site-packages/six.py\", line 692, in reraise\r\n            raise value.with_traceback(tb)\r\n        fs.errors.ResourceNotFound: resource '/usr' not found\r\n\r\nI don't get the same error when creating a file manually.\r\n\r\n    $ pushd $(mktemp -d)\r\n    $ touch a b c\r\n    $ tar --create      -f stuff1.tar    a b c\r\n    $ tar --create --xz -f stuff2.tar.xz a b c\r\n    $ python -c 'import fs; fs.open_fs(\"tar://stuff1.tar\").walk.files().__next__(); print(\"OK\")'\r\n        OK\r\n    $ python -c 'import fs; fs.open_fs(\"tar://stuff2.tar.xz\").walk.files().__next__(); print(\"OK\")'\r\n        OK\r\n\r\nEdit: fixed a couple of the commands per lurch's reply", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/283", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/283/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/283/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/283", "id": 442076293, "node_id": "MDU6SXNzdWU0NDIwNzYyOTM=", "number": 283, "title": "FTPFS: too many connections when using upload()?", "user": {"login": "nuschk", "id": 5167117, "node_id": "MDQ6VXNlcjUxNjcxMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5167117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nuschk", "html_url": "https://github.com/nuschk", "followers_url": "https://api.github.com/users/nuschk/followers", "following_url": "https://api.github.com/users/nuschk/following{/other_user}", "gists_url": "https://api.github.com/users/nuschk/gists{/gist_id}", "starred_url": "https://api.github.com/users/nuschk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nuschk/subscriptions", "organizations_url": "https://api.github.com/users/nuschk/orgs", "repos_url": "https://api.github.com/users/nuschk/repos", "events_url": "https://api.github.com/users/nuschk/events{/privacy}", "received_events_url": "https://api.github.com/users/nuschk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-09T06:48:57Z", "updated_at": "2019-05-10T11:43:38Z", "closed_at": "2019-05-10T11:43:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks to me, as if `upload()` will always open up a new connection to the target server, when, in theory, it could re-use the existing one. Is this intentional? \r\n\r\nIf yes, how can we circumvent it? I guess `open()`, then `write()` should do it, no?\r\n\r\nWe're using FTPFS to upload quite a few files to other parties' servers and we've got a few complaints on the number of connections we're using for this.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/279", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/279/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/279/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/279/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/279", "id": 433193162, "node_id": "MDU6SXNzdWU0MzMxOTMxNjI=", "number": 279, "title": "Bug in OSFS Init Path conversion", "user": {"login": "merlink01", "id": 1200220, "node_id": "MDQ6VXNlcjEyMDAyMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1200220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/merlink01", "html_url": "https://github.com/merlink01", "followers_url": "https://api.github.com/users/merlink01/followers", "following_url": "https://api.github.com/users/merlink01/following{/other_user}", "gists_url": "https://api.github.com/users/merlink01/gists{/gist_id}", "starred_url": "https://api.github.com/users/merlink01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/merlink01/subscriptions", "organizations_url": "https://api.github.com/users/merlink01/orgs", "repos_url": "https://api.github.com/users/merlink01/repos", "events_url": "https://api.github.com/users/merlink01/events{/privacy}", "received_events_url": "https://api.github.com/users/merlink01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-04-15T09:54:11Z", "updated_at": "2019-06-08T15:32:29Z", "closed_at": "2019-06-08T15:32:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Original Path to access:\r\nWindows Path: T:\\\\$tmp\r\n\r\nAfter Adding some Prints to osfs.py [120]:\r\n```\r\n        print(_drive, _root_path)\r\n        _root_path = _drive + (_root_path or \"/\") if _drive else _root_path\r\n        print(_root_path)\r\n        _root_path = os.path.expanduser(os.path.expandvars(_root_path))\r\n        print(_root_path)\r\n        _root_path = os.path.normpath(os.path.abspath(_root_path))\r\n        print(_root_path)\r\n```\r\n\r\nWe can see what happenes to my path:\r\n```\r\nT: \\$tmp\\\r\nT:\\$tmp\\\r\nT:\\C:\\Users\\userdir~1\\AppData\\Local\\Temp\\\r\nT:\\C:\\Users\\userdir~1\\AppData\\Local\\Temp\r\n```\r\n\r\nSo it seems: \r\nos.path.expanduser should only be called if there is no abspath (or drive on windows) given?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/278", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/278/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/278/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/278", "id": 433023129, "node_id": "MDU6SXNzdWU0MzMwMjMxMjk=", "number": 278, "title": "FS.setfile was removed without a deprecation", "user": {"login": "hkethi002", "id": 15849861, "node_id": "MDQ6VXNlcjE1ODQ5ODYx", "avatar_url": "https://avatars0.githubusercontent.com/u/15849861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkethi002", "html_url": "https://github.com/hkethi002", "followers_url": "https://api.github.com/users/hkethi002/followers", "following_url": "https://api.github.com/users/hkethi002/following{/other_user}", "gists_url": "https://api.github.com/users/hkethi002/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkethi002/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkethi002/subscriptions", "organizations_url": "https://api.github.com/users/hkethi002/orgs", "repos_url": "https://api.github.com/users/hkethi002/repos", "events_url": "https://api.github.com/users/hkethi002/events{/privacy}", "received_events_url": "https://api.github.com/users/hkethi002/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-04-14T19:33:02Z", "updated_at": "2019-05-05T16:52:04Z", "closed_at": "2019-05-05T16:52:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "All of the other functions in [this change](https://github.com/PyFilesystem/pyfilesystem2/commit/d6cf403d0b6d7a56f0acf22eec3a05d945f6c161#diff-3320961fe7bc890ab68b6043e4de3c39) seemed to have remained (aliased to the new functions) with deprecation warnings, I was wondering if this was missed for setfile? The name change for this function is also missing from the Change log.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/277", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/277/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/277/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/277", "id": 429793376, "node_id": "MDU6SXNzdWU0Mjk3OTMzNzY=", "number": 277, "title": "Request: RClone backend?", "user": {"login": "Jwink3101", "id": 3073584, "node_id": "MDQ6VXNlcjMwNzM1ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3073584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jwink3101", "html_url": "https://github.com/Jwink3101", "followers_url": "https://api.github.com/users/Jwink3101/followers", "following_url": "https://api.github.com/users/Jwink3101/following{/other_user}", "gists_url": "https://api.github.com/users/Jwink3101/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jwink3101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jwink3101/subscriptions", "organizations_url": "https://api.github.com/users/Jwink3101/orgs", "repos_url": "https://api.github.com/users/Jwink3101/repos", "events_url": "https://api.github.com/users/Jwink3101/events{/privacy}", "received_events_url": "https://api.github.com/users/Jwink3101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-05T14:47:18Z", "updated_at": "2019-05-05T14:06:20Z", "closed_at": "2019-05-05T14:06:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I recognize that RClone as a backend is an abstraction on something of an abstraction. But since rclone supports a *ton* of object storage systems, it would be great to see that as a backend opening up a lot of additional cloud storage providers.\r\n\r\nI may take a shot at it myself but it may be faster for someone who is more familiar with the details", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/275", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/275/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/275/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/275", "id": 424571020, "node_id": "MDU6SXNzdWU0MjQ1NzEwMjA=", "number": 275, "title": "Issues with TarFS - slow to open large tar archives, and exception", "user": {"login": "davidparks21", "id": 964997, "node_id": "MDQ6VXNlcjk2NDk5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/964997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidparks21", "html_url": "https://github.com/davidparks21", "followers_url": "https://api.github.com/users/davidparks21/followers", "following_url": "https://api.github.com/users/davidparks21/following{/other_user}", "gists_url": "https://api.github.com/users/davidparks21/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidparks21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidparks21/subscriptions", "organizations_url": "https://api.github.com/users/davidparks21/orgs", "repos_url": "https://api.github.com/users/davidparks21/repos", "events_url": "https://api.github.com/users/davidparks21/events{/privacy}", "received_events_url": "https://api.github.com/users/davidparks21/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}, {"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-03-24T03:35:13Z", "updated_at": "2019-05-05T16:52:42Z", "closed_at": "2019-05-05T16:52:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to open a 500 GB tar archive in PyFilesystem. It takes about 45 minutes to open (it needs to read through the entire file). The time it takes to open is the first issue I'm having. I'm able to open and stream files via the standard `tarfile` package using `tarfile.open` and `mytar.next()` with no delay. It looks like `tarfs.py:275  self._directory = OrderedDict((relpath(self._decode(info.name)).rstrip(\"/\"), info) for info in self._tar)` is doing the full read. It seems like this could be lazy initialized, or probably even better if the tarfile package was queried directly on demand rather than maintaining a full dictionary of objects in PyFilesystem.\r\n\r\nAfter I get it to open though, when I try to walk the files with `mytarfs.walk.files()` I am encountering this exception:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/davidparks21/opt/anaconda3/lib/python3.6/site-packages/IPython/core/interactiveshell.py\", line 2862, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-8-5f315c5de15b>\", line 1, in <module>\r\n    next(g)\r\n  File \"/home/davidparks21/opt/anaconda3/lib/python3.6/site-packages/fs/walk.py\", line 362, in files\r\n    for _path, info in self._iter_walk(fs, path=path):\r\n  File \"/home/davidparks21/opt/anaconda3/lib/python3.6/site-packages/fs/walk.py\", line 433, in _walk_breadth\r\n    for info in _scan(fs, dir_path, namespaces=namespaces):\r\n  File \"/home/davidparks21/opt/anaconda3/lib/python3.6/site-packages/fs/walk.py\", line 294, in _scan\r\n    for info in fs.scandir(dir_path, namespaces=namespaces):\r\n  File \"/home/davidparks21/opt/anaconda3/lib/python3.6/site-packages/fs/base.py\", line 1256, in scandir\r\n    for name in self.listdir(path)\r\n  File \"/home/davidparks21/opt/anaconda3/lib/python3.6/site-packages/fs/tarfs.py\", line 389, in listdir\r\n    return list(OrderedDict.fromkeys(content))\r\n  File \"/home/davidparks21/opt/anaconda3/lib/python3.6/site-packages/fs/tarfs.py\", line 388, in <genexpr>\r\n    content = (parts(child)[1] for child in children if relpath(child))\r\nIndexError: list index out of range\r\n```\r\n\r\nIt appears the assumption that 2 elements are returned by `parts(child)` is not always correct. I have tried to reproduce the issue with a small tar file, but I was unable to do so, it only occurs on my large 500 GB tar file. Unfortunately the time it takes to open it is hindering efforts to debug the issue, so for now I can only report it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/274", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/274/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/274/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/274/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/274", "id": 422846203, "node_id": "MDU6SXNzdWU0MjI4NDYyMDM=", "number": 274, "title": "I'm wondering the whether the 'expose' will be ever implemented", "user": {"login": "NyaMisty", "id": 5344431, "node_id": "MDQ6VXNlcjUzNDQ0MzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5344431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NyaMisty", "html_url": "https://github.com/NyaMisty", "followers_url": "https://api.github.com/users/NyaMisty/followers", "following_url": "https://api.github.com/users/NyaMisty/following{/other_user}", "gists_url": "https://api.github.com/users/NyaMisty/gists{/gist_id}", "starred_url": "https://api.github.com/users/NyaMisty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NyaMisty/subscriptions", "organizations_url": "https://api.github.com/users/NyaMisty/orgs", "repos_url": "https://api.github.com/users/NyaMisty/repos", "events_url": "https://api.github.com/users/NyaMisty/events{/privacy}", "received_events_url": "https://api.github.com/users/NyaMisty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-03-19T16:57:47Z", "updated_at": "2020-04-22T08:36:11Z", "closed_at": "2019-03-19T17:36:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "In #17, we've discussed the expose functionality, and it's said that it would be implemented in a separate package. But it already half past a year now, and dokan support is still under development. Recently, the fs.expose repo was even archived by the owner @althonos.\r\nWould you implement these features in the near future?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/273", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/273/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/273/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/273", "id": 421188458, "node_id": "MDU6SXNzdWU0MjExODg0NTg=", "number": 273, "title": "Unittesting with PyFilesystem requires tracking a filesystem object", "user": {"login": "davidparks21", "id": 964997, "node_id": "MDQ6VXNlcjk2NDk5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/964997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidparks21", "html_url": "https://github.com/davidparks21", "followers_url": "https://api.github.com/users/davidparks21/followers", "following_url": "https://api.github.com/users/davidparks21/following{/other_user}", "gists_url": "https://api.github.com/users/davidparks21/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidparks21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidparks21/subscriptions", "organizations_url": "https://api.github.com/users/davidparks21/orgs", "repos_url": "https://api.github.com/users/davidparks21/repos", "events_url": "https://api.github.com/users/davidparks21/events{/privacy}", "received_events_url": "https://api.github.com/users/davidparks21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-14T18:50:07Z", "updated_at": "2019-05-05T14:29:40Z", "closed_at": "2019-05-05T14:29:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Arguably one of the best features of PyFilesystem is improved unittesting over code that reads/writes to files, especially across multiple filesystems. However, realizing that benefit means not using `open_fs()` and instead holding onto (and accepting) a filesystem object so that a unittest can easily override the filesystem in use.\r\n\r\nIt seems like an elegant addition would be to allow the unittest code to offer a global factory method  that allows it to inject its own filesystem when a call to `open_fs()` would trigger the creation of the filesystem, without the target code needing any specific instrumentation to achieve this (which is currently required). \r\n\r\nThere are probably a few different ways to achieve this goal, my point is not to suggest a particular implementation, rather to bring to light to the idea that the unittest use case could benefit from such a feature.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/272", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/272/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/272/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/272", "id": 420183520, "node_id": "MDU6SXNzdWU0MjAxODM1MjA=", "number": 272, "title": "AttributeError: 'OSFS' object has no attribute 'strip' when using fs.compress.write_tar", "user": {"login": "LuisMoralesAlonso", "id": 2943577, "node_id": "MDQ6VXNlcjI5NDM1Nzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2943577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisMoralesAlonso", "html_url": "https://github.com/LuisMoralesAlonso", "followers_url": "https://api.github.com/users/LuisMoralesAlonso/followers", "following_url": "https://api.github.com/users/LuisMoralesAlonso/following{/other_user}", "gists_url": "https://api.github.com/users/LuisMoralesAlonso/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisMoralesAlonso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisMoralesAlonso/subscriptions", "organizations_url": "https://api.github.com/users/LuisMoralesAlonso/orgs", "repos_url": "https://api.github.com/users/LuisMoralesAlonso/repos", "events_url": "https://api.github.com/users/LuisMoralesAlonso/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisMoralesAlonso/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-12T20:11:40Z", "updated_at": "2019-03-13T10:25:35Z", "closed_at": "2019-03-13T10:25:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Testing this code:\r\n\r\nimport fs.compress as compress\r\nimport fs.osfs as osfs\r\nfs = osfs.OSFS('<local_dir>')\r\ncompress.write_tar(src_fs=fs,file='<tar_file>', compression='tar', walker=fs.walk)\r\n\r\nReturns the error:\r\n\r\nAttributeError: 'OSFS' object has no attribute 'strip' when using fs.compress.write_tar\r\n\r\nAm i using write_tar correctly or is there a bug in this function?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/271", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/271/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/271/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/271", "id": 416012045, "node_id": "MDU6SXNzdWU0MTYwMTIwNDU=", "number": 271, "title": "Minor typo on website", "user": {"login": "lurch", "id": 476186, "node_id": "MDQ6VXNlcjQ3NjE4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/476186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lurch", "html_url": "https://github.com/lurch", "followers_url": "https://api.github.com/users/lurch/followers", "following_url": "https://api.github.com/users/lurch/following{/other_user}", "gists_url": "https://api.github.com/users/lurch/gists{/gist_id}", "starred_url": "https://api.github.com/users/lurch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lurch/subscriptions", "organizations_url": "https://api.github.com/users/lurch/orgs", "repos_url": "https://api.github.com/users/lurch/repos", "events_url": "https://api.github.com/users/lurch/events{/privacy}", "received_events_url": "https://api.github.com/users/lurch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-01T09:24:00Z", "updated_at": "2019-03-01T11:28:49Z", "closed_at": "2019-03-01T10:03:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On https://www.pyfilesystem.org/page/index-of-filesystems/ it says `fs.dnla A filesystem for accessing accessing DLNA Servers.`. The link target is correct, it's just the link description that is wrong - it should be `fs.dlna`. Also, you probably don't need the word `accessing` twice :wink: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/267", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/267/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/267/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/267", "id": 413483143, "node_id": "MDU6SXNzdWU0MTM0ODMxNDM=", "number": 267, "title": "TypeError when importing fs.zipfs from compiled library", "user": {"login": "hkethi002", "id": 15849861, "node_id": "MDQ6VXNlcjE1ODQ5ODYx", "avatar_url": "https://avatars0.githubusercontent.com/u/15849861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkethi002", "html_url": "https://github.com/hkethi002", "followers_url": "https://api.github.com/users/hkethi002/followers", "following_url": "https://api.github.com/users/hkethi002/following{/other_user}", "gists_url": "https://api.github.com/users/hkethi002/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkethi002/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkethi002/subscriptions", "organizations_url": "https://api.github.com/users/hkethi002/orgs", "repos_url": "https://api.github.com/users/hkethi002/repos", "events_url": "https://api.github.com/users/hkethi002/events{/privacy}", "received_events_url": "https://api.github.com/users/hkethi002/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}, {"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-22T16:36:14Z", "updated_at": "2019-02-22T20:03:22Z", "closed_at": "2019-02-22T20:01:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the `_new_name` function in [base.py](https://github.com/PyFilesystem/pyfilesystem2/blob/master/fs/base.py#L80), a doc string is assumed to be a string for every method, however for python that has been optimized by removing doc strings, `_method.__doc__` is a `NoneType`\r\n\r\nTraceback:\r\n```\r\n>>> import fs.zipfs\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"fs/zipfs.pyc\", line 14, in <module>\r\n  File \"fs/base.pyc\", line 92, in <module>\r\n  File \"fs/base.pyc\", line 598, in FS\r\n  File \"fs/base.pyc\", line 85, in _new_name\r\nTypeError: unsupported operand type(s) for +=: 'NoneType' and 'str'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/264", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/264/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/264/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/264", "id": 408714512, "node_id": "MDU6SXNzdWU0MDg3MTQ1MTI=", "number": 264, "title": "ZipFS(io.StringIO()...) -> TypeError", "user": {"login": "zopyx", "id": 594239, "node_id": "MDQ6VXNlcjU5NDIzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/594239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zopyx", "html_url": "https://github.com/zopyx", "followers_url": "https://api.github.com/users/zopyx/followers", "following_url": "https://api.github.com/users/zopyx/following{/other_user}", "gists_url": "https://api.github.com/users/zopyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/zopyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zopyx/subscriptions", "organizations_url": "https://api.github.com/users/zopyx/orgs", "repos_url": "https://api.github.com/users/zopyx/repos", "events_url": "https://api.github.com/users/zopyx/events{/privacy}", "received_events_url": "https://api.github.com/users/zopyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-11T10:25:08Z", "updated_at": "2019-02-11T10:56:15Z", "closed_at": "2019-02-11T10:56:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "fs 2.2.1\r\nPython 3.6\r\n\r\nThe following code used to work with Python 2.7, fs 0.5:\r\n\r\n```\r\n\r\n            zip_fp = StringIO()\r\n            ZF = fs.zipfs.ZipFS(zip_fp, 'w')\r\n            for name in os.listdir(workdir):\r\n                with ZF.open(name, 'wb') as fp_out:\r\n                    fp_out.write(\r\n                        open(os.path.join(workdir, name), 'rb').read())\r\n            ZF.close()\r\n\r\n```\r\n\r\nTraceback (innermost last):\r\n  Module ZPublisher.WSGIPublisher, line 128, in transaction_pubevents\r\n  Module ZPublisher.WSGIPublisher, line 276, in publish_module\r\n  Module ZPublisher.WSGIPublisher, line 210, in publish\r\n  Module ZPublisher.mapply, line 85, in mapply\r\n  Module ZPublisher.WSGIPublisher, line 57, in call_object\r\n  Module onkopedia.policy.browser.onkopedia_view, line 722, in generate_pdf\r\n  Module onkopedia.policy.browser.onkopedia_view, line 829, in _generate_pdf\r\n  Module fs.zipfs, line 239, in close\r\n  Module fs.zipfs, line 271, in write_zip\r\n  Module fs.compress, line 105, in write_zip\r\n  Module zipfile, line 1174, in __exit__\r\n  Module zipfile, line 1704, in close\r\n  Module zipfile, line 1808, in _write_end_record\r\nTypeError: string argument expected, got 'bytes'\r\n\r\nAccording to the docs I should be able to use  `io.StringIO` hier", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/262", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/262/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/262/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/262/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/262", "id": 408526119, "node_id": "MDU6SXNzdWU0MDg1MjYxMTk=", "number": 262, "title": "non-ascii characters not accepted in filenames", "user": {"login": "simonm3", "id": 1199593, "node_id": "MDQ6VXNlcjExOTk1OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1199593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonm3", "html_url": "https://github.com/simonm3", "followers_url": "https://api.github.com/users/simonm3/followers", "following_url": "https://api.github.com/users/simonm3/following{/other_user}", "gists_url": "https://api.github.com/users/simonm3/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonm3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonm3/subscriptions", "organizations_url": "https://api.github.com/users/simonm3/orgs", "repos_url": "https://api.github.com/users/simonm3/repos", "events_url": "https://api.github.com/users/simonm3/events{/privacy}", "received_events_url": "https://api.github.com/users/simonm3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-10T11:33:28Z", "updated_at": "2019-02-10T18:50:58Z", "closed_at": "2019-02-10T18:50:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following copy_file fails. Same with copy_dir if a filename contains non-ascii characters.\r\n\r\n`copy_file(s3, \"job-data/job-453/13 \u2013 Marked Register.pdf\", local, \"job-data/job-453/13 \u2013 Marked Register.pdf\")\r\n`\r\nUnicodeEncodeError                        Traceback (most recent call last)\r\n<ipython-input-13-c5d4e6cd8643> in <module>\r\n----> 1 copy_file(s3, \"job-data/job-453/13 \u2013 Marked Register.pdf\", local, \"job-data/job-453/13 \u2013 Marked Register.pdf\")\r\n\r\n/anaconda3/lib/python3.6/site-packages/fs/copy.py in copy_file(src_fs, src_path, dst_fs, dst_path)\r\n    138                 with _src_fs.lock(), _dst_fs.lock():\r\n    139                     if _dst_fs.hassyspath(dst_path):\r\n--> 140                         with _dst_fs.openbin(dst_path, \"w\") as write_file:\r\n    141                             _src_fs.getfile(src_path, write_file)\r\n    142                     else:\r\n\r\n/anaconda3/lib/python3.6/site-packages/fs/osfs.py in openbin(self, path, mode, buffering, **options)\r\n    320         self.check()\r\n    321         _path = self.validatepath(path)\r\n--> 322         sys_path = self._to_sys_path(_path)\r\n    323         with convert_os_errors(\"openbin\", path):\r\n    324             if six.PY2 and _mode.exclusive and self.exists(path):\r\n\r\n/anaconda3/lib/python3.6/site-packages/fs/osfs.py in _to_sys_path(self, path)\r\n    164         \"\"\"\r\n    165         sys_path = fsencode(\r\n--> 166             os.path.join(self._root_path, path.lstrip(\"/\").replace(\"/\", os.sep))\r\n    167         )\r\n    168         return sys_path\r\n\r\n/anaconda3/lib/python3.6/os.py in fsencode(filename)\r\n    800         filename = fspath(filename)  # Does type-checking of `filename`.\r\n    801         if isinstance(filename, str):\r\n--> 802             return filename.encode(encoding, errors)\r\n    803         else:\r\n    804             return filename\r\n\r\nUnicodeEncodeError: 'ascii' codec can't encode character '\\u2013' in position 24: ordinal not in range(128)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/261", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/261/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/261/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/261", "id": 406910792, "node_id": "MDU6SXNzdWU0MDY5MTA3OTI=", "number": 261, "title": "New Filesystem GithubFS", "user": {"login": "merlink01", "id": 1200220, "node_id": "MDQ6VXNlcjEyMDAyMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1200220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/merlink01", "html_url": "https://github.com/merlink01", "followers_url": "https://api.github.com/users/merlink01/followers", "following_url": "https://api.github.com/users/merlink01/following{/other_user}", "gists_url": "https://api.github.com/users/merlink01/gists{/gist_id}", "starred_url": "https://api.github.com/users/merlink01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/merlink01/subscriptions", "organizations_url": "https://api.github.com/users/merlink01/orgs", "repos_url": "https://api.github.com/users/merlink01/repos", "events_url": "https://api.github.com/users/merlink01/events{/privacy}", "received_events_url": "https://api.github.com/users/merlink01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-05T18:14:46Z", "updated_at": "2019-02-28T14:47:51Z", "closed_at": "2019-02-23T09:51:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/merlink01/fs.github\r\n\r\nFor editing files directly in Github. (early Stage)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/260", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/260/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/260/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/260", "id": 406314502, "node_id": "MDU6SXNzdWU0MDYzMTQ1MDI=", "number": 260, "title": "Disable Sandboxing?", "user": {"login": "kmader", "id": 116120, "node_id": "MDQ6VXNlcjExNjEyMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/116120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmader", "html_url": "https://github.com/kmader", "followers_url": "https://api.github.com/users/kmader/followers", "following_url": "https://api.github.com/users/kmader/following{/other_user}", "gists_url": "https://api.github.com/users/kmader/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmader/subscriptions", "organizations_url": "https://api.github.com/users/kmader/orgs", "repos_url": "https://api.github.com/users/kmader/repos", "events_url": "https://api.github.com/users/kmader/events{/privacy}", "received_events_url": "https://api.github.com/users/kmader/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-04T12:48:23Z", "updated_at": "2019-02-08T23:03:03Z", "closed_at": "2019-02-08T23:03:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to disable sandboxing (`IllegalBackReference`) so files in parent directories can be accessed? The way I currently setup projects the notebooks are \r\n```bash\r\n.\r\n  |-data\r\n  |  |-data_1.csv\r\n...\r\n  |-notebooks\r\n  |  |-analysis_1.ipynb\r\n  |  |-analysis_2.py\r\n```\r\n\r\nAnd like this they cannot be accessed since the path would be `../data/data_1.csv` from the analysis script. I am using FS more for the versatility of backends like ZipFS than for the security model.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/257", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/257/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/257/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/257", "id": 402948872, "node_id": "MDU6SXNzdWU0MDI5NDg4NzI=", "number": 257, "title": "OSFS.movedir() did not work ", "user": {"login": "versaille", "id": 5367290, "node_id": "MDQ6VXNlcjUzNjcyOTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5367290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/versaille", "html_url": "https://github.com/versaille", "followers_url": "https://api.github.com/users/versaille/followers", "following_url": "https://api.github.com/users/versaille/following{/other_user}", "gists_url": "https://api.github.com/users/versaille/gists{/gist_id}", "starred_url": "https://api.github.com/users/versaille/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/versaille/subscriptions", "organizations_url": "https://api.github.com/users/versaille/orgs", "repos_url": "https://api.github.com/users/versaille/repos", "events_url": "https://api.github.com/users/versaille/events{/privacy}", "received_events_url": "https://api.github.com/users/versaille/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-25T00:02:03Z", "updated_at": "2019-01-26T17:00:08Z", "closed_at": "2019-01-26T17:00:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "after this operation osfs.movedir(u'/dir1/dir2', u'/') there was no u'/dir2' , didn't I use it right or this method doesn't work? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/256", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/256/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/256/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/256", "id": 401681127, "node_id": "MDU6SXNzdWU0MDE2ODExMjc=", "number": 256, "title": "ZipFS (Writing Mode) Error on Windows", "user": {"login": "merlink01", "id": 1200220, "node_id": "MDQ6VXNlcjEyMDAyMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1200220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/merlink01", "html_url": "https://github.com/merlink01", "followers_url": "https://api.github.com/users/merlink01/followers", "following_url": "https://api.github.com/users/merlink01/following{/other_user}", "gists_url": "https://api.github.com/users/merlink01/gists{/gist_id}", "starred_url": "https://api.github.com/users/merlink01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/merlink01/subscriptions", "organizations_url": "https://api.github.com/users/merlink01/orgs", "repos_url": "https://api.github.com/users/merlink01/repos", "events_url": "https://api.github.com/users/merlink01/events{/privacy}", "received_events_url": "https://api.github.com/users/merlink01/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-22T09:51:47Z", "updated_at": "2019-02-23T09:58:11Z", "closed_at": "2019-02-23T09:58:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 35 (32Bit)\r\nPyfilesystem: 2.2.1\r\n\r\nTestcode:\r\n```\r\nfrom fs import zipfs\r\ntestfs = zipfs.ZipFS('test.zip',write=True)\r\ntestfile = testfs.open('testfile.txt','w')\r\ntestfile.write('Hello World')\r\ntestfile.close()\r\ntestfs.close()\r\n```\r\n\r\nResult: An empty ZipFile is created.\r\n\r\nAfter looking in the code I saw a Try,Finally around \r\nself.write_zip() (zipfs.py:239)\r\n\r\nThis is really bad, because here a Silent Error + Data Loss happened.\r\n\r\nAfter disabling the Try Finally I got this Error:\r\n\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"error.py\", line 7, in <module>\r\n    testfs.close()\r\n  File \"C:\\Python35-32\\lib\\site-packages\\fs\\zipfs.py\", line 239, in close\r\n    self.write_zip()\r\n  File \"C:\\Python35-32\\lib\\site-packages\\fs\\zipfs.py\", line 271, in write_zip\r\n    encoding=encoding or self.encoding,\r\n  File \"C:\\Python35-32\\lib\\site-packages\\fs\\compress.py\", line 61, in write_zip\r\n    for path, info in gen_walk:\r\n  File \"C:\\Python35-32\\lib\\site-packages\\fs\\walk.py\", line 385, in info\r\n    for _path, info in _walk:\r\n  File \"C:\\Python35-32\\lib\\site-packages\\fs\\walk.py\", line 405, in _walk_breadth\r\n    for info in self._scan(fs, dir_path, namespaces=namespaces):\r\n  File \"C:\\Python35-32\\lib\\site-packages\\fs\\walk.py\", line 277, in _scan\r\n    for info in fs.scandir(dir_path, namespaces=namespaces):\r\n  File \"C:\\Python35-32\\lib\\site-packages\\fs\\osfs.py\", line 459, in _scandir\r\n    for dir_entry in scandir(sys_path):\r\nTypeError: os.scandir() doesn't support bytes path on Windows, use Unicode instead\r\n```\r\n\r\nAny Idea what I can do to get a zipfile created?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/255", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/255/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/255/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/255", "id": 400513244, "node_id": "MDU6SXNzdWU0MDA1MTMyNDQ=", "number": 255, "title": "AttributeError: 'OSFS' object has no attribute 'readtext'", "user": {"login": "versaille", "id": 5367290, "node_id": "MDQ6VXNlcjUzNjcyOTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5367290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/versaille", "html_url": "https://github.com/versaille", "followers_url": "https://api.github.com/users/versaille/followers", "following_url": "https://api.github.com/users/versaille/following{/other_user}", "gists_url": "https://api.github.com/users/versaille/gists{/gist_id}", "starred_url": "https://api.github.com/users/versaille/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/versaille/subscriptions", "organizations_url": "https://api.github.com/users/versaille/orgs", "repos_url": "https://api.github.com/users/versaille/repos", "events_url": "https://api.github.com/users/versaille/events{/privacy}", "received_events_url": "https://api.github.com/users/versaille/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-17T23:50:52Z", "updated_at": "2019-01-18T19:03:09Z", "closed_at": "2019-01-18T19:03:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "as title, error out if run \r\nhome_fs = OSFS(\"~/\")\r\nhome_fs.readtext(u'somefile.txt', encoding=u'utf-8')", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/254", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/254/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/254/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/254", "id": 398305687, "node_id": "MDU6SXNzdWUzOTgzMDU2ODc=", "number": 254, "title": "importing a module from FTP..possible?", "user": {"login": "humblerme", "id": 46600580, "node_id": "MDQ6VXNlcjQ2NjAwNTgw", "avatar_url": "https://avatars1.githubusercontent.com/u/46600580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humblerme", "html_url": "https://github.com/humblerme", "followers_url": "https://api.github.com/users/humblerme/followers", "following_url": "https://api.github.com/users/humblerme/following{/other_user}", "gists_url": "https://api.github.com/users/humblerme/gists{/gist_id}", "starred_url": "https://api.github.com/users/humblerme/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humblerme/subscriptions", "organizations_url": "https://api.github.com/users/humblerme/orgs", "repos_url": "https://api.github.com/users/humblerme/repos", "events_url": "https://api.github.com/users/humblerme/events{/privacy}", "received_events_url": "https://api.github.com/users/humblerme/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-11T14:14:36Z", "updated_at": "2019-01-14T16:40:59Z", "closed_at": "2019-01-14T16:40:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't seem to make it work. Is this feature inherently unimplemented?\r\nRegardless my deep appreciation for this wonderful utility, thank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/253", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/253/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/253/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/253", "id": 397493558, "node_id": "MDU6SXNzdWUzOTc0OTM1NTg=", "number": 253, "title": "fs.errors.FileExists: resource 'test_openbin_exclusive' exists", "user": {"login": "zopyx", "id": 594239, "node_id": "MDQ6VXNlcjU5NDIzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/594239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zopyx", "html_url": "https://github.com/zopyx", "followers_url": "https://api.github.com/users/zopyx/followers", "following_url": "https://api.github.com/users/zopyx/following{/other_user}", "gists_url": "https://api.github.com/users/zopyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/zopyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zopyx/subscriptions", "organizations_url": "https://api.github.com/users/zopyx/orgs", "repos_url": "https://api.github.com/users/zopyx/repos", "events_url": "https://api.github.com/users/zopyx/events{/privacy}", "received_events_url": "https://api.github.com/users/zopyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-09T18:15:51Z", "updated_at": "2019-04-29T19:37:33Z", "closed_at": "2019-04-29T19:37:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The webdavfs fail lately (I think since fs 2.2) related to  'test_openbin_exclusive`.\r\nWhat could be the issue?\r\n\r\n```\r\n\r\nself = <webdavfs.webdavfs.WebDAVFS object at 0x109b36b38>, path = 'test_open_exclusive', mode = 'x', buffering = -1, options = {}\r\n_mode = Mode('x'), _path = '/test_open_exclusive'\r\n\r\n    def openbin(self, path, mode='r', buffering=-1, **options):\r\n        _mode = Mode(mode)\r\n        _mode.validate_bin()\r\n        _path = self.validatepath(path)\r\n\r\n        log.debug(\"openbin: %s, %s\", path, mode)\r\n        with self._lock:\r\n            try:\r\n                info = self.getinfo(_path)\r\n                log.debug(\"Info: %s\", info)\r\n            except errors.ResourceNotFound:\r\n                if not _mode.create:\r\n                    raise errors.ResourceNotFound(path)\r\n                # Check the parent is an existing directory\r\n                if self.gettype(dirname(_path)) is not ResourceType.directory:\r\n                    raise errors.DirectoryExpected(dirname(path))\r\n            else:\r\n                if info.is_dir:\r\n                    raise errors.FileExpected(path)\r\n            if _mode.exclusive:\r\n>               raise errors.FileExists(path)\r\nE               fs.errors.FileExists: resource 'test_open_exclusive' exists\r\n\r\nwebdavfs/webdavfs.py:307: FileExists\r\n__________________________________________________ TestBaseX86.test_openbin_exclusive ___________________________________________________\r\n\r\nself = <webdavfs.tests.test_docker.TestBaseX86 testMethod=test_openbin_exclusive>\r\n\r\n    def test_openbin_exclusive(self):\r\n>       with self.fs.openbin(\"test_openbin_exclusive\", \"x\") as f:\r\n\r\nlib/python3.6/site-packages/fs/test.py:986:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <webdavfs.webdavfs.WebDAVFS object at 0x1099c65f8>, path = 'test_openbin_exclusive', mode = 'x', buffering = -1, options = {}\r\n_mode = Mode('x'), _path = '/test_openbin_exclusive'\r\n\r\n    def openbin(self, path, mode='r', buffering=-1, **options):\r\n        _mode = Mode(mode)\r\n        _mode.validate_bin()\r\n        _path = self.validatepath(path)\r\n\r\n        log.debug(\"openbin: %s, %s\", path, mode)\r\n        with self._lock:\r\n            try:\r\n                info = self.getinfo(_path)\r\n                log.debug(\"Info: %s\", info)\r\n            except errors.ResourceNotFound:\r\n                if not _mode.create:\r\n                    raise errors.ResourceNotFound(path)\r\n                # Check the parent is an existing directory\r\n                if self.gettype(dirname(_path)) is not ResourceType.directory:\r\n                    raise errors.DirectoryExpected(dirname(path))\r\n            else:\r\n                if info.is_dir:\r\n                    raise errors.FileExpected(path)\r\n            if _mode.exclusive:\r\n>               raise errors.FileExists(path)\r\nE               fs.errors.FileExists: resource 'test_openbin_exclusive' exists\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/251", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/251/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/251/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/251", "id": 397406982, "node_id": "MDU6SXNzdWUzOTc0MDY5ODI=", "number": 251, "title": "How to approach size limiting", "user": {"login": "mplebanski", "id": 42939509, "node_id": "MDQ6VXNlcjQyOTM5NTA5", "avatar_url": "https://avatars0.githubusercontent.com/u/42939509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mplebanski", "html_url": "https://github.com/mplebanski", "followers_url": "https://api.github.com/users/mplebanski/followers", "following_url": "https://api.github.com/users/mplebanski/following{/other_user}", "gists_url": "https://api.github.com/users/mplebanski/gists{/gist_id}", "starred_url": "https://api.github.com/users/mplebanski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mplebanski/subscriptions", "organizations_url": "https://api.github.com/users/mplebanski/orgs", "repos_url": "https://api.github.com/users/mplebanski/repos", "events_url": "https://api.github.com/users/mplebanski/events{/privacy}", "received_events_url": "https://api.github.com/users/mplebanski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-09T14:54:19Z", "updated_at": "2019-01-11T09:18:21Z", "closed_at": "2019-01-11T09:18:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "As in the title. I'm looking for advice on how to implement size limiting e.g. TempFS I want to make sure that I do not exceed preset limit of 1GB.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/243", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/243/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/243/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/243", "id": 392524644, "node_id": "MDU6SXNzdWUzOTI1MjQ2NDQ=", "number": 243, "title": "Archive test fail in Travis", "user": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-19T10:03:49Z", "updated_at": "2018-12-24T14:35:58Z", "closed_at": "2018-12-24T14:35:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The following test fail occurs in Travis. Since it apparently appeared from nowhere, I'm going to assume its environment related.\r\n\r\n```\r\n======================================================================\r\nFAIL: test_getinfo (tests.test_tarfs.TestReadTarFS)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/travis/build/PyFilesystem/pyfilesystem2/tests/test_tarfs.py\", line 185, in test_getinfo\r\n    super(TestReadTarFS, self).test_getinfo()\r\n  File \"/home/travis/build/PyFilesystem/pyfilesystem2/tests/test_archives.py\", line 81, in test_getinfo\r\n    self.assertEqual(top.permissions.mode, 0o644)\r\nAssertionError: 436 != 420\r\n======================================================================\r\nFAIL: test_getinfo (tests.test_zipfs.TestReadZipFS)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/travis/build/PyFilesystem/pyfilesystem2/tests/test_zipfs.py\", line 95, in test_getinfo\r\n    super(TestReadZipFS, self).test_getinfo()\r\n  File \"/home/travis/build/PyFilesystem/pyfilesystem2/tests/test_archives.py\", line 81, in test_getinfo\r\n    self.assertEqual(top.permissions.mode, 0o644)\r\nAssertionError: 436 != 420\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/241", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/241/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/241/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/241", "id": 391711159, "node_id": "MDU6SXNzdWUzOTE3MTExNTk=", "number": 241, "title": "Unable to rename aka movedir a directory", "user": {"login": "zopyx", "id": 594239, "node_id": "MDQ6VXNlcjU5NDIzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/594239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zopyx", "html_url": "https://github.com/zopyx", "followers_url": "https://api.github.com/users/zopyx/followers", "following_url": "https://api.github.com/users/zopyx/following{/other_user}", "gists_url": "https://api.github.com/users/zopyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/zopyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zopyx/subscriptions", "organizations_url": "https://api.github.com/users/zopyx/orgs", "repos_url": "https://api.github.com/users/zopyx/repos", "events_url": "https://api.github.com/users/zopyx/events{/privacy}", "received_events_url": "https://api.github.com/users/zopyx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1164392032, "node_id": "MDU6TGFiZWwxMTY0MzkyMDMy", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/Discussion", "name": "Discussion", "color": "e2be83", "default": false, "description": "Issues that could use a discussion"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-17T13:26:24Z", "updated_at": "2018-12-25T21:40:51Z", "closed_at": "2018-12-25T21:40:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "PyFilesystem 2.1.2: how can you rename a directory (local FS)?\r\n\r\n```\r\n\r\n(Pdb) handle.listdir('.')\r\n['x']\r\n(Pdb) handle.isdir('x')\r\nTrue\r\n(Pdb) handle.movedir('x', 'y')\r\n*** fs.errors.ResourceNotFound: resource 'y' not found\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/240", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/240/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/240/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/240", "id": 391567676, "node_id": "MDU6SXNzdWUzOTE1Njc2NzY=", "number": 240, "title": "BulkCopy in Mirror does not raise on failures", "user": {"login": "geoffjukes", "id": 1959570, "node_id": "MDQ6VXNlcjE5NTk1NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1959570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffjukes", "html_url": "https://github.com/geoffjukes", "followers_url": "https://api.github.com/users/geoffjukes/followers", "following_url": "https://api.github.com/users/geoffjukes/following{/other_user}", "gists_url": "https://api.github.com/users/geoffjukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffjukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffjukes/subscriptions", "organizations_url": "https://api.github.com/users/geoffjukes/orgs", "repos_url": "https://api.github.com/users/geoffjukes/repos", "events_url": "https://api.github.com/users/geoffjukes/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffjukes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-12-17T05:55:46Z", "updated_at": "2018-12-24T17:54:58Z", "closed_at": "2018-12-24T14:36:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nThere is a bug in the `mirror` code when using the `workers` parameter and FTP targets, whereby copy failures do not bubble up properly, and the overall process appears to be 'successful'\r\n\r\nI haven't had time to do any debugging yet (that will come tomorrow) and so I cannot be 100% sure if this is an issue with FTPFS, or the `mirror` code.\r\n\r\nSetting the `workers` value to anything other than 0, results in an incomplete mirror, with no exception thrown. I have seen the issue on several different FTP servers\r\n\r\nI use the `mirror` function inside an Nameko service, which makes use of Eventlet. I don't think that is related to the issue of exceptions not causing the `mirror` to throw an exception (as I would have expected). However, I do wonder if the FTP connections are being prematurely terminated because something in the worker pool is blocking the event loop.\r\n\r\nI'll dig more in the morning, but wanted to get this out there as quickly as possible.\r\n\r\nMany thanks, \r\n\r\nGeoff", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/239", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/239/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/239/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/239", "id": 391087410, "node_id": "MDU6SXNzdWUzOTEwODc0MTA=", "number": 239, "title": "IMAPFS", "user": {"login": "Maggi-Andrea", "id": 45874358, "node_id": "MDQ6VXNlcjQ1ODc0MzU4", "avatar_url": "https://avatars1.githubusercontent.com/u/45874358?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maggi-Andrea", "html_url": "https://github.com/Maggi-Andrea", "followers_url": "https://api.github.com/users/Maggi-Andrea/followers", "following_url": "https://api.github.com/users/Maggi-Andrea/following{/other_user}", "gists_url": "https://api.github.com/users/Maggi-Andrea/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maggi-Andrea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maggi-Andrea/subscriptions", "organizations_url": "https://api.github.com/users/Maggi-Andrea/orgs", "repos_url": "https://api.github.com/users/Maggi-Andrea/repos", "events_url": "https://api.github.com/users/Maggi-Andrea/events{/privacy}", "received_events_url": "https://api.github.com/users/Maggi-Andrea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-12-14T12:13:03Z", "updated_at": "2019-02-01T14:35:00Z", "closed_at": "2018-12-17T15:27:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have created a first basic implamatation working with IMAP server.\r\nI'm new to GitHub and managin public project, so probably is not best suited the project.\r\nBy the way the library is working and I'm using it and I'd like to share my work.\r\nI have used the [imapclient library](https://github.com/mjs/imapclient) to connect to imap server.\r\nThis is the [imapfs repository](https://github.com/superAndre/imapfs).\r\nIf anyone wants to contribute or help me is more than wellcome.\r\nRegards, Andrea", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/238", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/238/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/238/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/238", "id": 388859840, "node_id": "MDU6SXNzdWUzODg4NTk4NDA=", "number": 238, "title": "Question: pathlib compatibility?", "user": {"login": "smheidrich", "id": 3827982, "node_id": "MDQ6VXNlcjM4Mjc5ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3827982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smheidrich", "html_url": "https://github.com/smheidrich", "followers_url": "https://api.github.com/users/smheidrich/followers", "following_url": "https://api.github.com/users/smheidrich/following{/other_user}", "gists_url": "https://api.github.com/users/smheidrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/smheidrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smheidrich/subscriptions", "organizations_url": "https://api.github.com/users/smheidrich/orgs", "repos_url": "https://api.github.com/users/smheidrich/repos", "events_url": "https://api.github.com/users/smheidrich/events{/privacy}", "received_events_url": "https://api.github.com/users/smheidrich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-08T00:15:54Z", "updated_at": "2019-09-13T08:47:32Z", "closed_at": "2018-12-08T16:12:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there any plans to make the functionality offered by this package available through an interface mirroring the Python standard library's [``pathlib.Path``](https://docs.python.org/library/pathlib.html), or does anyone know of external projects working towards this? I think adoption of ``pathlib`` is already comparatively widespread, so if something like this existed, a decent number of projects would obtain support for the various filesystems offered by PyFilesystem with no or minimal changes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/237", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/237/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/237/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/237", "id": 385387141, "node_id": "MDU6SXNzdWUzODUzODcxNDE=", "number": 237, "title": "Feature Request: Passing SubFS to removetree", "user": {"login": "JakeSummers", "id": 5657503, "node_id": "MDQ6VXNlcjU2NTc1MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5657503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakeSummers", "html_url": "https://github.com/JakeSummers", "followers_url": "https://api.github.com/users/JakeSummers/followers", "following_url": "https://api.github.com/users/JakeSummers/following{/other_user}", "gists_url": "https://api.github.com/users/JakeSummers/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakeSummers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakeSummers/subscriptions", "organizations_url": "https://api.github.com/users/JakeSummers/orgs", "repos_url": "https://api.github.com/users/JakeSummers/repos", "events_url": "https://api.github.com/users/JakeSummers/events{/privacy}", "received_events_url": "https://api.github.com/users/JakeSummers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 461639391, "node_id": "MDU6TGFiZWw0NjE2MzkzOTE=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-28T17:50:44Z", "updated_at": "2018-12-17T15:18:29Z", "closed_at": "2018-12-17T15:18:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good Afternoon,\r\n\r\nCurrently this is the contract of remove tree: \r\n\r\n```\r\n    def removetree(self, dir_path):\r\n        # type: (Text) -> None\r\n        \"\"\"Recursively remove the contents of a directory.\r\n\r\n        This method is similar to `~fs.base.removedir`, but will\r\n        remove the contents of the directory if it is not empty.\r\n\r\n        Arguments:\r\n            dir_path (str): Path to a directory on the filesystem.\r\n\r\n        \"\"\"\r\n```\r\n\r\nIf this were updated to take a dir_path OR a SubFS this would make the API cleaner.  \r\n\r\nExample usage: \r\n\r\n```\r\nroot_fs: FS = ...\r\nsub_path: str = ...\r\nsub_fs: SubFS = root_fs.makedir(sub_path)\r\n...\r\n```\r\nCurrently, I have to remove the dir like this: \r\n```\r\nroot_fs.removetree(sub_fs.delegate_path())\r\n```\r\n\r\nIt would be more concise, if I could remove the SubFS directly, like this: \r\n\r\n``` \r\nroot_fs.removetree(sub_fs)\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/236", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/236/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/236/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/236", "id": 384528121, "node_id": "MDU6SXNzdWUzODQ1MjgxMjE=", "number": 236, "title": "Do I need to close subfs or does it share the lifecycle of the parent?", "user": {"login": "JakeSummers", "id": 5657503, "node_id": "MDQ6VXNlcjU2NTc1MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5657503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakeSummers", "html_url": "https://github.com/JakeSummers", "followers_url": "https://api.github.com/users/JakeSummers/followers", "following_url": "https://api.github.com/users/JakeSummers/following{/other_user}", "gists_url": "https://api.github.com/users/JakeSummers/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakeSummers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakeSummers/subscriptions", "organizations_url": "https://api.github.com/users/JakeSummers/orgs", "repos_url": "https://api.github.com/users/JakeSummers/repos", "events_url": "https://api.github.com/users/JakeSummers/events{/privacy}", "received_events_url": "https://api.github.com/users/JakeSummers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-26T21:58:26Z", "updated_at": "2018-11-27T14:05:23Z", "closed_at": "2018-11-26T22:34:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good Evening!\r\n\r\nI am trying to understand the lifecycle of SubFs objects, but haven't been able to find doc and my attempts at reading the code have been somewhat unsuccessful.  \r\n\r\n**Question: ** Do I need to explicitly close SubFS objects or will they share the lifecycle of the parent?\r\n\r\nJust as an example, I am not sure if this code is problematic: \r\n\r\n```\r\ndef get_cats(root_fs: FS):\r\n    catsFs: SubFS = root_fs.opendir(\"cat_pictures\")\r\n    cats: List[Text] =  catsFS.listdir(\".\")\r\n    return cats\r\n```\r\n\r\nDo I need to updated it to be this: \r\n\r\n```\r\ndef get_cats(root_fs: FS):\r\n    with  root_fs.opendir(\"cat_pictures\") as catsFS:\r\n        cats: List[Text] =  cats.listdir(\".\")\r\n        return cats\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/233", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/233/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/233/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/233", "id": 382791382, "node_id": "MDU6SXNzdWUzODI3OTEzODI=", "number": 233, "title": "Adding examples to repository.", "user": {"login": "bukowa", "id": 38087302, "node_id": "MDQ6VXNlcjM4MDg3MzAy", "avatar_url": "https://avatars1.githubusercontent.com/u/38087302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bukowa", "html_url": "https://github.com/bukowa", "followers_url": "https://api.github.com/users/bukowa/followers", "following_url": "https://api.github.com/users/bukowa/following{/other_user}", "gists_url": "https://api.github.com/users/bukowa/gists{/gist_id}", "starred_url": "https://api.github.com/users/bukowa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bukowa/subscriptions", "organizations_url": "https://api.github.com/users/bukowa/orgs", "repos_url": "https://api.github.com/users/bukowa/repos", "events_url": "https://api.github.com/users/bukowa/events{/privacy}", "received_events_url": "https://api.github.com/users/bukowa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}, {"id": 461639387, "node_id": "MDU6TGFiZWw0NjE2MzkzODc=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-20T18:20:40Z", "updated_at": "2019-01-13T16:05:07Z", "closed_at": "2019-01-13T16:05:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, thank you all for the awesome library \ud83d\udc4d It's strong! \ud83e\udd47 \r\nI am reading documentation - its great but there's lack of use-cases. Some simple and advanced examples could show potential users why this library is so strong. https://github.com/PyFilesystem/pyfilesystem2/issues/177\r\n\r\n What i have in mind:\r\n\r\n1. Ex. download file from FTP to local system.\r\n2. Ex. download file from URL to FTP.\r\n3. Everything else that you do on a daily basis like working with clouds etc.\r\n4. Maybe some advanced things you built?\r\n\r\nWe could have ``examples`` folder in the repository. What do you think?\r\n\r\nBest Regards,\r\nMateusz", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/230", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/230/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/230/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/230", "id": 378848337, "node_id": "MDU6SXNzdWUzNzg4NDgzMzc=", "number": 230, "title": "no files/directories are listed", "user": {"login": "boumboum", "id": 17336267, "node_id": "MDQ6VXNlcjE3MzM2MjY3", "avatar_url": "https://avatars1.githubusercontent.com/u/17336267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boumboum", "html_url": "https://github.com/boumboum", "followers_url": "https://api.github.com/users/boumboum/followers", "following_url": "https://api.github.com/users/boumboum/following{/other_user}", "gists_url": "https://api.github.com/users/boumboum/gists{/gist_id}", "starred_url": "https://api.github.com/users/boumboum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boumboum/subscriptions", "organizations_url": "https://api.github.com/users/boumboum/orgs", "repos_url": "https://api.github.com/users/boumboum/repos", "events_url": "https://api.github.com/users/boumboum/events{/privacy}", "received_events_url": "https://api.github.com/users/boumboum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-11-08T17:52:21Z", "updated_at": "2018-11-12T12:33:33Z", "closed_at": "2018-11-12T09:51:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm thinking about replacing ftplib by fs but during my test I'm unable to even list the home directory once I'm connected to the server\r\nHere is the code:\r\n```\r\nfrom fs.ftpfs import FTPFS\r\npath = FTPFS('ftp.rmyserver.domain', user='myuser', passwd='mypwd')\r\nprint(path.listdir('/'))\r\n[]\r\n```\r\nAnd I know there are folders under root because if I do that with ftplib, all the directories are listed:\r\n```\r\nfrom ftplib import FTP\r\nftp = FTP('ftp.rmyserver.domain', user='myuser', passwd='mypwd')\r\nftp.dir()\r\n10-09-18  10:34AM       <DIR>          folder1\r\n04-13-18  08:27AM       <DIR>          folder2\r\n05-29-17  05:53PM       <DIR>          folder3\r\n05-17-18  02:16PM       <DIR>          folder4\r\n```\r\n\r\nWhy?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/228", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/228/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/228/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/228", "id": 378735520, "node_id": "MDU6SXNzdWUzNzg3MzU1MjA=", "number": 228, "title": "Evaluated options for opener discovery", "user": {"login": "justvanrossum", "id": 4246121, "node_id": "MDQ6VXNlcjQyNDYxMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4246121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justvanrossum", "html_url": "https://github.com/justvanrossum", "followers_url": "https://api.github.com/users/justvanrossum/followers", "following_url": "https://api.github.com/users/justvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/justvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/justvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/justvanrossum/orgs", "repos_url": "https://api.github.com/users/justvanrossum/repos", "events_url": "https://api.github.com/users/justvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/justvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-11-08T13:40:13Z", "updated_at": "2018-12-23T16:44:16Z", "closed_at": "2018-12-23T16:44:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure this is indeed an `fs` issue, but perhaps it's at least good to have it documented here, too.\r\n\r\nWe're running into a problem with embedding `fs` into an application for MacOS with py2app, where the opener registry can't find anything, because the `entry_points.txt` file is not copied into the application, so `pkg_resources.iter_entry_points(\"fs.opener\")` yields nothing.\r\n\r\nSee the related issue for py2app:\r\nhttps://bitbucket.org/ronaldoussoren/py2app/issues/256/fs-module-not-fully-working-from-app\r\n\r\nIt seems the use of package metadata like `entry_points.txt` is problematic, and I wonder if there isn't a more friendly way to populate a registry such as `fs.opener`.\r\n\r\nCc @typemytype ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/225", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/225/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/225/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/225", "id": 371230146, "node_id": "MDU6SXNzdWUzNzEyMzAxNDY=", "number": 225, "title": "Can't build wheel from sdist", "user": {"login": "televi", "id": 3333248, "node_id": "MDQ6VXNlcjMzMzMyNDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3333248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/televi", "html_url": "https://github.com/televi", "followers_url": "https://api.github.com/users/televi/followers", "following_url": "https://api.github.com/users/televi/following{/other_user}", "gists_url": "https://api.github.com/users/televi/gists{/gist_id}", "starred_url": "https://api.github.com/users/televi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/televi/subscriptions", "organizations_url": "https://api.github.com/users/televi/orgs", "repos_url": "https://api.github.com/users/televi/repos", "events_url": "https://api.github.com/users/televi/events{/privacy}", "received_events_url": "https://api.github.com/users/televi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-17T19:21:20Z", "updated_at": "2018-11-03T11:56:21Z", "closed_at": "2018-11-03T11:56:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Steps\r\n------\r\n\r\nIn a python3.6 venv, simply run ```pip wheel bdist_wheel fs==2.1.1```\r\n\r\nExpected results\r\n-----------------\r\n\r\nA wheel is build for fs.\r\n\r\nObserved results\r\n------------------\r\n\r\nThe build fails with the following output (snipped):\r\n\r\n```\r\n  running install_egg_info\r\n  running egg_info\r\n  writing fs.egg-info/PKG-INFO\r\n  writing dependency_links to fs.egg-info/dependency_links.txt\r\n  writing entry points to fs.egg-info/entry_points.txt\r\n  writing requirements to fs.egg-info/requires.txt\r\n  writing top-level names to fs.egg-info/top_level.txt\r\n  reading manifest file 'fs.egg-info/SOURCES.txt'\r\n  writing manifest file 'fs.egg-info/SOURCES.txt'\r\n  Copying fs.egg-info to build/bdist.linux-x86_64/wheel/fs-2.1.1-py3.6.egg-info\r\n  running install_scripts\r\n  error: [Errno 2] No such file or directory: 'LICENSE'\r\n\r\n  ----------------------------------------\r\n  Failed building wheel for fs\r\n```\r\n\r\nInvestigation\r\n-------------\r\n\r\nIf I clone the repository and checkout v2.1.1, the following works: ```python3 setup.py bdist_wheel```.\r\n\r\nThat led me to believe that the published sdist was wrong.  If I download it from pypi.org and expand it, the file LICENSE is, in fact, missing but setup.cfg still references it which then causes wheel builds using the sdist to fail.\r\n\r\nTo test this, I added a file the the cloned repo named \"MANIFEST.in\" and simply added \"include LICENSE\" to it and the ran ```python3 setup.py sdist```.  If I then expand that source distribution, LICENSE is present and running ```python3 wheel bdist_wheel``` from that works as expected.\r\n\r\nSo it appears that the source distribution as published to pypi is incorrect in that it is missing the LICENSE file required by setup.cfg to build a wheel.\r\n\r\nI can submit a patch to add a MANIFEST.in file with the line above if you'd like.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/224", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/224/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/224/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/224", "id": 370630593, "node_id": "MDU6SXNzdWUzNzA2MzA1OTM=", "number": 224, "title": " 'charmap' codec can't encode character", "user": {"login": "robmarkcole", "id": 11855322, "node_id": "MDQ6VXNlcjExODU1MzIy", "avatar_url": "https://avatars2.githubusercontent.com/u/11855322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robmarkcole", "html_url": "https://github.com/robmarkcole", "followers_url": "https://api.github.com/users/robmarkcole/followers", "following_url": "https://api.github.com/users/robmarkcole/following{/other_user}", "gists_url": "https://api.github.com/users/robmarkcole/gists{/gist_id}", "starred_url": "https://api.github.com/users/robmarkcole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robmarkcole/subscriptions", "organizations_url": "https://api.github.com/users/robmarkcole/orgs", "repos_url": "https://api.github.com/users/robmarkcole/repos", "events_url": "https://api.github.com/users/robmarkcole/events{/privacy}", "received_events_url": "https://api.github.com/users/robmarkcole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-16T14:06:50Z", "updated_at": "2018-10-17T17:14:17Z", "closed_at": "2018-10-17T07:27:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "This error is possibly due to my particular use case, which is within a jupyter notebook. I use a magic command to pipe the output of `tree()` to a text file. Usually this works but quite frequently I get the following error:\r\n\r\n```python\r\n%%capture --no-stderr output\r\n\r\nopg_dir_fs.tree()\r\n\r\nwith open(opg_dir_fs_txt, 'w') as f:\r\n    f.write(output.stdout)\r\n```\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nUnicodeEncodeError                        Traceback (most recent call last)\r\n<ipython-input-69-d88565bc4e5a> in <module>()\r\n      3 \r\n      4 with open(opg_dir_fs_txt, 'w') as f:\r\n----> 5     f.write(output.stdout)\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\encodings\\cp1252.py in encode(self, input, final)\r\n     17 class IncrementalEncoder(codecs.IncrementalEncoder):\r\n     18     def encode(self, input, final=False):\r\n---> 19         return codecs.charmap_encode(input,self.errors,encoding_table)[0]\r\n     20 \r\n     21 class IncrementalDecoder(codecs.IncrementalDecoder):\r\n\r\nUnicodeEncodeError: 'charmap' codec can't encode character '\\uff0d' in position 6010282: character maps to <undefined>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/223", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/223/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/223/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/223", "id": 370445072, "node_id": "MDU6SXNzdWUzNzA0NDUwNzI=", "number": 223, "title": "Please add a link to fs.googledrivefs in \"External Filesystems\"", "user": {"login": "rkhwaja", "id": 511154, "node_id": "MDQ6VXNlcjUxMTE1NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/511154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkhwaja", "html_url": "https://github.com/rkhwaja", "followers_url": "https://api.github.com/users/rkhwaja/followers", "following_url": "https://api.github.com/users/rkhwaja/following{/other_user}", "gists_url": "https://api.github.com/users/rkhwaja/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkhwaja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkhwaja/subscriptions", "organizations_url": "https://api.github.com/users/rkhwaja/orgs", "repos_url": "https://api.github.com/users/rkhwaja/repos", "events_url": "https://api.github.com/users/rkhwaja/events{/privacy}", "received_events_url": "https://api.github.com/users/rkhwaja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-16T05:28:32Z", "updated_at": "2018-10-17T07:19:11Z", "closed_at": "2018-10-17T07:19:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The pypi link is https://pypi.org/project/fs.googledrivefs/\r\nThe github is at https://github.com/rkhwaja/fs.googledrivefs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/222", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/222/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/222/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/222", "id": 369661179, "node_id": "MDU6SXNzdWUzNjk2NjExNzk=", "number": 222, "title": "Deprecation warning - import Mapping from collections.abc instead of collections for 3.8", "user": {"login": "rkhwaja", "id": 511154, "node_id": "MDQ6VXNlcjUxMTE1NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/511154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkhwaja", "html_url": "https://github.com/rkhwaja", "followers_url": "https://api.github.com/users/rkhwaja/followers", "following_url": "https://api.github.com/users/rkhwaja/following{/other_user}", "gists_url": "https://api.github.com/users/rkhwaja/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkhwaja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkhwaja/subscriptions", "organizations_url": "https://api.github.com/users/rkhwaja/orgs", "repos_url": "https://api.github.com/users/rkhwaja/repos", "events_url": "https://api.github.com/users/rkhwaja/events{/privacy}", "received_events_url": "https://api.github.com/users/rkhwaja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-12T18:26:06Z", "updated_at": "2018-11-10T11:35:23Z", "closed_at": "2018-11-10T11:35:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I get the following running the test set on googledrivefs using fs 2.1.1:\r\n\r\n`.../python3.7/site-packages/fs/error_tools.py:110: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  if isinstance(path_replace, collections.Mapping):`\r\n\r\n It looks like you can just import from collections.abc on everything >= python 3.3.\r\n\r\nI also get the following:\r\n\r\n`.../python3.7/site-packages/fs/test.py:1050: DeprecationWarning: Please use assertRaisesRegex instead.\r\n  with self.assertRaisesRegexp(errors.ResourceNotFound, error_msg):\r\n`\r\n\r\nwhich I suppose is something from unittest", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/221", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/221/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/221/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/221", "id": 367602619, "node_id": "MDU6SXNzdWUzNjc2MDI2MTk=", "number": 221, "title": "The Schr\u00f6dinger memory resource", "user": {"login": "althonos", "id": 8660647, "node_id": "MDQ6VXNlcjg2NjA2NDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8660647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/althonos", "html_url": "https://github.com/althonos", "followers_url": "https://api.github.com/users/althonos/followers", "following_url": "https://api.github.com/users/althonos/following{/other_user}", "gists_url": "https://api.github.com/users/althonos/gists{/gist_id}", "starred_url": "https://api.github.com/users/althonos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/althonos/subscriptions", "organizations_url": "https://api.github.com/users/althonos/orgs", "repos_url": "https://api.github.com/users/althonos/repos", "events_url": "https://api.github.com/users/althonos/events{/privacy}", "received_events_url": "https://api.github.com/users/althonos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}, {"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-07T22:56:03Z", "updated_at": "2018-12-17T15:33:56Z", "closed_at": "2018-12-17T15:33:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Just for the record, a `MemoryFS` root can store text without raising any error ! \r\n\r\n```python\r\n>>> import fs\r\n>>> m = fs.open_fs('mem://')\r\n>>> m.settext('/', \"i'm a file\")\r\n>>> m.touch('nope')\r\n>>> m.gettext('/')\r\n\"i'm a file\"\r\n>>> m.listdir('/')\r\n['', 'nope']\r\n```\r\n\r\n\r\nActually this creates an empty-named record right at the root but I found it quite funny because it makes the root behave like both a directory and a file :wink:", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/220", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/220/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/220/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/220", "id": 367593135, "node_id": "MDU6SXNzdWUzNjc1OTMxMzU=", "number": 220, "title": "why FS.desc(path) checks that path exists?", "user": {"login": "anthrotype", "id": 6939968, "node_id": "MDQ6VXNlcjY5Mzk5Njg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6939968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anthrotype", "html_url": "https://github.com/anthrotype", "followers_url": "https://api.github.com/users/anthrotype/followers", "following_url": "https://api.github.com/users/anthrotype/following{/other_user}", "gists_url": "https://api.github.com/users/anthrotype/gists{/gist_id}", "starred_url": "https://api.github.com/users/anthrotype/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anthrotype/subscriptions", "organizations_url": "https://api.github.com/users/anthrotype/orgs", "repos_url": "https://api.github.com/users/anthrotype/repos", "events_url": "https://api.github.com/users/anthrotype/events{/privacy}", "received_events_url": "https://api.github.com/users/anthrotype/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-07T20:56:35Z", "updated_at": "2018-10-07T21:21:35Z", "closed_at": "2018-10-07T21:18:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'd like to get a description of a path to a resource on a filesystem, even if that resource is not found. For example, I could use this description to print a meaningful error message to the user.\r\n\r\nHowever, it seems that the `desc` method of FS objects first checks that the path exists, and if not it raises a ResourceNotFound:\r\n\r\nhttps://github.com/PyFilesystem/pyfilesystem2/blob/5643bade04cf2f8e4af575f404d0dab7717505a6/fs/base.py#L445-L446\r\n\r\nThe `getsyspath` (at least the OSFS.getsyspath) seems to work for a non-existing path. So why is it that `desc` is asserting that the path exists before making the description? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/219", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/219/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/219/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/219", "id": 366283982, "node_id": "MDU6SXNzdWUzNjYyODM5ODI=", "number": 219, "title": "Missing git tag for 2.1.1 release", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-03T11:02:50Z", "updated_at": "2018-10-03T11:11:50Z", "closed_at": "2018-10-03T11:11:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to keep PyPI releases and git tags in sync :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/217", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/217/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/217/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/217", "id": 365521781, "node_id": "MDU6SXNzdWUzNjU1MjE3ODE=", "number": 217, "title": "Opening a folder on NFS fails with OSError [OSX]", "user": {"login": "ehlertjd", "id": 1509690, "node_id": "MDQ6VXNlcjE1MDk2OTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1509690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehlertjd", "html_url": "https://github.com/ehlertjd", "followers_url": "https://api.github.com/users/ehlertjd/followers", "following_url": "https://api.github.com/users/ehlertjd/following{/other_user}", "gists_url": "https://api.github.com/users/ehlertjd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehlertjd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehlertjd/subscriptions", "organizations_url": "https://api.github.com/users/ehlertjd/orgs", "repos_url": "https://api.github.com/users/ehlertjd/repos", "events_url": "https://api.github.com/users/ehlertjd/events{/privacy}", "received_events_url": "https://api.github.com/users/ehlertjd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 759148964, "node_id": "MDU6TGFiZWw3NTkxNDg5NjQ=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/accepted", "name": "accepted", "color": "ef894f", "default": false, "description": null}, {"id": 461639385, "node_id": "MDU6TGFiZWw0NjE2MzkzODU=", "url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-10-01T15:40:18Z", "updated_at": "2019-02-26T16:09:19Z", "closed_at": "2019-02-26T16:09:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Steps to Reproduce\r\n- Have an NFS share mounted at `/nfs`\r\n- Attempt to create an OSFS object with that directory:\r\n```python\r\nfrom fs.osfs import OSFS\r\nnfs = OSFS('/nfs')\r\n```\r\n## Expected result\r\nNFS mounted folders should be treated as if they were normal folders.\r\n\r\n## Actual result\r\nGet an OSError when trying to get `max_sys_path_length`:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.6/site-packages/fs/osfs.py\", line 146, in __init__\r\n    fsencode(_root_path), os.pathconf_names[\"PC_PATH_MAX\"]\r\nOSError: [Errno 22] Invalid argument\r\n```\r\n\r\n## Workaround\r\nOpen the root folder, then open the NFS shared folder as a subdirectory:\r\n```python\r\nfrom fs.osfs import OSFS\r\nrootfs = OSFS('/')\r\nnfs = rootfs.opendir('/nfs')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/213", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/213/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/213/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/213", "id": 354364861, "node_id": "MDU6SXNzdWUzNTQzNjQ4NjE=", "number": 213, "title": "fs.dropboxfs has no github issues tab", "user": {"login": "rkhwaja", "id": 511154, "node_id": "MDQ6VXNlcjUxMTE1NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/511154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkhwaja", "html_url": "https://github.com/rkhwaja", "followers_url": "https://api.github.com/users/rkhwaja/followers", "following_url": "https://api.github.com/users/rkhwaja/following{/other_user}", "gists_url": "https://api.github.com/users/rkhwaja/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkhwaja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkhwaja/subscriptions", "organizations_url": "https://api.github.com/users/rkhwaja/orgs", "repos_url": "https://api.github.com/users/rkhwaja/repos", "events_url": "https://api.github.com/users/rkhwaja/events{/privacy}", "received_events_url": "https://api.github.com/users/rkhwaja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-27T15:25:43Z", "updated_at": "2018-08-27T20:38:49Z", "closed_at": "2018-08-27T20:38:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The current pypi release doesn't install (at least on macos/python 3.7) but there's nowhere to log the bug.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/212", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/212/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/212/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/212", "id": 353545288, "node_id": "MDU6SXNzdWUzNTM1NDUyODg=", "number": 212, "title": "tahoe-lafs", "user": {"login": "eleaner", "id": 5169203, "node_id": "MDQ6VXNlcjUxNjkyMDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5169203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eleaner", "html_url": "https://github.com/eleaner", "followers_url": "https://api.github.com/users/eleaner/followers", "following_url": "https://api.github.com/users/eleaner/following{/other_user}", "gists_url": "https://api.github.com/users/eleaner/gists{/gist_id}", "starred_url": "https://api.github.com/users/eleaner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eleaner/subscriptions", "organizations_url": "https://api.github.com/users/eleaner/orgs", "repos_url": "https://api.github.com/users/eleaner/repos", "events_url": "https://api.github.com/users/eleaner/events{/privacy}", "received_events_url": "https://api.github.com/users/eleaner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-23T20:41:18Z", "updated_at": "2018-08-28T20:58:15Z", "closed_at": "2018-08-28T20:58:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI noticed that tahoe-lafs support was dropped in version 2\r\nIs there a chance it will come back?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/210", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/210/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/210/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/210", "id": 349975100, "node_id": "MDU6SXNzdWUzNDk5NzUxMDA=", "number": 210, "title": "Fix path separators", "user": {"login": "willmcgugan", "id": 554369, "node_id": "MDQ6VXNlcjU1NDM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/554369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willmcgugan", "html_url": "https://github.com/willmcgugan", "followers_url": "https://api.github.com/users/willmcgugan/followers", "following_url": "https://api.github.com/users/willmcgugan/following{/other_user}", "gists_url": "https://api.github.com/users/willmcgugan/gists{/gist_id}", "starred_url": "https://api.github.com/users/willmcgugan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willmcgugan/subscriptions", "organizations_url": "https://api.github.com/users/willmcgugan/orgs", "repos_url": "https://api.github.com/users/willmcgugan/repos", "events_url": "https://api.github.com/users/willmcgugan/events{/privacy}", "received_events_url": "https://api.github.com/users/willmcgugan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-13T10:36:03Z", "updated_at": "2018-08-27T21:13:48Z", "closed_at": "2018-08-27T21:13:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We've been using the wrong character as a path separator. In order to avoid the forward slash, back slash confusion, we should be using the baguette emoji. Here are some examples:\r\n\r\n```python\r\nimport fs\r\nprojects = fs.open('~\ud83e\udd56projects`)\r\nprojects.listdir(\"\ud83e\udd56\")\r\n\r\nftp = fs.open(\"ftp:\ud83e\udd56\ud83e\udd56example.org\ud83e\udd56foo\ud83e\udd56\")\r\n```\r\n\r\nPRs welcome", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/207", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/207/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/207/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/207", "id": 346564620, "node_id": "MDU6SXNzdWUzNDY1NjQ2MjA=", "number": 207, "title": "Hacking through WrapFS", "user": {"login": "xandfury", "id": 4391664, "node_id": "MDQ6VXNlcjQzOTE2NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4391664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xandfury", "html_url": "https://github.com/xandfury", "followers_url": "https://api.github.com/users/xandfury/followers", "following_url": "https://api.github.com/users/xandfury/following{/other_user}", "gists_url": "https://api.github.com/users/xandfury/gists{/gist_id}", "starred_url": "https://api.github.com/users/xandfury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xandfury/subscriptions", "organizations_url": "https://api.github.com/users/xandfury/orgs", "repos_url": "https://api.github.com/users/xandfury/repos", "events_url": "https://api.github.com/users/xandfury/events{/privacy}", "received_events_url": "https://api.github.com/users/xandfury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-08-01T11:44:21Z", "updated_at": "2018-08-02T11:25:16Z", "closed_at": "2018-08-02T11:25:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "**_Disclaimer_**: This might be long for something stupid or simple. Please be patient :-) \r\n\r\n-------------\r\nAs discussed in #204 - I am trying to write a custom FS that caches files and directories. For the same I needed a custom file wrapper that does setup and teardown stuff. This is how it looks like:\r\n```python\r\nclass _custom_file_wrapper(object):\r\n    \"\"\"This is a custom file class that does some setup and teardown stuff..\"\"\"\r\n\r\n    def __init__(self,\r\n                 file_system,\r\n                 parent_fs,\r\n                 path,\r\n                 mode,\r\n                 buffering=-1,\r\n                 encoding=None,\r\n                 newline='',\r\n                 line_buffering=False):\r\n        print('We should see this message when a new file is created!!')\r\n        self._file = parent_fs.openbin(path=path,\r\n                                       mode=mode,\r\n                                       buffering=buffering,\r\n                                       encoding=encoding)\r\n\r\n        # do some setUp stuff with _file.\r\n        print('Filesystem: {}, Parent File system: {}'.format(file_system, parent_fs))\r\n\r\n    def __enter__(self):\r\n        return self._file\r\n\r\n    def __exit__(self, exc_type, exc_value, traceback):\r\n        self.close()\r\n        return False\r\n\r\n    def close(self):\r\n        # do some tearDown stuff for the _file object.\r\n        print('Closing File ....')\r\n        self._file.close()\r\n\r\n    def __getattr__(self, item):\r\n        return getattr(self._file, item)\r\n``` \r\n\r\nMy `WrapFS` wraps an `OSFS` instance and overwrites functionality such as `open` and `openbin` to use the above `_custom_file_wrapper` object. **_This works fine when the essential methods are called but when non-essential methods such as `move` or `copy` are called, my `_custom_file_wrapper` is ignored._** Below is how my custom WrapFS instance looks like:\r\n\r\n```python\r\nclass TestFileSystem(WrapFS):\r\n    def __init__(self, path):\r\n        super(TestFileSystem, self).__init__(open_fs(path))   # wrap osfs at path\r\n        self._wrap_fs._meta['supports_rename'] = False\r\n        # ^^^ not sure if this is required as a custom getmeta() is defined below.\r\n        # But still - to be safe.\r\n\r\n    def getmeta(self, namespace=\"standard\"):\r\n        \"\"\"Defined so that os.rename is never used.\"\"\"\r\n        self.check()\r\n        meta = self.delegate_fs().getmeta(namespace=namespace)\r\n        meta['supports_rename'] = False\r\n        return meta\r\n\r\n\r\n    def openbin(self, path, mode=\"r\", buffering=-1, **options):\r\n        print('Inside openbin of TestFileSystem. This is a test!')\r\n        return _custom_file_wrapper(parent_fs=self.delegate_fs(),\r\n                                    file_system=self,\r\n                                    path=path,\r\n                                    mode=Mode(mode).to_platform_bin(),\r\n                                    buffering=buffering)\r\n\r\n    # NOTE: open() is similar. I omitted it's definition since  `move()`  uses move.move_file which would\r\n    # neither use open() or openbin()\r\n```\r\n\r\nWhen run together, the following result is obtained ([Link to gist](https://gist.github.com/xandfury/f9cbd96879da65cc1b39633f6530fff2))\r\n\r\n```shell\r\nStarting FS test\r\nListing files/directories in cwd: ['another.py', 'test.py']\r\nRename is False. os.rename should not be used\r\nInside openbin of TestFileSystem. This is a test!\r\nWe should see this message when a new file is created!!\r\nFilesystem: <osfs '/home/abhinav/demo'>, Parent File system: <osfs '/home/abhinav/demo'>\r\nClosing File ....\r\n------------- Start Move --------------\r\n------------- Stop Move --------------\r\nStopping FS test\r\n```\r\n\r\nAs seen from above output, my custom defined essesntial methods were not invoked during the call of `move()`. \r\n\r\n**_Problem_**:\r\nThe reason for this is that *all* methods defined in `WrapFS` call the underlying `OSFS` methods. \r\nI was hoping that in it's implementation, only essential methods would be allowed to do so. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/205", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/205/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/205/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/205", "id": 346162360, "node_id": "MDU6SXNzdWUzNDYxNjIzNjA=", "number": 205, "title": "Error walking ftp filesystem", "user": {"login": "dhirschfeld", "id": 881019, "node_id": "MDQ6VXNlcjg4MTAxOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/881019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhirschfeld", "html_url": "https://github.com/dhirschfeld", "followers_url": "https://api.github.com/users/dhirschfeld/followers", "following_url": "https://api.github.com/users/dhirschfeld/following{/other_user}", "gists_url": "https://api.github.com/users/dhirschfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhirschfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhirschfeld/subscriptions", "organizations_url": "https://api.github.com/users/dhirschfeld/orgs", "repos_url": "https://api.github.com/users/dhirschfeld/repos", "events_url": "https://api.github.com/users/dhirschfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/dhirschfeld/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-07-31T12:18:43Z", "updated_at": "2018-08-05T10:11:10Z", "closed_at": "2018-08-05T10:11:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to walk an FTP sub-folder as shown below:\r\n\r\n![image](https://user-images.githubusercontent.com/881019/43458119-5a4f05c0-950c-11e8-8a3c-da9a57d570ed.png)\r\n\r\nThe below code:\r\nhttps://github.com/PyFilesystem/pyfilesystem2/blob/b2c0d96f55d4dfe777b4f9476676b77d01f36bf7/fs/ftpfs.py#L710-L724\r\n\r\n...seems to give sensible results:\r\n```python\r\nIn[2]: lines\r\nOut[2]: \r\n['Type=cdir;Modify=20180731114724;UNIX.mode=0755; /tmp',\r\n 'Type=pdir;Modify=20180731112024;UNIX.mode=0775; /',\r\n 'Type=file;Size=331523;Modify=20180731112041;UNIX.mode=0644; a.csv',\r\n 'Type=file;Size=368340;Modify=20180731112041;UNIX.mode=0644; b.csv']\r\n\r\nIn[4]: list(self._parse_mlsx(lines))\r\nOut[4]: \r\n[{'basic': {'name': 'tmp', 'is_dir': True},\r\n  'ftp': {'type': 'cdir', 'modify': '20180731114724', 'unix.mode': '0755'},\r\n  'details': {'type': 1, 'size': 0, 'modified': 1533037644}},\r\n {'basic': {'name': '', 'is_dir': True},\r\n  'ftp': {'type': 'pdir', 'modify': '20180731112024', 'unix.mode': '0775'},\r\n  'details': {'type': 1, 'size': 0, 'modified': 1533036024}},\r\n {'basic': {'name': 'a.csv', 'is_dir': False},\r\n  'ftp': {'type': 'file',\r\n   'size': '331523',\r\n   'modify': '20180731112041',\r\n   'unix.mode': '0644'},\r\n  'details': {'type': 2, 'size': 331523, 'modified': 1533036041}},\r\n {'basic': {'name': 'b.csv', 'is_dir': False},\r\n  'ftp': {'type': 'file',\r\n   'size': '368340',\r\n   'modify': '20180731112041',\r\n   'unix.mode': '0644'},\r\n  'details': {'type': 2, 'size': 368340, 'modified': 1533036041}}]\r\n```\r\ni.e. the current dir, the parent dir and the two files are all correctly? listed.\r\n\r\nHowever, in the [`Walker._walk_breadth`](https://github.com/PyFilesystem/pyfilesystem2/blob/master/fs/walk.py#L389-L415) method the current dir `tmp` is the first item yielded from `self._scan` which result in the `cdir` being joined to itself and the non-existent `/tmp/tmp` being pushed onto the deque:\r\n\r\n![image](https://user-images.githubusercontent.com/881019/43458479-c5a7e3ea-950d-11e8-9dd4-d08ee34a5360.png)\r\n\r\n\r\n...so it seems there's a :bug: there somewhere - I'm just not familiar enough with the codebase to say exactly where. Hopefully there's enough debug info there that the underlying issue is easy to spot. Happy to provide more info if required...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/204", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/204/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/204/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/204", "id": 345892978, "node_id": "MDU6SXNzdWUzNDU4OTI5Nzg=", "number": 204, "title": "Safe to use methods after implementing essential ones", "user": {"login": "xandfury", "id": 4391664, "node_id": "MDQ6VXNlcjQzOTE2NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4391664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xandfury", "html_url": "https://github.com/xandfury", "followers_url": "https://api.github.com/users/xandfury/followers", "following_url": "https://api.github.com/users/xandfury/following{/other_user}", "gists_url": "https://api.github.com/users/xandfury/gists{/gist_id}", "starred_url": "https://api.github.com/users/xandfury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xandfury/subscriptions", "organizations_url": "https://api.github.com/users/xandfury/orgs", "repos_url": "https://api.github.com/users/xandfury/repos", "events_url": "https://api.github.com/users/xandfury/events{/privacy}", "received_events_url": "https://api.github.com/users/xandfury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-30T19:05:43Z", "updated_at": "2018-07-31T14:03:42Z", "closed_at": "2018-07-31T14:03:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi..\r\nAfter discussion with Will, I was able to write a custom `fs` that overwrites the essential methods provided [here](http://pyfilesystem2.readthedocs.io/en/latest/implementers.html#essential-methods). It does exactly what I expect it to do and I am pretty happy with it. \r\nMy question is :  **just after implementing** these methods, what all [non-essential methods](http://pyfilesystem2.readthedocs.io/en/latest/implementers.html#non-essential-methods) are safe to use?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/203", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/203/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/203/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/203", "id": 345877074, "node_id": "MDU6SXNzdWUzNDU4NzcwNzQ=", "number": 203, "title": "Support for DockerFS?", "user": {"login": "xandfury", "id": 4391664, "node_id": "MDQ6VXNlcjQzOTE2NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4391664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xandfury", "html_url": "https://github.com/xandfury", "followers_url": "https://api.github.com/users/xandfury/followers", "following_url": "https://api.github.com/users/xandfury/following{/other_user}", "gists_url": "https://api.github.com/users/xandfury/gists{/gist_id}", "starred_url": "https://api.github.com/users/xandfury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xandfury/subscriptions", "organizations_url": "https://api.github.com/users/xandfury/orgs", "repos_url": "https://api.github.com/users/xandfury/repos", "events_url": "https://api.github.com/users/xandfury/events{/privacy}", "received_events_url": "https://api.github.com/users/xandfury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-30T18:23:33Z", "updated_at": "2018-07-31T19:19:32Z", "closed_at": "2018-07-31T13:59:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Docker seems to be a popular option for keeping/playing with files depending upon the use case. Do you think, a docker fs wrapper implementation can be considered as a feature request?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/197", "repository_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2", "labels_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/197/comments", "events_url": "https://api.github.com/repos/PyFilesystem/pyfilesystem2/issues/197/events", "html_url": "https://github.com/PyFilesystem/pyfilesystem2/issues/197", "id": 343722531, "node_id": "MDU6SXNzdWUzNDM3MjI1MzE=", "number": 197, "title": "`exclude_files` option or regex support for exclusions in filter", "user": {"login": "geoffjukes", "id": 1959570, "node_id": "MDQ6VXNlcjE5NTk1NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1959570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffjukes", "html_url": "https://github.com/geoffjukes", "followers_url": "https://api.github.com/users/geoffjukes/followers", "following_url": "https://api.github.com/users/geoffjukes/following{/other_user}", "gists_url": "https://api.github.com/users/geoffjukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffjukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffjukes/subscriptions", "organizations_url": "https://api.github.com/users/geoffjukes/orgs", "repos_url": "https://api.github.com/users/geoffjukes/repos", "events_url": "https://api.github.com/users/geoffjukes/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffjukes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-23T17:21:08Z", "updated_at": "2018-11-20T05:50:00Z", "closed_at": "2018-11-20T05:50:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to omit certain filename patterns from the walker results. The most obvious example, are the 'dotfiles', but on Windows there are also temporary files (starting `~`), and on OSX there can be `_` files.\r\n\r\nThis might already be possible via the 'filter' option, I'm not sure. I tested some regexes, but they didn't work.\r\n\r\nAn 'exclude_files` option (functionally similar to the `exclude_dirs` option) would be a lot clearer.\r\n\r\nAs you're in the walker right now, I thought I'd bring it up. Right now, I post-filter the walker results, popping out what I don't want (ala https://github.com/PyFilesystem/pyfilesystem2/issues/166#issuecomment-394059963)", "performed_via_github_app": null, "score": 1.0}]}