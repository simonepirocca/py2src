{"total_count": 313, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/770", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/770/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/770/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/770/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/770", "id": 678219212, "node_id": "MDU6SXNzdWU2NzgyMTkyMTI=", "number": 770, "title": "Installation fails depending on locale", "user": {"login": "choeger", "id": 179956, "node_id": "MDQ6VXNlcjE3OTk1Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/179956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/choeger", "html_url": "https://github.com/choeger", "followers_url": "https://api.github.com/users/choeger/followers", "following_url": "https://api.github.com/users/choeger/following{/other_user}", "gists_url": "https://api.github.com/users/choeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/choeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/choeger/subscriptions", "organizations_url": "https://api.github.com/users/choeger/orgs", "repos_url": "https://api.github.com/users/choeger/repos", "events_url": "https://api.github.com/users/choeger/events{/privacy}", "received_events_url": "https://api.github.com/users/choeger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490793, "node_id": "MDU6TGFiZWwzMDQ5MDc5Mw==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}, {"id": 210341587, "node_id": "MDU6TGFiZWwyMTAzNDE1ODc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/NeedInfo", "name": "NeedInfo", "color": "eb6420", "default": false, "description": null}, {"id": 660252322, "node_id": "MDU6TGFiZWw2NjAyNTIzMjI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Packaging", "name": "Packaging", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-08-13T07:30:43Z", "updated_at": "2020-08-21T07:49:18Z", "closed_at": "2020-08-21T07:49:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "A CI system just failed when installing factory_boy while I could install it locally. Turns out the locale makes a difference:\r\n\r\n```\r\n(venv) \u279c  /tmp LC_ALL=C pip install --force factory_boy\r\nCollecting factory_boy\r\n  Using cached https://files.pythonhosted.org/packages/e4/ca/ad899f91979352aa06b9a35b5ca436adfa9782924832a02fdbb6fce1c075/factory_boy-3.0.0.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-uo6r_saz/factory-boy/setup.py\", line 5, in <module>\r\n        setup()\r\n      File \"/tmp/venv/lib/python3.6/site-packages/setuptools/__init__.py\", line 142, in setup\r\n        _install_setup_requires(attrs)\r\n      File \"/tmp/venv/lib/python3.6/site-packages/setuptools/__init__.py\", line 135, in _install_setup_requires\r\n        dist.parse_config_files(ignore_option_errors=True)\r\n      File \"/tmp/venv/lib/python3.6/site-packages/setuptools/dist.py\", line 564, in parse_config_files\r\n        _Distribution.parse_config_files(self, filenames=filenames)\r\n      File \"/opt/c1/lib/python3.6/distutils/dist.py\", line 395, in parse_config_files\r\n        parser.read(filename)\r\n      File \"/opt/c1/lib/python3.6/configparser.py\", line 697, in read\r\n        self._read(fp, filename)\r\n      File \"/opt/c1/lib/python3.6/configparser.py\", line 1015, in _read\r\n        for lineno, line in enumerate(fp, start=1):\r\n      File \"/opt/c1/lib/python3.6/encodings/ascii.py\", line 26, in decode\r\n        return codecs.ascii_decode(input, self.errors)[0]\r\n    UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 261: ordinal not in range(128)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/769", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/769/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/769/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/769", "id": 678069540, "node_id": "MDU6SXNzdWU2NzgwNjk1NDA=", "number": 769, "title": "AttributeError: module 'factory' has no attribute 'django'", "user": {"login": "ajbeach2", "id": 1581726, "node_id": "MDQ6VXNlcjE1ODE3MjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1581726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajbeach2", "html_url": "https://github.com/ajbeach2", "followers_url": "https://api.github.com/users/ajbeach2/followers", "following_url": "https://api.github.com/users/ajbeach2/following{/other_user}", "gists_url": "https://api.github.com/users/ajbeach2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajbeach2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajbeach2/subscriptions", "organizations_url": "https://api.github.com/users/ajbeach2/orgs", "repos_url": "https://api.github.com/users/ajbeach2/repos", "events_url": "https://api.github.com/users/ajbeach2/events{/privacy}", "received_events_url": "https://api.github.com/users/ajbeach2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490793, "node_id": "MDU6TGFiZWwzMDQ5MDc5Mw==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-13T00:58:25Z", "updated_at": "2020-08-13T16:40:32Z", "closed_at": "2020-08-13T07:57:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nI cannot import the DjangoModelFactory as described in the documentation. I am using factory_boy 3.0.0 and python 3.8.3:\r\n\r\n```\r\n->pip freeze | grep factory\r\nfactory-boy==3.0.0\r\n ->python --version\r\nPython 3.8.3\r\n```\r\n\r\n#### To Reproduce\r\nFrom the documentation, [https://factoryboy.readthedocs.io/en/3.0.0/orms.html](https://factoryboy.readthedocs.io/en/3.0.0/orms.html) I tried to create a class:\r\n```\r\nimport factory\r\nclass UserFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = 'myapp.User'  # Equivalent to ``model = myapp.models.User``\r\n        django_get_or_create = ('username',)\r\n```\r\n\r\nI get the following error:\r\n\r\n```\r\nAttributeError: module 'factory' has no attribute 'django\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/745", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/745/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/745/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/745/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/745", "id": 642393077, "node_id": "MDU6SXNzdWU2NDIzOTMwNzc=", "number": 745, "title": "Release minor version to address solved bugs", "user": {"login": "bcfurtado", "id": 1187535, "node_id": "MDQ6VXNlcjExODc1MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1187535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcfurtado", "html_url": "https://github.com/bcfurtado", "followers_url": "https://api.github.com/users/bcfurtado/followers", "following_url": "https://api.github.com/users/bcfurtado/following{/other_user}", "gists_url": "https://api.github.com/users/bcfurtado/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcfurtado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcfurtado/subscriptions", "organizations_url": "https://api.github.com/users/bcfurtado/orgs", "repos_url": "https://api.github.com/users/bcfurtado/repos", "events_url": "https://api.github.com/users/bcfurtado/events{/privacy}", "received_events_url": "https://api.github.com/users/bcfurtado/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/milestones/5", "html_url": "https://github.com/FactoryBoy/factory_boy/milestone/5", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/milestones/5/labels", "id": 1847624, "node_id": "MDk6TWlsZXN0b25lMTg0NzYyNA==", "number": 5, "title": "3.0", "description": "Major version bump due to removing deprecated stuff (Python 2, backward-compatibility shims, aliases and methods).", "creator": {"login": "jeffwidman", "id": 483314, "node_id": "MDQ6VXNlcjQ4MzMxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/483314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffwidman", "html_url": "https://github.com/jeffwidman", "followers_url": "https://api.github.com/users/jeffwidman/followers", "following_url": "https://api.github.com/users/jeffwidman/following{/other_user}", "gists_url": "https://api.github.com/users/jeffwidman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffwidman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffwidman/subscriptions", "organizations_url": "https://api.github.com/users/jeffwidman/orgs", "repos_url": "https://api.github.com/users/jeffwidman/repos", "events_url": "https://api.github.com/users/jeffwidman/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffwidman/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 7, "state": "closed", "created_at": "2016-06-24T18:49:29Z", "updated_at": "2020-08-12T21:41:21Z", "due_on": null, "closed_at": "2020-08-12T21:41:21Z"}, "comments": 5, "created_at": "2020-06-20T15:07:37Z", "updated_at": "2020-08-12T21:40:57Z", "closed_at": "2020-08-12T21:40:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\nHello, recently came across this issue https://github.com/FactoryBoy/factory_boy/issues/424 in a project that I'm working on and I noticed that was fixed last year by this PR https://github.com/FactoryBoy/factory_boy/pull/592 , but since then we haven't released yet.\r\n\r\n#### Proposed solution\r\nI see that we are in the middle of a major release that will address this and other recent fixed issues, but given [that we do not have a timeline](https://github.com/FactoryBoy/factory_boy/milestone/5) for the that, I would like to suggest a minor release that would release this bug fix (and potentially others).\r\n\r\nThanks for the great work! \ud83d\udcaa ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/743", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/743/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/743/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/743/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/743", "id": 640890489, "node_id": "MDU6SXNzdWU2NDA4OTA0ODk=", "number": 743, "title": "A query related to FactoryBoy usage - Is it suggested to use factory_boy to create python dataclass objects", "user": {"login": "vedavidhbudimuri", "id": 6457019, "node_id": "MDQ6VXNlcjY0NTcwMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6457019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vedavidhbudimuri", "html_url": "https://github.com/vedavidhbudimuri", "followers_url": "https://api.github.com/users/vedavidhbudimuri/followers", "following_url": "https://api.github.com/users/vedavidhbudimuri/following{/other_user}", "gists_url": "https://api.github.com/users/vedavidhbudimuri/gists{/gist_id}", "starred_url": "https://api.github.com/users/vedavidhbudimuri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vedavidhbudimuri/subscriptions", "organizations_url": "https://api.github.com/users/vedavidhbudimuri/orgs", "repos_url": "https://api.github.com/users/vedavidhbudimuri/repos", "events_url": "https://api.github.com/users/vedavidhbudimuri/events{/privacy}", "received_events_url": "https://api.github.com/users/vedavidhbudimuri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-18T04:07:33Z", "updated_at": "2020-06-19T09:17:42Z", "closed_at": "2020-06-19T09:17:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Creating fake DTO objects during the tests is becoming an overhead during development. I use DTOs to communicate data between different layers/classes in my application. As a result, I have to prepare too many data class objects to test and assert the correctness of the test cases. I'm thinking if using a factoryboy in such scenarios is the right way of using factory boy or not. \r\nKindly share your thoughts. \r\n\r\nThanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/741", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/741/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/741/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/741/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/741", "id": 639325413, "node_id": "MDU6SXNzdWU2MzkzMjU0MTM=", "number": 741, "title": "Bug in RelatedFactoryList docs", "user": {"login": "loren-jiang", "id": 24639810, "node_id": "MDQ6VXNlcjI0NjM5ODEw", "avatar_url": "https://avatars2.githubusercontent.com/u/24639810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loren-jiang", "html_url": "https://github.com/loren-jiang", "followers_url": "https://api.github.com/users/loren-jiang/followers", "following_url": "https://api.github.com/users/loren-jiang/following{/other_user}", "gists_url": "https://api.github.com/users/loren-jiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/loren-jiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loren-jiang/subscriptions", "organizations_url": "https://api.github.com/users/loren-jiang/orgs", "repos_url": "https://api.github.com/users/loren-jiang/repos", "events_url": "https://api.github.com/users/loren-jiang/events{/privacy}", "received_events_url": "https://api.github.com/users/loren-jiang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-16T02:40:22Z", "updated_at": "2020-06-25T20:48:03Z", "closed_at": "2020-06-25T20:48:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nIn the RelatedFactoryList docs (https://factoryboy.readthedocs.io/en/latest/reference.html?highlight=faker#relatedfactorylist), there's a small bug in note. \r\n\r\n`random.randint(0, 5)` should be `random.randint(0, 4)` to avoid index out of bounds. \r\n\r\nAlso, not sure why indexing into `LIST_SIZES` is even necessary.\r\n\r\n```LIST_SIZES = [1, 2, 3, 4, 5]\r\n\r\nclass FooFactory(factory.Factory):\r\n    class Meta:\r\n        model = Foo\r\n    # Generate a list of `factory` objects of random size, ranging from 1 -> 5\r\n    bar = factory.RelatedFactoryList(BarFactory,\r\n                                     size=lambda: LIST_SIZES[random.randint(0,5)])\r\n    # Each Foo object will have exactly 3 Bar objects generated for its foobar attribute.\r\n    foobar = factory.RelatedFactoryList(BarFactory, size=3)```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/736", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/736/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/736/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/736/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/736", "id": 623179452, "node_id": "MDU6SXNzdWU2MjMxNzk0NTI=", "number": 736, "title": "'Iterator' object is not callable", "user": {"login": "mazlum", "id": 5855630, "node_id": "MDQ6VXNlcjU4NTU2MzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5855630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mazlum", "html_url": "https://github.com/mazlum", "followers_url": "https://api.github.com/users/mazlum/followers", "following_url": "https://api.github.com/users/mazlum/following{/other_user}", "gists_url": "https://api.github.com/users/mazlum/gists{/gist_id}", "starred_url": "https://api.github.com/users/mazlum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mazlum/subscriptions", "organizations_url": "https://api.github.com/users/mazlum/orgs", "repos_url": "https://api.github.com/users/mazlum/repos", "events_url": "https://api.github.com/users/mazlum/events{/privacy}", "received_events_url": "https://api.github.com/users/mazlum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 327760582, "node_id": "MDU6TGFiZWwzMjc3NjA1ODI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Django", "name": "Django", "color": "bfdadc", "default": false, "description": null}, {"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-22T12:40:39Z", "updated_at": "2020-05-25T09:29:54Z", "closed_at": "2020-05-25T09:29:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "##### Model / Factory code\r\n```python\r\nclass TestFactory(DjangoModelFactory):\r\n    build = Iterator(EXAMPLE_LIST)\r\n```\r\n\r\n##### The issue\r\n*Model field name is \"build\". And if i try TestFactory.build(), factory_boy says ''Iterator' object is not callable' *\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/735", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/735/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/735/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/735/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/735", "id": 619558074, "node_id": "MDU6SXNzdWU2MTk1NTgwNzQ=", "number": 735, "title": "factory.Sequence is not incremented sequentially.", "user": {"login": "ranelpadon", "id": 4292088, "node_id": "MDQ6VXNlcjQyOTIwODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4292088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranelpadon", "html_url": "https://github.com/ranelpadon", "followers_url": "https://api.github.com/users/ranelpadon/followers", "following_url": "https://api.github.com/users/ranelpadon/following{/other_user}", "gists_url": "https://api.github.com/users/ranelpadon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranelpadon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranelpadon/subscriptions", "organizations_url": "https://api.github.com/users/ranelpadon/orgs", "repos_url": "https://api.github.com/users/ranelpadon/repos", "events_url": "https://api.github.com/users/ranelpadon/events{/privacy}", "received_events_url": "https://api.github.com/users/ranelpadon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-16T21:25:07Z", "updated_at": "2020-08-21T08:05:14Z", "closed_at": "2020-08-21T08:05:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "We're using version **2.8.1** for a long time and it's working smoothly, and decided recently to upgrade to latest version to make use of the improvements/fixes in random seeding/determinism in **2.11.0** at least.\r\n\r\nBut upon upgrading, we noticed that the `factory.Sequence` is behaving differently compared to the previous behavior.\r\n\r\nSimplified model/factory class:\r\n```python\r\nclass MyModel()\r\n    value = models.IntegerField()\r\n\r\nclass MyFactory():\r\n    value = factory.Sequence(lambda n: n)\r\n\r\n    class Meta:\r\n        model = MyModel\r\n```\r\n\r\n### Using the 2.8.1 version\r\n#### Output if the specific test method containing these lines is run:\r\n```python\r\nMyFactory().value  # 0\r\nMyFactory().value  # 1\r\nMyFactory().value  # 2\r\nMyFactory().value  # 3\r\nMyFactory().value  # 4\r\n```\r\n#### Output if the test method containing these lines is run as part of the suite:\r\n```python\r\nMyFactory().value  # 3\r\nMyFactory().value  # 4\r\nMyFactory().value  # 5\r\nMyFactory().value  # 6\r\nMyFactory().value  # 7\r\n```\r\n\r\n### Using the 2.9.0 or later versions\r\n\r\n#### Output if the specific test method containing these lines is run:\r\n```python\r\nMyFactory().value  # 0\r\nMyFactory().value  # 33\r\nMyFactory().value  # 66\r\nMyFactory().value  # 99\r\nMyFactory().value  # 132\r\n```\r\n\r\n#### Output if the test method containing these lines is run as part of the suite:\r\n```python\r\nMyFactory().value  # 47\r\nMyFactory().value  # 80\r\nMyFactory().value  # 113\r\nMyFactory().value  # 146\r\nMyFactory().value  # 179\r\n```\r\n\r\nHence, seems that the upgraded version increments by `33` instead of `1` for some reason. Are there code changes since **2.9.0** that could affect the sequencing? Note that there are no other setup/code changes except the `factory-boy` package's version. This is the same behavior even when just invoking the `MyFactory().value` manually and in succession in Django shell. Wondering also if other devs have similar observation since it seems easy to replicate. Thanks :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/733", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/733/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/733/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/733/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/733", "id": 611497252, "node_id": "MDU6SXNzdWU2MTE0OTcyNTI=", "number": 733, "title": "Factory creates objects in real db instead of test_db", "user": {"login": "seyhak", "id": 25822349, "node_id": "MDQ6VXNlcjI1ODIyMzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/25822349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seyhak", "html_url": "https://github.com/seyhak", "followers_url": "https://api.github.com/users/seyhak/followers", "following_url": "https://api.github.com/users/seyhak/following{/other_user}", "gists_url": "https://api.github.com/users/seyhak/gists{/gist_id}", "starred_url": "https://api.github.com/users/seyhak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seyhak/subscriptions", "organizations_url": "https://api.github.com/users/seyhak/orgs", "repos_url": "https://api.github.com/users/seyhak/repos", "events_url": "https://api.github.com/users/seyhak/events{/privacy}", "received_events_url": "https://api.github.com/users/seyhak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-03T20:14:34Z", "updated_at": "2020-05-03T20:37:38Z", "closed_at": "2020-05-03T20:36:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nI have noticed that factory I made creates objects in main DB during tests. Test db is ok.\r\nDjango==3.0.5\r\nfactory-boy==2.12.0\r\n\r\n#### To Reproduce\r\n\r\n setUp()  run in test creates real objects in main db.\r\nThe rest of objects created without factory in tests are not being created in main db.\r\n##### Model / Factory code\r\n\r\n```class SystemPriceTableFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = SystemPriceTable\r\n    name = factory.Sequence(\r\n        lambda n: f'table{n}'\r\n    )\r\n```\r\n\r\n##### The issue\r\n\r\n````\r\nclass TestUploadPriceTableForm(TestCase):\r\n    def setUp(self):\r\n        self.table = SystemPriceTableFactory()\r\n````\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/730", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/730/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/730/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/730/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/730", "id": 606721229, "node_id": "MDU6SXNzdWU2MDY3MjEyMjk=", "number": 730, "title": "Fixed Foreignkey is not working", "user": {"login": "nikolas310", "id": 15107827, "node_id": "MDQ6VXNlcjE1MTA3ODI3", "avatar_url": "https://avatars2.githubusercontent.com/u/15107827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikolas310", "html_url": "https://github.com/nikolas310", "followers_url": "https://api.github.com/users/nikolas310/followers", "following_url": "https://api.github.com/users/nikolas310/following{/other_user}", "gists_url": "https://api.github.com/users/nikolas310/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikolas310/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikolas310/subscriptions", "organizations_url": "https://api.github.com/users/nikolas310/orgs", "repos_url": "https://api.github.com/users/nikolas310/repos", "events_url": "https://api.github.com/users/nikolas310/events{/privacy}", "received_events_url": "https://api.github.com/users/nikolas310/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-25T08:38:44Z", "updated_at": "2020-04-28T14:48:35Z", "closed_at": "2020-04-25T09:15:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Model is:\r\n```\r\nclass School(models.Model):\r\n    name = models.CharField(max_length=100, unique=True)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\nclass Student(models.Model):\r\n    name = models.CharField(max_length=100, unique=True)\r\n    school= models.ForeignKey(School, on_delete=models.CASCADE)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n```\r\n\r\nModelFactory is:\r\n\r\n```\r\nclass SchoolFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = School\r\n\r\nclass StudentFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = Student\r\n    name = factory.Faker('name')\r\n    school= factory.SubFactory(SchoolFactory,\r\n        name=factory.SelfAttribute('A School'))\r\n```\r\n\r\nUnique contrains failed. How to fix the issue", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/729", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/729/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/729/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/729/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/729", "id": 606542505, "node_id": "MDU6SXNzdWU2MDY1NDI1MDU=", "number": 729, "title": "Allow declarations in Faker kwargs", "user": {"login": "maxrothman", "id": 2607086, "node_id": "MDQ6VXNlcjI2MDcwODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2607086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxrothman", "html_url": "https://github.com/maxrothman", "followers_url": "https://api.github.com/users/maxrothman/followers", "following_url": "https://api.github.com/users/maxrothman/following{/other_user}", "gists_url": "https://api.github.com/users/maxrothman/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxrothman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxrothman/subscriptions", "organizations_url": "https://api.github.com/users/maxrothman/orgs", "repos_url": "https://api.github.com/users/maxrothman/repos", "events_url": "https://api.github.com/users/maxrothman/events{/privacy}", "received_events_url": "https://api.github.com/users/maxrothman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490619, "node_id": "MDU6TGFiZWwzMDQ5MDYxOQ==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Feature", "name": "Feature", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-24T19:45:49Z", "updated_at": "2020-08-21T08:09:07Z", "closed_at": "2020-08-21T08:09:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\nTake this model for example:\r\n\r\n```python\r\nclass User:\r\n    address\r\n    city\r\n    state\r\n    zip\r\n```\r\n\r\nA first approach to building a factory would look like this:\r\n\r\n```python\r\nclass User(Factory):\r\n    address = Faker('street_address')\r\n    city = Faker('city')\r\n    state = Faker('state')\r\n    zip = Faker('zipcode')\r\n```\r\n\r\nBut this could cause spurious bugs since the zip and the state might not match. Instead, one might want to take this approach:\r\n\r\n```python\r\nclass User(Factory):\r\n    address1 = Faker('street_address')\r\n    city = Faker('city')\r\n    state = Faker('state')\r\n    zip = Faker('zipcode_in_state', state_abbr=SelfAttribute('state'))\r\n```\r\n\r\nHowever this fails with the following error:\r\n```\r\n/usr/local/lib/python3.6/dist-packages/faker/providers/address/en_US/__init__.py:427: in zipcode_in_state\r\n    return self.postcode_in_state(state_abbr)\r\n\r\nException: State Abbreviation not found in list\r\n```\r\n\r\nAfter doing some digging, it appears that the `SelfAttribute` is not being evaluated before being passed to Faker.\r\n\r\n#### Proposed solution\r\nDeclarations should be evaluated before being passed to faker, the same way they are before being passed to subfactories.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/705", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/705/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/705/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/705/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/705", "id": 571118377, "node_id": "MDU6SXNzdWU1NzExMTgzNzc=", "number": 705, "title": "Fix simple typo: charactes -> characters", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-26T07:18:08Z", "updated_at": "2020-02-26T10:37:20Z", "closed_at": "2020-02-26T10:36:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue Type\n\n[x] Bug (Typo)\n\n# Steps to Replicate\n\n1. Examine docs/fuzzy.rst.\n2. Search for `charactes`.\n\n# Expected Behaviour\n\n1. Should read `characters`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/704", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/704/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/704/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/704/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/704", "id": 568177162, "node_id": "MDU6SXNzdWU1NjgxNzcxNjI=", "number": 704, "title": "Latest Doc version is always 0.1.0", "user": {"login": "tonial", "id": 7632730, "node_id": "MDQ6VXNlcjc2MzI3MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7632730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonial", "html_url": "https://github.com/tonial", "followers_url": "https://api.github.com/users/tonial/followers", "following_url": "https://api.github.com/users/tonial/following{/other_user}", "gists_url": "https://api.github.com/users/tonial/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonial/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonial/subscriptions", "organizations_url": "https://api.github.com/users/tonial/orgs", "repos_url": "https://api.github.com/users/tonial/repos", "events_url": "https://api.github.com/users/tonial/events{/privacy}", "received_events_url": "https://api.github.com/users/tonial/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490793, "node_id": "MDU6TGFiZWwzMDQ5MDc5Mw==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}, {"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "francoisfreitag", "id": 2758243, "node_id": "MDQ6VXNlcjI3NTgyNDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2758243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/francoisfreitag", "html_url": "https://github.com/francoisfreitag", "followers_url": "https://api.github.com/users/francoisfreitag/followers", "following_url": "https://api.github.com/users/francoisfreitag/following{/other_user}", "gists_url": "https://api.github.com/users/francoisfreitag/gists{/gist_id}", "starred_url": "https://api.github.com/users/francoisfreitag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/francoisfreitag/subscriptions", "organizations_url": "https://api.github.com/users/francoisfreitag/orgs", "repos_url": "https://api.github.com/users/francoisfreitag/repos", "events_url": "https://api.github.com/users/francoisfreitag/events{/privacy}", "received_events_url": "https://api.github.com/users/francoisfreitag/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "francoisfreitag", "id": 2758243, "node_id": "MDQ6VXNlcjI3NTgyNDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2758243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/francoisfreitag", "html_url": "https://github.com/francoisfreitag", "followers_url": "https://api.github.com/users/francoisfreitag/followers", "following_url": "https://api.github.com/users/francoisfreitag/following{/other_user}", "gists_url": "https://api.github.com/users/francoisfreitag/gists{/gist_id}", "starred_url": "https://api.github.com/users/francoisfreitag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/francoisfreitag/subscriptions", "organizations_url": "https://api.github.com/users/francoisfreitag/orgs", "repos_url": "https://api.github.com/users/francoisfreitag/repos", "events_url": "https://api.github.com/users/francoisfreitag/events{/privacy}", "received_events_url": "https://api.github.com/users/francoisfreitag/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-02-20T09:51:27Z", "updated_at": "2020-03-09T17:39:27Z", "closed_at": "2020-03-09T17:39:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### Description\r\nThe latest doc version is 0.1.0 : see here https://factoryboy.readthedocs.io/_/downloads/en/latest/pdf/ \r\n\r\nThis is probably a consequence of https://github.com/FactoryBoy/factory_boy/commit/93bbd0317092c8e804d039ed60413f4b75fd7e77\r\nI guess we only need to fix this piece of code : https://github.com/FactoryBoy/factory_boy/blob/79161b0409842b5fc8a43d5844669f233403e14c/docs/conf.py#L63-L73\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/694", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/694/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/694/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/694/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/694", "id": 562014539, "node_id": "MDU6SXNzdWU1NjIwMTQ1Mzk=", "number": 694, "title": "factory.Faker('uuid4') returns string, rather than UUID object (which, depending on project, returns Django ORM)", "user": {"login": "HoshiYamazaki", "id": 21007545, "node_id": "MDQ6VXNlcjIxMDA3NTQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/21007545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HoshiYamazaki", "html_url": "https://github.com/HoshiYamazaki", "followers_url": "https://api.github.com/users/HoshiYamazaki/followers", "following_url": "https://api.github.com/users/HoshiYamazaki/following{/other_user}", "gists_url": "https://api.github.com/users/HoshiYamazaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/HoshiYamazaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HoshiYamazaki/subscriptions", "organizations_url": "https://api.github.com/users/HoshiYamazaki/orgs", "repos_url": "https://api.github.com/users/HoshiYamazaki/repos", "events_url": "https://api.github.com/users/HoshiYamazaki/events{/privacy}", "received_events_url": "https://api.github.com/users/HoshiYamazaki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-08T12:45:39Z", "updated_at": "2020-02-09T10:53:24Z", "closed_at": "2020-02-09T10:53:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\nAs title says.\r\n\r\n#### Proposed solution\r\nProvide solution (`uuid4-object` ?) to get away of that issue. I tried to generate `uuid` with `uuid.uuid4`, but it seems be not random, or convert `factory.Faker(uuid4)` using `uuid.UUID(str(factory.Faker(uuid4)))`, but this causes error in UUID library (`string badly formed` if I remember correctly).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/693", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/693/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/693/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/693/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/693", "id": 560346920, "node_id": "MDU6SXNzdWU1NjAzNDY5MjA=", "number": 693, "title": "How to define abstract factory and pass to it as model empty object?", "user": {"login": "HoshiYamazaki", "id": 21007545, "node_id": "MDQ6VXNlcjIxMDA3NTQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/21007545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HoshiYamazaki", "html_url": "https://github.com/HoshiYamazaki", "followers_url": "https://api.github.com/users/HoshiYamazaki/followers", "following_url": "https://api.github.com/users/HoshiYamazaki/following{/other_user}", "gists_url": "https://api.github.com/users/HoshiYamazaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/HoshiYamazaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HoshiYamazaki/subscriptions", "organizations_url": "https://api.github.com/users/HoshiYamazaki/orgs", "repos_url": "https://api.github.com/users/HoshiYamazaki/repos", "events_url": "https://api.github.com/users/HoshiYamazaki/events{/privacy}", "received_events_url": "https://api.github.com/users/HoshiYamazaki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-05T12:41:46Z", "updated_at": "2020-02-06T09:22:58Z", "closed_at": "2020-02-06T09:22:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/FactoryBoy/factory_boy/issues/46\r\n\r\nWhat I want do:\r\nI need to test functions which uses objects. So I want pass abstract factoryboy objects to pytest - is that possible?\r\n\r\nI was trying to overwrite `factory.Factory`:\r\n```\r\nclass ObjectFactory(factory.Factory):\r\n\r\n    class Meta:\r\n        abstract = True\r\n        model = mock.Mock()\r\n\r\n    @classmethod\r\n    def _create(cls, target_class, *args, **kwargs):\r\n        return target_class(*args, **kwargs)\r\n```\r\n\r\nAnd I tried to use `mock.Mock`, `mock.Mock()` and `object` in model - since when I write test I \"define\" abstract virtual objects using Mock because I can freely create attributes in them.\r\n\r\nI don't have idea how I could do that. In issue I linked somebody is using `NamedTuple` but that's not how it should work, since it provides duplicated fields, twice and mess in code.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/691", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/691/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/691/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/691/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/691", "id": 559748765, "node_id": "MDU6SXNzdWU1NTk3NDg3NjU=", "number": 691, "title": "Generate Factory with extra non-model-fields (using Django)", "user": {"login": "estyxx", "id": 28976199, "node_id": "MDQ6VXNlcjI4OTc2MTk5", "avatar_url": "https://avatars3.githubusercontent.com/u/28976199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estyxx", "html_url": "https://github.com/estyxx", "followers_url": "https://api.github.com/users/estyxx/followers", "following_url": "https://api.github.com/users/estyxx/following{/other_user}", "gists_url": "https://api.github.com/users/estyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/estyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estyxx/subscriptions", "organizations_url": "https://api.github.com/users/estyxx/orgs", "repos_url": "https://api.github.com/users/estyxx/repos", "events_url": "https://api.github.com/users/estyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/estyxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-04T14:17:30Z", "updated_at": "2020-02-10T12:14:52Z", "closed_at": "2020-02-10T12:14:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### The problem\r\nI need to have a Factory with some extra fields that are not in the model. I know that there is \"exclude\" but it's not useful for this particular problem.\r\n\r\nI'm using Django Rest Framework, I have a Serializer who takes some extra-data that are not in the Model, only to call an external API, so I would like to have this extra-data generated by the factory ready to use, so I can use after in the test.\r\n\r\nI know there is the `exclude` option but it's not the solution to this problem, because it removes the extra-attribute forever, they could be only useful if you have to generate others random-field (like it's explained [in the documentation](https://factoryboy.readthedocs.io/en/latest/reference.html#factory.FactoryOptions.exclude).\r\n\r\n\r\n#### Proposed solution\r\nThe behaviour that I would like to have is, exclude them from the creation (because they aren't defined in the model), but after putting back these attributes as instance-attribute on the instance just created. \r\n\r\nSo locally I customize my Factory to remove the extra-fields, create the instance e reput in the instance, but I would like to reuse this logic. \r\n\r\nCloud be useful to integrate this behaviour in FactoryBoy directly (like another FactoryOptions)?\r\nhave you ever encountered a similar problem? Is there another way to solve it? \r\n\r\nI did something like: \r\n\r\n```\r\n\r\nclass MyModel(models.Model):\r\n\ttitle = models.CharField(_(\"title\"), max_length=300)\r\n\r\n\r\n@register\r\nclass MyModelFactory(DjangoModelFactory):value=1)\r\n    title = factory.Faker(\"sentence\", nb_words=4)\r\n\r\n    # EXTRA-MODEL-FIELDS\r\n    author = factory.Faker(\"name\")\r\n\r\n    class Meta:\r\n        model = MyModel\r\n\r\n    non_models_fields = (\r\n        \"author\",\r\n    )\r\n\r\n    @classmethod\r\n    def model_kwargs(cls, kwargs):\r\n        # Exclude non-model field from creating the instance, but I need\r\n        # some random values after to pass to the post API\r\n        return {k: v for k, v in kwargs.items() if k not in cls.non_models_fields}\r\n\r\n    @classmethod\r\n    def fill_non_model_args(cls, instance, kwargs):\r\n        for arg in cls.non_models_fields:\r\n            if arg in kwargs:\r\n                setattr(instance, arg, kwargs[arg])\r\n            else:\r\n                setattr(instance, arg, None)\r\n        return instance\r\n\r\n    @classmethod\r\n    def _build(cls, model_class, *args, **kwargs):\r\n\r\n        model_kwargs = cls.model_kwargs(kwargs)\r\n        instance = model_class(*args, **model_kwargs)\r\n\r\n        return cls.fill_non_model_args(instance, kwargs)\r\n\r\n    @classmethod\r\n    def _create(cls, model_class, *args, **kwargs):\r\n\r\n        model_kwargs = cls.model_kwargs(kwargs)\r\n        if cls._meta.django_get_or_create:\r\n            return cls._get_or_create(model_class, *args, **model_kwargs)\r\n\r\n        manager = cls._get_manager(model_class)\r\n        instance = manager.create(*args, **model_kwargs)\r\n\r\n        return cls.fill_non_model_args(instance, kwargs)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/688", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/688/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/688/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/688/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/688", "id": 554839243, "node_id": "MDU6SXNzdWU1NTQ4MzkyNDM=", "number": 688, "title": "need revise docs Many-to-many for SQLAlchemy", "user": {"login": "kobayashi", "id": 8712070, "node_id": "MDQ6VXNlcjg3MTIwNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8712070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kobayashi", "html_url": "https://github.com/kobayashi", "followers_url": "https://api.github.com/users/kobayashi/followers", "following_url": "https://api.github.com/users/kobayashi/following{/other_user}", "gists_url": "https://api.github.com/users/kobayashi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kobayashi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kobayashi/subscriptions", "organizations_url": "https://api.github.com/users/kobayashi/orgs", "repos_url": "https://api.github.com/users/kobayashi/repos", "events_url": "https://api.github.com/users/kobayashi/events{/privacy}", "received_events_url": "https://api.github.com/users/kobayashi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}, {"id": 327760544, "node_id": "MDU6TGFiZWwzMjc3NjA1NDQ=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/SQLAlchemy", "name": "SQLAlchemy", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-24T16:40:01Z", "updated_at": "2020-01-28T16:04:51Z", "closed_at": "2020-01-27T10:13:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### The problem\r\nMany-to-Many documentation is not work for SQLAlchemy. \r\nThis is described in #121 \r\n#### Proposed solution\r\n[Simple Many-to-many relationship](https://factoryboy.readthedocs.io/en/latest/recipes.html#simple-many-to-many-relationship) in the docs should not use add but append.\r\n\r\n#### Extra notes\r\nNone", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/685", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/685/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/685/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/685/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/685", "id": 550866195, "node_id": "MDU6SXNzdWU1NTA4NjYxOTU=", "number": 685, "title": "RelatedFactory factory_related_name argument docs", "user": {"login": "psmolak", "id": 10662415, "node_id": "MDQ6VXNlcjEwNjYyNDE1", "avatar_url": "https://avatars1.githubusercontent.com/u/10662415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psmolak", "html_url": "https://github.com/psmolak", "followers_url": "https://api.github.com/users/psmolak/followers", "following_url": "https://api.github.com/users/psmolak/following{/other_user}", "gists_url": "https://api.github.com/users/psmolak/gists{/gist_id}", "starred_url": "https://api.github.com/users/psmolak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psmolak/subscriptions", "organizations_url": "https://api.github.com/users/psmolak/orgs", "repos_url": "https://api.github.com/users/psmolak/repos", "events_url": "https://api.github.com/users/psmolak/events{/privacy}", "received_events_url": "https://api.github.com/users/psmolak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-16T15:05:37Z", "updated_at": "2020-06-24T12:47:09Z", "closed_at": "2020-06-24T12:47:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nGiven https://factoryboy.readthedocs.io/en/2.12.0/reference.html#factory.RelatedFactory\r\nthe `name` parameter https://factoryboy.readthedocs.io/en/2.12.0/reference.html#factory.RelatedFactory.name shouldn't be called just like the positional parameter `factory_related_name`?\r\n\r\nIf that's not the case the documentation isn't clear for me about what the `name` argument is responsible for.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/681", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/681/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/681/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/681/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/681", "id": 545837886, "node_id": "MDU6SXNzdWU1NDU4Mzc4ODY=", "number": 681, "title": "Provide some basic Django Auth Factories (User, Group, Permission...)", "user": {"login": "estyxx", "id": 28976199, "node_id": "MDQ6VXNlcjI4OTc2MTk5", "avatar_url": "https://avatars3.githubusercontent.com/u/28976199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estyxx", "html_url": "https://github.com/estyxx", "followers_url": "https://api.github.com/users/estyxx/followers", "following_url": "https://api.github.com/users/estyxx/following{/other_user}", "gists_url": "https://api.github.com/users/estyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/estyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estyxx/subscriptions", "organizations_url": "https://api.github.com/users/estyxx/orgs", "repos_url": "https://api.github.com/users/estyxx/repos", "events_url": "https://api.github.com/users/estyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/estyxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-06T17:12:16Z", "updated_at": "2020-02-04T14:21:06Z", "closed_at": "2020-02-04T14:21:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### The problem\r\nAny project who uses `django.contrib.auth` and/or `django.contrib.contenttypes` now has to create the factories for User, Group, Permission, ContentType for using them in his tests, right?\r\nWhy we do not provide related Factories for them as they are very basic models... \r\n\r\n#### Proposed solution\r\nSomething similar to:\r\n```\r\nimport factory\r\nimport factory.fuzzy\r\nfrom django.contrib.auth import get_user_model\r\nfrom django.contrib.auth.models import Group, Permission\r\nfrom django.contrib.contenttypes.models import ContentType\r\nfrom factory.django import DjangoModelFactory\r\n\r\nclass ContentTypeFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = ContentType\r\n        django_get_or_create = ('app_label', 'model')\r\n\r\n    app_label = factory.Faker(\"word\")\r\n    model = factory.Faker(\"word\")\r\n\r\n\r\nclass PermissionFactory(DjangoModelFactory):\r\n    class Meta:\r\n        model = Permission\r\n        django_get_or_create = (\"name\",)\r\n\r\n    name = factory.Faker(\"name\")\r\n    content_type = factory.SubFactory(ContentTypeFactory)\r\n\r\n\r\nclass GroupFactory(DjangoModelFactory):\r\n    class Meta:\r\n        model = Group\r\n        django_get_or_create = (\"name\",)\r\n\r\n    name = factory.Faker(\"name\")\r\n\r\n\r\nclass UserFactory(DjangoModelFactory):\r\n\r\n    username = factory.Faker(\"user_name\")\r\n    email = factory.Faker(\"email\")\r\n    password = factory.Faker(\"password\")\r\n\r\n    is_active = True\r\n    is_staff = False\r\n    is_superuser = False\r\n\r\n    class Meta:\r\n        model = get_user_model()\r\n        django_get_or_create = (\"username\",)\r\n\r\n    @classmethod\r\n    def _create(cls, model_class, *args, **kwargs):\r\n        \"\"\"Override the default ``_create`` with our custom call.\"\"\"\r\n        manager = cls._get_manager(model_class)\r\n        # Some support to generate auth users.... \r\n        if kwargs.get(\"is_superuser\"):\r\n            return manager.create_superuser(*args, **kwargs)\r\n        return manager.create_user(*args, **kwargs)\r\n\r\n    @factory.post_generation\r\n    def groups(self, create, extracted, **kwargs):\r\n        if not create:\r\n            # Simple build, do nothing.\r\n            return\r\n\r\n        if extracted:\r\n            # A list of groups were passed in, use them\r\n            for group in extracted:\r\n                self.groups.add(Group.objects.get_or_create(name=group)[0])\r\n\r\n    @factory.post_generation\r\n    def user_permissions(self, create, extracted, **kwargs):\r\n\r\n        if not create:\r\n            # Simple build, do nothing.\r\n            return\r\n\r\n        if extracted:\r\n            # A list of tuple (ModelClass, \"my_permission\")\r\n            for model, permission in extracted:\r\n                content_type = ContentType.objects.get_for_model(model)\r\n                self.user_permissions.add(\r\n                    Permission.objects.get_or_create(\r\n                        codename=permission, content_type=content_type\r\n                    )[0]\r\n                )\r\n```\r\n#### Extra notes\r\nPlease, notice this is only a draft... I have to refine them :) \r\nIf could be interesting I can set up a PR draft :) \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/654", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/654/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/654/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/654/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/654", "id": 508863729, "node_id": "MDU6SXNzdWU1MDg4NjM3Mjk=", "number": 654, "title": "Custom User factory fails when using a CustomUserManager in Django 2", "user": {"login": "blairg23", "id": 6225764, "node_id": "MDQ6VXNlcjYyMjU3NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6225764?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blairg23", "html_url": "https://github.com/blairg23", "followers_url": "https://api.github.com/users/blairg23/followers", "following_url": "https://api.github.com/users/blairg23/following{/other_user}", "gists_url": "https://api.github.com/users/blairg23/gists{/gist_id}", "starred_url": "https://api.github.com/users/blairg23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blairg23/subscriptions", "organizations_url": "https://api.github.com/users/blairg23/orgs", "repos_url": "https://api.github.com/users/blairg23/repos", "events_url": "https://api.github.com/users/blairg23/events{/privacy}", "received_events_url": "https://api.github.com/users/blairg23/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-18T05:33:23Z", "updated_at": "2019-10-25T06:56:09Z", "closed_at": "2019-10-25T06:53:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nTrying to use a factory to create a user instance for a user model that extends `AbstractUser` and implements `CustomUserManager` results in a `TypeError`.\r\n\r\n#### To Reproduce\r\n1. Implement a `CustomUserManager` in the way recommended here for a custom `User` model that extends the `AbstractUser` base class and doesn't override the `username` field. Add a field called `id`. https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#django.contrib.auth.models.CustomUserManager\r\n2. Create a factory for that `User` model and write a `@classmethod` as suggested in the FactoryBoy documentation: https://factoryboy.readthedocs.io/en/latest/recipes.html#custom-manager-methods\r\n3. Try to create a new `User` using the `UserFactory` you just created.\r\n\r\n##### Model / Factory code\r\n```python\r\n# Factories\r\nclass CompanyToProfileFactory(factory.DjangoModelFactory):\r\n    \"\"\"Factory for `client.CompanyToProfile` Django model.\"\"\"\r\n    class Meta:\r\n        model = models.CompanyToProfile\r\n\r\n    company = factory.SubFactory(CompanyFactory)\r\n    profile = factory.SubFactory(ProfileFactory)\r\n    access = factory.SubFactory(AccessFactory)\r\n    created = factory.Faker(\"past_datetime\", tzinfo=pytz.UTC)\r\n    updated = factory.Faker(\"past_datetime\", tzinfo=pytz.UTC)\r\n\r\nclass ProfileFactory(factory.DjangoModelFactory):\r\n    \"\"\"Factory for `personal.Profile` Django model.\"\"\"\r\n    class Meta:\r\n        model = models.Profile\r\n\r\n    class Params:\r\n        superuser = factory.Trait(is_admin=True, is_superuser=True, is_staff=True)\r\n\r\n    id = factory.Faker(\"uuid4\")\r\n    title = factory.SubFactory(TitleFactory)\r\n    initials = factory.Faker(\"word\")\r\n    date_of_birth = factory.Faker(\"past_date\")\r\n    email = factory.Faker(\"email\")\r\n    gender = factory.SubFactory(GenderFactory)\r\n    ethnicity = factory.SubFactory(EthnicityFactory)\r\n    phone_number = factory.Faker(\"phone_number\")\r\n    mobile_number = factory.Faker(\"phone_number\")\r\n    profile_type = factory.SubFactory(ProfileTypeFactory)\r\n    created = factory.Faker(\"past_datetime\", tzinfo=pytz.UTC)\r\n    updated = factory.Faker(\"past_datetime\", tzinfo=pytz.UTC)\r\n\r\n    @classmethod\r\n    def _create(cls, model_class, *args, **kwargs):\r\n        \"\"\"Override the default ``_create`` with our custom call.\"\"\"\r\n        manager = cls._get_manager(model_class)\r\n        # The default would use ``manager.create(*args, **kwargs)``\r\n        return manager.create_user(*args, **kwargs)\r\n\r\n# model and manager\r\nclass ProfileManager(BaseUserManager):\r\n    def create_user(self, username='', email='', password=None):\r\n        \"\"\"\r\n        Creates and saves a User with the given email, date of\r\n        birth and password.\r\n        \"\"\"\r\n        if not email:\r\n            raise ValueError('Users must have an email address')\r\n        try:\r\n            email = validate_email(email)\r\n        except ValidationError:\r\n            raise ValueError('Invalid email address')\r\n        user = self.model(\r\n            username=username,\r\n            email=self.normalize_email(email),\r\n        )\r\n\r\n        user.save(using=self._db)\r\n        user.set_password(password)\r\n        user.save(using=self._db)\r\n        return user\r\n\r\n    def create_superuser(self, username='', email='', password=''):\r\n        \"\"\"\r\n        Creates and saves a superuser with the given email, date of\r\n        birth and password.\r\n        \"\"\"\r\n        if not password:\r\n            raise ValueError('SuperUser must have password')\r\n        user = self.create_user(\r\n            username=username,\r\n            email=email,\r\n            password=password\r\n        )\r\n        user.is_admin = True\r\n        user.is_superuser = True\r\n        user.is_staff = True\r\n        user.email = email\r\n        user.save(using=self._db)\r\n        return user\r\n\r\n\r\nclass Profile(AbstractUser):\r\n    \"\"\"Basic information about a person that uses the system.\"\"\"\r\n    objects = ProfileManager()\r\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\r\n    # slug = AutoSlugField(populate_from=['first_name', 'initials', 'last_name', 'date_of_birth'])\r\n    title = models.ForeignKey(Title, null=True, on_delete=models.DO_NOTHING)\r\n    # first_name\r\n    initials = models.CharField(max_length=20, null=True, blank=True, default=None)\r\n    # last_name\r\n    date_of_birth = models.DateField(null=True)\r\n    email = models.EmailField(_('email address'), blank=True, unique=True)\r\n    gender = models.ForeignKey(Gender, null=True, on_delete=None)\r\n    ethnicity = models.ForeignKey(Ethnicity, null=True, on_delete=None)\r\n    phone_number = models.CharField(max_length=15, null=True, blank=True)\r\n    mobile_number = models.CharField(max_length=15, null=True, blank=True)\r\n    # profile type\r\n    profile_type = models.ForeignKey(ProfileType, null=True, default=None, on_delete=SET_NULL)\r\n    # Administrative Fields\r\n    created = models.DateTimeField(auto_now_add=True)\r\n    updated = models.DateTimeField(auto_now=True)\r\n\r\n    class Meta:\r\n        ordering = ['last_name']\r\n        indexes = [\r\n            models.Index(fields=['phone_number']),\r\n            models.Index(fields=['mobile_number']),\r\n            models.Index(fields=['email']),\r\n            models.Index(fields=['first_name', 'last_name']),\r\n        ]\r\n\r\nclass CompanyToProfile(models.Model):\r\n    \"\"\"Relationship of a user to the company\"\"\"\r\n    company = models.ForeignKey(Company, on_delete=CASCADE)\r\n    profile = models.ForeignKey(Profile, on_delete=CASCADE)\r\n    access = models.ForeignKey(Access, null=True, default=None, on_delete=CASCADE)\r\n    # Administrative Fields\r\n    created = models.DateTimeField(auto_now_add=True)\r\n    updated = models.DateTimeField(auto_now=True)\r\n\r\n    def __str__(self):\r\n        return f'{self.profile.get_full_name()} - {self.access.access} - {self.company.company}'\r\n\r\n```\r\n\r\n##### The issue\r\nTrying to create an object using a factory that relates in any way to the custom `User` factory (in this case `ProfileFactory` which is a `SubFactory` of `CompanyToProfileFactory` (see code below) will cause a `TypeError` (see error below)\r\n\r\n```python\r\n# code that causes exception:\r\nclass CompanyToProfileTestCase(TestCase):\r\n    \"\"\"Tests for `client.CompanyToProfile` Django model.\"\"\"\r\n\r\n    def setUp(self):\r\n        self.company_to_profile = CompanyToProfileFactory()\r\n\r\n# error from running pytest in CLI:\r\n    @classmethod\r\n    def _create(cls, model_class, *args, **kwargs):\r\n        \"\"\"Override the default ``_create`` with our custom call.\"\"\"\r\n        manager = cls._get_manager(model_class)\r\n        # The default would use ``manager.create(*args, **kwargs)``\r\n>       return manager.create_user(*args, **kwargs)\r\nE       TypeError: create_user() got an unexpected keyword argument 'id'\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/648", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/648/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/648/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/648/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/648", "id": 487928244, "node_id": "MDU6SXNzdWU0ODc5MjgyNDQ=", "number": 648, "title": "Different options for objects created by RelatedFactoryList", "user": {"login": "ibot3", "id": 8113443, "node_id": "MDQ6VXNlcjgxMTM0NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8113443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibot3", "html_url": "https://github.com/ibot3", "followers_url": "https://api.github.com/users/ibot3/followers", "following_url": "https://api.github.com/users/ibot3/following{/other_user}", "gists_url": "https://api.github.com/users/ibot3/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibot3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibot3/subscriptions", "organizations_url": "https://api.github.com/users/ibot3/orgs", "repos_url": "https://api.github.com/users/ibot3/repos", "events_url": "https://api.github.com/users/ibot3/events{/privacy}", "received_events_url": "https://api.github.com/users/ibot3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-01T20:33:45Z", "updated_at": "2019-09-03T09:57:53Z", "closed_at": "2019-09-03T09:57:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be helpful if it would be possible to pass different options to the objects that will be created with `RelatedFactoryList`.\r\n\r\nExample (a one-to-many relationship from `Foo` to `Bar`):\r\n```\r\nclass FooFactory(BaseFactory):\r\n    class Meta:\r\n        model = Foo\r\n\r\n    bar = None\r\n    attr = 0\r\n\r\nclass BarFactory(BaseFactory):\r\n    class Meta:\r\n        model = Bar\r\n\r\n    foos = RelatedFactoryList(FooFactory,\r\n                              factory_related_name='bar',\r\n                              size=2,\r\n                              attr=(5, -5))\r\n\r\n```\r\nSo that `BarFactory` creates two instances of `Foo`; One with `attr = 5` and one with `attr = -5`.\r\n\r\nThis is currently not possible or am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/645", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/645/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/645/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/645/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/645", "id": 486336524, "node_id": "MDU6SXNzdWU0ODYzMzY1MjQ=", "number": 645, "title": "How to avoid Faker('domain_name') having the same domain twice in a row ?", "user": {"login": "stuaxo", "id": 179677, "node_id": "MDQ6VXNlcjE3OTY3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/179677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stuaxo", "html_url": "https://github.com/stuaxo", "followers_url": "https://api.github.com/users/stuaxo/followers", "following_url": "https://api.github.com/users/stuaxo/following{/other_user}", "gists_url": "https://api.github.com/users/stuaxo/gists{/gist_id}", "starred_url": "https://api.github.com/users/stuaxo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stuaxo/subscriptions", "organizations_url": "https://api.github.com/users/stuaxo/orgs", "repos_url": "https://api.github.com/users/stuaxo/repos", "events_url": "https://api.github.com/users/stuaxo/events{/privacy}", "received_events_url": "https://api.github.com/users/stuaxo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-28T11:58:54Z", "updated_at": "2019-09-26T13:47:14Z", "closed_at": "2019-08-29T11:20:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use factory.Faker(\"domain_name\") in my factory, is there any way to stop it coming up with the same domain twice ?\r\n\r\nI got a unique key error after calling my factory twice:\r\n```\r\nclass SiteFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = Site\r\n\r\n    name = factory.Faker('word')\r\n    domain = factory.Faker('domain_name')\r\n```\r\n\r\n```\r\n        self.slovak_site = SiteFactory(id=5)\r\n        self.czech_site = SiteFactory(id=6)\r\n```\r\n\r\nGot this unique key error one test run:\r\n```DETAIL:  Key (domain)=(smith.info) already exists.```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/638", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/638/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/638/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/638/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/638", "id": 481913772, "node_id": "MDU6SXNzdWU0ODE5MTM3NzI=", "number": 638, "title": "Lazy evaluation with iterator", "user": {"login": "realnot", "id": 2405675, "node_id": "MDQ6VXNlcjI0MDU2NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2405675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/realnot", "html_url": "https://github.com/realnot", "followers_url": "https://api.github.com/users/realnot/followers", "following_url": "https://api.github.com/users/realnot/following{/other_user}", "gists_url": "https://api.github.com/users/realnot/gists{/gist_id}", "starred_url": "https://api.github.com/users/realnot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/realnot/subscriptions", "organizations_url": "https://api.github.com/users/realnot/orgs", "repos_url": "https://api.github.com/users/realnot/repos", "events_url": "https://api.github.com/users/realnot/events{/privacy}", "received_events_url": "https://api.github.com/users/realnot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-17T18:30:29Z", "updated_at": "2019-08-18T23:19:57Z", "closed_at": "2019-08-18T23:19:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some problem to figure out how to use iterator filtering a subset of another field. In the example below I use Iterator to get a set of Countries, but then how you get a province based on the country returned by iterator (the same for city with province)?\r\n\r\n```\r\nclass ProfileFactory(factory.DjangoModelFactory):\r\n\r\n    class Meta:\r\n        model = Profile\r\n\r\n    user = factory.SubFactory(UserFactory)\r\n    first_name = factory.Faker('first_name')\r\n    last_name = factory.Faker('last_name')\r\n    birth_date = factory.LazyFunction(gen_datetime)\r\n    country = factory.Iterator(Country.objects.all())\r\n\r\n    @factory.lazy_attribute\r\n    def province(self):\r\n        return Province.objects.filter(country=self.country).order_by('?').first()\r\n\r\n    @factory.lazy_attribute\r\n    def city(self):\r\n        return City.objects.filter(province=self.province).order_by('?').first()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/635", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/635/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/635/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/635/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/635", "id": 481143199, "node_id": "MDU6SXNzdWU0ODExNDMxOTk=", "number": 635, "title": "Mutually dependent django model fields, with defaults", "user": {"login": "Joeboy", "id": 316361, "node_id": "MDQ6VXNlcjMxNjM2MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/316361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Joeboy", "html_url": "https://github.com/Joeboy", "followers_url": "https://api.github.com/users/Joeboy/followers", "following_url": "https://api.github.com/users/Joeboy/following{/other_user}", "gists_url": "https://api.github.com/users/Joeboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Joeboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Joeboy/subscriptions", "organizations_url": "https://api.github.com/users/Joeboy/orgs", "repos_url": "https://api.github.com/users/Joeboy/repos", "events_url": "https://api.github.com/users/Joeboy/events{/privacy}", "received_events_url": "https://api.github.com/users/Joeboy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-15T13:09:19Z", "updated_at": "2019-08-22T16:28:43Z", "closed_at": "2019-08-22T16:28:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\nSuppose I have a model with two fields, which need to be set according to some relationship between them. Eg (contrived example) I have a product_type field and a size field. I'd like to be able to provide either, neither or both fields. If I provide eg. product_type, I'd like to be able to set the size field accordingly (eg. if product_type is \"book\", I'd like something like \"299 pages\". And if the size is provided as \"299 pages\", I'd like to be able to set the product type to something for which that is a valid size (ie. \"book\").\r\n\r\n#### Proposed solution\r\nWhat I've tried so far is having both fields as lazy_attributes, but I get a \"Cyclic lazy attribute definition\" error if I don't supply either of the dependent fields. I don't really have a proposed solution in terms of coding it, but I'd like my factory to be able to provide a default pair of field values if neither is provided by the factory caller (eg. product_type='shoes', size='42'). Or maybe there's a way of doing this already that I haven't found?\r\n\r\n#### Extra notes\r\nJust for context, I'm currently trying to replace a lot of django_any factories in a large django codebase, and there are a fair number of places where something like this would be very useful. Otherwise we have to write a bunch of things like \"ProductGivenSizeFactory\", which is much less convenient than having a single factory with the proper behaviour.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/630", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/630/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/630/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/630/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/630", "id": 459856413, "node_id": "MDU6SXNzdWU0NTk4NTY0MTM=", "number": 630, "title": "Maybe: Inconsistent phases TypeError masked by __repr__ AttributeError ", "user": {"login": "nealtodd", "id": 298652, "node_id": "MDQ6VXNlcjI5ODY1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/298652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nealtodd", "html_url": "https://github.com/nealtodd", "followers_url": "https://api.github.com/users/nealtodd/followers", "following_url": "https://api.github.com/users/nealtodd/following{/other_user}", "gists_url": "https://api.github.com/users/nealtodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/nealtodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nealtodd/subscriptions", "organizations_url": "https://api.github.com/users/nealtodd/orgs", "repos_url": "https://api.github.com/users/nealtodd/repos", "events_url": "https://api.github.com/users/nealtodd/events{/privacy}", "received_events_url": "https://api.github.com/users/nealtodd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-24T12:12:45Z", "updated_at": "2019-06-26T21:36:00Z", "closed_at": "2019-06-26T21:36:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nThe TypeError check in `declarations.Maybe.__init__` is masked by an AttributeError because the TypeError error message uses `__repr__` which in turn uses `self` attributes that haven't yet be set in `__init__`.\r\n\r\n#### To Reproduce\r\nNoticed when upgrading from `2.8.1` to `2.12.0` on a factory that used Traits and had a PostGeneration hook which resulted in a Maybe object with a yes declaration evaluating to a List object (`attributes` enum) and a no declaration evaluating to a PostGeneration object (`post_instance` enum).\r\n\r\nTo reproduce: Create a `Maybe` object with yes/no declarations with differing enums. \r\n\r\n##### Model / Factory code\r\nMinimal example\r\n\r\n```python\r\nIn [1]: from factory.declarations import LazyAttribute, Maybe, PostGenerationDeclaration\r\n\r\nIn [2]: Maybe(None, LazyAttribute(None), PostGenerationDeclaration())\r\n\r\nAttributeError                            Traceback (most recent call last)\r\n----> 1 Maybe(None, LazyAttribute(None), PostGenerationDeclaration())\r\n\r\n~/venv/lib/python3.6/site-packages/factory/declarations.py in __init__(self, decider, yes_declaration, no_declaration)\r\n    456\r\n    457         if len(used_phases) > 1:\r\n--> 458             raise TypeError(\"Inconsistent phases for %r: %r\" % (self, phases))\r\n    459\r\n    460         self.FACTORY_BUILDER_PHASE = used_phases.pop() if used_phases else enums.BuilderPhase.ATTRIBUTE_RESOLUTION\r\n\r\n~/venv/lib/python3.6/site-packages/factory/declarations.py in __repr__(self)\r\n    504\r\n    505     def __repr__(self):\r\n--> 506         return 'Maybe(%r, yes=%r, no=%r)' % (self.decider, self.yes, self.no)\r\n    507\r\n    508\r\n\r\nAttributeError: 'Maybe' object has no attribute 'decider'\r\n```\r\n\r\n##### The issue\r\nThe TypeError error message uses `self` but the `__repr__` uses attributes that only get set on `self` at the end of `__init__`. This raises an AttributeError which masks the actual TypeError.\r\n\r\nIf the attributes were set ahead of the check on https://github.com/FactoryBoy/factory_boy/blob/master/factory/declarations.py#L454 then the expected exception would be raised:\r\n\r\n```python\r\nIn [1]: from factory.declarations import LazyAttribute, Maybe, PostGenerationDeclaration\r\n\r\nIn [2]: Maybe(None, LazyAttribute(None), PostGenerationDeclaration())\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n/vagrant/.konchrc in <module>\r\n----> 1 Maybe(None, LazyAttribute(None), PostGenerationDeclaration())\r\n\r\n~/venv/lib/python3.6/site-packages/factory/declarations.py in __init__(self, decider, yes_declaration, no_declaration)\r\n    460\r\n    461         if len(used_phases) > 1:\r\n--> 462             raise TypeError(\"Inconsistent phases for %r: %r\" % (self, phases))\r\n    463\r\n    464         self.FACTORY_BUILDER_PHASE = used_phases.pop() if used_phases else enums.BuilderPhase.ATTRIBUTE_RESOLUTION\r\n\r\nTypeError: Inconsistent phases for Maybe(None, yes=<factory.declarations.LazyAttribute object at 0x7f0ec15d4d30>, no=<factory.declarations.PostGenerationDeclaration object at 0x7f0ec15d4160>): {'yes_declaration': 'attributes', 'no_declaration': 'post_instance'}\r\n```\r\n\r\n#### Notes\r\n\r\nCheck was introduced in 33d27c219044", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/628", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/628/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/628/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/628/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/628", "id": 459461356, "node_id": "MDU6SXNzdWU0NTk0NjEzNTY=", "number": 628, "title": "How to create fields for DjangoModelFactory dynamically? ", "user": {"login": "gandriyko", "id": 1176487, "node_id": "MDQ6VXNlcjExNzY0ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1176487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gandriyko", "html_url": "https://github.com/gandriyko", "followers_url": "https://api.github.com/users/gandriyko/followers", "following_url": "https://api.github.com/users/gandriyko/following{/other_user}", "gists_url": "https://api.github.com/users/gandriyko/gists{/gist_id}", "starred_url": "https://api.github.com/users/gandriyko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gandriyko/subscriptions", "organizations_url": "https://api.github.com/users/gandriyko/orgs", "repos_url": "https://api.github.com/users/gandriyko/repos", "events_url": "https://api.github.com/users/gandriyko/events{/privacy}", "received_events_url": "https://api.github.com/users/gandriyko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-22T10:35:07Z", "updated_at": "2019-06-29T08:33:37Z", "closed_at": "2019-06-29T08:33:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to create fields for DjangoModelFactory in runtime?\r\nFor example for multi-language project.\r\n```python\r\nclass DeliveryFactory(django.DjangoModelFactory):\r\n    name_en = Faker('name')\r\n    name_de = Faker('name')\r\n    name_fr = Faker('name')\r\n```\r\nSomething like processing settiings.LANGUAGES", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/616", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/616/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/616/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/616/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/616", "id": 454129704, "node_id": "MDU6SXNzdWU0NTQxMjk3MDQ=", "number": 616, "title": "TransactionManagementError", "user": {"login": "rafagarciac", "id": 32666357, "node_id": "MDQ6VXNlcjMyNjY2MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/32666357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafagarciac", "html_url": "https://github.com/rafagarciac", "followers_url": "https://api.github.com/users/rafagarciac/followers", "following_url": "https://api.github.com/users/rafagarciac/following{/other_user}", "gists_url": "https://api.github.com/users/rafagarciac/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafagarciac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafagarciac/subscriptions", "organizations_url": "https://api.github.com/users/rafagarciac/orgs", "repos_url": "https://api.github.com/users/rafagarciac/repos", "events_url": "https://api.github.com/users/rafagarciac/events{/privacy}", "received_events_url": "https://api.github.com/users/rafagarciac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 327760582, "node_id": "MDU6TGFiZWwzMjc3NjA1ODI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Django", "name": "Django", "color": "bfdadc", "default": false, "description": null}, {"id": 210341587, "node_id": "MDU6TGFiZWwyMTAzNDE1ODc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/NeedInfo", "name": "NeedInfo", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-10T11:42:35Z", "updated_at": "2019-09-26T09:43:34Z", "closed_at": "2019-09-26T09:43:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nAfter upgrade my huge project from **Python2.7/Django1.8** to **Python3.7/Django2.2.1** I got the following error while I ran my tests. And I supposed that is blame of FactoryBoy (latest version). \r\n\r\n#### To Reproduce\r\nWhen I run my pytest command I just get a waterfall with all my tests getting the same error `django.db.transaction.TransactionManagementError: An error occurred in the current transaction. You can't execute queries until the end of the 'atomic' block.` Also I'm using **DjangoRestFramework** (I don't think that make any relevance...)\r\n\r\n##### Model / Factory code\r\n```python\r\nclass StorageFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = 'storage.Storage'\r\n\r\n    company = factory.SubFactory(CompanyFactory)\r\n    secure = False\r\n    storage_type = 1 # Primary\r\n    path = '/path/to/storage/'\r\n    user = 'test_user'\r\n    password = 'test_password'\r\n```\r\n##### Core Tests - Merge Factories\r\n```python\r\nclass BaseUser(APITestCase):\r\n    # https://docs.djangoproject.com/en/2.2/topics/testing/tools/#django.test.TransactionTestCase.multi_db\r\n    databases = '__all__'\r\n\r\n    def setUp(self):\r\n        # Companies\r\n        self._client = factories.ClientFactory()\r\n        self.company = factories.CompanyFactory()\r\n        self.iprange = factories.IpRangeFactory()\r\n        self.service = factories.ServiceFactory(company=(self.company,))\r\n        self.company_disconnected = factories.CompanyFactory()  # In order to test Permissions.\r\n        self.site = factories.SiteFactory(company=self.company)\r\n        self.alert = factories.AlertFactory(company=self.company)\r\n        self.invalidation = factories.InvalidationFactory(company=self.company)\r\n        self.ratelimit = factories.RateLimitFactory(company=self.company)\r\n        self.warmupcache = factories.WarmUpCaheFactory(company=self.company)\r\n        # Storage\r\n        self.storage = factories.StorageFactory(company=self.company)\r\n        self.consumption = factories.ConsumptionFactory(storage=self.storage)\r\n        . . .\r\n```\r\n_And then I used this BaseUser in all my unit tests._\r\n\r\n##### The issue\r\n```python\r\n___________________________________________________________ StorageSuperAdminTests.test_storage_list_post_bad_request ____________________________________________________________\r\ncore/utils_tests.py:104: in setUp\r\n    super(SuperAdminUser, self).setUp()\r\ncore/utils_tests.py:34: in setUp\r\n    self.company = factories.CompanyFactory()\r\n/usr/local/lib/python3.7/site-packages/factory/base.py:46: in __call__\r\n    return cls.create(**kwargs)\r\n/usr/local/lib/python3.7/site-packages/factory/base.py:564: in create\r\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n/usr/local/lib/python3.7/site-packages/factory/django.py:141: in _generate\r\n    return super(DjangoModelFactory, cls)._generate(strategy, params)\r\n/usr/local/lib/python3.7/site-packages/factory/base.py:501: in _generate\r\n    return step.build()\r\n/usr/local/lib/python3.7/site-packages/factory/builder.py:279: in build\r\n    kwargs=kwargs,\r\n/usr/local/lib/python3.7/site-packages/factory/base.py:315: in instantiate\r\n    return self.factory._create(model, *args, **kwargs)\r\n/usr/local/lib/python3.7/site-packages/factory/django.py:185: in _create\r\n    return manager.create(*args, **kwargs)\r\n/usr/local/lib/python3.7/site-packages/django/db/models/manager.py:82: in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n/usr/local/lib/python3.7/site-packages/django/db/models/query.py:422: in create\r\n    obj.save(force_insert=True, using=self.db)\r\ncompanies/models.py:159: in save\r\n    self._create_consolidated_table()\r\ncompanies/models.py:168: in _create_consolidated_table\r\n    response = cursor.execute(\"SHOW TABLES like '%s'\" % tname)\r\n/usr/local/lib/python3.7/site-packages/django/db/backends/utils.py:67: in execute\r\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n/usr/local/lib/python3.7/site-packages/django/db/backends/utils.py:76: in _execute_with_wrappers\r\n    return executor(sql, params, many, context)\r\n/usr/local/lib/python3.7/site-packages/django/db/backends/utils.py:79: in _execute\r\n    self.db.validate_no_broken_transaction()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.mysql.base.DatabaseWrapper object at 0x7fdf591a0f98>\r\n\r\n    def validate_no_broken_transaction(self):\r\n        if self.needs_rollback:\r\n            raise TransactionManagementError(\r\n>               \"An error occurred in the current transaction. You can't \"\r\n                \"execute queries until the end of the 'atomic' block.\")\r\nE           django.db.transaction.TransactionManagementError: An error occurred in the current transaction. You can't execute queries until the end of the 'atomic' block.\r\n\r\n/usr/local/lib/python3.7/site-packages/django/db/backends/base/base.py:438: TransactionManagementError\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/607", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/607/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/607/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/607/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/607", "id": 450261525, "node_id": "MDU6SXNzdWU0NTAyNjE1MjU=", "number": 607, "title": "_add_items() got an unexpected keyword argument 'through_defaults' after updated Django to 2.2.1", "user": {"login": "Vokler", "id": 21297042, "node_id": "MDQ6VXNlcjIxMjk3MDQy", "avatar_url": "https://avatars2.githubusercontent.com/u/21297042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vokler", "html_url": "https://github.com/Vokler", "followers_url": "https://api.github.com/users/Vokler/followers", "following_url": "https://api.github.com/users/Vokler/following{/other_user}", "gists_url": "https://api.github.com/users/Vokler/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vokler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vokler/subscriptions", "organizations_url": "https://api.github.com/users/Vokler/orgs", "repos_url": "https://api.github.com/users/Vokler/repos", "events_url": "https://api.github.com/users/Vokler/events{/privacy}", "received_events_url": "https://api.github.com/users/Vokler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-30T11:30:04Z", "updated_at": "2019-05-30T13:13:35Z", "closed_at": "2019-05-30T13:13:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\n*TypeError: _add_items() got an unexpected keyword argument 'through_defaults' after upgraded Django to 2.2.1*\r\n\r\n#### To Reproduce\r\n*Many-To-Many relation - issue happens after adding new elements to object.*\r\n\r\n##### Model / Factory code\r\n```python\r\nclass CourseModule(models.Model):\r\n    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='modules')\r\n    name = models.CharField(max_length=250, null=True, blank=True)\r\n    lectures = SortedManyToManyField(Lecture, blank=True, related_name='modules')\r\n    sort_value = models.PositiveIntegerField(default=0)\r\n    is_on_sale = models.BooleanField(default=False)\r\n\r\nclass CourseModuleFactory(factory.DjangoModelFactory):\r\n    name = factory.Sequence(lambda n: 'Test Course Module %s' % n)\r\n    course = factory.SubFactory(CourseFactory)\r\n\r\n    class Meta:\r\n        model = models.CourseModule\r\n\r\n    @factory.post_generation\r\n    def lectures(self, create, extracted, **kwargs):\r\n        if create and extracted:\r\n            for extract in extracted:\r\n                self.lectures.add(extract)\r\n```\r\n\r\n##### The issue\r\n*Add a short description along with your code*\r\n\r\n```python\r\nError\r\nTraceback (most recent call last):\r\n  File \"/Users/vokler/projects/ca/ca-server/lectures/tests/test_course.py\", line 80, in test_replace_from_parent\r\n    course_module = CourseModuleFactory(course=course, lectures=lectures)\r\n  File \"/Users/vokler/projects/ca/venv/lib/python3.6/site-packages/factory/base.py\", line 46, in __call__\r\n    return cls.create(**kwargs)\r\n  File \"/Users/vokler/projects/ca/venv/lib/python3.6/site-packages/factory/base.py\", line 564, in create\r\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n  File \"/Users/vokler/projects/ca/venv/lib/python3.6/site-packages/factory/django.py\", line 141, in _generate\r\n    return super(DjangoModelFactory, cls)._generate(strategy, params)\r\n  File \"/Users/vokler/projects/ca/venv/lib/python3.6/site-packages/factory/base.py\", line 501, in _generate\r\n    return step.build()\r\n  File \"/Users/vokler/projects/ca/venv/lib/python3.6/site-packages/factory/builder.py\", line 299, in build\r\n    context=postgen_context,\r\n  File \"/Users/vokler/projects/ca/venv/lib/python3.6/site-packages/factory/declarations.py\", line 623, in call\r\n    instance, create, context.value, **context.extra)\r\n  File \"/Users/vokler/projects/ca/ca-server/lectures/factories.py\", line 118, in lectures\r\n    self.lectures.add(extract, through_defaults=None)\r\n  File \"/Users/vokler/projects/ca/venv/lib/python3.6/site-packages/django/db/models/fields/related_descriptors.py\", line 938, in add\r\n    through_defaults=through_defaults,\r\nTypeError: _add_items() got an unexpected keyword argument 'through_defaults'\r\n```\r\n\r\n#### Notes\r\n*I'm not sure that this issue belongs factory boy, but after researching bug I don't have idea*\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/606", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/606/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/606/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/606/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/606", "id": 448879003, "node_id": "MDU6SXNzdWU0NDg4NzkwMDM=", "number": 606, "title": "Misleading exception from changing get_or_create behaviour with #345", "user": {"login": "ulgens", "id": 166637, "node_id": "MDQ6VXNlcjE2NjYzNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/166637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ulgens", "html_url": "https://github.com/ulgens", "followers_url": "https://api.github.com/users/ulgens/followers", "following_url": "https://api.github.com/users/ulgens/following{/other_user}", "gists_url": "https://api.github.com/users/ulgens/gists{/gist_id}", "starred_url": "https://api.github.com/users/ulgens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ulgens/subscriptions", "organizations_url": "https://api.github.com/users/ulgens/orgs", "repos_url": "https://api.github.com/users/ulgens/repos", "events_url": "https://api.github.com/users/ulgens/events{/privacy}", "received_events_url": "https://api.github.com/users/ulgens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-27T14:14:28Z", "updated_at": "2019-06-09T01:48:46Z", "closed_at": "2019-06-09T01:48:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nIf any field given with `django_get_or_create` in a factory class, it's imposible to get the correct `IntegrityError` exception for duplicate-but-should-be-unique fields.\r\n\r\n##### Model / Factory code\r\n```python\r\nclass UserFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = User\r\n        django_get_or_create = ('username',)\r\n\r\n    username = 'test'\r\n    email = 'test@example.com'\r\n\r\nclass User(models.Model):\r\n    username = models.CharField(max_length=64)\r\n    email = models.EmailField(unique=True)\r\n```\r\n#### To Reproduce\r\nWith given factory and model classes above, when i want to create an object with unique `username` but duplicate `email`:\r\n* With release 2.11.1, i'm getting the normal-expected `IntegrityError` from Django.\r\n* With release 2.12.0, i'm getting `ValueError` with presented with #345\r\n\r\nIt makes it impossible to write tests like this:\r\n\r\n```python\r\nclass UserTestCase(TestCase):\r\n    def test_duplicate_email(self):\r\n        email = \"cute@cats.xyz\"\r\n\r\n        UserFactory(username=\"test1\", email=email)\r\n        with self.assertRaises(IntegrityError):\r\n            UserFactory(username=\"test2\", email=email)\r\n```\r\n\r\nThis is a bit similar case #598 but not the same. I don't think this a \"something is not working\" bug, but #345 introduces some unintended (and unnecessary imo) behaviour.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/598", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/598/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/598/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/598/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/598", "id": 448319656, "node_id": "MDU6SXNzdWU0NDgzMTk2NTY=", "number": 598, "title": "Changes introduced in #345 altered how django_get_or_create behaves", "user": {"login": "mkokotovich", "id": 14296374, "node_id": "MDQ6VXNlcjE0Mjk2Mzc0", "avatar_url": "https://avatars1.githubusercontent.com/u/14296374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkokotovich", "html_url": "https://github.com/mkokotovich", "followers_url": "https://api.github.com/users/mkokotovich/followers", "following_url": "https://api.github.com/users/mkokotovich/following{/other_user}", "gists_url": "https://api.github.com/users/mkokotovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkokotovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkokotovich/subscriptions", "organizations_url": "https://api.github.com/users/mkokotovich/orgs", "repos_url": "https://api.github.com/users/mkokotovich/repos", "events_url": "https://api.github.com/users/mkokotovich/events{/privacy}", "received_events_url": "https://api.github.com/users/mkokotovich/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490793, "node_id": "MDU6TGFiZWwzMDQ5MDc5Mw==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}, {"id": 327760582, "node_id": "MDU6TGFiZWwzMjc3NjA1ODI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Django", "name": "Django", "color": "bfdadc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-24T19:20:35Z", "updated_at": "2019-05-28T14:38:48Z", "closed_at": "2019-05-28T14:38:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Upgrading to 2.12.0 broke some of the tests we had, and I'm pretty sure either the docs for django_get_or_create are incorrect or the change in behavior was unintended. The change that seems to be causing the problem is https://github.com/FactoryBoy/factory_boy/pull/345\r\n\r\nWe have a model with three fields marked as unique=True.\r\n```python\r\nclass MyModel(model):\r\n  field1 = models.CharField(max_length=128, unique=True)\r\n  field2 = models.CharField(max_length=128, unique=True)\r\n  field3 = models.CharField(max_length=128, unique=True)\r\n```\r\n\r\nWe have a factory for creating MyModel in tests:\r\n```python\r\nclass MyModelFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = MyModel\r\n        django_get_or_create = ('field1',)\r\n\r\n    field1 = factory.LazyAttribute(lambda x: fake.text(max_nb_chars=60))\r\n    field2 = factory.LazyAttribute(lambda x: fake.text(max_nb_chars=60))\r\n    field3 = factory.LazyAttribute(lambda x: fake.text(max_nb_chars=60))\r\n```\r\n\r\nWe have only one of the unique fields (field1) included in django_get_or_create. Then we have a different test that creates two MyModels with the same field2, and we expect the second creation to fail with a unique constraint exception.\r\n```python\r\ndef test_duplicate_field2_not_allowed(self):\r\n    MyModelFactory(field2=\"something\")\r\n    with pytest.raises(IntegrityError):\r\n        MyModelFactory(field2=\"something\")\r\n```\r\n\r\nThis works in 2.11.1, and fails in 2.12.0.\r\n\r\nIt seems from the docs:\r\n```\r\nFields whose name are passed in this list will be used to perform a Model.objects.get_or_create() instead of the usual Model.objects.create():\r\n```\r\nthat if a field isn't included in django_get_or_create then it shouldn't be used in Model.objects.get_or_create() ever.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/594", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/594/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/594/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/594/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/594", "id": 440159330, "node_id": "MDU6SXNzdWU0NDAxNTkzMzA=", "number": 594, "title": "FactoryBoy records not inserted before JSON POST request", "user": {"login": "dpmccabe", "id": 527578, "node_id": "MDQ6VXNlcjUyNzU3OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/527578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpmccabe", "html_url": "https://github.com/dpmccabe", "followers_url": "https://api.github.com/users/dpmccabe/followers", "following_url": "https://api.github.com/users/dpmccabe/following{/other_user}", "gists_url": "https://api.github.com/users/dpmccabe/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpmccabe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpmccabe/subscriptions", "organizations_url": "https://api.github.com/users/dpmccabe/orgs", "repos_url": "https://api.github.com/users/dpmccabe/repos", "events_url": "https://api.github.com/users/dpmccabe/events{/privacy}", "received_events_url": "https://api.github.com/users/dpmccabe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-03T18:07:38Z", "updated_at": "2019-05-09T16:43:47Z", "closed_at": "2019-05-09T16:43:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nFactoryBoy doesn't insert records into the database before a POST request with JSON payload, even though it does if you switch to web form data.\r\n\r\n#### To Reproduce\r\nIn a Flask app, add these two routes to return the count of a database table with identical behavior:\r\n\r\n```py\r\nbp = Blueprint('example', __name__, url_prefix='/example')\r\n\r\n@bp.route('/form', methods = ['POST'])\r\ndef test_form():\r\n    return str(db_session.query(Person).count())\r\n\r\n@bp.route('/json', methods = ['POST'])\r\ndef test_json():\r\n    return str(db_session.query(Person).count())\r\n```\r\n\r\nThen try unit testing them, noting that you are sending form data to `/example/form` and JSON to `/example/json`:\r\n\r\n```py\r\ndef test_form(self, client):\r\n    person = PersonFactory()\r\n    resp = client.post('/example/form', data={'foo': 'bar'})\r\n    assert resp.data == b'1'\r\n\r\ndef test_json(self, client):\r\n    person = PersonFactory()\r\n    resp = client.post('/example/json', json={'foo': 'bar'})\r\n    assert resp.data == b'1'\r\n```\r\n\r\n##### Model / Factory code\r\nSee https://gist.github.com/dpmccabe/6d3bed81c37817c38fb3f2b262d1393d for my Flask+SQLAlchemy+Pytest+FactoryBoy setup. Apologies if I'm doing anything unconventional, since I'm new to Flask.\r\n\r\n##### The issue\r\nThe first test (form data) succeeds and you see this in the log:\r\n\r\n```pytb\r\n2019-04-30 14:26:05,425 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\r\n2019-04-30 14:26:05,427 INFO sqlalchemy.engine.base.Engine INSERT INTO people (id) VALUES (%(id)s)\r\n2019-04-30 14:26:05,427 INFO sqlalchemy.engine.base.Engine {'id': '658e241a-5522-47ca-9e61-bd6862d6ddc6}\r\n2019-04-30 14:26:05,432 INFO sqlalchemy.engine.base.Engine SELECT count(*) AS count_1 FROM (SELECT people.id AS people_id FROM people) AS anon_1\r\n2019-04-30 14:26:05,432 INFO sqlalchemy.engine.base.Engine {}\r\n2019-04-30 14:26:05,433 INFO sqlalchemy.engine.base.Engine ROLLBACK\r\n```\r\n\r\nFactoryBoy correctly inserts the data and rolls it back when the test is done. However, the second test (JSON) fails because the test person isn't inserted:\r\n\r\n```pytb\r\n2019-04-30 14:28:27,341 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\r\n2019-04-30 14:28:27,342 INFO sqlalchemy.engine.base.Engine SELECT count(*) AS count_1 \r\nFROM (SELECT people.id AS people_id FROM people) AS anon_1\r\n2019-04-30 14:28:27,342 INFO sqlalchemy.engine.base.Engine {}\r\n2019-04-30 14:28:27,343 INFO sqlalchemy.engine.base.Engine ROLLBACK\r\n\r\ntests/test_example.py:40 (TestExample.test_json)\r\nb'0' != b'1'\r\n```\r\n\r\nThere are no errors or warnings. The Flask test client sends the request and my model runs the queries, but no data was inserted.\r\n\r\n#### Environment\r\n\r\n* Python version: 3.7\r\n* Pytest version: 4.4.1\r\n* FactoryBoy version: 2.11.1\r\n* Flask version: 1.0.2\r\n\r\nI honestly don't know if this is a FactoryBoy problem. It's really bizarre. The route works fine with a JSON payload in development, though, and I otherwise I have no problems with my test suite, including using FactoryBoy on GET requests and with non-SQLAlchemy objects.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/589", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/589/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/589/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/589/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/589", "id": 432094218, "node_id": "MDU6SXNzdWU0MzIwOTQyMTg=", "number": 589, "title": "Docs: Latest docs indicate that RelatedFactoryList is available, but feature is missing in latest release 2.11.1", "user": {"login": "kitanata", "id": 778057, "node_id": "MDQ6VXNlcjc3ODA1Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/778057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitanata", "html_url": "https://github.com/kitanata", "followers_url": "https://api.github.com/users/kitanata/followers", "following_url": "https://api.github.com/users/kitanata/following{/other_user}", "gists_url": "https://api.github.com/users/kitanata/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitanata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitanata/subscriptions", "organizations_url": "https://api.github.com/users/kitanata/orgs", "repos_url": "https://api.github.com/users/kitanata/repos", "events_url": "https://api.github.com/users/kitanata/events{/privacy}", "received_events_url": "https://api.github.com/users/kitanata/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-11T15:42:24Z", "updated_at": "2019-05-13T18:56:26Z", "closed_at": "2019-05-13T18:56:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation on readthedocs.io indicate that RelatedFactoryList is an available feature, however the latest release 2.11.1 (from May of 2018) does not actually have this feature.\r\n\r\nThis is confusing, because I would have expected the \"latest\" documentation in readthedocs to reference the \"latest\" release of the software, not what is available in the the master branch on github without a release pushed to PyPI. Version 2.11.1 documentation correctly shows that the RelatedFactoryList is not a feature of that version.\r\n\r\nPlease either push a new release to PyPI which matches the latest document on readthedocs.io or configure readthedocs.io to point the latest documentation to your latest release of the code available on PyPI and not to the master branch.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/587", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/587/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/587/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/587/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/587", "id": 429957407, "node_id": "MDU6SXNzdWU0Mjk5NTc0MDc=", "number": 587, "title": "Documentation make it look like I've got to inherit factories from factory.Factory", "user": {"login": "x-yuri", "id": 730588, "node_id": "MDQ6VXNlcjczMDU4OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/730588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/x-yuri", "html_url": "https://github.com/x-yuri", "followers_url": "https://api.github.com/users/x-yuri/followers", "following_url": "https://api.github.com/users/x-yuri/following{/other_user}", "gists_url": "https://api.github.com/users/x-yuri/gists{/gist_id}", "starred_url": "https://api.github.com/users/x-yuri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/x-yuri/subscriptions", "organizations_url": "https://api.github.com/users/x-yuri/orgs", "repos_url": "https://api.github.com/users/x-yuri/repos", "events_url": "https://api.github.com/users/x-yuri/events{/privacy}", "received_events_url": "https://api.github.com/users/x-yuri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-05T22:28:35Z", "updated_at": "2019-04-06T16:25:47Z", "closed_at": "2019-04-06T16:25:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\nI've spent quite a while trying to figure out why my factory doesn't return saved Django model instance as promised. All the examples [here][1] inherit factories from `factory.Factory`. From what I can see `factory.Factory` doesn't try anything as near as to [saving][2] the model. It looks as if `factory.Factory` is an abstract class (not to be used directly).\r\n\r\n[1]: https://factoryboy.readthedocs.io/en/2.11.1/\r\n[2]: https://github.com/FactoryBoy/factory_boy/blob/v2.9.0/factory/base.py#L546\r\n\r\n#### Proposed solution\r\nImprove the documentation. Depends on what `factory.Factory` is for. For example, choose the popular ORM to use for examples. Or state clearly before inheriting from `factory.Factory` that it's not to be used with ORMs. And probably explain what `factory.Factory` is for.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/576", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/576/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/576/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/576/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/576", "id": 425771839, "node_id": "MDU6SXNzdWU0MjU3NzE4Mzk=", "number": 576, "title": "Recipe: ImageField(from_file=FuzzyChoice()) ?   (django)", "user": {"login": "gotexis", "id": 38595828, "node_id": "MDQ6VXNlcjM4NTk1ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/38595828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gotexis", "html_url": "https://github.com/gotexis", "followers_url": "https://api.github.com/users/gotexis/followers", "following_url": "https://api.github.com/users/gotexis/following{/other_user}", "gists_url": "https://api.github.com/users/gotexis/gists{/gist_id}", "starred_url": "https://api.github.com/users/gotexis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gotexis/subscriptions", "organizations_url": "https://api.github.com/users/gotexis/orgs", "repos_url": "https://api.github.com/users/gotexis/repos", "events_url": "https://api.github.com/users/gotexis/events{/privacy}", "received_events_url": "https://api.github.com/users/gotexis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 327760582, "node_id": "MDU6TGFiZWwzMjc3NjA1ODI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Django", "name": "Django", "color": "bfdadc", "default": false, "description": null}, {"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-27T05:32:37Z", "updated_at": "2019-03-27T08:56:09Z", "closed_at": "2019-03-27T08:55:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey\r\n\r\nSorry I'm back for more recipes...\r\n\r\nLet's say I have 1,000 existing images in `D:\\demo_images\\`\r\n\r\nI want to use them to create random image objects in database.\r\n\r\nSo, I am doing this:\r\n\r\n```python\r\n\r\nimages = os.path.join( \"d:/demo_images/\", os.listdir('d:/demo_images/'))\r\n\r\nclass ImageFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = Image\r\n    shop                           = SubFactory('test.factory_codex.ShopFactory')\r\n    image                          = factory.django.ImageField(from_file=FuzzyChoice(images))\r\n```\r\n\r\nIs it gonna work?\r\n\r\nupdate:\r\n\r\nCan confirm this works, but need to change `from_file` to `from_path`.\r\n\r\nFurther, this will copy the image from `d:/demo_images` to `MEDIA_ROOT`\r\n\r\nIs there any way to disable this behaviour?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/574", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/574/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/574/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/574/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/574", "id": 423158261, "node_id": "MDU6SXNzdWU0MjMxNTgyNjE=", "number": 574, "title": "Recipe needed: how to handle ForeignKey to self model?", "user": {"login": "gotexis", "id": 38595828, "node_id": "MDQ6VXNlcjM4NTk1ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/38595828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gotexis", "html_url": "https://github.com/gotexis", "followers_url": "https://api.github.com/users/gotexis/followers", "following_url": "https://api.github.com/users/gotexis/following{/other_user}", "gists_url": "https://api.github.com/users/gotexis/gists{/gist_id}", "starred_url": "https://api.github.com/users/gotexis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gotexis/subscriptions", "organizations_url": "https://api.github.com/users/gotexis/orgs", "repos_url": "https://api.github.com/users/gotexis/repos", "events_url": "https://api.github.com/users/gotexis/events{/privacy}", "received_events_url": "https://api.github.com/users/gotexis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 578610607, "node_id": "MDU6TGFiZWw1Nzg2MTA2MDc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/BeginnerFriendly", "name": "BeginnerFriendly", "color": "0e8a16", "default": false, "description": null}, {"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-20T09:51:11Z", "updated_at": "2019-03-22T12:11:16Z", "closed_at": "2019-03-22T12:11:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Unfortunately, me cannot do a SubFactory to self model  yet. (hit recursion error)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/572", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/572/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/572/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/572/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/572", "id": 422545263, "node_id": "MDU6SXNzdWU0MjI1NDUyNjM=", "number": 572, "title": "factory.build() saves instance to database", "user": {"login": "rjschave", "id": 11916949, "node_id": "MDQ6VXNlcjExOTE2OTQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/11916949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rjschave", "html_url": "https://github.com/rjschave", "followers_url": "https://api.github.com/users/rjschave/followers", "following_url": "https://api.github.com/users/rjschave/following{/other_user}", "gists_url": "https://api.github.com/users/rjschave/gists{/gist_id}", "starred_url": "https://api.github.com/users/rjschave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rjschave/subscriptions", "organizations_url": "https://api.github.com/users/rjschave/orgs", "repos_url": "https://api.github.com/users/rjschave/repos", "events_url": "https://api.github.com/users/rjschave/events{/privacy}", "received_events_url": "https://api.github.com/users/rjschave/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 578610607, "node_id": "MDU6TGFiZWw1Nzg2MTA2MDc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/BeginnerFriendly", "name": "BeginnerFriendly", "color": "0e8a16", "default": false, "description": null}, {"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-19T05:02:08Z", "updated_at": "2019-12-15T13:19:08Z", "closed_at": "2019-12-15T13:19:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nMy understanding from the documentation (https://factoryboy.readthedocs.io/en/latest/index.html?highlight=build#using-factories) is that the build strategy will not save the instance to the database.\r\n\r\n```WidgetFactory.build()``` does not save the instance to the database, but ```factory.build(WidgetFactory)``` does.\r\n\r\n#### To Reproduce\r\nUsing Python 3.7.2, Django 2.1.7, faker 1.0.2, and factory-boy 2.11.1\r\n\r\n##### Model / Factory code\r\n```python\r\n# models.py\r\nfrom django.db import models\r\n\r\nclass Widget(models.Model):\r\n    name = models.CharField(max_length=25)\r\n\r\n# tests/factories.py\r\nfrom factory import DjangoModelFactory, lazy_attribute\r\nfrom faker import Faker\r\nfrom ..models import Widget\r\n\r\nfaker = Faker()\r\n\r\nclass WidgetFactory(DjangoModelFactory):\r\n    class Meta:\r\n        model = Widget\r\n\r\n    name = lazy_attribute(lambda x: faker.word())\r\n\r\n```\r\n\r\n##### The issue\r\nHere are the steps to reproduce in the REPL:\r\n\r\n```python\r\n>>> import factory\r\n>>> from widgets.tests.factories import WidgetFactory\r\n>>> w1 = WidgetFactory.create()\r\n>>> w1.pk\r\n4\r\n>>> w2 = WidgetFactory.build()\r\n>>> w2.pk\r\n# (w2.pk is None, as expected)\r\n>>> w3 = factory.create(WidgetFactory)\r\n>>> w3.pk\r\n5\r\n>>> w4 = factory.build(WidgetFactory)\r\n>>> w4.pk\r\n6 # (was not expecting the instance to be saved)\r\n```\r\n\r\n#### Notes\r\nPerhaps I've misunderstood something here.  Should ```WidgetFactory.build()``` and ```factory.build(WidgetFactory)``` have the same behavior?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/568", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/568/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/568/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/568/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/568", "id": 415520221, "node_id": "MDU6SXNzdWU0MTU1MjAyMjE=", "number": 568, "title": "Duplicate key violates key constraint", "user": {"login": "jonathan-s", "id": 2124818, "node_id": "MDQ6VXNlcjIxMjQ4MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2124818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathan-s", "html_url": "https://github.com/jonathan-s", "followers_url": "https://api.github.com/users/jonathan-s/followers", "following_url": "https://api.github.com/users/jonathan-s/following{/other_user}", "gists_url": "https://api.github.com/users/jonathan-s/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathan-s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathan-s/subscriptions", "organizations_url": "https://api.github.com/users/jonathan-s/orgs", "repos_url": "https://api.github.com/users/jonathan-s/repos", "events_url": "https://api.github.com/users/jonathan-s/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathan-s/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-28T09:16:16Z", "updated_at": "2019-02-28T21:24:12Z", "closed_at": "2019-02-28T21:24:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nI guess it's up in the air whether this is a bug or an improvement. Assume that you initiate a ModelFactory, it creates said model. The next statement you need that same model but with a specific ID. If that id already exists it will throw a duplicate key value violates unique constraint error. \r\n\r\nI would want it instead to get the original ID when initiating the factory. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/565", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/565/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/565/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/565/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/565", "id": 408791788, "node_id": "MDU6SXNzdWU0MDg3OTE3ODg=", "number": 565, "title": "How to derive values from factory.Faker and more?", "user": {"login": "datadidit", "id": 10933169, "node_id": "MDQ6VXNlcjEwOTMzMTY5", "avatar_url": "https://avatars3.githubusercontent.com/u/10933169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datadidit", "html_url": "https://github.com/datadidit", "followers_url": "https://api.github.com/users/datadidit/followers", "following_url": "https://api.github.com/users/datadidit/following{/other_user}", "gists_url": "https://api.github.com/users/datadidit/gists{/gist_id}", "starred_url": "https://api.github.com/users/datadidit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datadidit/subscriptions", "organizations_url": "https://api.github.com/users/datadidit/orgs", "repos_url": "https://api.github.com/users/datadidit/repos", "events_url": "https://api.github.com/users/datadidit/events{/privacy}", "received_events_url": "https://api.github.com/users/datadidit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-11T13:53:20Z", "updated_at": "2019-02-11T13:57:49Z", "closed_at": "2019-02-11T13:57:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nHaving trouble being able to derive values from factory.Faker?\r\n\r\n```python\r\nclass LoginFactory(factory.alchemy.SQLAlchemyModelFactory):\r\n    ''' Login Factory '''\r\n    first_name = factory.Faker(\"first_name\")  # pylint: disable=no-member\r\n    last_name = factory.Faker(\"last_name\")  # pylint: disable=no-member\r\n    phone = factory.Faker(\"phone_number\")\r\n    email = factory.Faker(\"email\")\r\n    # username = factory.Faker(\"email\")\r\n    username = \"{0}.{1}\".format(first_name, last_name)  # TODO: Make usernames more realistic by deriving from first_name, last_name\r\n\r\n    class Meta:\r\n        model = Login\r\n        sqlalchemy_session = PHIL_DATA_SESSION\r\n        sqlalchemy_session_persistence = \"commit\"\r\n```\r\n\r\nIdeally I'd like to create my usernames based on the `first_name`, `last_name` generated from factory.Faker. But when I access the factory.Faker instance it's the actual object instead of the value. How can I get the values generated by Faker on model insert.\r\n\r\nI tried moving too:\r\n\r\n```\r\nfirst_name = Faker().first_name\r\nlast_name = Faker().last_name\r\n```\r\n\r\nThis then works fine until you try to use factory.create_batch() which doesn't create a new first and last name each time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/564", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/564/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/564/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/564/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/564", "id": 407454290, "node_id": "MDU6SXNzdWU0MDc0NTQyOTA=", "number": 564, "title": "Iterator laziness doesn't seem to work with sqlalchemy ", "user": {"login": "antgel", "id": 295571, "node_id": "MDQ6VXNlcjI5NTU3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/295571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antgel", "html_url": "https://github.com/antgel", "followers_url": "https://api.github.com/users/antgel/followers", "following_url": "https://api.github.com/users/antgel/following{/other_user}", "gists_url": "https://api.github.com/users/antgel/gists{/gist_id}", "starred_url": "https://api.github.com/users/antgel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antgel/subscriptions", "organizations_url": "https://api.github.com/users/antgel/orgs", "repos_url": "https://api.github.com/users/antgel/repos", "events_url": "https://api.github.com/users/antgel/events{/privacy}", "received_events_url": "https://api.github.com/users/antgel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-06T22:11:05Z", "updated_at": "2019-02-08T22:09:01Z", "closed_at": "2019-02-08T20:58:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nAccording to [the docs](https://factoryboy.readthedocs.io/en/latest/recipes.html#choosing-from-a-populated-table):\r\n\r\n> Here, models.Language.objects.all() won\u2019t be evaluated until the first call to UserFactory; thus avoiding DB queries at import time.\r\n\r\nI'm not using Django, rather sqlachemy (or more precisely, [flask-sqlalchemy](http://flask-sqlalchemy.pocoo.org/2.3/). I'm trying to do something similar and it fails.\r\n\r\n#### To Reproduce\r\nSee below, noting use of `factory.Iterator(User.query.all())`.\r\n\r\n##### Model / Factory code\r\n```python\r\nimport factory\r\nfrom myapp.extensions import db\r\nfrom myapp.resources.user import User, UserFactory\r\n\r\nclass Incident(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    reporting_user_id = db.Column(db.Integer,\r\n                                  db.ForeignKey('user.id'),\r\n                                  nullable=False)\r\n    reporting_user = db.relationship('User', backref='incidents')\r\n\r\n# IncidentSchema deleted for brevity\r\n\r\nclass IncidentFactory(factory.alchemy.SQLAlchemyModelFactory):\r\n    class Meta:\r\n        model = Incident\r\n        sqlalchemy_session = db.session\r\n\r\n    reporting_user = factory.Iterator(User.query.all())\r\n\r\n# IncidentView deleted for brevity\r\n```\r\n\r\n##### The issue\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/home/antony/.virtualenvs/myapp/lib/python3.6/site-packages/sqlalchemy/util/_collections.py\", line 1014, in __call__\r\n    return self.registry[key]\r\nKeyError: 140173732824896\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"myapp.py\", line 1, in <module>\r\n    from myapp.app import create_app\r\n  File \"/home/antony/src/git/myapp/myapp/app.py\", line 4, in <module>\r\n    from myapp.resources.incident import IncidentsView\r\n  File \"/home/antony/src/git/myapp/myapp/resources/incident.py\", line 31, in <module>\r\n    class IncidentFactory(factory.alchemy.SQLAlchemyModelFactory):\r\n  File \"/home/antony/src/git/myapp/myapp/resources/incident.py\", line 38, in IncidentFactory\r\n    reporting_user = factory.Iterator(User.query.all())\r\n  File \"/home/antony/.virtualenvs/myapp/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py\", line 515, in __get__\r\n    return type.query_class(mapper, session=self.sa.session())\r\n  File \"/home/antony/.virtualenvs/myapp/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py\", line 78, in __call__\r\n    return self.registry()\r\n  File \"/home/antony/.virtualenvs/myapp/lib/python3.6/site-packages/sqlalchemy/util/_collections.py\", line 1016, in __call__\r\n    return self.registry.setdefault(key, self.createfunc())\r\n  File \"/home/antony/.virtualenvs/myapp/lib/python3.6/site-packages/sqlalchemy/orm/session.py\", line 3169, in __call__\r\n    return self.class_(**local_kw)\r\n  File \"/home/antony/.virtualenvs/myapp/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py\", line 142, in __init__\r\n    self.app = app = db.get_app()\r\n  File \"/home/antony/.virtualenvs/myapp/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py\", line 913, in get_app\r\n    'No application found. Either work inside a view function or push'\r\nRuntimeError: No application found. Either work inside a view function or push an application context. See http://flask-sqlalchemy.pocoo.org/contexts/.\r\n```\r\n\r\n#### Notes\r\n\r\nIn the above example, I don't even import `IncidentFactory`, yet the `User.query.all()` is still executed. Perhaps I've misunderstood the docs, but \"won\u2019t be evaluated until the first call\" seems pretty clear.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/563", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/563/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/563/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/563/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/563", "id": 407449672, "node_id": "MDU6SXNzdWU0MDc0NDk2NzI=", "number": 563, "title": "Request: add 'how to seed' to the readme.md", "user": {"login": "Pomax", "id": 177243, "node_id": "MDQ6VXNlcjE3NzI0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/177243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pomax", "html_url": "https://github.com/Pomax", "followers_url": "https://api.github.com/users/Pomax/followers", "following_url": "https://api.github.com/users/Pomax/following{/other_user}", "gists_url": "https://api.github.com/users/Pomax/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pomax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pomax/subscriptions", "organizations_url": "https://api.github.com/users/Pomax/orgs", "repos_url": "https://api.github.com/users/Pomax/repos", "events_url": "https://api.github.com/users/Pomax/events{/privacy}", "received_events_url": "https://api.github.com/users/Pomax/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 578610607, "node_id": "MDU6TGFiZWw1Nzg2MTA2MDc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/BeginnerFriendly", "name": "BeginnerFriendly", "color": "0e8a16", "default": false, "description": null}, {"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-06T21:58:00Z", "updated_at": "2019-02-23T17:50:19Z", "closed_at": "2019-02-23T12:39:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "The readme.md currently reads:\r\n>Note\r\n>\r\n>Use of fully randomized data in tests is quickly a problem for reproducing broken builds. To that purpose, factory_boy provides helpers to handle the random seeds it uses.\r\n\r\nhowever, that is the only mention of the word \"seed\" in the entire readme, could a bit be added that shows how to actually seed a Faker so multiple runs with the same see yield the same data?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/562", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/562/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/562/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/562/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/562", "id": 406785751, "node_id": "MDU6SXNzdWU0MDY3ODU3NTE=", "number": 562, "title": "pre-generation-hooks", "user": {"login": "udos", "id": 141107, "node_id": "MDQ6VXNlcjE0MTEwNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/141107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udos", "html_url": "https://github.com/udos", "followers_url": "https://api.github.com/users/udos/followers", "following_url": "https://api.github.com/users/udos/following{/other_user}", "gists_url": "https://api.github.com/users/udos/gists{/gist_id}", "starred_url": "https://api.github.com/users/udos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udos/subscriptions", "organizations_url": "https://api.github.com/users/udos/orgs", "repos_url": "https://api.github.com/users/udos/repos", "events_url": "https://api.github.com/users/udos/events{/privacy}", "received_events_url": "https://api.github.com/users/udos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-05T13:37:08Z", "updated_at": "2019-06-15T19:35:39Z", "closed_at": "2019-06-15T19:35:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\nlike there are [post-generation-hooks](https://factoryboy.readthedocs.io/en/latest/reference.html#post-generation-hooks), it would be nice to have **pre**-generation-hooks\r\nI put a simplified description of the use case on stack overflow -> https://stackoverflow.com/q/54530266/420953\r\nnote: there might be better ways of doing this :| I'm all ears :)\r\n\r\n#### Proposed solution\r\n*pre-generation-hooks could work similar to post-generation-hooks. so instead of creating required data after the factory has been generated, the data is created before the factory is created*\r\n\r\n#### Extra notes\r\nparticularities in my use case:\r\n\r\n- models do not have foreign keys\r\n- JSON fields are updated on _save()_ method\r\n- I could move my logic to a _post_save_ signal. but I want to avoid the double save and involved audit logic.<br>note: and in my case it is perfectly fine to update on _save()_ because all the info is available before the save.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/561", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/561/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/561/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/561", "id": 404556986, "node_id": "MDU6SXNzdWU0MDQ1NTY5ODY=", "number": 561, "title": "'Options' object has no attribute 'pre_declarations' is too ambiguous", "user": {"login": "claysauruswrecks", "id": 44852834, "node_id": "MDQ6VXNlcjQ0ODUyODM0", "avatar_url": "https://avatars2.githubusercontent.com/u/44852834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claysauruswrecks", "html_url": "https://github.com/claysauruswrecks", "followers_url": "https://api.github.com/users/claysauruswrecks/followers", "following_url": "https://api.github.com/users/claysauruswrecks/following{/other_user}", "gists_url": "https://api.github.com/users/claysauruswrecks/gists{/gist_id}", "starred_url": "https://api.github.com/users/claysauruswrecks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claysauruswrecks/subscriptions", "organizations_url": "https://api.github.com/users/claysauruswrecks/orgs", "repos_url": "https://api.github.com/users/claysauruswrecks/repos", "events_url": "https://api.github.com/users/claysauruswrecks/events{/privacy}", "received_events_url": "https://api.github.com/users/claysauruswrecks/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490975, "node_id": "MDU6TGFiZWwzMDQ5MDk3NQ==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/BadMagic", "name": "BadMagic", "color": "d7e102", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-01-30T01:10:09Z", "updated_at": "2020-08-12T20:42:26Z", "closed_at": "2020-08-12T20:42:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\nTypo incorrectly specifying the Model for a Factory.\r\n\r\n#### Proposed solution\r\nCheck if any specified factories are actually Models, in which case give a more clear error message.\r\n\r\n#### Extra notes\r\nThanks for the good work on this neat lib!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/557", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/557/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/557/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/557/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/557", "id": 398642498, "node_id": "MDU6SXNzdWUzOTg2NDI0OTg=", "number": 557, "title": "`create` or `created`?", "user": {"login": "uri-rodberg", "id": 12808124, "node_id": "MDQ6VXNlcjEyODA4MTI0", "avatar_url": "https://avatars0.githubusercontent.com/u/12808124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uri-rodberg", "html_url": "https://github.com/uri-rodberg", "followers_url": "https://api.github.com/users/uri-rodberg/followers", "following_url": "https://api.github.com/users/uri-rodberg/following{/other_user}", "gists_url": "https://api.github.com/users/uri-rodberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/uri-rodberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uri-rodberg/subscriptions", "organizations_url": "https://api.github.com/users/uri-rodberg/orgs", "repos_url": "https://api.github.com/users/uri-rodberg/repos", "events_url": "https://api.github.com/users/uri-rodberg/events{/privacy}", "received_events_url": "https://api.github.com/users/uri-rodberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-13T10:08:27Z", "updated_at": "2019-03-28T21:50:17Z", "closed_at": "2019-03-28T21:50:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\n*Please describe the problem you're encountering (e.g \"It's very complex to do [...]\")*\r\n\r\nIn https://factoryboy.readthedocs.io/en/latest/reference.html it says:\r\n\r\n`A decorator is also provided, decorating a single method accepting the same obj, created, extracted and keyword arguments as PostGeneration.`\r\n\r\nBut the positional arguments given there are `self, create, extracted, **kwargs`\r\n\r\n#### Proposed solution\r\n*Please provide some wild idea you think could solve this issue. It's much easier to work from an existing suggestion :)*\r\n\r\nI think it should be either `created` or `create`.\r\n\r\n#### Extra notes\r\n*Any notes you feel interesting to include: alternatives you've considered, reasons to include the change, anything!*\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/556", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/556/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/556/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/556/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/556", "id": 398164984, "node_id": "MDU6SXNzdWUzOTgxNjQ5ODQ=", "number": 556, "title": "Integrity error with OneToOneField and RelatedFactory", "user": {"login": "IngvarListard", "id": 16718103, "node_id": "MDQ6VXNlcjE2NzE4MTAz", "avatar_url": "https://avatars3.githubusercontent.com/u/16718103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IngvarListard", "html_url": "https://github.com/IngvarListard", "followers_url": "https://api.github.com/users/IngvarListard/followers", "following_url": "https://api.github.com/users/IngvarListard/following{/other_user}", "gists_url": "https://api.github.com/users/IngvarListard/gists{/gist_id}", "starred_url": "https://api.github.com/users/IngvarListard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IngvarListard/subscriptions", "organizations_url": "https://api.github.com/users/IngvarListard/orgs", "repos_url": "https://api.github.com/users/IngvarListard/repos", "events_url": "https://api.github.com/users/IngvarListard/events{/privacy}", "received_events_url": "https://api.github.com/users/IngvarListard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-11T07:32:47Z", "updated_at": "2019-04-04T21:17:38Z", "closed_at": "2019-04-04T21:17:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nI've tried to reproduce [this](https://factoryboy.readthedocs.io/en/latest/recipes.html#example-django-s-profile) simple example from factory_boy documentation with absolutely same case, but with few additional fields in my models.\r\nThe case is OneToOneField implementation with RelatedFactory. I wrote the code below, almost as in documentation example, and got:\r\n`IntegrityError: null value in column \"user_id\" violates not-null constraint`. \r\nI've made many attempts to run this code properly, I spent whole day by googling but all this was unsuccessful. Every time I got the same `IntegrityError`.\r\n\r\n#### To Reproduce\r\nDB: Postgres\r\nDjango: 1.11\r\nfactory_boy: 2.11\r\n\r\n##### Model / Factory code\r\n```python\r\n# Models\r\n\r\nclass User(AbstractBaseUser, PermissionsMixin):\r\n\tlogin = models.CharField('', max_length=64, unique=True)\r\n\tlast_name = models.CharField('', max_length=50)\r\n\tfirst_name = models.CharField('', max_length=50)\r\n\tpassword = models.CharField(max_length=64)\r\n\tsalt = models.CharField(max_length=64)\r\n\thire_date = models.DateField('')\r\n\r\n\r\n\r\nclass Occupation(SngyModel):\r\n\tuser = models.OneToOneField('users.User')\r\n\tbase = models.PositiveIntegerField('')\r\n\tadvance = models.PositiveIntegerField('')\r\n\tmain_company = models.ForeignKey('companies.Company', related_name='+')\r\n\r\n# Fabrics\r\n\r\n@factory.django.mute_signals(signals.post_save)\r\nclass UserFactory(factory.django.DjangoModelFactory):\r\n\tclass Meta:\r\n\t\tmodel = models.User\r\n\r\n\tlogin = factory.LazyAttribute(lambda obj: '%s@example.com' % obj.last_name)\r\n\tlast_name = fake('last_name')\r\n\tfirst_name = fake('first_name')\r\n\tpassword = fake('pystr',\r\n\t                min_chars=None,\r\n\t                max_chars=20)\r\n\tsalt = fake('pyint')\r\n\thire_date = fake('date_between_dates',\r\n\t                 date_start=datetime(2014, 1, 1).date(),\r\n\t                 date_end=datetime.now().date())\r\n\toccupation = factory.RelatedFactory(\r\n\t\t'users.factories.OccupationFactory',\r\n\t\t'user'\r\n\t)\r\n\r\n\r\n@factory.django.mute_signals(signals.post_save)\r\nclass OccupationFactory(factory.django.DjangoModelFactory):\r\n\tclass Meta:\r\n\t\tmodel = models.Occupation\r\n\r\n        user = factory.SubFactory(UserFactory, occupation=None)\r\n\tbase = factory.fuzzy.FuzzyInteger(7000, 17000)\r\n\tadvance = 5000\r\n\tmain_company = factory.SubFactory('companies.factories.CompanyFactory')\r\n```\r\n\r\n##### The issue\r\nTo create an instance of user model I just use `UserFactory()` and get the error below\r\n\r\n```python\r\n----> 1 u = users.factories.UserFactory()\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/factory/base.py in __call__(cls, **kwargs)\r\n     44             return cls.build(**kwargs)\r\n     45         elif cls._meta.strategy == enums.CREATE_STRATEGY:\r\n---> 46             return cls.create(**kwargs)\r\n     47         elif cls._meta.strategy == enums.STUB_STRATEGY:\r\n     48             return cls.stub(**kwargs)\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/factory/base.py in create(cls, **kwargs)\r\n    561     def create(cls, **kwargs):\r\n    562         \"\"\"Create an instance of the associated class, with overriden attrs.\"\"\"\r\n--> 563         return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n    564\r\n    565     @classmethod\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/factory/django.py in wrapped_generate(*args, **kwargs)\r\n    315                 # A mute_signals() object is not reentrant; use a copy every time.\r\n    316                 with self.copy():\r\n--> 317                     return generate_method(*args, **kwargs)\r\n    318\r\n    319             callable_obj._generate = wrapped_generate\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/factory/base.py in _generate(cls, strategy, params)\r\n    498\r\n    499         step = builder.StepBuilder(cls._meta, params, strategy)\r\n--> 500         return step.build()\r\n    501\r\n    502     @classmethod\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/factory/builder.py in build(self, parent_step, force_sequence)\r\n    297                 instance=instance,\r\n    298                 step=step,\r\n--> 299                 context=postgen_context,\r\n    300             )\r\n    301         self.factory_meta.use_postgeneration_results(\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/factory/declarations.py in call(self, instance, step, context)\r\n    673             utils.log_pprint((step,), passed_kwargs),\r\n    674         )\r\n--> 675         return step.recurse(factory, passed_kwargs)\r\n    676\r\n    677\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/factory/builder.py in recurse(self, factory, declarations, force_sequence)\r\n    231     def recurse(self, factory, declarations, force_sequence=None):\r\n    232         builder = self.builder.recurse(factory._meta, declarations)\r\n--> 233         return builder.build(parent_step=self, force_sequence=force_sequence)\r\n    234\r\n    235\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/factory/builder.py in build(self, parent_step, force_sequence)\r\n    277             step=step,\r\n    278             args=args,\r\n--> 279             kwargs=kwargs,\r\n    280         )\r\n    281\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/factory/base.py in instantiate(self, step, args, kwargs)\r\n    312             return self.factory._build(model, *args, **kwargs)\r\n    313         elif step.builder.strategy == enums.CREATE_STRATEGY:\r\n--> 314             return self.factory._create(model, *args, **kwargs)\r\n    315         else:\r\n    316             assert step.builder.strategy == enums.STUB_STRATEGY\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/factory/django.py in _create(cls, model_class, *args, **kwargs)\r\n    163             return cls._get_or_create(model_class, *args, **kwargs)\r\n    164\r\n--> 165         return manager.create(*args, **kwargs)\r\n    166\r\n    167     @classmethod\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/manager.py in manager_method(self, *args, **kwargs)\r\n     83         def create_method(name, method):\r\n     84             def manager_method(self, *args, **kwargs):\r\n---> 85                 return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n     86             manager_method.__name__ = method.__name__\r\n     87             manager_method.__doc__ = method.__doc__\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/query.py in create(self, **kwargs)\r\n    391         obj = self.model(**kwargs)\r\n    392         self._for_write = True\r\n--> 393         obj.save(force_insert=True, using=self.db)\r\n    394         return obj\r\n    395\r\n\r\n~/Documents/synergy/system/synergycrm/sngy_model.py in save(self, *args, **kwargs)\r\n     57                         after = None\r\n     58                 if not before or before_difference and after_difference:\r\n---> 59                         Journal.objects.create(model=model_name, instance_id=self.id, user=get_current_user(), before=before, after=after)\r\n     60\r\n     61         def delete(self, *args, **kwargs):\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/manager.py in manager_method(self, *args, **kwargs)\r\n     83         def create_method(name, method):\r\n     84             def manager_method(self, *args, **kwargs):\r\n---> 85                 return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n     86             manager_method.__name__ = method.__name__\r\n     87             manager_method.__doc__ = method.__doc__\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/query.py in create(self, **kwargs)\r\n    391         obj = self.model(**kwargs)\r\n    392         self._for_write = True\r\n--> 393         obj.save(force_insert=True, using=self.db)\r\n    394         return obj\r\n    395\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/base.py in save(self, force_insert, force_update, using, update_fields)\r\n    804\r\n    805         self.save_base(using=using, force_insert=force_insert,\r\n--> 806                        force_update=force_update, update_fields=update_fields)\r\n    807     save.alters_data = True\r\n    808\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/base.py in save_base(self, raw, force_insert, force_update, using, update_fields)\r\n    834             if not raw:\r\n    835                 self._save_parents(cls, using, update_fields)\r\n--> 836             updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\r\n    837         # Store the database on which the object was saved\r\n    838         self._state.db = using\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/base.py in _save_table(self, raw, cls, force_insert, force_update, using, update_fields)\r\n    920\r\n    921             update_pk = meta.auto_field and not pk_set\r\n--> 922             result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\r\n    923             if update_pk:\r\n    924                 setattr(self, meta.pk.attname, result)\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/base.py in _do_insert(self, manager, using, fields, update_pk, raw)\r\n    959         \"\"\"\r\n    960         return manager._insert([self], fields=fields, return_id=update_pk,\r\n--> 961                                using=using, raw=raw)\r\n    962\r\n    963     def delete(self, using=None, keep_parents=False):\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/manager.py in manager_method(self, *args, **kwargs)\r\n     83         def create_method(name, method):\r\n     84             def manager_method(self, *args, **kwargs):\r\n---> 85                 return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n     86             manager_method.__name__ = method.__name__\r\n     87             manager_method.__doc__ = method.__doc__\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/query.py in _insert(self, objs, fields, return_id, raw, using)\r\n   1058         query = sql.InsertQuery(self.model)\r\n   1059         query.insert_values(fields, objs, raw=raw)\r\n-> 1060         return query.get_compiler(using=using).execute_sql(return_id)\r\n   1061     _insert.alters_data = True\r\n   1062     _insert.queryset_only = False\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/models/sql/compiler.py in execute_sql(self, return_id)\r\n   1097         with self.connection.cursor() as cursor:\r\n   1098             for sql, params in self.as_sql():\r\n-> 1099                 cursor.execute(sql, params)\r\n   1100             if not (return_id and cursor):\r\n   1101                 return\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/backends/utils.py in execute(self, sql, params)\r\n     63                 return self.cursor.execute(sql)\r\n     64             else:\r\n---> 65                 return self.cursor.execute(sql, params)\r\n     66\r\n     67     def executemany(self, sql, param_list):\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/utils.py in __exit__(self, exc_type, exc_value, traceback)\r\n     92                 if dj_exc_type not in (DataError, IntegrityError):\r\n     93                     self.wrapper.errors_occurred = True\r\n---> 94                 six.reraise(dj_exc_type, dj_exc_value, traceback)\r\n     95\r\n     96     def __call__(self, func):\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/utils/six.py in reraise(tp, value, tb)\r\n    683             value = tp()\r\n    684         if value.__traceback__ is not tb:\r\n--> 685             raise value.with_traceback(tb)\r\n    686         raise value\r\n    687\r\n\r\n~/.local/share/virtualenvs/system-0Z3vcEIW/lib/python3.6/site-packages/django/db/backends/utils.py in execute(self, sql, params)\r\n     63                 return self.cursor.execute(sql)\r\n     64             else:\r\n---> 65                 return self.cursor.execute(sql, params)\r\n     66\r\n     67     def executemany(self, sql, param_list):\r\n\r\nIntegrityError: null value in column \"user_id\" violates not-null constraint\r\nDETAIL:  Failing row contains (5, users.Occupation, 5, 2019-01-11 06:18:04.796166+00, null, null, null).\r\n\r\n```\r\n\r\n\r\n#### Notes\r\nI've done some research and found out the following:\r\n- instances of User and Occupation models actually creates properly in DB, and I can get it via ORM Query with filled related fields;\r\n- I can suggest that the problem is in OccupationFactory. When I tried to create User instance without occupation field this done well, as expected. When I tried to create Occupation instance of the model separately of User it threw the same IntegrityError, BUT and a user, and an occupation are created.\r\n\r\nSo actually I have no idea which way I should to dig now. I suggested that is the bug.\r\n(I'm really sorry for my English)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/552", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/552/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/552/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/552/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/552", "id": 395440184, "node_id": "MDU6SXNzdWUzOTU0NDAxODQ=", "number": 552, "title": "Release 2.11.2?", "user": {"login": "aerostitch", "id": 4210981, "node_id": "MDQ6VXNlcjQyMTA5ODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4210981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aerostitch", "html_url": "https://github.com/aerostitch", "followers_url": "https://api.github.com/users/aerostitch/followers", "following_url": "https://api.github.com/users/aerostitch/following{/other_user}", "gists_url": "https://api.github.com/users/aerostitch/gists{/gist_id}", "starred_url": "https://api.github.com/users/aerostitch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aerostitch/subscriptions", "organizations_url": "https://api.github.com/users/aerostitch/orgs", "repos_url": "https://api.github.com/users/aerostitch/repos", "events_url": "https://api.github.com/users/aerostitch/events{/privacy}", "received_events_url": "https://api.github.com/users/aerostitch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-03T02:29:39Z", "updated_at": "2019-05-25T12:32:46Z", "closed_at": "2019-05-25T12:32:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys,\r\n\r\nI would really love to see a tagged release of factory_boy with an official Python 3.7 and Django 2.1 support. Do you know when you are planning to do the release 2.11.2?\r\n\r\nThanks for your help,\r\nJoseph", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/547", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/547/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/547/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/547/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/547", "id": 388333596, "node_id": "MDU6SXNzdWUzODgzMzM1OTY=", "number": 547, "title": "Flake8 Binary Operators Lint Fix", "user": {"login": "mattmahowald", "id": 10021147, "node_id": "MDQ6VXNlcjEwMDIxMTQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/10021147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattmahowald", "html_url": "https://github.com/mattmahowald", "followers_url": "https://api.github.com/users/mattmahowald/followers", "following_url": "https://api.github.com/users/mattmahowald/following{/other_user}", "gists_url": "https://api.github.com/users/mattmahowald/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattmahowald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattmahowald/subscriptions", "organizations_url": "https://api.github.com/users/mattmahowald/orgs", "repos_url": "https://api.github.com/users/mattmahowald/repos", "events_url": "https://api.github.com/users/mattmahowald/events{/privacy}", "received_events_url": "https://api.github.com/users/mattmahowald/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-06T18:08:54Z", "updated_at": "2018-12-07T09:05:27Z", "closed_at": "2018-12-07T09:04:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### Description\r\nTravis is failing for Python3.7 because the flake8 spec does not have a decision regarding where to break lines around binary operators.\r\n\r\n#### To Reproduce\r\nThis occurs in all current builds\r\n\r\n##### Model / Factory code\r\nFlake8 produces this failure `W504: line break after binary operator` on this code block in `utils.py`\r\n```python\r\n    def __str__(self):\r\n        return ', '.join(\r\n            [_safe_repr(arg) for arg in self.args] +  # violation here\r\n            [\r\n                '%s=%s' % (key, _safe_repr(value))\r\n                for key, value in self.kwargs.items()\r\n            ]\r\n        )\r\n```\r\n\r\n#### Suggestion for fixing\r\nThe easiest fix is to additionally disable `W504` in linting, which allows line breaking after binary operators. However, this is the superior method of line breaking.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/534", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/534/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/534/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/534", "id": 375249203, "node_id": "MDU6SXNzdWUzNzUyNDkyMDM=", "number": 534, "title": "Detach this repo from the fork", "user": {"login": "jonathan-s", "id": 2124818, "node_id": "MDQ6VXNlcjIxMjQ4MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2124818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathan-s", "html_url": "https://github.com/jonathan-s", "followers_url": "https://api.github.com/users/jonathan-s/followers", "following_url": "https://api.github.com/users/jonathan-s/following{/other_user}", "gists_url": "https://api.github.com/users/jonathan-s/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathan-s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathan-s/subscriptions", "organizations_url": "https://api.github.com/users/jonathan-s/orgs", "repos_url": "https://api.github.com/users/jonathan-s/repos", "events_url": "https://api.github.com/users/jonathan-s/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathan-s/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-10-29T22:50:44Z", "updated_at": "2018-10-30T12:22:39Z", "closed_at": "2018-10-30T11:24:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\nYou can't make code searches in forks. So to improve searchability it would be nice to detach the fork and make this a standalone repo. \r\n\r\n#### Proposed solution\r\nSend an email to github and ask them to make this a regular repo. Takes like 30 seconds, and they'll reply fast. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/530", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/530/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/530/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/530/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/530", "id": 372421503, "node_id": "MDU6SXNzdWUzNzI0MjE1MDM=", "number": 530, "title": "Include repr of model_class when instantiation fails", "user": {"login": "charlax", "id": 120501, "node_id": "MDQ6VXNlcjEyMDUwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/120501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlax", "html_url": "https://github.com/charlax", "followers_url": "https://api.github.com/users/charlax/followers", "following_url": "https://api.github.com/users/charlax/following{/other_user}", "gists_url": "https://api.github.com/users/charlax/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlax/subscriptions", "organizations_url": "https://api.github.com/users/charlax/orgs", "repos_url": "https://api.github.com/users/charlax/repos", "events_url": "https://api.github.com/users/charlax/events{/privacy}", "received_events_url": "https://api.github.com/users/charlax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-22T07:38:56Z", "updated_at": "2020-05-23T10:52:51Z", "closed_at": "2019-04-02T03:05:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### Description\r\n\r\nWhen instantiation of a `model_class` with a dataclass fails, the exception (`TypeError: __init__() missing 1 required positional argument: 'phone_number'`) does not include the class name, which it makes it very difficult to find which fixture failed.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/pytest_factoryboy/fixture.py\", line 212, in model_fixture\r\n    instance = Factory(**kwargs)\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 46, in __call__\r\n    return cls.create(**kwargs)\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 592, in create\r\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 526, in _generate\r\n    return step.build()\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/builder.py\", line 279, in build\r\n    kwargs=kwargs,\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 330, in instantiate\r\n    return self.factory._create(model, *args, **kwargs)\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 570, in _create\r\n    return model_class(*args, **kwargs)\r\nTypeError: __init__() missing 1 required positional argument: 'phone_number'\r\n```\r\n\r\n#### To Reproduce\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\n\r\nimport factory\r\n\r\n\r\n@dataclass\r\nclass Person:\r\n    phone_number: str\r\n\r\n\r\nclass PersonFactory(factory.Factory):\r\n    class Meta:\r\n        model = Person\r\n\r\n\r\nPersonFactory()\r\n```\r\n\r\nWill raise: `TypeError: __init__() missing 1 required positional argument: 'phone_number'`\r\n\r\n### Potential solution:\r\n\r\nModify `_create` with something like this:\r\n\r\n```python\r\ndef full_classname(o):\r\n    return o.__module__ + \".\" + o.__qualname__\r\n\r\n\r\n...\r\n\r\n    @classmethod\r\n    def _create(cls, model_class, *args, **kwargs):\r\n        \"\"\"Actually create an instance of the model_class.\r\n\r\n        Customization point, will be called once the full set of args and kwargs\r\n        has been computed.\r\n\r\n        Args:\r\n            model_class (type): the class for which an instance should be\r\n                created\r\n            args (tuple): arguments to use when creating the class\r\n            kwargs (dict): keyword arguments to use when creating the class\r\n        \"\"\"\r\n        try:\r\n            return model_class(*args, **kwargs)\r\n        except Exception as e:\r\n            raise ValueError(\r\n                \"Could not instantiate %s: %s\" % (full_classname(model_class), e)\r\n            )\r\n```\r\n\r\nWhich gives a much more readable exception:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 572, in _create\r\n    return model_class(*args, **kwargs)\r\nTypeError: __init__() missing 1 required positional argument: 'phone_number'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/pytest_factoryboy/fixture.py\", line 212, in model_fixture\r\n    instance = Factory(**kwargs)\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 50, in __call__\r\n    return cls.create(**kwargs)\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 598, in create\r\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 530, in _generate\r\n    return step.build()\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/builder.py\", line 279, in build\r\n    kwargs=kwargs,\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 334, in instantiate\r\n    return self.factory._create(model, *args, **kwargs)\r\n  File \"/.local/share/virtualenvs/truc-uUs12mY4/lib/python3.6/site-packages/factory/base.py\", line 575, in _create\r\n    \"Could not instantiate %s: %s\" % (full_classname(model_class), e)\r\nValueError: Could not instantiate person.Person: __init__() missing 1 required positional argument: 'phone_number'\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/517", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/517/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/517/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/517/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/517", "id": 359817085, "node_id": "MDU6SXNzdWUzNTk4MTcwODU=", "number": 517, "title": "FactoryBoy recursive stubs (i.e. SubFactory stubbing)", "user": {"login": "chriswyatt", "id": 98148, "node_id": "MDQ6VXNlcjk4MTQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/98148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriswyatt", "html_url": "https://github.com/chriswyatt", "followers_url": "https://api.github.com/users/chriswyatt/followers", "following_url": "https://api.github.com/users/chriswyatt/following{/other_user}", "gists_url": "https://api.github.com/users/chriswyatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriswyatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriswyatt/subscriptions", "organizations_url": "https://api.github.com/users/chriswyatt/orgs", "repos_url": "https://api.github.com/users/chriswyatt/repos", "events_url": "https://api.github.com/users/chriswyatt/events{/privacy}", "received_events_url": "https://api.github.com/users/chriswyatt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-13T09:34:45Z", "updated_at": "2018-09-13T11:06:42Z", "closed_at": "2018-09-13T10:50:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\nFactory boy is very useful for creating structures with lots of fake data. A design pattern I like to use is to create the stubs, and then use the stubs for checking the resulting model instance at the end of the test. This is really handy for checking integration (e.g. I can convert this data from the stubs, pass into, say, an XML parser, then check the generated instance at the end against the original stubs).\r\nThe issue that I'm having is that the subfactories are not created as stubs, so I want to either recursively generate stubs, or exclude the subfactories entirely.\r\n\r\n#### Proposed solution\r\nWithout knowing much about the factory boys internal, I don't know whether this would even be practical, let alone easy to implement. Even an option to just disable SubFactory and RelatedFactory would do the job as well. I might have a go at seeing if I can add a class override that will let me do this. It may not be too hard. Perhaps I could use the FACTORY_CLASS keyword argument to do some magic.\r\n\r\n#### Extra notes\r\nAs stubbing is a strategy, this feature could perhaps deal with allowing recursive strategies in general.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/516", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/516/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/516/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/516/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/516", "id": 359437881, "node_id": "MDU6SXNzdWUzNTk0Mzc4ODE=", "number": 516, "title": "Strange behaviour with SQLAlchemy", "user": {"login": "leamingrad", "id": 3791127, "node_id": "MDQ6VXNlcjM3OTExMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3791127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leamingrad", "html_url": "https://github.com/leamingrad", "followers_url": "https://api.github.com/users/leamingrad/followers", "following_url": "https://api.github.com/users/leamingrad/following{/other_user}", "gists_url": "https://api.github.com/users/leamingrad/gists{/gist_id}", "starred_url": "https://api.github.com/users/leamingrad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leamingrad/subscriptions", "organizations_url": "https://api.github.com/users/leamingrad/orgs", "repos_url": "https://api.github.com/users/leamingrad/repos", "events_url": "https://api.github.com/users/leamingrad/events{/privacy}", "received_events_url": "https://api.github.com/users/leamingrad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-12T11:30:50Z", "updated_at": "2019-04-04T21:22:24Z", "closed_at": "2019-04-04T21:22:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### The problem\r\nI am currently trying to create factories for SQLAlchemy models, one of which takes a parameter that specifies the length of a list of the other one.\r\n\r\nIn order to achieve this, I have extended `LazyAttribute` as suggested in https://github.com/FactoryBoy/factory_boy/issues/51, so that the new `LazyAttributeWithStrategy` is passed the creation strategy as well as the instance. I then build or create the list of child models with the following:\r\n\r\n```\r\n    @lazy_attribute_with_strategy\r\n    def books(self, strategy):\r\n        if strategy == factory.BUILD_STRATEGY:\r\n            return [\r\n                BookFactory.build(author=self)\r\n                for _ in range(self.num_books)\r\n            ]\r\n        elif strategy == factory.CREATE_STRATEGY:\r\n            return [\r\n                BookFactory.create(author=self)\r\n                for _ in range(self.num_books)\r\n            ]\r\n```\r\n\r\nHere `num_books` is a parameter on the factory. This works fine when using the build strategy, but when I use the create strategy it crashes with:\r\n\r\n```\r\nAttributeError: The parameter '_sa_instance_state' is unknown. Evaluated attributes are {'name': 'safe', 'num_books': 10}, definitions are <DeclarationSet: {'name': <factory.faker.Faker object at 0x7fa768efa978>, 'books': <__main__.LazyAttributeWithStrategy object at 0x7fa768efaa20>, 'num_books': 10}>.\r\n```\r\n\r\nThe attached `test_script.txt` can be run as a reproduction of the issue.\r\n\r\n[test_script.txt](https://github.com/FactoryBoy/factory_boy/files/2374858/test_script.txt)\r\n\r\n#### Proposed solution\r\nI'm not sure what the solution is here - but maybe the `SQLAlchemyModelFactory` needs to handle `_sa_instance_state` in some special way.\r\n\r\n#### Extra notes\r\nTo be honest, I am not convinced that a custom version of `LazyAttribute` is the best way to achieve what I actually want - the ability for a factory to take a parameter that sets the length of a list of child factories.\r\n\r\nOther ways I have tried:\r\n* Use a normal `LazyAttribute` with a `SubFactory` - this allows me to get the length parameter, but I cannot use `factory.SubFactory` inside the `LazyAttribute`\r\n* Use `factory.List` with a `SubFactory` - this allows me to generate the children correctly, but I could not find a way of accessing the length attribute in a way that would let me pass it to `range`, and the same issue with `_sa_instance_state` is also hit\r\n* Use a normal `LazyAttribute` with direct child instantiation - this allows me to get the length parameter, but the factory tries to add things to the database even if it isn't needed\r\n\r\nIs there a way to do this that I have missed?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/504", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/504/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/504/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/504/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/504", "id": 350144950, "node_id": "MDU6SXNzdWUzNTAxNDQ5NTA=", "number": 504, "title": "Allow Renamed Keyword Arguments to be Optional", "user": {"login": "mrname", "id": 1808790, "node_id": "MDQ6VXNlcjE4MDg3OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1808790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrname", "html_url": "https://github.com/mrname", "followers_url": "https://api.github.com/users/mrname/followers", "following_url": "https://api.github.com/users/mrname/following{/other_user}", "gists_url": "https://api.github.com/users/mrname/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrname/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrname/subscriptions", "organizations_url": "https://api.github.com/users/mrname/orgs", "repos_url": "https://api.github.com/users/mrname/repos", "events_url": "https://api.github.com/users/mrname/events{/privacy}", "received_events_url": "https://api.github.com/users/mrname/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 578610607, "node_id": "MDU6TGFiZWw1Nzg2MTA2MDc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/BeginnerFriendly", "name": "BeginnerFriendly", "color": "0e8a16", "default": false, "description": null}, {"id": 30490619, "node_id": "MDU6TGFiZWwzMDQ5MDYxOQ==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Feature", "name": "Feature", "color": "02d7e1", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-13T18:38:46Z", "updated_at": "2019-03-28T00:34:53Z", "closed_at": "2019-03-28T00:34:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### The problem\r\nWhen using the `rename` functionality to rename a keyword argument, an error is thrown if the keyword argument is not passed into the factory. For example, given a class with a field called `total_score` and adding `rename = {'score': 'total_score'}` will throw the following exception if `score` is not passed into the factory.\r\n\r\n```\r\n    @classmethod\r\n    def _rename_fields(cls, **kwargs):\r\n        for old_name, new_name in cls._meta.rename.items():\r\n>           kwargs[new_name] = kwargs.pop(old_name)\r\nE           KeyError: 'score'\r\n```\r\n\r\n#### Proposed solution\r\nAllow the model instance to be created if the keyword argument is not present, essentially just ignoring the keyword conversion.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/499", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/499/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/499/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/499/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/499", "id": 347710796, "node_id": "MDU6SXNzdWUzNDc3MTA3OTY=", "number": 499, "title": "Sequence and mixins does not work together", "user": {"login": "eugene-kulak", "id": 34233075, "node_id": "MDQ6VXNlcjM0MjMzMDc1", "avatar_url": "https://avatars1.githubusercontent.com/u/34233075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eugene-kulak", "html_url": "https://github.com/eugene-kulak", "followers_url": "https://api.github.com/users/eugene-kulak/followers", "following_url": "https://api.github.com/users/eugene-kulak/following{/other_user}", "gists_url": "https://api.github.com/users/eugene-kulak/gists{/gist_id}", "starred_url": "https://api.github.com/users/eugene-kulak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eugene-kulak/subscriptions", "organizations_url": "https://api.github.com/users/eugene-kulak/orgs", "repos_url": "https://api.github.com/users/eugene-kulak/repos", "events_url": "https://api.github.com/users/eugene-kulak/events{/privacy}", "received_events_url": "https://api.github.com/users/eugene-kulak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 210341587, "node_id": "MDU6TGFiZWwyMTAzNDE1ODc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/NeedInfo", "name": "NeedInfo", "color": "eb6420", "default": false, "description": null}, {"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-05T16:13:10Z", "updated_at": "2018-08-31T19:52:56Z", "closed_at": "2018-08-31T19:52:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nIf you use factory.Sequence as mixins to factories they do not work without saving records\r\n\r\n#### To Reproduce\r\n##### Model / Factory code\r\n```python\r\nclass IdSequence:\r\n    \"\"\" Mixin that brings id column with ascending auto incrementing\r\n    \"\"\"\r\n    id = factory.Sequence(lambda n: n + 1)\r\n\r\nclass ModelFactory(IdSequence, factory.alchemy.SQLAlchemyModelFactory):\r\n    ts_created = factory.Faker('date_time')\r\n    state = factory.Faker('pyint')\r\n```\r\n\r\n##### The issue\r\n```python\r\nobj = ModelFactory.build()\r\nobj.id # is None\r\n```\r\n\r\n#### Notes\r\nif add Sequence column without mixing it works as intended\r\n```python\r\nclass ModelFactory(factory.alchemy.SQLAlchemyModelFactory):\r\n    id = factory.Sequence(lambda n: n + 1)\r\n    ts_created = factory.Faker('date_time')\r\n    state = factory.Faker('pyint')\r\n\r\n\r\nobj = ModelFactory.build()\r\nobj.id # is 1\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/493", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/493/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/493/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/493/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/493", "id": 345535096, "node_id": "MDU6SXNzdWUzNDU1MzUwOTY=", "number": 493, "title": "Test factory_boy against nightly Python builds", "user": {"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 578610607, "node_id": "MDU6TGFiZWw1Nzg2MTA2MDc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/BeginnerFriendly", "name": "BeginnerFriendly", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-29T14:28:22Z", "updated_at": "2018-10-15T05:44:08Z", "closed_at": "2018-10-15T05:44:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "#### The problem\r\n``factory_boy`` should be tested against the latest Python development.\r\n\r\n#### Extra notes\r\nThere might be some issues with configuring Travis-CI with python nightly.\r\n\r\n#### Checklist:\r\n\r\n- [ ] Add the target to ``tox.ini``\r\n- [x] Add that target to ``.travis.yml``\r\n- [ ] Maybe think of a way to not mark a PR as failing if it is only failing against nightly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/492", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/492/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/492/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/492/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/492", "id": 345535038, "node_id": "MDU6SXNzdWUzNDU1MzUwMzg=", "number": 492, "title": "Test factory_boy against Python 3.7", "user": {"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 578610607, "node_id": "MDU6TGFiZWw1Nzg2MTA2MDc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/BeginnerFriendly", "name": "BeginnerFriendly", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-29T14:27:44Z", "updated_at": "2018-09-26T05:40:18Z", "closed_at": "2018-09-26T05:40:18Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "#### The problem\r\n``factory_boy`` should be tested against python 3.7.\r\n\r\n#### Extra notes\r\nThere might be some issues with configuring Travis-CI with python 3.7.\r\n\r\n#### Checklist:\r\n\r\n- [x] Add the target to ``tox.ini``\r\n- [ ] Add that target to ``.travis.yml``\r\n- [ ] Update the trove classifiers in ``setup.py``\r\n- [ ] Update the list of supported version in the docs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/490", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/490/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/490/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/490", "id": 342645095, "node_id": "MDU6SXNzdWUzNDI2NDUwOTU=", "number": 490, "title": "RelatedFactory seems not to set a built object", "user": {"login": "l3msh0", "id": 1799271, "node_id": "MDQ6VXNlcjE3OTkyNzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1799271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l3msh0", "html_url": "https://github.com/l3msh0", "followers_url": "https://api.github.com/users/l3msh0/followers", "following_url": "https://api.github.com/users/l3msh0/following{/other_user}", "gists_url": "https://api.github.com/users/l3msh0/gists{/gist_id}", "starred_url": "https://api.github.com/users/l3msh0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l3msh0/subscriptions", "organizations_url": "https://api.github.com/users/l3msh0/orgs", "repos_url": "https://api.github.com/users/l3msh0/repos", "events_url": "https://api.github.com/users/l3msh0/events{/privacy}", "received_events_url": "https://api.github.com/users/l3msh0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 327760582, "node_id": "MDU6TGFiZWwzMjc3NjA1ODI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Django", "name": "Django", "color": "bfdadc", "default": false, "description": null}, {"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-19T09:15:33Z", "updated_at": "2018-07-19T10:22:16Z", "closed_at": "2018-07-19T10:22:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here are models and factories which I implemented referring to the [document](http://factoryboy.readthedocs.io/en/latest/reference.html#relatedfactory) of `RelatedFactory`.\r\n\r\nmodels.py\r\n\r\n```python\r\nfrom django.db import models\r\n\r\n\r\nclass City(models.Model):\r\n    name = models.CharField(max_length=100)\r\n    capital_of = models.ForeignKey('factory_test.Country', on_delete=models.CASCADE)\r\n\r\n\r\nclass Country(models.Model):\r\n    lang = models.CharField(max_length=100)\r\n    capital_city = models.ForeignKey('factory_test.City', on_delete=models.CASCADE, null=True)\r\n```\r\n\r\nfactories.py\r\n```python\r\nfrom factory.django import DjangoModelFactory\r\n\r\nfrom . import models\r\n\r\n\r\nclass CityFactory(DjangoModelFactory):\r\n    class Meta:\r\n        model = models.City\r\n\r\n    capital_of = None\r\n    name = \"Tronto\"\r\n\r\n\r\nclass CountryFactory(DjangoModelFactory):\r\n    class Meta:\r\n        model = models.Country\r\n\r\n    lang = 'fr'\r\n    capital_city = factory.RelatedFactory(CityFactory, 'capital_of', name='Paris')\r\n\r\n```\r\n\r\nI expect that a `City` object is set to `county.capital_city` if I execute `country = CountryFactory()` but actual value is `None` instead.\r\n\r\nIs this intended behaviour? I'm not sure but I wonder an object built by RelatedFactory should be set to parent instance like [this](https://github.com/l3msh0/factory_boy/commit/3aa4ebe6e025434fab27a4aabf3698964e2a3812).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/487", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/487/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/487/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/487/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/487", "id": 341086811, "node_id": "MDU6SXNzdWUzNDEwODY4MTE=", "number": 487, "title": "Add support for Django unique_together", "user": {"login": "broxeph", "id": 6900892, "node_id": "MDQ6VXNlcjY5MDA4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6900892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/broxeph", "html_url": "https://github.com/broxeph", "followers_url": "https://api.github.com/users/broxeph/followers", "following_url": "https://api.github.com/users/broxeph/following{/other_user}", "gists_url": "https://api.github.com/users/broxeph/gists{/gist_id}", "starred_url": "https://api.github.com/users/broxeph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/broxeph/subscriptions", "organizations_url": "https://api.github.com/users/broxeph/orgs", "repos_url": "https://api.github.com/users/broxeph/repos", "events_url": "https://api.github.com/users/broxeph/events{/privacy}", "received_events_url": "https://api.github.com/users/broxeph/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 210341587, "node_id": "MDU6TGFiZWwyMTAzNDE1ODc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/NeedInfo", "name": "NeedInfo", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-13T16:43:23Z", "updated_at": "2018-07-16T19:04:56Z", "closed_at": "2018-07-16T19:04:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "`DjangoModelFactory._get_or_create()` doesn't appear to have any support for the `unique_together` attribute of `Model.Meta`. Perhaps it'd be a good idea to allow `unique_together` tuples in `DjangoModelFactory.Meta.django_get_or_create`?\r\n\r\nI'll attach a PR to illustrate a potential approach. Can modify/add tests as necessary.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/486", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/486/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/486/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/486/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/486", "id": 340363174, "node_id": "MDU6SXNzdWUzNDAzNjMxNzQ=", "number": 486, "title": "Different results when running unit tests using Faker one by one and all together", "user": {"login": "emanuil-tolev", "id": 1190172, "node_id": "MDQ6VXNlcjExOTAxNzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1190172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emanuil-tolev", "html_url": "https://github.com/emanuil-tolev", "followers_url": "https://api.github.com/users/emanuil-tolev/followers", "following_url": "https://api.github.com/users/emanuil-tolev/following{/other_user}", "gists_url": "https://api.github.com/users/emanuil-tolev/gists{/gist_id}", "starred_url": "https://api.github.com/users/emanuil-tolev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emanuil-tolev/subscriptions", "organizations_url": "https://api.github.com/users/emanuil-tolev/orgs", "repos_url": "https://api.github.com/users/emanuil-tolev/repos", "events_url": "https://api.github.com/users/emanuil-tolev/events{/privacy}", "received_events_url": "https://api.github.com/users/emanuil-tolev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-11T18:51:45Z", "updated_at": "2018-07-11T18:56:51Z", "closed_at": "2018-07-11T18:56:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run tests on their own, the data differs than when running the entire test module. Introducing an inability to run tests on their own seems unwise. What am I missing about using this library in tests?\r\n\r\n```python\r\nfrom faker import Faker\r\nfrom unittest import TestCase\r\n\r\nfake = Faker()\r\nfake.seed(1)\r\n\r\n\r\nclass FakerTestCase(TestCase):\r\n    def test_01(self):\r\n        n = fake.name()\r\n        assert n == 'Ryan Gallagher', n\r\n        # when running this test on its own, it passes\r\n        # when running the entire module, it also passes since it's the first one to be executed\r\n\r\n    def test_02(self):\r\n        n = fake.name()\r\n        assert n == 'Ryan Gallagher', n\r\n        # when running this test on its own, it passes\r\n        # when running the entire module, it fails. n is always \"Jon Cole\"\r\n\r\n    def test_03(self):\r\n        n = fake.name()\r\n        assert n == 'Ryan Gallagher', n\r\n        # when running this test on its own, it passes\r\n        # when running the entire module, it fails. n is always \"Rachel Davis\"\r\n```\r\n\r\nThe test runner is nosetests. As you can see, nothing fancy is going on, like test execution in random order.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/483", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/483/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/483/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/483", "id": 335828626, "node_id": "MDU6SXNzdWUzMzU4Mjg2MjY=", "number": 483, "title": "Instances returned by get due to django_get_or_create don't apply kwargs", "user": {"login": "carn1x", "id": 783281, "node_id": "MDQ6VXNlcjc4MzI4MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/783281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carn1x", "html_url": "https://github.com/carn1x", "followers_url": "https://api.github.com/users/carn1x/followers", "following_url": "https://api.github.com/users/carn1x/following{/other_user}", "gists_url": "https://api.github.com/users/carn1x/gists{/gist_id}", "starred_url": "https://api.github.com/users/carn1x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carn1x/subscriptions", "organizations_url": "https://api.github.com/users/carn1x/orgs", "repos_url": "https://api.github.com/users/carn1x/repos", "events_url": "https://api.github.com/users/carn1x/events{/privacy}", "received_events_url": "https://api.github.com/users/carn1x/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 327760582, "node_id": "MDU6TGFiZWwzMjc3NjA1ODI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Django", "name": "Django", "color": "bfdadc", "default": false, "description": null}, {"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-06-26T13:48:57Z", "updated_at": "2020-06-25T17:43:20Z", "closed_at": "2018-06-26T14:27:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Model\r\n```python\r\nclass Currency(models.Model):\r\n    iso = models.CharField(max_length=4, unique=True)\r\n    fee = models.DecimalField(max_digits=8, decimal_places=2)\r\n```\r\n\r\nFactory\r\n```python\r\nclass CurrencyFactory(DjangoModelFactory):\r\n\r\n    iso = factory.LazyAttribute(lambda x: fake.currency_code())\r\n\r\n    class Meta:\r\n        model = Currency\r\n        django_get_or_create = ('iso',)\r\n```\r\n\r\nTest\r\n```python\r\n>>> CurrencyFactory(iso='HKD').fee\r\nDecimal('10.00')\r\n>>> CurrencyFactory(iso='HKD', fee=5).fee\r\nDecimal('10.00')\r\n>>> CurrencyFactory(iso='ABC', fee=5).fee\r\nDecimal('5.00')\r\n>>> CurrencyFactory(iso='ABC', fee=6).fee\r\nDecimal('5.00')\r\n```\r\n\r\nDespite the overriding value provided in the factory constructor, the overriding values are ignored. Is this by design and the docs should ideally clarify this or is this an oversight? It's particularly annoying to debug this issue in a large test suite that may run in a random order and so sometimes collide.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/482", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/482/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/482/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/482/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/482", "id": 334807689, "node_id": "MDU6SXNzdWUzMzQ4MDc2ODk=", "number": 482, "title": "Factory returns Nonetype", "user": {"login": "KaiserKarel", "id": 28512997, "node_id": "MDQ6VXNlcjI4NTEyOTk3", "avatar_url": "https://avatars3.githubusercontent.com/u/28512997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KaiserKarel", "html_url": "https://github.com/KaiserKarel", "followers_url": "https://api.github.com/users/KaiserKarel/followers", "following_url": "https://api.github.com/users/KaiserKarel/following{/other_user}", "gists_url": "https://api.github.com/users/KaiserKarel/gists{/gist_id}", "starred_url": "https://api.github.com/users/KaiserKarel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KaiserKarel/subscriptions", "organizations_url": "https://api.github.com/users/KaiserKarel/orgs", "repos_url": "https://api.github.com/users/KaiserKarel/repos", "events_url": "https://api.github.com/users/KaiserKarel/events{/privacy}", "received_events_url": "https://api.github.com/users/KaiserKarel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-22T09:23:27Z", "updated_at": "2018-07-15T08:59:01Z", "closed_at": "2018-07-15T08:58:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Creating or building a model using the following factory results in a Nonetype error.\r\n\r\n```python\r\nclass WithdrawalFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = Withdrawal\r\n\r\n    tx_id = factory.Faker(\"word\")\r\n    amount = factory.Faker(\"money\", amount=100)\r\n    date_transmitted = factory.Faker(\"date_time\")\r\n    date_arrived = factory.LazyAttribute(\r\n        lambda o: o.factory_parent.date_transmitted + datetime.timedelta(days=1)\r\n    )\r\n    account = factory.SubFactory(BankAccountFactory)\r\n\r\n    request = factory.SubFactory(WithdrawalRequestFactory,\r\n        amount=factory.LazyAttribute(lambda o: o.factory_parent.amount),\r\n        account=factory.LazyAttribute(lambda o: o.factory_parent.account),\r\n        date=factory.LazyAttribute(lambda o: o.factory_parent.date_transmitted - datetime.timedelta(days=1)),\r\n        fulfilled=True,\r\n    )\r\n```\r\n\r\nThe error: \r\n```python\r\nFile \"/home/circleci/CIP-user-backend/.venv/lib/python3.6/site-packages/factory/base.py\", line 46, in __call__\r\n    return cls.create(**kwargs)\r\nAttributeError: 'NoneType' object has no attribute 'date_transmitted'\r\n```\r\n\r\nAssociated model:\r\n```python\r\nclass Withdrawal(SafeDeleteModel):\r\n    \"\"\"\r\n    A withdrawal made by a customer.\r\n    \"\"\"\r\n\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n\r\n    tx_id = models.CharField(max_length=60)\r\n    # true withdrawn amount.\r\n    amount = MoneyField(max_digits=11, decimal_places=2, default_currency='EUR', validators=[greater_than_zero_validator])\r\n\r\n    # the date we sent it in from bank account.\r\n    date_transmitted = models.DateTimeField()\r\n\r\n    # the date the bank sent back as the withdrawal arriving.\r\n    date_arrived = models.DateTimeField(null=True)\r\n    account = models.ForeignKey(\r\n        to=BankAccount,\r\n        on_delete=models.CASCADE\r\n    )\r\n    request = models.ForeignKey(\r\n        to=WithdrawalRequest,\r\n        on_delete=models.CASCADE\r\n    )\r\n\r\n    def __str__(self):\r\n        return self.tx_id[0:10] + \"...\"\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/477", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/477/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/477/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/477/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/477", "id": 325822341, "node_id": "MDU6SXNzdWUzMjU4MjIzNDE=", "number": 477, "title": "Can't import from . models", "user": {"login": "graffam", "id": 8599498, "node_id": "MDQ6VXNlcjg1OTk0OTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/8599498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graffam", "html_url": "https://github.com/graffam", "followers_url": "https://api.github.com/users/graffam/followers", "following_url": "https://api.github.com/users/graffam/following{/other_user}", "gists_url": "https://api.github.com/users/graffam/gists{/gist_id}", "starred_url": "https://api.github.com/users/graffam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graffam/subscriptions", "organizations_url": "https://api.github.com/users/graffam/orgs", "repos_url": "https://api.github.com/users/graffam/repos", "events_url": "https://api.github.com/users/graffam/events{/privacy}", "received_events_url": "https://api.github.com/users/graffam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-23T18:26:37Z", "updated_at": "2018-05-23T20:07:39Z", "closed_at": "2018-05-23T20:07:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey everyone, new factory_boy user, but i am unable to use even the most basic use cases. I am using python 3.6.5, on a fresh environment and cannot create the most basic models...\r\n\r\nThis fails:\r\n```\r\nimport factory\r\nfrom . import models\r\n\r\nclass UserFactory(factory.Factory):\r\n    class Meta:\r\n        model = models.User\r\n\r\n    first_name = 'John'\r\n    last_name = 'Doe'\r\n    admin = False\r\n\r\n# Another, different, factory for the same object\r\nclass AdminFactory(factory.Factory):\r\n    class Meta:\r\n        model = models.User\r\n\r\n    first_name = 'Admin'\r\n    last_name = 'User'\r\n    admin = True\r\n```\r\n```\r\n    from . import models\r\nImportError: cannot import name 'models'\r\n```\r\n\r\nHow do I fix this error?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/473", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/473/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/473/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/473", "id": 317630619, "node_id": "MDU6SXNzdWUzMTc2MzA2MTk=", "number": 473, "title": "How to achieve RelatedFactory(factory, 'field') on none nullable field", "user": {"login": "jorenvh1", "id": 14889143, "node_id": "MDQ6VXNlcjE0ODg5MTQz", "avatar_url": "https://avatars0.githubusercontent.com/u/14889143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorenvh1", "html_url": "https://github.com/jorenvh1", "followers_url": "https://api.github.com/users/jorenvh1/followers", "following_url": "https://api.github.com/users/jorenvh1/following{/other_user}", "gists_url": "https://api.github.com/users/jorenvh1/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorenvh1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorenvh1/subscriptions", "organizations_url": "https://api.github.com/users/jorenvh1/orgs", "repos_url": "https://api.github.com/users/jorenvh1/repos", "events_url": "https://api.github.com/users/jorenvh1/events{/privacy}", "received_events_url": "https://api.github.com/users/jorenvh1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-25T13:34:29Z", "updated_at": "2018-04-27T06:17:21Z", "closed_at": "2018-04-27T06:17:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can you achieve a RelatedFactory on a field which is not nullable? \r\nWhen I try this, I receive django ValidationErrors {'field': ['This field cannot be null.']}", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/472", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/472/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/472/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/472/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/472", "id": 317534619, "node_id": "MDU6SXNzdWUzMTc1MzQ2MTk=", "number": 472, "title": "Reference to self (circular reference)", "user": {"login": "jorenvh1", "id": 14889143, "node_id": "MDQ6VXNlcjE0ODg5MTQz", "avatar_url": "https://avatars0.githubusercontent.com/u/14889143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorenvh1", "html_url": "https://github.com/jorenvh1", "followers_url": "https://api.github.com/users/jorenvh1/followers", "following_url": "https://api.github.com/users/jorenvh1/following{/other_user}", "gists_url": "https://api.github.com/users/jorenvh1/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorenvh1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorenvh1/subscriptions", "organizations_url": "https://api.github.com/users/jorenvh1/orgs", "repos_url": "https://api.github.com/users/jorenvh1/repos", "events_url": "https://api.github.com/users/jorenvh1/events{/privacy}", "received_events_url": "https://api.github.com/users/jorenvh1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-25T08:51:01Z", "updated_at": "2018-04-27T06:17:08Z", "closed_at": "2018-04-27T06:17:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have 2 models which depend on each other. \r\nOne is a 'Component', the other is a 'ComponentVersion'.\r\nComponent has a property latest_version, referring to a ComponentVersion. \r\nFor convenience we also added a property 'versioned_model' on ComponentVersion, referring to the Component.\r\n\r\nNow I am wondering how I can create a ComponentFactory which sets de latest_version to a ComponentVersionFactory and also setting the versioned_model of the ComponentVersion to the newly create ComponentFactory object...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/466", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/466/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/466/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/466", "id": 311439720, "node_id": "MDU6SXNzdWUzMTE0Mzk3MjA=", "number": 466, "title": "release 2.10.0 has broken passing conditional kwargs to post_generation methods", "user": {"login": "dlobue", "id": 155965, "node_id": "MDQ6VXNlcjE1NTk2NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/155965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlobue", "html_url": "https://github.com/dlobue", "followers_url": "https://api.github.com/users/dlobue/followers", "following_url": "https://api.github.com/users/dlobue/following{/other_user}", "gists_url": "https://api.github.com/users/dlobue/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlobue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlobue/subscriptions", "organizations_url": "https://api.github.com/users/dlobue/orgs", "repos_url": "https://api.github.com/users/dlobue/repos", "events_url": "https://api.github.com/users/dlobue/events{/privacy}", "received_events_url": "https://api.github.com/users/dlobue/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490793, "node_id": "MDU6TGFiZWwzMDQ5MDc5Mw==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-04-05T00:59:26Z", "updated_at": "2018-05-04T21:38:20Z", "closed_at": "2018-05-04T21:38:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "This issue is easiesr to show than explain. Here's a simplified version of my code:\r\n\r\n```python\r\n    import factory\r\n    from factory.fuzzy import FuzzyText\r\n\r\n\r\n    class CopyTarget(object):\r\n        def __init__(self, label, plain_m2m=None):\r\n            self.label = label\r\n            self.plain_m2m = plain_m2m or []\r\n\r\n\r\n    class Other(object):\r\n        def __init__(self, label):\r\n            self.label = label\r\n\r\n\r\n    class BaseFactory(factory.Factory):\r\n        label = FuzzyText()\r\n\r\n\r\n    class OtherFactory(BaseFactory):\r\n        class Meta:\r\n            model = Other\r\n\r\n\r\n    class CopyTargetFactory(BaseFactory):\r\n        class Meta:\r\n            model = CopyTarget\r\n\r\n        class Params:\r\n            empty = factory.Trait(\r\n                plain_m2m=None,\r\n                plain_m2m__num=0,\r\n            )\r\n\r\n        plain_m2m__num = 3\r\n\r\n        @factory.post_generation\r\n        def plain_m2m(self, create, extracted, num=0, **kwargs):\r\n            if not create:\r\n                # Simple build, do nothing.\r\n                return\r\n\r\n            if extracted is not None:\r\n                if not isinstance(extracted, Iterable):\r\n                    extracted = [extracted]\r\n                self.plain_m2m.extend(*extracted)\r\n            elif num:\r\n                self.plain_m2m.extend(*(OtherFactory()\r\n                                     for _ in xrange(num)))\r\n\r\n\r\n\r\n    if __name__ == '__main__':\r\n        value = CopyTargetFactory()\r\n```\r\n\r\nWhat's happening is in 2.10.0 is xrange is not receiving an integer like it expects. Here's the traceback:\r\n\r\n    Traceback (most recent call last):\r\n      File \"/root/docs/notes/gist/factoryboy_maybe_broke_postgen.py\", line 55, in <module>\r\n        value = CopyTargetFactory()\r\n      File \"/root/.pyenv/versions/frontend/lib/python2.7/site-packages/factory/base.py\", line 46, in __call__\r\n        return cls.create(**kwargs)\r\n      File \"/root/.pyenv/versions/frontend/lib/python2.7/site-packages/factory/base.py\", line 563, in create\r\n        return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n      File \"/root/.pyenv/versions/frontend/lib/python2.7/site-packages/factory/base.py\", line 500, in _generate\r\n        return step.build()\r\n      File \"/root/.pyenv/versions/frontend/lib/python2.7/site-packages/factory/builder.py\", line 293, in build\r\n        context=postgen_context,\r\n      File \"/root/.pyenv/versions/frontend/lib/python2.7/site-packages/factory/declarations.py\", line 472, in call\r\n        context=context,\r\n      File \"/root/.pyenv/versions/frontend/lib/python2.7/site-packages/factory/declarations.py\", line 610, in call\r\n        instance, create, context.value, **context.extra)\r\n      File \"/root/docs/notes/gist/factoryboy_maybe_broke_postgen.py\", line 50, in plain_m2m\r\n        for _ in xrange(num)))\r\n    TypeError: an integer is required\r\n\r\nFor some reason, `num` is an instance of `Maybe`. Here's the repr of it: `Maybe(<SelfAttribute(u'empty', default=False)>, yes=0, no=3)`. I've used this code successfully in factory-boy version 2.7.0 and 2.9.2.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/465", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/465/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/465/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/465", "id": 311430922, "node_id": "MDU6SXNzdWUzMTE0MzA5MjI=", "number": 465, "title": "Model returned from .create() doesn't have an id", "user": {"login": "darthdeus", "id": 123374, "node_id": "MDQ6VXNlcjEyMzM3NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/123374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darthdeus", "html_url": "https://github.com/darthdeus", "followers_url": "https://api.github.com/users/darthdeus/followers", "following_url": "https://api.github.com/users/darthdeus/following{/other_user}", "gists_url": "https://api.github.com/users/darthdeus/gists{/gist_id}", "starred_url": "https://api.github.com/users/darthdeus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darthdeus/subscriptions", "organizations_url": "https://api.github.com/users/darthdeus/orgs", "repos_url": "https://api.github.com/users/darthdeus/repos", "events_url": "https://api.github.com/users/darthdeus/events{/privacy}", "received_events_url": "https://api.github.com/users/darthdeus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-05T00:01:04Z", "updated_at": "2018-05-05T00:07:49Z", "closed_at": "2018-05-05T00:07:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I might be missing something, but the docs say that `create()` returns a saved model, but if I simply do `UserFactory.create().id` I get back `None`, yet if I do `user = UserFactory.create(); user.save()` then the `user.id` is actually set.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/464", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/464/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/464/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/464", "id": 310353800, "node_id": "MDU6SXNzdWUzMTAzNTM4MDA=", "number": 464, "title": "[question] How to generate random values........................................", "user": {"login": "seospace", "id": 35610968, "node_id": "MDQ6VXNlcjM1NjEwOTY4", "avatar_url": "https://avatars1.githubusercontent.com/u/35610968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seospace", "html_url": "https://github.com/seospace", "followers_url": "https://api.github.com/users/seospace/followers", "following_url": "https://api.github.com/users/seospace/following{/other_user}", "gists_url": "https://api.github.com/users/seospace/gists{/gist_id}", "starred_url": "https://api.github.com/users/seospace/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seospace/subscriptions", "organizations_url": "https://api.github.com/users/seospace/orgs", "repos_url": "https://api.github.com/users/seospace/repos", "events_url": "https://api.github.com/users/seospace/events{/privacy}", "received_events_url": "https://api.github.com/users/seospace/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}, {"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-01T21:02:04Z", "updated_at": "2018-05-05T12:38:03Z", "closed_at": "2018-05-05T00:10:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need random emails, like:\r\n\r\n'Aksoas9a8sd9aASDkasdas9@azxclkasoiASDASd908s.Com'\r\n\r\nI cant find in docs how factoryboy can help me.\r\nQuestion is, i am stupid?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/462", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/462/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/462/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/462/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/462", "id": 307141622, "node_id": "MDU6SXNzdWUzMDcxNDE2MjI=", "number": 462, "title": "The docs mention a ``_next_sequence`` attribute which doesn't exist", "user": {"login": "fgblomqvist", "id": 649260, "node_id": "MDQ6VXNlcjY0OTI2MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/649260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fgblomqvist", "html_url": "https://github.com/fgblomqvist", "followers_url": "https://api.github.com/users/fgblomqvist/followers", "following_url": "https://api.github.com/users/fgblomqvist/following{/other_user}", "gists_url": "https://api.github.com/users/fgblomqvist/gists{/gist_id}", "starred_url": "https://api.github.com/users/fgblomqvist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fgblomqvist/subscriptions", "organizations_url": "https://api.github.com/users/fgblomqvist/orgs", "repos_url": "https://api.github.com/users/fgblomqvist/repos", "events_url": "https://api.github.com/users/fgblomqvist/events{/privacy}", "received_events_url": "https://api.github.com/users/fgblomqvist/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-21T07:27:08Z", "updated_at": "2018-10-15T05:42:18Z", "closed_at": "2018-10-15T05:42:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is no such property as `_next_sequence` (http://factoryboy.readthedocs.io/en/latest/reference.html#factory.Factory.reset_sequence)\r\n\r\n```\r\ntype object 'UserFactory' has no attribute '_next_sequence'\r\n```\r\nAm I missing something here?\r\n\r\nEDIT: Ignore my original issue, however, the second part of it (this property missing) still stands", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/461", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/461/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/461/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/461", "id": 306753832, "node_id": "MDU6SXNzdWUzMDY3NTM4MzI=", "number": 461, "title": "Docs on sqlalchemy_session_persistence?", "user": {"login": "fgblomqvist", "id": 649260, "node_id": "MDQ6VXNlcjY0OTI2MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/649260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fgblomqvist", "html_url": "https://github.com/fgblomqvist", "followers_url": "https://api.github.com/users/fgblomqvist/followers", "following_url": "https://api.github.com/users/fgblomqvist/following{/other_user}", "gists_url": "https://api.github.com/users/fgblomqvist/gists{/gist_id}", "starred_url": "https://api.github.com/users/fgblomqvist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fgblomqvist/subscriptions", "organizations_url": "https://api.github.com/users/fgblomqvist/orgs", "repos_url": "https://api.github.com/users/fgblomqvist/repos", "events_url": "https://api.github.com/users/fgblomqvist/events{/privacy}", "received_events_url": "https://api.github.com/users/fgblomqvist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-20T07:22:43Z", "updated_at": "2018-03-20T07:24:23Z", "closed_at": "2018-03-20T07:24:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any documentation that describes where and how to use `sqlalchemy_session_persistence`? (merged in #310)\r\n\r\nCan't find it.\r\n\r\nEDIT: Scratch that, found it here: http://factoryboy.readthedocs.io/en/latest/orms.html?highlight=sqlalchemy_session_persistence#factory.alchemy.SQLAlchemyOptions\r\n\r\nMy bad.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/460", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/460/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/460/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/460", "id": 305305268, "node_id": "MDU6SXNzdWUzMDUzMDUyNjg=", "number": 460, "title": "Question: Parallel", "user": {"login": "listingmirror", "id": 19509188, "node_id": "MDQ6VXNlcjE5NTA5MTg4", "avatar_url": "https://avatars1.githubusercontent.com/u/19509188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/listingmirror", "html_url": "https://github.com/listingmirror", "followers_url": "https://api.github.com/users/listingmirror/followers", "following_url": "https://api.github.com/users/listingmirror/following{/other_user}", "gists_url": "https://api.github.com/users/listingmirror/gists{/gist_id}", "starred_url": "https://api.github.com/users/listingmirror/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/listingmirror/subscriptions", "organizations_url": "https://api.github.com/users/listingmirror/orgs", "repos_url": "https://api.github.com/users/listingmirror/repos", "events_url": "https://api.github.com/users/listingmirror/events{/privacy}", "received_events_url": "https://api.github.com/users/listingmirror/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-14T19:51:36Z", "updated_at": "2018-03-22T13:28:53Z", "closed_at": "2018-03-22T13:25:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "factory_boy works amazing single.. but I am having an issue in parallel mode..\r\n\r\nIf I launch my tests with something like\r\n\r\n`python manage.py test -k --parallel=4`\r\n\r\nSome of my models have a field setup like this:\r\n\r\n`sku = factory.Sequence(lambda n: 'sku-%d' % n)`\r\n\r\nI notice that 1 in 20 runs or so, two of my sequences collide -  Which makes sense, nothing from one fork to know that another fork has already uses a sequence, so both decide to make a SKU-99 at the same time.\r\n\r\nWhat is a normal strategy to prevent this? Should I start each sequence at process_pid * 1000 or something?  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/458", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/458/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/458/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/458", "id": 304000067, "node_id": "MDU6SXNzdWUzMDQwMDAwNjc=", "number": 458, "title": "Create a FuzzyTime attribute", "user": {"login": "YPCrumble", "id": 12019216, "node_id": "MDQ6VXNlcjEyMDE5MjE2", "avatar_url": "https://avatars2.githubusercontent.com/u/12019216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YPCrumble", "html_url": "https://github.com/YPCrumble", "followers_url": "https://api.github.com/users/YPCrumble/followers", "following_url": "https://api.github.com/users/YPCrumble/following{/other_user}", "gists_url": "https://api.github.com/users/YPCrumble/gists{/gist_id}", "starred_url": "https://api.github.com/users/YPCrumble/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YPCrumble/subscriptions", "organizations_url": "https://api.github.com/users/YPCrumble/orgs", "repos_url": "https://api.github.com/users/YPCrumble/repos", "events_url": "https://api.github.com/users/YPCrumble/events{/privacy}", "received_events_url": "https://api.github.com/users/YPCrumble/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-09T22:24:57Z", "updated_at": "2018-07-23T17:20:53Z", "closed_at": "2018-07-23T17:20:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Would the maintainers be interested in a FuzzyTime attribute for FactoryBoy? I'm thinking something like \r\n\r\n    FuzzyTime([lower_bound_time], [upper_bound_time])\r\n\r\n...where both bounds are optional. Or is there a way to achieve this with the current FactoryBoy implementation? Happy to create a PR if that's helpful. Thanks for maintaining this repo!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/455", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/455/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/455/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/455", "id": 295629928, "node_id": "MDU6SXNzdWUyOTU2Mjk5Mjg=", "number": 455, "title": "Better support for copying fields to sub factory - expose _Resolver__declarations.contexts", "user": {"login": "samuelcolvin", "id": 4039449, "node_id": "MDQ6VXNlcjQwMzk0NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4039449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samuelcolvin", "html_url": "https://github.com/samuelcolvin", "followers_url": "https://api.github.com/users/samuelcolvin/followers", "following_url": "https://api.github.com/users/samuelcolvin/following{/other_user}", "gists_url": "https://api.github.com/users/samuelcolvin/gists{/gist_id}", "starred_url": "https://api.github.com/users/samuelcolvin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samuelcolvin/subscriptions", "organizations_url": "https://api.github.com/users/samuelcolvin/orgs", "repos_url": "https://api.github.com/users/samuelcolvin/repos", "events_url": "https://api.github.com/users/samuelcolvin/events{/privacy}", "received_events_url": "https://api.github.com/users/samuelcolvin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}, {"id": 210341587, "node_id": "MDU6TGFiZWwyMTAzNDE1ODc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/NeedInfo", "name": "NeedInfo", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-02-08T19:06:24Z", "updated_at": "2018-02-11T19:01:10Z", "closed_at": "2018-02-11T19:01:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "The solutions given in [the docs on copying fields to a subfactory](http://factoryboy.readthedocs.io/en/latest/recipes.html#copying-fields-to-a-subfactory) don't work properly.\r\n\r\nTake the following factory:\r\n\r\n```py\r\n# students and clients both have a \"user\" field, students and clients should always share\r\n# the same company defined at user.company\r\nimport factory.django\r\nfrom models import Student\r\nfrom factories import UserFactory, ClientFactory\r\n\r\ngen_user = factory.LazyAttribute(lambda o: UserFactory(company=o.factory_parent.user.company))\r\n\r\n\r\nclass StudentFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = Student\r\n\r\n    user = factory.SubFactory(UserFactory)\r\n    # client = factory.SubFactory(ClientFactory, user=gen_user)\r\n\r\n    @factory.lazy_attribute\r\n    def client(self):\r\n        kwargs = dict(user__company=self.user.company)\r\n        kwargs.update(self._Resolver__declarations.contexts.get('client', {}))\r\n        return ClientFactory(**kwargs)\r\n```\r\n\r\nThe commented out solution `# client = factory.SubFactory(ClientFactory, user=gen_user)` doesn't work because if I define `StudentFactory(client__age=10, client__user__name='foobar')` `client.age` is honored but `client.user.name` is ignored.\r\n\r\nThe second solution with a `lazy_attribute` works but is ugly and wasn't easy to find.\r\n\r\n`self._Resolver__declarations.contexts` should be exposed in a more user friendly variable and documented.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/452", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/452/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/452/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/452", "id": 294557056, "node_id": "MDU6SXNzdWUyOTQ1NTcwNTY=", "number": 452, "title": "RelatedFactory Argument Dependent on Subfactory", "user": {"login": "jpulec", "id": 407780, "node_id": "MDQ6VXNlcjQwNzc4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/407780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpulec", "html_url": "https://github.com/jpulec", "followers_url": "https://api.github.com/users/jpulec/followers", "following_url": "https://api.github.com/users/jpulec/following{/other_user}", "gists_url": "https://api.github.com/users/jpulec/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpulec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpulec/subscriptions", "organizations_url": "https://api.github.com/users/jpulec/orgs", "repos_url": "https://api.github.com/users/jpulec/repos", "events_url": "https://api.github.com/users/jpulec/events{/privacy}", "received_events_url": "https://api.github.com/users/jpulec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-05T21:58:43Z", "updated_at": "2018-02-05T22:20:36Z", "closed_at": "2018-02-05T22:20:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, not sure if this is possible, but I can't seem to get to work and was wondering if there was a different way to accomplish it. Basically, I have a Subfactory on a Factory, and want to pass the result of that factory as an argument to a RelatedFactory. i.e.\r\n\r\n```python\r\n\r\nclass OrderFactory(factory.DjangoModelFactory):\r\n    vendor = factory.SubFactory('factories.VendorFactory')\r\n\r\n    order_item = factory.RelatedFactory(\r\n        'factories.OrderItemFactory',\r\n        'order', \r\n        menu_item__vendor=factory.SelfAttribute('vendor'),\r\n    )\r\n```\r\n\r\nI've tried using just `vendor` and `..vendor` for the self attribute, but with just `vendor` I get a `Cyclic lazy attribute definition error` and with `..vendor` it doesn't seem to identify the field.\r\n\r\nIs there a way to achieve this behavior somehow that I'm not seeing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/451", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/451/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/451/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/451", "id": 293943180, "node_id": "MDU6SXNzdWUyOTM5NDMxODA=", "number": 451, "title": "Django ImageField is a SubFactory now, should it be?", "user": {"login": "olegpidsadnyi", "id": 2608181, "node_id": "MDQ6VXNlcjI2MDgxODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2608181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegpidsadnyi", "html_url": "https://github.com/olegpidsadnyi", "followers_url": "https://api.github.com/users/olegpidsadnyi/followers", "following_url": "https://api.github.com/users/olegpidsadnyi/following{/other_user}", "gists_url": "https://api.github.com/users/olegpidsadnyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegpidsadnyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegpidsadnyi/subscriptions", "organizations_url": "https://api.github.com/users/olegpidsadnyi/orgs", "repos_url": "https://api.github.com/users/olegpidsadnyi/repos", "events_url": "https://api.github.com/users/olegpidsadnyi/events{/privacy}", "received_events_url": "https://api.github.com/users/olegpidsadnyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-02T16:21:02Z", "updated_at": "2018-02-11T17:34:09Z", "closed_at": "2018-02-11T16:34:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've received an issue https://github.com/pytest-dev/pytest-factoryboy/issues/58\r\n\r\npytest-factoryboy introspects the declarations in order to create fixtures automatically related to the current factory.\r\n\r\nSo far I'm comparing isinstance(decl, SubFactory) and isinstance(decl, RelatedFactory).\r\nNow this breaks for the django.ImageField since it is a subclass of a Dict and also a SubFactory (really weird hierarchy). Is it not abused? Should it really be a SubFactory?\r\nIf ImageField is a SubFactory why doesn't it accept a factory as a parameter in order to respect the interface of the SubFactory (common OOP sense). If ImageField IS A SubFactory == False then why it won't use composition and invoke a dict factory inside the implementation?\r\n\r\nI could check exact types like if type(decl, SubFactory) then create fixture for the model referenced by SubFactory. But this will prevent from subclassing a SubFactory in the valid cases.\r\n\r\nAny suggestions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/449", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/449/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/449/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/449", "id": 293516002, "node_id": "MDU6SXNzdWUyOTM1MTYwMDI=", "number": 449, "title": "Django FileField throws \"fixture 'dict' not found\"", "user": {"login": "dabdada", "id": 6900955, "node_id": "MDQ6VXNlcjY5MDA5NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6900955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dabdada", "html_url": "https://github.com/dabdada", "followers_url": "https://api.github.com/users/dabdada/followers", "following_url": "https://api.github.com/users/dabdada/following{/other_user}", "gists_url": "https://api.github.com/users/dabdada/gists{/gist_id}", "starred_url": "https://api.github.com/users/dabdada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dabdada/subscriptions", "organizations_url": "https://api.github.com/users/dabdada/orgs", "repos_url": "https://api.github.com/users/dabdada/repos", "events_url": "https://api.github.com/users/dabdada/events{/privacy}", "received_events_url": "https://api.github.com/users/dabdada/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-01T12:41:21Z", "updated_at": "2018-02-11T15:31:02Z", "closed_at": "2018-02-11T15:31:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a testsetup with:\r\n* python 2.7\r\n* django 1.8.18\r\n* pytest == 3.4.0\r\n* pytest-factoryboy == 2.0.0\r\n* factoryboy == 2.10.0\r\n\r\nWhen using factory.django.FileField as a SubFactory for an attribute for one of our Django Models and want to execute a test using the LazyFixture, We get an Error \"fixture 'dict' not found\".\r\n\r\nWhen installing pytest-factoryboy 1.3.2 and factoryboy 2.8.1 the tests do run successfully.\r\n\r\nThe change we observed so far is that the declarations for the django.FileField changed from \"declarations.ParameteredAttribute\" to \"declarations.Dict\" (Which seems to be related somehow).\r\n\r\nUnfortunatelly I was not able to investigate any further. If you need some more information please do not hasitate. I am glad to provide them as fast as possible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/448", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/448/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/448/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/448", "id": 293114032, "node_id": "MDU6SXNzdWUyOTMxMTQwMzI=", "number": 448, "title": "Factory classes accept only model attribute names as variables", "user": {"login": "cho-leukeleu", "id": 20397882, "node_id": "MDQ6VXNlcjIwMzk3ODgy", "avatar_url": "https://avatars0.githubusercontent.com/u/20397882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cho-leukeleu", "html_url": "https://github.com/cho-leukeleu", "followers_url": "https://api.github.com/users/cho-leukeleu/followers", "following_url": "https://api.github.com/users/cho-leukeleu/following{/other_user}", "gists_url": "https://api.github.com/users/cho-leukeleu/gists{/gist_id}", "starred_url": "https://api.github.com/users/cho-leukeleu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cho-leukeleu/subscriptions", "organizations_url": "https://api.github.com/users/cho-leukeleu/orgs", "repos_url": "https://api.github.com/users/cho-leukeleu/repos", "events_url": "https://api.github.com/users/cho-leukeleu/events{/privacy}", "received_events_url": "https://api.github.com/users/cho-leukeleu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-31T10:55:11Z", "updated_at": "2018-02-11T18:54:43Z", "closed_at": "2018-02-11T18:54:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi and thanks for this nice faking tool !\r\n\r\nI ran into a strange behaviour today. Apparently all variables used within a factory class need to exist as an attribute in the model it's faking.\r\n\r\nInitializing `treatment_state` this way:\r\n```python\r\nclass ClientFactory(UserProfileFactory):\r\n    class Meta:\r\n        model = Client\r\n        django_get_or_create = ('user',)\r\n\r\n    treatment_state = factory.Faker('random_element', elements=[st for st, _ in TREATMENT_STATES])\r\n```\r\nwill raise this error\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/christineho/Documents/dev.vm1/project/current_instance/project/tests/test_selenium/test_flow.py\", line 30, in setUp\r\n    user__first_name='JanSmit'\r\n  File \"/Users/christineho/.virtualenvs/project/lib/python2.7/site-packages/factory/base.py\", line 46, in __call__\r\n    return cls.create(**kwargs)\r\n  File \"/Users/christineho/.virtualenvs/project/lib/python2.7/site-packages/factory/base.py\", line 568, in create\r\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n  File \"/Users/christineho/.virtualenvs/project/lib/python2.7/site-packages/factory/base.py\", line 505, in _generate\r\n    return step.build()\r\n  File \"/Users/christineho/.virtualenvs/project/lib/python2.7/site-packages/factory/builder.py\", line 279, in build\r\n    kwargs=kwargs,\r\n  File \"/Users/christineho/.virtualenvs/project/lib/python2.7/site-packages/factory/base.py\", line 314, in instantiate\r\n    return self.factory._create(model, *args, **kwargs)\r\n  File \"/Users/christineho/.virtualenvs/project/lib/python2.7/site-packages/factory/django.py\", line 163, in _create\r\n    return cls._get_or_create(model_class, *args, **kwargs)\r\n  File \"/Users/christineho/.virtualenvs/project/lib/python2.7/site-packages/factory/django.py\", line 154, in _get_or_create\r\n    instance, _created = manager.get_or_create(*args, **key_fields)\r\n  File \"/Users/christineho/.virtualenvs/project/lib/python2.7/site-packages/django/db/models/manager.py\", line 85, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/Users/christineho/.virtualenvs/project/lib/python2.7/site-packages/django/db/models/query.py\", line 459, in get_or_create\r\n    lookup, params = self._extract_model_params(defaults, **kwargs)\r\n  File \"/Users/christineho/.virtualenvs/project/lib/python2.7/site-packages/django/db/models/query.py\", line 534, in _extract_model_params\r\n    \"', '\".join(sorted(invalid_params)),\r\nFieldError: Invalid field name(s) for model Client: 'st'.\r\n```\r\nwhile this would work fine\r\n```\r\ntreatment_state = factory.Faker('random_element', elements=[treatment_state for treatment_state, _ in TREATMENT_STATES])\r\n```\r\n\r\nLet me know if you need more info.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/447", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/447/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/447/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/447", "id": 293078846, "node_id": "MDU6SXNzdWUyOTMwNzg4NDY=", "number": 447, "title": "`create` method is not called in SubFactory from 2.9.0 version", "user": {"login": "user0007", "id": 1457761, "node_id": "MDQ6VXNlcjE0NTc3NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1457761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/user0007", "html_url": "https://github.com/user0007", "followers_url": "https://api.github.com/users/user0007/followers", "following_url": "https://api.github.com/users/user0007/following{/other_user}", "gists_url": "https://api.github.com/users/user0007/gists{/gist_id}", "starred_url": "https://api.github.com/users/user0007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/user0007/subscriptions", "organizations_url": "https://api.github.com/users/user0007/orgs", "repos_url": "https://api.github.com/users/user0007/repos", "events_url": "https://api.github.com/users/user0007/events{/privacy}", "received_events_url": "https://api.github.com/users/user0007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-31T09:00:58Z", "updated_at": "2018-01-31T10:05:52Z", "closed_at": "2018-01-31T10:05:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nclass MySubFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = MySubModel\r\n\r\n    @classmethod\r\n    def create(cls, **kwargs):\r\n        print(\"HELLO\")\r\n        return super().create(**kwargs)\r\n\r\nclass MyFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = MyModel\r\n\r\n    rel = factory.SubFactory(MySubFactory)\r\n\r\n# factory_boy==2.8.1 and lower\r\n\r\n>> MyFactory.create()\r\n\"HELLO\"\r\n\r\n# factory_boy==2.9.0 and higher\r\n\r\n>> MyFactory.create()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/443", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/443/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/443/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/443", "id": 291693549, "node_id": "MDU6SXNzdWUyOTE2OTM1NDk=", "number": 443, "title": "calling reset() on a fresh Iterator causes exception", "user": {"login": "rrauenza", "id": 1376251, "node_id": "MDQ6VXNlcjEzNzYyNTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1376251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rrauenza", "html_url": "https://github.com/rrauenza", "followers_url": "https://api.github.com/users/rrauenza/followers", "following_url": "https://api.github.com/users/rrauenza/following{/other_user}", "gists_url": "https://api.github.com/users/rrauenza/gists{/gist_id}", "starred_url": "https://api.github.com/users/rrauenza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rrauenza/subscriptions", "organizations_url": "https://api.github.com/users/rrauenza/orgs", "repos_url": "https://api.github.com/users/rrauenza/repos", "events_url": "https://api.github.com/users/rrauenza/events{/privacy}", "received_events_url": "https://api.github.com/users/rrauenza/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490793, "node_id": "MDU6TGFiZWwzMDQ5MDc5Mw==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-25T19:49:11Z", "updated_at": "2018-01-30T00:49:25Z", "closed_at": "2018-01-28T21:56:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n  File \".../virtualenv-2.7.5/lib/python2.7/site-packages/factory/declarations.py\", line 186, in reset\r\n    self.iterator.reset()\r\nAttributeError: 'NoneType' object has no attribute 'reset'\r\n```\r\nThis is of course because we haven't used the iterator yet!  But in my use case, I have a factory that I want to reset the iterator at the top of a loop ... (Ok, I could move it to the bottom instead)\r\n\r\nWhat do you think of just adding ```if self.iterator``` above the call?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/441", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/441/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/441/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/441", "id": 289532997, "node_id": "MDU6SXNzdWUyODk1MzI5OTc=", "number": 441, "title": "How to create sqlalchemy session dynamically?", "user": {"login": "ProstoMaxim", "id": 1978546, "node_id": "MDQ6VXNlcjE5Nzg1NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1978546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ProstoMaxim", "html_url": "https://github.com/ProstoMaxim", "followers_url": "https://api.github.com/users/ProstoMaxim/followers", "following_url": "https://api.github.com/users/ProstoMaxim/following{/other_user}", "gists_url": "https://api.github.com/users/ProstoMaxim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ProstoMaxim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ProstoMaxim/subscriptions", "organizations_url": "https://api.github.com/users/ProstoMaxim/orgs", "repos_url": "https://api.github.com/users/ProstoMaxim/repos", "events_url": "https://api.github.com/users/ProstoMaxim/events{/privacy}", "received_events_url": "https://api.github.com/users/ProstoMaxim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-18T07:43:50Z", "updated_at": "2018-01-28T12:45:25Z", "closed_at": "2018-01-28T12:45:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "`class UserFactory(SQLAlchemyModelFactory):\r\n\r\n    class Meta:\r\n        model = User\r\n        sqlalchemy_session = Session`\r\n\r\nFactory initializing during module import. What is the best way to postpone initializing sqlalchemy_session, since I create my Session later.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/440", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/440/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/440/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/440/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/440", "id": 287855380, "node_id": "MDU6SXNzdWUyODc4NTUzODA=", "number": 440, "title": "Reference to sub app model field with string notation", "user": {"login": "timabilov", "id": 17686230, "node_id": "MDQ6VXNlcjE3Njg2MjMw", "avatar_url": "https://avatars3.githubusercontent.com/u/17686230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timabilov", "html_url": "https://github.com/timabilov", "followers_url": "https://api.github.com/users/timabilov/followers", "following_url": "https://api.github.com/users/timabilov/following{/other_user}", "gists_url": "https://api.github.com/users/timabilov/gists{/gist_id}", "starred_url": "https://api.github.com/users/timabilov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timabilov/subscriptions", "organizations_url": "https://api.github.com/users/timabilov/orgs", "repos_url": "https://api.github.com/users/timabilov/repos", "events_url": "https://api.github.com/users/timabilov/events{/privacy}", "received_events_url": "https://api.github.com/users/timabilov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 327760582, "node_id": "MDU6TGFiZWwzMjc3NjA1ODI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Django", "name": "Django", "color": "bfdadc", "default": false, "description": null}, {"id": 210341587, "node_id": "MDU6TGFiZWwyMTAzNDE1ODc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/NeedInfo", "name": "NeedInfo", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-11T17:05:40Z", "updated_at": "2018-05-05T00:15:30Z", "closed_at": "2018-05-05T00:15:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is no support for model field with string notation possibly.\r\nIt only saw first part of dot as app and 'subapp.model' as model\r\nI think this is strange because of wrong parse and message like 'subapp.model'  doesn't exist,  although we can parse whole model i.e.  with location method or etc . \r\n\r\n    class Meta:\r\n        model = 'app.subapp.Model'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/437", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/437/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/437/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/437", "id": 279745278, "node_id": "MDU6SXNzdWUyNzk3NDUyNzg=", "number": 437, "title": "'Options' object has no attribute 'pre_declarations'", "user": {"login": "AuHau", "id": 6072250, "node_id": "MDQ6VXNlcjYwNzIyNTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/6072250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AuHau", "html_url": "https://github.com/AuHau", "followers_url": "https://api.github.com/users/AuHau/followers", "following_url": "https://api.github.com/users/AuHau/following{/other_user}", "gists_url": "https://api.github.com/users/AuHau/gists{/gist_id}", "starred_url": "https://api.github.com/users/AuHau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AuHau/subscriptions", "organizations_url": "https://api.github.com/users/AuHau/orgs", "repos_url": "https://api.github.com/users/AuHau/repos", "events_url": "https://api.github.com/users/AuHau/events{/privacy}", "received_events_url": "https://api.github.com/users/AuHau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-06T13:03:56Z", "updated_at": "2017-12-06T13:12:27Z", "closed_at": "2017-12-06T13:12:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to make work tests on one of our projects and I am running into weird error which I am not sure how to debug. Could you please point me to right direction?\r\n\r\nDjango version: 1.10.8\r\nPython version: 3.6.3\r\nFactoryBoy version: latest\r\n\r\nTraceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/unittest/case.py\", line 59, in testPartExecutor\r\n    yield\r\n  File \"/usr/local/lib/python3.6/unittest/case.py\", line 605, in run\r\n    testMethod()\r\n  File \"/usr/src/app/dj/apps/job/tests/views.py\", line 36, in test_job_history\r\n    driver = self._create_driver()\r\n  File \"/usr/src/app/dj/apps/job/tests/views.py\", line 586, in _create_driver\r\n    return DriverFactory(*args, **kwargs)\r\n  File \"/usr/src/app/var/ve/lib/python3.6/site-packages/factory/base.py\", line 46, in __call__\r\n    return cls.create(**kwargs)\r\n  File \"/usr/src/app/var/ve/lib/python3.6/site-packages/factory/base.py\", line 568, in create\r\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n  File \"/usr/src/app/var/ve/lib/python3.6/site-packages/factory/base.py\", line 505, in _generate\r\n    return step.build()\r\n  File \"/usr/src/app/var/ve/lib/python3.6/site-packages/factory/builder.py\", line 272, in build\r\n    step.resolve(pre)\r\n  File \"/usr/src/app/var/ve/lib/python3.6/site-packages/factory/builder.py\", line 221, in resolve\r\n    self.attributes[field_name] = getattr(self.stub, field_name)\r\n  File \"/usr/src/app/var/ve/lib/python3.6/site-packages/factory/builder.py\", line 363, in __getattr__\r\n    extra=declaration.context,\r\n  File \"/usr/src/app/var/ve/lib/python3.6/site-packages/factory/declarations.py\", line 306, in evaluate\r\n    return self.generate(step, defaults)\r\n  File \"/usr/src/app/var/ve/lib/python3.6/site-packages/factory/declarations.py\", line 395, in generate\r\n    return step.recurse(subfactory, params, force_sequence=force_sequence)\r\n  File \"/usr/src/app/var/ve/lib/python3.6/site-packages/factory/builder.py\", line 233, in recurse\r\n    return builder.build(parent_step=self, force_sequence=force_sequence)\r\n  File \"/usr/src/app/var/ve/lib/python3.6/site-packages/factory/builder.py\", line 256, in build\r\n    base_pre=self.factory_meta.pre_declarations,\r\nAttributeError: 'Options' object has no attribute 'pre_declarations'\r\n```\r\n\r\nThe factory is rather simple:\r\n```\r\nclass DriverFactory(factory.django.DjangoModelFactory):\r\n    bank_account = factory.SubFactory('profiles.tests.models.factories.BankAccount')\r\n\r\n    first_name = factory.Sequence(lambda n: 'John{0}'.format(n))\r\n    last_name = factory.Sequence(lambda n: 'Doe{0}'.format(n))\r\n    phone = '+412123123123'\r\n\r\n    user = factory.SubFactory('profiles.tests.models.factories.UserFactory')\r\n    address = factory.SubFactory('profiles.tests.models.factories.AddressFactory')\r\n\r\n    class Meta:\r\n        model = Driver\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/427", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/427/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/427/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/427/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/427", "id": 268014868, "node_id": "MDU6SXNzdWUyNjgwMTQ4Njg=", "number": 427, "title": "factory.Faker does not respect max_length of django model fields", "user": {"login": "Alireza2n", "id": 25861612, "node_id": "MDQ6VXNlcjI1ODYxNjEy", "avatar_url": "https://avatars2.githubusercontent.com/u/25861612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alireza2n", "html_url": "https://github.com/Alireza2n", "followers_url": "https://api.github.com/users/Alireza2n/followers", "following_url": "https://api.github.com/users/Alireza2n/following{/other_user}", "gists_url": "https://api.github.com/users/Alireza2n/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alireza2n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alireza2n/subscriptions", "organizations_url": "https://api.github.com/users/Alireza2n/orgs", "repos_url": "https://api.github.com/users/Alireza2n/repos", "events_url": "https://api.github.com/users/Alireza2n/events{/privacy}", "received_events_url": "https://api.github.com/users/Alireza2n/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-24T12:37:35Z", "updated_at": "2018-02-02T15:36:53Z", "closed_at": "2018-02-02T15:36:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nFirst of all, great job on the whole project, I'm really grateful.\r\n\r\nI am using `factory.Faker`, but I get numerous errors on exceeding `max_length` of field:\r\n\r\n> django.db.utils.DataError: value too long for type character varying\r\n\r\nsuch problem does not exist with `factory.fuzzy.FuzzyText` as it accepts a `length` argument.\r\n\r\nI think we should add `length` as an argument to `factory.Faker` or maybe force it to respect max_length in django's models.\r\n\r\nHere are some exerts of my code:\r\n**Model**\r\n`class InsuranceTypes(models.Model):`\r\n`    type_name = models.CharField(max_length=50, verbose_name=_('type_name'), unique=True)`\r\n\r\n**Factory**\r\n`class InsuranceTypesFactory(factory.django.DjangoModelFactory):`\r\n`    class Meta:`\r\n`        model = InsuranceTypes`\r\n`    type_name = factory.Faker('word')`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/426", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/426/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/426/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/426", "id": 265635582, "node_id": "MDU6SXNzdWUyNjU2MzU1ODI=", "number": 426, "title": "How to create Profile.username with faker?", "user": {"login": "legshort", "id": 4326608, "node_id": "MDQ6VXNlcjQzMjY2MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4326608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/legshort", "html_url": "https://github.com/legshort", "followers_url": "https://api.github.com/users/legshort/followers", "following_url": "https://api.github.com/users/legshort/following{/other_user}", "gists_url": "https://api.github.com/users/legshort/gists{/gist_id}", "starred_url": "https://api.github.com/users/legshort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/legshort/subscriptions", "organizations_url": "https://api.github.com/users/legshort/orgs", "repos_url": "https://api.github.com/users/legshort/repos", "events_url": "https://api.github.com/users/legshort/events{/privacy}", "received_events_url": "https://api.github.com/users/legshort/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-10-16T03:16:18Z", "updated_at": "2019-03-20T16:43:34Z", "closed_at": "2017-12-02T14:02:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wanna create random value with `faker` [wrapper](http://factoryboy.readthedocs.io/en/latest/reference.html#faker), however, I can't get extract any value from it.\r\n\r\n```python\r\n# not working\r\nusername = factory.Faker('profile')['username']\r\n```\r\n\r\nHas anyone done this before?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/423", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/423/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/423/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/423", "id": 263740757, "node_id": "MDU6SXNzdWUyNjM3NDA3NTc=", "number": 423, "title": "Add support of Mimesis's data providers", "user": {"login": "lk-geimfari", "id": 15812620, "node_id": "MDQ6VXNlcjE1ODEyNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/15812620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lk-geimfari", "html_url": "https://github.com/lk-geimfari", "followers_url": "https://api.github.com/users/lk-geimfari/followers", "following_url": "https://api.github.com/users/lk-geimfari/following{/other_user}", "gists_url": "https://api.github.com/users/lk-geimfari/gists{/gist_id}", "starred_url": "https://api.github.com/users/lk-geimfari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lk-geimfari/subscriptions", "organizations_url": "https://api.github.com/users/lk-geimfari/orgs", "repos_url": "https://api.github.com/users/lk-geimfari/repos", "events_url": "https://api.github.com/users/lk-geimfari/events{/privacy}", "received_events_url": "https://api.github.com/users/lk-geimfari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-08T18:32:40Z", "updated_at": "2017-11-11T13:31:10Z", "closed_at": "2017-11-11T13:31:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "How about supporting Mimesis which has more data providers and has not any side dependencies.\r\n\r\nI have created this issue in the repository of [Mimesis](https://github.com/lk-geimfari/mimesis/issues/244#issuecomment-335023201). And i want to understand where this feature must be implemented, in factory_boy or in Mimesis.\r\n\r\nI think that both libraries will only benefit if you'll support Mimesis's data providers in factory_boy.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/422", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/422/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/422/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/422", "id": 263597555, "node_id": "MDU6SXNzdWUyNjM1OTc1NTU=", "number": 422, "title": "Mixing factory instances and native Django model instances breaks unittests", "user": {"login": "chrisspen", "id": 116631, "node_id": "MDQ6VXNlcjExNjYzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/116631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisspen", "html_url": "https://github.com/chrisspen", "followers_url": "https://api.github.com/users/chrisspen/followers", "following_url": "https://api.github.com/users/chrisspen/following{/other_user}", "gists_url": "https://api.github.com/users/chrisspen/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisspen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisspen/subscriptions", "organizations_url": "https://api.github.com/users/chrisspen/orgs", "repos_url": "https://api.github.com/users/chrisspen/repos", "events_url": "https://api.github.com/users/chrisspen/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisspen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-06T23:32:46Z", "updated_at": "2017-10-07T07:00:43Z", "closed_at": "2017-10-07T02:21:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Maybe I'm missing something from the docs, but I've run into a huge roadblock with factory-boy.\r\n\r\nI have a simple schema like:\r\n\r\n    class Category(models.Model):\r\n\r\n        name = models.CharField(max_length=100, unique=True)\r\n\r\n    class Distributor(models.Model):\r\n\r\n        name = models.CharField(max_length=100, unique=True)\r\n\r\n        category = models.ForeignKey(Category)\r\n\r\n    class Company(models.Model):\r\n\r\n        name = models.CharField(max_length=100, unique=True)\r\n\r\n        distributor = models.ForeignKey(Distributor)\r\n\r\nThe category instances are fixed, so I don't need factory-boy to auto-generate them. I load them in via a fixture at the start of my unittests. I also load some distributor instances in via a fixture, but I still need to randomly generate new ones.\r\n\r\nThe problem I've run into is that factories don't seem to play nicely with pre-existing instances loaded in via fixtures. For example, I first tried building my factories like:\r\n\r\n\r\n    CAT_ID_TO_DATA = dict((r['pk'], r['fields']) for r in json.load(open('categories.json')))\r\n\r\n    class CategoryFactory(factory.DjangoModelFactory):\r\n\r\n        id = factory.fuzzy.FuzzyChoice(CAT_ID_TO_DATA.keys())\r\n    \r\n        name = factory.LazyAttributeSequence(lambda o, n: CAT_ID_TO_DATA[o.id])\r\n\r\n        class Meta:\r\n            model = Category\r\n\r\n    class DistributorFactory(factory.DjangoModelFactory):\r\n\r\n        name = factory.Faker('company')\r\n\r\n        category = factory.SubFactory(CategoryFactory)\r\n\r\n        class Meta:\r\n            model = models.Distributor\r\n\r\n    class CompanyFactory(factory.DjangoModelFactory):\r\n\r\n        name = factory.Faker('company')\r\n\r\n        distributor = factory.SubFactory(DistributorFactory)\r\n\r\n        class Meta:\r\n            model = models.Company\r\n\r\nMy unittest looks like:\r\n\r\n    def test_create_company(self):\r\n\r\n        company = CompanyFactory()\r\n        company.save()\r\n        print('company:', company.id)\r\n        self.assertEqual(Company.objects.all().count(), 1)\r\n\r\nThis fails with with a unique ID constraint error, because the CategoryFactory does an insert instead of an update, which collides with the pre-loaded category records.\r\n\r\nSo I thought, this should be a simple fix. Just modify my Distributor.save to assign a default category and remove the CategoryFactory altogether, right? That left me with:\r\n\r\n    class DistributorFactory(factory.DjangoModelFactory):\r\n\r\n        name = factory.Faker('company')\r\n\r\n        class Meta:\r\n            model = models.Distributor\r\n\r\n    class CompanyFactory(factory.DjangoModelFactory):\r\n\r\n        name = factory.Faker('company')\r\n\r\n        distributor = factory.SubFactory(DistributorFactory)\r\n\r\n        class Meta:\r\n            model = models.Company\r\n\r\nImagine my surprise when my unittest then output:\r\n\r\n    company: 1\r\n    Traceback (most recent call last):\r\n        tests.py\r\n               self.assertEqual(Company.objects.all().count(), 1)\r\n    AssertionError: 0 != 1\r\n\r\nSo, now that I'm mixing factory-created instances with fixture-loaded instances, that's somehow caused the factory-created instances to exist outside of my unittest's transaction, rendering them unqueryable.\r\n\r\nI tried re-writing my factory to do the category lookup inside `_prepare` like:\r\n\r\n    class DistributorFactory(factory.DjangoModelFactory):\r\n\r\n        name = factory.Faker('company')\r\n\r\n        class Meta:\r\n            model = models.Distributor\r\n\r\n            @classmethod\r\n            def _prepare(cls, create, **kwargs):\r\n                kwargs['category'] = Category.objects.get(id=1)\r\n                return super(DistributorFactory, cls)._prepare(create, **kwargs)\r\n\r\nbut that resulted in a similar error.\r\n\r\nIs this a bug or am I doing something wrong? I'm using `Django==1.11` and `factory-boy==2.9.2`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/421", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/421/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/421/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/421", "id": 261634654, "node_id": "MDU6SXNzdWUyNjE2MzQ2NTQ=", "number": 421, "title": "Use django test database when running test", "user": {"login": "BrunoGodefroy", "id": 20793868, "node_id": "MDQ6VXNlcjIwNzkzODY4", "avatar_url": "https://avatars1.githubusercontent.com/u/20793868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrunoGodefroy", "html_url": "https://github.com/BrunoGodefroy", "followers_url": "https://api.github.com/users/BrunoGodefroy/followers", "following_url": "https://api.github.com/users/BrunoGodefroy/following{/other_user}", "gists_url": "https://api.github.com/users/BrunoGodefroy/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrunoGodefroy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrunoGodefroy/subscriptions", "organizations_url": "https://api.github.com/users/BrunoGodefroy/orgs", "repos_url": "https://api.github.com/users/BrunoGodefroy/repos", "events_url": "https://api.github.com/users/BrunoGodefroy/events{/privacy}", "received_events_url": "https://api.github.com/users/BrunoGodefroy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-29T13:02:18Z", "updated_at": "2017-10-02T15:06:14Z", "closed_at": "2017-10-02T15:06:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have my database defined as followed in my django settings:\r\n\r\n```python\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.postgresql',\r\n        'USER': 'mydatabaseuser',\r\n        'NAME': 'mydatabase',\r\n        'TEST': {\r\n            'NAME': 'mytestdatabase',\r\n        },\r\n    },\r\n}\r\n```\r\n\r\nWhen I run my tests (using `python manage.py test`) I would expect factory boy to create my fixtures using `mytestdatabase` but `mydatabase` is used instead.\r\n\r\nThis is problematic because classic django ORM operations are using the test database (`mytestdatabase`) and therefore the following test would fail:\r\n\r\n```python\r\ndef test_factories(self)\r\n    UserFactory.create()  # User is created in mydatabase\r\n    self.assertEqual(User.objects.count(), 1)  # this assertion fails because django can't find any user in mytestdatabase\r\n```\r\n\r\nI have had a look at the database option on the Meta class of the model factory but it doesn't seem to solve my problem. I would have to create a second database alias in my DATABASES dict and django ORM query will still be executed in the test database of that new alias.\r\n\r\nIs there a solution to my problem?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/420", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/420/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/420/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/420/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/420", "id": 259462144, "node_id": "MDU6SXNzdWUyNTk0NjIxNDQ=", "number": 420, "title": "Django: Custom attributes for the Factory class", "user": {"login": "Antonboom", "id": 17127404, "node_id": "MDQ6VXNlcjE3MTI3NDA0", "avatar_url": "https://avatars2.githubusercontent.com/u/17127404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Antonboom", "html_url": "https://github.com/Antonboom", "followers_url": "https://api.github.com/users/Antonboom/followers", "following_url": "https://api.github.com/users/Antonboom/following{/other_user}", "gists_url": "https://api.github.com/users/Antonboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/Antonboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Antonboom/subscriptions", "organizations_url": "https://api.github.com/users/Antonboom/orgs", "repos_url": "https://api.github.com/users/Antonboom/repos", "events_url": "https://api.github.com/users/Antonboom/events{/privacy}", "received_events_url": "https://api.github.com/users/Antonboom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-21T11:20:59Z", "updated_at": "2017-09-22T07:55:54Z", "closed_at": "2017-09-22T07:46:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! Thanks for the wonderful library!\r\n\r\nI would like to do something like\r\n```python\r\nclass UserFactory(factory.DjangoModelFactory):\r\n    \r\n    PASSWORD_LENGTH = 10\r\n    password = factory.PostGenerationMethodCall(\r\n                   'set_password', factory.Faker('password', length=PASSWORD_LENGTH))\r\n\r\n    class Meta:\r\n        model = User\r\n```\r\n\r\nBut it raises _\"factory/django.py, line 165, in __create TypeError: 'PASSWORD_LENGTH' is an invalid keyword argument for this function.\"_.\r\n\r\nIs there a way to define attributes for a class that are **not related** to the model?\r\nCan the library ignore fields starting with '_' or '__', for example?\r\n\r\nTemporary solution\r\n```python\r\nclass CustomAttrsMixin(factory.Factory):\r\n\r\n    class Meta:\r\n        abstract = True\r\n\r\n    @classmethod\r\n    def _create(cls, model_class, *args, **kwargs):\r\n        for attr, attr_value in kwargs.copy().items():\r\n            if attr.startswith('_'):\r\n                del kwargs[attr]\r\n\r\n        # noinspection PyProtectedMember\r\n        return super()._create(model_class, *args, **kwargs)\r\n```\r\n\r\n\r\nIn addition, you can use inheritance\r\n```python\r\nclass UserWithAttrs(UserFactory):\r\n    _password = '15$Gs42h#8'     # <- This will not cause an exception when UserWithAttrs()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/419", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/419/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/419/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/419", "id": 258207666, "node_id": "MDU6SXNzdWUyNTgyMDc2NjY=", "number": 419, "title": "Link to external projects as examples of how to use FactoryBoy?", "user": {"login": "dfee", "id": 262602, "node_id": "MDQ6VXNlcjI2MjYwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/262602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfee", "html_url": "https://github.com/dfee", "followers_url": "https://api.github.com/users/dfee/followers", "following_url": "https://api.github.com/users/dfee/following{/other_user}", "gists_url": "https://api.github.com/users/dfee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfee/subscriptions", "organizations_url": "https://api.github.com/users/dfee/orgs", "repos_url": "https://api.github.com/users/dfee/repos", "events_url": "https://api.github.com/users/dfee/events{/privacy}", "received_events_url": "https://api.github.com/users/dfee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-16T04:39:16Z", "updated_at": "2017-09-21T03:49:35Z", "closed_at": "2017-09-21T03:49:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "A few times now I've tried to figure out how to create One-to-One mappings with FactoryBoy, and I typically have to re-learn how to do it. Well, this time I was smarter, and decided to reference old code. However, due to the changes in `2.9.x`, I've had to come up with a new solution.\r\n\r\nI present: https://github.com/dfee/factoryboy_oto_demo\r\n\r\nAs the README suggests, this demonstrates how to build simple and complex one-to-one mappings with FactoryBoy.\r\n\r\nAn example of a simple mapping might be a User and Profile that reference each other.\r\nAn example of a complex mapping might be a User who has an Image as `user.profile_picture` and another image as `user.header_picture` (technically, it would meet the criteria of both a One-to-One and a One-to-Many).\r\n\r\nThe solution involves using `factory.post_generation` on each Factory side.\r\n\r\nAlas, I'm publishing this here as an issue, so that it's a) seen by others who come this way, and b) as a way to inform FactoryBoy core devs that maybe this should be documented somewhere.\r\n\r\nCheers,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/418", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/418/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/418/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/418", "id": 257671493, "node_id": "MDU6SXNzdWUyNTc2NzE0OTM=", "number": 418, "title": "How to implement a factory with a field of Foreign Key to self?", "user": {"login": "NikosVlagoidis", "id": 10330520, "node_id": "MDQ6VXNlcjEwMzMwNTIw", "avatar_url": "https://avatars1.githubusercontent.com/u/10330520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NikosVlagoidis", "html_url": "https://github.com/NikosVlagoidis", "followers_url": "https://api.github.com/users/NikosVlagoidis/followers", "following_url": "https://api.github.com/users/NikosVlagoidis/following{/other_user}", "gists_url": "https://api.github.com/users/NikosVlagoidis/gists{/gist_id}", "starred_url": "https://api.github.com/users/NikosVlagoidis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NikosVlagoidis/subscriptions", "organizations_url": "https://api.github.com/users/NikosVlagoidis/orgs", "repos_url": "https://api.github.com/users/NikosVlagoidis/repos", "events_url": "https://api.github.com/users/NikosVlagoidis/events{/privacy}", "received_events_url": "https://api.github.com/users/NikosVlagoidis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-14T10:32:52Z", "updated_at": "2017-09-18T07:13:07Z", "closed_at": "2017-09-18T07:13:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nclass EventType(models.Model):\r\n    \"\"\"Event Type Model\"\"\"\r\n    category = models.ForeignKey('EventType', null=True, blank=True, verbose_name='Category')\r\n    name = models.CharField(max_length=50, unique=True, verbose_name='Event Type')\r\n```\r\n\r\nHow can I make a factory for this model?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/417", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/417/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/417/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/417", "id": 257166966, "node_id": "MDU6SXNzdWUyNTcxNjY5NjY=", "number": 417, "title": "SubFactories still save with build method (Sqlalchemy)", "user": {"login": "3lpsy", "id": 8757851, "node_id": "MDQ6VXNlcjg3NTc4NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8757851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3lpsy", "html_url": "https://github.com/3lpsy", "followers_url": "https://api.github.com/users/3lpsy/followers", "following_url": "https://api.github.com/users/3lpsy/following{/other_user}", "gists_url": "https://api.github.com/users/3lpsy/gists{/gist_id}", "starred_url": "https://api.github.com/users/3lpsy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3lpsy/subscriptions", "organizations_url": "https://api.github.com/users/3lpsy/orgs", "repos_url": "https://api.github.com/users/3lpsy/repos", "events_url": "https://api.github.com/users/3lpsy/events{/privacy}", "received_events_url": "https://api.github.com/users/3lpsy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 327760544, "node_id": "MDU6TGFiZWwzMjc3NjA1NDQ=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/SQLAlchemy", "name": "SQLAlchemy", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-12T20:14:47Z", "updated_at": "2017-09-13T20:37:57Z", "closed_at": "2017-09-13T20:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "When calling build on a SQLAlchemyModelFactory, the SubFactories are still saved to the database.\r\n\r\n```\r\nclass SqlFactory(factory.alchemy.SQLAlchemyModelFactory):\r\n    class Meta:\r\n        sqlalchemy_session = db.session\r\n        sqlalchemy_session_persistence = 'commit'\r\n```\r\n```\r\nBookFactory(SqlFactory):\r\n    class Meta:\r\n         model = Book\r\n    name = Faker('word')\r\n    author = SubFactory(AuthorFactory)\r\n```\r\n```\r\ndata = {'name': 'hello darkness'}\r\nbook = BookFactory.build(**data)\r\n```\r\n\r\nbook is now an unsaved sqlalchemy instance as expected, but a author entry has been added to the database and is now a sqlalchemy instance that has been saved.\r\n\r\nI would expect build() not to save/persist sub properties. If this is indeed intended behavior, any advice on how to modify the code so that author is not saved but instantiated would be great.\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/416", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/416/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/416/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/416", "id": 255857046, "node_id": "MDU6SXNzdWUyNTU4NTcwNDY=", "number": 416, "title": "Set fixed strategy for SubFactory", "user": {"login": "mhubig", "id": 219704, "node_id": "MDQ6VXNlcjIxOTcwNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/219704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhubig", "html_url": "https://github.com/mhubig", "followers_url": "https://api.github.com/users/mhubig/followers", "following_url": "https://api.github.com/users/mhubig/following{/other_user}", "gists_url": "https://api.github.com/users/mhubig/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhubig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhubig/subscriptions", "organizations_url": "https://api.github.com/users/mhubig/orgs", "repos_url": "https://api.github.com/users/mhubig/repos", "events_url": "https://api.github.com/users/mhubig/events{/privacy}", "received_events_url": "https://api.github.com/users/mhubig/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-07T08:33:12Z", "updated_at": "2017-12-13T09:33:56Z", "closed_at": "2017-09-08T09:56:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to set a fixes strategy for a SubFactory?\r\n\r\n```python\r\nclass ChapterFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = models.Chapter\r\n\r\n    uuid = factory.Faker('uuid4')\r\n    description = factory.Faker('sentence', nb_words=6, variable_nb_words=True)\r\n    runsheet = factory.SubFactory(RunsheetFactory)\r\n    page = factory.SubFactory(PageFactory, strategy=factory.CREATE_STRATEGY)\r\n```\r\n\r\nI want to use `ChapterFactory.build()` but the generated `page` should be saved to the DB ...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/415", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/415/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/415/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/415/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/415", "id": 255837703, "node_id": "MDU6SXNzdWUyNTU4Mzc3MDM=", "number": 415, "title": "Create a List SubFactory", "user": {"login": "sohaibfarooqi", "id": 13061583, "node_id": "MDQ6VXNlcjEzMDYxNTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/13061583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sohaibfarooqi", "html_url": "https://github.com/sohaibfarooqi", "followers_url": "https://api.github.com/users/sohaibfarooqi/followers", "following_url": "https://api.github.com/users/sohaibfarooqi/following{/other_user}", "gists_url": "https://api.github.com/users/sohaibfarooqi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sohaibfarooqi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sohaibfarooqi/subscriptions", "organizations_url": "https://api.github.com/users/sohaibfarooqi/orgs", "repos_url": "https://api.github.com/users/sohaibfarooqi/repos", "events_url": "https://api.github.com/users/sohaibfarooqi/events{/privacy}", "received_events_url": "https://api.github.com/users/sohaibfarooqi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-07T07:14:43Z", "updated_at": "2017-09-08T09:54:29Z", "closed_at": "2017-09-08T09:54:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have following `mongoengine` model:\r\n\r\n    Class A(Document):\r\n          address = ListField(Address)\r\n\r\nWhere `Address` is an embedded document.\r\nHow can I make a factory of this model? Below is an example of what I want to achieve.\r\n\r\n     Class AFactory(factory.Factory):\r\n               class meta:\r\n                        model = A\r\n                address = factory.<List>SubFactory(Address)\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/414", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/414/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/414/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/414", "id": 255718584, "node_id": "MDU6SXNzdWUyNTU3MTg1ODQ=", "number": 414, "title": "Can't test model with m2m field without invoking m2m field - Django", "user": {"login": "neighlyd", "id": 9094023, "node_id": "MDQ6VXNlcjkwOTQwMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/9094023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neighlyd", "html_url": "https://github.com/neighlyd", "followers_url": "https://api.github.com/users/neighlyd/followers", "following_url": "https://api.github.com/users/neighlyd/following{/other_user}", "gists_url": "https://api.github.com/users/neighlyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/neighlyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neighlyd/subscriptions", "organizations_url": "https://api.github.com/users/neighlyd/orgs", "repos_url": "https://api.github.com/users/neighlyd/repos", "events_url": "https://api.github.com/users/neighlyd/events{/privacy}", "received_events_url": "https://api.github.com/users/neighlyd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-06T19:36:35Z", "updated_at": "2017-09-11T05:10:01Z", "closed_at": "2017-09-11T05:09:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have several models that include optional Many-To-Many fields in Django. When running factory_boy tests, I get an iterator error when I attempt to run tests that don't address the Many-To-Many fields (through RelatedFactory - which has poor and confusing documentation), even though I'm not invoking these fields in any way, shape, or form.\r\n\r\n```python\r\n#models.py - simplified; I excluded a bunch of the fields and inherited foreign key models because they don't matter here.\r\n\r\nclass Person(models.Model):\r\n    name = models.CharField(max_length=250)\r\n    village = models.ForeignKey(Village)\r\n    case_roles = models.ManyToMany(Role, through=\"Litigant\", related_name=\"case_roles\")\r\n\r\nclass Case(models.Model):\r\n    summary = models.TextField()\r\n    session = models.ForeignKey(Session)\r\n    case_type = models.ForeignKey(CaseType)\r\n    verdict = models.ForeignKey(Verdict)\r\n    litigants = models.ManyToManyField(Person, through=\"Litigant\", related_name=\"litigants\")\r\n\r\nclass Litigant(models.Model):\r\n    person = models.ForeignKey(Person, on_delete=models.CASCADE)\r\n    case = models.ForeignKey(Case, on_delete=models.CASCADE)\r\n    role = models.ForeignKey(Role)\r\n    notes = models.TextField()\r\n```\r\n\r\n```python\r\n#test.py - again, simplified\r\n\r\nclass CaseFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = Case\r\n    \r\n    summary = factory.Faker('paragraph')\r\n    session = factory.SubFactory(SessionFactory)\r\n    case_type = factory.SubFactory(CaseTypeFactory)\r\n    verdict = factory.SubFactory(VerdictFactory)\r\n\r\nclass PersonFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = Person\r\n\r\n    name = factory.Faker('first_name')\r\n    village = factory.SubFactory(VillageFactory)\r\n    notes = factory.Faker('paragraph')\r\n\r\nclass LitigantFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = Litigant\r\n\r\n    person = factory.SubFactory(PersonFactory)\r\n    case = factory.SubFactory(CaseFactory)\r\n    role = factory.SubFactory(RoleFactory)\r\n    notes = factory.Faker('paragraph')\r\n```\r\nIf I try to create a CaseFactory, I get the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/vagrant/medievalpeasants/peasantlegaldb/tests.py\", line 316, in test_case_creation\r\n    s = SessionFactory.create()\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/base.py\", line 568, in create\r\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/base.py\", line 505, in _generate\r\n    return step.build()\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 272, in build\r\n    step.resolve(pre)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 221, in resolve\r\n    self.attributes[field_name] = getattr(self.stub, field_name)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 363, in __getattr__\r\n    extra=declaration.context,\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/declarations.py\", line 306, in evaluate\r\n    return self.generate(step, defaults)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/declarations.py\", line 395, in generate\r\n    return step.recurse(subfactory, params, force_sequence=force_sequence)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 233, in recurse\r\n    return builder.build(parent_step=self, force_sequence=force_sequence)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 272, in build\r\n    step.resolve(pre)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 221, in resolve\r\n    self.attributes[field_name] = getattr(self.stub, field_name)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 363, in __getattr__\r\n    extra=declaration.context,\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/declarations.py\", line 306, in evaluate\r\n    return self.generate(step, defaults)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/declarations.py\", line 395, in generate\r\n    return step.recurse(subfactory, params, force_sequence=force_sequence)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 233, in recurse\r\n    return builder.build(parent_step=self, force_sequence=force_sequence)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 272, in build\r\n    step.resolve(pre)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 221, in resolve\r\n    self.attributes[field_name] = getattr(self.stub, field_name)\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/builder.py\", line 363, in __getattr__\r\n    extra=declaration.context,\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/declarations.py\", line 179, in evaluate\r\n    value = next(iter(self.iterator))\r\n  File \"/home/vagrant/.virtualenvs/medievaldb/lib/python3.4/site-packages/factory/utils.py\", line 136, in __iter__\r\n    value = next(self.iterator)\r\nStopIteration\r\n\r\n```\r\n\r\nHowever, if I comment out the ManyToMany field in the Case Class, the test runs fine.\r\n\r\nWhy would a non-required field in a model be required in an unrelated test?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/412", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/412/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/412/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/412", "id": 254431195, "node_id": "MDU6SXNzdWUyNTQ0MzExOTU=", "number": 412, "title": "Choices for CharField not selected properly", "user": {"login": "leblowl", "id": 4041864, "node_id": "MDQ6VXNlcjQwNDE4NjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/4041864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leblowl", "html_url": "https://github.com/leblowl", "followers_url": "https://api.github.com/users/leblowl/followers", "following_url": "https://api.github.com/users/leblowl/following{/other_user}", "gists_url": "https://api.github.com/users/leblowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/leblowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leblowl/subscriptions", "organizations_url": "https://api.github.com/users/leblowl/orgs", "repos_url": "https://api.github.com/users/leblowl/repos", "events_url": "https://api.github.com/users/leblowl/events{/privacy}", "received_events_url": "https://api.github.com/users/leblowl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 327760582, "node_id": "MDU6TGFiZWwzMjc3NjA1ODI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Django", "name": "Django", "color": "bfdadc", "default": false, "description": null}, {"id": 210341587, "node_id": "MDU6TGFiZWwyMTAzNDE1ODc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/NeedInfo", "name": "NeedInfo", "color": "eb6420", "default": false, "description": null}, {"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-31T18:43:54Z", "updated_at": "2017-09-06T05:14:04Z", "closed_at": "2017-09-06T05:14:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Either I am using this wrong or there is a bug here. I can't find any help on this online. But I could be blind. It's not the first time I haven't noticed something in plain sight.\r\n\r\nHere is the relevant part of my model:\r\n```\r\nclass Event(django.db.models.Model):\r\n    STATUS_NEW = 'new'\r\n    STATUS_IN_PROGRESS = 'in_progress'\r\n    STATUS_ERROR = 'error'\r\n\r\n    STATUSES = (\r\n        (STATUS_NEW, 'New'),\r\n        (STATUS_IN_PROGRESS, 'In progress'),\r\n        (STATUS_ERROR, 'Error')\r\n    )\r\n    status = models.CharField(max_length=16, choices=STATUSES, default=STATUS_NEW)\r\n```\r\n\r\nRelevant part of model factory:\r\n```\r\nclass EventFactory(DjangoModelFactory):\r\n    class Meta:\r\n        model = Event\r\n\r\n    status = 'new',\r\n```\r\n\r\nWhen I instantiate this factory, `status` gets set to `\"('new',)\"`. I expected it would be set to `'new'`.\r\n`\"('new',)\"` isn't even a choice. Thanks for the very helpful library!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/410", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/410/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/410/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/410/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/410", "id": 253330356, "node_id": "MDU6SXNzdWUyNTMzMzAzNTY=", "number": 410, "title": "Unexpected keyword argument TypeError for classically mapped SQLAlchemy models", "user": {"login": "rhlk123", "id": 31409689, "node_id": "MDQ6VXNlcjMxNDA5Njg5", "avatar_url": "https://avatars3.githubusercontent.com/u/31409689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhlk123", "html_url": "https://github.com/rhlk123", "followers_url": "https://api.github.com/users/rhlk123/followers", "following_url": "https://api.github.com/users/rhlk123/following{/other_user}", "gists_url": "https://api.github.com/users/rhlk123/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhlk123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhlk123/subscriptions", "organizations_url": "https://api.github.com/users/rhlk123/orgs", "repos_url": "https://api.github.com/users/rhlk123/repos", "events_url": "https://api.github.com/users/rhlk123/events{/privacy}", "received_events_url": "https://api.github.com/users/rhlk123/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}, {"id": 327760544, "node_id": "MDU6TGFiZWwzMjc3NjA1NDQ=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/SQLAlchemy", "name": "SQLAlchemy", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-28T13:32:55Z", "updated_at": "2017-09-03T22:35:48Z", "closed_at": "2017-08-30T05:19:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's a simple model class:\r\n\r\n```\r\nclass Group(object):\r\n    def __init__(self, groupname):\r\n        self.group_id = None\r\n        self.group_name = groupname\r\n```\r\nTable definition:\r\n```\r\ngroup_table = Table('GROUP_MASTER', bioram_metadata,\r\n                    Column('group_id', Integer, primary_key=True),\r\n                    Column('group_name', String(15), unique=True, nullable=False),\r\n                    )\r\n```\r\nMapping:\r\n```\r\nmapper(Group, group_table)\r\n```\r\n\r\nI'm trying to use factory_boy for functional testing using python unittest module\r\n\r\n```\r\nclass GroupFactory(factory.alchemy.SQLAlchemyModelFactory):\r\n    class Meta:\r\n        model = Group\r\n\r\n    group_name = 'ABC'\r\n```\r\n\r\nAnd create a group like so during the unittest module setUp():\r\n```\r\ngrp = GroupFactory.create()\r\n```\r\n\r\nWhen I run the test, I get the following error :\r\n```\r\n======================================================================\r\nERROR: testGroup (sources.tests.testModels.TestModels)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"C:\\workbench\\project\\sources\\tests\\testModels.py\", line 37, in setUp\r\n    grp = GroupFactory.create()\r\n  File \"c:\\workbench\\project\\venv\\lib\\site-packages\\factory\\base.py\", line 568, in create\r\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n  File \"c:\\workbench\\project\\venv\\lib\\site-packages\\factory\\base.py\", line 505, in _generate\r\n    return step.build()\r\n  File \"c:\\workbench\\project\\venv\\lib\\site-packages\\factory\\builder.py\", line 279, in build\r\n    kwargs=kwargs,\r\n  File \"c:\\workbench\\project\\venv\\lib\\site-packages\\factory\\base.py\", line 314, in instantiate\r\n    return self.factory._create(model, *args, **kwargs)\r\n  File \"c:\\workbench\\project\\venv\\lib\\site-packages\\factory\\alchemy.py\", line 75, in _create\r\n    obj = model_class(*args, **kwargs)\r\nTypeError: __init__() got an unexpected keyword argument 'group_name'\r\n\r\n----------------------------------------------------------------------\r\n```\r\n\r\nI've seen only declarative mapping examples for factory_boy. What should be changed to make it work for classically mapping ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/408", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/408/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/408/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/408/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/408", "id": 252659381, "node_id": "MDU6SXNzdWUyNTI2NTkzODE=", "number": 408, "title": "Are factory.django.DjangoModelFactory fixtures in conftest.py available across applications?", "user": {"login": "tony", "id": 26336, "node_id": "MDQ6VXNlcjI2MzM2", "avatar_url": "https://avatars0.githubusercontent.com/u/26336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tony", "html_url": "https://github.com/tony", "followers_url": "https://api.github.com/users/tony/followers", "following_url": "https://api.github.com/users/tony/following{/other_user}", "gists_url": "https://api.github.com/users/tony/gists{/gist_id}", "starred_url": "https://api.github.com/users/tony/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tony/subscriptions", "organizations_url": "https://api.github.com/users/tony/orgs", "repos_url": "https://api.github.com/users/tony/repos", "events_url": "https://api.github.com/users/tony/events{/privacy}", "received_events_url": "https://api.github.com/users/tony/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-24T16:33:41Z", "updated_at": "2017-08-24T16:36:57Z", "closed_at": "2017-08-24T16:36:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/pytest-dev/pytest-django/issues/508\r\n\r\nI'm using factory_boy with https://github.com/pytest-dev/pytest-django.\r\n\r\npytest-django: 3.1.2\r\nfactory-boy: 2.8.1  (downgraded due to https://github.com/pytest-dev/pytest-factoryboy/issues/47#issuecomment-318951957)\r\ndjango: 1.11.4\r\n\r\nHere's my conftest.py:\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\nimport factory\r\nimport pytest\r\nfrom django.contrib.auth import get_user_model\r\nfrom django.core.management import call_command\r\nfrom pytest_factoryboy import register\r\n\r\nclass UserFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = get_user_model()\r\n\r\n    username = factory.Sequence(lambda n: \"user%03d\" % n)\r\n    password = factory.Sequence(lambda n: \"pass%03d\" % n)\r\n\r\nregister(UserFactory)\r\n```\r\n\r\nThis makes ``user`` available as a fixture for me. However, it only works in tests in the same application, not project-wide (in different django application test directories).\r\n\r\nAm I doing it wrong, then? I'm trying to narrow down if this is a mistake on my end, a bug, a potential feature, or expected behavior.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/406", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/406/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/406/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/406", "id": 250641900, "node_id": "MDU6SXNzdWUyNTA2NDE5MDA=", "number": 406, "title": "No module named 'faker.config'", "user": {"login": "DEKHTIARJonathan", "id": 10923599, "node_id": "MDQ6VXNlcjEwOTIzNTk5", "avatar_url": "https://avatars2.githubusercontent.com/u/10923599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DEKHTIARJonathan", "html_url": "https://github.com/DEKHTIARJonathan", "followers_url": "https://api.github.com/users/DEKHTIARJonathan/followers", "following_url": "https://api.github.com/users/DEKHTIARJonathan/following{/other_user}", "gists_url": "https://api.github.com/users/DEKHTIARJonathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/DEKHTIARJonathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DEKHTIARJonathan/subscriptions", "organizations_url": "https://api.github.com/users/DEKHTIARJonathan/orgs", "repos_url": "https://api.github.com/users/DEKHTIARJonathan/repos", "events_url": "https://api.github.com/users/DEKHTIARJonathan/events{/privacy}", "received_events_url": "https://api.github.com/users/DEKHTIARJonathan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490793, "node_id": "MDU6TGFiZWwzMDQ5MDc5Mw==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}, {"id": 210341587, "node_id": "MDU6TGFiZWwyMTAzNDE1ODc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/NeedInfo", "name": "NeedInfo", "color": "eb6420", "default": false, "description": null}, {"id": 660252322, "node_id": "MDU6TGFiZWw2NjAyNTIzMjI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Packaging", "name": "Packaging", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-16T14:12:42Z", "updated_at": "2017-09-30T00:08:32Z", "closed_at": "2017-08-16T14:49:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello dear friends,\r\n\r\nI use Python 3.6 with Anaconda distribution.\r\n\r\nI have just installed factory_boy with pip `pip install factory_boy==2.9.2`.\r\n\r\nIn the dependencies I have the following:\r\n- factory_boy==2.9.2\r\n- Faker==0.7.18\r\n\r\nAnd when I want to load the library I got the following message:\r\n\r\n```python\r\n>>> import factory\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\GITPRO~1\\FEEDCR~1.IO\\venv\\lib\\site-packages\\factory\\__init__.py\", line 26, in <module>\r\n    from .faker import Faker\r\n  File \"C:\\GITPRO~1\\FEEDCR~1.IO\\venv\\lib\\site-packages\\factory\\faker.py\", line 23, in <module>\r\n    import faker.config\r\nModuleNotFoundError: No module named 'faker.config'\r\n```\r\n\r\nWhich is for me quite ... disturbing ... I have tried other versions, but never seemed to make it work ...\r\n\r\nThanks a lot for your help.\r\n\r\nJonathan", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/404", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/404/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/404/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/404", "id": 248441939, "node_id": "MDU6SXNzdWUyNDg0NDE5Mzk=", "number": 404, "title": "Mention more `fuzzy.random` changes in changelog", "user": {"login": "hannosch", "id": 483109, "node_id": "MDQ6VXNlcjQ4MzEwOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/483109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannosch", "html_url": "https://github.com/hannosch", "followers_url": "https://api.github.com/users/hannosch/followers", "following_url": "https://api.github.com/users/hannosch/following{/other_user}", "gists_url": "https://api.github.com/users/hannosch/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannosch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannosch/subscriptions", "organizations_url": "https://api.github.com/users/hannosch/orgs", "repos_url": "https://api.github.com/users/hannosch/repos", "events_url": "https://api.github.com/users/hannosch/events{/privacy}", "received_events_url": "https://api.github.com/users/hannosch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490793, "node_id": "MDU6TGFiZWwzMDQ5MDc5Mw==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}, {"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-07T15:10:22Z", "updated_at": "2019-04-04T15:14:42Z", "closed_at": "2019-04-04T15:14:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a custom BaseFuzzyAttribute and so far used:\r\n```\r\nfactory.fuzzy.random.randint(100000, 999999)\r\n```\r\nto generate a base value and than do some other things with it.\r\n\r\nThe docs at https://factoryboy.readthedocs.io/en/latest/fuzzy.html#managing-randomness say I should use ``factory.fuzzy._random`` now, but this doesn't exist.\r\n\r\nInstead I now need to use:\r\n```\r\nfactory.random.randgen.randint(100000, 999999)\r\n```\r\n\r\nWould be nice if this change was called out more explicitly in the changelog and the docs would be fixed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/403", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/403/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/403/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/403/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/403", "id": 248380043, "node_id": "MDU6SXNzdWUyNDgzODAwNDM=", "number": 403, "title": "How to use RelatedFactory for a model without related_name?", "user": {"login": "pavan-blackbuck", "id": 26430490, "node_id": "MDQ6VXNlcjI2NDMwNDkw", "avatar_url": "https://avatars0.githubusercontent.com/u/26430490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pavan-blackbuck", "html_url": "https://github.com/pavan-blackbuck", "followers_url": "https://api.github.com/users/pavan-blackbuck/followers", "following_url": "https://api.github.com/users/pavan-blackbuck/following{/other_user}", "gists_url": "https://api.github.com/users/pavan-blackbuck/gists{/gist_id}", "starred_url": "https://api.github.com/users/pavan-blackbuck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pavan-blackbuck/subscriptions", "organizations_url": "https://api.github.com/users/pavan-blackbuck/orgs", "repos_url": "https://api.github.com/users/pavan-blackbuck/repos", "events_url": "https://api.github.com/users/pavan-blackbuck/events{/privacy}", "received_events_url": "https://api.github.com/users/pavan-blackbuck/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 210341587, "node_id": "MDU6TGFiZWwyMTAzNDE1ODc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/NeedInfo", "name": "NeedInfo", "color": "eb6420", "default": false, "description": null}, {"id": 30490576, "node_id": "MDU6TGFiZWwzMDQ5MDU3Ng==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Q&A", "name": "Q&A", "color": "DDDDDD", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-07T11:16:33Z", "updated_at": "2017-08-07T14:22:08Z", "closed_at": "2017-08-07T14:22:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nclass User(Model):\r\n  name = CharField(max_length=100)\r\n\r\nclass Order(Model):\r\n  user = ForeignKey(User)\r\n```\r\nI access the list of orders for a user using as `user.order_set.all()` which is working for me. Ref: https://stackoverflow.com/a/42080970/1080135\r\n\r\nBut when I try to use the RelatedFactory as follows, I get an error saying that User does not have the attribute \"order_set\"\r\n```\r\nclass UserFactory(DjangoModelFactory):\r\n  class Meta:\r\n    model = User\r\n  order_set = RelatedFactory(Order, 'user')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/402", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/402/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/402/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/402", "id": 247876152, "node_id": "MDU6SXNzdWUyNDc4NzYxNTI=", "number": 402, "title": "New version of factory_boy does not work with a simple RelatedFactory case", "user": {"login": "domino14", "id": 585318, "node_id": "MDQ6VXNlcjU4NTMxOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/585318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domino14", "html_url": "https://github.com/domino14", "followers_url": "https://api.github.com/users/domino14/followers", "following_url": "https://api.github.com/users/domino14/following{/other_user}", "gists_url": "https://api.github.com/users/domino14/gists{/gist_id}", "starred_url": "https://api.github.com/users/domino14/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domino14/subscriptions", "organizations_url": "https://api.github.com/users/domino14/orgs", "repos_url": "https://api.github.com/users/domino14/repos", "events_url": "https://api.github.com/users/domino14/events{/privacy}", "received_events_url": "https://api.github.com/users/domino14/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 327760582, "node_id": "MDU6TGFiZWwzMjc3NjA1ODI=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Django", "name": "Django", "color": "bfdadc", "default": false, "description": null}, {"id": 30490854, "node_id": "MDU6TGFiZWwzMDQ5MDg1NA==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Doc", "name": "Doc", "color": "02e10c", "default": false, "description": null}, {"id": 210341587, "node_id": "MDU6TGFiZWwyMTAzNDE1ODc=", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/NeedInfo", "name": "NeedInfo", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2017-08-04T01:08:07Z", "updated_at": "2018-01-28T22:01:29Z", "closed_at": "2018-01-28T22:01:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all, I upgraded to factory_boy 2.9.1 and a bunch of my tests are failing. I've isolated it down to a simple set of models. This was modeled on the documentation.\r\n\r\n```python\r\nimport factory\r\n\r\nfrom django.db import models\r\nfrom django.contrib.auth.models import User\r\n\r\nfrom base.models import Account, Profile\r\n\r\n\r\nclass UserFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = User\r\n\r\n    # We pass in 'user' to link the generated Profile to our just-generated\r\n    # User. This will call ProfileFactory(user=our_new_user), thus\r\n    # skipping the SubFactory.\r\n    profile = factory.RelatedFactory(\r\n        'base.tests.factories.broken_factories.ProfileFactory', 'user')\r\n    username = factory.Sequence(lambda n: 'user.username%d' % n)\r\n\r\n\r\nclass AccountFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = Account\r\n\r\n    admin = factory.SubFactory(UserFactory)\r\n    name = factory.SelfAttribute('admin.email')\r\n\r\n\r\nclass ProfileFactory(factory.django.DjangoModelFactory):\r\n    class Meta:\r\n        model = Profile\r\n\r\n    # We pass in None to prevent UserFactory from creating another\r\n    # profile (this disables the RelatedFactory)\r\n    user = factory.SubFactory(UserFactory, profile=None)\r\n\r\n```\r\n\r\nIn my `base.models`, `Account` and `Profile` look like this, roughly:\r\n\r\n```python\r\nclass Account(models.Model):\r\n    admin = models.ForeignKey(User, related_name='account_admin')\r\n    name = models.CharField(max_length=64)\r\n\r\n\r\nclass Profile(models.Model):\r\n    user = models.OneToOneField(User)\r\n```\r\n\r\nThis fails in my tests when I instantiate `AccountFactory()` with no arguments. This is the error traceback and messaging:\r\n\r\n```\r\nDEBUG 2017-08-03 18:03:29,012 [factory.generate] [declarations.py::generate:392 ] SubFactory: Instantiating base.tests.factories.broken_factories.UserFactory(), create=<factory.builder.BuildStep object at 0x7faf4ef4bf50>\r\nDEBUG 2017-08-03 18:03:29,012 [factory.generate] [declarations.py::evaluate:206 ] Sequence: Computing next value of <function <lambda> at 0x7faf54f447d0> for seq=0\r\nDEBUG 2017-08-03 18:03:29,015 [factory.generate] [declarations.py::call:615 ] RelatedFactory: Generating base.tests.factories.broken_factories.ProfileFactory(<factory.builder.BuildStep object at 0x7faf4f9e3110>, user=<User: user.username0>)\r\nDEBUG 2017-08-03 18:03:29,015 [factory.generate] [declarations.py::evaluate:58 ] LazyFunction: Evaluating <built-in function time> on <factory.builder.BuildStep object at 0x7faf4f76b410>\r\nE\r\n======================================================================\r\nERROR: test_broken_factory (base.tests.test_factories.FactoryTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/app/djapp/base/tests/test_factories.py\", line 51, in test_broken_factory\r\n    AccountFactory()\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/base.py\", line 46, in __call__\r\n    return cls.create(**kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/base.py\", line 568, in create\r\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/base.py\", line 505, in _generate\r\n    return step.build()\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/builder.py\", line 272, in build\r\n    step.resolve(pre)\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/builder.py\", line 221, in resolve\r\n    self.attributes[field_name] = getattr(self.stub, field_name)\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/builder.py\", line 363, in __getattr__\r\n    extra=declaration.context,\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/declarations.py\", line 306, in evaluate\r\n    return self.generate(step, defaults)\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/declarations.py\", line 395, in generate\r\n    return step.recurse(subfactory, params, force_sequence=force_sequence)\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/builder.py\", line 233, in recurse\r\n    return builder.build(parent_step=self, force_sequence=force_sequence)\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/builder.py\", line 293, in build\r\n    context=postgen_context,\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/declarations.py\", line 617, in call\r\n    return step.recurse(factory, passed_kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/builder.py\", line 233, in recurse\r\n    return builder.build(parent_step=self, force_sequence=force_sequence)\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/builder.py\", line 279, in build\r\n    kwargs=kwargs,\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/base.py\", line 314, in instantiate\r\n    return self.factory._create(model, *args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/factory/django.py\", line 165, in _create\r\n    return manager.create(*args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/models/manager.py\", line 85, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/models/query.py\", line 394, in create\r\n    obj.save(force_insert=True, using=self.db)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/models/base.py\", line 807, in save\r\n    force_update=force_update, update_fields=update_fields)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/models/base.py\", line 837, in save_base\r\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/models/base.py\", line 923, in _save_table\r\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/models/base.py\", line 962, in _do_insert\r\n    using=using, raw=raw)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/models/manager.py\", line 85, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/models/query.py\", line 1076, in _insert\r\n    return query.get_compiler(using=using).execute_sql(return_id)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/models/sql/compiler.py\", line 1107, in execute_sql\r\n    cursor.execute(sql, params)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/backends/utils.py\", line 65, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/utils.py\", line 94, in __exit__\r\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/backends/utils.py\", line 65, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/db/backends/mysql/base.py\", line 101, in execute\r\n    return self.cursor.execute(query, args)\r\n  File \"/usr/local/lib/python2.7/site-packages/MySQLdb/cursors.py\", line 174, in execute\r\n    self.errorhandler(self, exc, value)\r\n  File \"/usr/local/lib/python2.7/site-packages/MySQLdb/connections.py\", line 36, in defaulterrorhandler\r\n    raise errorclass, errorvalue\r\nIntegrityError: (1062, \"Duplicate entry '1' for key 'user_id'\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/401", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/401/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/401/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/401", "id": 247070710, "node_id": "MDU6SXNzdWUyNDcwNzA3MTA=", "number": 401, "title": "post_generation objects can't be overridden with a computed \"pre\" value", "user": {"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 30490793, "node_id": "MDU6TGFiZWwzMDQ5MDc5Mw==", "url": "https://api.github.com/repos/FactoryBoy/factory_boy/labels/Bug", "name": "Bug", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbarrois", "id": 694541, "node_id": "MDQ6VXNlcjY5NDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/694541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbarrois", "html_url": "https://github.com/rbarrois", "followers_url": "https://api.github.com/users/rbarrois/followers", "following_url": "https://api.github.com/users/rbarrois/following{/other_user}", "gists_url": "https://api.github.com/users/rbarrois/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbarrois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbarrois/subscriptions", "organizations_url": "https://api.github.com/users/rbarrois/orgs", "repos_url": "https://api.github.com/users/rbarrois/repos", "events_url": "https://api.github.com/users/rbarrois/events{/privacy}", "received_events_url": "https://api.github.com/users/rbarrois/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-08-01T13:33:35Z", "updated_at": "2018-05-05T15:06:23Z", "closed_at": "2018-05-05T15:06:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This should work:\r\n\r\n```python\r\nclass BookFactory(factory.Factory):\r\n    @factory.post_generation\r\n    def category(self, create, override, extra):\r\n        if create and override:\r\n            category.register(self)\r\n\r\nclass TrilogyFactory(factory.Factory):\r\n    book1 = factory.SubFactory(BookFactory)\r\n    book2 = factory.SubFactory(BookFactory, category=factory.SelfAttribute('..book1.category'))\r\n    book3 = factory.SubFactory(BookFactory, category=factory.SelfAttribute('..book1.category'))\r\n```\r\n\r\nHowever, it fails: ``override`` receives the ``SelfAttribute`` declaration instead of receiving a resolved value.\r\n    \r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/400", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/400/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/400/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/400/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/400", "id": 246843670, "node_id": "MDU6SXNzdWUyNDY4NDM2NzA=", "number": 400, "title": "'PostGenerationContext' object has no attribute 'items'", "user": {"login": "Fingel", "id": 3046397, "node_id": "MDQ6VXNlcjMwNDYzOTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3046397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fingel", "html_url": "https://github.com/Fingel", "followers_url": "https://api.github.com/users/Fingel/followers", "following_url": "https://api.github.com/users/Fingel/following{/other_user}", "gists_url": "https://api.github.com/users/Fingel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fingel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fingel/subscriptions", "organizations_url": "https://api.github.com/users/Fingel/orgs", "repos_url": "https://api.github.com/users/Fingel/repos", "events_url": "https://api.github.com/users/Fingel/events{/privacy}", "received_events_url": "https://api.github.com/users/Fingel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-31T18:31:48Z", "updated_at": "2017-07-31T18:34:36Z", "closed_at": "2017-07-31T18:34:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In https://github.com/FactoryBoy/factory_boy/commit/8dadbe20e845ae7e311edf2cefc4ce9e24c25370\r\nPostGenerationContext was changed to a NamedTuple. This causes a crash in utils.log_pprint:110\r\n\r\nAttributeError: 'PostGenerationContext' object has no attribute 'items'\r\n\r\nPR with a quick fix here: https://github.com/FactoryBoy/factory_boy/pull/399", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/397", "repository_url": "https://api.github.com/repos/FactoryBoy/factory_boy", "labels_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/397/labels{/name}", "comments_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/397/comments", "events_url": "https://api.github.com/repos/FactoryBoy/factory_boy/issues/397/events", "html_url": "https://github.com/FactoryBoy/factory_boy/issues/397", "id": 246804429, "node_id": "MDU6SXNzdWUyNDY4MDQ0Mjk=", "number": 397, "title": "factory.Maybe doesn't work with factory.RelatedFactory", "user": {"login": "tonial", "id": 7632730, "node_id": "MDQ6VXNlcjc2MzI3MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7632730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonial", "html_url": "https://github.com/tonial", "followers_url": "https://api.github.com/users/tonial/followers", "following_url": "https://api.github.com/users/tonial/following{/other_user}", "gists_url": "https://api.github.com/users/tonial/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonial/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonial/subscriptions", "organizations_url": "https://api.github.com/users/tonial/orgs", "repos_url": "https://api.github.com/users/tonial/repos", "events_url": "https://api.github.com/users/tonial/events{/privacy}", "received_events_url": "https://api.github.com/users/tonial/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-31T15:51:11Z", "updated_at": "2018-01-28T21:56:24Z", "closed_at": "2018-01-28T21:56:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to set a RelatedFactoy combine with Maybe, so that it's only created if a condition is fulfiled .\r\n\r\n```\r\nclass PaymentModeFactory(factory.DjangoModelFactory):\r\n    class Meta:\r\n        model = models.PaymentMode\r\n\r\n    kind = enums.MANUAL\r\n    authorization = factory.Maybe(\r\n        factory.LazyAttribute(lambda o: o.kind = enums.WITH_AUTH),\r\n        factory.RelatedFactory(PaymentModeAuthorizationFactory, 'payment_mode'),\r\n    )\r\n```\r\n\r\nWhenever the Maybe condition is True (and only if True) the _create() method is given a authorization key in it's kwargs. The value is the RelatedFactory we defined.", "performed_via_github_app": null, "score": 1.0}]}