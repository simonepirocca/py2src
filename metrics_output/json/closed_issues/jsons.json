{"total_count": 60, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/113", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/113/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/113/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/113", "id": 682028730, "node_id": "MDU6SXNzdWU2ODIwMjg3MzA=", "number": 113, "title": "use_enum_name doesn't seem to work when obj is dict", "user": {"login": "vrepsys", "id": 1429012, "node_id": "MDQ6VXNlcjE0MjkwMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1429012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrepsys", "html_url": "https://github.com/vrepsys", "followers_url": "https://api.github.com/users/vrepsys/followers", "following_url": "https://api.github.com/users/vrepsys/following{/other_user}", "gists_url": "https://api.github.com/users/vrepsys/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrepsys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrepsys/subscriptions", "organizations_url": "https://api.github.com/users/vrepsys/orgs", "repos_url": "https://api.github.com/users/vrepsys/repos", "events_url": "https://api.github.com/users/vrepsys/events{/privacy}", "received_events_url": "https://api.github.com/users/vrepsys/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-19T17:54:04Z", "updated_at": "2020-08-19T18:12:34Z", "closed_at": "2020-08-19T18:12:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "**SOLVED**: because my enum inherits from str, it's serialized as string.\r\n\r\n\r\nHere's an example\r\n```\r\nimport jsons\r\nfrom enum import Enum\r\n\r\nclass Pet(str, Enum):\r\n    CAT = \"cat\"\r\n    PET = \"pet\"\r\n\r\njsons.dump({\"pet\": Pet.CAT}, use_enum_name=True)\r\n```\r\nWhat it dumps is this:\r\n`{'pet': <Pet.CAT: 'cat'>}`\r\n\r\nI would expect this:\r\n`{'pet': 'cat'}`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/105", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/105/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/105/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/105", "id": 640154287, "node_id": "MDU6SXNzdWU2NDAxNTQyODc=", "number": 105, "title": "Add abitlity to deserialize properties with custom name without having change the entity", "user": {"login": "sunshinecool", "id": 6102696, "node_id": "MDQ6VXNlcjYxMDI2OTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/6102696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunshinecool", "html_url": "https://github.com/sunshinecool", "followers_url": "https://api.github.com/users/sunshinecool/followers", "following_url": "https://api.github.com/users/sunshinecool/following{/other_user}", "gists_url": "https://api.github.com/users/sunshinecool/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunshinecool/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunshinecool/subscriptions", "organizations_url": "https://api.github.com/users/sunshinecool/orgs", "repos_url": "https://api.github.com/users/sunshinecool/repos", "events_url": "https://api.github.com/users/sunshinecool/events{/privacy}", "received_events_url": "https://api.github.com/users/sunshinecool/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-17T05:32:43Z", "updated_at": "2020-06-25T06:19:56Z", "closed_at": "2020-06-25T06:19:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Use case: \r\nentity definition\r\n```\r\n@dataclass\r\nclass Car\r\n    theName: str\r\n```\r\nexternal resource (json)\r\n```\r\n{\r\n    'name': 'chevy'\r\n}\r\n```\r\nI want to have the ability to define the json property name instead of changing my entity definition, in this case from `theName` to `name`. Is this possible today somehow? \r\n\r\nI think this is possible by adding custom annotations like `@JsonProperty` etc. something like this\r\n```\r\n@dataclass\r\nclass Car\r\n    @propertyname('name')\r\n    theName: str\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/104", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/104/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/104/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/104", "id": 635630427, "node_id": "MDU6SXNzdWU2MzU2MzA0Mjc=", "number": 104, "title": "Deserializing Union[List[str], str] creates list of each char in str", "user": {"login": "scottee", "id": 1014942, "node_id": "MDQ6VXNlcjEwMTQ5NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1014942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottee", "html_url": "https://github.com/scottee", "followers_url": "https://api.github.com/users/scottee/followers", "following_url": "https://api.github.com/users/scottee/following{/other_user}", "gists_url": "https://api.github.com/users/scottee/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottee/subscriptions", "organizations_url": "https://api.github.com/users/scottee/orgs", "repos_url": "https://api.github.com/users/scottee/repos", "events_url": "https://api.github.com/users/scottee/events{/privacy}", "received_events_url": "https://api.github.com/users/scottee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-09T17:28:49Z", "updated_at": "2020-06-25T06:19:40Z", "closed_at": "2020-06-25T06:19:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have a data class with a field where the type is a List[str] or Union[List[str],..], when the list deserializer runs on a json value that is a string, it turns the string into a list of chars of the string. \r\n\r\nThe problem might well be in default_list.py:35 and 38. If the input object is iterable, like a string, it will succeed in deserializing as a list, when it shouldn't. Some type checking is needed there to make sure the input truly is a list.\r\n\r\nThe opposite seems to also be a bug for type Union[str, List[str]] or str, when the json obj is a list. At default_primitive.py:18 just tries to do \"str(obj)\" When obj is a list, this will not fail as it should. Some type checking is needed to make sure the obj truy is a str.\r\n\r\nIf there is a workaround, I'd really like to know it, because right now I'm blocked. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/100", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/100/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/100/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/100", "id": 611590981, "node_id": "MDU6SXNzdWU2MTE1OTA5ODE=", "number": 100, "title": "Not working with python 3.8.2 and `from __future__ import annotations`", "user": {"login": "egh", "id": 22718, "node_id": "MDQ6VXNlcjIyNzE4", "avatar_url": "https://avatars3.githubusercontent.com/u/22718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/egh", "html_url": "https://github.com/egh", "followers_url": "https://api.github.com/users/egh/followers", "following_url": "https://api.github.com/users/egh/following{/other_user}", "gists_url": "https://api.github.com/users/egh/gists{/gist_id}", "starred_url": "https://api.github.com/users/egh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/egh/subscriptions", "organizations_url": "https://api.github.com/users/egh/orgs", "repos_url": "https://api.github.com/users/egh/repos", "events_url": "https://api.github.com/users/egh/events{/privacy}", "received_events_url": "https://api.github.com/users/egh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1236139924, "node_id": "MDU6TGFiZWwxMjM2MTM5OTI0", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/in%20progress", "name": "in progress", "color": "106377", "default": false, "description": "This issue is worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T04:08:29Z", "updated_at": "2020-07-03T20:43:52Z", "closed_at": "2020-07-03T20:43:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "To reproduce: \r\n\r\n```\r\n$ mkdir test-jsons\r\n$ cd test-jsons\r\n# Set up dependencies, e.g.\r\n$ cat > pyproject.toml <<EOF\r\n[tool]\r\n[tool.poetry]\r\nname = \"test-jsons\"\r\nversion = \"0.0.0\"\r\ndescription = \"test jsons\"\r\nauthors = [\"Erik Hetzner\"]\r\n[tool.poetry.dependencies]\r\npython = \"==3.8.2\"\r\njsons = \"*\"\r\nEOF\r\n$ poetry install\r\n$ cat > test.py <<EOF\r\nfrom __future__ import annotations\r\nimport jsons\r\nfrom dataclasses import dataclass\r\n@dataclass\r\nclass Foo(object):\r\n    bar: str\r\nprint(jsons.dump(Foo('baz')))\r\nEOF\r\n$ poetry run python test.py\r\n```\r\n\r\nExpected output:\r\n```\r\n{'bar': 'baz'}\r\n```\r\n\r\nActual output:\r\n```\r\n/home/egh/.cache/pypoetry/virtualenvs/test-jsons-Z5_mcWPc-py3.8/lib/python3.8/site-packages/jsons/_common_impl.py:42: UserWarning: Failed to dump attribute \"baz\" of object of type \"Foo\". Reason: 'NoneType' object is not callable. Ignoring the attribute. You can suppress warnings like this using jsons.suppress_warnings().\r\n  warnings.warn(msg_, *args, **kwargs)\r\n{}\r\n```\r\n\r\nRemoving the `from __future__ import annotations` line fixes the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/98", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/98/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/98/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/98", "id": 610449440, "node_id": "MDU6SXNzdWU2MTA0NDk0NDA=", "number": 98, "title": "Named Tuple Deserialiser doesn't accept or call key_transformer", "user": {"login": "marksomething", "id": 3917974, "node_id": "MDQ6VXNlcjM5MTc5NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3917974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marksomething", "html_url": "https://github.com/marksomething", "followers_url": "https://api.github.com/users/marksomething/followers", "following_url": "https://api.github.com/users/marksomething/following{/other_user}", "gists_url": "https://api.github.com/users/marksomething/gists{/gist_id}", "starred_url": "https://api.github.com/users/marksomething/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marksomething/subscriptions", "organizations_url": "https://api.github.com/users/marksomething/orgs", "repos_url": "https://api.github.com/users/marksomething/repos", "events_url": "https://api.github.com/users/marksomething/events{/privacy}", "received_events_url": "https://api.github.com/users/marksomething/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1236139924, "node_id": "MDU6TGFiZWwxMjM2MTM5OTI0", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/in%20progress", "name": "in progress", "color": "106377", "default": false, "description": "This issue is worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-30T23:13:57Z", "updated_at": "2020-07-03T20:43:51Z", "closed_at": "2020-07-03T20:43:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "When deserialising to a namedtuple the key_transformer is ignored.\r\n\r\nhttps://github.com/ramonhagenaars/jsons/blob/e335fd5ebc465b523cf153675ad2eeafbc37b5fb/jsons/deserializers/default_tuple.py#L34-L37\r\n\r\n```\r\nclass A(NamedTuple):\r\n    some_thing: str\r\n\r\njsons.loads('{\"SomeThing\":\"a\"}', A, key_transformer=jsons.KEY_TRANSFORMER_SNAKECASE)\r\n```\r\n> jsons.exceptions.DeserializationError\r\n\r\nvs. \r\n\r\n```\r\n@dataclass\r\nclass B:\r\n    some_thing: str\r\n\r\njsons.loads('{\"SomeThing\":\"a\"}', B, key_transformer=jsons.KEY_TRANSFORMER_SNAKECASE)\r\n\r\n```\r\n> B(some_thing='a')\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/95", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/95/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/95/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/95", "id": 606927864, "node_id": "MDU6SXNzdWU2MDY5Mjc4NjQ=", "number": 95, "title": "_field_types of typing.NamedTuple has been deprecated and will be removed in Python 3.9", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2016752506, "node_id": "MDU6TGFiZWwyMDE2NzUyNTA2", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/compatibility", "name": "compatibility", "color": "1d76db", "default": false, "description": ""}, {"id": 1236139924, "node_id": "MDU6TGFiZWwxMjM2MTM5OTI0", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/in%20progress", "name": "in progress", "color": "106377", "default": false, "description": "This issue is worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-26T05:56:40Z", "updated_at": "2020-07-03T20:29:40Z", "closed_at": "2020-07-03T20:29:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/ramonhagenaars/jsons/blob/e335fd5ebc465b523cf153675ad2eeafbc37b5fb/jsons/deserializers/default_tuple.py#L56\r\n\r\nhttps://docs.python.org/3/whatsnew/3.8.html#deprecated\r\n\r\n```\r\nThe typing.NamedTuple class has deprecated the _field_types attribute in favor of the \r\n__annotations__ attribute which has the same information. \r\n(Contributed by Raymond Hettinger in bpo-36320.)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/94", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/94/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/94/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/94", "id": 606848544, "node_id": "MDU6SXNzdWU2MDY4NDg1NDQ=", "number": 94, "title": "output contains single quotes not double quotes", "user": {"login": "Bengreen", "id": 862908, "node_id": "MDQ6VXNlcjg2MjkwOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/862908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bengreen", "html_url": "https://github.com/Bengreen", "followers_url": "https://api.github.com/users/Bengreen/followers", "following_url": "https://api.github.com/users/Bengreen/following{/other_user}", "gists_url": "https://api.github.com/users/Bengreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bengreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bengreen/subscriptions", "organizations_url": "https://api.github.com/users/Bengreen/orgs", "repos_url": "https://api.github.com/users/Bengreen/repos", "events_url": "https://api.github.com/users/Bengreen/events{/privacy}", "received_events_url": "https://api.github.com/users/Bengreen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745768, "node_id": "MDU6TGFiZWw5ODg3NDU3Njg=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/question", "name": "question", "color": "0fc601", "default": true, "description": "The issue describes a question"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-25T20:24:54Z", "updated_at": "2020-05-10T19:49:57Z", "closed_at": "2020-05-10T19:49:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been trying out the jsons library and it looks great. But one thing is confusing me. The JSON returned is not true json as it is using single quotes rather than double quotes. \r\nI have been able to get it to return double quotes (e.g. jsons.dumps(myObject)\r\nBut out of the box jsons.dump(myObject) is returning single quotes and using JsonSerializable , myObject.json uses single quotes.\r\n\r\nI have always used JSON with double quotes and using single quotes has been problematic and not in line with the standard ... OR Am I missing something here ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/93", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/93/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/93/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/93", "id": 605701598, "node_id": "MDU6SXNzdWU2MDU3MDE1OTg=", "number": 93, "title": "dict deserializer doesn't pass key_transformer when calling loads", "user": {"login": "Banannaise", "id": 17170981, "node_id": "MDQ6VXNlcjE3MTcwOTgx", "avatar_url": "https://avatars1.githubusercontent.com/u/17170981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Banannaise", "html_url": "https://github.com/Banannaise", "followers_url": "https://api.github.com/users/Banannaise/followers", "following_url": "https://api.github.com/users/Banannaise/following{/other_user}", "gists_url": "https://api.github.com/users/Banannaise/gists{/gist_id}", "starred_url": "https://api.github.com/users/Banannaise/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Banannaise/subscriptions", "organizations_url": "https://api.github.com/users/Banannaise/orgs", "repos_url": "https://api.github.com/users/Banannaise/repos", "events_url": "https://api.github.com/users/Banannaise/events{/privacy}", "received_events_url": "https://api.github.com/users/Banannaise/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1236139924, "node_id": "MDU6TGFiZWwxMjM2MTM5OTI0", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/in%20progress", "name": "in progress", "color": "106377", "default": false, "description": "This issue is worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T17:07:47Z", "updated_at": "2020-07-03T20:43:51Z", "closed_at": "2020-07-03T20:43:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/ramonhagenaars/jsons/blob/e335fd5ebc465b523cf153675ad2eeafbc37b5fb/jsons/deserializers/default_dict.py#L27\r\n\r\nhttps://github.com/ramonhagenaars/jsons/blob/e335fd5ebc465b523cf153675ad2eeafbc37b5fb/jsons/deserializers/default_dict.py#L30\r\n\r\nWhen deserializing a dictionary whose values are dicts or objects, key transformations are not respected for the values. This can cause object attributes to be dropped (since the key transformation doesn't happen).\r\n\r\nFix:\r\n`res = {load(key_tfr(k), **kwargs_k): load(obj[k], key_tfr, **kwargs_v)`\r\n`res = {key_tfr(key): load(obj[key], key_tfr, **kwargs)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/91", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/91/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/91/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/91", "id": 599246541, "node_id": "MDU6SXNzdWU1OTkyNDY1NDE=", "number": 91, "title": "Comparing this to jsonpickle", "user": {"login": "leon332157", "id": 30728609, "node_id": "MDQ6VXNlcjMwNzI4NjA5", "avatar_url": "https://avatars1.githubusercontent.com/u/30728609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leon332157", "html_url": "https://github.com/leon332157", "followers_url": "https://api.github.com/users/leon332157/followers", "following_url": "https://api.github.com/users/leon332157/following{/other_user}", "gists_url": "https://api.github.com/users/leon332157/gists{/gist_id}", "starred_url": "https://api.github.com/users/leon332157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leon332157/subscriptions", "organizations_url": "https://api.github.com/users/leon332157/orgs", "repos_url": "https://api.github.com/users/leon332157/repos", "events_url": "https://api.github.com/users/leon332157/events{/privacy}", "received_events_url": "https://api.github.com/users/leon332157/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-14T02:13:27Z", "updated_at": "2020-04-17T02:30:48Z", "closed_at": "2020-04-17T02:30:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just have this question about comparing this library to jsonpickle, which is a similar project. What are the advantages or differences?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/90", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/90/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/90/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/90", "id": 589312106, "node_id": "MDU6SXNzdWU1ODkzMTIxMDY=", "number": 90, "title": "Unexpected results with Optional type and .load()", "user": {"login": "Birdicode", "id": 3248822, "node_id": "MDQ6VXNlcjMyNDg4MjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3248822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Birdicode", "html_url": "https://github.com/Birdicode", "followers_url": "https://api.github.com/users/Birdicode/followers", "following_url": "https://api.github.com/users/Birdicode/following{/other_user}", "gists_url": "https://api.github.com/users/Birdicode/gists{/gist_id}", "starred_url": "https://api.github.com/users/Birdicode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Birdicode/subscriptions", "organizations_url": "https://api.github.com/users/Birdicode/orgs", "repos_url": "https://api.github.com/users/Birdicode/repos", "events_url": "https://api.github.com/users/Birdicode/events{/privacy}", "received_events_url": "https://api.github.com/users/Birdicode/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1236139924, "node_id": "MDU6TGFiZWwxMjM2MTM5OTI0", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/in%20progress", "name": "in progress", "color": "106377", "default": false, "description": "This issue is worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-27T18:05:52Z", "updated_at": "2020-07-03T20:43:51Z", "closed_at": "2020-07-03T20:43:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seems to be a problem when marking a value as optional. When something is declared as optional, jsons ignores the data type and simply sets the value given. However, I would expect to have \"None\" or an exception raised. \r\n\r\nUsing a custom deserializer and raising any Exceptions inside to not propagate back to the jsons.load call in this case.\r\n\r\nI'm currently using version 1.1.2 from pypi.\r\n\r\n``` python\r\nfrom typing import Optional, Union\r\nfrom dataclasses import dataclass\r\n\r\nimport jsons\r\n\r\n# Strict mode does not matter\r\nstrict = True\r\n\r\nprint(\"\\n----- Optional Int\")\r\n\r\n@dataclass\r\nclass TestOptionalInt:\r\n    val: Optional[int]\r\n\r\nprint(jsons.load({\"val\": 10}, cls=TestOptionalInt, strict=strict))\r\nprint(jsons.load({\"val\": \"bla\"}, cls=TestOptionalInt, strict=strict)) # Does not raise error, returns the string!\r\nprint(jsons.load({\"val\": (1,\"bla\",[])}, cls=TestOptionalInt, strict=strict)) # Does not raise error, returns the tuple!\r\nprint(jsons.load({\"val\": None}, cls=TestOptionalInt, strict=strict))\r\n\r\n\r\nprint(\"\\n----- Union Int, None\")\r\n\r\n@dataclass\r\nclass TestUnionInt:\r\n    val: Union[int, None]\r\n\r\nprint(jsons.load({\"val\": 10}, cls=TestUnionInt, strict=strict))\r\nprint(jsons.load({\"val\": \"bla\"}, cls=TestUnionInt, strict=strict)) # Does not raise error, returns the string!\r\nprint(jsons.load({\"val\": (1,\"bla\",[])}, cls=TestUnionInt, strict=strict)) # Does not raise error, returns the tuple!\r\nprint(jsons.load({\"val\": None}, cls=TestUnionInt, strict=strict))\r\n\r\n\r\nprint(\"\\n----- Int\")\r\n\r\n@dataclass\r\nclass TestInt:\r\n    val: int\r\n\r\nprint(jsons.load({\"val\": 10}, cls=TestInt, strict=strict))\r\nprint(jsons.load({\"val\": \"bla\"}, cls=TestInt, strict=strict)) # Does raise exception (expected)\r\nprint(jsons.load({\"val\": (1,\"bla\",[])}, cls=TestInt, strict=strict)) # Does raise exception (expected)\r\nprint(jsons.load({\"val\": None}, cls=TestInt, strict=strict)) # Does raise exception (expected)\r\n```\r\n\r\nOutput:\r\n```\r\n----- Optional Int\r\nTestOptionalInt(val=10)\r\nTestOptionalInt(val='bla')\r\nTestOptionalInt(val=(1, 'bla', []))\r\nTestOptionalInt(val=None)\r\n\r\n----- Union Int, None\r\nTestUnionInt(val=10)\r\nTestUnionInt(val='bla')\r\nTestUnionInt(val=(1, 'bla', []))\r\nTestUnionInt(val=None)\r\n\r\n----- Int\r\nTestInt(val=10)\r\nCould not cast \"bla\" into \"int\"\r\nCould not deserialize value \"(1, 'bla', [])\" into \"int\". int() argument must be a string, a bytes-like object or a number, not 'tuple'\r\nNoneType cannot be deserialized into int\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/88", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/88/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/88/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/88", "id": 583890205, "node_id": "MDU6SXNzdWU1ODM4OTAyMDU=", "number": 88, "title": "Add py.typed to package so that type hints work with mypy", "user": {"login": "kazimuth", "id": 555667, "node_id": "MDQ6VXNlcjU1NTY2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/555667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kazimuth", "html_url": "https://github.com/kazimuth", "followers_url": "https://api.github.com/users/kazimuth/followers", "following_url": "https://api.github.com/users/kazimuth/following{/other_user}", "gists_url": "https://api.github.com/users/kazimuth/gists{/gist_id}", "starred_url": "https://api.github.com/users/kazimuth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kazimuth/subscriptions", "organizations_url": "https://api.github.com/users/kazimuth/orgs", "repos_url": "https://api.github.com/users/kazimuth/repos", "events_url": "https://api.github.com/users/kazimuth/events{/privacy}", "received_events_url": "https://api.github.com/users/kazimuth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745763, "node_id": "MDU6TGFiZWw5ODg3NDU3NjM=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-18T17:29:55Z", "updated_at": "2020-04-04T18:32:45Z", "closed_at": "2020-04-04T18:32:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "See [PEP 561](https://www.python.org/dev/peps/pep-0561/#packaging-type-information):\r\n\r\n> In order to make packaging and distributing type information as simple and easy as possible, packaging and distribution is done through existing frameworks.\r\n> Package maintainers who wish to support type checking of their code MUST add a marker file named py.typed to their package supporting typing. This marker applies recursively: if a top-level package includes it, all its sub-packages MUST support type checking as well. To have this file installed with the package, maintainers can use existing packaging options such as package_data in distutils, shown below.\r\n> Distutils option example:\r\n> ```\r\n>   setup(\r\n>    ...,\r\n>    package_data = {\r\n>        'foopkg': ['py.typed'],\r\n>    },\r\n>    ...,\r\n>    )\r\n> ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/85", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/85/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/85/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/85", "id": 552998685, "node_id": "MDU6SXNzdWU1NTI5OTg2ODU=", "number": 85, "title": "Serialization of unspecified length of Tuple fails", "user": {"login": "ahmetkucuk", "id": 4016471, "node_id": "MDQ6VXNlcjQwMTY0NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4016471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmetkucuk", "html_url": "https://github.com/ahmetkucuk", "followers_url": "https://api.github.com/users/ahmetkucuk/followers", "following_url": "https://api.github.com/users/ahmetkucuk/following{/other_user}", "gists_url": "https://api.github.com/users/ahmetkucuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmetkucuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmetkucuk/subscriptions", "organizations_url": "https://api.github.com/users/ahmetkucuk/orgs", "repos_url": "https://api.github.com/users/ahmetkucuk/repos", "events_url": "https://api.github.com/users/ahmetkucuk/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmetkucuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1236139924, "node_id": "MDU6TGFiZWwxMjM2MTM5OTI0", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/in%20progress", "name": "in progress", "color": "106377", "default": false, "description": "This issue is worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-21T16:45:38Z", "updated_at": "2020-02-25T18:38:45Z", "closed_at": "2020-02-25T18:38:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following serialization fails when I use `strict=True`, I am not sure whether this is expected behavior or not.\r\n\r\n```\r\n>>> from typing import Tuple\r\n>>> from dataclasses import dataclass\r\n>>> import jsons\r\n>>> @dataclass(frozen=True)\r\n... class A:\r\n...     x: Tuple[str, ...]\r\n... \r\n>>> jsons.dumps(A('abc'), strict=True)\r\n```\r\n\r\nError:\r\n```\r\nTraceback (most recent call last):\r\n  File \"~/.pyenv/versions/forms/lib/python3.7/site-packages/jsons/_dump_impl.py\", line 62, in _do_dump\r\n    result = serializer(obj, cls=cls, **kwargs)\r\n  File \"~/.pyenv/versions/forms/lib/python3.7/site-packages/jsons/serializers/default_object.py\", line 92, in default_object_serializer\r\n    fork_inst=fork_inst)\r\n  File \"~/.pyenv/versions/forms/lib/python3.7/site-packages/jsons/serializers/default_object.py\", line 126, in _do_serialize\r\n    **kwargs)\r\n  File \"~/.pyenv/versions/forms/lib/python3.7/site-packages/jsons/_dump_impl.py\", line 57, in dump\r\n    return _do_dump(obj, serializer, cls, initial, kwargs_)\r\n  File \"~/.pyenv/versions/forms/lib/python3.7/site-packages/jsons/_dump_impl.py\", line 68, in _do_dump\r\n    raise SerializationError(str(err))\r\njsons.exceptions.SerializationError: Not enough generic types (2) in typing.Tuple[str, ...], expected 3 to match the iterable of length 3\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/84", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/84/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/84/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/84", "id": 551978176, "node_id": "MDU6SXNzdWU1NTE5NzgxNzY=", "number": 84, "title": "How can I map a JSON field to a differently-named class field?", "user": {"login": "davemx", "id": 707335, "node_id": "MDQ6VXNlcjcwNzMzNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/707335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davemx", "html_url": "https://github.com/davemx", "followers_url": "https://api.github.com/users/davemx/followers", "following_url": "https://api.github.com/users/davemx/following{/other_user}", "gists_url": "https://api.github.com/users/davemx/gists{/gist_id}", "starred_url": "https://api.github.com/users/davemx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davemx/subscriptions", "organizations_url": "https://api.github.com/users/davemx/orgs", "repos_url": "https://api.github.com/users/davemx/repos", "events_url": "https://api.github.com/users/davemx/events{/privacy}", "received_events_url": "https://api.github.com/users/davemx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-19T20:19:48Z", "updated_at": "2020-01-28T19:40:07Z", "closed_at": "2020-01-28T19:40:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have JSON that looks like this:\r\n\r\n```json\r\n{\r\n  \"st\": 3,\r\n  \"s\": -7.0\r\n}\r\n```\r\n\r\nAnd a class that I'd like to look like:\r\n\r\n```python\r\n@dataclass\r\nclass Pick:\r\n    stake: int\r\n    spread: float\r\n```\r\n\r\nI'd like to map the `st` field to `stake` and `s` to `spread`. In Marshmallow, you can specify an alternate `data_key`. Is there a way to do this in JSONS? Like a per-field key transformer or decoration or anything?\r\n\r\nThanks,\r\nDave", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/83", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/83/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/83/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/83", "id": 546841682, "node_id": "MDU6SXNzdWU1NDY4NDE2ODI=", "number": 83, "title": "How to bypass self as a class attribute name error? __init__() got multiple values for argument '__dataclass_self__'", "user": {"login": "aadamvanko", "id": 25894662, "node_id": "MDQ6VXNlcjI1ODk0NjYy", "avatar_url": "https://avatars3.githubusercontent.com/u/25894662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aadamvanko", "html_url": "https://github.com/aadamvanko", "followers_url": "https://api.github.com/users/aadamvanko/followers", "following_url": "https://api.github.com/users/aadamvanko/following{/other_user}", "gists_url": "https://api.github.com/users/aadamvanko/gists{/gist_id}", "starred_url": "https://api.github.com/users/aadamvanko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aadamvanko/subscriptions", "organizations_url": "https://api.github.com/users/aadamvanko/orgs", "repos_url": "https://api.github.com/users/aadamvanko/repos", "events_url": "https://api.github.com/users/aadamvanko/events{/privacy}", "received_events_url": "https://api.github.com/users/aadamvanko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745768, "node_id": "MDU6TGFiZWw5ODg3NDU3Njg=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/question", "name": "question", "color": "0fc601", "default": true, "description": "The issue describes a question"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-08T12:52:42Z", "updated_at": "2020-01-09T15:03:10Z", "closed_at": "2020-01-09T15:03:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I have a JSON containing objects that contain field named `self` and it crashes due to this error: `jsons.exceptions.DeserializationError: Could not deserialize value \"{'self': 'api/v3/message/0'}\" into \"__main__.MyClass\". __init__() got multiple values for argument '__dataclass_self__'`. I understand the error and the cause, but is there a way how to bypass this limition other than renaming the field in the original JSON string before deserializing and also the class attribute? Thanks\r\n\r\nRegards,\r\nAdam\r\n\r\nExample code ([live demo here](https://repl.it/repls/HumiliatingGloriousCache)):\r\n```python\r\nimport jsons\r\nimport dataclasses\r\n\r\n\r\n@dataclasses.dataclass\r\nclass MyClass:\r\n    self: str\r\n\r\n\r\nmyclassObj = jsons.loads('''{\"self\":\"api/v3/message/0\"}''', MyClass)\r\nprint(myclassObj)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/82", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/82/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/82/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/82", "id": 546321845, "node_id": "MDU6SXNzdWU1NDYzMjE4NDU=", "number": 82, "title": "DeserializationError: Invalid type: \"datetime.datetime\" when deserializing correct datetime string into Optional[datetime]", "user": {"login": "aadamvanko", "id": 25894662, "node_id": "MDQ6VXNlcjI1ODk0NjYy", "avatar_url": "https://avatars3.githubusercontent.com/u/25894662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aadamvanko", "html_url": "https://github.com/aadamvanko", "followers_url": "https://api.github.com/users/aadamvanko/followers", "following_url": "https://api.github.com/users/aadamvanko/following{/other_user}", "gists_url": "https://api.github.com/users/aadamvanko/gists{/gist_id}", "starred_url": "https://api.github.com/users/aadamvanko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aadamvanko/subscriptions", "organizations_url": "https://api.github.com/users/aadamvanko/orgs", "repos_url": "https://api.github.com/users/aadamvanko/repos", "events_url": "https://api.github.com/users/aadamvanko/events{/privacy}", "received_events_url": "https://api.github.com/users/aadamvanko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745768, "node_id": "MDU6TGFiZWw5ODg3NDU3Njg=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/question", "name": "question", "color": "0fc601", "default": true, "description": "The issue describes a question"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-07T14:42:30Z", "updated_at": "2020-01-09T15:03:20Z", "closed_at": "2020-01-09T15:03:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI have just started using your library and it works great, but I have encountered this weird error. I have JSON string with correct datetime and it is being deserialized correctly if type hint is just datetime but if I want to support `null` in JSON (`None` in Python) I use `typing.Optional[datetime]` and it gives me this error: `jsons.exceptions.DeserializationError: Invalid type: \"datetime.datetime\", only arguments of the following types are allowed: str, int, float, bool, list, tuple, set, dict, NoneType`.\r\n\r\nMinimal code example:\r\n```python\r\nimport jsons\r\nimport typing\r\nimport dataclasses\r\nimport datetime\r\n\r\n@dataclasses.dataclass\r\nclass WithDateOK:\r\n    created: datetime.datetime\r\n\r\n@dataclasses.dataclass\r\nclass WithDateBad:\r\n    created: typing.Optional[datetime.datetime]\r\n\r\nwithDateStr = '''{\"created\":\"2019-12-19T11:40:48Z\"}'''\r\nwithDateDict = jsons.loads(withDateStr)\r\nprint(withDateDict)\r\nwithDateObj = jsons.load(withDateDict, WithDateOK)\r\nwithDateObj = jsons.load(withDateDict, WithDateBad)\r\nprint(type(withDateObj))\r\nprint(withDateObj)\r\n```\r\n\r\nComplete Traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/vanko/PycharmProjects/playground/jsonpickle_playing.py\", line 641, in <module>\r\n    withDateObj = jsonsLib.load(withDateDict, WithDate)\r\n  File \"/home/vanko/PycharmProjects/playground/venv/lib/python3.7/site-packages/jsons/_load_impl.py\", line 98, in load\r\n    return _do_load(json_obj, deserializer, cls, initial, **kwargs_)\r\n  File \"/home/vanko/PycharmProjects/playground/venv/lib/python3.7/site-packages/jsons/_load_impl.py\", line 110, in _do_load\r\n    result = deserializer(json_obj, cls, **kwargs)\r\n  File \"/home/vanko/PycharmProjects/playground/venv/lib/python3.7/site-packages/jsons/deserializers/default_object.py\", line 39, in default_object_deserializer\r\n    constructor_args = _get_constructor_args(obj, cls, **kwargs)\r\n  File \"/home/vanko/PycharmProjects/playground/venv/lib/python3.7/site-packages/jsons/deserializers/default_object.py\", line 70, in _get_constructor_args\r\n    **kwargs)\r\n  File \"/home/vanko/PycharmProjects/playground/venv/lib/python3.7/site-packages/jsons/deserializers/default_object.py\", line 94, in _get_value_for_attr\r\n    meta_hints, **kwargs)\r\n  File \"/home/vanko/PycharmProjects/playground/venv/lib/python3.7/site-packages/jsons/deserializers/default_object.py\", line 134, in _get_value_from_obj\r\n    value = load(obj[sig_key], cls_, meta_hints=new_hints, **kwargs)\r\n  File \"/home/vanko/PycharmProjects/playground/venv/lib/python3.7/site-packages/jsons/_load_impl.py\", line 82, in load\r\n    json_obj, cls, fork_inst, kwargs.get('_inferred_cls', False))\r\n  File \"/home/vanko/PycharmProjects/playground/venv/lib/python3.7/site-packages/jsons/_load_impl.py\", line 197, in _check_and_get_cls_and_meta_hints\r\n    raise DeserializationError(msg, json_obj, cls)\r\njsons.exceptions.DeserializationError: Invalid type: \"datetime.datetime\", only arguments of the following types are allowed: str, int, float, bool, list, tuple, set, dict, NoneType\r\n```\r\nIf I change datetime string to `null`, it works fine and created is `None` as expected.\r\n\r\nHere is [live demo example](https://repl.it/repls/OrangeredJauntyPhase) demonstrating the error. Is this behaviour correct or is this a bug? Thanks \r\n\r\nRegards,\r\nAdam", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/81", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/81/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/81/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/81", "id": 534523070, "node_id": "MDU6SXNzdWU1MzQ1MjMwNzA=", "number": 81, "title": "Inconsistent get_class_name", "user": {"login": "haluzpav", "id": 24211726, "node_id": "MDQ6VXNlcjI0MjExNzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/24211726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haluzpav", "html_url": "https://github.com/haluzpav", "followers_url": "https://api.github.com/users/haluzpav/followers", "following_url": "https://api.github.com/users/haluzpav/following{/other_user}", "gists_url": "https://api.github.com/users/haluzpav/gists{/gist_id}", "starred_url": "https://api.github.com/users/haluzpav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haluzpav/subscriptions", "organizations_url": "https://api.github.com/users/haluzpav/orgs", "repos_url": "https://api.github.com/users/haluzpav/repos", "events_url": "https://api.github.com/users/haluzpav/events{/privacy}", "received_events_url": "https://api.github.com/users/haluzpav/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-08T10:45:30Z", "updated_at": "2019-12-22T14:10:56Z", "closed_at": "2019-12-22T14:10:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nfrom datetime import datetime\r\n\r\nimport jsons\r\nfrom jsons._common_impl import get_class_name\r\n\r\nprint(get_class_name(datetime))\r\n# >>> datetime\r\n\r\njsons.dumps(datetime.utcnow())\r\n\r\nprint(get_class_name(datetime))\r\n# >>> datetime.datetime\r\n```\r\n\r\nIt is caused by the fact that classes are automatically announced during dumping, in fully qualified form. If a class is announced, it's name in `get_class_name` is taken directly from `_announced_classes`, without taking into account `fully_qualified: bool` argument.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/78", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/78/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/78/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/78", "id": 534220897, "node_id": "MDU6SXNzdWU1MzQyMjA4OTc=", "number": 78, "title": "Optional attributes not working with .dumps()", "user": {"login": "BrettStatman", "id": 4602425, "node_id": "MDQ6VXNlcjQ2MDI0MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/4602425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrettStatman", "html_url": "https://github.com/BrettStatman", "followers_url": "https://api.github.com/users/BrettStatman/followers", "following_url": "https://api.github.com/users/BrettStatman/following{/other_user}", "gists_url": "https://api.github.com/users/BrettStatman/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrettStatman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrettStatman/subscriptions", "organizations_url": "https://api.github.com/users/BrettStatman/orgs", "repos_url": "https://api.github.com/users/BrettStatman/repos", "events_url": "https://api.github.com/users/BrettStatman/events{/privacy}", "received_events_url": "https://api.github.com/users/BrettStatman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-06T19:33:16Z", "updated_at": "2019-12-22T14:13:03Z", "closed_at": "2019-12-22T14:12:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "In `v1.1.0` I am having trouble serializing an object with optional attributes.\r\n\r\n```\r\nimport jsons\r\n\r\nfrom dataclasses import dataclass\r\nfrom typing import List, Optional\r\n\r\n@dataclass\r\nclass Color:\r\n    name: str\r\n    hex: Optional[str]\r\n\r\n@dataclass\r\nclass Swatch:\r\n    name: str\r\n    colors: List[Color]\r\n\r\nblue = Color('blue', '#0000ff')\r\ngreen = Color('green', '#00ff00')\r\nswatch = Swatch('swatch 1', [blue, green])\r\n\r\nprint(swatch)\r\nprint(jsons.dumps(swatch))\r\n```\r\n\r\nResult\r\n```\r\nSwatch(name='swatch 1', colors=[Color(name='blue', hex='hex'), Color(name='green', hex='hex')])\r\n/site-packages/jsons/_common_impl.py:42: UserWarning: Failed to dump attribute \"hex\" of object of type \"__main__.Color\". Reason: 'NoneType' object is not callable. Ignoring the attribute. You can suppress warnings like this using jsons.suppress_warnings().\r\n  warnings.warn(msg_, *args, **kwargs)\r\n{\"colors\": [{}, {}], \"name\": \"swatch 1\"}\r\n```\r\n\r\nResult when `hex` is not optional\r\n```\r\nSwatch(name='swatch 1', colors=[Color(name='blue', hex='#0000ff'), Color(name='green', hex='#00ff00')])\r\n{\"colors\": [{\"hex\": \"#0000ff\", \"name\": \"blue\"}, {\"hex\": \"#00ff00\", \"name\": \"green\"}], \"name\": \"swatch 1\"}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/75", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/75/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/75/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/75", "id": 518799991, "node_id": "MDU6SXNzdWU1MTg3OTk5OTE=", "number": 75, "title": "Poor Performance on Serialization", "user": {"login": "ahmetkucuk", "id": 4016471, "node_id": "MDQ6VXNlcjQwMTY0NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4016471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmetkucuk", "html_url": "https://github.com/ahmetkucuk", "followers_url": "https://api.github.com/users/ahmetkucuk/followers", "following_url": "https://api.github.com/users/ahmetkucuk/following{/other_user}", "gists_url": "https://api.github.com/users/ahmetkucuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmetkucuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmetkucuk/subscriptions", "organizations_url": "https://api.github.com/users/ahmetkucuk/orgs", "repos_url": "https://api.github.com/users/ahmetkucuk/repos", "events_url": "https://api.github.com/users/ahmetkucuk/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmetkucuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1436634215, "node_id": "MDU6TGFiZWwxNDM2NjM0MjE1", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/performance", "name": "performance", "color": "7046c4", "default": false, "description": "This issue is about performance"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-11-06T21:28:11Z", "updated_at": "2019-12-04T21:05:13Z", "closed_at": "2019-12-04T21:05:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems like serialization using `jsons.dump(obj)` is at least 10 times slower than writing custom serialization method to each class. In my case, obj was a nested `dataclasses` and data was in the order of 100MBs.\r\n\r\nI can pull up some numbers but I just wanted to start a discussion if this is a known issue and if so, what might cause this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/70", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/70/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/70/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/70", "id": 482060121, "node_id": "MDU6SXNzdWU0ODIwNjAxMjE=", "number": 70, "title": "How can I easily skip certain attributes", "user": {"login": "dolfandringa", "id": 1193497, "node_id": "MDQ6VXNlcjExOTM0OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1193497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dolfandringa", "html_url": "https://github.com/dolfandringa", "followers_url": "https://api.github.com/users/dolfandringa/followers", "following_url": "https://api.github.com/users/dolfandringa/following{/other_user}", "gists_url": "https://api.github.com/users/dolfandringa/gists{/gist_id}", "starred_url": "https://api.github.com/users/dolfandringa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dolfandringa/subscriptions", "organizations_url": "https://api.github.com/users/dolfandringa/orgs", "repos_url": "https://api.github.com/users/dolfandringa/repos", "events_url": "https://api.github.com/users/dolfandringa/events{/privacy}", "received_events_url": "https://api.github.com/users/dolfandringa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745768, "node_id": "MDU6TGFiZWw5ODg3NDU3Njg=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/question", "name": "question", "color": "0fc601", "default": true, "description": "The issue describes a question"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-19T00:50:56Z", "updated_at": "2020-08-03T14:33:54Z", "closed_at": "2020-05-10T19:49:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't easily find in the docs how I can specify some attributes of my JsonSerializable class that I don't want to be serialized to JSON.\r\n\r\n```\r\nclass MyClass(JsonSerializable):\r\n    def __init__(self):\r\n        self.a = 1\r\n        self.b = 2\r\n        self.log = logging.getLogger(__name__)\r\n```\r\n\r\nIn the above case, how can I make self.log get skipped, without having to modify the `jsons.dumps` call? I want the control of what gets included in the JSON to be with the class, not the place where `dump(s/b)` is called. So I don't want to have to make them private (with '_') and add `strip_privates` to `dumps`. First of all, that would require modifying all dumps calls throughout my code, and secondly, it forces me to change my datamodel, which has consequences elsewhere in the app.\r\nAside from this example where self.log clearly isn't serializable, and also wouldn't make sense to serialize, there may be other attributes that I want to skip as well. Is this easily possible with jsons? If so, can we add a FAQ question about it? (I'd be happy to contribute it)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/67", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/67/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/67/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/67", "id": 466998889, "node_id": "MDU6SXNzdWU0NjY5OTg4ODk=", "number": 67, "title": "Can't register a forward reference as a deserializer", "user": {"login": "mjpieters", "id": 46775, "node_id": "MDQ6VXNlcjQ2Nzc1", "avatar_url": "https://avatars3.githubusercontent.com/u/46775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjpieters", "html_url": "https://github.com/mjpieters", "followers_url": "https://api.github.com/users/mjpieters/followers", "following_url": "https://api.github.com/users/mjpieters/following{/other_user}", "gists_url": "https://api.github.com/users/mjpieters/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjpieters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjpieters/subscriptions", "organizations_url": "https://api.github.com/users/mjpieters/orgs", "repos_url": "https://api.github.com/users/mjpieters/repos", "events_url": "https://api.github.com/users/mjpieters/events{/privacy}", "received_events_url": "https://api.github.com/users/mjpieters/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-11T16:42:29Z", "updated_at": "2019-07-11T21:31:13Z", "closed_at": "2019-07-11T21:31:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "`set_deserializer()` accepts either a single type or a sequence of types. While it's fine to register a generic type that holds a forward reference (e.g. a string value whose loading is deferred to later, useful when `model` would otherwise require a circular import), you can't register *just* a forward reference.\r\n\r\nThat's because a forward reference is a string, and strings are sequences. Can an exception be made here? A simple `if isinstance(cls, Sequence) and not isinstance(cls, str):` should do.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/64", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/64/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/64/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/64", "id": 464309527, "node_id": "MDU6SXNzdWU0NjQzMDk1Mjc=", "number": 64, "title": "JsonSerializable.with_load() forked subclass using .from_json does not pass in forked instance.", "user": {"login": "mjpieters", "id": 46775, "node_id": "MDQ6VXNlcjQ2Nzc1", "avatar_url": "https://avatars3.githubusercontent.com/u/46775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjpieters", "html_url": "https://github.com/mjpieters", "followers_url": "https://api.github.com/users/mjpieters/followers", "following_url": "https://api.github.com/users/mjpieters/following{/other_user}", "gists_url": "https://api.github.com/users/mjpieters/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjpieters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjpieters/subscriptions", "organizations_url": "https://api.github.com/users/mjpieters/orgs", "repos_url": "https://api.github.com/users/mjpieters/repos", "events_url": "https://api.github.com/users/mjpieters/events{/privacy}", "received_events_url": "https://api.github.com/users/mjpieters/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-04T14:59:23Z", "updated_at": "2019-07-23T18:55:25Z", "closed_at": "2019-07-23T18:55:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "You can create a forked `JsonSerializable` and attach `attr_getters` to this fork with a single `.with_load()` call, and then register deserializers. But those deserializers are ignored when using `.from_json()` on the subclass.\r\n\r\nDemo:\r\n\r\n```python\r\nimport dataclasses, datetime, jsons\r\n\r\ndefaults = {\"ham\": lambda: \"spam\"}\r\nforked = jsons.JsonSerializable.with_load(attr_getters=defaults, fork=True)\r\nforked.set_deserializer(\r\n    lambda td, cls, **kwargs: datetime.timedelta(seconds=td),\r\n    datetime.timedelta\r\n)\r\n\r\n@dataclasses.dataclass\r\nclass Foo(forked):\r\n    bar: datetime.timedelta\r\n    ham: str\r\n\r\nFoo.from_json({\"bar\": 42})\r\n```\r\n\r\nThe above demo leads to a traceback:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \".../site-packages/jsons/_load_impl.py\", line 85, in load\r\n    return deserializer(json_obj, cls, **kwargs_)\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 38, in default_object_deserializer\r\n    constructor_args = _get_constructor_args(obj, cls, **kwargs)\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 69, in _get_constructor_args\r\n    constructor_args_in_obj = {key: value for key, value in args_gen if key}\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 69, in <dictcomp>\r\n    constructor_args_in_obj = {key: value for key, value in args_gen if key}\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 68, in <genexpr>\r\n    if sig_key != 'self')\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 84, in _get_value_for_attr\r\n    if obj and sig_key in obj:\r\nTypeError: argument of type 'int' is not iterable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".../site-packages/jsons/classes/json_serializable.py\", line 123, in from_json\r\n    return cls.load(json_obj, **kwargs)\r\n  File \".../site-packages/jsons/classes/json_serializable.py\", line 93, in _wrapper\r\n    return load(inst, cls_, **{**kwargs_, **kwargs})\r\n  File \".../site-packages/jsons/_load_impl.py\", line 85, in load\r\n    return deserializer(json_obj, cls, **kwargs_)\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 38, in default_object_deserializer\r\n    constructor_args = _get_constructor_args(obj, cls, **kwargs)\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 69, in _get_constructor_args\r\n    constructor_args_in_obj = {key: value for key, value in args_gen if key}\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 69, in <dictcomp>\r\n    constructor_args_in_obj = {key: value for key, value in args_gen if key}\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 68, in <genexpr>\r\n    if sig_key != 'self')\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 87, in _get_value_for_attr\r\n    meta_hints, **kwargs)\r\n  File \".../site-packages/jsons/deserializers/default_object.py\", line 122, in _get_value_from_obj\r\n    value = load(obj[sig_key], cls_, meta_hints=new_hints, **kwargs)\r\n  File \".../site-packages/jsons/_load_impl.py\", line 89, in load\r\n    raise DeserializationError(str(err), json_obj, cls)\r\njsons.exceptions.DeserializationError: argument of type 'int' is not iterable\r\n```\r\n\r\nbecause the replacement implementation for `.load()` generated by `with_load()` does not pass in the forked instance:\r\n\r\nhttps://github.com/ramonhagenaars/jsons/blob/03b5ff94ab352ea094a3c9a6e8c82db67859a9e0/jsons/classes/json_serializable.py#L91-L95\r\n\r\nlike the original `.load()` implementation does:\r\n\r\nhttps://github.com/ramonhagenaars/jsons/blob/03b5ff94ab352ea094a3c9a6e8c82db67859a9e0/jsons/classes/json_serializable.py#L134-L143\r\n\r\nWe can work around this by creating a fork *first*, then using `forked.with_default(..., fork_inst=forked)`, but is less than ideal.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/63", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/63/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/63/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/63", "id": 461541720, "node_id": "MDU6SXNzdWU0NjE1NDE3MjA=", "number": 63, "title": "performance issues", "user": {"login": "hugoliv", "id": 4832281, "node_id": "MDQ6VXNlcjQ4MzIyODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4832281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugoliv", "html_url": "https://github.com/hugoliv", "followers_url": "https://api.github.com/users/hugoliv/followers", "following_url": "https://api.github.com/users/hugoliv/following{/other_user}", "gists_url": "https://api.github.com/users/hugoliv/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugoliv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugoliv/subscriptions", "organizations_url": "https://api.github.com/users/hugoliv/orgs", "repos_url": "https://api.github.com/users/hugoliv/repos", "events_url": "https://api.github.com/users/hugoliv/events{/privacy}", "received_events_url": "https://api.github.com/users/hugoliv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1436634215, "node_id": "MDU6TGFiZWwxNDM2NjM0MjE1", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/performance", "name": "performance", "color": "7046c4", "default": false, "description": "This issue is about performance"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-27T13:50:50Z", "updated_at": "2020-05-10T19:59:41Z", "closed_at": "2020-05-10T19:59:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nLoading a 1Go JSON file may take a while. Using the standard JSON API with the same JSON file may take approximatively 35 seconds.\r\n\r\nwith jsons: time~ 20min\r\n```\r\n    with open(json_path, \"r\") as json_file:\r\n        content = json_file.readlines()\r\n        json_data = jsons.loads(content[0], CustomObject)\r\n```\r\n\r\nThe `readlines` function take 2 or 3 seconds.\r\n\r\nwith json: time~ 35s\r\n```\r\n    with open(json_path, \"r\") as json_file:\r\n        content = json.load(json_file)\r\n        json_data = CustomObject(**content)\r\n```\r\n\r\nWhat I'm doing wrong ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/62", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/62/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/62/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/62", "id": 455367612, "node_id": "MDU6SXNzdWU0NTUzNjc2MTI=", "number": 62, "title": "Extra Parameters are set as new class variables", "user": {"login": "ahmetkucuk", "id": 4016471, "node_id": "MDQ6VXNlcjQwMTY0NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4016471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmetkucuk", "html_url": "https://github.com/ahmetkucuk", "followers_url": "https://api.github.com/users/ahmetkucuk/followers", "following_url": "https://api.github.com/users/ahmetkucuk/following{/other_user}", "gists_url": "https://api.github.com/users/ahmetkucuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmetkucuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmetkucuk/subscriptions", "organizations_url": "https://api.github.com/users/ahmetkucuk/orgs", "repos_url": "https://api.github.com/users/ahmetkucuk/repos", "events_url": "https://api.github.com/users/ahmetkucuk/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmetkucuk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-12T18:44:22Z", "updated_at": "2019-06-13T16:25:31Z", "closed_at": "2019-06-13T16:25:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I try to deserialize with extra parameters, the library creates a new variable in the object. I expect it to not create any new variables and not throw any exceptions.\r\n\r\n```\r\n>>> from dataclasses import dataclass\r\n>>> import jsons\r\n>>> \r\n>>> @dataclass\r\n... class A:\r\n...     x: int\r\n... \r\n>>> a = jsons.load({'x': 1, 'y': 'abc'}, A)\r\n>>> a.y\r\n'abc'\r\n>>> import dataclasses\r\n>>> dataclasses.asdict(a)\r\n{'x': 1}\r\n```\r\n\r\nI guess this happens in `_set_remaining_attrs`. I suggest making this call optional. \r\nOR\r\nWhen we serialize it again, it should ignore these fields.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/60", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/60/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/60/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/60", "id": 443095939, "node_id": "MDU6SXNzdWU0NDMwOTU5Mzk=", "number": 60, "title": "jsons should be stricter on loading None", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1358073301, "node_id": "MDU6TGFiZWwxMzU4MDczMzAx", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/change", "name": "change", "color": "e5802d", "default": false, "description": "The behaviour of some functionality will change"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-12T11:54:39Z", "updated_at": "2019-07-23T18:54:54Z", "closed_at": "2019-07-23T18:54:54Z", "author_association": "OWNER", "active_lock_reason": null, "body": "When deserializing, ``jsons`` accepts ``None`` when not in \"strict-mode\". It should not accept ``None`` at all, except when the target class is one of ``Any``, ``NoneType``, ``Optional[...]``, ``Union[None, ...]``.\r\n\r\nRationale:\r\n\r\n```python\r\n# Suppose some_obj happens to be None:\r\nloaded_obj = jsons.load(some_obj, SomeClass)  # loaded_obj is now None.\r\n...\r\n# Somewhere else in your code, you do:\r\nloaded_obj.some_method()  # This raises.\r\n```\r\nThe above example shows how accepting a ``None`` may be confusing and possibly lead a developer in the wrong direction by falsely declaring the deserialization to be successful. If ``jsons.load(some_obj, SomeClass)`` raised an error already, the developer may sooner realize the cause of the problem.\r\n\r\nTo summarize, here is an example:\r\n```python\r\njsons.load(None, str)\r\n```\r\nCurrent output:\r\n```python\r\nNone\r\n```\r\nDesired output:\r\n``DeserializationError`` is raised.\r\n\r\nThis was also mentioned in [Issue#56](https://github.com/ramonhagenaars/jsons/issues/56).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/57", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/57/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/57/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/57", "id": 441794814, "node_id": "MDU6SXNzdWU0NDE3OTQ4MTQ=", "number": 57, "title": "Support for UUID type", "user": {"login": "ahmetkucuk", "id": 4016471, "node_id": "MDQ6VXNlcjQwMTY0NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4016471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmetkucuk", "html_url": "https://github.com/ahmetkucuk", "followers_url": "https://api.github.com/users/ahmetkucuk/followers", "following_url": "https://api.github.com/users/ahmetkucuk/following{/other_user}", "gists_url": "https://api.github.com/users/ahmetkucuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmetkucuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmetkucuk/subscriptions", "organizations_url": "https://api.github.com/users/ahmetkucuk/orgs", "repos_url": "https://api.github.com/users/ahmetkucuk/repos", "events_url": "https://api.github.com/users/ahmetkucuk/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmetkucuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-08T15:27:30Z", "updated_at": "2019-05-12T12:01:26Z", "closed_at": "2019-05-12T12:01:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Simply transform as follows:\r\nSerializer: `uuid_str = str(uuid)`\r\nDeserializer: `uuid = uuid.UUID(uuid_str)`\r\n\r\nI am willing to implement if there is a desire to have this in the library.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/56", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/56/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/56/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/56", "id": 441771696, "node_id": "MDU6SXNzdWU0NDE3NzE2OTY=", "number": 56, "title": "jsons does not accept None values even if they are valid values", "user": {"login": "cypreess", "id": 1564334, "node_id": "MDQ6VXNlcjE1NjQzMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1564334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cypreess", "html_url": "https://github.com/cypreess", "followers_url": "https://api.github.com/users/cypreess/followers", "following_url": "https://api.github.com/users/cypreess/following{/other_user}", "gists_url": "https://api.github.com/users/cypreess/gists{/gist_id}", "starred_url": "https://api.github.com/users/cypreess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cypreess/subscriptions", "organizations_url": "https://api.github.com/users/cypreess/orgs", "repos_url": "https://api.github.com/users/cypreess/repos", "events_url": "https://api.github.com/users/cypreess/events{/privacy}", "received_events_url": "https://api.github.com/users/cypreess/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-08T14:41:21Z", "updated_at": "2019-05-12T12:03:47Z", "closed_at": "2019-05-12T12:03:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following examples:\r\n\r\n```\r\n>>> class T(NamedTuple):\r\n               o: Optional[str]\r\n\r\n>>> jsons.load({\"o\": None}, T)\r\n\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/jsons/_load_impl.py\", line 85, in load\r\n    return deserializer(json_obj, cls, **kwargs_)\r\n  File \"/usr/local/lib/python3.7/site-packages/jsons/deserializers/default_tuple.py\", line 19, in default_tuple_deserializer\r\n    return default_namedtuple_deserializer(obj, cls, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/jsons/deserializers/default_tuple.py\", line 51, in default_namedtuple_deserializer\r\n    raise UnfulfilledArgumentError(msg, field_name, obj, cls)\r\njsons.exceptions.UnfulfilledArgumentError: No value present in {'o': None} for argument \"o\"\r\n```\r\n\r\nbut also:\r\n\r\n```\r\n>>> class T(NamedTuple):\r\n               o: Any\r\n    \r\n>>> jsons.load({\"o\": None}, T)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/jsons/_load_impl.py\", line 85, in load\r\n    return deserializer(json_obj, cls, **kwargs_)\r\n  File \"/usr/local/lib/python3.7/site-packages/jsons/deserializers/default_tuple.py\", line 19, in default_tuple_deserializer\r\n    return default_namedtuple_deserializer(obj, cls, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/jsons/deserializers/default_tuple.py\", line 51, in default_namedtuple_deserializer\r\n    raise UnfulfilledArgumentError(msg, field_name, obj, cls)\r\njsons.exceptions.UnfulfilledArgumentError: No value present in {'o': None} for argument \"o\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/55", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/55/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/55/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/55", "id": 440453666, "node_id": "MDU6SXNzdWU0NDA0NTM2NjY=", "number": 55, "title": "Primitive types should be parsed upon loading if possible", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-05T14:56:26Z", "updated_at": "2019-05-12T12:01:45Z", "closed_at": "2019-05-12T12:01:41Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Example:\r\n```python\r\noutput = jsons.load(42, str)\r\n```\r\nCurrent output:\r\n```python\r\n42\r\n```\r\nDesired output:\r\n```python\r\n'42'\r\n```\r\n\r\nCurrently, there is no check whatsoever as ``jsons`` gladly loads a primitive of some type into an attribute of another primitive type. This can lead to undesired behaviour.\r\n\r\nAnother example:\r\n\r\n```python\r\noutput = jsons.load('fortytwo', int)\r\n```\r\nCurrent output:\r\n```python\r\n'fortytwo'\r\n```\r\nDesired output: a ``DeserializationError`` is raised.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/52", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/52/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/52/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/52", "id": 437264919, "node_id": "MDU6SXNzdWU0MzcyNjQ5MTk=", "number": 52, "title": "Registering custom UUID deserializer fails.", "user": {"login": "ahmetkucuk", "id": 4016471, "node_id": "MDQ6VXNlcjQwMTY0NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4016471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmetkucuk", "html_url": "https://github.com/ahmetkucuk", "followers_url": "https://api.github.com/users/ahmetkucuk/followers", "following_url": "https://api.github.com/users/ahmetkucuk/following{/other_user}", "gists_url": "https://api.github.com/users/ahmetkucuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmetkucuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmetkucuk/subscriptions", "organizations_url": "https://api.github.com/users/ahmetkucuk/orgs", "repos_url": "https://api.github.com/users/ahmetkucuk/repos", "events_url": "https://api.github.com/users/ahmetkucuk/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmetkucuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-25T15:33:04Z", "updated_at": "2019-04-26T13:25:12Z", "closed_at": "2019-04-26T06:47:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Trying to do:\r\n```\r\nimport uuid\r\nimport jsons\r\n\r\ndef custom_uuid_serializer(obj: uuid.UUID, **kwargs) -> str:\r\n\treturn str(obj)\r\n\r\ndef custom_uuid_deserializer(obj: str, cls, **kwargs) -> uuid.UUID:\r\n\treturn uuid.UUID(obj)\r\n\t\r\njsons.set_serializer(custom_uuid_serializer, uuid.UUID) # Failed...\r\njsons.set_deserializer(custom_uuid_deserializer, uuid.UUID) # Failed...\r\n```\r\n\r\nException:\r\n```\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"json_test.py\", line 36, in <module>\r\n    data = jsons.dump(hearthbeat) # It will serialize uuid to its bytes\r\n  File \"/Users/ahmetkucuk/anaconda3/envs/jsons/lib/python3.7/site-packages/jsons/_dump_impl.py\", line 52, in dump\r\n    raise SerializationError(str(err))\r\njsons.exceptions.SerializationError: 'uuid.UUID'\r\n```\r\n\r\nI think the issue is here: https://github.com/ramonhagenaars/jsons/blob/master/jsons/_lizers_impl.py#L139\r\n\r\n`        result = lizers[pname.lower()]` solves the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/51", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/51/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/51/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/51", "id": 435764386, "node_id": "MDU6SXNzdWU0MzU3NjQzODY=", "number": 51, "title": "Clearer errors should be raised upon serialization problems", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-22T15:15:43Z", "updated_at": "2019-04-26T06:47:28Z", "closed_at": "2019-04-26T06:47:28Z", "author_association": "OWNER", "active_lock_reason": null, "body": "More clear errors should be raised by ``jsons`` upon problems during serialization. For instance, it should be clear which attributes cause problems when dumping an object.\r\n\r\nRelated: [Issue#46](https://github.com/ramonhagenaars/jsons/issues/46)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/50", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/50/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/50/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/50", "id": 435762854, "node_id": "MDU6SXNzdWU0MzU3NjI4NTQ=", "number": 50, "title": "Support serialization of recursive datastructures", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-22T15:11:36Z", "updated_at": "2019-04-26T06:47:46Z", "closed_at": "2019-04-26T06:47:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The following construct causes a problem when serializing:\r\n\r\n```python\r\n@dataclass\r\nclass Narcissus:\r\n    @property\r\n    def mirror(self):\r\n        return self\r\n```\r\n\r\nAnother example:\r\n```python\r\n@dataclass\r\nclass A:\r\n    b: object\r\n\r\n@dataclass\r\nclass B:\r\n    c: object\r\n\r\n@dataclass\r\nclass C:\r\n    a: object\r\n```\r\n\r\nIn case of recursion problems during serialization, the attributes that cause the problem should be omitted and a warning should be triggered.\r\n\r\n[Issue#46](https://github.com/ramonhagenaars/jsons/issues/46) may be related.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/48", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/48/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/48/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/48", "id": 434822310, "node_id": "MDU6SXNzdWU0MzQ4MjIzMTA=", "number": 48, "title": "Private ABC attributes should be stripped by default", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-18T15:13:53Z", "updated_at": "2019-04-22T18:52:49Z", "closed_at": "2019-04-22T18:52:49Z", "author_association": "OWNER", "active_lock_reason": null, "body": "When an abstract base class is inherited from, dumping an instance of that implementation will include private abc attributes.\r\n\r\nExample:\r\n\r\n```python\r\nclass A(ABC):\r\n    pass\r\n\r\n\r\n@dataclass\r\nclass B(A):\r\n    x: int\r\n\r\n\r\ndumped = jsons.dump(B(42))\r\n```\r\nOutput:\r\n```python\r\n{'_abc_cache': [], '_abc_negative_cache': [], '_abc_negative_cache_version': 47, '_abc_registry': [], 'x': 42}\r\n```\r\n\r\nBy default, they should not be included.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/47", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/47/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/47/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/47", "id": 434117330, "node_id": "MDU6SXNzdWU0MzQxMTczMzA=", "number": 47, "title": "Add strip_attr to omit specific attributes from being dumped", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-17T06:42:49Z", "updated_at": "2019-04-22T18:53:05Z", "closed_at": "2019-04-22T18:53:05Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Sometimes it might be useful to be able to specify attributes that are not to be dumped.\r\n\r\n```python\r\njsons.dump(obj, strip_attr='attr1')\r\n\r\n# Or strip multiple:\r\njsons.dump(obj, strip_attr=('attr1', 'attr2'))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/46", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/46/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/46/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/46", "id": 434091241, "node_id": "MDU6SXNzdWU0MzQwOTEyNDE=", "number": 46, "title": "`jsons.dumps(np.array([0]))` reaches maximum recursion depth ", "user": {"login": "shaunharker", "id": 5527375, "node_id": "MDQ6VXNlcjU1MjczNzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5527375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shaunharker", "html_url": "https://github.com/shaunharker", "followers_url": "https://api.github.com/users/shaunharker/followers", "following_url": "https://api.github.com/users/shaunharker/following{/other_user}", "gists_url": "https://api.github.com/users/shaunharker/gists{/gist_id}", "starred_url": "https://api.github.com/users/shaunharker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shaunharker/subscriptions", "organizations_url": "https://api.github.com/users/shaunharker/orgs", "repos_url": "https://api.github.com/users/shaunharker/repos", "events_url": "https://api.github.com/users/shaunharker/events{/privacy}", "received_events_url": "https://api.github.com/users/shaunharker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-17T04:53:32Z", "updated_at": "2019-04-26T06:53:42Z", "closed_at": "2019-04-26T06:53:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n```python\r\nimport jsons\r\nimport numpy as np\r\njsons.dumps(np.array([0]))\r\n```\r\n\r\ncauses the following error message to repeat:\r\n\r\n```\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/anaconda3/lib/python3.7/site-packages/jsons/_main_impl.py\", line 63, in dump\r\n    return serializer(obj, cls=cls, **kwargs_)\r\n  File \"/usr/local/anaconda3/lib/python3.7/site-packages/jsons/serializers/default_object.py\", line 56, in default_object_serializer\r\n    **kwargs_)\r\n  File \"/usr/local/anaconda3/lib/python3.7/site-packages/jsons/serializers/default_dict.py\", line 25, in default_dict_serializer\r\n    strip_nulls=strip_nulls, **kwargs)\r\n  File \"/usr/local/anaconda3/lib/python3.7/site-packages/jsons/_main_impl.py\", line 65, in dump\r\n    raise SerializationError(str(err))\r\njsons.exceptions.SerializationError: maximum recursion depth exceeded in comparison\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/45", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/45/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/45/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/45", "id": 432463719, "node_id": "MDU6SXNzdWU0MzI0NjM3MTk=", "number": 45, "title": "Serializer of datetime with UTC", "user": {"login": "HuPonya", "id": 2601077, "node_id": "MDQ6VXNlcjI2MDEwNzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2601077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HuPonya", "html_url": "https://github.com/HuPonya", "followers_url": "https://api.github.com/users/HuPonya/followers", "following_url": "https://api.github.com/users/HuPonya/following{/other_user}", "gists_url": "https://api.github.com/users/HuPonya/gists{/gist_id}", "starred_url": "https://api.github.com/users/HuPonya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HuPonya/subscriptions", "organizations_url": "https://api.github.com/users/HuPonya/orgs", "repos_url": "https://api.github.com/users/HuPonya/repos", "events_url": "https://api.github.com/users/HuPonya/events{/privacy}", "received_events_url": "https://api.github.com/users/HuPonya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-12T09:07:52Z", "updated_at": "2019-04-17T10:06:51Z", "closed_at": "2019-04-17T10:06:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi~, I using udatetime and jsons, the udatetime return UTC timezone is **+00:00**\r\n```\r\nudatetime.utcnow()\r\ndatetime.datetime(2019, 4, 12, 8, 31, 12, 471970, tzinfo=+00:00)\r\n```\r\nSo, is allow to add +00:00 to _datetime_offset_str in [_datetime_impl.py](https://github.com/ramonhagenaars/jsons/blob/master/jsons/_datetime_impl.py#L59) ?\r\n```\r\nif tzone.tzname(None) not in ('UTC', 'UTC+00:00'):\r\n```\r\nedit to\r\n```\r\nif tzone.tzname(None) not in ('UTC', 'UTC+00:00', '+00:00'):\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/44", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/44/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/44/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/44", "id": 432397417, "node_id": "MDU6SXNzdWU0MzIzOTc0MTc=", "number": 44, "title": "Support for all datetime types", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-12T05:48:35Z", "updated_at": "2019-10-07T17:53:43Z", "closed_at": "2019-10-07T17:53:43Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently, only ``datetime.datetime`` is supported. All types from the ``datetime`` module should be supported. That includes: ``date``, ``time``, ``timedelta``, ``timezone``, ``tzinfo``.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/41", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/41/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/41/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/41", "id": 430169201, "node_id": "MDU6SXNzdWU0MzAxNjkyMDE=", "number": 41, "title": "Dict deserializer error", "user": {"login": "jmolinski", "id": 10248509, "node_id": "MDQ6VXNlcjEwMjQ4NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/10248509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmolinski", "html_url": "https://github.com/jmolinski", "followers_url": "https://api.github.com/users/jmolinski/followers", "following_url": "https://api.github.com/users/jmolinski/following{/other_user}", "gists_url": "https://api.github.com/users/jmolinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmolinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmolinski/subscriptions", "organizations_url": "https://api.github.com/users/jmolinski/orgs", "repos_url": "https://api.github.com/users/jmolinski/repos", "events_url": "https://api.github.com/users/jmolinski/events{/privacy}", "received_events_url": "https://api.github.com/users/jmolinski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-07T17:08:36Z", "updated_at": "2019-04-07T20:41:45Z", "closed_at": "2019-04-07T20:40:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\n```\r\n>>> jsons.load({'1': 2}, Dict[str, int])\r\nTraceback (most recent call last):\r\n  File \"/home/glen/prywatne/traktpy/venv/lib/python3.7/site-packages/jsons/_main_impl.py\", line 132, in load\r\n    return deserializer(json_obj, cls, **kwargs_)\r\nTypeError: 'NoneType' object is not callable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/glen/prywatne/traktpy/venv/lib/python3.7/site-packages/jsons/_main_impl.py\", line 136, in load\r\n    raise DeserializationError(str(err), json_obj, cls)\r\njsons.exceptions.DeserializationError: 'NoneType' object is not callable\r\n>>> \r\n```\r\n\r\nSelf-explanatory :)\r\nv0.8.5", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/40", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/40/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/40/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/40", "id": 430167626, "node_id": "MDU6SXNzdWU0MzAxNjc2MjY=", "number": 40, "title": "Deprecation warnings", "user": {"login": "jmolinski", "id": 10248509, "node_id": "MDQ6VXNlcjEwMjQ4NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/10248509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmolinski", "html_url": "https://github.com/jmolinski", "followers_url": "https://api.github.com/users/jmolinski/followers", "following_url": "https://api.github.com/users/jmolinski/following{/other_user}", "gists_url": "https://api.github.com/users/jmolinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmolinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmolinski/subscriptions", "organizations_url": "https://api.github.com/users/jmolinski/orgs", "repos_url": "https://api.github.com/users/jmolinski/repos", "events_url": "https://api.github.com/users/jmolinski/events{/privacy}", "received_events_url": "https://api.github.com/users/jmolinski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-07T16:52:10Z", "updated_at": "2019-04-07T21:04:53Z", "closed_at": "2019-04-07T20:41:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello! \r\n0.8.5 version introduced 2 deprecation warnings:\r\n\r\n```\r\n.tox/py37/lib/python3.7/site-packages/jsons/__init__.py:88\r\n  /home/glen/prywatne/traktpy/.tox/py37/lib/python3.7/site-packages/jsons/__init__.py:88: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import deque, Mapping\r\n\r\n.tox/py37/lib/python3.7/site-packages/jsons/deserializers/default_iterable.py:1\r\n  /home/glen/prywatne/traktpy/.tox/py37/lib/python3.7/site-packages/jsons/deserializers/default_iterable.py:1: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import Mapping, Iterable\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n\r\n```\r\n\r\nHave a good Sunday :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/37", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/37/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/37/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/37", "id": 427534407, "node_id": "MDU6SXNzdWU0Mjc1MzQ0MDc=", "number": 37, "title": "[bug] or [not a bug] @property serialization goes deep into recursion", "user": {"login": "arpanetus", "id": 14979358, "node_id": "MDQ6VXNlcjE0OTc5MzU4", "avatar_url": "https://avatars2.githubusercontent.com/u/14979358?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arpanetus", "html_url": "https://github.com/arpanetus", "followers_url": "https://api.github.com/users/arpanetus/followers", "following_url": "https://api.github.com/users/arpanetus/following{/other_user}", "gists_url": "https://api.github.com/users/arpanetus/gists{/gist_id}", "starred_url": "https://api.github.com/users/arpanetus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arpanetus/subscriptions", "organizations_url": "https://api.github.com/users/arpanetus/orgs", "repos_url": "https://api.github.com/users/arpanetus/repos", "events_url": "https://api.github.com/users/arpanetus/events{/privacy}", "received_events_url": "https://api.github.com/users/arpanetus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745768, "node_id": "MDU6TGFiZWw5ODg3NDU3Njg=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/question", "name": "question", "color": "0fc601", "default": true, "description": "The issue describes a question"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-01T06:34:29Z", "updated_at": "2019-04-01T08:19:42Z", "closed_at": "2019-04-01T08:19:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't really know, whether is a bug or it's ok. \r\nAnyway, adding some decorator to not to serialize *field_name* would be great, I think. \r\n![image](https://user-images.githubusercontent.com/14979358/55307552-abb43200-5479-11e9-8d13-f821e381cd44.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/35", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/35/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/35/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/35", "id": 427264188, "node_id": "MDU6SXNzdWU0MjcyNjQxODg=", "number": 35, "title": "Inherited class is lost while deserialization.", "user": {"login": "ThierryPfeiffer", "id": 49016611, "node_id": "MDQ6VXNlcjQ5MDE2NjEx", "avatar_url": "https://avatars1.githubusercontent.com/u/49016611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThierryPfeiffer", "html_url": "https://github.com/ThierryPfeiffer", "followers_url": "https://api.github.com/users/ThierryPfeiffer/followers", "following_url": "https://api.github.com/users/ThierryPfeiffer/following{/other_user}", "gists_url": "https://api.github.com/users/ThierryPfeiffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThierryPfeiffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThierryPfeiffer/subscriptions", "organizations_url": "https://api.github.com/users/ThierryPfeiffer/orgs", "repos_url": "https://api.github.com/users/ThierryPfeiffer/repos", "events_url": "https://api.github.com/users/ThierryPfeiffer/events{/privacy}", "received_events_url": "https://api.github.com/users/ThierryPfeiffer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-30T09:31:24Z", "updated_at": "2019-04-07T20:42:05Z", "closed_at": "2019-03-31T13:06:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Inherited class is lost while deserialization. In the example below, the object chmsg3 is serialized as a class ChatMessageSection with the weight attribute  ('weight': 17, '-cls': '__main__.ChatMessageSection'}]). But after deserialization the object becomes a ChatMessage.\r\n\r\n```python\r\nimport jsons\r\nfrom dataclasses import dataclass\r\nfrom typing import List\r\n\r\n@dataclass\r\nclass ChatUser:\r\n    name: str\r\n\r\n@dataclass\r\nclass ChatMessage:\r\n    user: ChatUser\r\n    msg_text: str\r\n\r\n@dataclass\r\nclass ChatMessageSection(ChatMessage):\r\n    weight: int\r\n\r\n@dataclass\r\nclass ChatMessages:\r\n    msg_list: List[ChatMessage]\r\n\r\nchmsg = ChatMessage(ChatUser(\"Thierry\"), \"Bonjour\")\r\nchmsg2 = ChatMessage(ChatUser(\"Casimir\"), \"Hello\")\r\nchmsg3 = ChatMessageSection(ChatUser(\"Leonard\"), \"Coucou\", weight=17)\r\nchat_msgs = ChatMessages([chmsg, chmsg2, chmsg3])\r\n\r\nprint(chat_msgs, end=\"\\n\\n\")\r\ndumped = jsons.dump(chat_msgs, strip_microseconds=True, verbose=jsons.Verbosity.WITH_EVERYTHING)\r\nprint(dumped, end=\"\\n\\n\")\r\ninstance = jsons.load(dumped)\r\nprint(instance, end=\"\\n\\n\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/31", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/31/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/31/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/31", "id": 426332595, "node_id": "MDU6SXNzdWU0MjYzMzI1OTU=", "number": 31, "title": "Invalid type hints result in cryptic error messages", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-28T07:09:53Z", "updated_at": "2019-12-21T21:48:11Z", "closed_at": "2019-12-21T21:44:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "When a class has an invalid type hint, deserializing into that class may cause a ``DeserializationError`` that does not help solving the issue. The error should be more descriptive.\r\n\r\nExample:\r\n\r\n```python\r\nimport datetime  # <-- Note that the module is imported, not the class.\r\nfrom dataclasses import dataclass\r\nimport jsons\r\n\r\n\r\n@dataclass\r\nclass User:\r\n    name: str\r\n    birthday: datetime\r\n\r\n\r\ndumped = { 'name': 'Albert', 'birthday': '1879-03-14T11:30:00+01:00' }\r\njsons.load(dumped, User)\r\n```\r\n\r\nThis causes:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\_main_impl.py\", line 128, in load\r\n    return deserializer(json_obj, cls, **kwargs_)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 31, in default_object_deserializer\r\n    constructor_args = _get_constructor_args(obj, cls, **kwargs)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 58, in _get_constructor_args\r\n    constructor_args_in_obj = {key: value for key, value in args_gen if key}\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 58, in <dictcomp>\r\n    constructor_args_in_obj = {key: value for key, value in args_gen if key}\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 57, in <genexpr>\r\n    in signature_parameters.items() if sig_key != 'self')\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 75, in _get_value_for_attr\r\n    meta_hints, **kwargs)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 109, in _get_value_from_obj\r\n    value = load(obj[sig_key], arg_cls, meta_hints=new_hints, **kwargs)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\_main_impl.py\", line 119, in load\r\n    deserializer = _get_deserializer(cls, fork_inst)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\_main_impl.py\", line 145, in _get_deserializer\r\n    fork_inst._classes_deserializers, fork_inst)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\_main_impl.py\", line 153, in _get_lizer\r\n    cls_name = get_class_name(cls, str.lower, fork_inst=fork_inst)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\_common_impl.py\", line 51, in get_class_name\r\n    module = _get_module(cls)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\_common_impl.py\", line 104, in _get_module\r\n    module = cls.__module__\r\nAttributeError: module 'datetime' has no attribute '__module__'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:/Projects/Personal/jsons/effe.py\", line 14, in <module>\r\n    jsons.load(dumped, User)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\_main_impl.py\", line 132, in load\r\n    raise DeserializationError(str(err), json_obj, cls)\r\njsons.exceptions.DeserializationError: module 'datetime' has no attribute '__module__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/30", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/30/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/30/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/30", "id": 426329746, "node_id": "MDU6SXNzdWU0MjYzMjk3NDY=", "number": 30, "title": "Support for NewType", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-28T07:00:50Z", "updated_at": "2019-04-07T20:42:16Z", "closed_at": "2019-04-07T20:41:28Z", "author_association": "OWNER", "active_lock_reason": null, "body": "jsons should support ``NewType`` so you could do:\r\n\r\n```python\r\nUid = NewType('uid', str)\r\n\r\n\r\n@dataclass\r\nclass User:\r\n    uid: Uid\r\n    name: str\r\n```\r\n\r\nAnd them dump and load instances without ``DeserializationErrors``.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/29", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/29/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/29/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/29", "id": 426323092, "node_id": "MDU6SXNzdWU0MjYzMjMwOTI=", "number": 29, "title": "DeserializationError with datetime or type hint", "user": {"login": "ThierryPfeiffer", "id": 49016611, "node_id": "MDQ6VXNlcjQ5MDE2NjEx", "avatar_url": "https://avatars1.githubusercontent.com/u/49016611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThierryPfeiffer", "html_url": "https://github.com/ThierryPfeiffer", "followers_url": "https://api.github.com/users/ThierryPfeiffer/followers", "following_url": "https://api.github.com/users/ThierryPfeiffer/following{/other_user}", "gists_url": "https://api.github.com/users/ThierryPfeiffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThierryPfeiffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThierryPfeiffer/subscriptions", "organizations_url": "https://api.github.com/users/ThierryPfeiffer/orgs", "repos_url": "https://api.github.com/users/ThierryPfeiffer/repos", "events_url": "https://api.github.com/users/ThierryPfeiffer/events{/privacy}", "received_events_url": "https://api.github.com/users/ThierryPfeiffer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745768, "node_id": "MDU6TGFiZWw5ODg3NDU3Njg=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/question", "name": "question", "color": "0fc601", "default": true, "description": "The issue describes a question"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-28T06:37:35Z", "updated_at": "2019-03-28T07:22:25Z", "closed_at": "2019-03-28T07:22:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm a beginner with Python. So I'm not sure if I use jsons wrong.\r\n\r\nThe first exemple below works well.\r\n\r\n```python\r\nimport jsons\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass ChatUser:\r\n    uid: str\r\n    name: str\r\n\r\ndumped = jsons.dumps(ChatUser('012451', 'Casimir'), strip_privates=True, strip_microseconds=True, verbose=True)\r\nprint(dumped)\r\ninstance = jsons.loads(dumped, ChatUser)\r\nprint(instance)\r\n```\r\n\r\nBoth following examples fail with DeserializationError. Can someone help?\r\n\r\n```python\r\nimport jsons\r\nfrom dataclasses import dataclass\r\nimport datetime\r\n\r\n@dataclass\r\nclass ChatUser:\r\n    uid: datetime\r\n    name: str\r\n\r\ndumped = jsons.dumps(ChatUser(datetime.datetime.now(), 'Casimir'), strip_privates=True, strip_microseconds=True, verbose=True)\r\nprint(dumped)\r\ninstance = jsons.loads(dumped, ChatUser)\r\nprint(instance)`\r\n```\r\n\r\n\r\n\r\n```python\r\nimport jsons\r\nfrom dataclasses import dataclass\r\nfrom typing import List, NewType\r\nUid = NewType(\"Uid\", str)\r\n\r\n@dataclass\r\nclass ChatUser:\r\n    uid: Uid\r\n    name: str\r\n\r\ndumped = jsons.dumps(ChatUser(Uid('012451'), 'Casimir'), strip_privates=True, strip_microseconds=True, verbose=True)\r\nprint(dumped)\r\ninstance = jsons.loads(dumped, ChatUser)\r\nprint(instance)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/28", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/28/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/28/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/28", "id": 424615552, "node_id": "MDU6SXNzdWU0MjQ2MTU1NTI=", "number": 28, "title": "Textual type hints crash deserialization", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-24T13:52:10Z", "updated_at": "2019-04-07T20:42:24Z", "closed_at": "2019-04-06T15:03:40Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This issue is possibly related [Issue#26](https://github.com/ramonhagenaars/jsons/issues/26).\r\n\r\nTextual type hints cannot be deserialized as ``jsons`` does not handle string type hints well. This makes it impossible to deserialize into a recursive structure.\r\n\r\nExample:\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nfrom typing import Optional\r\nimport jsons\r\n\r\n\r\n@dataclass\r\nclass Node:\r\n    value: object\r\n    next: Optional['Node']\r\n\r\n\r\nlinked_list = Node(10, Node(20, Node(30, None)))\r\ndumped = jsons.dump(linked_list)\r\n```\r\n\r\nSo far so good. The value of ``dumped`` is now:\r\n\r\n```python\r\n{'next': {'next': {'next': None, 'value': 30}, 'value': 20}, 'value': 10}\r\n```\r\n\r\nNow to deserialize:\r\n\r\n```python\r\njsons.load(dumped, Node)\r\n```\r\n\r\nThis raises the following error:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\_main_impl.py\", line 128, in load\r\n    return deserializer(json_obj, cls, **kwargs_)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 31, in default_object_deserializer\r\n    constructor_args = _get_constructor_args(obj, cls, **kwargs)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 58, in _get_constructor_args\r\n    constructor_args_in_obj = {key: value for key, value in args_gen if key}\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 58, in <dictcomp>\r\n    constructor_args_in_obj = {key: value for key, value in args_gen if key}\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 57, in <genexpr>\r\n    in signature_parameters.items() if sig_key != 'self')\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 72, in _get_value_for_attr\r\n    if obj and sig_key in obj:\r\nTypeError: argument of type 'int' is not iterable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:/Projects/Personal/jsons/effe.py\", line 20, in <module>\r\n    jsons.load(dumped, Node)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\_main_impl.py\", line 128, in load\r\n    return deserializer(json_obj, cls, **kwargs_)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 31, in default_object_deserializer\r\n    constructor_args = _get_constructor_args(obj, cls, **kwargs)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 58, in _get_constructor_args\r\n    constructor_args_in_obj = {key: value for key, value in args_gen if key}\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 58, in <dictcomp>\r\n    constructor_args_in_obj = {key: value for key, value in args_gen if key}\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 57, in <genexpr>\r\n    in signature_parameters.items() if sig_key != 'self')\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 75, in _get_value_for_attr\r\n    meta_hints, **kwargs)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\deserializers\\default_object.py\", line 109, in _get_value_from_obj\r\n    value = load(obj[sig_key], arg_cls, meta_hints=new_hints, **kwargs)\r\n  File \"C:\\Projects\\Personal\\jsons\\jsons\\_main_impl.py\", line 132, in load\r\n    raise DeserializationError(str(err), json_obj, cls)\r\njsons.exceptions.DeserializationError: argument of type 'int' is not iterable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/26", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/26/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/26/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/26", "id": 424564924, "node_id": "MDU6SXNzdWU0MjQ1NjQ5MjQ=", "number": 26, "title": "[Bug] from __future__ import annotations", "user": {"login": "jmolinski", "id": 10248509, "node_id": "MDQ6VXNlcjEwMjQ4NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/10248509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmolinski", "html_url": "https://github.com/jmolinski", "followers_url": "https://api.github.com/users/jmolinski/followers", "following_url": "https://api.github.com/users/jmolinski/following{/other_user}", "gists_url": "https://api.github.com/users/jmolinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmolinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmolinski/subscriptions", "organizations_url": "https://api.github.com/users/jmolinski/orgs", "repos_url": "https://api.github.com/users/jmolinski/repos", "events_url": "https://api.github.com/users/jmolinski/events{/privacy}", "received_events_url": "https://api.github.com/users/jmolinski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-24T01:51:58Z", "updated_at": "2019-04-07T20:42:34Z", "closed_at": "2019-04-06T15:04:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello!\r\n\r\n`from __future__ import annotations` literally destroys the library. \r\n\r\nQuick example:\r\n\r\n`foo.py`\r\n```python\r\nfrom __future__ import annotations\r\n\r\nfrom dataclasses import dataclass\r\n\r\n\r\n@dataclass\r\nclass Spam:\r\n    eggs: int\r\n\r\n\r\n@dataclass\r\nclass Baz:\r\n    qux: int\r\n    spam: Spam\r\n```\r\n\r\n`bar.py`\r\n```python\r\nfrom typing import List\r\n\r\nimport jsons\r\n\r\nfrom foo import Baz\r\n\r\ndata = [{\"qux\": 0, \"spam\": {\"eggs\": 1}}]\r\n\r\nx = jsons.load(data, List[Baz])\r\n```\r\n\r\nExpected result: `[Baz(qux=0, spam=Spam(eggs=1))]`\r\nResult: \r\n```\r\n>>> import bar\r\nTraceback (most recent call last):\r\n  File \"/home/glen/traktpy/venv/lib/python3.7/site-packages/jsons/_main_impl.py\", line 146, in load\r\n    return deserializer(json_obj, cls, **kwargs_)\r\nTypeError: 'NoneType' object is not callable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n\r\n...\r\n\r\n  File \"/home/glen/traktpy/venv/lib/python3.7/site-packages/jsons/_main_impl.py\", line 150, in load\r\n    raise DeserializationError(str(err), json_obj, cls)\r\njsons.exceptions.DeserializationError: 'NoneType' object is not callable\r\n>>> \r\n```\r\n\r\nIf you remove `from __future__ import annotations` from `foo.py` everything works as expected.\r\n\r\nhttps://www.python.org/dev/peps/pep-0563/\r\n`from __future__ import annotations` stops the interpreter from executing type annotations, they are stored as str instead. Types may be revealed during runtime using `typing.get_type_hints()`. This is going to be the default behavior in python4. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/25", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/25/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/25/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/25", "id": 423377219, "node_id": "MDU6SXNzdWU0MjMzNzcyMTk=", "number": 25, "title": "[Question] mypy_extensions.TypedDict", "user": {"login": "jmolinski", "id": 10248509, "node_id": "MDQ6VXNlcjEwMjQ4NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/10248509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmolinski", "html_url": "https://github.com/jmolinski", "followers_url": "https://api.github.com/users/jmolinski/followers", "following_url": "https://api.github.com/users/jmolinski/following{/other_user}", "gists_url": "https://api.github.com/users/jmolinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmolinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmolinski/subscriptions", "organizations_url": "https://api.github.com/users/jmolinski/orgs", "repos_url": "https://api.github.com/users/jmolinski/repos", "events_url": "https://api.github.com/users/jmolinski/events{/privacy}", "received_events_url": "https://api.github.com/users/jmolinski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1282446679, "node_id": "MDU6TGFiZWwxMjgyNDQ2Njc5", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/discussion", "name": "discussion", "color": "000000", "default": false, "description": "A discussion is wanted or still going on"}, {"id": 1282444700, "node_id": "MDU6TGFiZWwxMjgyNDQ0NzAw", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature_request", "name": "feature_request", "color": "f7f9ae", "default": false, "description": "A request for a new feature that is not decided on yet"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-20T17:20:37Z", "updated_at": "2019-04-10T11:18:25Z", "closed_at": "2019-04-10T11:18:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello!\r\n\r\nDoes the author consider adding support for the `TypedDict` from `mypy_extensions` in the future? \r\nTypedDict is extremely helpful for type hinting and code completion and its syntax is very concise. \r\nA detailed description can be found [here](https://mypy.readthedocs.io/en/latest/more_types.html#typeddict). It is also likely that it will be found in the standard library `typing` module in the future versions of Python: https://github.com/python/mypy/issues/5288\r\n\r\nAs a downside, this would introduce a dependency - `mypy_extensions`. A solution to that would be making the dependency optional the same way for example `Flask` has an optional dependency `SimpleJSON` and only uses it if this package is installed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/24", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/24/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/24/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/24", "id": 423237360, "node_id": "MDU6SXNzdWU0MjMyMzczNjA=", "number": 24, "title": "Verbosity dump does not reconstruct with correct classes", "user": {"login": "casparjespersen", "id": 811707, "node_id": "MDQ6VXNlcjgxMTcwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/811707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/casparjespersen", "html_url": "https://github.com/casparjespersen", "followers_url": "https://api.github.com/users/casparjespersen/followers", "following_url": "https://api.github.com/users/casparjespersen/following{/other_user}", "gists_url": "https://api.github.com/users/casparjespersen/gists{/gist_id}", "starred_url": "https://api.github.com/users/casparjespersen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/casparjespersen/subscriptions", "organizations_url": "https://api.github.com/users/casparjespersen/orgs", "repos_url": "https://api.github.com/users/casparjespersen/repos", "events_url": "https://api.github.com/users/casparjespersen/events{/privacy}", "received_events_url": "https://api.github.com/users/casparjespersen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-20T12:58:43Z", "updated_at": "2019-04-07T20:43:14Z", "closed_at": "2019-03-20T20:13:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Related to [this feature request](https://github.com/ramonhagenaars/jsons/issues/14), I wanted to try it out, but I can not mange to re-construct the objects given the metadata structure. Check out this script:\r\n\r\n```\r\nimport jsons\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass BarBase():\r\n    pass\r\n\r\n@dataclass\r\nclass BarA(BarBase):\r\n    a: int\r\n\r\n@dataclass\r\nclass BarB(BarBase):\r\n    b: int\r\n\r\n@dataclass\r\nclass Foo():\r\n    bar: BarBase\r\n\r\nif __name__ == \"__main__\":\r\n    f = Foo(bar=BarA(a=5))\r\n    d = jsons.dump(f, verbose=True)\r\n    o = jsons.load(d)\r\n    print(\"original:\", f)\r\n    print(\"dump:\", d)\r\n    print(\"reconstructed:\", o)\r\n```\r\n\r\nIt gives the following output (Python 3.7.2 and `jsons==0.8.0`):\r\n```\r\noriginal: Foo(bar=BarA(a=5))\r\ndump: {'bar': {'a': 5}, '-meta': {'classes': {'/bar': '__main__.BarA', '/': '__main__.Foo'}, 'dump_time': '2019-03-20T12:55:38Z'}}\r\nreconstructed: Foo(bar=BarBase())\r\n```\r\n\r\nIt appears that the serialization is done properly, but that the re-construction does not take the classes into account?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/22", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/22/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/22/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/22", "id": 421296894, "node_id": "MDU6SXNzdWU0MjEyOTY4OTQ=", "number": 22, "title": "Can't deserilize NamedTuple with values evaluating to False", "user": {"login": "cypreess", "id": 1564334, "node_id": "MDQ6VXNlcjE1NjQzMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1564334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cypreess", "html_url": "https://github.com/cypreess", "followers_url": "https://api.github.com/users/cypreess/followers", "following_url": "https://api.github.com/users/cypreess/following{/other_user}", "gists_url": "https://api.github.com/users/cypreess/gists{/gist_id}", "starred_url": "https://api.github.com/users/cypreess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cypreess/subscriptions", "organizations_url": "https://api.github.com/users/cypreess/orgs", "repos_url": "https://api.github.com/users/cypreess/repos", "events_url": "https://api.github.com/users/cypreess/events{/privacy}", "received_events_url": "https://api.github.com/users/cypreess/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-15T00:04:10Z", "updated_at": "2019-04-07T20:43:23Z", "closed_at": "2019-03-17T11:10:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider example:\r\n```\r\nclass A(NamedTuple):\r\n   a: int\r\n   b: str\r\n\r\n>>> jsons.dumps(A(0, \"\"))\r\n'[0, \"\"]'\r\n>>> jsons.loads('[0, \"\"]', A)\r\njsons.exceptions.UnfulfilledArgumentError: No value present in [0, ''] for argument \"a\"\r\n>>> jsons.loads('[1, \"\"]', A)\r\njsons.exceptions.UnfulfilledArgumentError: No value present in [1, ''] for argument \"b\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/21", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/21/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/21/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/21", "id": 420638102, "node_id": "MDU6SXNzdWU0MjA2MzgxMDI=", "number": 21, "title": "Should named tuple be serialized as tuple or like dict", "user": {"login": "cypreess", "id": 1564334, "node_id": "MDQ6VXNlcjE1NjQzMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1564334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cypreess", "html_url": "https://github.com/cypreess", "followers_url": "https://api.github.com/users/cypreess/followers", "following_url": "https://api.github.com/users/cypreess/following{/other_user}", "gists_url": "https://api.github.com/users/cypreess/gists{/gist_id}", "starred_url": "https://api.github.com/users/cypreess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cypreess/subscriptions", "organizations_url": "https://api.github.com/users/cypreess/orgs", "repos_url": "https://api.github.com/users/cypreess/repos", "events_url": "https://api.github.com/users/cypreess/events{/privacy}", "received_events_url": "https://api.github.com/users/cypreess/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-13T17:52:25Z", "updated_at": "2019-04-07T20:43:32Z", "closed_at": "2019-03-25T06:39:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Similarly to #18 I start being biased towards thinking that because of \"readability counts\" NamedTuples should be expressed like to dicts. The whole point of naming tuple positions is because of poor readability of tuples. Then we totally drop it on serialization level when we already decided we go for readability.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/19", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/19/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/19/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/19", "id": 417331743, "node_id": "MDU6SXNzdWU0MTczMzE3NDM=", "number": 19, "title": "Should it be possible to discard None-fields from dump?", "user": {"login": "casparjespersen", "id": 811707, "node_id": "MDQ6VXNlcjgxMTcwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/811707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/casparjespersen", "html_url": "https://github.com/casparjespersen", "followers_url": "https://api.github.com/users/casparjespersen/followers", "following_url": "https://api.github.com/users/casparjespersen/following{/other_user}", "gists_url": "https://api.github.com/users/casparjespersen/gists{/gist_id}", "starred_url": "https://api.github.com/users/casparjespersen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/casparjespersen/subscriptions", "organizations_url": "https://api.github.com/users/casparjespersen/orgs", "repos_url": "https://api.github.com/users/casparjespersen/repos", "events_url": "https://api.github.com/users/casparjespersen/events{/privacy}", "received_events_url": "https://api.github.com/users/casparjespersen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-05T14:41:00Z", "updated_at": "2019-03-05T15:03:25Z", "closed_at": "2019-03-05T15:03:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to throw in the idea that it should be possible to have the option of omitting a field from the dump, if its value is `None`. Intended use:\r\n\r\n```\r\n@dataclass\r\nclass Foo():\r\n    foo: int\r\n    bar: bool = None\r\n\r\njsons.dump(Foo(1))                          #output: {\"foo\": 1, \"bar\": None}\r\njsons.dump(Foo(1), omit_none=True)          #output: {\"foo\": 1}\r\njsons.dump(Foo(1, True))                    #output: {\"foo\": 1, \"bar\": True}\r\n```\r\n\r\nMaybe this is already possible using a serializer?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/18", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/18/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/18/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/18", "id": 416754901, "node_id": "MDU6SXNzdWU0MTY3NTQ5MDE=", "number": 18, "title": "Serialization of Enum type should use values rather than keys", "user": {"login": "cypreess", "id": 1564334, "node_id": "MDQ6VXNlcjE1NjQzMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1564334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cypreess", "html_url": "https://github.com/cypreess", "followers_url": "https://api.github.com/users/cypreess/followers", "following_url": "https://api.github.com/users/cypreess/following{/other_user}", "gists_url": "https://api.github.com/users/cypreess/gists{/gist_id}", "starred_url": "https://api.github.com/users/cypreess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cypreess/subscriptions", "organizations_url": "https://api.github.com/users/cypreess/orgs", "repos_url": "https://api.github.com/users/cypreess/repos", "events_url": "https://api.github.com/users/cypreess/events{/privacy}", "received_events_url": "https://api.github.com/users/cypreess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-04T11:23:22Z", "updated_at": "2019-03-04T20:55:35Z", "closed_at": "2019-03-04T20:55:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following example Enum type:\r\n```\r\nfrom enum import Enum\r\n\r\nclass TestEnum(Enum):\r\n    KEY = 'value`\r\n\r\n```\r\n\r\n`jsons.dumps(TestEnum.KEY)` will result in `\"KEY\"` (Deserialization works correctly). \r\n\r\nHowever, this is behavior is a little bit irrational in regards to what enum is (used to be in C :) ). Enums classically are used to map some \"codenames\" for binary values (like numbers 0, 1, 2, 3). Therefore the value of enum should be binary representation generally used in serialization and keys should be something assigned for it on the high level (on runtime/ in the codebase).\r\n\r\n---\r\nUpdate: just for a reference standard lib json module does not serialize Enum's at all.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/15", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/15/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/15/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/15", "id": 415527943, "node_id": "MDU6SXNzdWU0MTU1Mjc5NDM=", "number": 15, "title": "jsons can't deserialize NamedTuple", "user": {"login": "cypreess", "id": 1564334, "node_id": "MDQ6VXNlcjE1NjQzMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1564334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cypreess", "html_url": "https://github.com/cypreess", "followers_url": "https://api.github.com/users/cypreess/followers", "following_url": "https://api.github.com/users/cypreess/following{/other_user}", "gists_url": "https://api.github.com/users/cypreess/gists{/gist_id}", "starred_url": "https://api.github.com/users/cypreess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cypreess/subscriptions", "organizations_url": "https://api.github.com/users/cypreess/orgs", "repos_url": "https://api.github.com/users/cypreess/repos", "events_url": "https://api.github.com/users/cypreess/events{/privacy}", "received_events_url": "https://api.github.com/users/cypreess/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-28T09:34:54Z", "updated_at": "2019-04-07T20:43:43Z", "closed_at": "2019-03-02T16:16:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to deserialize NamedTuple I got following error:\r\n\r\n```\r\n  File \"/Users/cypreess/.virtualenvs/.../lib/python3.6/site-packages/jsons/deserializers.py\", line 83, in default_tuple_deserializer\r\n    tuple_types = getattr(cls, '__tuple_params__', cls.__args__)\r\nAttributeError: type object 'MyNamedTuple' has no attribute '__args__'\r\n```\r\n\r\nThis is different error than related issue which was solved: https://github.com/ramonhagenaars/jsons/issues/11", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/14", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/14/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/14/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/14", "id": 415162924, "node_id": "MDU6SXNzdWU0MTUxNjI5MjQ=", "number": 14, "title": "Should dump be able to also pass class type to dictionary", "user": {"login": "casparjespersen", "id": 811707, "node_id": "MDQ6VXNlcjgxMTcwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/811707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/casparjespersen", "html_url": "https://github.com/casparjespersen", "followers_url": "https://api.github.com/users/casparjespersen/followers", "following_url": "https://api.github.com/users/casparjespersen/following{/other_user}", "gists_url": "https://api.github.com/users/casparjespersen/gists{/gist_id}", "starred_url": "https://api.github.com/users/casparjespersen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/casparjespersen/subscriptions", "organizations_url": "https://api.github.com/users/casparjespersen/orgs", "repos_url": "https://api.github.com/users/casparjespersen/repos", "events_url": "https://api.github.com/users/casparjespersen/events{/privacy}", "received_events_url": "https://api.github.com/users/casparjespersen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-02-27T14:50:46Z", "updated_at": "2019-04-07T20:44:11Z", "closed_at": "2019-03-17T11:13:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say I have a class inheritance structure, and I want to generically be able to dump/load with the correct class types in the inheritance structure.\r\n\r\n```\r\n@dataclass\r\nclass A(object):\r\n    foo: int\r\n\r\n@dataclass\r\nclass B(A):\r\n    bar: int\r\n``` \r\n\r\nAssume that when loading, I do now know which class type it was dumped from. I would have to analyse the content to determine which class to load as, and then pass this to the `cls` property of `jsons.load` method.\r\n\r\nWould it make sense to implement an optional flag when dumping to a dictionary that contains information of what class type it was dumped as, that can then be used for loading?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/13", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/13/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/13/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/13", "id": 413375966, "node_id": "MDU6SXNzdWU0MTMzNzU5NjY=", "number": 13, "title": "Unproper handling of Optional", "user": {"login": "ramonhagenaars", "id": 37958579, "node_id": "MDQ6VXNlcjM3OTU4NTc5", "avatar_url": "https://avatars1.githubusercontent.com/u/37958579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramonhagenaars", "html_url": "https://github.com/ramonhagenaars", "followers_url": "https://api.github.com/users/ramonhagenaars/followers", "following_url": "https://api.github.com/users/ramonhagenaars/following{/other_user}", "gists_url": "https://api.github.com/users/ramonhagenaars/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramonhagenaars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramonhagenaars/subscriptions", "organizations_url": "https://api.github.com/users/ramonhagenaars/orgs", "repos_url": "https://api.github.com/users/ramonhagenaars/repos", "events_url": "https://api.github.com/users/ramonhagenaars/events{/privacy}", "received_events_url": "https://api.github.com/users/ramonhagenaars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-22T12:07:48Z", "updated_at": "2019-04-07T20:44:01Z", "closed_at": "2019-03-01T18:42:57Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Jsons fails on deserializing into a class with optional fields.\r\n\r\n```python\r\nclass C:\r\n    def __init__(self, x: typing.Optional[int] = None):\r\n        self.x = x\r\n\r\nloaded = jsons.load({\"x\": 1}, C)\r\n```\r\n\r\nThis raises:\r\n\r\n```python\r\nAttributeError: '_SpecialForm' object has no attribute '__name__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/12", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/12/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/12/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/12", "id": 412780992, "node_id": "MDU6SXNzdWU0MTI3ODA5OTI=", "number": 12, "title": "Should deserialization silently pass on mismatching arguments?", "user": {"login": "cypreess", "id": 1564334, "node_id": "MDQ6VXNlcjE1NjQzMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1564334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cypreess", "html_url": "https://github.com/cypreess", "followers_url": "https://api.github.com/users/cypreess/followers", "following_url": "https://api.github.com/users/cypreess/following{/other_user}", "gists_url": "https://api.github.com/users/cypreess/gists{/gist_id}", "starred_url": "https://api.github.com/users/cypreess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cypreess/subscriptions", "organizations_url": "https://api.github.com/users/cypreess/orgs", "repos_url": "https://api.github.com/users/cypreess/repos", "events_url": "https://api.github.com/users/cypreess/events{/privacy}", "received_events_url": "https://api.github.com/users/cypreess/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-21T07:17:33Z", "updated_at": "2019-04-07T20:43:53Z", "closed_at": "2019-03-01T18:42:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's consider the following example:\r\n```\r\nIn [30]: @dataclass\r\n    ...: class Test:\r\n    ...:     a: int\r\n    ...:     b: int\r\n    ...:\r\n\r\nIn [31]: Test(1,2)\r\nOut[31]: Test(a=1, b=2)\r\n\r\nIn [32]: jsons.dumps(Test(1,2))\r\nOut[32]: '{\"a\": 1, \"b\": 2}'\r\n\r\nIn [33]: jsons.loads('{\"a\": 1, \"b\": 2, \"c\": 3}', Test)\r\nOut[33]: Test(a=1, b=2)\r\n```\r\n\r\n\r\nI would expect jsons to fail in the last statement, as the protocol is not strictly the same.\r\n\r\nIs there any rationale for such behavior? If yes, that would be great to have a `strict=True` argument for jsons.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/11", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/11/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/11/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/11", "id": 412135577, "node_id": "MDU6SXNzdWU0MTIxMzU1Nzc=", "number": 11, "title": "AttributeError on deserialization into Tuple[T, ...]", "user": {"login": "haluzpav", "id": 24211726, "node_id": "MDQ6VXNlcjI0MjExNzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/24211726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haluzpav", "html_url": "https://github.com/haluzpav", "followers_url": "https://api.github.com/users/haluzpav/followers", "following_url": "https://api.github.com/users/haluzpav/following{/other_user}", "gists_url": "https://api.github.com/users/haluzpav/gists{/gist_id}", "starred_url": "https://api.github.com/users/haluzpav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haluzpav/subscriptions", "organizations_url": "https://api.github.com/users/haluzpav/orgs", "repos_url": "https://api.github.com/users/haluzpav/repos", "events_url": "https://api.github.com/users/haluzpav/events{/privacy}", "received_events_url": "https://api.github.com/users/haluzpav/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-19T21:36:04Z", "updated_at": "2019-02-20T22:05:09Z", "closed_at": "2019-02-20T22:05:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When running following code\r\n\r\n```python\r\nfrom typing import Tuple\r\nimport jsons\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass A:\r\n    tup: Tuple[str, ...]\r\n\r\na = A(('abc', 'qwe', '123'))\r\na_ser = jsons.dump(a)\r\na_deser = jsons.load(a_ser, A)\r\n```\r\n\r\nI get exception `AttributeError: 'ellipsis' object has no attribute '__origin__'` on the last line.\r\n\r\nI can simply use `List[str]` as type, but it would be nice to be able to deserialize into tuple of variable length.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/10", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/10/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/10/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/10", "id": 411230377, "node_id": "MDU6SXNzdWU0MTEyMzAzNzc=", "number": 10, "title": "Datetime offset overflow", "user": {"login": "haluzpav", "id": 24211726, "node_id": "MDQ6VXNlcjI0MjExNzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/24211726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haluzpav", "html_url": "https://github.com/haluzpav", "followers_url": "https://api.github.com/users/haluzpav/followers", "following_url": "https://api.github.com/users/haluzpav/following{/other_user}", "gists_url": "https://api.github.com/users/haluzpav/gists{/gist_id}", "starred_url": "https://api.github.com/users/haluzpav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haluzpav/subscriptions", "organizations_url": "https://api.github.com/users/haluzpav/orgs", "repos_url": "https://api.github.com/users/haluzpav/repos", "events_url": "https://api.github.com/users/haluzpav/events{/privacy}", "received_events_url": "https://api.github.com/users/haluzpav/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745762, "node_id": "MDU6TGFiZWw5ODg3NDU3NjI=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-17T20:21:55Z", "updated_at": "2019-04-07T20:43:06Z", "closed_at": "2019-03-01T18:42:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It is possible to get following anomaly:\r\n\r\n```python\r\nutc = datetime.datetime.now(tz=datetime.timezone.utc)\r\nlocal = datetime.datetime.now()\r\nprint(jsons.dump(utc))    # >>> 2019-02-17T20:14:32Z\r\nprint(jsons.dump(local))  # >>> 2019-02-18T00:14:32-20:00\r\n```\r\n\r\nI set my timezone to `+04:00`, `jsons` interprets it as `-20:00`. This suggests I am a day in future.\r\n\r\nIt is caused by the way you calculate datetime offset\r\n\r\n`hrs_delta = datetime.now().hour - gmtime().tm_hour`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/9", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/9/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/9/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/9", "id": 411093179, "node_id": "MDU6SXNzdWU0MTEwOTMxNzk=", "number": 9, "title": "Mention strip_* options in README", "user": {"login": "haluzpav", "id": 24211726, "node_id": "MDQ6VXNlcjI0MjExNzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/24211726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haluzpav", "html_url": "https://github.com/haluzpav", "followers_url": "https://api.github.com/users/haluzpav/followers", "following_url": "https://api.github.com/users/haluzpav/following{/other_user}", "gists_url": "https://api.github.com/users/haluzpav/gists{/gist_id}", "starred_url": "https://api.github.com/users/haluzpav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haluzpav/subscriptions", "organizations_url": "https://api.github.com/users/haluzpav/orgs", "repos_url": "https://api.github.com/users/haluzpav/repos", "events_url": "https://api.github.com/users/haluzpav/events{/privacy}", "received_events_url": "https://api.github.com/users/haluzpav/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1236140391, "node_id": "MDU6TGFiZWwxMjM2MTQwMzkx", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/documentation", "name": "documentation", "color": "1d76db", "default": true, "description": "The issue concerns documentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-16T17:26:02Z", "updated_at": "2019-04-07T20:42:55Z", "closed_at": "2019-03-02T16:17:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "They are too useful to be left out. :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/8", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/8/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/8/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/8", "id": 411090463, "node_id": "MDU6SXNzdWU0MTEwOTA0NjM=", "number": 8, "title": "Wrongly serialized utc datetime", "user": {"login": "haluzpav", "id": 24211726, "node_id": "MDQ6VXNlcjI0MjExNzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/24211726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haluzpav", "html_url": "https://github.com/haluzpav", "followers_url": "https://api.github.com/users/haluzpav/followers", "following_url": "https://api.github.com/users/haluzpav/following{/other_user}", "gists_url": "https://api.github.com/users/haluzpav/gists{/gist_id}", "starred_url": "https://api.github.com/users/haluzpav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haluzpav/subscriptions", "organizations_url": "https://api.github.com/users/haluzpav/orgs", "repos_url": "https://api.github.com/users/haluzpav/repos", "events_url": "https://api.github.com/users/haluzpav/events{/privacy}", "received_events_url": "https://api.github.com/users/haluzpav/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 988745764, "node_id": "MDU6TGFiZWw5ODg3NDU3NjQ=", "url": "https://api.github.com/repos/ramonhagenaars/jsons/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "A new feature that awaits implementation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-02-16T16:55:52Z", "updated_at": "2019-04-07T20:42:44Z", "closed_at": "2019-03-17T11:15:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The datetime instance is wrongly serialized if initialized from `utcnow()`. Example:\r\n\r\n``` python\r\ndt_local = datetime.datetime.now()\r\nprint(dt_local)\r\n# >>> 2019-02-16 17:48:34.714603\r\n\r\nprint(jsons.dump(dt_local))\r\n# >>> 2019-02-16T17:48:34+01:00\r\n\r\ndt_utc = datetime.datetime.utcnow()\r\nprint(dt_utc)\r\n# >>> 2019-02-16 16:48:34.715108\r\n\r\nprint(jsons.dump(dt_utc))\r\n# >>> 2019-02-16T16:48:34+01:00\r\n# this last one is clearly wrong\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/4", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/4/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/4/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/4", "id": 408752506, "node_id": "MDU6SXNzdWU0MDg3NTI1MDY=", "number": 4, "title": "strip_properties removes also privates", "user": {"login": "haluzpav", "id": 24211726, "node_id": "MDQ6VXNlcjI0MjExNzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/24211726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haluzpav", "html_url": "https://github.com/haluzpav", "followers_url": "https://api.github.com/users/haluzpav/followers", "following_url": "https://api.github.com/users/haluzpav/following{/other_user}", "gists_url": "https://api.github.com/users/haluzpav/gists{/gist_id}", "starred_url": "https://api.github.com/users/haluzpav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haluzpav/subscriptions", "organizations_url": "https://api.github.com/users/haluzpav/orgs", "repos_url": "https://api.github.com/users/haluzpav/repos", "events_url": "https://api.github.com/users/haluzpav/events{/privacy}", "received_events_url": "https://api.github.com/users/haluzpav/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-11T12:08:50Z", "updated_at": "2019-02-16T21:49:01Z", "closed_at": "2019-02-16T21:49:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As in title, `strip_privates` gets \"over-written\" by `strip_properties`. Example:\r\n\r\nhttps://gist.github.com/haluzpav/628477bdeee8e33ed40e07c2b786c2dd\r\n\r\nKinda related to previous issue #3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/3", "repository_url": "https://api.github.com/repos/ramonhagenaars/jsons", "labels_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/3/comments", "events_url": "https://api.github.com/repos/ramonhagenaars/jsons/issues/3/events", "html_url": "https://github.com/ramonhagenaars/jsons/issues/3", "id": 408598744, "node_id": "MDU6SXNzdWU0MDg1OTg3NDQ=", "number": 3, "title": "strip_properties does not work on nested objects", "user": {"login": "haluzpav", "id": 24211726, "node_id": "MDQ6VXNlcjI0MjExNzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/24211726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haluzpav", "html_url": "https://github.com/haluzpav", "followers_url": "https://api.github.com/users/haluzpav/followers", "following_url": "https://api.github.com/users/haluzpav/following{/other_user}", "gists_url": "https://api.github.com/users/haluzpav/gists{/gist_id}", "starred_url": "https://api.github.com/users/haluzpav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haluzpav/subscriptions", "organizations_url": "https://api.github.com/users/haluzpav/orgs", "repos_url": "https://api.github.com/users/haluzpav/repos", "events_url": "https://api.github.com/users/haluzpav/events{/privacy}", "received_events_url": "https://api.github.com/users/haluzpav/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-10T23:49:12Z", "updated_at": "2019-02-16T21:49:22Z", "closed_at": "2019-02-16T21:49:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Parameter `strip_properties` of `dump` function works only for top-level object. `@property` of nested objects are always included in json. See my gist example:\r\n\r\nhttps://gist.github.com/haluzpav/b578dad460cb3670d55305dc65d9d2bf\r\n\r\nIs there a way to also strip properties of nested objects?", "performed_via_github_app": null, "score": 1.0}]}